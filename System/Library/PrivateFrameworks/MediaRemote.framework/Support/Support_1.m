id sub_1001208E4(uint64_t a1)
{
  uint64_t v1;
  void v3[3];
  void v4[3];
  v3[0] = @"type";
  v3[1] = @"bundleID";
  v1 = *(void *)(a1 + 32);
  v4[0] = &off_1003BB7C8;
  v4[1] = v1;
  v3[2] = @"error";
  v4[2] = &__kCFBooleanTrue;
  return (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
}

id sub_100120A08(uint64_t a1)
{
  v5[0] = @"type";
  v5[1] = @"bundleID";
  uint64_t v1 = *(void *)(a1 + 32);
  v6[0] = &off_1003BB7E0;
  v6[1] = v1;
  v5[2] = @"relaunching";
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v6[2] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  3LL));

  return v3;
}

id sub_100120B50(uint64_t a1)
{
  v6[0] = @"type";
  v6[1] = @"bundleID";
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  v7[0] = &off_1003BB7F8;
  v7[1] = v2;
  v6[2] = @"exitCode";
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v1));
  v7[2] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  3LL));

  return v4;
}

void sub_100120DBC(_Unwind_Exception *a1)
{
}

void sub_100120F5C(_Unwind_Exception *a1)
{
}

void sub_100120F80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:*(void *)(a1 + 32)];
}

void sub_100121020(_Unwind_Exception *a1)
{
}

void sub_1001210E8(_Unwind_Exception *a1)
{
}

id sub_1001210FC(uint64_t a1, uint64_t a2, void *a3)
{
  v4 = (void *)objc_claimAutoreleasedReturnValue([a3 outputDeviceUID]);
  id v5 = [v4 isEqual:*(void *)(a1 + 32)];

  return v5;
}

void sub_100121268(_Unwind_Exception *a1)
{
}

void sub_10012127C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100121334;
  v10[3] = &qword_10039CB30;
  id v9 = v5;
  id v11 = v9;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "msv_firstWhere:", v10));
  if (!v8) {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v9];
  }
}

id sub_100121334(uint64_t a1, void *a2)
{
  v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_100121374(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 externalDevice]);
  if (([v6 disconnectWhenUndiscoverable] & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue([v5 externalDevice]);
    if ([v7 connectionState] != 3)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue([v5 endpoint]);
      v13 = (void *)objc_claimAutoreleasedReturnValue([v12 groupLeader]);
      id v14 = [v13 transportType];

      if (v14 != (id)6) {
        goto LABEL_8;
      }
      goto LABEL_5;
    }
  }

LABEL_5:
  v8 = -[NSError initWithMRError:description:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:description:",  24LL,  @"undiscoverable");
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 externalDevice]);
  unsigned int v10 = [v9 disconnectWhenUndiscoverable];

  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 externalDevice]);
    [v11 disconnect:v8];
  }

  [*(id *)(a1 + 32) _removeExternalDeviceWithEndpointIdentifier:v15 error:v8];
  [*(id *)(a1 + 40) addObject:v5];

LABEL_8:
}

void sub_100121638(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 hostedExternalDeviceManagerDidUpdateExternalDeviceMapping:*(void *)(a1 + 32)];
}

void sub_100121818(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUID]);
  unsigned int v8 = [v7 isEqual:*(void *)(a1 + 32)];

  if (v8)
  {
    uint64_t v11 = MRLogCategoryDiscovery(v9, v10);
    v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138543874;
      id v16 = v6;
      __int16 v17 = 2114;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      uint64_t v20 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[MRDHostedExternalDeviceManager] Removing hostedExternalDevice=%{public}@, outputDeviceIdentifier=%{public}@ reason=%{public}@",  (uint8_t *)&v15,  0x20u);
    }

    [*(id *)(a1 + 48) addObject:v5];
  }
}

void sub_100121A10(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_qos_class(v6, QOS_CLASS_UTILITY, 0);
  v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.mediaremote.HostedExternalDeviceManager.graveYardQueue", v3);
  id v5 = (void *)qword_1003FE058;
  qword_1003FE058 = (uint64_t)v4;
}

void sub_100121A80(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(*(void *)(a1 + 32) + 8) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  objc_sync_exit(obj);
}

void sub_100121ACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100121C64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100121C88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100121C98(uint64_t a1)
{
}

void sub_100121CA0(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v10 = a2;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([a3 externalDevice]);
  uint64_t v9 = *(void **)(a1 + 32);

  if (v8 == v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

uint64_t sub_100121EF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100121F04(uint64_t a1)
{
}

void sub_100121F0C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100121FF8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001220E8(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if (objc_msgSend(v7, "deviceID", (void)v8) == *(_DWORD *)(a1 + 48))
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v7);
          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

void sub_100122284(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        __int128 v8 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "owningClient", (void)v11));
        __int128 v10 = *(void **)(a1 + 40);

        if (v9 == v10) {
          [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v8];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v5);
  }
}

void sub_100122434(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*(void *)(*((void *)&v8 + 1) + 8LL * (void)v7) == *(void *)(a1 + 40)) {
          [*(id *)(*(void *)(a1 + 32) + 8) removeObject:(void)v8];
        }
        v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

id sub_1001226AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setRegisteredVirtualAudioDevices:*(void *)(*(void *)(a1 + 40) + 16)];
}

void sub_1001227B8(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        v7 = *(void **)(a1 + 40);
        __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)v6), "data", (void)v9));
        [v7 addObject:v8];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

id sub_100122BA8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_100122E30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100122E68(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v10 != v5) {
        objc_enumerationMutation(v2);
      }
      v7 = *(void **)(*((void *)&v9 + 1) + 8 * v6);
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_12;
      }
    }

    id v8 = v7;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;

    if (!v8) {
      return;
    }
    [*(id *)(*(void *)(a1 + 32) + 16) removeObject:v8];
    id v2 = v8;
  }

id sub_1001232B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48)) {
    return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
  }
  id result = [*(id *)(*(void *)(a1 + 32) + 8) indexOfObject:*(void *)(a1 + 40)];
  if (result == (id)0x7FFFFFFFFFFFFFFFLL) {
    return [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  }
  if (!*(_BYTE *)(a1 + 48)) {
    return [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_100123384( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100123394( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_100123878(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  id v4 = v3;
  if (*(void *)(a1 + 32)) {
    [v3 setMetadata:0];
  }
  return v4;
}

void sub_1001238B8(id a1)
{
}

int64_t sub_10012432C(id a1, MRDPlaybackQueueArtworkCacheSize *a2, MRDPlaybackQueueArtworkCacheSize *a3)
{
  return -[MRDPlaybackQueueArtworkCacheSize compare:](a3, "compare:", a2);
}

void sub_100124458(id a1, NSString *a2, NSMutableDictionary *a3, BOOL *a4)
{
  id v8 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v8, "allKeys"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "msv_filter:", &stru_1003A1A60));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 sortedArrayUsingComparator:&stru_1003A1A80]);

  if ((unint64_t)[v6 count] >= 2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastObject]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", 0LL, v7);
  }
}

BOOL sub_100124500(id a1, MRDPlaybackQueueArtworkCacheSize *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[MRDPlaybackQueueArtworkCacheSize defaultSize]( &OBJC_CLASS___MRDPlaybackQueueArtworkCacheSize,  "defaultSize"));
  unsigned __int8 v4 = -[MRDPlaybackQueueArtworkCacheSize isEqual:](v2, "isEqual:", v3);

  return v4 ^ 1;
}

int64_t sub_100124560(id a1, MRDPlaybackQueueArtworkCacheSize *a2, MRDPlaybackQueueArtworkCacheSize *a3)
{
  return -[MRDPlaybackQueueArtworkCacheSize compare:](a2, "compare:", a3);
}

void sub_1001247CC(id a1)
{
  dispatch_queue_attr_t v1 = -[MRDPlaybackQueueArtworkCacheSize initWithW:h:]( objc_alloc(&OBJC_CLASS___MRDPlaybackQueueArtworkCacheSize),  "initWithW:h:",  600.0,  600.0);
  id v2 = (void *)qword_1003FE068;
  qword_1003FE068 = (uint64_t)v1;
}

id sub_100124A34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initVolumeDataIfNeccessary];
}

void sub_100124DC4(uint64_t a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) volumeCategoryForAudioCategory:@"MediaPlayback"]);
  id v2 = (void *)qword_1003FE078;
  qword_1003FE078 = v1;
}

id sub_100125CD8()
{
  if (qword_1003FE090 != -1) {
    dispatch_once(&qword_1003FE090, &stru_1003A1AC0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE098, "AVSystemController_ServerConnectionDiedNotification");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE088, *v0);
  }
  off_1003F7980 = (uint64_t (*)())sub_100125D50;
  return (id)qword_1003FE088;
}

id sub_100125D50()
{
  return (id)qword_1003FE088;
}

void sub_100125D5C(id a1)
{
  qword_1003FE098 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

void sub_1001265D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, id a45)
{
}

const char *sub_100126628(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = -[NSString initWithFormat:]( [NSString alloc],  "initWithFormat:",  @"com.apple.mediaremote.%@.%@.%@-%d",  objc_opt_class(*(void *)(a1 + 32)),  v3,  *(void *)(*(void *)(a1 + 32) + 40),  [*(id *)(a1 + 32) pid]);

  uint64_t v5 = v4;
  uint64_t v6 = -[NSString UTF8String](v5, "UTF8String");

  return v6;
}

void sub_1001266C4(uint64_t a1)
{
  id v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"com.apple.mediaremote.%@.xpcTargetQueue", objc_opt_class(*(void *)(a1 + 32)));
  id v3 = -[NSString UTF8String](v2, "UTF8String");
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_t v6 = dispatch_queue_create(v3, v5);
  v7 = (void *)qword_1003FE0A8;
  qword_1003FE0A8 = (uint64_t)v6;

  __int128 v13 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"com.apple.mediaremote.%@.workerQueue", objc_opt_class(*(void *)(a1 + 32)));
  id v8 = -[NSString UTF8String](v13, "UTF8String");
  dispatch_queue_attr_t v9 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  __int128 v10 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v9);
  dispatch_queue_t v11 = dispatch_queue_create(v8, v10);
  __int128 v12 = (void *)qword_1003FE0A0;
  qword_1003FE0A0 = (uint64_t)v11;
}

void sub_1001267DC(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleXPCMessage:v3];
}

void sub_100126824(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _invalidate];
}

uint64_t sub_100126FC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100126FD0(uint64_t a1)
{
}

void sub_100126FD8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  dispatch_queue_attr_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10012708C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_queue_attr_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
}

void sub_100127170(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 192LL);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___MRDPairingHandler);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 192);
    *(void *)(v4 + 192) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 192LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
}

void sub_1001272B8(uint64_t a1)
{
  id v2 = *(_BYTE **)(a1 + 32);
  if (v2[130])
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bundleIdentifier]);
    if ([v3 isEqualToString:@"com.apple.iapd"])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    }

    else
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 isEqualToString:@"com.apple.iap2d"];
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 13+[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"PlaybackQueue",  @"Cache",  @"Inconsistent PlaybackQueue Cache",  0LL,  0LL, 0LL) = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

id sub_100127540(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 120) count];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result != 0LL;
  return result;
}

void sub_10012763C(void *a1)
{
  if (!*(void *)(a1[4] + 80LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v3 = a1[4];
    uint64_t v4 = *(void **)(v3 + 80);
    *(void *)(v3 + 80) = v2;
  }

  id v8 = [[MSVPair alloc] initWithFirst:a1[5] second:a1[6]];
  uint64_t v5 = (void *)a1[5];
  dispatch_queue_t v6 = *(void **)(a1[4] + 80LL);
  v7 = (void *)objc_claimAutoreleasedReturnValue([v5 requestIdentifier]);
  [v6 setObject:v8 forKeyedSubscript:v7];
}

void sub_10012777C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 80LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);

  if (v4)
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 80LL);
    dispatch_queue_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
    [v5 setObject:0 forKeyedSubscript:v6];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

void sub_1001279C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_1001279F0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 80) removeAllObjects];
}

void sub_100127BB0(_Unwind_Exception *a1)
{
}

void sub_100127BCC(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  if (WeakRetained && a2)
  {
    uint64_t v11 = 0LL;
    __int128 v12 = &v11;
    uint64_t v13 = 0x2020000000LL;
    char v14 = 0;
    block[0] = _NSConcreteStackBlock;
    block[2] = sub_100127CBC;
    block[3] = &unk_10039C6E8;
    dispatch_queue_t v6 = *(void **)(a1 + 40);
    v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
    block[1] = 3221225472LL;
    block[4] = WeakRetained;
    __int128 v10 = &v11;
    id v9 = v6;
    dispatch_sync(v7, block);
    if (*((_BYTE *)v12 + 24)) {
      [*(id *)(a1 + 32) _postNotification:*(void *)(a1 + 40)];
    }

    _Block_object_dispose(&v11, 8);
  }
}

void sub_100127CA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void *sub_100127CBC(void *result)
{
  uint64_t v1 = result[4];
  if (*(_BYTE *)(v1 + 104)) {
    return [*(id *)(v1 + 112) addObject:result[5]];
  }
  *(_BYTE *)(*(void *)(result[6] + 8LL) + 24LL) = 1;
  return result;
}

uint64_t sub_100127D54(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 104LL) = 1;
  return result;
}

void sub_100127ED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

id sub_100127EFC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 104LL) = 0;
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", *(void *)(*(void *)(a1 + 32) + 112LL)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return [*(id *)(*(void *)(a1 + 32) + 112) removeAllObjects];
}

id sub_100127FF4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 88) count];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result != 0LL;
  return result;
}

void sub_1001280AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) mutableCopy];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v2;
}

void sub_100128270(_Unwind_Exception *a1)
{
}

void sub_100128298(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_queue_t v6 = WeakRetained[2];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100128334;
    void v7[3] = &unk_100398E60;
    v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

id sub_100128334(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_100128340(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v4 = WeakRetained[7];
    id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (!v5) {
      goto LABEL_14;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v16;
    while (1)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        id v10 = [v9 type];
        if (v10 == [v9 type])
        {
          uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue([v9 name]);
          if (-[NSString isEqualToString:](v11, "isEqualToString:", *(void *)(a1 + 32)))
          {
            [v9 remainingDuration];
            double v13 = v12;
            double v14 = *(double *)(a1 + 56);

            if (v13 >= v14) {
              continue;
            }
            uint64_t v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Replaced by %@",  *(void *)(a1 + 32));
            [v9 invalidateWithReason:v11];
          }
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (!v6)
      {
LABEL_14:

        [v3[7] addObject:*(void *)(a1 + 40)];
        break;
      }
    }
  }
}

void sub_100128690(id *a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    uint64_t v4 = _MRLogForCategory(0LL, v2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] UUIDString]);
      *(_DWORD *)buf = 138412290;
      v25 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Claiming critical section for requestID: %@",  buf,  0xCu);
    }

    uint64_t v7 = objc_alloc(&OBJC_CLASS___NSString);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] UUIDString]);
    id v9 = -[NSString initWithFormat:](v7, "initWithFormat:", @"Starting playback for %@", v8);

    id v10 = objc_alloc(&OBJC_CLASS___MRDTaskAssertion);
    id v11 = [a1[5] pid];
    double v12 = (void *)objc_claimAutoreleasedReturnValue([a1[5] bundleIdentifier]);
    __int128 v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    __int16 v19 = sub_1001288C4;
    uint64_t v20 = &unk_1003A1BC8;
    v21 = WeakRetained;
    id v22 = a1[4];
    id v23 = a1[6];
    double v13 = -[MRDTaskAssertion initWithType:pid:bundleID:name:invalidationHandler:]( v10,  "initWithType:pid:bundleID:name:invalidationHandler:",  8LL,  v11,  v12,  v9,  &v17);

    -[MRDTaskAssertion invalidateInDuration:](v13, "invalidateInDuration:", 20.0);
    double v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[15] objectForKey:a1[4]]);
    if (v14)
    {
      __int128 v15 = objc_alloc(&OBJC_CLASS___NSString);
      __int128 v16 = -[NSString initWithFormat:]( v15,  "initWithFormat:",  @"Replaced by %@",  v9,  v17,  v18,  v19,  v20,  v21,  v22);
      [v14 invalidateWithReason:v16];
    }

    [WeakRetained[15] setObject:v13 forKeyedSubscript:a1[4]];
  }
}

void sub_1001288C4(void *a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = a1[4];
  if (v6)
  {
    [*(id *)(v6 + 120) removeObjectForKey:a1[5]];
    uint64_t v7 = a1[6];
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
}

void sub_1001289E0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = (id *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[15] objectForKeyedSubscript:v5]);
    uint64_t v8 = _MRLogForCategory(0LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    id v10 = v9;
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*v4 UUIDString]);
        *(_DWORD *)buf = 138412290;
        __int128 v15 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Releasing critical section claimed for requestID: %@",  buf,  0xCu);
      }

      double v12 = objc_alloc(&OBJC_CLASS___NSString);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([*v4 UUIDString]);
      double v13 = -[NSString initWithFormat:]( v12,  "initWithFormat:",  @"exited the critical section for requestID: %@",  v10);
      [v6 invalidateWithReason:v13];
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_1002BA4E8(v4, v10);
    }
  }
}

void sub_1001293D4(_Unwind_Exception *a1)
{
}

void sub_100129454(uint64_t a1, void *a2)
{
  id v3 = a2;

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);

  uint64_t v7 = _MRLogForCategory(10LL, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v4)
  {
    BOOL v10 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (v5)
    {
      if (v10) {
        sub_1002BA660(a1, v3, v9);
      }
    }

    else if (v10)
    {
      sub_1002BA578(a1, v3, v9);
    }
  }

  else
  {
    BOOL v11 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (!v11) {
        goto LABEL_13;
      }
      double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
      double v13 = (void *)objc_claimAutoreleasedReturnValue([v3 playerPath]);
      double v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v14 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v18 = 138544130;
      __int16 v19 = @"sendRemoteControlCommand";
      __int16 v20 = 2114;
      v21 = v12;
      __int16 v22 = 2114;
      id v23 = v13;
      __int16 v24 = 2048;
      uint64_t v25 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  (uint8_t *)&v18,  0x2Au);
    }

    else
    {
      if (!v11) {
        goto LABEL_13;
      }
      double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
      double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 40)];
      int v18 = 138543874;
      __int16 v19 = @"sendRemoteControlCommand";
      __int16 v20 = 2114;
      v21 = v12;
      __int16 v22 = 2048;
      id v23 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v18,  0x20u);
    }
  }

void sub_1001296A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[MRCommandResult initWithError:](objc_alloc(&OBJC_CLASS___MRCommandResult), "initWithError:", v3);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100129710(uint64_t a1, void *a2)
{
  id v3 = a2;
}

void sub_10012975C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingHandle:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingHandle:",  v3));
  id v9 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  [v4 setPredicates:v6];

  [v4 setEvents:1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10012986C;
  void v7[3] = &unk_1003A1C18;
  id v8 = *(id *)(a1 + 40);
  [v4 setUpdateHandler:v7];
}

void sub_10012986C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v13 = a4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v13 exitEvent]);

  if (v5)
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___MRCommandResult);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 exitEvent]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 context]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 status]);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v9 error]);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
    double v12 = -[MRCommandResult initWithWithSendError:description:](v6, "initWithWithSendError:description:", 19LL, v11);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100129954(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = WeakRetained[2];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1001299F0;
    void v7[3] = &unk_100398E60;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

id sub_1001299F0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_1001299FC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained[7] addObject:*(void *)(a1 + 32)];
}

void sub_100129A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace(732233816LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v5 = _MRLogForCategory(2LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandID]);
  id v8 = (char *)[v7 hash];

  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  (os_signpost_id_t)v8,  "SendCommandXPCResultFromApp",  "",  buf,  2u);
  }

  uint64_t v9 = MRCreateCommandResultFromXPCMessage(v3);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if ([v10 sendError] == 11)
  {
    dispatch_time_t v11 = dispatch_time(0LL, 1000000000LL);
    double v12 = *(void **)(a1 + 48);
    id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100129BC4;
    v14[3] = &unk_10039AD10;
    id v16 = v12;
    id v15 = v10;
    dispatch_after(v11, v13, v14);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_100129BC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100129CCC(_Unwind_Exception *a1)
{
}

void sub_100129CE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 32) _relayXPCMessage:*(void *)(a1 + 40) andReply:*(unsigned __int8 *)(a1 + 64) resultCallback:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v4 = _MRLogForCategory(8LL, v2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 40), "MRXPC_MESSAGE_ID_KEY");
      int v7 = 134217984;
      uint64_t v8 = uint64;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unable to relay message with id %lu",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_10012A0A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10012A0CC(uint64_t a1)
{
  if ((byte_1003FE0B8 & 1) == 0 && [*(id *)(*(void *)(a1 + 32) + 56) count] == (id)100)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
    unsigned int v3 = [v2 excessiveTaskAssertionsABC];

    if (v3)
    {
      id v4 = *(id *)(*(void *)(a1 + 32) + 40LL);
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(-2LL, 0LL);
      uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10012A1C8;
      block[3] = &unk_100399250;
      id v9 = v4;
      id v7 = v4;
      dispatch_async(v6, block);

      byte_1003FE0B8 = 1;
    }
  }

id sub_10012A1C8(uint64_t a1)
{
  return +[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"Excessive TaskAssertions",  @"Power",  *(void *)(a1 + 32),  0LL,  0LL,  0LL);
}

void sub_10012A218(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  id v11 = v3;
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  if (*(_BYTE *)(a1 + 64))
  {
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    uint64_t v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v6)
    {
      xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
      uint64_t v8 = reply;
      if (reply)
      {
        else {
          sub_10013A8FC(reply, v11);
        }
        xpc_connection_send_message(v6, v8);
      }
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    [*(id *)(a1 + 40) invalidateWithReason:@"Request Returned"];
    BOOL v10 = (dispatch_queue_s *)WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10012A370;
    block[3] = &unk_100398E60;
    id v13 = WeakRetained;
    id v14 = *(id *)(a1 + 40);
    dispatch_sync(v10, block);
  }
}

id sub_10012A370(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) removeObject:*(void *)(a1 + 40)];
}

void sub_10012A5A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = MRGetPlayerPathFromUserInfo(v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MRUserSettings currentSettings](&OBJC_CLASS___MRUserSettings, "currentSettings"));
  unsigned int v10 = [v9 verboseMRDMediaRemoteClientLogging];

  if (v8)
  {
    if (!v10) {
      goto LABEL_10;
    }
    uint64_t v12 = _MRLogForCategory(8LL, v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
    *(_DWORD *)v32 = 138412802;
    *(void *)&v32[4] = v14;
    *(_WORD *)&v32[12] = 2112;
    *(void *)&v32[14] = v5;
    *(_WORD *)&v32[22] = 2112;
    v33 = v8;
    id v15 = "[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@> for <%@>";
    id v16 = v13;
    uint32_t v17 = 32;
    goto LABEL_8;
  }

  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v18 = _MRLogForCategory(8LL, v11);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
    *(_DWORD *)v32 = 138412546;
    *(void *)&v32[4] = v14;
    *(_WORD *)&v32[12] = 2112;
    *(void *)&v32[14] = v5;
    id v15 = "[MRDMediaRemoteClient] Restoring connection to <%@> with notification <%@>";
    id v16 = v13;
    uint32_t v17 = 22;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, v32, v17);
  }

void sub_10012AFDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10012B004(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (v8)
  {
    [v8 MRHIDTouchEventValue];
    BOOL v10 = (v13 - 1) < 3;
  }

  else
  {
    BOOL v10 = 0;
    uint64_t v12 = 0LL;
  }

  unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 6LL * v11 + 32) = v11 + 1;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL)
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL)
  *(_WORD *)(*(void *)(*(void *)(a1 + 32) + 8LL)
           + 6LL * (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))++
           + 36) = (int)*((float *)&v12 + 1);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) >= 2u) {
    *a4 = 1;
  }
}

void sub_10012B33C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___MRDDisplayMonitor);
  uint64_t v2 = (void *)qword_1003FE0C8;
  qword_1003FE0C8 = (uint64_t)v1;
}

void sub_10012B414(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[FBSDisplayLayoutMonitorConfiguration configurationForDefaultMainDisplayMonitor]( &OBJC_CLASS___FBSDisplayLayoutMonitorConfiguration,  "configurationForDefaultMainDisplayMonitor"));
  objc_initWeak(&location, *(id *)(a1 + 32));
  id v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  id v8 = sub_10012B504;
  id v9 = &unk_1003A1D60;
  objc_copyWeak(&v10, &location);
  [v2 setTransitionHandler:&v6];
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[FBSDisplayLayoutMonitor monitorWithConfiguration:]( &OBJC_CLASS___FBSDisplayLayoutMonitor,  "monitorWithConfiguration:",  v2,  v6,  v7,  v8,  v9));
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + _Block_object_dispose((const void *)(v1 - 192), 8) = v3;

  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_10012B4E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10012B504(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = (id *)(a1 + 32);
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [WeakRetained layoutMonitor:v9 didUpdateDisplayLayout:v8 withContext:v7];
}

void sub_10012B6C8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDisplayMonitorDisplayDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_10012C3D4(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 24LL));
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"MRDisplayMonitorLayoutDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_10012C6C4(_Unwind_Exception *a1)
{
}

void sub_10012C6E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleDidReceiveResetConnectionRequest];
}

id sub_10012C70C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _maybeDeviceConnectionStatusChanged];
}

void sub_10012C928(_Unwind_Exception *a1)
{
}

void sub_10012CAF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10012CB28(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v12 = (id *)(a1 + 32);
  id v13 = a7;
  id v14 = a6;
  id v15 = a5;
  id v16 = a4;
  id v17 = a3;
  id v18 = a2;
  id WeakRetained = objc_loadWeakRetained(v12);
  [WeakRetained handleIncomingMessage:v18 type:v17 destination:v16 session:v15 messageID:v14 replyID:v13];
}

void sub_10012CF48(_Unwind_Exception *a1)
{
}

void sub_10012D134(_Unwind_Exception *a1)
{
}

void sub_10012D204(_Unwind_Exception *a1)
{
}

void sub_10012D3B0(_Unwind_Exception *a1)
{
}

void sub_10012D428(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invalidationHandler]);

  if (v2)
  {
    uint64_t v3 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  105LL,  @"Device Connection was manually reset by the peer");
    uint64_t v4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invalidationHandler]);
    ((void (**)(void, NSError *))v4)[2](v4, v3);
  }

  if ([*(id *)(a1 + 32) isConnected])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionHandler]);

    if (v5)
    {
      id v6 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionHandler]);
      v6[2]();
    }
  }

void sub_10012D8C4(_Unwind_Exception *a1)
{
}

uint64_t sub_10012D8E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_10012D8F4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16LL))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_10012D908(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10012DB5C(_Unwind_Exception *a1)
{
}

void sub_10012DB78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  105LL,  @"Device fell out of IDS service");
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_10012DFB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10012E5A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(10LL, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v9;
  if (!v5 || v6)
  {
    if (v6)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1002BA82C(a1, (uint64_t)v6, v10);
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v22 = 138543874;
      uint64_t v23 = v18;
      __int16 v24 = 2114;
      uint64_t v25 = v12;
      __int16 v26 = 2048;
      id v27 = v19;
      id v15 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v16 = v10;
      uint32_t v17 = 32;
      goto LABEL_10;
    }
  }

  else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v22 = 138544130;
    uint64_t v23 = v11;
    __int16 v24 = 2114;
    uint64_t v25 = v12;
    __int16 v26 = 2112;
    id v27 = v5;
    __int16 v28 = 2048;
    uint64_t v29 = v14;
    id v15 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    id v16 = v10;
    uint32_t v17 = 42;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v22, v17);
  }

  [*(id *)(a1 + 56) trackWithError:v6];
  (*(void (**)(void, id, id, void, uint64_t, uint64_t))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  v5,  v6,  *(void *)(a1 + 56),  v20,  v21);
}

uint64_t sub_10012E7B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012E7C4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10012E824(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createHostedEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10012E8A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v8 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 createRemoteHostedEndpoint]);
  [v7 endWithError:v6];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10012E91C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 modifyOutputContext]);
  [v4 endWithError:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10012ECD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 discoveryChannel]);
  objc_msgSend(v2, "_onIDSQueue_connectDiscoveryChannel:", v3);
}

void sub_10012F034(_Unwind_Exception *a1)
{
}

id sub_10012F1E0(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_onIDSQueue_disconnectDiscoveryChannel:",  *(void *)(*(void *)(a1 + 32) + 8));
}

void sub_10012F254(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([v1 discoveryChannel]);
  objc_msgSend(v1, "_onIDSQueue_connectDiscoveryChannel:", v2);
}

id sub_10012F350(id a1, MRAVOutputDevice *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice descriptor](a2, "descriptor"));
  [v2 setTransportType:3];
  id v3 = -[MRAVDistantOutputDevice initWithDescriptor:]( objc_alloc(&OBJC_CLASS___MRAVDistantOutputDevice),  "initWithDescriptor:",  v2);

  return v3;
}

void sub_10012F664(_Unwind_Exception *a1)
{
}

void sub_10012F930(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("com.apple.mediaremote.MRIDSCompanionDiscoverySession.discoveryChannelClientQueue", v4);
  id v3 = (void *)qword_1003FE0D0;
  qword_1003FE0D0 = (uint64_t)v2;
}

id sub_10012FBA0(void *a1)
{
  if (a1)
  {
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
    dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "msv_map:", &stru_1003A1E58));
  }

  else
  {
    dispatch_queue_t v2 = 0LL;
  }

  return v2;
}

id sub_10012FBEC(id a1, MRAVConcreteOutputDevice *a2)
{
  return -[MRAVConcreteOutputDevice uid](a2, "uid");
}

void sub_10013003C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qos_class_self();
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 80) != (_DWORD)v4)
    {
      id v15 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"priority degraded from %u -> %u",  *(unsigned int *)(a1 + 80),  v4);
      uint64_t v17 = _MRLogForCategory(10LL, v16);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        uint64_t v37 = v19;
        __int16 v38 = 2114;
        uint64_t v39 = v20;
        __int16 v40 = 2112;
        v41 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextID]);

    uint64_t v23 = _MRLogForCategory(10LL, v22);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    BOOL v24 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (!v21)
    {
      if (!v24) {
        goto LABEL_18;
      }
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v29 = *(void *)(a1 + 40);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)buf = 138543874;
      uint64_t v37 = v28;
      __int16 v38 = 2114;
      uint64_t v39 = v29;
      __int16 v40 = 2048;
      v41 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  buf,  0x20u);
      goto LABEL_17;
    }

    if (!v24) {
      goto LABEL_18;
    }
    uint64_t v25 = *(void *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)buf = 138544130;
    uint64_t v37 = v25;
    __int16 v38 = 2114;
    uint64_t v39 = v26;
    __int16 v40 = 2114;
    v41 = (NSString *)v12;
    __int16 v42 = 2048;
    v43 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  buf,  0x2Au);
LABEL_12:

LABEL_17:
    goto LABEL_18;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextID]);

  uint64_t v7 = _MRLogForCategory(10LL, v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (!v9) {
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextID]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:*(void *)(a1 + 56)];
    *(_DWORD *)buf = 138544386;
    uint64_t v37 = v10;
    __int16 v38 = 2114;
    uint64_t v39 = v11;
    __int16 v40 = 2114;
    v41 = v3;
    __int16 v42 = 2114;
    v43 = v12;
    __int16 v44 = 2048;
    uint64_t v45 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
    goto LABEL_12;
  }

  if (v9) {
    sub_1002BA91C();
  }
LABEL_18:

  id v31 = *(void **)(a1 + 72);
  if (v31)
  {
    v32 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001303D8;
    block[3] = &unk_10039AD10;
    id v35 = v31;
    v34 = v3;
    dispatch_async(v32, block);
  }
}

uint64_t sub_1001303D8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001303E8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
    [v11 setObject:v4 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceUIDs]);
    [v11 setObject:v5 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 initiator]);
    [v11 setObject:v7 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 requestID]);
    [v11 setObject:v9 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v10 postNotificationName:MRAVOutputContextModificationRequestToClearPredictedRoutesNotifications object:v3 userInfo:v11];
  }

void sub_100130544(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, id))(v3 + 16);
  id v5 = a2;
  v4(v3, v5);
  sub_1001305A0(*(id **)(a1 + 32), *(void **)(a1 + 40), *(void *)(a1 + 56), v5);
}

void sub_1001305A0(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v15 = a2;
  id v7 = a4;
  if (a1)
  {
    id v8 = [a1[1] type];
    BOOL v9 = (id *)&kMRTopologyModificationTypeAdd;
    switch((unint64_t)v8)
    {
      case 0uLL:
        goto LABEL_8;
      case 1uLL:
        goto LABEL_6;
      case 2uLL:
        BOOL v9 = (id *)&kMRTopologyModificationTypeRemove;
        goto LABEL_6;
      case 3uLL:
        BOOL v9 = (id *)&kMRTopologyModificationTypeSet;
LABEL_6:
        id v10 = *v9;
        break;
      default:
        id v10 = 0LL;
        break;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[1] requestDetails]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 reason]);
    uint64_t v13 = MRAnalyticsCompositionForLocalDevice();
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
    MRAnalyticsTrackTopologyChangeEvent(v10, v15, v12, v13, a3, v14, 1LL, v7);
  }

void sub_1001306C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[MRAVRoutingDiscoverySession discoverySessionWithEndpointFeatures:]( &OBJC_CLASS___MRAVRoutingDiscoverySession,  "discoverySessionWithEndpointFeatures:",  1LL));
    [v11 setDiscoveryMode:3];
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100130FB8;
    v34[3] = &unk_1003A1F10;
    uint64_t v12 = v10;
    id v35 = v12;
    uint64_t v36 = a1;
    id v40 = v9;
    id v37 = v7;
    id v38 = v8;
    id v39 = v11;
    id v29 = v11;
    id v30 = v8;
    uint64_t v13 = objc_retainBlock(v34);
    id v27 = objc_alloc_init(&OBJC_CLASS___MRAVLightweightReconnaissanceSession);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) outputDeviceUIDs]);
    v41[0] = &stru_1003AE680;
    id v14 = off_1003F7998();
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v41[1] = v15;
    id v16 = off_1003F79A0();
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v41[2] = v17;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v41, 3LL));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    id v20 = v7;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 requestID]);
    qos_class_t v22 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v22, 0LL);
    BOOL v24 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100132EA0;
    v31[3] = &unk_1003A1F38;
    v32 = v12;
    id v33 = v13;
    uint64_t v25 = v13;
    uint64_t v28 = v12;
    [v27 searchForOutputDevices:v26 categories:v18 timeout:v21 reason:v24 queue:v31 completion:7.0];

    id v7 = v20;
    id v8 = v30;
  }
}

uint64_t sub_100130F98(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

void sub_100130FB8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]
    || (uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs]),
        id v22 = [v21 count],
        v21,
        !v22))
  {
    if ([*(id *)(a1 + 48) type] == 1
      && (dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mr_filter:", &stru_1003A1EC0)),
          id v3 = [v2 count],
          v2,
          v3))
    {
      id v31 = -[MRDOutputContextModification initWithRequest:]( objc_alloc(&OBJC_CLASS___MRDOutputContextModification),  "initWithRequest:",  *(void *)(*(void *)(a1 + 40) + 8LL));
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[MRAVConcreteOutputContext sharedSystemAudioContext]( &OBJC_CLASS___MRAVConcreteOutputContext,  "sharedSystemAudioContext"));
      -[MRDOutputContextModification modifyWithOutputContext:queue:completion:]( v31,  "modifyWithOutputContext:queue:completion:",  v4,  *(void *)(a1 + 56),  *(void *)(a1 + 72));
    }

    else
    {
      sub_100131354(*(id **)(a1 + 40), *(void **)(a1 + 48));
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 16LL), *(id *)(a1 + 32));
      id v5 = *(id *)(*(void *)(a1 + 40) + 16LL);
      uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      id v7 = v5;
      id v8 = [v7 countByEnumeratingWithState:&v37 objects:v41 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v38;
        do
        {
          id v11 = 0LL;
          do
          {
            if (*(void *)v38 != v10) {
              objc_enumerationMutation(v7);
            }
            -[NSMutableArray addObject:](v6, "addObject:", v12);

            id v11 = (char *)v11 + 1;
          }

          while (v9 != v11);
          id v9 = [v7 countByEnumeratingWithState:&v37 objects:v41 count:16];
        }

        while (v9);
      }

      uint64_t v13 = *(void *)(a1 + 40);
      id v14 = *(void **)(v13 + 24);
      *(void *)(v13 + 24) = v6;

      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = *(void **)(a1 + 48);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_10013151C;
      v32[3] = &unk_1003A1EE8;
      uint64_t v17 = *(void **)(a1 + 56);
      id v33 = *(id *)(a1 + 64);
      id v18 = *(id *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 40);
      id v20 = *(void **)(a1 + 48);
      id v36 = v18;
      uint64_t v34 = v19;
      id v35 = v20;
      sub_100131770(v15, v16, v17, v32);
    }
  }

  else
  {
    uint64_t v24 = _MRLogForCategory(0LL, v23);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_1002BA9B0((uint64_t *)(a1 + 40), v25);
    }

    uint64_t v26 = *(void *)(a1 + 72);
    id v27 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v28 = *(void *)(a1 + 32);
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs]);
    id v30 = -[NSError initWithMRError:format:]( v27,  "initWithMRError:format:",  47LL,  @"Failed to discover all output devices involved in modification: discovered=%@ vs requested=%@",  v28,  v29);
    (*(void (**)(uint64_t, NSError *))(v26 + 16))(v26, v30);
  }

BOOL sub_100131308(id a1, MRAVConcreteOutputDevice *a2)
{
  dispatch_queue_t v2 = a2;
  BOOL v3 = -[MRAVConcreteOutputDevice deviceType](v2, "deviceType") == 4
    && -[MRAVConcreteOutputDevice deviceSubtype](v2, "deviceSubtype") == 4;

  return v3;
}

void sub_100131354(id *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
    [v14 setObject:v4 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 outputDeviceUIDs]);
    [v14 setObject:v5 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v6 = sub_10012FBA0(a1);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [v14 setObject:v7 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [a1[1] type]));
    [v14 setObject:v8 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([a1[1] requestDetails]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 reason]);
    [v14 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[1] requestDetails]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 requestID]);
    [v14 setObject:v12 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v13 postNotificationName:MRAVOutputContextDidBeginModificationNotification object:v3 userInfo:v14];
  }

void sub_10013151C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setDiscoveryMode:0];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  sub_100131578(*(id **)(a1 + 40), *(void **)(a1 + 48), v4);
}

void sub_100131578(id *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v17 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    [v17 setObject:v7 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUIDs]);
    [v17 setObject:v8 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    id v9 = sub_10012FBA0(a1);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v17 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [a1[1] type]));
    [v17 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1[1] requestDetails]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    [v17 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[1] requestDetails]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestID]);
    [v17 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    [v17 setObject:v5 forKeyedSubscript:MRAVOutputContextModificationErrorUserInfoKey];
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v16 postNotificationName:MRAVOutputContextDidFinishModificationNotification object:v6 userInfo:v17];
  }

void sub_100131770(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  dispatch_queue_t queue = a3;
  id v172 = a4;
  uint64_t v184 = a1;
  v176 = v7;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 avOutputContext]);
    if (!queue)
    {
      dispatch_queue_t queue = &_dispatch_main_q;
      id v9 = &_dispatch_main_q;
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) requestDetails]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 requestID]);

    uint64_t v13 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v14 = MRGroupTopologyModificationRequestTypeDescription([*(id *)(v184 + 8) type]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = -[NSString initWithFormat:](v13, "initWithFormat:", @"%@OutputDevices", v15);

    id v17 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v18 = MRAVOutputDeviceArrayDescription(*(void *)(v184 + 16));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = -[NSString initWithFormat:](v17, "initWithFormat:", @"devices=%@ , outputContext=%@", v19, v176);

    uint64_t v21 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  v16,  v12);
    uint64_t v23 = v21;
    if (v20) {
      -[NSMutableString appendFormat:](v21, "appendFormat:", @" for %@", v20);
    }
    uint64_t v24 = _MRLogForCategory(10LL, v22);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
    }

    uint64_t v26 = objc_alloc(&OBJC_CLASS___NSString);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v8 outputDevices]);
    v170 = -[NSString initWithFormat:](v26, "initWithFormat:", @"Existing devices in context %@", v27);

    uint64_t v29 = _MRLogForCategory(10LL, v28);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v12;
      *(_WORD *)&buf[22] = 2112;
      v245 = v170;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }

    v232[0] = _NSConcreteStackBlock;
    v232[1] = 3221225472LL;
    v232[2] = sub_100133980;
    v232[3] = &unk_1003A2038;
    id v183 = v8;
    id v233 = v183;
    id v31 = v16;
    v234 = v31;
    id v175 = v12;
    id v235 = v175;
    id v32 = v176;
    id v236 = v32;
    uint64_t v237 = v184;
    v167 = v20;
    v238 = v167;
    id v165 = v10;
    id v239 = v165;
    id v241 = v172;
    dispatch_queue_t queue = queue;
    dispatch_queue_t v240 = queue;
    id v33 = objc_retainBlock(v232);
    v250 = @"com.apple.avfoundation.allows-set-output-device";
    v171 = (void *)MRMediaRemoteCopyEntitlements(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v250, 1LL));
    v174 = (void *)objc_claimAutoreleasedReturnValue( [v171 objectForKeyedSubscript:@"com.apple.avfoundation.allows-set-output-device"]);
    if (!v174 || ([v174 BOOLValue] & 1) == 0)
    {
      uint64_t v35 = _MRLogForCategory(10LL, v34);
      id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v175;
        *(_WORD *)&buf[22] = 2112;
        v245 = @"Missing entitlement needed to modify output context. Operation will likley not work";
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }
    }

    id v37 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    __int128 v38 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@<%@>", v31, v175);
    v229[0] = _NSConcreteStackBlock;
    v229[1] = 3221225472LL;
    v229[2] = sub_100133F04;
    v229[3] = &unk_10039BAB8;
    v169 = v31;
    v230 = v169;
    __int128 v39 = v33;
    id v231 = v39;
    id v40 = [v37 initWithTimeout:v38 reason:v229 handler:60.0];

    v226[0] = _NSConcreteStackBlock;
    v226[1] = 3221225472LL;
    v226[2] = sub_100133F8C;
    v226[3] = &unk_10039BAB8;
    id v168 = v40;
    id v227 = v168;
    v166 = v39;
    id v228 = v166;
    v173 = objc_retainBlock(v226);
    if ([*(id *)(v184 + 8) type] == (id)3)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) outputDeviceUIDs]);
      BOOL v42 = [v41 count] == 0;

      if (v42)
      {
        v55 = (NSMutableDictionary *)MRMediaRemoteCopyLocalAirPlayReceiverTightSyncIdentity(v43);
        v65 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v224 = 0u;
        __int128 v225 = 0u;
        __int128 v222 = 0u;
        __int128 v223 = 0u;
        v66 = (void *)objc_claimAutoreleasedReturnValue([v32 outputDevices]);
        id v67 = [v66 countByEnumeratingWithState:&v222 objects:v249 count:16];
        if (v67)
        {
          uint64_t v68 = *(void *)v223;
          do
          {
            for (i = 0LL; i != v67; i = (char *)i + 1)
            {
              if (*(void *)v223 != v68) {
                objc_enumerationMutation(v66);
              }
              v70 = *(void **)(*((void *)&v222 + 1) + 8LL * (void)i);
              if (([v70 isLocalDevice] & 1) == 0)
              {
                v71 = (void *)objc_claimAutoreleasedReturnValue([v70 uid]);
                unsigned __int8 v72 = [v71 isEqualToString:v55];

                if ((v72 & 1) == 0) {
                  -[NSMutableArray addObject:](v65, "addObject:", v70);
                }
              }
            }

            id v67 = [v66 countByEnumeratingWithState:&v222 objects:v249 count:16];
          }

          while (v67);
        }

        if (-[NSMutableArray count](v65, "count"))
        {
          v74 = *(void **)(v184 + 8);
          v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray msv_compactMap:](v65, "msv_compactMap:", &stru_1003A2058));
          id v76 = [v74 copyWithType:2 outputDeviceUIDs:v75];

          v77 = -[MRDOutputContextModification initWithRequest:]( objc_alloc(&OBJC_CLASS___MRDOutputContextModification),  "initWithRequest:",  v76);
          uint64_t v79 = _MRLogForCategory(10LL, v78);
          v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543874;
            *(void *)&uint8_t buf[4] = v169;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v175;
            *(_WORD *)&buf[22] = 2112;
            v245 = @"instead of setting nil devices removing all non local devices...";
            _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
          }

          v220[0] = _NSConcreteStackBlock;
          v220[1] = 3221225472LL;
          v220[2] = sub_100133FE0;
          v220[3] = &unk_100399530;
          v221 = v173;
          sub_1001306C0(v77, v32, queue, v220);
        }

        else
        {
          uint64_t v98 = _MRLogForCategory(10LL, v73);
          v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543874;
            *(void *)&uint8_t buf[4] = v169;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v175;
            *(_WORD *)&buf[22] = 2112;
            v245 = @"instead of setting nil devices removing all non local devices, but only local devices remain so nothing to do...";
            _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
          }

          ((void (*)(void *, void))v173[2])(v173, 0LL);
        }

        goto LABEL_74;
      }
    }

    if ([*(id *)(v184 + 8) type] == (id)2
      && ([*(id *)(v184 + 8) shouldNotPauseIfLastDeviceRemoved] & 1) == 0)
    {
      v64 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
      v213[0] = _NSConcreteStackBlock;
      v213[1] = 3221225472LL;
      v213[2] = sub_100133FEC;
      v213[3] = &unk_1003A20A8;
      v219 = v173;
      id v214 = v32;
      uint64_t v215 = v184;
      v216 = v169;
      id v217 = v175;
      v218 = queue;
      +[MRDeviceInfoRequest deviceInfoForOrigin:queue:completion:]( &OBJC_CLASS___MRDeviceInfoRequest,  "deviceInfoForOrigin:queue:completion:",  v64,  v218,  v213);

      v55 = v219;
      goto LABEL_74;
    }

    __int128 v211 = 0u;
    __int128 v212 = 0u;
    __int128 v209 = 0u;
    __int128 v210 = 0u;
    id v44 = *(id *)(v184 + 24);
    id v45 = [v44 countByEnumeratingWithState:&v209 objects:v248 count:16];
    if (v45)
    {
      uint64_t v46 = *(void *)v210;
      while (2)
      {
        for (j = 0LL; j != v45; j = (char *)j + 1)
        {
          if (*(void *)v210 != v46) {
            objc_enumerationMutation(v44);
          }
          v48 = *(void **)(*((void *)&v209 + 1) + 8LL * (void)j);
          if (([v48 canBeGrouped] & 1) == 0
            && ([v48 supportsBluetoothSharing] & 1) == 0)
          {
            if ([*(id *)(v184 + 8) type] == (id)1)
            {
              unsigned int v50 = [v48 canBeGrouped];
              v51 = objc_alloc(&OBJC_CLASS___NSString);
              if (v50) {
                v52 = @"device %@ does not support bluetooth sharing";
              }
              else {
                v52 = @"device %@ is not groupable";
              }
              v53 = -[NSString initWithFormat:](v51, "initWithFormat:", v52, v48);
              ErrorWithDescription = (void *)MRMediaRemoteCreateErrorWithDescription(33LL, v53);

              ((void (*)(void *, void *))v173[2])(v173, ErrorWithDescription);
            }

            int v49 = 0;
            goto LABEL_35;
          }
        }

        id v45 = [v44 countByEnumeratingWithState:&v209 objects:v248 count:16];
        if (v45) {
          continue;
        }
        break;
      }
    }

    int v49 = 1;
LABEL_35:

    sub_1001344B4((id *)v184, v32);
    v55 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) data]);
    v57 = (objc_class *)objc_opt_class(&OBJC_CLASS___MRGroupTopologyModificationRequest);
    v58 = NSStringFromClass(v57);
    v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v55, "setObject:forKeyedSubscript:", v56, v59);

    if ((((unint64_t)[*(id *)(v184 + 24) count] > 1) & ~v49) == 0)
    {
      if ((unint64_t)[*(id *)(v184 + 24) count] >= 2
        && ![v183 supportsMultipleOutputDevices])
      {
        v97 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Output context modification failed. Output context doesn't support multiple devices");
        v181 = (void *)MRMediaRemoteCreateErrorWithDescription(34LL, v97);

        ((void (*)(void *, void *))v173[2])(v173, v181);
        goto LABEL_74;
      }

      if ([v183 supportsMultipleOutputDevices])
      {
        v61 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) password]);
        BOOL v62 = v61 == 0LL;

        if (!v62)
        {
          v178 = (void *)MRMediaRemoteCreateErrorWithDescription( 6LL,  @"output contexts that support multiple devices do not yet support passwords");
          ((void (*)(void *, void *))v173[2])(v173, v178);

LABEL_74:
          goto LABEL_75;
        }

        id v115 = [*(id *)(v184 + 8) type];
        if (v115 == (id)3)
        {
          v182 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          id v151 = off_1003F79A8();
          v152 = (void *)objc_claimAutoreleasedReturnValue(v151);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v182, "setObject:forKeyedSubscript:", v175, v152);

          id v153 = off_1003F79C8();
          v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v182, "setObject:forKeyedSubscript:", v175, v154);

          v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) fadeAudio]));
          id v156 = off_1003F79E8();
          v157 = (void *)objc_claimAutoreleasedReturnValue(v156);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v182, "setObject:forKeyedSubscript:", v155, v157);

          v158 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) muteUntilFinished]));
          id v159 = off_1003F79F0();
          v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v182, "setObject:forKeyedSubscript:", v158, v160);

          id v161 = off_1003F79F8();
          v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v182, "setObject:forKeyedSubscript:", v55, v162);

          uint64_t v163 = *(void *)(v184 + 24);
          v187[0] = _NSConcreteStackBlock;
          v187[1] = 3221225472LL;
          v187[2] = sub_100134988;
          v187[3] = &unk_1003A2120;
          v164 = v173;
          v187[4] = v184;
          id v188 = v164;
          [v183 setOutputDevices:v163 options:v182 completionHandler:v187];

          goto LABEL_74;
        }

        if (v115 == (id)2)
        {
          v180 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          id v132 = off_1003F79A8();
          v133 = (void *)objc_claimAutoreleasedReturnValue(v132);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v175, v133);

          id v134 = off_1003F79C8();
          v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v175, v135);

          v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) fadeAudio]));
          id v137 = off_1003F79D0();
          v138 = (void *)objc_claimAutoreleasedReturnValue(v137);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v136, v138);

          v139 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) requestDetails]);
          v140 = (void *)objc_claimAutoreleasedReturnValue([v139 reason]);
          LODWORD(v13_Block_object_dispose((const void *)(v1 - 192), 8) = [v140 containsString:kMRMigrateInitiatorProximity];

          if ((_DWORD)v138)
          {
            id v141 = off_1003F79D8();
            v142 = (void *)objc_claimAutoreleasedReturnValue(v141);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v180,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  v142);
          }

          id v143 = off_1003F79E0();
          v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v55, v144);

          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          v245 = (const __CFString *)sub_1001333C8;
          v246 = sub_1001333D8;
          id v247 = 0LL;
          v145 = dispatch_group_create();
          __int128 v195 = 0u;
          __int128 v196 = 0u;
          __int128 v197 = 0u;
          __int128 v198 = 0u;
          id v146 = [*(id *)(v184 + 24) copy];
          id v147 = [v146 countByEnumeratingWithState:&v195 objects:v242 count:16];
          if (v147)
          {
            uint64_t v148 = *(void *)v196;
            do
            {
              for (k = 0LL; k != v147; k = (char *)k + 1)
              {
                if (*(void *)v196 != v148) {
                  objc_enumerationMutation(v146);
                }
                uint64_t v150 = *(void *)(*((void *)&v195 + 1) + 8LL * (void)k);
                dispatch_group_enter(v145);
                v192[0] = _NSConcreteStackBlock;
                v192[1] = 3221225472LL;
                v192[2] = sub_100134930;
                v192[3] = &unk_1003A20D0;
                v194 = buf;
                v192[4] = v184;
                v193 = v145;
                [v183 removeOutputDevice:v150 options:v180 completionHandler:v192];
              }

              id v147 = [v146 countByEnumeratingWithState:&v195 objects:v242 count:16];
            }

            while (v147);
          }

          v189[0] = _NSConcreteStackBlock;
          v189[1] = 3221225472LL;
          v189[2] = sub_100134970;
          v189[3] = &unk_1003A20F8;
          v190 = v173;
          v191 = buf;
          dispatch_group_notify(v145, queue, v189);

          _Block_object_dispose(buf, 8);
        }

        else
        {
          if (v115 != (id)1) {
            goto LABEL_74;
          }
          v180 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          id v116 = off_1003F79A8();
          v117 = (void *)objc_claimAutoreleasedReturnValue(v116);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v175, v117);

          v118 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) fadeAudio]));
          id v119 = off_1003F79B0();
          v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v118, v120);

          v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) muteUntilFinished]));
          id v122 = off_1003F79B8();
          v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v121, v123);

          id v124 = off_1003F79C0();
          v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v55, v125);

          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          v245 = (const __CFString *)sub_1001333C8;
          v246 = sub_1001333D8;
          id v247 = 0LL;
          v126 = dispatch_group_create();
          __int128 v205 = 0u;
          __int128 v206 = 0u;
          __int128 v207 = 0u;
          __int128 v208 = 0u;
          id v127 = [*(id *)(v184 + 24) copy];
          id v128 = [v127 countByEnumeratingWithState:&v205 objects:v243 count:16];
          if (v128)
          {
            uint64_t v129 = *(void *)v206;
            do
            {
              for (m = 0LL; m != v128; m = (char *)m + 1)
              {
                if (*(void *)v206 != v129) {
                  objc_enumerationMutation(v127);
                }
                uint64_t v131 = *(void *)(*((void *)&v205 + 1) + 8LL * (void)m);
                dispatch_group_enter(v126);
                v202[0] = _NSConcreteStackBlock;
                v202[1] = 3221225472LL;
                v202[2] = sub_100134814;
                v202[3] = &unk_1003A20D0;
                v204 = buf;
                v202[4] = v184;
                v203 = v126;
                [v183 addOutputDevice:v131 options:v180 completionHandler:v202];
              }

              id v128 = [v127 countByEnumeratingWithState:&v205 objects:v243 count:16];
            }

            while (v128);
          }

          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100134918;
          block[3] = &unk_1003A20F8;
          v200 = v173;
          v201 = buf;
          dispatch_group_notify(v126, queue, block);

          _Block_object_dispose(buf, 8);
        }
      }

      else
      {
        uint64_t v81 = _MRLogForCategory(10LL, v60);
        v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543874;
          *(void *)&uint8_t buf[4] = v169;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v175;
          *(_WORD *)&buf[22] = 2112;
          v245 = @"outputContext does not support mutiple devices";
          _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
        }

        v180 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v83 = [*(id *)(v184 + 8) type];
        v84 = *(void **)(v184 + 8);
        if (v83 == (id)2)
        {
          if ([v84 shouldNotPauseIfLastDeviceRemoved])
          {
            id v85 = off_1003F79D8();
            v86 = (void *)objc_claimAutoreleasedReturnValue(v85);

            if (v86)
            {
              id v87 = off_1003F79D8();
              v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v180,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  v88);
            }
          }

          v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) fadeAudio]));
          id v90 = off_1003F79D0();
          v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v89, v91);

          id v92 = off_1003F79E0();
          v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v55, v93);

          v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 24) firstObject]);
          v186[0] = _NSConcreteStackBlock;
          v186[1] = 3221225472LL;
          v186[2] = sub_1001349CC;
          v186[3] = &unk_1003A2120;
          v95 = v186;
          v96 = v173;
          v186[4] = v184;
          v186[5] = v96;
          [v183 removeOutputDevice:v94 options:v180 completionHandler:v186];
        }

        else
        {
          v100 = (void *)objc_claimAutoreleasedReturnValue([v84 password]);

          if (v100)
          {
            v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 8) password]);
            id v102 = off_1003F7A00();
            v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v101, v103);

            id v104 = off_1003F7A08();
            v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v180,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  v105);
          }

          v106 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) fadeAudio]));
          id v107 = off_1003F7A10();
          v108 = (void *)objc_claimAutoreleasedReturnValue(v107);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v106, v108);

          v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(v184 + 8) muteUntilFinished]));
          id v110 = off_1003F7A18();
          v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v109, v111);

          id v112 = off_1003F7A20();
          v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v180, "setObject:forKeyedSubscript:", v55, v113);

          v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v184 + 24) firstObject]);
          v185[0] = _NSConcreteStackBlock;
          v185[1] = 3221225472LL;
          v185[2] = sub_100134A10;
          v185[3] = &unk_1003A2120;
          v95 = v185;
          v114 = v173;
          v185[4] = v184;
          v185[5] = v114;
          [v183 setOutputDevice:v94 options:v180 completionHandler:v185];
        }
      }

      goto LABEL_74;
    }

    v63 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Output context modification failed. Attempted to group multiple devices where at least one is not groupable");
    v179 = (void *)MRMediaRemoteCreateErrorWithDescription(33LL, v63);

    ((void (*)(void *, void *))v173[2])(v173, v179);
    goto LABEL_74;
  }

LABEL_75:
}

    swift_bridgeObjectRelease();
    v220 = (uint64_t)v425;
    v226 = v426;
    id v227 = v391;
    v113 = (uint64_t)v417;
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_71:
    v220 = (uint64_t)v425;
    v221 = v425[2];
    if (v221)
    {
      __int128 v222 = (uint64_t)v425
           + ((*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80));
      __int128 v223 = v423[9];
      swift_bridgeObjectRetain();
      __int128 v224 = (uint64_t)v377;
      while (1)
      {
        sub_1001A80F8(v222, v224, type metadata accessor for HostedRoutingItem);
        __int128 v225 = *(unsigned __int8 *)(v224 + *(int *)(v416 + 36));
        sub_1001A813C(v224, type metadata accessor for HostedRoutingItem);
        if (v225 != 1) {
          break;
        }
        v222 += v223;
        if (!--v221) {
          goto LABEL_75;
        }
      }

      v282 = (uint64_t)v425;
      swift_bridgeObjectRelease();
      sub_10019BDA0(v282, v392, (unint64_t *)&v437, (unint64_t *)&v436);
      swift_bridgeObjectRelease();
      sub_1001A813C(v374, type metadata accessor for HostedRoutingSession);
      sub_1001A813C(v408, type metadata accessor for HostedRoutingSessionSnapshot);
      LODWORD(v113) = 0;
      v108 = v426;
      goto LABEL_35;
    }

    v226 = v426;
    id v227 = v391;
  }

  v426 = v226;
  *(void *)&v431 = &_swiftEmptySetSingleton;
  id v228 = *(uint64_t **)(v374 + 16);
  v417 = (char *)v228[2];
  if (v417)
  {
    v229 = *(void *)(v220 + 16);
    v230 = (*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80);
    v416 = (uint64_t)v228 + v230;
    v414 = v230;
    v415 = (void *)(v220 + v230);
    swift_bridgeObjectRetain();
    id v231 = 0LL;
    v232 = type metadata accessor for HostedRoutingItem;
    do
    {
      if ((unint64_t)v231 >= v228[2])
      {
        __break(1u);
LABEL_185:
        __break(1u);
        goto LABEL_186;
      }

      id v233 = v423[9];
      sub_1001A80F8(v416 + v233 * (void)v231, (uint64_t)v428, type metadata accessor for HostedRoutingItem);
      if (v229)
      {
        swift_bridgeObjectRetain();
        v234 = (uint64_t)v415;
        id v235 = v229;
        while (1)
        {
          sub_1001A80F8(v234, v113, type metadata accessor for HostedRoutingItem);
          id v236 = *(void *)(v113 + 8);
          uint64_t v237 = *((void *)v428 + 1);
          v238 = *(void *)v113 == *(void *)v428 && v236 == v237;
          if (v238
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v113, v236, *(void *)v428, v237, 0LL) & 1) != 0)
          {
            break;
          }

          sub_1001A813C(v113, type metadata accessor for HostedRoutingItem);
          v234 += v233;
          if (!--v235)
          {
            v220 = (uint64_t)v425;
            swift_bridgeObjectRelease();
            goto LABEL_80;
          }
        }

        swift_bridgeObjectRelease();
        id v239 = v389;
        sub_1001A81D4(v113, (uint64_t)v389, type metadata accessor for HostedRoutingItem);
        id v241 = *v239;
        dispatch_queue_t v240 = v239[1];
        swift_bridgeObjectRetain();
        sub_10015B404((uint64_t *)&v430, v241, v240);
        swift_bridgeObjectRelease();
        sub_1001A80F8((uint64_t)v239, v390, type metadata accessor for HostedRoutingItem);
        swift_beginAccess(&v437, &v430, 33LL, 0LL);
        v242 = (unint64_t)v437;
        if ((swift_isUniquelyReferenced_nonNull_native(v437) & 1) == 0) {
          v242 = sub_10019F720( 0,  *(void *)(v242 + 16) + 1LL,  1,  v242,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        v244 = *(void *)(v242 + 16);
        v243 = *(void *)(v242 + 24);
        if (v244 >= v243 >> 1) {
          v242 = sub_10019F720( v243 > 1,  v244 + 1,  1,  v242,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        *(void *)(v242 + 16) = v244 + 1;
        sub_1001A81D4(v390, v242 + v414 + v244 * v233, type metadata accessor for HostedRoutingItem);
        v437 = (void *)v242;
        swift_endAccess(&v430);
        sub_1001A813C((uint64_t)v389, type metadata accessor for HostedRoutingItem);
        v220 = (uint64_t)v425;
        id v227 = v391;
      }

    __int128 v222 = v311;
    __int128 v223 = v302;
    sub_1001A8360(v311 + *(int *)(v316 + 28), v302, &qword_1003F9450);
    __int128 v224 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v300 + 48))(v223, 1LL, v301);
    __int128 v225 = v328;
    if (v224 == 1)
    {
      sub_1001603DC(v223, &qword_1003F9450);
      v226 = sub_1001741A8();
      id v227 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v107, v226, v184);
      id v228 = v319;
      v229 = v299;
      v230 = v320;
      (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v299, v322, v320);
      id v231 = sub_1001A80F8(v222, v134, type metadata accessor for HostedRoutingSession);
      v232 = (os_log_s *)Logger.logObject.getter(v231);
      id v233 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v232, v233))
      {
        v234 = swift_slowAlloc(32LL, -1LL);
        v331 = (int *)swift_slowAlloc(96LL, -1LL);
        v334 = v331;
        *(_DWORD *)v234 = 136315650;
        id v235 = _typeName(_:qualified:)(v313, 0LL);
        v333 = sub_10015ADC4(v235, v236, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v234 + 4, v234 + 12);
        swift_bridgeObjectRelease();
        uint64_t v237 = (uint64_t *)v134;
        *(_WORD *)(v234 + 12) = 2080;
        v238 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        id v239 = v299;
        dispatch_queue_t v240 = dispatch thunk of CustomStringConvertible.description.getter(v230, v238);
        v333 = sub_10015ADC4(v240, v241, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v234 + 14, v234 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v228 + 8))(v239, v230);
        *(_WORD *)(v234 + 22) = 2080;
        v242 = *v237;
        v243 = v237[1];
        swift_bridgeObjectRetain();
        v333 = sub_10015ADC4(v242, v243, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v234 + 24, v234 + 32);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v237, type metadata accessor for HostedRoutingSession);
        _os_log_impl( (void *)&_mh_execute_header,  v232,  v233,  "[%s] Interaction: %s references item picked in session: %s, no now playing info -> no dialog",  (uint8_t *)v234,  0x20u);
        v244 = v331;
        swift_arrayDestroy(v331, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v244, -1LL, -1LL);
        swift_slowDealloc(v234, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v328 + 8))(v325, v329);
        goto LABEL_84;
      }

      sub_1001A813C(v134, type metadata accessor for HostedRoutingSession);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v229, v230);
      (*(void (**)(char *, uint64_t))(v225 + 8))(v325, v227);
    }

    else
    {
      sub_1001A81D4(v223, v303, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      v245 = sub_10024B270();
      v246 = sub_1001741A8();
      id v247 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
      v248 = v184;
      if ((v245 & 1) != 0)
      {
        v247(v135, v246, v184);
        v249 = v319;
        v250 = v320;
        v251 = v296;
        (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v296, v322, v320);
        v252 = v292;
        v253 = sub_1001A80F8(v222, v292, type metadata accessor for HostedRoutingSession);
        v254 = (os_log_s *)Logger.logObject.getter(v253);
        v255 = v248;
        v256 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v254, v256))
        {
          v257 = swift_slowAlloc(32LL, -1LL);
          v331 = (int *)swift_slowAlloc(96LL, -1LL);
          v334 = v331;
          *(_DWORD *)v257 = 136315650;
          v258 = _typeName(_:qualified:)(v313, 0LL);
          v333 = sub_10015ADC4(v258, v259, (uint64_t *)&v334);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v257 + 4, v257 + 12);
          swift_bridgeObjectRelease();
          v260 = (uint64_t *)v252;
          *(_WORD *)(v257 + 12) = 2080;
          v261 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
          v262 = v296;
          v263 = dispatch thunk of CustomStringConvertible.description.getter(v250, v261);
          v333 = sub_10015ADC4(v263, v264, (uint64_t *)&v334);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v257 + 14, v257 + 22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v249 + 8))(v262, v250);
          *(_WORD *)(v257 + 22) = 2080;
          v265 = *v260;
          v266 = v260[1];
          swift_bridgeObjectRetain();
          v333 = sub_10015ADC4(v265, v266, (uint64_t *)&v334);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v257 + 24, v257 + 32);
          swift_bridgeObjectRelease();
          sub_1001A813C((uint64_t)v260, type metadata accessor for HostedRoutingSession);
          _os_log_impl( (void *)&_mh_execute_header,  v254,  v256,  "[%s] Interaction: %s references item picked in session: %s, session is playing -> dialog",  (uint8_t *)v257,  0x20u);
          v267 = v331;
          swift_arrayDestroy(v331, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v267, -1LL, -1LL);
          swift_slowDealloc(v257, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v328 + 8))(v326, v329);
          sub_1001A813C(v303, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          v268 = v311;
        }

        else
        {

          sub_1001A813C(v252, type metadata accessor for HostedRoutingSession);
          (*(void (**)(char *, uint64_t))(v249 + 8))(v251, v250);
          (*(void (**)(char *, uint64_t))(v225 + 8))(v326, v255);
          sub_1001A813C(v303, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          v268 = v222;
        }

        sub_1001A813C(v268, type metadata accessor for HostedRoutingSession);
        return 1LL;
      }

      v269 = v297;
      v247(v297, v246, v184);
      v270 = v319;
      v271 = v320;
      (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v117, v322, v320);
      v272 = v293;
      v273 = sub_1001A80F8(v222, (uint64_t)v293, type metadata accessor for HostedRoutingSession);
      v274 = (os_log_s *)Logger.logObject.getter(v273);
      v275 = static os_log_type_t.default.getter();
      v276 = v275;
      if (os_log_type_enabled(v274, v275))
      {
        v277 = swift_slowAlloc(32LL, -1LL);
        v331 = (int *)swift_slowAlloc(96LL, -1LL);
        v334 = v331;
        *(_DWORD *)v277 = 136315650;
        LODWORD(v330) = v276;
        v278 = _typeName(_:qualified:)(v313, 0LL);
        v333 = sub_10015ADC4(v278, v279, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v277 + 4, v277 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v277 + 12) = 2080;
        v280 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        v281 = v314;
        v282 = dispatch thunk of CustomStringConvertible.description.getter(v271, v280);
        v333 = sub_10015ADC4(v282, v283, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v277 + 14, v277 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v270 + 8))(v281, v271);
        *(_WORD *)(v277 + 22) = 2080;
        v284 = *v272;
        v285 = v272[1];
        swift_bridgeObjectRetain();
        v333 = sub_10015ADC4(v284, v285, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v277 + 24, v277 + 32);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v272, type metadata accessor for HostedRoutingSession);
        _os_log_impl( (void *)&_mh_execute_header,  v274,  (os_log_type_t)v330,  "[%s] Interaction: %s references item picked in session: %s, session is not playing -> no dialog",  (uint8_t *)v277,  0x20u);
        v286 = v331;
        swift_arrayDestroy(v331, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v286, -1LL, -1LL);
        swift_slowDealloc(v277, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v328 + 8))(v297, v329);
        sub_1001A813C(v303, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        goto LABEL_84;
      }

      sub_1001A813C((uint64_t)v272, type metadata accessor for HostedRoutingSession);
      (*(void (**)(char *, uint64_t))(v270 + 8))(v117, v271);
      (*(void (**)(char *, uint64_t))(v225 + 8))(v269, v248);
      sub_1001A813C(v303, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    }

    v287 = v222;
LABEL_90:
    sub_1001A813C(v287, type metadata accessor for HostedRoutingSession);
    return 0LL;
  }

  id v159 = 0LL;
  while (v159 < *(void *)(v156 + 16))
  {
    v160 = (*(unsigned __int8 *)(v327 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80);
    id v161 = *(void *)(v327 + 72);
    sub_1001A80F8(v156 + v160 + v161 * v159, v108, type metadata accessor for HostedRoutingItem);
    if (*(_BYTE *)(v108 + v331[9]) == 1)
    {
      sub_1001A81D4(v108, v323, type metadata accessor for HostedRoutingItem);
      if ((swift_isUniquelyReferenced_nonNull_native(v157) & 1) == 0) {
        sub_1001A3FBC(0, *((void *)v157 + 2) + 1LL, 1);
      }
      v157 = v334;
      uint64_t v163 = *((void *)v334 + 2);
      v162 = *((void *)v334 + 3);
      if (v163 >= v162 >> 1)
      {
        sub_1001A3FBC(v162 > 1, v163 + 1, 1);
        v157 = v334;
      }

      *((void *)v157 + 2) = v163 + 1;
      uint64_t result = sub_1001A81D4(v323, (uint64_t)v157 + v160 + v163 * v161, type metadata accessor for HostedRoutingItem);
      id v107 = v325;
      v108 = (uint64_t)v318;
    }

    else
    {
      uint64_t result = sub_1001A813C(v108, type metadata accessor for HostedRoutingItem);
    }

    if (v158 == ++v159)
    {
      v185 = v334;
      v135 = v326;
      v157 = (int *)_swiftEmptyArrayStorage;
      goto LABEL_63;
    }
  }

  __break(1u);
LABEL_92:
  __break(1u);
  return result;
}

    return;
  }

  uint64_t v35 = sub_1002368B0();
  id v37 = *(void *)v35;
  id v36 = *((void *)v35 + 1);
  *(void *)&v128[0] = v37;
  *((void *)&v128[0] + 1) = v36;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)(v128, &type metadata for String, &protocol witness table for String);
  if (a1[2] && (__int128 v38 = sub_10015CAA4((uint64_t)v129), (v39 & 1) != 0))
  {
    sub_100160800(a1[7] + 32 * v38, (uint64_t)&v130);
  }

  else
  {
    v130 = 0u;
    uint64_t v131 = 0u;
  }

  sub_100160990((uint64_t)v129);
  if (!*((void *)&v131 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1001603DC((uint64_t)&v130, &qword_1003F9EE0);
    goto LABEL_46;
  }

  if ((swift_dynamicCast(v128, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_46:
    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v65 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v65, (uint64_t)qword_1003FF018);
    v56 = v2;
    v57 = (os_log_s *)Logger.logObject.getter(v56);
    v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v66))
    {
      v59 = swift_slowAlloc(22LL, -1LL);
      id v67 = (char **)swift_slowAlloc(8LL, -1LL);
      id v124 = (void *)swift_slowAlloc(32LL, -1LL);
      v129[0] = v124;
      *(_DWORD *)v59 = 138543618;
      *(void *)&v130 = v56;
      v125 = v32;
      uint64_t v68 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 4, v59 + 12);
      *id v67 = v56;

      *(_WORD *)(v59 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&v130 = sub_10015ADC4(v126, v13, (uint64_t *)v129);
      v63 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 14, v59 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v57,  v66,  "[%{public}@]<%{public}s> dropping push message without type",  (uint8_t *)v59,  0x16u);
      v69 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v67, 1LL, v69);
      swift_slowDealloc(v67, -1LL, -1LL);
      v70 = (char *)&type metadata for Any + 8;
LABEL_74:
      v95 = v124;
      swift_arrayDestroy(v124, 1LL, v70);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      return;
    }

    goto LABEL_75;
  }

  v51 = v128[0];
  v52 = sub_10023691C();
  if (v51 != *(_OWORD *)v52
    && (_stringCompareWithSmolCheck(_:_:expecting:)( v51,  *((void *)&v51 + 1),  *(void *)v52,  *((void *)v52 + 1),  0LL) & 1) == 0 || (v2[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) != 0)
  {
    *(void *)&v128[0] = 0x74616E6974736564LL;
    *((void *)&v128[0] + 1) = 0xEB000000006E6F69LL;
    AnyHashable.init<A>(_:)(v128, &type metadata for String, &protocol witness table for String);
    if (a1[2] && (v53 = sub_10015CAA4((uint64_t)v129), (v54 & 1) != 0))
    {
      sub_100160800(a1[7] + 32 * v53, (uint64_t)&v130);
    }

    else
    {
      v130 = 0u;
      uint64_t v131 = 0u;
    }

    sub_100160990((uint64_t)v129);
    if (*((void *)&v131 + 1))
    {
      if ((swift_dynamicCast(v128, &v130, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        v125 = v32;
        v71 = v13;
        unsigned __int8 v72 = (void *)*((void *)&v128[0] + 1);
        uint64_t v73 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
        v74 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
        if (v74)
        {
          if (__PAIR128__(v74, *(void *)v73) == v128[0])
          {
            swift_bridgeObjectRelease();
            goto LABEL_66;
          }

          v88 = _stringCompareWithSmolCheck(_:_:expecting:)( *(void *)&v128[0],  *((void *)&v128[0] + 1),  *(void *)v73,  v74,  0LL);
          swift_bridgeObjectRelease();
          if ((v88 & 1) != 0)
          {
LABEL_66:
            v89 = sub_1002368F8();
            if (v51 == *(_OWORD *)v89)
            {
              swift_bridgeObjectRelease();
              id v90 = v125;
            }

            else
            {
              v96 = _stringCompareWithSmolCheck(_:_:expecting:)( v51,  *((void *)&v51 + 1),  *(void *)v89,  *((void *)v89 + 1),  0LL);
              swift_bridgeObjectRelease();
              id v90 = v125;
              if ((v96 & 1) == 0) {
                goto LABEL_94;
              }
            }

            v97 = (uint64_t *)sub_1002368EC();
            v99 = *v97;
            uint64_t v98 = v97[1];
            *(void *)&v128[0] = v99;
            *((void *)&v128[0] + 1) = v98;
            swift_bridgeObjectRetain();
            AnyHashable.init<A>(_:)(v128, &type metadata for String, &protocol witness table for String);
            if (a1[2] && (v100 = sub_10015CAA4((uint64_t)v129), (v101 & 1) != 0))
            {
              sub_100160800(a1[7] + 32 * v100, (uint64_t)&v130);
            }

            else
            {
              v130 = 0u;
              uint64_t v131 = 0u;
            }

            sub_100160990((uint64_t)v129);
            if (!*((void *)&v131 + 1))
            {
              sub_1001603DC((uint64_t)&v130, &qword_1003F9EE0);
              goto LABEL_94;
            }

            id v102 = v128[0];
            v103 = sub_100236898();
            if (v102 == *(_OWORD *)v103)
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              id v104 = _stringCompareWithSmolCheck(_:_:expecting:)( v102,  *((void *)&v102 + 1),  *(void *)v103,  *((void *)v103 + 1),  0LL);
              swift_bridgeObjectRelease();
              if ((v104 & 1) == 0)
              {
LABEL_93:
                id v90 = v125;
LABEL_94:
                v117 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
                if (v117)
                {
                  v129[3] = (id)sub_100156B68(&qword_1003FA078);
                  v129[0] = a1;
                  v118 = *(void (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)v117 + 432LL);
                  swift_retain(v117);
                  v118(v129, v29, v31, 1LL);
                  swift_bridgeObjectRelease();
                  swift_release(v117);
                  sub_1001607E0(v129);

                  return;
                }

                goto LABEL_98;
              }
            }

            v105 = sub_1002368C8();
            v106 = *((void *)v105 + 1);
            *(void *)&v130 = *(void *)v105;
            *((void *)&v130 + 1) = v106;
            swift_bridgeObjectRetain_n(v106, 2LL);
            AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
            if (a1[2])
            {
              id v107 = sub_10015CAA4((uint64_t)v129);
              if ((v108 & 1) != 0)
              {
                sub_100160800(a1[7] + 32 * v107, (uint64_t)v128);
                sub_100160990((uint64_t)v129);
                swift_bridgeObjectRelease();
                sub_100160944(v128, &v130);
                v109 = sub_10016083C(0LL, &qword_1003FA080, &OBJC_CLASS___NSData_ptr);
                swift_dynamicCast(&v127, &v130, (char *)&type metadata for Any + 8, v109, 7LL);
                id v110 = v127;
                v111 = *(void *)v105;
                id v112 = *((void *)v105 + 1);
                *(void *)&v130 = v111;
                *((void *)&v130 + 1) = v112;
                swift_bridgeObjectRetain_n(v112, 2LL);
                AnyHashable.init<A>(_:)(&v130, &type metadata for String, &protocol witness table for String);
                *(void *)&v130 = 0LL;
                v113 = [v110 decompressedDataUsingAlgorithm:0 error:&v130];
                unsigned __int8 v72 = (void *)v130;
                if (!v113)
                {
LABEL_99:
                  id v119 = v72;
                  v120 = _convertNSErrorToError(_:)(v72);

                  swift_willThrow(v121);
                  swift_unexpectedError(v120, "mediaremoted/FastSyncSessions.swift", 35LL, 1LL, 846LL);
                  __break(1u);
                  return;
                }

                v114 = v113;
                id v115 = (id)v130;
                swift_bridgeObjectRelease();
                *((void *)&v131 + 1) = v109;
                *(void *)&v130 = v114;
                sub_100160944(&v130, v128);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
                id v127 = a1;
                sub_1001E4084(v128, (uint64_t)v129, isUniquelyReferenced_nonNull_native);
                a1 = v127;
                swift_bridgeObjectRelease();
                sub_100160990((uint64_t)v129);

                goto LABEL_93;
              }
            }

            else
            {
              __break(1u);
            }

            __break(1u);
LABEL_98:
            __break(1u);
            goto LABEL_99;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v13 = v71;
        id v32 = v125;
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001603DC((uint64_t)&v130, &qword_1003F9EE0);
    }

    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    v91 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v91, (uint64_t)qword_1003FF018);
    v56 = v2;
    v57 = (os_log_s *)Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22LL, -1LL);
      v123 = (char **)swift_slowAlloc(8LL, -1LL);
      id v124 = (void *)swift_slowAlloc(32LL, -1LL);
      v129[0] = v124;
      *(_DWORD *)v59 = 138543618;
      v125 = v32;
      id v92 = v13;
      *(void *)&v130 = v56;
      v93 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 4, v59 + 12);
      BOOL v62 = v123;
      void *v123 = v56;

      *(_WORD *)(v59 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(void *)&v130 = sub_10015ADC4(v126, v92, (uint64_t *)v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v59 + 14, v59 + 22);

      v63 = v125;
      swift_bridgeObjectRelease();
      v64 = "[%{public}@]<%{public}s> dropping push message for different participant.";
      goto LABEL_73;
    }

    goto LABEL_75;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  v75 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v75, (uint64_t)qword_1003FF018);
  id v76 = v2;
  v77 = (os_log_s *)Logger.logObject.getter(v76);
  uint64_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = swift_slowAlloc(22LL, -1LL);
    v123 = (char **)swift_slowAlloc(8LL, -1LL);
    id v124 = (void *)swift_slowAlloc(32LL, -1LL);
    v129[0] = v124;
    *(_DWORD *)uint64_t v79 = 138543618;
    v125 = v32;
    v80 = v13;
    *(void *)&v130 = v76;
    uint64_t v81 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v79 + 4, v79 + 12);
    v82 = v123;
    void *v123 = v76;

    *(_WORD *)(v79 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)&v130 = sub_10015ADC4(v126, v80, (uint64_t *)v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v79 + 14, v79 + 22);

    id v32 = v125;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "[%{public}@]<%{public}s> Received session end push message.",  (uint8_t *)v79,  0x16u);
    id v83 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v82, 1LL, v83);
    swift_slowDealloc(v82, -1LL, -1LL);
    v84 = v124;
    swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  else
  {
  }

  id v85 = sub_1001E8078();
  v86 = swift_allocError(&type metadata for FastSyncSessionError, v85, 0LL, 0LL);
  *id v87 = 5LL;
  sub_1001CF668(v86);
  swift_errorRelease(v86);
}

void sub_100132E6C(_Unwind_Exception *a1)
{
}

void sub_100132EA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100132F98(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v34 = a4;
  if (a1)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    __int128 v10 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  @"waitForOutputContextModificationVerification",  v8);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueIdentifier]);

    if (v11)
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueIdentifier]);
      -[NSMutableString appendFormat:](v10, "appendFormat:", @" for %@", v13);
    }

    uint64_t v14 = _MRLogForCategory(10LL, v12);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
    }

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v52 = 0x3032000000LL;
    v53 = sub_1001333C8;
    v54 = sub_1001333D8;
    id v55 = 0LL;
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_1001333E0;
    v45[3] = &unk_1003A1F60;
    p___int128 buf = &buf;
    id v16 = v7;
    id v46 = v16;
    id v17 = v8;
    id v47 = v17;
    id v18 = v9;
    id v48 = v18;
    id v49 = v34;
    uint64_t v19 = objc_retainBlock(v45);
    id v20 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    uint64_t v21 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"waitForOutputContextModificationVerification<%@>",  v17);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1001336B0;
    void v41[3] = &unk_10039B718;
    id v22 = v16;
    id v42 = v22;
    id v43 = v17;
    uint64_t v23 = v19;
    id v44 = v23;
    id v24 = [v20 initWithTimeout:v21 reason:v41 handler:7.0];

    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_100133800;
    v39[3] = &unk_10039E258;
    id v25 = v22;
    id v40 = v25;
    uint64_t v26 = objc_retainBlock(v39);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v28 = MRAVOutputContextOutputDevicesDidChangeNotification;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100133930;
    v35[3] = &unk_1003A1FE8;
    uint64_t v29 = v26;
    id v37 = v29;
    id v30 = v24;
    id v36 = v30;
    id v31 = v23;
    id v38 = v31;
    uint64_t v32 = objc_claimAutoreleasedReturnValue([v27 addObserverForName:v28 object:v25 queue:0 usingBlock:v35]);
    id v33 = *(void **)(*((void *)&buf + 1) + 40LL);
    *(void *)(*((void *)&buf + 1) + 4+[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"PlaybackQueue",  @"Cache",  @"Inconsistent PlaybackQueue Cache",  0LL,  0LL, 0LL) = v32;

    _Block_object_dispose(&buf, 8);
  }
}

void sub_1001333A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001333C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001333D8(uint64_t a1)
{
}

void sub_1001333E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 removeObserver:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);

  uint64_t v9 = _MRLogForCategory(10LL, v8);
  __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  __int128 v11 = v10;
  if (!v3)
  {
    BOOL v17 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v7)
    {
      if (!v17) {
        goto LABEL_16;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v14 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v23 = 138543874;
      id v24 = @"waitForOutputContextModificationVerification";
      __int16 v25 = 2114;
      uint64_t v26 = v20;
      __int16 v27 = 2048;
      id v28 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v23,  0x20u);
      goto LABEL_15;
    }

    if (!v17) {
      goto LABEL_16;
    }
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v23 = 138544130;
    id v24 = @"waitForOutputContextModificationVerification";
    __int16 v25 = 2114;
    uint64_t v26 = v18;
    __int16 v27 = 2114;
    id v28 = v14;
    __int16 v29 = 2048;
    id v30 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds",  (uint8_t *)&v23,  0x2Au);
LABEL_10:

LABEL_15:
    goto LABEL_16;
  }

  BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v12) {
      goto LABEL_16;
    }
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v23 = 138544386;
    id v24 = @"waitForOutputContextModificationVerification";
    __int16 v25 = 2114;
    uint64_t v26 = v13;
    __int16 v27 = 2114;
    id v28 = v3;
    __int16 v29 = 2114;
    id v30 = v14;
    __int16 v31 = 2048;
    uint64_t v32 = v16;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v23,  0x34u);
    goto LABEL_10;
  }

  if (v12) {
    sub_1002BAA28();
  }
LABEL_16:

  uint64_t v22 = *(void *)(a1 + 56);
  if (v22) {
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v3);
  }
}

uint64_t sub_1001336B0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = objc_alloc(&OBJC_CLASS___NSString);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) avOutputContext]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 outputDevices]);
    id v7 = -[NSString initWithFormat:]( v3,  "initWithFormat:",  @"Timed out waiting for verification %@ vs %@",  v4,  v6);

    uint64_t v9 = _MRLogForCategory(10LL, v8);
    __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v14 = @"waitForOutputContextModificationVerification";
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      __int16 v17 = 2112;
      uint64_t v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

BOOL sub_100133800(uint64_t a1)
{
  dispatch_queue_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) concreteOutputDevices]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_compactMap:", &stru_1003A1F80));
  uint64_t v5 = -[NSSet initWithArray:](v2, "initWithArray:", v4);

  uint64_t v6 = objc_alloc(&OBJC_CLASS___NSSet);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) avOutputContext]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDevices]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "msv_compactMap:", &stru_1003A1FC0));
  __int128 v10 = -[NSSet initWithArray:](v6, "initWithArray:", v9);

  BOOL v11 = -[NSSet isEqualToSet:](v5, "isEqualToSet:", v10);
  return v11;
}

id sub_1001338EC(id a1, MRAVConcreteOutputDevice *a2)
{
  dispatch_queue_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVConcreteOutputDevice avOutputDevice](a2, "avOutputDevice"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 ID]);

  return v3;
}

id sub_100133928(id a1, AVOutputDevice *a2)
{
  return -[AVOutputDevice ID](a2, "ID");
}

id sub_100133930(uint64_t a1)
{
  id result = (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  if ((_DWORD)result)
  {
    id result = [*(id *)(a1 + 32) disarm];
    if ((_DWORD)result) {
      return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  return result;
}

void sub_100133980(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
  uint64_t v6 = -[NSString initWithFormat:](v4, "initWithFormat:", @"Final devices in context %@", v5);

  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v26 = v10;
    __int16 v27 = 2114;
    uint64_t v28 = v11;
    __int16 v29 = 2112;
    id v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  [*(id *)(a1 + 56) _reloadOutputDevices];
  BOOL v12 = *(void **)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v14 = *(void **)(a1 + 48);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100133B88;
  v16[3] = &unk_1003A2010;
  id v17 = v12;
  id v18 = *(id *)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v20 = v3;
  id v21 = *(id *)(a1 + 72);
  id v22 = *(id *)(a1 + 80);
  id v24 = *(id *)(a1 + 96);
  id v23 = *(id *)(a1 + 88);
  id v15 = v3;
  sub_100132F98(v13, v17, v14, v16);
}

void sub_100133B88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
  uint64_t v6 = -[NSString initWithFormat:](v4, "initWithFormat:", @"Final devices in context %@", v5);

  uint64_t v8 = _MRLogForCategory(10LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v42 = v10;
    __int16 v43 = 2114;
    uint64_t v44 = v11;
    __int16 v45 = 2112;
    id v46 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  BOOL v12 = *(void **)(a1 + 56);
  if (!v12) {
    BOOL v12 = v3;
  }
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v16 = _MRLogForCategory(10LL, v15);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = v17;
  if (!v13)
  {
    BOOL v25 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (!v25) {
        goto LABEL_18;
      }
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = *(NSString **)(a1 + 64);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:*(void *)(a1 + 72)];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v42 = v26;
      __int16 v43 = 2114;
      uint64_t v44 = v27;
      __int16 v45 = 2114;
      id v46 = v28;
      __int16 v47 = 2048;
      uint64_t v48 = v29;
      id v30 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      __int16 v31 = v18;
      uint32_t v32 = 42;
    }

    else
    {
      if (!v25) {
        goto LABEL_18;
      }
      uint64_t v33 = *(void *)(a1 + 40);
      uint64_t v34 = *(void *)(a1 + 48);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v23 timeIntervalSinceDate:*(void *)(a1 + 72)];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v42 = v33;
      __int16 v43 = 2114;
      uint64_t v44 = v34;
      __int16 v45 = 2048;
      id v46 = v35;
      id v30 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      __int16 v31 = v18;
      uint32_t v32 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v30, buf, v32);
    goto LABEL_17;
  }

  BOOL v19 = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  if (v14)
  {
    if (!v19) {
      goto LABEL_18;
    }
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void *)(a1 + 64);
    id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v23 timeIntervalSinceDate:*(void *)(a1 + 72)];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v42 = v20;
    __int16 v43 = 2114;
    uint64_t v44 = v21;
    __int16 v45 = 2114;
    id v46 = v13;
    __int16 v47 = 2114;
    uint64_t v48 = v22;
    __int16 v49 = 2048;
    uint64_t v50 = v24;
    _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_17:

    goto LABEL_18;
  }

  if (v19) {
    sub_1002BAAE8();
  }
LABEL_18:

  id v36 = *(void **)(a1 + 88);
  if (v36)
  {
    id v37 = *(dispatch_queue_s **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100133EF4;
    block[3] = &unk_10039AD10;
    id v40 = v36;
    __int128 v39 = v13;
    dispatch_async(v37, block);
  }
}

uint64_t sub_100133EF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100133F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if ((id)-[NSError code](v3, "code") == (id)26)
  {
    id v4 = -[NSError initWithMRError:format:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithMRError:format:",  125LL,  @"%@OutputContextModification timedout after %lf seconds",  *(void *)(a1 + 32),  0x404E000000000000LL);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100133F8C(uint64_t a1, void *a2)
{
  id v3 = a2;
}

id sub_100133FD8(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

uint64_t sub_100133FE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100133FEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outputDevices]);
    id v7 = [v6 countByEnumeratingWithState:&v46 objects:v58 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v47;
      char v10 = 1;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v47 != v9) {
            objc_enumerationMutation(v6);
          }
          BOOL v12 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) outputDeviceUIDs]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 uid]);
          unsigned __int8 v15 = [v13 containsObject:v14];

          v10 &= v15;
        }

        id v8 = [v6 countByEnumeratingWithState:&v46 objects:v58 count:16];
      }

      while (v8);
      char v16 = v10 ^ 1;
    }

    else
    {
      char v16 = 0;
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceUID]);
    id v18 = [v17 length];

    unsigned int v19 = [v5 isProxyGroupPlayer];
    id v20 = [*(id *)(*(void *)(a1 + 40) + 8) copy];
    [v20 setShouldNotPauseIfLastDeviceRemoved:1];
    uint64_t v22 = -[MRDOutputContextModification initWithRequest:]( objc_alloc(&OBJC_CLASS___MRDOutputContextModification),  "initWithRequest:",  v20);
    if ((v16 & 1) == 0 && v18 && v19)
    {
      uint64_t v56 = kMRMediaRemoteOptionRemoteControlInterfaceIdentifier;
      v57 = @"No devices on output context";
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
      qos_class_t v24 = qos_class_self();
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(v24, 0LL);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
      uint64_t v28 = _MRLogForCategory(10LL, v27);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void *)(a1 + 48);
        uint64_t v31 = *(void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v51 = v30;
        __int16 v52 = 2114;
        uint64_t v53 = v31;
        __int16 v54 = 2112;
        id v55 = @"pausing now playing app before removing last output device...";
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }

      uint32_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472LL;
      v41[2] = sub_10013441C;
      void v41[3] = &unk_1003A2080;
      uint64_t v42 = v22;
      id v43 = *(id *)(a1 + 32);
      id v44 = *(id *)(a1 + 64);
      id v45 = *(id *)(a1 + 72);
      MRMediaRemoteSendCommandForOriginWithReply(v32, 1LL, v23, v26, v41);
    }

    else
    {
      uint64_t v33 = _MRLogForCategory(10LL, v21);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *(void *)(a1 + 48);
        uint64_t v36 = *(void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 138543874;
        uint64_t v51 = v35;
        __int16 v52 = 2114;
        uint64_t v53 = v36;
        __int16 v54 = 2112;
        id v55 = @"removing last output device...";
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
      }

      uint64_t v37 = *(void *)(a1 + 32);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_1001344A8;
      v39[3] = &unk_100399530;
      uint64_t v38 = *(void *)(a1 + 64);
      id v40 = *(id *)(a1 + 72);
      sub_1001306C0(v22, v37, v38, v39);
      id v23 = v40;
    }
  }
}

void sub_10013441C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10013449C;
  v4[3] = &unk_100399530;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  sub_1001306C0(v1, v2, v3, v4);
}

uint64_t sub_10013449C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001344A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001344B4(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v29 = v3;
    if (((unint64_t)[a1[1] type] | 2) == 3)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
      sub_100134A54((uint64_t)a1, v5, v29);

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v29 outputDeviceUIDs]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v6));

      id v8 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v8));

      [v9 minusSet:v7];
      char v10 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_100134DBC;
      v34[3] = &unk_10039B568;
      id v35 = v9;
      id v11 = v9;
      BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "msv_filter:", v34));

      if ([v12 count]) {
        sub_100134E00((uint64_t)a1, v12, v29);
      }
    }

    id v13 = [a1[1] type];
    if (v13 == (id)3)
    {
      qos_class_t v24 = (void *)objc_claimAutoreleasedReturnValue([v29 outputDeviceUIDs]);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v24));

      id v26 = sub_10012FBA0(a1);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      char v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v27));

      [v25 minusSet:v16];
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v29 outputDevices]);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_100135838;
      v30[3] = &unk_10039AC00;
      uint64_t v21 = &v31;
      uint64_t v31 = v25;
      id v22 = v25;
      id v23 = v30;
    }

    else
    {
      id v4 = v29;
      if (v13 != (id)2) {
        goto LABEL_13;
      }
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
      sub_100135150((uint64_t)a1, v14, v29);

      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v29 outputDeviceUIDs]);
      char v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v15));

      id v17 = sub_10012FBA0(a1);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v18));

      [v19 intersectSet:v16];
      id v20 = (void *)objc_claimAutoreleasedReturnValue([a1 discoveredConcreteOutputDevices]);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_1001354A4;
      v32[3] = &unk_10039B568;
      uint64_t v21 = &v33;
      uint64_t v33 = v19;
      id v22 = v19;
      id v23 = v32;
    }

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "msv_filter:", v23));

    if ([v28 count]) {
      sub_1001354E8((uint64_t)a1, v28, v29);
    }

    id v4 = v29;
  }

void sub_100134814(uint64_t a1, void *a2)
{
  id v3 = sub_100134854(*(void **)(a1 + 32), a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_100134854(void *Error, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (Error)
  {
    id v5 = [v3 status];
    if ((unint64_t)v5 < 2 || v5 == (id)3)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([Error description]);
      uint64_t v8 = 28LL;
    }

    else
    {
      if (v5 != (id)4)
      {
        Error = 0LL;
        goto LABEL_11;
      }

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 cancellationReason]);

      if (!v6)
      {
        Error = (void *)MRMediaRemoteCreateError(101LL);
        goto LABEL_11;
      }

      id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 cancellationReason]);
      uint64_t v8 = 101LL;
    }

    Error = (void *)MRMediaRemoteCreateErrorWithDescription(v8, v7);
  }

uint64_t sub_100134918(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_100134930(uint64_t a1, void *a2)
{
  id v3 = sub_100134854(*(void **)(a1 + 32), a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_100134970(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_100134988(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_100134854(*(void **)(a1 + 32), a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_1001349CC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_100134854(*(void **)(a1 + 32), a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_100134A10(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = sub_100134854(*(void **)(a1 + 32), a2);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_100134A54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUIDs]);
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    char v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_compactMap:", &stru_1003A2140));
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 8) type]));
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestID]);
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_map:", &stru_1003A2160));
    uint64_t v18 = _MRLogForCategory(0LL, v17);
    unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412546;
      uint64_t v28 = v16;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Request to add outputDevices %@ to context %@",  (uint8_t *)&v27,  0x16u);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v20 postNotificationName:MRAVOutputContextModificationRequestToAddOutputDeviceNotification object:v6 userInfo:v7];

    id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A2180));
    if (v22)
    {
      uint64_t v23 = _MRLogForCategory(0LL, v21);
      qos_class_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v22 debugName]);
        int v27 = 138412546;
        uint64_t v28 = v25;
        __int16 v29 = 2112;
        id v30 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Will add localDevice %@ to context %@",  (uint8_t *)&v27,  0x16u);
      }

      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v26 postNotificationName:MRAVOutputContextModificationRequestToAddLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

id sub_100134DBC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_100134E00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUIDs]);
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    char v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_compactMap:", &stru_1003A21A0));
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 8) type]));
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestID]);
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_map:", &stru_1003A21C0));
    uint64_t v18 = _MRLogForCategory(0LL, v17);
    unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412546;
      uint64_t v28 = v16;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Will add outputDevices %@ to context %@",  (uint8_t *)&v27,  0x16u);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v20 postNotificationName:MRAVOutputContextModificationWillAddOutputDeviceNotification object:v6 userInfo:v7];

    id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A21E0));
    if (v22)
    {
      uint64_t v23 = _MRLogForCategory(0LL, v21);
      qos_class_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v22 debugName]);
        int v27 = 138412546;
        uint64_t v28 = v25;
        __int16 v29 = 2112;
        id v30 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Will add localDevice %@ to context %@",  (uint8_t *)&v27,  0x16u);
      }

      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v26 postNotificationName:MRAVOutputContextModificationWillAddLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

void sub_100135150(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUIDs]);
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    char v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_compactMap:", &stru_1003A2200));
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 8) type]));
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestID]);
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_map:", &stru_1003A2220));
    uint64_t v18 = _MRLogForCategory(0LL, v17);
    unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 138412546;
      __int16 v29 = v16;
      __int16 v30 = 2112;
      id v31 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Request to remove outputDevices %@ from context %@",  (uint8_t *)&v28,  0x16u);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v21 = MRAVOutputContextModificationRequestToRemoveLocalDeviceNotification;
    [v20 postNotificationName:MRAVOutputContextModificationRequestToRemoveLocalDeviceNotification object:v6 userInfo:v7];

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A2240));
    if (v23)
    {
      uint64_t v24 = _MRLogForCategory(0LL, v22);
      BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 debugName]);
        int v28 = 138412546;
        __int16 v29 = v26;
        __int16 v30 = 2112;
        id v31 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Request to remove localDevice %@ from context %@",  (uint8_t *)&v28,  0x16u);
      }

      int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v27 postNotificationName:v21 object:v6 userInfo:v7];
    }
  }
}

id sub_1001354A4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_1001354E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    [v7 setObject:v8 forKeyedSubscript:kMRAVOutputContextIdentifierUserInfoKey];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 outputDeviceUIDs]);
    [v7 setObject:v9 forKeyedSubscript:MRAVOutputContextExistingOutputDeviceIdentifiersUserInfoKey];

    char v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_compactMap:", &stru_1003A2260));
    [v7 setObject:v10 forKeyedSubscript:MRAVOutputContextModificationOutputDeviceIdentifiersUserInfoKey];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 8) type]));
    [v7 setObject:v11 forKeyedSubscript:MRAVOutputContextModificationTypeUserInfoKey];

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 reason]);
    [v7 setObject:v13 forKeyedSubscript:MRAVOutputContextModificationInitiatorUserInfoKey];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) requestDetails]);
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 requestID]);
    [v7 setObject:v15 forKeyedSubscript:MRAVOutputContextModificationIdentifierUserInfoKey];

    char v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_map:", &stru_1003A2280));
    uint64_t v18 = _MRLogForCategory(0LL, v17);
    unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412546;
      int v28 = v16;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Will remove outputDevices %@ from context %@",  (uint8_t *)&v27,  0x16u);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v20 postNotificationName:MRAVOutputContextModificationWillRemoveOutputDeviceNotification object:v6 userInfo:v7];

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A22A0));
    if (v22)
    {
      uint64_t v23 = _MRLogForCategory(0LL, v21);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v22 debugName]);
        int v27 = 138412546;
        int v28 = v25;
        __int16 v29 = 2112;
        id v30 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[OutputContextModification] Will remove localDevice %@ from context %@",  (uint8_t *)&v27,  0x16u);
      }

      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v26 postNotificationName:MRAVOutputContextModificationWillRemoveLocalDeviceNotification object:v6 userInfo:v7];
    }
  }
}

id sub_100135838(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uid]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

id sub_10013587C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

id sub_100135884(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

BOOL sub_10013588C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

id sub_100135894(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

id sub_10013589C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

BOOL sub_1001358A4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

id sub_1001358AC(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

id sub_1001358B4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

BOOL sub_1001358BC(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

id sub_1001358C4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

id sub_1001358CC(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

BOOL sub_1001358D4(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isLocalDevice](a2, "isLocalDevice");
}

id sub_100135930()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVAudioSessionCategoryPlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE0E0, *v0);
  }
  off_1003F7998 = (uint64_t (*)())sub_1001359A8;
  return (id)qword_1003FE0E0;
}

id sub_1001359A8()
{
  return (id)qword_1003FE0E0;
}

void sub_1001359B4(id a1)
{
  qword_1003FE178 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

id sub_1001359DC()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVAudioSessionCategoryPlayAndRecord");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE0E8, *v0);
  }
  off_1003F79A0 = (uint64_t (*)())sub_100135A54;
  return (id)qword_1003FE0E8;
}

id sub_100135A54()
{
  return (id)qword_1003FE0E8;
}

id sub_100135A60()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextAddOutputDeviceOptionInitiator");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE0F0, *v0);
  }
  off_1003F79A8 = (uint64_t (*)())sub_100135AD8;
  return (id)qword_1003FE0F0;
}

id sub_100135AD8()
{
  return (id)qword_1003FE0F0;
}

id sub_100135AE4()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextAddOutputDeviceOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE118, *v0);
  }
  off_1003F79B0 = (uint64_t (*)())sub_100135B5C;
  return (id)qword_1003FE118;
}

id sub_100135B5C()
{
  return (id)qword_1003FE118;
}

id sub_100135B68()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextAddOutputDeviceOptionMuteUntilContextModificationIsFinished");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE158, *v0);
  }
  off_1003F79B8 = (uint64_t (*)())sub_100135BE0;
  return (id)qword_1003FE158;
}

id sub_100135BE0()
{
  return (id)qword_1003FE158;
}

id sub_100135BEC()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextAddOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE138, *v0);
  }
  off_1003F79C0 = (uint64_t (*)())sub_100135C64;
  return (id)qword_1003FE138;
}

id sub_100135C64()
{
  return (id)qword_1003FE138;
}

id sub_100135C70()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextRemoveOutputDeviceOptionInitiator");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE0F8, *v0);
  }
  off_1003F79C8 = (uint64_t (*)())sub_100135CE8;
  return (id)qword_1003FE0F8;
}

id sub_100135CE8()
{
  return (id)qword_1003FE0F8;
}

id sub_100135CF4()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextRemoveOutputDeviceOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE130, *v0);
  }
  off_1003F79D0 = (uint64_t (*)())sub_100135D6C;
  return (id)qword_1003FE130;
}

id sub_100135D6C()
{
  return (id)qword_1003FE130;
}

id sub_100135D78()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextRemoveOutputDeviceOptionContinuePlayingAfterLastDeviceRemoved");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE100, *v0);
  }
  off_1003F79D8 = (uint64_t (*)())sub_100135DF0;
  return (id)qword_1003FE100;
}

id sub_100135DF0()
{
  return (id)qword_1003FE100;
}

id sub_100135DFC()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextRemoveOutputDeviceOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE140, *v0);
  }
  off_1003F79E0 = (uint64_t (*)())sub_100135E74;
  return (id)qword_1003FE140;
}

id sub_100135E74()
{
  return (id)qword_1003FE140;
}

id sub_100135E80()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDevicesOptionFadePlayback");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE120, *v0);
  }
  off_1003F79E8 = (uint64_t (*)())sub_100135EF8;
  return (id)qword_1003FE120;
}

id sub_100135EF8()
{
  return (id)qword_1003FE120;
}

id sub_100135F04()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextSetOutputDevicesOptionMuteUntilContextModificationIsFinished");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE168, *v0);
  }
  off_1003F79F0 = (uint64_t (*)())sub_100135F7C;
  return (id)qword_1003FE168;
}

id sub_100135F7C()
{
  return (id)qword_1003FE168;
}

id sub_100135F88()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym( (void *)qword_1003FE178,  "AVOutputContextSetOutputDevicesOptionDidFailToConnectToOutputDeviceUserInfo");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE148, *v0);
  }
  off_1003F79F8 = (uint64_t (*)())sub_100136000;
  return (id)qword_1003FE148;
}

id sub_100136000()
{
  return (id)qword_1003FE148;
}

id sub_10013600C()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDevicePasswordKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE110, *v0);
  }
  off_1003F7A00 = (uint64_t (*)())sub_100136084;
  return (id)qword_1003FE110;
}

id sub_100136084()
{
  return (id)qword_1003FE110;
}

id sub_100136090()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDeviceCancelIfAuthRequiredKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE108, *v0);
  }
  off_1003F7A08 = (uint64_t (*)())sub_100136108;
  return (id)qword_1003FE108;
}

id sub_100136108()
{
  return (id)qword_1003FE108;
}

id sub_100136114()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDeviceFadePlaybackKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE128, *v0);
  }
  off_1003F7A10 = (uint64_t (*)())sub_10013618C;
  return (id)qword_1003FE128;
}

id sub_10013618C()
{
  return (id)qword_1003FE128;
}

id sub_100136198()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDeviceMuteUntilContextModificationIsFinishedKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE160, *v0);
  }
  off_1003F7A18 = (uint64_t (*)())sub_100136210;
  return (id)qword_1003FE160;
}

id sub_100136210()
{
  return (id)qword_1003FE160;
}

id sub_10013621C()
{
  if (qword_1003FE170 != -1) {
    dispatch_once(&qword_1003FE170, &stru_1003A22C0);
  }
  v0 = (id *)dlsym((void *)qword_1003FE178, "AVOutputContextSetOutputDeviceDidFailToConnectToOutputDeviceUserInfoKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1003FE150, *v0);
  }
  off_1003F7A20 = (uint64_t (*)())sub_100136294;
  return (id)qword_1003FE150;
}

id sub_100136294()
{
  return (id)qword_1003FE150;
}

  ;
}

void sub_10013654C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001365F4;
  void v6[3] = &unk_100398E60;
  id v7 = *(id *)(a1 + 32);
  id v8 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1001365F4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
  [v1 _reevaluateWithReason:v2];
}

id sub_100136634(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reevaluateWithReason:@"Startup"];
}

void sub_100136684(id a1)
{
  id v1 = -[MRDPreemptiveRemoteControlConnectionManager _init]( objc_alloc(&OBJC_CLASS___MRDPreemptiveRemoteControlConnectionManager),  "_init");
  id v2 = (void *)qword_1003FE180;
  qword_1003FE180 = (uint64_t)v1;
}

id sub_100136794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    [*(id *)(a1 + 40) appendFormat:@"    previousGroupID = %@\n", *(void *)(v2 + 32)];
    uint64_t v2 = *(void *)(a1 + 32);
  }

  if ([*(id *)(v2 + 40) operationCount]) {
    objc_msgSend( *(id *)(a1 + 40),  "appendFormat:",  @"    groupLeaderOperationsCount = %ld\n",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "operationCount"));
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 8))
  {
    [*(id *)(a1 + 40) appendFormat:@"    groupLeaderEndpoint = %@\n", *(void *)(v3 + 8)];
    uint64_t v3 = *(void *)(a1 + 32);
  }

  if (*(void *)(v3 + 48))
  {
    [*(id *)(a1 + 40) appendFormat:@"    previousClusterLeaderID = %@\n", *(void *)(v3 + 48)];
    uint64_t v3 = *(void *)(a1 + 32);
  }

  id result = [*(id *)(v3 + 56) operationCount];
  if (result) {
    id result = objc_msgSend( *(id *)(a1 + 40),  "appendFormat:",  @"    clusterLeaderOperationsCount = %ld\n",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "operationCount"));
  }
  if (*(void *)(*(void *)(a1 + 32) + 16LL)) {
    return [*(id *)(a1 + 40) appendFormat:@"    clusterLeaderEndpoint = %@\n", *(void *)(*(void *)(a1 + 32) + 16)];
  }
  return result;
}

void sub_100136930(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);

  if (!v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    [*(id *)(a1 + 32) setObservers:v3];
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v4 addObject:*(void *)(a1 + 40)];
}

void sub_100136A44(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observers]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_100136EB8(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "preemptiveRemoteControlConnectionManager:didConnectToGroupLeader:") & 1) != 0) {
          objc_msgSend( v7,  "preemptiveRemoteControlConnectionManager:didConnectToGroupLeader:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100137408(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v7,  "preemptiveRemoteControlConnectionManager:didConnectToPreferredClusterLeader:") & 1) != 0) {
          objc_msgSend( v7,  "preemptiveRemoteControlConnectionManager:didConnectToPreferredClusterLeader:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100137590(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);

  [*(id *)(a1 + 32) _reevaluateGroupLeaderConnectionWithDeviceInfo:v3];
  [*(id *)(a1 + 32) _reevaluateClusterLeaderConnectionWithDeviceInfo:v3];
}

void sub_10013783C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

id sub_10013785C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isAirPlayActive] & 1) == 0)
  {
    id v3 = objc_alloc(&OBJC_CLASS___MRResultReason);
    id v4 = @"airplayActive=NO";
LABEL_6:
    uint64_t v5 = 0LL;
    return [v3 initWithResult:v5 reason:v4];
  }

  unsigned __int8 v2 = [*(id *)(a1 + 32) parentGroupContainsDiscoverableGroupLeader];
  id v3 = objc_alloc(&OBJC_CLASS___MRResultReason);
  if ((v2 & 1) == 0)
  {
    id v4 = @"parentGroupContainsDiscoverableGroupLeader=YES";
    goto LABEL_6;
  }

  id v4 = @"airplayActive with discoverableGroupLeader";
  uint64_t v5 = 1LL;
  return [v3 initWithResult:v5 reason:v4];
}

id sub_1001378D8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) previousGroupID]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupUID]);
  if (v2 == v3)
  {
  }

  else
  {
    id v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
      id v7 = @"groupLeaderChanged";
LABEL_11:
      uint64_t v11 = 1LL;
      return [v6 initWithResult:v11 reason:v7];
    }
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupLeaderOperations]);
  id v9 = [v8 operationCount];

  if (v9)
  {
    id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
    id v7 = @"operationInProgress";
  }

  else
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) groupLeader]);

    id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
    if (!v10)
    {
      id v7 = @"Unknown";
      goto LABEL_11;
    }

    id v7 = @"exisitingConnection";
  }

  uint64_t v11 = 0LL;
  return [v6 initWithResult:v11 reason:v7];
}

void sub_1001379E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endpoint]);

  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100137A98;
  block[3] = &unk_100398E60;
  void block[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_sync(v4, block);
}

id sub_100137A98(uint64_t a1)
{
  return [*(id *)(a1 + 32) setGroupLeader:*(void *)(a1 + 40)];
}

void sub_100137CC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

id sub_100137CE0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) clusterType])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clusterLeaderID]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
    unsigned int v4 = [v2 isEqualToString:v3];

    id v5 = objc_alloc(&OBJC_CLASS___MRResultReason);
    if (!v4)
    {
      id v6 = @"isClusterLeader=NO";
      uint64_t v7 = 1LL;
      return [v5 initWithResult:v7 reason:v6];
    }

    id v6 = @"isClusterLeader=YES";
  }

  else
  {
    id v5 = objc_alloc(&OBJC_CLASS___MRResultReason);
    id v6 = @"clusterType=None";
  }

  uint64_t v7 = 0LL;
  return [v5 initWithResult:v7 reason:v6];
}

id sub_100137D90(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) previousClusterLeaderID]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clusterLeaderID]);
  if (v2 == v3)
  {
  }

  else
  {
    unsigned int v4 = v3;
    unsigned __int8 v5 = [v2 isEqual:v3];

    if ((v5 & 1) == 0)
    {
      id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
      uint64_t v7 = @"clusterLeaderChanged";
LABEL_11:
      uint64_t v11 = 1LL;
      return [v6 initWithResult:v11 reason:v7];
    }
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clusterLeaderOperations]);
  id v9 = [v8 operationCount];

  if (v9)
  {
    id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
    uint64_t v7 = @"operationInProgress";
  }

  else
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) preferredClusterLeader]);

    id v6 = objc_alloc(&OBJC_CLASS___MRResultReason);
    if (!v10)
    {
      uint64_t v7 = @"Unknown";
      goto LABEL_11;
    }

    uint64_t v7 = @"exisitingConnection";
  }

  uint64_t v11 = 0LL;
  return [v6 initWithResult:v11 reason:v7];
}

void sub_100137EA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained endpoint]);

  unsigned int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100137F50;
  block[3] = &unk_100398E60;
  void block[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_sync(v4, block);
}

id sub_100137F50(uint64_t a1)
{
  return [*(id *)(a1 + 32) setPreferredClusterLeader:*(void *)(a1 + 40)];
}

void sub_10013842C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v7 = *(void **)(a1 + 32);
    __int128 v8 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 25LL);
    id v9 = v7;
  }

  else
  {
    if (!v6)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(v10 + 8);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100138538;
      v12[3] = &unk_10039B5E0;
      v12[4] = v10;
      id v13 = v5;
      id v14 = 0LL;
      [v13 connectToExternalDeviceWithOptions:0 details:v11 completion:v12];

      goto LABEL_7;
    }

    __int128 v8 = (NSError *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "mr_errorByEnvelopingWithMRError:", 47));
    id v9 = *(void **)(a1 + 32);
  }

  [v9 finishWithError:v8];

LABEL_7:
}

void sub_100138538(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    unsigned int v4 = *(void **)(a1 + 32);
    id v5 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 25LL);
    id v7 = v5;
    id v6 = v4;
LABEL_5:
    [v6 finishWithError:v5];

    return;
  }

  if (a2)
  {
    id v5 = (NSError *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "mr_errorByEnvelopingWithMRError:", 100));
    id v7 = v5;
    id v6 = *(void **)(a1 + 32);
    goto LABEL_5;
  }

  [*(id *)(a1 + 32) setEndpoint:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) finish];
}

void sub_100138D54(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 25LL);
    id v7 = v5;
LABEL_5:
    [v7 finishWithError:v6];
    goto LABEL_6;
  }

  if (v4)
  {
    id v6 = (NSError *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mr_errorByEnvelopingWithMRError:", 47));
    id v7 = *(void **)(a1 + 32);
    goto LABEL_5;
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 routingServer]);
  id v6 = (NSError *)objc_claimAutoreleasedReturnValue( [v9 createTransientEndpointForOutputDeviceUID:*(void *)(*(void *)(a1 + 32) + 16) details:*(void *)(*(void *)(a1 + 32) + 8)]);

  if (v6)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 8);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100138ECC;
    v13[3] = &unk_10039B5E0;
    v13[4] = v10;
    id v14 = v6;
    id v15 = 0LL;
    -[NSError connectToExternalDeviceWithOptions:details:completion:]( v14,  "connectToExternalDeviceWithOptions:details:completion:",  0LL,  v11,  v13);
  }

  else
  {
    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(0, "mr_errorByEnvelopingWithMRError:", 39));
    [*(id *)(a1 + 32) finishWithError:v12];
  }

void sub_100138ECC(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    id v4 = *(void **)(a1 + 32);
    id v5 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 25LL);
    id v7 = v5;
    id v6 = v4;
LABEL_5:
    [v6 finishWithError:v5];

    return;
  }

  if (a2)
  {
    id v5 = (NSError *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "mr_errorByEnvelopingWithMRError:", 100));
    id v7 = v5;
    id v6 = *(void **)(a1 + 32);
    goto LABEL_5;
  }

  [*(id *)(a1 + 32) setEndpoint:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) finish];
}

void sub_1001394D0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

id sub_1001394E4(uint64_t a1)
{
  return [v1 timeIntervalSinceDate:a1];
}

void sub_100139CC8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 route:*(void *)(a1 + 40) endpoint:*(void *)(a1 + 48) bundleIdentifier:*(void *)(a1 + 56) emittedEvent:*(void *)(a1 + 64)];
}

id sub_100139F24(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "onQueue_controller:didLoadResponse:retry:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  1);
}

id sub_10013A2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(13LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 destination]);
    uint64_t v8 = *(void *)(a1 + 48);
    int v10 = 138413058;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC].NPM %@ - endpoint was nil, trying again - %@ (%@), response: %@",  (uint8_t *)&v10,  0x2Au);
  }

  return objc_msgSend( *(id *)(a1 + 32),  "onQueue_controller:didLoadResponse:retry:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  0);
}

void sub_10013A4F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destination]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 endpoint]);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destination]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 client]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 representedBundleID]);

  objc_msgSend( *(id *)(a1 + 40),  "onQueue_setLastPlaybackState:bundleIdentifier:forEndpoint:",  *(unsigned int *)(a1 + 48),  v5,  v6);
}

uint64_t sub_10013A884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013A8AC(unsigned int a1)
{
  return (a1 < 0xC) & (0xF33u >> a1);
}

BOOL sub_10013A8C4(unsigned int a1)
{
  if (a1 > 0xB) {
    return a1 - 127 >= 2;
  }
  uint64_t v1 = 0LL;
  if (((1 << a1) & 0xA0A) == 0) {
    return a1 - 127 >= 2;
  }
  return v1;
}

void sub_10013A8FC(void *a1, void *a2)
{
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472LL;
  applier[2] = sub_10013A974;
  applier[3] = &unk_1003A2380;
  id v5 = a1;
  id v3 = v5;
  xpc_dictionary_apply(a2, applier);
}

uint64_t sub_10013A974(uint64_t a1, const char *a2, void *a3)
{
  return 1LL;
}

uint64_t sub_10013A990(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(v5);
  uint64_t v8 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v8)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(v5);
    if (reply)
    {
      if (v6) {
        v6[2](v6, reply);
      }
      xpc_connection_send_message(v8, reply);
      uint64_t v10 = 1LL;
    }

    else
    {
      if (a3)
      {
        NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
        __int16 v16 = @"A reply object could not be created.";
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
        *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"MRDMediaRemoteDaemonErrorDomain",  1LL,  v11));
      }

      uint64_t v10 = 0LL;
    }
  }

  else
  {
    if (!a3)
    {
      uint64_t v10 = 0LL;
      goto LABEL_12;
    }

    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    __int16 v14 = @"A reply connection could not be obtained.";
    xpc_object_t reply = (xpc_object_t)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    uint64_t v10 = 0LL;
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"MRDMediaRemoteDaemonErrorDomain",  1LL,  reply));
  }

LABEL_12:
  return v10;
}

uint64_t sub_10013AB4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10013ABA4;
  void v6[3] = &unk_1003A23A0;
  void v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  return sub_10013A990(a1, v6, a5);
}

void sub_10013ABA4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (const char *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  xpc_object_t xdict = v3;
  if (xdict)
  {
    switch(v5)
    {
      case 0LL:
        xpc_dictionary_set_int64(xdict, v4, v6);
        break;
      case 1LL:
        xpc_dictionary_set_uint64(xdict, v4, v6);
        break;
      case 2LL:
        xpc_dictionary_set_BOOL(xdict, v4, v6 & 1);
        break;
      case 3LL:
        if (v6) {
          xpc_dictionary_set_string(xdict, v4, (const char *)v6);
        }
        break;
      case 4LL:
      case 5LL:
        xpc_dictionary_set_double(xdict, v4, *(double *)&v6);
        break;
      default:
        break;
    }
  }
}

uint64_t sub_10013AC78(void *a1, uint64_t a2, void *a3, void *a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10013AD0C;
  v10[3] = &unk_1003A23C8;
  id v11 = a3;
  uint64_t v12 = a2;
  id v7 = v11;
  uint64_t v8 = sub_10013A990(a1, v10, a4);

  return v8;
}

void sub_10013AD0C(uint64_t a1, void *a2)
{
  id v4 = *(const char **)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  xpc_object_t xdict = a2;
  xpc_dictionary_set_data(xdict, v4, [v5 bytes], (size_t)objc_msgSend(*(id *)(a1 + 32), "length"));
}

uint64_t sub_10013AD7C(void *a1, unsigned int a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10013ABA4;
  v3[3] = &unk_1003A23A0;
  v3[4] = "MRXPC_ERROR_CODE_KEY";
  v3[5] = 1LL;
  v3[6] = a2;
  return sub_10013A990(a1, v3, 0LL);
}

uint64_t sub_10013ADE4(void *a1, void *a2)
{
  return sub_10013A990(a1, a2, 0LL);
}

void sub_10013ADEC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  qos_class_t v11 = qos_class_self();
  dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(v9, 0LL);
  NSErrorUserInfoKey v13 = v9;
  __int16 v14 = v13;
  if (qos_class < v11)
  {
    dispatch_queue_attr_t v15 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    __int16 v16 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v15);
    qos_class_t v17 = qos_class_self();
    dispatch_queue_attr_t v18 = dispatch_queue_attr_make_with_qos_class(v16, v17, 0);
    unsigned int v19 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v18);
    __int16 v14 = dispatch_queue_create_with_target_V2(0LL, v19, v13);
  }

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10013AF34;
  handler[3] = &unk_1003A0090;
  id v22 = v10;
  id v20 = v10;
  xpc_connection_send_message_with_reply(v7, v8, v14, handler);
}

uint64_t sub_10013AF34(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10013AF48(void *a1)
{
  id v1 = a1;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10013B04C;
  v8[3] = &unk_100399F88;
  id v10 = &v11;
  id v5 = v2;
  id v9 = v5;
  MRProcessIDForApplication(v1, v4, v8);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v6 = *((unsigned __int8 *)v12 + 24);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10013B034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10013B04C(uint64_t a1, int a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2 > 0;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10013B068(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  kdebug_trace(732233788LL, 0LL, 0LL, 0LL, 0LL);
  qos_class_t v8 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v8, 0LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10013B148;
  v12[3] = &unk_100399530;
  id v13 = v5;
  id v11 = v5;
  MSVLaunchApplicationWithOptions(v7, v6, v10, v12);
}

uint64_t sub_10013B148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    (*(void (**)(void))(v1 + 16))();
  }
  return kdebug_trace(732233792LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_10013B180(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  kdebug_trace(732233788LL, 0LL, 0LL, 0LL, 0LL);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v12 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  @"MRDLaunchApplicationWithReason",  v8);
  char v14 = v12;
  if (v7) {
    -[NSMutableString appendFormat:](v12, "appendFormat:", @" for %@", v7);
  }
  uint64_t v15 = _MRLogForCategory(10LL, v13);
  __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v38 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_10013B62C;
  v31[3] = &unk_10039B658;
  id v17 = v8;
  id v32 = v17;
  id v18 = v7;
  id v33 = v18;
  uint64_t v34 = @"MRDLaunchApplicationWithReason";
  id v19 = v11;
  id v35 = v19;
  id v20 = v10;
  id v36 = v20;
  uint64_t v21 = objc_retainBlock(v31);
  if (sub_10013B4D0((uint64_t)v21, v18))
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:kMRMediaRemoteOptionCommandType]);
    id v23 = [v22 unsignedIntValue];

    id v30 = (void *)MRMediaRemoteCopyCommandDescription(v23);
    uint64_t v24 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@.%@",  @"com.apple.MediaRemote.command",  v30,  @"invoked.notify.client",  v18);
    BOOL v25 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@",  @"com.apple.MediaRemote.command",  @"invoked.notify.client",  v18);
    id v26 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"com.apple.MediaRemote.command",  @"invoked.notify.client");
    int v27 = v24;
    notify_post(-[NSString UTF8String](v27, "UTF8String"));
    int v28 = v25;
    notify_post(-[NSString UTF8String](v28, "UTF8String"));
    __int16 v29 = v26;
    notify_post(-[NSString UTF8String](v29, "UTF8String"));
    ((void (*)(void *, void))v21[2])(v21, 0LL);
  }

  else
  {
    sub_10013B068(v18, v9, v21);
  }
}

id sub_10013B4D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1003FE1A0 != -1) {
    dispatch_once(&qword_1003FE1A0, &stru_1003A23E8);
  }
  int IsAudioAccessory = MSVDeviceIsAudioAccessory();
  id v4 = &qword_1003FE198;
  if (!IsAudioAccessory) {
    id v4 = &qword_1003FE190;
  }
  id v5 = [(id)*v4 containsObject:v2];

  return v5;
}

void sub_10013B54C(id a1)
{
  uint64_t v1 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", &off_1003BBB88);
  id v2 = (void *)qword_1003FE190;
  qword_1003FE190 = (uint64_t)v1;

  id v8 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", &off_1003BBBA0);
  uint64_t v3 = _os_feature_enabled_impl("MediaPlayer", "Burgundy");
  if ((v3 & 1) == 0)
  {
    id v4 = (void *)MRMediaRemoteCopyLocalDeviceSystemMediaApplicationDisplayID(v3);
    -[NSMutableSet addObject:](v8, "addObject:", v4);
  }

  if ((_os_feature_enabled_impl("Podcasts", "Burgundy") & 1) == 0)
  {
    id v5 = (void *)MRMediaRemoteCopyLocalDeviceSystemPodcastApplicationDisplayID();
    -[NSMutableSet addObject:](v8, "addObject:", v5);
  }

  id v6 = -[NSMutableSet copy](v8, "copy");
  id v7 = (void *)qword_1003FE198;
  qword_1003FE198 = (uint64_t)v6;
}

void sub_10013B62C(void *a1, void *a2)
{
  id v4 = a2;
  if (!v4)
  {
    char v14 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"post-launch setup for  %@",  a1[4]);
    uint64_t v15 = -[MRDTaskAssertion initWithType:pid:bundleID:name:]( objc_alloc(&OBJC_CLASS___MRDTaskAssertion),  "initWithType:pid:bundleID:name:",  1LL,  0LL,  a1[5],  v14);
    -[MRDTaskAssertion invalidateInDuration:](v15, "invalidateInDuration:", 30.0);

    uint64_t v16 = a1[5];
    uint64_t v18 = _MRLogForCategory(10LL, v17);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    BOOL v19 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (!v19) {
        goto LABEL_14;
      }
      uint64_t v21 = (void *)a1[5];
      uint64_t v20 = a1[6];
      uint64_t v22 = a1[4];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:a1[7]];
      *(_DWORD *)__int128 buf = 138544130;
      uint64_t v32 = v20;
      __int16 v33 = 2114;
      uint64_t v34 = v22;
      __int16 v35 = 2114;
      id v36 = v21;
      __int16 v37 = 2048;
      uint64_t v38 = v23;
      uint64_t v24 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      BOOL v25 = v7;
      uint32_t v26 = 42;
    }

    else
    {
      if (!v19) {
        goto LABEL_14;
      }
      uint64_t v27 = a1[6];
      uint64_t v28 = a1[4];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v12 timeIntervalSinceDate:a1[7]];
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v32 = v27;
      __int16 v33 = 2114;
      uint64_t v34 = v28;
      __int16 v35 = 2048;
      id v36 = v29;
      uint64_t v24 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      BOOL v25 = v7;
      uint32_t v26 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
    goto LABEL_13;
  }

  uint64_t v5 = a1[5];
  uint64_t v6 = _MRLogForCategory(10LL, v3);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  if (v5)
  {
    if (!v8) {
      goto LABEL_14;
    }
    uint64_t v10 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v11 = a1[4];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v12 timeIntervalSinceDate:a1[7]];
    *(_DWORD *)__int128 buf = 138544386;
    uint64_t v32 = v9;
    __int16 v33 = 2114;
    uint64_t v34 = v11;
    __int16 v35 = 2114;
    id v36 = v4;
    __int16 v37 = 2114;
    uint64_t v38 = v10;
    __int16 v39 = 2048;
    uint64_t v40 = v13;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  buf,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v8) {
    sub_1002BAD2C();
  }
LABEL_14:

  uint64_t v30 = a1[8];
  if (v30) {
    (*(void (**)(uint64_t, id))(v30 + 16))(v30, v4);
  }
  kdebug_trace(732233792LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_10013B904(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[FBSOpenApplicationOptions optionsWithDictionary:]( &OBJC_CLASS___FBSOpenApplicationOptions,  "optionsWithDictionary:",  a2));
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( +[FBSOpenApplicationService serviceWithDefaultShellEndpoint]( &OBJC_CLASS___FBSOpenApplicationService,  "serviceWithDefaultShellEndpoint"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10013B9D8;
  v10[3] = &unk_1003A2410;
  id v11 = v5;
  id v9 = v5;
  [v8 openApplication:v6 withOptions:v7 completion:v10];
}

uint64_t sub_10013B9D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10013B9E8(void *a1, void *a2, void *a3, double a4)
{
}

void sub_10013B9F8(void *a1, void *a2, void *a3, void *a4, double a5)
{
  id v9 = a1;
  id v38 = a2;
  id v39 = a3;
  id v10 = a4;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);

  char v14 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  @"launchAppAndWaitForXpcConnection",  v13);
  uint64_t v16 = v14;
  if (v9) {
    -[NSMutableString appendFormat:](v14, "appendFormat:", @" for %@", v9);
  }
  uint64_t v17 = _MRLogForCategory(10LL, v15);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v59 = 0x3032000000LL;
  uint64_t v60 = sub_10013BEB0;
  v61 = sub_10013BEC0;
  id v62 = 0LL;
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_10013BEC8;
  v51[3] = &unk_1003A2438;
  id v19 = v9;
  id v52 = v19;
  uint64_t v53 = @"launchAppAndWaitForXpcConnection";
  id v20 = v13;
  id v54 = v20;
  id v21 = v11;
  id v55 = v21;
  id v22 = v10;
  id v56 = v22;
  p___int128 buf = &buf;
  uint64_t v23 = objc_retainBlock(v51);
  id v24 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
  BOOL v25 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Application <%@> waiting for xpcConnection",  v19);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472LL;
  v49[2] = sub_10013C2D8;
  v49[3] = &unk_100399530;
  uint32_t v26 = v23;
  id v50 = v26;
  id v27 = [v24 initWithTimeout:v25 reason:v49 handler:a5];

  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_10013C2F4;
  v46[3] = &unk_1003A2460;
  id v28 = v27;
  id v47 = v28;
  __int16 v29 = v26;
  id v48 = v29;
  uint64_t v30 = objc_retainBlock(v46);
  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_10013C354;
  v43[3] = &unk_1003A0790;
  id v32 = v19;
  id v44 = v32;
  __int16 v33 = v30;
  id v45 = v33;
  uint64_t v34 = objc_claimAutoreleasedReturnValue( [v31 addObserverForName:@"MRDMediaRemoteClientDidConnect" object:0 queue:0 usingBlock:v43]);
  __int16 v35 = *(void **)(*((void *)&buf + 1) + 40LL);
  *(void *)(*((void *)&buf + 1) + 4+[MSVAutoBugCapture snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:]( &OBJC_CLASS___MSVAutoBugCapture,  "snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:",  @"MediaRemote",  @"PlaybackQueue",  @"Cache",  @"Inconsistent PlaybackQueue Cache",  0LL,  0LL, 0LL) = v34;

  id v36 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 clientForBundleIdentifier:v32]);

  if (v37)
  {
    ((void (*)(void *, void *, void))v33[2])(v33, v37, 0LL);
  }

  else
  {
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_10013C3C8;
    v40[3] = &unk_10039BAB8;
    id v41 = v32;
    uint64_t v42 = v33;
    sub_10013B180(v41, @"launchAppAndWaitForXpcConnection", v39, v40);
  }

  _Block_object_dispose(&buf, 8);
}

void sub_10013BE88(_Unwind_Exception *a1)
{
}

uint64_t sub_10013BEB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10013BEC0(uint64_t a1)
{
}

void sub_10013BEC8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);

    uint64_t v18 = a1[4];
    uint64_t v20 = _MRLogForCategory(10LL, v19);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v17)
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v22 = a1[5];
        uint64_t v23 = a1[6];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);
        uint64_t v24 = a1[4];
        BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v25 timeIntervalSinceDate:a1[7]];
        int v47 = 138544386;
        uint64_t v48 = v22;
        __int16 v49 = 2114;
        uint64_t v50 = v23;
        __int16 v51 = 2112;
        id v52 = v15;
        __int16 v53 = 2114;
        uint64_t v54 = v24;
        __int16 v55 = 2048;
        uint64_t v56 = v26;
        id v27 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
        id v28 = v10;
        uint32_t v29 = 52;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v37 = a1[5];
        uint64_t v38 = a1[6];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);
        BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v25 timeIntervalSinceDate:a1[7]];
        int v47 = 138544130;
        uint64_t v48 = v37;
        __int16 v49 = 2114;
        uint64_t v50 = v38;
        __int16 v51 = 2112;
        id v52 = v15;
        __int16 v53 = 2048;
        uint64_t v54 = v39;
        id v27 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
        id v28 = v10;
        uint32_t v29 = 42;
      }

      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v47, v29);
    }

    else
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v31 = a1[5];
        uint64_t v30 = a1[6];
        id v32 = (void *)a1[4];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[7]];
        int v47 = 138544130;
        uint64_t v48 = v31;
        __int16 v49 = 2114;
        uint64_t v50 = v30;
        __int16 v51 = 2114;
        id v52 = v32;
        __int16 v53 = 2048;
        uint64_t v54 = v33;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        __int16 v35 = v10;
        uint32_t v36 = 42;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v40 = a1[5];
        uint64_t v41 = a1[6];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[7]];
        int v47 = 138543874;
        uint64_t v48 = v40;
        __int16 v49 = 2114;
        uint64_t v50 = v41;
        __int16 v51 = 2048;
        id v52 = v42;
        uint64_t v34 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        __int16 v35 = v10;
        uint32_t v36 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v47, v36);
    }

    goto LABEL_20;
  }

  uint64_t v8 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v6);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (!v11) {
      goto LABEL_21;
    }
    uint64_t v13 = a1[5];
    uint64_t v12 = a1[6];
    uint64_t v14 = a1[4];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:a1[7]];
    int v47 = 138544386;
    uint64_t v48 = v13;
    __int16 v49 = 2114;
    uint64_t v50 = v12;
    __int16 v51 = 2114;
    id v52 = v7;
    __int16 v53 = 2114;
    uint64_t v54 = v14;
    __int16 v55 = 2048;
    uint64_t v56 = v16;
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v47,  0x34u);
LABEL_20:

    goto LABEL_21;
  }

  if (v11) {
    sub_1002BADBC();
  }
LABEL_21:

  uint64_t v43 = a1[8];
  if (v43) {
    (*(void (**)(uint64_t, id, id))(v43 + 16))(v43, v5, v7);
  }
  if (*(void *)(*(void *)(a1[9] + 8LL) + 40LL))
  {
    id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v44 removeObserver:*(void *)(*(void *)(a1[9] + 8) + 40)];

    uint64_t v45 = *(void *)(a1[9] + 8LL);
    __int128 v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = 0LL;
  }
}

uint64_t sub_10013C2D8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_10013C2F4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_10013C354(uint64_t a1, void *a2)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([a2 object]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  unsigned int v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if (v4) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10013C3C8(uint64_t a1, void *a2)
{
  id v6 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 clientForBundleIdentifier:*(void *)(a1 + 32)]);

  if (v4)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_5:
    v5();
    goto LABEL_6;
  }

  if (v6)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_5;
  }

void sub_10013C460(void *a1, void *a2, void *a3, double a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a2;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 UUIDString]);

  uint64_t v13 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"%@<%@>",  @"launchAppAndWaitForCanBeNowPlaying",  v12);
  uint64_t v15 = v13;
  if (v7) {
    -[NSMutableString appendFormat:](v13, "appendFormat:", @" for %@", v7);
  }
  uint64_t v16 = _MRLogForCategory(10LL, v14);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v37 = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Request: %{public}@", buf, 0xCu);
  }

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_10013C6F4;
  v30[3] = &unk_1003A2488;
  id v18 = v7;
  id v31 = v18;
  id v32 = @"launchAppAndWaitForCanBeNowPlaying";
  id v33 = v12;
  id v34 = v10;
  id v35 = v8;
  id v19 = v8;
  id v20 = v10;
  id v21 = v12;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10013CAB4;
  v25[3] = &unk_1003A0B60;
  id v27 = v18;
  id v28 = objc_retainBlock(v30);
  double v29 = a4;
  id v26 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v22 = v18;
  id v23 = v26;
  uint64_t v24 = v28;
  sub_10013B9F8(v22, 0LL, v9, v25, a4);
}

void sub_10013C6F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (!v7)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);

    uint64_t v18 = a1[4];
    uint64_t v20 = _MRLogForCategory(10LL, v19);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    BOOL v21 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (!v17)
    {
      if (v18)
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v31 = a1[5];
        uint64_t v30 = a1[6];
        id v32 = (void *)a1[4];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[7]];
        int v43 = 138544130;
        uint64_t v44 = v31;
        __int16 v45 = 2114;
        uint64_t v46 = v30;
        __int16 v47 = 2114;
        id v48 = v32;
        __int16 v49 = 2048;
        uint64_t v50 = v33;
        id v34 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
        id v35 = v10;
        uint32_t v36 = 42;
      }

      else
      {
        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v40 = a1[5];
        uint64_t v41 = a1[6];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v15 timeIntervalSinceDate:a1[7]];
        int v43 = 138543874;
        uint64_t v44 = v40;
        __int16 v45 = 2114;
        uint64_t v46 = v41;
        __int16 v47 = 2048;
        id v48 = v42;
        id v34 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
        id v35 = v10;
        uint32_t v36 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, (uint8_t *)&v43, v36);
      goto LABEL_20;
    }

    if (v18)
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v22 = a1[5];
      uint64_t v23 = a1[6];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);
      uint64_t v24 = a1[4];
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:a1[7]];
      int v43 = 138544386;
      uint64_t v44 = v22;
      __int16 v45 = 2114;
      uint64_t v46 = v23;
      __int16 v47 = 2112;
      id v48 = v15;
      __int16 v49 = 2114;
      uint64_t v50 = v24;
      __int16 v51 = 2048;
      uint64_t v52 = v26;
      id v27 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      id v28 = v10;
      uint32_t v29 = 52;
    }

    else
    {
      if (!v21) {
        goto LABEL_21;
      }
      uint64_t v37 = a1[5];
      uint64_t v38 = a1[6];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 displayName]);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v25 timeIntervalSinceDate:a1[7]];
      int v43 = 138544130;
      uint64_t v44 = v37;
      __int16 v45 = 2114;
      uint64_t v46 = v38;
      __int16 v47 = 2112;
      id v48 = v15;
      __int16 v49 = 2048;
      uint64_t v50 = v39;
      id v27 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
      id v28 = v10;
      uint32_t v29 = 42;
    }

    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v43, v29);

    goto LABEL_20;
  }

  uint64_t v8 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v6);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v8)
  {
    if (v11)
    {
      uint64_t v13 = a1[5];
      uint64_t v12 = a1[6];
      uint64_t v14 = a1[4];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v15 timeIntervalSinceDate:a1[7]];
      int v43 = 138544386;
      uint64_t v44 = v13;
      __int16 v45 = 2114;
      uint64_t v46 = v12;
      __int16 v47 = 2114;
      id v48 = v7;
      __int16 v49 = 2114;
      uint64_t v50 = v14;
      __int16 v51 = 2048;
      uint64_t v52 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v43,  0x34u);
LABEL_20:
    }
  }

  else if (v11)
  {
    sub_1002BADBC();
  }

void sub_10013CAB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    double v7 = *(double *)(a1 + 56);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 timeIntervalSinceDate:*(void *)(a1 + 32)];
    double v10 = v7 - v9;

    id v11 = objc_alloc(&OBJC_CLASS___MRBlockGuard);
    uint64_t v12 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Application <%@> waiting for CanBeNowPlaying",  *(void *)(a1 + 40));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_10013CD98;
    v28[3] = &unk_100399530;
    id v29 = *(id *)(a1 + 48);
    id v13 = [v11 initWithTimeout:v12 reason:v28 handler:v10];

    objc_initWeak(&location, v5);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v15 = kMRMediaRemoteNowPlayingApplicationDidRegisterCanBeNowPlaying;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10013CDB4;
    v22[3] = &unk_1003A24B0;
    objc_copyWeak(&v26, &location);
    id v23 = *(id *)(a1 + 40);
    id v16 = v13;
    id v24 = v16;
    id v25 = *(id *)(a1 + 48);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v14 addObserverForName:v15 object:0 queue:0 usingBlock:v22]);

    if ([v5 canBeNowPlaying])
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v18 removeObserver:v17];
    }

    else
    {
      dispatch_time_t v19 = dispatch_time(0LL, (uint64_t)((v10 + 2.0) * 1000000000.0));
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10013CE6C;
      block[3] = &unk_100399250;
      id v21 = v17;
      dispatch_after(v19, &_dispatch_main_q, block);
      uint64_t v18 = v21;
    }

    objc_destroyWeak(&v26);
    objc_destroyWeak(&location);
  }
}

void sub_10013CD70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

uint64_t sub_10013CD98(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

void sub_10013CDB4(uint64_t a1, void *a2)
{
  uint64_t v3 = (id *)(a1 + 56);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);

  uint64_t v6 = MRGetClientFromUserInfo(v5);
  double v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleIdentifier]);
  LODWORD(v5) = [v8 isEqualToString:*(void *)(a1 + 32)];
}

void sub_10013CE6C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 removeObserver:*(void *)(a1 + 32)];
}

id sub_10013CEB0(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  id v9 = 0LL;
  id v3 = [v2 setAttribute:v1 forKey:AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute error:&v9];
  id v4 = v9;

  if ((v3 & 1) == 0)
  {
    uint64_t v6 = _MRLogForCategory(0LL, v5);
    double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v11 = v1;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error blessing %@ for playback initialization. %@",  buf,  0x16u);
    }
  }

  return v3;
}

uint64_t sub_10013CFC0(void *a1)
{
  id v1 = a1;
  uint64_t v11 = 0LL;
  __int16 v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  int v14 = 0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10013D0C4;
  v8[3] = &unk_100399F88;
  double v10 = &v11;
  uint64_t v5 = v2;
  id v9 = v5;
  MRProcessIDForApplication(v1, v4, v8);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v6 = *((unsigned int *)v12 + 6);

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10013D0AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10013D0C4(uint64_t a1, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

NSString *sub_10013D0D8(_OWORD *a1)
{
  __int128 v2 = a1[1];
  *(_OWORD *)v13.val = *a1;
  *(_OWORD *)&v13.val[4] = v2;
  pid_t v3 = audit_token_to_pid(&v13);
  if (v3 == getpid())
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);

    return (NSString *)v5;
  }

  __int128 v7 = a1[1];
  *(_OWORD *)v13.val = *a1;
  *(_OWORD *)&v13.val[4] = v7;
  uint64_t v8 = MSVBundleIDForAuditToken(&v13);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (!v9)
  {
    uint64_t v10 = xpc_copy_code_signing_identity_for_token(a1);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      __int16 v12 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v10);
      free(v11);
      return v12;
    }

    id v9 = 0LL;
  }

  return (NSString *)v9;
}

NSString *sub_10013D19C(uint64_t a1)
{
  id v2 = sub_10013D200(a1);
  pid_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = v3;
  if (v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"FallbackIdentifier-%d",  a1);
  }
  uint64_t v6 = v5;

  return v6;
}

id sub_10013D200(int a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  unsigned int v3 = [v2 processIdentifier];

  if (v3 == a1)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allClients]);

    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v4 = v7;
    id v8 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v17;
      while (2)
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v4);
          }
          __int16 v12 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          if (objc_msgSend(v12, "pid", (void)v16) == a1)
          {
            audit_token_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
            id v14 = [v13 length];

            if (v14)
            {
              uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v12 bundleIdentifier]);
              goto LABEL_14;
            }
          }
        }

        id v9 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    uint64_t v5 = 0LL;
LABEL_14:
  }

  return v5;
}

id sub_10013D3B4()
{
  v0 = (void *)MSVWeakLinkSymbol("SBSCopyFrontmostApplicationDisplayIdentifier", @"SpringBoardServices");
  if (v0)
  {
    id v1 = (uint64_t (*)(void))MSVWeakLinkSymbol( "SBSCopyFrontmostApplicationDisplayIdentifier",  @"SpringBoardServices");
    v0 = (void *)v1();
  }

  return v0;
}

id sub_10013D3F4(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationProxy applicationProxyForIdentifier:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:",  a1));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 localizedName]);
  id v3 = [v2 copy];

  return v3;
}

id sub_10013D44C()
{
  v0 = (void *)MGCopyAnswer(@"EthernetMacAddress", 0LL);
  if (![v0 length])
  {
    id v1 = (void *)MGCopyAnswer(@"WifiAddressData", 0LL);
    if (v1) {
      id v2 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v1, 4LL);
    }
    else {
      id v2 = 0LL;
    }

    v0 = v2;
  }

  if (![v0 length])
  {
    uint64_t v3 = MGCopyAnswer(@"WifiAddress", 0LL);

    v0 = (void *)v3;
  }

  if (![v0 length])
  {
    uint64_t v5 = _MRLogForCategory(0LL, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Unknown device network ID", v8, 2u);
    }
  }

  return v0;
}

id sub_10013D554(int a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  unsigned int v3 = [v2 processIdentifier];

  if (v3 == a1) {
    return (id)getuid();
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allClients]);

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v16;
    while (2)
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        if (objc_msgSend(v12, "pid", (void)v15) == a1)
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 connection]);
          id v13 = [v14 uid];

          goto LABEL_13;
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  id v13 = 0LL;
LABEL_13:

  return v13;
}

void sub_10013D6FC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10013D858;
  v16[3] = &unk_1003A24D8;
  uint64_t v5 = (dispatch_queue_s *)v3;
  __int128 v17 = v5;
  id v6 = v4;
  id v18 = v6;
  id v7 = objc_retainBlock(v16);
  uint64_t v8 = off_1003F7A28();
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v9)
  {
    uint64_t v11 = (const char *)[v9 UTF8String];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10013D8DC;
    v13[3] = &unk_1003A2500;
    __int16 v12 = v7;
    id v14 = v12;
    notify_register_dispatch(v11, &out_token, v5, v13);
    if ((off_1003F7A30() & 1) == 0) {
      ((void (*)(void *, void))v12[2])(v12, out_token);
    }
  }

  else
  {
    ((void (*)(void *, void))v7[2])(v7, 0LL);
  }
}

void sub_10013D858(uint64_t a1, int token)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013D8D0;
  block[3] = &unk_100399EC0;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_10013D8D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013D8DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10013D8E8(int a1, int a2, void *a3)
{
  id v6 = a3;
  if (qword_1003FE1B0 != -1) {
    dispatch_once(&qword_1003FE1B0, &stru_1003A2520);
  }
  if (byte_1003FE1A8)
  {
    if (a1)
    {
      uint64_t v7 = _MRLogForCategory(0LL, v5);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138412290;
        id v20 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Waking Television because %@",  (uint8_t *)&v19,  0xCu);
      }

      id v9 = objc_msgSend( (id)MSVWeakLinkClass(@"PBSSystemServiceConnection", @"PineBoardServices"),  "sharedConnection");
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 systemServiceProxy]);
      uint64_t v12 = MSVWeakLinkStringConstant("PBSWakeReasonCEC", @"PineBoardServices");
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      [v11 wakeSystemForReason:v13];
    }

    if (a2)
    {
      uint64_t v14 = _MRLogForCategory(0LL, v5);
      __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = 138412290;
        id v20 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Dismissing ScreenSaver because %@",  (uint8_t *)&v19,  0xCu);
      }

      id v16 = objc_msgSend( (id)MSVWeakLinkClass(@"PBSSystemServiceConnection", @"PineBoardServices"),  "sharedConnection");
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 systemServiceProxy]);
      [v18 deactivateScreenSaver];
    }
  }
}

uint64_t sub_10013DAD4()
{
  if (qword_1003FE1B0 != -1) {
    dispatch_once(&qword_1003FE1B0, &stru_1003A2520);
  }
  return byte_1003FE1A8;
}

void sub_10013DB14(id a1)
{
  byte_1003FE1A8 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) == 4;
}

uint64_t variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError()
{
  return 0LL;
}

uint64_t sub_10013DB4C()
{
  if (qword_1003FE1C0 != -1) {
    dispatch_once(&qword_1003FE1C0, &stru_1003A2540);
  }
  v0 = (uint64_t *)dlsym((void *)qword_1003FE1C8, "BYSetupAssistantFinishedDarwinNotification");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1003FE1B8 = result;
  }

  else
  {
    uint64_t result = qword_1003FE1B8;
  }

  off_1003F7A28 = sub_10013DBC4;
  return result;
}

uint64_t sub_10013DBC4()
{
  return qword_1003FE1B8;
}

void sub_10013DBD0(id a1)
{
  qword_1003FE1C8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

uint64_t sub_10013DBF8()
{
  if (qword_1003FE1C0 != -1) {
    dispatch_once(&qword_1003FE1C0, &stru_1003A2540);
  }
  off_1003F7A30 = (uint64_t (*)())dlsym((void *)qword_1003FE1C8, "BYSetupAssistantNeedsToRun");
  return off_1003F7A30();
}

id sub_10013DC4C(void *a1, const char *a2)
{
  return [a1 timeIntervalSinceDate:*(void *)(v2 + 56)];
}

uint64_t sub_10013F24C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10013F360(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10013FC78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  if (v6 && !v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);

    uint64_t v10 = _MRLogForCategory(10LL, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (!v12) {
        goto LABEL_23;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544386;
      uint64_t v44 = v13;
      __int16 v45 = 2114;
      uint64_t v46 = v14;
      __int16 v47 = 2112;
      id v48 = v6;
      __int16 v49 = 2114;
      uint64_t v50 = v15;
      __int16 v51 = 2048;
      uint64_t v52 = v17;
      id v18 = "Response: %{public}@<%{public}@> returned <%@> for %{public}@ in %.4lf seconds";
      int v19 = v11;
      uint32_t v20 = 52;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v43, v20);
LABEL_14:

LABEL_22:
      goto LABEL_23;
    }

    if (!v12) {
      goto LABEL_23;
    }
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v43 = 138544130;
    uint64_t v44 = v33;
    __int16 v45 = 2114;
    uint64_t v46 = v14;
    __int16 v47 = 2112;
    id v48 = v6;
    __int16 v49 = 2048;
    uint64_t v50 = v34;
    id v35 = "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds";
    uint32_t v36 = v11;
    uint32_t v37 = 42;
    goto LABEL_21;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
  uint64_t v24 = _MRLogForCategory(10LL, v23);
  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  uint64_t v11 = v25;
  if (!v21)
  {
    BOOL v30 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if (v22)
    {
      if (!v30) {
        goto LABEL_23;
      }
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v43 = 138544130;
      uint64_t v44 = v31;
      __int16 v45 = 2114;
      uint64_t v46 = v14;
      __int16 v47 = 2114;
      id v48 = v15;
      __int16 v49 = 2048;
      uint64_t v50 = v32;
      id v18 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      int v19 = v11;
      uint32_t v20 = 42;
      goto LABEL_13;
    }

    if (!v30) {
      goto LABEL_23;
    }
    uint64_t v38 = *(void *)(a1 + 32);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v15 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v43 = 138543874;
    uint64_t v44 = v38;
    __int16 v45 = 2114;
    uint64_t v46 = v14;
    __int16 v47 = 2048;
    id v48 = v39;
    id v35 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
    uint32_t v36 = v11;
    uint32_t v37 = 32;
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, (uint8_t *)&v43, v37);
    goto LABEL_22;
  }

  BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (v22)
  {
    if (!v26) {
      goto LABEL_23;
    }
    uint64_t v27 = *(void *)(a1 + 32);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 debugName]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v28 timeIntervalSinceDate:*(void *)(a1 + 48)];
    int v43 = 138544386;
    uint64_t v44 = v27;
    __int16 v45 = 2114;
    uint64_t v46 = v14;
    __int16 v47 = 2114;
    id v48 = v15;
    __int16 v49 = 2114;
    uint64_t v50 = v16;
    __int16 v51 = 2048;
    uint64_t v52 = v29;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v43,  0x34u);

    goto LABEL_14;
  }

  if (v26) {
    sub_1002BAE48(a1, v6, v11);
  }
LABEL_23:

  uint64_t v40 = *(void **)(a1 + 56);
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
  [v40 trackWithError:v41];

  uint64_t v42 = *(void *)(a1 + 64);
  if (v42) {
    (*(void (**)(uint64_t, id, id))(v42 + 16))(v42, v5, v6);
  }
}

void sub_1001400F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = -[MRCommandResult initWithError:](objc_alloc(&OBJC_CLASS___MRCommandResult), "initWithError:", v3);

  (*(void (**)(uint64_t, void, MRCommandResult *))(v2 + 16))(v2, 0LL, v4);
}

void sub_100140160(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_1001401C0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = -[MRCommandResult initWithError:](objc_alloc(&OBJC_CLASS___MRCommandResult), "initWithError:", v3);

  (*(void (**)(uint64_t, void, MRCommandResult *))(v2 + 16))(v2, 0LL, v4);
}

void sub_10014022C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connect]);
  [v7 start];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100140340;
  v11[3] = &unk_1003A25B8;
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  id v13 = v5;
  id v14 = *(id *)(a1 + 48);
  int v18 = *(_DWORD *)(a1 + 72);
  id v15 = *(id *)(a1 + 56);
  id v16 = v6;
  id v17 = *(id *)(a1 + 64);
  id v9 = v6;
  id v10 = v5;
  [v10 connectToExternalDeviceWithOptions:0 details:v8 completion:v11];
}

void sub_100140340(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connect]);
  [v4 endWithError:v3];

  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 72);
    id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 100));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendCommand]);
    [v7 start];

    id v6 = [[MRDestination alloc] initWithEndpoint:*(void *)(a1 + 40)];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) client]);
    [v6 setClient:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) player]);
    [v6 setPlayer:v9];

    id v10 = [[MRNowPlayingRequest alloc] initWithDestination:v6];
    uint64_t v11 = *(unsigned int *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 56);
    qos_class_t v13 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v13, 0LL);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1001404F4;
    v16[3] = &unk_100399DD0;
    id v17 = *(id *)(a1 + 32);
    id v18 = *(id *)(a1 + 64);
    [v10 sendCommand:v11 options:v12 queue:v15 completion:v16];
  }
}

void sub_1001404F4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sendCommand]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
  [v4 endWithError:v5];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

MROrigin *sub_100140574(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isRequestForCompanionOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCompanionOrigin:1];
    uint64_t v2 = -[MROrigin initWithIdentifier:type:displayName:]( objc_alloc(&OBJC_CLASS___MROrigin),  "initWithIdentifier:type:displayName:",  1129140302LL,  1LL,  &stru_1003AE680);
  }

  else if ([*(id *)(a1 + 32) _isRequestForLocalOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForLocalOrigin:1];
    uint64_t v2 = (MROrigin *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_100140604(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sendCommand]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);
  [v5 endWithError:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
  (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v4);
}

void sub_1001406A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createPartialEndpoint]);
  [v7 end];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100140784;
  v13[3] = &unk_1003A2630;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v9;
  id v16 = v6;
  id v10 = *(void (**)(uint64_t, id, void *))(v8 + 16);
  id v11 = v6;
  id v12 = v5;
  v10(v8, v12, v13);
}

uint64_t sub_100140784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001407BC(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createPartialEndpoint]);
  [v4 endWithError:v7];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createEndpointWithCurrentTopology]);
  [v5 endWithError:v7];

  id v6 = v7;
  if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v6 = v7;
  }
}

void sub_100140838(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createPartialEndpoint]);
  [v7 end];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100140918;
  v13[3] = &unk_1003A2630;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v14 = v5;
  id v15 = v9;
  id v16 = v6;
  id v10 = *(void (**)(uint64_t, id, void *))(v8 + 16);
  id v11 = v6;
  id v12 = v5;
  v10(v8, v12, v13);
}

uint64_t sub_100140918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100140950(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createPartialEndpoint]);
  [v4 endWithError:v7];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createOptimizedEndpoint]);
  [v5 endWithError:v7];

  id v6 = v7;
  if (v7)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v6 = v7;
  }
}

void sub_1001411DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6
    || (id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A2698)),
        id v6 = (NSError *)objc_claimAutoreleasedReturnValue([v7 error]),
        v7,
        v6))
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "msv_firstWhere:", &stru_1003A26B8));
    if (!v8) {
      goto LABEL_10;
    }
    id v10 = (void *)v8;
  }

  if ([v5 count]
    || (id v6 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 26LL)) == 0LL)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mr_formattedDebugDescription"));

    uint64_t v13 = _MRLogForCategory(10LL, v12);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v15)
      {
        uint64_t v16 = *(void *)(a1 + 32);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mr_formattedDebugDescription"));
        int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v19 timeIntervalSinceDate:*(void *)(a1 + 48)];
        int v27 = 138544130;
        uint64_t v28 = v16;
        __int16 v29 = 2114;
        BOOL v30 = v17;
        __int16 v31 = 2112;
        id v32 = v18;
        __int16 v33 = 2048;
        uint64_t v34 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned <%@> in %.4lf seconds",  (uint8_t *)&v27,  0x2Au);

LABEL_14:
      }
    }

    else if (v15)
    {
      uint64_t v22 = *(void *)(a1 + 32);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestID]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v18 timeIntervalSinceDate:*(void *)(a1 + 48)];
      int v27 = 138543874;
      uint64_t v28 = v22;
      __int16 v29 = 2114;
      BOOL v30 = v17;
      __int16 v31 = 2048;
      id v32 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Response: %{public}@<%{public}@> returned in %.4lf seconds",  (uint8_t *)&v27,  0x20u);
      goto LABEL_14;
    }

    id v6 = 0LL;
    goto LABEL_16;
  }

BOOL sub_100141504(id a1, MRCommandResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

BOOL sub_100141538(id a1, MRCommandResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 == 0LL;

  return v3;
}

BOOL sub_10014156C(id a1, MRCommandResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

BOOL sub_1001415A0(id a1, MRCommandResult *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 == 0LL;

  return v3;
}

void sub_1001415D4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  id v4 = [*(id *)(a1 + 32) copy];
  objc_sync_exit(v3);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10014164C(_Unwind_Exception *a1)
{
}

void sub_100141660(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
}

void sub_1001416C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendCommands]);
  [v4 start];

  id v5 = dispatch_group_create();
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v27;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v10);
        dispatch_group_enter(v5);
        uint64_t v12 = *(void *)(a1 + 40);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_10014190C;
        v20[3] = &unk_1003A2748;
        uint64_t v21 = v5;
        uint64_t v22 = v11;
        int v25 = *(_DWORD *)(a1 + 72);
        id v23 = *(id *)(a1 + 48);
        id v24 = *(id *)(a1 + 56);
        [v11 connectToExternalDeviceWithOptions:0 details:v12 completion:v20];

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v8);
  }

  qos_class_t v13 = qos_class_self();
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(v13, 0LL);
  BOOL v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100141B18;
  v16[3] = &unk_100399768;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 32);
  id v19 = *(id *)(a1 + 64);
  dispatch_group_notify(v5, v15, v16);
}

void sub_10014190C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = objc_alloc(&OBJC_CLASS___MRCommandResult);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mr_errorByEnvelopingWithMRError:", 100));
    id v6 = -[MRCommandResult initWithError:](v4, "initWithError:", v5);

    id v7 = *(id *)(a1 + 56);
    objc_sync_enter(v7);
    [*(id *)(a1 + 56) addObject:v6];
    objc_sync_exit(v7);
  }

  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    id v6 = (MRCommandResult *)[[MRDestination alloc] initWithEndpoint:*(void *)(a1 + 40)];
    id v7 = [[MRNowPlayingRequest alloc] initWithDestination:v6];
    uint64_t v8 = *(unsigned int *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 48);
    qos_class_t v10 = qos_class_self();
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(v10, 0LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100141AA4;
    v13[3] = &unk_1003999E8;
    id v14 = *(id *)(a1 + 56);
    id v15 = *(id *)(a1 + 32);
    [v7 sendCommand:v8 options:v9 queue:v12 completion:v13];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100141A90(_Unwind_Exception *a1)
{
}

void sub_100141AA4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) addObject:v4];
  objc_sync_exit(v3);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100141B04(_Unwind_Exception *a1)
{
}

void sub_100141B18(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  objc_sync_enter(v2);
  id v6 = [*(id *)(a1 + 32) copy];
  objc_sync_exit(v2);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sendCommands]);
  [v3 end];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "msv_filter:", &stru_1003A2768));
  objc_msgSend(*(id *)(a1 + 40), "setNumberOfErrorsAtCompletion:", objc_msgSend(v4, "count"));

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "msv_filter:", &stru_1003A2788));
  objc_msgSend(*(id *)(a1 + 40), "setNumberOfSuccessAtCompletion:", objc_msgSend(v5, "count"));

  if ([*(id *)(a1 + 40) tracked])
  {
    [*(id *)(a1 + 40) setTracked:0];
    [*(id *)(a1 + 40) track];
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100141C0C(_Unwind_Exception *a1)
{
}

BOOL sub_100141C20(id a1, MRCommandResult *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 != 0LL;

  return v3;
}

BOOL sub_100141C54(id a1, MRCommandResult *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[MRCommandResult error](a2, "error"));
  BOOL v3 = v2 == 0LL;

  return v3;
}

MROrigin *sub_100141C88(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isRequestForCurrentCongifuration:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCurrentConfiguration:1];
LABEL_5:
    id v2 = (MROrigin *)objc_claimAutoreleasedReturnValue(+[MROrigin localOrigin](&OBJC_CLASS___MROrigin, "localOrigin"));
    return v2;
  }

  if ([*(id *)(a1 + 32) _isRequestForLocalOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForLocalOrigin:1];
    goto LABEL_5;
  }

  if ([*(id *)(a1 + 32) _isRequestForCompanionOrigin:*(void *)(a1 + 40)])
  {
    [*(id *)(a1 + 48) setRequestForCompanionOrigin:1];
    id v2 = -[MROrigin initWithIdentifier:type:displayName:]( objc_alloc(&OBJC_CLASS___MROrigin),  "initWithIdentifier:type:displayName:",  1129140302LL,  1LL,  &stru_1003AE680);
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

void sub_100141D34(uint64_t a1, void *a2)
{
  BOOL v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sendCommands]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);
  [v5 endWithError:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v8, 0LL);
}

void sub_100141E0C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v42 = a2;
  id v43 = a3;
  id v8 = a5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) discoverOutputDevices]);
  qos_class_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "mr_errorByEnvelopingWithMRError:", 47));
  [v9 endWithError:v10];

  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  uint64_t v41 = a1;
  id v12 = *(id *)(a1 + 40);
  id v13 = [v12 countByEnumeratingWithState:&v45 objects:v55 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v46;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v46 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472LL;
        v44[2] = sub_100142274;
        v44[3] = &qword_10039CB30;
        v44[4] = v17;
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "msv_firstWhere:", v44));
        if (!v18) {
          -[NSMutableArray addObject:](v11, "addObject:", v17);
        }
      }

      id v14 = [v12 countByEnumeratingWithState:&v45 objects:v55 count:16];
    }

    while (v14);
  }

  if (-[NSMutableArray count](v11, "count"))
  {
    id v19 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Unable to find outputDeviceUIDs=%@",  v11);
    uint64_t v21 = _MRLogForCategory(10LL, v20);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 48);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v41 + 56) requestID]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v50 = v23;
      __int16 v51 = 2114;
      uint64_t v52 = v24;
      __int16 v53 = 2112;
      uint64_t v54 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Update: %{public}@<%{public}@> %@",  buf,  0x20u);
    }

    objc_msgSend(*(id *)(v41 + 32), "setNumberOfMissingOutputDeviceUIDs:", -[NSMutableArray count](v11, "count"));
  }

  int v25 = objc_alloc(&OBJC_CLASS___NSString);
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "msv_map:", &stru_1003A27D0));
  __int128 v27 = -[NSString initWithFormat:](v25, "initWithFormat:", @"Resolved outputDevices=%@", v26);

  uint64_t v29 = _MRLogForCategory(10LL, v28);
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void *)(v41 + 48);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v41 + 56) requestID]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v50 = v31;
    __int16 v51 = 2114;
    uint64_t v52 = v32;
    __int16 v53 = 2112;
    uint64_t v54 = v27;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  objc_msgSend(*(id *)(v41 + 32), "setNumberOfDiscoveredOutputDeviceUIDs:", objc_msgSend(v42, "count"));
  __int16 v33 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "msv_map:", &stru_1003A27F0));
  id v35 = -[NSString initWithFormat:](v33, "initWithFormat:", @"Resolved endpoints=%@", v34);

  uint64_t v37 = _MRLogForCategory(10LL, v36);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = *(void *)(v41 + 48);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v41 + 56) requestID]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v50 = v39;
    __int16 v51 = 2114;
    uint64_t v52 = v40;
    __int16 v53 = 2112;
    uint64_t v54 = v35;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Update: %{public}@<%{public}@> %@", buf, 0x20u);
  }

  objc_msgSend(*(id *)(v41 + 32), "setNumberOfEndpoints:", objc_msgSend(v43, "count"));
  (*(void (**)(void))(*(void *)(v41 + 64) + 16LL))();
}

id sub_100142274(uint64_t a1, void *a2)
{
  return [a2 containsOutputDeviceWithUID:*(void *)(a1 + 32)];
}

id sub_100142280(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice debugName](a2, "debugName");
}

id sub_100142288(id a1, MRAVEndpoint *a2)
{
  return -[MRAVEndpoint debugName](a2, "debugName");
}

id sub_100142364(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", @"LOCAL_DEVICE")) {
    BOOL v3 = (NSString *)objc_claimAutoreleasedReturnValue(+[MRAVOutputDevice localDeviceUID](&OBJC_CLASS___MRAVOutputDevice, "localDeviceUID"));
  }
  else {
    BOOL v3 = v2;
  }
  id v4 = v3;

  return v4;
}

id sub_1001423B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVOutputDevice localDeviceUID](&OBJC_CLASS___MRAVOutputDevice, "localDeviceUID"));
  if (([v3 isEqualToString:v4] & 1) == 0)
  {

    goto LABEL_5;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);

  if (!v5)
  {
LABEL_5:
    id v6 = v3;
    goto LABEL_6;
  }

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
LABEL_6:
  uint64_t v7 = v6;

  return v7;
}

BOOL sub_100142608(id a1, NSString *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVOutputDevice localDeviceUID](&OBJC_CLASS___MRAVOutputDevice, "localDeviceUID"));
  unsigned __int8 v4 = -[NSString isEqualToString:](v2, "isEqualToString:", v3);

  return v4;
}

uint64_t sub_100142780(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) WHAIdentifier]);
  else {
    uint64_t v5 = (uint64_t)[v3 isEqualToString:@"CMPN"];
  }

  return v5;
}

uint64_t sub_1001428B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceUID]);
  if ([v4 isEqualToString:v3])
  {
    uint64_t v5 = 1LL;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clusterID]);
    uint64_t v5 = (uint64_t)[v6 isEqualToString:v3];
  }

  return v5;
}

void sub_100142930(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_100142C0C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100142C38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained invalidate];
    id WeakRetained = v2;
  }
}

void sub_100142E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory(11LL, v2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002BAFF4();
    }
  }
}

void sub_100142FE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory(11LL, v2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002BB058();
    }
  }
}

void sub_10014313C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = _MRLogForCategory(11LL, v2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1002BB0BC();
    }
  }
}

void sub_100143B54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100143B84(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _MRLogForCategory(11LL, v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    id v7 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRUIController][D] <%p> XPC interrupted.",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained xpcConnection]);
  [v5 invalidate];
}

void sub_100143C4C(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = _MRLogForCategory(11LL, v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 134217984;
    id v7 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRUIController][D] <%p> XPC invalidated.",  (uint8_t *)&v6,  0xCu);
  }

  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 4);
    uint64_t v5 = *(void **)&WeakRetained[6]._os_unfair_lock_opaque;
    *(void *)&WeakRetained[6]._os_unfair_lock_opaque = 0LL;

    os_unfair_lock_unlock(WeakRetained + 4);
  }
}

void sub_100143D98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(11LL, v4);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 134218242;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRUIController][D] <%p> Server proxy error %@.",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100143ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(11LL, v4);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 134218242;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRUIController][D] <%p> Server proxy error %@.",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100144178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100144190(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001441A0(uint64_t a1)
{
}

void sub_1001441A8(uint64_t a1, void *a2)
{
}

void sub_100144648(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___MRDGroupSessionEligibilityMonitor);
  uint64_t v2 = (void *)qword_1003FE1D8;
  qword_1003FE1D8 = (uint64_t)v1;
}

id sub_1001447C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

void sub_100144B24(_Unwind_Exception *a1)
{
}

void sub_100144B54(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(12LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unsigned int v5 = [*(id *)(a1 + 32) manateeAvailable];
    v7[0] = 67109120;
    v7[1] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionEligibilityMonitor] SystemMonitor.manateeChangedHandler. Manatee available: %{BOOL}u",  (uint8_t *)v7,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained reevaluateState];
}

void sub_100144C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(12LL, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unsigned int v5 = [*(id *)(a1 + 32) manateeAvailable];
    v7[0] = 67109120;
    v7[1] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[MRDGroupSessionEligibilityMonitor] SystemMonitor.activateWithCompletion. Manatee available: %{BOOL}u",  (uint8_t *)v7,  8u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained reevaluateState];
}

uint64_t sub_100144E88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100144E98(uint64_t a1)
{
}

void sub_100144EA0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1001453A0(id a1, MRDMediaUserState *a2)
{
  return -[MRDMediaUserState frameworkState](a2, "frameworkState");
}

void sub_100145424(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001454D8;
  block[3] = &unk_100398F40;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v2;
  id v7 = v2;
  dispatch_async(v4, block);
}

id sub_1001454D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) eligibilityMonitor:*(void *)(a1 + 40) eligibilityStatusDidChange:*(void *)(a1 + 48)];
}

id sub_100145564(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 48) removeObject:*(void *)(a1 + 40)];
}

void sub_100145620(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*((void *)&v7 + 1) + 8 * (void)v6),  "eligibilityMonitor:eligibilityStatusDidChange:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

id sub_100145968(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v10 = 0LL;
  id v4 = a2;
  id v5 = [v3 hostingStateForUserState:v4 reason:&v10];
  id v6 = v10;
  __int128 v7 = *(void **)(a1 + 40);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);

  [v7 appendFormat:@"\n  %@> %@", v8, v6];
  return (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v5));
}

id sub_100145DEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100145E60(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

id sub_100145F50(uint64_t a1)
{
  return [*(id *)(a1 + 32) reevaluateState];
}

void sub_1001466B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100146718(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_map:", &stru_1003A2B78));
    int v11 = 138412290;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] addEndpointsAddedCallback: %@",  (uint8_t *)&v11,  0xCu);
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_compactMap:", &stru_1003A2BB8));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained recommender]);
  [v10 updateRouteCandidates:v8];
}

NSString *__cdecl sub_100146830(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint localizedName](v2, "localizedName"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint uniqueIdentifier](v2, "uniqueIdentifier"));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ - %@", v3, v4));
  return (NSString *)v5;
}

MRIRRoute *__cdecl sub_1001468B0(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  else {
    id v3 = 0LL;
  }

  return (MRIRRoute *)v3;
}

void sub_100146900(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_map:", &stru_1003A2BD8));
    int v11 = 138412290;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] addEndpointsModifiedCallback: %@",  (uint8_t *)&v11,  0xCu);
  }

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "msv_compactMap:", &stru_1003A2BF8));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained recommender]);
  [v10 updateRouteCandidates:v8];
}

NSString *__cdecl sub_100146A18(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint localizedName](v2, "localizedName"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVEndpoint uniqueIdentifier](v2, "uniqueIdentifier"));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@ - %@", v3, v4));
  return (NSString *)v5;
}

MRIRRoute *__cdecl sub_100146A98(id a1, MRAVEndpoint *a2)
{
  id v2 = a2;
  else {
    id v3 = 0LL;
  }

  return (MRIRRoute *)v3;
}

void sub_100146B54(_Unwind_Exception *a1)
{
}

void sub_100146C00(_Unwind_Exception *a1)
{
}

void sub_100146DA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v10 = MREndpointConnectionReasonUserInfoKey;
  int v11 = @"intelligentRoutingRecommendationController";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100146EA8;
  void v7[3] = &unk_10039B5E0;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v6 connectToExternalDeviceWithUserInfo:v4 completion:v7];
}

void sub_100146EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  objc_sync_enter(v4);
  if (v3)
  {
    uint64_t v6 = _MRLogForCategory(13LL, v5);
    __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpoint]);
      int v16 = 138413058;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      id v21 = v3;
      __int16 v22 = 2112;
      uint64_t v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] Failed to connect to active system endpoint %@<%@> with error %@. Reset to %@.",  (uint8_t *)&v16,  0x2Au);
    }
  }

  else
  {
    uint64_t v11 = _MRLogForCategory(13LL, v5);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpoint]);
      int v16 = 138412802;
      uint64_t v17 = v14;
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      __int16 v20 = 2112;
      id v21 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] Setting active system endpoint to %@<%@> (old value: %@)",  (uint8_t *)&v16,  0x20u);
    }

    [*(id *)(a1 + 32) setActiveSystemEndpoint:*(void *)(a1 + 40)];
  }

  objc_sync_exit(v4);
}

void sub_100147050(_Unwind_Exception *a1)
{
}

id sub_100147A48(id a1, MRRouteRecommendation *a2)
{
  return +[MRDIRInteractiveRouteRecommendation interactiveRecommendationWithRouteRecommendation:]( &OBJC_CLASS___MRDIRInteractiveRouteRecommendation,  "interactiveRecommendationWithRouteRecommendation:",  a2);
}

void sub_100147A58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7 && [v8 count])
  {
    [*(id *)(a1 + 32) signpostEndWillShowBanner:1];
    switch((unint64_t)[v7 recommendationType])
    {
      case 0uLL:
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaActivityManager]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 route]);
        v75[0] = _NSConcreteStackBlock;
        v75[1] = 3221225472LL;
        v75[2] = sub_100148504;
        v75[3] = &unk_1003A2CB0;
        id v13 = v7;
        uint64_t v14 = *(void *)(a1 + 32);
        id v76 = v13;
        uint64_t v77 = v14;
        id v78 = v8;
        id v79 = v9;
        id v80 = *(id *)(a1 + 40);
        char v81 = *(_BYTE *)(a1 + 48);
        [v11 postOneTapSuggestionBannerRequestForRoute:v12 devices:v78 endpoint:v79 completion:v75];

        break;
      case 1uLL:
        __int16 v53 = dispatch_group_create();
        dispatch_group_enter(v53);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        uint64_t v17 = _MRLogForCategory(13LL, v16);
        __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        uint64_t v19 = (char *)[v15 hash];
        if ((unint64_t)(v19 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          os_signpost_id_t v20 = (os_signpost_id_t)v19;
          if (os_signpost_enabled(v18))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_INTERVAL_BEGIN,  v20,  "ApplyRouteRecommendation",  "",  buf,  2u);
          }
        }

        id v21 = *(void **)(a1 + 32);
        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v7 route]);
        v71[0] = _NSConcreteStackBlock;
        v71[1] = 3221225472LL;
        v71[2] = sub_10014864C;
        v71[3] = &unk_1003A2CD8;
        id v23 = v7;
        id v72 = v23;
        id v24 = v53;
        uint64_t v73 = v24;
        id v54 = v15;
        id v74 = v54;
        [v21 performTopologyModificationToRoute:v22 devices:v8 endpoint:v9 requestName:@"AutoRoute" completion:v71];

        *(void *)__int128 buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x2020000000LL;
        dispatch_group_enter(v24);
        int v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaActivityManager]);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v23 route]);
        v65[0] = _NSConcreteStackBlock;
        v65[1] = 3221225472LL;
        v65[2] = sub_1001487D8;
        v65[3] = &unk_1003A2D00;
        id v27 = v23;
        v70 = buf;
        uint64_t v28 = *(void *)(a1 + 32);
        id v66 = v27;
        uint64_t v67 = v28;
        id v68 = v8;
        uint64_t v29 = v24;
        v69 = v29;
        [v25 postAutoRouteBannerRequestForRoute:v26 devices:v68 endpoint:v9 completion:v65];

        BOOL v30 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100148940;
        block[3] = &unk_1003A2D28;
        id v31 = v27;
        v63 = buf;
        uint64_t v32 = *(void *)(a1 + 32);
        __int16 v33 = *(void **)(a1 + 40);
        id v60 = v31;
        uint64_t v61 = v32;
        id v62 = v33;
        char v64 = *(_BYTE *)(a1 + 48);
        dispatch_group_notify(v29, v30, block);

        _Block_object_dispose(buf, 8);
        break;
      case 2uLL:
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaBundleManager shared](&OBJC_CLASS___MRDMediaBundleManager, "shared"));
        id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 cachedEligibilityOf:*(void *)(a1 + 40)]);

        if ([v35 isEligibleForCallToAction])
        {
          id v37 = [*(id *)(a1 + 32) shouldUseVideoSymbolForDevices:v8 bundleIdentifier:*(void *)(a1 + 40)];
          uint64_t v39 = _MRLogForCategory(13LL, v38);
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v41 = @"audio";
            if ((_DWORD)v37) {
              uint64_t v41 = @"video";
            }
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v41;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] call to action request for: %@ - %@",  buf,  0x16u);
          }

          id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaActivityManager]);
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472LL;
          v55[2] = sub_100148ABC;
          v55[3] = &unk_1003A2D50;
          v55[4] = *(void *)(a1 + 32);
          id v56 = v7;
          id v57 = *(id *)(a1 + 40);
          char v58 = *(_BYTE *)(a1 + 48);
          [v42 presentControlCenterCallToActionVideo:v37 completion:v55];
        }

        else
        {
          uint64_t v50 = _MRLogForCategory(13LL, v36);
          __int16 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v52 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412802;
            *(void *)&uint8_t buf[4] = v7;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v52;
            *(_WORD *)&buf[22] = 2112;
            v89 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] dropping call to action request for: %@ - %@ is not eligible: %@",  buf,  0x20u);
          }
        }

        break;
      case 3uLL:
        uint64_t v43 = _MRLogForCategory(13LL, v10);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[MRDRRC] 𝝙: %@ ", buf, 0xCu);
        }

        __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaActivityManager]);
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v7 route]);
        __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activeSystemEndpoint]);
        v82[0] = _NSConcreteStackBlock;
        v82[1] = 3221225472LL;
        v82[2] = sub_1001481EC;
        v82[3] = &unk_1003A2C88;
        id v83 = v7;
        id v48 = v8;
        uint64_t v49 = *(void *)(a1 + 32);
        id v84 = v48;
        uint64_t v85 = v49;
        id v86 = *(id *)(a1 + 40);
        char v87 = *(_BYTE *)(a1 + 48);
        [v45 postDeltaBannerRequestForRoute:v46 devices:v48 endpoint:v9 activeSystemEndpoint:v47 completion:v82];

        break;
      default:
        break;
    }
  }

  else
  {
    [*(id *)(a1 + 32) signpostEndWillShowBanner:0];
  }
}

void sub_1001481CC(_Unwind_Exception *a1)
{
}

void sub_1001481EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = _MRLogForCategory(13LL, v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v34 = v9;
    __int16 v35 = 2048;
    uint64_t v36 = a2;
    __int16 v37 = 2112;
    id v38 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] recommendation𝝙: %@ got result: %lu error %@",  buf,  0x20u);
  }

  BOOL v30 = a2;
  id v31 = v5;

  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_100148498;
  v32[3] = &unk_10039AC00;
  uint64_t v10 = *(void **)(a1 + 40);
  void v32[4] = *(void *)(a1 + 48);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "msv_filter:", v32));
  uint64_t v13 = _MRLogForCategory(13LL, v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v34 = v15;
    __int16 v35 = 2112;
    uint64_t v36 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] recommendation𝝙: %@ d2a: %@",  buf,  0x16u);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) activeSystemEndpoint]);
  uint64_t v18 = objc_claimAutoreleasedReturnValue([v17 outputDevices]);
  uint64_t v19 = (void *)v18;
  if (v18) {
    os_signpost_id_t v20 = (void *)v18;
  }
  else {
    os_signpost_id_t v20 = &__NSArray0__struct;
  }
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v20));

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v16 setByAddingObjectsFromSet:v21]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 allObjects]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[MRIRRoute routeWithOutputDevices:](&OBJC_CLASS___MRIRRoute, "routeWithOutputDevices:", v23));

  int v25 = *(void **)(a1 + 48);
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 activeSystemEndpoint]);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextIdentifier]);
  [v25 handleDeltaResult:v30 forRoute:v24 devicesToAdd:v11 sourceEndpoint:v26 primaryBundleIdentifier:v27 isOutsideApp:v28 contextIdentifier:v29];
}

uint64_t sub_100148498(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 activeSystemEndpoint]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uid]);

  uint64_t v6 = [v4 containsOutputDeviceWithUID:v5] ^ 1;
  return v6;
}

void sub_100148504(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = _MRLogForCategory(13LL, v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412802;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] recommendation: %@ got result: %lu error %@",  buf,  0x20u);
  }

  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) route]);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextIdentifier]);
  [v10 handleResult:a2 forRoute:v11 devices:v12 endpoint:v13 primaryBundleIdentifier:v14 isOutsideApp:v15 contextIdentifier:v16];
}

void sub_10014864C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = _MRLogForCategory(13LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v21 = 138412546;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      id v24 = v6;
      uint64_t v12 = "[MRDRRC] auto route topology modification: error setting ASE to %@ - %@";
      uint64_t v13 = v9;
      uint32_t v14 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v21, v14);
    }
  }

  else if (v10)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v21 = 138412290;
    uint64_t v22 = v15;
    uint64_t v12 = "[MRDRRC] auto route topology modification: successfully set ASE to %@";
    uint64_t v13 = v9;
    uint32_t v14 = 12;
    goto LABEL_6;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  uint64_t v17 = _MRLogForCategory(13LL, v16);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  __int16 v19 = (char *)[*(id *)(a1 + 48) hash];
  if ((unint64_t)(v19 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v20 = (os_signpost_id_t)v19;
    if (os_signpost_enabled(v18))
    {
      LOWORD(v21) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_INTERVAL_END,  v20,  "ApplyRouteRecommendation",  "Type = AutoRoute",  (uint8_t *)&v21,  2u);
    }
  }
}

void sub_1001487D8(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = _MRLogForCategory(13LL, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (a2 > 4) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = (uint64_t)*(&off_1003A2F40 + a2);
    }
    uint64_t v11 = @"nil";
    int v16 = 138412802;
    if (v5) {
      uint64_t v11 = v5;
    }
    uint64_t v17 = v9;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    int v21 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] auto route banner: %@ got result:%@ error:%@",  (uint8_t *)&v16,  0x20u);
  }

  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = a2;
  if (a2 != 1)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) routedBackgroundActivityManager]);
    [v13 setOptimisticDevices:v12];

    uint32_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) route]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) routedBackgroundActivityManager]);
    [v15 setOptimisticRoute:v14];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100148940(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _MRLogForCategory(13LL, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    if (v6 > 4) {
      uint64_t v7 = 0LL;
    }
    else {
      uint64_t v7 = (uint64_t)*(&off_1003A2F40 + v6);
    }
    int v16 = 138412546;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] auto route b+tm: %@ will handle result:%@",  (uint8_t *)&v16,  0x16u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) routedBackgroundActivityManager]);
  [v8 setOptimisticDevices:0];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) routedBackgroundActivityManager]);
  [v9 setOptimisticRoute:0];

  uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) route]);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contextIdentifier]);
  [v11 handleAutoRouteResult:v10 forRoute:v12 primaryBundleIdentifier:v13 isOutsideApp:v14 contextIdentifier:v15];
}

void sub_100148ABC(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) route]);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 48);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) contextIdentifier]);
    [v3 sendEventForCallToActionForRouteCandidate:v7 bundleIdentifier:v5 isOutsideApp:v4 contextIdentifier:v6];
  }

void sub_100148DEC(id a1, MRUpdateActiveSystemEndpointResponse *a2)
{
  id v2 = a2;
  uint64_t v4 = _MRLogForCategory(13LL, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] SetASEToLocal result: %@",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_100148F10(id a1, MRUpdateActiveSystemEndpointResponse *a2)
{
  id v2 = a2;
  uint64_t v4 = _MRLogForCategory(13LL, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] ASE Clear result: %@",  (uint8_t *)&v10,  0xCu);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(-[MRUpdateActiveSystemEndpointResponse error](v2, "error"));
  if (!v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[MRAVLocalEndpoint sharedLocalEndpoint](&OBJC_CLASS___MRAVLocalEndpoint, "sharedLocalEndpoint"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 outputDevices]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "msv_filter:", &stru_1003A2DF8));

    [v7 removeOutputDevices:v9 initiator:@"RRCSAPRC" withReplyQueue:0 completion:&stru_1003A2E18];
  }
}

BOOL sub_10014903C(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice deviceType](a2, "deviceType") == 1;
}

void sub_10014905C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v4 = _MRLogForCategory(13LL, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] Remove devices error: %@",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_10014970C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10014974C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (id *)(a1 + 40);
    id v4 = a2;
    id WeakRetained = objc_loadWeakRetained(v3);
    (*(void (**)(uint64_t, id, id))(v2 + 16))(v2, WeakRetained, v4);
  }

uint64_t sub_100149A9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, *(void *)(a1 + 32), a2);
  }
  return result;
}

void sub_100149BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] ASE Change result: %@",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*(void (**)(uint64_t, uint64_t, void *))(v7 + 16))(v7, v8, v9);
  }
}

void sub_10014AE10(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v9 = _MRLogForCategory(10LL, v8);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = v10;
  if (!v6)
  {
    BOOL v18 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v18) {
        goto LABEL_14;
      }
      uint64_t v20 = a1[5];
      uint64_t v19 = a1[6];
      int v21 = (void *)a1[4];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v30 = 138544130;
      uint64_t v31 = v20;
      __int16 v32 = 2114;
      uint64_t v33 = v19;
      __int16 v34 = 2114;
      id v35 = v21;
      __int16 v36 = 2048;
      uint64_t v37 = v22;
      __int16 v23 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      id v24 = v11;
      uint32_t v25 = 42;
    }

    else
    {
      if (!v18) {
        goto LABEL_14;
      }
      uint64_t v26 = a1[5];
      uint64_t v27 = a1[6];
      int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v16 timeIntervalSinceDate:a1[7]];
      int v30 = 138543874;
      uint64_t v31 = v26;
      __int16 v32 = 2114;
      uint64_t v33 = v27;
      __int16 v34 = 2048;
      id v35 = v28;
      __int16 v23 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      id v24 = v11;
      uint32_t v25 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&v30, v25);
    goto LABEL_13;
  }

  BOOL v12 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (v7)
  {
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v14 = a1[5];
    uint64_t v13 = a1[6];
    uint64_t v15 = a1[4];
    int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v16 timeIntervalSinceDate:a1[7]];
    int v30 = 138544386;
    uint64_t v31 = v14;
    __int16 v32 = 2114;
    uint64_t v33 = v13;
    __int16 v34 = 2114;
    id v35 = v6;
    __int16 v36 = 2114;
    uint64_t v37 = v15;
    __int16 v38 = 2048;
    uint64_t v39 = v17;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v30,  0x34u);
LABEL_13:

    goto LABEL_14;
  }

  if (v12) {
    sub_1002BB300((uint64_t)a1);
  }
LABEL_14:

  uint64_t v29 = a1[8];
  if (v29) {
    (*(void (**)(uint64_t, id, id))(v29 + 16))(v29, v5, v6);
  }
}

BOOL sub_10014B070(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice isRemoteControllable](a2, "isRemoteControllable");
}

BOOL sub_10014B078(id a1, NSString *a2)
{
  return +[MRDMediaAppInFocusMonitor isRemoteControllableApp:]( &OBJC_CLASS___MRDMediaAppInFocusMonitor,  "isRemoteControllableApp:",  a2);
}

void sub_10014B088(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = MRMediaRemoteErrorFromCommandStatuses(a2, a3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v7 = _MRLogForCategory(13LL, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[5];
    uint64_t v11 = a1[6];
    int v12 = 138413058;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    __int16 v18 = 2112;
    uint64_t v19 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] Pause for %@ completed, error: %@ request: %@ - %@",  (uint8_t *)&v12,  0x2Au);
  }
}

void sub_10014B59C(_Unwind_Exception *a1)
{
}

void sub_10014B5C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = _MRLogForCategory(13LL, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    uint64_t v8 = *(void *)(a1 + 32);
    int v36 = 138412802;
    id v37 = WeakRetained;
    __int16 v38 = 2112;
    uint64_t v39 = v8;
    __int16 v40 = 2112;
    id v41 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] delta add to %@ of %@ finished: %@",  (uint8_t *)&v36,  0x20u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = _MRLogForCategory(10LL, v10);
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = v12;
  if (!v3)
  {
    BOOL v20 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (!v20) {
        goto LABEL_16;
      }
      uint64_t v22 = *(void **)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 56);
      __int16 v23 = *(void **)(a1 + 40);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
      int v36 = 138544130;
      id v37 = v22;
      __int16 v38 = 2114;
      uint64_t v39 = v21;
      __int16 v40 = 2114;
      id v41 = v23;
      __int16 v42 = 2048;
      uint64_t v43 = v24;
      uint32_t v25 = "Response: %{public}@<%{public}@> returned for %{public}@ in %.4lf seconds";
      uint64_t v26 = v13;
      uint32_t v27 = 42;
    }

    else
    {
      if (!v20) {
        goto LABEL_16;
      }
      uint64_t v28 = *(void **)(a1 + 48);
      uint64_t v29 = *(void *)(a1 + 56);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
      int v36 = 138543874;
      id v37 = v28;
      __int16 v38 = 2114;
      uint64_t v39 = v29;
      __int16 v40 = 2048;
      id v41 = v30;
      uint32_t v25 = "Response: %{public}@<%{public}@> returned in %.4lf seconds";
      uint64_t v26 = v13;
      uint32_t v27 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v36, v27);
    goto LABEL_15;
  }

  BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (v9)
  {
    if (v14)
    {
      __int16 v16 = *(void **)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 40);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v18 timeIntervalSinceDate:*(void *)(a1 + 64)];
      int v36 = 138544386;
      id v37 = v16;
      __int16 v38 = 2114;
      uint64_t v39 = v15;
      __int16 v40 = 2114;
      id v41 = v3;
      __int16 v42 = 2114;
      uint64_t v43 = v17;
      __int16 v44 = 2048;
      uint64_t v45 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Response: %{public}@<%{public}@> returned with error <%{public}@> for %{public}@ in %.4lf seconds",  (uint8_t *)&v36,  0x34u);
LABEL_15:
    }
  }

  else if (v14)
  {
    sub_1002BB39C(a1);
  }

void sub_10014BB44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) routedBackgroundActivityManager]);
  [v7 setOptimisticDevices:0];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) routedBackgroundActivityManager]);
  [v8 setOptimisticRoute:0];

  uint64_t v10 = _MRLogForCategory(13LL, v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    int v18 = 138412802;
    id v19 = v5;
    __int16 v20 = 2112;
    uint64_t v21 = v12;
    __int16 v22 = 2112;
    id v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] topology modification to %@ (%@) finished: %@",  (uint8_t *)&v18,  0x20u);
  }

  uint64_t v14 = _MRLogForCategory(13LL, v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  __int16 v16 = (char *)[*(id *)(a1 + 48) hash];
  if ((unint64_t)(v16 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v17 = (os_signpost_id_t)v16;
    if (os_signpost_enabled(v15))
    {
      LOWORD(v1_Block_object_dispose((const void *)(v1 - 160), 8) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v15,  OS_SIGNPOST_INTERVAL_END,  v17,  "ApplyRouteRecommendation",  "Type = OneTapSuggestion",  (uint8_t *)&v18,  2u);
    }
  }
}

void sub_10014C0D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10014C0FC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
  if ([v2 displayOn])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[MRDDisplayMonitor sharedMonitor](&OBJC_CLASS___MRDDisplayMonitor, "sharedMonitor"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 presentedBundleIdentifiers]);
    unsigned int v5 = [v4 containsObject:*(void *)(a1 + 32)];
  }

  else
  {
    unsigned int v5 = 0;
  }

  unsigned int v6 = [*(id *)(a1 + 40) isRoutePlaying:*(void *)(a1 + 48)];
  uint64_t v8 = _MRLogForCategory(13LL, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v5) {
      uint64_t v11 = @"is";
    }
    else {
      uint64_t v11 = @"is not";
    }
    uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) routeIdentifier]);
    uint64_t v13 = (void *)v12;
    int v17 = 138413058;
    if (v6) {
      uint64_t v14 = @"is";
    }
    else {
      uint64_t v14 = @"is not";
    }
    uint64_t v18 = v10;
    __int16 v19 = 2112;
    __int16 v20 = v11;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    __int16 v23 = 2112;
    uint64_t v24 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDRRC] Timer fired %@ %@ visible, %@ %@ playing",  (uint8_t *)&v17,  0x2Au);
  }

  if (((v5 | v6) & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained stopAirPlayingAndRemoteControlling];
  }

  id v16 = objc_loadWeakRetained((id *)(a1 + 56));
  [v16 clearUnusedAutoRoute];
}

__CFString *sub_10014CE64(unint64_t a1)
{
  if (a1 >= 5) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"InvalidState-%ld",  a1));
  }
  else {
    return *(&off_1003A2FC8 + a1);
  }
}

id sub_10014DB8C(id a1, MRDGroupSessionParticipant *a2)
{
  return -[MRDGroupSessionParticipant identifier](a2, "identifier");
}

void sub_10014DB94(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = _MRLogForCategory(12LL, v3);
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1002BB438(a1, (uint64_t)v4, v6);
    }
  }
}

void sub_10014DF2C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdatePendingParticipants:") & 1) != 0) {
          objc_msgSend( v7,  "session:didUpdatePendingParticipants:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_10014E484(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10014E4C4(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdatePendingParticipants:") & 1) != 0) {
          objc_msgSend( v7,  "session:didUpdatePendingParticipants:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_10014E8D0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10014E910(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdatePendingParticipants:") & 1) != 0) {
          objc_msgSend( v7,  "session:didUpdatePendingParticipants:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10014ECA4(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "sessionDidRemoveAllParticipants:") & 1) != 0) {
          objc_msgSend(v7, "sessionDidRemoveAllParticipants:", *(void *)(a1 + 40), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_10014EF18(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10014F390( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_10014F3BC(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    -[os_unfair_lock_s setLowPowerDeferralTimer:](WeakRetained, "setLowPowerDeferralTimer:", 0LL);
    os_unfair_lock_lock(v2 + 3);
    -[os_unfair_lock_s reevaluateLowPowerMode](v2, "reevaluateLowPowerMode");
    os_unfair_lock_unlock(v2 + 3);
    id WeakRetained = v2;
  }
}

void sub_10014F418(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didChangeState:") & 1) != 0) {
          objc_msgSend(v7, "session:didChangeState:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10014F6EC(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdateParticipants:") & 1) != 0) {
          objc_msgSend(v7, "session:didUpdateParticipants:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

uint64_t sub_10014F880(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 localParticipant]);
  unsigned int v5 = [v3 isEqual:v4];

  return v5 ^ 1;
}

void sub_10014FA0C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdateMembers:") & 1) != 0) {
          objc_msgSend(v7, "session:didUpdateMembers:", *(void *)(a1 + 40), *(void *)(a1 + 48), (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10014FC28(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didUpdatePendingParticipants:") & 1) != 0) {
          objc_msgSend( v7,  "session:didUpdatePendingParticipants:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100150038(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 32);
  id v4 = (id *)(a1 + 32);
  os_unfair_lock_lock(v5 + 3);
  if (v3)
  {
    uint64_t v7 = _MRLogForCategory(12LL, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002BB574();
    }

    [*v4 setLowPowerError:v3];
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*v4 fastSyncSession]);
    [v9 end];
  }

  else
  {
    [*v4 setIsLowPowerMode:0];
  }

  [*v4 setIsUpdatingLowPowerMode:0];
  [*v4 reevaluateLowPowerMode];
  os_unfair_lock_unlock((os_unfair_lock_t)*v4 + 3);
}

void sub_100150100(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 32);
  id v4 = (id *)(a1 + 32);
  os_unfair_lock_lock(v5 + 3);
  if (v3)
  {
    uint64_t v7 = _MRLogForCategory(12LL, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1002BB5D8();
    }

    [*v4 setLowPowerError:v3];
  }

  else
  {
    [*v4 setIsLowPowerMode:1];
  }

  [*v4 setIsUpdatingLowPowerMode:0];
  [*v4 reevaluateLowPowerMode];
  os_unfair_lock_unlock((os_unfair_lock_t)*v4 + 3);
}

void sub_100150260(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_100150630(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "session:didReceiveMessageData:fromParticipant:") & 1) != 0) {
          objc_msgSend( v7,  "session:didReceiveMessageData:fromParticipant:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_1001508D8(uint64_t a1)
{
  v6[0] = kMREventGroupSessionJoinResponseSentByHostKey;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) isHosted]));
  v7[0] = v2;
  v6[1] = kMREventGroupSessionJoinResponseApprovedKey;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v7[1] = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

Class sub_100151820()
{
  if (qword_1003FE1E8 != -1) {
    dispatch_once(&qword_1003FE1E8, &stru_1003A2FF0);
  }
  Class result = objc_getClass("AVOutputContext");
  qword_1003FE1E0 = (uint64_t)result;
  off_1003F7F18 = (uint64_t (*)())sub_10015187C;
  return result;
}

id sub_10015187C()
{
  return (id)qword_1003FE1E0;
}

void sub_100151888(id a1)
{
  qword_1003FE1F0 = (uint64_t)dlopen("/System/Library/Frameworks/AVFoundation.framework/AVFoundation", 2);
}

Class sub_1001518B0()
{
  if (qword_1003FE1E8 != -1) {
    dispatch_once(&qword_1003FE1E8, &stru_1003A2FF0);
  }
  Class result = objc_getClass("AVOutputDevice");
  qword_1003FE1F8 = (uint64_t)result;
  off_1003F7F20 = (uint64_t (*)())sub_10015190C;
  return result;
}

id sub_10015190C()
{
  return (id)qword_1003FE1F8;
}

id sub_1001519BC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100151A60;
  void v5[3] = &unk_10039B878;
  v5[4] = *(void *)(a1 + 32);
  id v3 =  [v2 addObserverForName:kMRDeviceInfoDidChangeNotification object:0 queue:0 usingBlock:v5];

  return [*(id *)(a1 + 32) _reevaluateWithReason:@"Startup"];
}

void sub_100151A60(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 name]);
  [v2 _reevaluateWithReason:v3];
}

void sub_100151B10(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);
  [v2 enumerateKeysAndObjectsUsingBlock:&stru_1003A3090];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);
  [v3 removeAllObjects];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100151BDC;
  void v6[3] = &unk_1003A30B8;
  void v6[4] = *(void *)(a1 + 32);
  [v4 enumerateKeysAndObjectsUsingBlock:v6];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
  [v5 removeAllObjects];
}

void sub_100151BD4(id a1, NSString *a2, NSOperationQueue *a3, BOOL *a4)
{
}

void sub_100151BDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v7 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 128LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);
  [v5 removeObserver:*(void *)(a1 + 32)];

  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);
  [v6 closeWithError:v7];
}

void sub_100151D44(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);
  id v3 = [v2 count];

  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100151E7C;
    v11[3] = &unk_1003A30E0;
    uint64_t v12 = v4;
    __int128 v6 = v4;
    [v5 enumerateKeysAndObjectsUsingBlock:v11];

    [*(id *)(a1 + 40) appendFormat:@" operations=%@\n", v6];
  }

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);

  if (v7)
  {
    __int128 v8 = *(void **)(a1 + 40);
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "mr_formattedDebugDescription"));
    [v8 appendFormat:@" relayConnectionsToSecondaries=%@", v9];
  }

void sub_100151E7C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if ([v5 operationCount]) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100151F90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100152144;
  v13[3] = &unk_10039B828;
  id v14 = *(id *)(a1 + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "msv_firstWhere:", v13));

  if (v3)
  {
    uint64_t v5 = _MRLogForCategory(0LL, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[MRDMRRelayRemoteControlService] Removing disconnected relayConnection=%@",  buf,  0xCu);
    }

    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 first]);
    [v8 removeObjectForKey:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 second]);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 connection]);
    [v11 removeObserver:*(void *)(a1 + 32)];

    uint64_t v12 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"relayConnection did close with error=%@, connection=%@",  *(void *)(a1 + 48),  *(void *)(a1 + 40));
    [*(id *)(a1 + 32) _reevaluateWithReason:v12];
  }
}

BOOL sub_100152144(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 connection]);
  BOOL v5 = v4 == *(void **)(a1 + 32);

  return v5;
}

void sub_1001521EC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[MRDMediaRemoteServer server](&OBJC_CLASS___MRDMediaRemoteServer, "server"));
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);

  [*(id *)(a1 + 32) _reevaluateSecondaryConnectionWithDeviceInfo:v3];
}

void sub_100152524( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id a21)
{
}

id sub_10015254C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);

  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    [*(id *)(a1 + 32) setOperations:v3];
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operations]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if ([v5 operationCount])
  {
    id v6 = [[MRResultReason alloc] initWithResult:0 format:@"operationInProgress"];
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relayConnectionsToSecondaries]);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:*(void *)(a1 + 40)]);

    if (v8)
    {
      id v9 = [[MRResultReason alloc] initWithResult:0 format:@"exisitingConnection"];
    }

    else
    {
      unsigned __int8 v10 = [*(id *)(a1 + 48) isRemoteControllable];
      id v11 = objc_alloc(&OBJC_CLASS___MRResultReason);
      if ((v10 & 1) != 0)
      {
        uint64_t v12 = @"No exisiting connection";
        uint64_t v13 = 1LL;
      }

      else
      {
        uint64_t v12 = @"Not remoteControllable";
        uint64_t v13 = 0LL;
      }

      id v9 = [v11 initWithResult:v13 reason:v12];
    }

    id v6 = v9;
  }

  return v6;
}

void sub_100152690(id *a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100152740;
  block[3] = &unk_1003A3130;
  void block[4] = a1[4];
  objc_copyWeak(&v5, a1 + 6);
  id v4 = a1[5];
  dispatch_sync(v2, block);

  objc_destroyWeak(&v5);
}

void sub_100152740(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [v2 _handleCompletedOperation:WeakRetained forOutputDeviceUID:*(void *)(a1 + 40)];
}

void sub_100152A8C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) handle]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  [v5 mrRelayRemoteControlService:v2 didAcceptConnection:v4];
}

id sub_100152C48(id a1, MRAVOutputDevice *a2)
{
  return -[MRAVOutputDevice uid](a2, "uid");
}

void sub_100152C50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0)
  {
    if ([v6 operationCount])
    {
      uint64_t v8 = _MRLogForCategory(0LL, v7);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v6 operations]);
        int v12 = 138412290;
        uint64_t v13 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDMRRelayRemoteControlService] Removing operations: %@",  (uint8_t *)&v12,  0xCu);
      }
    }

    [v6 cancelAllOperations];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) operations]);
    [v11 removeObjectForKey:v5];
  }
}

void sub_100152D74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (([*(id *)(a1 + 32) containsObject:v5] & 1) == 0)
  {
    uint64_t v8 = _MRLogForCategory(0LL, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[MRDMRRelayRemoteControlService] Removing relayConnection: %@",  (uint8_t *)&v14,  0xCu);
    }

    unsigned __int8 v10 = -[NSError initWithMRError:](objc_alloc(&OBJC_CLASS___NSError), "initWithMRError:", 128LL);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 connection]);
    [v11 removeObserver:*(void *)(a1 + 40)];

    int v12 = (void *)objc_claimAutoreleasedReturnValue([v6 connection]);
    [v12 closeWithError:v10];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) relayConnectionsToSecondaries]);
    [v13 removeObjectForKey:v5];
  }
}

void sub_1001540CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100154124(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100154134(uint64_t a1)
{
}

uint64_t sub_10015413C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MRProtocolMessageLogger sharedLogger](&OBJC_CLASS___MRProtocolMessageLogger, "sharedLogger"));
  [v4 logMessage:@"Message Received:" label:@"MRRelay" deviceInfo:*(void *)(a1 + 32) protocolMessage:v3];

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 error]);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001549AC(_Unwind_Exception *a1)
{
}

NSArray *__cdecl sub_100154A88(id a1, MRAVOutputDevice *a2)
{
  uint64_t v2 = a2;
  if (-[MRAVOutputDevice deviceType](v2, "deviceType") == 1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice clusterComposition](v2, "clusterComposition"));
    id v4 = [v3 count];

    if (v4)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue(-[MRAVOutputDevice clusterCompositionOutputDevices](v2, "clusterCompositionOutputDevices"));
    }

    else
    {
      uint64_t v8 = v2;
      uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
    }

    uint64_t v6 = (void *)v5;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return (NSArray *)v6;
}

void sub_100154C18(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1003FE200;
  qword_1003FE200 = (uint64_t)v1;
}

NSString *__cdecl sub_1001550FC(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)-[MRAVOutputDevice name](a2, "name");
}

void sub_1001554A8(_Unwind_Exception *a1)
{
}

void sub_100155578( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001558A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

NSString *__cdecl sub_100155C40(id a1, MRAVOutputDevice *a2)
{
  return (NSString *)-[MRAVOutputDevice name](a2, "name");
}

uint64_t sub_100156640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_1003A32F0, 24LL, 7LL);
  *(void *)(v8 + 16) = 0LL;
  id v9 = (void *)swift_allocObject(&unk_1003A3318, 56LL, 7LL);
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = v8;
  v9[5] = a1;
  v9[6] = a2;
  swift_retain_n(v8, 2LL);
  swift_retain(a2);
  uint64_t v10 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100156768, v8, sub_100156808, v9, a3, a4);
  swift_release(v8);
  swift_release(v9);
  swift_beginAccess(v8 + 16, v13, 1LL, 0LL);
  uint64_t v11 = *(void *)(v8 + 16);
  *(void *)(v8 + 16) = v10;
  swift_release(v8);
  return swift_release(v11);
}

uint64_t sub_100156744()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100156768()
{
  id v1 = (uint64_t *)(v0 + 16);
  swift_beginAccess(v0 + 16, v6, 0LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2)
  {
    swift_retain(v2);
    AnyCancellable.cancel()();
    swift_release(v2);
  }

  swift_beginAccess(v1, &v5, 1LL, 0LL);
  uint64_t v3 = *v1;
  *id v1 = 0LL;
  return swift_release(v3);
}

uint64_t sub_1001567DC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100156808(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  uint64_t v5 = (uint64_t *)(v4 + 16);
  swift_beginAccess(v4 + 16, v10, 0LL, 0LL);
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    swift_retain(*(void *)(v4 + 16));
    AnyCancellable.cancel()();
    swift_release(v6);
  }

  swift_beginAccess(v4 + 16, &v9, 1LL, 0LL);
  uint64_t v7 = *v5;
  *uint64_t v5 = 0LL;
  swift_release(v7);
  return v3(a1);
}

void sub_1001568A4(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

unint64_t sub_1001568DC()
{
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD000000000000018LL;
}

void sub_100156A20()
{
}

uint64_t sub_100156A2C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_100156A44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v16[0] = 0LL;
  v16[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  v8._countAndFlagsBits = 0x28726F727245LL;
  v8._object = (void *)0xE600000000000000LL;
  String.append(_:)(v8);
  uint64_t v15 = a1;
  uint64_t v9 = sub_100156B68(&qword_1003F86D0);
  _print_unlocked<A, B>(_:_:)( &v15,  v16,  v9,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 0x756C6F736572202CLL;
  v10._object = (void *)0xED00003A6E6F6974LL;
  String.append(_:)(v10);
  sub_100156A2C(a2, a3, a4);
  sub_1001568A4(a2, a3, a4);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  sub_100156BA8(a2, a3, a4);
  v13._countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return v16[0];
}

uint64_t sub_100156B68(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100156BA8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100156BD4()
{
  return sub_100156A44(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t type metadata accessor for RoutingEvent(uint64_t a1)
{
  uint64_t result = qword_1003FE510;
  if (!qword_1003FE510) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RoutingEvent);
  }
  return result;
}

uint64_t sub_100156C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for RoutingEvent(0LL);
  uint64_t v10 = a4 + *(int *)(v9 + 20);
  uint64_t v11 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v10, a2, v11);
  *(void *)(a4 + *(int *)(v9 + 24)) = a3;
  return result;
}

unint64_t sub_100156CBC()
{
  uint64_t v0 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = 0LL;
  unint64_t v19 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(50LL);
  uint64_t v4 = swift_bridgeObjectRelease(v19);
  unint64_t v18 = 0xD00000000000001CLL;
  unint64_t v19 = 0x8000000100339C00LL;
  v5._countAndFlagsBits = RoutingInteraction.identifier.getter(v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x6E6F69746361202CLL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  RoutingInteraction.action.getter();
  uint64_t v8 = sub_100156FEC( &qword_1003F7F88,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction.Action,  (uint64_t)&protocol conformance descriptor for RoutingInteraction.Action);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v8);
  uint64_t v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v11._countAndFlagsBits = 0x626972747461202CLL;
  v11._object = (void *)0xEF203A6E6F697475LL;
  String.append(_:)(v11);
  type metadata accessor for RoutingEvent(0LL);
  uint64_t v12 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v13 = sub_100156FEC( &qword_1003F7F90,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.Attribution,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.Attribution);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  uint64_t v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 62LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  return v18;
}

Swift::Int sub_100156E94()
{
  uint64_t v0 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v1 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100156F00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v3 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_100156F58(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100156FC0()
{
  return sub_100156FEC(&qword_1003F7FA0, type metadata accessor for RoutingEvent, (uint64_t)&unk_10034BC60);
}

uint64_t sub_100156FEC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t *sub_10015702C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for RoutingInteraction(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    Swift::String v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
  }

  swift_retain(v13);
  return a1;
}

uint64_t sub_1001570E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100157158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(a1 + v11) = v12;
  swift_retain(v12);
  return a1;
}

uint64_t sub_1001571EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v13 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t sub_10015728C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10015731C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = *(void *)(a1 + v11);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_1001573B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001573C0);
}

uint64_t sub_1001573C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_100157468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100157474);
}

uint64_t sub_100157474(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_100157518(uint64_t a1)
{
  uint64_t result = type metadata accessor for RoutingInteraction(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for RoutingSessionConfiguration.Attribution(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_initStructMetadata(a1, 256LL, 3LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for RoutingEvent.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for RoutingEvent.Error(uint64_t a1)
{
  return sub_100156BA8(*(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for RoutingEvent.Error(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  swift_errorRetain(*a2);
  *(void *)a1 = v4;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  sub_100156A2C(v5, v6, v2);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t *assignWithCopy for RoutingEvent.Error(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  swift_errorRetain(*a2);
  uint64_t v5 = *a1;
  *a1 = v4;
  swift_errorRelease(v5);
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  sub_100156A2C(v6, v7, v2);
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  unsigned __int8 v10 = *((_BYTE *)a1 + 24);
  *((_BYTE *)a1 + 24) = (_BYTE)v2;
  sub_100156BA8(v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for RoutingEvent.Error(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for RoutingEvent.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_errorRelease(v4);
  char v5 = *((_BYTE *)a2 + 24);
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  unsigned __int8 v8 = *((_BYTE *)a1 + 24);
  *((_BYTE *)a1 + 24) = v5;
  sub_100156BA8(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingEvent.Error(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingEvent.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RoutingEvent.Error()
{
  return &type metadata for RoutingEvent.Error;
}

uint64_t destroy for RoutingEvent.Error.ResolutionPolicy(uint64_t a1)
{
  return sub_100156BA8(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12mediaremoted12RoutingEventV5ErrorV16ResolutionPolicyOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100156A2C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RoutingEvent.Error.ResolutionPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100156A2C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100156BA8(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for RoutingEvent.Error.ResolutionPolicy(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for RoutingEvent.Error.ResolutionPolicy(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100156BA8(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingEvent.Error.ResolutionPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingEvent.Error.ResolutionPolicy( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 252;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100157964(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10015797C(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    LOBYTE(a2) = 4;
  }

  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for RoutingEvent.Error.ResolutionPolicy()
{
  return &type metadata for RoutingEvent.Error.ResolutionPolicy;
}

uint64_t sub_1001579A4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FE528);
  sub_10015ADAC(v0, (uint64_t)qword_1003FE528);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

char *sub_1001579FC()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = (char *)v0[3];
  }

  else
  {
    unsigned int v3 = v0;
    uint64_t v4 = *v0;
    sub_100156B68(&qword_1003F81C0);
    uint64_t v5 = swift_allocObject(&unk_1003A3730, 24LL, 7LL);
    *(void *)(v5 + 16) = v4;
    uint64_t v2 = sub_1002B2588((uint64_t)&unk_1003F81D0, v5);
    uint64_t v6 = v3[3];
    v3[3] = v2;
    swift_retain(v2);
    swift_release(v6);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

uint64_t sub_100157A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100157AAC, 0LL, 0LL);
}

uint64_t sub_100157AAC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  __int128 v7 = *(_OWORD *)(v0 + 24);
  id v2 = [objc_allocWithZone(RPCompanionLinkClient) init];
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = v2;
  uint64_t v3 = swift_task_alloc(48LL);
  *(void *)(v0 + 56) = v3;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v7;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = sub_10016083C(0LL, &qword_1003F81D8, &OBJC_CLASS___RPCompanionLinkClient_ptr);
  void *v4 = v0;
  v4[1] = sub_100157BA4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( *(void *)(v0 + 16),  0LL,  0LL,  0x706172576B6E696CLL,  0xEB00000000726570LL,  sub_10015FE74,  v3,  v5);
}

uint64_t sub_100157BA4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100157C44;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 56));
    uint64_t v4 = sub_100157C10;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100157C10()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100157C44()
{
  uint64_t v1 = *(void *)(v0 + 56);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100157C80(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t a1), uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a3;
  uint64_t v9 = sub_100156B68(&qword_1003F81E0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 16) & ~v13;
  unint64_t v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = swift_allocObject(&unk_1003A3758, v16 + 8, v13 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v17 + v14, v12, v9);
  *(void *)(v17 + v15) = a2;
  *(void *)(v17 + v16) = a5;
  uint64_t v29 = sub_10015FF00;
  uint64_t v30 = v17;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256LL;
  uint32_t v27 = sub_100157E54;
  uint64_t v28 = &unk_1003A3770;
  unint64_t v18 = _Block_copy(&aBlock);
  uint64_t v19 = v30;
  id v20 = a2;
  swift_release(v19);
  [v20 activateWithCompletion:v18];
  _Block_release(v18);
  uint64_t v29 = v24;
  uint64_t v30 = a4;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256LL;
  uint32_t v27 = sub_100157EA8;
  uint64_t v28 = &unk_1003A3798;
  __int16 v21 = _Block_copy(&aBlock);
  uint64_t v22 = v30;
  swift_retain(a4);
  swift_release(v22);
  [v20 setInvalidationHandler:v21];
  _Block_release(v21);
}

void sub_100157E54(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void *))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4(a2);
  swift_release(v3);
}

uint64_t sub_100157EA8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100157ED4(void *a1, id a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_1003FE520 != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v11 = sub_10015ADAC(v7, (uint64_t)qword_1003FE528);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  id v12 = a1;
  swift_unknownObjectRetain_n(a2, 2LL);
  id v13 = v12;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  int v16 = v15;
  BOOL v17 = os_log_type_enabled(v14, v15);
  uint64_t v63 = v6;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc(42LL, -1LL);
    uint64_t v61 = v3;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc(8LL, -1LL);
    os_log_t v57 = v14;
    __int16 v21 = (void *)v20;
    uint64_t v58 = swift_slowAlloc(96LL, -1LL);
    v65[0] = v58;
    *(_DWORD *)uint64_t v19 = 136315906;
    uint64_t v59 = v8;
    uint64_t v22 = _typeName(_:qualified:)(v6, 0LL);
    uint64_t v60 = v11;
    unint64_t v24 = v23;
    uint64_t v64 = sub_10015ADC4(v22, v23, v65);
    id v62 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v24);
    int v56 = v16;
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v64 = sub_10015ADC4(0x663A5F28646E6573LL, 0xEC000000293A726FLL, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2112;
    uint64_t v64 = (uint64_t)v13;
    id v25 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v19 + 24, v19 + 32);
    void *v21 = v13;

    *(_WORD *)(v19 + 32) = 2080;
    id v26 = [v62 identifier];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unint64_t v29 = v28;

    uint64_t v64 = sub_10015ADC4(v27, v29, v65);
    a2 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease(v29);
    swift_unknownObjectRelease_n(a2, 2LL);
    os_log_t v30 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "[%s] %s %@ session=%s", (uint8_t *)v19, 0x2Au);
    uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v21, 1LL, v31);
    swift_slowDealloc(v21, -1LL, -1LL);
    uint64_t v32 = v58;
    swift_arrayDestroy(v58, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    uint64_t v33 = v19;
    uint64_t v3 = v61;
    swift_slowDealloc(v33, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v59 + 8))(v10, v7);
  }

  else
  {

    swift_unknownObjectRelease_n(a2, 2LL);
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  }

  sub_10015EA18(v13, a2, 0);
  uint64_t v35 = v34;
  __chkstk_darwin(v34);
  *(void *)&v55[-16] = v3;
  *(void *)&v55[-8] = v13;
  sub_100236804((void (*)(void))sub_10015EDA0);
  if (LOBYTE(v65[0]) == 1)
  {
    uint64_t v36 = swift_allocObject(&unk_1003A35B0, 17LL, 7LL);
    *(_BYTE *)(v36 + 16) = 0;
    uint64_t v37 = swift_allocObject(&unk_1003A35D8, 24LL, 7LL);
    *(void *)(v37 + 16) = &_swiftEmptySetSingleton;
    uint64_t v38 = swift_allocObject(&unk_1003A3600, 24LL, 7LL);
    swift_weakInit(v38 + 16, v3);
    uint64_t v39 = (void *)swift_allocObject(&unk_1003A3628, 64LL, 7LL);
    v39[2] = v38;
    v39[3] = v36;
    void v39[4] = v13;
    v39[5] = v37;
    uint64_t v40 = v63;
    v39[6] = v35;
    v39[7] = v40;
    id v41 = (void *)swift_allocObject(&unk_1003A3650, 40LL, 7LL);
    v41[2] = v37;
    void v41[3] = v13;
    void v41[4] = v40;
    id v42 = v13;
    swift_retain_n(v36, 2LL);
    swift_retain_n(v37, 2LL);
    id v43 = v42;
    swift_retain(v38);
    sub_1001599CC( (uint64_t)sub_10015EEE8,  (uint64_t)v39,  (uint64_t)sub_10015EEF8,  v36,  (uint64_t)sub_10015EF54,  (uint64_t)v41,  30.0);
    swift_release(v41);
    swift_release_n(v36, 2LL);
    swift_release(v39);
    swift_release(v38);
    swift_release(v37);
  }

  else
  {
    swift_bridgeObjectRelease(v35);
    id v44 = v13;
    uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc(22LL, -1LL);
      id v48 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v65[0] = v49;
      *(_DWORD *)uint64_t v47 = 136315394;
      uint64_t v50 = _typeName(_:qualified:)(v63, 0LL);
      unint64_t v52 = v51;
      uint64_t v64 = sub_10015ADC4(v50, v51, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v47 + 12) = 2112;
      uint64_t v64 = (uint64_t)v44;
      id v53 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 14, v47 + 22);
      void *v48 = v44;

      _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "[%s] Attempted to send proxy join request while already in progress: %@",  (uint8_t *)v47,  0x16u);
      uint64_t v54 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v48, 1LL, v54);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_100158580( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v11 = a2 + 16;
  swift_beginAccess(a2 + 16, v99, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v11);
  if (result)
  {
    int64_t v13 = result;
    uint64_t v87 = a5;
    uint64_t v14 = *(void *)(result + 64);
    __chkstk_darwin(result);
    swift_retain(v14);
    uint64_t v15 = 0LL;
    sub_100236804((void (*)(void))sub_1001605A4);
    swift_release(v14);
    swift_beginAccess(a3 + 16, v98, 0LL, 0LL);
    if ((*(_BYTE *)(a3 + 16) & 1) != 0) {
      return swift_release(v13);
    }
    if (qword_1003FE520 != -1) {
      goto LABEL_71;
    }
LABEL_4:
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v16, (uint64_t)qword_1003FE528);
    uint64_t v17 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    uint64_t v92 = a1;
    int64_t v89 = v13;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(64LL, -1LL);
      v96[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v22 = _typeName(_:qualified:)(a7, 0LL);
      unint64_t v24 = v23;
      v93 = (unint64_t *)sub_10015ADC4(v22, v23, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v15 = v20 + 14;
      uint64_t v25 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
      uint64_t v26 = sub_10016039C( &qword_1003F81F0,  (unint64_t *)&qword_1003F81E8,  &OBJC_CLASS___RPCompanionLinkDevice_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
      swift_bridgeObjectRetain(v92);
      uint64_t v27 = Set.description.getter(v92, v25, v26);
      unint64_t v29 = v28;
      swift_bridgeObjectRelease(v92);
      v93 = (unint64_t *)sub_10015ADC4(v27, v29, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease_n(v92, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] Rapport devices updated: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      uint64_t v30 = v20;
      a1 = v92;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a1, 2LL);
    }

    unint64_t v91 = a1 & 0xC000000000000001LL;
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v31 = a1;
      }
      else {
        uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v32 = __CocoaSet.count.getter(v31);
    }

    else
    {
      uint64_t v32 = *(void *)(a1 + 16);
    }

    uint64_t v33 = &_swiftEmptyArrayStorage;
    if (!v32) {
      goto LABEL_36;
    }
    v97 = &_swiftEmptyArrayStorage;
    sub_10015DCCC(0, v32 & ~(v32 >> 63), 0);
    if (v91)
    {
      if (a1 < 0) {
        uint64_t v34 = a1;
      }
      else {
        uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v35 = __CocoaSet.startIndex.getter(v34);
      char v37 = 1;
    }

    else
    {
      uint64_t v35 = sub_10015E990(a1);
      char v37 = v38 & 1;
    }

    v93 = (unint64_t *)v35;
    uint64_t v94 = v36;
    char v95 = v37;
    if ((v32 & 0x8000000000000000LL) == 0)
    {
      uint64_t v39 = a1 & 0xFFFFFFFFFFFFFF8LL;
      if (a1 < 0) {
        uint64_t v39 = a1;
      }
      uint64_t v88 = v39;
      do
      {
        while (1)
        {
          int64_t v45 = (int64_t)v93;
          uint64_t v46 = v94;
          char v47 = v95;
          sub_10015E728((uint64_t)v93, v94, v95, a1);
          uint64_t v49 = v48;
          id v50 = [v48 effectiveIdentifier];
          uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          uint64_t v52 = v51;

          id v53 = v97;
          if ((swift_isUniquelyReferenced_nonNull_native(v97) & 1) == 0)
          {
            sub_10015DCCC(0, v53[2] + 1LL, 1);
            id v53 = v97;
          }

          unint64_t v55 = v53[2];
          unint64_t v54 = v53[3];
          if (v55 >= v54 >> 1)
          {
            sub_10015DCCC(v54 > 1, v55 + 1, 1);
            id v53 = v97;
          }

          v53[2] = v55 + 1;
          int v56 = &v53[3 * v55];
          v56[4] = v15;
          v56[5] = v52;
          v56[6] = v49;
          if (v91) {
            break;
          }
          a1 = v92;
          int64_t v40 = sub_10015E644(v45, v46, v47, v92);
          uint64_t v42 = v41;
          char v44 = v43;
          sub_100160324(v45, v46, v47);
          v93 = (unint64_t *)v40;
          uint64_t v94 = v42;
          char v95 = v44 & 1;
          if (!--v32) {
            goto LABEL_35;
          }
        }

        a1 = v92;
        if ((v47 & 1) == 0) {
          goto LABEL_73;
        }
        uint64_t v57 = __CocoaSet.Index.handleBitPattern.getter(v45, v46);
        if (v57) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v59 = sub_100156B68(&qword_1003F8200);
        uint64_t v60 = (void (*)(uint64_t *, void))Set.Index._asCocoa.modify(v96, v59);
        __CocoaSet.formIndex(after:isUnique:)(v61, isUniquelyReferenced_nonNull_native, v88);
        v60(v96, 0LL);
        --v32;
      }

      while (v32);
LABEL_35:
      sub_100160324((uint64_t)v93, v94, v95);
      uint64_t v33 = v97;
LABEL_36:
      uint64_t v62 = v33[2];
      if (v62)
      {
        sub_100156B68(&qword_1003F8240);
        uint64_t v63 = (void *)static _DictionaryStorage.allocate(capacity:)(v62);
      }

      else
      {
        uint64_t v63 = &_swiftEmptyDictionarySingleton;
      }

      v96[0] = (uint64_t)v63;
      uint64_t v64 = (void *)swift_bridgeObjectRetain(v33);
      uint64_t v15 = 0LL;
      sub_10015C11C(v64, 1, v96);
      swift_bridgeObjectRelease(v33);
      uint64_t v65 = v96[0];
      uint64_t v66 = swift_retain(v96[0]);
      uint64_t v67 = sub_100159180(v66);
      swift_beginAccess(v87 + 16, v96, 0LL, 0LL);
      uint64_t v68 = *(void *)(v87 + 16);
      if (*(void *)(v68 + 16) <= *(void *)(v67 + 16) >> 3)
      {
        v93 = (unint64_t *)v67;
        uint64_t v70 = swift_bridgeObjectRetain(v68);
        sub_10015C4A8(v70);
        swift_bridgeObjectRelease(v68);
        a7 = v93;
      }

      else
      {
        uint64_t v69 = swift_bridgeObjectRetain(*(void *)(v87 + 16));
        a7 = sub_10015C63C(v69, v67);
        swift_bridgeObjectRelease(v68);
      }

      v71 = a7 + 7;
      uint64_t v72 = 1LL << *((_BYTE *)a7 + 32);
      uint64_t v73 = -1LL;
      if (v72 < 64) {
        uint64_t v73 = ~(-1LL << v72);
      }
      a1 = v73 & a7[7];
      int64_t v13 = (unint64_t)(v72 + 63) >> 6;
      swift_bridgeObjectRetain(a7);
      int64_t v74 = 0LL;
      while (1)
      {
        while (a1)
        {
          unint64_t v75 = __clz(__rbit64(a1));
          a1 &= a1 - 1;
          unint64_t v76 = v75 | (v74 << 6);
          if (*(void *)(v65 + 16)) {
            goto LABEL_60;
          }
        }

        if (__OFADD__(v74++, 1LL))
        {
          __break(1u);
          goto LABEL_70;
        }

        if (v74 >= v13) {
          goto LABEL_66;
        }
        unint64_t v78 = v71[v74];
        if (!v78)
        {
          int64_t v79 = v74 + 1;
          if (v74 + 1 >= v13) {
            goto LABEL_66;
          }
          unint64_t v78 = v71[v79];
          if (!v78)
          {
            int64_t v79 = v74 + 2;
            if (v74 + 2 >= v13) {
              goto LABEL_66;
            }
            unint64_t v78 = v71[v79];
            if (!v78)
            {
              int64_t v79 = v74 + 3;
              if (v74 + 3 >= v13)
              {
LABEL_66:
                swift_release(a7);
                swift_release(v65);
                swift_beginAccess(v87 + 16, &v93, 33LL, 0LL);
                sub_100159314((uint64_t)a7);
                swift_endAccess(&v93);
                int64_t v13 = v89;
                return swift_release(v13);
              }

              unint64_t v78 = v71[v79];
              if (!v78)
              {
                while (1)
                {
                  int64_t v74 = v79 + 1;
                  if (__OFADD__(v79, 1LL)) {
                    break;
                  }
                  if (v74 >= v13) {
                    goto LABEL_66;
                  }
                  unint64_t v78 = v71[v74];
                  ++v79;
                  if (v78) {
                    goto LABEL_59;
                  }
                }

LABEL_70:
                __break(1u);
LABEL_71:
                swift_once(&qword_1003FE520, sub_1001579A4);
                goto LABEL_4;
              }
            }
          }

          int64_t v74 = v79;
        }

LABEL_59:
        a1 = (v78 - 1) & v78;
        unint64_t v76 = __clz(__rbit64(v78)) + (v74 << 6);
        if (*(void *)(v65 + 16))
        {
LABEL_60:
          id v80 = (uint64_t *)(a7[6] + 16 * v76);
          uint64_t v82 = *v80;
          uint64_t v81 = v80[1];
          swift_bridgeObjectRetain(v81);
          unint64_t v83 = sub_10015CAD4(v82, v81);
          if ((v84 & 1) != 0)
          {
            id v85 = *(id *)(*(void *)(v65 + 56) + 8 * v83);
            swift_bridgeObjectRelease(v81);
            uint64_t v86 = sub_100159EE8(0, a6, v85);
            __chkstk_darwin(v86);
            sub_100236804((void (*)(void))sub_100160674);
          }

          else
          {
            swift_bridgeObjectRelease(v81);
          }
        }
      }
    }

    __break(1u);
LABEL_73:
    __break(1u);
    uint64_t result = swift_unexpectedError(v15, "Swift/Dictionary.swift", 22LL, 1LL, 489LL);
    __break(1u);
  }

  return result;
}

          *(void *)(v93 + 16) = v98;
          sub_1001A81D4( v89,  v93 + ((*(unsigned __int8 *)(v95 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))
          + *(void *)(v95 + 72) * v97,
            type metadata accessor for HostedRoutingSession);
          return sub_1001A813C(v86, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        }

        id v90 = v103;
        unint64_t v91 = sub_10025068C(v103);
        uint64_t v92 = Date.timeIntervalSinceNow.getter(v91);
        (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v90, v106);
        uint64_t v88 = (uint64_t)a1;
        if (v92 > -a8)
        {
          int64_t v89 = (uint64_t)v101;
          goto LABEL_50;
        }

        int64_t v89 = (uint64_t)v102;
      }

      else
      {
        uint64_t v88 = (uint64_t)a1;
        int64_t v89 = (uint64_t)v107;
      }

      sub_1001A80F8(v88, v89, type metadata accessor for HostedRoutingSession);
      v93 = v87[1];
      v99 = swift_isUniquelyReferenced_nonNull_native(v93);
      v87[1] = v93;
      if ((v99 & 1) == 0)
      {
        v93 = sub_10019F720( 0,  *(void *)(v93 + 16) + 1LL,  1,  v93,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
        v87[1] = v93;
      }

      char v95 = v117;
      v97 = *(void *)(v93 + 16);
      v100 = *(void *)(v93 + 24);
      uint64_t v98 = v97 + 1;
      if (v97 >= v100 >> 1)
      {
        v93 = sub_10019F720( v100 > 1,  v97 + 1,  1,  v93,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
        v87[1] = v93;
      }

      goto LABEL_59;
    }

    sub_1001A80F8((uint64_t)a1, (uint64_t)v32, type metadata accessor for HostedRoutingSession);
    uint64_t v68 = v119;
    uint64_t v69 = *v119;
    uint64_t v70 = swift_isUniquelyReferenced_nonNull_native(*v119);
    *uint64_t v68 = v69;
    if ((v70 & 1) == 0)
    {
      uint64_t v69 = sub_10019F720( 0,  *(void *)(v69 + 16) + 1LL,  1,  v69,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
      *uint64_t v68 = v69;
    }

    v71 = v117;
    uint64_t v73 = *(void *)(v69 + 16);
    uint64_t v72 = *(void *)(v69 + 24);
    if (v73 >= v72 >> 1)
    {
      uint64_t v69 = sub_10019F720(v72 > 1, v73 + 1, 1, v69, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
      *uint64_t v68 = v69;
    }

    *(void *)(v69 + 16) = v73 + 1;
    return sub_1001A81D4( (uint64_t)v32,  v69 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
           + *(void *)(v71 + 72) * v73,
             type metadata accessor for HostedRoutingSession);
  }

  else
  {
    sub_1001A80F8((uint64_t)a1, (uint64_t)v44, type metadata accessor for HostedRoutingSession);
    unint64_t v55 = v119;
    int v56 = *v119;
    uint64_t v57 = swift_isUniquelyReferenced_nonNull_native(*v119);
    CFStringRef v55 = v56;
    if ((v57 & 1) == 0)
    {
      int v56 = sub_10019F720( 0,  *(void *)(v56 + 16) + 1LL,  1,  v56,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
      CFStringRef v55 = v56;
    }

    uint64_t v59 = *(void *)(v56 + 16);
    uint64_t v58 = *(void *)(v56 + 24);
    if (v59 >= v58 >> 1)
    {
      int v56 = sub_10019F720(v58 > 1, v59 + 1, 1, v56, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
      CFStringRef v55 = v56;
    }

    *(void *)(v56 + 16) = v59 + 1;
    return sub_1001A81D4( (uint64_t)v44,  v56 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80))
           + *(void *)(v117 + 72) * v59,
             type metadata accessor for HostedRoutingSession);
  }

uint64_t sub_100158DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v18, *(void *)(a3 + 40));
    String.hash(into:)(v18, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1LL;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100158F08(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v34 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.count.getter(a1);
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 16);
  }

  uint64_t result = (uint64_t)&_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v39 = &_swiftEmptyArrayStorage;
    sub_10015DCE8(0, v2 & ~(v2 >> 63), 0);
    if (v34)
    {
      if (v1 < 0) {
        uint64_t v4 = v1;
      }
      else {
        uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t result = __CocoaSet.startIndex.getter(v4);
      char v6 = 1;
    }

    else
    {
      uint64_t result = sub_10015E990(v1);
      char v6 = v7 & 1;
    }

    uint64_t v36 = result;
    uint64_t v37 = v5;
    char v38 = v6;
    if (v2 < 0)
    {
      __break(1u);
LABEL_31:
      __break(1u);
    }

    else
    {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v8 = v1;
      }
      uint64_t v32 = v8;
      uint64_t v33 = v1;
      do
      {
        while (1)
        {
          int64_t v15 = v36;
          uint64_t v14 = v37;
          char v16 = v38;
          sub_10015E728(v36, v37, v38, v1);
          uint64_t v18 = v17;
          id v19 = [v17 effectiveIdentifier];
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          uint64_t v22 = v21;

          unint64_t v23 = v39;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v39);
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10015DCE8(0, v23[2] + 1LL, 1);
            unint64_t v23 = v39;
          }

          unint64_t v25 = v23[2];
          unint64_t v24 = v23[3];
          if (v25 >= v24 >> 1)
          {
            uint64_t result = sub_10015DCE8(v24 > 1, v25 + 1, 1);
            unint64_t v23 = v39;
          }

          v23[2] = v25 + 1;
          uint64_t v26 = (char *)&v23[2 * v25];
          *((void *)v26 + 4) = v20;
          *((void *)v26 + 5) = v22;
          if (v34) {
            break;
          }
          uint64_t v1 = v33;
          int64_t v9 = sub_10015E644(v15, v14, v16, v33);
          uint64_t v11 = v10;
          char v13 = v12;
          sub_100160324(v15, v14, v16);
          uint64_t v36 = v9;
          uint64_t v37 = v11;
          char v38 = v13 & 1;
          if (!--v2) {
            goto LABEL_28;
          }
        }

        uint64_t v1 = v33;
        if ((v16 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v27 = __CocoaSet.Index.handleBitPattern.getter(v15, v14);
        if (v27) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v29 = sub_100156B68(&qword_1003F8200);
        uint64_t v30 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v35, v29);
        __CocoaSet.formIndex(after:isUnique:)(v31, isUniquelyReferenced_nonNull_native, v32);
        v30(v35, 0LL);
        --v2;
      }

      while (v2);
LABEL_28:
      sub_100160324(v36, v37, v38);
      return (uint64_t)v39;
    }
  }

  return result;
}

uint64_t sub_100159180(uint64_t a1)
{
  uint64_t result = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String);
  int64_t v3 = 0LL;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

LABEL_25:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  uint64_t v46 = 0LL;
  char v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  v43._object = (void *)0x8000000100339DD0LL;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)( &v48,  &v46,  &type metadata for String,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v44._countAndFlagsBits = 39LL;
  v44._object = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v46,  v47,  "Swift/NativeDictionary.swift",  28LL,  2LL,  783LL,  0);
  __break(1u);
  return result;
}

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    uint64_t result = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v25 - 1) & v25;
    uint64_t v18 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    id v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    uint64_t v20 = 16 * v18;
    uint64_t v21 = *(void *)(v8 + 48) + v19;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v29 = *(_OWORD *)(*(void *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    unint64_t v23 = *((void *)&v29 + 1);
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v29;
    uint64_t result = (void *)swift_retain(v23);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v27;
    goto LABEL_28;
  }

  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v12 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v12);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    int64_t v14 = (v25 - 1) & v25;
    BOOL v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    id v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = *(void *)(v30 + 72) * v17;
    sub_100183690(*(void *)(v5 + 56) + v22, (uint64_t)v4);
    unint64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v23 = v21;
    v23[1] = v20;
    sub_10018364C((uint64_t)v4, *(void *)(v7 + 56) + v22);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v28;
    goto LABEL_28;
  }

  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v25 - 1) & v25;
    uint64_t v18 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    id v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    uint64_t v20 = 16 * v18;
    uint64_t v21 = *(void *)(v8 + 48) + v19;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v29 = *(_OWORD *)(*(void *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    unint64_t v23 = *((void *)&v29 + 1);
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v29;
    uint64_t result = (void *)swift_retain(v23);
  }

  uint64_t v26 = v24 + 2;
  if (v26 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v27;
    goto LABEL_28;
  }

  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v12 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v12 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v12);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(*((void *)&v24 + 1));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v33 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    int64_t v14 = result;
    unint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    BOOL v17 = *v15;
    int64_t v16 = v15[1];
    Hasher.init(_seed:)(v34, *(void *)(a2 + 40));
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(v34, v17, v16);
    uint64_t v18 = Hasher._finalize()();
    id v19 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    unint64_t v23 = v22[1];
    unint64_t v24 = *v22 == v17 && v23 == v16;
    if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0LL) & 1) == 0)
    {
      unint64_t v25 = ~v19;
      for (i = v20 + 1; ; i = v27 + 1)
      {
        uint64_t v27 = i & v25;
        unint64_t v28 = (void *)(v21 + 16 * v27);
        uint64_t v29 = v28[1];
        uint64_t v30 = *v28 == v17 && v29 == v16;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v17, v16, 0LL) & 1) != 0) {
          goto LABEL_7;
        }
      }

    int64_t v14 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    unint64_t v24 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v24 * v20, v4);
    unint64_t v25 = *(void *)(v10 + 40);
    uint64_t v26 = sub_100156FEC( &qword_1003F94A0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    uint64_t v27 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v15 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v18 * v24,  v7,  v4);
    ++*(void *)(v10 + 16);
  }

  unint64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    uint64_t result = swift_release_n(v8, 2LL);
    uint64_t v2 = v35;
    goto LABEL_37;
  }

  uint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    BOOL v17 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    BOOL v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_35;
    }
    uint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v21 - 1) & v21;
    id v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    unint64_t v23 = v7;
    unint64_t v24 = *(void *)(v7 + 48);
    unint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    uint64_t v27 = *(void *)(v9 + 40);
    unint64_t v28 = sub_100156FEC( &qword_1003F94A0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      BOOL v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        unint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }

      while (v35 == -1);
      BOOL v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(void *)(v9 + 16);
    unint64_t v7 = v23;
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    uint64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        int64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_35;
        }
        uint64_t v21 = v39[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    int64_t v16 = v22;
    goto LABEL_25;
  }

    int64_t v14 = (v22 - 1) & v22;
    BOOL v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 8 * v17;
    id v19 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
    uint64_t v20 = *(void *)(v27 + 72) * v17;
    sub_1001A80F8(*(void *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for HostedRoutingSessionSnapshot);
    *(void *)(*(void *)(v7 + 48) + v1_Block_object_dispose(va, 8) = v19;
    sub_1001A81D4((uint64_t)v4, *(void *)(v7 + 56) + v20, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t result = (void *)swift_retain(v19);
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v26 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    BOOL v17 = *(void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(*((void *)&v24 + 1));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    id v132 = v472;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v108 + 56))(v129, v128, 1LL, v472);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v133 = v109(v129, 1LL, v132);
    id v134 = v468;
    if (v133 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001603DC(v129, &qword_1003F94C0);
      id v110 = type metadata accessor for InternalRoutingError(0LL);
      v135 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      swift_allocError(v110, v135, 0LL, 0LL);
      v113 = v136;
      v114 = (unsigned int *)&enum case for InternalRoutingError.sessionNotFound(_:);
      goto LABEL_27;
    }

    uint64_t v62 = (char *)v122;
    sub_1001A81D4(v129, (uint64_t)v74, type metadata accessor for HostedRoutingSession);
    v138 = sub_10025026C();
    v139 = v474;
    swift_bridgeObjectRetain();
    v140 = v460;
    id v141 = v139;
    v142 = v461;
    sub_1001AE6C8(v138, v473, v141, v460);
    swift_bridgeObjectRelease();
    id v143 = v464;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v463 + 48))(v140, 1LL, v464) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001603DC(v140, &qword_1003F8918);
      v144 = type metadata accessor for InternalRoutingError(0LL);
      v145 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      swift_allocError(v144, v145, 0LL, 0LL);
      id v147 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v144 - 8) + 104LL))( v146,  enum case for InternalRoutingError.itemNotFound(_:),  v144);
      swift_willThrow(v147);
      return sub_1001A813C((uint64_t)v74, type metadata accessor for HostedRoutingSession);
    }

    uint64_t v148 = v140;
    v149 = v459;
    sub_1001A81D4(v148, v459, type metadata accessor for HostedRoutingItem);
    if (*(_BYTE *)(v149 + *(int *)(v143 + 64)) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v150 = type metadata accessor for HostedRoutingError(0LL);
      id v151 = sub_100156FEC(&qword_1003F8E88, type metadata accessor for HostedRoutingError, (uint64_t)&unk_10034F9F8);
      swift_allocError(v150, v151, 0LL, 0LL);
      id v153 = v152;
      sub_1001A80F8(v149, v152, type metadata accessor for HostedRoutingItem);
      v154 = sub_100156B68(&qword_1003F8E90);
      v155 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56LL))( v153,  0LL,  1LL,  v154);
      swift_willThrow(v155);
      id v156 = v149;
LABEL_115:
      sub_1001A813C(v156, type metadata accessor for HostedRoutingItem);
      return sub_1001A813C((uint64_t)v74, type metadata accessor for HostedRoutingSession);
    }

    v157 = sub_10024A71C();
    if ((v157 & 1) != 0)
    {
      v158 = v446;
      sub_1001A8360((uint64_t)v74 + *(int *)(v472 + 28), v446, &qword_1003F9450);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v456 + 48))(v158, 1LL, v457) == 1)
      {
        sub_1001603DC(v158, &qword_1003F9450);
        id v159 = v469;
LABEL_59:
        v263 = sub_1001741A8();
        v264 = v451;
        (*(void (**)(char *, uint64_t, uint64_t))(v159 + 16))(v451, v263, v134);
        swift_bridgeObjectRetain();
        v265 = swift_bridgeObjectRetain();
        v266 = (os_log_s *)Logger.logObject.getter(v265);
        v267 = v130;
        v268 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v266, v268))
        {
          v269 = swift_slowAlloc(32LL, -1LL);
          v270 = swift_slowAlloc(96LL, -1LL);
          v477[0] = v270;
          *(_DWORD *)v269 = 136315650;
          v271 = _typeName(_:qualified:)(v465, 0LL);
          v475 = sub_10015ADC4(v271, v272, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v269 + 4, v269 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v269 + 12) = 2080;
          swift_bridgeObjectRetain();
          v475 = sub_10015ADC4(v426, v267, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v269 + 14, v269 + 22);
          swift_bridgeObjectRelease_n(v267, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v269 + 22) = 2080;
          int64_t v74 = v467;
          swift_bridgeObjectRetain();
          v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v269 + 24, v269 + 32);
          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v266,  v268,  "[%s] Item: %s, is pull handoff item but session: %s has no content",  (uint8_t *)v269,  0x20u);
          swift_arrayDestroy(v270, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v270, -1LL, -1LL);
          swift_slowDealloc(v269, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v469 + 8))(v451, v468);
        }

        else
        {

          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease_n(v267, 2LL);
          (*(void (**)(char *, uint64_t))(v159 + 8))(v264, v134);
        }

        v273 = v459;
        v274 = type metadata accessor for InternalRoutingError(0LL);
        v275 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
        swift_allocError(v274, v275, 0LL, 0LL);
        v277 = v276;
        v278 = (unsigned int *)&enum case for InternalRoutingError.invalidAction(_:);
        goto LABEL_90;
      }

      v177 = v445;
      sub_1001A81D4(v158, v445, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      v178 = *(void *)(v177 + 8);
      id v159 = v469;
      if (!v178)
      {
        sub_1001A813C(v177, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
        goto LABEL_59;
      }

      v478 = *(void *)v177;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v179 = swift_allocObject(&unk_1003A4C10, 56LL, 7LL);
      v180 = v130;
      v181 = (void *)v179;
      v182 = v74[1];
      v181[2] = *v74;
      v181[3] = v182;
      v181[4] = v426;
      v181[5] = v180;
      id v183 = *(void **)(v177 + 32);
      uint64_t v184 = *(unsigned int *)(v177 + 40);
      v185 = *(_BYTE *)(v177 + 44);
      swift_bridgeObjectRetain();
      sub_1001A8278((uint64_t)v183, v184, v185);
      v186 = v74;
      v187 = sub_10024F86C(v183);
      v189 = v188;
      sub_1001A0918((uint64_t)v183, v184, v185);
      v190 = type metadata accessor for RoutingInteraction.Action.HandoffContext(0LL);
      swift_allocObject(v190, *(unsigned int *)(v190 + 48), *(unsigned __int16 *)(v190 + 52));
      v191 = v187;
      int64_t v74 = v186;
      v181[6] = RoutingInteraction.Action.HandoffContext.init(sourceBundleIdentifier:mediaTitle:)( v191,  v189,  v478,  v178);
      v192 = v454;
      *v454 = v181;
      (*(void (**)(void *, void, uint64_t))(v452 + 104))( v192,  enum case for RoutingInteraction.Action.handoff(_:),  v453);
      RoutingInteraction.init(action:)(v192);
      sub_1001A813C(v445, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      v193 = v459;
LABEL_114:
      id v156 = v193;
      goto LABEL_115;
    }

    v160 = v447;
    RoutingSessionConfiguration.context.getter(v157);
    id v161 = sub_100255494();
    (*(void (**)(char *, uint64_t))(v448 + 8))(v160, v450);
    if ((v161 & 1) != 0)
    {
      v162 = sub_10025026C();
      uint64_t v163 = sub_1001AEE68(v162);
      swift_bridgeObjectRelease();
      v164 = v163[2];
      swift_bridgeObjectRelease();
      id v165 = sub_10025026C();
      v166 = sub_1001AF0A4(v165);
      swift_bridgeObjectRelease();
      v167 = v166[2];
      swift_bridgeObjectRelease();
      id v168 = sub_10024B254();
      v169 = v459;
      v170 = v444;
      sub_1001A80F8(v459, v444, type metadata accessor for HostedRoutingItem);
      uint64_t v72 = v468;
      if ((v168 & 1) != 0)
      {
        v171 = *(_BYTE *)(v170 + *(int *)(v464 + 44));
        LOBYTE(v477[0]) = *(_BYTE *)sub_1002493C8();
        LOBYTE(v475) = v171;
        id v172 = sub_1001AEE24();
        v173 = dispatch thunk of SetAlgebra.isSuperset(of:)(v477, &type metadata for RoutingCapabilities, v172);
        v169 = v459;
        v174 = v173;
        sub_1001A813C(v170, type metadata accessor for HostedRoutingItem);
        if ((v174 & 1) != 0 && !v164 && !v167)
        {
          id v175 = v436;
          sub_1001A8360((uint64_t)&v467[*(int *)(v472 + 28)], v436, &qword_1003F9450);
          v176 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v456 + 48))(v175, 1LL, v457);
          v474 = v142;
          if (v176 == 1)
          {
            swift_bridgeObjectRelease();
            sub_1001603DC(v175, &qword_1003F9450);
            v93 = v469;
            uint64_t v92 = v458;
LABEL_100:
            int64_t v74 = v467;
            v383 = sub_1001741A8();
            v384 = v438;
            (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v438, v383, v72);
            v385 = swift_bridgeObjectRetain_n(v92, 2LL);
            v386 = (os_log_s *)Logger.logObject.getter(v385);
            v387 = v92;
            v388 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v386, v388))
            {
              v389 = swift_slowAlloc(22LL, -1LL);
              v390 = swift_slowAlloc(64LL, -1LL);
              v477[0] = v390;
              *(_DWORD *)v389 = 136315394;
              v391 = _typeName(_:qualified:)(v465, 0LL);
              v475 = sub_10015ADC4(v391, v392, v477);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v389 + 4, v389 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v389 + 12) = 2080;
              swift_bridgeObjectRetain();
              v393 = v426;
              v475 = sub_10015ADC4(v426, v387, v477);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v389 + 14, v389 + 22);
              swift_bridgeObjectRelease_n(v387, 2LL);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v386,  v388,  "[%s] Item: %s, selected in local session, is .remoteControllable, has no nowPlayingInfo content -> .setActiveItem",  (uint8_t *)v389,  0x16u);
              swift_arrayDestroy(v390, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v390, -1LL, -1LL);
              swift_slowDealloc(v389, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v469 + 8))(v438, v468);
              v193 = v459;
              v394 = v454;
              v395 = v453;
              v396 = v452;
            }

            else
            {

              swift_bridgeObjectRelease_n(v387, 2LL);
              (*(void (**)(char *, uint64_t))(v93 + 8))(v384, v72);
              v193 = v459;
              v394 = v454;
              v395 = v453;
              v396 = v452;
              v393 = v426;
            }

            *v394 = v393;
            v394[1] = v387;
            (*(void (**)(uint64_t *, void, uint64_t))(v396 + 104))( v394,  enum case for RoutingInteraction.Action.setActiveItem(_:),  v395);
            RoutingInteraction.init(action:)(v394);
            goto LABEL_114;
          }

          v342 = v434;
          sub_1001A81D4(v175, v434, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
          v343 = *(void *)(v342 + 8);
          v93 = v469;
          uint64_t v92 = v458;
          if (!v343)
          {
            sub_1001A813C(v342, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            swift_bridgeObjectRelease();
            goto LABEL_100;
          }

          v344 = *(void *)(*(void *)(v342 + 56) + 16LL);
          v345 = (uint64_t *)v342;
          int64_t v74 = v467;
          if (v344)
          {
            v478 = *v345;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v346 = sub_1001741A8();
            v347 = v430;
            (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v430, v346, v72);
            v348 = swift_bridgeObjectRetain_n(v92, 2LL);
            v349 = (os_log_s *)Logger.logObject.getter(v348);
            v350 = v72;
            v351 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v349, v351))
            {
              v352 = swift_slowAlloc(22LL, -1LL);
              v353 = swift_slowAlloc(64LL, -1LL);
              v477[0] = v353;
              *(_DWORD *)v352 = 136315394;
              v354 = _typeName(_:qualified:)(v465, 0LL);
              v475 = sub_10015ADC4(v354, v355, v477);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v352 + 4, v352 + 12);
              v356 = v92;
              swift_bridgeObjectRelease();
              *(_WORD *)(v352 + 12) = 2080;
              swift_bridgeObjectRetain();
              v357 = v426;
              v475 = sub_10015ADC4(v426, v356, v477);
              int64_t v74 = v467;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v352 + 14, v352 + 22);
              swift_bridgeObjectRelease_n(v356, 2LL);
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v349,  v351,  "[%s] Item: %s, selected in local session, is .remoteControllable, has nowPlayingInfo content, has handof f formats -> .handoff",  (uint8_t *)v352,  0x16u);
              swift_arrayDestroy(v353, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v353, -1LL, -1LL);
              swift_slowDealloc(v352, -1LL, -1LL);

              (*(void (**)(char *, uint64_t))(v469 + 8))(v430, v468);
            }

            else
            {

              swift_bridgeObjectRelease_n(v92, 2LL);
              (*(void (**)(char *, uint64_t))(v93 + 8))(v347, v350);
              v356 = v92;
              v357 = v426;
            }

            v412 = (void *)swift_allocObject(&unk_1003A4C10, 56LL, 7LL);
            v413 = v74[1];
            v412[2] = *v74;
            v412[3] = v413;
            v412[4] = v357;
            v412[5] = v356;
            v414 = v434;
            v415 = *(void **)(v434 + 32);
            v416 = *(unsigned int *)(v434 + 40);
            v417 = *(_BYTE *)(v434 + 44);
            swift_bridgeObjectRetain();
            sub_1001A8278((uint64_t)v415, v416, v417);
            v418 = v74;
            v419 = sub_10024F86C(v415);
            v421 = v420;
            sub_1001A0918((uint64_t)v415, v416, v417);
            v422 = type metadata accessor for RoutingInteraction.Action.HandoffContext(0LL);
            swift_allocObject(v422, *(unsigned int *)(v422 + 48), *(unsigned __int16 *)(v422 + 52));
            v423 = v419;
            int64_t v74 = v418;
            v412[6] = RoutingInteraction.Action.HandoffContext.init(sourceBundleIdentifier:mediaTitle:)( v423,  v421,  v478,  v343);
            v424 = v454;
            *v454 = v412;
            (*(void (**)(void *, void, uint64_t))(v452 + 104))( v424,  enum case for RoutingInteraction.Action.handoff(_:),  v453);
            RoutingInteraction.init(action:)(v424);
            sub_1001A813C(v414, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            v193 = v459;
            goto LABEL_114;
          }

          v398 = sub_1001741A8();
          uint64_t v51 = v429;
          (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v429, v398, v72);
          v399 = swift_bridgeObjectRetain_n(v92, 2LL);
          int64_t v89 = (os_log_s *)Logger.logObject.getter(v399);
          v400 = static os_log_type_t.default.getter();
          v401 = v400;
          if (os_log_type_enabled(v89, v400))
          {
            v402 = swift_slowAlloc(22LL, -1LL);
            LODWORD(v473) = v401;
            v403 = v402;
            v472 = swift_slowAlloc(64LL, -1LL);
            v477[0] = v472;
            *(_DWORD *)v403 = 136315394;
            v404 = _typeName(_:qualified:)(v465, 0LL);
            v475 = sub_10015ADC4(v404, v405, v477);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v403 + 4, v403 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v403 + 12) = 2080;
            swift_bridgeObjectRetain();
            v406 = v426;
            v475 = sub_10015ADC4(v426, v92, v477);
            uint64_t v62 = (char *)v123;
            v407 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v403 + 14, v403 + 22);
            swift_bridgeObjectRelease_n(v92, 2LL);
            swift_bridgeObjectRelease();
            _os_log_impl( (void *)&_mh_execute_header,  v89,  (os_log_type_t)v473,  "[%s] Item: %s, selected in local session, is .remoteControllable, has nowPlayingInfo content, no handoff formats -> .add",  (uint8_t *)v403,  0x16u);
            v408 = v472;
            swift_arrayDestroy(v472, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v408, -1LL, -1LL);
            swift_slowDealloc(v403, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v469 + 8))(v429, v468);
            v193 = v459;
            v409 = v454;
            v410 = v453;
            v411 = v452;
LABEL_113:
            *v409 = v406;
            v409[1] = v407;
            v409[2] = v478;
            v409[3] = (uint64_t)v62;
            (*(void (**)(uint64_t *, void, uint64_t))(v411 + 104))( v409,  enum case for RoutingInteraction.Action.add(_:),  v410);
            RoutingInteraction.init(action:)(v409);
            sub_1001A813C(v434, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
            goto LABEL_114;
          }

  int64_t v79 = *(void *)(v0 + 544);
  id v80 = *(void *)(v0 + 536);
  uint64_t v81 = *(void *)(v0 + 512);
  swift_task_dealloc(*(void *)(v0 + 568));
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    uint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    unint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *unint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    unint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    sub_100160954(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    BOOL v17 = 32 * v15;
    sub_100160800(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    id v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100160944(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  unint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    unint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    BOOL v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    int64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    BOOL v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    id v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = v21;
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    unint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    id v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100160800(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_100160944(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v27 - 1) & v27;
    uint64_t v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    uint64_t v21 = 16 * v18;
    uint64_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v18);
    unint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    unint64_t v25 = (void *)(*(void *)(v16 + 56) + v21);
    const char *v25 = v23;
    v25[1] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v37);
    uint64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_28;
  }

  uint64_t v27 = *((void *)v34 + v28);
  if (v27)
  {
    unint64_t v10 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v10 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_26;
    }
    uint64_t v27 = *((void *)v34 + v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 4 * v15;
    uint64_t v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    BOOL v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    id v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    swift_retain(v17);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    unint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

    int64_t v14 = (v26 - 1) & v26;
    BOOL v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    id v19 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v17);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    uint64_t v22 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v22, v15);
    unint64_t v23 = v35;
    unint64_t v24 = (void *)(*(void *)(v35 + 48) + v18);
    *unint64_t v24 = v21;
    v24[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v23 + 56) + v22, v3, v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v4);
    unint64_t v28 = v31;
    uint64_t v29 = v35;
    goto LABEL_28;
  }

  uint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    uint64_t v11 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v32 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = v20;
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    BOOL v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100160800(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = sub_100160944(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    BOOL v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v22 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v1_Block_object_dispose(va, 8) = v22;
    swift_retain(v17);
    uint64_t result = (void *)sub_100160874(v22, *((unint64_t *)&v22 + 1));
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain(v20);
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    int64_t v14 = (v21 - 1) & v21;
    int64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    BOOL v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    id v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose(va, 8) = v19;
    uint64_t result = (void *)swift_retain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    BOOL v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    id v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    unint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v13 = (v27 - 1) & v27;
    uint64_t v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    uint64_t v21 = 16 * v18;
    uint64_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v18);
    unint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    unint64_t v25 = (void *)(*(void *)(v16 + 56) + v21);
    const char *v25 = v23;
    v25[1] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }

  unint64_t v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v37);
    uint64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_28;
  }

  uint64_t v27 = *((void *)v34 + v28);
  if (v27)
  {
    unint64_t v10 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v10 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_26;
    }
    uint64_t v27 = *((void *)v34 + v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = *v1;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_retain(a1);
  unint64_t v7 = __CocoaSet.contains(_:)(v6, v5);
  swift_release(a1);
  if ((v7 & 1) == 0) {
    goto LABEL_25;
  }
  int64_t v8 = sub_10029FE74(v5, a1);
LABEL_16:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100159314(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0LL;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v7) {
      return swift_release(v1);
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        return swift_release(v1);
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          return swift_release(v1);
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            return swift_release(v1);
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_100159480(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FE520 != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v11 = sub_10015ADAC(v7, (uint64_t)qword_1003FE528);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  id v12 = a1;
  swift_unknownObjectRetain_n(a2, 2LL);
  id v13 = v12;
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter();
  int v16 = v15;
  BOOL v17 = os_log_type_enabled(v14, v15);
  uint64_t v52 = v6;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc(42LL, -1LL);
    uint64_t v51 = v3;
    uint64_t v19 = v18;
    uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v46 = v20;
    uint64_t v50 = swift_slowAlloc(96LL, -1LL);
    v55[0] = v50;
    *(_DWORD *)uint64_t v19 = 136315906;
    os_log_t v49 = v14;
    uint64_t v21 = _typeName(_:qualified:)(v6, 0LL);
    unint64_t v23 = v22;
    uint64_t v53 = sub_10015ADC4(v21, v22, v55);
    int v47 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v53 = sub_10015ADC4(0x5F286C65636E6163LL, 0xEE00293A726F663ALL, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v19 + 14, v19 + 22);
    *(_WORD *)(v19 + 22) = 2112;
    uint64_t v53 = (uint64_t)v13;
    id v24 = v13;
    uint64_t v48 = v8;
    unint64_t v25 = a2;
    id v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v19 + 24, v19 + 32);
    *uint64_t v20 = v13;

    *(_WORD *)(v19 + 32) = 2080;
    id v27 = [v25 identifier];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    unint64_t v30 = v29;

    a2 = v25;
    uint64_t v53 = sub_10015ADC4(v28, v30, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease(v30);
    swift_unknownObjectRelease_n(v25, 2LL);
    os_log_t v31 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v47, "[%s] %s %@ session=%s", (uint8_t *)v19, 0x2Au);
    uint64_t v32 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v33 = v46;
    swift_arrayDestroy(v46, 1LL, v32);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v50;
    swift_arrayDestroy(v50, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v19;
    uint64_t v3 = v51;
    swift_slowDealloc(v35, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v7);
  }

  else
  {

    swift_unknownObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  sub_10015EA18(v13, a2, 1);
  uint64_t v37 = v36;
  __chkstk_darwin(v36);
  *(&v45 - 2) = (uint64_t)v3;
  *(&v45 - 1) = (uint64_t)v13;
  sub_100156B68(&qword_1003F8038);
  sub_100236804((void (*)(void))sub_10015F3E8);
  swift_bridgeObjectRelease(v55[1]);
  uint64_t v38 = swift_allocObject(&unk_1003A35D8, 24LL, 7LL);
  __chkstk_darwin(v38);
  *(&v45 - 2) = (uint64_t)v3;
  *(&v45 - 1) = (uint64_t)v13;
  sub_100156B68(qword_1003F9E60);
  sub_100236804((void (*)(void))sub_10015F488);
  uint64_t v39 = v55[0];
  *(void *)(v38 + 16) = v55[0];
  if (*(void *)(v39 + 16))
  {
    uint64_t v40 = swift_allocObject(&unk_1003A3600, 24LL, 7LL);
    swift_weakInit(v40 + 16, v3);
    uint64_t v41 = (void *)swift_allocObject(&unk_1003A3678, 40LL, 7LL);
    v41[2] = v40;
    void v41[3] = v38;
    void v41[4] = v37;
    uint64_t v42 = (void *)swift_allocObject(&unk_1003A36A0, 40LL, 7LL);
    v42[2] = v13;
    v42[3] = v38;
    v42[4] = v52;
    swift_retain_n(v38, 3LL);
    id v43 = v13;
    swift_retain(v40);
    sub_1001599CC( (uint64_t)sub_10015F574,  (uint64_t)v41,  (uint64_t)sub_10015F900,  v38,  (uint64_t)sub_10015F968,  (uint64_t)v42,  30.0);
    swift_release(v42);
    swift_release_n(v38, 2LL);
    swift_release(v41);
    return swift_release(v40);
  }

  else
  {
    swift_release(v38);
    return swift_bridgeObjectRelease(v37);
  }

uint64_t sub_1001599CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v47 = a4;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  uint64_t v43 = a1;
  uint64_t v9 = sub_100156B68(&qword_1003F8210);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003F8218);
  uint64_t v41 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100156B68(&qword_1003F8220);
  uint64_t v46 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  int v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = swift_allocObject(&unk_1003A37D0, 24LL, 7LL);
  uint64_t v40 = v17;
  *(void *)(v17 + 16) = 0LL;
  uint64_t v18 = (void **)(v17 + 16);
  uint64_t v19 = *(void *)(v7 + 16);
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v19 + 184LL))();
  aBlock[0] = (id)MRGroupSessionSubsystemGetNotificationQueue(v20, v21);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v11, 1LL, 1LL, v22);
  uint64_t v23 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v24 = sub_1001604E8( &qword_1003F8228,  &qword_1003F8218,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v25 = sub_10016039C( (unint64_t *)&qword_1003F8230,  (unint64_t *)&qword_1003F9F50,  &OBJC_CLASS___OS_dispatch_queue_ptr,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(aBlock, v11, v12, v23, v24, v25);
  sub_1001603DC((uint64_t)v11, &qword_1003F8210);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v12);
  id v26 = (void *)swift_allocObject(&unk_1003A37F8, 64LL, 7LL);
  uint64_t v27 = v44;
  v26[2] = v43;
  v26[3] = v27;
  uint64_t v28 = v47;
  v26[4] = v45;
  v26[5] = v28;
  uint64_t v29 = v40;
  v26[6] = v40;
  v26[7] = v19;
  uint64_t v30 = sub_1001604E8( &qword_1003F8238,  &qword_1003F8220,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain(v19);
  swift_retain(v27);
  swift_retain(v28);
  swift_retain(v29);
  uint64_t v31 = v42;
  uint64_t v32 = Publisher.sink(receiveCompletion:receiveValue:)( MRDFastSyncGroupSessionState.rawValue.getter,  0LL,  sub_100160454,  v26,  v42,  v30);
  swift_release(v26);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v31);
  uint64_t v33 = (void *)swift_allocObject(&unk_1003A3820, 48LL, 7LL);
  v33[2] = v19;
  v33[3] = v32;
  uint64_t v34 = v49;
  v33[4] = v48;
  v33[5] = v34;
  id v35 = objc_allocWithZone(&OBJC_CLASS___MSVBlockGuard);
  aBlock[4] = sub_10016055C;
  uint64_t v51 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10015ACC0;
  aBlock[3] = &unk_1003A3838;
  uint64_t v36 = _Block_copy(aBlock);
  swift_retain(v19);
  swift_retain(v32);
  swift_retain(v34);
  id v37 = [v35 initWithTimeout:v36 interruptionHandler:a7];
  _Block_release(v36);
  swift_release(v51);
  swift_beginAccess(v18, aBlock, 1LL, 0LL);
  uint64_t v38 = *v18;
  *uint64_t v18 = v37;

  (*(void (**)(void))(*(void *)v19 + 208LL))();
  swift_release(v29);
  return swift_release(v32);
}

unint64_t sub_100159DBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(&qword_1003F9F00);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1001608FC(v7, (uint64_t)v16);
    unint64_t result = sub_10015CAA4((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_100160944(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100159EE8(int a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  LODWORD(v7) = a1;
  uint64_t v8 = *v3;
  uint64_t v9 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v9);
  __int128 v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FE520 != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v12, (uint64_t)qword_1003FE528);
  id v13 = a3;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v14 = v13;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    int v39 = v7;
    uint64_t v7 = v17;
    __int128 v18 = (void *)swift_slowAlloc(8LL, -1LL);
    id v37 = v18;
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v43 = v38;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v40 = v11;
    uint64_t v19 = _typeName(_:qualified:)(v8, 0LL);
    uint64_t v41 = v4;
    unint64_t v21 = v20;
    uint64_t v42 = sub_10015ADC4(v19, v20, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v7 + 12) = 2112;
    uint64_t v42 = (uint64_t)v14;
    id v22 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v7 + 14, v7 + 22);
    *__int128 v18 = v14;

    *(_WORD *)(v7 + 22) = 2080;
    uint64_t v23 = swift_bridgeObjectRetain(a2);
    uint64_t v24 = Dictionary.description.getter( v23,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease(a2);
    uint64_t v42 = sub_10015ADC4(v24, v26, &v43);
    uint64_t v4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] Sending Rapport message to: %@\n%s", (uint8_t *)v7, 0x20u);
    uint64_t v27 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v28 = v37;
    swift_arrayDestroy(v37, 1LL, v27);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v38;
    __int128 v11 = v40;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v30 = v7;
    LOBYTE(v7) = v39;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v31 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v11, 1LL, 1LL, v31);
  uint64_t v32 = swift_allocObject(&unk_1003A36C8, 64LL, 7LL);
  *(void *)(v32 + 16) = 0LL;
  *(void *)(v32 + 24) = 0LL;
  *(void *)(v32 + 32) = v4;
  *(_BYTE *)(v32 + 40) = v7 & 1;
  *(void *)(v32 + 4_Block_object_dispose(va, 8) = a2;
  *(void *)(v32 + 56) = v14;
  id v33 = v14;
  swift_bridgeObjectRetain(a2);
  swift_retain(v4);
  uint64_t v34 = sub_10015AA50((uint64_t)v11, (uint64_t)&unk_1003F81B0, v32);
  return swift_release(v34);
}

uint64_t sub_10015A270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16_Block_object_dispose(va, 8) = a6;
  *(void *)(v7 + 176) = a7;
  *(_BYTE *)(v7 + 240) = a5;
  *(void *)(v7 + 160) = a4;
  return swift_task_switch(sub_10015A290, 0LL, 0LL);
}

uint64_t sub_10015A290()
{
  uint64_t v1 = sub_1001579FC();
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(int **)(*(void *)v1 + 192LL);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc(v2[1]);
  *(void *)(v0 + 192) = v3;
  void *v3 = v0;
  v3[1] = sub_10015A308;
  return v5(v0 + 120);
}

uint64_t sub_10015A308()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 192LL));
  swift_release(v1);
  return swift_task_switch(sub_10015A364, 0LL, 0LL);
}

uint64_t sub_10015A364()
{
  uint64_t v1 = *(void **)(v0 + 120);
  *(void *)(v0 + 200) = v1;
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 176);
    sub_1001EFFB4(*(_BYTE *)(v0 + 240) & 1);
    uint64_t v4 = v3;
    NSString v5 = String._bridgeToObjectiveC()();
    *(void *)(v0 + 20_Block_object_dispose(va, 8) = v5;
    swift_bridgeObjectRelease(v4);
    v6.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(NSDictionary *)(v0 + 216) = v6;
    NSString v7 = [v2 effectiveIdentifier];
    if (!v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v9 = v8;
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
    }

    uint64_t v10 = v0 + 16;
    *(void *)(v0 + 224) = v7;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_10015A574;
    uint64_t v11 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v12 = (void *)(v0 + 80);
    v12[1] = 0x40000000LL;
    v12[2] = sub_10015A9DC;
    v12[3] = &unk_1003A3708;
    void v12[4] = v11;
    [v1 sendEventID:v5 event:v6.super.isa destinationID:v7 options:0 completion:v12];
    return swift_continuation_await(v10);
  }

  else
  {
    if (qword_1003FE520 != -1) {
      swift_once(&qword_1003FE520, sub_1001579A4);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10015ADAC(v14, (uint64_t)qword_1003FE528);
    os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      __int128 v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to activate Rapport link", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10015A574()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 232LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10015A61C;
  }
  else {
    uint64_t v2 = sub_10015A5D4;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10015A5D4()
{
  uint64_t v1 = *(void **)(v0 + 216);
  uint64_t v3 = *(void **)(v0 + 200);
  uint64_t v2 = *(void **)(v0 + 208);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015A61C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 224);
  uint64_t v4 = *(void **)(v1 + 208);
  uint64_t v3 = *(void **)(v1 + 216);
  swift_willThrow(a1);

  if (qword_1003FE520 != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v5 = *(void *)(v1 + 232);
  uint64_t v6 = *(void *)(v1 + 168);
  NSString v7 = *(void **)(v1 + 176);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v8, (uint64_t)qword_1003FE528);
  swift_bridgeObjectRetain(v6);
  swift_errorRetain(v5);
  id v9 = v7;
  swift_bridgeObjectRetain(v6);
  swift_errorRetain(v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v1 + 232);
  uint64_t v15 = *(void *)(v1 + 168);
  uint64_t v14 = *(void **)(v1 + 176);
  if (v12)
  {
    id v35 = *(void **)(v1 + 200);
    char v31 = *(_BYTE *)(v1 + 240) & 1;
    os_log_type_t type = v11;
    uint64_t v16 = swift_slowAlloc(42LL, -1LL);
    uint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v34 = swift_slowAlloc(96LL, -1LL);
    v36[0] = v34;
    *(_DWORD *)uint64_t v16 = 136315906;
    uint64_t v17 = swift_bridgeObjectRetain(v15);
    uint64_t v18 = Dictionary.description.getter( v17,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v15);
    *(void *)(v1 + 12_Block_object_dispose(va, 8) = sub_10015ADC4(v18, v20, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(v15, 2LL);
    *(_WORD *)(v16 + 12) = 2080;
    unint64_t v21 = sub_1001EFFB4(v31);
    unint64_t v23 = v22;
    *(void *)(v1 + 136) = sub_10015ADC4(v21, v22, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v16 + 22) = 2080;
    id v24 = [v14 effectiveIdentifier];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    unint64_t v27 = v26;

    *(void *)(v1 + 144) = sub_10015ADC4(v25, v27, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease(v27);

    *(_WORD *)(v16 + 32) = 2112;
    swift_errorRetain(v13);
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(v13);
    *(void *)(v1 + 152) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v16 + 34, v16 + 42);
    uint64_t *v32 = v28;
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  type,  "Failed to send message: %s, for event: %s to: %s\n%@",  (uint8_t *)v16,  0x2Au);
    uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v32, 1LL, v29);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_arrayDestroy(v34, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    swift_errorRelease(v13);
  }

  else
  {

    swift_errorRelease(v13);
    swift_bridgeObjectRelease_n(v15, 2LL);

    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10015A9DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_100156B68(&qword_1003F86D0);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_10015AA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1001603DC(a1, &qword_1003F86B0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_1003A36F0, 32LL, 7LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_1003F81B8, v17);
}

uint64_t sub_10015AB9C()
{
  swift_release(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return v0;
}

uint64_t sub_10015ABE8()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t sub_10015AC08()
{
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  sub_10015AC3C();
  return v1;
}

void *sub_10015AC3C()
{
  v0[2] = sub_1001B089C();
  v0[3] = 0LL;
  uint64_t v1 = sub_100295868();
  uint64_t v2 = (void *)*v1;
  v0[4] = *v1;
  v0[5] = 0LL;
  sub_100156B68(&qword_1003F8030);
  id v3 = v2;
  v0[6] = sub_100173170(10LL);
  v0[7] = &_swiftEmptySetSingleton;
  type metadata accessor for Lock();
  v0[8] = sub_100236794();
  return v0;
}

uint64_t sub_10015ACC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10015ACFC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_10015AD60;
  return v6(a1);
}

uint64_t sub_10015AD60()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015ADAC(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10015ADC4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10015AE94(v13, 0LL, 0LL, 1, a1, a2);
  uint64_t v8 = v13[0];
  if (v6)
  {
    uint64_t v9 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6, v7);
    v13[0] = v9;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100160800((uint64_t)v13, *a3);
      *a3 = v10 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v11 = *a3;
    if (*a3)
    {
      sub_100160800((uint64_t)v13, *a3);
      *a3 = v11 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_1001607E0(v13);
  return v8;
}

uint64_t sub_10015AE94(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10015B04C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10015B0E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10015B2B8(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10015B2B8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10015B0E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_10015B254(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_10015B254(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_100156B68(&qword_1003F97A0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  void v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10015B2B8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F97A0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10015B404(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    size_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_10015BB28(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

Swift::Int sub_10015B5B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003F81F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    id v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

Swift::Int sub_10015B88C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003F8208);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v8 = -1LL << v29;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_10015BB28(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10015B5B0(v11);
  }

  else
  {
    if (v10 > v9)
    {
      Swift::Int result = (uint64_t)sub_10015BCC0();
      goto LABEL_22;
    }

    sub_10015BE70(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  Swift::Int result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

void *sub_10015BCC0()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F81F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    Swift::Int result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_10015BE70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003F81F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_24;
  }

  id v33 = (uint64_t *)(*(void *)(v30 + 56) + 16 * v31);
  uint64_t v34 = *v33;
  id v35 = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = (uint64_t *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_guests], &v156, 0LL, 0LL);
  id v37 = *v36;
  swift_bridgeObjectRetain();
  LODWORD(v137) = sub_100158DD4(v34, v35, v37);
  swift_bridgeObjectRelease();
  uint64_t v38 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], v155, 0LL, 0LL);
  int v39 = *(void *)v38;
  if (!*(void *)(*(void *)v38 + 16LL))
  {
    __break(1u);
LABEL_42:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_34:
    v109 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v109, (uint64_t)qword_1003FF018);
    id v110 = v5;
    swift_bridgeObjectRetain();
    v111 = v110;
    id v112 = (os_log_s *)Logger.logObject.getter(v111);
    v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc(32LL, -1LL);
      id v115 = (char **)swift_slowAlloc(8LL, -1LL);
      id v146 = (void **)swift_slowAlloc(64LL, -1LL);
      aBlock = v146;
      *(_DWORD *)v114 = 138543874;
      id v153 = v111;
      id v116 = v111;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v114 + 4, v114 + 12);
      *id v115 = v111;

      *(_WORD *)(v114 + 12) = 2080;
      id v153 = (void *)sub_10015ADC4(0xD000000000000029LL, 0x800000010033C0B0LL, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v114 + 14, v114 + 22);
      *(_WORD *)(v114 + 22) = 2082;
      swift_bridgeObjectRetain();
      id v153 = (void *)sub_10015ADC4((uint64_t)v138, v24, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v114 + 24, v114 + 32);
      swift_bridgeObjectRelease_n(v24, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v112,  v113,  "[%{public}@] %s message received for unknown participant identifier: %{public}s",  (uint8_t *)v114,  0x20u);
      v117 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v115, 1LL, v117);
      swift_slowDealloc(v115, -1LL, -1LL);
      v118 = v146;
      swift_arrayDestroy(v146, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v24, 2LL);
    }

    return;
  }

  v135 = v36;
  v138 = v25;
  v136 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_10015CAD4(v34, v35);
  if ((v41 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_44;
  }

  uint64_t v42 = (uint64_t *)(*(void *)(v39 + 56) + 16 * v40);
  uint64_t v43 = *v42;
  uint64_t v44 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_identities];
  swift_beginAccess(&v5[OBJC_IVAR___MRDFastSyncGroupSession_identities], v154, 0LL, 0LL);
  uint64_t v46 = *(void *)v45;
  if (!*(void *)(*(void *)v45 + 16LL))
  {
LABEL_44:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_45;
  }

  swift_bridgeObjectRetain();
  uint64_t v47 = sub_10015CAD4(v43, v44);
  if ((v48 & 1) == 0)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }

  uint64_t v49 = *(id *)(*(void *)(v46 + 56) + 8 * v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v50 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
  uint64_t v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v137 = [v50 initWithIdentifier:v51 identity:v49 connected:1 guest:v137 & 1];

  uint64_t v52 = *(void *)v38;
  if (!*(void *)(*(void *)v38 + 16LL)) {
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v53 = sub_10015CAD4((uint64_t)v138, v24);
  if ((v54 & 1) == 0) {
    goto LABEL_31;
  }
  unint64_t v55 = (uint64_t *)(*(void *)(v52 + 56) + 16 * v53);
  uint64_t v57 = *v55;
  int v56 = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v58 = *(void *)v45;
  if (!*(void *)(*(void *)v45 + 16LL)) {
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v59 = sub_10015CAD4(v57, v56);
  if ((v60 & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
LABEL_32:
    swift_bridgeObjectRelease();
LABEL_33:
    if (qword_1003FF010 == -1) {
      goto LABEL_34;
    }
    goto LABEL_42;
  }

  uint64_t v61 = *(id *)(*(void *)(v58 + 56) + 8 * v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v62 = *v135;
  swift_bridgeObjectRetain();
  uint64_t v63 = sub_100158DD4((uint64_t)v138, v24, v62);
  swift_bridgeObjectRelease();
  uint64_t v64 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
  uint64_t v65 = (void **)v61;
  uint64_t v66 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v67 = [v64 initWithIdentifier:v66 identity:v65 connected:1 guest:v63 & 1];

  v138 = v65;
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v68 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v68, (uint64_t)qword_1003FF018);
  uint64_t v70 = v145;
  uint64_t v69 = v146;
  v71 = v144;
  (*((void (**)(void **, uint64_t, void **))v145 + 2))(v144, a4, v146);
  uint64_t v72 = v5;
  uint64_t v73 = v67;
  int64_t v74 = v72;
  unint64_t v75 = v73;
  unint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
  uint64_t v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    unint64_t v78 = swift_slowAlloc(42LL, -1LL);
    int64_t v79 = (char **)swift_slowAlloc(16LL, -1LL);
    v135 = (uint64_t *)swift_slowAlloc(64LL, -1LL);
    aBlock = (void **)v135;
    *(_DWORD *)unint64_t v78 = 138544130;
    id v134 = v76;
    id v153 = v74;
    id v80 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v78 + 4, v78 + 12);
    *int64_t v79 = v74;

    *(_WORD *)(v78 + 12) = 2080;
    id v153 = (void *)sub_10015ADC4(0xD000000000000029LL, 0x800000010033C0B0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v78 + 14, v78 + 22);
    *(_WORD *)(v78 + 22) = 2112;
    id v153 = v75;
    uint64_t v81 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v78 + 24, v78 + 32);
    v79[1] = (char *)v75;

    *(_WORD *)(v78 + 32) = 2082;
    uint64_t v82 = v144;
    char v84 = Participant.handle.getter(v83);
    id v153 = (void *)sub_10015ADC4(v84, v85, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v78 + 34, v78 + 42);
    swift_bridgeObjectRelease();
    (*((void (**)(void **, void **))v70 + 1))(v82, v146);
    unint64_t v76 = v134;
    _os_log_impl((void *)&_mh_execute_header, v134, v77, "[%{public}@] %s %@ from: %{public}s", (uint8_t *)v78, 0x2Au);
    uint64_t v86 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v79, 2LL, v86);
    swift_slowDealloc(v79, -1LL, -1LL);
    uint64_t v87 = v135;
    swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1LL, -1LL);
    swift_slowDealloc(v78, -1LL, -1LL);
  }

  else
  {

    (*((void (**)(void **, void **))v70 + 1))(v71, v69);
  }

  id v119 = v143;
  v120 = v142;
  v121 = v137;
  id v122 = (void *)swift_allocObject(&unk_1003A5C18, 40LL, 7LL);
  v122[2] = v74;
  v122[3] = v75;
  v122[4] = v121;
  id v151 = sub_1001EE614;
  v152 = v122;
  aBlock = _NSConcreteStackBlock;
  uint64_t v148 = 1107296256LL;
  v149 = sub_100157EA8;
  uint64_t v150 = &unk_1003A5C30;
  v123 = _Block_copy(&aBlock);
  id v124 = v74;
  v125 = v75;
  v126 = v121;
  id v127 = v139;
  static DispatchQoS.unspecified.getter(v126);
  id v153 = _swiftEmptyArrayStorage;
  id v128 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v129 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  v130 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v131 = v129;
  id v132 = v136;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v131, v130, v136, v128);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v127, v120, v123);
  _Block_release(v123);

  (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v132);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v127, v141);
  swift_release(v152);
}

  __break(1u);
  return result;
}

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
      return;
    }

    uint64_t v11 = v29;
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_10015C11C(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease(a1);
  }
  uint64_t v45 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain(a1);
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain(v6);
  id v10 = v8;
  unint64_t v12 = sub_10015CAD4(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_10015D810();
      if ((v16 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_10015C4A8(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(result);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v16 >= v7) {
      return swift_release(v2);
    }
    unint64_t v17 = *(void *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v7) {
        return swift_release(v2);
      }
      unint64_t v17 = *(void *)(v3 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v7) {
          return swift_release(v2);
        }
        unint64_t v17 = *(void *)(v3 + 8 * v8);
        if (!v17)
        {
          int64_t v8 = v16 + 3;
          if (v16 + 3 >= v7) {
            return swift_release(v2);
          }
          unint64_t v17 = *(void *)(v3 + 8 * v8);
          if (!v17) {
            break;
          }
        }
      }
    }

unint64_t *sub_10015C63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_49;
        }

        if (v12 >= v40) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v40) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v40) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v40) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v41 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_10016031C(a1);
                  return (unint64_t *)v2;
                }

                unint64_t v13 = *(void *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v40) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v41 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

LABEL_49:
                  __break(1u);
                }

                int64_t v14 = v9 + 5;
              }
            }
          }
        }

      return;
    }

unint64_t sub_10015CAA4(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10015CB38(a1, v4);
}

unint64_t sub_10015CAD4(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10015CBFC(a1, a2, v5);
}

unint64_t sub_10015CB38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100160954(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100160990((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10015CBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_10015CCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10015BCC0();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_10015D64C(v8);
  uint64_t v16 = *v2;
  void *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t *sub_10015CE68( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_47;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v38 = v9 + 6;
                while (v14 != v38)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }

LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }

      uint64_t result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      unint64_t v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }

    while ((v26 & v31) == 0);
    uint64_t v8 = v40 - 1;
    if (__OFSUB__(v40, 1LL))
    {
LABEL_47:
      __break(1u);
      return result;
    }

    if (v40 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

        uint64_t v5 = a5;
      }

LABEL_25:
      unint64_t v34 = a1[v21];
      a1[v21] = v34 & ~v22;
      size_t v35 = (v22 & v34) == 0;
      uint64_t v5 = a5;
    }

    while (v35);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1LL))
    {
LABEL_47:
      __break(1u);
      return;
    }

    if (v38 != 1) {
      continue;
    }
    break;
  }

  Swift::Int v6 = 0LL;
  while (1)
  {
    if ((v4 & 0xC000000000000001LL) != 0)
    {
      uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    }

    else
    {
      uint64_t v1 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain(v1);
    }

    Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
    swift_release(v1);
    swift_unknownObjectRelease(Strong);
    if (!Strong) {
      break;
    }
    uint64_t v8 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      if (v4 < 0) {
        size_t v35 = v4;
      }
      else {
        size_t v35 = v4 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v35);
      if (!v5) {
        goto LABEL_10;
      }
      goto LABEL_3;
    }

    ++v6;
    if (v8 == v5) {
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v1 = v6 + 1;
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_97;
  }
  uint64_t v4 = *v3;
  if (v1 != *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_28:
    uint64_t v19 = v6 + 5;
    while (1)
    {
      uint64_t v4 = v19 - 4;
      uint64_t v20 = *v3;
      if ((*v3 & 0xC000000000000001LL) != 0)
      {
        uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v20);
      }

      else
      {
        if (v4 < 0) {
          goto LABEL_67;
        }
        uint64_t v21 = *(void *)(v20 + 8 * v19);
        swift_retain(v21);
      }

      uint64_t v1 = swift_unknownObjectWeakLoadStrong(v21 + 16);
      swift_release(v21);
      swift_unknownObjectRelease(v1);
      if (!v1) {
        goto LABEL_54;
      }
      if (v4 != v6) {
        break;
      }
LABEL_53:
      if (__OFADD__(v6++, 1LL)) {
        goto LABEL_70;
      }
LABEL_54:
      uint64_t v1 = v19 - 3;
      if (__OFADD__(v4, 1LL)) {
        goto LABEL_69;
      }
      uint64_t v32 = *v3;
      if ((unint64_t)*v3 >> 62)
      {
        if (v32 < 0) {
          unint64_t v34 = *v3;
        }
        else {
          unint64_t v34 = v32 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain();
        unint64_t v33 = _CocoaArrayWrapper.endIndex.getter(v34);
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      ++v19;
      if (v1 == v33) {
        goto LABEL_12;
      }
    }

    uint64_t v1 = *v3;
    if ((*v3 & 0xC000000000000001LL) != 0)
    {
      Swift::Int v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, *v3);
      uint64_t v1 = *v3;
      if ((*v3 & 0xC000000000000001LL) == 0)
      {
LABEL_39:
        if (v4 < 0) {
          goto LABEL_73;
        }
        uint64_t v23 = *(void *)(v1 + 8 * v19);
        swift_retain(v23);
        goto LABEL_42;
      }
    }

    else
    {
      if (v6 < 0) {
        goto LABEL_71;
      }
      Swift::Int v22 = *(void *)(v1 + 8 * v6 + 32);
      swift_retain(v22);
      if ((v1 & 0xC000000000000001LL) == 0) {
        goto LABEL_39;
      }
    }

    uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v1);
    uint64_t v1 = *v3;
LABEL_42:
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v1);
    void *v3 = v1;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v1 < 0 || (v1 & 0x4000000000000000LL) != 0)
    {
      uint64_t v1 = sub_1001A3618(v1);
      void *v3 = v1;
    }

    unint64_t v25 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 8 * v6 + 0x20);
    *(void *)((v1 & 0xFFFFFFFFFFFFFF8LL) + 8 * v6 + 0x20) = v23;
    uint64_t v26 = swift_release(v25);
    specialized Array._endMutation()(v26);
    uint64_t v1 = *v3;
    uint64_t v27 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
    void *v3 = v1;
    if (!v27 || v1 < 0 || (v1 & 0x4000000000000000LL) != 0)
    {
      uint64_t v1 = sub_1001A3618(v1);
      void *v3 = v1;
    }

    if (v4 < 0) {
      goto LABEL_75;
    }
    uint64_t v28 = v1 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v29 = *(void *)(v28 + 8 * v19);
    *(void *)(v28 + 8 * v19) = v22;
    BOOL v30 = swift_release(v29);
    specialized Array._endMutation()(v30);
    goto LABEL_53;
  }

  while (1)
  {
LABEL_12:
    unint64_t v10 = *v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v10 < 0) {
        uint64_t v36 = *v3;
      }
      else {
        uint64_t v36 = v10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease();
      if (v11 < v6)
      {
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
    }

    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v11 < v6) {
        goto LABEL_86;
      }
    }

    sub_1001FB3E8(v6, v11);
    swift_endAccess(v41);
    Swift::Int v6 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v4 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain();
      if (!v4) {
        return swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }

    sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSourceSession);
  }

  uint64_t v29 = 0LL;
LABEL_20:
  swift_bridgeObjectRelease();
  return v29;
}

      if (++v5 == v23) {
        return 0LL;
      }
    }

    int64_t v14 = v7 + 7;
    int64_t v15 = 1LL;
    while (1)
    {
      uint64_t v16 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        break;
      }
      unint64_t v17 = *(v14 - 1);
      int64_t v18 = *v14;
      if (v17 == a2 && v18 == a3) {
        goto LABEL_20;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a2, a3, 0LL);
      if ((result & 1) != 0) {
        goto LABEL_20;
      }
      v14 += 2;
      ++v15;
      if (v16 == v8) {
        goto LABEL_3;
      }
    }

    __break(1u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

Swift::Int sub_10015D15C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100156B68(&qword_1003F81F8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

Swift::Int sub_10015D3F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100156B68(&qword_1003F8208);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

unint64_t sub_10015D64C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          unint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *unint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

id sub_10015D810()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F8240);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_28:
  __break(1u);
  return result;
}

    uint64_t v41 = (v51 - 1) & v51;
    uint64_t v45 = __clz(__rbit64(v51)) + (v43 << 6);
LABEL_11:
    int64_t v46 = *(void *)(v37 + 56) + 16 * v45;
    uint64_t v48 = *(void (**)(uint64_t))v46;
    unint64_t v47 = *(void *)(v46 + 8);
    uint64_t v49 = swift_retain(v47);
    v48(v49);
    id result = swift_release(v47);
  }

  uint64_t v52 = v50 + 4;
  if (v52 >= v42)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return swift_release(v37);
  }

  uint64_t v51 = *(void *)(v38 + 8 * v52);
  if (v51)
  {
    uint64_t v43 = v52;
    goto LABEL_28;
  }

  while (1)
  {
    uint64_t v43 = v52 + 1;
    if (__OFADD__(v52, 1LL)) {
      break;
    }
    if (v43 >= v42) {
      goto LABEL_29;
    }
    uint64_t v51 = *(void *)(v38 + 8 * v43);
    ++v52;
    if (v51) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v11 = (v22 - 1) & v22;
    uint64_t v17 = __clz(__rbit64(v22)) + (v10 << 6);
    goto LABEL_29;
  }

  __break(1u);
}

    v145 = (v72 - 1) & v72;
    id v146 = v71;
  }

  uint64_t v148 = a1;
  swift_release(v103);
  swift_bridgeObjectRelease();
  v105 = v84;
  swift_errorRetain(v20);
  v106 = v105;
  id v107 = v147;
  swift_bridgeObjectRetain();
  v108 = swift_errorRetain(v20);
  v109 = (os_log_s *)Logger.logObject.getter(v108);
  id v110 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v109, v110))
  {
    v111 = swift_slowAlloc(42LL, -1LL);
    v144 = v109;
    id v112 = v111;
    v113 = swift_slowAlloc(16LL, -1LL);
    id v146 = v6;
    v114 = (void *)v113;
    v145 = swift_slowAlloc(64LL, -1LL);
    v149 = v145;
    *(_DWORD *)id v112 = v131;
    id v115 = v20;
    id v151 = (uint64_t)v106;
    id v116 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v112 + 4, v112 + 12);
    void *v114 = v133;

    *(_WORD *)(v112 + 12) = 2082;
    v117 = *v132;
    v118 = v132[1];
    swift_bridgeObjectRetain();
    id v151 = sub_10015ADC4(v117, v118, &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v112 + 14, v112 + 22);

    unint64_t v21 = v134;
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 22) = 2080;
    swift_bridgeObjectRetain();
    id v151 = sub_10015ADC4(v140, v107, &v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v112 + 24, v112 + 32);
    swift_bridgeObjectRelease_n(v107, 3LL);
    *(_WORD *)(v112 + 32) = 2112;
    swift_errorRetain(v20);
    id v119 = _swift_stdlib_bridgeErrorToNSError(v20);
    id v151 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v112 + 34, v112 + 42);
    v114[1] = v119;
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    v120 = v144;
    _os_log_impl( (void *)&_mh_execute_header,  v144,  v110,  "[%@]<%{public}s> Error enqueuing message for id: %s - %@.",  (uint8_t *)v112,  0x2Au);
    v121 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v114, 2LL, v121);
    id v122 = v114;
    uint64_t v6 = v146;
    swift_slowDealloc(v122, -1LL, -1LL);
    v123 = v145;
    swift_arrayDestroy(v145, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1LL, -1LL);
    swift_slowDealloc(v112, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v107, 2LL);

    swift_errorRelease(v20);
    swift_errorRelease(v20);

    id v115 = v20;
  }

  id v124 = v129;
  v125 = sub_1001E8078();
  v126 = swift_allocError(&type metadata for FastSyncSessionError, v125, 0LL, 0LL);
  *id v127 = 3LL;
  v124();
  swift_errorRelease(v126);
  swift_errorRelease(v115);
  sub_1001608B8((uint64_t)v148, v6);
  swift_release(v21);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t v19 = 2;
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v19,  1046LL,  0);
  __break(1u);
  return result;
}

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_13;
  }

  uint64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = (uint64_t *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_guests];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_guests], &v121, 0LL, 0LL);
  unint64_t v33 = *v32;
  swift_bridgeObjectRetain();
  unint64_t v34 = sub_100158DD4(v30, v31, v33);
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    uint64_t v60 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap];
    swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap], &v119, 0LL, 0LL);
    uint64_t v61 = *(void *)v60;
    if (!*(void *)(v61 + 16))
    {
      __break(1u);
      goto LABEL_30;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v62 = sub_10015CAD4(v30, v31);
    if ((v63 & 1) != 0)
    {
      uint64_t v6 = (uint64_t)v14;
      uint64_t v64 = (uint64_t *)(*(void *)(v61 + 56) + 16 * v62);
      uint64_t v65 = *v64;
      uint64_t v66 = v64[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v67 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_identities];
      swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_identities], v118, 0LL, 0LL);
      uint64_t v68 = *(void *)v67;
      if (*(void *)(v68 + 16))
      {
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_10015CAD4(v65, v66);
        if ((v70 & 1) != 0)
        {
          v71 = *(id *)(*(void *)(v68 + 56) + 8 * v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v72 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
          uint64_t v73 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v107 = [v72 initWithIdentifier:v73 identity:v71 connected:1 guest:0];

          if (qword_1003FF010 == -1)
          {
LABEL_22:
            int64_t v74 = type metadata accessor for Logger(0LL);
            sub_10015ADAC(v74, (uint64_t)qword_1003FF018);
            unint64_t v75 = v114;
            ((void (*)(uint64_t, uint64_t, uint64_t))v114[2])(v6, a1, v16);
            unint64_t v76 = v2;
            uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
            unint64_t v78 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v77, v78))
            {
              int64_t v79 = swift_slowAlloc(32LL, -1LL);
              id v80 = swift_slowAlloc(8LL, -1LL);
              v103 = v6;
              uint64_t v81 = (void *)v80;
              id v104 = v80;
              v106 = swift_slowAlloc(64LL, -1LL);
              id v115 = v76;
              aBlock[0] = v106;
              *(_DWORD *)int64_t v79 = 138543874;
              v105 = v77;
              uint64_t v82 = v76;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, aBlock, v79 + 4, v79 + 12);
              *uint64_t v81 = v76;

              *(_WORD *)(v79 + 12) = 2080;
              id v115 = (void *)sub_10015ADC4(0xD00000000000002CLL, 0x800000010033C170LL, aBlock);
              unint64_t v83 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, aBlock, v79 + 14, v79 + 22);
              *(_WORD *)(v79 + 22) = 2082;
              char v84 = v103;
              id v85 = Participant.handle.getter(v83);
              id v115 = (void *)sub_10015ADC4(v85, v86, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, aBlock, v79 + 24, v79 + 32);
              swift_bridgeObjectRelease();
              v75[1]((char *)v84, (os_log_t)v16);
              uint64_t v87 = v105;
              _os_log_impl( (void *)&_mh_execute_header,  v105,  v78,  "[%{public}@] %s from: %{public}s",  (uint8_t *)v79,  0x20u);
              uint64_t v88 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
              int64_t v89 = v104;
              swift_arrayDestroy(v104, 1LL, v88);
              swift_slowDealloc(v89, -1LL, -1LL);
              id v90 = v106;
              swift_arrayDestroy(v106, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v90, -1LL, -1LL);
              swift_slowDealloc(v79, -1LL, -1LL);
            }

            else
            {

              v75[1]((char *)v6, (os_log_t)v16);
            }

            unint64_t v91 = v113;
            uint64_t v92 = v112;
            v93 = v111;
            uint64_t v94 = v107;
            char v95 = swift_allocObject(&unk_1003A5E48, 32LL, 7LL);
            *(void *)(v95 + 16) = v76;
            *(void *)(v95 + 24) = v94;
            aBlock[4] = (uint64_t)sub_1001EEFE8;
            v117 = v95;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256LL;
            aBlock[2] = (uint64_t)sub_100157EA8;
            aBlock[3] = (uint64_t)&unk_1003A5E60;
            v96 = _Block_copy(aBlock);
            v97 = v76;
            uint64_t v98 = v94;
            v99 = v108;
            static DispatchQoS.unspecified.getter(v98);
            id v115 = _swiftEmptyArrayStorage;
            v100 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v101 = sub_100156B68((uint64_t *)&unk_1003F9A70);
            id v102 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
            dispatch thunk of SetAlgebra.init<A>(_:)(&v115, v101, v102, v91, v100);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v99, v93, v96);
            _Block_release(v96);

            (*((void (**)(char *, uint64_t))v92 + 1))(v93, v91);
            (*(void (**)(char *, uint64_t))(v109 + 8))(v99, v110);
            swift_release(v117);
            return;
          }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    uint64_t v8 = (v13 - 1) & v13;
    uint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_29:
    unint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain(v18);
    uint64_t v19 = sub_10015CAD4(v16, v17);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      swift_release(v18);
      return 0LL;
    }

    int64_t v22 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
    unint64_t v23 = *(double *)(v22 + 16);
    int64_t v24 = *(double *)(v22 + 24);
    unint64_t v25 = *(unsigned __int8 *)(v22 + 32);
    BOOL v26 = *(double *)(v18 + 16);
    uint64_t v27 = *(double *)(v18 + 24);
    uint64_t v28 = *(unsigned __int8 *)(v18 + 32);
    id result = swift_release(v18);
    if (v25)
    {
      if (v25 == 1)
      {
        if (v28 != 1 || v23 != v26) {
          return 0LL;
        }
      }

      else
      {
        if (v28 != 2) {
          return 0LL;
        }
        if (*(void *)&v23 != *(void *)&v26 || v24 != v27) {
          return 0LL;
        }
      }
    }

    else
    {
      if (v28) {
        int64_t v9 = 0;
      }
      else {
        int64_t v9 = v23 == v26;
      }
      if (!v9) {
        return 0LL;
      }
    }
  }

  unint64_t v14 = v12 + 4;
  if (v14 >= v31) {
    return 1LL;
  }
  int64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    uint64_t v4 = v14;
    goto LABEL_28;
  }

  while (1)
  {
    uint64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v31) {
      return 1LL;
    }
    int64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int v56 = v106;
    uint64_t v57 = v101;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56))(v51, v50, 1LL, v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v51, 1LL, v57);
    uint64_t v18 = v95;
    if (v58 == 1)
    {
      uint64_t v59 = &qword_1003F94C0;
      uint64_t v60 = v51;
LABEL_32:
      sub_1001603DC(v60, v59);
      int64_t v13 = v94;
      goto LABEL_33;
    }

    uint64_t v61 = v98;
    sub_1001A8360(v51 + *(int *)(v57 + 28), v98, &qword_1003F9450);
    sub_1001A813C(v51, type metadata accessor for HostedRoutingSession);
    uint64_t v62 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48LL))(v61, 1LL, v62) == 1)
    {
      uint64_t v59 = &qword_1003F9450;
      uint64_t v60 = v61;
      goto LABEL_32;
    }

    uint64_t v2 = v20;
    uint64_t v65 = v27;
    uint64_t v66 = v61;
    uint64_t v67 = *(void *)(v61 + 32);
    uint64_t v68 = *(unsigned int *)(v66 + 40);
    uint64_t v69 = *(_BYTE *)(v66 + 44);
    sub_1001A8278(v67, v68, v69);
    sub_1001A813C(v66, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
    uint64_t v70 = *(void *)(v67 + 16);
    if (v70)
    {
      v71 = *(void *)(v67 + 16 * v70 + 16);
      swift_bridgeObjectRetain();
      sub_1001A0918(v67, v68, v69);
      sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
      uint64_t v72 = sub_1002A27A4(v71);
      int64_t v74 = v73;
      swift_bridgeObjectRelease();
      unint64_t v75 = v94;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v18, v65);
      unint64_t v33 = v107;
      *id v107 = v72;
      v33[1] = v74;
      (*(void (**)(uint64_t *, void, uint64_t))(v75 + 104))(v33, v96, v65);
      unint64_t v34 = v2[13];
      goto LABEL_4;
    }

    __break(1u);
    goto LABEL_44;
  }

  if (v41 == enum case for RoutingInteraction.Action.setActiveSession(_:))
  {
    (*(void (**)(uint64_t (**)(char *, uint64_t), uint64_t))(v39 + 96))(v38, v40);
    uint64_t v42 = *v38;
    uint64_t v43 = v38[1];
    goto LABEL_15;
  }

  if (v41 == enum case for RoutingInteraction.Action.handoff(_:))
  {
    (*(void (**)(uint64_t (**)(char *, uint64_t), uint64_t))(v39 + 96))(v38, v40);
    unint64_t v76 = v13;
    uint64_t v77 = *v38;
    unint64_t v78 = *((void *)*v38 + 6);
    sub_10016083C(0LL, &qword_1003FABA8, &OBJC_CLASS___NSBundle_ptr);
    int64_t v79 = v20;
    id v80 = v27;
    uint64_t v81 = swift_retain(v78);
    uint64_t v82 = RoutingInteraction.Action.HandoffContext.sourceBundleIdentifier.getter(v81);
    unint64_t v83 = sub_1002A27A4(v82);
    id v85 = v84;
    swift_release(v78);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v18, v80);
    uint64_t v86 = v107;
    *id v107 = v83;
    v86[1] = v85;
    (*(void (**)(uint64_t *, void, uint64_t))(v76 + 104))(v86, v96, v80);
    ((void (*)(uint64_t *, void, uint64_t))v79[13])(v86, v97, v19);
    return swift_release(v77);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v27);
    uint64_t v87 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 104);
    uint64_t v88 = v39;
    int64_t v89 = v107;
    v87(v107, v37, v27);
    ((void (*)(uint64_t *, void, uint64_t))v20[13])(v89, v97, v19);
    return (*(uint64_t (**)(void *, uint64_t))(v88 + 8))(v38, v40);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

Swift::Int sub_10015D9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F8240);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

uint64_t sub_10015DCCC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10015DD04(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10015DCE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10015DEA8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_10015DD04(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F8248);
    unint64_t v11 = (void *)swift_allocObject(v10, 24 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }

  else
  {
    unint64_t v11 = &_swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8) {
      memmove(v11 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100156B68(&qword_1003F8250);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10015DEA8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F8620);
    unint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    unint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

Swift::Int sub_10015E010(uint64_t a1, uint64_t *a2)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return sub_10015E288(a1, a2);
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v31 = &_swiftEmptySetSingleton;
  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.makeIterator()(a1);
  uint64_t v5 = swift_beginAccess(a2, v30, 0LL, 0LL);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
    do
    {
      uint64_t v28 = v7;
      swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      id v10 = v29;
      uint64_t v11 = *a2;
      swift_bridgeObjectRetain(*a2);
      id v12 = [v10 effectiveIdentifier];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      LOBYTE(v13) = sub_100158DD4(v13, v15, v11);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v11);
      id v16 = v29;
      if ((v13 & 1) != 0)
      {
        unint64_t v17 = v31;
        unint64_t v18 = v31[2];
        if (v31[3] <= v18)
        {
          sub_10015B88C(v18 + 1);
          unint64_t v17 = v31;
        }

        Swift::Int result = NSObject._rawHashValue(seed:)(v17[5]);
        uint64_t v19 = v17 + 7;
        uint64_t v20 = -1LL << *((_BYTE *)v17 + 32);
        unint64_t v21 = result & ~v20;
        unint64_t v22 = v21 >> 6;
        if (((-1LL << v21) & ~v17[(v21 >> 6) + 7]) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~v17[(v21 >> 6) + 7])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v24 = 0;
          unint64_t v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v26 = v22 == v25;
            if (v22 == v25) {
              unint64_t v22 = 0LL;
            }
            v24 |= v26;
            uint64_t v27 = v19[v22];
          }

          while (v27 == -1);
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }

        *(void *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
        *(void *)(v17[6] + 8 * v23) = v16;
        ++v17[2];
      }

      else
      {
      }

      uint64_t v7 = __CocoaSet.Iterator.next()(result);
    }

    while (v7);
    uint64_t v3 = v31;
  }

  swift_release(v4);
  return (Swift::Int)v3;
}

Swift::Int sub_10015E288(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    Swift::Int v10 = sub_10015E3F8((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v8, v4, a2);
    uint64_t v11 = swift_release(v4);
    if (v2) {
      swift_willThrow(v11);
    }
  }

  else
  {
    id v12 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v12, v9);
    Swift::Int v10 = sub_10015E3F8((unint64_t *)v12, v8, v4, a2);
    swift_release(v4);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  return v10;
}

Swift::Int sub_10015E3F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v29 = a3;
  uint64_t v26 = a3 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 56);
  Swift::Int result = swift_beginAccess(a4, v28, 0LL, 0LL);
  uint64_t v25 = 0LL;
  int64_t v9 = 0LL;
  int64_t v27 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v18 >= v27) {
      goto LABEL_24;
    }
    unint64_t v19 = *(void *)(v26 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v27) {
        goto LABEL_24;
      }
      unint64_t v19 = *(void *)(v26 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v27) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v26 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

int64_t sub_10015E644(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (Swift::Int result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

void sub_10015E728(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v21 = v11;
        uint64_t v12 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        unint64_t v4 = v22;
        swift_unknownObjectRelease(v11);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v14 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v13 & ~v14;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            uint64_t v17 = ~v14;
            do
            {
              unint64_t v7 = (v7 + 1) & v17;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v18 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v19 = static NSObject.== infix(_:_:)(v18);
            }

            while ((v19 & 1) == 0);
          }

LABEL_20:
          id v20 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

uint64_t sub_10015E990(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_10015EA18(void *a1, id a2, char a3)
{
  id v6 = [a2 joinToken];
  id v7 = [v6 protobuf];

  if (v7 && (id v8 = [v7 data], v7, v8))
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v45 = v10;
    uint64_t v46 = v9;

    id v47 = a1;
    id v11 = [a1 protobuf];
    id v12 = [v11 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)(&v50);
    swift_unknownObjectRelease(v12);
    uint64_t v13 = sub_10016083C(0LL, &qword_1003F8258, &OBJC_CLASS____MRGroupSessionJoinRequestProtobuf_ptr);
    swift_dynamicCast(&v49, &v50, (char *)&type metadata for Any + 8, v13, 7LL);
    uint64_t v14 = v49;

    [v14 setOobKeys:0];
    uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003F9AA0);
    uint64_t inited = swift_initStackObject(v15, v48);
    *(_OWORD *)(inited + 16) = xmmword_10034BD10;
    uint64_t v17 = sub_1001F0810(0);
    uint64_t v19 = v18;
    uint64_t v50 = v17;
    uint64_t v51 = v18;
    swift_bridgeObjectRetain(v18);
    AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
    unint64_t v20 = sub_1001F0978(a3 & 1);
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v20;
    *(void *)(inited + 80) = v21;
    uint64_t v22 = sub_1001F0810(2u);
    uint64_t v24 = v23;
    uint64_t v50 = v22;
    uint64_t v51 = v23;
    swift_bridgeObjectRetain(v23);
    AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
    id v25 = [a2 identifier];
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v28 = v27;

    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for String;
    *(void *)(inited + 144) = v26;
    *(void *)(inited + 152) = v28;
    uint64_t v29 = sub_1001F0810(1u);
    uint64_t v31 = v30;
    uint64_t v50 = v29;
    uint64_t v51 = v30;
    swift_bridgeObjectRetain(v30);
    AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
    id v32 = [v47 identifier];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v35 = v34;

    *(void *)(inited + 240) = &type metadata for String;
    *(void *)(inited + 216) = v33;
    *(void *)(inited + 224) = v35;
    uint64_t v36 = sub_1001F0810(3u);
    uint64_t v38 = v37;
    uint64_t v50 = v36;
    uint64_t v51 = v37;
    swift_bridgeObjectRetain(v37);
    AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
    id v39 = [v14 data];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v43 = v42;
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v38);

      *(void *)(inited + 312) = &type metadata for Data;
      *(void *)(inited + 28_Block_object_dispose(va, 8) = v41;
      *(void *)(inited + 296) = v43;
      uint64_t v50 = sub_1001F0810(4u);
      uint64_t v51 = v44;
      AnyHashable.init<A>(_:)(&v50, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 384) = &type metadata for Data;
      *(void *)(inited + 360) = v46;
      *(void *)(inited + 36_Block_object_dispose(va, 8) = v45;
      sub_100160874(v46, v45);
      sub_100159DBC(inited);

      sub_1001608B8(v46, v45);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10015EDA0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  id v4 = [*(id *)(v1 + 24) identifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  swift_beginAccess(v3 + 56, v9, 33LL, 0LL);
  LOBYTE(v4) = sub_10015B404(v10, v5, v7);
  swift_endAccess(v9);
  uint64_t result = swift_bridgeObjectRelease(v10[1]);
  *a1 = v4 & 1;
  return result;
}

uint64_t sub_10015EE4C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10015EE5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10015EE80()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10015EEA4()
{
  swift_release(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10015EEE8(uint64_t a1)
{
  return sub_100158580( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(unint64_t **)(v1 + 56));
}

uint64_t sub_10015EEF8()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10015EF28()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10015EF54()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = v0[4];
  swift_beginAccess(v1 + 16, v41, 0LL, 0LL);
  if (*(void *)(*(void *)(v1 + 16) + 16LL))
  {
    if (qword_1003FE520 != -1) {
      swift_once(&qword_1003FE520, sub_1001579A4);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v4, (uint64_t)qword_1003FE528);
    id v5 = v2;
    swift_retain_n(v1, 2LL);
    id v6 = v5;
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t type = v8;
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = swift_slowAlloc(96LL, -1LL);
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v9 = 136315650;
      uint64_t v10 = _typeName(_:qualified:)(v3, 0LL);
      unint64_t v12 = v11;
      uint64_t v38 = sub_10015ADC4(v10, v11, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v9 + 12) = 2080;
      id v13 = [v6 identifier];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      unint64_t v16 = v15;

      uint64_t v38 = sub_10015ADC4(v14, v16, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v16);

      *(_WORD *)(v9 + 22) = 2080;
      swift_beginAccess(v1 + 16, &v38, 0LL, 0LL);
      uint64_t v17 = *(void *)(v1 + 16);
      uint64_t v18 = swift_bridgeObjectRetain(v17);
      uint64_t v19 = Set.description.getter(v18, &type metadata for String, &protocol witness table for String);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease(v17);
      uint64_t v37 = sub_10015ADC4(v19, v21, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease(v21);
      swift_release_n(v1, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v7, type, "[%s] %s - Messaged devices: %s", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy(v36, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }
  }

  else
  {
    if (qword_1003FE520 != -1) {
      swift_once(&qword_1003FE520, sub_1001579A4);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v22, (uint64_t)qword_1003FE528);
    id v23 = v2;
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v27 = swift_slowAlloc(64LL, -1LL);
      uint64_t v38 = v27;
      *(_DWORD *)uint64_t v26 = 136315394;
      uint64_t v28 = _typeName(_:qualified:)(v3, 0LL);
      unint64_t v30 = v29;
      uint64_t v40 = sub_10015ADC4(v28, v29, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2080;
      id v31 = [v23 identifier];
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      unint64_t v34 = v33;

      uint64_t v40 = sub_10015ADC4(v32, v34, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease(v34);

      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[%s] %s - No devices found to message within timeout",  (uint8_t *)v26,  0x16u);
      swift_arrayDestroy(v27, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_10015F3E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  id v4 = [*(id *)(v1 + 24) identifier];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  swift_beginAccess(v3 + 56, v10, 33LL, 0LL);
  *a1 = sub_10015CCDC(v5, v7);
  a1[1] = v8;
  swift_endAccess(v10);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10015F488@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = *(void *)(*(void *)(v1 + 16) + 48LL);
  swift_retain(v4);
  id v5 = [v3 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  v11[0] = v6;
  v11[1] = v8;
  (*(void (**)(void **__return_ptr, void *))(*(void *)v4 + 208LL))(&v12, v11);
  swift_release(v4);
  uint64_t result = swift_bridgeObjectRelease(v8);
  uint64_t v10 = v12;
  if (!v12) {
    uint64_t v10 = &_swiftEmptySetSingleton;
  }
  *a1 = v10;
  return result;
}

uint64_t sub_10015F540()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10015F574(uint64_t a1)
{
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[2] + 16LL;
  swift_beginAccess(v5, v42, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (!Strong) {
    return;
  }
  uint64_t v7 = Strong;
  uint64_t v8 = swift_bridgeObjectRetain(a1);
  Swift::Int v9 = sub_10015E010(v8, (uint64_t *)(v3 + 16));
  uint64_t v10 = (void *)sub_100158F08(v9);
  uint64_t v37 = v10;
  uint64_t v38 = v3 + 16;
  if ((v9 & 0xC000000000000001LL) != 0)
  {
    uint64_t v11 = __CocoaSet.makeIterator()(v9);
    uint64_t v12 = sub_10016083C(0LL, (unint64_t *)&qword_1003F81E8, &OBJC_CLASS___RPCompanionLinkDevice_ptr);
    uint64_t v13 = sub_10016039C( &qword_1003F81F0,  (unint64_t *)&qword_1003F81E8,  &OBJC_CLASS___RPCompanionLinkDevice_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v43, v11, v12, v13);
    Swift::Int v9 = v43[0];
    Swift::Int v39 = v43[1];
    uint64_t v14 = v43[2];
    uint64_t v15 = v43[3];
    unint64_t v16 = v43[4];
  }

  else
  {
    uint64_t v15 = 0LL;
    uint64_t v17 = -1LL << *(_BYTE *)(v9 + 32);
    Swift::Int v39 = v9 + 56;
    uint64_t v14 = ~v17;
    uint64_t v18 = -v17;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    else {
      uint64_t v19 = -1LL;
    }
    unint64_t v16 = v19 & *(void *)(v9 + 56);
  }

  int64_t v20 = (unint64_t)(v14 + 64) >> 6;
  if (v9 < 0) {
    goto LABEL_11;
  }
  while (1)
  {
    if (v16)
    {
      uint64_t v21 = (v16 - 1) & v16;
      unint64_t v22 = __clz(__rbit64(v16)) | (v15 << 6);
      uint64_t v23 = v15;
      goto LABEL_28;
    }

    int64_t v28 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      return;
    }

    if (v28 >= v20) {
      goto LABEL_31;
    }
    unint64_t v29 = *(void *)(v39 + 8 * v28);
    uint64_t v23 = v15 + 1;
    if (!v29)
    {
      uint64_t v23 = v15 + 2;
      if (v15 + 2 >= v20) {
        goto LABEL_31;
      }
      unint64_t v29 = *(void *)(v39 + 8 * v23);
      if (!v29)
      {
        uint64_t v23 = v15 + 3;
        if (v15 + 3 >= v20) {
          goto LABEL_31;
        }
        unint64_t v29 = *(void *)(v39 + 8 * v23);
        if (!v29)
        {
          uint64_t v23 = v15 + 4;
          if (v15 + 4 >= v20) {
            goto LABEL_31;
          }
          unint64_t v29 = *(void *)(v39 + 8 * v23);
          if (!v29) {
            break;
          }
        }
      }
    }

BOOL sub_10015F900()
{
  return *(void *)(*(void *)(v0 + 16) + 16LL) == 0LL;
}

uint64_t sub_10015F93C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10015F968()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  if (qword_1003FE520 != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v4, (uint64_t)qword_1003FE528);
  id v5 = v2;
  swift_retain_n(v1, 2LL);
  id v6 = v5;
  oslog = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v9 = swift_slowAlloc(96LL, -1LL);
    uint64_t v26 = v9;
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v10 = _typeName(_:qualified:)(v3, 0LL);
    unint64_t v12 = v11;
    uint64_t v24 = sub_10015ADC4(v10, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    id v13 = [v6 identifier];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    uint64_t v24 = sub_10015ADC4(v14, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v16);

    *(_WORD *)(v8 + 22) = 2080;
    swift_beginAccess(v1 + 16, &v24, 0LL, 0LL);
    uint64_t v17 = *(void *)(v1 + 16);
    uint64_t v18 = swift_bridgeObjectRetain(v17);
    uint64_t v19 = Set.description.getter(v18, &type metadata for String, &protocol witness table for String);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease(v17);
    uint64_t v23 = sub_10015ADC4(v19, v21, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v21);
    swift_release_n(v1, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  oslog,  v7,  "[%s] %s - Not all messaged devices found to notify of cancelled request. Missing devices: %s",  (uint8_t *)v8,  0x20u);
    swift_arrayDestroy(v9, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

uint64_t type metadata accessor for GroupSessionProxyAuthorizationSender()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted36GroupSessionProxyAuthorizationSender);
}

uint64_t sub_10015FC5C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10015FC98()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(_BYTE *)(v0 + 40);
  uint64_t v4 = swift_task_alloc(dword_1003F81AC);
  __int128 v5 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + _Block_object_dispose(va, 8) = sub_10015FD10;
  *(_OWORD *)(v4 + 16_Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(v4 + 240) = v3;
  *(void *)(v4 + 160) = v2;
  return swift_task_switch(sub_10015A290, 0LL, 0LL);
}

uint64_t sub_10015FD10()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10015FD58()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015FD7C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  __int128 v5 = (void *)swift_task_alloc(dword_1003FA034);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *__int128 v5 = v2;
  v5[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1003FA030 + dword_1003FA030))(a1, v4);
}

uint64_t sub_10015FDEC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10015FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc(dword_1003F81CC);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10015FD10;
  v9[4] = a3;
  v9[5] = v8;
  v9[2] = a1;
  v9[3] = a2;
  return swift_task_switch(sub_100157AAC, 0LL, 0LL);
}

void sub_10015FE74(uint64_t a1)
{
}

uint64_t sub_10015FE80()
{
  uint64_t v1 = sub_100156B68(&qword_1003F81E0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_10015FF00(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_100156B68(&qword_1003F81E0) - 8);
  unint64_t v4 = (*(void *)(v3 + 64)
  uint64_t v5 = *(void **)(v1 + v4);
  uint64_t v6 = *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFF8LL));
  os_log_type_t v7 = &qword_1003FE000;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1003FE520 != -1) {
      swift_once(&qword_1003FE520, sub_1001579A4);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v8, (uint64_t)qword_1003FE528);
    swift_errorRetain(a1);
    uint64_t v9 = swift_errorRetain(a1);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      id v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v14;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v15 = _typeName(_:qualified:)(v6, 0LL);
      uint64_t v33 = v6;
      unint64_t v17 = v16;
      uint64_t v34 = sub_10015ADC4(v15, v16, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v17);
      *(_WORD *)(v12 + 12) = 2112;
      swift_errorRetain(a1);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v34 = v18;
      os_log_type_t v7 = &qword_1003FE000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v12 + 14, v12 + 22);
      uint64_t *v13 = v18;
      uint64_t v6 = v33;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%s] Failed to activate rapport link: %@",  (uint8_t *)v12,  0x16u);
      uint64_t v19 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v13, 1LL, v19);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    uint64_t v35 = a1;
    uint64_t v20 = sub_100156B68(&qword_1003F81E0);
    CheckedContinuation.resume(throwing:)(&v35, v20);
  }

  if (v7[164] != -1) {
    swift_once(&qword_1003FE520, sub_1001579A4);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = sub_10015ADAC(v21, (uint64_t)qword_1003FE528);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v27 = _typeName(_:qualified:)(v6, 0LL);
    unint64_t v29 = v28;
    uint64_t v34 = sub_10015ADC4(v27, v28, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%s] Activated rapport link", v25, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  uint64_t v35 = (uint64_t)v5;
  id v30 = v5;
  uint64_t v31 = sub_100156B68(&qword_1003F81E0);
  return CheckedContinuation.resume(returning:)(&v35, v31);
}

uint64_t sub_100160304(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100160314(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10016031C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100160324(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100160334()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100160358(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_10016039C(unint64_t *a1, unint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10016083C(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001603DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100156B68(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100160418()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100160454(void *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v5 = (*(uint64_t (**)(void))(v1 + 16))(*a1);
  uint64_t result = v2(v5);
  if ((result & 1) != 0)
  {
    swift_beginAccess(v4 + 16, v7, 0LL, 0LL);
    uint64_t result = *(void *)(v4 + 16);
    if (result)
    {
      uint64_t result = (uint64_t)[(id)result disarm];
      if ((_DWORD)result) {
        return (*(uint64_t (**)(void))(*(void *)v3 + 216LL))();
      }
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1001604E8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100160358(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100160528()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10016055C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 32);
  (*(void (**)(void))(**(void **)(v0 + 16) + 216LL))();
  AnyCancellable.cancel()();
  return v1();
}

uint64_t sub_1001605A4()
{
  uint64_t v1 = (BOOL *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[4];
  swift_beginAccess(v2 + 56, v11, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain(v4);
  id v5 = [v3 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  LOBYTE(v5) = sub_100158DD4(v6, v8, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  uint64_t result = swift_beginAccess(v1, &v10, 1LL, 0LL);
  *uint64_t v1 = (v5 & 1) == 0;
  return result;
}

uint64_t sub_100160674()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = (void *)v0[4];
  uint64_t v4 = *(void *)(v2 + 48);
  swift_retain(v4);
  id v5 = [v1 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  uint64_t v20 = v6;
  uint64_t v21 = v8;
  (*(void (**)(void **__return_ptr, uint64_t *))(*(void *)v4 + 208LL))(&v22, &v20);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = &_swiftEmptySetSingleton;
  if (v22) {
    uint64_t v9 = v22;
  }
  uint64_t v23 = v9;
  id v10 = [v3 effectiveIdentifier];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  sub_10015B404(&v20, v11, v13);
  swift_bridgeObjectRelease(v21);
  uint64_t v14 = *(void *)(v2 + 48);
  swift_retain(v14);
  id v15 = [v1 identifier];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  uint64_t v21 = v18;
  uint64_t v22 = v23;
  uint64_t v20 = v16;
  (*(void (**)(void **, uint64_t *))(*(void *)v14 + 216LL))(&v22, &v20);
  return swift_release(v14);
}

uint64_t sub_1001607E0(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100160800(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10016083C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_100160874(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001608B8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001608FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FA110);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_100160944(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100160954(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100160990(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1001609C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

uint64_t sub_100160A18()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FE548);
  sub_10015ADAC(v0, (uint64_t)qword_1003FE548);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

unint64_t sub_100160A70(uint64_t a1)
{
  uint64_t v2 = sub_100156B68((uint64_t *)&unk_1003F8430);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(&qword_1003F8418);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100164AF4(v13, (uint64_t)v5);
    unint64_t result = sub_100162DEC((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100160C90()
{
  return v1;
}

uint64_t sub_100160CF8@<X0>(void *a1@<X8>)
{
  return sub_100164950(a1);
}

uint64_t sub_100160D7C()
{
  return v1;
}

uint64_t sub_100160DE4@<X0>(void *a1@<X8>)
{
  return sub_100164928(a1);
}

id sub_100160DF8()
{
  uint64_t v1 = OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_lock;
  type metadata accessor for Lock();
  uint64_t v2 = v0;
  *(void *)&v0[v1] = sub_100236794();
  uint64_t v3 = OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks;
  *(void *)&v2[v3] = sub_100160A70((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v2[OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session] = 0LL;
  *(void *)&v2[OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__outputDevices] = &_swiftEmptyArrayStorage;

  v12.receiver = v2;
  v12.super_class = (Class)type metadata accessor for MRDGroupSessionDiscoverySession();
  id v4 = objc_msgSendSuper2(&v12, "init");
  uint64_t v5 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v6 = v4;
  id v7 = [v5 defaultCenter];
  [v7 addObserver:v6 selector:"handleGroupSessionServerStart:" name:@"MRDGroupSessionServerDidStartNotification" object:0];

  id v8 = [v5 defaultCenter];
  [v8 addObserver:v6 selector:"handleGroupSessionServerStop:" name:@"MRDGroupSessionServerDidStopNotification" object:0];

  sub_10016235C(v9, v10);
  return v6;
}

uint64_t type metadata accessor for MRDGroupSessionDiscoverySession()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted31MRDGroupSessionDiscoverySession);
}

uint64_t sub_100160F88@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  UUID.init()(v9);
  id v15 = v3;
  char v16 = v11;
  unint64_t v17 = a1;
  uint64_t v18 = a2;
  sub_100236804((void (*)(void))sub_100162780);
  (*(void (**)(void))((swift_isaMask & *v3) + 0x88LL))();
  a1();
  swift_bridgeObjectRelease();
  a3[3] = v7;
  objc_super v12 = sub_1001627AC(a3);
  return (*(uint64_t (**)(void *, _BYTE *, uint64_t))(v8 + 32))(v12, v11, v7);
}

uint64_t sub_10016109C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  uint64_t v12 = swift_allocObject(&unk_1003A3898, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  uint64_t v13 = (void *)(a1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks, v17, 33LL, 0LL);
  swift_retain(a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  uint64_t v16 = *v13;
  void *v13 = 0x8000000000000000LL;
  sub_1001635A8((uint64_t)sub_100164AD0, v12, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
  void *v13 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return swift_endAccess(v17);
}

void sub_1001613A0(uint64_t a1, uint64_t a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_1001613F4(uint64_t a1)
{
  uint64_t v3 = sub_100156B68(&qword_1003F82F0);
  __chkstk_darwin(v3);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100160800(a1, (uint64_t)v15);
  int v10 = swift_dynamicCast(v5, v15, (char *)&type metadata for Any + 8, v6, 6LL);
  uint64_t v11 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v10)
  {
    v11(v5, 1LL, 1LL, v6);
    return sub_1001627E8((uint64_t)v5);
  }

  v11(v5, 0LL, 1LL, v6);
  uint64_t v12 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v5, v6);
  __chkstk_darwin(v12);
  *(void *)&v14[-16] = v1;
  *(void *)&v14[-8] = v9;
  sub_100156B68(&qword_1003F82F8);
  sub_100236804((void (*)(void))sub_100162828);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = v15[0];
  if (v15[0]) {
    return sub_100162944(v15[0], v15[1]);
  }
  return result;
}

uint64_t sub_10016166C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  _StringGuts.grow(_:)(42LL);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._object = (void *)0x8000000100339FF0LL;
  v6._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v6);
  uint64_t v7 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90LL))();
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];
    swift_unknownObjectRelease(v8);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;
  }

  else
  {
    uint64_t v12 = (void *)0xE400000000000000LL;
    uint64_t v10 = 1162760014LL;
  }

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x4474757074756F20LL;
  v14._object = (void *)0xEF3A736563697665LL;
  String.append(_:)(v14);
  uint64_t v15 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88LL))();
  unint64_t v16 = sub_100162954();
  v17._countAndFlagsBits = Array.description.getter(v15, v16);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 62LL;
  v18._object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  return 60LL;
}

uint64_t sub_100161820(uint64_t a1, void *a2)
{
  return sub_100163CD0(a2, 0xD000000000000026LL, 0x800000010033A290LL);
}

uint64_t sub_10016186C(uint64_t a1, void *a2)
{
  return sub_100163CD0(a2, 0xD000000000000024LL, 0x800000010033A260LL);
}

void sub_1001618B8(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, unint64_t a6)
{
  id v10 = a3;
  swift_unknownObjectRetain(a4);
  id v11 = a1;
  sub_100163CD0(a4, a5, a6);

  swift_unknownObjectRelease(a4);
}

uint64_t sub_100161938(uint64_t a1, void *a2)
{
  return sub_100163F48(a2, (uint64_t)a2);
}

void sub_10016194C(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  id v8 = a3;
  swift_unknownObjectRetain(a4);
  id v9 = a1;
  a5(a4);

  swift_unknownObjectRelease(a4);
}

uint64_t sub_1001619B8(uint64_t a1, void *a2)
{
  return sub_10016422C(a2, (uint64_t)a2);
}

uint64_t sub_1001619CC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v7, (uint64_t)qword_1003FE548);
  uint64_t v8 = swift_unknownObjectRetain_n(a1, 2LL);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(42LL, -1LL);
    uint64_t v21 = swift_slowAlloc(96LL, -1LL);
    uint64_t v23 = v21;
    *(_DWORD *)uint64_t v11 = 136315906;
    uint64_t v12 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v22 = sub_10015ADC4(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    uint64_t v20 = a2;
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v22 = sub_10015ADC4(0xD000000000000015LL, 0x800000010033A010LL, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    id v14 = [a1 identifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    uint64_t v22 = sub_10015ADC4(v15, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 24, v11 + 32);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 2048;
    uint64_t v22 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 34, v11 + 42);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] %s %s %ld", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy(v21, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    uint64_t v18 = swift_unknownObjectRelease_n(a1, 2LL);
  }

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x118LL))(v18);
}

uint64_t sub_100161CDC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v7, (uint64_t)qword_1003FE548);
  swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v8 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t type = v10;
    uint64_t v11 = swift_slowAlloc(42LL, -1LL);
    uint64_t v25 = swift_slowAlloc(128LL, -1LL);
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v11 = 136315906;
    uint64_t v12 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v26 = sub_10015ADC4(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v26 = sub_10015ADC4(0xD000000000000015LL, 0x800000010033A030LL, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    id v14 = [a1 identifier];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    unint64_t v17 = v16;

    uint64_t v26 = sub_10015ADC4(v15, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 24, v11 + 32);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v18 = sub_100156B68(&qword_1003FA150);
    uint64_t v19 = Array.description.getter(a2, v18);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    uint64_t v26 = sub_10015ADC4(v19, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, type, "[%s] %s %s %s", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy(v25, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v22 = swift_unknownObjectRelease_n(a1, 2LL);
  }

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x118LL))(v22);
}

uint64_t sub_10016206C(void *a1)
{
  return sub_100163CD0(a1, 0xD00000000000001FLL, 0x800000010033A050LL);
}

uint64_t sub_100162088(void *a1)
{
  return sub_100163CD0(a1, 0xD00000000000001ELL, 0x800000010033A070LL);
}

uint64_t sub_1001620A4()
{
  id v0 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v1 = [v0 groupSessionServer];

  if (v1)
  {
    id v3 = [v1 sessionManager];

    if (v3)
    {
      id v4 = [v3 session];

      if (v4)
      {
        if (([v4 isHosted] & 1) != 0 || objc_msgSend(v4, "state") != (id)3)
        {
          uint64_t v2 = swift_unknownObjectRelease(v4);
        }

        else
        {
          uint64_t v5 = sub_100156B68(&qword_1003F8310);
          uint64_t v6 = swift_allocObject(v5, 40LL, 7LL);
          *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10034BD90;
          *(void *)(v6 + 32) = [objc_allocWithZone(MRAVDistantOutputDevice) initWithGroupSession:v4];
          specialized Array._endMutation()();
          uint64_t v2 = swift_unknownObjectRelease(v4);
        }
      }
    }
  }

  __chkstk_darwin(v2);
  sub_100236804((void (*)(void))sub_100164510);
  sub_100162268();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100162268()
{
  uint64_t v2 = 0LL;
  sub_100236804((void (*)(void))sub_100164978);
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88LL))();
  __break(1u);
  return result;
}

void sub_10016235C(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  id v5 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v6 = [v5 groupSessionServer];

  if (v6 && (id v7 = [v6 sessionManager], v6, v7))
  {
    [v7 addObserver:v3];
    if (qword_1003FE540 != -1) {
      swift_once(&qword_1003FE540, sub_100160A18);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v8, (uint64_t)qword_1003FE548);
    id v9 = v7;
    os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t osloga = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = (uint64_t)osloga;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v13 = _typeName(_:qualified:)(ObjectType, 0LL);
      uint64_t v27 = sub_10015ADC4(v13, v14, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2112;
      uint64_t v27 = (uint64_t)v9;
      id v15 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v12 + 14, v12 + 22);
      *os_log_type_t v24 = v7;

      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%s] Began observing %@", (uint8_t *)v12, 0x16u);
      uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v24, 1LL, v16);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_arrayDestroy(osloga, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(osloga, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(void))((swift_isaMask & *v3) + 0x118LL))();
  }

  else
  {
    if (qword_1003FE540 != -1) {
      swift_once(&qword_1003FE540, sub_100160A18);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10015ADAC(v17, (uint64_t)qword_1003FE548);
    oslog = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v21;
      *(_DWORD *)unint64_t v20 = 136315138;
      uint64_t v22 = _typeName(_:qualified:)(ObjectType, 0LL);
      uint64_t v27 = sub_10015ADC4(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v19,  "[%s] No session manager to call addObserver. Ignoring",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_100162780()
{
  return sub_10016109C(v0[2], v0[3], v0[4], v0[5]);
}

void *sub_1001627AC(void *a1)
{
  id v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1001627E8(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003F82F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

__n128 sub_100162828@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  id v5 = (uint64_t *)(v3 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks, v15, 33LL, 0LL);
  swift_bridgeObjectRetain(*v5);
  unint64_t v6 = sub_100162DEC(v4);
  LOBYTE(v4) = v7;
  swift_bridgeObjectRelease();
  __n128 v13 = 0u;
  if ((v4 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    uint64_t v9 = *v5;
    uint64_t v14 = *v5;
    *id v5 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1001637B4();
      uint64_t v9 = v14;
    }

    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v6,  v11);
    __n128 v13 = *(__n128 *)(*(void *)(v14 + 56) + 16 * v6);
    sub_10016331C(v6, v14);
    *id v5 = v14;
    swift_bridgeObjectRelease();
  }

  swift_endAccess(v15);
  __n128 result = v13;
  *a1 = v13;
  return result;
}

uint64_t sub_100162944(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

unint64_t sub_100162954()
{
  unint64_t result = qword_1003F8300;
  if (!qword_1003F8300)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___MRAVOutputDevice);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003F8300);
  }

  return result;
}

id sub_100162A30()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MRDGroupSessionDiscoverySession();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100162AB8(void *a1)
{
  uint64_t result = (uint64_t)[objc_allocWithZone(_MRAVOutputDeviceDescriptorProtobuf) init];
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v4 = (void *)result;
  NSString v5 = [a1 localizedSessionName];
  if (!v5)
  {
    ((void (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:))();
    uint64_t v7 = v6;
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }

  [v4 setName:v5];

  id v8 = [a1 joinToken];
  id v9 = [v8 equivalentMediaIdentifier];

  if (!v9) {
    id v9 = [a1 identifier];
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  [v4 setUniqueIdentifier:v12];

  [v4 setIsRemoteControllable:1];
  [v4 setTransportType:6];
  NSString v13 = [a1 identifier];
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v15 = v14;
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
  }

  [v4 setGroupID:v13];

  [v4 setGroupContainsGroupLeader:1];
  [v4 setIsGroupable:1];
  [v4 setIsDeviceGroupable:1];
  uint64_t result = MROutputDeviceTypeFromGroupSessionRoute([a1 routeType]);
  if ((result & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }

  [v4 setDeviceType:result];
  uint64_t result = MROutputDeviceSubtypeFromGroupSessionRoute([a1 routeType]);
  if ((result & 0x80000000) != 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }

  [v4 setDeviceSubType:result];
  id v16 = (id)MRGroupSessionRouteTypeToModelIdentifier([a1 routeType]);
  if (v16)
  {
    uint64_t v17 = v16;
    [v4 setModelID:v16];
  }

  id v18 = [objc_allocWithZone(MRGroupSessionInfo) initWithGroupSession:a1];
  id v19 = [v18 protobuf];

  [v4 setGroupSessionInfo:v19];
  id v20 = [v1 initWithDescriptor:v4];

  swift_unknownObjectRelease(a1);
  return (uint64_t)v20;
}

unint64_t sub_100162DEC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100164A6C(&qword_1003F8410, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100162E50(a1, v7);
}

unint64_t sub_100162E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    NSString v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100164A6C((unint64_t *)&unk_1003F8420, (uint64_t)&protocol conformance descriptor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

uint64_t sub_100162F88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100156B68(&qword_1003F8418);
  int v42 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  Swift::Int v39 = v3;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    os_log_type_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v40) {
              goto LABEL_36;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

unint64_t sub_10016331C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v36 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v37 + 72);
      unint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v12;
        int64_t v15 = v12 * v10;
        uint64_t v16 = v13;
        v35(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v17 = *(void *)(a2 + 40);
        uint64_t v18 = sub_100164A6C(&qword_1003F8410, (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        uint64_t v13 = v16;
        unint64_t v20 = v19 & v16;
        if (a1 >= (uint64_t)v36)
        {
          if (v20 >= v36 && a1 >= (uint64_t)v20)
          {
LABEL_17:
            uint64_t v23 = *(void *)(a2 + 48);
            unint64_t result = v23 + v14 * a1;
            uint64_t v24 = v23 + v15;
            if (v14 * a1 < v15 || (uint64_t v12 = v14, result >= v24 + v14))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v24, 1LL, v4);
LABEL_22:
              uint64_t v13 = v16;
              uint64_t v12 = v14;
            }

            else if (v14 * a1 != v15)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_22;
            }

            uint64_t v25 = *(void *)(a2 + 56);
            int64_t v26 = (_OWORD *)(v25 + 16 * a1);
            uint64_t v27 = (_OWORD *)(v25 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 1))
            {
              _OWORD *v26 = *v27;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v20 >= v36 || a1 >= (uint64_t)v20)
        {
          goto LABEL_17;
        }

        uint64_t v12 = v14;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  uint64_t *v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_1001635A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_100162DEC(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      unint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release(v22[1]);
      uint64_t v24 = v28;
      *unint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001637B4();
    goto LABEL_7;
  }

  sub_100162F88(v18, a4 & 1);
  unint64_t v25 = sub_100162DEC(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v25;
  unint64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100163714(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_100163714(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

void *sub_1001637B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F8418);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v27 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v28 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v16) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v12);
      if (!v25) {
        break;
      }
    }

uint64_t sub_1001639F0(uint64_t result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    __int128 v20 = *(_OWORD *)(*(void *)(a4 + 56) + 16 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      swift_retain(*((void *)&v20 + 1));
      goto LABEL_38;
    }

    ++v11;
    uint64_t result = swift_retain(*((void *)&v20 + 1));
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v36 = (v115 - 1) & v115;
    v103 = __clz(__rbit64(v115)) + (v99 << 6);
LABEL_24:
    id v104 = *(void *)(v42 + 56) + 16 * v103;
    v106 = *(void (**)(char *, __int128 *))v104;
    v105 = *(void *)(v104 + 8);
    id v107 = type metadata accessor for RoutingDialog.Action(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56LL))(v30, 1LL, 1LL, v107);
    v108 = type metadata accessor for HostedRoutingError(0LL);
    v109 = sub_100156FEC(&qword_1003F8E88, type metadata accessor for HostedRoutingError, (uint64_t)&unk_10034F9F8);
    id v110 = swift_allocError(v108, v109, 0LL, 0LL);
    id v112 = v111;
    v113 = sub_100156B68(&qword_1003F8E90);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56LL))(v112, 1LL, 1LL, v113);
    *(void *)&aBlock = v110;
    swift_retain(v105);
    v106(v30, &aBlock);
    swift_errorRelease(v110);
    swift_release(v105);
    sub_1001603DC((uint64_t)v30, &qword_1003F8E80);
    uint64_t v98 = v213;
  }

  id v116 = v114 + 4;
  if (v116 >= a1) {
    goto LABEL_42;
  }
  id v115 = *(void *)(v77 + 8 * v116);
  if (v115)
  {
    v99 = v116;
    goto LABEL_41;
  }

  while (1)
  {
    v99 = v116 + 1;
    if (__OFADD__(v116, 1LL)) {
      break;
    }
    if (v99 >= a1) {
      goto LABEL_42;
    }
    id v115 = *(void *)(v77 + 8 * v99);
    ++v116;
    if (v115) {
      goto LABEL_41;
    }
  }

  __break(1u);
LABEL_69:
  if (v36 < 0) {
    id v175 = v36;
  }
  else {
    id v175 = v36 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v175);
  id v165 = result;
  if (!result) {
    goto LABEL_73;
  }
LABEL_53:
  if (v165 >= 1)
  {
    v166 = 0LL;
    v167 = v211;
    id v168 = v212;
    do
    {
      if ((v36 & 0xC000000000000001LL) != 0)
      {
        v169 = specialized _ArrayBuffer._getElementSlowPath(_:)(v166, v36);
      }

      else
      {
        v169 = *(void *)(v36 + 8 * v166 + 32);
        swift_retain(v169);
      }

      ++v166;
      v170 = v210;
      v171 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v167 + 16))( v210,  v169 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v168);
      id v172 = RoutingSessionConfiguration.itemTypes.getter(v171);
      (*(void (**)(char *, uint64_t))(v167 + 8))(v170, v168);
      sub_100194A1C(v172);
      swift_release(v169);
    }

    while (v165 != v166);
    swift_bridgeObjectRelease_n(v36, 2LL);
    v173 = (void *)aBlock;
    uint64_t v77 = v209;
    goto LABEL_74;
  }

  __break(1u);
  return result;
}

      swift_bridgeObjectRelease(v16);
      return 0LL;
    }

    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_11;
  }

  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
  v109 = v5;
  swift_bridgeObjectRetain();
  id v110 = v109;
  v111 = (os_log_s *)Logger.logObject.getter(v110);
  id v112 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v111, v112))
  {
    v113 = swift_slowAlloc(32LL, -1LL);
    v114 = (char **)swift_slowAlloc(8LL, -1LL);
    id v151 = (void **)swift_slowAlloc(64LL, -1LL);
    aBlock = v151;
    *(_DWORD *)v113 = 138543874;
    v139 = v55;
    v158 = v110;
    id v115 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v113 + 4, v113 + 12);
    void *v114 = v110;

    *(_WORD *)(v113 + 12) = 2080;
    v158 = (void *)sub_10015ADC4(0xD000000000000028LL, 0x800000010033C0E0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v113 + 14, v113 + 22);
    *(_WORD *)(v113 + 22) = 2082;
    swift_bridgeObjectRetain();
    v158 = (void *)sub_10015ADC4((uint64_t)v140, v25, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v113 + 24, v113 + 32);
    swift_bridgeObjectRelease_n(v25, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "[%{public}@] %s message received for unknown participant: %{public}s",  (uint8_t *)v113,  0x20u);
    id v116 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v114, 1LL, v116);
    swift_slowDealloc(v114, -1LL, -1LL);
    v117 = v151;
    swift_arrayDestroy(v151, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v117, -1LL, -1LL);
    swift_slowDealloc(v113, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v25, 2LL);
  }

    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_42:
    int64_t v19 = *(void *)(a2 + 40);
    __int128 v20 = *(id *)(*(void *)(a1 + 48) + 8 * v15);
    unint64_t v21 = NSObject._rawHashValue(seed:)(v19);
    unint64_t v22 = -1LL << *(_BYTE *)(a2 + 32);
    uint64_t v23 = v21 & ~v22;
    if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
      goto LABEL_49;
    }
    uint64_t v31 = v12;
    int64_t v24 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
    unint64_t v25 = static NSObject.== infix(_:_:)(v24);

    if ((v25 & 1) == 0)
    {
      int64_t v26 = ~v22;
      while (1)
      {
        uint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v13 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
          break;
        }
        uint64_t v27 = *(id *)(*(void *)(a2 + 48) + 8 * v23);
        uint64_t v28 = static NSObject.== infix(_:_:)(v27);

        if ((v28 & 1) != 0) {
          goto LABEL_23;
        }
      }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = swift_release(v8);
  uint64_t *v3 = v10;
  return result;
}

void *sub_100163BEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100156B68((uint64_t *)&unk_1003F8400);
  uint64_t v4 = swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size((const void *)v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v4 + 24) = 2 * (v6 >> 4);
  uint64_t v7 = sub_1001639F0((uint64_t)&v10, (_OWORD *)(v4 + 32), v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10016031C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }

  return (void *)v4;
}

uint64_t sub_100163CD0(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = v3;
  uint64_t ObjectType = swift_getObjectType(v3, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v9, (uint64_t)qword_1003FE548);
  uint64_t v10 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = swift_slowAlloc(96LL, -1LL);
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v23 = sub_10015ADC4(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v23 = sub_10015ADC4(a2, a3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2080;
    id v16 = [a1 identifier];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    uint64_t v23 = sub_10015ADC4(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v13 + 24, v13 + 32);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] %s %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v22, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    uint64_t v20 = swift_unknownObjectRelease_n(a1, 2LL);
  }

  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x118LL))(v20);
}

uint64_t sub_100163F48(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v6, (uint64_t)qword_1003FE548);
  uint64_t v7 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = swift_slowAlloc(96LL, -1LL);
    v22[0] = v20;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v21 = sub_10015ADC4(v11, v12, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v21 = sub_10015ADC4(0xD000000000000025LL, 0x800000010033A230LL, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2080;
    id v13 = [a1 identifier];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    uint64_t v21 = sub_10015ADC4(v14, v16, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v10 + 24, v10 + 32);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] %s %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v20, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    uint64_t v17 = swift_unknownObjectRelease_n(a1, 2LL);
  }

  __chkstk_darwin(v17);
  sub_100236804((void (*)(void))sub_100164A2C);
  id v18 = [a1 addObserver:v3];
  return (*(uint64_t (**)(id))((swift_isaMask & *v3) + 0x118LL))(v18);
}

uint64_t sub_10016422C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v6, (uint64_t)qword_1003FE548);
  uint64_t v7 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = swift_slowAlloc(96LL, -1LL);
    v20[0] = v18;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v19 = sub_10015ADC4(v11, v12, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v19 = sub_10015ADC4(0xD000000000000026LL, 0x800000010033A200LL, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2080;
    id v13 = [a1 identifier];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v16 = v15;

    uint64_t v19 = sub_10015ADC4(v14, v16, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 24, v10 + 32);
    swift_unknownObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%s] %s %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v18, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n(a1, 2LL);
  }

  __chkstk_darwin(objc_msgSend(a1, "removeObserver:", v3, v18));
  sub_100236804((void (*)(void))sub_1001649F4);
  return (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x118LL))();
}

uint64_t sub_100164510()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = **(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__outputDevices);
  *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__outputDevices) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

void sub_100164554(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10015ADAC(v4, (uint64_t)qword_1003FE548);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v10 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v14 = sub_10015ADC4(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v14 = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A1D0LL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 14, v8 + 22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%s] %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  sub_10016235C(v12, v13);
}

uint64_t sub_10016471C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE540 != -1) {
    swift_once(&qword_1003FE540, sub_100160A18);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10015ADAC(v5, (uint64_t)qword_1003FE548);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(64LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v14 = sub_10015ADC4(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v14 = sub_10015ADC4(0xD000000000000020LL, 0x800000010033A1A0LL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 14, v9 + 22);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x118LL))();
}

uint64_t sub_1001648FC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100164920(uint64_t a1)
{
}

uint64_t sub_100164928@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session);
  *a1 = v2;
  return swift_unknownObjectRetain(v2);
}

uint64_t sub_100164950@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__outputDevices);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100164978()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession_callbacks);
  swift_beginAccess(v2, v6, 0LL, 0LL);
  uint64_t v3 = swift_bridgeObjectRetain(*v2);
  uint64_t v4 = sub_100163BEC(v3);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v4;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001649F4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session);
  *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session) = 0LL;
  return swift_unknownObjectRelease(v2);
}

uint64_t sub_100164A2C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session);
  *(void *)(v2 + OBJC_IVAR____TtC12mediaremoted31MRDGroupSessionDiscoverySession__session) = v1;
  swift_unknownObjectRetain(v1);
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100164A6C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for UUID(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100164AAC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100164AD0(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_100164AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68((uint64_t *)&unk_1003F8430);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100164B3C()
{
  return sub_100162780();
}

uint64_t sub_100164B50()
{
  return sub_100164CE8(30821LL, 0xE200000000000000LL);
}

uint64_t sub_100164B5C(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003F9EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_100164B9C()
{
  uint64_t v1 = v0;
  id v2 = [v0 userInfo];
  if (!v2)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
LABEL_10:
    sub_100164B5C((uint64_t)&v10);
    return [v1 duration];
  }

  uint64_t v3 = v2;
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  v8[0] = 1415868005LL;
  v8[1] = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)(v8, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_10015CAA4((uint64_t)v9), (v6 & 1) != 0))
  {
    sub_100160800(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v10);
  }

  else
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
  }

  sub_100160990((uint64_t)v9);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1)) {
    goto LABEL_10;
  }
  id result = (id)swift_dynamicCast(v9, &v10, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
  if (!(_DWORD)result) {
    return [v1 duration];
  }
  return result;
}

uint64_t sub_100164CCC()
{
  return sub_100164CE8(0x624C727474416172LL, 0xE90000000000006CLL);
}

uint64_t sub_100164CE8(uint64_t a1, uint64_t a2)
{
  id v5 = [v2 userInfo];
  if (!v5)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
LABEL_12:
    sub_100164B5C((uint64_t)&v12);
    return 0LL;
  }

  char v6 = v5;
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v5,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)&__int128 v12 = a1;
  *((void *)&v12 + 1) = a2;
  AnyHashable.init<A>(_:)(&v12, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v7 + 16) && (unint64_t v8 = sub_10015CAA4((uint64_t)&v11), (v9 & 1) != 0))
  {
    sub_100160800(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v12);
  }

  else
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
  }

  sub_100160990((uint64_t)&v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1)) {
    goto LABEL_12;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100164E18()
{
  uint64_t v1 = v0;
  id v2 = [v0 localizedTitle];
  if (!v2)
  {
LABEL_6:
    id v8 = [v1 collectionInfo];
    if (!v8)
    {
LABEL_21:
      __int128 v24 = 0u;
      __int128 v25 = 0u;
LABEL_22:
      sub_100164B5C((uint64_t)&v24);
      return 0LL;
    }

    char v9 = v8;
    uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v8,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    unint64_t v20 = 0xD00000000000002CLL;
    unint64_t v21 = 0x800000010033A2C0LL;
    AnyHashable.init<A>(_:)(&v20, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v10 + 16) && (unint64_t v11 = sub_10015CAA4((uint64_t)&v22), (v12 & 1) != 0))
    {
      sub_100160800(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v24);
    }

    else
    {
      __int128 v24 = 0u;
      __int128 v25 = 0u;
    }

    sub_100160990((uint64_t)&v22);
    swift_bridgeObjectRelease();
    if (!*((void *)&v25 + 1)) {
      goto LABEL_22;
    }
    if ((swift_dynamicCast(&v22, &v24, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      if (v22 == 0xD00000000000002ELL && v23 == 0x800000010033A320LL)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }

      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD00000000000002ELL, 0x800000010033A320LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
      {
LABEL_17:
        id v14 = [v1 collectionInfo];
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v14,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

          unint64_t v20 = 0xD000000000000023LL;
          unint64_t v21 = 0x800000010033A2F0LL;
          AnyHashable.init<A>(_:)(&v20, &type metadata for String, &protocol witness table for String);
          if (*(void *)(v16 + 16) && (unint64_t v17 = sub_10015CAA4((uint64_t)&v22), (v18 & 1) != 0))
          {
            sub_100160800(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v24);
          }

          else
          {
            __int128 v24 = 0u;
            __int128 v25 = 0u;
          }

          sub_100160990((uint64_t)&v22);
          swift_bridgeObjectRelease();
          if (*((void *)&v25 + 1))
          {
            return 0LL;
          }

          goto LABEL_22;
        }

        goto LABEL_21;
      }
    }

    return 0LL;
  }

  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000LL) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }

  return v4;
}

ValueMetadata *type metadata accessor for ContentItemUserInfoKey()
{
  return &type metadata for ContentItemUserInfoKey;
}

ValueMetadata *type metadata accessor for ContentItemCollectionInfoKey()
{
  return &type metadata for ContentItemCollectionInfoKey;
}

uint64_t sub_100165100()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FE568);
  sub_10015ADAC(v0, (uint64_t)qword_1003FE568);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t type metadata accessor for NearbySessionsListenerImplementation()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation);
}

id sub_100165330()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NearbySessionsListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1001653B4()
{
  uint64_t v1 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation____lazy_storage___homeObserver;
  objc_super v2 = *(void **)(v0
                + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation____lazy_storage___homeObserver);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation____lazy_storage___homeObserver);
  }

  else
  {
    uint64_t v4 = sub_100295868();
    unint64_t v5 = (void *)*v4;
    unint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = *v4;
    id v3 = v5;

    objc_super v2 = 0LL;
  }

  id v7 = v2;
  return v3;
}

id sub_100165418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t ObjectType = swift_getObjectType(v3, a2);
  uint64_t v5 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v5);
  uint64_t v58 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003F8750);
  uint64_t v60 = *(void (***)(char *, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  char v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100156B68(&qword_1003F8758);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  uint64_t v11 = *(void *)(v63 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v57 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  id v14 = (void (**)(char *, uint64_t))((char *)&v55 - v13);
  uint64_t v15 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_delegate;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_delegate] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_pendingInvitationRequest] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation____lazy_storage___homeObserver] = 0LL;
  uint64_t v16 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_lock;
  type metadata accessor for Lock();
  unint64_t v17 = v3;
  *(void *)&v3[v16] = sub_100236794();
  uint64_t v18 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_discoveredAdvertisements;
  sub_100156B68(&qword_1003F8760);
  *(void *)&v17[v18] = sub_100173170(10LL);
  uint64_t v19 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions;
  sub_100156B68(&qword_1003F8768);
  *(void *)&v17[v19] = sub_100173170(10LL);
  uint64_t v21 = v61;
  uint64_t v20 = v62;
  *(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_scanner] = v62;
  *(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] = v21;
  uint64_t v22 = *(void *)&v3[v15];
  *(void *)&v3[v15] = a3;
  swift_retain(v20);
  uint64_t v61 = a3;
  swift_unknownObjectRetain(a3);

  swift_unknownObjectRelease(v22);
  uint64_t v23 = (objc_class *)type metadata accessor for NearbySessionsListenerImplementation();
  v67.receiver = v17;
  v67.super_class = v23;
  id v24 = objc_msgSendSuper2(&v67, "init");
  id v55 = v24;
  dispatch thunk of NearbyInvitationScanner.$advertisements.getter();
  uint64_t v25 = sub_1001604E8( &qword_1003F8770,  &qword_1003F8750,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher<>.values.getter(v7, v25);
  v60[1](v9, v7);
  uint64_t v26 = type metadata accessor for TaskPriority(0LL);
  int v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  uint64_t v27 = (uint64_t)v58;
  v56(v58, 1LL, 1LL, v26);
  uint64_t v28 = swift_allocObject(&unk_1003A3B50, 24LL, 7LL);
  swift_unknownObjectWeakInit(v28 + 16, v24);
  uint64_t v29 = v63;
  uint64_t v30 = v64;
  uint64_t v31 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v63 + 16);
  BOOL v32 = v57;
  uint64_t v60 = v14;
  v31(v57, v14, v64);
  uint64_t v33 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v34 = (v33 + 32) & ~v33;
  unint64_t v35 = (v11 + v34 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v37 = swift_allocObject(&unk_1003A3B78, v36 + 8, v33 | 7);
  *(void *)(v37 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v37 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v37 + v34, v32, v30);
  *(void *)(v37 + v35) = v28;
  uint64_t v38 = ObjectType;
  *(void *)(v37 + v36) = ObjectType;
  uint64_t v39 = v62;
  uint64_t v40 = sub_1001669DC(v27, (uint64_t)&unk_1003F8780, v37);
  swift_release(v40);
  uint64_t v41 = v27;
  v56((char *)v27, 1LL, 1LL, v26);
  int v42 = (void *)swift_allocObject(&unk_1003A3BA0, 56LL, 7LL);
  v42[2] = 0LL;
  v42[3] = 0LL;
  __int128 v43 = v55;
  v42[4] = v55;
  v42[5] = v39;
  v42[6] = v38;
  swift_retain(v39);
  id v44 = v43;
  uint64_t v45 = sub_10015AA50(v41, (uint64_t)&unk_1003F8790, (uint64_t)v42);
  swift_release(v45);
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_10015ADAC(v46, (uint64_t)qword_1003FE568);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v66 = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    uint64_t v52 = _typeName(_:qualified:)(v38, 0LL);
    uint64_t v65 = sub_10015ADC4(v52, v53, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%s] Initialize", v50, 0xCu);
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  swift_release(v39);
  swift_unknownObjectRelease(v61);

  (*(void (**)(char *, uint64_t))(v63 + 8))((char *)v60, v64);
  return v44;
}

uint64_t type metadata accessor for NearbySessionsListener()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted22NearbySessionsListener);
}

uint64_t sub_100165964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[36] = a5;
  v6[37] = a6;
  v6[35] = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[38] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[39] = v8;
  v6[40] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F8798);
  v6[41] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[42] = v10;
  v6[43] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001659F4, 0LL, 0LL);
}

uint64_t sub_1001659F4()
{
  uint64_t v1 = v0[36] + 16LL;
  type metadata accessor for Lock();
  v0[44] = sub_100236794();
  v0[33] = &_swiftEmptySetSingleton;
  uint64_t v2 = sub_100156B68(&qword_1003F8758);
  AsyncPublisher.makeAsyncIterator()(v2);
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t v5 = (char *)&dword_1003F87A0 + dword_1003F87A0;
  id v3 = (void *)swift_task_alloc(unk_1003F87A4);
  v0[45] = v3;
  void *v3 = v0;
  v3[1] = sub_100165AD0;
  return ((uint64_t (*)(void, void, void *))v5)(0LL, 0LL, v0 + 32);
}

uint64_t sub_100165AD0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 360);
  *(void *)(v3 + 36_Block_object_dispose(va, 8) = a1;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100165B2C, 0LL, 0LL);
}

uint64_t sub_100165B2C()
{
  uint64_t v1 = *(void *)(v0 + 368);
  if (!v1)
  {
    uint64_t v7 = *(void *)(v0 + 352);
    (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
    swift_release(v7);
LABEL_5:
    uint64_t v8 = *(void *)(v0 + 344);
    uint64_t v9 = *(void *)(v0 + 320);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }

  uint64_t v2 = *(void *)(v0 + 376);
  static Task<>.checkCancellation()();
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 344);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 320);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 336) + 8LL))(v3, *(void *)(v0 + 328));
    swift_release(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 288) + 16LL);
  if (!Strong)
  {
    uint64_t v30 = *(void *)(v0 + 352);
    (*(void (**)(void, void))(*(void *)(v0 + 336) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 328));
    swift_release(v30);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  uint64_t v12 = Strong;
  if (qword_1003FE560 != -1) {
    goto LABEL_119;
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = sub_10015ADAC(v15, (uint64_t)qword_1003FE568);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v16, v15);
    id v17 = (id)v12;
    swift_bridgeObjectRetain_n(v1, 2LL);
    uint64_t v18 = (char *)v17;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    v133 = v18;
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v117 = v20;
      log = v19;
      uint64_t v126 = *(void *)(v0 + 368);
      uint64_t v21 = *(void *)(v0 + 296);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v116 = swift_slowAlloc(96LL, -1LL);
      *(void *)(v0 + 224) = v116;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v23 = _typeName(_:qualified:)(v21, 0LL);
      *(void *)(v0 + 232) = sub_10015ADC4(v23, v24, (uint64_t *)(v0 + 224));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      if (*(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v25 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v25 = 7496003LL;
      }
      if (*(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        unint64_t v26 = 0xE700000000000000LL;
      }
      else {
        unint64_t v26 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 240) = sub_10015ADC4(v25, v26, (uint64_t *)(v0 + 224));
      v121 = (uint64_t *)(v0 + 248);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();

      v118 = (uint8_t *)v22;
      *(_WORD *)(v22 + 22) = 2082;
      unint64_t v127 = v126 & 0xC000000000000001LL;
      if (v127)
      {
        uint64_t v27 = *(void *)(v0 + 368);
        if (v27 >= 0) {
          uint64_t v28 = v27 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v28 = v1;
        }
        uint64_t v29 = __CocoaSet.count.getter(v28);
      }

      else
      {
        uint64_t v29 = *(void *)(v1 + 16);
      }

      uint64_t v34 = &_swiftEmptyArrayStorage;
      uint64_t v130 = v1;
      if (v29)
      {
        uint64_t *v121 = (uint64_t)&_swiftEmptyArrayStorage;
        sub_10015DCE8(0, v29 & ~(v29 >> 63), 0);
        if (v127)
        {
          uint64_t v35 = *(void *)(v0 + 368);
          if (v35 >= 0) {
            uint64_t v36 = v35 & 0xFFFFFFFFFFFFFF8LL;
          }
          else {
            uint64_t v36 = v1;
          }
          uint64_t v37 = __CocoaSet.startIndex.getter(v36);
          char v39 = 1;
        }

        else
        {
          uint64_t v37 = sub_10015E990(v1);
          char v39 = v40 & 1;
        }

        *(void *)(v0 + 152) = v37;
        *(void *)(v0 + 160) = v38;
        *(_BYTE *)(v0 + 16_Block_object_dispose(va, 8) = v39;
        if (v29 < 0)
        {
          __break(1u);
LABEL_121:
          uint64_t result = swift_bridgeObjectRelease();
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
          return result;
        }

        uint64_t v125 = v0 + 96;
        uint64_t v41 = *(void *)(v0 + 368);
        if (v41 >= 0) {
          uint64_t v42 = v41 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v42 = v1;
        }
        uint64_t v123 = v42;
        do
        {
          uint64_t v48 = *(void *)(v0 + 152);
          uint64_t v49 = *(void *)(v0 + 160);
          char v50 = *(_BYTE *)(v0 + 168);
          sub_10017137C(v48, v49, v50, v1);
          uint64_t v52 = v51;
          uint64_t v53 = NearbyAdvertisement.identifier.getter(v51);
          uint64_t v55 = v54;

          uint64_t v56 = *(void *)(v0 + 248);
          if ((swift_isUniquelyReferenced_nonNull_native(v56) & 1) == 0)
          {
            sub_10015DCE8(0, *(void *)(v56 + 16) + 1LL, 1);
            uint64_t v56 = *v121;
          }

          unint64_t v58 = *(void *)(v56 + 16);
          unint64_t v57 = *(void *)(v56 + 24);
          if (v58 >= v57 >> 1)
          {
            sub_10015DCE8(v57 > 1, v58 + 1, 1);
            uint64_t v56 = *v121;
          }

          *(void *)(v56 + swift_weakDestroy(v0 + 16) = v58 + 1;
          uint64_t v59 = v56 + 16 * v58;
          *(void *)(v59 + 32) = v53;
          *(void *)(v59 + 40) = v55;
          if (v127)
          {
            uint64_t v1 = v130;
            if ((v50 & 1) == 0) {
              goto LABEL_121;
            }
            uint64_t v60 = __CocoaSet.Index.handleBitPattern.getter(v48, v49);
            if (v60) {
              uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
            }
            else {
              uint64_t isUniquelyReferenced_nonNull_native = 1LL;
            }
            uint64_t v62 = sub_100156B68(&qword_1003F87B0);
            uint64_t v63 = (void (*)(uint64_t, void))Set.Index._asCocoa.modify(v125, v62);
            __CocoaSet.formIndex(after:isUnique:)(v64, isUniquelyReferenced_nonNull_native, v123);
            v63(v125, 0LL);
          }

          else
          {
            uint64_t v1 = v130;
            int64_t v43 = sub_10015E644(v48, v49, v50, v130);
            uint64_t v45 = v44;
            char v47 = v46;
            sub_100160324(v48, v49, v50);
            *(void *)(v0 + 152) = v43;
            *(void *)(v0 + 160) = v45;
            *(_BYTE *)(v0 + 16_Block_object_dispose(va, 8) = v47 & 1;
          }

          --v29;
        }

        while (v29);
        sub_100160324(*(void *)(v0 + 152), *(void *)(v0 + 160), *(_BYTE *)(v0 + 168));
        uint64_t v34 = *(void **)(v0 + 248);
      }

      uint64_t v65 = *(void *)(v0 + 312);
      uint64_t v128 = *(void *)(v0 + 320);
      uint64_t v66 = *(void *)(v0 + 304);
      uint64_t v67 = Array.description.getter(v34, &type metadata for String);
      unint64_t v69 = v68;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 272) = sub_10015ADC4(v67, v69, (uint64_t *)(v0 + 224));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v118 + 24, v118 + 32);
      swift_bridgeObjectRelease();
      uint64_t v1 = v130;
      swift_bridgeObjectRelease_n(v130, 2LL);
      _os_log_impl((void *)&_mh_execute_header, log, v117, "[%s(%s)] Advertisements updated: %{public}s", v118, 0x20u);
      swift_arrayDestroy(v116, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v118, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v128, v66);
    }

    else
    {
      uint64_t v32 = *(void *)(v0 + 312);
      uint64_t v31 = *(void *)(v0 + 320);
      uint64_t v33 = *(void *)(v0 + 304);

      swift_bridgeObjectRelease_n(v1, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
    }

    *(void *)(v0 + 176) = 0LL;
    *(void *)(v0 + 184) = 0LL;
    uint64_t v70 = (void *)swift_task_alloc(48LL);
    v70[2] = v0 + 176;
    v70[3] = v1;
    v70[4] = v0 + 264;
    v70[5] = v0 + 184;
    sub_100236804((void (*)(void))sub_1001729D4);
    swift_bridgeObjectRelease();
    uint64_t result = swift_task_dealloc(v70);
    uint64_t v71 = *(void *)(v0 + 184);
    if (!v71) {
      goto LABEL_122;
    }
    os_log_t loga = (os_log_t)(v0 + 176);
    if ((v71 & 0xC000000000000001LL) != 0)
    {
      uint64_t v72 = v71 >= 0 ? v71 & 0xFFFFFFFFFFFFFF8LL : *(void *)(v0 + 184);
      swift_bridgeObjectRetain();
      uint64_t v73 = __CocoaSet.makeIterator()(v72);
      uint64_t v74 = type metadata accessor for NearbyAdvertisement(0LL);
      uint64_t v75 = sub_100156FEC( &qword_1003F87A8,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyAdvertisement,  (uint64_t)&protocol conformance descriptor for NSObject);
      unint64_t v76 = Set.Iterator.init(_cocoa:)((void *)(v0 + 56), v73, v74, v75);
      uint64_t v71 = *(void *)(v0 + 56);
      uint64_t v131 = *(void *)(v0 + 64);
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v77 = *(void *)(v0 + 80);
      unint64_t v78 = *(void *)(v0 + 88);
    }

    else
    {
      uint64_t v79 = -1LL << *(_BYTE *)(v71 + 32);
      uint64_t v131 = v71 + 56;
      uint64_t v12 = ~v79;
      uint64_t v80 = -v79;
      uint64_t v81 = v80 < 64 ? ~(-1LL << v80) : -1LL;
      unint64_t v78 = v81 & *(void *)(v71 + 56);
      unint64_t v76 = (void *)swift_bridgeObjectRetain();
      uint64_t v77 = 0LL;
    }

    id v122 = (uint64_t *)(v0 + 200);
    id v124 = (id *)(v0 + 192);
    uint64_t v1 = v0 + 208;
    int64_t v129 = (unint64_t)(v12 + 64) >> 6;
    if (v71 < 0)
    {
      while (1)
      {
        uint64_t v85 = __CocoaSet.Iterator.next()(v76);
        if (!v85) {
          break;
        }
        uint64_t v86 = v85;
        *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v85;
        uint64_t v87 = type metadata accessor for NearbyAdvertisement(0LL);
        swift_unknownObjectRetain(v86);
        swift_dynamicCast(v0 + 208, v0 + 216, (char *)&type metadata for Swift.AnyObject + 8, v87, 7LL);
        id v88 = *(id *)v1;
        swift_unknownObjectRelease(v86);
        uint64_t v84 = v77;
        uint64_t v82 = v78;
        if (!v88) {
          break;
        }
LABEL_81:
        uint64_t v12 = (uint64_t)v133;
        sub_10016E7C8(v88, v89);

        uint64_t v77 = v84;
        unint64_t v78 = v82;
        if ((v71 & 0x8000000000000000LL) == 0) {
          goto LABEL_61;
        }
      }
    }

    else
    {
LABEL_61:
      if (v78)
      {
        uint64_t v82 = (v78 - 1) & v78;
        unint64_t v83 = __clz(__rbit64(v78)) | (v77 << 6);
        uint64_t v84 = v77;
        goto LABEL_80;
      }

      int64_t v90 = v77 + 1;
      if (__OFADD__(v77, 1LL))
      {
        __break(1u);
        goto LABEL_118;
      }

      if (v90 < v129)
      {
        unint64_t v91 = *(void *)(v131 + 8 * v90);
        uint64_t v84 = v77 + 1;
        if (v91) {
          goto LABEL_79;
        }
        uint64_t v84 = v77 + 2;
        if (v77 + 2 >= v129) {
          goto LABEL_83;
        }
        unint64_t v91 = *(void *)(v131 + 8 * v84);
        if (v91) {
          goto LABEL_79;
        }
        uint64_t v84 = v77 + 3;
        if (v77 + 3 >= v129) {
          goto LABEL_83;
        }
        unint64_t v91 = *(void *)(v131 + 8 * v84);
        if (v91) {
          goto LABEL_79;
        }
        uint64_t v84 = v77 + 4;
        if (v77 + 4 >= v129) {
          goto LABEL_83;
        }
        unint64_t v91 = *(void *)(v131 + 8 * v84);
        if (v91)
        {
LABEL_79:
          uint64_t v82 = (v91 - 1) & v91;
          unint64_t v83 = __clz(__rbit64(v91)) + (v84 << 6);
LABEL_80:
          id v88 = *(id *)(*(void *)(v71 + 48) + 8 * v83);
          if (!v88) {
            goto LABEL_83;
          }
          goto LABEL_81;
        }

        uint64_t v92 = v77 + 5;
        while (v129 != v92)
        {
          unint64_t v91 = *(void *)(v131 + 8 * v92++);
          if (v91)
          {
            uint64_t v84 = v92 - 1;
            goto LABEL_79;
          }
        }
      }
    }

LABEL_83:
    uint64_t result = sub_10016031C(v71);
    uint64_t v93 = *(void *)loga;
    if (!*(void *)loga) {
      goto LABEL_123;
    }
    if ((v93 & 0xC000000000000001LL) != 0)
    {
      uint64_t v94 = v93 >= 0 ? v93 & 0xFFFFFFFFFFFFFF8LL : *(void *)loga;
      swift_bridgeObjectRetain();
      uint64_t v95 = __CocoaSet.makeIterator()(v94);
      uint64_t v96 = type metadata accessor for NearbyAdvertisement(0LL);
      uint64_t v97 = sub_100156FEC( &qword_1003F87A8,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyAdvertisement,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v98 = Set.Iterator.init(_cocoa:)((void *)(v0 + 16), v95, v96, v97);
      uint64_t v93 = *(void *)(v0 + 16);
      uint64_t v132 = *(void *)(v0 + 24);
      uint64_t v12 = *(void *)(v0 + 32);
      uint64_t v1 = *(void *)(v0 + 40);
      unint64_t v99 = *(void *)(v0 + 48);
    }

    else
    {
      uint64_t v100 = -1LL << *(_BYTE *)(v93 + 32);
      uint64_t v132 = v93 + 56;
      uint64_t v12 = ~v100;
      uint64_t v101 = -v100;
      uint64_t v102 = v101 < 64 ? ~(-1LL << v101) : -1LL;
      unint64_t v99 = v102 & *(void *)(v93 + 56);
      uint64_t v98 = (void *)swift_bridgeObjectRetain();
      uint64_t v1 = 0LL;
    }

    int64_t v103 = (unint64_t)(v12 + 64) >> 6;
    if (v93 < 0) {
      break;
    }
LABEL_94:
    if (v99)
    {
      uint64_t v104 = (v99 - 1) & v99;
      unint64_t v105 = __clz(__rbit64(v99)) | (v1 << 6);
      uint64_t v106 = v1;
      goto LABEL_113;
    }

    int64_t v112 = v1 + 1;
    if (!__OFADD__(v1, 1LL))
    {
      if (v112 >= v103) {
        goto LABEL_116;
      }
      unint64_t v113 = *(void *)(v132 + 8 * v112);
      uint64_t v106 = v1 + 1;
      if (!v113)
      {
        uint64_t v106 = v1 + 2;
        if (v1 + 2 >= v103) {
          goto LABEL_116;
        }
        unint64_t v113 = *(void *)(v132 + 8 * v106);
        if (!v113)
        {
          uint64_t v106 = v1 + 3;
          if (v1 + 3 >= v103) {
            goto LABEL_116;
          }
          unint64_t v113 = *(void *)(v132 + 8 * v106);
          if (!v113)
          {
            uint64_t v106 = v1 + 4;
            if (v1 + 4 >= v103) {
              goto LABEL_116;
            }
            unint64_t v113 = *(void *)(v132 + 8 * v106);
            if (!v113)
            {
              uint64_t v114 = v1 + 5;
              while (v103 != v114)
              {
                unint64_t v113 = *(void *)(v132 + 8 * v114++);
                if (v113)
                {
                  uint64_t v106 = v114 - 1;
                  goto LABEL_112;
                }
              }

              goto LABEL_116;
            }
          }
        }
      }

  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    swift_once(&qword_100401640, sub_10023E558);
LABEL_78:
    uint64_t v87 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v87, (uint64_t)qword_100401648);
    id v88 = swift_retain_n(v2, 2LL);
    uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
    int64_t v90 = static os_log_type_t.default.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      unint64_t v91 = swift_slowAlloc(22LL, -1LL);
      uint64_t v92 = swift_slowAlloc(64LL, -1LL);
      v112[0] = v92;
      *(_DWORD *)unint64_t v91 = 136315394;
      uint64_t v93 = _typeName(_:qualified:)(v102, 0LL);
      uint64_t v111 = sub_10015ADC4(v93, v94, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v91 + 4, v91 + 12);
      uint64_t v95 = swift_bridgeObjectRelease();
      *(_WORD *)(v91 + 12) = 2082;
      uint64_t v96 = ((uint64_t (*)(uint64_t))v110)(v95);
      uint64_t v97 = type metadata accessor for ConnectedParticipant();
      uint64_t v98 = Dictionary.description.getter(v96, &type metadata for String, v97, &protocol witness table for String);
      unint64_t v99 = v2;
      uint64_t v101 = v100;
      swift_bridgeObjectRelease();
      uint64_t v111 = sub_10015ADC4(v98, v101, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v91 + 14, v91 + 22);
      swift_release_n(v99, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "[%s] Updated participants: %{public}s",  (uint8_t *)v91,  0x16u);
      swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 2LL);
    }

    return;
  }

  uint64_t v18 = *(void *)(v103 + 8 * v17);
  ++v9;
  if (!v18)
  {
    uint64_t v9 = v17 + 1;
    if (v17 + 1 >= v106) {
      goto LABEL_41;
    }
    uint64_t v18 = *(void *)(v103 + 8 * v9);
    if (!v18)
    {
      uint64_t v9 = v17 + 2;
      if (v17 + 2 >= v106) {
        goto LABEL_41;
      }
      uint64_t v18 = *(void *)(v103 + 8 * v9);
      if (!v18)
      {
        uint64_t v19 = v17 + 3;
        if (v19 < v106)
        {
          uint64_t v18 = *(void *)(v103 + 8 * v19);
          if (v18)
          {
            uint64_t v9 = v19;
            goto LABEL_23;
          }

          while (1)
          {
            uint64_t v9 = v19 + 1;
            if (__OFADD__(v19, 1LL)) {
              goto LABEL_85;
            }
            if (v9 >= v106) {
              goto LABEL_41;
            }
            uint64_t v18 = *(void *)(v103 + 8 * v9);
            ++v19;
            if (v18) {
              goto LABEL_23;
            }
          }
        }

        goto LABEL_41;
      }
    }
  }

LABEL_112:
      uint64_t v104 = (v113 - 1) & v113;
      unint64_t v105 = __clz(__rbit64(v113)) + (v106 << 6);
LABEL_113:
      id v110 = *(id *)(*(void *)(v93 + 48) + 8 * v105);
      if (v110) {
        goto LABEL_114;
      }
      goto LABEL_116;
    }

          swift_bridgeObjectRelease_n(v92, 2LL);
          v425 = *(void (**)(char *, uint64_t))(v93 + 8);
          v407 = v92;
          v425(v51, v72);
          v193 = v459;
          v409 = v454;
          v410 = v453;
          v411 = v452;
          v406 = v426;
          goto LABEL_113;
        }
      }

      else
      {
        sub_1001A813C(v170, type metadata accessor for HostedRoutingItem);
      }

      v219 = v464;
      if (*(_BYTE *)(v169 + *(int *)(v464 + 36)) == 1)
      {
        v220 = v169;
        v221 = sub_10025026C();
        __int128 v222 = sub_1001AF2E0(v221);
        swift_bridgeObjectRelease();
        __int128 v223 = sub_100156B68(&qword_1003F9460);
        __int128 v224 = *(unsigned __int8 *)(v463 + 80);
        __int128 v225 = (v224 + 32) & ~v224;
        v226 = swift_allocObject(v223, v225 + *(void *)(v463 + 72), v224 | 7);
        *(_OWORD *)(v226 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
        id v227 = v226 + v225;
        sub_1001A80F8(v220, v227, type metadata accessor for HostedRoutingItem);
        LOBYTE(v220) = sub_10017FF40((uint64_t)v222, v226);
        swift_setDeallocating(v226);
        swift_arrayDestroy(v227, *(void *)(v226 + 16), v219);
        swift_deallocClassInstance(v226, 32LL, 7LL);
        swift_bridgeObjectRelease();
        id v228 = sub_1001741A8();
        v229 = *(void (**)(char *, uint64_t, uint64_t))(v469 + 16);
        if ((v220 & 1) != 0)
        {
          v230 = v440;
          v229(v440, v228, v72);
          swift_bridgeObjectRetain();
          id v231 = v458;
          v232 = swift_bridgeObjectRetain();
          id v233 = (void *)Logger.logObject.getter(v232);
          v234 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled((os_log_t)v233, v234))
          {

            swift_bridgeObjectRelease_n(v62, 2LL);
            swift_bridgeObjectRelease_n(v231, 2LL);
            (*(void (**)(char *, uint64_t))(v469 + 8))(v230, v72);
            v273 = v459;
            uint64_t v74 = v467;
            goto LABEL_89;
          }

          id v235 = swift_slowAlloc(32LL, -1LL);
          id v236 = swift_slowAlloc(96LL, -1LL);
          v477[0] = v236;
          *(_DWORD *)id v235 = 136315650;
          uint64_t v237 = _typeName(_:qualified:)(v465, 0LL);
          v475 = sub_10015ADC4(v237, v238, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v235 + 4, v235 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v235 + 12) = 2080;
          swift_bridgeObjectRetain();
          v475 = sub_10015ADC4(v426, v231, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v235 + 14, v235 + 22);
          swift_bridgeObjectRelease_n(v231, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v235 + 22) = 2080;
          uint64_t v74 = v467;
          swift_bridgeObjectRetain();
          v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v235 + 24, v235 + 32);
          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v233,  v234,  "[%s] Item: %s, selected in session: %s, is sole picked item -> no-op",  (uint8_t *)v235,  0x20u);
          swift_arrayDestroy(v236, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v236, -1LL, -1LL);
          swift_slowDealloc(v235, -1LL, -1LL);

          id v217 = *(void (**)(char *, uint64_t))(v469 + 8);
          v218 = &v472;
          goto LABEL_53;
        }

        v322 = v441;
        v229(v441, v228, v72);
        swift_bridgeObjectRetain_n(v62, 2LL);
        v297 = v458;
        v323 = swift_bridgeObjectRetain_n(v458, 2LL);
        v324 = (os_log_s *)Logger.logObject.getter(v323);
        v325 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v324, v325))
        {
          v326 = swift_slowAlloc(32LL, -1LL);
          v473 = swift_slowAlloc(96LL, -1LL);
          v477[0] = v473;
          *(_DWORD *)v326 = 136315650;
          v474 = v142;
          v327 = _typeName(_:qualified:)(v465, 0LL);
          v475 = sub_10015ADC4(v327, v328, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v326 + 4, v326 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v326 + 12) = 2080;
          swift_bridgeObjectRetain();
          v306 = v426;
          v475 = sub_10015ADC4(v426, v297, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v326 + 14, v326 + 22);
          swift_bridgeObjectRelease_n(v297, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v326 + 22) = 2080;
          swift_bridgeObjectRetain();
          v307 = v478;
          v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v326 + 24, v326 + 32);
          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v324,  v325,  "[%s] Item: %s, selected in session: %s, is picked -> .remove",  (uint8_t *)v326,  0x20u);
          v329 = v473;
          swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v329, -1LL, -1LL);
          swift_slowDealloc(v326, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v469 + 8))(v441, v468);
          goto LABEL_74;
        }

        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease_n(v297, 2LL);
        (*(void (**)(char *, uint64_t))(v469 + 8))(v322, v72);
        goto LABEL_94;
      }

      v279 = *(_BYTE *)(v169 + *(int *)(v464 + 44));
      LOBYTE(v477[0]) = *(_BYTE *)sub_1002493BC();
      LOBYTE(v475) = v279;
      v280 = sub_1001AEE24();
      if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v477, &type metadata for RoutingCapabilities, v280) & 1) == 0)
      {
        v333 = sub_1001741A8();
        v285 = v469;
        v288 = v439;
        (*(void (**)(char *, uint64_t, uint64_t))(v469 + 16))(v439, v333, v72);
        swift_bridgeObjectRetain_n(v62, 2LL);
        v287 = v458;
        v334 = swift_bridgeObjectRetain_n(v458, 2LL);
        v290 = (os_log_s *)Logger.logObject.getter(v334);
        v335 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v290, v335))
        {
          v336 = swift_slowAlloc(32LL, -1LL);
          v473 = swift_slowAlloc(96LL, -1LL);
          v477[0] = v473;
          *(_DWORD *)v336 = 136315650;
          v474 = v142;
          v337 = _typeName(_:qualified:)(v465, 0LL);
          v475 = sub_10015ADC4(v337, v338, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v336 + 4, v336 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v336 + 12) = 2080;
          swift_bridgeObjectRetain();
          v260 = v426;
          v475 = sub_10015ADC4(v426, v287, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v336 + 14, v336 + 22);
          swift_bridgeObjectRelease_n(v287, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v336 + 22) = 2080;
          uint64_t v74 = v467;
          swift_bridgeObjectRetain();
          v261 = v478;
          v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v336 + 24, v336 + 32);
          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v290,  v335,  "[%s] Item: %s, is not picked in session: %s, not multi select -> .set",  (uint8_t *)v336,  0x20u);
          v339 = v473;
          swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v339, -1LL, -1LL);
          swift_slowDealloc(v336, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v469 + 8))(v439, v468);
          goto LABEL_77;
        }

        goto LABEL_78;
      }

      v281 = sub_10025026C();
      v282 = sub_1001AF498(v281);
      swift_bridgeObjectRelease();
      v283 = v282[2];
      swift_bridgeObjectRelease();
      v284 = sub_1001741A8();
      v285 = v469;
      v286 = *(void (**)(char *, uint64_t, uint64_t))(v469 + 16);
      v287 = v458;
      if (v283)
      {
        v288 = v433;
        v286(v433, v284, v72);
        swift_bridgeObjectRetain_n(v62, 2LL);
        v289 = swift_bridgeObjectRetain_n(v287, 2LL);
        v290 = (os_log_s *)Logger.logObject.getter(v289);
        v291 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v290, v291))
        {
          v292 = swift_slowAlloc(32LL, -1LL);
          v473 = swift_slowAlloc(96LL, -1LL);
          v477[0] = v473;
          *(_DWORD *)v292 = 136315650;
          v474 = v142;
          v293 = _typeName(_:qualified:)(v465, 0LL);
          v475 = sub_10015ADC4(v293, v294, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v292 + 4, v292 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v292 + 12) = 2080;
          swift_bridgeObjectRetain();
          v260 = v426;
          v475 = sub_10015ADC4(v426, v287, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v292 + 14, v292 + 22);
          swift_bridgeObjectRelease_n(v287, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v292 + 22) = 2080;
          uint64_t v74 = v467;
          swift_bridgeObjectRetain();
          v261 = v478;
          v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v292 + 24, v292 + 32);
          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v290,  v291,  "[%s] Item: %s, is not picked in session: %s, session has existing non-groupable items -> .set",  (uint8_t *)v292,  0x20u);
          v295 = v473;
          swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v295, -1LL, -1LL);
          swift_slowDealloc(v292, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v469 + 8))(v433, v468);
          goto LABEL_77;
        }

LABEL_118:
    __break(1u);
LABEL_119:
    swift_once(&qword_1003FE560, sub_100165100);
  }

  while (1)
  {
    uint64_t v107 = __CocoaSet.Iterator.next()(v98);
    if (!v107) {
      break;
    }
    uint64_t v108 = v107;
    *id v122 = v107;
    uint64_t v109 = type metadata accessor for NearbyAdvertisement(0LL);
    swift_unknownObjectRetain(v108);
    swift_dynamicCast(v124, v122, (char *)&type metadata for Swift.AnyObject + 8, v109, 7LL);
    id v110 = *v124;
    swift_unknownObjectRelease(v108);
    uint64_t v106 = v1;
    uint64_t v104 = v99;
    if (!v110) {
      break;
    }
LABEL_114:
    uint64_t v12 = (uint64_t)v133;
    sub_10016D86C(v110, v111);

    uint64_t v1 = v106;
    unint64_t v99 = v104;
    if ((v93 & 0x8000000000000000LL) == 0) {
      goto LABEL_94;
    }
  }

LABEL_116:
  sub_10016031C(v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v134 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1003F87A0 + dword_1003F87A0);
  id v115 = (void *)swift_task_alloc(unk_1003F87A4);
  *(void *)(v0 + 360) = v115;
  *id v115 = v0;
  v115[1] = sub_100165AD0;
  return v134(0LL, 0LL);
}

uint64_t sub_100166710(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100156B68(&qword_1003F8798);
  uint64_t v4 = sub_1001604E8( (unint64_t *)&unk_1003F87C0,  &qword_1003F8798,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>.Iterator);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v2[6] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1001667A8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

uint64_t sub_1001667A8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(v2 + 40);
      uint64_t ObjectType = swift_getObjectType(*(void *)(v2 + 32), v5);
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
      uint64_t v10 = v9;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
    }

    uint64_t v14 = sub_100166878;
  }

  else
  {
    if (v4)
    {
      uint64_t v11 = *(void *)(v2 + 40);
      uint64_t v12 = swift_getObjectType(*(void *)(v2 + 32), v5);
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v12, v11);
      uint64_t v10 = v13;
    }

    else
    {
      uint64_t v8 = 0LL;
      uint64_t v10 = 0LL;
    }

    uint64_t v14 = sub_10016686C;
  }

  return swift_task_switch(v14, v8, v10);
}

uint64_t sub_10016686C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100166878()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 56);
  uint64_t v1 = sub_100156B68(&qword_1003F86D0);
  uint64_t v2 = swift_dynamicCast(v1, v0 + 24, v1, &type metadata for Never, 7LL);
  swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1001668E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_5;
    }
LABEL_11:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      return sub_10016FDB0(v3, v2);
    }
    goto LABEL_13;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = __CocoaSet.count.getter(v5);
    Swift::Int v7 = sub_10016FBCC(v5, v6);
    swift_bridgeObjectRelease();
    uint64_t v2 = v7;
    return sub_10016FDB0(v3, v2);
  }

uint64_t sub_1001669DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1001603DC(a1, &qword_1003F86B0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      uint64_t v16 = 0LL;
      return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v17 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (!v10) {
      goto LABEL_6;
    }
  }

  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v10, v8);
  swift_unknownObjectRetain(v10);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
  uint64_t v15 = v14;
  swift_unknownObjectRelease(v10);
  if (!(v15 | v13)) {
    goto LABEL_6;
  }
  v19[0] = 0LL;
  v19[1] = 0LL;
  uint64_t v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v9, v16, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100166B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1001603DC(a1, &qword_1003F86B0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = sub_10016083C(0LL, &qword_1003F86C8, off_100397330);
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    uint64_t v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_100166C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v6[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[13] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[14] = swift_task_alloc(v9);
  v6[15] = swift_task_alloc(v9);
  v6[16] = swift_task_alloc(v9);
  return swift_task_switch(sub_100166CD0, 0LL, 0LL);
}

uint64_t sub_100166CD0()
{
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v2 = (id *)(v0 + 9);
  uint64_t v1 = (void *)v0[9];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  uint64_t v6 = sub_10015ADAC(v4, (uint64_t)qword_1003FE568);
  v0[17] = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[18] = v7;
  v7(v3, v6, v4);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[16];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[13];
  if (v10)
  {
    uint64_t v14 = v0[11];
    uint64_t v15 = (char *)v0[9];
    uint64_t v27 = v0[12];
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v26 = v13;
    uint64_t v17 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v17;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v18 = _typeName(_:qualified:)(v14, 0LL);
    v0[7] = sub_10015ADC4(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    if (*(void *)&v15[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v20 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v20 = 7496003LL;
    }
    if (*(void *)&v15[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v21 = 0xE700000000000000LL;
    }
    else {
      unint64_t v21 = 0xE300000000000000LL;
    }
    v0[8] = sub_10015ADC4(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[%s(%s)] Starting to listen for nearby invitations",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v17, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v22(v11, v27);
  }

  else
  {
    id v23 = *v2;

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v22(v11, v12);
  }

  v0[19] = v22;
  v0[20] = v24;
  *unint64_t v24 = v0;
  v24[1] = sub_100166F78;
  return v28();
}

uint64_t sub_100166F78()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100167218;
  }
  else {
    uint64_t v3 = sub_100166FDC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100166FDC()
{
  uint64_t v1 = *(void **)(v0 + 72);
  (*(void (**)(void, void, void))(v0 + 144))( *(void *)(v0 + 120),  *(void *)(v0 + 136),  *(void *)(v0 + 96));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v20 = *(void *)(v0 + 120);
    unint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v4 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v5 = *(char **)(v0 + 72);
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v7 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v8 = _typeName(_:qualified:)(v4, 0LL);
    *(void *)(v0 + 40) = sub_10015ADC4(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    if (*(void *)&v5[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v10 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v10 = 7496003LL;
    }
    if (*(void *)&v5[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v11 = 0xE700000000000000LL;
    }
    else {
      unint64_t v11 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_10015ADC4(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%s(%s)] Started listening for nearby invitations",  (uint8_t *)v6,  0x16u);
    swift_arrayDestroy(v7, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    v21(v20, v19);
  }

  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 96);
    uint64_t v15 = *(void **)(v0 + 72);

    v12(v13, v14);
  }

  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100167218()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 72);
  (*(void (**)(void, void, void))(v0 + 144))( *(void *)(v0 + 112),  *(void *)(v0 + 136),  *(void *)(v0 + 96));
  id v3 = v2;
  swift_errorRetain(v1);
  id v4 = v3;
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 112);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 96);
    uint64_t v10 = *(char **)(v0 + 72);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v28 = swift_slowAlloc(64LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v12 = _typeName(_:qualified:)(v9, 0LL);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10015ADC4(v12, v13, &v32);
    log = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    if (*(void *)&v10[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v14 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v14 = 7496003LL;
    }
    if (*(void *)&v10[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v15 = 0xE700000000000000LL;
    }
    else {
      unint64_t v15 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 24) = sub_10015ADC4(v14, v15, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain(v8);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 32) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 24, v11 + 32);
    uint64_t *v27 = v16;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v7,  "[%s(%s)] Failed to start listening for nearby invitations: %{public}@",  (uint8_t *)v11,  0x20u);
    uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v27, 1LL, v17);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v8);
    v31(v30, v29);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 168);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v22 = *(void **)(v0 + 72);
    swift_errorRelease(v18);

    swift_errorRelease(v18);
    swift_errorRelease(v18);

    v19(v20, v21);
  }

  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100167534(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10015ADAC(v5, (uint64_t)qword_1003FE568);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v15 = sub_10015ADC4(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] Deinit", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  unint64_t v13 = (objc_class *)type metadata accessor for NearbySessionsListenerImplementation();
  v17.receiver = v3;
  v17.super_class = v13;
  return objc_msgSendSuper2(&v17, "dealloc");
}

BOOL sub_100167778(uint64_t a1, uint64_t a2)
{
  void (*v5)(id *__return_ptr, void *);
  id v6;
  void v8[2];
  id v9;
  uint64_t v4 = *(void *)(v2
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions);
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v5 = *(void (**)(id *__return_ptr, void *))(*(void *)v4 + 208LL);
  swift_retain(v4);
  swift_bridgeObjectRetain(a2);
  v5(&v9, v8);
  swift_bridgeObjectRelease(a2);
  swift_release(v4);
  uint64_t v6 = v9;
  if (v9) {

  }
  return v6 != 0LL;
}

uint64_t sub_10016785C(uint64_t a1, uint64_t a2)
{
  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v3[24] = swift_getObjectType(v2, a2);
  uint64_t v4 = sub_100156B68(&qword_1003F86B0);
  v3[25] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v3[26] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[27] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[28] = swift_task_alloc(v7);
  v3[29] = swift_task_alloc(v7);
  v3[30] = swift_task_alloc(v7);
  return swift_task_switch(sub_100167938, 0LL, 0LL);
}

id sub_100167938()
{
  __int128 v146 = *(_OWORD *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = swift_task_alloc(48LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v146;
  *(void *)(v3 + 40) = v1;
  type metadata accessor for NearbyAdvertisement(0LL);
  sub_100236804((void (*)(void))sub_100172380);
  swift_task_dealloc(v3);
  uint64_t v145 = v0 + 128;
  uint64_t v4 = *(void **)(v0 + 16);
  *(void *)(v0 + 24_Block_object_dispose(va, 8) = v4;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 216);
  unint64_t v7 = *(void **)(v0 + 184);
  uint64_t v8 = sub_10015ADAC(*(void *)(v0 + 208), (uint64_t)qword_1003FE568);
  uint64_t v9 = *(void (**)(uint64_t))(v6 + 16);
  uint64_t v147 = v8;
  v9(v5);
  id v10 = v4;
  id v11 = v7;
  id v12 = v10;
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v14 = static os_log_type_t.info.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 208);
  uint64_t v18 = *(void *)(v0 + 216);
  if (v15)
  {
    uint64_t v134 = *(void *)(v0 + 240);
    uint64_t v120 = v0 + 144;
    uint64_t v122 = v0 + 152;
    *(void *)os_log_type_t type = v0 + 160;
    v142 = v12;
    uint64_t v20 = *(char **)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v131 = *(void *)(v0 + 216);
    uint64_t v21 = swift_slowAlloc(52LL, -1LL);
    uint64_t v126 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v128 = swift_slowAlloc(128LL, -1LL);
    v149[0] = v128;
    *(_DWORD *)uint64_t v21 = 136316162;
    v139 = v9;
    uint64_t v22 = _typeName(_:qualified:)(v19, 0LL);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = sub_10015ADC4(v22, v23, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v145, v0 + 136, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    if (*(void *)&v20[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v24 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v24 = 7496003LL;
    }
    if (*(void *)&v20[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v25 = 0xE700000000000000LL;
    }
    else {
      unint64_t v25 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 136) = sub_10015ADC4(v24, v25, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v120, v21 + 14, v21 + 22);

    id v12 = v142;
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    *(void *)(v0 + 144) = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, v149);
    uint64_t v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v122, v21 + 24, v21 + 32);
    *(_WORD *)(v21 + 32) = 2082;
    uint64_t v27 = NearbyAdvertisement.identifier.getter(v26);
    *(void *)(v0 + 152) = sub_10015ADC4(v27, v28, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, *(void *)type, v21 + 34, v21 + 42);

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 42) = 2112;
    *(void *)(v0 + 160) = v142;
    id v29 = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)type, v0 + 168, v21 + 44, v21 + 52);
    void *v126 = v142;

    uint64_t v9 = v139;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%s(%s)] %s <%{public}s> - %@", (uint8_t *)v21, 0x34u);
    uint64_t v30 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v126, 1LL, v30);
    swift_slowDealloc(v126, -1LL, -1LL);
    swift_arrayDestroy(v128, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v128, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v31(v134, v17);
  }

  else
  {
    uint64_t v32 = *(void **)(v0 + 184);

    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v31(v16, v17);
  }

  uint64_t v33 = (void *)objc_opt_self(&OBJC_CLASS___MRDMusicUserStateCenter);
  id v34 = [v33 sharedCenter];
  id v35 = [v34 localActiveIdentity];
  *(void *)(v0 + 256) = v35;

  if (!v35) {
    goto LABEL_24;
  }
  id v36 = [v35 displayName];
  if (!v36)
  {

LABEL_24:
    uint64_t v65 = v0 + 24;
    uint64_t v66 = *(void **)(v0 + 184);
    ((void (*)(void, uint64_t, void))v9)(*(void *)(v0 + 224), v147, *(void *)(v0 + 208));
    id v67 = v12;
    id v68 = v66;
    id v69 = v67;
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v68);
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      os_log_type_t v144 = v71;
      id v141 = v31;
      uint64_t v133 = v0 + 64;
      uint64_t v127 = v0 + 56;
      uint64_t v130 = (void *)(v0 + 72);
      uint64_t v72 = *(char **)(v0 + 184);
      uint64_t v73 = *(void *)(v0 + 192);
      uint64_t v74 = swift_slowAlloc(52LL, -1LL);
      v136 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v138 = swift_slowAlloc(128LL, -1LL);
      v149[0] = v138;
      *(_DWORD *)uint64_t v74 = 136316162;
      uint64_t v75 = _typeName(_:qualified:)(v73, 0LL);
      *(void *)(v0 + 40) = sub_10015ADC4(v75, v76, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2080;
      if (*(void *)&v72[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v77 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v77 = 7496003LL;
      }
      if (*(void *)&v72[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        unint64_t v78 = 0xE700000000000000LL;
      }
      else {
        unint64_t v78 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_10015ADC4(v77, v78, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v127, v74 + 14, v74 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 22) = 2080;
      *(void *)(v0 + 56) = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, v149);
      uint64_t v79 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v133, v74 + 24, v74 + 32);
      *(_WORD *)(v74 + 32) = 2080;
      uint64_t v80 = NearbyAdvertisement.identifier.getter(v79);
      *(void *)(v0 + 64) = sub_10015ADC4(v80, v81, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v133, v130, v74 + 34, v74 + 42);

      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 42) = 2112;
      id v82 = [v33 sharedCenter];
      id v83 = [v82 localActiveIdentity];

      if (v83)
      {
        *(void *)(v0 + 80) = v83;
        uint64_t v84 = v0 + 88;
        uint64_t v85 = v0 + 80;
      }

      else
      {
        *uint64_t v130 = 0LL;
        uint64_t v85 = v0 + 72;
        uint64_t v84 = v0 + 80;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(v85, v84, v74 + 44, v74 + 52);
      uint64_t v89 = (void *)(v0 + 32);
      uint64_t v109 = *(void *)(v0 + 224);
      uint64_t v110 = *(void *)(v0 + 208);
      void *v136 = v83;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v144,  "[%s(%s)] %s <%s> No display name for identity: %@",  (uint8_t *)v74,  0x34u);
      uint64_t v111 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v136, 1LL, v111);
      swift_slowDealloc(v136, -1LL, -1LL);
      swift_arrayDestroy(v138, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v138, -1LL, -1LL);
      swift_slowDealloc(v74, -1LL, -1LL);

      v141(v109, v110);
      uint64_t v65 = v0 + 24;
    }

    else
    {
      uint64_t v86 = *(void *)(v0 + 224);
      uint64_t v87 = *(void *)(v0 + 208);
      id v88 = *(void **)(v0 + 184);

      v31(v86, v87);
      uint64_t v89 = (void *)(v0 + 32);
    }

    type metadata accessor for MRGroupSessionError(0LL);
    uint64_t v113 = v112;
    void *v89 = 4LL;
    uint64_t v114 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    uint64_t v115 = sub_1001FC09C((uint64_t)v89, 0xD000000000000022LL, 0x800000010033A620LL, 0LL, v113, v114, v65);
    swift_willThrow(v115);

    uint64_t v116 = *(void *)(v0 + 232);
    uint64_t v117 = *(void *)(v0 + 224);
    uint64_t v118 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v37 = v36;
  v140 = v31;
  uint64_t v38 = *(void *)(v0 + 184);
  uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  uint64_t v129 = v40;
  uint64_t v132 = v39;

  uint64_t v135 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_pendingInvitationRequest;
  uint64_t v137 = v38;
  uint64_t v41 = *(void *)(v38
                  + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_pendingInvitationRequest);
  if (v41)
  {
    uint64_t v42 = *(void **)(v0 + 184);
    ((void (*)(void, uint64_t, void))v9)(*(void *)(v0 + 232), v147, *(void *)(v0 + 208));
    id v43 = v12;
    id v44 = v42;
    id v45 = v43;
    id v46 = v44;
    uint64_t v47 = swift_retain(v41);
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v49 = static os_log_type_t.error.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    uint64_t v51 = *(void *)(v0 + 232);
    uint64_t v52 = *(void *)(v0 + 208);
    if (v50)
    {
      uint64_t v148 = *(void *)(v0 + 232);
      uint64_t v119 = v0 + 112;
      uint64_t v121 = v0 + 120;
      id v143 = v12;
      os_log_type_t typea = v49;
      uint64_t v53 = *(char **)(v0 + 184);
      uint64_t v54 = *(void *)(v0 + 192);
      uint64_t v55 = swift_slowAlloc(42LL, -1LL);
      uint64_t v123 = swift_slowAlloc(128LL, -1LL);
      v149[0] = v123;
      *(_DWORD *)uint64_t v55 = 136315906;
      uint64_t v56 = _typeName(_:qualified:)(v54, 0LL);
      *(void *)(v0 + 96) = sub_10015ADC4(v56, v57, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2080;
      if (*(void *)&v53[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v58 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v58 = 7496003LL;
      }
      if (*(void *)&v53[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        unint64_t v59 = 0xE700000000000000LL;
      }
      else {
        unint64_t v59 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 104) = sub_10015ADC4(v58, v59, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v119, v55 + 14, v55 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 22) = 2080;
      *(void *)(v0 + 112) = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, v149);
      uint64_t v60 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v121, v55 + 24, v55 + 32);
      *(_WORD *)(v55 + 32) = 2080;
      id v12 = v143;
      uint64_t v61 = NearbyAdvertisement.identifier.getter(v60);
      *(void *)(v0 + 120) = sub_10015ADC4(v61, v62, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v145, v55 + 34, v55 + 42);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v48,  typea,  "[%s(%s)] %s <%s> Cancelling pending invitation request",  (uint8_t *)v55,  0x2Au);
      swift_arrayDestroy(v123, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      uint64_t v63 = v148;
      uint64_t v64 = v52;
    }

    else
    {
      int64_t v90 = *(void **)(v0 + 184);

      uint64_t v63 = v51;
      uint64_t v64 = v52;
    }

    v140(v63, v64);
    sub_10016083C(0LL, &qword_1003F86C8, off_100397330);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v41);
  }

  unint64_t v91 = v12;
  id result = [objc_allocWithZone(_MRGroupSessionJoinRequestProtobuf) init];
  *(void *)(v0 + 264) = result;
  if (result)
  {
    uint64_t v93 = result;
    uint64_t v95 = *(void *)(v0 + 192);
    uint64_t v94 = *(void *)(v0 + 200);
    uint64_t v96 = *(char **)(v0 + 184);
    id v97 = [v35 protobuf];
    [v93 setIdentity:v97];

    uint64_t v98 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56LL))(v94, 1LL, 1LL, v98);
    uint64_t v99 = *(void *)&v96[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_scanner];
    uint64_t v100 = (void *)swift_allocObject(&unk_1003A39E8, 88LL, 7LL);
    v100[2] = 0LL;
    v100[3] = 0LL;
    v100[4] = v96;
    v100[5] = v91;
    v100[6] = v132;
    v100[7] = v129;
    v100[8] = v99;
    v100[9] = v93;
    v100[10] = v95;
    id v101 = v91;
    uint64_t v102 = v96;
    swift_retain(v99);
    id v103 = v93;
    uint64_t v104 = sub_100166B10(v94, (uint64_t)&unk_1003F86C0, (uint64_t)v100);
    *(void *)(v0 + 272) = v104;
    uint64_t v105 = *(void *)(v137 + v135);
    *(void *)(v137 + v135) = v104;
    swift_retain(v104);
    swift_release(v105);
    uint64_t v106 = (void *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    *(void *)(v0 + 280) = v106;
    uint64_t v107 = sub_10016083C(0LL, &qword_1003F86C8, off_100397330);
    uint64_t v108 = sub_100156B68(&qword_1003F86D0);
    void *v106 = v0;
    v106[1] = sub_10016870C;
    return (id)Task.value.getter(v0 + 88, v104, v107, v108, &protocol self-conformance witness table for Error);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10016870C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 288LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100168874;
  }
  else {
    uint64_t v3 = sub_1001687B4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001687B4()
{
  uint64_t v2 = *(void **)(v0 + 264);
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v3 = *(void **)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v7 = *(void *)(v0 + 200);

  swift_release(v1);
  uint64_t v8 = *(void *)(v0 + 88);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_100168874()
{
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void **)(v0 + 256);

  swift_release(v2);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100168920@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  os_log_s *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v44 = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_discoveredAdvertisements];
  id v45 = a2;
  id v46 = (unint64_t)a3;
  os_log_type_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(void *)v13 + 208LL);
  swift_retain(v13);
  swift_bridgeObjectRetain();
  v14(&v47, &v45);
  swift_bridgeObjectRelease();
  id result = swift_release(v13);
  if (v47)
  {
    *a5 = v47;
  }

  else
  {
    id v43 = v12;
    uint64_t v16 = v9;
    uint64_t v17 = v44;
    id v45 = 0LL;
    id v46 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(40LL);
    swift_bridgeObjectRelease();
    id v45 = 0xD000000000000026LL;
    id v46 = 0x800000010033A6F0LL;
    v18._countAndFlagsBits = a2;
    v18._object = a3;
    String.append(_:)(v18);
    uint64_t v20 = v45;
    uint64_t v19 = v46;
    if (qword_1003FE560 != -1) {
      swift_once(&qword_1003FE560, sub_100165100);
    }
    uint64_t v21 = sub_10015ADAC(v16, (uint64_t)qword_1003FE568);
    uint64_t v22 = v10;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v43, v21, v16);
    unint64_t v23 = a1;
    swift_bridgeObjectRetain_n(v19, 2LL);
    uint64_t v24 = v23;
    unint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    uint64_t v26 = static os_log_type_t.error.getter();
    uint64_t v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v28 = swift_slowAlloc(42LL, -1LL);
      uint64_t v42 = v22;
      id v29 = v28;
      uint64_t v41 = swift_slowAlloc(128LL, -1LL);
      id v45 = v41;
      *(_DWORD *)id v29 = 136315906;
      uint64_t v40 = v27;
      uint64_t v30 = _typeName(_:qualified:)(v17, 0LL);
      id v44 = v20;
      uint64_t v47 = sub_10015ADC4(v30, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      if (*(void *)&v24[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v32 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v32 = 7496003LL;
      }
      if (*(void *)&v24[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v33 = 0xE700000000000000LL;
      }
      else {
        uint64_t v33 = 0xE300000000000000LL;
      }
      uint64_t v47 = sub_10015ADC4(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v29 + 14, v29 + 22);

      uint64_t v20 = v44;
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      uint64_t v47 = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v29 + 24, v29 + 32);
      *(_WORD *)(v29 + 32) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v47 = sub_10015ADC4(v20, v19, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v29 + 34, v29 + 42);
      swift_bridgeObjectRelease_n(v19, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v40,  "[%s(%s)] %s %{public}s",  (uint8_t *)v29,  0x2Au);
      id v34 = v41;
      swift_arrayDestroy(v41, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v16);
    }

    else
    {

      swift_bridgeObjectRelease_n(v19, 2LL);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v43, v16);
    }

    type metadata accessor for MRGroupSessionError(0LL);
    id v36 = v35;
    uint64_t v47 = 2LL;
    uint64_t v37 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    uint64_t v38 = sub_1001FC09C((uint64_t)&v47, v20, v19, 0LL, v36, v37, (uint64_t)&v45);
    return swift_willThrow(v38);
  }

  return result;
}

uint64_t sub_100168D74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[24] = v15;
  v8[25] = v16;
  v8[22] = a7;
  v8[23] = a8;
  v8[20] = a5;
  v8[21] = a6;
  v8[18] = a1;
  v8[19] = a4;
  sub_100172478();
  v8[26] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[27] = v10;
  v8[28] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v8[29] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[30] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[31] = swift_task_alloc(v13);
  v8[32] = swift_task_alloc(v13);
  return swift_task_switch(sub_100168E1C, 0LL, 0LL);
}

uint64_t sub_100168E1C()
{
  uint64_t v1 = v0 + 2;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[22];
  uint64_t v7 = (void *)v0[19];
  uint64_t v6 = (void *)v0[20];
  uint64_t v8 = sub_10015ADAC(v3, (uint64_t)qword_1003FE568);
  v0[33] = v8;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[34] = v9;
  v9(v2, v8, v3);
  id v10 = v7;
  id v11 = v6;
  swift_bridgeObjectRetain_n(v5, 2LL);
  id v12 = v10;
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = v0[32];
  uint64_t v17 = v0[29];
  uint64_t v18 = v0[30];
  if (v15)
  {
    id v44 = v0 + 15;
    uint64_t v52 = v0[30];
    uint64_t v19 = v0[25];
    id v46 = v0 + 16;
    uint64_t v47 = v0 + 17;
    uint64_t v20 = (void *)v0[20];
    unint64_t v48 = v0[22];
    uint64_t v49 = v0[21];
    uint64_t v21 = (char *)v0[19];
    uint64_t v51 = v0[32];
    uint64_t v22 = swift_slowAlloc(52LL, -1LL);
    id v45 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(128LL, -1LL);
    uint64_t v53 = v50;
    *(_DWORD *)uint64_t v22 = 136316162;
    uint64_t v23 = _typeName(_:qualified:)(v19, 0LL);
    v0[13] = sub_10015ADC4(v23, v24, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    if (*(void *)&v21[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v25 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v25 = 7496003LL;
    }
    if (*(void *)&v21[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v26 = 0xE700000000000000LL;
    }
    else {
      unint64_t v26 = 0xE300000000000000LL;
    }
    v0[14] = sub_10015ADC4(v25, v26, &v53);
    uint64_t v1 = v0 + 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v44, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v22 + 22) = 2080;
    v0[15] = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v46, v22 + 24, v22 + 32);
    *(_WORD *)(v22 + 32) = 2112;
    v0[16] = v20;
    id v27 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v46, v47, v22 + 34, v22 + 42);
    *id v45 = v20;

    *(_WORD *)(v22 + 42) = 2080;
    swift_bridgeObjectRetain();
    v0[17] = sub_10015ADC4(v49, v48, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v0 + 18, v22 + 44, v22 + 52);
    swift_bridgeObjectRelease_n(v48, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[%s(%s)] %s Requesting to join advertisement: %@ as %s",  (uint8_t *)v22,  0x34u);
    uint64_t v28 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v45, 1LL, v28);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_arrayDestroy(v50, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    id v29 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v29(v51, v17);
  }

  else
  {
    uint64_t v30 = v0[22];
    uint64_t v32 = (void *)v0[19];
    uint64_t v31 = (void *)v0[20];

    swift_bridgeObjectRelease_n(v30, 2LL);
    id v29 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v29(v16, v17);
  }

  v0[35] = v29;
  uint64_t v33 = (void *)v0[24];
  id v34 = (void *)kMREventGroupSessionJoinRequestSent;
  v0[6] = sub_1001698E8;
  v0[7] = 0LL;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_100169A74;
  v0[5] = &unk_1003A3A00;
  id v35 = _Block_copy(v1);
  id v36 = v34;
  MRAnalyticsSendEvent(v36, 0LL, v35);
  _Block_release(v35);

  id v37 = [v33 data];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    unint64_t v41 = v40;
  }

  else
  {
    uint64_t v39 = 0LL;
    unint64_t v41 = 0xF000000000000000LL;
  }

  v0[36] = v39;
  v0[37] = v41;
  uint64_t v42 = (void *)swift_task_alloc(async function pointer to NearbyInvitationScanner<>.request(_:displayName:userInfo:)[1]);
  v0[38] = v42;
  *uint64_t v42 = v0;
  v42[1] = sub_1001692F4;
  return NearbyInvitationScanner<>.request(_:displayName:userInfo:)(v0[28], v0[20], v0[21], v0[22], v39, v41);
}

uint64_t sub_1001692F4(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 304LL);
  v3[39] = a1;
  v3[40] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_10016987C;
  }

  else
  {
    sub_100171C30(v3[36], v3[37]);
    uint64_t v5 = sub_100169368;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100169368()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 312);
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    uint64_t v4 = swift_release(v3);
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 256);
    uint64_t v7 = *(void *)(v0 + 224);
    swift_willThrow(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }

  uint64_t v9 = InvitationRequest<>.Context.userInfo.getter(v2);
  if (v10 >> 60 == 15) {
    goto LABEL_9;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  id v13 = objc_allocWithZone(&OBJC_CLASS____MRGroupSessionJoinResponseProtobuf);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 initWithData:isa];

  if (!v15)
  {
LABEL_8:
    sub_100171C30(v11, v12);
LABEL_9:
    id v54 = 0LL;
    goto LABEL_10;
  }

  id v16 = [v15 joinURL];
  if (!v16)
  {

    goto LABEL_8;
  }

  uint64_t v17 = v16;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v54 = [(id)objc_opt_self(MRGroupSessionToken) tokenForJoinURLString:v18];

  sub_100171C30(v11, v12);
LABEL_10:
  uint64_t v19 = *(void *)(v0 + 312);
  uint64_t v20 = *(void **)(v0 + 152);
  (*(void (**)(void, void, void))(v0 + 272))( *(void *)(v0 + 248),  *(void *)(v0 + 264),  *(void *)(v0 + 232));
  id v21 = v20;
  swift_retain_n(v19, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void *)(v0 + 312);
  unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v28 = *(void *)(v0 + 232);
  if (v24)
  {
    uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 280);
    uint64_t v53 = *(void *)(v0 + 248);
    uint64_t v51 = v0 + 80;
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v30 = *(char **)(v0 + 152);
    uint64_t v31 = swift_slowAlloc(42LL, -1LL);
    uint64_t v52 = swift_slowAlloc(128LL, -1LL);
    v57[0] = v52;
    *(_DWORD *)uint64_t v31 = 136315906;
    uint64_t v32 = _typeName(_:qualified:)(v29, 0LL);
    *(void *)(v0 + 64) = sub_10015ADC4(v32, v33, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 12) = 2080;
    if (*(void *)&v30[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v34 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v34 = 7496003LL;
    }
    if (*(void *)&v30[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v35 = 0xE700000000000000LL;
    }
    else {
      unint64_t v35 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 72) = sub_10015ADC4(v34, v35, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v51, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v31 + 22) = 2080;
    *(void *)(v0 + 80) = sub_10015ADC4(0xD000000000000021LL, 0x800000010033A6C0LL, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v0 + 88, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2082;
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v25;
    uint64_t v36 = type metadata accessor for NearbyGroup(0LL);
    uint64_t v37 = sub_100156FEC( (unint64_t *)&unk_1003F8650,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroup,  (uint64_t)&protocol conformance descriptor for NearbyGroup);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
    *(void *)(v0 + 96) = sub_10015ADC4(v38, v39, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v31 + 34, v31 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v25, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[%s(%s)] %s Successfully joined NearbyGroup: %{public}s",  (uint8_t *)v31,  0x2Au);
    swift_arrayDestroy(v52, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    v55(v53, v28);
  }

  else
  {
    unint64_t v40 = *(void **)(v0 + 152);

    swift_release_n(v25, 2LL);
    v26(v27, v28);
  }

  uint64_t v41 = *(void *)(v0 + 312);
  uint64_t v42 = *(void *)(v0 + 256);
  uint64_t v56 = *(void *)(v0 + 248);
  uint64_t v44 = *(void *)(v0 + 216);
  uint64_t v43 = *(void *)(v0 + 224);
  uint64_t v45 = *(void *)(v0 + 208);
  id v46 = *(void **)(v0 + 144);
  type metadata accessor for MRDNearbyGroup(0LL);
  uint64_t v47 = swift_retain(v41);
  id v48 = sub_100184E68(v47);
  id v49 = [objc_allocWithZone((Class)MRDGroupSessionJoinResponse) initWithNearbyGroup:v48 publicSigningKeyData:0 joinToken:v54];

  swift_release(v41);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
  *id v46 = v49;
  swift_task_dealloc(v42);
  swift_task_dealloc(v56);
  swift_task_dealloc(v43);
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10016987C()
{
  uint64_t v1 = sub_100171C30(*(void *)(v0 + 288), *(void *)(v0 + 296));
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 224);
  swift_willThrow(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001698E8()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v0, v6);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventJoinSessionModeKey);
  *(void *)(inited + 40) = v2;
  uint64_t v3 = (void *)kMREventJoinSessionModeProximity;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = kMREventJoinSessionModeProximity;
  id v4 = v3;
  return sub_10016995C(inited);
}

unint64_t sub_10016995C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68((uint64_t *)&unk_1003F86A0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    id v10 = v9;
    unint64_t result = sub_10015CAD4(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

Class sub_100169A74(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  swift_release(v2);
  sub_10016083C(0LL, &qword_1003F9F30, &OBJC_CLASS___NSObject_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  return isa;
}

uint64_t sub_100169C1C(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1003F85A4;
  a3;
  id v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *id v10 = v3;
  v10[1] = sub_100169CA8;
  return sub_10016785C(v6, v8);
}

uint64_t sub_100169CA8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *(void *)(*v2 + 32);
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc(v5);

  swift_bridgeObjectRelease(v6);
  uint64_t v9 = *(void (***)(void, void, void))(v8 + 24);
  if (v3)
  {
    id v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    ((void (**)(void, void *, void))v9)[2](*(void *)(v8 + 24), a1, 0LL);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_100169D74(uint64_t a1, uint64_t a2)
{
  v3[32] = a1;
  v3[33] = v2;
  v3[34] = swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[35] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[36] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[37] = swift_task_alloc(v6);
  v3[38] = swift_task_alloc(v6);
  v3[39] = swift_task_alloc(v6);
  v3[40] = swift_task_alloc(v6);
  v3[41] = swift_task_alloc(v6);
  return swift_task_switch(sub_100169E40, 0LL, 0LL);
}

id sub_100169E40()
{
  id v1 = [*(id *)(v0 + 256) invitationData];
  if (!v1)
  {
    if (qword_1003FE560 != -1) {
      swift_once(&qword_1003FE560, sub_100165100);
    }
    uint64_t v33 = v0 + 16;
    v180 = (void *)(v0 + 24);
    uint64_t v35 = *(void *)(v0 + 288);
    uint64_t v34 = *(void *)(v0 + 296);
    uint64_t v36 = *(void *)(v0 + 280);
    uint64_t v38 = *(void **)(v0 + 256);
    uint64_t v37 = *(void **)(v0 + 264);
    uint64_t v39 = sub_10015ADAC(v36, (uint64_t)qword_1003FE568);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v34, v39, v36);
    id v40 = v37;
    id v41 = v38;
    id v42 = v40;
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v44 = static os_log_type_t.error.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    uint64_t v47 = *(void *)(v0 + 288);
    uint64_t v46 = *(void *)(v0 + 296);
    uint64_t v48 = *(void *)(v0 + 280);
    if (v45)
    {
      uint64_t v173 = *(void *)(v0 + 296);
      uint64_t v176 = *(void *)(v0 + 280);
      uint64_t v157 = v0 + 48;
      uint64_t v164 = v0 + 56;
      uint64_t v50 = *(char **)(v0 + 264);
      uint64_t v49 = *(void *)(v0 + 272);
      uint64_t v51 = *(void **)(v0 + 256);
      uint64_t v52 = swift_slowAlloc(42LL, -1LL);
      os_log_type_t typea = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v167 = swift_slowAlloc(96LL, -1LL);
      v184[0] = v167;
      *(_DWORD *)uint64_t v52 = 136315906;
      uint64_t v53 = _typeName(_:qualified:)(v49, 0LL);
      *(void *)(v0 + 32) = sub_10015ADC4(v53, v54, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      if (*(void *)&v50[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v55 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v55 = 7496003LL;
      }
      if (*(void *)&v50[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        unint64_t v56 = 0xE700000000000000LL;
      }
      else {
        unint64_t v56 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 40) = sub_10015ADC4(v55, v56, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v157, v52 + 14, v52 + 22);

      uint64_t v33 = v0 + 16;
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2080;
      *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_10015ADC4(0xD000000000000017LL, 0x800000010033A600LL, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v157, v164, v52 + 24, v52 + 32);
      *(_WORD *)(v52 + 32) = 2114;
      *(void *)(v0 + 56) = v51;
      id v57 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v0 + 64, v52 + 34, v52 + 42);
      *os_log_type_t typea = v51;

      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "[%s(%s)] %s Token does not contain invitation: %{public}@",  (uint8_t *)v52,  0x2Au);
      uint64_t v58 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(typea, 1LL, v58);
      swift_slowDealloc(typea, -1LL, -1LL);
      swift_arrayDestroy(v167, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v173, v176);
    }

    else
    {
      uint64_t v74 = *(void **)(v0 + 256);
      uint64_t v75 = *(void **)(v0 + 264);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    }

    type metadata accessor for MRGroupSessionError(0LL);
    uint64_t v77 = v76;
    void *v180 = 12LL;
    uint64_t v78 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    uint64_t v79 = sub_1001FC09C((uint64_t)v180, 0xD000000000000021LL, 0x800000010033A5D0LL, 0LL, v77, v78, v33);
    swift_willThrow(v79);
    goto LABEL_45;
  }

  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v5 = v4;

  unint64_t v175 = v5;
  uint64_t v178 = v3;
  *(void *)(v0 + 336) = v3;
  *(void *)(v0 + 344) = v5;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v6 = v0 + 264;
  v179 = (void **)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 288);
  id v10 = *(void **)(v0 + 256);
  uint64_t v9 = *(void **)(v0 + 264);
  uint64_t v11 = sub_10015ADAC(*(void *)(v0 + 280), (uint64_t)qword_1003FE568);
  *(void *)(v0 + 352) = v11;
  char v12 = *(void (**)(void))(v8 + 16);
  *(void *)(v0 + 360) = v12;
  v169 = (void (*)(void, uint64_t, void))v12;
  uint64_t v172 = v11;
  v12(v7);
  id v13 = v9;
  id v14 = v10;
  id v15 = v13;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 288);
  if (v18)
  {
    *(void *)os_log_type_t type = *(void *)(v0 + 288);
    uint64_t v151 = v0 + 240;
    uint64_t v153 = v0 + 248;
    uint64_t v155 = *(void *)(v0 + 328);
    uint64_t v156 = *(void *)(v0 + 280);
    os_log_type_t v23 = *(char **)(v0 + 264);
    uint64_t v22 = *(void *)(v0 + 272);
    BOOL v24 = *(void **)(v0 + 256);
    uint64_t v25 = swift_slowAlloc(42LL, -1LL);
    v152 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v154 = swift_slowAlloc(96LL, -1LL);
    v184[0] = v154;
    *(_DWORD *)uint64_t v25 = 136315906;
    uint64_t v26 = _typeName(_:qualified:)(v22, 0LL);
    *(void *)(v0 + 224) = sub_10015ADC4(v26, v27, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2080;
    if (*(void *)&v23[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v28 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v28 = 7496003LL;
    }
    if (*(void *)&v23[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v29 = 0xE700000000000000LL;
    }
    else {
      unint64_t v29 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 232) = sub_10015ADC4(v28, v29, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v151, v25 + 14, v25 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    *(void *)(v0 + 240) = sub_10015ADC4(0xD000000000000017LL, 0x800000010033A600LL, v184);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, v153, v25 + 24, v25 + 32);
    *(_WORD *)(v25 + 32) = 2112;
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v24;
    id v30 = v24;
    uint64_t v6 = v0 + 264;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v153, v179, v25 + 34, v25 + 42);
    void *v152 = v24;

    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s(%s)] %s with payload: %@", (uint8_t *)v25, 0x2Au);
    uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v152, 1LL, v31);
    swift_slowDealloc(v152, -1LL, -1LL);
    swift_arrayDestroy(v154, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL);
    v32(v155, v156);
  }

  else
  {
    unint64_t v59 = *(void **)v6;
    uint64_t v60 = *v179;

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v32(v19, v20);
  }

  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v32;
  uint64_t v61 = (void *)objc_opt_self(&OBJC_CLASS___MRDMusicUserStateCenter);
  id v62 = [v61 sharedCenter];
  id v63 = [v62 localActiveIdentity];
  *(void *)(v0 + 376) = v63;

  if (!v63)
  {
LABEL_31:
    uint64_t v80 = (void *)(v0 + 72);
    unint64_t v81 = *(void **)(v0 + 264);
    v169(*(void *)(v0 + 304), v172, *(void *)(v0 + 280));
    id v82 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v83 = static os_log_type_t.error.getter();
    BOOL v84 = os_log_type_enabled(v82, v83);
    uint64_t v85 = *(char **)(v0 + 264);
    if (v84)
    {
      os_log_type_t v174 = v83;
      v158 = (void *)(v0 + 104);
      *(void *)typeb = v0 + 96;
      uint64_t v86 = *(void *)(v0 + 272);
      uint64_t v87 = swift_slowAlloc(42LL, -1LL);
      id v165 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v170 = swift_slowAlloc(96LL, -1LL);
      v184[0] = v170;
      *(_DWORD *)uint64_t v87 = 136315906;
      uint64_t v88 = _typeName(_:qualified:)(v86, 0LL);
      *(void *)(v0 + 80) = sub_10015ADC4(v88, v89, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      if (*(void *)&v85[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        uint64_t v90 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v90 = 7496003LL;
      }
      if (*(void *)&v85[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
        unint64_t v91 = 0xE700000000000000LL;
      }
      else {
        unint64_t v91 = 0xE300000000000000LL;
      }
      *(void *)(v0 + 8_Block_object_dispose(va, 8) = sub_10015ADC4(v90, v91, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, *(void *)typeb, v87 + 14, v87 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 22) = 2080;
      *(void *)(v0 + 96) = sub_10015ADC4(0xD000000000000017LL, 0x800000010033A600LL, v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)typeb, v158, v87 + 24, v87 + 32);
      *(_WORD *)(v87 + 32) = 2112;
      id v92 = [v61 sharedCenter];
      id v93 = [v92 localActiveIdentity];

      if (v93)
      {
        uint64_t v94 = v0 + 112;
        *(void *)(v0 + 112) = v93;
        uint64_t v95 = v0 + 120;
      }

      else
      {
        void *v158 = 0LL;
        uint64_t v94 = v0 + 104;
        uint64_t v95 = v0 + 112;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, v95, v87 + 34, v87 + 42);
      uint64_t v98 = v0 + 64;
      uint64_t v99 = v178;
      uint64_t v109 = *(void *)(v0 + 304);
      uint64_t v110 = *(void *)(v0 + 280);
      *id v165 = v93;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  v174,  "[%s(%s)] %s Can't request to join with no display name. Current identity: %@",  (uint8_t *)v87,  0x2Au);
      uint64_t v111 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v165, 1LL, v111);
      swift_slowDealloc(v165, -1LL, -1LL);
      swift_arrayDestroy(v170, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v170, -1LL, -1LL);
      swift_slowDealloc(v87, -1LL, -1LL);

      v32(v109, v110);
      uint64_t v80 = (void *)(v0 + 72);
    }

    else
    {
      uint64_t v96 = *(void *)(v0 + 304);
      uint64_t v97 = *(void *)(v0 + 280);

      v32(v96, v97);
      uint64_t v98 = v0 + 64;
      uint64_t v99 = v178;
    }

    type metadata accessor for MRGroupSessionError(0LL);
    uint64_t v113 = v112;
    void *v80 = 4LL;
    uint64_t v114 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
    uint64_t v115 = sub_1001FC09C((uint64_t)v80, 0xD000000000000022LL, 0x800000010033A620LL, 0LL, v113, v114, v98);
    swift_willThrow(v115);
    sub_1001608B8(v99, v175);
LABEL_45:
    uint64_t v116 = *(void *)(v0 + 320);
    uint64_t v118 = *(void *)(v0 + 304);
    uint64_t v117 = *(void *)(v0 + 312);
    uint64_t v119 = *(void *)(v0 + 296);
    swift_task_dealloc(*(void *)(v0 + 328));
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  id v64 = [v63 displayName];
  if (!v64)
  {

    goto LABEL_31;
  }

  uint64_t v65 = v64;
  uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
  uint64_t v68 = v67;

  *(void *)(v0 + 384) = v66;
  *(void *)(v0 + 392) = v68;
  id result = [objc_allocWithZone(_MRGroupSessionJoinRequestProtobuf) init];
  *(void *)(v0 + 400) = result;
  if (result)
  {
    uint64_t v70 = result;
    id v71 = [v63 protobuf];
    [v70 setIdentity:v71];

    id v72 = [(id)objc_opt_self(MRSharedSettings) currentSettings];
    LOBYTE(v70) = [v72 supportGroupSessionHome];

    if ((v70 & 1) != 0)
    {
      *(void *)(v0 + 40_Block_object_dispose(va, 8) = sub_1001653B4();
      uint64_t v73 = (void *)swift_task_alloc(dword_1003FCF1C);
      *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v73;
      *uint64_t v73 = v0;
      v73[1] = sub_10016AF90;
      return (id)sub_100296D48();
    }

    else
    {
      uint64_t v100 = *(void *)(v0 + 384);
      __int128 v182 = *(_OWORD *)(v0 + 336);
      type metadata accessor for MRGroupSessionError(0LL);
      uint64_t v102 = v101;
      *(void *)(v0 + 12_Block_object_dispose(va, 8) = 12LL;
      uint64_t v103 = swift_task_alloc(64LL);
      __int128 v104 = *(_OWORD *)(v6 + 128);
      *(_OWORD *)(v103 + swift_weakDestroy(v0 + 16) = v182;
      *(void *)(v103 + 32) = v100;
      *(_OWORD *)(v103 + 40) = v104;
      uint64_t v105 = (void **)v6;
      uint64_t v106 = sub_100156B68(&qword_1003F8638);
      uint64_t v107 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
      sub_1001FC1C0( v0 + 128,  0xD000000000000022LL,  0x800000010033A650LL,  (uint64_t)sub_100171FF0,  v103,  v102,  v106,  v107);
      uint64_t v108 = *(void **)(v0 + 400);
      uint64_t v183 = v107;
      v166 = v105;
      uint64_t v120 = *(void *)(v0 + 352);
      uint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
      uint64_t v122 = *(void *)(v0 + 320);
      uint64_t v123 = *(void *)(v0 + 280);
      id v124 = *(void **)(v0 + 264);
      swift_bridgeObjectRelease();
      swift_task_dealloc(v103);
      uint64_t v181 = *(void *)(v0 + 120);
      *(void *)(v0 + 432) = v181;
      v121(v122, v120, v123);
      id v125 = v124;
      id v126 = v108;
      id v127 = v125;
      uint64_t v128 = (os_log_s *)Logger.logObject.getter(v126);
      os_log_type_t v129 = static os_log_type_t.info.getter();
      BOOL v130 = os_log_type_enabled(v128, v129);
      uint64_t v131 = *(void **)(v0 + 400);
      uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
      uint64_t v133 = *(void *)(v0 + 320);
      uint64_t v134 = *(void *)(v0 + 280);
      if (v130)
      {
        uint64_t v177 = *(void *)(v0 + 280);
        uint64_t v159 = v0 + 208;
        v136 = *(char **)(v0 + 264);
        uint64_t v135 = *(void *)(v0 + 272);
        uint64_t v137 = swift_slowAlloc(32LL, -1LL);
        id v168 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v171 = swift_slowAlloc(64LL, -1LL);
        v184[0] = v171;
        *(_DWORD *)uint64_t v137 = 136315650;
        os_log_type_t typec = v129;
        uint64_t v138 = _typeName(_:qualified:)(v135, 0LL);
        *(void *)(v0 + 192) = sub_10015ADC4(v138, v139, v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v137 + 4, v137 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v137 + 12) = 2080;
        if (*(void *)&v136[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
          uint64_t v140 = 0x646F50656D6F48LL;
        }
        else {
          uint64_t v140 = 7496003LL;
        }
        if (*(void *)&v136[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
          unint64_t v141 = 0xE700000000000000LL;
        }
        else {
          unint64_t v141 = 0xE300000000000000LL;
        }
        *(void *)(v0 + 200) = sub_10015ADC4(v140, v141, v184);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v159, v137 + 14, v137 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v137 + 22) = 2112;
        *(void *)(v0 + 20_Block_object_dispose(va, 8) = v131;
        id v142 = v131;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v159, v0 + 216, v137 + 24, v137 + 32);
        *id v168 = v131;

        _os_log_impl( (void *)&_mh_execute_header,  v128,  typec,  "[%s(%s)] Requesting to join session with inner request: %@",  (uint8_t *)v137,  0x20u);
        uint64_t v143 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v168, 1LL, v143);
        swift_slowDealloc(v168, -1LL, -1LL);
        swift_arrayDestroy(v171, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v171, -1LL, -1LL);
        swift_slowDealloc(v137, -1LL, -1LL);

        v132(v133, v177);
        os_log_type_t v144 = v166;
      }

      else
      {
        os_log_type_t v144 = v166;
        uint64_t v145 = *v166;

        v132(v133, v134);
      }

      uint64_t v146 = *(void *)(v0 + 256);
      *(void *)(v0 + 144) = 6LL;
      uint64_t v147 = swift_task_alloc(48LL);
      *(void *)(v0 + 440) = v147;
      __int128 v148 = *(_OWORD *)v144;
      *(void *)(v147 + swift_weakDestroy(v0 + 16) = v146;
      *(void *)(v147 + 24) = v181;
      *(_OWORD *)(v147 + 32) = v148;
      v149 = (void *)swift_task_alloc(dword_1003FA63C);
      *(void *)(v0 + 44_Block_object_dispose(va, 8) = v149;
      uint64_t v150 = type metadata accessor for NearbyGroup(0LL);
      *(void *)(v0 + 456) = v150;
      void *v149 = v0;
      v149[1] = sub_10016B64C;
      v184[13] = v183;
      return (id)sub_1001FC2D0( v0 + 136,  v0 + 144,  0xD000000000000013LL,  0x800000010033A680LL,  (uint64_t)&unk_1003F8648,  v147,  v102,  v150);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10016AF90(uint64_t a1)
{
  uint64_t v3 = *(void **)(*(void *)v1 + 408LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 416LL);
  *(void *)(*(void *)v1 + 424LL) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_10016B01C, 0LL, 0LL);
}

uint64_t sub_10016B01C()
{
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = *(void *)(v0 + 424);
  id v1 = [*(id *)(v0 + 256) sharedSecret];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    uint64_t v5 = v4;

    sub_10015B404(v64, v3, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = (uint64_t *)(v0 + 216);
  }

  else
  {
    uint64_t v6 = (uint64_t *)(v0 + 424);
  }

  uint64_t v7 = *(void **)(v0 + 400);
  uint64_t v8 = sub_1001711B4(*v6);
  swift_bridgeObjectRelease();
  sub_10016BBE8((uint64_t)v8);
  swift_release(v8);
  id v9 = objc_allocWithZone(&OBJC_CLASS___NSMutableArray);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithArray:isa];

  [v7 setOobKeys:v11];
  uint64_t v12 = *(void *)(v0 + 384);
  __int128 v62 = *(_OWORD *)(v0 + 336);
  type metadata accessor for MRGroupSessionError(0LL);
  uint64_t v14 = v13;
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = 12LL;
  uint64_t v15 = swift_task_alloc(64LL);
  __int128 v16 = *(_OWORD *)(v0 + 392);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = v62;
  *(void *)(v15 + 32) = v12;
  *(_OWORD *)(v15 + 40) = v16;
  uint64_t v17 = sub_100156B68(&qword_1003F8638);
  uint64_t v18 = sub_100156FEC( &qword_1003F8630,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D5B0);
  sub_1001FC1C0(v0 + 128, 0xD000000000000022LL, 0x800000010033A650LL, (uint64_t)sub_100171FF0, v15, v14, v17, v18);
  uint64_t v19 = *(void **)(v0 + 400);
  uint64_t v61 = v18;
  uint64_t v63 = v14;
  uint64_t v21 = *(void *)(v0 + 352);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 320);
  uint64_t v23 = *(void *)(v0 + 280);
  BOOL v24 = *(void **)(v0 + 264);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v15);
  uint64_t v25 = *(void *)(v0 + 120);
  *(void *)(v0 + 432) = v25;
  v20(v22, v21, v23);
  id v26 = v24;
  id v27 = v19;
  id v28 = v26;
  unint64_t v29 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v30 = static os_log_type_t.info.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v32 = *(void **)(v0 + 400);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
  uint64_t v34 = *(void *)(v0 + 320);
  uint64_t v35 = *(void *)(v0 + 280);
  if (v31)
  {
    uint64_t v55 = v0 + 208;
    uint64_t v60 = *(void *)(v0 + 280);
    uint64_t v36 = *(char **)(v0 + 264);
    uint64_t v37 = *(void *)(v0 + 272);
    uint64_t v59 = v25;
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v58 = v33;
    uint64_t v39 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    v64[0] = v57;
    *(_DWORD *)uint64_t v38 = 136315650;
    os_log_type_t type = v30;
    uint64_t v40 = _typeName(_:qualified:)(v37, 0LL);
    *(void *)(v0 + 192) = sub_10015ADC4(v40, v41, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    if (*(void *)&v36[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v42 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v42 = 7496003LL;
    }
    if (*(void *)&v36[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v43 = 0xE700000000000000LL;
    }
    else {
      unint64_t v43 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 200) = sub_10015ADC4(v42, v43, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v55, v38 + 14, v38 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2112;
    *(void *)(v0 + 20_Block_object_dispose(va, 8) = v32;
    id v44 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v0 + 216, v38 + 24, v38 + 32);
    *uint64_t v39 = v32;

    _os_log_impl( (void *)&_mh_execute_header,  v29,  type,  "[%s(%s)] Requesting to join session with inner request: %@",  (uint8_t *)v38,  0x20u);
    uint64_t v45 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v39, 1LL, v45);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    uint64_t v46 = v38;
    uint64_t v25 = v59;
    swift_slowDealloc(v46, -1LL, -1LL);

    v58(v34, v60);
    uint64_t v47 = (__int128 *)(v0 + 264);
  }

  else
  {
    uint64_t v47 = (__int128 *)(v0 + 264);
    uint64_t v48 = *(void **)(v0 + 264);

    v33(v34, v35);
  }

  uint64_t v49 = *(void *)(v0 + 256);
  *(void *)(v0 + 144) = 6LL;
  uint64_t v50 = swift_task_alloc(48LL);
  *(void *)(v0 + 440) = v50;
  __int128 v51 = *v47;
  *(void *)(v50 + swift_weakDestroy(v0 + 16) = v49;
  *(void *)(v50 + 24) = v25;
  *(_OWORD *)(v50 + 32) = v51;
  uint64_t v52 = (void *)swift_task_alloc(dword_1003FA63C);
  *(void *)(v0 + 44_Block_object_dispose(va, 8) = v52;
  uint64_t v53 = type metadata accessor for NearbyGroup(0LL);
  *(void *)(v0 + 456) = v53;
  void *v52 = v0;
  v52[1] = sub_10016B64C;
  v64[14] = v61;
  return sub_1001FC2D0( v0 + 136,  v0 + 144,  0xD000000000000013LL,  0x800000010033A680LL,  (uint64_t)&unk_1003F8648,  v50,  v63,  v53);
}

uint64_t sub_10016B64C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_10016BB1C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 440));
    uint64_t v4 = sub_10016B704;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10016B704()
{
  id v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 360))( *(void *)(v0 + 312),  *(void *)(v0 + 352),  *(void *)(v0 + 280));
  id v3 = v1;
  uint64_t v40 = v2;
  swift_retain_n(v2, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v30 = *(void *)(v0 + 456);
    uint64_t v36 = *(void *)(v0 + 312);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v34 = *(void *)(v0 + 280);
    uint64_t v7 = *(char **)(v0 + 264);
    uint64_t v8 = swift_slowAlloc(42LL, -1LL);
    uint64_t v32 = swift_slowAlloc(128LL, -1LL);
    uint64_t v41 = v32;
    *(_DWORD *)uint64_t v8 = 136315906;
    uint64_t v9 = _typeName(_:qualified:)(v6, 0LL);
    *(void *)(v0 + 152) = sub_10015ADC4(v9, v10, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    if (*(void *)&v7[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v11 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v11 = 7496003LL;
    }
    if (*(void *)&v7[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v12 = 0xE700000000000000LL;
    }
    else {
      unint64_t v12 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 160) = sub_10015ADC4(v11, v12, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 22) = 2080;
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = sub_10015ADC4(0xD000000000000017LL, 0x800000010033A600LL, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v8 + 24, v8 + 32);
    *(_WORD *)(v8 + 32) = 2080;
    *(void *)(v0 + 176) = v2;
    uint64_t v13 = sub_100156FEC( (unint64_t *)&unk_1003F8650,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyGroup,  (uint64_t)&protocol conformance descriptor for NearbyGroup);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v30, v13);
    *(void *)(v0 + 184) = sub_10015ADC4(v14, v15, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v8 + 34, v8 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v2, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%s(%s)] %s Successfully joined NearbyGroup: %s",  (uint8_t *)v8,  0x2Au);
    swift_arrayDestroy(v32, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    v38(v36, v34);
  }

  else
  {
    __int128 v16 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 312);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v19 = *(void **)(v0 + 264);

    swift_release_n(v40, 2LL);
    v16(v17, v18);
  }

  uint64_t v20 = *(void *)(v0 + 432);
  uint64_t v21 = *(void **)(v0 + 400);
  uint64_t v22 = *(void **)(v0 + 376);
  uint64_t v24 = *(void *)(v0 + 336);
  unint64_t v23 = *(void *)(v0 + 344);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v33 = *(void *)(v0 + 320);
  uint64_t v35 = *(void *)(v0 + 312);
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v39 = *(void *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 256);
  type metadata accessor for MRDNearbyGroup(0LL);
  uint64_t v26 = swift_retain(v40);
  id v27 = sub_100184E68(v26);
  id v28 = [objc_allocWithZone((Class)MRDGroupSessionJoinResponse) initWithNearbyGroup:v27 publicSigningKeyData:0 joinToken:v25];

  swift_release(v40);
  swift_release(v20);

  sub_1001608B8(v24, v23);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(id))(v0 + 8))(v28);
}

uint64_t sub_10016BB1C()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 440);
  id v3 = *(void **)(v0 + 400);
  uint64_t v5 = *(void *)(v0 + 336);
  unint64_t v4 = *(void *)(v0 + 344);

  sub_1001608B8(v5, v4);
  swift_release(v1);
  swift_task_dealloc(v2);
  uint64_t v6 = *(void *)(v0 + 320);
  uint64_t v8 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v9 = *(void *)(v0 + 296);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_10016BBE8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
    sub_10016F76C(0, v1, 0);
    uint64_t v2 = &_swiftEmptyArrayStorage;
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain();
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10016F76C(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10016F76C(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      sub_100160944(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_10016BD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[23] = a4;
  v5[24] = a5;
  v5[21] = a2;
  v5[22] = a3;
  v5[20] = a1;
  uint64_t v6 = sub_100156B68(&qword_1003F82F0);
  v5[25] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v5[26] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[27] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v5[28] = v9;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[29] = swift_task_alloc(v10);
  v5[30] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  v5[31] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[32] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[33] = swift_task_alloc(v13);
  v5[34] = swift_task_alloc(v13);
  return swift_task_switch(sub_10016BDE4, 0LL, 0LL);
}

uint64_t sub_10016BDE4()
{
  id v1 = [(id)v0[21] sharedSecret];
  if (v1)
  {

    uint64_t v2 = (void **)&kMREventJoinSessionModeWHAAutoJoin;
  }

  else
  {
    uint64_t v2 = (void **)&kMREventJoinSessionModeQRCode;
  }

  id v3 = *v2;
  v0[35] = *v2;
  unint64_t v4 = (void *)kMREventGroupSessionJoinRequestSent;
  uint64_t v5 = swift_allocObject(&unk_1003A3920, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
  v0[6] = sub_100172160;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_100169A74;
  v0[5] = &unk_1003A3938;
  uint64_t v6 = _Block_copy(v0 + 2);
  uint64_t v7 = v0[7];
  id v8 = v3;
  id v9 = v4;
  swift_release(v7);
  MRAnalyticsSendEvent(v9, 0LL, v6);
  _Block_release(v6);

  v0[36] = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_10016BF28;
  return v12();
}

uint64_t sub_10016BF28(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 288);
  *(void *)(v3 + 296) = a1;
  *(void *)(v3 + 304) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10016C920;
  }
  else {
    uint64_t v5 = sub_10016BF94;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

id sub_10016BF94()
{
  uint64_t v100 = v0 + 17;
  uint64_t v1 = &qword_1003FE000;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v2 = (void *)v0[37];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[32];
  uint64_t v6 = (void *)v0[23];
  uint64_t v7 = sub_10015ADAC(v4, (uint64_t)qword_1003FE568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v7, v4);
  id v8 = v6;
  id v9 = v2;
  id v10 = v8;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v14 = (void *)v0[37];
  uint64_t v15 = v0[34];
  uint64_t v16 = v0[31];
  uint64_t v17 = v0[32];
  if (v13)
  {
    uint64_t v97 = v0[34];
    uint64_t v18 = (char *)v0[23];
    uint64_t v19 = v0[24];
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    id v93 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v94 = swift_slowAlloc(64LL, -1LL);
    v102[0] = v94;
    *(_DWORD *)uint64_t v20 = 136315650;
    uint64_t v21 = _typeName(_:qualified:)(v19, 0LL);
    v0[17] = sub_10015ADC4(v21, v22, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, v0 + 18, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    if (*(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v23 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v23 = 7496003LL;
    }
    if (*(void *)&v18[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v24 = 0xE700000000000000LL;
    }
    else {
      unint64_t v24 = 0xE300000000000000LL;
    }
    v0[18] = sub_10015ADC4(v23, v24, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v20 + 14, v20 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2112;
    v0[19] = v14;
    id v25 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v20 + 24, v20 + 32);
    void *v93 = v14;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s(%s)] Got join response: %@", (uint8_t *)v20, 0x20u);
    uint64_t v26 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v93, 1LL, v26);
    swift_slowDealloc(v93, -1LL, -1LL);
    swift_arrayDestroy(v94, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    uint64_t v27 = v20;
    uint64_t v1 = &qword_1003FE000;
    swift_slowDealloc(v27, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v97, v16);
  }

  else
  {
    id v28 = (void *)v0[23];

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }

  unint64_t v29 = (void *)v0[37];
  uint64_t v30 = (void *)kMREventGroupSessionJoinResponseReceived;
  uint64_t v31 = swift_allocObject(&unk_1003A3970, 24LL, 7LL);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v29;
  v0[12] = sub_1001721E4;
  v0[13] = v31;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256LL;
  v0[10] = sub_100169A74;
  v0[11] = &unk_1003A3988;
  uint64_t v32 = _Block_copy(v0 + 8);
  uint64_t v33 = v0[13];
  v29;
  id v34 = v30;
  swift_release(v33);
  MRAnalyticsSendEvent(v34, 0LL, v32);
  _Block_release(v32);

  uint64_t v35 = InvitationJoinResponse.sessionIdentifier.getter();
  if (v36)
  {
    uint64_t v37 = v0[26];
    uint64_t v38 = v0[27];
    uint64_t v39 = v0[25];
    UUID.init(uuidString:)(v35);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1LL, v37) != 1)
    {
      uint64_t v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[27] + 32LL);
      v76(v0[30], v0[25], v0[26]);
      id result = [(id)objc_opt_self(MRUserSettings) currentSettings];
      if (result)
      {
        uint64_t v77 = result;
        uint64_t v79 = v0[29];
        uint64_t v78 = v0[30];
        uint64_t v81 = v0[27];
        uint64_t v80 = v0[28];
        uint64_t v82 = v0[26];
        [result groupSessionNearbyGroupJoinTimeout];
        double v84 = v83;

        uint64_t v85 = static Duration.seconds(_:)(v84);
        uint64_t v87 = v86;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v79, v78, v82);
        uint64_t v88 = *(unsigned __int8 *)(v81 + 80);
        uint64_t v89 = (v88 + 16) & ~v88;
        uint64_t v90 = swift_allocObject(&unk_1003A39C0, v89 + v80, v88 | 7);
        v0[39] = v90;
        v76(v90 + v89, v79, v82);
        unint64_t v91 = (void *)swift_task_alloc(dword_1003FAB24);
        v0[40] = v91;
        uint64_t v92 = type metadata accessor for NearbyGroup(0LL);
        void *v91 = v0;
        v91[1] = sub_10016C818;
        return (id)withTimeout<A>(duration:_:)(v0[20], v85, v87, (uint64_t)&unk_1003F8678, v90, v92);
      }

      else
      {
        __break(1u);
      }

      return result;
    }

    sub_1001603DC(v0[25], &qword_1003F82F0);
  }

  uint64_t v40 = (void *)v0[37];
  uint64_t v41 = (void *)v0[35];
  unint64_t v42 = sub_10017226C();
  uint64_t v43 = swift_allocError(&type metadata for NearbySessionsListenerImplementation.Errors, v42, 0LL, 0LL);
  *id v44 = 1;
  swift_willThrow(v43);

  if (v1[172] != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v46 = v0[32];
  uint64_t v45 = v0[33];
  uint64_t v47 = v0[31];
  uint64_t v48 = (void *)v0[23];
  uint64_t v49 = sub_10015ADAC(v47, (uint64_t)qword_1003FE568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v49, v47);
  id v50 = v48;
  swift_errorRetain(v43);
  id v51 = v50;
  uint64_t v52 = swift_errorRetain(v43);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.error.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v57 = v0[32];
  uint64_t v56 = v0[33];
  uint64_t v58 = v0[31];
  if (v55)
  {
    aBlock = (void *)v0[31];
    uint64_t v99 = v0[33];
    uint64_t v59 = (char *)v0[23];
    uint64_t v60 = v0[24];
    uint64_t v98 = v0[32];
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    uint64_t v95 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v96 = swift_slowAlloc(64LL, -1LL);
    v102[0] = v96;
    *(_DWORD *)uint64_t v61 = 136315650;
    uint64_t v62 = _typeName(_:qualified:)(v60, 0LL);
    v0[16] = sub_10015ADC4(v62, v63, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v100, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 12) = 2080;
    if (*(void *)&v59[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v64 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v64 = 7496003LL;
    }
    if (*(void *)&v59[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v65 = 0xE700000000000000LL;
    }
    else {
      unint64_t v65 = 0xE300000000000000LL;
    }
    v0[14] = sub_10015ADC4(v64, v65, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v61 + 14, v61 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v61 + 22) = 2112;
    swift_errorRetain(v43);
    uint64_t v66 = _swift_stdlib_bridgeErrorToNSError(v43);
    v0[15] = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v61 + 24, v61 + 32);
    uint64_t *v95 = v66;
    swift_errorRelease(v43);
    swift_errorRelease(v43);
    _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "[%s(%s)] failed to request access, reason: %@",  (uint8_t *)v61,  0x20u);
    uint64_t v67 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v95, 1LL, v67);
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);

    uint64_t v68 = (*(uint64_t (**)(uint64_t, void *))(v98 + 8))(v99, aBlock);
  }

  else
  {
    id v69 = (void *)v0[23];

    swift_errorRelease(v43);
    swift_errorRelease(v43);

    uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  }

  uint64_t v70 = v0[33];
  uint64_t v71 = v0[34];
  uint64_t v73 = v0[29];
  uint64_t v72 = v0[30];
  uint64_t v74 = v0[25];
  swift_willThrow(v68);
  swift_task_dealloc(v71);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  return (id)((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10016C818()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 320);
  *(void *)(*v1 + 32_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 312));
  if (v0) {
    uint64_t v4 = sub_10016CC80;
  }
  else {
    uint64_t v4 = sub_10016C884;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10016C884()
{
  uint64_t v1 = *(void *)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 200);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016C920()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(void **)(v0 + 184);
  uint64_t v6 = sub_10015ADAC(v4, (uint64_t)qword_1003FE568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  id v7 = v5;
  swift_errorRetain(v1);
  id v8 = v7;
  uint64_t v9 = swift_errorRetain(v1);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 264);
  uint64_t v15 = *(void *)(v0 + 248);
  if (v12)
  {
    uint64_t v33 = v0 + 120;
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v17 = *(char **)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 248);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    id v34 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v35 = swift_slowAlloc(64LL, -1LL);
    v38[0] = v35;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v19 = _typeName(_:qualified:)(v16, 0LL);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = sub_10015ADC4(v19, v20, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    if (*(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v21 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v21 = 7496003LL;
    }
    if (*(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v22 = 0xE700000000000000LL;
    }
    else {
      unint64_t v22 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 112) = sub_10015ADC4(v21, v22, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v33, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v18 + 22) = 2112;
    swift_errorRetain(v1);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 120) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v0 + 128, v18 + 24, v18 + 32);
    uint64_t *v34 = v23;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%s(%s)] failed to request access, reason: %@",  (uint8_t *)v18,  0x20u);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v34, 1LL, v24);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v37, v36);
  }

  else
  {
    uint64_t v26 = *(void **)(v0 + 184);

    swift_errorRelease(v1);
    swift_errorRelease(v1);

    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }

  uint64_t v28 = *(void *)(v0 + 264);
  uint64_t v27 = *(void *)(v0 + 272);
  uint64_t v30 = *(void *)(v0 + 232);
  uint64_t v29 = *(void *)(v0 + 240);
  uint64_t v31 = *(void *)(v0 + 200);
  swift_willThrow(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016CC80()
{
  uint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 216);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v5 = *(void *)(v0 + 328);
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 264);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v9 = *(void **)(v0 + 184);
  uint64_t v10 = sub_10015ADAC(v8, (uint64_t)qword_1003FE568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
  id v11 = v9;
  swift_errorRetain(v5);
  id v12 = v11;
  uint64_t v13 = swift_errorRetain(v5);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = *(void *)(v0 + 256);
  uint64_t v17 = *(void *)(v0 + 264);
  uint64_t v19 = *(void *)(v0 + 248);
  if (v16)
  {
    uint64_t v37 = v0 + 120;
    uint64_t v41 = *(void *)(v0 + 264);
    uint64_t v21 = *(char **)(v0 + 184);
    uint64_t v20 = *(void *)(v0 + 192);
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v39 = swift_slowAlloc(64LL, -1LL);
    v42[0] = v39;
    *(_DWORD *)uint64_t v22 = 136315650;
    uint64_t v23 = _typeName(_:qualified:)(v20, 0LL);
    *(void *)(v0 + 12_Block_object_dispose(va, 8) = sub_10015ADC4(v23, v24, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    if (*(void *)&v21[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v25 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v25 = 7496003LL;
    }
    if (*(void *)&v21[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v26 = 0xE700000000000000LL;
    }
    else {
      unint64_t v26 = 0xE300000000000000LL;
    }
    *(void *)(v0 + 112) = sub_10015ADC4(v25, v26, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v37, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v22 + 22) = 2112;
    swift_errorRetain(v5);
    uint64_t v27 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 120) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, v0 + 128, v22 + 24, v22 + 32);
    *uint64_t v38 = v27;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[%s(%s)] failed to request access, reason: %@",  (uint8_t *)v22,  0x20u);
    uint64_t v28 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v38, 1LL, v28);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v41, v40);
  }

  else
  {
    uint64_t v30 = *(void **)(v0 + 184);

    swift_errorRelease(v5);
    swift_errorRelease(v5);

    uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }

  uint64_t v32 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 272);
  uint64_t v34 = *(void *)(v0 + 232);
  uint64_t v33 = *(void *)(v0 + 240);
  uint64_t v35 = *(void *)(v0 + 200);
  swift_willThrow(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10016D000(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  uint64_t v6 = sub_100156B68(&qword_1003F82F0);
  v2[11] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003F8680);
  v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F8688);
  v2[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[16] = v10;
  v2[17] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10016D0EC, 0LL, 0LL);
}

uint64_t sub_10016D0EC()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[6];
  type metadata accessor for NearbyGroup(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[18] = v8;
  v8(v4, v7, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v4, 0LL, 1LL, v6);
  static NearbyGroup.groups(service:identifier:)(1LL, v4);
  sub_1001603DC(v4, &qword_1003F82F0);
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10016D208;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0LL, 0LL, v0[15]);
}

uint64_t sub_10016D208()
{
  return swift_task_switch(sub_10016D25C, 0LL, 0LL);
}

uint64_t sub_10016D25C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    if (qword_1003FE560 != -1) {
      swift_once(&qword_1003FE560, sub_100165100);
    }
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 48);
    uint64_t v4 = *(void *)(v0 + 56);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v6, (uint64_t)qword_1003FE568);
    v2(v3, v5, v4);
    uint64_t v7 = swift_retain_n(v1, 2LL);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.info.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = *(void *)(v0 + 80);
    if (v10)
    {
      uint64_t v48 = *(void *)(v0 + 136);
      uint64_t v43 = *(void *)(v0 + 80);
      uint64_t v16 = *(void *)(v0 + 64);
      uint64_t v15 = *(void *)(v0 + 72);
      uint64_t v17 = *(void *)(v0 + 56);
      uint64_t v47 = *(void *)(v0 + 128);
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      v49[0] = v45;
      *(_DWORD *)uint64_t v18 = 136315394;
      os_log_type_t type = v9;
      NearbyGroup.id.getter();
      uint64_t v46 = v13;
      uint64_t v19 = sub_100156FEC( &qword_1003F8690,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
      unint64_t v22 = v21;
      unint64_t v42 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v42(v15, v17);
      *(void *)(v0 + 24) = sub_10015ADC4(v20, v22, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v18 + 4, v18 + 12);
      swift_release_n(v1, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
      *(void *)(v0 + 32) = sub_10015ADC4(v23, v24, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      v42(v43, v17);
      _os_log_impl((void *)&_mh_execute_header, v8, type, "Observed group: %s, waiting for %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v46);
    }

    else
    {
      uint64_t v34 = *(void *)(v0 + 56);
      uint64_t v35 = *(void *)(v0 + 64);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v14, v34);
      swift_release_n(v1, 2LL);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }

    uint64_t v36 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 112);
    uint64_t v39 = *(void *)(v0 + 80);
    uint64_t v38 = *(void *)(v0 + 88);
    uint64_t v40 = *(void *)(v0 + 72);
    **(void **)(v0 + 40) = v1;
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v26 = *(void *)(v0 + 112);
    uint64_t v28 = *(void *)(v0 + 80);
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v29 = *(void *)(v0 + 72);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 8LL))(v25, *(void *)(v0 + 120));
    unint64_t v30 = sub_10017226C();
    uint64_t v31 = swift_allocError(&type metadata for NearbySessionsListenerImplementation.Errors, v30, 0LL, 0LL);
    _BYTE *v32 = 0;
    swift_willThrow(v31);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    uint64_t v33 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v33();
}

uint64_t sub_10016D728(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1003F85AC;
  id v7 = a1;
  a3;
  uint64_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  void *v8 = v3;
  v8[1] = sub_10016D7A4;
  return sub_100169D74((uint64_t)v7, v9);
}

uint64_t sub_10016D7A4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 40);
  id v7 = *(void **)(*v2 + 16);
  uint64_t v6 = *(void **)(*v2 + 24);
  uint64_t v8 = *v2;
  swift_task_dealloc(v5);

  uint64_t v9 = *(void (***)(void, void, void))(v8 + 32);
  if (v3)
  {
    BOOL v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v9)[2](v9, 0LL, v10);

    _Block_release(v9);
  }

  else
  {
    ((void (**)(void, void *, void))v9)[2](v9, a1, 0LL);
    _Block_release(v9);
  }

  return (*(uint64_t (**)(void))(v8 + 8))();
}

void sub_10016D86C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v94 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  id v93 = (char *)&v88 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v88 - v12;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v14 = sub_10015ADAC(v6, (uint64_t)qword_1003FE568);
  uint64_t v96 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v96(v13, v14, v6);
  id v15 = v3;
  id v16 = a1;
  uint64_t v17 = (char *)v15;
  id v18 = v16;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  uint64_t v20 = v7;
  os_log_type_t v21 = static os_log_type_t.info.getter();
  BOOL v22 = os_log_type_enabled(v19, v21);
  uint64_t v23 = &unk_1003F8000;
  uint64_t v92 = ObjectType;
  if (v22)
  {
    uint64_t v24 = swift_slowAlloc(42LL, -1LL);
    uint64_t v95 = v6;
    uint64_t v25 = v24;
    uint64_t v88 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v90 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(96LL, -1LL);
    uint64_t v98 = v90;
    *(_DWORD *)uint64_t v25 = 136315906;
    unint64_t v91 = (void (*)(char *, uint64_t))v14;
    uint64_t v26 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v97 = sub_10015ADC4(v26, v27, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    uint64_t v89 = v20;
    *(_WORD *)(v25 + 12) = 2080;
    if (*(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v28 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v28 = 7496003LL;
    }
    if (*(void *)&v17[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v29 = 0xE700000000000000LL;
    }
    else {
      unint64_t v29 = 0xE300000000000000LL;
    }
    uint64_t v97 = sub_10015ADC4(v28, v29, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v25 + 14, v25 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    uint64_t v97 = sub_10015ADC4(0xD000000000000033LL, 0x800000010033A590LL, (uint64_t *)&v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v25 + 24, v25 + 32);
    *(_WORD *)(v25 + 32) = 2114;
    uint64_t v97 = (uint64_t)v18;
    id v30 = v18;
    uint64_t v23 = (void *)&unk_1003F8000;
    uint64_t v14 = (uint64_t)v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v25 + 34, v25 + 42);
    uint64_t v31 = v88;
    void *v88 = v18;

    _os_log_impl((void *)&_mh_execute_header, v19, v21, "[%s(%s)] %s - %{public}@", (uint8_t *)v25, 0x2Au);
    uint64_t v32 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v31, 1LL, v32);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v33 = v90;
    swift_arrayDestroy(v90, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    uint64_t v34 = v25;
    uint64_t v6 = v95;
    swift_slowDealloc(v34, -1LL, -1LL);

    uint64_t v35 = *(void (**)(char *, uint64_t))(v89 + 8);
    v35(v13, v6);
  }

  else
  {

    uint64_t v35 = *(void (**)(char *, uint64_t))(v20 + 8);
    v35(v13, v6);
  }

  sub_10016083C(0LL, &qword_1003F8628, &OBJC_CLASS___MRDiscoveredGroupSession_ptr);
  uint64_t v36 = *(void *)&v17[v23[156]];
  id v37 = v18;
  id v38 = sub_10016E384(v37, v36);
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v40 = __chkstk_darwin(v38);
    *(&v88 - 2) = v17;
    *(&v88 - 1) = (void *)v40;
    sub_100236804((void (*)(void))sub_100171E44);
    if (v98 == 1)
    {
      uint64_t v94 = (char *)v36;
      unint64_t v91 = v35;
      id v41 = [v39 identifier];
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v43 = v14;
      uint64_t v45 = v44;

      __chkstk_darwin(v46);
      *(&v88 - 6) = v17;
      *(&v88 - 5) = (void *)v42;
      *(&v88 - 4) = v45;
      *(&v88 - 3) = v37;
      *(&v88 - 2) = v39;
      sub_100236804((void (*)(void))sub_100171F04);
      swift_bridgeObjectRelease();
      uint64_t v47 = v93;
      v96(v93, v43, v6);
      uint64_t v48 = v17;
      id v49 = v39;
      id v50 = v48;
      id v51 = v49;
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        uint64_t v90 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(8LL, -1LL);
        uint64_t v96 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(64LL, -1LL);
        uint64_t v98 = v96;
        *(_DWORD *)uint64_t v54 = 136315650;
        uint64_t v55 = _typeName(_:qualified:)(v92, 0LL);
        uint64_t v95 = v6;
        uint64_t v97 = sub_10015ADC4(v55, v56, (uint64_t *)&v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v54 + 4, v54 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2080;
        else {
          uint64_t v57 = 7496003LL;
        }
        else {
          unint64_t v58 = 0xE300000000000000LL;
        }
        uint64_t v97 = sub_10015ADC4(v57, v58, (uint64_t *)&v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v54 + 14, v54 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 22) = 2114;
        uint64_t v97 = (uint64_t)v51;
        id v59 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v54 + 24, v54 + 32);
        uint64_t v60 = v90;
        *(void *)uint64_t v90 = v39;

        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "[%s(%s)] Notifying of discovered session - %{public}@",  (uint8_t *)v54,  0x20u);
        uint64_t v61 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v60, 1LL, v61);
        swift_slowDealloc(v60, -1LL, -1LL);
        uint64_t v62 = v96;
        swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);

        unint64_t v63 = v93;
        uint64_t v64 = v95;
      }

      else
      {

        unint64_t v63 = v47;
        uint64_t v64 = v6;
      }

      v91(v63, v64);
      uint64_t v87 = *(void *)&v50[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_delegate];
      if (v87)
      {
        [(id)swift_unknownObjectRetain(*(void *)&v50[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_delegate]) listener:v50 didDiscoverSession:v51];
        swift_unknownObjectRelease(v87);
      }
    }

    else
    {
      id v51 = v39;
      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v82 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v81, v82))
      {
        double v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        double v84 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)double v83 = 138543362;
        uint64_t v98 = (void (*)(char *, uint64_t, uint64_t))v51;
        id v85 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v83 + 4, v83 + 12);
        void *v84 = v39;

        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Already notified for session: %{public}@. Ignoring.",  v83,  0xCu);
        uint64_t v86 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v84, 1LL, v86);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v83, -1LL, -1LL);

        return;
      }
    }
  }

  else
  {
    unint64_t v65 = v94;
    v96(v94, v14, v6);
    uint64_t v66 = v17;
    id v67 = v37;
    uint64_t v68 = v66;
    id v69 = v67;
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = swift_slowAlloc(42LL, -1LL);
      uint64_t v73 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v96 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(96LL, -1LL);
      uint64_t v98 = v96;
      *(_DWORD *)uint64_t v72 = 136315906;
      uint64_t v95 = v6;
      uint64_t v74 = _typeName(_:qualified:)(v92, 0LL);
      unint64_t v91 = v35;
      uint64_t v97 = sub_10015ADC4(v74, v75, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2080;
      if (v36 == 1) {
        uint64_t v76 = 0x646F50656D6F48LL;
      }
      else {
        uint64_t v76 = 7496003LL;
      }
      if (v36 == 1) {
        unint64_t v77 = 0xE700000000000000LL;
      }
      else {
        unint64_t v77 = 0xE300000000000000LL;
      }
      uint64_t v97 = sub_10015ADC4(v76, v77, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v72 + 14, v72 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 22) = 2080;
      uint64_t v97 = sub_10015ADC4(0xD000000000000033LL, 0x800000010033A590LL, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v72 + 24, v72 + 32);
      *(_WORD *)(v72 + 32) = 2114;
      uint64_t v97 = (uint64_t)v69;
      id v78 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v72 + 34, v72 + 42);
      *uint64_t v73 = v69;

      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "[%s(%s)] %s Failed to parse advertisement: %{public}@",  (uint8_t *)v72,  0x2Au);
      uint64_t v79 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v73, 1LL, v79);
      swift_slowDealloc(v73, -1LL, -1LL);
      uint64_t v80 = v96;
      swift_arrayDestroy(v96, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);

      v91(v94, v95);
    }

    else
    {

      v35(v65, v6);
    }
  }

id sub_10016E384(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  id v7 = [objc_allocWithZone(ObjCClassFromMetadata) init];
  uint64_t v8 = NearbyAdvertisement.contactID.getter();
  if (v9)
  {
    uint64_t v10 = sub_1001B1F30(v8, v9);
    if (v11 == 1) {
      goto LABEL_4;
    }
    uint64_t v14 = v10;
    uint64_t v15 = v11;
    uint64_t v16 = v12;
    unint64_t v17 = v13;
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_100171C44(v14, v15, v16, v17);
    if (!v15) {
      goto LABEL_4;
    }
LABEL_9:
    dispatch thunk of NearbyAdvertisement.deviceColor.getter(v18);
    uint64_t v54 = v7;
    if ((v31 & 1) != 0)
    {
      uint64_t v35 = 0LL;
    }

    else
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      id v33 = -[objc_class stringValue](isa, "stringValue");

      static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v35 = v34;
    }

    uint64_t v37 = NearbyAdvertisement.userInfo.getter();
    if (v38 >> 60 == 15)
    {
      uint64_t v39 = dispatch thunk of NearbyAdvertisement.deviceModel.getter(v37);
      if (v40)
      {
        uint64_t v39 = sub_100171AB4(v39, v40);
        unsigned __int8 v41 = v39;
      }

      else
      {
        unsigned __int8 v41 = 0;
      }
    }

    else
    {
      uint64_t v42 = v37;
      unint64_t v43 = v38;
      sub_1001719BC(v37, v38);
      unsigned __int8 v41 = sub_10022AA88(v44);
      uint64_t v39 = sub_100171C30(v42, v43);
    }

    dispatch thunk of NearbyAdvertisement.deviceModel.getter(v39);
    uint64_t v46 = v45;
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v46)
    {
      NSString v48 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v35)
      {
LABEL_21:
        NSString v49 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
LABEL_24:
        id v50 = [objc_allocWithZone(MRGroupSessionHostInfo) initWithRouteType:v41 displayName:v47 modelIdentifier:v48 color:v49];

        id v51 = objc_allocWithZone(ObjCClassFromMetadata);
        NearbyAdvertisement.identifier.getter(v51);
        NSString v52 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v36 = [v51 initWithIdentifier:v52 hostInfo:v50 source:a2];

        return v36;
      }
    }

    else
    {
      NSString v48 = 0LL;
      if (v35) {
        goto LABEL_21;
      }
    }

    NSString v49 = 0LL;
    goto LABEL_24;
  }

  uint64_t v18 = NearbyAdvertisement.displayName.getter(v8);
  if (v30) {
    goto LABEL_9;
  }
LABEL_4:
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v19, (uint64_t)qword_1003FE568);
  id v20 = a1;
  os_log_type_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc(22LL, -1LL);
    uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = v25;
    *(_DWORD *)uint64_t v23 = 136315394;
    uint64_t v26 = _typeName(_:qualified:)(v3, 0LL);
    uint64_t v55 = sub_10015ADC4(v26, v27, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2112;
    uint64_t v55 = (uint64_t)v20;
    id v28 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v23 + 14, v23 + 22);
    *uint64_t v24 = v20;

    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[%s] Failed to resolve contact information for advertisement: %@",  (uint8_t *)v23,  0x16u);
    uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v24, 1LL, v29);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
  }

  return 0LL;
}

void sub_10016E7C8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  id v7 = *(uint64_t (**)(char *, uint64_t))(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v63 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v56 - v10;
  if (qword_1003FE560 != -1) {
    swift_once(&qword_1003FE560, sub_100165100);
  }
  uint64_t v12 = sub_10015ADAC(v6, (uint64_t)qword_1003FE568);
  unint64_t v13 = (void (*)(char *, uint64_t, uint64_t))*((void *)v7 + 2);
  uint64_t v60 = v12;
  uint64_t v61 = v13;
  ((void (*)(char *))v13)(v11);
  id v14 = v3;
  id v15 = a1;
  uint64_t v16 = (char *)v14;
  id v17 = v15;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v62 = v6;
  uint64_t v58 = ObjectType;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(42LL, -1LL);
    id v59 = v7;
    uint64_t v22 = v21;
    uint64_t v56 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v57 = (void *)swift_slowAlloc(96LL, -1LL);
    id v67 = v57;
    *(_DWORD *)uint64_t v22 = 136315906;
    uint64_t v23 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v65 = sub_10015ADC4(v23, v24, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    if (*(void *)&v16[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v25 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v25 = 7496003LL;
    }
    if (*(void *)&v16[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v26 = 0xE700000000000000LL;
    }
    else {
      unint64_t v26 = 0xE300000000000000LL;
    }
    uint64_t v65 = sub_10015ADC4(v25, v26, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    uint64_t v65 = sub_10015ADC4(0xD00000000000002DLL, 0x800000010033A560LL, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v22 + 24, v22 + 32);
    *(_WORD *)(v22 + 32) = 2114;
    uint64_t v65 = (uint64_t)v17;
    id v27 = v17;
    uint64_t v6 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v22 + 34, v22 + 42);
    id v28 = v56;
    void *v56 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s(%s)] %s - %{public}@", (uint8_t *)v22, 0x2Au);
    uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v28, 1LL, v29);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v30 = v57;
    swift_arrayDestroy(v57, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    char v31 = (uint64_t (*)(char *, uint64_t))*((void *)v59 + 1);
    uint64_t v32 = v31(v11, v6);
  }

  else
  {

    char v31 = (uint64_t (*)(char *, uint64_t))*((void *)v7 + 1);
    uint64_t v32 = v31(v11, v6);
  }

  uint64_t v33 = NearbyAdvertisement.identifier.getter(v32);
  unint64_t v35 = v34;
  id v67 = 0LL;
  id v36 = (void *)__chkstk_darwin(v33);
  *(&v56 - 4) = v16;
  *(&v56 - 3) = v36;
  uint64_t v57 = v36;
  *(&v56 - 2) = (void *)v35;
  *(&v56 - 1) = &v67;
  sub_100236804((void (*)(void))sub_100171D2C);
  id v37 = v67;
  if (v67)
  {
    id v38 = v67;
    uint64_t v39 = v63;
    v61(v63, v60, v6);
  }

  else
  {
    id v59 = v31;
    sub_10016083C(0LL, &qword_1003F8628, &OBJC_CLASS___MRDiscoveredGroupSession_ptr);
    uint64_t v40 = *(void *)&v16[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source];
    id v41 = sub_10016E384(v17, v40);
    if (v41)
    {
      id v38 = v41;
    }

    else
    {
      NearbyAdvertisement.identifier.getter(0LL);
      id v42 = [objc_allocWithZone(MRGroupSessionHostInfo) init];
      id v43 = objc_allocWithZone(&OBJC_CLASS___MRDiscoveredGroupSession);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v38 = [v43 initWithIdentifier:v44 hostInfo:v42 source:v40];
    }

    uint64_t v39 = v63;
    char v31 = v59;
    v61(v63, v60, v6);
  }

  id v45 = v37;
  swift_bridgeObjectRetain();
  uint64_t v46 = v16;
  NSString v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = swift_slowAlloc(96LL, -1LL);
    uint64_t v65 = v50;
    *(_DWORD *)uint64_t v49 = 136315650;
    uint64_t v51 = _typeName(_:qualified:)(v58, 0LL);
    uint64_t v64 = sub_10015ADC4(v51, v52, &v65);
    id v59 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    if (*(void *)&v46[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      uint64_t v53 = 0x646F50656D6F48LL;
    }
    else {
      uint64_t v53 = 7496003LL;
    }
    if (*(void *)&v46[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_source] == 1LL) {
      unint64_t v54 = 0xE700000000000000LL;
    }
    else {
      unint64_t v54 = 0xE300000000000000LL;
    }
    uint64_t v64 = sub_10015ADC4(v53, v54, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v49 + 14, v49 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_10015ADC4((uint64_t)v57, v35, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v49 + 24, v49 + 32);
    swift_bridgeObjectRelease_n(v35, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "[%s(%s)] Notifying of lost session - %{public}s",  (uint8_t *)v49,  0x20u);
    swift_arrayDestroy(v50, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);

    v59(v63, v62);
  }

  else
  {

    swift_bridgeObjectRelease_n(v35, 2LL);
    v31(v39, v6);
  }

  uint64_t v55 = *(void **)&v46[OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_delegate];
  if (v55) {
    [v55 listener:v46 didLoseSession:v38];
  }
}

void sub_10016EEF0(void *a1)
{
  if (a1)
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_100171298(v2);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v3);
    [a1 setDiscoveredGroupSessions:isa];

    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_100171298(v5);
    swift_bridgeObjectRelease();
    Class v7 = Array._bridgeToObjectiveC()().super.isa;
    swift_release(v6);
    [a1 setNotifiedGroupSessions:v7];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_10016F098(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v4;
  sub_1001608B8(a1, a2);
  return v5;
}

uint64_t sub_10016F0D8(uint64_t result)
{
  return result;
}

BOOL sub_10016F124(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10016F13C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10016F180()
{
}

Swift::Int sub_10016F1A8(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10016F1E8(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( (unint64_t *)&unk_1003F87E0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D728);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10016F228(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( (unint64_t *)&unk_1003F87E0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D728);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10016F268(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_10016F2A8()
{
  return *v0;
}

uint64_t sub_10016F2B0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10016F2B8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(MRGroupSessionError);
}

uint64_t sub_10016F2C8(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10016F308(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10016F348(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10016F3AC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10016F3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10016F430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void *sub_10016F48C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_10016F49C(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10016F4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10016F500(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10016F514(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_100160A04;
  return v6();
}

uint64_t sub_10016F568(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  Class v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100160A04;
  return v7();
}

uint64_t sub_10016F5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_1001603DC(a1, &qword_1003F86B0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10, v8);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_1003A3AB0, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    uint64_t v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_1003F8718, v17);
}

uint64_t sub_10016F708(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100172E7C;
  return v6(a1);
}

uint64_t sub_10016F76C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10016F788(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_10016F788(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68((uint64_t *)&unk_1003F8660);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

void sub_10016F8F4(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v3 + 16)) {
      return;
    }
LABEL_8:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v6 = __CocoaSet.makeIterator()(v5);
      uint64_t v7 = type metadata accessor for NearbyAdvertisement(0LL);
      uint64_t v8 = sub_100156FEC( &qword_1003F87A8,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyAdvertisement,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v9 = Set.Iterator.init(_cocoa:)(v31, v6, v7, v8);
      a1 = v31[0];
      uint64_t v28 = v31[1];
      uint64_t v10 = v31[2];
      uint64_t v11 = v31[3];
      unint64_t v12 = v31[4];
    }

    else
    {
      uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v28 = a1 + 56;
      uint64_t v10 = ~v13;
      uint64_t v14 = -v13;
      if (v14 < 64) {
        uint64_t v15 = ~(-1LL << v14);
      }
      else {
        uint64_t v15 = -1LL;
      }
      unint64_t v12 = v15 & *(void *)(a1 + 56);
      uint64_t v9 = (void *)swift_bridgeObjectRetain();
      uint64_t v11 = 0LL;
    }

    int64_t v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_20;
    }
    while (1)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
        uint64_t v19 = v11;
      }

      else
      {
        int64_t v24 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          return;
        }

        if (v24 >= v16) {
          goto LABEL_42;
        }
        unint64_t v25 = *(void *)(v28 + 8 * v24);
        uint64_t v19 = v11 + 1;
        if (!v25)
        {
          uint64_t v19 = v11 + 2;
          if (v11 + 2 >= v16) {
            goto LABEL_42;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v19);
          if (!v25)
          {
            uint64_t v19 = v11 + 3;
            if (v11 + 3 >= v16) {
              goto LABEL_42;
            }
            unint64_t v25 = *(void *)(v28 + 8 * v19);
            if (!v25)
            {
              uint64_t v19 = v11 + 4;
              if (v11 + 4 >= v16) {
                goto LABEL_42;
              }
              unint64_t v25 = *(void *)(v28 + 8 * v19);
              if (!v25)
              {
                uint64_t v19 = v11 + 5;
                if (v11 + 5 >= v16) {
                  goto LABEL_42;
                }
                unint64_t v25 = *(void *)(v28 + 8 * v19);
                if (!v25)
                {
                  uint64_t v26 = v11 + 6;
                  while (v16 != v26)
                  {
                    unint64_t v25 = *(void *)(v28 + 8 * v26++);
                    if (v25)
                    {
                      uint64_t v19 = v26 - 1;
                      goto LABEL_38;
                    }
                  }

LABEL_42:
                  sub_10016031C(a1);
                  return;
                }
              }
            }
          }
        }

          uint64_t v30 = 0;
          return v30 & 1;
        }

  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

  __break(1u);
  return result;
}

Swift::Int sub_10016FBCC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100156B68(&qword_1003F87B8);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for NearbyAdvertisement(0LL);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_100170494(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

void *sub_10016FDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for NearbyAdvertisement(0LL);
    uint64_t v7 = sub_100156FEC( &qword_1003F87A8,  (uint64_t (*)(uint64_t))&type metadata accessor for NearbyAdvertisement,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v55, v5, v6, v7);
    uint64_t v3 = v55[0];
    uint64_t v9 = v55[1];
    uint64_t v11 = v55[2];
    int64_t v10 = v55[3];
    unint64_t v12 = v55[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v11 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain();
    int64_t v10 = 0LL;
  }

  uint64_t v50 = v3;
  uint64_t v51 = v9;
  uint64_t v52 = v11;
  int64_t v53 = v10;
  unint64_t v54 = v12;
  uint64_t v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        BOOL v19 = *(void **)(*(void *)(v3 + 48) + 8 * v18);
        id v20 = v19;
        goto LABEL_18;
      }

      int64_t v32 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        __break(1u);
      }
      int64_t v33 = (unint64_t)(v11 + 64) >> 6;
      if (v32 >= v33)
      {
        BOOL v19 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_18;
      }

      unint64_t v34 = *(void *)(v51 + 8 * v32);
      if (v34)
      {
LABEL_31:
        uint64_t v17 = (v34 - 1) & v34;
        unint64_t v18 = __clz(__rbit64(v34)) + (v32 << 6);
        int64_t v10 = v32;
        goto LABEL_17;
      }

      int64_t v35 = v10 + 2;
      if (v10 + 2 >= v33) {
        goto LABEL_47;
      }
      unint64_t v34 = *(void *)(v51 + 8 * v35);
      if (v34)
      {
LABEL_35:
        int64_t v32 = v35;
        goto LABEL_31;
      }

      if (v10 + 3 < v33)
      {
        unint64_t v34 = *(void *)(v51 + 8 * (v10 + 3));
        if (v34)
        {
          int64_t v32 = v10 + 3;
          goto LABEL_31;
        }

        int64_t v35 = v10 + 4;
        if (v10 + 4 >= v33)
        {
          BOOL v19 = 0LL;
          uint64_t v17 = 0LL;
          v10 += 3LL;
LABEL_18:
          int64_t v53 = v10;
          unint64_t v54 = v17;
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_22;
        }

        unint64_t v34 = *(void *)(v51 + 8 * v35);
        if (v34) {
          goto LABEL_35;
        }
        int64_t v32 = v10 + 5;
        if (v10 + 5 < v33)
        {
          unint64_t v34 = *(void *)(v51 + 8 * v32);
          if (v34) {
            goto LABEL_31;
          }
          int64_t v32 = v33 - 1;
          int64_t v36 = v10 + 6;
          while (v33 != v36)
          {
            unint64_t v34 = *(void *)(v51 + 8 * v36++);
            if (v34)
            {
              int64_t v32 = v36 - 1;
              goto LABEL_31;
            }
          }

uint64_t sub_1001702D0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_100170CE4(v5, (uint64_t)v6);
      swift_bridgeObjectRelease();
      return v8;
    }

Swift::Int sub_100170494(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003F87B8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    id v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v8 = -1LL << v29;
                }
                *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

void sub_100170730(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v41 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000LL) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            id v13 = *(void **)(*(void *)(*v5 + 48LL) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }

          int64_t v30 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
            goto LABEL_47;
          }

          int64_t v31 = (unint64_t)(v5[2] + 64LL) >> 6;
          if (v30 >= v31)
          {
            id v13 = 0LL;
            uint64_t v11 = 0LL;
            goto LABEL_8;
          }

          uint64_t v32 = v5[1];
          unint64_t v33 = *(void *)(v32 + 8 * v30);
          if (v33)
          {
LABEL_22:
            uint64_t v11 = (v33 - 1) & v33;
            unint64_t v12 = __clz(__rbit64(v33)) + (v30 << 6);
            int64_t v10 = v30;
            goto LABEL_7;
          }

          if (v10 + 2 < v31)
          {
            unint64_t v33 = *(void *)(v32 + 8 * (v10 + 2));
            if (v33)
            {
              int64_t v30 = v10 + 2;
              goto LABEL_22;
            }

            if (v10 + 3 >= v31)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 2LL;
              goto LABEL_8;
            }

            unint64_t v33 = *(void *)(v32 + 8 * (v10 + 3));
            if (v33)
            {
              int64_t v30 = v10 + 3;
              goto LABEL_22;
            }

            int64_t v30 = v10 + 4;
            if (v10 + 4 >= v31)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 3LL;
LABEL_8:
              void v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }

            unint64_t v33 = *(void *)(v32 + 8 * v30);
            if (v33) {
              goto LABEL_22;
            }
            int64_t v30 = v31 - 1;
            int64_t v36 = v10 + 5;
            while (v31 != v36)
            {
              unint64_t v33 = *(void *)(v32 + 8 * v36++);
              if (v33)
              {
                int64_t v30 = v36 - 1;
                goto LABEL_22;
              }
            }
          }

          id v13 = 0LL;
          uint64_t v11 = 0LL;
          int64_t v10 = v30;
          goto LABEL_8;
        }

        uint64_t v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (uint64_t v16 = v15,
              uint64_t v42 = v15,
              uint64_t v17 = type metadata accessor for NearbyAdvertisement(0LL),
              swift_unknownObjectRetain(v16),
              swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL),
              id v13 = v43,
              swift_unknownObjectRelease(v16),
              !v13))
        {
LABEL_45:
          swift_retain(a3);
          sub_100170A88(a1, a2, v38, a3);
          return;
        }

Swift::Int sub_100170A88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100156B68(&qword_1003F87B8);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  char v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_100170CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_10016FBCC(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain(v8);
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    type metadata accessor for NearbyAdvertisement(0LL);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_100171014(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        Swift::Int *v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

id sub_100170E6C()
{
  id v1 = v0;
  sub_100156B68(&qword_1003F87B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *id v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

unint64_t sub_100171014(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            int64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *char v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    id result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

void *sub_1001711B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100156B68(&qword_1003F8620);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_1001715C4((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain();
  sub_10016031C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_100171298(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100156B68(&qword_1003F8620);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_1001717C0((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10016031C(v8);
  if (v7 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }

  return v4;
}

void sub_10017137C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v21 = v11;
        uint64_t v12 = type metadata accessor for NearbyAdvertisement(0LL);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v4 = v22;
        swift_unknownObjectRelease(v11);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v14 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v13 & ~v14;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v16 = static NSObject.== infix(_:_:)();

          if ((v16 & 1) == 0)
          {
            uint64_t v17 = ~v14;
            do
            {
              unint64_t v7 = (v7 + 1) & v17;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v18 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v19 = static NSObject.== infix(_:_:)();
            }

            while ((v19 & 1) == 0);
          }

LABEL_20:
          id v20 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

uint64_t sub_1001715C4(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    id result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_1001717C0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  int64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *int64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    id result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

void sub_1001719BC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1001719F0()
{
  return v0;
}

uint64_t sub_100171AB4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011LL && a2 == 0x800000010033A760LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010033A760LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x800000010033A780LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010033A780LL, a1, a2, 0LL) & 1) != 0
  }
         || a1 == 0xD000000000000011LL && a2 == 0x800000010033A7A0LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010033A7A0LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else
  {
    void v7[2] = a1;
    void v7[3] = a2;
    v7[0] = 0x5654656C707041LL;
    v7[1] = 0xE700000000000000LL;
    unint64_t v5 = sub_1001727A4();
    char v6 = StringProtocol.contains<A>(_:)(v7, &type metadata for String, &type metadata for String, v5, v5);
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 11LL;
    }
    else {
      return 0LL;
    }
  }

uint64_t sub_100171C30(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1001608B8(result, a2);
  }
  return result;
}

uint64_t sub_100171C44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return sub_100171C30(a3, a4);
  }

  return result;
}

void type metadata accessor for MRGroupSessionDiscoverySource(uint64_t a1)
{
}

uint64_t sub_100171C94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v3
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_discoveredAdvertisements);
  unint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 192LL);
  uint64_t v6 = swift_retain(v4);
  uint64_t v7 = v5(v6);
  swift_release(v4);
  *a1 = v7;
  uint64_t v8 = *(void *)(v3
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions);
  unint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 192LL);
  uint64_t v10 = swift_retain(v8);
  uint64_t v11 = v9(v10);
  uint64_t result = swift_release(v8);
  a1[1] = v11;
  return result;
}

uint64_t sub_100171D2C()
{
  void (*v9)(void **__return_ptr, uint64_t *);
  void *v10;
  uint64_t v11;
  void (*v12)(void **, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = *(void *)(v2
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_discoveredAdvertisements);
  uint64_t v4 = v0[4];
  unint64_t v5 = (void **)v0[5];
  unint64_t v16 = 0LL;
  int64_t v14 = v1;
  unint64_t v15 = v4;
  uint64_t v6 = *(void (**)(void **, uint64_t *))(*(void *)v3 + 216LL);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  v6(&v16, &v14);
  swift_release(v3);
  uint64_t v7 = OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions;
  uint64_t v8 = *(void *)(v2
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions);
  int64_t v14 = v1;
  unint64_t v15 = v4;
  unint64_t v9 = *(void (**)(void **__return_ptr, uint64_t *))(*(void *)v8 + 208LL);
  swift_bridgeObjectRetain(v4);
  swift_retain(v8);
  v9(&v16, &v14);
  swift_release(v8);
  swift_bridgeObjectRelease(v4);
  uint64_t v10 = *v5;
  *unint64_t v5 = v16;

  uint64_t v11 = *(void *)(v2 + v7);
  unint64_t v16 = 0LL;
  int64_t v14 = v1;
  unint64_t v15 = v4;
  int64_t v12 = *(void (**)(void **, uint64_t *))(*(void *)v11 + 216LL);
  swift_bridgeObjectRetain(v4);
  swift_retain(v11);
  v12(&v16, &v14);
  return swift_release(v11);
}

void sub_100171E44(BOOL *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 24);
  uint64_t v4 = *(void *)(*(void *)(v1 + 16)
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions);
  swift_retain(v4);
  id v5 = [v3 identifier];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  v10[0] = v6;
  v10[1] = v8;
  (*(void (**)(id *__return_ptr, void *))(*(void *)v4 + 208LL))(&v11, v10);
  swift_release(v4);
  swift_bridgeObjectRelease(v8);
  id v9 = v11;
  if (v11) {

  }
  *a1 = v9 == 0LL;
}

uint64_t sub_100171F04()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[5];
  uint64_t v5 = *(void *)(v1
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_discoveredAdvertisements);
  uint64_t v6 = (void *)v0[6];
  uint64_t v14 = v0[4];
  uint64_t v4 = v14;
  unint64_t v15 = v3;
  uint64_t v13 = v2;
  uint64_t v7 = *(void (**)(void **, uint64_t *))(*(void *)v5 + 216LL);
  swift_retain(v5);
  swift_bridgeObjectRetain(v14);
  id v8 = v3;
  v7(&v15, &v13);
  swift_release(v5);
  uint64_t v9 = *(void *)(v1
                 + OBJC_IVAR____TtC12mediaremotedP33_A89A4181BFB0A82ECB9159988E1E4AC136NearbySessionsListenerImplementation_notifiedSessions);
  uint64_t v14 = v4;
  unint64_t v15 = v6;
  uint64_t v13 = v2;
  uint64_t v10 = *(void (**)(void **, uint64_t *))(*(void *)v9 + 216LL);
  swift_bridgeObjectRetain(v4);
  swift_retain(v9);
  id v11 = v6;
  v10(&v15, &v13);
  return swift_release(v9);
}

void type metadata accessor for MRGroupSessionError(uint64_t a1)
{
}

uint64_t sub_100171FF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  id v7 = [*(id *)(v1 + 48) data];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
    unint64_t v11 = v10;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v11 = 0xF000000000000000LL;
  }

  sub_100156B68(&qword_1003F8638);
  swift_bridgeObjectRetain();
  sub_100160874(v3, v4);
  uint64_t result = InvitationRequest.__allocating_init(invitationData:displayName:userInfo:)(v3, v4, v5, v6, v9, v11);
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1001720C4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  id v8 = (void *)swift_task_alloc(dword_1003F8644);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_100160A04;
  return sub_10016BD0C(a1, v4, v5, v7, v6);
}

uint64_t sub_10017213C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_100172160()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v2, v7);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventJoinSessionModeKey);
  *(void *)(inited + 40) = v4;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v1;
  id v5 = v1;
  return sub_10016995C(inited);
}

uint64_t sub_1001721CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001721DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001721E4()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8698);
  uint64_t inited = swift_initStackObject(v0, v5);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMREventGroupSessionJoinResponseApprovedKey);
  *(void *)(inited + 40) = v2;
  InvitationJoinResponse.sessionIdentifier.getter();
  if (v3) {
    swift_bridgeObjectRelease();
  }
  *(NSNumber *)(inited + 4_Block_object_dispose(va, 8) = Bool._bridgeToObjectiveC()();
  return sub_10016995C(inited);
}

unint64_t sub_10017226C()
{
  unint64_t result = qword_1003FE580;
  if (!qword_1003FE580)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BFA4, &type metadata for NearbySessionsListenerImplementation.Errors);
    atomic_store(result, (unint64_t *)&qword_1003FE580);
  }

  return result;
}

uint64_t sub_1001722B0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100172310(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_1003F8674);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_10015FD10;
  return sub_10016D000(a1, v5);
}

uint64_t sub_100172380@<X0>(uint64_t *a1@<X8>)
{
  return sub_100168920(*(char **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_10017239C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));

  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1001723E8(uint64_t a1)
{
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = (void *)swift_task_alloc(dword_1003F86BC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100160A04;
  return sub_100168D74(a1, v10, v11, v4, v5, v6, v7, v8);
}

void sub_100172478()
{
  if (!qword_1003F86D8)
  {
    unint64_t v0 = type metadata accessor for InvitationRequest<>.Context(0LL);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1003F86D8);
    }
  }

uint64_t sub_1001724C8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003F86E4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10015FD10;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1003F86E0 + dword_1003F86E0))(v2, v3, v4);
}

uint64_t sub_100172538()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003F86F4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1003F86F0 + dword_1003F86F0))(v2, v3, v4);
}

uint64_t sub_1001725B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1003F8704);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1003F8700 + dword_1003F8700))( a1,  v4,  v5,  v6);
}

uint64_t sub_100172638()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10017265C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1003F8714);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1003F8710 + dword_1003F8710))(a1, v4);
}

uint64_t sub_1001726D0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100172704()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003F8724);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1003F8720 + dword_1003F8720))(v2, v3, v4);
}

uint64_t sub_100172778()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_1001727A4()
{
  unint64_t result = qword_1003F8740;
  if (!qword_1003F8740)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1003F8740);
  }

  return result;
}

uint64_t sub_1001727E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10017280C()
{
  uint64_t v1 = sub_100156B68(&qword_1003F8758);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_1001728A8()
{
  uint64_t v2 = *(void *)(sub_100156B68(&qword_1003F8758) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v8 = (void *)swift_task_alloc(dword_1003F877C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  void *v8 = v1;
  v8[1] = sub_100160A04;
  return sub_100165964((uint64_t)v8, v9, v10, v5, v6, v7);
}

uint64_t sub_100172940()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100172974()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc(dword_1003F878C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100160A04;
  return sub_100166C50((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1001729D4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = (uint64_t *)v0[4];
  uint64_t v4 = (void **)v0[5];
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1001668E8(v5, v1);
  swift_bridgeObjectRelease();
  void *v2 = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *v3;
  swift_bridgeObjectRetain();
  void *v4 = sub_1001668E8(v1, v7);
  swift_bridgeObjectRelease();
  uint64_t *v3 = v1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

_BYTE *initializeBufferWithCopyOfBuffer for NearbySessionsListenerImplementation.Errors( _BYTE *result, _BYTE *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NearbySessionsListenerImplementation.Errors( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for NearbySessionsListenerImplementation.Errors( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100172B74 + 4 * byte_10034BE55[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100172BA8 + 4 * byte_10034BE50[v4]))();
}

uint64_t sub_100172BA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100172BB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100172BB8LL);
  }
  return result;
}

uint64_t sub_100172BC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100172BCCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100172BD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100172BD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100172BE4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100172BEC(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySessionsListenerImplementation.Errors()
{
  return &type metadata for NearbySessionsListenerImplementation.Errors;
}

uint64_t sub_100172C08()
{
  return sub_100156FEC( (unint64_t *)&unk_1003F87D0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D650);
}

uint64_t sub_100172C34()
{
  return sub_100156FEC( (unint64_t *)&unk_1003FA2D0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D678);
}

uint64_t sub_100172C60()
{
  return sub_100156FEC( (unint64_t *)&unk_1003F87E0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D728);
}

uint64_t sub_100172C8C()
{
  return sub_100156FEC( (unint64_t *)&unk_1003FA2E0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D6F8);
}

uint64_t sub_100172CB8()
{
  return sub_100156FEC( (unint64_t *)&unk_1003F87F0,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D6B8);
}

uint64_t sub_100172CE4()
{
  return sub_100156FEC( (unint64_t *)&unk_1003FA2F0,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_10034D618);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_100172D24(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_100172D68()
{
  return sub_100156FEC( (unint64_t *)&unk_1003F8800,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_10034D7D0);
}

unint64_t sub_100172D98()
{
  unint64_t result = qword_1003F9AE0;
  if (!qword_1003F9AE0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1003F9AE0);
  }

  return result;
}

uint64_t sub_100172DDC()
{
  return sub_100156FEC( (unint64_t *)&unk_1003F8810,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_10034D5F0);
}

uint64_t sub_100172E08()
{
  return sub_100156FEC( &qword_1003FA300,  (uint64_t (*)(uint64_t))type metadata accessor for MRGroupSessionError,  (uint64_t)&unk_10034D768);
}

unint64_t sub_100172E38()
{
  unint64_t result = qword_1003FE590[0];
  if (!qword_1003FE590[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BF7C, &type metadata for NearbySessionsListenerImplementation.Errors);
    atomic_store(result, qword_1003FE590);
  }

  return result;
}

uint64_t sub_100172E94(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_100172EC4();

  return v2;
}

uint64_t sub_100172EC4()
{
  return dispatch thunk of Hashable.hashValue.getter( *(void *)((swift_isaMask & *v0) + 0x50LL),  *(void *)((swift_isaMask & *v0) + 0x60LL));
}

uint64_t sub_100172F00(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = swift_isaMask;
  sub_100173D54(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_100164B5C((uint64_t)v12);
    goto LABEL_5;
  }

  uint64_t v4 = v3 & v2;
  uint64_t v5 = *(void *)((v3 & v2) + 0x50);
  uint64_t v6 = *(void *)(v4 + 96);
  uint64_t v7 = type metadata accessor for LRUDictionary.Wrapper(0LL, v5, *(void *)(v4 + 88), v6);
  if ((swift_dynamicCast(&v11, v12, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
LABEL_5:
    char v9 = 0;
    return v9 & 1;
  }

  int v8 = v11;
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)( (char *)v1 + *(void *)((swift_isaMask & *v1) + 0x68),  (char *)v11 + *(void *)((*v11 & swift_isaMask) + 0x68LL),  v5,  *(void *)(v6 + 8));

  return v9 & 1;
}

uint64_t sub_100172FE4(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v5 = a1;
    swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v9);
    swift_unknownObjectRelease(a3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
    id v6 = a1;
  }

  char v7 = sub_100172F00((uint64_t)v9);

  sub_100164B5C((uint64_t)v9);
  return v7 & 1;
}

void sub_100173058()
{
}

id sub_100173064()
{
  id v1 = (objc_class *)type metadata accessor for LRUDictionary.Wrapper( 0LL,  *(void *)((swift_isaMask & *v0) + 0x50LL),  *(void *)((swift_isaMask & *v0) + 0x58LL),  *(void *)((swift_isaMask & *v0) + 0x60LL));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1001730B4(char *a1)
{
}

uint64_t sub_1001730E0()
{
  return sub_100173108( (void (*)(void, void, void, void))&type metadata accessor for Dictionary.Values,  (void (*)(void))sub_100173B50);
}

uint64_t sub_1001730F4()
{
  return sub_100173108( (void (*)(void, void, void, void))&type metadata accessor for Dictionary.Keys,  (void (*)(void))sub_100173B50);
}

uint64_t sub_100173108(void (*a1)(void, void, void, void), void (*a2)(void))
{
  return v5;
}

uint64_t sub_100173170(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, 48LL, 7LL);
  sub_1001731AC(a1);
  return v3;
}

void *sub_1001731AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80LL);
  uint64_t v6 = *(void *)(v4 + 88);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, v5, v6, 0LL, 0LL);
  uint64_t v8 = static Array._allocateUninitialized(_:)(0LL, TupleTypeMetadata2);
  v2[3] = Dictionary.init(dictionaryLiteral:)(v8, v5, v6, *(void *)(v4 + 96));
  v2[4] = [objc_allocWithZone(NSMutableOrderedSet) init];
  type metadata accessor for Lock();
  v2[5] = sub_100236794();
  v2[2] = a1;
  return v2;
}

void sub_100173254()
{
}

uint64_t sub_1001732B8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)(*a1 + 88LL);
  uint64_t v8 = type metadata accessor for Optional(0LL, v7);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v19[-v10 - 8];
  swift_beginAccess(a1 + 3, v19, 0LL, 0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = *(void *)(v6 + 80);
  uint64_t v14 = *(void *)(v6 + 96);
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter(a2, v12, v13, v7, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v16 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v11, v7);
    sub_1001737B8(a2);
    uint64_t v16 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a3, v16, 1LL, v7);
}

uint64_t sub_1001733FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_100173C04();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v5 + 80) - 8LL) + 8LL))(a2);
  uint64_t v6 = type metadata accessor for Optional(0LL, *(void *)(v5 + 88));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
}

uint64_t sub_10017345C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a3;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(*a1 + 88);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v19[-v10 - 8];
  uint64_t v12 = *(void *)(v5 + 80);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v9);
  uint64_t v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1001737B8(a2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v18, v7);
  swift_beginAccess(a1 + 3, v19, 33LL, 0LL);
  uint64_t v16 = type metadata accessor for Dictionary(0LL, v12, v6, *(void *)(v5 + 96));
  Dictionary.subscript.setter(v11, v15, v16);
  return swift_endAccess(v19);
}

void (*sub_1001735AC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[5] = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for Optional(0LL, *(void *)(*v1 + 88));
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[13] = malloc(v7);
  v3[14] = malloc(v7);
  uint64_t v8 = *(void *)(v4 + 80);
  v3[15] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[16] = v9;
  v3[17] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v9 + 16))();
  sub_100173254();
  return sub_100173670;
}

void sub_100173670(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 128LL);
  uint64_t v3 = *(void **)(*(void *)a1 + 136LL);
  uint64_t v5 = *(void **)(*(void *)a1 + 112LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 120LL);
  uint64_t v8 = *(void *)(*(void *)a1 + 96LL);
  size_t v7 = *(void **)(*(void *)a1 + 104LL);
  uint64_t v9 = *(void *)(*(void *)a1 + 88LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v10 = v2[5];
    (*(void (**)(void, void, void))(v8 + 16))(v2[13], v2[14], v2[11]);
    v2[2] = v10;
    v2[3] = v3;
    v2[4] = v7;
    sub_100236804((void (*)(void))sub_100173D9C);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v7, v9);
    v11(v5, v9);
  }

  else
  {
    v2[8] = v2[5];
    v2[9] = v3;
    v2[10] = v5;
    sub_100236804((void (*)(void))sub_100173D9C);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
  }

  free(v3);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t sub_1001737B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  sub_100236864();
  uint64_t v5 = *(void *)(v4 + 80);
  id v6 = (id)v2[4];
  uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)(a1, v5);
  [v6 removeObject:v7];

  swift_unknownObjectRelease(v7);
  id v8 = (id)v2[4];
  uint64_t v9 = _bridgeAnythingToObjectiveC<A>(_:)(a1, v5);
  [v8 insertObject:v9 atIndex:0];

  return swift_unknownObjectRelease(v9);
}

uint64_t sub_100173870()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v29 = *((void *)*v0 + 11);
  uint64_t v3 = type metadata accessor for Optional(0LL, v29);
  __chkstk_darwin(v3);
  id v28 = (char *)&v28 - v4;
  uint64_t v5 = v2[10];
  uint64_t v6 = type metadata accessor for Optional(0LL, v5);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(v5 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  sub_100236864();
  id v17 = [v0[4] lastObject];
  if (v17)
  {
    id v18 = v17;
    _bridgeAnyObjectToAny(_:)(v30);
    swift_unknownObjectRelease(v18);
    sub_100160944(v30, v31);
  }

  else
  {
    memset(v31, 0, sizeof(v31));
  }

  uint64_t v19 = sub_100156B68(&qword_1003F9EE0);
  int v20 = swift_dynamicCast(v10, v31, v19, v5, 6LL);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v20)
  {
    v21(v10, 0LL, 1LL, v5);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v10, v5);
    id v22 = v1[4];
    uint64_t v23 = _bridgeAnythingToObjectiveC<A>(_:)(v16, v5);
    [v22 removeObject:v23];

    swift_unknownObjectRelease(v23);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v5);
    unint64_t v25 = v28;
    uint64_t v24 = v29;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v28, 1LL, 1LL, v29);
    swift_beginAccess(v1 + 3, v31, 33LL, 0LL);
    uint64_t v26 = type metadata accessor for Dictionary(0LL, v5, v24, v2[12]);
    Dictionary.subscript.setter(v25, v14, v26);
    swift_endAccess(v31);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v5);
  }

  else
  {
    v21(v10, 1LL, 1LL, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

uint64_t sub_100173B04()
{
  swift_release(*(void *)(v0 + 40));
  return v0;
}

uint64_t sub_100173B30()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t sub_100173B50@<X0>(void *a1@<X8>)
{
  return sub_100173B64(a1);
}

uint64_t sub_100173B64@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100173BB0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001732B8(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_100173BD8()
{
}

void sub_100173C04()
{
}

uint64_t sub_100173C60(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 4LL, v2, a1 + 104);
}

uint64_t type metadata accessor for LRUDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100173DC8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LRUDictionary);
}

uint64_t sub_100173CD8(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 1LL, &v4, a1 + 104);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for LRUDictionary.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100173DC8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LRUDictionary.Wrapper);
}

uint64_t sub_100173D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100173D9C()
{
  return sub_10017345C(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100173DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  void v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100173DF4()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000019LL,  0x800000010033A870LL,  18773LL,  0xE200000000000000LL);
  qword_100405B40 = result;
  return result;
}

uint64_t *sub_100173E44()
{
  if (qword_1003FE820 != -1) {
    swift_once(&qword_1003FE820, sub_100173DF4);
  }
  return &qword_100405B40;
}

uint64_t sub_100173E84()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000019LL,  0x800000010033A870LL,  0x6D6552616964654DLL,  0xEB0000000065746FLL);
  qword_100405B48 = result;
  return result;
}

uint64_t *sub_100173EE8()
{
  if (qword_1003FE828 != -1) {
    swift_once(&qword_1003FE828, sub_100173E84);
  }
  return &qword_100405B48;
}

uint64_t sub_100173F28()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000019LL,  0x800000010033A870LL,  0x73655370756F7247LL,  0xEC0000006E6F6973LL);
  qword_100405B50 = result;
  return result;
}

uint64_t *sub_100173F8C()
{
  if (qword_1003FE830 != -1) {
    swift_once(&qword_1003FE830, sub_100173F28);
  }
  return &qword_100405B50;
}

uint64_t sub_100173FCC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000019LL,  0x800000010033A870LL,  0xD000000000000014LL,  0x800000010033A890LL);
  qword_100405B58 = result;
  return result;
}

uint64_t *sub_100174030()
{
  if (qword_1003FE838 != -1) {
    swift_once(&qword_1003FE838, sub_100173FCC);
  }
  return &qword_100405B58;
}

uint64_t sub_100174070()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000010033A830LL,  0x746C7561666544LL,  0xE700000000000000LL);
  qword_100405B60 = result;
  return result;
}

uint64_t sub_1001740CC()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000010033A830LL,  0xD000000000000010LL,  0x800000010033A850LL);
  qword_100405B68 = result;
  return result;
}

uint64_t sub_100174130()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000016LL,  0x800000010033A830LL,  4411465LL,  0xE300000000000000LL);
  qword_100405B70 = result;
  return result;
}

uint64_t sub_100174184(uint64_t a1)
{
  return sub_100174268(a1, qword_100405B78, &qword_1003FE840, (id *)&qword_100405B60, (uint64_t)sub_100174070);
}

uint64_t sub_1001741A8()
{
  return sub_1001741C4(&qword_1003FE858, (uint64_t)qword_100405B78, (uint64_t)sub_100174184);
}

uint64_t sub_1001741C4(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return sub_10015ADAC(v4, a2);
}

uint64_t sub_100174204(uint64_t a1)
{
  return sub_100174268(a1, qword_100405B90, &qword_1003FE848, (id *)&qword_100405B68, (uint64_t)sub_1001740CC);
}

uint64_t sub_100174228()
{
  return sub_1001741C4(&qword_1003FE860, (uint64_t)qword_100405B90, (uint64_t)sub_100174204);
}

uint64_t sub_100174244(uint64_t a1)
{
  return sub_100174268(a1, qword_100405BA8, &qword_1003FE850, (id *)&qword_100405B70, (uint64_t)sub_100174130);
}

uint64_t sub_100174268(uint64_t a1, uint64_t *a2, void *a3, id *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v9, a2);
  sub_10015ADAC(v9, (uint64_t)a2);
  if (*a3 != -1LL) {
    swift_once(a3, a5);
  }
  return Logger.init(_:)(*a4);
}

uint64_t sub_1001742F0()
{
  return sub_1001741C4(&qword_1003FE868, (uint64_t)qword_100405BA8, (uint64_t)sub_100174244);
}

uint64_t sub_10017430C(uint64_t a1)
{
  return sub_1001743B8(a1, qword_100405BC0, &qword_1003FE858, (uint64_t)qword_100405B78, (uint64_t)sub_100174184);
}

uint64_t sub_100174330()
{
  return sub_1001744F0(&qword_1003FE870, (uint64_t)qword_100405BC0, (uint64_t)sub_10017430C);
}

uint64_t sub_10017434C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100174394(uint64_t a1)
{
  return sub_1001743B8(a1, qword_100405BD8, &qword_1003FE860, (uint64_t)qword_100405B90, (uint64_t)sub_100174204);
}

uint64_t sub_1001743B8(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  sub_1001609C4(v9, a2);
  uint64_t v10 = sub_10015ADAC(v9, (uint64_t)a2);
  id v11 = [(id)objc_opt_self(MRSharedSettings) currentSettings];
  unsigned int v12 = [v11 verboseMediaControlLogging];

  if (v12)
  {
    if (*a3 != -1LL) {
      swift_once(a3, a5);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_10015ADAC(v13, a4);
    uint64_t v15 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v10, v14, v13);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v17 = v10;
    uint64_t v18 = 0LL;
    uint64_t v19 = v13;
  }

  else
  {
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL);
    uint64_t v17 = v10;
    uint64_t v18 = 1LL;
  }

  return v16(v17, v18, 1LL, v19);
}

uint64_t sub_1001744D4()
{
  return sub_1001744F0(&qword_1003FE878, (uint64_t)qword_100405BD8, (uint64_t)sub_100174394);
}

uint64_t sub_1001744F0(void *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v4 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  return sub_10015ADAC(v4, a2);
}

unint64_t sub_100174534()
{
  unint64_t result = qword_1003F8890;
  if (!qword_1003F8890)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003F8890);
  }

  return result;
}

id sub_1001748A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CryptoUtils();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001748D8(void **a1, void **a2)
{
  int64_t v36 = a1;
  id v37 = a2;
  uint64_t v2 = sub_100156B68(&qword_1003F88D0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = (char *)&v32 + *(int *)(v6 + 48) - v7;
  uint64_t v10 = Curve25519.Signing.PrivateKey.init()();
  unint64_t v34 = v9;
  Curve25519.Signing.PrivateKey.publicKey.getter(v10);
  uint64_t v32 = &v5[*(int *)(v2 + 48)];
  id v11 = v32;
  uint64_t v12 = type metadata accessor for Curve25519.Signing.PrivateKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  BOOL v35 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v35(v5, v8, v12);
  uint64_t v14 = type metadata accessor for Curve25519.Signing.PublicKey(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v33 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v16 = v33(v11, v9, v14);
  uint64_t v17 = Curve25519.Signing.PrivateKey.rawRepresentation.getter(v16);
  unint64_t v19 = v18;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1001608B8(v17, v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v5, v12);
  id v22 = *v36;
  *int64_t v36 = isa;

  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v32, v14);
  uint64_t v24 = &v5[*(int *)(v2 + 48)];
  v35(v5, v8, v12);
  uint64_t v25 = v33(v24, v34, v14);
  uint64_t v26 = Curve25519.Signing.PublicKey.rawRepresentation.getter(v25);
  unint64_t v28 = v27;
  Class v29 = Data._bridgeToObjectiveC()().super.isa;
  sub_1001608B8(v26, v28);
  v23(v24, v14);
  int64_t v30 = *v37;
  *id v37 = v29;

  sub_100174C98((uint64_t)v8);
  return ((uint64_t (*)(char *, uint64_t))v21)(v5, v12);
}

unint64_t sub_100174AC0()
{
  unint64_t result = qword_1003F8898;
  if (!qword_1003F8898)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1003F8898);
  }

  return result;
}

Class sub_100174B04(uint64_t a1, unint64_t a2, Class isa, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v22 = a4;
  uint64_t v12 = type metadata accessor for Curve25519.Signing.PublicKey(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = a5;
  unint64_t v21 = a6;
  sub_100160874(a5, a6);
  Curve25519.Signing.PublicKey.init<A>(rawRepresentation:)( &v20,  &type metadata for Data,  &protocol witness table for Data);
  if (!v6)
  {
    sub_100174C5C();
    uint64_t v20 = a1;
    unint64_t v21 = a2;
    v19[0] = isa;
    v19[1] = v22;
    unint64_t v16 = sub_100174AC0();
    char v17 = Curve25519.Signing.PublicKey.isValidSignature<A, B>(_:for:)( &v20,  v19,  &type metadata for Data,  &type metadata for Data,  v16,  v16);
    Class isa = NSNumber.init(BOOLeanLiteral:)(v17 & 1).super.super.isa;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }

  return isa;
}

uint64_t type metadata accessor for CryptoUtils()
{
  return objc_opt_self(&OBJC_CLASS___MRDCryptoUtils);
}

unint64_t sub_100174C5C()
{
  unint64_t result = qword_1003F88C8;
  if (!qword_1003F88C8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003F88C8);
  }

  return result;
}

uint64_t sub_100174C98(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003F88D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_100174CEC()
{
  return [*v0 routePickerVisible];
}

id sub_100174D0C(void *a1)
{
  id v2 = [a1 origin];
  id v3 = [v1 originClientForOrigin:v2];

  if (!v3) {
    return 0LL;
  }
  id v4 = [v3 activeNowPlayingClient];
  if (v4)
  {
    id v5 = v4;
    id v6 = [v4 activePlayerClient];
    if (v6)
    {
      id v7 = v6;
      id v8 = [v6 isPlaying];

      id v3 = v5;
      id v5 = v7;
    }

    else
    {
      id v8 = 0LL;
    }

    id v3 = v5;
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

unint64_t sub_100174DEC(void *a1)
{
  return (unint64_t)sub_100174D0C(a1) & 1;
}

uint64_t sub_100174E10()
{
  id v0 = [(id)objc_opt_self(MRDDisplayMonitor) sharedMonitor];
  void v5[3] = sub_10016083C(0LL, &qword_1003F88D8, off_100397318);
  v5[4] = &off_1003A3E68;
  v5[0] = v0;
  id v1 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v2 = [v1 nowPlayingServer];

  v4[3] = sub_10016083C(0LL, &qword_1003F88E0, off_100397340);
  void v4[4] = &off_1003A3E78;
  v4[0] = v2;
  return sub_100216998(v5, v4);
}

id sub_100174F04()
{
  return *(id *)(v0 + 16);
}

void sub_100174F34(uint64_t a1)
{
  id v3 = *(void **)(v1 + 16);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
}

void *sub_100174F78(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_100174FB8@<X0>(uint64_t a1@<X8>)
{
  return sub_100177DF4( &OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_itemType,  (uint64_t (*)(void))&type metadata accessor for RoutingSessionConfiguration.ItemType,  a1);
}

uint64_t sub_100174FCC(uint64_t a1)
{
  return sub_1001777E8(a1, &OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_itemType);
}

void *sub_100174FD8(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_10017501C(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v47 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RoutingMode(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode, v50, 0LL, 0LL);
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v46(v11, v12, v8);
  uint64_t v13 = sub_100156FEC( &qword_1003F8D38,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(a1, v11, v8, v13);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t result = v14(v11, v8);
  if ((a1 & 1) == 0)
  {
    uint64_t v16 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v7, v16, v5);
    uint64_t v17 = swift_retain_n(v2, 4LL);
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v5;
      uint64_t v22 = v21;
      uint64_t v44 = swift_slowAlloc(96LL, -1LL);
      uint64_t v49 = v44;
      *(_DWORD *)uint64_t v22 = 136315650;
      os_log_t v43 = v18;
      uint64_t v23 = _typeName(_:qualified:)(v4, 0LL);
      int v42 = v20;
      uint64_t v48 = sub_10015ADC4(v23, v24, &v49);
      uint64_t v41 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v25 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
      unint64_t v26 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10015ADC4(v25, v26, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 14, v22 + 22);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2080;
      uint64_t v40 = v22 + 24;
      unint64_t v27 = v46;
      v46(v11, v12, v8);
      uint64_t v28 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v8, v28);
      unint64_t v31 = v30;
      v14(v11, v8);
      uint64_t v48 = sub_10015ADC4(v29, v31, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v40, v22 + 32);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      os_log_t v32 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v42,  "[%s]<%s> setRoutingMode - value: %s",  (uint8_t *)v22,  0x20u);
      uint64_t v33 = v44;
      swift_arrayDestroy(v44, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v45);
    }

    else
    {

      swift_release_n(v2, 4LL);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v5);
      unint64_t v27 = v46;
    }

    uint64_t v34 = sub_100175920();
    uint64_t v36 = v35;
    uint64_t ObjectType = swift_getObjectType(v34, v37);
    v27(v11, v12, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 40))(v11, ObjectType, v36);
    return swift_unknownObjectRelease(v34);
  }

  return result;
}

uint64_t sub_100175424@<X0>(uint64_t a1@<X8>)
{
  return sub_100177DF4( &OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode,  (uint64_t (*)(void))&type metadata accessor for RoutingMode,  a1);
}

uint64_t sub_100175438(uint64_t a1)
{
  return sub_100177E74( a1,  &OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode,  (void (*)(_BYTE *))sub_10017501C);
}

void (*sub_10017544C(void *a1))(char **a1, char a2)
{
  id v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode;
  v3[14] = v7;
  v3[15] = v8;
  uint64_t v9 = v1 + v8;
  swift_beginAccess(v9, v3, 0LL, 0LL);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 16);
  v3[16] = v10;
  v10(v7, v9, v4);
  return sub_100175514;
}

void sub_100175514(char **a1, char a2)
{
}

uint64_t sub_100175520(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems);
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems, v44, 0LL, 0LL);
  uint64_t v10 = *v9;
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_10017FF40(a1, v10);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v12 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
    uint64_t v13 = swift_retain_n(v2, 4LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.info.getter();
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      int v40 = v16;
      uint64_t v18 = v17;
      uint64_t v41 = swift_slowAlloc(96LL, -1LL);
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v18 = 136315650;
      uint64_t v19 = _typeName(_:qualified:)(v4, 0LL);
      uint64_t v42 = sub_10015ADC4(v19, v20, &v43);
      uint64_t v38 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      os_log_t v39 = v14;
      *(_WORD *)(v18 + 12) = 2080;
      uint64_t v22 = *(void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
      unint64_t v21 = *(void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_10015ADC4(v22, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 14, v18 + 22);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 22) = 2080;
      uint64_t v23 = type metadata accessor for HostedRoutingItem(0LL);
      uint64_t v24 = swift_bridgeObjectRetain();
      uint64_t v25 = Array.description.getter(v24, v23);
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v42 = sub_10015ADC4(v25, v27, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 24, v18 + 32);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      os_log_t v28 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  (os_log_type_t)v40,  "[%s]<%s> setRoutingItems - value: %s",  (uint8_t *)v18,  0x20u);
      uint64_t v29 = v41;
      swift_arrayDestroy(v41, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v38);
    }

    else
    {

      swift_release_n(v2, 4LL);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    unint64_t v30 = (char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_delegate;
    uint64_t result = swift_unknownObjectWeakLoadStrong((char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_delegate);
    if (result)
    {
      uint64_t v32 = result;
      uint64_t v33 = *((void *)v30 + 1);
      uint64_t ObjectType = swift_getObjectType(result, v31);
      uint64_t v35 = *v9;
      uint64_t v36 = *(void (**)(void *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v33 + 8);
      swift_bridgeObjectRetain();
      v36(v2, &off_1003A4000, v35, ObjectType, v33);
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease(v32);
    }
  }

  return result;
}

uint64_t sub_100175880()
{
  return sub_100178610(&OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems);
}

uint64_t sub_10017588C(uint64_t a1)
{
  return sub_100178668( a1,  &OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems,  (void (*)(uint64_t))sub_100175520);
}

void (*sub_1001758A0(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1LL, 0LL);
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return sub_100175914;
}

void sub_100175914(void **a1, char a2)
{
}

uint64_t sub_100175920()
{
  uint64_t v1 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource____lazy_storage___subDataSource);
  uint64_t v2 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource____lazy_storage___subDataSource);
  if (v2)
  {
    uint64_t v3 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource____lazy_storage___subDataSource);
  }

  else
  {
    uint64_t v3 = sub_1001759B0((uint64_t)v0, *v0);
    uint64_t v4 = *v1;
    *uint64_t v1 = v3;
    v1[1] = v5;
    v1[2] = (uint64_t)&off_1003A4070;
    swift_unknownObjectRetain(v3);
    swift_unknownObjectRelease(v4);
    uint64_t v2 = 0LL;
  }

  swift_unknownObjectRetain(v2);
  return v3;
}

uint64_t sub_1001759B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v39 - v10;
  uint64_t v12 = *(void (**)(void))(*(void *)a1 + 176LL);
  ((void (*)(uint64_t))v12)(v9);
  int v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v11, v4);
  if (v13 == enum case for RoutingSessionConfiguration.ItemType.appSpecific(_:))
  {
    uint64_t v39 = 0LL;
    unint64_t v40 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(75LL);
    v21._countAndFlagsBits = 91LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    v22._countAndFlagsBits = _typeName(_:qualified:)(a2, 0LL);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 15453LL;
    v23._object = (void *)0xE200000000000000LL;
    String.append(_:)(v23);
    uint64_t v24 = a1 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier;
    uint64_t v25 = *(void *)(a1 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
    unint64_t v26 = *(void **)(v24 + 8);
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v25;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._object = (void *)0x800000010033AD90LL;
    v28._countAndFlagsBits = 0xD000000000000044LL;
    String.append(_:)(v28);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v39,  v40,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  57LL,  0);
  }

  else
  {
    if (v13 == enum case for RoutingSessionConfiguration.ItemType.standard(_:))
    {
      uint64_t v14 = (void *)*sub_100216E68();
      uint64_t v15 = type metadata accessor for AVDiscoveryRoutingItemDataSource(0LL);
      int v16 = (uint64_t *)swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      id v17 = v14;
      uint64_t v18 = swift_retain(a1);
      uint64_t v19 = sub_100181EF8(v18, v17, v16);
      sub_100156FEC( &qword_1003F8D50,  type metadata accessor for AVDiscoveryRoutingItemDataSource,  (uint64_t)&unk_10034C214);
      return (uint64_t)v19;
    }

    uint64_t v39 = 0LL;
    unint64_t v40 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(84LL);
    v29._countAndFlagsBits = 91LL;
    v29._object = (void *)0xE100000000000000LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = _typeName(_:qualified:)(a2, 0LL);
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 15453LL;
    v31._object = (void *)0xE200000000000000LL;
    String.append(_:)(v31);
    uint64_t v32 = *(void *)(a1 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
    uint64_t v33 = *(void **)(a1 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
    swift_bridgeObjectRetain();
    v34._countAndFlagsBits = v32;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0xD00000000000004ALL;
    v35._object = (void *)0x800000010033AD40LL;
    String.append(_:)(v35);
    v12();
    uint64_t v36 = sub_100156FEC( &qword_1003F88E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
    v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v36);
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v38._countAndFlagsBits = 46LL;
    v38._object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v39,  v40,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  59LL,  0);
  }

  __break(1u);
  return result;
}

void *sub_100175CE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = (void *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t ObjectType = swift_getObjectType(a1, v8);
  return sub_1001829C4(a1, a3, v7, ObjectType, a2);
}

id sub_100175D44()
{
  return (id)*sub_100216E68();
}

uint64_t sub_100175D5C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_100175DC8(a1, a2, a3, a4, a5);
  return v11;
}

uint64_t sub_100175DC8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v59 = a3;
  unint64_t v63 = a1;
  id v56 = *(id *)v6;
  uint64_t v10 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v58 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v57 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v62 = v12;
  __chkstk_darwin(v12);
  uint64_t v60 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (uint64_t *)((char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = &v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode];
  uint64_t v19 = enum case for RoutingMode.disabled(_:);
  uint64_t v20 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v18, v19, v20);
  *(void *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingItems] = _swiftEmptyArrayStorage;
  Swift::String v21 = &v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_delegate];
  *((void *)v21 + 1) = 0LL;
  swift_unknownObjectWeakInit(v21, 0LL);
  *(void *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_pendingInteractions] = &_swiftEmptyDictionarySingleton;
  Swift::String v22 = &v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource____lazy_storage___subDataSource];
  *((void *)v22 + 1) = 0LL;
  *((void *)v22 + 2) = 0LL;
  *(void *)Swift::String v22 = 0LL;
  Swift::String v23 = (uint64_t *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier];
  *Swift::String v23 = sub_1001A8998();
  v23[1] = v24;
  *id v17 = a5;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v25 = a5;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)(v17);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v23 & 1) != 0)
  {
    *((void *)v6 + 2) = v25;
    Swift::String v27 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
    Swift::String v28 = v63;
    v27(&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_itemType], (uint64_t)v63, v10);
    *(void *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_timeline] = a2;
    id v29 = v25;
    swift_retain(a2);
    uint64_t v30 = sub_100175920();
    uint64_t v32 = v31;
    uint64_t ObjectType = swift_getObjectType(v30, v33);
    uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 56))(ObjectType, v32);
    swift_unknownObjectRelease(v30);
    (*(void (**)(uint64_t))(*(void *)v6 + 232LL))(v35);
    uint64_t v36 = *(void (**)(uint64_t, _UNKNOWN **))(*(void *)a2 + 200LL);
    uint64_t v37 = swift_retain(v6);
    v36(v37, &off_1003A4050);
    swift_release(v6);
    Swift::String v38 = &v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_delegate];
    *((void *)v38 + 1) = a4;
    swift_unknownObjectWeakAssign(v38, v59);
    uint64_t v39 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v39, v62);
    v27(v57, (uint64_t)v28, v10);
    uint64_t v40 = swift_retain_n(v6, 2LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = swift_slowAlloc(96LL, -1LL);
      uint64_t v65 = v55;
      *(_DWORD *)uint64_t v43 = 136315650;
      uint64_t v44 = _typeName(_:qualified:)(v56, 0LL);
      id v56 = v29;
      uint64_t v64 = sub_10015ADC4(v44, v45, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      uint64_t v47 = *(void *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier];
      unint64_t v46 = *(void *)&v6[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v64 = sub_10015ADC4(v47, v46, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v43 + 14, v43 + 22);
      swift_release_n(v6, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 22) = 2080;
      uint64_t v48 = sub_100156FEC( &qword_1003F88E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
      uint64_t v49 = v57;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v10, v48);
      uint64_t v64 = sub_10015ADC4(v50, v51, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v43 + 24, v43 + 32);
      swift_bridgeObjectRelease();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v58 + 8);
      v52(v49, v10);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[%s]<%s> Initialized for item type: %s",  (uint8_t *)v43,  0x20u);
      uint64_t v53 = v55;
      swift_arrayDestroy(v55, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);

      swift_release(a2);
      swift_unknownObjectRelease(v59);
    }

    else
    {

      swift_release(a2);
      swift_unknownObjectRelease(v59);

      uint64_t v52 = *(void (**)(char *, uint64_t))(v58 + 8);
      v52(v57, v10);
      swift_release_n(v6, 2LL);
    }

    v52(v63, v10);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
    return (uint64_t)v6;
  }

  else
  {
    __break(1u);
  }

  return result;
}

char *sub_100176308()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  uint64_t v3 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1001741A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = swift_retain_n(v0, 4LL);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  uint64_t v40 = v13;
  int v39 = v14;
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = &unk_100405000;
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v7;
    uint64_t v18 = v17;
    uint64_t v37 = swift_slowAlloc(96LL, -1LL);
    uint64_t v44 = v37;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v19 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v42 = sub_10015ADC4(v19, v20, &v44);
    uint64_t v36 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v21 = v4;
    uint64_t v22 = v3;
    uint64_t v24 = *(void *)&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier];
    unint64_t v23 = *(void *)&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_10015ADC4(v24, v23, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v18 + 14, v18 + 22);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2080;
    id v25 = &v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_itemType];
    swift_beginAccess(&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_itemType], &v42, 0LL, 0LL);
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v6, v25, v22);
    uint64_t v26 = sub_100156FEC( &qword_1003F88E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v22, v26);
    unint64_t v29 = v28;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
    uint64_t v30 = v27;
    uint64_t v16 = (void *)&unk_100405000;
    uint64_t v41 = sub_10015ADC4(v30, v29, &v44);
    uint64_t v3 = v22;
    uint64_t v4 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v18 + 24, v18 + 32);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease();
    uint64_t v31 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v40,  (os_log_type_t)v39,  "[%s]<%s> Destroyed for item type: %s",  (uint8_t *)v18,  0x20u);
    uint64_t v32 = v37;
    swift_arrayDestroy(v37, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v38);
  }

  else
  {

    swift_release_n(v1, 4LL);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(&v1[v16[382]], v3);
  uint64_t v33 = &v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_routingMode];
  uint64_t v34 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v33, v34);
  swift_bridgeObjectRelease();
  sub_100183478((uint64_t)&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_delegate]);
  swift_release(*(void *)&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_timeline]);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(void *)&v1[OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource____lazy_storage___subDataSource]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100176710()
{
  return sub_100179F9C((void (*)(void))sub_100176308);
}

uint64_t sub_10017671C()
{
  return sub_100178E90(&OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
}

uint64_t sub_100176728()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100175920();
  uint64_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType(v2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(ObjectType, v4);
  swift_unknownObjectRelease(v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL))(v7);
}

uint64_t sub_100176780(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v170 = *v2;
  uint64_t v172 = type metadata accessor for RoutingControl.RoutingControlType(0LL);
  uint64_t v177 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  uint64_t v173 = (char *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for RoutingControl(0LL);
  uint64_t v175 = *(void *)(v5 - 8);
  uint64_t v176 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  v169 = (char *)&v161 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  os_log_type_t v174 = (char *)&v161 - v8;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v171 = (char *)&v161 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  BOOL v15 = (uint64_t *)((char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v180 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v16 = *(void *)(v180 - 8);
  uint64_t v17 = __chkstk_darwin(v180);
  id v168 = (char *)&v161 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v179 = (char *)&v161 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v161 - v22;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(v21);
  uint64_t v28 = v24;
  if (!((unint64_t)v24 >> 62))
  {
    if (*(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }

  if (v24 >= 0) {
    v24 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  if (!_CocoaArrayWrapper.endIndex.getter(v24)) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  uint64_t v164 = v9;
  uint64_t v163 = v10;
  if ((v28 & 0xC000000000000001LL) != 0)
  {
    uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v28);
  }

  else
  {
    if (!*(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
LABEL_42:
      if (v28 == 1)
      {
        sub_100162944((uint64_t)v166, v167);
        __break(1u);
      }

      uint64_t v136 = v25;
      uint64_t v62 = v26;
      uint64_t v58 = v27;
      sub_100162944((uint64_t)v166, v167);
      swift_errorRelease(v28);
      sub_100156BA8(v136, v62, v58);
      __break(1u);
      goto LABEL_45;
    }

    uint64_t v10 = *(void *)(v28 + 32);
    swift_retain(v10);
  }

  uint64_t v29 = swift_bridgeObjectRelease();
  uint64_t v30 = *(uint64_t (**)(void))(*(void *)v10 + 176LL);
  ((void (*)(uint64_t))v30)(v29);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_pendingInteractions,  &v182,  33LL,  0LL);
  uint64_t v31 = sub_10018019C((uint64_t)v23);
  uint64_t v33 = v32;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v35 = v23;
  uint64_t v36 = (void (*)(void))v31;
  v34(v35, v180);
  swift_endAccess(&v182);
  if (!v36)
  {
LABEL_10:
    uint64_t v54 = v10;
    return swift_release(v54);
  }

  v162 = v34;
  uint64_t v178 = v2;
  uint64_t v37 = swift_allocObject(&unk_1003A3EA8, 32LL, 7LL);
  uint64_t v165 = v37;
  v166 = v36;
  *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
  *(void *)(v37 + 24) = v33;
  uint64_t v38 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 128LL);
  uint64_t v167 = v33;
  uint64_t v39 = swift_retain(v33);
  uint64_t v40 = v38(v39);
  if (v40)
  {
    uint64_t v28 = v40;
    if (v40 == 2)
    {
      uint64_t v41 = type metadata accessor for InternalRoutingError(0LL);
      uint64_t v42 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      uint64_t v43 = swift_allocError(v41, v42, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v44,  enum case for InternalRoutingError.cancelled(_:),  v41);
      uint64_t v45 = MRDFastSyncGroupSessionState.rawValue.getter(v43, 0LL, 0LL, 4LL);
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      unsigned __int8 v51 = v50;
      __int128 v182 = (char *)v45;
      unint64_t v183 = v46;
      uint64_t v184 = v48;
      unsigned __int8 v185 = v50;
      uint64_t v53 = v166;
      uint64_t v52 = v167;
      v166(&v182);
      swift_errorRelease(v45);
      sub_100156BA8(v47, v49, v51);
      swift_release(v165);
      sub_100162944((uint64_t)v53, v52);
      goto LABEL_10;
    }

    goto LABEL_42;
  }

  uint64_t v161 = v10;
  uint64_t v56 = v30();
  uint64_t v10 = RoutingInteraction.identifier.getter(v56);
  uint64_t v58 = v57;
  RoutingInteraction.action.getter();
  int v59 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 88))(v15, v12);
  if (v59 != enum case for RoutingInteraction.Action.add(_:))
  {
    int v60 = v59;
    if (v59 != enum case for RoutingInteraction.Action.remove(_:)
      && v59 != enum case for RoutingInteraction.Action.set(_:))
    {
      int v61 = enum case for RoutingInteraction.Action.control(_:);
      sub_100162944((uint64_t)v166, v167);
      uint64_t v62 = (uint64_t)v178;
      if (v60 != v61)
      {
LABEL_45:
        uint64_t v137 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
        uint64_t v138 = v180;
        v137(v168, v179, v180);
        __int128 v182 = 0LL;
        unint64_t v183 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(62LL);
        v139._countAndFlagsBits = 91LL;
        v139._object = (void *)0xE100000000000000LL;
        String.append(_:)(v139);
        v140._countAndFlagsBits = _typeName(_:qualified:)(v170, 0LL);
        String.append(_:)(v140);
        swift_bridgeObjectRelease();
        v141._countAndFlagsBits = 15453LL;
        v141._object = (void *)0xE200000000000000LL;
        String.append(_:)(v141);
        uint64_t v142 = *(void *)(v62 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
        uint64_t v143 = *(void **)(v62 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
        swift_bridgeObjectRetain();
        v144._countAndFlagsBits = v142;
        v144._object = v143;
        String.append(_:)(v144);
        swift_bridgeObjectRelease();
        v145._object = (void *)0x800000010033A9A0LL;
        v145._countAndFlagsBits = 0xD000000000000014LL;
        String.append(_:)(v145);
        v146._countAndFlagsBits = v10;
        v146._object = v58;
        String.append(_:)(v146);
        v147._countAndFlagsBits = 0xD00000000000001FLL;
        v147._object = (void *)0x800000010033A9C0LL;
        String.append(_:)(v147);
        uint64_t v148 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        v149._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v138, v148);
        String.append(_:)(v149);
        swift_bridgeObjectRelease();
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v182,  v183,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  126LL,  0);
LABEL_47:
        __break(1u);
        return result;
      }

      (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v15, v12);
      uint64_t v63 = *v15;
      uint64_t v64 = swift_projectBox(*v15);
      uint64_t v66 = v174;
      uint64_t v65 = v175;
      id v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v175 + 16);
      uint64_t v68 = v176;
      uint64_t v69 = v67(v174, v64, v176);
      uint64_t v70 = v173;
      RoutingControl.type.getter(v69);
      uint64_t v71 = v172;
      int v72 = (*(uint64_t (**)(char *, uint64_t))(v177 + 88))(v70, v172);
      if (v72 != enum case for RoutingControl.RoutingControlType.absoluteVolume(_:))
      {
        if (v72 == enum case for RoutingControl.RoutingControlType.relativeVolume(_:))
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v177 + 96))(v70, v71);
          uint64_t v73 = type metadata accessor for RoutingControls.RelativeVolumeControl.AdjustmentType(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v73 - 8) + 8LL))(v70, v73);
LABEL_28:
          uint64_t v107 = sub_100175920();
          uint64_t v109 = v108;
          uint64_t ObjectType = swift_getObjectType(v107, v110);
          __int128 v182 = (char *)v107;
          uint64_t v112 = v179;
          uint64_t v113 = v165;
          (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, char), uint64_t, uint64_t))(*(void *)(v109 + 16) + 8LL))( v179,  sub_1001834C0,  v165,  ObjectType);
          swift_unknownObjectRelease(v107);
          swift_release(v113);
          swift_release(v161);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v68);
          v162(v112, v180);
          uint64_t v54 = v63;
          return swift_release(v54);
        }

        if (v72 != enum case for RoutingControl.RoutingControlType.mute(_:))
        {
          v67(v169, (uint64_t)v66, v68);
          __int128 v182 = 0LL;
          unint64_t v183 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(58LL);
          v150._countAndFlagsBits = 91LL;
          v150._object = (void *)0xE100000000000000LL;
          String.append(_:)(v150);
          v151._countAndFlagsBits = _typeName(_:qualified:)(v170, 0LL);
          String.append(_:)(v151);
          swift_bridgeObjectRelease();
          v152._countAndFlagsBits = 15453LL;
          v152._object = (void *)0xE200000000000000LL;
          String.append(_:)(v152);
          uint64_t v153 = *(void *)(v62 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
          uint64_t v154 = *(void **)(v62 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
          swift_bridgeObjectRetain();
          v155._countAndFlagsBits = v153;
          v155._object = v154;
          String.append(_:)(v155);
          swift_bridgeObjectRelease();
          v156._object = (void *)0x800000010033A9A0LL;
          v156._countAndFlagsBits = 0xD000000000000014LL;
          String.append(_:)(v156);
          v157._countAndFlagsBits = v10;
          v157._object = v58;
          String.append(_:)(v157);
          v158._countAndFlagsBits = 0xD00000000000001BLL;
          v158._object = (void *)0x800000010033A9E0LL;
          String.append(_:)(v158);
          uint64_t v159 = sub_100156FEC( &qword_1003F8900,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl,  (uint64_t)&protocol conformance descriptor for RoutingControl);
          v160._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v68, v159);
          String.append(_:)(v160);
          swift_bridgeObjectRelease();
          uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v182,  v183,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  123LL,  0);
          goto LABEL_47;
        }
      }

      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
  }

  uint64_t v177 = v10;
  unint64_t v74 = (unint64_t)v58;
  (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v15, v12);
  uint64_t v76 = *v15;
  uint64_t v75 = v15[1];
  swift_bridgeObjectRelease();
  unint64_t v77 = v178;
  uint64_t v78 = sub_100175920();
  uint64_t v80 = v79;
  uint64_t v82 = v81;
  uint64_t v83 = swift_getObjectType(v78, v79);
  double v84 = *(uint64_t (**)(uint64_t, uint64_t))(v82 + 56);
  uint64_t v176 = v83;
  uint64_t v85 = v84(v83, v82);
  uint64_t v86 = *(void *)(v85 + 16);
  if (v86)
  {
    uint64_t v175 = v80;
    uint64_t v87 = *(void *)(type metadata accessor for HostedRoutingItem(0LL) - 8);
    unint64_t v88 = v85 + ((*(unsigned __int8 *)(v87 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
    uint64_t v89 = *(void *)(v87 + 72);
    while (1)
    {
      uint64_t v90 = sub_10024A474();
      if (v90 == v76 && v91 == v75)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }

      char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v91, v76, v75, 0LL);
      swift_bridgeObjectRelease();
      if ((v92 & 1) != 0) {
        break;
      }
      v88 += v89;
      --v86;
      unint64_t v77 = v178;
      if (!v86) {
        goto LABEL_25;
      }
    }

    unint64_t v77 = v178;
LABEL_31:
    swift_bridgeObjectRelease();
    sub_100162944((uint64_t)v166, v167);
    swift_bridgeObjectRelease();
    uint64_t v114 = sub_1001741A8();
    uint64_t v115 = v163;
    uint64_t v116 = v171;
    uint64_t v117 = v164;
    (*(void (**)(char *, uint64_t, uint64_t))(v163 + 16))(v171, v114, v164);
    swift_retain_n(v77, 2LL);
    swift_unknownObjectRetain_n(v78, 2LL);
    uint64_t v118 = swift_bridgeObjectRetain();
    uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
    os_log_type_t v120 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v119, v120))
    {
      uint64_t v121 = swift_slowAlloc(42LL, -1LL);
      os_log_type_t v174 = (char *)swift_slowAlloc(128LL, -1LL);
      __int128 v182 = v174;
      *(_DWORD *)uint64_t v121 = 136315906;
      uint64_t v122 = _typeName(_:qualified:)(v170, 0LL);
      uint64_t v181 = sub_10015ADC4(v122, v123, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v121 + 4, v121 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v121 + 12) = 2080;
      uint64_t v125 = *(void *)((char *)v178 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
      unint64_t v124 = *(void *)((char *)v178 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v181 = sub_10015ADC4(v125, v124, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v121 + 14, v121 + 22);
      swift_release_n(v178, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v121 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v181 = sub_10015ADC4(v177, v74, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v121 + 24, v121 + 32);
      swift_bridgeObjectRelease_n(v74, 3LL);
      *(_WORD *)(v121 + 32) = 2080;
      uint64_t v181 = v78;
      uint64_t v126 = dispatch thunk of CustomStringConvertible.description.getter(v176, v175);
      uint64_t v181 = sub_10015ADC4(v126, v127, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v121 + 34, v121 + 42);
      swift_unknownObjectRelease_n(v78, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "[%s]<%s> timelineDidUpdate<%s> - delegating to data source: %s",  (uint8_t *)v121,  0x2Au);
      uint64_t v128 = v174;
      swift_arrayDestroy(v174, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v128, -1LL, -1LL);
      swift_slowDealloc(v121, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v163 + 8))(v171, v164);
    }

    else
    {

      swift_unknownObjectRelease_n(v78, 2LL);
      swift_bridgeObjectRelease_n(v74, 2LL);
      swift_release_n(v77, 2LL);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v116, v117);
    }

    uint64_t v129 = v165;
    uint64_t v130 = sub_100175920();
    uint64_t v132 = v131;
    uint64_t v134 = swift_getObjectType(v130, v133);
    __int128 v182 = (char *)v130;
    uint64_t v135 = v179;
    (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, char), uint64_t, uint64_t))(*(void *)(v132 + 16) + 8LL))( v179,  sub_1001834C0,  v129,  v134);
    swift_unknownObjectRelease(v130);
    swift_unknownObjectRelease(v78);
    swift_release(v129);
    swift_release(v161);
    uint64_t v106 = v135;
  }

  else
  {
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = type metadata accessor for InternalRoutingError(0LL);
    uint64_t v94 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    uint64_t v95 = swift_allocError(v93, v94, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v93 - 8) + 104LL))( v96,  enum case for InternalRoutingError.itemNotFound(_:),  v93);
    uint64_t v97 = MRDFastSyncGroupSessionState.rawValue.getter(v95, v76, v75, 3LL);
    uint64_t v99 = v98;
    uint64_t v101 = v100;
    unsigned __int8 v103 = v102;
    __int128 v182 = (char *)v97;
    unint64_t v183 = v98;
    uint64_t v184 = v100;
    unsigned __int8 v185 = v102;
    uint64_t v105 = v166;
    uint64_t v104 = v167;
    v166(&v182);
    swift_release(v165);
    swift_release(v161);
    swift_errorRelease(v97);
    sub_100156BA8(v99, v101, v103);
    swift_unknownObjectRelease(v78);
    sub_100162944((uint64_t)v105, v104);
    uint64_t v106 = v179;
  }

  return ((uint64_t (*)(char *, uint64_t))v162)(v106, v180);
}

uint64_t sub_100177574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v11 = swift_allocObject(&unk_1003A3ED0, 32LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  uint64_t v12 = (void *)(v3 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_pendingInteractions);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_pendingInteractions, v16, 33LL, 0LL);
  swift_retain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  uint64_t v15 = *v12;
  void *v12 = 0x8000000000000000LL;
  sub_100181AF0((uint64_t)sub_1001835A8, v11, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  void *v12 = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return swift_endAccess(v16);
}

uint64_t sub_1001776A4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176LL))();
}

uint64_t sub_1001776B0()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200LL))();
}

uint64_t sub_1001776BC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208LL))();
}

uint64_t (*sub_1001776C8(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(*(void *)v1 + 216LL))();
  return sub_100177714;
}

uint64_t sub_100177718()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224LL))();
}

uint64_t sub_100177724()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

uint64_t sub_100177730()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368LL))();
}

uint64_t sub_10017773C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352LL))();
}

uint64_t sub_100177764()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376LL))();
}

void *sub_10017778C(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1001777C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100177DF4( &OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_itemType,  (uint64_t (*)(void))&type metadata accessor for RoutingSessionConfiguration.ItemType,  a1);
}

uint64_t sub_1001777DC(uint64_t a1)
{
  return sub_1001777E8(a1, &OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_itemType);
}

uint64_t sub_1001777E8(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess(v4, v7, 33LL, 0LL);
  uint64_t v5 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
  return swift_endAccess(v7);
}

uint64_t (*sub_100177850(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void sub_100177894(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v50 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for RoutingMode(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = (char *)v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode;
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode,  v54,  0LL,  0LL);
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v49(v13, v14, v8);
  uint64_t v15 = sub_100156FEC( &qword_1003F8D38,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v13, a1, v8, v15);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v13, v8);
  if ((a1 & 1) == 0)
  {
    uint64_t v17 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v7, v17, v5);
    uint64_t v18 = swift_retain_n(v2, 2LL);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v46 = v20;
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v45 = v4;
    uint64_t v47 = v16;
    if (v21)
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(64LL, -1LL);
      uint64_t v52 = v44;
      *(_DWORD *)uint64_t v22 = 136315394;
      os_log_t v43 = v19;
      uint64_t v23 = _typeName(_:qualified:)(v4, 0LL);
      uint64_t v51 = sub_10015ADC4(v23, v24, &v52);
      uint64_t v41 = &v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v40 = v22 + 14;
      uint64_t v42 = v5;
      uint64_t v25 = v49;
      v49(v13, v14, v8);
      uint64_t v26 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v8, v26);
      unint64_t v29 = v28;
      v47(v13, v8);
      uint64_t v51 = sub_10015ADC4(v27, v29, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v41, v40, v22 + 22);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      os_log_t v30 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v46,  "[%s] setRoutingMode - value: %s",  (uint8_t *)v22,  0x16u);
      uint64_t v31 = v44;
      swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v42);
    }

    else
    {

      swift_release_n(v2, 2LL);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v5);
      uint64_t v25 = v49;
    }

    uint64_t v32 = v48;
    v25(v48, v14, v8);
    int v33 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v32, v8);
    if (v33 == enum case for RoutingMode.disabled(_:) || v33 == enum case for RoutingMode.prewarm(_:))
    {
      uint64_t v34 = (void *)sub_100178884();
      [v34 setDiscoveryMode:0];
    }

    else if (v33 == enum case for RoutingMode.localNetwork(_:))
    {
      uint64_t v34 = (void *)sub_100178884();
      [v34 setDiscoveryMode:2];
    }

    else
    {
      if (v33 != enum case for RoutingMode.detailed(_:))
      {
        uint64_t v52 = 0LL;
        unint64_t v53 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(38LL);
        swift_bridgeObjectRelease();
        uint64_t v52 = 91LL;
        unint64_t v53 = 0xE100000000000000LL;
        v35._countAndFlagsBits = _typeName(_:qualified:)(v45, 0LL);
        String.append(_:)(v35);
        swift_bridgeObjectRelease();
        v36._object = (void *)0x800000010033AD10LL;
        v36._countAndFlagsBits = 0xD000000000000021LL;
        String.append(_:)(v36);
        v25(v13, v14, v8);
        uint64_t v37 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
        v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v37);
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        v47(v13, v8);
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v52,  v53,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  162LL,  0);
        __break(1u);
        return;
      }

      uint64_t v34 = (void *)sub_100178884();
      [v34 setDiscoveryMode:3];
    }
  }

uint64_t sub_100177DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100177DF4( &OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode,  (uint64_t (*)(void))&type metadata accessor for RoutingMode,  a1);
}

uint64_t sub_100177DF4@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess(v6, v9, 0LL, 0LL);
  uint64_t v7 = a2(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a3, v6, v7);
}

uint64_t sub_100177E60(uint64_t a1)
{
  return sub_100177E74( a1,  &OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode,  (void (*)(_BYTE *))sub_100177894);
}

uint64_t sub_100177E74(uint64_t a1, void *a2, void (*a3)(_BYTE *))
{
  uint64_t v7 = type metadata accessor for RoutingMode(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = v3 + *a2;
  swift_beginAccess(v11, v15, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  swift_beginAccess(v11, v14, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, a1, v7);
  swift_endAccess(v14);
  a3(v10);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v12(a1, v7);
  return ((uint64_t (*)(_BYTE *, uint64_t))v12)(v10, v7);
}

void (*sub_100177F74(void *a1))(char **a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode;
  v3[14] = v7;
  v3[15] = v8;
  uint64_t v9 = v1 + v8;
  swift_beginAccess(v9, v3, 0LL, 0LL);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 16);
  v3[16] = v10;
  v10(v7, v9, v4);
  return sub_10017803C;
}

void sub_10017803C(char **a1, char a2)
{
}

void sub_100178048(char **a1, char a2, void (*a3)(void *))
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void (*)(void *, void *, uint64_t))*((void *)*a1 + 16);
  uint64_t v5 = (void *)*((void *)*a1 + 13);
  size_t v6 = (void *)*((void *)*a1 + 14);
  uint64_t v8 = *((void *)*a1 + 11);
  uint64_t v7 = (void *)*((void *)*a1 + 12);
  uint64_t v9 = *((void *)*a1 + 10);
  uint64_t v10 = (void *)(*((void *)*a1 + 9) + *((void *)*a1 + 15));
  if ((a2 & 1) != 0)
  {
    v4(*((void **)*a1 + 13), v6, v9);
    v4(v7, v10, v9);
    swift_beginAccess(v10, v3 + 24, 33LL, 0LL);
    (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v5, v9);
    swift_endAccess(v3 + 24);
    a3(v7);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v5, v9);
    v11(v7, v9);
    uint64_t v12 = v6;
  }

  else
  {
    v4(*((void **)*a1 + 13), v10, v9);
    swift_beginAccess(v10, v3 + 48, 33LL, 0LL);
    (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v6, v9);
    swift_endAccess(v3 + 48);
    a3(v5);
    uint64_t v11 = *(void (**)(void *, uint64_t))(v8 + 8);
    v11(v6, v9);
    uint64_t v12 = v5;
  }

  v11(v12, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t sub_1001781B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems,  v60,  0LL,  0LL);
  uint64_t v10 = swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_10017FF40(v10, a1);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) != 0) {
    return result;
  }
  uint64_t v12 = sub_1001741A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
  uint64_t v13 = swift_retain_n(v2, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    int v57 = v16;
    uint64_t v18 = v17;
    uint64_t v56 = swift_slowAlloc(64LL, -1LL);
    v59[0] = v56;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v19 = _typeName(_:qualified:)(v4, 0LL);
    uint64_t v58 = sub_10015ADC4(v19, v20, v59);
    os_log_t v55 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v54 = v18 + 14;
    uint64_t v21 = type metadata accessor for HostedRoutingItem(0LL);
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = Array.description.getter(v22, v21);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v58 = sub_10015ADC4(v23, v25, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v54, v18 + 22);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease();
    os_log_t v26 = v55;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  (os_log_type_t)v57,  "[%s] setRoutingItems - value: %s",  (uint8_t *)v18,  0x16u);
    uint64_t v27 = v56;
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v2, 2LL);
  }

  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*v2 + 272LL))(v28);
  if (v29)
  {
    uint64_t v31 = v29;
    uint64_t v32 = v30;
    uint64_t ObjectType = swift_getObjectType(v29, v30);
    uint64_t v34 = *v9;
    Swift::String v35 = *(void (**)(void *, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v32 + 8);
    swift_bridgeObjectRetain();
    v35(v2, &off_1003A4070, v34, ObjectType, v32);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v31);
  }

  Swift::String v36 = (void *)((char *)v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers);
  swift_beginAccess(v36, v59, 0LL, 0LL);
  uint64_t v37 = *v36;
  uint64_t v38 = v37 + 64;
  uint64_t v39 = 1LL << *(_BYTE *)(v37 + 32);
  uint64_t v40 = -1LL;
  if (v39 < 64) {
    uint64_t v40 = ~(-1LL << v39);
  }
  unint64_t v41 = v40 & *(void *)(v37 + 64);
  int64_t v42 = (unint64_t)(v39 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n(v37, 2LL);
  int64_t v43 = 0LL;
  while (1)
  {
    if (v41)
    {
      unint64_t v44 = __clz(__rbit64(v41));
      v41 &= v41 - 1;
      unint64_t v45 = v44 | (v43 << 6);
      goto LABEL_11;
    }

    int64_t v50 = v43 + 1;
    if (__OFADD__(v43, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v50 >= v42) {
      goto LABEL_29;
    }
    unint64_t v51 = *(void *)(v38 + 8 * v50);
    ++v43;
    if (!v51)
    {
      int64_t v43 = v50 + 1;
      if (v50 + 1 >= v42) {
        goto LABEL_29;
      }
      unint64_t v51 = *(void *)(v38 + 8 * v43);
      if (!v51)
      {
        int64_t v43 = v50 + 2;
        if (v50 + 2 >= v42) {
          goto LABEL_29;
        }
        unint64_t v51 = *(void *)(v38 + 8 * v43);
        if (!v51)
        {
          int64_t v43 = v50 + 3;
          if (v50 + 3 >= v42) {
            goto LABEL_29;
          }
          unint64_t v51 = *(void *)(v38 + 8 * v43);
          if (!v51) {
            break;
          }
        }
      }
    }

uint64_t sub_100178604()
{
  return sub_100178610(&OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems);
}

uint64_t sub_100178610(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_100178654(uint64_t a1)
{
  return sub_100178668( a1,  &OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems,  (void (*)(uint64_t))sub_1001781B4);
}

uint64_t sub_100178668(uint64_t a1, void *a2, void (*a3)(uint64_t))
{
  uint64_t v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess(v6, v9, 1LL, 0LL);
  uint64_t v7 = *v6;
  *uint64_t v6 = a1;
  a3(v7);
  return swift_bridgeObjectRelease(v7);
}

void (*sub_1001786D4(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = (void *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1LL, 0LL);
  v3[3] = *v5;
  swift_bridgeObjectRetain();
  return sub_100178748;
}

void sub_100178748(void **a1, char a2)
{
}

void sub_100178754(void **a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v6 = *a1 + 3;
  uint64_t v5 = *v6;
  uint64_t v8 = v4[4];
  uint64_t v7 = v4[5];
  uint64_t v9 = *(void *)(v8 + v7);
  *(void *)(v8 + v7) = *v6;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(v5);
    a3(v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v9 = *v6;
  }

  else
  {
    a3(v9);
  }

  swift_bridgeObjectRelease(v9);
  free(v4);
}

uint64_t sub_1001787D0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10017881C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  swift_beginAccess(v5, v7, 1LL, 0LL);
  *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_100178884()
{
  uint64_t v1 = OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession);
LABEL_8:
    id v10 = v2;
    return (uint64_t)v3;
  }

  id v4 =  [(id)objc_opt_self(MRAVRoutingDiscoverySession) discoverySessionWithEndpointFeatures:1];
  if (v4)
  {
    uint64_t v5 = v4;
    [v4 setAlwaysAllowUpdates:1];
    uint64_t v6 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
    swift_weakInit(v6 + 16, v0);
    uint64_t v14 = sub_10018491C;
    uint64_t v15 = v6;
    *(void *)&__int128 v12 = _NSConcreteStackBlock;
    *((void *)&v12 + 1) = 1107296256LL;
    *(void *)&__int128 v13 = sub_100178C38;
    *((void *)&v13 + 1) = &unk_1003A4360;
    uint64_t v7 = _Block_copy(&v12);
    swift_release(v15);
    id v8 = [v5 addOutputDevicesChangedCallback:v7];
    _Block_release(v7);
    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(&v12);
      swift_unknownObjectRelease(v8);
    }

    else
    {
      __int128 v12 = 0u;
      __int128 v13 = 0u;
    }

    sub_100184924((uint64_t)&v12, (uint64_t)v16);
    sub_1001603DC((uint64_t)v16, &qword_1003F9EE0);
    uint64_t v9 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    uint64_t v2 = 0LL;
    goto LABEL_8;
  }

  memset(v16, 0, sizeof(v16));
  uint64_t result = sub_1001603DC((uint64_t)v16, &qword_1003F9EE0);
  __break(1u);
  return result;
}

uint64_t sub_100178A1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v25, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = (*(uint64_t (**)(void))(*(void *)result + 152LL))();
    uint64_t v21 = v3;
    __int128 v13 = (void *)v12;
    aBlock[4] = sub_10018496C;
    uint64_t v24 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100157EA8;
    aBlock[3] = &unk_1003A4388;
    uint64_t v14 = _Block_copy(aBlock);
    uint64_t v20 = v6;
    uint64_t v15 = v14;
    uint64_t v16 = swift_retain(v11);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v22 = &_swiftEmptyArrayStorage;
    uint64_t v17 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v18 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v19 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v2, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v15);
    _Block_release(v15);
    swift_release(v11);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v20);
    return swift_release(v24);
  }

  return result;
}

uint64_t sub_100178C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v5 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v5);
  }

  swift_retain(v3);
  v4(v2);
  swift_release(v3);
  return swift_bridgeObjectRelease();
}

id sub_100178CA8()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8D58);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034C140;
  uint64_t v2 = (void *)MRAVEndpointVolumeDidChangeNotification;
  uint64_t v3 = MRAVEndpointVolumeControlCapabilitiesDidChangeNotification;
  id v6 = (id)MRAVEndpointVolumeControlCapabilitiesDidChangeNotification;
  *(void *)(v1 + 32) = MRAVEndpointVolumeDidChangeNotification;
  *(void *)(v1 + 40) = v3;
  qword_1003FE888 = v1;
  id v4 = v2;
  return v6;
}

uint64_t sub_100178D14(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v3 = result;
    (*(void (**)(uint64_t))(*(void *)result + 360LL))(result);
    return swift_release(v3);
  }

  return result;
}

uint64_t sub_100178D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = Notification.userInfo.getter();
  if (!v3)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    return sub_1001603DC((uint64_t)&v13, &qword_1003F9EE0);
  }

  uint64_t v4 = v3;
  v11[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(MRAVEndpointOutputDeviceUserInfoKey);
  v11[1] = v5;
  AnyHashable.init<A>(_:)(v11, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_10015CAA4((uint64_t)v12), (v7 & 1) != 0))
  {
    sub_100160800(*(void *)(v4 + 56) + 32 * v6, (uint64_t)&v13);
  }

  else
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
  }

  swift_bridgeObjectRelease();
  sub_100160990((uint64_t)v12);
  if (!*((void *)&v14 + 1)) {
    return sub_1001603DC((uint64_t)&v13, &qword_1003F9EE0);
  }
  uint64_t v8 = a2 + 16;
  sub_1001603DC((uint64_t)&v13, &qword_1003F9EE0);
  swift_beginAccess(v8, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v8);
  if (result)
  {
    uint64_t v10 = result;
    (*(void (**)(uint64_t))(*(void *)result + 360LL))(result);
    return swift_release(v10);
  }

  return result;
}

uint64_t sub_100178E84()
{
  return sub_100178E90(&OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
}

uint64_t sub_100178E90(void *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = 0LL;
  unint64_t v27 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease();
  uint64_t v26 = 60LL;
  unint64_t v27 = 0xE100000000000000LL;
  v11._countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 60LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  __int128 v13 = (uint64_t *)((char *)v1 + *a1);
  uint64_t v14 = *v13;
  uint64_t v15 = (void *)v13[1];
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x65707974202D203ELL;
  v17._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v17);
  (*(void (**)(void))(*v1 + 176))();
  uint64_t v18 = sub_100156FEC( &qword_1003F88E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v20._countAndFlagsBits = 0x6E6974756F72202CLL;
  v20._object = (void *)0xEF203A65646F4D67LL;
  String.append(_:)(v20);
  (*(void (**)(void))(*v1 + 200))();
  uint64_t v21 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v21);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  return v26;
}

uint64_t sub_1001790DC()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 368LL))();
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 232LL))(v1);
}

void sub_100179100()
{
  uint64_t v153 = sub_100156B68(&qword_1003F8910);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  Swift::String v151 = (char *)&v150 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v1 = sub_100156B68(&qword_1003F8918);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v150 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v150 - v5;
  uint64_t v7 = sub_100156B68(&qword_1003F8920);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v164 = (uint64_t)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v165 = (uint64_t)&v150 - v11;
  __chkstk_darwin(v10);
  __int128 v13 = (char *)&v150 - v12;
  uint64_t v173 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v168 = *(void *)(v173 - 8);
  uint64_t v14 = __chkstk_darwin(v173);
  Swift::String v155 = (uint64_t *)((char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v14);
  Swift::String v156 = (uint64_t *)((char *)&v150 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v167 = (uint64_t)&v150 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v150 - v20);
  sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
  id v169 = sub_1002A8918();
  Swift::String v22 = (void *)objc_opt_self(&OBJC_CLASS___MRAVLocalEndpoint);
  id v158 = [v22 sharedLocalEndpoint];
  id v23 = [v158 outputDevices];
  if (!v23)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  uint64_t v24 = v23;
  uint64_t v159 = v6;
  uint64_t v25 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
  uint64_t v160 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v25);

  uint64_t v26 = (void *)sub_100178884();
  id v27 = [v26 availableOutputDevices];

  if (v27)
  {
    uint64_t v157 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v25);

    id v28 = [v22 sharedLocalEndpoint];
    id v29 = [v28 predictedOutputDevice];

    uint64_t v30 = &selRef_state;
    v166 = v4;
    if (v29)
    {
      id v31 = [v29 uid];
      if (v31)
      {
        uint64_t v32 = v31;
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        uint64_t v35 = v34;
        id v36 = [v29 name];
        if (v36)
        {
          uint64_t v37 = v36;
          uint64_t v175 = (void *)v33;
          unint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          uint64_t v172 = v38;

          uint64_t v39 = sub_10021924C();
          uint64_t v170 = v40;
          uint64_t v171 = v39;
          LODWORD(v163) = v41;
          uint64_t v42 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
          int v43 = 1;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v13, 1LL, 1LL, v42);
          char v44 = sub_100217B34();
          LOBYTE(v37) = [v169 matchesUID:v32];

          BOOL v45 = 1;
          if ((v37 & 1) == 0)
          {
            uint64_t v46 = sub_10021924C();
            uint64_t v48 = v47;
            unsigned int v50 = v49;
            BOOL v45 = sub_10024664C(v46, v47, v49);
            sub_1001835D8(v46, v48, v50);
          }

          char v51 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
          char v52 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
          char v53 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
          swift_bridgeObjectRetain();
          LOBYTE(v176) = 1;
          char v147 = v52 & 1;
          uint64_t v54 = (uint64_t)v175;
          sub_10024A07C( (uint64_t)v175,  v35,  0LL,  0LL,  v174,  v172,  v171,  v170,  v21,  v163,  1,  v51 & 1,  (uint64_t)v13,  v44,  v147,  v45,  v148,  0,  1,  0,  v53);
          uint64_t v55 = v167;
          sub_10018364C((uint64_t)v21, v167);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
          uint64_t v176 = &_swiftEmptyDictionarySingleton;
          sub_1001819BC(v55, v54, v35, isUniquelyReferenced_nonNull_native);
          int v57 = v176;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v58 = v160;
          if (v160 < 0)
          {
            uint64_t v4 = v166;
            uint64_t v59 = v168;
            uint64_t v30 = &selRef_state;
            goto LABEL_41;
          }

          uint64_t v4 = v166;
          uint64_t v59 = v168;
          uint64_t v30 = &selRef_state;
          if ((v160 & 0x4000000000000000LL) != 0)
          {
            while (1)
            {
LABEL_41:
              if (v58 < 0) {
                uint64_t v100 = v58;
              }
              else {
                uint64_t v100 = v58 & 0xFFFFFFFFFFFFFF8LL;
              }
              swift_bridgeObjectRetain();
              uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v100);
              swift_bridgeObjectRelease();
              if (!v60) {
                goto LABEL_45;
              }
LABEL_17:
              if (v60 >= 1) {
                break;
              }
              __break(1u);
LABEL_39:
              uint64_t v59 = v168;
            }

            uint64_t v61 = 0LL;
            unint64_t v174 = v58 & 0xC000000000000001LL;
            int v154 = v43 ^ 1;
            uint64_t v170 = v60;
            while (1)
            {
              if (v174) {
                id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v58);
              }
              else {
                id v62 = *(id *)(v58 + 8 * v61 + 32);
              }
              uint64_t v63 = v62;
              id v64 = [v62 v30[172]];
              if (v64)
              {
                uint64_t v65 = v64;
                uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
                uint64_t v68 = v67;
                id v69 = [v63 name];
                if (v69)
                {
                  uint64_t v70 = v69;
                  uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
                  uint64_t v172 = v71;

                  if (v57[2])
                  {
                    int v72 = v4;
                    swift_bridgeObjectRetain();
                    unint64_t v73 = sub_10015CAD4(v66, v68);
                    if ((v74 & 1) != 0)
                    {
                      uint64_t v75 = (uint64_t)v159;
                      sub_100183690(v57[7] + *(void *)(v59 + 72) * v73, (uint64_t)v159);
                      uint64_t v76 = 0LL;
                    }

                    else
                    {
                      uint64_t v76 = 1LL;
                      uint64_t v75 = (uint64_t)v159;
                    }

                    uint64_t v77 = v173;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v75, v76, 1LL, v173);
                    swift_bridgeObjectRelease();
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v75, 1LL, v77) == 1)
                    {
LABEL_33:
                      uint64_t v175 = v57;
                      sub_1001603DC(v75, &qword_1003F8918);
                      id v78 = v158;
                      char v79 = [v158 volumeControlCapabilitiesForOutputDeviceUID:v65];
                      [v78 volumeForOutputDeviceUID:v65];
                      unsigned int v81 = v80;
                      uint64_t v82 = sub_10021924C();
                      uint64_t v162 = v83;
                      uint64_t v163 = v82;
                      int v161 = v84;
                      uint64_t v85 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
                      BOOL v86 = 1;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL))( v165,  1LL,  1LL,  v85);
                      char v87 = sub_100217B34();
                      LOBYTE(v7_Block_object_dispose(va, 8) = [v169 matchesUID:v65];

                      if ((v78 & 1) == 0)
                      {
                        uint64_t v88 = sub_10021924C();
                        uint64_t v90 = v89;
                        unsigned int v92 = v91;
                        BOOL v86 = sub_10024664C(v88, v89, v91);
                        sub_1001835D8(v88, v90, v92);
                      }

                      char v93 = sub_100249924(v79);
                      char v94 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                      char v95 = variable initialization expression of MRDFastSyncGroupSession.hasEncounteredLowPowerError();
                      swift_bridgeObjectRetain();
                      LOBYTE(v176) = 0;
                      char v149 = v93;
                      uint64_t v96 = v156;
                      sub_10024A07C( v66,  v68,  0LL,  0LL,  v171,  v172,  v163,  v162,  v156,  v161,  v154,  v94 & 1,  v165,  v87,  v95 & 1,  v86,  v148,  v81,  0,  (unint64_t)v81 >> 48,  v149);
                      uint64_t v97 = v167;
                      sub_10018364C((uint64_t)v96, v167);
                      uint64_t v98 = (uint64_t)v175;
                      char v99 = swift_isUniquelyReferenced_nonNull_native(v175);
                      uint64_t v176 = (void *)v98;
                      sub_1001819BC(v97, v66, v68, v99);
                      int v57 = v176;

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v4 = v166;
                      uint64_t v59 = v168;
                      uint64_t v30 = &selRef_state;
                    }

                    else
                    {

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();

                      sub_1001603DC(v75, &qword_1003F8918);
                      uint64_t v30 = &selRef_state;
                      uint64_t v4 = v72;
                    }

                    uint64_t v58 = v160;
                    uint64_t v60 = v170;
                    goto LABEL_20;
                  }

                  uint64_t v75 = (uint64_t)v159;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56))(v159, 1LL, 1LL, v173);
                  goto LABEL_33;
                }

                swift_bridgeObjectRelease();

                uint64_t v30 = &selRef_state;
                uint64_t v60 = v170;
              }

              else
              {
              }

LABEL_71:
          swift_bridgeObjectRelease();
          uint64_t v176 = v175;
          uint64_t KeyPath = swift_getKeyPath(&unk_10034C180);
          swift_bridgeObjectRetain();
          Swift::String v140 = v151;
          KeyPathComparator.init<A>(_:order:)(KeyPath, 0LL, &protocol witness table for String);
          uint64_t v141 = sub_100156B68(&qword_1003F8930);
          uint64_t v142 = sub_1001604E8( &qword_1003F8938,  &qword_1003F8930,  (uint64_t)&protocol conformance descriptor for [A : B].Values);
          uint64_t v143 = sub_1001604E8( &qword_1003F8940,  &qword_1003F8910,  (uint64_t)&protocol conformance descriptor for KeyPathComparator<A>);
          uint64_t v144 = v141;
          uint64_t v145 = v153;
          Sequence.sorted<A>(using:)(v140, v144, v153, v142, v143);

          (*(void (**)(char *, uint64_t))(v152 + 8))(v140, v145);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v32 = v29;
      }
    }

    int v43 = 0;
    int v57 = &_swiftEmptyDictionarySingleton;
    uint64_t v58 = v160;
    if (v160 < 0) {
      goto LABEL_39;
    }
    uint64_t v59 = v168;
    if ((v160 & 0x4000000000000000LL) != 0) {
      goto LABEL_41;
    }
    goto LABEL_16;
  }

LABEL_74:
  __break(1u);
}

    v75[(v78 >> 6) + 8] |= 1LL << v78;
    unsigned int v91 = (uint64_t *)(v75[6] + 16 * v78);
    void *v91 = v62;
    v91[1] = v61;
    *(void *)(v75[7] + 8 * v7_Block_object_dispose(va, 8) = v73;
    unsigned int v92 = v75[2];
    char v93 = __OFADD__(v92, 1LL);
    char v94 = v92 + 1;
    if (v93) {
      goto LABEL_85;
    }
    v75[2] = v94;
    swift_bridgeObjectRetain();
    goto LABEL_76;
  }

  uint64_t v34 = *(void *)&v28[8 * v35];
  if (v34)
  {
    uint64_t v25 = v35;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v25 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v25 >= v30) {
      goto LABEL_35;
    }
    uint64_t v34 = *(void *)&v28[8 * v25];
    ++v35;
    if (v34) {
      goto LABEL_27;
    }
  }

uint64_t sub_100179EB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_itemType;
  uint64_t v2 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode;
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100183478(v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100179F90()
{
  return sub_100179F9C((void (*)(void))sub_100179EB8);
}

uint64_t sub_100179F9C(void (*a1)(void))
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

void sub_100179FC0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t sub_100179FEC(void **a1, uint64_t a2, void (*a3)(void, void, void))
{
  v251 = a3;
  uint64_t v263 = a2;
  v272 = a1;
  uint64_t v261 = *v3;
  uint64_t v236 = type metadata accessor for RoutingControl.RoutingControlType(0LL);
  uint64_t v244 = *(void *)(v236 - 8);
  __chkstk_darwin(v236);
  uint64_t v237 = (char *)&v231 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v238 = type metadata accessor for RoutingControl(0LL);
  uint64_t v246 = *(void *)(v238 - 8);
  __chkstk_darwin(v238);
  uint64_t v245 = (uint64_t)&v231 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100156B68(&qword_1003F8918);
  __chkstk_darwin(v6);
  uint64_t v241 = (uint64_t)&v231 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v240 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v239 = *(void *)(v240 - 8);
  uint64_t v8 = __chkstk_darwin(v240);
  v249 = (uint64_t *)((char *)&v231 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v242 = (uint64_t)&v231 - v10;
  uint64_t v253 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v252 = *(void *)(v253 - 8);
  __chkstk_darwin(v253);
  v254 = (char *)&v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v269 = *(void *)(v12 - 8);
  uint64_t v270 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  id v233 = (char *)&v231 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  v234 = (char *)&v231 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v248 = (char *)&v231 - v18;
  uint64_t v247 = v19;
  __chkstk_darwin(v17);
  v265 = (char *)&v231 - v20;
  uint64_t v264 = type metadata accessor for Logger(0LL);
  uint64_t v267 = *(void *)(v264 - 8);
  uint64_t v21 = __chkstk_darwin(v264);
  v243 = (char *)&v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  v266 = (char *)&v231 - v23;
  uint64_t v271 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v24 = *(void *)(v271 - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  uint64_t v26 = __chkstk_darwin(v271);
  v250 = (char *)&v231 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  id v28 = (char *)&v231 - v27;
  uint64_t v29 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(void *)(v30 + 64);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v231 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  id v36 = (char *)&v231 - v35;
  uint64_t v260 = RoutingInteraction.identifier.getter(v34);
  v262 = v37;
  uint64_t v38 = ContinuousClock.init()(v260);
  ContinuousClock.now.getter(v38);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v257 = v36;
  v39(v33, v36, v29);
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v255 = v28;
  v40((char *)&v231 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL), v28, v271);
  uint64_t v41 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  uint64_t v43 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v44 = (v31 + v43 + v42) & ~v43;
  unint64_t v45 = (v25 + v44 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v46 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v48 = swift_allocObject(&unk_1003A3EF8, v47 + 8, v41 | v43 | 7);
  uint64_t v258 = v30;
  unsigned int v49 = *(void (**)(uint64_t, char *, uint64_t))(v30 + 32);
  uint64_t v50 = v264;
  uint64_t v259 = v29;
  v49(v48 + v42, v33, v29);
  uint64_t v51 = v48 + v44;
  char v52 = v262;
  uint64_t v256 = v24;
  char v53 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
  uint64_t v54 = v260;
  v53(v51, v250, v271);
  uint64_t v55 = (uint64_t *)(v48 + v45);
  uint64_t v56 = (uint64_t)v272;
  uint64_t *v55 = v54;
  v55[1] = (uint64_t)v52;
  int v57 = (void *)(v48 + v46);
  uint64_t v58 = v251;
  void *v57 = v263;
  v57[1] = v58;
  uint64_t v263 = v48;
  uint64_t v59 = v261;
  *(void *)(v48 + v47) = v261;
  uint64_t v60 = v59;
  swift_bridgeObjectRetain();
  swift_retain(v58);
  uint64_t v61 = sub_1001741A8();
  id v62 = *(char **)(v267 + 16);
  uint64_t v235 = v61;
  v250 = v62;
  ((void (*)(char *))v62)(v266);
  v251 = *(void (**)(void, void, void))(v269 + 16);
  v251(v265, v56, v270);
  swift_bridgeObjectRetain_n(v52, 2LL);
  uint64_t v63 = v268;
  uint64_t v64 = swift_retain_n(v268, 2LL);
  uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
  os_log_type_t v66 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = swift_slowAlloc(42LL, -1LL);
    v232 = (void **)swift_slowAlloc(128LL, -1LL);
    aBlock = v232;
    *(_DWORD *)uint64_t v67 = 136315906;
    uint64_t v68 = _typeName(_:qualified:)(v60, 0LL);
    unint64_t v69 = (unint64_t)v52;
    uint64_t v273 = sub_10015ADC4(v68, v70, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v67 + 4, v67 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2080;
    uint64_t v71 = v54;
    uint64_t v73 = *(void *)(v63 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
    unint64_t v72 = *(void *)(v63 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
    swift_bridgeObjectRetain();
    uint64_t v74 = v73;
    char v52 = (void *)v69;
    uint64_t v273 = sub_10015ADC4(v74, v72, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v67 + 14, v67 + 22);
    swift_release_n(v63, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v273 = sub_10015ADC4(v71, v69, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v67 + 24, v67 + 32);
    swift_bridgeObjectRelease_n(v69, 3LL);
    *(_WORD *)(v67 + 32) = 2080;
    uint64_t v75 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    uint64_t v76 = v265;
    uint64_t v77 = v270;
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v270, v75);
    uint64_t v273 = sub_10015ADC4(v78, v79, (uint64_t *)&aBlock);
    uint64_t v56 = (uint64_t)v272;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v67 + 34, v67 + 42);
    swift_bridgeObjectRelease();
    uint64_t v80 = v77;
    uint64_t v50 = v264;
    (*(void (**)(char *, uint64_t))(v269 + 8))(v76, v80);
    _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "[%s]<%s> interact<%s> - interaction: %s",  (uint8_t *)v67,  0x2Au);
    unsigned int v81 = v232;
    swift_arrayDestroy(v232, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1LL, -1LL);
    swift_slowDealloc(v67, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v52, 2LL);
    swift_release_n(v63, 2LL);
    (*(void (**)(char *, uint64_t))(v269 + 8))(v265, v270);
  }

  uint64_t v82 = (*(uint64_t (**)(char *, uint64_t))(v267 + 8))(v266, v50);
  uint64_t v83 = v254;
  RoutingInteraction.action.getter(v82);
  uint64_t v84 = v252;
  uint64_t v85 = v253;
  int v86 = (*(uint64_t (**)(void *, uint64_t))(v252 + 88))(v83, v253);
  if (v86 != enum case for RoutingInteraction.Action.add(_:))
  {
    if (v86 == enum case for RoutingInteraction.Action.remove(_:))
    {
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v84 + 96))(v83, v85);
      uint64_t v90 = v268;
      uint64_t v112 = (char *)v83[1];
      uint64_t v267 = *v83;
      uint64_t v113 = v267;
      swift_bridgeObjectRelease();
      id v114 = MRRequestDetailsInitiatorRoutePicker;
      RoutingInteraction.identifier.getter(v114);
      uint64_t v115 = v270;
      uint64_t v116 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      dispatch thunk of CustomStringConvertible.description.getter(v115, v116);
      id v117 = objc_allocWithZone(&OBJC_CLASS___MRRequestDetails);
      NSString v118 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v119 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v120 = [v117 initWithInitiator:v114 requestID:v118 reason:v119 userInitiated:1];

      uint64_t v121 = sub_100156B68(&qword_1003F8620);
      uint64_t v122 = swift_allocObject(v121, 48LL, 7LL);
      *(_OWORD *)(v122 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034BE40;
      *(void *)(v122 + 32) = v113;
      *(void *)(v122 + 40) = v112;
      v266 = v112;
      id v123 = objc_allocWithZone(&OBJC_CLASS___MRGroupTopologyModificationRequest);
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v101 = [v123 initWithRequestDetails:v120 type:2 outputDeviceUIDs:isa];

      id v102 = [(id)objc_opt_self(MRAVLocalEndpoint) sharedLocalEndpoint];
      uint64_t v103 = (void *)(*(uint64_t (**)(void))(*(void *)v90 + 152LL))();
      uint64_t v125 = v248;
      v251(v248, v272, v115);
      uint64_t v126 = v269;
      uint64_t v127 = *(unsigned __int8 *)(v269 + 80);
      uint64_t v128 = (v127 + 56) & ~v127;
      unsigned int v129 = (char *)swift_allocObject(&unk_1003A3F70, v128 + v247, v127 | 7);
      uint64_t v109 = v263;
      *((void *)v129 + 2) = sub_1001837C8;
      *((void *)v129 + 3) = v109;
      char v130 = v266;
      *((void *)v129 + 4) = v267;
      *((void *)v129 + 5) = v130;
      *((void *)v129 + 6) = v90;
      (*(void (**)(char *, char *, uint64_t))(v126 + 32))(&v129[v128], v125, v115);
      v278 = sub_100183984;
      v279 = v129;
      aBlock = _NSConcreteStackBlock;
      unint64_t v275 = 1107296256LL;
      id v111 = &unk_1003A3F88;
      goto LABEL_8;
    }

    if (v86 == enum case for RoutingInteraction.Action.set(_:))
    {
      (*(void (**)(void *, uint64_t))(v84 + 96))(v83, v85);
      uint64_t v135 = *v83;
      uint64_t v134 = v83[1];
      swift_bridgeObjectRelease();
      id v136 = MRRequestDetailsInitiatorRoutePicker;
      RoutingInteraction.identifier.getter(v136);
      uint64_t v137 = v56;
      uint64_t v138 = v270;
      uint64_t v139 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      uint64_t v140 = v138;
      dispatch thunk of CustomStringConvertible.description.getter(v138, v139);
      id v141 = objc_allocWithZone(&OBJC_CLASS___MRRequestDetails);
      NSString v142 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v143 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v144 = [v141 initWithInitiator:v136 requestID:v142 reason:v143 userInitiated:1];

      uint64_t v145 = sub_100156B68(&qword_1003F8620);
      uint64_t v146 = swift_allocObject(v145, 48LL, 7LL);
      *(_OWORD *)(v146 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034BE40;
      *(void *)(v146 + 32) = v135;
      *(void *)(v146 + 40) = v134;
      id v147 = objc_allocWithZone(&OBJC_CLASS___MRGroupTopologyModificationRequest);
      swift_bridgeObjectRetain();
      Class v148 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v266 = (char *)[v147 initWithRequestDetails:v144 type:3 outputDeviceUIDs:v148];

      v254 = (char *)objc_opt_self(&OBJC_CLASS___MRAVLocalEndpoint);
      v265 = (char *)[v254 sharedLocalEndpoint];
      uint64_t v149 = v268;
      uint64_t v150 = (void *)(*(uint64_t (**)(void))(*(void *)v268 + 152LL))();
      Swift::String v151 = v248;
      uint64_t v152 = v137;
      uint64_t v153 = v140;
      v251(v248, v152, v140);
      uint64_t v154 = v269;
      uint64_t v155 = *(unsigned __int8 *)(v269 + 80);
      uint64_t v156 = (v155 + 56) & ~v155;
      uint64_t v157 = (char *)swift_allocObject(&unk_1003A3F20, v156 + v247, v155 | 7);
      uint64_t v158 = v263;
      *((void *)v157 + 2) = sub_1001837C8;
      *((void *)v157 + 3) = v158;
      *((void *)v157 + 4) = v135;
      *((void *)v157 + 5) = v134;
      *((void *)v157 + 6) = v149;
      (*(void (**)(char *, char *, uint64_t))(v154 + 32))(&v157[v156], v151, v153);
      v278 = sub_1001838A4;
      v279 = v157;
      aBlock = _NSConcreteStackBlock;
      unint64_t v275 = 1107296256LL;
      v276 = sub_100157E54;
      v277 = &unk_1003A3F38;
      uint64_t v159 = _Block_copy(&aBlock);
      uint64_t v160 = v279;
      swift_retain(v149);
      swift_retain(v158);
      swift_bridgeObjectRetain();
      swift_release(v160);
      int v161 = v265;
      [v265 modifyTopologyWithRequest:v266 withReplyQueue:v150 completion:v159];
      _Block_release(v159);

      uint64_t v162 = (*(uint64_t (**)(void))(*(void *)v149 + 224LL))();
      uint64_t v163 = *(void *)(v162 + 16);
      if (v163)
      {
        uint64_t v164 = v239;
        uint64_t v165 = v162 + ((*(unsigned __int8 *)(v239 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80));
        uint64_t v166 = *(void *)(v239 + 72);
        uint64_t v167 = v264;
        uint64_t v168 = v249;
        while (1)
        {
          sub_100183690(v165, (uint64_t)v168);
          uint64_t v169 = v168[1];
          if (*v168 == v135 && v169 == v134) {
            break;
          }
          char v171 = _stringCompareWithSmolCheck(_:_:expecting:)(*v168, v169, v135, v134, 0LL);
          uint64_t v168 = v249;
          if ((v171 & 1) != 0) {
            break;
          }
          sub_1001838D0((uint64_t)v249);
          v165 += v166;
          if (!--v163)
          {
            uint64_t v172 = 1LL;
            uint64_t v173 = v241;
            goto LABEL_26;
          }
        }

        uint64_t v173 = v241;
        sub_10018364C((uint64_t)v168, v241);
        uint64_t v172 = 0LL;
LABEL_26:
        uint64_t v182 = v167;
        unint64_t v183 = (unint64_t)v262;
      }

      else
      {
        unint64_t v183 = (unint64_t)v262;
        uint64_t v182 = v264;
        uint64_t v173 = v241;
        uint64_t v164 = v239;
        uint64_t v172 = 1LL;
      }

      uint64_t v184 = v240;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v164 + 56))(v173, v172, 1LL, v240);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v185 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v164 + 48))(v173, 1LL, v184);
      v186 = v243;
      if (v185 == 1)
      {
        swift_bridgeObjectRelease();
        swift_release(v263);

        (*(void (**)(char *, uint64_t))(v256 + 8))(v255, v271);
        (*(void (**)(char *, uint64_t))(v258 + 8))(v257, v259);
        return sub_1001603DC(v173, &qword_1003F8918);
      }

      uint64_t v187 = v242;
      sub_10018364C(v173, v242);
      uint64_t v188 = v187 + *(int *)(v184 + 56);
      unsigned int v189 = *(unsigned __int16 *)(v188 + 16);
      if (((v189 >> 8) & 6 | (v189 >> 7) & 1) == 5)
      {
        ((void (*)(char *, uint64_t, uint64_t))v250)(v186, v235, v182);
        swift_retain_n(v268, 2LL);
        uint64_t v190 = swift_bridgeObjectRetain();
        v191 = (os_log_s *)Logger.logObject.getter(v190);
        os_log_type_t v192 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v191, v192))
        {
          uint64_t v193 = swift_slowAlloc(32LL, -1LL);
          v272 = (void **)swift_slowAlloc(96LL, -1LL);
          aBlock = v272;
          *(_DWORD *)uint64_t v193 = 136315650;
          uint64_t v194 = _typeName(_:qualified:)(v261, 0LL);
          uint64_t v273 = sub_10015ADC4(v194, v195, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v193 + 4, v193 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v193 + 12) = 2080;
          uint64_t v196 = *(void *)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
          unint64_t v197 = *(void *)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
          uint64_t v198 = v268;
          swift_bridgeObjectRetain();
          uint64_t v273 = sub_10015ADC4(v196, v197, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v193 + 14, v193 + 22);
          swift_release_n(v198, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v193 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v273 = sub_10015ADC4(v260, v183, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &aBlock, v193 + 24, v193 + 32);
          swift_bridgeObjectRelease_n(v183, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v191,  v192,  "[%s]<%s> interact<%s> - reset predicted item",  (uint8_t *)v193,  0x20u);
          v199 = v272;
          swift_arrayDestroy(v272, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v199, -1LL, -1LL);
          swift_slowDealloc(v193, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v267 + 8))(v243, v182);
        }

        else
        {

          swift_bridgeObjectRelease_n(v183, 2LL);
          swift_release_n(v268, 2LL);
          (*(void (**)(char *, uint64_t))(v267 + 8))(v186, v182);
        }

        id v204 = [v254 sharedLocalEndpoint];
        [v204 resetPredictedOutputDevice];
        swift_release(v263);
      }

      else
      {
        uint64_t v201 = *(void *)v188;
        uint64_t v200 = *(void *)(v188 + 8);
        sub_10018390C(*(void *)v188, v200, *(unsigned __int16 *)(v188 + 16));
        swift_bridgeObjectRelease();
        swift_release(v263);

        sub_1001835D8(v201, v200, v189);
      }

      sub_1001838D0(v242);
      goto LABEL_9;
    }

    if (v86 == enum case for RoutingInteraction.Action.control(_:))
    {
      (*(void (**)(void *, uint64_t))(v84 + 96))(v83, v85);
      uint64_t v174 = *v83;
      uint64_t v175 = swift_projectBox(*v83);
      uint64_t v176 = v238;
      uint64_t v177 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v246 + 16))(v245, v175, v238);
      uint64_t v178 = v237;
      RoutingControl.type.getter(v177);
      uint64_t v179 = v236;
      int v180 = (*(uint64_t (**)(char *, uint64_t))(v244 + 88))(v178, v236);
      if (v180 == enum case for RoutingControl.RoutingControlType.absoluteVolume(_:)) {
        goto LABEL_35;
      }
      if (v180 == enum case for RoutingControl.RoutingControlType.relativeVolume(_:))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v244 + 96))(v178, v179);
        uint64_t v181 = type metadata accessor for RoutingControls.RelativeVolumeControl.AdjustmentType(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v181 - 8) + 8LL))(v178, v181);
LABEL_36:
        uint64_t v202 = v245;
        uint64_t v203 = v263;
        sub_10017D050(v245, v56, v263);
        swift_release(v203);
        (*(void (**)(uint64_t, uint64_t))(v246 + 8))(v202, v176);
        (*(void (**)(char *, uint64_t))(v256 + 8))(v255, v271);
        (*(void (**)(char *, uint64_t))(v258 + 8))(v257, v259);
        return swift_release(v174);
      }

      if (v180 == enum case for RoutingControl.RoutingControlType.mute(_:))
      {
LABEL_35:
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }

      uint64_t v218 = v56;
      uint64_t v219 = v270;
      v251(v234, v218, v270);
      aBlock = 0LL;
      unint64_t v275 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(53LL);
      v220._countAndFlagsBits = 91LL;
      v220._object = (void *)0xE100000000000000LL;
      String.append(_:)(v220);
      v221._countAndFlagsBits = _typeName(_:qualified:)(v261, 0LL);
      String.append(_:)(v221);
      swift_bridgeObjectRelease();
      v222._countAndFlagsBits = 15453LL;
      v222._object = (void *)0xE200000000000000LL;
      String.append(_:)(v222);
      uint64_t v223 = *(void *)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
      __int128 v224 = *(void **)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      v225._countAndFlagsBits = v223;
      v225._object = v224;
      String.append(_:)(v225);
      swift_bridgeObjectRelease();
      v226._countAndFlagsBits = 0x617265746E69203ELL;
      v226._object = (void *)0xEB000000003C7463LL;
      String.append(_:)(v226);
      v227._countAndFlagsBits = v260;
      v227._object = v52;
      String.append(_:)(v227);
      v228._object = (void *)0x800000010033A9C0LL;
      v228._countAndFlagsBits = 0xD00000000000001FLL;
      String.append(_:)(v228);
      uint64_t v229 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      v230._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v219, v229);
      String.append(_:)(v230);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v275,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  358LL,  0);
    }

    else
    {
      uint64_t v205 = v56;
      uint64_t v206 = v270;
      v251(v233, v205, v270);
      aBlock = 0LL;
      unint64_t v275 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(53LL);
      v207._countAndFlagsBits = 91LL;
      v207._object = (void *)0xE100000000000000LL;
      String.append(_:)(v207);
      v208._countAndFlagsBits = _typeName(_:qualified:)(v261, 0LL);
      String.append(_:)(v208);
      swift_bridgeObjectRelease();
      v209._countAndFlagsBits = 15453LL;
      v209._object = (void *)0xE200000000000000LL;
      String.append(_:)(v209);
      uint64_t v210 = *(void *)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
      __int128 v211 = *(void **)(v268 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      v212._countAndFlagsBits = v210;
      v212._object = v211;
      String.append(_:)(v212);
      swift_bridgeObjectRelease();
      v213._countAndFlagsBits = 0x617265746E69203ELL;
      v213._object = (void *)0xEB000000003C7463LL;
      String.append(_:)(v213);
      v214._countAndFlagsBits = v260;
      v214._object = v52;
      String.append(_:)(v214);
      v215._object = (void *)0x800000010033A9C0LL;
      v215._countAndFlagsBits = 0xD00000000000001FLL;
      String.append(_:)(v215);
      uint64_t v216 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      v217._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v206, v216);
      String.append(_:)(v217);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v275,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  361LL,  0);
    }

    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v84 + 96))(v83, v85);
  char v87 = (char *)v83[1];
  uint64_t v267 = *v83;
  uint64_t v88 = v267;
  swift_bridgeObjectRelease();
  id v89 = MRRequestDetailsInitiatorRoutePicker;
  RoutingInteraction.identifier.getter(v89);
  uint64_t v90 = v268;
  uint64_t v91 = v270;
  uint64_t v92 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
  dispatch thunk of CustomStringConvertible.description.getter(v91, v92);
  id v93 = objc_allocWithZone(&OBJC_CLASS___MRRequestDetails);
  NSString v94 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v95 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v96 = [v93 initWithInitiator:v89 requestID:v94 reason:v95 userInitiated:1];

  uint64_t v97 = sub_100156B68(&qword_1003F8620);
  uint64_t v98 = swift_allocObject(v97, 48LL, 7LL);
  *(_OWORD *)(v98 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034BE40;
  *(void *)(v98 + 32) = v88;
  *(void *)(v98 + 40) = v87;
  v266 = v87;
  id v99 = objc_allocWithZone(&OBJC_CLASS___MRGroupTopologyModificationRequest);
  swift_bridgeObjectRetain();
  Class v100 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v101 = [v99 initWithRequestDetails:v96 type:1 outputDeviceUIDs:v100];

  id v102 = [(id)objc_opt_self(MRAVLocalEndpoint) sharedLocalEndpoint];
  uint64_t v103 = (void *)(*(uint64_t (**)(void))(*(void *)v90 + 152LL))();
  id v104 = v248;
  v251(v248, v272, v91);
  uint64_t v105 = v269;
  uint64_t v106 = *(unsigned __int8 *)(v269 + 80);
  uint64_t v107 = (v106 + 56) & ~v106;
  uint64_t v108 = (char *)swift_allocObject(&unk_1003A3FC0, v107 + v247, v106 | 7);
  uint64_t v109 = v263;
  *((void *)v108 + 2) = sub_1001837C8;
  *((void *)v108 + 3) = v109;
  uint64_t v110 = v266;
  *((void *)v108 + 4) = v267;
  *((void *)v108 + 5) = v110;
  *((void *)v108 + 6) = v90;
  (*(void (**)(char *, char *, uint64_t))(v105 + 32))(&v108[v107], v104, v91);
  v278 = sub_100183A20;
  v279 = v108;
  aBlock = _NSConcreteStackBlock;
  unint64_t v275 = 1107296256LL;
  id v111 = &unk_1003A3FD8;
LABEL_8:
  v276 = sub_100157E54;
  v277 = v111;
  char v131 = _Block_copy(&aBlock);
  char v132 = v279;
  swift_retain(v90);
  swift_retain(v109);
  swift_release(v132);
  [v102 modifyTopologyWithRequest:v101 withReplyQueue:v103 completion:v131];
  _Block_release(v131);
  swift_release(v109);

LABEL_9:
  (*(void (**)(char *, uint64_t))(v256 + 8))(v255, v271);
  return (*(uint64_t (**)(char *, uint64_t))(v258 + 8))(v257, v259);
}

uint64_t sub_10017B928( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a10, uint64_t a11)
{
  uint64_t v71 = a7;
  uint64_t v85 = a6;
  id v89 = a9;
  uint64_t v90 = a10;
  uint64_t v16 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v83 = *(void *)(v16 - 8);
  uint64_t v84 = v16;
  __chkstk_darwin(v16);
  uint64_t v82 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0LL);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v77 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0LL);
  uint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v75 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v87 = *(void *)(v25 - 8);
  uint64_t v88 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  id v28 = (char *)&v65 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  ContinuousClock.now.getter(v26);
  int v86 = v28;
  uint64_t v29 = ContinuousClock.Instant.duration(to:)(v28);
  uint64_t v72 = v30;
  uint64_t v31 = sub_1001741A8();
  uint64_t v85 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v31, v21);
  swift_bridgeObjectRetain();
  sub_10018480C(a1, a2, a3, a4);
  swift_bridgeObjectRetain();
  uint64_t v32 = a4;
  uint64_t v33 = sub_10018480C(a1, a2, a3, a4);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  int v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, (os_log_type_t)v35))
  {
    int v66 = v35;
    uint64_t v67 = v29;
    os_log_t v68 = v34;
    unint64_t v69 = v24;
    uint64_t v70 = v21;
    uint64_t v36 = swift_slowAlloc(42LL, -1LL);
    uint64_t v65 = swift_slowAlloc(128LL, -1LL);
    uint64_t v95 = v65;
    *(_DWORD *)uint64_t v36 = 136315906;
    uint64_t v37 = _typeName(_:qualified:)(a11, 0LL);
    uint64_t v91 = sub_10015ADC4(v37, v38, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v91 = sub_10015ADC4(v71, a8, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease_n(a8, 3LL);
    *(_WORD *)(v36 + 22) = 2080;
    if (a1)
    {
      uint64_t v91 = 0LL;
      v92[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v94, " with error: ");
      HIWORD(v94[1]) = -4864;
      uint64_t v91 = a1;
      v92[0] = a2;
      v92[1] = a3;
      char v93 = v32;
      swift_errorRetain(a1);
      sub_100156A2C(a2, a3, v32);
      unint64_t v39 = sub_100184894();
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for RoutingEvent.Error,  v39);
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      sub_100156BA8(a2, a3, v32);
      v41._countAndFlagsBits = 32LL;
      v41._object = (void *)0xE100000000000000LL;
      String.append(_:)(v41);
      uint64_t v42 = v94[0];
      unint64_t v43 = v94[1];
    }

    else
    {
      unint64_t v43 = 0xE100000000000000LL;
      uint64_t v42 = 32LL;
    }

    uint64_t v91 = sub_10015ADC4(v42, v43, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease();
    sub_100184850(a1, a2, a3, v32);
    sub_100184850(a1, a2, a3, v32);
    *(_WORD *)(v36 + 32) = 2080;
    uint64_t v71 = v36 + 34;
    uint64_t v44 = sub_100156B68(&qword_1003F8CE0);
    uint64_t v45 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v47 = *(void *)(v46 + 72);
    uint64_t v48 = *(unsigned __int8 *)(v46 + 80);
    uint64_t v49 = (v48 + 32) & ~v48;
    uint64_t v50 = swift_allocObject(v44, v49 + 2 * v47, v48 | 7);
    *(_OWORD *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034C140;
    uint64_t v51 = static Duration.UnitsFormatStyle.Unit.seconds.getter();
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v51);
    uint64_t v52 = sub_1001841C8(v50);
    swift_setDeallocating(v50);
    swift_arrayDestroy(v50 + v49, 2LL, v45);
    uint64_t v53 = swift_deallocClassInstance(v50, 32LL, 7LL);
    uint64_t v54 = v73;
    uint64_t v55 = static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(v53);
    uint64_t v56 = v77;
    uint64_t v57 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v55);
    uint64_t v58 = v82;
    static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v57);
    uint64_t v59 = v75;
    static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v52,  v54,  0LL,  1LL,  v56,  0LL,  1LL,  v58);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v58, v84);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v56, v81);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v76);
    uint64_t v60 = sub_100156FEC( &qword_1003F8CE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
    uint64_t v61 = v80;
    Duration.formatted<A>(_:)(&v91, v59, v67, v72, v80, v60);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v59, v61);
    uint64_t v91 = sub_10015ADC4(v91, v92[0], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v71, v36 + 42);
    swift_bridgeObjectRelease();
    os_log_t v62 = v68;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v66,  "[%s] interact<%s> - finished%sin: %s",  (uint8_t *)v36,  0x2Au);
    uint64_t v63 = v65;
    swift_arrayDestroy(v65, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v69, v70);
  }

  else
  {
    swift_bridgeObjectRelease_n(a8, 2LL);
    sub_100184850(a1, a2, a3, v32);
    sub_100184850(a1, a2, a3, v32);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v24, v21);
  }

  v89(a1, a2, a3, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v86, v88);
}

uint64_t sub_10017C0B0( uint64_t a1, void (*a2)(void, void, void, void), uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v159 = a5;
  uint64_t v149 = a4;
  uint64_t v160 = a3;
  id v147 = a2;
  uint64_t v151 = *v5;
  uint64_t v146 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  id v144 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  id v141 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v155 = type metadata accessor for DispatchTime(0LL);
  uint64_t v139 = *(void *)(v155 - 8);
  uint64_t v9 = __chkstk_darwin(v155);
  uint64_t v138 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v140 = (char *)&v130 - v11;
  uint64_t v152 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v12 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v14 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v158 = *(void *)(v164 - 8);
  uint64_t v19 = __chkstk_darwin(v164);
  uint64_t v163 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v154 = (char *)&v130 - v22;
  uint64_t v137 = v23;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v130 - v24;
  uint64_t v26 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v156 = *(void *)(v26 - 8);
  uint64_t v157 = v26;
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v162 = (char *)&v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v153 = (char *)&v130 - v30;
  uint64_t v131 = v31;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v130 - v33;
  uint64_t v35 = ContinuousClock.init()(v32);
  uint64_t v150 = RoutingInteraction.identifier.getter(v35);
  unint64_t v37 = v36;
  ContinuousClock.now.getter(v150);
  uint64_t v38 = sub_1001741A8();
  uint64_t v135 = v16;
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v40 = v165;
  id v136 = (void (*)(char *, uint64_t))v15;
  v39(v18, v38, v15);
  uint64_t v133 = v12;
  Swift::String v41 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  char v132 = v14;
  unint64_t v42 = v37;
  v41(v14, a1, v152);
  swift_retain_n(v40, 2LL);
  uint64_t v43 = swift_bridgeObjectRetain_n(v37, 2LL);
  uint64_t v134 = v18;
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.default.getter();
  BOOL v46 = os_log_type_enabled(v44, v45);
  Class v148 = v25;
  unint64_t v161 = v42;
  if (v46)
  {
    uint64_t v47 = swift_slowAlloc(42LL, -1LL);
    uint64_t v130 = swift_slowAlloc(128LL, -1LL);
    aBlock[0] = v130;
    *(_DWORD *)uint64_t v47 = 136315906;
    uint64_t v48 = _typeName(_:qualified:)(v151, 0LL);
    uint64_t v166 = (void *)sub_10015ADC4(v48, v49, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2080;
    uint64_t v51 = *(void *)(v40 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
    unint64_t v50 = *(void *)(v40 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
    swift_bridgeObjectRetain();
    uint64_t v166 = (void *)sub_10015ADC4(v51, v50, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v47 + 14, v47 + 22);
    swift_release_n(v40, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v166 = (void *)sub_10015ADC4(v150, v42, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v47 + 24, v47 + 32);
    swift_bridgeObjectRelease_n(v42, 3LL);
    *(_WORD *)(v47 + 32) = 2080;
    uint64_t v52 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    uint64_t v53 = v132;
    uint64_t v54 = v152;
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v152, v52);
    uint64_t v166 = (void *)sub_10015ADC4(v55, v56, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v166, v167, v47 + 34, v47 + 42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v133 + 8))(v53, v54);
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "[%s]<%s> waitForItemStability<%s> - interaction: %s",  (uint8_t *)v47,  0x2Au);
    uint64_t v57 = v130;
    swift_arrayDestroy(v130, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    uint64_t v58 = v47;
    uint64_t v25 = v148;
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v42, 2LL);
    swift_release_n(v40, 2LL);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v132, v152);
  }

  (*(void (**)(char *, void))(v135 + 8))(v134, v136);
  uint64_t v59 = v137;
  uint64_t v60 = v131;
  uint64_t v61 = v156;
  os_log_t v62 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
  uint64_t v63 = v153;
  uint64_t v152 = (uint64_t)v34;
  uint64_t v64 = v34;
  uint64_t v65 = v157;
  v62(v153, v64, v157);
  uint64_t v66 = v158;
  uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v158 + 16);
  os_log_t v68 = v154;
  unint64_t v69 = v25;
  uint64_t v70 = v164;
  v67(v154, v69, v164);
  v62(v162, v63, v65);
  v67(v163, v68, v70);
  uint64_t v71 = *(unsigned __int8 *)(v61 + 80);
  uint64_t v72 = (v71 + 16) & ~v71;
  uint64_t v73 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v74 = (v60 + v73 + v72) & ~v73;
  unint64_t v75 = (v59 + v74 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v76 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v79 = swift_allocObject(&unk_1003A4118, v78 + 8, v71 | v73 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v79 + v72, v153, v65);
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v79 + v74, v154, v164);
  uint64_t v80 = v165;
  *(void *)(v79 + v75) = v165;
  uint64_t v81 = (void *)(v79 + v76);
  uint64_t v82 = v160;
  unint64_t v83 = v161;
  *uint64_t v81 = v150;
  v81[1] = v83;
  uint64_t v84 = (void *)(v79 + v77);
  void *v84 = v147;
  v84[1] = v82;
  *(void *)(v79 + v7_Block_object_dispose(va, 8) = v151;
  swift_retain_n(v80, 2LL);
  swift_retain_n(v82, 2LL);
  swift_bridgeObjectRetain();
  uint64_t v85 = sub_1001A8998();
  uint64_t v87 = v86;
  uint64_t v88 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
  uint64_t v137 = v88 + 16;
  swift_weakInit(v88 + 16, v80);
  id v89 = (void *)swift_allocObject(&unk_1003A4168, 72LL, 7LL);
  uint64_t v90 = v149;
  v89[2] = v88;
  v89[3] = v90;
  uint64_t v91 = v159;
  v89[4] = v159;
  v89[5] = v85;
  v89[6] = v87;
  v89[7] = sub_100183E68;
  v89[8] = v79;
  uint64_t v92 = swift_allocObject(&unk_1003A4190, 32LL, 7LL);
  *(void *)(v92 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100183E68;
  *(void *)(v92 + 24) = v79;
  uint64_t v93 = swift_allocObject(&unk_1003A41B8, 32LL, 7LL);
  *(void *)(v93 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100183F80;
  *(void *)(v93 + 24) = v89;
  NSString v94 = (void *)(v80 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers);
  swift_beginAccess( v80 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers,  aBlock,  33LL,  0LL);
  swift_bridgeObjectRetain_n(v87, 3LL);
  uint64_t v154 = (char *)v79;
  swift_retain_n(v79, 3LL);
  uint64_t v153 = (char *)v88;
  swift_retain_n(v88, 2LL);
  swift_retain_n(v91, 2LL);
  swift_retain(v89);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v94);
  uint64_t v166 = (void *)*v94;
  void *v94 = 0x8000000000000000LL;
  sub_100181C5C((uint64_t)sub_1001840B4, v93, v85, v87, isUniquelyReferenced_nonNull_native);
  void *v94 = v166;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v96 = swift_endAccess(aBlock);
  uint64_t v135 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 152LL))(v96);
  uint64_t v97 = v138;
  static DispatchTime.now()();
  uint64_t v98 = v140;
  + infix(_:_:)(v97, 0.25);
  id v136 = *(void (**)(char *, uint64_t))(v139 + 8);
  v136(v97, v155);
  uint64_t v99 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
  swift_weakInit(v99 + 16, v80);
  Class v100 = (void *)swift_allocObject(&unk_1003A41E0, 56LL, 7LL);
  v100[2] = v99;
  v100[3] = v85;
  uint64_t v134 = (char *)v85;
  v100[4] = v87;
  v100[5] = sub_100184090;
  v100[6] = v92;
  aBlock[4] = (uint64_t)sub_100184108;
  uint64_t v169 = v100;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100157EA8;
  aBlock[3] = (uint64_t)&unk_1003A41F8;
  id v101 = _Block_copy(aBlock);
  uint64_t v139 = v87;
  swift_bridgeObjectRetain();
  swift_retain(v99);
  uint64_t v138 = (char *)v92;
  uint64_t v102 = swift_retain(v92);
  uint64_t v103 = v141;
  static DispatchQoS.unspecified.getter(v102);
  uint64_t v166 = _swiftEmptyArrayStorage;
  uint64_t v104 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v105 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v106 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v107 = v144;
  uint64_t v108 = v146;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v166, v105, v106, v146, v104);
  uint64_t v109 = (void *)v135;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v98, v103, v107, v101);
  _Block_release(v101);

  (*(void (**)(char *, uint64_t))(v145 + 8))(v107, v108);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v103, v143);
  v136(v98, v155);
  uint64_t v110 = v169;
  swift_release(v99);
  swift_release(v110);
  uint64_t v111 = v137;
  swift_beginAccess(v137, aBlock, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v111);
  if (Strong)
  {
    uint64_t v113 = (char *)Strong;
    id v114 = v138;
    (*(void (**)(void))(*(void *)Strong + 224LL))();
    uint64_t v115 = v159;
    char v116 = v149();
    swift_bridgeObjectRelease();
    uint64_t v117 = v165;
    uint64_t v118 = v160;
    uint64_t v119 = v139;
    if ((v116 & 1) != 0)
    {
      swift_beginAccess( &v113[OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers],  &v166,  33LL,  0LL);
      swift_bridgeObjectRetain();
      uint64_t v120 = sub_100180288((uint64_t)v134, v119);
      uint64_t v122 = v121;
      swift_endAccess(&v166);
      swift_bridgeObjectRelease();
      sub_100162944(v120, v122);
      sub_10017E064(0, (uint64_t)v162, (uint64_t)v163, v117, v150, v161, v147, v118, v151);
    }

    swift_release(v89);
    id v89 = v114;
    uint64_t v123 = v152;
  }

  else
  {
    uint64_t v113 = v138;
    uint64_t v117 = v165;
    uint64_t v115 = v159;
    uint64_t v118 = v160;
    uint64_t v123 = v152;
  }

  swift_release(v89);
  swift_release(v113);
  swift_release_n(v154, 2LL);
  swift_bridgeObjectRelease();
  swift_release(v115);
  unsigned __int8 v124 = v153;
  swift_release(v153);
  uint64_t v125 = v157;
  uint64_t v126 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
  v126((uint64_t)v162, v157);
  uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
  uint64_t v128 = v164;
  v127((uint64_t)v163, v164);
  swift_bridgeObjectRelease();
  swift_release(v118);
  swift_bridgeObjectRelease();
  swift_release(v117);
  v127((uint64_t)v148, v128);
  v126(v123, v125);
  return swift_release(v124);
}

uint64_t sub_10017CDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (void *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
  uint64_t v12 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v13 = v11[1];
    if (*v11 == a2 && v13 == a3)
    {
      sub_100183690((uint64_t)v11, (uint64_t)v9);
    }

    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(*v11, v13, a2, a3, 0LL);
      sub_100183690((uint64_t)v11, (uint64_t)v9);
      if ((v15 & 1) == 0)
      {
        sub_1001838D0((uint64_t)v9);
        goto LABEL_4;
      }
    }

    char v16 = v9[*(int *)(v6 + 36)];
    sub_1001838D0((uint64_t)v9);
    if ((v16 & 1) == 0)
    {
      uint64_t v17 = 1LL;
      goto LABEL_16;
    }

uint64_t sub_10017CF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (void *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
  uint64_t v12 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v13 = v11[1];
    if (*v11 == a2 && v13 == a3)
    {
      sub_100183690((uint64_t)v11, (uint64_t)v9);
    }

    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(*v11, v13, a2, a3, 0LL);
      sub_100183690((uint64_t)v11, (uint64_t)v9);
      if ((v15 & 1) == 0)
      {
        sub_1001838D0((uint64_t)v9);
        goto LABEL_4;
      }
    }

    char v16 = v9[*(int *)(v6 + 36)];
    sub_1001838D0((uint64_t)v9);
    if ((v16 & 1) != 0)
    {
      uint64_t v17 = 1LL;
      goto LABEL_16;
    }

void sub_10017D050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v112 = a3;
  id v104 = *(id *)v4;
  uint64_t v105 = (void *)type metadata accessor for RoutingControl(0LL);
  uint64_t v100 = *(v105 - 1);
  uint64_t v7 = __chkstk_darwin(v105);
  id v101 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v102 = (char *)&v99 - v9;
  uint64_t v10 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v110 = *(void *)(v10 - 8);
  uint64_t v111 = v10;
  __chkstk_darwin(v10);
  uint64_t v107 = v11;
  uint64_t v109 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingControl.Target(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v99 - v16);
  uint64_t v18 = type metadata accessor for RoutingControl.RoutingControlType(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (int *)((char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v108 = a2;
  id v106 = (id)RoutingInteraction.identifier.getter(v20);
  uint64_t v24 = v23;
  uint64_t v25 = *(uint64_t (**)(void))(*(void *)v4 + 152LL);
  uint64_t v113 = v4;
  uint64_t v26 = (void *)v25();
  RoutingControl.type.getter(v26);
  if ((*(unsigned int (**)(int *, uint64_t))(v19 + 88))(v22, v18) == enum case for RoutingControl.RoutingControlType.absoluteVolume(_:))
  {
    uint64_t v27 = (*(uint64_t (**)(int *, uint64_t))(v19 + 96))(v22, v18);
    int v28 = *v22;
    RoutingControl.target.getter(v27);
    int v29 = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 88))(v17, v12);
    if (v29 == enum case for RoutingControl.Target.session(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v17, v12);
      swift_bridgeObjectRelease();
      uint64_t v105 = [(id)objc_opt_self(MRAVLocalEndpoint) sharedLocalEndpoint];
      aBlock = 0LL;
      unint64_t v115 = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(23LL);
      swift_bridgeObjectRelease();
      aBlock = (void **)0xD000000000000014LL;
      unint64_t v115 = 0x800000010033AC90LL;
      v30._countAndFlagsBits = (uint64_t)v106;
      v30._object = v24;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 62LL;
      v31._object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      id v32 = objc_allocWithZone(&OBJC_CLASS___MRRequestDetails);
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v36 = [v32 initWithName:v33 requestID:v34 reason:v35];

      uint64_t v38 = v109;
      uint64_t v37 = v110;
      uint64_t v39 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v108, v111);
      uint64_t v40 = *(unsigned __int8 *)(v37 + 80);
      uint64_t v41 = (v40 + 48) & ~v40;
      unint64_t v42 = (v107 + v41 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v43 = (char *)swift_allocObject(&unk_1003A42D0, v42 + 4, v40 | 7);
      *((void *)v43 + 2) = v26;
      *((void *)v43 + 3) = sub_1001837C8;
      uint64_t v45 = v112;
      uint64_t v44 = v113;
      *((void *)v43 + 4) = v112;
      *((void *)v43 + 5) = v44;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v43[v41], v38, v39);
      *(_DWORD *)&v43[v42] = v28;
      uint64_t v118 = sub_100184684;
      uint64_t v119 = v43;
      aBlock = _NSConcreteStackBlock;
      unint64_t v115 = 1107296256LL;
      char v116 = sub_100157E54;
      uint64_t v117 = &unk_1003A42E8;
      BOOL v46 = _Block_copy(&aBlock);
      uint64_t v47 = v119;
      id v48 = v26;
      swift_retain(v45);
      swift_retain(v44);
      unint64_t v49 = v47;
      unint64_t v50 = v105;
      swift_release(v49);
      LODWORD(v51) = v28;
      uint64_t v52 = v36;
      [v50 setVolume:v36 details:v48 queue:v46 completion:v51];

      _Block_release(v46);
LABEL_6:

      return;
    }

    if (v29 == enum case for RoutingControl.Target.item(_:))
    {
      uint64_t v53 = v26;
      (*(void (**)(uint64_t *, uint64_t))(v13 + 96))(v17, v12);
      uint64_t v54 = sub_10024A3A0(*v17, v17[1]);
      uint64_t v102 = v55;
      uint64_t v103 = (char *)v54;
      swift_bridgeObjectRelease();
      id v104 = [(id)objc_opt_self(MRAVLocalEndpoint) sharedLocalEndpoint];
      uint64_t v105 = String._bridgeToObjectiveC()();
      aBlock = 0LL;
      unint64_t v115 = 0xE000000000000000LL;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(23LL);
      swift_bridgeObjectRelease();
      aBlock = (void **)0xD000000000000014LL;
      unint64_t v115 = 0x800000010033AC90LL;
      v56._countAndFlagsBits = (uint64_t)v106;
      v56._object = v24;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 62LL;
      v57._object = (void *)0xE100000000000000LL;
      String.append(_:)(v57);
      id v58 = objc_allocWithZone(&OBJC_CLASS___MRRequestDetails);
      NSString v59 = String._bridgeToObjectiveC()();
      NSString v60 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v106 = [v58 initWithName:v59 requestID:v60 reason:v61];

      os_log_t v62 = v109;
      uint64_t v63 = v110;
      uint64_t v64 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v108, v111);
      uint64_t v65 = *(unsigned __int8 *)(v63 + 80);
      uint64_t v66 = (v65 + 48) & ~v65;
      unint64_t v67 = (v107 + v66 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v68 = (v67 + 19) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v69 = (char *)swift_allocObject(&unk_1003A4280, v68 | 4, v65 | 7);
      uint64_t v70 = v53;
      *((void *)v69 + 2) = v53;
      *((void *)v69 + 3) = sub_1001837C8;
      uint64_t v72 = v112;
      uint64_t v71 = v113;
      *((void *)v69 + 4) = v112;
      *((void *)v69 + 5) = v71;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v69[v66], v62, v64);
      uint64_t v73 = &v69[v67];
      uint64_t v74 = v102;
      *(void *)uint64_t v73 = v103;
      *((void *)v73 + 1) = v74;
      *(_DWORD *)&v69[v68] = v28;
      uint64_t v118 = sub_10018458C;
      uint64_t v119 = v69;
      aBlock = _NSConcreteStackBlock;
      unint64_t v115 = 1107296256LL;
      char v116 = sub_100157E54;
      uint64_t v117 = &unk_1003A4298;
      unint64_t v75 = _Block_copy(&aBlock);
      unint64_t v76 = v119;
      id v77 = v70;
      uint64_t v78 = v72;
      uint64_t v26 = v70;
      swift_retain(v78);
      swift_retain(v71);
      uint64_t v79 = v76;
      unint64_t v50 = v105;
      swift_release(v79);
      id v80 = v104;
      LODWORD(v81) = v28;
      uint64_t v52 = v106;
      objc_msgSend(v104, "setOutputDeviceVolume:outputDevice:details:queue:completion:", v50, v81);

      _Block_release(v75);
      goto LABEL_6;
    }

    (*(void (**)(char *, uint64_t, void *))(v100 + 16))(v102, a1, v105);
    aBlock = 0LL;
    unint64_t v115 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(57LL);
    v90._countAndFlagsBits = 91LL;
    v90._object = (void *)0xE100000000000000LL;
    String.append(_:)(v90);
    v91._countAndFlagsBits = _typeName(_:qualified:)(v104, 0LL);
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    v92._countAndFlagsBits = 0xD000000000000016LL;
    v92._object = (void *)0x800000010033AC30LL;
    String.append(_:)(v92);
    v93._countAndFlagsBits = (uint64_t)v106;
    v93._object = v24;
    String.append(_:)(v93);
    v94._countAndFlagsBits = 0xD00000000000001CLL;
    v94._object = (void *)0x800000010033AC70LL;
    String.append(_:)(v94);
    uint64_t v95 = v103;
    RoutingControl.target.getter(v96);
    uint64_t v97 = sub_100156FEC( &qword_1003F8D10,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl.Target,  (uint64_t)&protocol conformance descriptor for RoutingControl.Target);
    v98._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v97);
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v95, v12);
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v115,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  395LL,  0);
  }

  else
  {
    uint64_t v82 = v105;
    (*(void (**)(char *, uint64_t, void *))(v100 + 16))(v101, a1, v105);
    aBlock = 0LL;
    unint64_t v115 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(58LL);
    v83._countAndFlagsBits = 91LL;
    v83._object = (void *)0xE100000000000000LL;
    String.append(_:)(v83);
    v84._countAndFlagsBits = _typeName(_:qualified:)(v104, 0LL);
    String.append(_:)(v84);
    swift_bridgeObjectRelease();
    v85._countAndFlagsBits = 0xD000000000000016LL;
    v85._object = (void *)0x800000010033AC30LL;
    String.append(_:)(v85);
    v86._countAndFlagsBits = (uint64_t)v106;
    v86._object = v24;
    String.append(_:)(v86);
    v87._countAndFlagsBits = 0xD00000000000001DLL;
    v87._object = (void *)0x800000010033AC50LL;
    String.append(_:)(v87);
    uint64_t v88 = sub_100156FEC( &qword_1003F8900,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl,  (uint64_t)&protocol conformance descriptor for RoutingControl);
    v89._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v82, v88);
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v115,  "mediaremoted/HostedRoutingItemDataSource.swift",  46LL,  2LL,  398LL,  0);
  }

  __break(1u);
}

uint64_t sub_10017D9D4(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, float a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (void *)((char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v16 = a2;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v17 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v16);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((a2 & 1) != 0)
  {
    if (!a1)
    {
LABEL_5:
      uint64_t v21 = swift_allocObject(&unk_1003A4320, 20LL, 7LL);
      *(float *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
      sub_10017C0B0( a7,  (void (*)(void, void, void, void))a3,  a4,  (uint64_t (*)(void))sub_1001846EC,  v21);
      return swift_release(v21);
    }

    swift_getErrorValue(a1, v30, v29);
    uint64_t v19 = v29[1];
    uint64_t v20 = v29[2];
    swift_errorRetain(a1);
    if ((sub_100202810(v19, v20) & 1) != 0)
    {
      swift_errorRelease(a1);
      goto LABEL_5;
    }

    swift_errorRetain(a1);
    uint64_t v22 = MRDFastSyncGroupSessionState.rawValue.getter(a1, 0LL, 0LL, 4LL);
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    unsigned __int8 v28 = v27;
    a3();
    swift_errorRelease(v22);
    sub_100156BA8(v24, v26, v28);
    return swift_errorRelease(a1);
  }

  else
  {
    __break(1u);
  }

  return result;
}

BOOL sub_10017DB90(uint64_t a1, float a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v10 = *(void *)(v5 + 72);
    swift_bridgeObjectRetain();
    uint64_t v11 = _swiftEmptyArrayStorage;
    do
    {
      sub_100183690(v9, (uint64_t)v7);
      uint64_t v12 = &v7[*(int *)(v4 + 48)];
      int v13 = *(_DWORD *)v12;
      char v14 = v12[4];
      sub_1001838D0((uint64_t)v7);
      if ((v14 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
          uint64_t v11 = sub_100180090(0LL, v11[2] + 1LL, 1, v11);
        }
        unint64_t v16 = v11[2];
        unint64_t v15 = v11[3];
        if (v16 >= v15 >> 1) {
          uint64_t v11 = sub_100180090((void *)(v15 > 1), v16 + 1, 1, v11);
        }
        void v11[2] = v16 + 1;
        *((_DWORD *)v11 + v16 + _Block_object_dispose(va, 8) = v13;
      }

      v9 += v10;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v17 = v11[2];
    if (v17) {
      goto LABEL_11;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v17 = _swiftEmptyArrayStorage[2];
  if (!v17) {
    goto LABEL_18;
  }
LABEL_11:
  float v18 = *((float *)v11 + 8);
  uint64_t v19 = v17 - 1;
  if (v19)
  {
    uint64_t v20 = (float *)v11 + 9;
    do
    {
      float v21 = *v20++;
      float v22 = v21;
      if (v18 < v21) {
        float v18 = v22;
      }
      --v19;
    }

    while (v19);
  }

  swift_bridgeObjectRelease();
  return v18 == a2;
}

uint64_t sub_10017DD44( uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  v33[1] = a5;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (void *)((char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *uint64_t v20 = a2;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v21 = a2;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)(v20);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((a2 & 1) != 0)
  {
    if (!a1)
    {
LABEL_5:
      uint64_t v25 = swift_allocObject(&unk_1003A4348, 36LL, 7LL);
      *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = a7;
      *(void *)(v25 + 24) = a8;
      *(float *)(v25 + 32) = a9;
      swift_bridgeObjectRetain();
      sub_10017C0B0( a6,  (void (*)(void, void, void, void))a3,  a4,  (uint64_t (*)(void))sub_100184800,  v25);
      return swift_release(v25);
    }

    swift_getErrorValue(a1, v35, v34);
    uint64_t v23 = v34[1];
    uint64_t v24 = v34[2];
    swift_errorRetain(a1);
    if ((sub_100202810(v23, v24) & 1) != 0)
    {
      swift_errorRelease(a1);
      goto LABEL_5;
    }

    swift_errorRetain(a1);
    uint64_t v26 = MRDFastSyncGroupSessionState.rawValue.getter(a1, 0LL, 0LL, 4LL);
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    unsigned __int8 v32 = v31;
    a3();
    swift_errorRelease(v26);
    sub_100156BA8(v28, v30, v32);
    return swift_errorRelease(a1);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10017DF14(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return 0LL;
  }
  int v13 = (void *)(a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
  uint64_t v14 = *(void *)(v9 + 72);
  swift_bridgeObjectRetain();
  do
  {
    uint64_t v15 = v13[1];
    if (*v13 == a2 && v15 == a3)
    {
      sub_100183690((uint64_t)v13, (uint64_t)v11);
    }

    else
    {
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(*v13, v15, a2, a3, 0LL);
      sub_100183690((uint64_t)v13, (uint64_t)v11);
      if ((v17 & 1) == 0)
      {
        sub_1001838D0((uint64_t)v11);
        goto LABEL_4;
      }
    }

    uint64_t v18 = &v11[*(int *)(v8 + 48)];
    float v19 = *(float *)v18;
    char v20 = v18[4];
    sub_1001838D0((uint64_t)v11);
    if ((v20 & 1) == 0 && v19 == a4)
    {
      uint64_t v21 = 1LL;
      goto LABEL_17;
    }

uint64_t sub_10017E064( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void, void, void, void), uint64_t a8, uint64_t a9)
{
  uint64_t v115 = a8;
  uint64_t v118 = a7;
  uint64_t v101 = a9;
  uint64_t v102 = a5;
  uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v12);
  uint64_t v14 = &v95[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v111 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0LL);
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v108 = &v95[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v110 = type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(0LL);
  uint64_t v106 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v105 = &v95[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v107 = type metadata accessor for Duration.UnitsFormatStyle.UnitWidth(0LL);
  uint64_t v104 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v103 = &v95[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle(0LL);
  uint64_t v113 = *(void *)(v18 - 8);
  uint64_t v114 = v18;
  __chkstk_darwin(v18);
  uint64_t v112 = &v95[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = &v95[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v24 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v116 = *(void *)(v24 - 8);
  uint64_t v117 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v27 = &v95[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  ContinuousClock.now.getter(v25);
  uint64_t v28 = ContinuousClock.Instant.duration(to:)(v27);
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  if ((a1 & 1) == 0)
  {
    uint64_t v62 = sub_100174330();
    sub_10017434C(v62, (uint64_t)v14);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v14, 1LL, v20) == 1)
    {
      sub_1001603DC((uint64_t)v14, (uint64_t *)&unk_1003FBBE0);
      goto LABEL_12;
    }

    uint64_t v100 = v29;
    swift_retain_n(a4, 2LL);
    uint64_t v65 = swift_bridgeObjectRetain_n(a6, 2LL);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    int v68 = v67;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v69 = swift_slowAlloc(42LL, -1LL);
      uint64_t v97 = swift_slowAlloc(128LL, -1LL);
      v121[0] = v97;
      *(_DWORD *)uint64_t v69 = 136315906;
      int v96 = v68;
      uint64_t v70 = _typeName(_:qualified:)(v101, 0LL);
      uint64_t v99 = v21;
      uint64_t v119 = sub_10015ADC4(v70, v71, v121);
      uint64_t v101 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      uint64_t v98 = v31;
      uint64_t v72 = *(void *)(a4 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
      unint64_t v73 = *(void *)(a4 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
      swift_bridgeObjectRetain();
      uint64_t v119 = sub_10015ADC4(v72, v73, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v69 + 14, v69 + 22);
      swift_release_n(a4, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v119 = sub_10015ADC4(v102, a6, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v69 + 24, v69 + 32);
      swift_bridgeObjectRelease_n(a6, 3LL);
      *(_WORD *)(v69 + 32) = 2080;
      uint64_t v74 = sub_100156B68(&qword_1003F8CE0);
      uint64_t v75 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
      uint64_t v76 = *(void *)(v75 - 8);
      id v77 = v66;
      uint64_t v78 = *(void *)(v76 + 72);
      uint64_t v79 = *(unsigned __int8 *)(v76 + 80);
      uint64_t v80 = (v79 + 32) & ~v79;
      uint64_t v81 = swift_allocObject(v74, v80 + 2 * v78, v79 | 7);
      *(_OWORD *)(v81 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034C140;
      uint64_t v82 = static Duration.UnitsFormatStyle.Unit.seconds.getter();
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v82);
      uint64_t v83 = sub_1001841C8(v81);
      swift_setDeallocating(v81);
      swift_arrayDestroy(v81 + v80, 2LL, v75);
      uint64_t v84 = swift_deallocClassInstance(v81, 32LL, 7LL);
      Swift::String v85 = v103;
      uint64_t v86 = static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(v84);
      Swift::String v87 = v105;
      uint64_t v88 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v86);
      Swift::String v89 = v108;
      static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v88);
      Swift::String v90 = v112;
      static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v83,  v85,  0LL,  1LL,  v87,  0LL,  1LL,  v89);
      uint64_t v21 = v99;
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v109 + 8))(v89, v111);
      (*(void (**)(_BYTE *, uint64_t))(v106 + 8))(v87, v110);
      (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v85, v107);
      uint64_t v91 = sub_100156FEC( &qword_1003F8CE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
      uint64_t v92 = v114;
      Duration.formatted<A>(_:)(&v119, v90, v100, v98, v114, v91);
      (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v90, v92);
      uint64_t v119 = sub_10015ADC4(v119, v120, v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v69 + 34, v69 + 42);
      uint64_t v20 = v101;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v77,  (os_log_type_t)v96,  "[%s]<%s> waitForItemStability<%s> - stable after: %s",  (uint8_t *)v69,  0x2Au);
      uint64_t v93 = v97;
      swift_arrayDestroy(v97, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a6, 2LL);
      swift_release_n(a4, 2LL);
    }

    uint64_t v63 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
    uint64_t v64 = v14;
LABEL_11:
    v63(v64, v20);
    goto LABEL_12;
  }

  uint64_t v100 = v28;
  uint64_t v32 = sub_1001741A8();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16))(v23, v32, v20);
  swift_retain_n(a4, 2LL);
  uint64_t v33 = swift_bridgeObjectRetain_n(a6, 2LL);
  NSString v34 = (void *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.error.getter();
  int v36 = v35;
  if (!os_log_type_enabled((os_log_t)v34, v35))
  {

    swift_bridgeObjectRelease_n(a6, 2LL);
    swift_release_n(a4, 2LL);
    uint64_t v63 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
    uint64_t v64 = v23;
    goto LABEL_11;
  }

  uint64_t v37 = swift_slowAlloc(42LL, -1LL);
  uint64_t v97 = swift_slowAlloc(128LL, -1LL);
  v121[0] = v97;
  *(_DWORD *)uint64_t v37 = 136315906;
  uint64_t v99 = v21;
  uint64_t v38 = _typeName(_:qualified:)(v101, 0LL);
  int v96 = v36;
  uint64_t v119 = sub_10015ADC4(v38, v39, v121);
  uint64_t v101 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v37 + 4, v37 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v37 + 12) = 2080;
  uint64_t v98 = v31;
  uint64_t v40 = *(void *)(a4 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
  unint64_t v41 = *(void *)(a4 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
  swift_bridgeObjectRetain();
  uint64_t v119 = sub_10015ADC4(v40, v41, v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v37 + 14, v37 + 22);
  swift_release_n(a4, 2LL);
  swift_bridgeObjectRelease();
  *(_WORD *)(v37 + 22) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v119 = sub_10015ADC4(v102, a6, v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v37 + 24, v37 + 32);
  swift_bridgeObjectRelease_n(a6, 3LL);
  *(_WORD *)(v37 + 32) = 2080;
  uint64_t v42 = sub_100156B68(&qword_1003F8CE0);
  uint64_t v43 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = (os_log_s *)v34;
  uint64_t v46 = *(void *)(v44 + 72);
  uint64_t v47 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v48 = (v47 + 32) & ~v47;
  uint64_t v49 = swift_allocObject(v42, v48 + 2 * v46, v47 | 7);
  *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10034C140;
  uint64_t v50 = static Duration.UnitsFormatStyle.Unit.seconds.getter();
  static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v50);
  uint64_t v51 = sub_1001841C8(v49);
  swift_setDeallocating(v49);
  swift_arrayDestroy(v49 + v48, 2LL, v43);
  uint64_t v52 = swift_deallocClassInstance(v49, 32LL, 7LL);
  uint64_t v53 = v103;
  uint64_t v54 = static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(v52);
  uint64_t v55 = v105;
  uint64_t v56 = static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hide.getter(v54);
  Swift::String v57 = v108;
  static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hide.getter(v56);
  id v58 = v112;
  static FormatStyle<>.units(allowed:width:maximumUnitCount:zeroValueUnits:valueLength:fractionalPart:)( v51,  v53,  0LL,  1LL,  v55,  0LL,  1LL,  v57);
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v109 + 8))(v57, v111);
  (*(void (**)(_BYTE *, uint64_t))(v106 + 8))(v55, v110);
  (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v53, v107);
  uint64_t v59 = sub_100156FEC( &qword_1003F8CE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle);
  uint64_t v60 = v114;
  Duration.formatted<A>(_:)(&v119, v58, v100, v98, v114, v59);
  (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v58, v60);
  uint64_t v119 = sub_10015ADC4(v119, v120, v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120, v37 + 34, v37 + 42);
  swift_bridgeObjectRelease();
  _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v96,  "[%s]<%s> waitForItemStability<%s> - timed out after: %s",  (uint8_t *)v37,  0x2Au);
  uint64_t v61 = v97;
  swift_arrayDestroy(v97, 4LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v61, -1LL, -1LL);
  swift_slowDealloc(v37, -1LL, -1LL);

  (*(void (**)(_BYTE *, uint64_t))(v99 + 8))(v23, v101);
LABEL_12:
  v118(0LL, 0LL, 0LL, 0LL);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v116 + 8))(v27, v117);
}

uint64_t sub_10017EAE8(void **a1, uint64_t a2, void (*a3)(void, void, void))
{
  return sub_100179FEC(a1, a2, a3);
}

uint64_t sub_10017EB08()
{
  uint64_t v66 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v63 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v2 = (char *)&v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for RoutingMode(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v64 = v3;
  uint64_t v65 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v67._uint64_t countAndFlagsBits = 0LL;
  v67._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(28LL);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v67._object = (void *)0x800000010033AA00LL;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier);
  uint64_t v11 = *(void **)(v0 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_identifier + 8);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 2622LL;
  v14._object = (void *)0xE200000000000000LL;
  String.append(_:)(v14);
  Swift::String v70 = v67;
  strcpy((char *)&v67, "Item Type: ");
  HIDWORD(v67._object) = -352321536;
  (*(void (**)(void))(*(void *)v0 + 176LL))();
  uint64_t v15 = sub_100156FEC( &qword_1003F88E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v15);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v17._uint64_t countAndFlagsBits = 10LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 0LL;
  v67._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  uint64_t v18 = swift_bridgeObjectRelease();
  strcpy((char *)&v67, "Routing Mode: ");
  HIBYTE(v67._object) = -18;
  (*(void (**)(uint64_t))(*(void *)v0 + 200LL))(v18);
  uint64_t v19 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  uint64_t v20 = v64;
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v64, v19);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v6, v20);
  v22._uint64_t countAndFlagsBits = 10LL;
  v22._object = (void *)0xE100000000000000LL;
  String.append(_:)(v22);
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 0LL;
  v67._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(19LL);
  uint64_t v23 = swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v67._object = (void *)0x800000010033AA20LL;
  uint64_t v24 = *(uint64_t (**)(uint64_t))(*(void *)v0 + 224LL);
  uint64_t v65 = v0;
  uint64_t v25 = v24(v23);
  int64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v69 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v26, 0);
    uint64_t v27 = *(unsigned __int8 *)(v63 + 80);
    uint64_t v64 = v25;
    uint64_t v28 = v25 + ((v27 + 32) & ~v27);
    uint64_t v29 = *(void *)(v63 + 72);
    do
    {
      sub_100183690(v28, (uint64_t)v2);
      v68._uint64_t countAndFlagsBits = 538976288LL;
      v68._object = (void *)0xE400000000000000LL;
      uint64_t v30 = sub_100156FEC(&qword_1003F8948, type metadata accessor for HostedRoutingItem, (uint64_t)&unk_1003500A8);
      v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v66, v30);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v68._countAndFlagsBits;
      object = v68._object;
      sub_1001838D0((uint64_t)v2);
      NSString v34 = v69;
      if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
      {
        sub_10015DCE8(0, v34[2] + 1LL, 1);
        NSString v34 = v69;
      }

      unint64_t v36 = v34[2];
      unint64_t v35 = v34[3];
      if (v36 >= v35 >> 1)
      {
        sub_10015DCE8(v35 > 1, v36 + 1, 1);
        NSString v34 = v69;
      }

      v34[2] = v36 + 1;
      uint64_t v37 = &v34[2 * v36];
      v37[4] = countAndFlagsBits;
      v37[5] = object;
      v28 += v29;
      --v26;
    }

    while (v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    NSString v34 = _swiftEmptyArrayStorage;
  }

  v68._uint64_t countAndFlagsBits = (uint64_t)v34;
  uint64_t v38 = sub_100156B68(&qword_1003FA010);
  uint64_t v39 = sub_1001604E8( (unint64_t *)&qword_1003F8950,  &qword_1003FA010,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v40 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v38, v39);
  uint64_t v42 = v41;
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 10LL;
  v44._object = (void *)0xE100000000000000LL;
  String.append(_:)(v44);
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v67._uint64_t countAndFlagsBits = 0LL;
  v67._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  v68._object = (void *)0x800000010033AA40LL;
  swift_beginAccess(v65 + OBJC_IVAR____TtC12mediaremoted21RoutingItemDataSource_pendingInteractions, &v67, 0LL, 0LL);
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = sub_10017F1A8(v45);
  swift_bridgeObjectRelease();
  uint64_t v69 = (void *)v46;
  uint64_t v47 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v38, v39);
  uint64_t v49 = v48;
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = v47;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 10LL;
  v51._object = (void *)0xE100000000000000LL;
  String.append(_:)(v51);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0LL;
  v68._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v68._object = (void *)0x800000010033AA60LL;
  uint64_t v52 = sub_100175920();
  uint64_t v54 = v53;
  uint64_t ObjectType = swift_getObjectType(v52, v55);
  uint64_t v69 = (void *)v52;
  uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)(v54 + 8) + 8LL))(ObjectType);
  uint64_t v59 = v58;
  swift_unknownObjectRelease(v52);
  v60._uint64_t countAndFlagsBits = v57;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 10LL;
  v61._object = (void *)0xE100000000000000LL;
  String.append(_:)(v61);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  return v70._countAndFlagsBits;
}

uint64_t sub_10017F1A8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v42 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v33 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v33 = v1;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_10015DCE8(0, v7, 0);
  uint64_t result = sub_1001834F8(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0LL;
  uint64_t v13 = a1 + 64;
  uint64_t v34 = a1 + 80;
  int64_t v35 = v7;
  uint64_t v37 = a1 + 64;
  uint64_t v38 = a1;
  uint64_t v36 = v10;
  while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10) {
      goto LABEL_26;
    }
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v19 = v41;
    uint64_t v18 = v42;
    uint64_t v20 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v39, v17 + *(void *)(v41 + 72) * v11, v42);
    Swift::String v21 = v40;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v40, v20, v18);
    uint64_t v45 = 538976288LL;
    unint64_t v46 = 0xE400000000000000LL;
    uint64_t v22 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v18, v22);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    unint64_t v43 = v46;
    uint64_t v44 = v45;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v8 = v47;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v47);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10015DCE8(0, v8[2] + 1LL, 1);
      uint64_t v8 = v47;
    }

    unint64_t v25 = v8[2];
    unint64_t v24 = v8[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t result = sub_10015DCE8(v24 > 1, v25 + 1, 1);
      uint64_t v8 = v47;
    }

    void v8[2] = v25 + 1;
    int64_t v26 = &v8[2 * v25];
    unint64_t v27 = v43;
    v26[4] = v44;
    v26[5] = v27;
    a1 = v38;
    int64_t v14 = 1LL << *(_BYTE *)(v38 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v37;
    uint64_t v28 = *(void *)(v37 + 8 * v16);
    if ((v28 & (1LL << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v10) = v36;
    if (*(_DWORD *)(v38 + 36) != (_DWORD)v36) {
      goto LABEL_29;
    }
    unint64_t v29 = v28 & (-2LL << (v11 & 0x3F));
    if (v29)
    {
      int64_t v14 = __clz(__rbit64(v29)) | v11 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v15 = v35;
    }

    else
    {
      unint64_t v30 = v16 + 1;
      unint64_t v31 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v35;
      if (v16 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v37 + 8 * v30);
        if (v32)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v32)) + (v30 << 6);
        }

        else
        {
          while (v31 - 2 != v16)
          {
            unint64_t v32 = *(void *)(v34 + 8 * v16++);
            if (v32)
            {
              unint64_t v30 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    ++v12;
    uint64_t v11 = v14;
    if (v12 == v15) {
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10017F4D4()
{
  return sub_10017EB08();
}

void sub_10017F4F4()
{
  uint64_t v64 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v1 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v3 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v69 = 0LL;
  unint64_t v70 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  unint64_t v69 = 0xD000000000000023LL;
  unint64_t v70 = 0x800000010033AA80LL;
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 2622LL;
  v11._object = (void *)0xE200000000000000LL;
  String.append(_:)(v11);
  v68._uint64_t countAndFlagsBits = 0LL;
  v68._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  uint64_t v12 = swift_bridgeObjectRelease();
  strcpy((char *)&v68, "Routing Mode: ");
  HIBYTE(v68._object) = -18;
  (*(void (**)(uint64_t))(*(void *)v0 + 200LL))(v12);
  uint64_t v13 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v13);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15._uint64_t countAndFlagsBits = 10LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0LL;
  v68._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(19LL);
  uint64_t v16 = swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  v68._object = (void *)0x800000010033AA20LL;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 224LL))(v16);
  int64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v63 = v0;
    Swift::String v67 = _swiftEmptyArrayStorage;
    sub_10015DCE8(0, v18, 0);
    uint64_t v19 = *(unsigned __int8 *)(v1 + 80);
    uint64_t v62 = v17;
    uint64_t v20 = v17 + ((v19 + 32) & ~v19);
    uint64_t v21 = *(void *)(v1 + 72);
    do
    {
      sub_100183690(v20, (uint64_t)v3);
      uint64_t v65 = 538976288LL;
      unint64_t v66 = 0xE400000000000000LL;
      uint64_t v22 = sub_100156FEC(&qword_1003F8948, type metadata accessor for HostedRoutingItem, (uint64_t)&unk_1003500A8);
      v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v64, v22);
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      uint64_t v24 = v65;
      unint64_t v25 = v66;
      sub_1001838D0((uint64_t)v3);
      int64_t v26 = v67;
      if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
      {
        sub_10015DCE8(0, v26[2] + 1LL, 1);
        int64_t v26 = v67;
      }

      unint64_t v28 = v26[2];
      unint64_t v27 = v26[3];
      if (v28 >= v27 >> 1)
      {
        sub_10015DCE8(v27 > 1, v28 + 1, 1);
        int64_t v26 = v67;
      }

      v26[2] = v28 + 1;
      unint64_t v29 = &v26[2 * v28];
      v29[4] = v24;
      v29[5] = v25;
      v20 += v21;
      --v18;
    }

    while (v18);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    int64_t v26 = _swiftEmptyArrayStorage;
  }

  uint64_t v65 = (uint64_t)v26;
  uint64_t v30 = sub_100156B68(&qword_1003FA010);
  uint64_t v31 = sub_1001604E8( (unint64_t *)&qword_1003F8950,  &qword_1003FA010,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v32 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v30, v31);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = v32;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 10LL;
  v36._object = (void *)0xE100000000000000LL;
  String.append(_:)(v36);
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0LL;
  v68._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  v68._object = (void *)0x800000010033AAB0LL;
  uint64_t v37 = (void *)sub_100178884();
  id v38 = [v37 availableOutputDevices];

  if (!v38) {
    goto LABEL_29;
  }
  uint64_t v39 = sub_10016083C(0LL, (unint64_t *)&qword_1003F8300, &OBJC_CLASS___MRAVOutputDevice_ptr);
  uint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

  if ((unint64_t)v40 >> 62)
  {
    if (v40 < 0) {
      uint64_t v56 = v40;
    }
    else {
      uint64_t v56 = v40 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v56);
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_13;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    unint64_t v43 = _swiftEmptyArrayStorage;
LABEL_27:
    uint64_t v65 = (uint64_t)v43;
    uint64_t v57 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v30, v31);
    uint64_t v59 = v58;
    swift_bridgeObjectRelease();
    v60._uint64_t countAndFlagsBits = v57;
    v60._object = v59;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._uint64_t countAndFlagsBits = 10LL;
    v61._object = (void *)0xE100000000000000LL;
    String.append(_:)(v61);
    String.append(_:)(v68);
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v41) {
    goto LABEL_26;
  }
LABEL_13:
  Swift::String v67 = _swiftEmptyArrayStorage;
  sub_10015DCE8(0, v41 & ~(v41 >> 63), 0);
  if ((v41 & 0x8000000000000000LL) == 0)
  {
    uint64_t v63 = v31;
    uint64_t v64 = v30;
    uint64_t v42 = 0LL;
    unint64_t v43 = v67;
    do
    {
      if ((v40 & 0xC000000000000001LL) != 0) {
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v40);
      }
      else {
        id v44 = *(id *)(v40 + 8 * v42 + 32);
      }
      uint64_t v45 = v44;
      uint64_t v65 = 538976288LL;
      unint64_t v66 = 0xE400000000000000LL;
      id v46 = objc_msgSend(v44, "description", v62);
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v49 = v48;

      v50._uint64_t countAndFlagsBits = v47;
      v50._object = v49;
      String.append(_:)(v50);

      swift_bridgeObjectRelease();
      uint64_t v51 = v65;
      unint64_t v52 = v66;
      Swift::String v67 = v43;
      unint64_t v54 = v43[2];
      unint64_t v53 = v43[3];
      if (v54 >= v53 >> 1)
      {
        sub_10015DCE8(v53 > 1, v54 + 1, 1);
        unint64_t v43 = v67;
      }

      ++v42;
      v43[2] = v54 + 1;
      uint64_t v55 = &v43[2 * v54];
      v55[4] = v51;
      void v55[5] = v52;
    }

    while (v41 != v42);
    swift_bridgeObjectRelease();
    uint64_t v31 = v63;
    uint64_t v30 = v64;
    goto LABEL_27;
  }

  __break(1u);
LABEL_29:
  __break(1u);
}

void sub_10017FB74()
{
}

uint64_t sub_10017FB94(uint64_t a1, uint64_t a2)
{
  return sub_10017FDCC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10017FBA0(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10017FC14(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10017FC90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_10017FCD0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10017FD14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10017FD3C(uint64_t a1)
{
  uint64_t v2 = sub_100156FEC( &qword_1003F8D80,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10034C3F0);
  uint64_t v3 = sub_100156FEC( &qword_1003F8D88,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10034C3B0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10017FDC0(uint64_t a1, uint64_t a2)
{
  return sub_10017FDCC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10017FDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10017FE08(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10017FE48(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10017FEB8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10017FF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v16 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100183690(a1 + v12, (uint64_t)v10);
        sub_100183690(a2 + v12, (uint64_t)v7);
        uint64_t v15 = sub_100156FEC(&qword_1003F8D30, type metadata accessor for HostedRoutingItem, (uint64_t)&unk_1003500D0);
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v15);
        sub_1001838D0((uint64_t)v7);
        sub_1001838D0((uint64_t)v10);
        BOOL v18 = v14-- != 0;
        if ((v16 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v18);
    }
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

void *sub_100180090(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100156B68(&qword_1003F8D18);
      uint64_t v11 = (void *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      void v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1001846F4(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018019C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10018036C(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001815C0();
    uint64_t v7 = v12;
  }

  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * v4,  v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_100180DE0(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100180288(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001817FC();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100181080(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_10018036C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v6 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100181254(a1, v7);
}

Swift::Int sub_1001803D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100156B68(&qword_1003F8D28);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    uint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_100180740(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F8D40);
  int v42 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v40) {
              goto LABEL_36;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_100180AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F8CD8);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v9 = v8;
  if (*(void *)(v5 + 16))
  {
    BOOL v36 = v3;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v37) {
          goto LABEL_36;
        }
        unint64_t v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v25 = v38[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v36;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v38 = -1LL << v35;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v15 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v25 = v38[v15];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

unint64_t sub_100180DE0(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  char v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      BOOL v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100156FEC( &qword_1003F7F98,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            char v27 = (_OWORD *)(v26 + 16 * a1);
            unint64_t v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              _OWORD *v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    BOOL v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  uint64_t *v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100181080(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100181254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v18 = a1;
  uint64_t v5 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(void *)(v3 + 48) + v12 * v10, v5);
      uint64_t v14 = sub_100156FEC( &qword_1003F8D48,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  return v10;
}

void *sub_100181394()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F8D28);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    unint64_t result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  unint64_t v28 = v1;
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v29 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }

void *sub_1001815C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F8D40);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v27 = v1;
  unint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v28 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v16) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v12);
      if (!v25) {
        break;
      }
    }

void *sub_1001817FC()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F8CD8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

uint64_t sub_1001819BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for HostedRoutingItem(0LL) - 8) + 72LL) * v12;
        return sub_1001848D8(a1, v20);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100181394();
      goto LABEL_7;
    }

    sub_1001803D8(v15, a4 & 1);
    unint64_t v22 = sub_10015CAD4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_100181DD0(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100181AF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_10018036C(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    int64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      unint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release(v22[1]);
      uint64_t v24 = v28;
      *unint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001815C0();
    goto LABEL_7;
  }

  sub_100180740(v18, a4 & 1);
  unint64_t v25 = sub_10018036C(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v25;
  int64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_100181E58(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_100181C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10015CAD4(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001817FC();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      int64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_release(v21[1]);
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }

uint64_t sub_100181DD0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t result = sub_10018364C(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_100181E58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  BOOL v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t *sub_100181EF8(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v94 = a1;
  uint64_t v89 = *a3;
  uint64_t v93 = type metadata accessor for Logger(0LL);
  uint64_t v97 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v95 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100156B68(&qword_1003F8210);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v109 = *(uint64_t **)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FBED0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v110 = v12;
  uint64_t v111 = v13;
  __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  char v18 = (uint64_t *)((char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_itemType;
  uint64_t v20 = enum case for RoutingSessionConfiguration.ItemType.standard(_:);
  uint64_t v21 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104LL))(v19, v20, v21);
  unint64_t v22 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode;
  unint64_t v23 = (char *)enum case for RoutingMode.disabled(_:);
  uint64_t v24 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 104LL))(v22, v23, v24);
  *(uint64_t *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems) = (uint64_t)&_swiftEmptyArrayStorage;
  *(uint64_t *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers) = (uint64_t)&_swiftEmptyDictionarySingleton;
  unint64_t v25 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  *((void *)v25 + 1) = 0LL;
  swift_unknownObjectWeakInit(v25, 0LL);
  *(uint64_t *)((char *)a3
             + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession) = 0LL;
  *(uint64_t *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers) = (uint64_t)&_swiftEmptySetSingleton;
  char v26 = (uint64_t *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
  uint64_t *v26 = sub_1001A8998();
  v26[1] = v27;
  *char v18 = a2;
  (*((void (**)(void *, void, uint64_t))v16 + 13))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v28 = a2;
  uint64_t v29 = _dispatchPreconditionTest(_:)(v18);
  (*((void (**)(void *, uint64_t))v16 + 1))(v18, v15);
  if ((v29 & 1) != 0)
  {
    a3[2] = (uint64_t)v28;
    uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    id v108 = v30;
    id v31 = v28;
    id v96 = v31;
    id v32 = objc_msgSend(v30, "defaultCenter", v89);
    uint64_t v33 = MRAVEndpointOutputDevicesDidChangeNotification;
    uint64_t v34 = (uint64_t)v8;
    uint64_t v35 = (void *)objc_opt_self(&OBJC_CLASS___MRAVLocalEndpoint);
    id v36 = [v35 sharedLocalEndpoint];
    unint64_t v37 = v11;
    NSNotificationCenter.publisher(for:object:)(v33, v36);

    v115[0] = v31;
    uint64_t v38 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    __int128 v39 = *(void (**)(void, void, void, void))(*(void *)(v38 - 8) + 56LL);
    uint64_t v103 = v38;
    uint64_t v104 = v39;
    uint64_t v91 = v34;
    v39(v34, 1LL, 1LL, v38);
    uint64_t v40 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v107 = v40;
    uint64_t v41 = sub_100156FEC( (unint64_t *)&unk_1003FBEE0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    uint64_t v106 = v41;
    unint64_t v105 = sub_100184978();
    uint64_t v16 = v92;
    Publisher.receive<A>(on:options:)(v115, v34, v9, v40, v41, v105);
    sub_1001603DC(v34, &qword_1003F8210);
    uint64_t v101 = (void (*)(char *, uint64_t))v109[1];
    v101(v11, v9);
    uint64_t v42 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
    swift_weakInit(v42 + 16, a3);
    uint64_t v102 = sub_1001604E8( (unint64_t *)&qword_1003FBEF0,  (uint64_t *)&unk_1003FBED0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v43 = v110;
    uint64_t v44 = Publisher<>.sink(receiveValue:)(sub_1001849D0, v42, v110, v102);
    swift_release(v42);
    uint64_t v45 = *(void (**)(char *, uint64_t))(v111 + 8);
    v45(v16, v43);
    unint64_t v23 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers;
    swift_beginAccess( (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers,  v115,  33LL,  0LL);
    AnyCancellable.store(in:)(v23);
    swift_endAccess(v115);
    swift_release(v44);
    id v46 = [v108 defaultCenter];
    uint64_t v47 = kMRAVEndpointPredictedOutputDeviceDidChangeNotification;
    id v100 = v35;
    id v48 = [v35 sharedLocalEndpoint];
    NSNotificationCenter.publisher(for:object:)(v47, v48);

    v115[0] = v96;
    uint64_t v29 = v91;
    v104(v91, 1LL, 1LL, v103);
    Publisher.receive<A>(on:options:)(v115, v29, v9, v107, v106, v105);
    sub_1001603DC(v29, &qword_1003F8210);
    Swift::String v90 = v37;
    uint64_t v99 = v9;
    v101(v37, v9);
    uint64_t v49 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
    uint64_t v109 = a3;
    uint64_t v50 = v102;
    swift_weakInit(v49 + 16, a3);
    uint64_t v51 = Publisher<>.sink(receiveValue:)(sub_1001849D0, v49, v43, v50);
    swift_release(v49);
    uint64_t v98 = v45;
    v45(v16, v43);
    swift_beginAccess(v23, v115, 33LL, 0LL);
    AnyCancellable.store(in:)(v23);
    swift_endAccess(v115);
    swift_release(v51);
    if (qword_1003FE880 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1003FE880, sub_100178CA8);
LABEL_3:
  uint64_t v111 = qword_1003FE888;
  uint64_t v52 = *(void *)(qword_1003FE888 + 16);
  uint64_t v53 = v97;
  if (v52)
  {
    swift_bridgeObjectRetain();
    unint64_t v54 = v16;
    uint64_t v55 = 0LL;
    uint64_t v56 = v29;
    uint64_t v57 = v90;
    uint64_t v58 = v110;
    do
    {
      uint64_t v59 = *(void **)(v111 + 8 * v55++ + 32);
      id v60 = v59;
      id v61 = [v108 defaultCenter];
      uint64_t v62 = v23;
      uint64_t v63 = v52;
      id v64 = [v100 sharedLocalEndpoint];
      NSNotificationCenter.publisher(for:object:)(v60, v64);

      uint64_t v65 = (void *)*sub_100216E68();
      v115[0] = v65;
      v104(v56, 1LL, 1LL, v103);
      id v66 = v65;
      uint64_t v67 = v99;
      Publisher.receive<A>(on:options:)(v115, v56, v99, v107, v106, v105);
      sub_1001603DC(v56, &qword_1003F8210);

      v101(v57, v67);
      uint64_t v68 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
      swift_weakInit(v68 + 16, v109);
      uint64_t v69 = Publisher<>.sink(receiveValue:)(sub_1001849E8, v68, v58, v102);
      uint64_t v70 = v68;
      uint64_t v52 = v63;
      unint64_t v23 = v62;
      swift_release(v70);
      v98(v54, v58);
      swift_beginAccess(v62, v115, 33LL, 0LL);
      AnyCancellable.store(in:)(v62);
      swift_endAccess(v115);

      swift_release(v69);
    }

    while (v52 != v55);
    swift_bridgeObjectRelease();
    uint64_t v53 = v97;
  }

  unint64_t v71 = v109;
  uint64_t v72 = (*(uint64_t (**)(void))(*v109 + 368))();
  unint64_t v73 = (uint64_t *)((char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems);
  swift_beginAccess( (char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems,  v115,  1LL,  0LL);
  *unint64_t v73 = v72;
  swift_bridgeObjectRelease();
  uint64_t v74 = (char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  swift_beginAccess( (char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate,  v114,  1LL,  0LL);
  *((void *)v74 + 1) = &off_1003A4040;
  uint64_t v75 = v94;
  swift_unknownObjectWeakAssign(v74, v94);
  uint64_t v76 = sub_1001741A8();
  id v77 = v95;
  uint64_t v78 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v95, v76, v93);
  uint64_t v79 = swift_retain_n(v71, 2LL);
  uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
  os_log_type_t v81 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v80, v81))
  {
    uint64_t v82 = swift_slowAlloc(22LL, -1LL);
    uint64_t v83 = swift_slowAlloc(64LL, -1LL);
    uint64_t v113 = v83;
    *(_DWORD *)uint64_t v82 = 136315394;
    uint64_t v84 = _typeName(_:qualified:)(v89, 0LL);
    uint64_t v112 = sub_10015ADC4(v84, v85, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v82 + 4, v82 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 12) = 2080;
    uint64_t v86 = *(uint64_t *)((char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
    unint64_t v87 = *(uint64_t *)((char *)v71 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
    swift_bridgeObjectRetain();
    uint64_t v112 = sub_10015ADC4(v86, v87, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v82 + 14, v82 + 22);
    swift_release_n(v71, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "[%s]<%s> init", (uint8_t *)v82, 0x16u);
    swift_arrayDestroy(v83, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1LL, -1LL);
    swift_slowDealloc(v82, -1LL, -1LL);

    swift_release(v94);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v95, v78);
  }

  else
  {

    swift_release(v75);
    swift_release_n(v71, 2LL);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v77, v78);
  }

  return v71;
}

void *sub_1001829C4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v91 = a5;
  uint64_t v93 = a1;
  uint64_t v89 = *a3;
  uint64_t v92 = type metadata accessor for Logger(0LL);
  uint64_t v95 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v94 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100156B68(&qword_1003F8210);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v107 = *(void **)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68((uint64_t *)&unk_1003FBED0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v108 = v13;
  uint64_t v109 = v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_itemType;
  uint64_t v22 = enum case for RoutingSessionConfiguration.ItemType.standard(_:);
  uint64_t v23 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 104LL))(v21, v22, v23);
  uint64_t v24 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingMode;
  uint64_t v25 = enum case for RoutingMode.disabled(_:);
  uint64_t v26 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104LL))(v24, v25, v26);
  *(void *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems) = &_swiftEmptyArrayStorage;
  *(void *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers) = &_swiftEmptyDictionarySingleton;
  uint64_t v27 = (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  *((void *)v27 + 1) = 0LL;
  swift_unknownObjectWeakInit(v27, 0LL);
  *(void *)((char *)a3
            + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource____lazy_storage___discoverySession) = 0LL;
  id v28 = &qword_1003FE000;
  *(void *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers) = &_swiftEmptySetSingleton;
  uint64_t v29 = (void *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
  uint64_t *v29 = sub_1001A8998();
  v29[1] = v30;
  *uint64_t v20 = a2;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v31 = a2;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v29 & 1) != 0)
  {
    a3[2] = v31;
    id v32 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    id v106 = v32;
    id v33 = v31;
    id v96 = v33;
    id v34 = [v32 defaultCenter];
    uint64_t v35 = MRAVEndpointOutputDevicesDidChangeNotification;
    id v36 = (void *)objc_opt_self(&OBJC_CLASS___MRAVLocalEndpoint);
    id v37 = [v36 sharedLocalEndpoint];
    NSNotificationCenter.publisher(for:object:)(v35, v37);

    v114[0] = v33;
    uint64_t v100 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    unint64_t v105 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56LL);
    v105(v10, 1LL, 1LL, v100);
    uint64_t v38 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v104 = v38;
    uint64_t v39 = sub_100156FEC( (unint64_t *)&unk_1003FBEE0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
    uint64_t v103 = v39;
    unint64_t v102 = sub_100184978();
    uint64_t v40 = v110;
    Publisher.receive<A>(on:options:)(v114, v10, v110, v38, v39, v102);
    sub_1001603DC((uint64_t)v10, &qword_1003F8210);
    uint64_t v101 = (void (*)(char *, uint64_t))v107[1];
    v101(v12, v40);
    uint64_t v41 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
    swift_weakInit(v41 + 16, a3);
    uint64_t v99 = sub_1001604E8( (unint64_t *)&qword_1003FBEF0,  (uint64_t *)&unk_1003FBED0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v42 = v108;
    uint64_t v43 = Publisher<>.sink(receiveValue:)(sub_1001849D0, v41, v108, v99);
    swift_release(v41);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v109 + 8);
    v44(v16, v42);
    id v28 = (void *)((char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers);
    swift_beginAccess( (char *)a3 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_notificationObservers,  v114,  33LL,  0LL);
    AnyCancellable.store(in:)(v28);
    swift_endAccess(v114);
    swift_release(v43);
    id v45 = [v106 defaultCenter];
    uint64_t v46 = kMRAVEndpointPredictedOutputDeviceDidChangeNotification;
    id v98 = v36;
    id v47 = [v36 sharedLocalEndpoint];
    NSNotificationCenter.publisher(for:object:)(v46, v47);

    v114[0] = v96;
    v105(v10, 1LL, 1LL, v100);
    uint64_t v48 = v110;
    Publisher.receive<A>(on:options:)(v114, v10, v110, v104, v103, v102);
    sub_1001603DC((uint64_t)v10, &qword_1003F8210);
    Swift::String v90 = v12;
    v101(v12, v48);
    uint64_t v49 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
    uint64_t v107 = a3;
    uint64_t v50 = v99;
    swift_weakInit(v49 + 16, a3);
    uint64_t v51 = Publisher<>.sink(receiveValue:)(sub_1001849D0, v49, v42, v50);
    swift_release(v49);
    uint64_t v97 = v44;
    v44(v16, v42);
    swift_beginAccess(v28, v114, 33LL, 0LL);
    AnyCancellable.store(in:)(v28);
    swift_endAccess(v114);
    uint64_t v52 = swift_release(v51);
    if (qword_1003FE880 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v52 = swift_once(&qword_1003FE880, sub_100178CA8);
LABEL_3:
  uint64_t v109 = qword_1003FE888;
  uint64_t v53 = *(void *)(qword_1003FE888 + 16);
  if (v53)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = 0LL;
    uint64_t v55 = v90;
    uint64_t v56 = v108;
    do
    {
      uint64_t v57 = *(void **)(v109 + 8 * v54++ + 32);
      id v58 = v57;
      id v59 = [v106 defaultCenter];
      id v60 = v28;
      uint64_t v61 = v53;
      id v62 = [v98 sharedLocalEndpoint];
      NSNotificationCenter.publisher(for:object:)(v58, v62);

      uint64_t v63 = (void *)*sub_100216E68();
      v114[0] = v63;
      v105(v10, 1LL, 1LL, v100);
      id v64 = v63;
      uint64_t v65 = v110;
      Publisher.receive<A>(on:options:)(v114, v10, v110, v104, v103, v102);
      sub_1001603DC((uint64_t)v10, &qword_1003F8210);

      v101(v55, v65);
      uint64_t v66 = swift_allocObject(&unk_1003A4140, 24LL, 7LL);
      swift_weakInit(v66 + 16, v107);
      uint64_t v67 = Publisher<>.sink(receiveValue:)(sub_1001849E8, v66, v56, v99);
      uint64_t v68 = v66;
      uint64_t v53 = v61;
      id v28 = v60;
      swift_release(v68);
      v97(v16, v56);
      swift_beginAccess(v60, v114, 33LL, 0LL);
      AnyCancellable.store(in:)(v60);
      swift_endAccess(v114);

      swift_release(v67);
    }

    while (v53 != v54);
    uint64_t v52 = swift_bridgeObjectRelease();
  }

  uint64_t v69 = v107;
  uint64_t v70 = (*(uint64_t (**)(uint64_t))(*v107 + 368LL))(v52);
  unint64_t v71 = (void *)((char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems);
  swift_beginAccess( (char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_routingItems,  v114,  1LL,  0LL);
  uint64_t *v71 = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = (char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate;
  swift_beginAccess( (char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_delegate,  v113,  1LL,  0LL);
  *((void *)v72 + 1) = v91;
  uint64_t v73 = v93;
  swift_unknownObjectWeakAssign(v72, v93);
  uint64_t v74 = sub_1001741A8();
  uint64_t v75 = v95;
  uint64_t v76 = v94;
  uint64_t v77 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, v74, v92);
  uint64_t v78 = swift_retain_n(v69, 2LL);
  uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
  os_log_type_t v80 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v79, v80))
  {
    uint64_t v81 = swift_slowAlloc(22LL, -1LL);
    uint64_t v82 = swift_slowAlloc(64LL, -1LL);
    uint64_t v112 = v82;
    *(_DWORD *)uint64_t v81 = 136315394;
    uint64_t v83 = _typeName(_:qualified:)(v89, 0LL);
    uint64_t v111 = sub_10015ADC4(v83, v84, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v81 + 4, v81 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 12) = 2080;
    uint64_t v85 = *(void *)((char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier);
    unint64_t v86 = *(void *)((char *)v69 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_identifier + 8);
    swift_bridgeObjectRetain();
    uint64_t v111 = sub_10015ADC4(v85, v86, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v81 + 14, v81 + 22);
    swift_release_n(v69, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%s]<%s> init", (uint8_t *)v81, 0x16u);
    swift_arrayDestroy(v82, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1LL, -1LL);
    swift_slowDealloc(v81, -1LL, -1LL);

    swift_unknownObjectRelease(v93);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v94, v77);
  }

  else
  {

    swift_unknownObjectRelease(v73);
    swift_release_n(v69, 2LL);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
  }

  return v69;
}

uint64_t sub_100183478(uint64_t a1)
{
  return a1;
}

uint64_t sub_10018349C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001834C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *(uint64_t (**)(void *))(v4 + 16);
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = a3;
  char v8 = a4;
  return v5(v7);
}

uint64_t sub_1001834F8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4LL;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1001835A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_1001835D8(uint64_t result, uint64_t a2, unsigned int a3)
{
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 0u:
      uint64_t result = swift_release(result);
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t result = sub_100183618(result, a2, a3 & 0xF97F);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100183618(uint64_t result, uint64_t a2, unsigned __int16 a3)
{
  switch(a3 >> 11)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      uint64_t result = swift_bridgeObjectRelease(a2);
      break;
    case 8:
    case 9:
    case 10:
    case 16:
      uint64_t result = swift_release(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10018364C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100183690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001836D4()
{
  uint64_t v1 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v13 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_bridgeObjectRelease(*(void *)(v0 + v10 + 8));
  swift_release(*(void *)(v0 + v11 + 8));
  return swift_deallocObject(v0, ((v11 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v13);
}

uint64_t sub_1001837C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for ContinuousClock(0LL) - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(type metadata accessor for ContinuousClock.Instant(0LL) - 8);
  unint64_t v13 = (v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = (*(void *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10017B928( a1,  a2,  a3,  a4,  v4 + v10,  v4 + v13,  *(void *)(v4 + v14),  *(void *)(v4 + v14 + 8),  *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v4 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v4 + ((((v14 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001838A4(uint64_t a1)
{
  return sub_100183A34(a1, (uint64_t)&unk_1003A4258, sub_100184B34);
}

uint64_t sub_1001838B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001838C8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001838D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HostedRoutingItem(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10018390C(uint64_t result, uint64_t a2, unsigned int a3)
{
  switch((a3 >> 8) & 6 | (a3 >> 7) & 1)
  {
    case 0u:
      uint64_t result = swift_retain(result);
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
      uint64_t result = sub_10018394C(result, a2, a3 & 0xF97F);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10018394C(uint64_t result, uint64_t a2, unsigned __int16 a3)
{
  switch(a3 >> 11)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      uint64_t result = swift_bridgeObjectRetain(a2);
      break;
    case 8:
    case 9:
    case 10:
    case 16:
      uint64_t result = swift_retain(result);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100183984(uint64_t a1)
{
  return sub_100183A34(a1, (uint64_t)&unk_1003A4230, (uint64_t (*)(void))sub_1001844D8);
}

uint64_t sub_10018399C()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*((void *)v0 + 3));
  swift_bridgeObjectRelease(*((void *)v0 + 5));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100183A20(uint64_t a1)
{
  return sub_100183A34(a1, (uint64_t)&unk_1003A40F0, (uint64_t (*)(void))sub_100183D4C);
}

uint64_t sub_100183A34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RoutingInteraction(0LL) - 8) + 80LL);
  uint64_t v8 = (void (*)(void))v3[2];
  uint64_t v9 = v5[3];
  uint64_t v10 = v5[4];
  uint64_t v11 = v5[5];
  if (!a1) {
    goto LABEL_4;
  }
  uint64_t v23 = v5[3];
  swift_getErrorValue(a1, v26, v25);
  uint64_t v12 = v25[1];
  uint64_t v13 = v25[2];
  swift_errorRetain(a1);
  if ((sub_100202810(v12, v13) & 1) != 0)
  {
    swift_errorRelease(a1);
    uint64_t v9 = v23;
LABEL_4:
    uint64_t v14 = swift_allocObject(a2, 32LL, 7LL);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    *(void *)(v14 + 24) = v11;
    swift_bridgeObjectRetain();
    sub_10017C0B0((uint64_t)v5 + ((v7 + 56) & ~v7), (void (*)(void, void, void, void))v8, v9, a3, v14);
    return swift_release(v14);
  }

  swift_errorRetain(a1);
  swift_bridgeObjectRetain();
  uint64_t v16 = MRDFastSyncGroupSessionState.rawValue.getter(a1, v10, v11, 1LL);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  unsigned __int8 v22 = v21;
  v8();
  swift_errorRelease(v16);
  sub_100156BA8(v18, v20, v22);
  return swift_errorRelease(a1);
}

uint64_t sub_100183B94()
{
  return type metadata accessor for RoutingItemDataSource(0LL);
}

uint64_t type metadata accessor for RoutingItemDataSource(uint64_t a1)
{
  return sub_100183BF8(a1, (uint64_t *)&unk_1003FE9D0, (uint64_t)&nominal type descriptor for RoutingItemDataSource);
}

uint64_t sub_100183BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100183C50( a1,  a2,  a3,  (uint64_t)&unk_10034C2E8,  (uint64_t)&value witness table for Builtin.NativeObject + 64,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&unk_10034C300);
}

uint64_t sub_100183BDC()
{
  return type metadata accessor for AVDiscoveryRoutingItemDataSource(0LL);
}

uint64_t type metadata accessor for AVDiscoveryRoutingItemDataSource(uint64_t a1)
{
  return sub_100183BF8(a1, qword_1003FE9E0, (uint64_t)&nominal type descriptor for AVDiscoveryRoutingItemDataSource);
}

uint64_t sub_100183BF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100183C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100183C50( a1,  a2,  a3,  (uint64_t)&value witness table for Builtin.BridgeObject + 64,  (uint64_t)&unk_10034C2E8,  (uint64_t)"\b",  (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_100183C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v15[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for RoutingSessionConfiguration.ItemType(319LL);
  if (v13 <= 0x3F)
  {
    v15[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for RoutingMode(319LL);
    if (v14 <= 0x3F)
    {
      v15[2] = *(void *)(result - 8) + 64LL;
      v15[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v15[4] = a4;
      v15[5] = a5;
      v15[6] = a6;
      v15[7] = a7;
      v15[8] = &unk_10034C318;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v15, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_100183D28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100183D4C(uint64_t a1)
{
  return sub_10017CF1C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100183D68()
{
  uint64_t v1 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = v10;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(void *)(v0 + v11));
  swift_bridgeObjectRelease(*(void *)(v0 + v12 + 8));
  swift_release(*(void *)(v0 + v13 + 8));
  return swift_deallocObject(v0, ((v13 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v15);
}

uint64_t sub_100183E68(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ContinuousClock(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for ContinuousClock.Instant(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10017E064( a1,  v1 + v4,  v1 + v7,  *(void *)(v1 + v8),  *(void *)(v1 + v9),  *(void *)(v1 + v9 + 8),  *(void (**)(void, void, void, void))(v1 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v9 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100183F20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100183F44()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100183F80()
{
  uint64_t v1 = (uint64_t (*)(void))v0[3];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  unint64_t v4 = (void (*)(void))v0[7];
  uint64_t v5 = v0[2] + 16LL;
  swift_beginAccess(v5, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    (*(void (**)(void))(*(void *)result + 224LL))();
    char v8 = v1();
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      swift_beginAccess( v7 + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers,  v12,  33LL,  0LL);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100180288(v2, v3);
      uint64_t v11 = v10;
      swift_endAccess(v12);
      swift_bridgeObjectRelease();
      sub_100162944(v9, v11);
      v4(0LL);
    }

    return swift_release(v7);
  }

  return result;
}

uint64_t sub_100184090()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1LL);
}

uint64_t sub_1001840B4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001840D4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100184108()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = (void (*)(uint64_t))v0[5];
  uint64_t v4 = v0[2] + 16LL;
  swift_beginAccess(v4, v12, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = result;
    swift_beginAccess( result + OBJC_IVAR____TtC12mediaremoted32AVDiscoveryRoutingItemDataSource_internalItemObservers,  v11,  33LL,  0LL);
    uint64_t v7 = sub_100180288(v1, v2);
    uint64_t v9 = v8;
    swift_endAccess(v11);
    if (v7)
    {
      uint64_t v10 = sub_100162944(v7, v9);
      v3(v10);
    }

    return swift_release(v6);
  }

  return result;
}

uint64_t sub_1001841C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v35 - v7;
  uint64_t v8 = sub_100156B68(&qword_1003F8CF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    sub_100156B68(&qword_1003F8CF8);
    unint64_t v12 = (void *)static _SetStorage.allocate(capacity:)(v11);
    uint64_t v13 = 0LL;
    uint64_t v14 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v37 = v11;
    uint64_t v38 = a1 + ((v14 + 32) & ~v14);
    uint64_t v15 = *(void *)(v3 + 72);
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v16 = (char *)(v12 + 7);
    uint64_t v35 = v10;
    v41(v10, v38, v2);
    while (1)
    {
      id v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v36(v10, 0LL, 1LL, v2);
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      uint64_t v40 = v13;
      v39(v42, v10, v2);
      uint64_t v18 = v12[5];
      uint64_t v19 = sub_100156FEC( &qword_1003F8D00,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
      uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v2, v19);
      uint64_t v21 = ~(-1LL << *((_BYTE *)v12 + 32));
      unint64_t v22 = v20 & v21;
      unint64_t v23 = (v20 & (unint64_t)v21) >> 6;
      uint64_t v24 = *(void *)&v16[8 * v23];
      uint64_t v25 = 1LL << (v20 & v21);
      if ((v25 & v24) != 0)
      {
        do
        {
          v41(v6, v12[6] + v22 * v15, v2);
          uint64_t v26 = sub_100156FEC( &qword_1003F8D08,  (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit,  (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
          char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v42, v2, v26);
          uint64_t v28 = v3;
          uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
          v29(v6, v2);
          if ((v27 & 1) != 0)
          {
            v29(v42, v2);
            uint64_t v3 = v28;
            uint64_t v10 = v35;
            uint64_t v17 = v40;
            goto LABEL_4;
          }

          unint64_t v22 = (v22 + 1) & v21;
          unint64_t v23 = v22 >> 6;
          uint64_t v24 = *(void *)&v16[8 * (v22 >> 6)];
          uint64_t v25 = 1LL << v22;
          uint64_t v3 = v28;
        }

        while ((v24 & (1LL << v22)) != 0);
        uint64_t v10 = v35;
      }

      uint64_t v30 = (uint64_t (*)(unint64_t, char *, uint64_t))v39;
      uint64_t v17 = v40;
      *(void *)&v16[8 * v23] = v25 | v24;
      uint64_t result = v30(v12[6] + v22 * v15, v42, v2);
      uint64_t v32 = v12[2];
      BOOL v33 = __OFADD__(v32, 1LL);
      uint64_t v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }

      v12[2] = v34;
LABEL_4:
      uint64_t v13 = v17 + 1;
      if (v13 == v37)
      {
        v36(v10, 1LL, 1LL, v2);
        return (uint64_t)v12;
      }

      v41(v10, v38 + v15 * v13, v2);
    }
  }

  else
  {
    unint64_t v12 = &_swiftEmptySetSingleton;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1LL, 1LL, v2);
  }

  return (uint64_t)v12;
}

uint64_t sub_1001844D8(uint64_t a1)
{
  return sub_10017CDE8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001844E0()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, (v6 + 19) & 0xFFFFFFFFFFFFFFF8LL | 4, v5);
}

uint64_t sub_10018458C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RoutingInteraction(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10017DD44( a1,  *(void **)(v1 + 16),  *(void (**)(void))(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(float *)(v1 + ((v5 + 19) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001845F4()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;

  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100184684(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RoutingInteraction(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10017D9D4( a1,  *(void **)(v1 + 16),  *(void (**)(void))(v1 + 24),  *(void *)(v1 + 32),  *(float *)(v1 + ((*(void *)(v3 + 64) + v4 + 3) & 0xFFFFFFFFFFFFFCLL)),  *(void *)(v1 + 40),  v1 + v4);
}

uint64_t sub_1001846DC()
{
  return swift_deallocObject(v0, 20LL, 7LL);
}

BOOL sub_1001846EC(uint64_t a1)
{
  return sub_10017DB90(a1, *(float *)(v1 + 16));
}

char *sub_1001846F4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001847DC()
{
  return swift_deallocObject(v0, 36LL, 7LL);
}

uint64_t sub_100184800(uint64_t a1)
{
  return sub_10017DF14(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(float *)(v1 + 32));
}

uint64_t sub_10018480C(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result)
  {
    swift_errorRetain(result);
    return sub_100156A2C(a2, a3, a4);
  }

  return result;
}

uint64_t sub_100184850(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result)
  {
    swift_errorRelease(result);
    return sub_100156BA8(a2, a3, a4);
  }

  return result;
}

unint64_t sub_100184894()
{
  unint64_t result = qword_1003F8D20;
  if (!qword_1003F8D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BBD0, &type metadata for RoutingEvent.Error);
    atomic_store(result, (unint64_t *)&qword_1003F8D20);
  }

  return result;
}

uint64_t sub_1001848D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingItem(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018491C()
{
  return sub_100178A1C(v0);
}

uint64_t sub_100184924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F9EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018496C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360LL))();
}

unint64_t sub_100184978()
{
  unint64_t result = qword_1003F8230;
  if (!qword_1003F8230)
  {
    uint64_t v1 = sub_10016083C(255LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1003F8230);
  }

  return result;
}

uint64_t sub_1001849D0()
{
  return sub_100178D14(v0);
}

uint64_t sub_1001849E8(uint64_t a1)
{
  return sub_100178D70(a1, v1);
}

void type metadata accessor for Name()
{
  if (!qword_1003F8D60)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1003A43C0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1003F8D60);
    }
  }

uint64_t sub_100184A44()
{
  return sub_100156FEC( &qword_1003F8D68,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_100350AB0);
}

uint64_t sub_100184A70()
{
  return sub_100156FEC( &qword_1003F8D70,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_10034C770);
}

uint64_t sub_100184A9C()
{
  return sub_100156FEC( &qword_1003F8D78,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_100350AF0);
}

uint64_t sub_100184B4C()
{
  return sub_10018556C( (uint64_t)&OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup,  (uint64_t (*)(uint64_t))&NearbyGroup.id.getter);
}

uint64_t variable initialization expression of MRDNearbyGroup.autoApproveKey()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SymmetricKeySize.bits256.getter(v0);
  return SymmetricKey.init(size:)(v2);
}

uint64_t sub_100184C1C()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret);
  if (*(void *)(v0 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret + 8))
  {
    uint64_t countAndFlagsBits = *v1;
  }

  else
  {
    SymmetricKey.withUnsafeBytes<A>(_:)(v7, sub_100184D40, 0LL, &type metadata for Data);
    uint64_t v3 = v7[0];
    unint64_t v4 = v7[1];
    Swift::String v5 = Data.base64EncodedString(options:)(0LL);
    uint64_t countAndFlagsBits = v5._countAndFlagsBits;
    sub_1001608B8(v3, v4);
    *(Swift::String *)uint64_t v1 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRetain();
  return countAndFlagsBits;
}

uint64_t sub_100184D24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret);
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret + 8);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100184D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = &type metadata for UnsafeRawBufferPointer;
  void v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = sub_1001865C4(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Swift::String v5 = (_BYTE *)*v4;
  if (*v4 && (size_t v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_100185D48(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_100185E88((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v8 = sub_100185E08((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  uint64_t result = sub_1001607E0(v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t (*sub_100184E08(uint64_t *a1))(uint64_t *a1)
{
  a1[2] = v1;
  *a1 = sub_100184C1C();
  a1[1] = v3;
  return sub_100184E3C;
}

uint64_t sub_100184E3C(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(a1[2] + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret);
  uint64_t v4 = v3[1];
  void *v3 = v2;
  v3[1] = v1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t variable initialization expression of MRDFastSyncGroupSession.leaderParticipantIdentifier()
{
  return 0LL;
}

id sub_100184E68(uint64_t a1)
{
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v5 = (char *)objc_allocWithZone(v1);
  static SymmetricKeySize.bits256.getter(v5);
  SymmetricKey.init(size:)(v4);
  size_t v6 = &v5[OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret];
  *(void *)size_t v6 = 0LL;
  *((void *)v6 + 1) = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup] = a1;
  swift_retain(a1);

  v9.receiver = v5;
  v9.super_class = v1;
  id v7 = objc_msgSendSuper2(&v9, "init");
  swift_release(a1);
  return v7;
}

uint64_t sub_100185060(const void *a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1003F8D98 + dword_1003F8D98);
  uint64_t v2 = (void *)swift_task_alloc(unk_1003F8D9C);
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_1001850C0;
  return v4();
}

uint64_t sub_1001850C0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  id v7 = *(void (***)(void, void, void))(v6 + 16);
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v7)[2](v7, 0LL, v8);

    _Block_release(v7);
  }

  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0LL);
    _Block_release(v7);
  }

  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t MRDNearbyGroup.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._uint64_t countAndFlagsBits = 8250LL;
  v6._object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x68LL))();
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._uint64_t countAndFlagsBits = 62LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 60LL;
}

id MRDFastSyncGroupSession.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void MRDNearbyGroup.init()()
{
}

id MRDNearbyGroup.__deallocating_deinit()
{
  return sub_100185D08(0LL, (uint64_t (*)(void))type metadata accessor for MRDNearbyGroup);
}

uint64_t sub_100185454()
{
  return dispatch thunk of NearbyInvitation.invitationData.getter();
}

id sub_100185490(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  Swift::String v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = a1;
  uint64_t v11 = a4();
  UUID.uuidString.getter(v11);
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);

  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  return v14;
}

uint64_t sub_100185558()
{
  return sub_10018556C( (uint64_t)&OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation,  (uint64_t (*)(uint64_t))&NearbyInvitation.id.getter);
}

uint64_t sub_10018556C(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin();
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2(v5);
  uint64_t v9 = UUID.uuidString.getter(v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v9;
}

id sub_100185610(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_1001857A0(void *a1, uint64_t a2, char a3, void *aBlock)
{
  v4[2] = a1;
  v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v10 = v9;
  void v4[4] = v9;
  uint64_t v11 = unk_1003F8DAC;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1003F8DA8 + dword_1003F8DA8);
  id v12 = a1;
  uint64_t v13 = (void *)swift_task_alloc(v11);
  void v4[5] = v13;
  void *v13 = v4;
  v13[1] = sub_100169CA8;
  return v15((uint64_t)v12, v8, v10, a3);
}

uint64_t MRDNearbyInvitation.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._uint64_t countAndFlagsBits = 0x3D6469203ALL;
  v6._object = (void *)0xE500000000000000LL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x60LL))();
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._uint64_t countAndFlagsBits = 62LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 60LL;
}

uint64_t sub_1001859F4()
{
  uint64_t v1 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for TaskPriority(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1LL, 1LL, v4);
  Swift::String v6 = (void *)swift_allocObject(&unk_1003A4450, 40LL, 7LL);
  void v6[2] = 0LL;
  Swift::String v7 = v6 + 2;
  void v6[3] = 0LL;
  void v6[4] = v0;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4);
  id v9 = v0;
  if (v8 == 1)
  {
    sub_1001863AC((uint64_t)v3);
    uint64_t v10 = 7168LL;
LABEL_6:
    uint64_t v19 = 0LL;
    goto LABEL_7;
  }

  unsigned __int8 v11 = TaskPriority.rawValue.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
  uint64_t v10 = v11 | 0x1C00LL;
  uint64_t v13 = *v7;
  if (!*v7) {
    goto LABEL_6;
  }
  uint64_t v14 = v6[3];
  uint64_t ObjectType = swift_getObjectType(*v7, v12);
  swift_unknownObjectRetain(v13);
  uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  uint64_t v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16)) {
    goto LABEL_6;
  }
  v22[0] = 0LL;
  v22[1] = 0LL;
  uint64_t v19 = v22;
  uint64_t v22[2] = v16;
  v22[3] = v18;
LABEL_7:
  uint64_t v20 = swift_task_create(v10, v19, (char *)&type metadata for () + 8, &unk_1003F8DB8, v6);
  return swift_release(v20);
}

uint64_t sub_100185BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  return swift_task_switch(sub_100185BC0, 0LL, 0LL);
}

uint64_t sub_100185BC0()
{
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100185C28;
  return v3();
}

uint64_t sub_100185C28()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void MRDNearbyInvitation.init()()
{
}

id MRDNearbyInvitation.__deallocating_deinit(uint64_t a1)
{
  return sub_100185D08(a1, type metadata accessor for MRDNearbyInvitation);
}

id sub_100185D08(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100185D48(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100185E08(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100185E88(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_100185F00()
{
  uint64_t v1 = type metadata accessor for SymmetricKeySize(0LL);
  *(void *)(v0 + 32) = swift_task_alloc((*(void *)(*(void *)(v1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for NearbyGroup(0LL);
  unint64_t v2 = (void *)swift_task_alloc(async function pointer to NearbyGroup.__allocating_init(members:service:)[1]);
  *(void *)(v0 + 40) = v2;
  void *v2 = v0;
  v2[1] = sub_100185F84;
  return NearbyGroup.__allocating_init(members:service:)(&_swiftEmptySetSingleton, 1LL);
}

uint64_t sub_100185F84(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(*(void *)(v4 + 32));
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = a1;
    return swift_task_switch(sub_100186008, 0LL, 0LL);
  }

uint64_t sub_100186008()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (objc_class *)type metadata accessor for MRDNearbyGroup(0LL);
  uint64_t v4 = (char *)objc_allocWithZone(v3);
  static SymmetricKeySize.bits256.getter(v4);
  SymmetricKey.init(size:)(v2);
  uint64_t v5 = &v4[OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup____lazy_storage___sessionSecret];
  *(void *)uint64_t v5 = 0LL;
  *((void *)v5 + 1) = 0LL;
  *(void *)&v4[OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup] = v1;
  swift_retain(v1);

  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v0 + 24) = v3;
  id v6 = objc_msgSendSuper2((objc_super *)(v0 + 16), "init");
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(id))(v0 + 8))(v6);
}

uint64_t type metadata accessor for MRDNearbyGroup(uint64_t a1)
{
  uint64_t result = qword_1003FEB00;
  if (!qword_1003FEB00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MRDNearbyGroup);
  }
  return result;
}

uint64_t sub_100186118(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 120) = a4;
  *(void *)(v4 + 80) = a2;
  *(void *)(v4 + 8_Block_object_dispose(va, 8) = a3;
  *(void *)(v4 + 72) = a1;
  return swift_task_switch(sub_100186138, 0LL, 0LL);
}

uint64_t sub_100186138()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = sub_10022AA88(*(_BYTE *)(v0 + 120));
  sub_100156B68(&qword_1003F8E50);
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_10016F0D8(v2);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup);
  *(void *)(v0 + 40) = type metadata accessor for NearbyGroup(0LL);
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = &protocol witness table for NearbyGroup;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v6;
  uint64_t v7 = async function pointer to NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)[1];
  swift_retain(v6);
  int v8 = (void *)swift_task_alloc(v7);
  *(void *)(v0 + 96) = v8;
  void *v8 = v0;
  v8[1] = sub_10018621C;
  return NearbyInvitation.__allocating_init(displayName:service:userInfo:invitationSourceProvider:)( *(void *)(v0 + 80),  *(void *)(v0 + 88),  1LL,  v3,  v5,  v0 + 16);
}

uint64_t sub_10018621C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1001862F4;
  }

  else
  {
    *(void *)(v4 + 112) = a1;
    uint64_t v6 = sub_100186290;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100186290()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = (objc_class *)type metadata accessor for MRDNearbyInvitation();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC12mediaremoted19MRDNearbyInvitation_nearbyInvitation] = v1;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v2;
  id v4 = objc_msgSendSuper2((objc_super *)(v0 + 56), "init");
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_1001862F4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for MRDNearbyInvitation()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted19MRDNearbyInvitation);
}

uint64_t sub_100186320()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10018634C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1003F8DB4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10015FD10;
  v3[2] = v2;
  return swift_task_switch(sub_100185BC0, 0LL, 0LL);
}

uint64_t sub_1001863AC(uint64_t a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003F86B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001863EC()
{
  return type metadata accessor for MRDNearbyGroup(0LL);
}

uint64_t sub_1001863F4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for SymmetricKey(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_10034C450;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100186478()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001864AC()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  id v4 = *(void **)(v0 + 40);
  char v5 = *(_BYTE *)(v0 + 32);
  uint64_t v6 = (void *)swift_task_alloc(dword_1003F8E14);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100160A04;
  return ((uint64_t (*)(void *, uint64_t, char, void *))((char *)&dword_1003F8E10 + dword_1003F8E10))( v2,  v3,  v5,  v4);
}

uint64_t sub_100186534()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100186558()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1003F8E34);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_10015FD10;
  return ((uint64_t (*)(const void *))((char *)&dword_1003F8E30 + dword_1003F8E30))(v2);
}

void *sub_1001865C4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

void type metadata accessor for MRGroupSessionRouteType()
{
  if (!qword_1003F8E58)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1003A4568);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1003F8E58);
    }
  }

void sub_100186640(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  uint64_t v4 = sub_100156B68(&qword_1003F8EA0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(unsigned __int8 *)(v2 + 16) != v3)
  {
    uint64_t v11 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
    uint64_t v12 = swift_retain(v2);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(18LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v36;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v35 = v15 + 4;
      uint64_t v17 = *(void *)(v2
                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier);
      unint64_t v16 = *(void *)(v2
                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier
                      + 8);
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_10015ADC4(v17, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v35, v15 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 1024;
      LODWORD(v37) = *(unsigned __int8 *)(v2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v15 + 14, v15 + 18);
      swift_release(v2);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[Client.Context]<%s> setIsPresentingUI - value: %{BOOL}d",  (uint8_t *)v15,  0x12u);
      uint64_t v18 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {

      swift_release(v2);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (*(_BYTE *)(v2 + 16) == 1)
    {
      uint64_t v19 = OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer;
      if (*(void *)(v2
                     + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer))
        return;
      type metadata accessor for Preferences(0LL);
      double v20 = static Preferences.sessionItemStabilityInterval.getter();
      uint64_t v21 = (void *)*sub_100216E68();
      uint64_t v22 = swift_allocObject(&unk_1003A4A40, 24LL, 7LL);
      swift_weakInit(v22 + 16, v2);
      id v23 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
      aBlock[4] = (uint64_t)sub_1001A7BEC;
      uint64_t v39 = v22;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100157EA8;
      aBlock[3] = (uint64_t)&unk_1003A4A58;
      uint64_t v24 = _Block_copy(aBlock);
      uint64_t v25 = v39;
      id v26 = v21;
      swift_retain(v22);
      swift_release(v25);
      id v27 = [v23 initWithInterval:0 repeats:v26 queue:v24 block:v20];

      _Block_release(v24);
      swift_release(v22);
      uint64_t v28 = *(void **)(v2 + v19);
      *(void *)(v2 + v19) = v27;
    }

    else
    {
      uint64_t v29 = type metadata accessor for RoutingInteraction(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v6, 1LL, 1LL, v29);
      uint64_t v30 = v2
          + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
      swift_beginAccess( v2 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  aBlock,  33LL,  0LL);
      sub_1001A2138((uint64_t)v6, v30);
      swift_endAccess(aBlock);
      sub_100186CE8();
      sub_1001603DC((uint64_t)v6, &qword_1003F8EA0);
      id v31 = (void *)(v2
                     + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation);
      swift_beginAccess( v2 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  aBlock,  1LL,  0LL);
      *id v31 = &_swiftEmptySetSingleton;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v2
               + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering) = 0;
      sub_100186F4C();
      uint64_t v32 = OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer;
      BOOL v33 = *(void **)(v2
                     + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer);
      if (!v33) {
        return;
      }
      [v33 invalidate];
      uint64_t v28 = *(void **)(v2 + v32);
      *(void *)(v2 + v32) = 0LL;
    }
  }

uint64_t sub_100186A70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_10019F320(a1, v8);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v10 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    uint64_t v11 = swift_retain_n(v2, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = swift_slowAlloc(22LL, -1LL);
      int v27 = v14;
      uint64_t v16 = v15;
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v29 = v26;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v17 = *(void *)(v2
                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier);
      unint64_t v18 = *(void *)(v2
                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier
                      + 8);
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_10015ADC4(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v25 = v16 + 14;
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = Set.description.getter(v19, &type metadata for String, &protocol witness table for String);
      unint64_t v22 = v21;
      swift_bridgeObjectRelease();
      uint64_t v28 = sub_10015ADC4(v20, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v25, v16 + 22);
      swift_release_n(v2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v12,  (os_log_type_t)v27,  "[Client.Context]<%s> setExpandedSessionIdentifiers - value: %s",  (uint8_t *)v16,  0x16u);
      uint64_t v23 = v26;
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v2, 2LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return result;
}

uint64_t sub_100186CE8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)&v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100156B68(&qword_1003F8EA0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v22[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = v1
      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
  swift_beginAccess( v1 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  v23,  0LL,  0LL);
  sub_1001A8360(v13, (uint64_t)v8, &qword_1003F8EA0);
  uint64_t v15 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v12, v8, v9);
  RoutingInteraction.action.getter(v15);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2) == enum case for RoutingInteraction.Action.handoff(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    uint64_t v16 = *v5;
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(void *)(v16 + 24);
    swift_bridgeObjectRetain();
    swift_release(v16);
    uint64_t v19 = sub_10024B258();
    uint64_t v20 = *((void *)v19 + 1);
    BOOL v21 = v17 == *(void *)v19 && v18 == v20;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, *(void *)v19, v20, 0LL) & 1) == 0)
    {
      swift_beginAccess( v1 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  v22,  33LL,  0LL);
      sub_10015CCDC(v17, v18);
      swift_endAccess(v22);
      swift_bridgeObjectRelease();
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    return swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
  }

uint64_t sub_100186F4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1001741A8();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = swift_retain(v1);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(18LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v11 = *(void *)(v1
                    + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier);
    unint64_t v12 = *(void *)(v1
                    + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier
                    + 8);
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10015ADC4(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 1024;
    LODWORD(v17) = *(unsigned __int8 *)(v1
                                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, (char *)&v17 + 4, v10 + 14, v10 + 18);
    swift_release(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[Client.Context]<%s> setRequestsStableItemOrdering - value: %{BOOL}d",  (uint8_t *)v10,  0x12u);
    uint64_t v13 = v16;
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {

    swift_release(v1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100187140()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100156B68(&qword_1003F8EA0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v40 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - v6;
  unint64_t v8 = 0xE000000000000000LL;
  uint64_t v43 = 0LL;
  unint64_t v44 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(51LL);
  uint64_t v45 = v43;
  unint64_t v46 = v44;
  v9._uint64_t countAndFlagsBits = 60LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v2, 0LL);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x203A6975202D20LL;
  v11._object = (void *)0xE700000000000000LL;
  String.append(_:)(v11);
  if (*((_BYTE *)v0 + 16)) {
    uint64_t v12 = 1702195828LL;
  }
  else {
    uint64_t v12 = 0x65736C6166LL;
  }
  if (*((_BYTE *)v0 + 16)) {
    unint64_t v13 = 0xE400000000000000LL;
  }
  else {
    unint64_t v13 = 0xE500000000000000LL;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x646E61707865202CLL;
  v15._object = (void *)0xEC000000203A6465LL;
  String.append(_:)(v15);
  uint64_t v16 = swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = Set.description.getter(v16, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 0x656C62617473202CLL;
  v18._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v18);
  if (*((_BYTE *)v0
       + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering))
    uint64_t v19 = 1702195828LL;
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if (*((_BYTE *)v0
       + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering))
    unint64_t v20 = 0xE400000000000000LL;
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 8236LL;
  v22._object = (void *)0xE200000000000000LL;
  String.append(_:)(v22);
  uint64_t v23 = (uint64_t)v0
      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
  swift_beginAccess( (char *)v1 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  &v43,  0LL,  0LL);
  sub_1001A8360(v23, (uint64_t)v7, &qword_1003F8EA0);
  uint64_t v24 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v7, 1LL, v24);
  sub_1001603DC((uint64_t)v7, &qword_1003F8EA0);
  if (v27 == 1)
  {
    uint64_t v28 = 0LL;
LABEL_17:
    unint64_t v34 = v8;
    String.append(_:)(*(Swift::String *)&v28);
    swift_bridgeObjectRelease();
    v35._uint64_t countAndFlagsBits = 0x203A776F6873LL;
    v35._object = (void *)0xE600000000000000LL;
    String.append(_:)(v35);
    swift_beginAccess( (char *)v1 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  &v41,  0LL,  0LL);
    uint64_t v36 = swift_bridgeObjectRetain();
    v37._uint64_t countAndFlagsBits = Set.description.getter(v36, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 62LL;
    v38._object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    return v45;
  }

  uint64_t v41 = 0x203A65646968LL;
  unint64_t v42 = 0xE600000000000000LL;
  uint64_t v29 = v40;
  sub_1001A8360(v23, v40, &qword_1003F8EA0);
  uint64_t result = v26((char *)v29, 1LL, v24);
  if ((_DWORD)result != 1)
  {
    uint64_t v31 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v24, v31);
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v24);
    v33._uint64_t countAndFlagsBits = 8236LL;
    v33._object = (void *)0xE200000000000000LL;
    String.append(_:)(v33);
    uint64_t v28 = v41;
    unint64_t v8 = v42;
    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001874D8()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10018754C()
{
  return sub_100187140();
}

uint64_t sub_10018756C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v33 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for RoutingMode(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(68LL);
  uint64_t v36 = v34;
  unint64_t v37 = v35;
  v10._uint64_t countAndFlagsBits = 60LL;
  v10._object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v2, 0LL);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x746E656469202D20LL;
  v12._object = (void *)0xEF203A7265696669LL;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)((char *)v0
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  unint64_t v14 = *(void **)((char *)v0
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                 + 8);
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x656C646E7562202CLL;
  v16._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v16);
  uint64_t v17 = v0[2];
  Swift::String v18 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x203A65646F6D202CLL;
  v20._object = (void *)0xE800000000000000LL;
  String.append(_:)(v20);
  unint64_t v21 = (char *)v0
      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode;
  swift_beginAccess(v21, &v34, 0LL, 0LL);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v21, v6);
  uint64_t v22 = sub_100156FEC( &qword_1003F88F0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingMode,  (uint64_t)&protocol conformance descriptor for RoutingMode);
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v22);
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v24._uint64_t countAndFlagsBits = 0x6769666E6F63202CLL;
  v24._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v24);
  uint64_t v25 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))( v5,  (uint64_t)v1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v3);
  uint64_t v26 = sub_100156FEC( &qword_1003F8EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration);
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v26);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  v28._uint64_t countAndFlagsBits = 0x7865746E6F63202CLL;
  v28._object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v28);
  uint64_t v29 = *(void *)((char *)v1
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
  swift_retain(v29);
  v30._uint64_t countAndFlagsBits = sub_100187140();
  String.append(_:)(v30);
  swift_release(v29);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 62LL;
  v31._object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  return v36;
}

uint64_t sub_100187890()
{
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration;
  uint64_t v2 = type metadata accessor for RoutingSessionConfiguration(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_release(*(void *)((char *)v0
                          + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context));
  uint64_t v3 = (char *)v0
     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode;
  uint64_t v4 = type metadata accessor for RoutingMode(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_queue));
  swift_unknownObjectRelease(*(void *)((char *)v0
                                       + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient));
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                                      + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

Swift::Int sub_100187954()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = v1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier;
  uint64_t v3 = *(void *)(v1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v4 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001879BC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(*v1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100187A10(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(*v1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100187A74()
{
  return sub_10018756C();
}

uint64_t sub_100187A94(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (void *)(*a1
                + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v4 = v3[1];
  uint64_t v5 = *(void *)(v2
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v6 = *(void *)(v2
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                 + 8);
  if (*v3 == v5 && v4 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(*v3, v4, v5, v6, 0LL);
  }
}

void *sub_100187AD0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 16);
  }

  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100187B14()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8620);
  uint64_t v1 = swift_allocObject(v0, 176LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034C4D0;
  uint64_t result = kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification;
  if (!kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification)
  {
    __break(1u);
    goto LABEL_12;
  }

  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginNowPlayingApplicationDidChangeNotification);
  *(void *)(v1 + 40) = v3;
  uint64_t result = kMRMediaRemoteOriginNowPlayingApplicationClientStateDidChange;
  if (!kMRMediaRemoteOriginNowPlayingApplicationClientStateDidChange)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v1 + 4_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginNowPlayingApplicationClientStateDidChange);
  *(void *)(v1 + 56) = v4;
  uint64_t result = kMRMediaRemoteOriginNowPlayingPlayerDidChange;
  if (!kMRMediaRemoteOriginNowPlayingPlayerDidChange)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  *(void *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginNowPlayingPlayerDidChange);
  *(void *)(v1 + 72) = v5;
  uint64_t result = kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification;
  if (!kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  *(void *)(v1 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginNowPlayingApplicationIsPlayingDidChangeNotification);
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = v6;
  uint64_t result = kMROriginNowPlayingPlaybackQueueChangedNotification;
  if (!kMROriginNowPlayingPlaybackQueueChangedNotification)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  *(void *)(v1 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMROriginNowPlayingPlaybackQueueChangedNotification);
  *(void *)(v1 + 104) = v7;
  uint64_t result = kMROriginPlaybackQueueContentItemsChangedNotification;
  if (!kMROriginPlaybackQueueContentItemsChangedNotification)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  *(void *)(v1 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMROriginPlaybackQueueContentItemsChangedNotification);
  *(void *)(v1 + 120) = v8;
  uint64_t result = kMROriginPlaybackQueueContentItemArtworkChangedNotification;
  if (!kMROriginPlaybackQueueContentItemArtworkChangedNotification)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  *(void *)(v1 + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMROriginPlaybackQueueContentItemArtworkChangedNotification);
  *(void *)(v1 + 136) = v9;
  uint64_t result = kMRMediaRemoteOriginSupportedCommandsDidChangeNotification;
  if (!kMRMediaRemoteOriginSupportedCommandsDidChangeNotification)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  *(void *)(v1 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginSupportedCommandsDidChangeNotification);
  *(void *)(v1 + 152) = v10;
  uint64_t result = kMRMediaRemoteOriginNowPlayingPlayerStateDidChange;
  if (kMRMediaRemoteOriginNowPlayingPlayerStateDidChange)
  {
    uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(kMRMediaRemoteOriginNowPlayingPlayerStateDidChange);
    *(void *)(v1 + 160) = result;
    *(void *)(v1 + 16_Block_object_dispose(va, 8) = v11;
    qword_1003FEB18 = v1;
    return result;
  }

id sub_100187C58()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8D58);
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
  uint64_t v2 = (void *)MRAVEndpointVolumeDidChangeNotification;
  uint64_t v3 = (void *)MRAVEndpointVolumeControlCapabilitiesDidChangeNotification;
  *(void *)(v1 + 32) = MRAVEndpointVolumeDidChangeNotification;
  *(void *)(v1 + 40) = v3;
  id v7 = (id)MRAVEndpointDeviceInfoDidChangeNotification;
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = MRAVEndpointDeviceInfoDidChangeNotification;
  qword_1003FEB28 = v1;
  id v4 = v2;
  id v5 = v3;
  return v7;
}

void *sub_100187CE0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 24);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyArrayStorage;
    *(void *)(v0 + 24) = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

void *sub_100187D24()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 32);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 32) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

void *sub_100187D68()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 40);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 40) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t (*sub_100187DAC(void **a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = sub_100187D68();
  return sub_100187DE0;
}

uint64_t sub_100187DE0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100187DF0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for SessionIdentifierStore();
    id v4 = sub_100175D44();
    sub_1001FD010((uint64_t)v4);
    uint64_t v2 = v5;
    uint64_t v6 = *(void *)(v0 + 48);
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = v5;
    swift_retain(v5);
    swift_release(v6);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

void *sub_100187E58()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 56);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for RoutingTimeline();
    uint64_t v2 = sub_1001F9978();
    (*(void (**)(uint64_t, _UNKNOWN **))(*v2 + 200LL))(v3, &off_1003A4998);
    uint64_t v4 = *(void *)(v3 + 56);
    *(void *)(v3 + 56) = v2;
    swift_retain(v2);
    swift_release(v4);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

uint64_t sub_100187ED8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for HostedRoutingSessionDataSource(0LL);
    uint64_t v4 = sub_100187E58();
    uint64_t v5 = sub_100187DF0();
    id v6 = sub_100175D44();
    swift_unknownObjectRetain(v3);
    uint64_t v2 = sub_100263EC4((uint64_t)v4, v5, v3, (uint64_t)&off_1003A49A8, v6);
    uint64_t v7 = *(void *)(v3 + 64);
    *(void *)(v3 + 64) = v2;
    swift_retain(v2);
    swift_release(v7);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

uint64_t sub_100187F84()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for RoutingRecommendationDataSource();
    uint64_t v4 = sub_100187E58();
    id v5 = sub_100175D44();
    swift_unknownObjectRetain(v3);
    uint64_t v2 = sub_10023A694((uint64_t)v4, v5, v3, (uint64_t)&off_1003A4988);
    uint64_t v6 = *(void *)(v3 + 72);
    *(void *)(v3 + 72) = v2;
    swift_retain(v2);
    swift_release(v6);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

void *sub_10018801C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 80);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    *(void *)(v0 + 80) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0LL);
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_100188060()
{
  uint64_t v1 = swift_allocObject(v0, 88LL, 7LL);
  sub_100188094();
  return v1;
}

void *sub_100188094()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[10] = 0LL;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  uint64_t v7 = sub_1001741A8();
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v17 = v11 + 4;
    uint64_t v13 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v18 = sub_10015ADC4(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v17, v11 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] init", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_10019344C();
  return v1;
}

uint64_t sub_100188254(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  id v135 = a6;
  uint64_t v150 = a4;
  uint64_t v151 = a5;
  id v147 = a3;
  uint64_t v148 = a1;
  uint64_t v149 = a2;
  uint64_t v134 = *v7;
  uint64_t v153 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v144 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  os_log_t v143 = (os_log_t)((char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v141 = *(void *)(v10 - 8);
  uint64_t v142 = v10;
  __chkstk_darwin(v10);
  uint64_t v140 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v137 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v145 = *(void *)(v13 - 8);
  uint64_t v146 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v133 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  id v136 = (char *)&v132 - v16;
  uint64_t v17 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v17);
  Swift::String v20 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  Swift::String v24 = (uint64_t *)((char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v25 = (void *)*sub_100216E68();
  if ((a7 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))( (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v151,  v17);
    uint64_t v81 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v82 = (v81 + 56) & ~v81;
    uint64_t v83 = (char *)swift_allocObject(&unk_1003A4588, v82 + v19, v81 | 7);
    uint64_t v84 = v152;
    uint64_t v86 = v148;
    uint64_t v85 = v149;
    *((void *)v83 + 2) = v152;
    *((void *)v83 + 3) = v86;
    unint64_t v87 = v147;
    *((void *)v83 + 4) = v85;
    *((void *)v83 + 5) = v87;
    *((void *)v83 + 6) = v150;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v83[v82], v20, v17);
    v156[3] = sub_10019F9B0;
    uint64_t v157 = v83;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v156[0] = 1107296256LL;
    v156[1] = sub_100157EA8;
    v156[2] = &unk_1003A45A0;
    uint64_t v88 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v86);
    swift_bridgeObjectRetain();
    id v89 = v25;
    uint64_t v90 = swift_retain(v84);
    uint64_t v91 = v140;
    static DispatchQoS.unspecified.getter(v90);
    uint64_t v154 = _swiftEmptyArrayStorage;
    uint64_t v92 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v93 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v94 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    os_log_t v95 = v143;
    uint64_t v96 = v153;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v93, v94, v153, v92);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v91, v95, v88);
    _Block_release(v88);

    (*(void (**)(os_log_t, uint64_t))(v144 + 8))(v95, v96);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v91, v142);
    uint64_t v97 = (uint64_t)v157;
    return swift_release(v97);
  }

  uint64_t v26 = v148;
  uint64_t v153 = v18;
  *Swift::String v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v27 = v25;
  uint64_t v28 = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v28 & 1) != 0)
  {
    uint64_t v28 = (uint64_t)sub_100187CE0();
    if (!((unint64_t)v28 >> 62))
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v30 = v26;
      swift_unknownObjectRetain(v26);
      swift_bridgeObjectRetain();
      Swift::String v31 = &qword_1003FE000;
      if (v29) {
        goto LABEL_5;
      }
LABEL_13:
      swift_unknownObjectRelease(v30);
      swift_bridgeObjectRelease_n(v28, 2LL);
      uint64_t v144 = *(void *)(v153 + 16);
      ((void (*)(char *, uint64_t, uint64_t))v144)(v20, v151, v17);
      uint64_t v39 = type metadata accessor for RoutingSessionServer.Client(0LL);
      uint64_t v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
      uint64_t v41 = v40
          + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode;
      uint64_t v42 = enum case for RoutingMode.disabled(_:);
      uint64_t v43 = type metadata accessor for RoutingMode(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104LL))(v41, v42, v43);
      unint64_t v44 = (uint64_t *)(v40
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
      swift_unknownObjectRetain(v30);
      swift_bridgeObjectRetain();
      os_log_t v143 = (os_log_t)v135;
      uint64_t v45 = sub_1001A8998();
      uint64_t v47 = v46;
      *unint64_t v44 = v45;
      v44[1] = v46;
      uint64_t v48 = type metadata accessor for RoutingSessionServer.Client.Context(0LL);
      uint64_t v49 = swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      *(_BYTE *)(v49 + swift_weakDestroy(v0 + 16) = 0;
      *(void *)(v49 + 24) = &_swiftEmptySetSingleton;
      uint64_t v50 = v49
          + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
      uint64_t v51 = type metadata accessor for RoutingInteraction(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v50, 1LL, 1LL, v51);
      *(_BYTE *)(v49
               + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering) = 0;
      *(void *)(v49
                + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation) = &_swiftEmptySetSingleton;
      *(void *)(v49
                + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer) = 0LL;
      uint64_t v52 = (uint64_t *)(v49
                      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_clientIdentifier);
      uint64_t *v52 = v45;
      v52[1] = v47;
      *(void *)(v40
                + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context) = v49;
      uint64_t v53 = (uint64_t *)(v40 + v31[358]);
      uint64_t v54 = v149;
      uint64_t *v53 = v26;
      v53[1] = v54;
      uint64_t v55 = v150;
      *(void *)(v40 + swift_weakDestroy(v0 + 16) = v147;
      *(void *)(v40 + 24) = v55;
      (*(void (**)(uint64_t, char *, uint64_t))(v153 + 32))( v40 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v20,  v17);
      *(void *)(v40
                + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_queue) = v143;
      swift_bridgeObjectRetain();
      swift_retain(v40);
      uint64_t v56 = v152;
      uint64_t aBlock = (uint64_t)sub_100187CE0();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v58 = *(void *)((aBlock & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v57 = *(void *)((aBlock & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v58 >= v57 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1LL);
      }
      uint64_t v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v40);
      specialized Array._endMutation()(v59);
      *(void *)(v56 + 24) = aBlock;
      swift_bridgeObjectRelease();
      uint64_t v60 = sub_1001741A8();
      uint64_t v61 = v40;
      uint64_t v62 = v145;
      uint64_t v63 = v146;
      id v64 = v136;
      (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v136, v60, v146);
      swift_unknownObjectRetain_n(v26, 2LL);
      uint64_t v65 = swift_retain_n(v61, 2LL);
      uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.default.getter();
      LODWORD(v150) = v67;
      BOOL v68 = os_log_type_enabled(v66, v67);
      uint64_t v142 = v61;
      if (v68)
      {
        uint64_t v69 = swift_slowAlloc(32LL, -1LL);
        id v147 = (void *)swift_slowAlloc(96LL, -1LL);
        uint64_t v154 = v147;
        *(_DWORD *)uint64_t v69 = 136315650;
        os_log_t v143 = v66;
        uint64_t v70 = _typeName(_:qualified:)(v134, 0LL);
        uint64_t aBlock = sub_10015ADC4(v70, v71, (uint64_t *)&v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v69 + 4, v69 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 12) = 2080;
        uint64_t aBlock = v26;
        v156[0] = v149;
        swift_unknownObjectRetain(v26);
        uint64_t v72 = sub_100156B68(&qword_1003F8E60);
        uint64_t v73 = String.init<A>(describing:)(&aBlock, v72);
        uint64_t aBlock = sub_10015ADC4(v73, v74, (uint64_t *)&v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v69 + 14, v69 + 22);
        swift_unknownObjectRelease_n(v26, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 22) = 2080;
        swift_retain(v61);
        uint64_t v75 = sub_10018756C();
        unint64_t v77 = v76;
        swift_release(v61);
        uint64_t aBlock = sub_10015ADC4(v75, v77, (uint64_t *)&v154);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v69 + 24, v69 + 32);
        swift_release_n(v61, 2LL);
        swift_bridgeObjectRelease();
        os_log_t v78 = v143;
        _os_log_impl( (void *)&_mh_execute_header,  v143,  (os_log_type_t)v150,  "[%s] registerClient - client: %s - %s",  (uint8_t *)v69,  0x20u);
        uint64_t v79 = v147;
        swift_arrayDestroy(v147, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v79, -1LL, -1LL);
        swift_slowDealloc(v69, -1LL, -1LL);

        uint64_t v80 = (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v64, v146);
      }

      else
      {

        swift_release_n(v61, 2LL);
        swift_unknownObjectRelease_n(v26, 2LL);
        uint64_t v80 = (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v64, v63);
      }

      id v98 = v137;
      RoutingSessionConfiguration.context.getter(v80);
      uint64_t v99 = v138;
      uint64_t v100 = v139;
      int v101 = (*(uint64_t (**)(char *, uint64_t))(v138 + 88))(v98, v139);
      unint64_t v102 = (uint64_t (*)(char *, uint64_t, uint64_t))v144;
      if (v101 == enum case for RoutingSessionConfiguration.Context.app(_:))
      {
        (*(void (**)(char *, uint64_t))(v99 + 96))(v98, v100);
        swift_bridgeObjectRelease();
      }

      else if (v101 != enum case for RoutingSessionConfiguration.Context.ui(_:))
      {
        (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
LABEL_26:
        uint64_t v120 = (uint64_t)sub_100187CE0();
        uint64_t v121 = v120;
        uint64_t aBlock = (uint64_t)&_swiftEmptySetSingleton;
        if ((unint64_t)v120 >> 62)
        {
          if (v120 < 0) {
            uint64_t v129 = v120;
          }
          else {
            uint64_t v129 = v120 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain();
          uint64_t result = _CocoaArrayWrapper.endIndex.getter(v129);
          uint64_t v122 = result;
          if (result) {
            goto LABEL_28;
          }
        }

        else
        {
          uint64_t v122 = *(void *)((v120 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          uint64_t result = swift_bridgeObjectRetain();
          if (v122)
          {
LABEL_28:
            if (v122 < 1)
            {
              __break(1u);
              return result;
            }

            uint64_t v123 = 0LL;
            do
            {
              if ((v121 & 0xC000000000000001LL) != 0)
              {
                uint64_t v124 = specialized _ArrayBuffer._getElementSlowPath(_:)(v123, v121);
              }

              else
              {
                uint64_t v124 = *(void *)(v121 + 8 * v123 + 32);
                swift_retain(v124);
              }

              ++v123;
              uint64_t v125 = v102( v20,  v124 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v17);
              uint64_t v126 = RoutingSessionConfiguration.itemTypes.getter(v125);
              (*(void (**)(char *, uint64_t))(v153 + 8))(v20, v17);
              sub_100194A1C(v126);
              swift_release(v124);
            }

            while (v122 != v123);
            swift_bridgeObjectRelease_n(v121, 2LL);
            uint64_t v127 = (void *)aBlock;
            goto LABEL_48;
          }
        }

        swift_bridgeObjectRelease_n(v121, 2LL);
        uint64_t v127 = &_swiftEmptySetSingleton;
LABEL_48:
        uint64_t v130 = sub_100187ED8();
        (*(void (**)(void *))(*(void *)v130 + 648LL))(v127);
        swift_bridgeObjectRelease();
        swift_release(v130);
        uint64_t v131 = v142;
        sub_100194C40(v142);
        uint64_t v97 = v131;
        return swift_release(v97);
      }

      uint64_t v103 = sub_100187F84();
      (*(void (**)(uint64_t))(*(void *)v103 + 280LL))(v103);
      swift_release(v103);
      goto LABEL_26;
    }
  }

  else
  {
LABEL_37:
    __break(1u);
  }

  if (v28 < 0) {
    uint64_t v128 = v28;
  }
  else {
    uint64_t v128 = v28 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v30 = v26;
  swift_unknownObjectRetain(v26);
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v128);
  Swift::String v31 = &qword_1003FE000;
  if (!v29) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v32 = 4LL;
  while (1)
  {
    uint64_t v33 = v32 - 4;
    if ((v28 & 0xC000000000000001LL) != 0)
    {
      uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32 - 4, v28);
      BOOL v35 = __OFADD__(v33, 1LL);
      uint64_t v36 = v32 - 3;
      if (v35) {
        goto LABEL_36;
      }
    }

    else
    {
      uint64_t v34 = swift_retain(*(void *)(v28 + 8 * v32));
      BOOL v35 = __OFADD__(v33, 1LL);
      uint64_t v36 = v32 - 3;
      if (v35)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }

    uint64_t v37 = *(void *)(v34 + v31[358]);
    swift_release(v34);
    BOOL v38 = v37 == v26;
    uint64_t v30 = v26;
    if (v38) {
      break;
    }
    ++v32;
    if (v36 == v29) {
      goto LABEL_13;
    }
  }

  swift_unknownObjectRelease(v26);
  swift_bridgeObjectRelease_n(v28, 2LL);
  uint64_t v104 = sub_1001741A8();
  uint64_t v105 = v145;
  id v106 = v133;
  uint64_t v107 = v30;
  uint64_t v108 = v146;
  (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v133, v104, v146);
  uint64_t v109 = swift_unknownObjectRetain_n(v107, 2LL);
  uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
  os_log_type_t v111 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v110, v111))
  {
    uint64_t v112 = swift_slowAlloc(22LL, -1LL);
    uint64_t v113 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v154 = v113;
    *(_DWORD *)uint64_t v112 = 136315394;
    uint64_t v114 = _typeName(_:qualified:)(v134, 0LL);
    uint64_t aBlock = sub_10015ADC4(v114, v115, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v112 + 4, v112 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2080;
    uint64_t aBlock = v107;
    v156[0] = v149;
    swift_unknownObjectRetain(v107);
    uint64_t v116 = sub_100156B68(&qword_1003F8E60);
    uint64_t v117 = String.init<A>(describing:)(&aBlock, v116);
    uint64_t aBlock = sub_10015ADC4(v117, v118, (uint64_t *)&v154);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v112 + 14, v112 + 22);
    swift_unknownObjectRelease_n(v107, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "[%s] registerClient - Client already registered: %s",  (uint8_t *)v112,  0x16u);
    swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1LL, -1LL);
    swift_slowDealloc(v112, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v133, v108);
  }

  else
  {

    swift_unknownObjectRelease_n(v107, 2LL);
    return (*(uint64_t (**)(char *, uint64_t))(v105 + 8))(v106, v108);
  }

uint64_t sub_100188F98(int64_t a1, uint64_t a2, int a3)
{
  LODWORD(v213) = a3;
  uint64_t v209 = a2;
  uint64_t v200 = *v3;
  uint64_t v5 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v211 = *(void *)(v5 - 8);
  uint64_t v212 = v5;
  __chkstk_darwin(v5);
  uint64_t v210 = (char *)&v177 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v206 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v204 = *(void *)(v206 - 8);
  __chkstk_darwin(v206);
  uint64_t v8 = (char *)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v205 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v203 = *(void *)(v205 - 8);
  __chkstk_darwin(v205);
  uint64_t v10 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = type metadata accessor for DispatchTime(0LL);
  uint64_t v183 = *(void *)(v195 - 8);
  uint64_t v11 = __chkstk_darwin(v195);
  v191 = (char *)&v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  os_log_type_t v192 = (char *)&v177 - v13;
  uint64_t v187 = sub_100156B68(&qword_1003F8E68);
  uint64_t v186 = *(void *)(v187 - 8);
  __chkstk_darwin(v187);
  uint64_t v182 = (uint64_t)&v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100156B68(&qword_1003F8E70);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v181 = (uint64_t)&v177 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  int v185 = (uint64_t *)((char *)&v177 - v18);
  uint64_t v193 = sub_100156B68(&qword_1003F8E78);
  uint64_t v188 = *(void *)(v193 - 8);
  uint64_t v19 = __chkstk_darwin(v193);
  uint64_t v190 = (uint64_t *)((char *)&v177 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v184 = (uint64_t *)((char *)&v177 - v22);
  uint64_t v189 = v23;
  __chkstk_darwin(v21);
  uint64_t v194 = (uint64_t *)((char *)&v177 - v24);
  uint64_t v25 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v25);
  uint64_t v199 = (uint64_t)&v177 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v197 = *(void *)(v198 - 8);
  __chkstk_darwin(v198);
  uint64_t v196 = (uint64_t)&v177 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100156B68(&qword_1003F8E80);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for Logger(0LL);
  uint64_t v207 = *(void *)(v31 - 8);
  id v208 = (id)v31;
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v202 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32);
  BOOL v35 = (char *)&v177 - v34;
  int64_t v36 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v39 = (os_log_t *)((char *)&v177 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v40 = sub_100216E68();
  uint64_t v41 = (void *)*v40;
  if ((v213 & 1) == 0)
  {
    uint64_t v66 = (void *)swift_allocObject(&unk_1003A45D8, 40LL, 7LL);
    v66[2] = v3;
    v66[3] = a1;
    v66[4] = v209;
    uint64_t v218 = sub_10019FABC;
    uint64_t v219 = v66;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v216 = sub_100157EA8;
    Swift::String v217 = &unk_1003A45F0;
    os_log_type_t v67 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(a1);
    id v68 = v41;
    uint64_t v69 = swift_retain(v3);
    static DispatchQoS.unspecified.getter(v69);
    Swift::String v214 = (char *)_swiftEmptyArrayStorage;
    uint64_t v70 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v71 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v72 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v73 = v71;
    uint64_t v74 = v206;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v214, v73, v72, v206, v70);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v8, v67);
    _Block_release(v67);

    (*(void (**)(char *, uint64_t))(v204 + 8))(v8, v74);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v10, v205);
    uint64_t v75 = (uint64_t)v219;
    return swift_release(v75);
  }

  int v180 = v35;
  uint64_t v42 = v209;
  uint64_t v178 = (id *)v40;
  Swift::String v213 = v10;
  uint64_t v179 = v8;
  uint64_t v201 = v3;
  *uint64_t v39 = v41;
  (*(void (**)(void *, void, int64_t))(v37 + 104))( v39,  enum case for DispatchPredicate.onQueue(_:),  v36);
  id v43 = v41;
  char v44 = _dispatchPreconditionTest(_:)(v39);
  (*(void (**)(void *, int64_t))(v37 + 8))(v39, v36);
  if ((v44 & 1) == 0) {
    goto LABEL_62;
  }
  int64_t v36 = (int64_t)sub_100187CE0();
  if ((unint64_t)v36 >> 62)
  {
LABEL_63:
    if (v36 < 0) {
      uint64_t v174 = v36;
    }
    else {
      uint64_t v174 = v36 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_unknownObjectRetain(a1);
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter(v174);
    uint64_t v46 = v42;
    if (v45) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(a1);
    uint64_t v51 = sub_1001741A8();
    uint64_t v53 = v207;
    id v52 = v208;
    uint64_t v54 = v202;
    (*(void (**)(char *, uint64_t, id))(v207 + 16))(v202, v51, v208);
    uint64_t v55 = swift_unknownObjectRetain_n(a1, 2LL);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc(22LL, -1LL);
      uint64_t v59 = (char *)swift_slowAlloc(64LL, -1LL);
      Swift::String v214 = v59;
      *(_DWORD *)uint64_t v58 = 136315394;
      uint64_t v60 = _typeName(_:qualified:)(v200, 0LL);
      *(void *)&__int128 aBlock = sub_10015ADC4(v60, v61, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2080;
      *(void *)&__int128 aBlock = a1;
      *((void *)&aBlock + 1) = v46;
      swift_unknownObjectRetain(a1);
      uint64_t v62 = sub_100156B68(&qword_1003F8E60);
      uint64_t v63 = String.init<A>(describing:)(&aBlock, v62);
      *(void *)&__int128 aBlock = sub_10015ADC4(v63, v64, (uint64_t *)&v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v58 + 14, v58 + 22);
      swift_unknownObjectRelease_n(a1, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "[%s] unregisterClient - No internal client found matching client: %s",  (uint8_t *)v58,  0x16u);
      swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);

      return (*(uint64_t (**)(char *, id))(v53 + 8))(v202, v52);
    }

    else
    {

      swift_unknownObjectRelease_n(a1, 2LL);
      return (*(uint64_t (**)(char *, id))(v53 + 8))(v54, v52);
    }
  }

  uint64_t v45 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_unknownObjectRetain(a1);
  uint64_t v46 = v42;
  if (!v45) {
    goto LABEL_12;
  }
LABEL_5:
  unint64_t v47 = 0LL;
  while (1)
  {
    uint64_t v48 = (v36 & 0xC000000000000001LL) != 0
        ? specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v36)
        : swift_retain(*(void *)(v36 + 8 * v47 + 32));
    uint64_t v49 = *(void *)(v48
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
    swift_release(v48);
    if (v49 == a1) {
      break;
    }
    unint64_t v50 = v47 + 1;
    if (__OFADD__(v47, 1LL))
    {
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }

    ++v47;
    uint64_t v46 = v42;
    if (v50 == v45) {
      goto LABEL_12;
    }
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(a1);
  unint64_t v76 = v201;
  *(void *)&__int128 aBlock = sub_100187CE0();
  uint64_t v77 = sub_10018A300(v47);
  v76[3] = aBlock;
  swift_bridgeObjectRelease();
  uint64_t v78 = sub_1001741A8();
  uint64_t v80 = v207;
  id v79 = v208;
  uint64_t v81 = v180;
  (*(void (**)(char *, uint64_t, id))(v207 + 16))(v180, v78, v208);
  uint64_t v82 = swift_retain_n(v77, 4LL);
  uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = swift_slowAlloc(32LL, -1LL);
    uint64_t v202 = (char *)swift_slowAlloc(96LL, -1LL);
    Swift::String v214 = v202;
    *(_DWORD *)uint64_t v85 = 136315650;
    os_log_t v177 = v83;
    uint64_t v86 = _typeName(_:qualified:)(v200, 0LL);
    *(void *)&__int128 aBlock = sub_10015ADC4(v86, v87, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2080;
    __int128 aBlock = *(_OWORD *)(v77
                       + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
    swift_unknownObjectRetain(aBlock);
    uint64_t v88 = sub_100156B68(&qword_1003F8E60);
    uint64_t v89 = String.init<A>(describing:)(&aBlock, v88);
    *(void *)&__int128 aBlock = sub_10015ADC4(v89, v90, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v85 + 14, v85 + 22);
    swift_release_n(v77, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 22) = 2080;
    swift_retain(v77);
    uint64_t v91 = sub_10018756C();
    unint64_t v93 = v92;
    swift_release(v77);
    *(void *)&__int128 aBlock = sub_10015ADC4(v91, v93, (uint64_t *)&v214);
    uint64_t v94 = v201;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v85 + 24, v85 + 32);
    swift_release_n(v77, 2LL);
    swift_bridgeObjectRelease();
    os_log_t v95 = v177;
    _os_log_impl( (void *)&_mh_execute_header,  v177,  v84,  "[%s] unregisterClient - client: %s - %s",  (uint8_t *)v85,  0x20u);
    uint64_t v96 = v202;
    swift_arrayDestroy(v202, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1LL, -1LL);
    uint64_t v97 = v85;
    unint64_t v76 = v94;
    swift_slowDealloc(v97, -1LL, -1LL);

    (*(void (**)(char *, id))(v207 + 8))(v81, v208);
  }

  else
  {

    swift_release_n(v77, 4LL);
    (*(void (**)(char *, id))(v80 + 8))(v81, v79);
  }

  id v98 = v213;
  *(void *)&__int128 aBlock = sub_100187D68();
  uint64_t v42 = sub_1001A0604(v77);
  v76[5] = aBlock;
  swift_bridgeObjectRelease();
  uint64_t v209 = v77;
  if (!v42)
  {
LABEL_43:
    *(void *)&__int128 aBlock = sub_100187D24();
    uint64_t v117 = v199;
    sub_1001A03A8(v77, v199);
    v76[4] = aBlock;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v117, 1LL, v198) == 1)
    {
      sub_1001603DC(v117, &qword_1003FD0B0);
    }

    else
    {
      uint64_t v118 = v196;
      uint64_t v119 = sub_1001A81D4(v117, v196, type metadata accessor for HostedRoutingSessionSnapshot);
      if (MSVDeviceOSIsInternalInstall(v119))
      {
        uint64_t v121 = *(void *)(v77 + 16);
        uint64_t v120 = *(void *)(v77 + 24);
        uint64_t v122 = v193;
        uint64_t v123 = *(int *)(v193 + 48);
        uint64_t v124 = v194;
        uint64_t v125 = (uint64_t)v194 + v123;
        uint64_t *v194 = v77;
        sub_1001A80F8(v118, (uint64_t)v124 + v123, type metadata accessor for HostedRoutingSessionSnapshot);
        uint64_t v126 = *(int *)(v122 + 48);
        uint64_t v127 = v184;
        uint64_t v128 = (uint64_t)v184 + v126;
        *uint64_t v184 = v77;
        sub_1001A80F8(v125, (uint64_t)v127 + v126, type metadata accessor for HostedRoutingSessionSnapshot);
        uint64_t v129 = v76;
        uint64_t v130 = v187;
        uint64_t v131 = (uint64_t)v185;
        uint64_t v132 = (uint64_t)v185 + *(int *)(v187 + 48);
        *int v185 = v77;
        sub_1001A81D4(v128, v132, type metadata accessor for HostedRoutingSessionSnapshot);
        uint64_t v133 = v186;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v186 + 56))(v131, 0LL, 1LL, v130);
        swift_retain_n(v77, 2LL);
        swift_bridgeObjectRetain_n(v120, 2LL);
        uint64_t v134 = v129;
        id v135 = (char *)sub_10018801C();
        *(void *)&__int128 aBlock = v135;
        int v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v131, 1LL, v130);
        uint64_t v137 = v77;
        if (v136 == 1)
        {
          sub_1001603DC(v131, &qword_1003F8E70);
          uint64_t v138 = v181;
          sub_1001A04CC(v121, v120, v181);
          swift_bridgeObjectRelease();
          sub_1001603DC(v138, &qword_1003F8E70);
          uint64_t v139 = (char *)aBlock;
        }

        else
        {
          uint64_t v140 = v182;
          sub_1001A78A0(v131, v182, &qword_1003F8E68);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v135);
          Swift::String v214 = v135;
          sub_1001A1F70(v140, v121, v120, isUniquelyReferenced_nonNull_native);
          uint64_t v139 = v214;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        uint64_t v142 = v183;
        os_log_t v143 = v134;
        v134[10] = v139;
        swift_bridgeObjectRelease();
        id v208 = *v178;
        uint64_t v144 = v191;
        static DispatchTime.now()();
        uint64_t v145 = v192;
        + infix(_:_:)(v144, 300.0);
        Swift::String v213 = *(char **)(v142 + 8);
        ((void (*)(char *, uint64_t))v213)(v144, v195);
        uint64_t v146 = swift_allocObject(&unk_1003A4628, 24LL, 7LL);
        swift_weakInit(v146 + 16, v143);
        uint64_t v147 = (uint64_t)v190;
        uint64_t v148 = (uint64_t)v190 + *(int *)(v193 + 48);
        uint64_t *v190 = v137;
        sub_1001A80F8(v125, v148, type metadata accessor for HostedRoutingSessionSnapshot);
        uint64_t v149 = *(unsigned __int8 *)(v188 + 80);
        uint64_t v150 = (v149 + 40) & ~v149;
        uint64_t v151 = (void *)swift_allocObject(&unk_1003A4650, v150 + v189, v149 | 7);
        v151[2] = v146;
        v151[3] = v121;
        v151[4] = v120;
        sub_1001A78A0(v147, (uint64_t)v151 + v150, &qword_1003F8E78);
        uint64_t v218 = sub_1001A092C;
        uint64_t v219 = v151;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256LL;
        uint64_t v216 = sub_100157EA8;
        Swift::String v217 = &unk_1003A4668;
        uint64_t v152 = _Block_copy(&aBlock);
        swift_retain(v137);
        uint64_t v153 = swift_retain(v146);
        static DispatchQoS.unspecified.getter(v153);
        Swift::String v214 = (char *)_swiftEmptyArrayStorage;
        uint64_t v154 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v155 = v98;
        uint64_t v156 = sub_100156B68((uint64_t *)&unk_1003F9A70);
        uint64_t v157 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v158 = v179;
        uint64_t v159 = v156;
        uint64_t v160 = v206;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v214, v159, v157, v206, v154);
        unint64_t v161 = v208;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v145, v155, v158, v152);
        _Block_release(v152);

        (*(void (**)(char *, uint64_t))(v204 + 8))(v158, v160);
        (*(void (**)(char *, uint64_t))(v203 + 8))(v155, v205);
        ((void (*)(char *, uint64_t))v213)(v145, v195);
        sub_1001603DC((uint64_t)v194, &qword_1003F8E78);
        sub_1001A813C(v196, type metadata accessor for HostedRoutingSessionSnapshot);
        uint64_t v162 = v219;
        uint64_t v163 = v146;
        uint64_t v77 = v137;
        swift_release(v163);
        swift_release(v162);
      }

      else
      {
        sub_1001A813C(v118, type metadata accessor for HostedRoutingSessionSnapshot);
      }
    }

    unint64_t v164 = (unint64_t)sub_100187CE0();
    int64_t v36 = v164;
    *(void *)&__int128 aBlock = &_swiftEmptySetSingleton;
    if (v164 >> 62) {
      goto LABEL_69;
    }
    uint64_t v165 = *(void *)((v164 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v165) {
      goto LABEL_53;
    }
LABEL_73:
    swift_bridgeObjectRelease_n(v36, 2LL);
    uint64_t v173 = &_swiftEmptySetSingleton;
LABEL_74:
    uint64_t v176 = sub_100187ED8();
    (*(void (**)(void *))(*(void *)v176 + 648LL))(v173);
    swift_bridgeObjectRelease();
    swift_release(v176);
    sub_100193B84();
    uint64_t v75 = v77;
    return swift_release(v75);
  }

  int64_t v99 = 0LL;
  uint64_t v77 = v42 + 64;
  uint64_t v100 = 1LL << *(_BYTE *)(v42 + 32);
  uint64_t v101 = -1LL;
  if (v100 < 64) {
    uint64_t v101 = ~(-1LL << v100);
  }
  int64_t v36 = v101 & *(void *)(v42 + 64);
  a1 = (unint64_t)(v100 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      unint64_t v102 = __clz(__rbit64(v36));
      v36 &= v36 - 1;
      unint64_t v103 = v102 | (v99 << 6);
      goto LABEL_24;
    }

    int64_t v114 = v99 + 1;
    if (__OFADD__(v99, 1LL)) {
      goto LABEL_61;
    }
    if (v114 >= a1)
    {
LABEL_42:
      swift_release(v42);
      unint64_t v76 = v201;
      uint64_t v77 = v209;
      goto LABEL_43;
    }

    unint64_t v115 = *(void *)(v77 + 8 * v114);
    ++v99;
    if (!v115)
    {
      int64_t v99 = v114 + 1;
      if (v114 + 1 >= a1) {
        goto LABEL_42;
      }
      unint64_t v115 = *(void *)(v77 + 8 * v99);
      if (!v115)
      {
        int64_t v99 = v114 + 2;
        if (v114 + 2 >= a1) {
          goto LABEL_42;
        }
        unint64_t v115 = *(void *)(v77 + 8 * v99);
        if (!v115)
        {
          int64_t v99 = v114 + 3;
          if (v114 + 3 >= a1) {
            goto LABEL_42;
          }
          unint64_t v115 = *(void *)(v77 + 8 * v99);
          if (!v115) {
            break;
          }
        }
      }
    }

uint64_t sub_10018A300(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t v3 = sub_1001A3618(v3);
    *uint64_t v1 = v3;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      uint64_t v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }

  char v13 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v13,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10018A3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v60 = a4;
  uint64_t v7 = sub_100156B68(&qword_1003F8E78);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100156B68(&qword_1003F8E70);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v58 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v59 = (char *)&v55 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v55 - v15);
  uint64_t v17 = sub_100156B68(&qword_1003F8E68);
  uint64_t v18 = *(void **)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (uint64_t *)((char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v19);
  unint64_t v61 = (uint64_t *)((char *)&v55 - v22);
  a1 += 16LL;
  swift_beginAccess(a1, v64, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v24 = result;
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_10018801C();
    uint64_t v26 = v25[2];
    uint64_t v57 = a2;
    if (v26 && (unint64_t v27 = sub_10015CAD4(a2, a3), (v28 & 1) != 0))
    {
      sub_1001A8360(v25[7] + v18[9] * v27, (uint64_t)v16, &qword_1003F8E68);
      uint64_t v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[7];
      uint64_t v30 = v16;
      uint64_t v31 = 0LL;
    }

    else
    {
      uint64_t v29 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[7];
      uint64_t v30 = v16;
      uint64_t v31 = 1LL;
    }

    uint64_t v56 = v29;
    v29((char *)v30, v31, 1LL, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v18[6];
    if (v32((uint64_t)v16, 1LL, v17) == 1)
    {
      swift_release(v24);
      uint64_t v33 = &qword_1003F8E70;
      uint64_t v34 = (uint64_t)v16;
    }

    else
    {
      uint64_t v55 = a3;
      uint64_t v35 = *(int *)(v17 + 48);
      int64_t v36 = v61;
      uint64_t v37 = (uint64_t)v61 + v35;
      uint64_t v38 = (uint64_t)v16 + v35;
      uint64_t v39 = *v16;
      uint64_t *v61 = v39;
      sub_1001A81D4(v38, (uint64_t)v36 + v35, type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v40 = (uint64_t)v21 + *(int *)(v17 + 48);
      uint64_t *v21 = v39;
      sub_1001A80F8(v37, v40, type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v41 = *(int *)(v7 + 48);
      uint64_t v42 = (uint64_t)v9 + v41;
      uint64_t v43 = (uint64_t)v60 + v41;
      uint64_t v44 = *v60;
      *uint64_t v9 = *v60;
      sub_1001A80F8(v43, (uint64_t)v9 + v41, type metadata accessor for HostedRoutingSessionSnapshot);
      swift_retain(v39);
      swift_retain(v44);
      char v45 = sub_10018A818(v39, v40, v44, v42);
      swift_release(v39);
      swift_release(v44);
      sub_1001A813C(v42, type metadata accessor for HostedRoutingSessionSnapshot);
      sub_1001A813C(v40, type metadata accessor for HostedRoutingSessionSnapshot);
      if ((v45 & 1) == 0)
      {
        sub_1001603DC((uint64_t)v61, &qword_1003F8E68);
        return swift_release(v24);
      }

      uint64_t v46 = (uint64_t)v59;
      v56(v59, 1LL, 1LL, v17);
      uint64_t v47 = v55;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_10018801C();
      uint64_t v63 = v48;
      int v49 = v32(v46, 1LL, v17);
      uint64_t v50 = v57;
      uint64_t v51 = v61;
      if (v49 == 1)
      {
        sub_1001603DC(v46, &qword_1003F8E70);
        uint64_t v52 = v58;
        sub_1001A04CC(v50, v47, v58);
        swift_bridgeObjectRelease();
        sub_1001603DC(v52, &qword_1003F8E70);
        uint64_t v53 = v63;
      }

      else
      {
        sub_1001A78A0(v46, (uint64_t)v21, &qword_1003F8E68);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v48);
        uint64_t v62 = v48;
        sub_1001A1F70((uint64_t)v21, v50, v47, isUniquelyReferenced_nonNull_native);
        uint64_t v53 = v62;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      *(void *)(v24 + 80) = v53;
      swift_release(v24);
      swift_bridgeObjectRelease();
      uint64_t v33 = &qword_1003F8E68;
      uint64_t v34 = (uint64_t)v51;
    }

    return sub_1001603DC(v34, v33);
  }

  return result;
}

uint64_t sub_10018A818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100156B68(&qword_1003F8E78);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v26 - v13;
  *(uint64_t *)((char *)&v26 - v13) = a1;
  uint64_t v15 = (char *)&v26 + *(int *)(v12 + 48) - v13;
  sub_1001A80F8(a2, (uint64_t)v15, type metadata accessor for HostedRoutingSessionSnapshot);
  *uint64_t v11 = a3;
  uint64_t v16 = (uint64_t)v11 + *(int *)(v8 + 48);
  sub_1001A80F8(a4, v16, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v17 = *(void *)(a1
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v18 = *(void *)(a1
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                  + 8);
  uint64_t v19 = *(void *)(a3
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v20 = *(void *)(a3
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                  + 8);
  BOOL v21 = v17 == v19 && v18 == v20;
  if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0LL) & 1) != 0)
  {
    uint64_t v22 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
    uint64_t v23 = sub_100156FEC( &qword_1003F9498,  type metadata accessor for HostedRoutingSessionSnapshot,  (uint64_t)&unk_1003504D0);
    swift_retain(a1);
    swift_retain(a3);
    char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v16, v22, v23);
  }

  else
  {
    swift_retain(a1);
    swift_retain(a3);
    char v24 = 0;
  }

  sub_1001603DC((uint64_t)v11, &qword_1003F8E78);
  sub_1001603DC((uint64_t)v14, &qword_1003F8E78);
  return v24 & 1;
}

uint64_t sub_10018A9C0( uint64_t a1, uint64_t a2, void (*a3)(void, void, void), uint64_t a4, int a5)
{
  unint64_t v6 = v5;
  LODWORD(ObjectType) = a5;
  uint64_t v321 = a4;
  v326 = a3;
  uint64_t v327 = a2;
  uint64_t v324 = a1;
  uint64_t v313 = *v5;
  uint64_t v7 = sub_100156B68(&qword_1003F8E98);
  uint64_t v8 = __chkstk_darwin(v7);
  v274 = (char *)v271 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v273 = (char *)v271 - v11;
  __chkstk_darwin(v10);
  uint64_t v279 = (uint64_t)v271 - v12;
  uint64_t v272 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v272);
  uint64_t v288 = (uint64_t)v271 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v298 = type metadata accessor for HostedRoutingError(0LL);
  __chkstk_darwin(v298);
  v302 = (char *)v271 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v301 = type metadata accessor for InternalRoutingError(0LL);
  uint64_t v290 = *(void *)(v301 - 8);
  __chkstk_darwin(v301);
  v310 = (void (*)(char *, uint64_t))((char *)v271 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  unint64_t v319 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v317 = *(void *)(v19 - 8);
  v318 = (void (*)(char *, uint64_t, uint64_t))v19;
  __chkstk_darwin(v19);
  BOOL v21 = (char *)v271 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100156B68(&qword_1003F8EA0);
  __chkstk_darwin(v22);
  v282 = (char *)v271 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v287 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v294 = *(void *)(v287 - 8);
  __chkstk_darwin(v287);
  v286 = (char *)v271 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v284 = type metadata accessor for RoutingDialog(0LL);
  uint64_t v283 = *(void *)(v284 - 8);
  __chkstk_darwin(v284);
  uint64_t v281 = (uint64_t)v271 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for Logger(0LL);
  unint64_t v27 = *(void (***)(char *, uint64_t, uint64_t))(v26 - 8);
  uint64_t v322 = v26;
  v323 = v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v299 = (char *)v271 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v275 = (char *)v271 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v271[1] = (char *)v271 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v285 = (char *)v271 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  v320 = (char *)v271 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  v306 = (char *)v271 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  v277 = (char *)v271 - v41;
  __chkstk_darwin(v40);
  v303 = (char *)v271 - v42;
  uint64_t v297 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v296 = *(void *)(v297 - 8);
  uint64_t v43 = __chkstk_darwin(v297);
  v280 = (char *)v271 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v278 = v44;
  __chkstk_darwin(v43);
  v304 = (void *)((char *)v271 - v45);
  uint64_t v307 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v305 = *(void *)(v307 - 8);
  uint64_t v46 = __chkstk_darwin(v307);
  v295 = (char *)v271 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = __chkstk_darwin(v46);
  v293 = (char *)v271 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v300 = (char *)v271 - v51;
  uint64_t v291 = v52;
  __chkstk_darwin(v50);
  uint64_t v308 = (uint64_t)v271 - v53;
  uint64_t v54 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)v271 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v309 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v57 = *(void *)(v309 - 8);
  uint64_t v58 = __chkstk_darwin(v309);
  uint64_t v292 = (uint64_t)v271 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v58);
  uint64_t v311 = (uint64_t)v271 - v60;
  uint64_t v314 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v315 = *(void *)(v314 - 8);
  uint64_t v61 = __chkstk_darwin(v314);
  v289 = (char *)v271 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v276 = v62;
  __chkstk_darwin(v61);
  uint64_t v316 = (uint64_t)v271 - v63;
  uint64_t v64 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v65 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  os_log_type_t v67 = (void *)((char *)v271 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v68 = (void *)*sub_100216E68();
  if ((ObjectType & 1) == 0)
  {
    uint64_t v97 = (void *)swift_allocObject(&unk_1003A46A0, 56LL, 7LL);
    uint64_t v98 = v324;
    v97[2] = v6;
    v97[3] = v98;
    int64_t v99 = v326;
    v97[4] = v327;
    v97[5] = v99;
    v97[6] = v321;
    v330[3] = sub_1001A20B8;
    v331 = v97;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v330[0] = 1107296256LL;
    v330[1] = sub_100157EA8;
    v330[2] = &unk_1003A46B8;
    uint64_t v100 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v99);
    swift_bridgeObjectRetain();
    swift_retain(v6);
    id v101 = v68;
    static DispatchQoS.unspecified.getter(v101);
    v328 = _swiftEmptyArrayStorage;
    uint64_t v102 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v103 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v104 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v328, v103, v104, v16, v102);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v21, v18, v100);
    _Block_release(v100);

    (*(void (**)(char *, uint64_t))(v319 + 8))(v18, v16);
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v317 + 8))(v21, v318);
    uint64_t v105 = (uint64_t)v331;
    return swift_release(v105);
  }

  v312 = v6;
  *os_log_type_t v67 = v68;
  (*(void (**)(void *, void, uint64_t))(v65 + 104))(v67, enum case for DispatchPredicate.onQueue(_:), v64);
  id v69 = v68;
  uint64_t v70 = _dispatchPreconditionTest(_:)(v67);
  (*(void (**)(void *, uint64_t))(v65 + 8))(v67, v64);
  if ((v70 & 1) == 0)
  {
    __break(1u);
LABEL_52:
    if (v70 < 0) {
      uint64_t v270 = v70;
    }
    else {
      uint64_t v270 = v70 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v72 = v326;
    swift_unknownObjectRetain(v326);
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter(v270);
    if (v71) {
      goto LABEL_5;
    }
LABEL_13:
    swift_unknownObjectRelease(v72);
    swift_bridgeObjectRelease_n(v70, 2LL);
    uint64_t v80 = sub_1001741A8();
    uint64_t v82 = v322;
    uint64_t v81 = v323;
    uint64_t v83 = v320;
    v323[2](v320, v80, v322);
    swift_unknownObjectRetain_n(v72, 2LL);
    uint64_t v84 = (uint64_t)v72;
    unint64_t v85 = v327;
    uint64_t v86 = swift_bridgeObjectRetain_n(v327, 2LL);
    unint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = swift_slowAlloc(32LL, -1LL);
      unint64_t v90 = (void *)swift_slowAlloc(96LL, -1LL);
      v328 = v90;
      *(_DWORD *)uint64_t v89 = 136315650;
      uint64_t v91 = _typeName(_:qualified:)(v313, 0LL);
      uint64_t aBlock = sub_10015ADC4(v91, v92, (uint64_t *)&v328);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v330, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v89 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t aBlock = sub_10015ADC4(v324, v85, (uint64_t *)&v328);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v330, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease_n(v85, 3LL);
      *(_WORD *)(v89 + 22) = 2080;
      uint64_t aBlock = v84;
      v330[0] = v321;
      swift_unknownObjectRetain(v84);
      uint64_t v93 = sub_100156B68(&qword_1003F8E60);
      uint64_t v94 = String.init<A>(describing:)(&aBlock, v93);
      uint64_t aBlock = sub_10015ADC4(v94, v95, (uint64_t *)&v328);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v330, v89 + 24, v89 + 32);
      swift_unknownObjectRelease_n(v84, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "[%s] interactWithItem - item: %s, no internal client found matching client: %s",  (uint8_t *)v89,  0x20u);
      swift_arrayDestroy(v90, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);

      return ((uint64_t (*)(char *, uint64_t))v323[1])(v320, v322);
    }

    else
    {

      swift_unknownObjectRelease_n(v84, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      return ((uint64_t (*)(char *, uint64_t))v81[1])(v83, v82);
    }
  }

  uint64_t v70 = (uint64_t)sub_100187CE0();
  uint64_t v71 = *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v72 = v326;
  swift_unknownObjectRetain(v326);
  swift_bridgeObjectRetain();
  if (!v71) {
    goto LABEL_13;
  }
LABEL_5:
  unint64_t v74 = v70 & 0xC000000000000001LL;
  uint64_t ObjectType = swift_getObjectType(v72, v73);
  uint64_t v75 = 4LL;
  while (1)
  {
    uint64_t v76 = v75 - 4;
    if (v74)
    {
      uint64_t v77 = specialized _ArrayBuffer._getElementSlowPath(_:)(v75 - 4, v70);
      BOOL v78 = __OFADD__(v76, 1LL);
      uint64_t v79 = v75 - 3;
      if (v78) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v77 = *(void *)(v70 + 8 * v75);
      swift_retain(v77);
      BOOL v78 = __OFADD__(v76, 1LL);
      uint64_t v79 = v75 - 3;
      if (v78)
      {
LABEL_46:
        __break(1u);

        swift_bridgeObjectRelease_n(v72, 2LL);
        swift_bridgeObjectRelease_n(v71, 4LL);
        (*((void (**)(unint64_t, uint64_t))v56 + 1))(v74, v79);
        uint64_t v249 = v272;
        v250 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v283 + 56);
        v250(v279, 1LL, 1LL, v284);
        int v251 = *(unsigned __int8 *)(v288 + *(int *)(v249 + 36));
        uint64_t v252 = sub_100156B68(&qword_1003F8EA8);
        uint64_t v253 = *(void *)(type metadata accessor for RoutingDialog.Action(0LL) - 8);
        uint64_t v254 = *(unsigned __int8 *)(v253 + 80);
        uint64_t v255 = (v254 + 32) & ~v254;
        uint64_t v256 = swift_allocObject(v252, v255 + *(void *)(v253 + 72), v254 | 7);
        *(_OWORD *)(v256 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
        v257 = (void *)(v256 + v255);
        void *v257 = 19279LL;
        v257[1] = 0xE200000000000000LL;
        (*(void (**)(void))(v253 + 104))();
        swift_bridgeObjectRetain();
        if (v251 == 1)
        {
          unint64_t v258 = 0xD000000000000016LL;
          uint64_t v259 = "Unable to stop AirPlay";
        }

        else
        {
          unint64_t v258 = 0xD000000000000011LL;
          uint64_t v259 = "Unable to AirPlay";
        }

        uint64_t v260 = (uint64_t)v273;
        uint64_t v261 = v71;
        RoutingDialog.init(identifier:titleText:detailText:actions:)( v326,  v71,  v258,  (unint64_t)(v259 - 32) | 0x8000000000000000LL,  0xD00000000000003FLL,  0x800000010033B030LL,  v256);
        uint64_t v262 = v313;
        uint64_t v263 = (uint64_t)v274;
        uint64_t v264 = v279;
        sub_1001603DC(v279, &qword_1003F8E98);
        uint64_t v265 = v284;
        v250(v260, 0LL, 1LL, v284);
        sub_1001A78A0(v260, v264, &qword_1003F8E98);
        sub_1001A8360(v264, v263, &qword_1003F8E98);
        uint64_t v266 = v283;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v283 + 48))(v263, 1LL, v265);
        if ((_DWORD)result == 1)
        {
          __break(1u);
        }

        else
        {
          uint64_t v267 = swift_allocObject(&unk_1003A46F0, 24LL, 7LL);
          swift_weakInit(v267 + 16, v77);
          uint64_t v268 = (void *)swift_allocObject(&unk_1003A4718, 48LL, 7LL);
          uint64_t v269 = v326;
          v268[2] = v267;
          v268[3] = v269;
          v268[4] = v261;
          v268[5] = v262;
          swift_retain(v267);
          sub_10019688C(v263, v77, (uint64_t)sub_1001A2120, (uint64_t)v268);
          swift_release(v77);
          swift_release(v268);
          sub_1001603DC(v264, &qword_1003F8E98);
          sub_1001A813C(v288, type metadata accessor for HostedRoutingItem);
          sub_1001A813C(v311, type metadata accessor for HostedRoutingSessionSnapshot);
          ((void (*)(uint64_t, uint64_t))v320)(v316, v314);
          swift_release(v267);
          (*(void (**)(uint64_t, uint64_t))(v266 + 8))(v263, v265);
          return swift_errorRelease(aBlock);
        }

        return result;
      }
    }

    if (*(void (**)(void, void, void))(v77
                                                       + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == v72)
      break;
    swift_release(v77);
    ++v75;
    if (v79 == v71) {
      goto LABEL_13;
    }
  }

  swift_unknownObjectRelease(v72);
  swift_bridgeObjectRelease_n(v70, 2LL);
  id v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v315 + 16);
  uint64_t v107 = v314;
  v106( v316,  v77 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v314);
  swift_retain(v77);
  uint64_t v108 = sub_100187D24();
  if (v108[2])
  {
    unint64_t v109 = sub_1001A0A48(v77);
    if ((v110 & 1) != 0)
    {
      sub_1001A80F8( v108[7] + *(void *)(v57 + 72) * v109,  (uint64_t)v56,  type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v111 = 0LL;
    }

    else
    {
      uint64_t v111 = 1LL;
    }
  }

  else
  {
    uint64_t v111 = 1LL;
  }

  uint64_t v112 = v309;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v56, v111, 1LL, v309);
  swift_release(v77);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v56, 1LL, v112) == 1)
  {
    sub_1001603DC((uint64_t)v56, &qword_1003FD0B0);
    uint64_t v113 = sub_1001741A8();
    uint64_t v115 = v322;
    int64_t v114 = v323;
    int64_t v116 = v306;
    v323[2](v306, v113, v322);
    swift_retain_n(v77, 2LL);
    unint64_t v117 = v327;
    uint64_t v118 = swift_bridgeObjectRetain_n(v327, 2LL);
    uint64_t v119 = (void *)Logger.logObject.getter(v118);
    os_log_type_t v120 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v119, v120))
    {
      swift_bridgeObjectRelease_n(v117, 2LL);
      swift_release_n(v77, 3LL);

      ((void (*)(char *, uint64_t))v114[1])(v116, v115);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v315 + 8))(v316, v107);
    }

    uint64_t v121 = swift_slowAlloc(32LL, -1LL);
    uint64_t v122 = swift_slowAlloc(96LL, -1LL);
    uint64_t aBlock = v122;
    *(_DWORD *)uint64_t v121 = 136315650;
    uint64_t v123 = _typeName(_:qualified:)(v313, 0LL);
    v328 = (void *)sub_10015ADC4(v123, v124, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v121 + 4, v121 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v121 + 12) = 2080;
    swift_bridgeObjectRetain();
    v328 = (void *)sub_10015ADC4(v324, v117, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v121 + 14, v121 + 22);
    swift_bridgeObjectRelease_n(v117, 3LL);
    *(_WORD *)(v121 + 22) = 2080;
    swift_retain(v77);
    uint64_t v125 = sub_10018756C();
    unint64_t v127 = v126;
    swift_release(v77);
    v328 = (void *)sub_10015ADC4(v125, v127, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v121 + 24, v121 + 32);
    swift_release_n(v77, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v119,  v120,  "[%s] interactWithItem - item: %s, No snapshot for client: %s",  (uint8_t *)v121,  0x20u);
    swift_arrayDestroy(v122, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1LL, -1LL);
    swift_slowDealloc(v121, -1LL, -1LL);
    swift_release(v77);

    ((void (*)(char *, uint64_t))v323[1])(v306, v115);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v315 + 8))(v316, v314);
  }

  v320 = (char *)v106;
  uint64_t v128 = v311;
  sub_1001A81D4((uint64_t)v56, v311, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v129 = type metadata accessor for RoutingDecisionEngine();
  uint64_t v130 = v308;
  uint64_t v131 = v327;
  sub_1001A8D1C(v324, v327, v128, v316, v308);
  unint64_t v319 = v129;
  uint64_t v132 = sub_100255C60(v128, v304);
  uint64_t v133 = RoutingInteraction.identifier.getter(v132);
  unint64_t v135 = v134;
  uint64_t v136 = sub_1001741A8();
  uint64_t v137 = v323;
  uint64_t v138 = v323[2];
  uint64_t v317 = v136;
  v318 = v138;
  ((void (*)(char *))v138)(v303);
  uint64_t v139 = v300;
  uint64_t v140 = v307;
  v326 = *(void (**)(void, void, void))(v305 + 16);
  v326(v300, v130, v307);
  swift_bridgeObjectRetain_n(v135, 2LL);
  uint64_t v141 = swift_bridgeObjectRetain_n(v131, 2LL);
  uint64_t v142 = (os_log_s *)Logger.logObject.getter(v141);
  os_log_type_t v143 = static os_log_type_t.default.getter();
  int v144 = v143;
  BOOL v145 = os_log_type_enabled(v142, v143);
  uint64_t ObjectType = v135;
  uint64_t v321 = v133;
  if (v145)
  {
    unint64_t v146 = v131;
    uint64_t v147 = swift_slowAlloc(42LL, -1LL);
    uint64_t v148 = swift_slowAlloc(128LL, -1LL);
    uint64_t aBlock = v148;
    *(_DWORD *)uint64_t v147 = 136315906;
    LODWORD(v310) = v144;
    uint64_t v149 = _typeName(_:qualified:)(v313, 0LL);
    v328 = (void *)sub_10015ADC4(v149, v150, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v147 + 4, v147 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v147 + 12) = 2080;
    swift_bridgeObjectRetain();
    v328 = (void *)sub_10015ADC4(v133, v135, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v147 + 14, v147 + 22);
    swift_bridgeObjectRelease_n(v135, 3LL);
    *(_WORD *)(v147 + 22) = 2080;
    swift_bridgeObjectRetain();
    v328 = (void *)sub_10015ADC4(v324, v146, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v147 + 24, v147 + 32);
    swift_bridgeObjectRelease_n(v146, 3LL);
    *(_WORD *)(v147 + 32) = 2080;
    uint64_t v151 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    uint64_t v152 = v300;
    uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter(v307, v151);
    v328 = (void *)sub_10015ADC4(v153, v154, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v147 + 34, v147 + 42);
    swift_bridgeObjectRelease();
    uint64_t v155 = *(void (***)(char *, uint64_t, uint64_t))(v305 + 8);
    ((void (*)(char *, uint64_t))v155)(v152, v307);
    _os_log_impl( (void *)&_mh_execute_header,  v142,  (os_log_type_t)v310,  "[%s] interactWithItem<%s> - item: %s produced interaction: %s",  (uint8_t *)v147,  0x2Au);
    swift_arrayDestroy(v148, 4LL, (char *)&type metadata for Any + 8);
    uint64_t v156 = v148;
    uint64_t v140 = v307;
    swift_slowDealloc(v156, -1LL, -1LL);
    swift_slowDealloc(v147, -1LL, -1LL);

    uint64_t v157 = (void (*)(char *, uint64_t))v323[1];
  }

  else
  {
    swift_bridgeObjectRelease_n(v131, 2LL);
    swift_bridgeObjectRelease_n(v135, 2LL);
    uint64_t v155 = *(void (***)(char *, uint64_t, uint64_t))(v305 + 8);
    ((void (*)(char *, uint64_t))v155)(v139, v140);

    uint64_t v157 = (void (*)(char *, uint64_t))v137[1];
  }

  v310 = v157;
  uint64_t v158 = ((uint64_t (*)(char *, uint64_t))v157)(v303, v322);
  char v159 = RoutingSessionConfiguration.supportsDialogs.getter(v158);
  uint64_t v160 = (uint64_t)v293;
  uint64_t v161 = v308;
  v326(v293, v308, v140);
  uint64_t v162 = v292;
  sub_1001A80F8(v311, v292, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v163 = v312;
  uint64_t v164 = v294;
  v323 = v155;
  if ((v159 & 1) == 0)
  {
    sub_1001A813C(v162, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v166 = ((uint64_t (*)(uint64_t, uint64_t))v155)(v160, v140);
LABEL_36:
    uint64_t v193 = v286;
    RoutingInteraction.action.getter(v166);
    uint64_t v194 = v287;
    int v195 = (*(uint64_t (**)(void *, uint64_t))(v164 + 88))(v193, v287);
    if (v195 == enum case for RoutingInteraction.Action.setActiveItem(_:))
    {
      (*(void (**)(void *, uint64_t))(v164 + 96))(v193, v194);
      swift_bridgeObjectRelease();
      uint64_t v196 = v305;
    }

    else
    {
      uint64_t v196 = v305;
      if (v195 != enum case for RoutingInteraction.Action.handoff(_:))
      {
        (*(void (**)(void *, uint64_t))(v164 + 8))(v193, v194);
        uint64_t v199 = (void (*)(char *, uint64_t, uint64_t))v326;
        goto LABEL_42;
      }

      (*(void (**)(void *, uint64_t))(v164 + 96))(v193, v194);
      swift_release(*v193);
    }

    uint64_t v197 = *(void *)(v77
                     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
    uint64_t v198 = (uint64_t)v282;
    uint64_t v199 = (void (*)(char *, uint64_t, uint64_t))v326;
    v326(v282, v161, v140);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v196 + 56))(v198, 0LL, 1LL, v140);
    uint64_t v200 = v197
         + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
    swift_beginAccess( v197 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  &aBlock,  33LL,  0LL);
    swift_retain(v197);
    sub_1001A2138(v198, v200);
    swift_endAccess(&aBlock);
    sub_100186CE8();
    sub_1001603DC(v198, &qword_1003F8EA0);
    swift_release(v197);
LABEL_42:
    uint64_t v201 = sub_100187ED8();
    uint64_t v202 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v201 + 672LL))(v161, v316, v304);
    swift_release(v201);
    uint64_t aBlock = v202;
    uint64_t v203 = swift_allocObject(&unk_1003A4628, 24LL, 7LL);
    swift_weakInit(v203 + 16, v163);
    uint64_t v204 = swift_allocObject(&unk_1003A46F0, 24LL, 7LL);
    swift_weakInit(v204 + 16, v77);
    uint64_t v205 = v295;
    v199(v295, v161, v307);
    uint64_t v206 = *(unsigned __int8 *)(v196 + 80);
    uint64_t v207 = (v206 + 32) & ~v206;
    uint64_t v208 = v196;
    unint64_t v209 = (v291 + v207 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v210 = (v209 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v211 = (v210 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v212 = swift_allocObject(&unk_1003A4740, v211 + 8, v206 | 7);
    *(void *)(v212 + swift_weakDestroy(v0 + 16) = v203;
    *(void *)(v212 + 24) = v204;
    uint64_t v213 = v212 + v207;
    uint64_t v214 = v307;
    (*(void (**)(uint64_t, char *, uint64_t))(v208 + 32))(v213, v205, v307);
    Swift::String v215 = (void *)(v212 + v209);
    uint64_t v216 = ObjectType;
    *Swift::String v215 = v321;
    v215[1] = v216;
    Swift::String v217 = (void *)(v212 + v210);
    uint64_t v218 = v327;
    *Swift::String v217 = v324;
    v217[1] = v218;
    *(void *)(v212 + v211) = v313;
    swift_bridgeObjectRetain();
    uint64_t v219 = sub_100156B68(&qword_1003F8EB0);
    uint64_t v220 = sub_1001604E8(&qword_1003F8EB8, &qword_1003F8EB0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    sub_100156640((uint64_t)sub_1001A2134, v212, v219, v220);
    swift_release(v77);
    swift_release(v212);
    swift_release(aBlock);
    (*(void (**)(uint64_t *, uint64_t))(v296 + 8))(v304, v297);
    ((void (*)(uint64_t, uint64_t))v323)(v308, v214);
    sub_1001A813C(v311, type metadata accessor for HostedRoutingSessionSnapshot);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v315 + 8))(v316, v314);
  }

  char v165 = sub_1001AC76C(v160, v162);
  sub_1001A813C(v162, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v166 = ((uint64_t (*)(uint64_t, uint64_t))v155)(v160, v140);
  if ((v165 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v167 = sub_1001A8998();
  unint64_t v169 = v168;
  uint64_t v170 = sub_100156B68(&qword_1003F8EA8);
  uint64_t v171 = type metadata accessor for RoutingDialog.Action(0LL);
  uint64_t v172 = *(void *)(v171 - 8);
  uint64_t v173 = *(void *)(v172 + 72);
  uint64_t v174 = *(unsigned __int8 *)(v172 + 80);
  uint64_t v175 = (v174 + 32) & ~v174;
  uint64_t v176 = swift_allocObject(v170, v175 + 2 * v173, v174 | 7);
  *(_OWORD *)(v176 + swift_weakDestroy(v0 + 16) = xmmword_10034C140;
  os_log_t v177 = (void *)(v176 + v175);
  *os_log_t v177 = 0x776F4E20746F4ELL;
  v177[1] = 0xE700000000000000LL;
  uint64_t v178 = *(void (**)(void))(v172 + 104);
  ((void (*)(void *, void, uint64_t))v178)(v177, enum case for RoutingDialog.Action.cancel(_:), v171);
  uint64_t v179 = (void *)((char *)v177 + v173);
  void *v179 = 0x6563616C706552LL;
  v179[1] = 0xE700000000000000LL;
  uint64_t v180 = v322;
  v178();
  swift_bridgeObjectRetain();
  uint64_t v309 = v167;
  RoutingDialog.init(identifier:titleText:detailText:actions:)( v167,  v169,  0xD000000000000028LL,  0x800000010033B090LL,  0xD00000000000005DLL,  0x800000010033B0C0LL,  v176);
  uint64_t v181 = v277;
  v318(v277, v317, v180);
  unint64_t v182 = ObjectType;
  swift_bridgeObjectRetain_n(ObjectType, 2LL);
  unint64_t v319 = v169;
  uint64_t v183 = swift_bridgeObjectRetain_n(v169, 2LL);
  uint64_t v184 = (os_log_s *)Logger.logObject.getter(v183);
  os_log_type_t v185 = static os_log_type_t.default.getter();
  int v186 = v185;
  if (os_log_type_enabled(v184, v185))
  {
    uint64_t v187 = swift_slowAlloc(32LL, -1LL);
    LODWORD(v31_Block_object_dispose(va, 8) = v186;
    uint64_t v188 = v187;
    uint64_t v317 = swift_slowAlloc(96LL, -1LL);
    uint64_t aBlock = v317;
    *(_DWORD *)uint64_t v188 = 136315650;
    uint64_t v189 = _typeName(_:qualified:)(v313, 0LL);
    v328 = (void *)sub_10015ADC4(v189, v190, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v188 + 4, v188 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v188 + 12) = 2080;
    swift_bridgeObjectRetain();
    v328 = (void *)sub_10015ADC4(v321, v182, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v188 + 14, v188 + 22);
    swift_bridgeObjectRelease_n(v182, 3LL);
    *(_WORD *)(v188 + 22) = 2080;
    unint64_t v191 = v319;
    swift_bridgeObjectRetain();
    v328 = (void *)sub_10015ADC4(v309, v191, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v328, &aBlock, v188 + 24, v188 + 32);
    swift_bridgeObjectRelease_n(v191, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v184,  (os_log_type_t)v318,  "[%s] interactWithItem<%s> - should present dialog: %s.",  (uint8_t *)v188,  0x20u);
    uint64_t v192 = v317;
    swift_arrayDestroy(v317, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v192, -1LL, -1LL);
    swift_slowDealloc(v188, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v319, 2LL);
    swift_bridgeObjectRelease_n(v182, 2LL);
  }

  v310(v181, v180);
  uint64_t v221 = v314;
  uint64_t v222 = v308;
  uint64_t v223 = v305;
  __int128 v224 = v320;
  Swift::String v225 = (void (*)(char *, uint64_t, uint64_t))v326;
  uint64_t v226 = swift_allocObject(&unk_1003A46F0, 24LL, 7LL);
  swift_weakInit(v226 + 16, v77);
  v225(v295, v222, v307);
  ((void (*)(char *, uint64_t, uint64_t))v224)(v289, v316, v221);
  uint64_t v227 = v296;
  (*(void (**)(char *, uint64_t *, uint64_t))(v296 + 16))(v280, v304, v297);
  uint64_t v228 = *(unsigned __int8 *)(v223 + 80);
  uint64_t v229 = (v228 + 56) & ~v228;
  unint64_t v230 = (v291 + v229 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v231 = *(unsigned __int8 *)(v315 + 80);
  uint64_t v232 = (v231 + v230 + 8) & ~v231;
  uint64_t v233 = *(unsigned __int8 *)(v227 + 80);
  uint64_t v234 = (v276 + v233 + v232) & ~v233;
  uint64_t v235 = v221;
  unint64_t v236 = (v278 + v234 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v237 = (v236 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v238 = (char *)swift_allocObject(&unk_1003A4768, v237 + 8, v228 | v231 | v233 | 7);
  uint64_t v239 = v321;
  *((void *)v238 + 2) = v226;
  *((void *)v238 + 3) = v239;
  uint64_t v240 = v309;
  *((void *)v238 + 4) = ObjectType;
  *((void *)v238 + 5) = v240;
  *((void *)v238 + 6) = v319;
  (*(void (**)(char *, char *, uint64_t))(v305 + 32))(&v238[v229], v295, v307);
  uint64_t v241 = v312;
  *(void *)&v238[v230] = v312;
  uint64_t v242 = v315;
  (*(void (**)(char *, char *, uint64_t))(v315 + 32))(&v238[v232], v289, v235);
  v243 = &v238[v234];
  uint64_t v244 = v296;
  uint64_t v245 = v297;
  (*(void (**)(char *, char *, uint64_t))(v296 + 32))(v243, v280, v297);
  uint64_t v246 = &v238[v236];
  uint64_t v247 = v327;
  *(void *)uint64_t v246 = v324;
  *((void *)v246 + 1) = v247;
  *(void *)&v238[v237] = v313;
  swift_bridgeObjectRetain();
  swift_retain(v226);
  swift_retain(v241);
  uint64_t v248 = v281;
  sub_10019688C(v281, v77, (uint64_t)sub_1001A22CC, (uint64_t)v238);
  swift_release(v77);
  swift_release(v238);
  (*(void (**)(uint64_t, uint64_t))(v283 + 8))(v248, v284);
  (*(void (**)(uint64_t *, uint64_t))(v244 + 8))(v304, v245);
  ((void (*)(uint64_t, uint64_t))v323)(v308, v307);
  sub_1001A813C(v311, type metadata accessor for HostedRoutingSessionSnapshot);
  (*(void (**)(uint64_t, uint64_t))(v242 + 8))(v316, v314);
  uint64_t v105 = v226;
  return swift_release(v105);
}

uint64_t sub_10018D3D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v147 = a8;
  unint64_t v153 = a7;
  unint64_t v154 = a5;
  uint64_t v151 = a6;
  uint64_t v152 = a4;
  uint64_t v17 = type metadata accessor for RoutingDialog.Action(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v149 = (uint64_t *)((char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v148 = (uint64_t (*)(char *, uint64_t, uint64_t))type metadata accessor for RoutingInteraction(0LL);
  os_log_t v146 = (os_log_t)*((void *)v148 - 1);
  __chkstk_darwin(v148);
  uint64_t v144 = v20;
  BOOL v145 = (char *)&v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100156B68(&qword_1003F8EA0);
  __chkstk_darwin(v21);
  uint64_t v140 = (char *)&v135 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v141 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v142 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v155 = *(void *)(v24 - 8);
  uint64_t v156 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  unint64_t v150 = (char *)&v135 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v135 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v135 - v30;
  uint64_t v32 = sub_100156B68(&qword_1003F8E80);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v35 = (char *)&v135 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v135 - v37;
  __chkstk_darwin(v36);
  uint64_t v40 = (char *)&v135 - v39;
  a3 += 16LL;
  swift_beginAccess(a3, v159, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3);
  if (result)
  {
    uint64_t v42 = result;
    uint64_t v139 = a14;
    if (a2)
    {
      swift_errorRetain(a2);
      uint64_t v43 = sub_1001741A8();
      uint64_t v44 = v155;
      uint64_t v45 = v156;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v31, v43, v156);
      swift_errorRetain(a2);
      unint64_t v46 = v154;
      swift_bridgeObjectRetain();
      unint64_t v47 = v153;
      swift_bridgeObjectRetain();
      swift_errorRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v48 = swift_bridgeObjectRetain();
      uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc(42LL, -1LL);
        uint64_t v149 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v52 = swift_slowAlloc(96LL, -1LL);
        uint64_t v138 = v42;
        unint64_t v150 = (char *)v52;
        v157[0] = v52;
        *(_DWORD *)uint64_t v51 = 136315906;
        uint64_t v53 = _typeName(_:qualified:)(v139, 0LL);
        uint64_t v158 = sub_10015ADC4(v53, v54, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v51 + 4, v51 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v158 = sub_10015ADC4(v152, v46, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v51 + 14, v51 + 22);
        swift_bridgeObjectRelease_n(v46, 3LL);
        *(_WORD *)(v51 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v158 = sub_10015ADC4(v151, v47, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v51 + 24, v51 + 32);
        swift_bridgeObjectRelease_n(v47, 3LL);
        *(_WORD *)(v51 + 32) = 2112;
        swift_errorRetain(a2);
        uint64_t v55 = _swift_stdlib_bridgeErrorToNSError(a2);
        uint64_t v158 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v51 + 34, v51 + 42);
        uint64_t v56 = v149;
        uint64_t *v149 = v55;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "[%s] interactWithItem<%s> - dialog: %s returned error: %@ -> drop interaction",  (uint8_t *)v51,  0x2Au);
        uint64_t v57 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v56, 1LL, v57);
        swift_slowDealloc(v56, -1LL, -1LL);
        uint64_t v58 = v150;
        swift_arrayDestroy(v150, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_slowDealloc(v51, -1LL, -1LL);

        swift_errorRelease(a2);
        swift_release(v138);
        return (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v31, v156);
      }

      else
      {
        swift_errorRelease(a2);
        swift_bridgeObjectRelease_n(v47, 2LL);
        swift_bridgeObjectRelease_n(v46, 2LL);
        swift_errorRelease(a2);
        swift_errorRelease(a2);

        swift_release(v42);
        return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v31, v45);
      }
    }

    uint64_t v136 = a12;
    sub_1001A8360(a1, (uint64_t)v40, &qword_1003F8E80);
    uint64_t v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
    int v60 = v59(v40, 1LL, v17);
    uint64_t v138 = v42;
    uint64_t v137 = a13;
    if (v60 == 1)
    {
      uint64_t v148 = v59;
      sub_1001603DC((uint64_t)v40, &qword_1003F8E80);
      goto LABEL_12;
    }

    if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v40, v17) != enum case for RoutingDialog.Action.confirm(_:))
    {
      uint64_t v148 = v59;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v40, v17);
LABEL_12:
      uint64_t v74 = sub_1001741A8();
      uint64_t v75 = v155;
      uint64_t v76 = v156;
      uint64_t v77 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v150, v74, v156);
      sub_1001A8360(a1, (uint64_t)v38, &qword_1003F8E80);
      unint64_t v78 = v154;
      swift_bridgeObjectRetain_n(v154, 2LL);
      unint64_t v79 = v153;
      uint64_t v80 = swift_bridgeObjectRetain_n(v153, 2LL);
      uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      LODWORD(v147) = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, (os_log_type_t)v147))
      {
        os_log_t v146 = v81;
        uint64_t v82 = swift_slowAlloc(42LL, -1LL);
        BOOL v145 = (char *)swift_slowAlloc(128LL, -1LL);
        v157[0] = (uint64_t)v145;
        *(_DWORD *)uint64_t v82 = 136315906;
        uint64_t v83 = _typeName(_:qualified:)(v139, 0LL);
        uint64_t v158 = sub_10015ADC4(v83, v84, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v82 + 4, v82 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v82 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v158 = sub_10015ADC4(v152, v78, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v82 + 14, v82 + 22);
        swift_bridgeObjectRelease_n(v78, 3LL);
        *(_WORD *)(v82 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v158 = sub_10015ADC4(v151, v79, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v82 + 24, v82 + 32);
        swift_bridgeObjectRelease_n(v79, 3LL);
        *(_WORD *)(v82 + 32) = 2080;
        sub_1001A8360((uint64_t)v38, (uint64_t)v35, &qword_1003F8E80);
        uint64_t result = v148(v35, 1LL, v17);
        if ((_DWORD)result == 1)
        {
          __break(1u);
          return result;
        }

        unint64_t v85 = v149;
        (*(void (**)(uint64_t *, char *, uint64_t))(v18 + 32))(v149, v35, v17);
        uint64_t v86 = sub_100156FEC( &qword_1003F9480,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingDialog.Action,  (uint64_t)&protocol conformance descriptor for RoutingDialog.Action);
        uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v17, v86);
        unint64_t v89 = v88;
        (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v85, v17);
        uint64_t v158 = sub_10015ADC4(v87, v89, v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v82 + 34, v82 + 42);
        swift_bridgeObjectRelease();
        sub_1001603DC((uint64_t)v38, &qword_1003F8E80);
        os_log_t v90 = v146;
        _os_log_impl( (void *)&_mh_execute_header,  v146,  (os_log_type_t)v147,  "[%s] interactWithItem<%s> - dialog: %s returned action: %s -> drop interaction",  (uint8_t *)v82,  0x2Au);
        uint64_t v91 = v145;
        swift_arrayDestroy(v145, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1LL, -1LL);
        swift_slowDealloc(v82, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v155 + 8))(v150, v156);
      }

      else
      {
        swift_bridgeObjectRelease_n(v79, 2LL);
        swift_bridgeObjectRelease_n(v78, 2LL);
        sub_1001603DC((uint64_t)v38, &qword_1003F8E80);

        (*(void (**)(char *, uint64_t))(v75 + 8))(v77, v76);
      }

      uint64_t v93 = v136;
      uint64_t v94 = v138;
      uint64_t v96 = *(void *)(v138
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
      uint64_t v95 = *(void *)(v138
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                      + 8);
      uint64_t ObjectType = swift_getObjectType(v96, v92);
      uint64_t v98 = type metadata accessor for InternalRoutingError(0LL);
      uint64_t v99 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
      uint64_t v100 = swift_allocError(v98, v99, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v98 - 8) + 104LL))( v101,  enum case for InternalRoutingError.cancelled(_:),  v98);
      uint64_t v102 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 24);
      swift_unknownObjectRetain(v96);
      v102(v93, v137, v100, ObjectType, v95);
      swift_release(v94);
      swift_errorRelease(v100);
      return swift_unknownObjectRelease(v96);
    }

    uint64_t v149 = a11;
    uint64_t v135 = a10;
    unint64_t v150 = a9;
    (*(void (**)(char *, uint64_t))(v18 + 96))(v40, v17);
    swift_bridgeObjectRelease();
    uint64_t v61 = sub_1001741A8();
    uint64_t v63 = v155;
    uint64_t v62 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v29, v61, v156);
    unint64_t v64 = v154;
    swift_bridgeObjectRetain_n(v154, 2LL);
    unint64_t v65 = v153;
    uint64_t v66 = swift_bridgeObjectRetain_n(v153, 2LL);
    os_log_type_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      uint64_t v70 = swift_slowAlloc(96LL, -1LL);
      v157[0] = v70;
      *(_DWORD *)uint64_t v69 = 136315650;
      uint64_t v71 = _typeName(_:qualified:)(v139, 0LL);
      uint64_t v158 = sub_10015ADC4(v71, v72, v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v158 = sub_10015ADC4(v152, v64, v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v69 + 14, v69 + 22);
      swift_bridgeObjectRelease_n(v64, 3LL);
      *(_WORD *)(v69 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v158 = sub_10015ADC4(v151, v65, v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v69 + 24, v69 + 32);
      swift_bridgeObjectRelease_n(v65, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v67,  v68,  "[%s] interactWithItem<%s> - dialog: %s confirmed -> handle interaction",  (uint8_t *)v69,  0x20u);
      swift_arrayDestroy(v70, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);

      uint64_t v73 = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v29, v156);
    }

    else
    {

      swift_bridgeObjectRelease_n(v65, 2LL);
      swift_bridgeObjectRelease_n(v64, 2LL);
      uint64_t v73 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v29, v62);
    }

    uint64_t v103 = v138;
    uint64_t v104 = v147;
    uint64_t v105 = v148;
    os_log_t v106 = v146;
    uint64_t v107 = v143;
    uint64_t v108 = v144;
    unint64_t v109 = v142;
    uint64_t v110 = v141;
    RoutingInteraction.action.getter(v73);
    int v111 = (*(uint64_t (**)(void *, uint64_t))(v110 + 88))(v109, v107);
    if (v111 == enum case for RoutingInteraction.Action.setActiveItem(_:))
    {
      (*(void (**)(void *, uint64_t))(v110 + 96))(v109, v107);
      swift_bridgeObjectRelease();
    }

    else
    {
      if (v111 != enum case for RoutingInteraction.Action.handoff(_:))
      {
        (*(void (**)(void *, uint64_t))(v110 + 8))(v109, v107);
        goto LABEL_24;
      }

      (*(void (**)(void *, uint64_t))(v110 + 96))(v109, v107);
      swift_release(*v109);
    }

    uint64_t v112 = *(void *)(v103
                     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
    uint64_t v113 = (uint64_t)v140;
    (*((void (**)(char *, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))v106 + 2))( v140,  v104,  v105);
    (*((void (**)(uint64_t, void, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))v106 + 7))( v113,  0LL,  1LL,  v105);
    uint64_t v114 = v112
         + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
    swift_beginAccess( v112 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  v157,  33LL,  0LL);
    swift_retain(v112);
    sub_1001A2138(v113, v114);
    swift_endAccess(v157);
    sub_100186CE8();
    sub_1001603DC(v113, &qword_1003F8EA0);
    swift_release(v112);
LABEL_24:
    int64_t v116 = v149;
    uint64_t v115 = v150;
    uint64_t v117 = v135;
    uint64_t v118 = sub_100187ED8();
    uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v118 + 672LL))(v104, v117, v116);
    swift_release(v118);
    v157[0] = v119;
    uint64_t v120 = swift_allocObject(&unk_1003A4628, 24LL, 7LL);
    swift_weakInit(v120 + 16, v115);
    uint64_t v121 = swift_allocObject(&unk_1003A46F0, 24LL, 7LL);
    swift_weakInit(v121 + 16, v103);
    uint64_t v122 = v145;
    (*((void (**)(char *, uint64_t, uint64_t (*)(char *, uint64_t, uint64_t)))v106 + 2))( v145,  v104,  v105);
    uint64_t v123 = *((unsigned __int8 *)v106 + 80);
    uint64_t v124 = (v123 + 32) & ~v123;
    unint64_t v125 = (v108 + v124 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v126 = (v125 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v127 = (v126 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v128 = swift_allocObject(&unk_1003A4A90, v127 + 8, v123 | 7);
    *(void *)(v128 + swift_weakDestroy(v0 + 16) = v120;
    *(void *)(v128 + 24) = v121;
    (*((void (**)(uint64_t, char *, uint64_t (*)(char *, uint64_t, uint64_t)))v106 + 4))( v128 + v124,  v122,  v105);
    uint64_t v129 = (void *)(v128 + v125);
    unint64_t v130 = v154;
    *uint64_t v129 = v152;
    v129[1] = v130;
    uint64_t v131 = (void *)(v128 + v126);
    uint64_t v132 = v137;
    *uint64_t v131 = v136;
    v131[1] = v132;
    *(void *)(v128 + v127) = v139;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v133 = sub_100156B68(&qword_1003F8EB0);
    uint64_t v134 = sub_1001604E8(&qword_1003F8EB8, &qword_1003F8EB0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    sub_100156640((uint64_t)sub_1001A2134, v128, v133, v134);
    swift_release(v138);
    swift_release(v128);
    return swift_release(v157[0]);
  }

  return result;
}

uint64_t sub_10018E2D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v105 = a8;
  uint64_t v106 = a7;
  unint64_t v98 = a6;
  uint64_t v97 = a5;
  uint64_t v108 = a4;
  uint64_t v102 = type metadata accessor for Logger(0LL);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v103 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v111 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v99 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v93 - v16;
  uint64_t v18 = sub_100156B68(&qword_1003F9488);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100156B68(&qword_1003F8EA0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v100 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v93 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v93 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v93 - v30;
  uint64_t v112 = *(void *)a1;
  uint64_t v107 = *(void *)(a1 + 8);
  uint64_t v110 = *(void *)(a1 + 16);
  a2 += 16LL;
  int v109 = *(unsigned __int8 *)(a1 + 24);
  swift_beginAccess(a2, v117, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v33 = result;
    swift_beginAccess(a3 + 16, v116, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(a3 + 16);
    if (!Strong) {
      return swift_release(v33);
    }
    uint64_t v96 = v33;
    uint64_t v104 = Strong;
    if (!v112)
    {
      uint64_t v46 = 0LL;
      uint64_t v48 = *(void *)(Strong
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
      uint64_t v47 = *(void *)(Strong
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                      + 8);
      uint64_t v49 = v105;
      uint64_t v50 = 0LL;
      uint64_t v51 = v107;
      uint64_t v43 = v110;
      unsigned __int8 v45 = v109;
LABEL_20:
      uint64_t ObjectType = swift_getObjectType(v48, v35);
      uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 24);
      swift_unknownObjectRetain(v48);
      sub_10018480C(v50, v51, v43, v45);
      v92(v106, v49, v46, ObjectType, v47);
      swift_errorRelease(v46);
      swift_release(v96);
      swift_release(v104);
      return swift_unknownObjectRelease(v48);
    }

    uint64_t v95 = OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context;
    uint64_t v36 = *(void *)(Strong
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context)
        + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
    swift_beginAccess(v36, v115, 0LL, 0LL);
    sub_1001A8360(v36, (uint64_t)v31, &qword_1003F8EA0);
    uint64_t v37 = v111;
    uint64_t v38 = v13;
    uint64_t v93 = *(os_log_s **)(v111 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v93)(v29, v108, v13);
    uint64_t v94 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v94(v29, 0LL, 1LL, v13);
    uint64_t v39 = (uint64_t)&v20[*(int *)(v18 + 48)];
    sub_1001A8360((uint64_t)v31, (uint64_t)v20, &qword_1003F8EA0);
    sub_1001A8360((uint64_t)v29, v39, &qword_1003F8EA0);
    uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v40((uint64_t)v20, 1LL, v13) == 1)
    {
      sub_1001603DC((uint64_t)v29, &qword_1003F8EA0);
      sub_1001603DC((uint64_t)v31, &qword_1003F8EA0);
      int v41 = v40(v39, 1LL, v13);
      uint64_t v42 = v103;
      if (v41 == 1)
      {
        sub_1001603DC((uint64_t)v20, &qword_1003F8EA0);
        uint64_t v43 = v110;
        uint64_t v44 = v38;
        unsigned __int8 v45 = v109;
LABEL_13:
        uint64_t v57 = sub_1001741A8();
        uint64_t v58 = v101;
        uint64_t v59 = v42;
        int v60 = v42;
        uint64_t v61 = v102;
        (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v59, v57, v102);
        uint64_t v62 = v99;
        ((void (*)(char *, uint64_t, uint64_t))v93)(v99, v108, v44);
        unint64_t v63 = v98;
        swift_bridgeObjectRetain_n(v98, 2LL);
        uint64_t v64 = v104;
        uint64_t v65 = swift_retain_n(v104, 2LL);
        uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
        os_log_type_t v67 = static os_log_type_t.default.getter();
        LODWORD(v103) = v67;
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v93 = v66;
          uint64_t v68 = swift_slowAlloc(42LL, -1LL);
          uint64_t v69 = swift_slowAlloc(128LL, -1LL);
          v114[0] = v69;
          *(_DWORD *)uint64_t v68 = 136315906;
          uint64_t v70 = _typeName(_:qualified:)(a9, 0LL);
          uint64_t v113 = sub_10015ADC4(v70, v71, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v68 + 4, v68 + 12);
          swift_bridgeObjectRelease();
          unint64_t v72 = v60;
          *(_WORD *)(v68 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v113 = sub_10015ADC4(v97, v63, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v68 + 14, v68 + 22);
          swift_bridgeObjectRelease_n(v63, 3LL);
          *(_WORD *)(v68 + 22) = 2080;
          uint64_t v73 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
          uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v44, v73);
          uint64_t v113 = sub_10015ADC4(v74, v75, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v68 + 24, v68 + 32);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v111 + 8))(v62, v44);
          *(_WORD *)(v68 + 32) = 2080;
          swift_retain(v104);
          uint64_t v76 = sub_10018756C();
          unint64_t v78 = v77;
          swift_release(v104);
          uint64_t v113 = sub_10015ADC4(v76, v78, v114);
          uint64_t v64 = v104;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v68 + 34, v68 + 42);
          swift_release_n(v64, 2LL);
          swift_bridgeObjectRelease();
          os_log_t v79 = v93;
          _os_log_impl( (void *)&_mh_execute_header,  v93,  (os_log_type_t)v103,  "[%s] interactWithItem<%s> - clear failed source hiding interaction: %s for client: %s",  (uint8_t *)v68,  0x2Au);
          swift_arrayDestroy(v69, 4LL, (char *)&type metadata for Any + 8);
          uint64_t v80 = v69;
          unsigned __int8 v45 = v109;
          uint64_t v43 = v110;
          swift_slowDealloc(v80, -1LL, -1LL);
          swift_slowDealloc(v68, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v101 + 8))(v72, v102);
        }

        else
        {
          swift_bridgeObjectRelease_n(v63, 2LL);
          (*(void (**)(char *, uint64_t))(v111 + 8))(v62, v44);

          swift_release_n(v64, 2LL);
          (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v61);
        }

        uint64_t v81 = v95;
        uint64_t v82 = *(void *)(v64 + v95);
        uint64_t v83 = (uint64_t)v100;
        v94(v100, 1LL, 1LL, v44);
        uint64_t v84 = v82
            + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
        swift_beginAccess( v82 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction,  v114,  33LL,  0LL);
        swift_retain(v82);
        sub_1001A2138(v83, v84);
        swift_endAccess(v114);
        sub_100186CE8();
        sub_1001603DC(v83, &qword_1003F8EA0);
        swift_release(v82);
        uint64_t v85 = sub_100187DF0();
        uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 264LL))(v108);
        uint64_t v88 = v87;
        swift_release(v85);
        uint64_t v51 = v107;
        if (v88)
        {
          uint64_t v89 = *(void *)(v64 + v81);
          swift_beginAccess( v89 + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation,  v114,  33LL,  0LL);
          swift_retain(v89);
          sub_10015CCDC(v86, v88);
          swift_endAccess(v114);
          swift_bridgeObjectRelease();
          swift_release(v89);
          swift_bridgeObjectRelease();
        }

        sub_100194C40(v64);
        uint64_t v50 = v112;
        goto LABEL_19;
      }
    }

    else
    {
      sub_1001A8360((uint64_t)v20, (uint64_t)v26, &qword_1003F8EA0);
      int v52 = v40(v39, 1LL, v13);
      uint64_t v42 = v103;
      if (v52 != 1)
      {
        uint64_t v53 = v111;
        (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v17, v39, v38);
        uint64_t v54 = sub_100156FEC( &qword_1003F8D48,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        char v55 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v17, v38, v54);
        uint64_t v56 = *(void (**)(char *, uint64_t))(v53 + 8);
        v56(v17, v38);
        sub_1001603DC((uint64_t)v29, &qword_1003F8EA0);
        sub_1001603DC((uint64_t)v31, &qword_1003F8EA0);
        v56(v26, v38);
        sub_1001603DC((uint64_t)v20, &qword_1003F8EA0);
        uint64_t v50 = v112;
        uint64_t v51 = v107;
        uint64_t v43 = v110;
        uint64_t v44 = v38;
        unsigned __int8 v45 = v109;
        if ((v55 & 1) != 0) {
          goto LABEL_13;
        }
LABEL_19:
        uint64_t v48 = *(void *)(v104
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
        uint64_t v47 = *(void *)(v104
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                        + 8);
        unint64_t v90 = sub_1001A7C60();
        uint64_t v46 = swift_allocError(&type metadata for RoutingEvent.Error, v90, 0LL, 0LL);
        *(void *)uint64_t v35 = v50;
        *(void *)(v35 + _Block_object_dispose(va, 8) = v51;
        *(void *)(v35 + swift_weakDestroy(v0 + 16) = v43;
        *(_BYTE *)(v35 + 24) = v45;
        uint64_t v49 = v105;
        goto LABEL_20;
      }

      sub_1001603DC((uint64_t)v29, &qword_1003F8EA0);
      sub_1001603DC((uint64_t)v31, &qword_1003F8EA0);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v26, v38);
    }

    sub_1001603DC((uint64_t)v20, &qword_1003F9488);
    uint64_t v50 = v112;
    uint64_t v51 = v107;
    uint64_t v43 = v110;
    unsigned __int8 v45 = v109;
    goto LABEL_19;
  }

  return result;
}

uint64_t sub_10018ECFC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v42 - v15;
  a2 += 16LL;
  swift_beginAccess(a2, v49, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  uint64_t result = swift_release(Strong);
  if (Strong)
  {
    if (a1)
    {
      swift_errorRetain(a1);
      uint64_t v19 = sub_1001741A8();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v19, v10);
      swift_bridgeObjectRetain_n(a4, 3LL);
      swift_errorRetain(a1);
      swift_bridgeObjectRetain();
      uint64_t v20 = swift_errorRetain(a1);
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.error.getter();
      int v23 = v22;
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v24 = swift_slowAlloc(42LL, -1LL);
        LODWORD(v45) = v23;
        uint64_t v25 = v24;
        uint64_t v44 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        uint64_t v46 = swift_slowAlloc(96LL, -1LL);
        uint64_t v48 = v46;
        *(_DWORD *)uint64_t v25 = 136315906;
        uint64_t v26 = _typeName(_:qualified:)(a5, 0LL);
        os_log_t v43 = v21;
        uint64_t v47 = sub_10015ADC4(v26, v27, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v25 + 4, v25 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_10015ADC4(a3, a4, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v25 + 14, v25 + 22);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v25 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_10015ADC4(a3, a4, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v25 + 24, v25 + 32);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v25 + 32) = 2112;
        swift_errorRetain(a1);
        uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(a1);
        uint64_t v47 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v25 + 34, v25 + 42);
        uint64_t v29 = v44;
        *uint64_t v44 = v28;
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        os_log_t v30 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v45,  "[%s] interactWithItem<%s> - dialog: %s returned error: %@",  (uint8_t *)v25,  0x2Au);
        uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v29, 1LL, v31);
        swift_slowDealloc(v29, -1LL, -1LL);
        uint64_t v32 = v46;
        swift_arrayDestroy(v46, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v25, -1LL, -1LL);

        swift_errorRelease(a1);
      }

      else
      {
        swift_errorRelease(a1);
        swift_bridgeObjectRelease_n(a4, 4LL);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }

    else
    {
      uint64_t v33 = sub_1001741A8();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v33, v10);
      uint64_t v34 = swift_bridgeObjectRetain_n(a4, 4LL);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc(32LL, -1LL);
        uint64_t v46 = swift_slowAlloc(96LL, -1LL);
        uint64_t v48 = v46;
        *(_DWORD *)uint64_t v37 = 136315650;
        uint64_t v45 = a3;
        uint64_t v38 = _typeName(_:qualified:)(a5, 0LL);
        uint64_t v47 = sub_10015ADC4(v38, v39, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v40 = v45;
        uint64_t v47 = sub_10015ADC4(v45, a4, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 14, v37 + 22);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v37 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v47 = sub_10015ADC4(v40, a4, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 24, v37 + 32);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "[%s] interactWithItem<%s> - dialog: %s acknowledged",  (uint8_t *)v37,  0x20u);
        uint64_t v41 = v46;
        swift_arrayDestroy(v46, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1LL, -1LL);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 4LL);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
  }

  return result;
}

uint64_t sub_10018F258(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  LODWORD(v176) = a5;
  unint64_t v173 = a4;
  uint64_t v175 = a1;
  uint64_t v165 = *v5;
  uint64_t v154 = type metadata accessor for InternalRoutingError(0LL);
  v145[2] = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  unint64_t v153 = (char *)v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v170 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v168 = *(void *)(v12 - 8);
  uint64_t v169 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v148 = (void *)((char *)v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v174 = type metadata accessor for Logger(0LL);
  uint64_t v172 = *(void *)(v174 - 8);
  uint64_t v16 = __chkstk_darwin(v174);
  uint64_t v156 = (char *)v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v145[1] = (char *)v145 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v171 = (char *)v145 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v161 = (char *)v145 - v23;
  __chkstk_darwin(v22);
  uint64_t v152 = (char *)v145 - v24;
  uint64_t v147 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v146 = *(void *)(v147 - 8);
  uint64_t v25 = __chkstk_darwin(v147);
  uint64_t v151 = (char *)v145 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v155 = (char *)v145 - v28;
  __chkstk_darwin(v27);
  uint64_t v160 = (char *)v145 - v29;
  uint64_t v30 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v30);
  uint64_t v163 = (uint64_t)v145 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v159 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v162 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v158 = (uint64_t)v145 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v166 = *(void *)(v164 - 8);
  uint64_t v33 = __chkstk_darwin(v164);
  uint64_t v157 = (char *)v145 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33);
  uint64_t v167 = (char *)v145 - v35;
  uint64_t v36 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v39 = (void *)((char *)v145 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v40 = (void *)*sub_100216E68();
  if ((v176 & 1) == 0)
  {
    uint64_t v64 = (void *)swift_allocObject(&unk_1003A4790, 56LL, 7LL);
    uint64_t v65 = v175;
    v64[2] = v5;
    v64[3] = v65;
    v64[4] = a2;
    v64[5] = a3;
    v64[6] = v173;
    v179[3] = sub_1001A2400;
    uint64_t v180 = v64;
    uint64_t aBlock = (char *)_NSConcreteStackBlock;
    v179[0] = 1107296256LL;
    v179[1] = sub_100157EA8;
    v179[2] = &unk_1003A47A8;
    uint64_t v66 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(a3);
    swift_bridgeObjectRetain();
    id v67 = v40;
    uint64_t v68 = swift_retain(v5);
    static DispatchQoS.unspecified.getter(v68);
    os_log_t v177 = _swiftEmptyArrayStorage;
    uint64_t v69 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v70 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v71 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v177, v70, v71, v9, v69);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v66);
    _Block_release(v66);

    (*(void (**)(char *, uint64_t))(v170 + 8))(v11, v9);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v14, v169);
    return swift_release(v180);
  }

  uint64_t v176 = v5;
  unint64_t v41 = a2;
  *unint64_t v39 = v40;
  (*(void (**)(void *, void, uint64_t))(v37 + 104))(v39, enum case for DispatchPredicate.onQueue(_:), v36);
  id v42 = v40;
  uint64_t v43 = _dispatchPreconditionTest(_:)(v39);
  (*(void (**)(void *, uint64_t))(v37 + 8))(v39, v36);
  if ((v43 & 1) != 0)
  {
    uint64_t v43 = (uint64_t)sub_100187CE0();
    if (!((unint64_t)v43 >> 62))
    {
      uint64_t v44 = *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_unknownObjectRetain(a3);
      swift_bridgeObjectRetain();
      if (v44) {
        goto LABEL_5;
      }
LABEL_13:
      swift_unknownObjectRelease(a3);
      swift_bridgeObjectRelease_n(v43, 2LL);
      uint64_t v49 = sub_1001741A8();
      uint64_t v50 = v171;
      uint64_t v51 = v172;
      uint64_t v52 = v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v171, v49, v174);
      swift_unknownObjectRetain_n(a3, 2LL);
      uint64_t v53 = swift_bridgeObjectRetain_n(v41, 2LL);
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        uint64_t v57 = (void *)swift_slowAlloc(96LL, -1LL);
        os_log_t v177 = v57;
        *(_DWORD *)uint64_t v56 = 136315650;
        uint64_t v58 = _typeName(_:qualified:)(v165, 0LL);
        uint64_t aBlock = (char *)sub_10015ADC4(v58, v59, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v179, v56 + 4, v56 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t aBlock = (char *)sub_10015ADC4(v175, v41, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v179, v56 + 14, v56 + 22);
        swift_bridgeObjectRelease_n(v41, 3LL);
        *(_WORD *)(v56 + 22) = 2080;
        uint64_t aBlock = (char *)a3;
        v179[0] = v173;
        swift_unknownObjectRetain(a3);
        uint64_t v60 = sub_100156B68(&qword_1003F8E60);
        uint64_t v61 = String.init<A>(describing:)(&aBlock, v60);
        uint64_t aBlock = (char *)sub_10015ADC4(v61, v62, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v179, v56 + 24, v56 + 32);
        swift_unknownObjectRelease_n(a3, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "[%s] interactWithSession - session: %s, No internal client found matching client: %s",  (uint8_t *)v56,  0x20u);
        swift_arrayDestroy(v57, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_slowDealloc(v56, -1LL, -1LL);

        return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v171, v174);
      }

      else
      {

        swift_unknownObjectRelease_n(a3, 2LL);
        swift_bridgeObjectRelease_n(v41, 2LL);
        return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
      }
    }
  }

  else
  {
LABEL_32:
    __break(1u);
  }

  if (v43 < 0) {
    uint64_t v144 = v43;
  }
  else {
    uint64_t v144 = v43 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_unknownObjectRetain(a3);
  swift_bridgeObjectRetain();
  uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v144);
  if (!v44) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v45 = 4LL;
  while (1)
  {
    uint64_t v46 = v45 - 4;
    if ((v43 & 0xC000000000000001LL) != 0)
    {
      uint64_t v47 = specialized _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, v43);
      uint64_t v48 = v45 - 3;
      if (__OFADD__(v46, 1LL)) {
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v47 = *(void *)(v43 + 8 * v45);
      swift_retain(v47);
      uint64_t v48 = v45 - 3;
      if (__OFADD__(v46, 1LL))
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }

    if (*(void *)(v47
                   + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == a3)
      break;
    swift_release(v47);
    ++v45;
    if (v48 == v44) {
      goto LABEL_13;
    }
  }

  swift_unknownObjectRelease(a3);
  swift_bridgeObjectRelease_n(v43, 2LL);
  unint64_t v72 = *(void (**)(char *, uint64_t))(v166 + 16);
  uint64_t v73 = v164;
  v72( v167,  v47 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration);
  swift_retain(v47);
  uint64_t v74 = sub_100187D24();
  uint64_t v75 = v74[2];
  unint64_t v173 = v41;
  if (v75)
  {
    unint64_t v76 = sub_1001A0A48(v47);
    uint64_t v77 = v175;
    uint64_t v78 = (uint64_t)v160;
    os_log_t v79 = v161;
    if ((v80 & 1) != 0)
    {
      sub_1001A80F8( v74[7] + *(void *)(v162 + 72) * v76,  v163,  type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v81 = 0LL;
    }

    else
    {
      uint64_t v81 = 1LL;
    }
  }

  else
  {
    uint64_t v81 = 1LL;
    uint64_t v77 = v175;
    uint64_t v78 = (uint64_t)v160;
    os_log_t v79 = v161;
  }

  uint64_t v82 = v162;
  uint64_t v83 = v163;
  uint64_t v84 = v159;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56))(v163, v81, 1LL, v159);
  swift_release(v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v82 + 48))(v83, 1LL, v84) == 1)
  {
    sub_1001603DC(v83, &qword_1003FD0B0);
    uint64_t v85 = sub_1001741A8();
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v79, v85, v174);
    uint64_t v86 = v157;
    uint64_t v87 = v167;
    ((void (*)(char *, char *, uint64_t))v72)(v157, v167, v73);
    unint64_t v88 = v173;
    uint64_t v89 = swift_bridgeObjectRetain_n(v173, 2LL);
    unint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.error.getter();
    int v92 = v91;
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v93 = swift_slowAlloc(32LL, -1LL);
      uint64_t v94 = swift_slowAlloc(96LL, -1LL);
      uint64_t aBlock = (char *)v94;
      *(_DWORD *)uint64_t v93 = 136315650;
      LODWORD(v176) = v92;
      uint64_t v95 = _typeName(_:qualified:)(v165, 0LL);
      os_log_t v177 = (void *)sub_10015ADC4(v95, v96, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v93 + 4, v93 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v93 + 12) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v177 = (void *)sub_10015ADC4(v77, v88, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v93 + 14, v93 + 22);
      swift_bridgeObjectRelease_n(v88, 3LL);
      *(_WORD *)(v93 + 22) = 2080;
      uint64_t v97 = sub_100156FEC( &qword_1003F8EC0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration);
      unint64_t v98 = v157;
      uint64_t v99 = v164;
      uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter(v164, v97);
      os_log_t v177 = (void *)sub_10015ADC4(v100, v101, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v93 + 24, v93 + 32);
      swift_bridgeObjectRelease();
      uint64_t v102 = *(void (**)(char *, uint64_t))(v166 + 8);
      v102(v98, v99);
      _os_log_impl( (void *)&_mh_execute_header,  v90,  (os_log_type_t)v176,  "[%s] interactWithSession - session: %s, No snapshot for configuration: %s",  (uint8_t *)v93,  0x20u);
      swift_arrayDestroy(v94, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_release(v47);

      (*(void (**)(char *, uint64_t))(v172 + 8))(v161, v174);
      return ((uint64_t (*)(char *, uint64_t))v102)(v167, v99);
    }

    else
    {

      uint64_t v106 = *(void (**)(char *, uint64_t))(v166 + 8);
      v106(v86, v73);
      swift_release(v47);
      swift_bridgeObjectRelease_n(v88, 2LL);
      (*(void (**)(char *, uint64_t))(v172 + 8))(v79, v174);
      return ((uint64_t (*)(char *, uint64_t))v106)(v87, v73);
    }
  }

  else
  {
    uint64_t v103 = v158;
    sub_1001A81D4(v83, v158, type metadata accessor for HostedRoutingSessionSnapshot);
    type metadata accessor for RoutingDecisionEngine();
    unint64_t v104 = v173;
    sub_1001AC480(v77, v173, v103, v78);
    uint64_t v105 = v174;
    uint64_t v107 = v73;
    uint64_t v108 = sub_1001741A8();
    int v109 = v152;
    (*(void (**)(char *, uint64_t, uint64_t))(v172 + 16))(v152, v108, v105);
    uint64_t v110 = v146;
    uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t))(v146 + 16);
    uint64_t v112 = v78;
    uint64_t v113 = v78;
    uint64_t v114 = v147;
    v111(v155, v112, v147);
    uint64_t v115 = v151;
    v111(v151, v113, v114);
    uint64_t v116 = swift_bridgeObjectRetain_n(v104, 2LL);
    uint64_t v117 = (os_log_s *)Logger.logObject.getter(v116);
    os_log_type_t v118 = static os_log_type_t.default.getter();
    int v119 = v118;
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v121 = swift_slowAlloc(42LL, -1LL);
      uint64_t v171 = (char *)swift_slowAlloc(128LL, -1LL);
      uint64_t aBlock = v171;
      *(_DWORD *)uint64_t v121 = 136315906;
      LODWORD(v170) = v119;
      uint64_t v122 = _typeName(_:qualified:)(v165, 0LL);
      os_log_t v177 = (void *)sub_10015ADC4(v122, v123, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v121 + 4, v121 + 12);
      uint64_t v124 = swift_bridgeObjectRelease();
      *(_WORD *)(v121 + 12) = 2080;
      unint64_t v125 = v155;
      uint64_t v126 = RoutingInteraction.identifier.getter(v124);
      os_log_t v177 = (void *)sub_10015ADC4(v126, v127, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v121 + 14, v121 + 22);
      swift_bridgeObjectRelease();
      uint64_t v128 = *(void (**)(char *, uint64_t))(v110 + 8);
      v128(v125, v114);
      *(_WORD *)(v121 + 22) = 2080;
      swift_bridgeObjectRetain();
      os_log_t v177 = (void *)sub_10015ADC4(v175, v104, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v121 + 24, v121 + 32);
      swift_bridgeObjectRelease_n(v104, 3LL);
      *(_WORD *)(v121 + 32) = 2080;
      uint64_t v129 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      unint64_t v130 = v117;
      uint64_t v131 = v151;
      uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter(v114, v129);
      os_log_t v177 = (void *)sub_10015ADC4(v132, v133, (uint64_t *)&aBlock);
      uint64_t v134 = v164;
      uint64_t v135 = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &aBlock, v121 + 34, v121 + 42);
      swift_bridgeObjectRelease();
      v128(v131, v114);
      _os_log_impl( (void *)&_mh_execute_header,  v130,  (os_log_type_t)v170,  "[%s] interactWithSession<%s> - session: %s produced interaction: %s",  (uint8_t *)v121,  0x2Au);
      uint64_t v136 = v171;
      swift_arrayDestroy(v171, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1LL, -1LL);
      swift_slowDealloc(v121, -1LL, -1LL);

      uint64_t v137 = v134;
      (*(void (**)(char *, uint64_t))(v172 + 8))(v152, v174);
      uint64_t v138 = v114;
    }

    else
    {
      uint64_t v128 = *(void (**)(char *, uint64_t))(v110 + 8);
      v128(v155, v114);
      swift_bridgeObjectRelease_n(v104, 2LL);
      v128(v115, v114);

      (*(void (**)(char *, uint64_t))(v172 + 8))(v109, v105);
      uint64_t v138 = v114;
      uint64_t v135 = v167;
      uint64_t v137 = v107;
    }

    uint64_t v139 = v148;
    uint64_t v140 = v158;
    uint64_t v141 = v160;
    sub_100255C60(v158, v148);
    uint64_t v142 = sub_100187ED8();
    uint64_t v143 = (*(uint64_t (**)(char *, char *, uint64_t *))(*(void *)v142 + 672LL))(v141, v135, v139);
    swift_release(v47);
    swift_release(v143);
    swift_release(v142);
    (*(void (**)(uint64_t *, uint64_t))(v149 + 8))(v139, v150);
    v128(v141, v138);
    sub_1001A813C(v140, type metadata accessor for HostedRoutingSessionSnapshot);
    return (*(uint64_t (**)(char *, uint64_t))(v166 + 8))(v135, v137);
  }

uint64_t sub_100190878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v101 = a3;
  uint64_t v102 = a5;
  uint64_t v105 = a2;
  uint64_t v106 = a4;
  uint64_t v104 = a1;
  uint64_t v92 = *v6;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v98 = *(void *)(v8 - 8);
  uint64_t v99 = (void *)v8;
  __chkstk_darwin(v8);
  uint64_t v97 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v94 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RoutingDialog.Action(0LL);
  uint64_t v12 = *(char **)(v11 - 8);
  uint64_t v13 = *((void *)v12 + 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for Logger(0LL);
  uint64_t v103 = *(void *)(v93 - 8);
  uint64_t v15 = __chkstk_darwin(v93);
  uint64_t v100 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  os_log_type_t v91 = (char *)&v90 - v17;
  uint64_t v18 = sub_100156B68(&qword_1003F8E80);
  __chkstk_darwin(v18);
  unint64_t v90 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char **)((char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = (void *)*sub_100216E68();
  if ((a6 & 1) == 0)
  {
    (*((void (**)(char *, uint64_t, uint64_t))v12 + 2))( (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v101,  v11);
    uint64_t v51 = v12[80];
    uint64_t v52 = (v51 + 40) & ~v51;
    unint64_t v53 = (v13 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v54 = (char *)swift_allocObject(&unk_1003A47E0, v53 + 16, v51 | 7);
    uint64_t v55 = v104;
    uint64_t v56 = v105;
    *((void *)v54 + 2) = v6;
    *((void *)v54 + 3) = v55;
    *((void *)v54 + 4) = v56;
    (*((void (**)(char *, char *, uint64_t))v12 + 4))(&v54[v52], v14, v11);
    uint64_t v57 = (uint64_t *)&v54[v53];
    uint64_t v58 = v106;
    uint64_t v59 = v102;
    uint64_t *v57 = v106;
    v57[1] = v59;
    v110[3] = sub_1001A24D0;
    uint64_t v111 = v54;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v110[0] = 1107296256LL;
    v110[1] = sub_100157EA8;
    v110[2] = &unk_1003A47F8;
    uint64_t v60 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v58);
    swift_bridgeObjectRetain();
    id v61 = v24;
    uint64_t v62 = swift_retain(v6);
    unint64_t v63 = v94;
    static DispatchQoS.unspecified.getter(v62);
    uint64_t v107 = _swiftEmptyArrayStorage;
    uint64_t v64 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v65 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v66 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    id v67 = v97;
    uint64_t v68 = v99;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v65, v66, v99, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v63, v67, v60);
    _Block_release(v60);

    (*(void (**)(char *, void *))(v98 + 8))(v67, v68);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v63, v96);
    return swift_release(v111);
  }

  uint64_t v25 = v106;
  uint64_t v97 = v12;
  uint64_t v98 = v11;
  uint64_t v99 = v6;
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = v24;
  uint64_t v27 = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if ((v27 & 1) != 0)
  {
    uint64_t v27 = (uint64_t)sub_100187CE0();
    if (!((unint64_t)v27 >> 62))
    {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v29 = (void *)v25;
      swift_unknownObjectRetain(v25);
      swift_bridgeObjectRetain();
      uint64_t v30 = v103;
      if (v28) {
        goto LABEL_5;
      }
LABEL_13:
      swift_bridgeObjectRelease_n(v27, 2LL);
      swift_unknownObjectRelease(v29);
      uint64_t v35 = sub_1001741A8();
      uint64_t v36 = v100;
      uint64_t v37 = v93;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v100, v35, v93);
      swift_unknownObjectRetain_n(v29, 2LL);
      uint64_t v38 = v30;
      unint64_t v39 = v105;
      uint64_t v40 = swift_bridgeObjectRetain_n(v105, 2LL);
      unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc(32LL, -1LL);
        uint64_t v44 = (void *)swift_slowAlloc(96LL, -1LL);
        uint64_t v107 = v44;
        *(_DWORD *)uint64_t v43 = 136315650;
        uint64_t v45 = _typeName(_:qualified:)(v92, 0LL);
        uint64_t aBlock = sub_10015ADC4(v45, v46, (uint64_t *)&v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((void **)&aBlock, v110, v43 + 4, v43 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t aBlock = sub_10015ADC4(v104, v39, (uint64_t *)&v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((void **)&aBlock, v110, v43 + 14, v43 + 22);
        swift_bridgeObjectRelease_n(v39, 3LL);
        *(_WORD *)(v43 + 22) = 2080;
        uint64_t aBlock = (uint64_t)v29;
        v110[0] = v102;
        swift_unknownObjectRetain(v29);
        uint64_t v47 = sub_100156B68(&qword_1003F8E60);
        uint64_t v48 = String.init<A>(describing:)((void **)&aBlock, v47);
        uint64_t aBlock = sub_10015ADC4(v48, v49, (uint64_t *)&v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)((void **)&aBlock, v110, v43 + 24, v43 + 32);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n(v29, 2LL);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[%s] interactWithDialog - dialog: %s, No internal client found matching client: %s",  (uint8_t *)v43,  0x20u);
        swift_arrayDestroy(v44, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);

        return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v100, v37);
      }

      swift_bridgeObjectRelease_n(v39, 2LL);
      swift_unknownObjectRelease_n(v29, 2LL);

      uint64_t v69 = *(uint64_t (**)(void, void))(v38 + 8);
      return v69(v36, v37);
    }
  }

  else
  {
LABEL_26:
    __break(1u);
  }

  if (v27 < 0) {
    uint64_t v89 = v27;
  }
  else {
    uint64_t v89 = v27 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v29 = (void *)v25;
  swift_unknownObjectRetain(v25);
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v89);
  uint64_t v30 = v103;
  if (!v28) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v25 = 4LL;
  while (1)
  {
    uint64_t v31 = v25 - 4;
    if ((v27 & 0xC000000000000001LL) != 0)
    {
      uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v27);
      BOOL v33 = __OFADD__(v31, 1LL);
      uint64_t v34 = v25 - 3;
      if (v33) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v32 = *(void *)(v27 + 8 * v25);
      swift_retain(v32);
      BOOL v33 = __OFADD__(v31, 1LL);
      uint64_t v34 = v25 - 3;
      if (v33)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }

    if (*(void **)(v32
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == v29)
      break;
    swift_release(v32);
    ++v25;
    if (v34 == v28) {
      goto LABEL_13;
    }
  }

  swift_bridgeObjectRelease_n(v27, 2LL);
  swift_unknownObjectRelease(v29);
  swift_retain(v32);
  uint64_t v70 = sub_100187DAC((void **)&aBlock);
  uint64_t v71 = sub_1001912D8(&v107, v32);
  if (*v72)
  {
    uint64_t v74 = v104;
    unint64_t v73 = v105;
    uint64_t v75 = (void (*)(void, void))sub_1001A0964(v104, v105);
    uint64_t v77 = v76;
    ((void (*)(void **, void))v71)(&v107, 0LL);
    swift_release(v32);
    ((void (*)(void **, void))v70)((void **)&aBlock, 0LL);
    uint64_t v37 = v93;
    if (v75)
    {
      os_log_t v79 = v97;
      uint64_t v78 = v98;
      uint64_t v80 = (uint64_t)v90;
      (*((void (**)(char *, uint64_t, uint64_t))v97 + 2))(v90, v101, v98);
      (*((void (**)(uint64_t, void, uint64_t, uint64_t))v79 + 7))(v80, 0LL, 1LL, v78);
      uint64_t aBlock = 0LL;
      v75(v80, (void **)&aBlock);
      sub_100162944((uint64_t)v75, v77);
      swift_release(v32);
      return sub_1001603DC(v80, &qword_1003F8E80);
    }
  }

  else
  {
    ((void (*)(void **, void))v71)(&v107, 0LL);
    swift_release(v32);
    ((void (*)(void **, void))v70)((void **)&aBlock, 0LL);
    uint64_t v37 = v93;
    uint64_t v74 = v104;
    unint64_t v73 = v105;
  }

  uint64_t v81 = sub_1001741A8();
  uint64_t v36 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v91, v81, v37);
  uint64_t v82 = swift_bridgeObjectRetain_n(v73, 4LL);
  uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
  os_log_type_t v84 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = swift_slowAlloc(96LL, -1LL);
    uint64_t aBlock = v106;
    *(_DWORD *)uint64_t v85 = 136315650;
    uint64_t v86 = _typeName(_:qualified:)(v92, 0LL);
    uint64_t v107 = (void *)sub_10015ADC4(v86, v87, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v85 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v107 = (void *)sub_10015ADC4(v74, v73, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v85 + 14, v85 + 22);
    swift_bridgeObjectRelease_n(v73, 3LL);
    *(_WORD *)(v85 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v107 = (void *)sub_10015ADC4(v74, v73, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v85 + 24, v85 + 32);
    swift_bridgeObjectRelease_n(v73, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "[%s] interactWithDialog - dialog: %s, No pending interaction found for identifier: %s",  (uint8_t *)v85,  0x20u);
    uint64_t v88 = v106;
    swift_arrayDestroy(v106, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1LL, -1LL);
    swift_slowDealloc(v85, -1LL, -1LL);

    swift_release(v32);
    return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v91, v37);
  }

  swift_release(v32);
  swift_bridgeObjectRelease_n(v73, 4LL);

  uint64_t v69 = *(uint64_t (**)(void, void))(v30 + 8);
  return v69(v36, v37);
}

void (*sub_1001912D8(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[4] = a2;
  swift_retain(a2);
  void v4[5] = sub_1001A36B4(v4, a2);
  return sub_100191334;
}

void sub_100191334(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  swift_release(v2);
  free(v1);
}

uint64_t sub_10019136C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v163) = a4;
  uint64_t v160 = a3;
  uint64_t v164 = a1;
  uint64_t v142 = *v4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v157 = *(void *)(v7 - 8);
  uint64_t v158 = (char *)v7;
  __chkstk_darwin(v7);
  uint64_t v156 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v154 = *(void *)(v9 - 8);
  uint64_t v155 = v9;
  __chkstk_darwin(v9);
  os_log_t v153 = (os_log_t)((char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v141 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (uint64_t)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingControl(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v150 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v133 - v17;
  __chkstk_darwin(v16);
  uint64_t v144 = (char *)&v133 - v19;
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v161 = v20;
  uint64_t v162 = v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v159 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  BOOL v145 = (char *)&v133 - v24;
  uint64_t v136 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v134 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v135 = (uint64_t *)((char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v151 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v143 = *(void *)(v151 - 8);
  uint64_t v26 = __chkstk_darwin(v151);
  uint64_t v138 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v137 = (char *)&v133 - v29;
  __chkstk_darwin(v28);
  uint64_t v148 = (char *)&v133 - v30;
  uint64_t v147 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v152 = (char *)&v133 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v35 = (uint64_t *)((char *)&v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = (void *)*sub_100216E68();
  if ((v163 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v164, v12);
    uint64_t v66 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v67 = (v66 + 24) & ~v66;
    unint64_t v68 = (v14 + v67 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v69 = swift_allocObject(&unk_1003A4830, v68 + 16, v66 | 7);
    *(void *)(v69 + swift_weakDestroy(v0 + 16) = v5;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v69 + v67, v18, v12);
    uint64_t v70 = (uint64_t *)(v69 + v68);
    uint64_t v71 = v160;
    uint64_t *v70 = a2;
    v70[1] = v71;
    v167[3] = sub_1001A2544;
    uint64_t v168 = v69;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v167[0] = 1107296256LL;
    v167[1] = sub_100157EA8;
    v167[2] = &unk_1003A4848;
    unint64_t v72 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(a2);
    id v73 = v36;
    uint64_t v74 = swift_retain(v5);
    os_log_t v75 = v153;
    static DispatchQoS.unspecified.getter(v74);
    uint64_t v165 = _swiftEmptyArrayStorage;
    uint64_t v76 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v77 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v78 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    os_log_t v79 = v156;
    uint64_t v80 = v158;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v165, v77, v78, v158, v76);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v75, v79, v72);
    _Block_release(v72);

    (*(void (**)(char *, char *))(v157 + 8))(v79, v80);
    (*(void (**)(os_log_t, uint64_t))(v154 + 8))(v75, v155);
    return swift_release(v168);
  }

  uint64_t v157 = v14;
  uint64_t v158 = v18;
  uint64_t v163 = v5;
  uint64_t v149 = v13;
  *uint64_t v35 = v36;
  (*(void (**)(void *, void, uint64_t))(v33 + 104))(v35, enum case for DispatchPredicate.onQueue(_:), v32);
  id v37 = v36;
  uint64_t v38 = _dispatchPreconditionTest(_:)(v35);
  (*(void (**)(void *, uint64_t))(v33 + 8))(v35, v32);
  if ((v38 & 1) != 0)
  {
    uint64_t v38 = (uint64_t)sub_100187CE0();
    if (!((unint64_t)v38 >> 62))
    {
      uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v40 = v159;
      if (v39) {
        goto LABEL_5;
      }
LABEL_13:
      swift_unknownObjectRelease(a2);
      swift_bridgeObjectRelease_n(v38, 2LL);
      uint64_t v46 = sub_1001741A8();
      uint64_t v47 = v161;
      uint64_t v48 = v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v40, v46, v161);
      uint64_t v49 = v149;
      uint64_t v50 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v150, v164, v12);
      uint64_t v51 = swift_unknownObjectRetain_n(a2, 2LL);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.error.getter();
      int v54 = v53;
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        uint64_t v56 = (void *)swift_slowAlloc(96LL, -1LL);
        uint64_t v165 = v56;
        *(_DWORD *)uint64_t v55 = 136315650;
        LODWORD(v164) = v54;
        uint64_t v57 = _typeName(_:qualified:)(v142, 0LL);
        uint64_t aBlock = sub_10015ADC4(v57, v58, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v167, v55 + 4, v55 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v55 + 12) = 2080;
        uint64_t v59 = sub_100156FEC( &qword_1003F8900,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl,  (uint64_t)&protocol conformance descriptor for RoutingControl);
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v12, v59);
        uint64_t aBlock = sub_10015ADC4(v60, v61, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v167, v55 + 14, v55 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v149 + 8))(v50, v12);
        *(_WORD *)(v55 + 22) = 2080;
        uint64_t aBlock = a2;
        v167[0] = v160;
        swift_unknownObjectRetain(a2);
        uint64_t v62 = sub_100156B68(&qword_1003F8E60);
        uint64_t v63 = String.init<A>(describing:)(&aBlock, v62);
        uint64_t aBlock = sub_10015ADC4(v63, v64, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v167, v55 + 24, v55 + 32);
        swift_unknownObjectRelease_n(a2, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v164,  "[%s] interactWithControl - control: %s, No internal client found matching client: %s",  (uint8_t *)v55,  0x20u);
        swift_arrayDestroy(v56, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);

        return (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v159, v161);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v12);

        swift_unknownObjectRelease_n(a2, 2LL);
        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v40, v47);
      }
    }
  }

  else
  {
LABEL_22:
    __break(1u);
  }

  if (v38 < 0) {
    uint64_t v132 = v38;
  }
  else {
    uint64_t v132 = v38 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_unknownObjectRetain(a2);
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v132);
  uint64_t v40 = v159;
  if (!v39) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v41 = 4LL;
  while (1)
  {
    uint64_t v42 = v41 - 4;
    if ((v38 & 0xC000000000000001LL) != 0)
    {
      uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(v41 - 4, v38);
      BOOL v44 = __OFADD__(v42, 1LL);
      uint64_t v45 = v41 - 3;
      if (v44) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v43 = *(void *)(v38 + 8 * v41);
      swift_retain(v43);
      BOOL v44 = __OFADD__(v42, 1LL);
      uint64_t v45 = v41 - 3;
      if (v44)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
    }

    if (*(void *)(v43
                   + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == a2)
      break;
    swift_release(v43);
    ++v41;
    if (v45 == v39) {
      goto LABEL_13;
    }
  }

  swift_unknownObjectRelease(a2);
  swift_bridgeObjectRelease_n(v38, 2LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))( v152,  v43 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v147);
  uint64_t v81 = v12;
  uint64_t v82 = swift_allocBox(v12);
  uint64_t v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16);
  uint64_t v84 = v164;
  v83(v85, v164, v12);
  uint64_t v86 = v135;
  uint64_t *v135 = v82;
  (*(void (**)(uint64_t *, void, uint64_t))(v134 + 104))( v86,  enum case for RoutingInteraction.Action.control(_:),  v136);
  unint64_t v87 = v148;
  RoutingInteraction.init(action:)(v86);
  uint64_t v88 = sub_1001741A8();
  uint64_t v89 = v161;
  (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v145, v88, v161);
  unint64_t v90 = *(void (**)(char *, char *, uint64_t))(v143 + 16);
  os_log_type_t v91 = v137;
  uint64_t v92 = v151;
  v90(v137, v87, v151);
  uint64_t v159 = (char *)v83;
  uint64_t v160 = v81;
  v83((uint64_t)v144, v84, v81);
  uint64_t v93 = v138;
  uint64_t v94 = ((uint64_t (*)(char *, char *, uint64_t))v90)(v138, v87, v92);
  uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.default.getter();
  int v97 = v96;
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v98 = swift_slowAlloc(42LL, -1LL);
    uint64_t v155 = swift_slowAlloc(128LL, -1LL);
    uint64_t aBlock = v155;
    *(_DWORD *)uint64_t v98 = 136315906;
    LODWORD(v154) = v97;
    uint64_t v99 = _typeName(_:qualified:)(v142, 0LL);
    uint64_t v165 = (void *)sub_10015ADC4(v99, v100, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &aBlock, v98 + 4, v98 + 12);
    uint64_t v101 = swift_bridgeObjectRelease();
    *(_WORD *)(v98 + 12) = 2080;
    uint64_t v102 = RoutingInteraction.identifier.getter(v101);
    uint64_t v165 = (void *)sub_10015ADC4(v102, v103, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &aBlock, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease();
    uint64_t v104 = *(void (**)(char *, uint64_t))(v143 + 8);
    v104(v91, v151);
    *(_WORD *)(v98 + 22) = 2080;
    uint64_t v105 = sub_100156FEC( &qword_1003F8900,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingControl,  (uint64_t)&protocol conformance descriptor for RoutingControl);
    os_log_t v153 = v95;
    uint64_t v106 = v144;
    uint64_t v107 = v93;
    uint64_t v108 = v160;
    uint64_t v109 = dispatch thunk of CustomStringConvertible.description.getter(v160, v105);
    uint64_t v165 = (void *)sub_10015ADC4(v109, v110, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &aBlock, v98 + 24, v98 + 32);
    swift_bridgeObjectRelease();
    uint64_t v111 = v149;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v106, v108);
    *(_WORD *)(v98 + 32) = 2080;
    uint64_t v112 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v151, v112);
    uint64_t v165 = (void *)sub_10015ADC4(v113, v114, &aBlock);
    uint64_t v92 = v151;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &aBlock, v98 + 34, v98 + 42);
    swift_bridgeObjectRelease();
    uint64_t v156 = (char *)v104;
    v104(v107, v92);
    os_log_t v115 = v153;
    _os_log_impl( (void *)&_mh_execute_header,  v153,  (os_log_type_t)v154,  "[%s] interactWithControl<%s> - control: %s produced interaction: %s",  (uint8_t *)v98,  0x2Au);
    uint64_t v116 = v155;
    swift_arrayDestroy(v155, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1LL, -1LL);
    uint64_t v117 = v98;
    uint64_t v84 = v164;
    swift_slowDealloc(v117, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v162 + 8))(v145, v161);
  }

  else
  {
    os_log_type_t v118 = *(void (**)(char *, uint64_t))(v143 + 8);
    v118(v91, v92);
    uint64_t v111 = v149;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v144, v160);
    uint64_t v156 = (char *)v118;
    v118(v93, v92);

    (*(void (**)(char *, uint64_t))(v162 + 8))(v145, v89);
  }

  uint64_t v120 = v157;
  int v119 = v158;
  uint64_t v121 = sub_100187ED8();
  uint64_t v122 = v139;
  sub_100265B8C(v139);
  unint64_t v123 = v148;
  uint64_t v124 = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)v121 + 672LL))(v148, v152, v122);
  swift_release(v121);
  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v122, v141);
  uint64_t aBlock = v124;
  uint64_t v125 = swift_allocObject(&unk_1003A46F0, 24LL, 7LL);
  swift_weakInit(v125 + 16, v43);
  uint64_t v126 = v160;
  ((void (*)(char *, uint64_t, uint64_t))v159)(v119, v84, v160);
  uint64_t v127 = *(unsigned __int8 *)(v111 + 80);
  uint64_t v128 = (v127 + 24) & ~v127;
  uint64_t v129 = swift_allocObject(&unk_1003A4880, v128 + v120, v127 | 7);
  *(void *)(v129 + swift_weakDestroy(v0 + 16) = v125;
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v129 + v128, v119, v126);
  uint64_t v130 = sub_100156B68(&qword_1003F8EB0);
  uint64_t v131 = sub_1001604E8(&qword_1003F8EB8, &qword_1003F8EB0, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  sub_100156640((uint64_t)sub_1001A261C, v129, v130, v131);
  swift_release(v43);
  swift_release(v129);
  swift_release(aBlock);
  ((void (*)(char *, uint64_t))v156)(v123, v92);
  return (*(uint64_t (**)(char *, uint64_t))(v146 + 8))(v152, v147);
}

uint64_t sub_1001921B4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v79 = a3;
  uint64_t v80 = a1;
  uint64_t v81 = a2;
  uint64_t v70 = *v4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v77 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v76 = (void (**)(uint64_t, char *, uint64_t))((char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v74 = *(void *)(v8 - 8);
  os_log_t v75 = (char *)v8;
  __chkstk_darwin(v8);
  id v73 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v71 = *(void *)(v10 - 8);
  uint64_t v72 = v10;
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingMode(0LL);
  uint64_t v13 = *(char **)(v12 - 8);
  uint64_t v14 = *((void *)v13 + 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = (void *)*sub_100216E68();
  if ((a4 & 1) != 0)
  {
    uint64_t v22 = v80;
    uint64_t v21 = v81;
    os_log_t v75 = v15;
    uint64_t v76 = (void (**)(uint64_t, char *, uint64_t))v13;
    uint64_t v77 = v12;
    *uint64_t v19 = v20;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
    id v23 = v20;
    char v24 = _dispatchPreconditionTest(_:)(v19);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    if ((v24 & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v16 = (uint64_t)sub_100187CE0();
    if ((unint64_t)v16 >> 62)
    {
LABEL_21:
      if (v16 < 0) {
        uint64_t v68 = v16;
      }
      else {
        uint64_t v68 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_unknownObjectRetain(v21);
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v68);
      uint64_t v26 = v22;
      if (v25) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v25 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_unknownObjectRetain(v21);
      swift_bridgeObjectRetain();
      uint64_t v26 = v22;
      if (v25)
      {
LABEL_5:
        uint64_t v27 = 4LL;
        do
        {
          uint64_t v28 = v27 - 4;
          if ((v16 & 0xC000000000000001LL) != 0)
          {
            uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(v27 - 4, v16);
            BOOL v30 = __OFADD__(v28, 1LL);
            uint64_t v22 = v27 - 3;
            if (v30) {
              goto LABEL_19;
            }
          }

          else
          {
            uint64_t v29 = *(void *)(v16 + 8 * v27);
            swift_retain(v29);
            BOOL v30 = __OFADD__(v28, 1LL);
            uint64_t v22 = v27 - 3;
            if (v30)
            {
LABEL_19:
              __break(1u);
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
          }

          if (*(void *)(v29
                         + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == v21)
          {
            swift_unknownObjectRelease(v21);
            swift_bridgeObjectRelease_n(v16, 2LL);
            uint64_t v65 = v75;
            unint64_t v64 = v76;
            uint64_t v66 = v77;
            v76[2]((uint64_t)v75, (char *)v26, v77);
            uint64_t v67 = v29
                + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode;
            swift_beginAccess( v29 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode,  &aBlock,  33LL,  0LL);
            v64[5](v67, v65, v66);
            swift_endAccess(&aBlock);
            sub_100193B84();
            uint64_t v63 = v29;
            return swift_release(v63);
          }

          swift_release(v29);
          ++v27;
        }

        while (v22 != v25);
      }
    }

    swift_unknownObjectRelease(v21);
    swift_bridgeObjectRelease_n(v16, 2LL);
    uint64_t v31 = sub_1001741A8();
    uint64_t v33 = v71;
    uint64_t v32 = v72;
    uint64_t v34 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v78, v31, v72);
    uint64_t v35 = swift_unknownObjectRetain_n(v21, 2LL);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t v83 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      uint64_t v40 = _typeName(_:qualified:)(v70, 0LL);
      uint64_t aBlock = sub_10015ADC4(v40, v41, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v85, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      uint64_t aBlock = v21;
      v85[0] = v79;
      swift_unknownObjectRetain(v21);
      uint64_t v42 = sub_100156B68(&qword_1003F8E60);
      uint64_t v43 = String.init<A>(describing:)(&aBlock, v42);
      uint64_t aBlock = sub_10015ADC4(v43, v44, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v85, v38 + 14, v38 + 22);
      swift_unknownObjectRelease_n(v21, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "[%s] setRoutingMode - No internal client found matching client: %s",  (uint8_t *)v38,  0x16u);
      swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v78, v32);
    }

    else
    {

      swift_unknownObjectRelease_n(v21, 2LL);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    }
  }

  else
  {
    (*((void (**)(char *, uint64_t, uint64_t))v13 + 2))( (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v80,  v12);
    uint64_t v46 = v13[80];
    uint64_t v47 = (v46 + 24) & ~v46;
    unint64_t v48 = (v14 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v49 = swift_allocObject(&unk_1003A48A8, v48 + 16, v46 | 7);
    uint64_t v50 = v82;
    *(void *)(v49 + swift_weakDestroy(v0 + 16) = v82;
    (*((void (**)(uint64_t, char *, uint64_t))v13 + 4))(v49 + v47, v15, v12);
    uint64_t v51 = (uint64_t *)(v49 + v48);
    uint64_t v52 = v81;
    uint64_t v53 = v79;
    uint64_t *v51 = v81;
    v51[1] = v53;
    v85[3] = sub_1001A2800;
    uint64_t v86 = v49;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v85[0] = 1107296256LL;
    v85[1] = sub_100157EA8;
    v85[2] = &unk_1003A48C0;
    int v54 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(v52);
    uint64_t v55 = v6;
    id v56 = v20;
    uint64_t v57 = swift_retain(v50);
    unint64_t v58 = v73;
    static DispatchQoS.unspecified.getter(v57);
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v59 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v60 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v61 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v62 = (char *)v76;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v60, v61, v55, v59);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v58, v62, v54);
    _Block_release(v54);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v62, v55);
    (*(void (**)(char *, char *))(v74 + 8))(v58, v75);
    uint64_t v63 = v86;
    return swift_release(v63);
  }

uint64_t sub_10019285C(int a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v64 = a3;
  int v63 = a1;
  uint64_t v56 = *v4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v61 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v60 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v57 = v13;
  uint64_t v58 = v14;
  __chkstk_darwin(v13);
  uint64_t v62 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = (void *)*sub_100216E68();
  if ((a4 & 1) != 0)
  {
    *uint64_t v19 = v20;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
    id v21 = v20;
    uint64_t v22 = _dispatchPreconditionTest(_:)(v19);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    if ((v22 & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v22 = (uint64_t)sub_100187CE0();
    if ((unint64_t)v22 >> 62)
    {
LABEL_21:
      if (v22 < 0) {
        uint64_t v55 = v22;
      }
      else {
        uint64_t v55 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v55);
      uint64_t v24 = v58;
      if (v23) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v24 = v58;
      if (v23)
      {
LABEL_5:
        uint64_t v25 = 4LL;
        do
        {
          uint64_t v26 = v25 - 4;
          if ((v22 & 0xC000000000000001LL) != 0)
          {
            uint64_t v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v22);
            BOOL v28 = __OFADD__(v26, 1LL);
            uint64_t v29 = v25 - 3;
            if (v28) {
              goto LABEL_19;
            }
          }

          else
          {
            uint64_t v27 = *(void *)(v22 + 8 * v25);
            swift_retain(v27);
            BOOL v28 = __OFADD__(v26, 1LL);
            uint64_t v29 = v25 - 3;
            if (v28)
            {
LABEL_19:
              __break(1u);
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
          }

          if (*(void *)(v27
                         + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == a2)
          {
            swift_unknownObjectRelease(a2);
            swift_bridgeObjectRelease_n(v22, 2LL);
            uint64_t v53 = *(void *)(v27
                            + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
            char v54 = *(_BYTE *)(v53 + 16);
            *(_BYTE *)(v53 + swift_weakDestroy(v0 + 16) = v63 & 1;
            swift_retain(v53);
            sub_100186640(v54);
            swift_release(v53);
            sub_100194C40(v27);
            uint64_t v52 = v27;
            return swift_release(v52);
          }

          swift_release(v27);
          ++v25;
        }

        while (v29 != v23);
      }
    }

    swift_unknownObjectRelease(a2);
    swift_bridgeObjectRelease_n(v22, 2LL);
    uint64_t v30 = sub_1001741A8();
    uint64_t v31 = v62;
    uint64_t v32 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v62, v30, v57);
    uint64_t v33 = swift_unknownObjectRetain_n(a2, 2LL);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v37 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t v65 = v37;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v38 = _typeName(_:qualified:)(v56, 0LL);
      uint64_t aBlock = sub_10015ADC4(v38, v39, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t aBlock = a2;
      v67[0] = v64;
      swift_unknownObjectRetain(a2);
      uint64_t v40 = sub_100156B68(&qword_1003F8E60);
      uint64_t v41 = String.init<A>(describing:)(&aBlock, v40);
      uint64_t aBlock = sub_10015ADC4(v41, v42, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v36 + 14, v36 + 22);
      swift_unknownObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "[%s] setUIPresented - No internal client found matching client: %s",  (uint8_t *)v36,  0x16u);
      swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v62, v32);
    }

    else
    {

      swift_unknownObjectRelease_n(a2, 2LL);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v31, v32);
    }
  }

  else
  {
    uint64_t v44 = swift_allocObject(&unk_1003A48F8, 48LL, 7LL);
    *(void *)(v44 + swift_weakDestroy(v0 + 16) = v4;
    *(_BYTE *)(v44 + 24) = v63 & 1;
    uint64_t v45 = v64;
    *(void *)(v44 + 32) = a2;
    *(void *)(v44 + 40) = v45;
    v67[3] = sub_1001A28A8;
    uint64_t v68 = v44;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v67[0] = 1107296256LL;
    v67[1] = sub_100157EA8;
    v67[2] = &unk_1003A4910;
    uint64_t v46 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(a2);
    id v47 = v20;
    uint64_t v48 = swift_retain(v4);
    static DispatchQoS.unspecified.getter(v48);
    uint64_t v65 = _swiftEmptyArrayStorage;
    uint64_t v49 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v50 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v51 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v65, v50, v51, v7, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v46);
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v61 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v60);
    uint64_t v52 = v68;
    return swift_release(v52);
  }

uint64_t sub_100192E54(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v66 = a3;
  uint64_t v58 = *v4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v64 = (void *)v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v59 = *(void *)(v14 - 8);
  uint64_t v60 = v14;
  __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = (void *)*sub_100216E68();
  if ((a4 & 1) != 0)
  {
    uint64_t v63 = a1;
    uint64_t v64 = v4;
    *uint64_t v19 = v20;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
    id v21 = v20;
    uint64_t v22 = _dispatchPreconditionTest(_:)(v19);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    if ((v22 & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v22 = (uint64_t)sub_100187CE0();
    if ((unint64_t)v22 >> 62)
    {
LABEL_21:
      if (v22 < 0) {
        uint64_t v57 = v22;
      }
      else {
        uint64_t v57 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter(v57);
      uint64_t v25 = v59;
      uint64_t v24 = v60;
      if (v23) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_unknownObjectRetain(a2);
      swift_bridgeObjectRetain();
      uint64_t v25 = v59;
      uint64_t v24 = v60;
      if (v23)
      {
LABEL_5:
        uint64_t v26 = 4LL;
        do
        {
          uint64_t v27 = v26 - 4;
          if ((v22 & 0xC000000000000001LL) != 0)
          {
            uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, v22);
            BOOL v29 = __OFADD__(v27, 1LL);
            uint64_t v30 = v26 - 3;
            if (v29) {
              goto LABEL_19;
            }
          }

          else
          {
            uint64_t v28 = *(void *)(v22 + 8 * v26);
            swift_retain(v28);
            BOOL v29 = __OFADD__(v27, 1LL);
            uint64_t v30 = v26 - 3;
            if (v29)
            {
LABEL_19:
              __break(1u);
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
          }

          if (*(void *)(v28
                         + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient) == a2)
          {
            swift_unknownObjectRelease(a2);
            swift_bridgeObjectRelease_n(v22, 2LL);
            uint64_t v55 = *(void *)(v28
                            + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
            uint64_t v56 = *(void *)(v55 + 24);
            *(void *)(v55 + 24) = v63;
            swift_retain(v55);
            swift_bridgeObjectRetain();
            sub_100186A70(v56);
            swift_release(v55);
            swift_bridgeObjectRelease();
            sub_100194C40(v28);
            uint64_t v54 = v28;
            return swift_release(v54);
          }

          swift_release(v28);
          ++v26;
        }

        while (v30 != v23);
      }
    }

    swift_unknownObjectRelease(a2);
    swift_bridgeObjectRelease_n(v22, 2LL);
    uint64_t v31 = sub_1001741A8();
    uint64_t v32 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v65, v31, v24);
    uint64_t v33 = swift_unknownObjectRetain_n(a2, 2LL);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v37 = (void *)swift_slowAlloc(64LL, -1LL);
      uint64_t v67 = v37;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v38 = _typeName(_:qualified:)(v58, 0LL);
      uint64_t aBlock = sub_10015ADC4(v38, v39, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v69, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      uint64_t aBlock = a2;
      v69[0] = v66;
      swift_unknownObjectRetain(a2);
      uint64_t v40 = sub_100156B68(&qword_1003F8E60);
      uint64_t v41 = String.init<A>(describing:)(&aBlock, v40);
      uint64_t aBlock = sub_10015ADC4(v41, v42, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v69, v36 + 14, v36 + 22);
      swift_unknownObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "[%s] setExpandedSessionIdentifiers - No internal client found matching client: %s",  (uint8_t *)v36,  0x16u);
      swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v65, v24);
    }

    else
    {

      swift_unknownObjectRelease_n(a2, 2LL);
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v32, v24);
    }
  }

  else
  {
    uint64_t v44 = (void *)swift_allocObject(&unk_1003A4948, 48LL, 7LL);
    v44[2] = v4;
    v44[3] = a1;
    uint64_t v45 = v66;
    v44[4] = a2;
    void v44[5] = v45;
    v69[3] = sub_1001A2914;
    uint64_t v70 = v44;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v69[0] = 1107296256LL;
    v69[1] = sub_100157EA8;
    v69[2] = &unk_1003A4960;
    uint64_t v46 = _Block_copy(&aBlock);
    swift_unknownObjectRetain(a2);
    swift_bridgeObjectRetain();
    id v47 = v20;
    uint64_t v48 = swift_retain(v4);
    static DispatchQoS.unspecified.getter(v48);
    uint64_t v67 = _swiftEmptyArrayStorage;
    uint64_t v49 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v50 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v51 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v52 = v50;
    uint64_t v53 = v64;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v52, v51, v64, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v46);
    _Block_release(v46);

    (*(void (**)(char *, void *))(v63 + 8))(v10, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v62);
    uint64_t v54 = (uint64_t)v70;
    return swift_release(v54);
  }

uint64_t sub_10019344C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100156B68(&qword_1003F8210);
  __chkstk_darwin(v3);
  uint64_t v71 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher(0LL);
  uint64_t v76 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68((uint64_t *)&unk_1003FBED0);
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1001741A8();
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v77 = v5;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v79 = (id)swift_slowAlloc(32LL, -1LL);
    id v19 = v79;
    *(_DWORD *)uint64_t v18 = 136315138;
    id v73 = v18 + 4;
    uint64_t v20 = _typeName(_:qualified:)(v2, 0LL);
    uint64_t v78 = sub_10015ADC4(v20, v21, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v73, v18 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] installNotificationObservers", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (qword_1003FEB10 != -1) {
    uint64_t result = swift_once(&qword_1003FEB10, sub_100187B14);
  }
  uint64_t v23 = qword_1003FEB18;
  uint64_t v24 = *(void *)(qword_1003FEB18 + 16);
  uint64_t v25 = &selRef_alertMessage;
  if (v24)
  {
    id v73 = (id)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    swift_bridgeObjectRetain();
    uint64_t v72 = v23;
    uint64_t v26 = v23 + 40;
    uint64_t v28 = v70;
    uint64_t v27 = (uint64_t)v71;
    BOOL v29 = v69;
    do
    {
      swift_bridgeObjectRetain();
      id v30 = [v73 defaultCenter];
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSNotificationCenter.publisher(for:object:)(v31, 0LL);

      uint64_t v32 = (void *)*sub_100216E68();
      id v79 = v32;
      uint64_t v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v27, 1LL, 1LL, v33);
      uint64_t v34 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v35 = sub_100156FEC( (unint64_t *)&unk_1003FBEE0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      unint64_t v36 = sub_100184978();
      id v37 = v32;
      uint64_t v38 = v77;
      Publisher.receive<A>(on:options:)(&v79, v27, v77, v34, v35, v36);
      sub_1001603DC(v27, &qword_1003F8210);

      (*(void (**)(char *, uint64_t))(v76 + 8))(v28, v38);
      uint64_t v39 = swift_allocObject(&unk_1003A4628, 24LL, 7LL);
      swift_weakInit(v39 + 16, v1);
      uint64_t v40 = sub_1001604E8( (unint64_t *)&qword_1003FBEF0,  (uint64_t *)&unk_1003FBED0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      uint64_t v41 = v75;
      uint64_t v42 = Publisher<>.sink(receiveValue:)(sub_1001A84A0, v39, v75, v40);
      swift_release(v39);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v29, v41);
      id v79 = sub_100187AD0();
      AnyCancellable.store(in:)(&v79);
      uint64_t v25 = &selRef_alertMessage;
      swift_release(v42);
      v1[2] = v79;
      swift_bridgeObjectRelease();
      v26 += 16LL;
      --v24;
    }

    while (v24);
    uint64_t result = swift_bridgeObjectRelease();
  }

  if (qword_1003FEB20 != -1) {
    uint64_t result = swift_once(&qword_1003FEB20, sub_100187C58);
  }
  uint64_t v72 = qword_1003FEB28;
  uint64_t v43 = *(void *)(qword_1003FEB28 + 16);
  if (v43)
  {
    id v68 = (id)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    id v67 = (id)objc_opt_self(&OBJC_CLASS___MRAVLocalEndpoint);
    swift_bridgeObjectRetain();
    uint64_t v44 = 0LL;
    uint64_t v45 = v70;
    uint64_t v46 = (uint64_t)v71;
    id v47 = v69;
    do
    {
      uint64_t v48 = *(void **)(v72 + 8 * v44++ + 32);
      id v49 = v48;
      id v73 = v49;
      id v50 = [v68 v25[414]];
      id v51 = [v67 sharedLocalEndpoint];
      NSNotificationCenter.publisher(for:object:)(v49, v51);

      uint64_t v52 = v1;
      uint64_t v53 = v43;
      uint64_t v54 = (void *)*sub_100216E68();
      id v79 = v54;
      uint64_t v55 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56LL))(v46, 1LL, 1LL, v55);
      uint64_t v56 = sub_10016083C(0LL, (unint64_t *)&qword_1003F9F50, &OBJC_CLASS___OS_dispatch_queue_ptr);
      uint64_t v57 = sub_100156FEC( (unint64_t *)&unk_1003FBEE0,  (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher,  (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
      unint64_t v58 = sub_100184978();
      id v59 = v54;
      uint64_t v60 = v77;
      Publisher.receive<A>(on:options:)(&v79, v46, v77, v56, v57, v58);
      sub_1001603DC(v46, &qword_1003F8210);

      uint64_t v61 = v60;
      uint64_t v43 = v53;
      uint64_t v1 = v52;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v45, v61);
      uint64_t v62 = swift_allocObject(&unk_1003A4628, 24LL, 7LL);
      swift_weakInit(v62 + 16, v52);
      uint64_t v63 = sub_1001604E8( (unint64_t *)&qword_1003FBEF0,  (uint64_t *)&unk_1003FBED0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      uint64_t v64 = v75;
      uint64_t v65 = Publisher<>.sink(receiveValue:)(sub_1001A86FC, v62, v75, v63);
      swift_release(v62);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v64);
      id v79 = sub_100187AD0();
      AnyCancellable.store(in:)(&v79);
      swift_release(v65);
      v1[2] = v79;

      uint64_t v25 = &selRef_alertMessage;
      swift_bridgeObjectRelease();
    }

    while (v43 != v44);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_100193B84()
{
  uint64_t v86 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v71 = *(void *)(v86 - 8);
  uint64_t v1 = __chkstk_darwin(v86);
  uint64_t v3 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v85 = (char *)&v70 - v4;
  uint64_t v87 = type metadata accessor for RoutingSessionConfiguration(0LL);
  int64_t v84 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v83 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for RoutingMode(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  os_log_type_t v16 = (char *)&v70 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t)&v70 - v17;
  uint64_t v72 = sub_100187ED8();
  uint64_t v89 = v7;
  id v19 = *(void (**)(char *))(v7 + 104);
  uint64_t v82 = v16;
  unsigned int v73 = enum case for RoutingMode.disabled(_:);
  v19(v16);
  uint64_t v88 = v0;
  uint64_t v20 = (uint64_t)sub_100187CE0();
  for (uint64_t i = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v39))
  {
    uint64_t v70 = v18;
    unint64_t v76 = v20 & 0xC000000000000001LL;
    unsigned int v77 = enum case for RoutingMode.detailed(_:);
    unsigned int v78 = enum case for RoutingMode.localNetwork(_:);
    unsigned int v79 = enum case for RoutingMode.prewarm(_:);
    uint64_t v18 = 4LL;
    uint64_t v74 = i;
    uint64_t v75 = v20;
    while (1)
    {
      uint64_t v23 = v18 - 4;
      if (!v76) {
        break;
      }
      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v20);
      uint64_t v25 = v18 - 3;
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_22;
      }
LABEL_11:
      uint64_t v80 = (char *)v25;
      unint64_t v81 = v24;
      uint64_t v26 = v24
          + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode;
      swift_beginAccess( v24 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode,  v91,  0LL,  0LL);
      uint64_t v27 = v89;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
      v28(v13, v26, v6);
      ((void (*)(char *, void, uint64_t))v19)(v10, v77, v6);
      char v29 = static RoutingMode.== infix(_:_:)(v13, v10);
      id v30 = *(void (**)(char *, uint64_t))(v27 + 8);
      v30(v10, v6);
      v30(v13, v6);
      if ((v29 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release(v81);
        uint64_t v38 = v82;
        v30(v82, v6);
        ((void (*)(char *, void, uint64_t))v19)(v38, v77, v6);
LABEL_21:
        uint64_t v18 = v70;
        goto LABEL_28;
      }

      v28(v13, v26, v6);
      ((void (*)(char *, void, uint64_t))v19)(v10, v78, v6);
      char v31 = static RoutingMode.== infix(_:_:)(v13, v10);
      v30(v10, v6);
      v30(v13, v6);
      if ((v31 & 1) != 0)
      {
        ((void (*)(char *, void, uint64_t))v19)(v13, v79, v6);
        char v32 = static RoutingMode.== infix(_:_:)(v82, v13);
        v30(v13, v6);
        if ((v32 & 1) != 0
          || (((void (*)(char *, void, uint64_t))v19)(v13, v73, v6),
              char v33 = static RoutingMode.== infix(_:_:)(v82, v13),
              v30(v13, v6),
              (v33 & 1) != 0))
        {
          uint64_t v34 = v82;
          v30(v82, v6);
          ((void (*)(char *, void, uint64_t))v19)(v34, v78, v6);
        }
      }

      v28(v13, v26, v6);
      ((void (*)(char *, void, uint64_t))v19)(v10, v79, v6);
      char v35 = static RoutingMode.== infix(_:_:)(v13, v10);
      v30(v10, v6);
      v30(v13, v6);
      if ((v35 & 1) != 0)
      {
        ((void (*)(char *, void, uint64_t))v19)(v13, v73, v6);
        char v36 = static RoutingMode.== infix(_:_:)(v82, v13);
        swift_release(v81);
        v30(v13, v6);
        uint64_t v22 = (char *)v74;
        if ((v36 & 1) != 0)
        {
          id v37 = v82;
          v30(v82, v6);
          ((void (*)(char *, void, uint64_t))v19)(v37, v79, v6);
        }
      }

      else
      {
        swift_release(v81);
        uint64_t v22 = (char *)v74;
      }

      ++v18;
      uint64_t v20 = v75;
      if (v80 == v22)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }

    uint64_t v24 = swift_retain(*(void *)(v20 + 8 * v18));
    uint64_t v25 = v18 - 3;
    if (!__OFADD__(v23, 1LL)) {
      goto LABEL_11;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    if (v20 < 0) {
      uint64_t v39 = v20;
    }
    else {
      uint64_t v39 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  swift_bridgeObjectRelease();
LABEL_28:
  (*(void (**)(uint64_t, char *, uint64_t))(v89 + 32))(v18, v82, v6);
  uint64_t v40 = v72;
  (*(void (**)(uint64_t))(*(void *)v72 + 312LL))(v18);
  swift_release(v40);
  uint64_t v41 = (uint64_t)sub_100187CE0();
  uint64_t v42 = v41;
  unint64_t v90 = &_swiftEmptySetSingleton;
  uint64_t v43 = v71;
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0) {
      uint64_t v55 = v41;
    }
    else {
      uint64_t v55 = v41 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v55);
    uint64_t v44 = result;
    if (result) {
      goto LABEL_30;
    }
  }

  else
  {
    uint64_t v44 = *(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v44)
    {
LABEL_30:
      if (v44 < 1) {
        goto LABEL_65;
      }
      uint64_t v46 = 0LL;
      uint64_t v80 = v3;
      unint64_t v81 = v42 & 0xC000000000000001LL;
      uint64_t v82 = (char *)v42;
      int64_t v47 = v84;
      uint64_t v48 = v87;
      do
      {
        uint64_t v53 = v44;
        if (v81)
        {
          uint64_t v49 = specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v42);
        }

        else
        {
          uint64_t v49 = *(void *)(v42 + 8 * v46 + 32);
          swift_retain(v49);
        }

        ++v46;
        id v50 = v83;
        uint64_t v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 16))( v83,  v49 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v48);
        uint64_t v52 = RoutingSessionConfiguration.itemTypes.getter(v51);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v48);
        sub_100194A1C(v52);
        swift_release(v49);
        uint64_t v44 = v53;
        uint64_t v42 = (uint64_t)v82;
      }

      while (v53 != v46);
      uint64_t result = swift_bridgeObjectRelease_n(v82, 2LL);
      uint64_t v54 = v90;
      uint64_t v3 = v80;
      goto LABEL_42;
    }
  }

  uint64_t result = swift_bridgeObjectRelease_n(v42, 2LL);
  uint64_t v54 = &_swiftEmptySetSingleton;
LABEL_42:
  int64_t v56 = 0LL;
  uint64_t v87 = (uint64_t)v54;
  unint64_t v58 = (char *)(v54 + 7);
  uint64_t v57 = v54[7];
  uint64_t v83 = v58;
  uint64_t v59 = 1LL << *(v58 - 24);
  uint64_t v60 = -1LL;
  if (v59 < 64) {
    uint64_t v60 = ~(-1LL << v59);
  }
  unint64_t v61 = v60 & v57;
  int64_t v84 = (unint64_t)(v59 + 63) >> 6;
  for (j = v86; ; uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v3, j))
  {
    if (v61)
    {
      unint64_t v63 = __clz(__rbit64(v61));
      v61 &= v61 - 1;
      unint64_t v64 = v63 | (v56 << 6);
      goto LABEL_46;
    }

    int64_t v67 = v56 + 1;
    if (__OFADD__(v56, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v67 >= v84) {
      return swift_release(v87);
    }
    unint64_t v68 = *(void *)&v83[8 * v67];
    ++v56;
    if (!v68)
    {
      int64_t v56 = v67 + 1;
      if (v67 + 1 >= v84) {
        return swift_release(v87);
      }
      unint64_t v68 = *(void *)&v83[8 * v56];
      if (!v68)
      {
        int64_t v56 = v67 + 2;
        if (v67 + 2 >= v84) {
          return swift_release(v87);
        }
        unint64_t v68 = *(void *)&v83[8 * v56];
        if (!v68) {
          break;
        }
      }
    }

LABEL_61:
    unint64_t v61 = (v68 - 1) & v68;
    unint64_t v64 = __clz(__rbit64(v68)) + (v56 << 6);
LABEL_46:
    uint64_t v65 = v85;
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))( v85,  *(void *)(v87 + 48) + *(void *)(v43 + 72) * v64,  j);
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v3, v65, j);
    uint64_t v66 = sub_100187ED8();
    __chkstk_darwin(v66);
    *(&v70 - 2) = (uint64_t)v3;
    sub_1001945E8(sub_1001A7E2C, (uint64_t)(&v70 - 4), v13);
    (*(void (**)(char *, char *))(*(void *)v66 + 664LL))(v13, v3);
    swift_release(v66);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v13, v6);
  }

  int64_t v69 = v67 + 3;
  if (v69 >= v84) {
    return swift_release(v87);
  }
  unint64_t v68 = *(void *)&v83[8 * v69];
  if (v68)
  {
    int64_t v56 = v69;
    goto LABEL_61;
  }

  while (1)
  {
    int64_t v56 = v69 + 1;
    if (__OFADD__(v69, 1LL)) {
      break;
    }
    if (v56 >= v84) {
      return swift_release(v87);
    }
    unint64_t v68 = *(void *)&v83[8 * v56];
    ++v69;
    if (v68) {
      goto LABEL_61;
    }
  }

    sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
    sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
LABEL_62:
    sub_1001A5A54(&v60, &v59, (uint64_t *)&v58);
    return 1LL;
  }

        uint64_t v51 = (v58 - 1) & v58;
        for (uint64_t i = __clz(__rbit64(v58)) + (v52 << 6); ; uint64_t i = v55 | (v52 << 6))
        {
          uint64_t v60 = 16 * i;
          unint64_t v61 = *(void *)(a1 + 56);
          uint64_t v62 = (uint64_t *)(*(void *)(a1 + 48) + v60);
          unint64_t v64 = *v62;
          unint64_t v63 = v62[1];
          uint64_t v65 = (uint64_t *)(v61 + v60);
          int64_t v67 = *v65;
          uint64_t v66 = v65[1];
          swift_bridgeObjectRetain_n(v63, 2LL);
          unint64_t v68 = swift_bridgeObjectRetain();
          sub_10015CAD4(v64, v63);
          if ((v69 & 1) == 0) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v63, 2LL);
          swift_bridgeObjectRelease();
          a1 = v109;
          if (!v51) {
            goto LABEL_48;
          }
LABEL_47:
          uint64_t v55 = __clz(__rbit64(v51));
          v51 &= v51 - 1;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = type metadata accessor for ConnectedParticipant();
        uint64_t v71 = swift_allocObject(v70, 96LL, 7LL);
        *(_WORD *)(v71 + 4_Block_object_dispose(va, 8) = 512;
        *(void *)(v71 + 72) = 0LL;
        *(void *)(v71 + 56) = &_swiftEmptyDictionarySingleton;
        *(void *)(v71 + 64) = 0LL;
        *(void *)(v71 + 32) = v67;
        *(void *)(v71 + 40) = v66;
        *(void *)(v71 + swift_weakDestroy(v0 + 16) = v64;
        *(void *)(v71 + 24) = v63;
        *(void *)(v71 + 8_Block_object_dispose(va, 8) = &off_1003AAF68;
        swift_unknownObjectUnownedInit(v71 + 80, v2);
        swift_beginAccess(v14, v112, 33LL, 0LL);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v2 + 56));
        unsigned int v73 = v2;
        uint64_t v2 = isUniquelyReferenced_nonNull_native;
        uint64_t v111 = *(void *)(v73 + 56);
        uint64_t v74 = v111;
        *(void *)(v73 + 56) = 0x8000000000000000LL;
        unint64_t v76 = sub_10015CAD4(v64, v63);
        unsigned int v77 = *(void *)(v74 + 16);
        unsigned int v78 = (v75 & 1) == 0;
        unsigned int v79 = v77 + v78;
        if (__OFADD__(v77, v78))
        {
          __break(1u);
          goto LABEL_82;
        }

        uint64_t v80 = v75;
        if (*(void *)(v74 + 24) < v79)
        {
          sub_100244C3C(v79, v2);
          unint64_t v81 = sub_10015CAD4(v64, v63);
          if ((v80 & 1) != (v82 & 1)) {
            goto LABEL_90;
          }
          unint64_t v76 = v81;
          uint64_t v2 = v111;
          if ((v80 & 1) == 0) {
            goto LABEL_73;
          }
LABEL_45:
          uint64_t v53 = *(void *)(v2 + 56);
          uint64_t v54 = 8 * v76;
          swift_release(*(void *)(v53 + v54));
          *(void *)(v53 + v54) = v71;
LABEL_46:
          *uint64_t v14 = v2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess(v112);
          uint64_t v2 = v108;
          a1 = v109;
          if (!v51) {
            continue;
          }
          goto LABEL_47;
        }

        if ((v2 & 1) != 0)
        {
          uint64_t v2 = v111;
          if ((v75 & 1) != 0) {
            goto LABEL_45;
          }
        }

        else
        {
          sub_100245A88();
          uint64_t v2 = v111;
          if ((v80 & 1) != 0) {
            goto LABEL_45;
          }
        }

LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

          swift_bridgeObjectRelease();

          __break(1u);
          goto LABEL_65;
        }

uint64_t sub_1001943A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))( v7,  a1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v4);
  uint64_t v9 = RoutingSessionConfiguration.itemTypes.getter(v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  LOBYTE(a2) = sub_100194464(a2, v9);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t sub_100194464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        v8 = sub_100156FEC( &qword_1003F94A0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType),  uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100156FEC( &qword_1003F94A8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_1001945E8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for RoutingMode(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  unint64_t v11 = &v37[-v10];
  uint64_t v13 = *(void (**)(void))(v12 + 104);
  uint64_t v48 = a3;
  unsigned int v38 = enum case for RoutingMode.disabled(_:);
  uint64_t v44 = v12;
  uint64_t v45 = (uint64_t (*)(uint64_t, void, uint64_t))v13;
  v13(a3);
  uint64_t v14 = (uint64_t)sub_100187CE0();
  for (uint64_t i = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter(v36))
  {
    uint64_t v49 = v9;
    unint64_t v50 = v14 & 0xC000000000000001LL;
    unsigned int v43 = enum case for RoutingMode.detailed(_:);
    unsigned int v46 = enum case for RoutingMode.localNetwork(_:);
    unsigned int v47 = enum case for RoutingMode.prewarm(_:);
    uint64_t v16 = 4LL;
    uint64_t v40 = a1;
    uint64_t v41 = a2;
    uint64_t v42 = v14;
    uint64_t v39 = i;
    while (1)
    {
      uint64_t v17 = v16 - 4;
      if (!v50) {
        break;
      }
      uint64_t v9 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v14);
      uint64_t v18 = v16 - 3;
      if (__OFADD__(v17, 1LL)) {
        goto LABEL_23;
      }
LABEL_11:
      uint64_t v51 = v18;
      if ((a1(v9) & 1) != 0)
      {
        uint64_t v19 = &v9[OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode];
        swift_beginAccess( &v9[OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_routingMode],  v52,  0LL,  0LL);
        uint64_t v20 = v44;
        unint64_t v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v44 + 16);
        v21(v11, v19, v6);
        uint64_t v22 = v49;
        uint64_t v23 = v45;
        v45((uint64_t)v49, v43, v6);
        char v24 = static RoutingMode.== infix(_:_:)(v11, v22);
        uint64_t v25 = *(void (**)(_BYTE *, uint64_t))(v20 + 8);
        v25(v22, v6);
        v25(v11, v6);
        if ((v24 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_release(v9);
          uint64_t v34 = v48;
          v25(v48, v6);
          return v23((uint64_t)v34, v43, v6);
        }

        v21(v11, v19, v6);
        v23((uint64_t)v22, v46, v6);
        char v26 = static RoutingMode.== infix(_:_:)(v11, v22);
        v25(v22, v6);
        v25(v11, v6);
        if ((v26 & 1) != 0)
        {
          v23((uint64_t)v11, v47, v6);
          char v27 = static RoutingMode.== infix(_:_:)(v48, v11);
          v25(v11, v6);
          if ((v27 & 1) != 0
            || (v23((uint64_t)v11, v38, v6),
                char v28 = static RoutingMode.== infix(_:_:)(v48, v11),
                v25(v11, v6),
                (v28 & 1) != 0))
          {
            char v29 = v48;
            v25(v48, v6);
            v23((uint64_t)v29, v46, v6);
          }
        }

        v21(v11, v19, v6);
        id v30 = v49;
        v23((uint64_t)v49, v47, v6);
        char v31 = static RoutingMode.== infix(_:_:)(v11, v30);
        v25(v30, v6);
        v25(v11, v6);
        if ((v31 & 1) != 0)
        {
          v23((uint64_t)v11, v38, v6);
          char v32 = static RoutingMode.== infix(_:_:)(v48, v11);
          swift_release(v9);
          v25(v11, v6);
          a1 = v40;
          a2 = v41;
          uint64_t v14 = v42;
          uint64_t i = v39;
          if ((v32 & 1) != 0)
          {
            char v33 = v48;
            v25(v48, v6);
            v45((uint64_t)v33, v47, v6);
          }
        }

        else
        {
          swift_release(v9);
          a1 = v40;
          a2 = v41;
          uint64_t v14 = v42;
          uint64_t i = v39;
        }
      }

      else
      {
        swift_release(v9);
      }

      ++v16;
      if (v51 == i) {
        return swift_bridgeObjectRelease();
      }
    }

    uint64_t v9 = *(_BYTE **)(v14 + 8 * v16);
    swift_retain(v9);
    uint64_t v18 = v16 - 3;
    if (!__OFADD__(v17, 1LL)) {
      goto LABEL_11;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    if (v14 < 0) {
      uint64_t v36 = v14;
    }
    else {
      uint64_t v36 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100194A1C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v24 - v11;
  int64_t v13 = 0LL;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v21 >= v18) {
      return swift_release(a1);
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v18) {
        return swift_release(a1);
      }
      unint64_t v22 = *(void *)(v25 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v18) {
          return swift_release(a1);
        }
        unint64_t v22 = *(void *)(v25 + 8 * v13);
        if (!v22)
        {
          int64_t v13 = v21 + 3;
          if (v21 + 3 >= v18) {
            return swift_release(a1);
          }
          unint64_t v22 = *(void *)(v25 + 8 * v13);
          if (!v22) {
            break;
          }
        }
      }
    }

uint64_t sub_100194C40(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v173 = (uint64_t *)&v169[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v174 = &v169[-v8];
  uint64_t v184 = sub_100156B68(&qword_1003F94B8);
  __chkstk_darwin(v184);
  uint64_t v202 = &v169[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = sub_100156B68(&qword_1003F94C0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v176 = &v169[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v178 = &v169[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v188 = &v169[-v16];
  __chkstk_darwin(v15);
  uint64_t v189 = &v169[-v17];
  uint64_t v191 = sub_100156B68(&qword_1003F94C8);
  __chkstk_darwin(v191);
  uint64_t v203 = &v169[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = sub_100156B68(&qword_1003FD0B0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v175 = &v169[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = __chkstk_darwin(v20);
  int v186 = &v169[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v187 = &v169[-v25];
  uint64_t v26 = __chkstk_darwin(v24);
  os_log_t v177 = &v169[-v27];
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v183 = &v169[-v29];
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v180 = &v169[-v31];
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = &v169[-v33];
  __chkstk_darwin(v32);
  uint64_t v36 = &v169[-v35];
  uint64_t v200 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  unint64_t v190 = *(void **)(v200 - 8);
  uint64_t v37 = __chkstk_darwin(v200);
  os_log_type_t v185 = &v169[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v181 = &v169[-v40];
  __chkstk_darwin(v39);
  uint64_t v204 = &v169[-v41];
  uint64_t v42 = type metadata accessor for Logger(0LL);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v193 = &v169[-((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v192 = &v169[-v47];
  __chkstk_darwin(v46);
  uint64_t v49 = &v169[-v48];
  uint64_t v50 = sub_1001741A8();
  uint64_t v194 = v43;
  uint64_t v51 = *(void (**)(void))(v43 + 16);
  uint64_t v196 = v50;
  uint64_t v197 = (void (*)(_BYTE *, uint64_t, uint64_t))v51;
  v51(v49);
  uint64_t v52 = swift_retain_n(a1, 2LL);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  int v55 = v54;
  BOOL v56 = os_log_type_enabled(v53, v54);
  uint64_t v201 = v4;
  uint64_t v195 = v5;
  uint64_t v182 = v3;
  if (v56)
  {
    uint64_t v57 = v3;
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v171 = swift_slowAlloc(64LL, -1LL);
    uint64_t v205 = v171;
    *(_DWORD *)uint64_t v58 = 136315394;
    uint64_t v172 = v34;
    uint64_t v59 = _typeName(_:qualified:)(v57, 0LL);
    int v170 = v55;
    uint64_t v206 = sub_10015ADC4(v59, v60, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 12) = 2080;
    swift_retain(a1);
    unint64_t v61 = v36;
    uint64_t v62 = sub_10018756C();
    unint64_t v64 = v63;
    swift_release(a1);
    uint64_t v65 = v62;
    uint64_t v36 = v61;
    uint64_t v206 = sub_10015ADC4(v65, v64, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v58 + 14, v58 + 22);
    swift_release_n(a1, 2LL);
    uint64_t v34 = v172;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v170,  "[%s] reloadSnapshot - Reload for: %s",  (uint8_t *)v58,  0x16u);
    uint64_t v66 = v171;
    swift_arrayDestroy(v171, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  uint64_t v194 = *(void *)(v194 + 8);
  ((void (*)(_BYTE *, uint64_t))v194)(v49, v42);
  uint64_t v67 = v42;
  unint64_t v68 = v198;
  sub_100196068(a1, (uint64_t)v204);
  swift_retain(a1);
  int64_t v69 = sub_100187D24();
  uint64_t v70 = v200;
  uint64_t v71 = v203;
  uint64_t v72 = v190;
  if (v69[2] && (unint64_t v73 = sub_1001A0A48(a1), (v74 & 1) != 0))
  {
    sub_1001A80F8(v69[7] + v72[9] * v73, (uint64_t)v36, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v75 = (void *)v72[7];
    ((void (*)(_BYTE *, void, uint64_t, uint64_t))v75)(v36, 0LL, 1LL, v70);
  }

  else
  {
    uint64_t v75 = (void *)v72[7];
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v75)(v36, 1LL, 1LL, v70);
  }

  swift_release(a1);
  swift_bridgeObjectRelease();
  sub_1001A80F8((uint64_t)v204, (uint64_t)v34, type metadata accessor for HostedRoutingSessionSnapshot);
  unint64_t v190 = v75;
  ((void (*)(_BYTE *, void, uint64_t, uint64_t))v75)(v34, 0LL, 1LL, v70);
  uint64_t v76 = (uint64_t)&v71[*(int *)(v191 + 48)];
  sub_1001A8360((uint64_t)v34, (uint64_t)v203, &qword_1003FD0B0);
  unsigned int v77 = v203;
  sub_1001A8360((uint64_t)v36, v76, &qword_1003FD0B0);
  unsigned int v78 = (_BYTE *)v72[6];
  int v79 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v78)(v77, 1LL, v70);
  uint64_t v199 = v36;
  if (v79 == 1)
  {
    sub_1001603DC((uint64_t)v34, &qword_1003FD0B0);
    uint64_t v80 = v67;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v76, 1LL, v70) == 1)
    {
      sub_1001603DC((uint64_t)v77, &qword_1003FD0B0);
LABEL_35:
      sub_1001603DC((uint64_t)v36, &qword_1003FD0B0);
      return sub_1001A813C((uint64_t)v204, type metadata accessor for HostedRoutingSessionSnapshot);
    }

    goto LABEL_13;
  }

  uint64_t v81 = (uint64_t)v34;
  uint64_t v82 = v180;
  sub_1001A8360((uint64_t)v77, (uint64_t)v180, &qword_1003FD0B0);
  uint64_t v80 = v67;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v78)(v76, 1LL, v70) == 1)
  {
    sub_1001603DC(v81, &qword_1003FD0B0);
    sub_1001A813C((uint64_t)v82, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v36 = v199;
LABEL_13:
    sub_1001603DC((uint64_t)v77, &qword_1003F94C8);
    uint64_t v83 = v192;
    goto LABEL_15;
  }

  int64_t v84 = v181;
  sub_1001A81D4(v76, (uint64_t)v181, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v85 = sub_100156FEC( &qword_1003F9498,  type metadata accessor for HostedRoutingSessionSnapshot,  (uint64_t)&unk_1003504D0);
  char v86 = dispatch thunk of static Equatable.== infix(_:_:)(v82, v84, v70, v85);
  sub_1001A813C((uint64_t)v84, type metadata accessor for HostedRoutingSessionSnapshot);
  sub_1001603DC(v81, &qword_1003FD0B0);
  sub_1001A813C((uint64_t)v82, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v83 = v192;
  sub_1001603DC((uint64_t)v203, &qword_1003FD0B0);
  uint64_t v36 = v199;
  if ((v86 & 1) != 0) {
    goto LABEL_35;
  }
LABEL_15:
  uint64_t v203 = v78;
  v197(v83, v196, v80);
  uint64_t v87 = swift_retain_n(a1, 2LL);
  uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
  os_log_type_t v89 = static os_log_type_t.info.getter();
  BOOL v90 = os_log_type_enabled(v88, v89);
  uint64_t v179 = v80;
  if (v90)
  {
    uint64_t v91 = swift_slowAlloc(22LL, -1LL);
    uint64_t v92 = swift_slowAlloc(64LL, -1LL);
    uint64_t v205 = v92;
    *(_DWORD *)uint64_t v91 = 136315394;
    uint64_t v93 = _typeName(_:qualified:)(v182, 0LL);
    uint64_t v206 = sub_10015ADC4(v93, v94, &v205);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v91 + 4, v91 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v91 + 12) = 2080;
    swift_retain(a1);
    uint64_t v95 = sub_10018756C();
    uint64_t v96 = a1;
    unint64_t v98 = v97;
    swift_release(v96);
    uint64_t v206 = sub_10015ADC4(v95, v98, &v205);
    uint64_t v70 = v200;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v206, &v207, v91 + 14, v91 + 22);
    swift_release_n(v96, 2LL);
    a1 = v96;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "[%s] reloadSnapshot - Update snapshot for: %s",  (uint8_t *)v91,  0x16u);
    swift_arrayDestroy(v92, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v99 = v92;
    unint64_t v68 = v198;
    swift_slowDealloc(v99, -1LL, -1LL);
    uint64_t v100 = v91;
    uint64_t v80 = v179;
    swift_slowDealloc(v100, -1LL, -1LL);

    uint64_t v101 = v192;
  }

  else
  {

    swift_release_n(a1, 2LL);
    uint64_t v101 = v83;
  }

  ((void (*)(_BYTE *, uint64_t))v194)(v101, v80);
  uint64_t v102 = v189;
  unint64_t v103 = v183;
  sub_1001A80F8((uint64_t)v204, (uint64_t)v183, type metadata accessor for HostedRoutingSessionSnapshot);
  ((void (*)(_BYTE *, void, uint64_t, uint64_t))v190)(v103, 0LL, 1LL, v70);
  swift_retain(a1);
  uint64_t v104 = sub_100187D24();
  uint64_t v205 = (uint64_t)v104;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v203)(v103, 1LL, v70) == 1)
  {
    sub_1001603DC((uint64_t)v103, &qword_1003FD0B0);
    uint64_t v105 = v177;
    sub_1001A03A8(a1, (uint64_t)v177);
    swift_release(a1);
    sub_1001603DC((uint64_t)v105, &qword_1003FD0B0);
    uint64_t v106 = v205;
  }

  else
  {
    uint64_t v107 = (uint64_t)v103;
    uint64_t v108 = v181;
    sub_1001A81D4(v107, (uint64_t)v181, type metadata accessor for HostedRoutingSessionSnapshot);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v104);
    uint64_t v206 = (uint64_t)v104;
    sub_1001A1E4C((uint64_t)v108, a1, isUniquelyReferenced_nonNull_native);
    uint64_t v106 = v206;
    swift_release(a1);
    swift_bridgeObjectRelease();
  }

  unint64_t v110 = v202;
  uint64_t v111 = v188;
  v68[4] = v106;
  swift_bridgeObjectRelease();
  sub_1001A8360((uint64_t)v204, (uint64_t)v102, &qword_1003F94C0);
  uint64_t v112 = v187;
  sub_1001A8360((uint64_t)v36, (uint64_t)v187, &qword_1003FD0B0);
  uint64_t v113 = v80;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v203)(v112, 1LL, v70) == 1)
  {
    sub_1001603DC((uint64_t)v112, &qword_1003FD0B0);
    uint64_t v114 = v195;
    uint64_t v115 = v201;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v111, 1LL, 1LL, v201);
    uint64_t v116 = v193;
    uint64_t v117 = (uint64_t)v111;
    uint64_t v118 = v184;
  }

  else
  {
    sub_1001A8360((uint64_t)v112, (uint64_t)v111, &qword_1003F94C0);
    sub_1001A813C((uint64_t)v112, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v116 = v193;
    uint64_t v117 = (uint64_t)v111;
    uint64_t v118 = v184;
    uint64_t v115 = v201;
    uint64_t v114 = v195;
  }

  uint64_t v119 = (uint64_t)&v110[*(int *)(v118 + 48)];
  sub_1001A8360((uint64_t)v102, (uint64_t)v202, &qword_1003F94C0);
  uint64_t v120 = v202;
  sub_1001A8360(v117, v119, &qword_1003F94C0);
  uint64_t v121 = *(void **)(v114 + 48);
  unsigned int v122 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v121)(v120, 1LL, v115);
  uint64_t v198 = v121;
  if (v122 == 1)
  {
    sub_1001603DC(v117, &qword_1003F94C0);
    uint64_t v120 = v202;
    sub_1001603DC((uint64_t)v102, &qword_1003F94C0);
    uint64_t v123 = v113;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v119, 1LL, v115) == 1)
    {
      sub_1001603DC((uint64_t)v120, &qword_1003F94C0);
      uint64_t v124 = v185;
      sub_1001A80F8((uint64_t)v204, (uint64_t)v185, type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v36 = v199;
      uint64_t v125 = v186;
      sub_1001A8360((uint64_t)v199, (uint64_t)v186, &qword_1003FD0B0);
      uint64_t v126 = v116;
      goto LABEL_32;
    }

    goto LABEL_29;
  }

  uint64_t v127 = v178;
  sub_1001A8360((uint64_t)v120, (uint64_t)v178, &qword_1003F94C0);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v119, 1LL, v115) == 1)
  {
    sub_1001603DC((uint64_t)v188, &qword_1003F94C0);
    sub_1001603DC((uint64_t)v189, &qword_1003F94C0);
    sub_1001A813C((uint64_t)v127, type metadata accessor for HostedRoutingSession);
    uint64_t v123 = v113;
LABEL_29:
    sub_1001603DC((uint64_t)v120, &qword_1003F94B8);
    uint64_t v124 = v185;
    sub_1001A80F8((uint64_t)v204, (uint64_t)v185, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v36 = v199;
    uint64_t v125 = v186;
    sub_1001A8360((uint64_t)v199, (uint64_t)v186, &qword_1003FD0B0);
    uint64_t v126 = v116;
LABEL_30:
    sub_1001603DC((uint64_t)v125, &qword_1003FD0B0);
    sub_1001A813C((uint64_t)v124, type metadata accessor for HostedRoutingSessionSnapshot);
    goto LABEL_36;
  }

  uint64_t v128 = v174;
  sub_1001A81D4(v119, (uint64_t)v174, type metadata accessor for HostedRoutingSession);
  uint64_t v129 = sub_100156FEC(&qword_1003F94D0, type metadata accessor for HostedRoutingSession, (uint64_t)&unk_100350418);
  char v130 = dispatch thunk of static Equatable.== infix(_:_:)(v127, v128, v201, v129);
  sub_1001A813C((uint64_t)v128, type metadata accessor for HostedRoutingSession);
  sub_1001603DC((uint64_t)v188, &qword_1003F94C0);
  sub_1001603DC((uint64_t)v189, &qword_1003F94C0);
  sub_1001A813C((uint64_t)v127, type metadata accessor for HostedRoutingSession);
  uint64_t v115 = v201;
  uint64_t v123 = v113;
  uint64_t v126 = v193;
  sub_1001603DC((uint64_t)v120, &qword_1003F94C0);
  uint64_t v124 = v185;
  sub_1001A80F8((uint64_t)v204, (uint64_t)v185, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v36 = v199;
  uint64_t v125 = v186;
  sub_1001A8360((uint64_t)v199, (uint64_t)v186, &qword_1003FD0B0);
  if ((v130 & 1) == 0) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v131 = *(void *)&v124[*(int *)(v70 + 20)];
  uint64_t v132 = (uint64_t)v124;
  uint64_t v133 = v175;
  sub_1001A8360((uint64_t)v125, (uint64_t)v175, &qword_1003FD0B0);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v203)(v133, 1LL, v70) == 1)
  {
    swift_bridgeObjectRetain();
    sub_1001603DC((uint64_t)v133, &qword_1003FD0B0);
    swift_bridgeObjectRetain();
    sub_1001603DC((uint64_t)v125, &qword_1003FD0B0);
    sub_1001A813C(v132, type metadata accessor for HostedRoutingSessionSnapshot);
    swift_bridgeObjectRelease_n(v131, 2LL);
  }

  else
  {
    uint64_t v134 = *(void *)&v133[*(int *)(v70 + 20)];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1001A813C((uint64_t)v133, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v135 = swift_bridgeObjectRetain();
    char v136 = sub_10019F5C0(v135, v134);
    swift_bridgeObjectRelease();
    sub_1001603DC((uint64_t)v125, &qword_1003FD0B0);
    uint64_t v115 = v201;
    uint64_t v123 = v179;
    uint64_t v126 = v193;
    sub_1001A813C(v132, type metadata accessor for HostedRoutingSessionSnapshot);
    swift_bridgeObjectRelease_n(v131, 2LL);
    if ((v136 & 1) != 0) {
      goto LABEL_35;
    }
  }

uint64_t sub_100196068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v84 = a2;
  uint64_t v5 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v8 = *(void *)(v94 - 8);
  uint64_t v9 = __chkstk_darwin(v94);
  uint64_t v95 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v79 - v12;
  __chkstk_darwin(v11);
  uint64_t v91 = (uint64_t *)((char *)&v79 - v14);
  unint64_t v92 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v88 = *(void **)(v92 - 8);
  uint64_t v15 = __chkstk_darwin(v92);
  uint64_t v87 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v86 = (uint64_t)&v79 - v17;
  uint64_t v18 = type metadata accessor for RoutingSessionConfiguration(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = a1;
  uint64_t v82 = v22;
  uint64_t v83 = v21;
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v22 + 16))( v20,  a1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration);
  uint64_t v24 = RoutingSessionConfiguration.itemTypes.getter(v23);
  swift_retain(v3);
  uint64_t v25 = sub_1001A5C14(v24, v3);
  uint64_t v81 = 0LL;
  swift_bridgeObjectRelease();
  swift_release(v3);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v96 = _swiftEmptyArrayStorage;
  uint64_t v27 = *(void *)(v25 + 16);
  uint64_t v89 = v3;
  BOOL v90 = v20;
  uint64_t v93 = v8;
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v80 = v25;
    uint64_t v29 = (uint64_t *)(v25 + 40);
    do
    {
      uint64_t v30 = *(v29 - 1);
      uint64_t v31 = *v29;
      uint64_t ObjectType = swift_getObjectType(v30, v28);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 56);
      swift_unknownObjectRetain(v30);
      uint64_t v34 = v33(ObjectType, v31);
      swift_unknownObjectRelease(v30);
      sub_1001A3E3C(v34, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
      v29 += 2;
      --v27;
    }

    while (v27);
    uint64_t v35 = swift_bridgeObjectRelease_n(v80, 2LL);
    uint64_t v36 = v96;
    uint64_t v26 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v35 = swift_bridgeObjectRelease();
    uint64_t v36 = _swiftEmptyArrayStorage;
  }

  uint64_t v37 = v86;
  RoutingSessionConfiguration.context.getter(v35);
  uint64_t v38 = (uint64_t)v88;
  unint64_t v39 = v92;
  int v40 = ((uint64_t (*)(uint64_t, unint64_t))v88[11])(v37, v92);
  uint64_t v41 = v91;
  if (v40 == enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    (*(void (**)(uint64_t, unint64_t))(v38 + 96))(v37, v39);
    uint64_t v42 = *(void **)v37;
    uint64_t v43 = *(void **)(v37 + 8);
  }

  else
  {
    (*(void (**)(uint64_t, unint64_t))(v38 + 8))(v37, v39);
    uint64_t v42 = 0LL;
    uint64_t v43 = 0LL;
  }

  uint64_t v88 = v36;
  sub_100196BC4(v36, v42, v43, v41);
  swift_bridgeObjectRelease();
  uint64_t v44 = sub_100187ED8();
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 328LL))(v44);
  swift_release(v44);
  uint64_t v46 = sub_100187ED8();
  uint64_t v80 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 544LL))(v46);
  uint64_t v86 = v47;
  uint64_t v48 = swift_release(v46);
  uint64_t v49 = v87;
  RoutingSessionConfiguration.context.getter(v48);
  LOBYTE(v46) = sub_100255494();
  (*(void (**)(char *, unint64_t))(v38 + 8))(v49, v39);
  if ((v46 & 1) != 0)
  {
    uint64_t v50 = sub_100156B68(&qword_1003F8EC8);
    uint64_t v51 = *(void *)(v93 + 72);
    uint64_t v52 = *(unsigned __int8 *)(v93 + 80);
    uint64_t v53 = (v52 + 32) & ~v52;
    uint64_t v54 = swift_allocObject(v50, v53 + v51, v52 | 7);
    *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    sub_1001A80F8((uint64_t)v91, v54 + v53, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v96 = (void *)v54;
    sub_1001A3E3C(v45, &qword_1003F8EC8, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v55 = (uint64_t)v96;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v56 = sub_100156B68(&qword_1003F8EC8);
    uint64_t v51 = *(void *)(v93 + 72);
    uint64_t v52 = *(unsigned __int8 *)(v93 + 80);
    uint64_t v57 = (v52 + 32) & ~v52;
    uint64_t v55 = swift_allocObject(v56, v57 + v51, v52 | 7);
    *(_OWORD *)(v55 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    sub_1001A80F8((uint64_t)v91, v55 + v57, type metadata accessor for HostedRoutingSourceSession);
  }

  uint64_t v58 = v94;
  uint64_t v96 = _swiftEmptyArrayStorage;
  uint64_t v59 = *(void *)(v55 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v93 = v55;
  if (!v59)
  {
LABEL_26:
    int64_t v69 = (void *)v93;
    swift_bridgeObjectRelease();
    swift_retain(v26);
    uint64_t v70 = sub_1001A5E7C((uint64_t)v88, (uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_release_n(v26, 2LL);
    type metadata accessor for RoutingOptimisticEngine();
    uint64_t v71 = sub_100187E58();
    uint64_t v72 = sub_100187DF0();
    unint64_t v73 = v90;
    uint64_t v74 = sub_1002083E4(v69, (uint64_t)v70, v80, v86, v90, (uint64_t)v71, v72);
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    swift_release(v71);
    swift_release(v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100197AEC(v74, (uint64_t)v70, v76, v78, v85, v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001A813C((uint64_t)v91, type metadata accessor for HostedRoutingSourceSession);
    return (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v73, v83);
  }

  unint64_t v61 = 0LL;
  unint64_t v92 = (v52 + 32LL) & ~(unint64_t)v52;
  uint64_t v62 = v55 + v92;
  uint64_t v63 = v55;
  while (v61 < *(void *)(v63 + 16))
  {
    sub_1001A80F8(v62, (uint64_t)v13, type metadata accessor for HostedRoutingSourceSession);
    sub_1001A8360((uint64_t)&v13[*(int *)(v58 + 28)], (uint64_t)v7, &qword_1003F9450);
    uint64_t v64 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48LL))(v7, 1LL, v64) == 1)
    {
      sub_1001603DC((uint64_t)v7, &qword_1003F9450);
    }

    else
    {
      char v65 = sub_10024B270();
      sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
      if ((v65 & 1) != 0)
      {
        sub_1001A81D4((uint64_t)v13, v95, type metadata accessor for HostedRoutingSourceSession);
        uint64_t v66 = v96;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
        {
          sub_1001A3FE8(0, v66[2] + 1LL, 1);
          uint64_t v66 = v96;
        }

        unint64_t v68 = v66[2];
        unint64_t v67 = v66[3];
        if (v68 >= v67 >> 1)
        {
          sub_1001A3FE8(v67 > 1, v68 + 1, 1);
          uint64_t v66 = v96;
        }

        v66[2] = v68 + 1;
        uint64_t result = sub_1001A81D4( v95,  (uint64_t)v66 + v92 + v68 * v51,  type metadata accessor for HostedRoutingSourceSession);
        uint64_t v63 = v93;
        uint64_t v58 = v94;
        goto LABEL_16;
      }
    }

    uint64_t result = sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSourceSession);
LABEL_16:
    ++v61;
    v62 += v51;
    if (v59 == v61)
    {
      uint64_t v26 = v96;
      goto LABEL_26;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10019678C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1
     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient;
  uint64_t v8 = *(void *)(a1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
  uint64_t v9 = *(void *)(v7 + 8);
  uint64_t ObjectType = swift_getObjectType(v8, v10);
  sub_1001A80F8(a2, (uint64_t)v6, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v12 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v6, 0LL, 1LL, v12);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 8);
  swift_unknownObjectRetain(v8);
  v13(v6, ObjectType, v9);
  swift_unknownObjectRelease(v8);
  return sub_1001603DC((uint64_t)v6, &qword_1003FD0B0);
}

uint64_t sub_10019688C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_retain(a2);
  if (*((void *)sub_100187D68() + 2) && (sub_1001A0A48(a2), (v10 & 1) != 0))
  {
    swift_release(a2);
  }

  else
  {
    swift_release(a2);
    swift_bridgeObjectRelease();
    swift_retain(a2);
    uint64_t v11 = sub_100187D68();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    unint64_t v39 = v11;
    sub_1001A2ABC((uint64_t)&_swiftEmptyDictionarySingleton, a2, isUniquelyReferenced_nonNull_native);
    swift_release(a2);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 40) = v11;
  }

  swift_bridgeObjectRelease();
  uint64_t v13 = swift_retain(a2);
  uint64_t v14 = RoutingDialog.identifier.getter(v13);
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject(&unk_1003A4AB8, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  swift_retain(a4);
  uint64_t v18 = sub_100187D68();
  swift_retain(a2);
  uint64_t v19 = swift_isUniquelyReferenced_nonNull_native(v18);
  unint64_t v39 = v18;
  uint64_t v20 = swift_retain(a2);
  unint64_t v22 = sub_1001A0A48(v20);
  uint64_t v23 = v18[2];
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_14;
  }

  LOBYTE(a3) = v21;
  if (v18[3] >= v25)
  {
    if ((v19 & 1) != 0)
    {
      if ((v21 & 1) != 0) {
        goto LABEL_12;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }

void *sub_100196B48()
{
  return v0;
}

uint64_t sub_100196BA4()
{
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t sub_100196BC4@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v86 = a3;
  id v77 = a2;
  uint64_t v83 = a4;
  uint64_t v84 = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = &v73[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v91 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v75 = *(void *)(v91 - 8);
  uint64_t v7 = __chkstk_darwin(v91);
  uint64_t v9 = &v73[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v73[-v10];
  uint64_t v12 = sub_100156B68(&qword_1003F9448);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = &v73[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v13);
  BOOL v90 = &v73[-v16];
  uint64_t v17 = sub_100156B68(&qword_1003F9450);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v80 = &v73[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v18);
  char v21 = &v73[-v20];
  uint64_t v22 = type metadata accessor for RoutingControls(0LL);
  uint64_t v88 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v79 = &v73[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v23);
  uint64_t v87 = &v73[-v25];
  id v26 = [(id)objc_opt_self(MRAVLocalEndpoint) sharedLocalEndpoint];
  char v27 = (void *)objc_opt_self(&OBJC_CLASS___MRDMediaRemoteServer);
  id v28 = [v27 server];
  id v29 = [v28 nowPlayingServer];

  id v30 = [v29 localActivePlayerClient];
  uint64_t v81 = v15;
  uint64_t v82 = v6;
  uint64_t v89 = v22;
  if (!v30
    || (id v31 = [v30 supportedRemoteControlCommands],
        v30,
        !v31)
    || (uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, (char *)&type metadata for Any + 8),
        v31,
        uint64_t v33 = sub_100197300(v32),
        swift_bridgeObjectRelease(),
        !v33))
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = _swiftEmptyArrayStorage;
  }

  id v34 = v86;
  uint64_t v35 = (uint64_t *)sub_10024B258();
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  uint64_t v78 = v35;
  swift_bridgeObjectRetain();
  id v86 = v26;
  sub_10024D78C(v37, v36, (uint64_t)v33, v86, (uint64_t)v87);
  id v38 = [v27 server];
  id v39 = [v38 nowPlayingServer];

  id v40 = [v39 localOriginClient];
  id v41 = [v27 server];
  id v42 = [v41 nowPlayingServer];

  id v43 = [v42 localActivePlayerClient];
  if (v34)
  {
    id v43 = v43;
    NSString v44 = String._bridgeToObjectiveC()();
    id v45 = [v40 existingNowPlayingClientForDisplayID:v44];

    id v46 = [v45 activePlayerClient];
    if (v46)
    {

      id v43 = v46;
    }
  }

  id v77 = v40;
  id v76 = v43;
  sub_10024B984(v40, v43, v21);
  uint64_t v47 = v86;
  unsigned int v48 = [v86 canModifyGroupMembership];
  id v49 = [v47 deviceInfo];
  sub_1002A8704((uint64_t)v90);

  [v47 volume];
  int v51 = v50;
  uint64_t v52 = _swiftEmptyArrayStorage;
  unint64_t v92 = _swiftEmptyArrayStorage;
  uint64_t v53 = v84[2];
  uint64_t v54 = swift_bridgeObjectRetain();
  uint64_t v85 = v21;
  if (v53)
  {
    unsigned int v74 = v48;
    unint64_t v55 = (*(unsigned __int8 *)(v75 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
    uint64_t v56 = *(void *)(v75 + 72);
    uint64_t v57 = v54 + v55;
    do
    {
      sub_1001A80F8(v57, (uint64_t)v11, type metadata accessor for HostedRoutingItem);
      if (v11[*(int *)(v91 + 36)] == 1)
      {
        sub_1001A81D4((uint64_t)v11, (uint64_t)v9, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0) {
          sub_1001A3FBC(0, v52[2] + 1LL, 1);
        }
        uint64_t v52 = v92;
        unint64_t v59 = v92[2];
        unint64_t v58 = v92[3];
        if (v59 >= v58 >> 1)
        {
          sub_1001A3FBC(v58 > 1, v59 + 1, 1);
          uint64_t v52 = v92;
        }

        v52[2] = v59 + 1;
        sub_1001A81D4((uint64_t)v9, (uint64_t)v52 + v55 + v59 * v56, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        sub_1001A813C((uint64_t)v11, type metadata accessor for HostedRoutingItem);
      }

      v57 += v56;
      --v53;
    }

    while (v53);
    uint64_t v52 = v92;
    char v21 = v85;
    unsigned int v48 = v74;
  }

  uint64_t v60 = swift_bridgeObjectRelease();
  LODWORD(v91) = v48 ^ 1;
  __chkstk_darwin(v60);
  v72[2] = v21;
  uint64_t v84 = sub_10019772C((void (*)(uint64_t))sub_1001A7BC4, (uint64_t)v72, (uint64_t)v52);
  swift_release(v52);
  uint64_t v61 = v78[1];
  uint64_t v75 = *v78;
  uint64_t v62 = v80;
  sub_1001A8360((uint64_t)v21, (uint64_t)v80, &qword_1003F9450);
  swift_bridgeObjectRetain();
  uint64_t v63 = (uint64_t)v82;
  uint64_t v64 = v77;
  sub_1002992E0();
  char v65 = v87;
  uint64_t v66 = (uint64_t)v79;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v88 + 16))(v79, v87, v89);
  unint64_t v67 = v90;
  uint64_t v68 = (uint64_t)v81;
  sub_1001A8360((uint64_t)v90, (uint64_t)v81, &qword_1003F9448);
  int64_t v69 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
  uint64_t v70 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
  LOBYTE(v92) = 0;
  sub_10024E3B8( v75,  v61,  (uint64_t)v84,  (uint64_t)v62,  (uint64_t)v69,  (uint64_t)v70,  v63,  v91,  v83,  v51,  0,  v66,  0LL,  0LL,  v68);

  sub_1001603DC((uint64_t)v67, &qword_1003F9448);
  (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v65, v89);
  return sub_1001603DC((uint64_t)v85, &qword_1003F9450);
}

void *sub_100197300(uint64_t a1)
{
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v12;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_100160800(i, (uint64_t)v11);
    uint64_t v4 = sub_10016083C(0LL, &qword_1003F9458, &OBJC_CLASS___MRCommandInfo_ptr);
    uint64_t v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6LL);
    if (!(_DWORD)v5) {
      break;
    }
    id v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    uint64_t v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2) {
      return v12;
    }
  }

  id v10 = 0LL;
  swift_release(v12);

  return 0LL;
}

uint64_t sub_100197418( uint64_t (*a1)(char *), void *a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v22 = a5;
  id v6 = a4;
  id v28 = a1;
  id v29 = a2;
  uint64_t v8 = a4(0LL);
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v14 = _swiftEmptyArrayStorage;
  id v30 = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(a3 + 16);
  if (v25)
  {
    unint64_t v15 = 0LL;
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v23 = v6;
    uint64_t v24 = a3;
    while (v15 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      uint64_t v18 = *(void *)(v27 + 72);
      sub_1001A80F8(a3 + v17 + v18 * v15, (uint64_t)v13, v6);
      uint64_t v14 = v29;
      char v19 = v28(v13);
      if (v5)
      {
        sub_1001A813C((uint64_t)v13, v6);
        swift_release(v16);
        swift_bridgeObjectRelease();
        return (uint64_t)v14;
      }

      if ((v19 & 1) != 0)
      {
        sub_1001A81D4((uint64_t)v13, v26, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
          v22(0, v16[2] + 1LL, 1LL);
        }
        uint64_t v16 = v30;
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1LL);
          uint64_t v16 = v30;
        }

        _OWORD v16[2] = v21 + 1;
        id v6 = v23;
        uint64_t result = sub_1001A81D4(v26, (uint64_t)v16 + v17 + v21 * v18, v23);
        a3 = v24;
      }

      else
      {
        uint64_t result = sub_1001A813C((uint64_t)v13, v6);
      }

      if (v25 == ++v15)
      {
        uint64_t v14 = v30;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v14;
  }

  return result;
}

uint64_t sub_100197628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001A80F8(a1, a3, type metadata accessor for HostedRoutingItem);
  sub_1001A8360(a2, (uint64_t)v8, &qword_1003F9450);
  uint64_t v9 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9) == 1)
  {
    sub_1001603DC((uint64_t)v8, &qword_1003F9450);
    char v10 = 0;
  }

  else
  {
    char v10 = sub_10024B270();
    sub_1001A813C((uint64_t)v8, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  }

  uint64_t result = type metadata accessor for HostedRoutingItem(0LL);
  *(_BYTE *)(a3 + *(int *)(result + swift_release(*(void *)(v0 + 40)) = v10 & 1;
  return result;
}

void *sub_10019772C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    unint64_t v21 = _swiftEmptyArrayStorage;
    sub_1001A3FBC(0, v10, 0);
    uint64_t v11 = v21;
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = a3 + v18;
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      unint64_t v21 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001A3FBC(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }

      void v11[2] = v15 + 1;
      sub_1001A81D4((uint64_t)v9, (uint64_t)v11 + v18 + v15 * v13, type metadata accessor for HostedRoutingItem);
      v12 += v13;
      if (!--v10) {
        return v11;
      }
    }

    swift_release(v11);
  }

  return v11;
}

void *sub_100197884(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10015DCE8(0, v1, 0);
    uint64_t v3 = *(void *)(type metadata accessor for HostedRoutingItem(0LL) - 8);
    uint64_t v4 = *(void *)(v3 + 72);
    uint64_t v5 = (uint64_t *)(((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + a1 + 8);
    do
    {
      uint64_t v7 = *(v5 - 1);
      uint64_t v6 = *v5;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        sub_10015DCE8(v8 > 1, v9 + 1, 1);
      }
      uint64_t v5 = (uint64_t *)((char *)v5 + v4);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      int64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
      void v10[4] = v7;
      v10[5] = v6;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void *sub_100197978(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    unint64_t v21 = _swiftEmptyArrayStorage;
    sub_1001A4014(0, v10, 0);
    uint64_t v11 = v21;
    uint64_t v12 = *(void *)(type metadata accessor for HostedRoutingSourceSession(0LL) - 8);
    uint64_t v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v18 = *(void *)(v12 + 72);
    while (1)
    {
      v19(v13);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      unint64_t v21 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001A4014(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }

      void v11[2] = v15 + 1;
      sub_1001A81D4( (uint64_t)v9,  (uint64_t)v11 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * v15,
        type metadata accessor for HostedRoutingSession);
      v13 += v18;
      if (!--v10) {
        return v11;
      }
    }

    swift_release(v11);
  }

  return v11;
}

uint64_t sub_100197AEC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v178 = a4;
  uint64_t v169 = a1;
  id v170 = a3;
  uint64_t v181 = (void *)a2;
  uint64_t v185 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v165 = *(void *)(v185 - 8);
  uint64_t v9 = __chkstk_darwin(v185);
  uint64_t v184 = (uint64_t)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (void **)((char *)&v156 - v12);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v156 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (void **)((char *)&v156 - v17);
  uint64_t v172 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v176 = *(void *)(v172 - 8);
  uint64_t v19 = __chkstk_darwin(v172);
  uint64_t v164 = (void **)((char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v156 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v163 = (uint64_t)&v156 - v25;
  __chkstk_darwin(v24);
  uint64_t v174 = (uint64_t)&v156 - v26;
  uint64_t v27 = sub_100156B68(&qword_1003F94C0);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v157 = (uint64_t)&v156 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v156 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v160 = (uint64_t)&v156 - v34;
  __chkstk_darwin(v33);
  uint64_t v162 = (uint64_t)&v156 - v35;
  uint64_t v177 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v171 = *(void *)(v177 - 8);
  uint64_t v36 = __chkstk_darwin(v177);
  uint64_t v159 = (char *)&v156 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v161 = (char *)&v156 - v39;
  __chkstk_darwin(v38);
  uint64_t v168 = (char *)&v156 - v40;
  uint64_t v41 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v179 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v182 = (char *)&v156 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v43);
  id v45 = (char *)&v156 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain(a5);
  uint64_t v180 = v6;
  id v46 = sub_100187D24();
  uint64_t v47 = v46[2];
  uint64_t v166 = a6;
  uint64_t v175 = a5;
  uint64_t v156 = v23;
  uint64_t v158 = v32;
  if (v47 && (unint64_t v48 = sub_1001A0A48(a5), (v49 & 1) != 0))
  {
    unint64_t v50 = v48;
    uint64_t v51 = (uint64_t)v45;
    uint64_t v52 = v41;
    uint64_t v53 = v46[7];
    uint64_t v54 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v56 = v53 + *(void *)(v55 + 72) * v50;
    uint64_t v41 = v52;
    sub_1001A80F8(v56, v51, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
    id v45 = (char *)v51;
    a5 = v175;
    v57(v45, 0LL, 1LL, v54);
  }

  else
  {
    uint64_t v58 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v45, 1LL, 1LL, v58);
  }

  uint64_t v59 = v178;
  uint64_t v183 = (uint64_t)v45;
  swift_release(a5);
  swift_bridgeObjectRelease();
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v179 + 16);
  uint64_t v173 = v41;
  v60( v182,  a5 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v41);
  uint64_t v61 = sub_100187F84();
  uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 128LL))(v61);
  swift_release(v61);
  sub_10016083C(0LL, &qword_1003F8928, &OBJC_CLASS___MRDeviceInfo_ptr);
  id v63 = sub_1002A8918();
  uint64_t v178 = swift_allocObject(&unk_1003A4B30, 24LL, 7LL);
  *(void *)(v178 + swift_weakDestroy(v0 + 16) = v62;
  swift_bridgeObjectRetain();
  uint64_t v64 = swift_bridgeObjectRetain();
  char v65 = sub_1001A61F4(v64, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v66 = sub_100197884((uint64_t)v65);
  uint64_t v167 = 0LL;
  swift_bridgeObjectRelease();
  uint64_t v67 = sub_1001A6418((uint64_t)v66);
  swift_bridgeObjectRelease();
  uint64_t v68 = v169;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v70 = MRDFastSyncGroupSessionState.rawValue.getter(v68, v170, v59, v69);
  uint64_t v73 = sub_10019D1E0(v70, v71, v72, v63);
  uint64_t v76 = sub_10019D474(v73, v74, v75, v63);
  uint64_t v169 = v77;
  uint64_t v180 = v78;
  swift_bridgeObjectRelease();
  uint64_t v79 = (uint64_t)v182;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v80 = swift_bridgeObjectRelease();
  __chkstk_darwin(v80);
  uint64_t v81 = (uint64_t)v181;
  *(&v156 - _Block_object_dispose(va, 8) = (void *)v79;
  *(&v156 - 7) = (void *)v81;
  id v170 = v63;
  *(&v156 - 6) = v63;
  *(&v156 - 5) = (void *)v67;
  uint64_t v82 = v175;
  *(&v156 - 4) = (void *)v183;
  *(&v156 - 3) = (void *)v82;
  uint64_t v83 = v178;
  *(&v156 - 2) = sub_1001A819C;
  *(&v156 - 1) = (void *)v83;
  uint64_t v84 = sub_100197978((void (*)(uint64_t))sub_1001A81A4, (uint64_t)(&v156 - 10), v76);
  swift_bridgeObjectRelease();
  uint64_t v85 = swift_bridgeObjectRelease();
  id v86 = (uint64_t *)v168;
  RoutingSessionConfiguration.context.getter(v85);
  uint64_t v87 = v171;
  uint64_t v88 = *(unsigned int (**)(uint64_t *, uint64_t))(v171 + 88);
  uint64_t v89 = v177;
  if (v88(v86, v177) != enum case for RoutingSessionConfiguration.Context.platterTarget(_:))
  {
    uint64_t v181 = v84;
    uint64_t v96 = v87;
    unint64_t v97 = *(uint64_t (**)(uint64_t *, uint64_t))(v87 + 8);
    uint64_t v98 = v97(v86, v89);
    uint64_t v99 = (uint64_t *)v161;
    RoutingSessionConfiguration.context.getter(v98);
    uint64_t v100 = v177;
    if (v88(v99, v177) != enum case for RoutingSessionConfiguration.Context.deviceTarget(_:))
    {
      uint64_t v118 = v97(v99, v100);
      uint64_t v119 = v159;
      uint64_t v120 = v100;
      RoutingSessionConfiguration.context.getter(v118);
      uint64_t v121 = (uint64_t)v119;
      char v122 = sub_100255494();
      v97((uint64_t *)v119, v120);
      uint64_t v123 = v173;
      uint64_t v124 = v176;
      uint64_t v95 = v183;
      uint64_t v125 = v180;
      if ((v122 & 1) != 0)
      {
        uint64_t v126 = v181[2];
        uint64_t v127 = v172;
        if (!v126) {
          goto LABEL_37;
        }
        uint64_t v128 = (uint64_t)v181
             + ((*(unsigned __int8 *)(v176 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
        uint64_t v129 = *(void *)(v176 + 72);
        swift_bridgeObjectRetain();
        char v130 = v164;
        do
        {
          sub_1001A80F8(v128, (uint64_t)v130, type metadata accessor for HostedRoutingSession);
          uint64_t v131 = v130[1];
          BOOL v132 = *v130 == v169 && v131 == v125;
          if (v132 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v130, v131, v169, v125, 0LL) & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v121 = v157;
            sub_1001A81D4((uint64_t)v164, v157, type metadata accessor for HostedRoutingSession);
            uint64_t v133 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
            v133(v121, 0LL, 1LL, v127);
            uint64_t v82 = v175;
            goto LABEL_64;
          }

          char v130 = v164;
          sub_1001A813C((uint64_t)v164, type metadata accessor for HostedRoutingSession);
          v128 += v129;
          --v126;
        }

        while (v126);
        swift_bridgeObjectRelease();
        uint64_t v82 = v175;
LABEL_37:
        uint64_t v133 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 56);
        uint64_t v121 = v157;
        v133(v157, 1LL, 1LL, v127);
LABEL_64:
        uint64_t v150 = v95;
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v121, 1LL, v127) != 1)
        {
          uint64_t v151 = v156;
          sub_1001A81D4(v121, (uint64_t)v156, type metadata accessor for HostedRoutingSession);
          uint64_t v152 = sub_1001A677C((uint64_t)v181, v151, v82);
          uint64_t v154 = v153;
          swift_bridgeObjectRelease();
          uint64_t v155 = (uint64_t)v158;
          sub_1001A80F8((uint64_t)v151, (uint64_t)v158, type metadata accessor for HostedRoutingSession);
          v133(v155, 0LL, 1LL, v127);
          sub_1002548B0(v152, v154, v155, v166);
          swift_release(v178);

          sub_1001A813C((uint64_t)v151, type metadata accessor for HostedRoutingSession);
          (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v79, v173);
          uint64_t v95 = v150;
          return sub_1001603DC(v95, &qword_1003FD0B0);
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v147 = v172;
        if (v181[2])
        {
          uint64_t v148 = (uint64_t)v158;
          sub_1001A80F8( (uint64_t)v181 + ((*(unsigned __int8 *)(v124 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80)),  (uint64_t)v158,  type metadata accessor for HostedRoutingSession);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v124 + 56))(v148, 0LL, 1LL, v147);
          sub_1002548B0((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v148, v166);
          swift_release(v178);

          (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v79, v123);
          return sub_1001603DC(v95, &qword_1003FD0B0);
        }

        __break(1u);
      }

      uint64_t result = sub_1001603DC(v121, &qword_1003F94C0);
      __break(1u);
      return result;
    }

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t *, uint64_t))(v96 + 96))(v99, v100);
    uint64_t v101 = v99[1];
    uint64_t v102 = v181[2];
    uint64_t v103 = v176;
    uint64_t v95 = v183;
    if (!v102)
    {
      uint64_t v146 = 1LL;
LABEL_59:
      uint64_t v145 = v160;
      goto LABEL_60;
    }

    uint64_t v104 = *v99;
    uint64_t v105 = (uint64_t)v181
         + ((*(unsigned __int8 *)(v176 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
    uint64_t v177 = *(void *)(v176 + 72);
    swift_bridgeObjectRetain();
    uint64_t v106 = 0LL;
    uint64_t v107 = v163;
    uint64_t v174 = v105;
    uint64_t v175 = v102;
LABEL_40:
    sub_1001A80F8(v105 + v177 * v106, v107, type metadata accessor for HostedRoutingSession);
    uint64_t v180 = sub_10025026C();
    uint64_t v134 = *(void *)(v180 + 16);
    if (!v134)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }

    uint64_t v135 = v165;
    uint64_t v136 = v180 + ((*(unsigned __int8 *)(v165 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80));
    swift_bridgeObjectRetain();
    uint64_t v137 = *(void *)(v135 + 72);
    while (1)
    {
      sub_1001A80F8(v136, (uint64_t)v13, type metadata accessor for HostedRoutingItem);
      uint64_t v138 = v13[1];
      if (*v13 == v104 && v138 == v101) {
        break;
      }
      char v140 = _stringCompareWithSmolCheck(_:_:expecting:)(*v13, v138, v104, v101, 0LL);
      uint64_t v141 = v184;
      sub_1001A80F8((uint64_t)v13, v184, type metadata accessor for HostedRoutingItem);
      if ((v140 & 1) != 0) {
        goto LABEL_51;
      }
      sub_1001A813C(v141, type metadata accessor for HostedRoutingItem);
      sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingItem);
LABEL_43:
      v136 += v137;
      if (!--v134)
      {
        swift_bridgeObjectRelease_n(v180, 2LL);
        uint64_t v95 = v183;
        uint64_t v105 = v174;
        uint64_t v102 = v175;
LABEL_39:
        ++v106;
        uint64_t v107 = v163;
        sub_1001A813C(v163, type metadata accessor for HostedRoutingSession);
        if (v106 == v102)
        {
          swift_bridgeObjectRelease();
          uint64_t v146 = 1LL;
          uint64_t v79 = (uint64_t)v182;
          uint64_t v103 = v176;
          goto LABEL_59;
        }

        goto LABEL_40;
      }
    }

    uint64_t v141 = v184;
    sub_1001A80F8((uint64_t)v13, v184, type metadata accessor for HostedRoutingItem);
LABEL_51:
    char v142 = *(_BYTE *)(v141 + *(int *)(v185 + 36));
    sub_1001A813C(v141, type metadata accessor for HostedRoutingItem);
    sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingItem);
    if ((v142 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v180, 2LL);
      uint64_t v145 = v160;
      sub_1001A81D4(v163, v160, type metadata accessor for HostedRoutingSession);
      uint64_t v146 = 0LL;
      uint64_t v79 = (uint64_t)v182;
      uint64_t v95 = v183;
      uint64_t v103 = v176;
LABEL_60:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v145, v146, 1LL, v172);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v143 = v166;
      uint64_t v144 = v145;
      goto LABEL_61;
    }

    goto LABEL_43;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t))(v87 + 96))(v86, v89);
  uint64_t v90 = v86[1];
  uint64_t v175 = v84[2];
  if (!v175)
  {
    uint64_t v117 = 1LL;
    uint64_t v116 = v162;
    uint64_t v95 = v183;
    goto LABEL_55;
  }

  uint64_t v91 = *v86;
  uint64_t v180 = (uint64_t)v84 + ((*(unsigned __int8 *)(v176 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
  uint64_t v177 = *(void *)(v176 + 72);
  uint64_t v92 = (uint64_t)v84;
  swift_bridgeObjectRetain();
  uint64_t v93 = 0LL;
  uint64_t v94 = v174;
  uint64_t v95 = v183;
  uint64_t v181 = (void *)v92;
  while (2)
  {
    sub_1001A80F8(v180 + v177 * v93, v94, type metadata accessor for HostedRoutingSession);
    uint64_t v184 = sub_10025026C();
    uint64_t v108 = *(void *)(v184 + 16);
    if (!v108)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }

    uint64_t v109 = v165;
    uint64_t v110 = v184 + ((*(unsigned __int8 *)(v165 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80));
    swift_bridgeObjectRetain();
    uint64_t v111 = *(void *)(v109 + 72);
    do
    {
      sub_1001A80F8(v110, (uint64_t)v18, type metadata accessor for HostedRoutingItem);
      uint64_t v112 = v18[1];
      if (*v18 == v91 && v112 == v90)
      {
        sub_1001A80F8((uint64_t)v18, (uint64_t)v16, type metadata accessor for HostedRoutingItem);
      }

      else
      {
        char v114 = _stringCompareWithSmolCheck(_:_:expecting:)(*v18, v112, v91, v90, 0LL);
        sub_1001A80F8((uint64_t)v18, (uint64_t)v16, type metadata accessor for HostedRoutingItem);
        if ((v114 & 1) == 0)
        {
          sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
          sub_1001A813C((uint64_t)v18, type metadata accessor for HostedRoutingItem);
          goto LABEL_16;
        }
      }

      char v115 = v16[*(int *)(v185 + 36)];
      sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
      sub_1001A813C((uint64_t)v18, type metadata accessor for HostedRoutingItem);
      if ((v115 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v184, 2LL);
        uint64_t v116 = v162;
        sub_1001A81D4(v174, v162, type metadata accessor for HostedRoutingSession);
        uint64_t v117 = 0LL;
        uint64_t v79 = (uint64_t)v182;
        uint64_t v95 = v183;
        goto LABEL_55;
      }

uint64_t sub_100198980(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v77 = a3;
  uint64_t v5 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v81 = v5;
  uint64_t v82 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F9528);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v80 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v72 - v12;
  uint64_t v14 = sub_100156B68(&qword_1003F8920);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v79 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v78 = (char *)&v72 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v76 = (uint64_t)&v72 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v72 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v72 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v72 - v27;
  BOOL v29 = sub_10024A5A8();
  if (v29 == sub_10024A5A8())
  {
    int v31 = sub_10024A71C() & 1;
    if (v31 != (sub_10024A71C() & 1))
    {
      char v30 = sub_10024A71C();
      return v30 & 1;
    }

    int v32 = sub_10024A618() & 1;
    if (v32 != (sub_10024A618() & 1))
    {
      char v30 = sub_10024A618();
      return v30 & 1;
    }

    uint64_t v33 = type metadata accessor for HostedRoutingItem(0LL);
    uint64_t v74 = (uint64_t)a1 + *(int *)(v33 + 32);
    sub_1001A8360(v74, (uint64_t)v28, &qword_1003F8920);
    uint64_t v73 = (uint64_t)a2 + *(int *)(v33 + 32);
    sub_1001A8360(v73, (uint64_t)v26, &qword_1003F8920);
    uint64_t v34 = (uint64_t)&v13[*(int *)(v9 + 48)];
    sub_1001A8360((uint64_t)v28, (uint64_t)v13, &qword_1003F8920);
    uint64_t v75 = v34;
    sub_1001A8360((uint64_t)v26, v34, &qword_1003F8920);
    uint64_t v35 = v81;
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v82 + 48);
    if (v36((uint64_t)v13, 1LL, v81) == 1)
    {
      sub_1001603DC((uint64_t)v26, &qword_1003F8920);
      sub_1001603DC((uint64_t)v28, &qword_1003F8920);
      int v37 = v36(v75, 1LL, v35);
      uint64_t v38 = v36;
      uint64_t v39 = v35;
      if (v37 == 1)
      {
        sub_1001603DC((uint64_t)v13, &qword_1003F8920);
        goto LABEL_20;
      }
    }

    else
    {
      sub_1001A8360((uint64_t)v13, (uint64_t)v23, &qword_1003F8920);
      unint64_t v72 = v36;
      if (v36(v75, 1LL, v35) != 1)
      {
        uint64_t v49 = v82;
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v8, v75, v35);
        uint64_t v50 = sub_100156FEC( &qword_1003F9540,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingItem.SelectionIndicator,  (uint64_t)&protocol conformance descriptor for RoutingItem.SelectionIndicator);
        char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v8, v35, v50);
        uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
        v52(v8, v81);
        sub_1001603DC((uint64_t)v26, &qword_1003F8920);
        sub_1001603DC((uint64_t)v28, &qword_1003F8920);
        v52(v23, v81);
        uint64_t v39 = v81;
        sub_1001603DC((uint64_t)v13, &qword_1003F8920);
        uint64_t v38 = v72;
        if ((v51 & 1) != 0)
        {
LABEL_20:
          uint64_t v53 = *a1;
          uint64_t v54 = a1[1];
          uint64_t v55 = v77;
          if (*(void *)(v77 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v56 = sub_10015CAD4(v53, v54);
            if ((v57 & 1) != 0)
            {
              uint64_t v58 = *(void *)(*(void *)(v55 + 56) + 8 * v56);
              swift_retain(v58);
              swift_bridgeObjectRelease();
              double v59 = *(double *)(v58 + 16);
              uint64_t v60 = *(void *)(v58 + 24);
              char v61 = *(_BYTE *)(v58 + 32);
              swift_release(v58);
              goto LABEL_29;
            }

            swift_bridgeObjectRelease();
          }

          double v59 = sub_10023C958();
          uint64_t v60 = 0LL;
          char v61 = 0;
LABEL_29:
          uint64_t v62 = *a2;
          uint64_t v63 = a2[1];
          if (*(void *)(v55 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v64 = sub_10015CAD4(v62, v63);
            if ((v65 & 1) != 0)
            {
              uint64_t v66 = *(void *)(*(void *)(v55 + 56) + 8 * v64);
              swift_retain(v66);
              swift_bridgeObjectRelease();
              double v67 = *(double *)(v66 + 16);
              uint64_t v68 = *(void *)(v66 + 24);
              char v69 = *(_BYTE *)(v66 + 32);
              swift_release(v66);
              goto LABEL_34;
            }

            swift_bridgeObjectRelease();
          }

          double v67 = sub_10023C958();
          uint64_t v68 = 0LL;
          char v69 = 0;
LABEL_34:
          double v86 = v59;
          uint64_t v87 = v60;
          char v88 = v61;
          double v83 = v67;
          uint64_t v84 = v68;
          char v85 = v69;
          unint64_t v70 = sub_1001A83D4();
          if ((dispatch thunk of static Equatable.== infix(_:_:)( &v86,  &v83,  &type metadata for RouteRelevance.Classification,  v70) & 1) == 0)
          {
            double v86 = v59;
            uint64_t v87 = v60;
            char v88 = v61;
            double v83 = v67;
            uint64_t v84 = v68;
            char v85 = v69;
            sub_1001A8418();
            char v30 = dispatch thunk of static Comparable.< infix(_:_:)(&v83, &v86);
            return v30 & 1;
          }

          if (v62 != v53 || v63 != v54)
          {
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v53, v54, 1LL);
            return v30 & 1;
          }

uint64_t sub_1001990FC@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(uint64_t, uint64_t)@<X7>, void *a9@<X8>, uint64_t a10)
{
  v378 = a8;
  uint64_t v382 = a7;
  v425 = (void *)a6;
  uint64_t v392 = a5;
  uint64_t v380 = a3;
  v407 = a9;
  uint64_t v13 = sub_100156B68(&qword_1003F9448);
  __chkstk_darwin(v13);
  uint64_t v406 = (uint64_t)&v359 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v403 = type metadata accessor for RoutingControls(0LL);
  uint64_t v402 = *(void *)(v403 - 8);
  __chkstk_darwin(v403);
  v405 = (char *)&v359 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v401 = type metadata accessor for Date(0LL);
  uint64_t v400 = *(void *)(v401 - 8);
  __chkstk_darwin(v401);
  v404 = (char *)&v359 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo.ExtendedInfo(0LL);
  __chkstk_darwin(v17);
  v375 = (char *)&v359 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v369 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
  uint64_t v368 = *(void *)(v369 - 8);
  __chkstk_darwin(v369);
  v367 = (char *)&v359 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v398 = type metadata accessor for RoutingSessionConfiguration.NowPlayingInfoProperties(0LL);
  uint64_t v395 = *(void *)(v398 - 8);
  uint64_t v20 = __chkstk_darwin(v398);
  v397 = (char *)&v359 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  v396 = (char *)&v359 - v22;
  uint64_t v23 = sub_100156B68(&qword_1003F9450);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v399 = (uint64_t)&v359 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v419 = (uint64_t)&v359 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v360 = (char *)&v359 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v366 = (uint64_t)&v359 - v31;
  __chkstk_darwin(v30);
  uint64_t v370 = (uint64_t)&v359 - v32;
  uint64_t v420 = type metadata accessor for RoutingSessionConfiguration(0LL);
  v410 = *(void **)(v420 - 8);
  uint64_t v33 = __chkstk_darwin(v420);
  v394 = (char *)&v359 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  v364 = (char *)&v359 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v363 = (char *)&v359 - v38;
  __chkstk_darwin(v37);
  v409 = (char *)&v359 - v39;
  uint64_t v40 = sub_100156B68(&qword_1003F94F0);
  __chkstk_darwin(v40);
  uint64_t v376 = (uint64_t)&v359 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v42);
  uint64_t v371 = (uint64_t)&v359 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v372 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v373 = *(void *)(v372 - 8);
  uint64_t v44 = __chkstk_darwin(v372);
  v415 = (uint64_t *)((char *)&v359 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v44);
  uint64_t v374 = (uint64_t)&v359 - v46;
  uint64_t v416 = type metadata accessor for HostedRoutingItem(0LL);
  v423 = *(void **)(v416 - 8);
  uint64_t v47 = __chkstk_darwin(v416);
  v385 = (char *)&v359 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = __chkstk_darwin(v47);
  v384 = (char *)&v359 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v388 = (uint64_t)&v359 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v391 = (char *)&v359 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v387 = (uint64_t *)((char *)&v359 - v56);
  uint64_t v57 = __chkstk_darwin(v55);
  v427 = (char *)&v359 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v390 = (uint64_t)&v359 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v417 = (char *)&v359 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v389 = (uint64_t *)((char *)&v359 - v64);
  uint64_t v65 = __chkstk_darwin(v63);
  v428 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)&v359 - v66);
  uint64_t v67 = __chkstk_darwin(v65);
  v377 = (char *)&v359 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v383 = (char *)&v359 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v429 = (uint64_t *)((char *)&v359 - v72);
  __chkstk_darwin(v71);
  uint64_t v74 = (char *)&v359 - v73;
  uint64_t v75 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v75);
  unint64_t v414 = (unint64_t)&v359 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v413 = (uint64_t (*)(uint64_t))type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  v412 = (char *)*((void *)v413 - 1);
  __chkstk_darwin(v413);
  uint64_t v408 = (uint64_t)&v359 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v79 = *(void *)(v78 - 8);
  uint64_t v80 = __chkstk_darwin(v78);
  v362 = (char *)&v359 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = __chkstk_darwin(v80);
  v361 = (char *)&v359 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  v379 = (char *)&v359 - v85;
  __chkstk_darwin(v84);
  uint64_t v87 = (char *)&v359 - v86;
  v421 = (int *)type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v393 = v421[13];
  int v88 = *((unsigned __int8 *)a1 + v393);
  uint64_t v89 = (void *)a1[4];
  uint64_t v424 = a2;
  ((void (*)(void))RoutingSessionConfiguration.context.getter)();
  uint64_t v90 = v78;
  v365 = *(uint64_t (**)(char *, uint64_t))(v79 + 88);
  int v91 = v365(v87, v78);
  uint64_t v418 = a4;
  int v411 = v88;
  uint64_t v381 = v78;
  if (v91 == enum case for RoutingSessionConfiguration.Context.platterTarget(_:))
  {
    uint64_t v96 = v426;
    (*(void (**)(char *, uint64_t))(v79 + 96))(v87, v90);
    swift_bridgeObjectRelease();
    uint64_t v95 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v92 = (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v87, v78);
    __chkstk_darwin(v92);
    v356[0] = v89;
    v356[1] = a1;
    LOBYTE(v357) = v88;
    uint64_t v358 = a4;
    uint64_t v93 = v380;
    swift_bridgeObjectRetain();
    uint64_t v94 = v426;
    uint64_t v95 = (void *)sub_100197418( (uint64_t (*)(char *))sub_1001A8218,  &v355,  v93,  type metadata accessor for HostedRoutingItem,  (void (*)(BOOL, uint64_t, uint64_t))sub_1001A3FBC);
    uint64_t v96 = v94;
  }

  v430 = v89;
  swift_bridgeObjectRetain();
  sub_1001A3E3C((uint64_t)v95, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  unint64_t v97 = v430;
  int64_t v98 = v430[2];
  v422 = a1;
  uint64_t v386 = v79;
  if (v98)
  {
    uint64_t v426 = v96;
    v430 = _swiftEmptyArrayStorage;
    uint64_t v99 = v97;
    sub_1001A3FBC(0, v98, 0);
    unint64_t v100 = (*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80);
    uint64_t v380 = (uint64_t)v99;
    uint64_t v101 = (uint64_t)v99 + v100;
    uint64_t v102 = v423[9];
    uint64_t v103 = v430;
    do
    {
      uint64_t v104 = v429;
      sub_1001A80F8(v101, (uint64_t)v429, type metadata accessor for HostedRoutingItem);
      sub_10024A248((uint64_t)v104, (uint64_t)v74);
      sub_1001A813C((uint64_t)v104, type metadata accessor for HostedRoutingItem);
      if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0)
      {
        sub_1001A3FBC(0, v103[2] + 1LL, 1);
        uint64_t v103 = v430;
      }

      unint64_t v106 = v103[2];
      unint64_t v105 = v103[3];
      if (v106 >= v105 >> 1)
      {
        sub_1001A3FBC(v105 > 1, v106 + 1, 1);
        uint64_t v103 = v430;
      }

      v103[2] = v106 + 1;
      sub_1001A81D4((uint64_t)v74, (uint64_t)v103 + v100 + v106 * v102, type metadata accessor for HostedRoutingItem);
      v101 += v102;
      --v98;
    }

    while (v98);
    swift_bridgeObjectRelease();
    uint64_t v107 = v422;
    uint64_t v108 = v426;
    uint64_t v79 = v386;
    uint64_t v109 = (uint64_t)v425;
    uint64_t v110 = v415;
  }

  else
  {
    uint64_t v107 = a1;
    swift_bridgeObjectRelease();
    uint64_t v103 = _swiftEmptyArrayStorage;
    uint64_t v108 = v96;
    uint64_t v109 = (uint64_t)v425;
    uint64_t v110 = v415;
  }

  v437 = _swiftEmptyArrayStorage;
  v436 = _swiftEmptyArrayStorage;
  uint64_t v111 = v414;
  sub_1001A8360(v109, v414, &qword_1003FD0B0);
  int v112 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))v412 + 6))(v111, 1LL, v413);
  uint64_t v113 = (uint64_t)v417;
  if (v112 == 1)
  {
    sub_1001603DC(v111, &qword_1003FD0B0);
    sub_10019BDA0((uint64_t)v103, v392, (unint64_t *)&v437, (unint64_t *)&v436);
    swift_bridgeObjectRelease();
LABEL_34:
    LODWORD(v113) = 0;
    goto LABEL_35;
  }

  v425 = v103;
  sub_1001A81D4(v111, v408, type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v114 = sub_10025467C();
  uint64_t v115 = *(void *)(v382
                   + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context);
  if (*(_BYTE *)(v115
                + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering) != 1)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    sub_10019BDA0((uint64_t)v425, v392, (unint64_t *)&v437, (unint64_t *)&v436);
    swift_bridgeObjectRelease();
    sub_1001A813C(v408, type metadata accessor for HostedRoutingSessionSnapshot);
    goto LABEL_34;
  }

  uint64_t v426 = v108;
  uint64_t v116 = *(void *)(v115 + 24);
  uint64_t v117 = *v107;
  uint64_t v118 = v107[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v119 = sub_100158DD4(v117, v118, v116);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v119 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v108 = v426;
    goto LABEL_33;
  }

  uint64_t v120 = *(void *)(v114 + 16);
  if (v120)
  {
    uint64_t v121 = v114 + ((*(unsigned __int8 *)(v373 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v373 + 80));
    uint64_t v122 = *(void *)(v373 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A80F8(v121, (uint64_t)v110, type metadata accessor for HostedRoutingSession);
      uint64_t v123 = v110[1];
      uint64_t v124 = v107[1];
      BOOL v125 = *v110 == *v107 && v123 == v124;
      if (v125 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v110, v123, *v107, v124, 0LL) & 1) != 0) {
        break;
      }
      sub_1001A813C((uint64_t)v110, type metadata accessor for HostedRoutingSession);
      v121 += v122;
      if (!--v120)
      {
        swift_bridgeObjectRelease();
        uint64_t v126 = 1LL;
        uint64_t v113 = (uint64_t)v417;
        goto LABEL_30;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v127 = v371;
    sub_1001A81D4((uint64_t)v110, v371, type metadata accessor for HostedRoutingSession);
    uint64_t v126 = 0LL;
    uint64_t v113 = (uint64_t)v417;
  }

  else
  {
    uint64_t v126 = 1LL;
LABEL_30:
    uint64_t v127 = v371;
  }

  uint64_t v128 = v373;
  uint64_t v129 = v372;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v373 + 56))(v127, v126, 1LL, v372);
  swift_bridgeObjectRelease();
  int v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v127, 1LL, v129);
  uint64_t v108 = v426;
  if (v130 == 1)
  {
    sub_1001603DC(v127, &qword_1003F94C0);
    goto LABEL_33;
  }

  sub_1001A81D4(v127, v374, type metadata accessor for HostedRoutingSession);
  uint64_t v193 = sub_10025026C();
  uint64_t v194 = *(void *)(v193 + 16);
  if (v194)
  {
    uint64_t v195 = v193 + ((*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80));
    uint64_t v196 = v423[9];
    uint64_t v197 = (uint64_t)v383;
    while (1)
    {
      sub_1001A80F8(v195, v197, type metadata accessor for HostedRoutingItem);
      int v198 = *(unsigned __int8 *)(v197 + *(int *)(v416 + 36));
      sub_1001A813C(v197, type metadata accessor for HostedRoutingItem);
      if (v198 != 1) {
        break;
      }
      v195 += v196;
      if (!--v194)
      {
        swift_bridgeObjectRelease();
        uint64_t v107 = v422;
        uint64_t v113 = (uint64_t)v417;
        goto LABEL_71;
      }
    }

LABEL_80:
      ++v231;
      sub_1001A813C((uint64_t)v428, type metadata accessor for HostedRoutingItem);
    }

    while (v231 != v417);
    swift_bridgeObjectRelease();
  }

  uint64_t v245 = *(void *)(v374 + 24);
  uint64_t v228 = *(uint64_t **)(v245 + 16);
  if (v228)
  {
    uint64_t v229 = *(void *)(v220 + 16);
    unint64_t v246 = (*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80);
    v428 = (uint64_t (*)(char *, uint64_t, uint64_t))(v245 + v246);
    uint64_t v416 = v246;
    v417 = (char *)(v220 + v246);
    swift_bridgeObjectRetain();
    uint64_t v232 = 0LL;
    uint64_t v113 = (uint64_t)type metadata accessor for HostedRoutingItem;
    do
    {
      uint64_t v247 = v423[9];
      sub_1001A80F8((uint64_t)v428 + v247 * (void)v232, (uint64_t)v427, type metadata accessor for HostedRoutingItem);
      if (v229)
      {
        swift_bridgeObjectRetain();
        uint64_t v248 = (uint64_t)v417;
        uint64_t v249 = v229;
        while (1)
        {
          sub_1001A80F8(v248, (uint64_t)v227, type metadata accessor for HostedRoutingItem);
          uint64_t v250 = v227[1];
          uint64_t v251 = *((void *)v427 + 1);
          BOOL v252 = *v227 == *(void *)v427 && v250 == v251;
          if (v252 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v227, v250, *(void *)v427, v251, 0LL) & 1) != 0) {
            break;
          }
          sub_1001A813C((uint64_t)v227, type metadata accessor for HostedRoutingItem);
          v248 += v247;
          if (!--v249)
          {
            uint64_t v220 = (uint64_t)v425;
            swift_bridgeObjectRelease();
            goto LABEL_99;
          }
        }

        swift_bridgeObjectRelease();
        uint64_t v253 = (uint64_t)v227;
        uint64_t v254 = v387;
        sub_1001A81D4(v253, (uint64_t)v387, type metadata accessor for HostedRoutingItem);
        uint64_t v256 = *v254;
        uint64_t v255 = v254[1];
        swift_bridgeObjectRetain();
        sub_10015B404((uint64_t *)&v430, v256, v255);
        swift_bridgeObjectRelease();
        sub_1001A80F8((uint64_t)v254, v388, type metadata accessor for HostedRoutingItem);
        swift_beginAccess(&v436, &v430, 33LL, 0LL);
        unint64_t v257 = (unint64_t)v436;
        if ((swift_isUniquelyReferenced_nonNull_native(v436) & 1) == 0) {
          unint64_t v257 = sub_10019F720( 0,  *(void *)(v257 + 16) + 1LL,  1,  v257,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        unint64_t v259 = *(void *)(v257 + 16);
        unint64_t v258 = *(void *)(v257 + 24);
        if (v259 >= v258 >> 1) {
          unint64_t v257 = sub_10019F720( v258 > 1,  v259 + 1,  1,  v257,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
        }
        *(void *)(v257 + swift_weakDestroy(v0 + 16) = v259 + 1;
        sub_1001A81D4(v388, v257 + v416 + v259 * v247, type metadata accessor for HostedRoutingItem);
        v436 = (void *)v257;
        swift_endAccess(&v430);
        sub_1001A813C((uint64_t)v387, type metadata accessor for HostedRoutingItem);
        uint64_t v220 = (uint64_t)v425;
        uint64_t v227 = v391;
      }

LABEL_99:
      uint64_t v232 = (uint64_t (*)(uint64_t))((char *)v232 + 1);
      sub_1001A813C((uint64_t)v427, type metadata accessor for HostedRoutingItem);
    }

    while ((char *)v232 != (char *)v228);
    swift_bridgeObjectRelease();
  }

  uint64_t v260 = (uint64_t)v385;
  uint64_t v261 = (uint64_t *)v384;
  v428 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v220 + 16);
  if (v428)
  {
    uint64_t v262 = 0LL;
    v417 = (char *)((*((unsigned __int8 *)v423 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v423 + 80));
    v427 = &v417[v220];
    uint64_t v263 = v423[9];
    while (1)
    {
      sub_1001A80F8((uint64_t)&v427[v263 * (void)v262], (uint64_t)v261, type metadata accessor for HostedRoutingItem);
      uint64_t v264 = v431;
      if (!*(void *)(v431 + 16)) {
        goto LABEL_135;
      }
      uint64_t v266 = *v261;
      uint64_t v265 = v261[1];
      Hasher.init(_seed:)(&v430, *(void *)(v431 + 40));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)(&v430, v266, v265);
      Swift::Int v267 = Hasher._finalize()();
      uint64_t v268 = -1LL << *(_BYTE *)(v264 + 32);
      unint64_t v269 = v267 & ~v268;
      if (((*(void *)(v264 + 56 + ((v269 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v269) & 1) == 0) {
        goto LABEL_134;
      }
      uint64_t v270 = *(void *)(v264 + 48);
      uint64_t v271 = (void *)(v270 + 16 * v269);
      uint64_t v272 = v271[1];
      BOOL v273 = *v271 == v266 && v272 == v265;
      if (!v273 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v271, v272, v266, v265, 0LL) & 1) == 0) {
        break;
      }
LABEL_117:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v260 = (uint64_t)v385;
      uint64_t v261 = (uint64_t *)v384;
LABEL_118:
      uint64_t v262 = (uint64_t (*)(char *, uint64_t, uint64_t))((char *)v262 + 1);
      sub_1001A813C((uint64_t)v261, type metadata accessor for HostedRoutingItem);
      if (v262 == v428) {
        goto LABEL_142;
      }
    }

    uint64_t v274 = ~v268;
    while (1)
    {
      unint64_t v269 = (v269 + 1) & v274;
      if (((*(void *)(v264 + 56 + ((v269 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v269) & 1) == 0) {
        break;
      }
      unint64_t v275 = (void *)(v270 + 16 * v269);
      uint64_t v276 = v275[1];
      BOOL v277 = *v275 == v266 && v276 == v265;
      if (v277 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v275, v276, v266, v265, 0LL) & 1) != 0) {
        goto LABEL_117;
      }
    }

        if ((v73 & 1) != 0) {
          goto LABEL_139;
        }
        uint64_t v81 = &v48[16 * v50];
        uint64_t v83 = *(void *)v81;
        uint64_t v82 = *((void *)v81 + 1);
        uint64_t v61 = __OFSUB__(v82, v83);
        uint64_t v84 = v82 - v83;
        if (v61) {
          goto LABEL_142;
        }
        if (v84 < v72) {
          goto LABEL_15;
        }
LABEL_107:
        uint64_t v89 = v50 - 1;
        if (v50 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        uint64_t v90 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        int v91 = v11;
        uint64_t v92 = &v48[16 * v89];
        uint64_t v93 = *(void *)v92;
        uint64_t v94 = v48;
        uint64_t v95 = v50;
        uint64_t v96 = &v48[16 * v50];
        unint64_t v97 = *((void *)v96 + 1);
        int64_t v98 = v90;
        sub_10021B18C( (char *)(v90 + 16LL * *(void *)v92),  (char *)(v90 + 16LL * *(void *)v96),  v90 + 16 * v97,  __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v97 < v93) {
          goto LABEL_132;
        }
        if (v95 > *((void *)v91 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v92 = v93;
        *(void *)&v94[16 * v89 + 8] = v97;
        uint64_t v99 = *((void *)v91 + 2);
        if (v95 >= v99) {
          goto LABEL_134;
        }
        uint64_t v11 = v91;
        uint64_t v12 = v99 - 1;
        memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
        uint64_t v48 = v94;
        *((void *)v91 + 2) = v99 - 1;
        uint64_t v10 = v98;
        uint64_t v9 = v113;
        if (v99 <= 2) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v12 = 1LL;
LABEL_15:
    uint64_t v3 = v112;
    if (v9 >= v112)
    {
      uint64_t v8 = v110;
      goto LABEL_118;
    }
  }

  if (__OFADD__(v13, v111)) {
    goto LABEL_153;
  }
  if (v13 + v111 >= v3) {
    uint64_t v36 = v3;
  }
  else {
    uint64_t v36 = v13 + v111;
  }
  if (v36 >= v13)
  {
    if (v9 != v36)
    {
      uint64_t v37 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v38 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v39 = *v38;
        uint64_t v40 = v38[1];
        uint64_t v41 = v13;
        uint64_t v42 = v37;
        do
        {
          uint64_t v43 = *(v42 - 2);
          uint64_t v44 = *(v42 - 1);
          uint64_t v45 = v39 == v43 && v40 == v44;
          if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1LL) & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v39 = *v42;
          uint64_t v40 = v42[1];
          *(_OWORD *)uint64_t v42 = *((_OWORD *)v42 - 1);
          *(v42 - 1) = v40;
          *(v42 - 2) = v39;
          v42 -= 2;
          ++v41;
        }

        while (v9 != v41);
        ++v9;
        v37 += 2;
      }

      while (v9 != v36);
      uint64_t v9 = v36;
    }

    goto LABEL_67;
  }

LABEL_134:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v260 = (uint64_t)v385;
    uint64_t v261 = (uint64_t *)v384;
LABEL_135:
    if ((sub_10024A71C() & 1) != 0)
    {
      swift_beginAccess(&v437, &v430, 33LL, 0LL);
      uint64_t v278 = v376;
      sub_1001A80F8((uint64_t)v261, v376, type metadata accessor for HostedRoutingItem);
      sub_1001A43C4(0LL, 0LL, v278);
      swift_endAccess(&v430);
    }

    sub_1001A80F8((uint64_t)v261, v260, type metadata accessor for HostedRoutingItem);
    swift_beginAccess(&v436, &v430, 33LL, 0LL);
    unint64_t v279 = (unint64_t)v436;
    if ((swift_isUniquelyReferenced_nonNull_native(v436) & 1) == 0) {
      unint64_t v279 = sub_10019F720( 0,  *(void *)(v279 + 16) + 1LL,  1,  v279,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
    }
    unint64_t v281 = *(void *)(v279 + 16);
    unint64_t v280 = *(void *)(v279 + 24);
    if (v281 >= v280 >> 1) {
      unint64_t v279 = sub_10019F720(v280 > 1, v281 + 1, 1, v279, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
    }
    *(void *)(v279 + swift_weakDestroy(v0 + 16) = v281 + 1;
    sub_1001A81D4(v260, (uint64_t)&v417[v279 + v281 * v263], type metadata accessor for HostedRoutingItem);
    v436 = (void *)v279;
    swift_endAccess(&v430);
    goto LABEL_118;
  }

LABEL_54:
    uint64_t v178 = v422;
    uint64_t v179 = v422[1];
    v428 = (uint64_t (*)(char *, uint64_t, uint64_t))*v422;
    v427 = v435;
    uint64_t v426 = v434;
    uint64_t v180 = v399;
    sub_1001A8360(v154, v399, &qword_1003F9450);
    uint64_t v181 = v421;
    uint64_t v182 = (uint64_t)v404;
    (*(void (**)(char *, char *, uint64_t))(v400 + 16))(v404, (char *)v178 + v421[15], v401);
    unsigned __int8 v183 = *((_BYTE *)v178 + v393);
    uint64_t v184 = (unsigned int *)((char *)v178 + v181[12]);
    uint64_t v185 = *v184;
    unsigned __int8 v186 = *((_BYTE *)v184 + 4);
    uint64_t v187 = (uint64_t)v405;
    (*(void (**)(char *, char *, uint64_t))(v402 + 16))(v405, (char *)v178 + v181[8], v403);
    uint64_t v188 = (uint64_t)v178 + v181[14];
    uint64_t v189 = v406;
    sub_1001A8360(v188, v406, &qword_1003F9448);
    swift_bridgeObjectRetain();
    unint64_t v190 = (int *)variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
    uint64_t v191 = variable initialization expression of MRDFastSyncGroupSession.pendingParticipants();
    unsigned __int8 v433 = v186;
    sub_100250860( (uint64_t)v428,  v179,  v427,  v426,  v180,  v182,  v190,  v191,  v407,  v183,  SHIDWORD(v356[0]),  v185,  (v185 | ((unint64_t)v186 << 32)) >> 32,  v187,  v189);
    return sub_1001603DC(v419, &qword_1003F9450);
  }

  v415 = (void *)v199;
  LODWORD(v4swift_weakDestroy(v0 + 16) = v200;
  uint64_t v205 = v202;
  uint64_t v206 = *(void *)(v202 + 8);
  sub_1001A813C(v205, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  if (!v206)
  {
    uint64_t v203 = (uint64_t)v415;
    uint64_t v204 = v416;
    goto LABEL_145;
  }

  if (v201 != 1)
  {
    LOBYTE(v113) = (_BYTE)v425;
    if (v201)
    {
      sub_1001A0918((uint64_t)v415, v416, v201);
      goto LABEL_42;
    }

    id v207 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
    id v208 = [v207 nowPlayingServer];

    id v209 = [v208 localOriginClient];
    id v210 = [v209 deviceInfo];
    id v211 = [v210 systemMediaApplication];

    if (!v211)
    {
      sub_1001A0918((uint64_t)v415, v416, 0);

      goto LABEL_42;
    }

    v423 = v209;
    uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
    uint64_t v214 = v213;

    Swift::String v215 = v363;
    uint64_t v216 = v420;
    uint64_t v217 = v428( v363,  v382 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v420);
    uint64_t v218 = v361;
    RoutingSessionConfiguration.context.getter(v217);
    v139(v215, v216);
    uint64_t v219 = v381;
    if (v365(v218, v381) == enum case for RoutingSessionConfiguration.Context.app(_:))
    {
      (*(void (**)(char *, uint64_t))(v386 + 96))(v218, v219);
      if (*(void *)v218 != v212 || *((void *)v218 + 1) != v214)
      {
        char v316 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v218, *((void *)v218 + 1), v212, v214, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v297 = v422;
        uint64_t v298 = v426;
        uint64_t v299 = v416;
        uint64_t v300 = (uint64_t)v415;
        uint64_t v301 = v423;
        if ((v316 & 1) == 0)
        {
          sub_1001A0918((uint64_t)v415, v416, 0);

          goto LABEL_159;
        }

        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        sub_1001E37E4();
        if ((v1 & 1) == 0) {
          goto LABEL_58;
        }
      }

      __break(1u);
LABEL_25:
      int64_t v1 = v45[2];
      uint64_t v48 = v1;
      goto LABEL_26;
    }
  }

  uint64_t v32 = v7;
  uint64_t v33 = v8;
  uint64_t v34 = v32;
  uint64_t v35 = v33;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  uint64_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = (char **)swift_slowAlloc(16LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = (char *)v72;
    *(_DWORD *)uint64_t v38 = 138543874;
    uint64_t v77 = v34;
    uint64_t v40 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v38 + 4, v38 + 12);
    *uint64_t v39 = v34;

    *(_WORD *)(v38 + 12) = 2082;
    uint64_t v41 = *(void *)&v40[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    uint64_t v42 = *(void *)&v40[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v77 = (void *)sub_10015ADC4(v41, v42, (uint64_t *)&v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v38 + 22) = 2112;
    uint64_t v77 = v35;
    uint64_t v43 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v38 + 24, v38 + 32);
    v39[1] = v35;

    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "[%{public}@]<%{public}s> No prewarmed identifiers for identity: %@.",  (uint8_t *)v38,  0x20u);
    uint64_t v44 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v39, 2LL, v44);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
  }
}

            uint64_t v50 = (v54 - 1) & v54;
            uint64_t v52 = __clz(__rbit64(v54)) + (v46 << 6);
          }

          uint64_t v56 = 16 * v52;
          uint64_t v57 = (uint64_t *)(v45[6] + v56);
          uint64_t v58 = *v57;
          uint64_t v59 = v57[1];
          uint64_t v60 = (uint64_t *)(v45[7] + v56);
          uint64_t v62 = *v60;
          uint64_t v61 = v60[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v63 = sub_1001FCF88();
          uint64_t v64 = sub_100158DD4(v62, v61, (uint64_t)v63);
          swift_bridgeObjectRelease();
          if ((v64 & 1) == 0) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRetain();
        if (!*((void *)sub_100187D24() + 2)) {
          break;
        }
        sub_10015CAD4(v62, v61);
        if ((v65 & 1) == 0) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v61, 2LL);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v66 = swift_allocObject(&unk_1003A7408, 24LL, 7LL);
      swift_weakInit(v66 + 16, v2);
      uint64_t v67 = (void *)swift_allocObject(&unk_1003A7430, 64LL, 7LL);
      v67[2] = v66;
      v67[3] = v62;
      void v67[4] = v61;
      v67[5] = v58;
      uint64_t v68 = v99;
      v67[6] = v59;
      v67[7] = v68;
      uint64_t v69 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
      aBlock[4] = sub_100200594;
      uint64_t v103 = v67;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100157EA8;
      aBlock[3] = &unk_1003A7448;
      uint64_t v70 = _Block_copy(aBlock);
      uint64_t v71 = v103;
      uint64_t v72 = v98;
      swift_bridgeObjectRetain();
      swift_retain(v66);
      swift_release(v71);
      uint64_t v73 = [v69 initWithInterval:0 repeats:v72 queue:v70 block:300.0];

      _Block_release(v70);
      swift_release(v66);
      uint64_t v74 = sub_100187D24();
      uint64_t v75 = v74;
      if (v73) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v85 = sub_10015CAD4(v62, v61);
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      if ((v87 & 1) == 0) {
        goto LABEL_77;
      }
      int v88 = swift_isUniquelyReferenced_nonNull_native(v75);
      aBlock[0] = v75;
      uint64_t v45 = v97;
      if ((v88 & 1) == 0)
      {
        sub_1001F339C();
        uint64_t v75 = (void *)aBlock[0];
      }

      swift_bridgeObjectRelease();
      uint64_t v89 = *(void **)(v75[7] + 8 * v85);
      sub_1001B1630(v85, (uint64_t)v75);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_78:
      void v2[4] = v75;
      swift_bridgeObjectRelease();
    }

    uint64_t v76 = swift_isUniquelyReferenced_nonNull_native(v74);
    aBlock[0] = v75;
    uint64_t v78 = sub_10015CAD4(v62, v61);
    uint64_t v79 = v75[2];
    uint64_t v80 = (v77 & 1) == 0;
    uint64_t v81 = v79 + v80;
    if (__OFADD__(v79, v80)) {
      goto LABEL_82;
    }
    uint64_t v82 = v77;
    if (v75[3] < v81)
    {
      sub_1001F2F34(v81, v76);
      uint64_t v83 = sub_10015CAD4(v62, v61);
      if ((v82 & 1) != (v84 & 1)) {
        goto LABEL_87;
      }
      uint64_t v78 = v83;
      uint64_t v75 = (void *)aBlock[0];
      if ((v82 & 1) == 0) {
        goto LABEL_74;
      }
LABEL_71:
      uint64_t v90 = v75[7];

      *(void *)(v90 + 8 * v7_Block_object_dispose(va, 8) = v73;
LABEL_76:
      swift_bridgeObjectRelease();
LABEL_77:
      swift_bridgeObjectRelease();
      uint64_t v45 = v97;
      goto LABEL_78;
    }

    if ((v76 & 1) != 0)
    {
      uint64_t v75 = (void *)aBlock[0];
      if ((v77 & 1) != 0) {
        goto LABEL_71;
      }
    }

    else
    {
      sub_1001F339C();
      uint64_t v75 = (void *)aBlock[0];
      if ((v82 & 1) != 0) {
        goto LABEL_71;
      }
    }

LABEL_158:
        v302 = v429;
        sub_100249E70(*v297, v297[1], v429);
        swift_beginAccess(&v437, &v430, 33LL, 0LL);
        uint64_t v303 = (uint64_t)v302;
        uint64_t v304 = v376;
        sub_1001A81D4(v303, v376, type metadata accessor for HostedRoutingItem);
        sub_1001A43C4(0LL, 0LL, v304);
        swift_endAccess(&v430);

        sub_1001A0918(v300, v299, 0);
LABEL_159:
        char v145 = v411;
        uint64_t v107 = v297;
        uint64_t v108 = v298;
        goto LABEL_44;
      }

      swift_bridgeObjectRelease_n(v214, 2LL);
    }

    else
    {
      swift_bridgeObjectRelease();
      v138(v218, v219);
    }

    uint64_t v297 = v422;
    uint64_t v298 = v426;
    uint64_t v299 = v416;
    uint64_t v300 = (uint64_t)v415;
    uint64_t v301 = v423;
    goto LABEL_158;
  }

  id v284 = [(id)objc_opt_self(MRDMediaRemoteServer) server];
  id v285 = [v284 nowPlayingServer];

  id v286 = [v285 localOriginClient];
  id v287 = [v286 deviceInfo];
  id v288 = [v287 systemPodcastApplication];

  LOBYTE(v113) = (_BYTE)v425;
  if (!v288)
  {
    sub_1001A0918((uint64_t)v415, v416, 1u);

    goto LABEL_42;
  }

  v413 = (uint64_t (*)(uint64_t))v286;
  uint64_t v289 = static String._unconditionallyBridgeFromObjectiveC(_:)(v288);
  uint64_t v291 = v290;
  uint64_t v292 = v364;
  uint64_t v293 = v420;
  uint64_t v294 = v428( v364,  v382 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration,  v420);
  v295 = v362;
  RoutingSessionConfiguration.context.getter(v294);
  v139(v292, v293);
  uint64_t v296 = v381;
  if (v365(v295, v381) != enum case for RoutingSessionConfiguration.Context.app(_:))
  {
    swift_bridgeObjectRelease();
    v138(v295, v296);
    goto LABEL_161;
  }

  (*(void (**)(char *, uint64_t))(v386 + 96))(v295, v296);
  if (*(void *)v295 == v289 && *((void *)v295 + 1) == v291)
  {
    swift_bridgeObjectRelease_n(v291, 2LL);
LABEL_161:
    uint64_t v232 = v413;
    goto LABEL_162;
  }

  char v317 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v295, *((void *)v295 + 1), v289, v291, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v232 = v413;
  if ((v317 & 1) == 0)
  {

    sub_1001A0918((uint64_t)v415, v416, 1u);
    goto LABEL_42;
  }

LABEL_162:
  id v305 = [v232 defaultSupportedCommandsForClient:v288];
  uint64_t v227 = &type metadata for Any;
  uint64_t v306 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v305, (char *)&type metadata for Any + 8);

  uint64_t v307 = (uint64_t)sub_100197300(v306);
  swift_bridgeObjectRelease();
  if (!v307)
  {
LABEL_173:
    uint64_t v228 = v422;
    uint64_t v108 = v426;
LABEL_174:
    __int128 v431 = 0u;
    __int128 v432 = 0u;
    char v145 = v411;
    uint64_t v107 = v228;
LABEL_175:
    uint64_t v314 = v416;
    uint64_t v315 = (uint64_t)v415;

    sub_1001A0918(v315, v314, 1u);
    sub_1001603DC((uint64_t)&v431, &qword_1003F9EE0);
    goto LABEL_44;
  }

  uint64_t v308 = v307 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v309 = *(void *)((v307 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v309)
  {
LABEL_172:
    swift_bridgeObjectRelease_n(v307, 2LL);
    goto LABEL_173;
  }

LABEL_165:
  unint64_t v414 = v307 & 0xC000000000000001LL;
  uint64_t v310 = 4LL;
  while (1)
  {
    if (v414) {
      id v311 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v310 - 4, v307);
    }
    else {
      id v311 = *(id *)(v307 + 8 * v310);
    }
    v312 = v311;
    uint64_t v313 = v310 - 3;
    if (__OFADD__(v310 - 4, 1LL))
    {
      __break(1u);
LABEL_219:
      if (v307 >= 0) {
        uint64_t v354 = v308;
      }
      else {
        uint64_t v354 = v307;
      }
      swift_bridgeObjectRetain();
      uint64_t v309 = _CocoaArrayWrapper.endIndex.getter(v354);
      if (!v309) {
        goto LABEL_172;
      }
      goto LABEL_165;
    }

    ++v310;
    if (v313 == v309) {
      goto LABEL_172;
    }
  }

  swift_bridgeObjectRelease_n(v307, 2LL);
  id v318 = [v312 options];

  uint64_t v228 = v422;
  uint64_t v229 = v426;
  if (!v318)
  {
    uint64_t v108 = v426;
    goto LABEL_174;
  }

  uint64_t v319 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v318,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  v435 = (char *)kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  id v320 = kMRMediaRemoteCommandInfoSupportedPlaybackSessionTypes;
  uint64_t v321 = sub_100156B68(&qword_1003F9500);
  unint64_t v322 = sub_1001A828C();
  AnyHashable.init<A>(_:)(&v435, v321, v322);
  if (*(void *)(v319 + 16))
  {
    unint64_t v323 = sub_10015CAA4((uint64_t)&v430);
    if ((v324 & 1) != 0)
    {
      sub_100160800(*(void *)(v319 + 56) + 32 * v323, (uint64_t)&v431);
      goto LABEL_187;
    }
  }

LABEL_186:
  __int128 v431 = 0u;
  __int128 v432 = 0u;
LABEL_187:
  sub_100160990((uint64_t)&v430);
  swift_bridgeObjectRelease();
  if (!*((void *)&v432 + 1))
  {
    char v145 = v411;
    uint64_t v107 = v228;
    uint64_t v108 = v229;
    goto LABEL_175;
  }

  uint64_t v325 = sub_100156B68(&qword_1003FA010);
  char v326 = swift_dynamicCast(&v430, &v431, v227 + 1, v325, 6LL);
  char v145 = v411;
  if ((v326 & 1) == 0)
  {

    sub_1001A0918((uint64_t)v415, v416, 1u);
    uint64_t v107 = v228;
    uint64_t v108 = v229;
    goto LABEL_44;
  }

  uint64_t v327 = v430;
  v328 = (char *)v430[2];
  if (!v328)
  {

    swift_bridgeObjectRelease();
LABEL_217:
    uint64_t v203 = (uint64_t)v415;
    uint64_t v204 = v416;
    unsigned __int8 v283 = 1;
    goto LABEL_146;
  }

  unint64_t v329 = (unint64_t)(v430 + 4);
  v410 = v430;
  swift_bridgeObjectRetain();
  v330 = 0LL;
  v331 = &qword_1003F9450;
  uint64_t v332 = (uint64_t)v360;
  v412 = v328;
  unint64_t v414 = (unint64_t)(v327 + 4);
  while (1)
  {
    v334 = (uint64_t *)(v329 + 16LL * (void)v330);
    uint64_t v336 = *v334;
    uint64_t v335 = v334[1];
    sub_1001A8360((uint64_t)v423, v332, v331);
    v333 = v331;
    sub_1001603DC(v332, v331);
LABEL_192:
    ++v330;
    v331 = v333;
    if (v330 == v328)
    {

      swift_bridgeObjectRelease_n(v410, 2LL);
      goto LABEL_217;
    }
  }

  v333 = v331;
  v337 = *(void **)(v332 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A813C(v332, type metadata accessor for HostedRoutingSession.NowPlayingInfo);
  if (!v337[2]) {
    goto LABEL_201;
  }
  uint64_t v338 = v337[4];
  uint64_t v339 = v337[5];
  BOOL v340 = v338 == v336 && v339 == v335;
  if (v340
    || (uint64_t v341 = v337[2],
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v338, v339, v336, v335, 0LL),
        (result & 1) != 0))
  {
LABEL_214:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v410, 2LL);
    v350 = v422;
    v351 = v429;
    sub_100249E70(*v422, v422[1], v429);
    swift_beginAccess(&v437, &v430, 33LL, 0LL);
    uint64_t v352 = (uint64_t)v351;
    uint64_t v353 = v376;
    sub_1001A81D4(v352, v376, type metadata accessor for HostedRoutingItem);
    sub_1001A43C4(0LL, 0LL, v353);
    swift_endAccess(&v430);

    sub_1001A0918((uint64_t)v415, v416, 1u);
    uint64_t v107 = v350;
    uint64_t v108 = v426;
    goto LABEL_147;
  }

  if (v341 == 1)
  {
LABEL_201:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v328 = v412;
    unint64_t v329 = v414;
    goto LABEL_192;
  }

  v409 = v330;
  unint64_t v342 = v414;
  v343 = v337 + 7;
  uint64_t v344 = 1LL;
  uint64_t v345 = v336;
  while (1)
  {
    uint64_t v346 = v344 + 1;
    if (__OFADD__(v344, 1LL)) {
      break;
    }
    uint64_t v347 = *(v343 - 1);
    uint64_t v348 = *v343;
    if (v347 == v345 && v348 == v335) {
      goto LABEL_214;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v347, v348, v345, v335, 0LL);
    if ((result & 1) != 0) {
      goto LABEL_214;
    }
    v343 += 2;
    ++v344;
    if (v346 == v341)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v333 = &qword_1003F9450;
      uint64_t v332 = (uint64_t)v360;
      unint64_t v329 = v342;
      v330 = v409;
      v328 = v412;
      goto LABEL_192;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10019BB48(uint64_t *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v35 = (char *)&v34 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v34 = v17;
  uint64_t v37 = a5;
  if (v21)
  {
    char v22 = a4;
    uint64_t v24 = *a1;
    uint64_t v23 = a1[1];
    uint64_t v25 = *(void *)(v18 + 72);
    uint64_t v26 = (uint64_t *)(((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
                    + a2
                    + 8);
    while (1)
    {
      uint64_t v27 = *(v26 - 1);
      uint64_t v28 = *v26;
      BOOL v29 = v27 == v24 && v28 == v23;
      if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v24, v23, 0LL) & 1) != 0) {
        break;
      }
      uint64_t v26 = (uint64_t *)((char *)v26 + v25);
      if (!--v21)
      {
        char v30 = 0;
        a4 = v22;
        goto LABEL_12;
      }
    }

    char v30 = 1;
    a4 = v22;
  }

  else
  {
    char v30 = 0;
  }

uint64_t sub_10019BDA0(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v67 = a4;
  uint64_t v73 = a3;
  uint64_t v69 = a2;
  uint64_t v75 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v5 = *(void *)(v75 - 8);
  uint64_t v6 = __chkstk_darwin(v75);
  uint64_t v68 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v76 = (uint64_t)&v64 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v72 = (uint64_t)&v64 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v64 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (uint64_t *)((char *)&v64 - v16);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  char v22 = (char *)&v64 - v21;
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v70 = v5;
  uint64_t v74 = v14;
  if (v23)
  {
    unint64_t v71 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v24 = a1 + v71;
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v66 = a1;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A80F8(v24, (uint64_t)v22, type metadata accessor for HostedRoutingItem);
      BOOL v26 = sub_10024A5A8();
      sub_1001A80F8((uint64_t)v22, (uint64_t)v20, type metadata accessor for HostedRoutingItem);
      if (v26) {
        break;
      }
      char v27 = v20[*(int *)(v75 + 36)];
      sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
      sub_1001A80F8((uint64_t)v22, (uint64_t)v17, type metadata accessor for HostedRoutingItem);
      if ((v27 & 1) != 0) {
        goto LABEL_8;
      }
      uint64_t v33 = *v17;
      uint64_t v34 = v17[1];
      swift_bridgeObjectRetain();
      LOBYTE(v33) = sub_100158DD4(v33, v34, v69);
      swift_bridgeObjectRelease();
      sub_1001A813C((uint64_t)v17, type metadata accessor for HostedRoutingItem);
      if ((v33 & 1) != 0)
      {
        sub_1001A80F8((uint64_t)v22, v68, type metadata accessor for HostedRoutingItem);
        uint64_t v35 = v67;
        swift_beginAccess(v67, v82, 33LL, 0LL);
        unint64_t v36 = *v35;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
        *uint64_t v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v36 = sub_10019F720( 0,  *(void *)(v36 + 16) + 1LL,  1,  v36,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
          *uint64_t v67 = v36;
        }

        unint64_t v39 = *(void *)(v36 + 16);
        unint64_t v38 = *(void *)(v36 + 24);
        unint64_t v40 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          unint64_t v65 = v39 + 1;
          uint64_t v41 = sub_10019F720(v38 > 1, v39 + 1, 1, v36, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
          unint64_t v40 = v65;
          unint64_t v36 = v41;
          *uint64_t v67 = v41;
        }

        *(void *)(v36 + swift_weakDestroy(v0 + 16) = v40;
        sub_1001A81D4(v68, v36 + v71 + v39 * v25, type metadata accessor for HostedRoutingItem);
        swift_endAccess(v82);
        goto LABEL_4;
      }

uint64_t sub_10019C4E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_100156B68(&qword_1003F8920);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - v12;
  sub_1001A80F8(a1, a4, type metadata accessor for HostedRoutingItem);
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = v15;
  *(void *)(a4 + 24) = v14;
  uint64_t v16 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v17 = a4 + *(int *)(v16 + 32);
  sub_1001A8360(v17, (uint64_t)v13, &qword_1003F8920);
  uint64_t v18 = type metadata accessor for RoutingItem.SelectionIndicator(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1LL, v18);
  uint64_t result = sub_1001603DC((uint64_t)v13, &qword_1003F8920);
  if ((_DWORD)v15 == 1)
  {
    if (*(_BYTE *)(a1 + *(int *)(v16 + 36)) == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v19 + 104))( v11,  enum case for RoutingItem.SelectionIndicator.selected(_:),  v18);
    }

    else
    {
      if ((a3 & 1) != 0) {
        uint64_t v21 = (unsigned int *)&enum case for RoutingItem.SelectionIndicator.none(_:);
      }
      else {
        uint64_t v21 = (unsigned int *)&enum case for RoutingItem.SelectionIndicator.selectable(_:);
      }
      (*(void (**)(char *, void, uint64_t))(v19 + 104))(v11, *v21, v18);
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v11, 0LL, 1LL, v18);
    return sub_1001A831C((uint64_t)v11, v17, &qword_1003F8920);
  }

  return result;
}

Swift::Int sub_10019C698(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    unint64_t v5 = sub_1001A3680(v5);
  }
  Swift::Int result = sub_1001A45A8(a1, a2);
  unint64_t *v2 = v5;
  return result;
}

uint64_t sub_10019C734( uint64_t *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, int a7, double a8)
{
  int v114 = a7;
  uint64_t v115 = a6;
  uint64_t v116 = a5;
  uint64_t v118 = a3;
  char v119 = a4;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v105 = *(void *)(v11 - 8);
  uint64_t v106 = v11;
  __chkstk_darwin(v11);
  uint64_t v103 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v13);
  uint64_t v113 = (uint64_t)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v110 = *(void *)(v15 - 8);
  uint64_t v111 = v15;
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v117 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v102 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v101 = (char *)&v101 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v104 = (char *)&v101 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v107 = (char *)&v101 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v108 = (uint64_t)&v101 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v112 = (uint64_t)&v101 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v32 = (char *)&v101 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v101 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  unint64_t v38 = (char *)&v101 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)&v101 - v40;
  uint64_t result = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v101 - v43;
  uint64_t v46 = *a1;
  uint64_t v45 = a1[1];
  uint64_t v47 = a2[1];
  if (*a1 == *a2 && v45 == v47) {
    return result;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, a1[1], *a2, v47, 0LL);
  if ((result & 1) != 0) {
    return result;
  }
  if ((RoutingSessionConfiguration.filterInactiveSessions.getter() & 1) != 0)
  {
    uint64_t v48 = v116[1];
    if (v48
      && (v46 == *v116 && v48 == v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v46, v45, *v116, v48, 0LL) & 1) != 0))
    {
      sub_1001A80F8((uint64_t)a1, (uint64_t)v41, type metadata accessor for HostedRoutingSession);
      uint64_t v49 = v119;
      unint64_t v50 = v119[1];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
      v49[1] = v50;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v50 = sub_10019F720( 0,  *(void *)(v50 + 16) + 1LL,  1,  v50,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
        v49[1] = v50;
      }

      uint64_t v52 = v117;
      unint64_t v54 = *(void *)(v50 + 16);
      unint64_t v53 = *(void *)(v50 + 24);
      if (v54 >= v53 >> 1)
      {
        unint64_t v50 = sub_10019F720(v53 > 1, v54 + 1, 1, v50, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
        v49[1] = v50;
      }

      *(void *)(v50 + swift_weakDestroy(v0 + 16) = v54 + 1;
      return sub_1001A81D4( (uint64_t)v41,  v50 + ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
             + *(void *)(v52 + 72) * v54,
               type metadata accessor for HostedRoutingSession);
    }

    swift_bridgeObjectRetain();
    char v60 = sub_100158DD4(v46, v45, v115);
    swift_bridgeObjectRelease();
    if ((v60 & 1) != 0)
    {
      sub_1001A80F8((uint64_t)a1, (uint64_t)v38, type metadata accessor for HostedRoutingSession);
      BOOL v61 = v119;
      unint64_t v62 = *v119;
      char v63 = swift_isUniquelyReferenced_nonNull_native(*v119);
      unint64_t *v61 = v62;
      if ((v63 & 1) == 0)
      {
        unint64_t v62 = sub_10019F720( 0,  *(void *)(v62 + 16) + 1LL,  1,  v62,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
        unint64_t *v61 = v62;
      }

      uint64_t v64 = v117;
      unint64_t v66 = *(void *)(v62 + 16);
      unint64_t v65 = *(void *)(v62 + 24);
      if (v66 >= v65 >> 1)
      {
        unint64_t v62 = sub_10019F720(v65 > 1, v66 + 1, 1, v62, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
        unint64_t *v61 = v62;
      }

      *(void *)(v62 + swift_weakDestroy(v0 + 16) = v66 + 1;
      return sub_1001A81D4( (uint64_t)v38,  v62 + ((*(unsigned __int8 *)(v64 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))
             + *(void *)(v64 + 72) * v66,
               type metadata accessor for HostedRoutingSession);
    }

    sub_1001A80F8((uint64_t)a1, (uint64_t)v35, type metadata accessor for HostedRoutingSession);
    if ((v114 & 1) != 0)
    {
      sub_1001A813C((uint64_t)v35, type metadata accessor for HostedRoutingSession);
      goto LABEL_33;
    }

    char v67 = sub_10024B254();
    sub_1001A813C((uint64_t)v35, type metadata accessor for HostedRoutingSession);
    if ((v67 & 1) == 0)
    {
LABEL_33:
      if (*((_BYTE *)a1 + *(int *)(v17 + 64)) == 1)
      {
        uint64_t v74 = v112;
        sub_1001A80F8((uint64_t)a1, v112, type metadata accessor for HostedRoutingSession);
        uint64_t v75 = v119;
        unint64_t v76 = *v119;
        char v77 = swift_isUniquelyReferenced_nonNull_native(*v119);
        unint64_t *v75 = v76;
        if ((v77 & 1) == 0)
        {
          unint64_t v76 = sub_10019F720( 0,  *(void *)(v76 + 16) + 1LL,  1,  v76,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
          unint64_t *v75 = v76;
        }

        uint64_t v78 = v117;
        unint64_t v80 = *(void *)(v76 + 16);
        unint64_t v79 = *(void *)(v76 + 24);
        unint64_t v81 = v80 + 1;
        if (v80 >= v79 >> 1)
        {
          unint64_t v76 = sub_10019F720( v79 > 1,  v80 + 1,  1,  v76,  &qword_1003F94E8,  type metadata accessor for HostedRoutingSession);
          unint64_t *v75 = v76;
        }

uint64_t sub_10019D1E0(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [a4 deviceUID];
  if (!v14 || (v14, [a4 groupContainsDiscoverableGroupLeader]))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }

  if (*(void *)(a1 + 16))
  {
    sub_1001A80F8( a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)),  (uint64_t)v13,  type metadata accessor for HostedRoutingSourceSession);
    uint64_t v15 = sub_10024B254();
    if ((v15 & 1) != 0)
    {
      uint64_t v27 = a2;
      unint64_t v28 = a3;
      __chkstk_darwin(v15);
      *(&v26 - 4) = (uint64_t)a4;
      *(&v26 - 3) = (uint64_t)&v27;
      uint64_t v24 = v13;
      uint64_t v25 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_100197418( (uint64_t (*)(char *))sub_1001A83A4,  &v26 - 6,  a1,  type metadata accessor for HostedRoutingSourceSession,  (void (*)(BOOL, uint64_t, uint64_t))sub_1001A3FE8);
      uint64_t v17 = v27;
      unint64_t v18 = v28;
      swift_bridgeObjectRetain();
      a1 = MRDFastSyncGroupSessionState.rawValue.getter(v16, v17, v18, v19);
      sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSourceSession);
      swift_bridgeObjectRelease();
      return a1;
    }

    sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSourceSession);
  }

  uint64_t v27 = 0LL;
  unint64_t v28 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(72LL);
  uint64_t v30 = v27;
  unint64_t v31 = v28;
  v21._uint64_t countAndFlagsBits = 91LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v9, 0LL);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x800000010033B680LL;
  v23._uint64_t countAndFlagsBits = 0xD000000000000043LL;
  String.append(_:)(v23);
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  unint64_t v29 = a3;
  _print_unlocked<A, B>(_:_:)( &v27,  &v30,  &type metadata for RoutingSessionsState,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  "mediaremoted/RoutingSessionServer.swift",  39LL,  2LL,  931LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10019D474(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v88 = *v4;
  uint64_t v9 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v89 = (uint64_t)&v78 - v13;
  uint64_t v14 = sub_100156B68(&qword_1003F9518);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v87 = (uint64_t *)((char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v86 = (uint64_t *)((char *)&v78 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v78 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)&v78 - v27;
  __chkstk_darwin(v26);
  uint64_t v90 = (unint64_t *)((char *)&v78 - v29);
  id v30 = [a4 deviceUID];
  if (!v30)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }

  unint64_t v31 = v30;
  char v84 = v28;
  unint64_t v85 = v12;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v34 = v33;

  unint64_t v35 = a2;
  sub_10024F520(v32, v34, a1, (uint64_t)v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_1001603DC((uint64_t)v16, &qword_1003F9518);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }

  sub_1001A81D4((uint64_t)v16, (uint64_t)v90, type metadata accessor for HostedRoutingSourceSession);
  uint64_t v96 = a1;
  if (*(void *)(a1 + 16))
  {
    uint64_t v36 = v84;
    sub_1001A80F8( a1 + ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)),  (uint64_t)v84,  type metadata accessor for HostedRoutingSourceSession);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v37 = sub_10024B254();
    uint64_t v38 = (uint64_t)v85;
    if ((v37 & 1) == 0)
    {
      sub_1001A813C((uint64_t)v36, type metadata accessor for HostedRoutingSourceSession);
      goto LABEL_29;
    }

    uint64_t v81 = sub_100174330();
    uint64_t v39 = v89;
    sub_1001A8360(v81, v89, (uint64_t *)&unk_1003FBBE0);
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v82 = *(void *)(v40 - 8);
    uint64_t v83 = v40;
    uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v82 + 48);
    int v42 = v41(v39, 1LL);
    uint64_t v43 = v90;
    if (v42 == 1)
    {
      sub_1001603DC(v39, (uint64_t *)&unk_1003FBBE0);
      uint64_t v44 = v83;
    }

    else
    {
      uint64_t v45 = sub_1001A80F8((uint64_t)v90, (uint64_t)v25, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.info.getter();
      int v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc(22LL, -1LL);
        int v79 = v48;
        uint64_t v50 = v49;
        uint64_t v80 = swift_slowAlloc(64LL, -1LL);
        uint64_t v91 = v80;
        *(_DWORD *)uint64_t v50 = 136315394;
        os_log_t v78 = v46;
        uint64_t v51 = _typeName(_:qualified:)(v88, 0LL);
        uint64_t v94 = sub_10015ADC4(v51, v52, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v50 + 4, v50 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2080;
        uint64_t v53 = sub_100156FEC( &qword_1003F9520,  type metadata accessor for HostedRoutingSourceSession,  (uint64_t)&unk_1003501C8);
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v17, v53);
        uint64_t v94 = sub_10015ADC4(v54, v55, &v91);
        uint64_t v36 = v84;
        uint64_t v38 = (uint64_t)v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v25, type metadata accessor for HostedRoutingSourceSession);
        os_log_t v56 = v78;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  (os_log_type_t)v79,  "[%s] filterRedundantLocalSession - removing local session because local device found in remote session: %s",  (uint8_t *)v50,  0x16u);
        uint64_t v57 = v80;
        swift_arrayDestroy(v80, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {

        sub_1001A813C((uint64_t)v25, type metadata accessor for HostedRoutingSourceSession);
      }

      uint64_t v44 = v83;
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v89, v83);
      a1 = v96;
    }

    if (*(void *)(a1 + 16))
    {
      sub_1001A64AC(0LL, 1LL);
      uint64_t v58 = v36[1];
      if (*v36 == v35 && v58 == a3 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v36, v58, v35, a3, 0LL) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1001A8360(v81, v38, (uint64_t *)&unk_1003FBBE0);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41)(v38, 1LL, v44) == 1)
        {
          sub_1001603DC(v38, (uint64_t *)&unk_1003FBBE0);
        }

        else
        {
          char v60 = v86;
          sub_1001A80F8((uint64_t)v36, (uint64_t)v86, type metadata accessor for HostedRoutingSourceSession);
          BOOL v61 = v87;
          uint64_t v62 = sub_1001A80F8((uint64_t)v43, (uint64_t)v87, type metadata accessor for HostedRoutingSourceSession);
          char v63 = (os_log_s *)Logger.logObject.getter(v62);
          os_log_type_t v64 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v63, v64))
          {
            uint64_t v65 = swift_slowAlloc(32LL, -1LL);
            uint64_t v66 = swift_slowAlloc(96LL, -1LL);
            uint64_t v91 = v66;
            *(_DWORD *)uint64_t v65 = 136315650;
            uint64_t v67 = _typeName(_:qualified:)(v88, 0LL);
            uint64_t v94 = sub_10015ADC4(v67, v68, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v65 + 4, v65 + 12);
            swift_bridgeObjectRelease();
            *(_WORD *)(v65 + 12) = 2080;
            uint64_t v69 = *v60;
            unint64_t v70 = v60[1];
            swift_bridgeObjectRetain();
            uint64_t v94 = sub_10015ADC4(v69, v70, &v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v65 + 14, v65 + 22);
            swift_bridgeObjectRelease();
            sub_1001A813C((uint64_t)v60, type metadata accessor for HostedRoutingSourceSession);
            *(_WORD *)(v65 + 22) = 2080;
            uint64_t v71 = *v61;
            unint64_t v72 = v61[1];
            swift_bridgeObjectRetain();
            uint64_t v94 = sub_10015ADC4(v71, v72, &v91);
            uint64_t v44 = v83;
            uint64_t v36 = v84;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v65 + 24, v65 + 32);
            swift_bridgeObjectRelease();
            uint64_t v38 = (uint64_t)v85;
            sub_1001A813C((uint64_t)v61, type metadata accessor for HostedRoutingSourceSession);
            _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "[%s] filterRedundantLocalSession - updating activeSessionIdentifier from: %s to: %s",  (uint8_t *)v65,  0x20u);
            swift_arrayDestroy(v66, 3LL, (char *)&type metadata for Any + 8);
            uint64_t v73 = v66;
            uint64_t v43 = v90;
            swift_slowDealloc(v73, -1LL, -1LL);
            swift_slowDealloc(v65, -1LL, -1LL);
          }

          else
          {

            sub_1001A813C((uint64_t)v60, type metadata accessor for HostedRoutingSourceSession);
            sub_1001A813C((uint64_t)v61, type metadata accessor for HostedRoutingSourceSession);
          }

          (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v38, v44);
        }

        unint64_t v35 = *v43;
        a3 = v43[1];
        swift_bridgeObjectRetain();
      }

      a1 = MRDFastSyncGroupSessionState.rawValue.getter(v96, v35, a3, v59);
      sub_1001A813C((uint64_t)v36, type metadata accessor for HostedRoutingSourceSession);
      sub_1001A813C((uint64_t)v43, type metadata accessor for HostedRoutingSourceSession);
      return a1;
    }

    __break(1u);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_29:
  uint64_t v91 = 0LL;
  unint64_t v92 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(64LL);
  uint64_t v94 = v91;
  unint64_t v95 = v92;
  v75._uint64_t countAndFlagsBits = 91LL;
  v75._object = (void *)0xE100000000000000LL;
  String.append(_:)(v75);
  v76._uint64_t countAndFlagsBits = _typeName(_:qualified:)(v88, 0LL);
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  v77._object = (void *)0x800000010033B640LL;
  v77._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
  String.append(_:)(v77);
  uint64_t v91 = a1;
  unint64_t v92 = v35;
  unint64_t v93 = a3;
  _print_unlocked<A, B>(_:_:)( &v91,  &v94,  &type metadata for RoutingSessionsState,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v94,  v95,  "mediaremoted/RoutingSessionServer.swift",  39LL,  2LL,  971LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10019DD40(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v85 = a5;
  uint64_t v9 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)&v74[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = __chkstk_darwin(v10);
  char v84 = (uint64_t *)&v74[-v14];
  __chkstk_darwin(v13);
  uint64_t v16 = &v74[-v15];
  uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = &v74[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v18);
  uint64_t v22 = &v74[-v21];
  uint64_t v23 = a1[3];
  if (!v23) {
    return 1LL;
  }
  uint64_t v82 = v12;
  uint64_t v83 = (void *)a4;
  uint64_t v24 = a1[2];
  swift_bridgeObjectRetain();
  id v25 = [a2 groupUID];
  if (!v25)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  uint64_t v26 = v25;
  uint64_t v81 = a3;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v29 = v28;

  if (v24 == v27 && v23 == v29)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, v27, v29, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0) {
    return 1LL;
  }
LABEL_8:
  uint64_t v32 = sub_100174330();
  sub_1001A8360(v32, (uint64_t)v22, (uint64_t *)&unk_1003FBBE0);
  uint64_t v33 = type metadata accessor for Logger(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  unint64_t v35 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48);
  if (v35(v22, 1LL, v33) == 1)
  {
    sub_1001603DC((uint64_t)v22, (uint64_t *)&unk_1003FBBE0);
    uint64_t v36 = v81;
  }

  else
  {
    uint64_t v79 = v32;
    uint64_t v37 = sub_1001A80F8((uint64_t)a1, (uint64_t)v16, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.info.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v78 = v33;
      uint64_t v42 = v41;
      uint64_t v77 = swift_slowAlloc(64LL, -1LL);
      uint64_t v87 = v77;
      *(_DWORD *)uint64_t v42 = 136315394;
      uint64_t v80 = v34;
      uint64_t v43 = _typeName(_:qualified:)(v85, 0LL);
      os_log_t v76 = v38;
      uint64_t v86 = sub_10015ADC4(v43, v44, &v87);
      int v75 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v45 = sub_100156FEC( &qword_1003F9520,  type metadata accessor for HostedRoutingSourceSession,  (uint64_t)&unk_1003501C8);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v9, v45);
      uint64_t v86 = sub_10015ADC4(v46, v47, &v87);
      uint64_t v34 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingSourceSession);
      os_log_t v48 = v76;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v75,  "[%s] filterUndiscoverableSiblingSessions - removing session: %s which matches local group identifier",  (uint8_t *)v42,  0x16u);
      uint64_t v49 = v77;
      swift_arrayDestroy(v77, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v50 = v42;
      uint64_t v33 = v78;
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {

      sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingSourceSession);
    }

    uint64_t v36 = v81;
    uint64_t v32 = v79;
    (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v22, v33);
  }

  uint64_t v51 = a1[1];
  uint64_t v52 = v36[1];
  if (*a1 == *v36 && v51 == v52
    || (v53 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v51, *v36, v52, 0LL), uint64_t result = 0LL, (v53 & 1) != 0))
  {
    sub_1001A8360(v32, (uint64_t)v20, (uint64_t *)&unk_1003FBBE0);
    if (v35(v20, 1LL, v33) == 1)
    {
      sub_1001603DC((uint64_t)v20, (uint64_t *)&unk_1003FBBE0);
      uint64_t v54 = v83;
    }

    else
    {
      uint64_t v80 = v34;
      uint64_t v55 = (uint64_t)a1;
      os_log_t v56 = v84;
      sub_1001A80F8(v55, (uint64_t)v84, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v57 = v82;
      uint64_t v54 = v83;
      uint64_t v58 = sub_1001A80F8((uint64_t)v83, (uint64_t)v82, type metadata accessor for HostedRoutingSourceSession);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.info.getter();
      int v61 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v62 = swift_slowAlloc(32LL, -1LL);
        uint64_t v78 = v33;
        uint64_t v63 = v62;
        uint64_t v79 = swift_slowAlloc(96LL, -1LL);
        uint64_t v87 = v79;
        *(_DWORD *)uint64_t v63 = 136315650;
        LODWORD(v77) = v61;
        uint64_t v64 = _typeName(_:qualified:)(v85, 0LL);
        uint64_t v86 = sub_10015ADC4(v64, v65, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 4, v63 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2080;
        uint64_t v66 = *v56;
        unint64_t v67 = v56[1];
        swift_bridgeObjectRetain();
        uint64_t v86 = sub_10015ADC4(v66, v67, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 14, v63 + 22);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v56, type metadata accessor for HostedRoutingSourceSession);
        *(_WORD *)(v63 + 22) = 2080;
        uint64_t v68 = *v57;
        unint64_t v69 = v57[1];
        swift_bridgeObjectRetain();
        uint64_t v70 = v68;
        uint64_t v54 = v83;
        uint64_t v86 = sub_10015ADC4(v70, v69, &v87);
        uint64_t v36 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v63 + 24, v63 + 32);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v57, type metadata accessor for HostedRoutingSourceSession);
        _os_log_impl( (void *)&_mh_execute_header,  v59,  (os_log_type_t)v77,  "[%s] filterUndiscoverableSiblingSessions - updating activeSessionIdentifier from %s to %s",  (uint8_t *)v63,  0x20u);
        uint64_t v71 = v79;
        swift_arrayDestroy(v79, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1LL, -1LL);
        uint64_t v72 = v63;
        uint64_t v33 = v78;
        swift_slowDealloc(v72, -1LL, -1LL);
      }

      else
      {

        sub_1001A813C((uint64_t)v56, type metadata accessor for HostedRoutingSourceSession);
        sub_1001A813C((uint64_t)v57, type metadata accessor for HostedRoutingSourceSession);
      }

      (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v20, v33);
    }

    uint64_t v73 = v54[1];
    *uint64_t v36 = *v54;
    v36[1] = v73;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return result;
}

uint64_t sub_10019E3FC()
{
  return sub_1001A7110();
}

uint64_t sub_10019E410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100216E68();
  uint64_t v11 = (void *)*v10;
  *uint64_t v9 = *v10;
  (*(void (**)(uint64_t *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v9);
  uint64_t v13 = (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    if (a1 < 0) {
      uint64_t v39 = a1;
    }
    else {
      uint64_t v39 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v39);
    if (result) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  a1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112LL))(v13);
  uint64_t result = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!result) {
    goto LABEL_16;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }

  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_32;
    }

    uint64_t v15 = *(void *)(a1 + 32);
    swift_retain(v15);
  }

  uint64_t v16 = swift_bridgeObjectRelease();
  unint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 128LL))(v16);
  if (v17 == 1)
  {
    uint64_t v21 = sub_100156B68(&qword_1003F8EC8);
    uint64_t v22 = *(void *)(type metadata accessor for HostedRoutingSourceSession(0LL) - 8);
    uint64_t v23 = *(void *)(v22 + 72);
    uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = (v24 + 32) & ~v24;
    uint64_t v26 = swift_allocObject(v21, v25 + v23, v24 | 7);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    uint64_t v27 = sub_100187ED8();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for RoutingSessionConfiguration.ItemType.standard(_:),  v2);
    uint64_t v28 = (*(uint64_t (**)(char *))(*(void *)v27 + 656LL))(v5);
    uint64_t v30 = v29;
    swift_release(v27);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t ObjectType = swift_getObjectType(v28, v31);
    uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 56))(ObjectType, v30);
    swift_unknownObjectRelease(v28);
    sub_100196BC4(v33, 0LL, 0LL, (void *)(v26 + v25));
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_100187ED8();
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 328LL))(v34);
    swift_release(v34);
    uint64_t v47 = v26;
    sub_1001A3E3C(v35, &qword_1003F8EC8, type metadata accessor for HostedRoutingSourceSession);
    uint64_t v36 = v47;
    uint64_t v37 = sub_100187F84();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 288LL))( v15 + OBJC_IVAR____TtCC12mediaremoted15RoutingTimeline5Event_routingEvent,  v36);
    swift_release(v15);
    swift_bridgeObjectRelease();
    uint64_t v38 = v37;
  }

  else
  {
    sub_1001A70C8(v17, v18, v19, v20);
    uint64_t v38 = v15;
  }

  swift_release(v38);
LABEL_17:
  uint64_t v40 = (uint64_t)sub_100187CE0();
  uint64_t v41 = v40;
  if (!((unint64_t)v40 >> 62))
  {
    uint64_t v42 = *(void *)((v40 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_19;
    }
    return swift_bridgeObjectRelease_n(v41, 2LL);
  }

  if (v40 < 0) {
    uint64_t v45 = v40;
  }
  else {
    uint64_t v45 = v40 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v45);
  uint64_t v42 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n(v41, 2LL);
  }
LABEL_19:
  if (v42 >= 1)
  {
    for (uint64_t i = 0LL; i != v42; ++i)
    {
      if ((v41 & 0xC000000000000001LL) != 0)
      {
        uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v41);
      }

      else
      {
        uint64_t v44 = *(void *)(v41 + 8 * i + 32);
        swift_retain(v44);
      }

      sub_100194C40(v44);
      swift_release(v44);
    }

    return swift_bridgeObjectRelease_n(v41, 2LL);
  }

uint64_t sub_10019E7F0()
{
  return sub_1001A7110();
}

unint64_t sub_10019E7F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return sub_1001A7274(a2, a3, a4, a5);
}

uint64_t sub_10019E80C()
{
  uint64_t v108 = sub_100156B68(&qword_1003F8E68);
  uint64_t v103 = *(void *)(v108 - 8);
  uint64_t v1 = __chkstk_darwin(v108);
  uint64_t v107 = (int64_t *)((char *)&v99 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v106 = (int64_t *)((char *)&v99 - v4);
  __chkstk_darwin(v3);
  uint64_t v105 = (char *)&v99 - v5;
  uint64_t v6 = sub_100156B68(&qword_1003F8ED0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (int64_t *)((char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v7);
  uint64_t v109 = (char *)&v99 - v10;
  uint64_t v11 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v104 = *(void **)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100156B68(&qword_1003F8ED8);
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (int64_t *)((char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15);
  uint64_t v19 = (int64_t *)((char *)&v99 - v18);
  unint64_t v112 = 0xD00000000000002CLL;
  unint64_t v113 = 0x800000010033B120LL;
  uint64_t v100 = v0;
  uint64_t result = (uint64_t)sub_100187D24();
  uint64_t v21 = result;
  int64_t v110 = 0LL;
  uint64_t v22 = *(void *)(result + 64);
  uint64_t v101 = result + 64;
  uint64_t v23 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & v22;
  int64_t v102 = (unint64_t)(v23 + 63) >> 6;
  int64_t v99 = v102 - 1;
  if ((v24 & v22) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v30 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  unint64_t v31 = v30 | (v110 << 6);
LABEL_7:
  uint64_t v32 = *(void *)(v21 + 56);
  uint64_t v33 = *(void *)(*(void *)(v21 + 48) + 8 * v31);
  *unint64_t v17 = v33;
  uint64_t v34 = v32 + v104[9] * v31;
  uint64_t v35 = sub_100156B68(&qword_1003F8EE0);
  sub_1001A80F8(v34, (uint64_t)v17 + *(int *)(v35 + 48), type metadata accessor for HostedRoutingSessionSnapshot);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v17, 0LL, 1LL, v35);
  swift_retain(v33);
  while (1)
  {
    sub_1001A78A0((uint64_t)v17, (uint64_t)v19, &qword_1003F8ED8);
    uint64_t v40 = sub_100156B68(&qword_1003F8EE0);
    uint64_t v26 = *v19;
    sub_1001A81D4( (uint64_t)v19 + *(int *)(v40 + 48),  (uint64_t)v13,  type metadata accessor for HostedRoutingSessionSnapshot);
    v111._uint64_t countAndFlagsBits = 0x203A746E65696C43LL;
    v111._object = (void *)0xE800000000000000LL;
    v27._uint64_t countAndFlagsBits = sub_10018756C();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 10LL;
    v28._object = (void *)0xE100000000000000LL;
    String.append(_:)(v28);
    String.append(_:)(v111);
    swift_bridgeObjectRelease();
    v111._uint64_t countAndFlagsBits = 0x746F687370616E53LL;
    v111._object = (void *)0xEA0000000000203ALL;
    v29._uint64_t countAndFlagsBits = sub_100254B04();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    String.append(_:)(v111);
    swift_release(v26);
    swift_bridgeObjectRelease();
    uint64_t result = sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingSessionSnapshot);
    if (v25) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v36 = v110 + 1;
    if (__OFADD__(v110, 1LL))
    {
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    if (v36 < v102)
    {
      unint64_t v37 = *(void *)(v101 + 8 * v36);
      if (v37) {
        goto LABEL_11;
      }
      int64_t v38 = v110 + 2;
      ++v110;
      if (v36 + 1 < v102)
      {
        unint64_t v37 = *(void *)(v101 + 8 * v38);
        if (v37) {
          goto LABEL_14;
        }
        int64_t v110 = v36 + 1;
        if (v36 + 2 < v102)
        {
          unint64_t v37 = *(void *)(v101 + 8 * (v36 + 2));
          if (v37)
          {
            v36 += 2LL;
            goto LABEL_11;
          }

          int64_t v38 = v36 + 3;
          int64_t v110 = v36 + 2;
          if (v36 + 3 < v102)
          {
            unint64_t v37 = *(void *)(v101 + 8 * v38);
            if (v37)
            {
LABEL_14:
              int64_t v36 = v38;
LABEL_11:
              unint64_t v25 = (v37 - 1) & v37;
              unint64_t v31 = __clz(__rbit64(v37)) + (v36 << 6);
              int64_t v110 = v36;
              goto LABEL_7;
            }

            while (1)
            {
              int64_t v36 = v38 + 1;
              if (__OFADD__(v38, 1LL)) {
                goto LABEL_56;
              }
              if (v36 >= v102) {
                break;
              }
              unint64_t v37 = *(void *)(v101 + 8 * v36);
              ++v38;
              if (v37) {
                goto LABEL_11;
              }
            }

            int64_t v110 = v99;
          }
        }
      }
    }

    uint64_t v39 = sub_100156B68(&qword_1003F8EE0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v17, 1LL, 1LL, v39);
    unint64_t v25 = 0LL;
  }

  swift_release(v21);
  v41._object = (void *)0x800000010033B150LL;
  v41._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v41);
  uint64_t result = (uint64_t)sub_10018801C();
  int64_t v110 = 0LL;
  uint64_t v42 = *(void *)(result + 64);
  uint64_t v101 = result + 64;
  uint64_t v104 = (void *)result;
  uint64_t v43 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v44 = -1LL;
  if (v43 < 64) {
    uint64_t v44 = ~(-1LL << v43);
  }
  unint64_t v45 = v44 & v42;
  int64_t v102 = (unint64_t)(v43 + 63) >> 6;
  int64_t v99 = v102 - 1;
  uint64_t v46 = v108;
  uint64_t v47 = v105;
  if ((v44 & v42) == 0) {
    goto LABEL_34;
  }
LABEL_32:
  unint64_t v64 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  uint64_t v65 = (uint64_t)v109;
  unint64_t v66 = v64 | (v110 << 6);
  while (2)
  {
    uint64_t v67 = v104[7];
    uint64_t v68 = (void *)(v104[6] + 16 * v66);
    uint64_t v69 = v68[1];
    *uint64_t v9 = *v68;
    v9[1] = v69;
    uint64_t v70 = v67 + *(void *)(v103 + 72) * v66;
    uint64_t v71 = sub_100156B68(&qword_1003F8EE8);
    sub_1001A8360(v70, (uint64_t)v9 + *(int *)(v71 + 48), &qword_1003F8E68);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56LL))(v9, 0LL, 1LL, v71);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A78A0((uint64_t)v9, v65, &qword_1003F8ED0);
      uint64_t v76 = sub_100156B68(&qword_1003F8EE8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 48LL))(v65, 1LL, v76) == 1)
      {
        swift_release(v104);
        v77._uint64_t countAndFlagsBits = 10LL;
        v77._object = (void *)0xE100000000000000LL;
        String.append(_:)(v77);
        uint64_t v78 = sub_100187ED8();
        sub_100284594();
        uint64_t v80 = v79;
        uint64_t v82 = v81;
        swift_release(v78);
        v83._uint64_t countAndFlagsBits = v80;
        v83._object = v82;
        String.append(_:)(v83);
        swift_bridgeObjectRelease();
        v84._uint64_t countAndFlagsBits = 10LL;
        v84._object = (void *)0xE100000000000000LL;
        String.append(_:)(v84);
        uint64_t v85 = sub_100187DF0();
        uint64_t v86 = sub_1001FF164();
        uint64_t v88 = v87;
        swift_release(v85);
        v89._uint64_t countAndFlagsBits = v86;
        v89._object = v88;
        String.append(_:)(v89);
        swift_bridgeObjectRelease();
        v90._uint64_t countAndFlagsBits = 10LL;
        v90._object = (void *)0xE100000000000000LL;
        String.append(_:)(v90);
        type metadata accessor for Preferences(0LL);
        v91._uint64_t countAndFlagsBits = static Preferences.diagnosticDescription.getter();
        String.append(_:)(v91);
        swift_bridgeObjectRelease();
        v92._uint64_t countAndFlagsBits = 10LL;
        v92._object = (void *)0xE100000000000000LL;
        String.append(_:)(v92);
        uint64_t v93 = sub_100187F84();
        uint64_t v94 = sub_10023C4CC();
        uint64_t v96 = v95;
        swift_release(v93);
        v97._uint64_t countAndFlagsBits = v94;
        v97._object = v96;
        String.append(_:)(v97);
        swift_bridgeObjectRelease();
        v98._uint64_t countAndFlagsBits = 10LL;
        v98._object = (void *)0xE100000000000000LL;
        String.append(_:)(v98);
        return v112;
      }

      uint64_t v48 = (uint64_t)v47 + *(int *)(v46 + 48);
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t *)(v65 + *(int *)(v76 + 48));
      uint64_t v50 = *v49;
      uint64_t v51 = *(int *)(v46 + 48);
      uint64_t v52 = (uint64_t)v49 + v51;
      char v53 = v106;
      uint64_t v54 = (uint64_t)v106 + v51;
      void *v106 = v50;
      sub_1001A81D4(v52, (uint64_t)v53 + v51, type metadata accessor for HostedRoutingSessionSnapshot);
      *uint64_t v47 = v50;
      sub_1001A81D4(v54, v48, type metadata accessor for HostedRoutingSessionSnapshot);
      v111._uint64_t countAndFlagsBits = 0x203A746E65696C43LL;
      v111._object = (void *)0xE800000000000000LL;
      swift_retain(v50);
      v55._uint64_t countAndFlagsBits = sub_10018756C();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 10LL;
      v56._object = (void *)0xE100000000000000LL;
      String.append(_:)(v56);
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      v111._uint64_t countAndFlagsBits = 0x746F687370616E53LL;
      v111._object = (void *)0xEA0000000000203ALL;
      uint64_t v57 = *(int *)(v46 + 48);
      uint64_t v58 = v107;
      uint64_t v59 = (uint64_t)v107 + v57;
      *uint64_t v107 = v50;
      sub_1001A80F8(v48, (uint64_t)v58 + v57, type metadata accessor for HostedRoutingSessionSnapshot);
      swift_release(v50);
      unint64_t v60 = sub_100254B04();
      uint64_t v62 = v61;
      sub_1001A813C(v59, type metadata accessor for HostedRoutingSessionSnapshot);
      v63._uint64_t countAndFlagsBits = v60;
      v63._object = v62;
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      String.append(_:)(v111);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1001603DC((uint64_t)v47, &qword_1003F8E68);
      if (v45) {
        goto LABEL_32;
      }
LABEL_34:
      uint64_t v65 = (uint64_t)v109;
      int64_t v72 = v110 + 1;
      if (__OFADD__(v110, 1LL)) {
        goto LABEL_55;
      }
      if (v72 < v102)
      {
        unint64_t v73 = *(void *)(v101 + 8 * v72);
        if (v73) {
          goto LABEL_37;
        }
        int64_t v74 = v110 + 2;
        ++v110;
        if (v72 + 1 < v102)
        {
          unint64_t v73 = *(void *)(v101 + 8 * v74);
          if (v73) {
            goto LABEL_40;
          }
          int64_t v110 = v72 + 1;
          if (v72 + 2 < v102)
          {
            unint64_t v73 = *(void *)(v101 + 8 * (v72 + 2));
            if (v73)
            {
              v72 += 2LL;
              goto LABEL_37;
            }

            int64_t v74 = v72 + 3;
            int64_t v110 = v72 + 2;
            if (v72 + 3 < v102) {
              break;
            }
          }
        }
      }

LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_10019F1D8()
{
  return sub_10019E80C();
}

uint64_t sub_10019F1F8(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10034C738, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10019F234(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10034C738, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_10019F27C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10034C738, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10019F2D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10034C738, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10019F320(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v3 = 0LL;
  uint64_t v31 = result + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v32 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v33 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }

    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_45;
    }

    if (v10 >= v32) {
      return 1LL;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v32) {
        return 1LL;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v32) {
          return 1LL;
        }
        unint64_t v11 = *(void *)(v31 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v32) {
            return 1LL;
          }
          unint64_t v11 = *(void *)(v31 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_10019F5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  int64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v16 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1001A80F8(a1 + v12, (uint64_t)v10, type metadata accessor for HostedRoutingSession);
        sub_1001A80F8(a2 + v12, (uint64_t)v7, type metadata accessor for HostedRoutingSession);
        uint64_t v15 = sub_100156FEC(&qword_1003F94D0, type metadata accessor for HostedRoutingSession, (uint64_t)&unk_100350418);
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v15);
        sub_1001A813C((uint64_t)v7, type metadata accessor for HostedRoutingSession);
        sub_1001A813C((uint64_t)v10, type metadata accessor for HostedRoutingSession);
        BOOL v18 = v14-- != 0;
        if ((v16 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v18);
    }
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_10019F720( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    BOOL v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100156B68(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  BOOL v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1001A6664(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_10019F92C()
{
  uint64_t v1 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*((void *)v0 + 2));
  swift_unknownObjectRelease(*((void *)v0 + 3));
  swift_bridgeObjectRelease(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10019F9B0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RoutingSessionConfiguration(0LL) - 8) + 80LL);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (char *)v0 + ((v1 + 56) & ~v1);
  uint64_t v8 = sub_100216E68();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, id, uint64_t))(*(void *)v2 + 376LL);
  id v10 = (id)*v8;
  v9(v3, v4, v5, v6, v7, v10, 1LL);
}

uint64_t sub_10019FA50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019FA60(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for RoutingSessionServer.Client(uint64_t a1)
{
  return sub_100183BF8(a1, (uint64_t *)&unk_1003FEB88, (uint64_t)&nominal type descriptor for RoutingSessionServer.Client);
}

uint64_t type metadata accessor for RoutingSessionServer.Client.Context(uint64_t a1)
{
  return sub_100183BF8(a1, qword_1003FEB98, (uint64_t)&nominal type descriptor for RoutingSessionServer.Client.Context);
}

uint64_t sub_10019FA90()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10019FABC()
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(v0 + 16) + 384LL))( *(void *)(v0 + 24),  *(void *)(v0 + 32),  1LL);
}

void *sub_10019FAF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F9570);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

uint64_t sub_10019FD14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9570);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_37:
    uint64_t *v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v21 >= v37) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }

uint64_t sub_1001A003C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9570);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1001A03A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001A0A48(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v15 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001A2E30();
      uint64_t v9 = v15;
    }

    swift_release(*(void *)(*(void *)(v9 + 48) + 8 * v6));
    uint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    sub_1001A81D4(v10 + *(void *)(v12 + 72) * v6, a2, type metadata accessor for HostedRoutingSessionSnapshot);
    sub_1001A1828(v6, v9);
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(a2, 0LL, 1LL, v11);
  }

  else
  {
    uint64_t v14 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

uint64_t sub_1001A04CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v11 = *v4;
    uint64_t v17 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001A3064();
      uint64_t v11 = v17;
    }

    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = sub_100156B68(&qword_1003F8E68);
    uint64_t v14 = *(void *)(v13 - 8);
    sub_1001A78A0(v12 + *(void *)(v14 + 72) * v8, a3, &qword_1003F8E68);
    sub_1001A1A48(v8, v11);
    uint64_t *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(a3, 0LL, 1LL, v13);
  }

  else
  {
    uint64_t v16 = sub_100156B68(&qword_1003F8E68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a3,  1LL,  1LL,  v16);
  }

uint64_t sub_1001A0604(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1001A0A48(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001A32B0();
    uint64_t v7 = v10;
  }

  swift_release(*(void *)(*(void *)(v7 + 48) + 8 * v4));
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1001A1C54(v4, v7);
  uint64_t *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001A06C8()
{
  uint64_t v1 = sub_100156B68(&qword_1003F8E78);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_release(*(void *)(v0 + v4));
  uint64_t v6 = v0 + v4 + *(int *)(v1 + 48);
  uint64_t v7 = (int *)type metadata accessor for HostedRoutingSession(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v6 + v7[7];
    uint64_t v9 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001A0918(*(void *)(v8 + 32), *(unsigned int *)(v8 + 40), *(_BYTE *)(v8 + 44));
      swift_release(*(void *)(v8 + 48));
      swift_bridgeObjectRelease();
      uint64_t v10 = v8 + *(int *)(v9 + 36);
      uint64_t v11 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
      uint64_t v12 = v8 + *(int *)(v9 + 40);
      uint64_t v13 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
    }

    uint64_t v14 = v6 + v7[8];
    uint64_t v15 = type metadata accessor for RoutingControls(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v6 + v7[13];
    uint64_t v17 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t v18 = v6 + v7[15];
    uint64_t v19 = type metadata accessor for RoutingSession.HostInfo(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
  }

  type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001A0918(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1001A092C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100156B68(&qword_1003F8E78) - 8) + 80LL);
  return sub_10018A3E0(v0[2], v0[3], v0[4], (uint64_t *)((char *)v0 + ((v1 + 40) & ~v1)));
}

uint64_t sub_1001A0964(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10015CAD4(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001A3458();
    uint64_t v9 = v12;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_100181080(v6, v9);
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_1001A0A48(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
  uint64_t v4 = *(void *)(a1
                 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                 + 8);
  swift_bridgeObjectRetain();
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  return sub_1001A2D34(a1, v5);
}

Swift::Int sub_1001A0AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100156B68(&qword_1003F94B0);
  int v43 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  Swift::String v41 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v39 = v3;
  int64_t v40 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v24 = v41[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v40) {
              goto LABEL_36;
            }
            unint64_t v24 = v41[v18];
            ++v25;
            if (v24) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v25;
      }
    }

Swift::Int sub_1001A0E68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100156B68(&qword_1003F8E68);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100156B68(&qword_1003F9490);
  int v44 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v42 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v40 = v3;
  int64_t v41 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  Swift::Int result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = v42;
    unint64_t v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v25 = v42[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v41) {
              goto LABEL_36;
            }
            unint64_t v25 = v42[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

Swift::Int sub_1001A11EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9478);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v36) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v37 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v37 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v36)
        {
LABEL_36:
          swift_release(v5);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v37 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v37 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

Swift::Int sub_1001A1520(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100156B68(&qword_1003F9470);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v9 = v8;
  if (*(void *)(v5 + 16))
  {
    int64_t v36 = v3;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    char v38 = (void *)(v5 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v37) {
          goto LABEL_36;
        }
        unint64_t v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v25 = v38[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v36;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v38 = -1LL << v35;
                }
                *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v15 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v25 = v38[v15];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

unint64_t sub_1001A1828(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        uint64_t v10 = *(void *)(v9
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
        uint64_t v11 = *(void *)(v9
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                        + 8);
        swift_retain(v9);
        swift_bridgeObjectRetain();
        String.hash(into:)(v31, v10, v11);
        swift_bridgeObjectRelease();
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_release(v9);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        int64_t v15 = (void *)(v14 + 8 * v3);
        uint64_t v16 = (void *)(v14 + 8 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *int64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        Swift::Int result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_1001A1A48(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v31, *(void *)(a2 + 40));
        swift_bridgeObjectRetain();
        String.hash(into:)(v31, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        int64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *int64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = sub_100156B68(&qword_1003F8E68);
        uint64_t v19 = *(void *)(*(void *)(v18 - 8) + 72LL);
        int64_t v20 = v19 * v3;
        Swift::Int result = v17 + v19 * v3;
        int64_t v21 = v19 * v6;
        uint64_t v22 = v17 + v19 * v6;
        unint64_t v23 = v22 + v19;
        if (v20 < v21 || result >= v23)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack(result, v22, 1LL, v18);
        }

        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront(result);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_1001A1C54(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        uint64_t v10 = *(void *)(v9
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
        uint64_t v11 = *(void *)(v9
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                        + 8);
        swift_retain(v9);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        swift_bridgeObjectRelease(v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_release(v9);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          int64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *int64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

uint64_t sub_1001A1E4C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1001A0A48(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = v17
            + *(void *)(*(void *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) - 8) + 72LL) * v10;
        return sub_1001A7E34(a1, v18);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001A2E30();
      goto LABEL_7;
    }

    sub_1001A0AC4(v13, a3 & 1);
    unint64_t v20 = sub_1001A0A48(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1001A2C0C(v10, a2, a1, v16);
      return swift_retain(a2);
    }
  }

  uint64_t v22 = type metadata accessor for RoutingSessionServer.Client(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

uint64_t sub_1001A1F70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = sub_100156B68(&qword_1003F8E68);
        return sub_1001A831C(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12, &qword_1003F8E68);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001A3064();
      goto LABEL_7;
    }

    sub_1001A0E68(v15, a4 & 1);
    unint64_t v22 = sub_10015CAD4(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1001A2C98(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain();
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001A20B8()
{
  return (*(uint64_t (**)(void, void, void, void, uint64_t))(**(void **)(v0 + 16) + 392LL))( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  1LL);
}

uint64_t sub_1001A20F0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001A2114()
{
  return sub_1001A2870((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001A2120(uint64_t a1, uint64_t a2)
{
  return sub_10018ECFC(a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_1001A2138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003F8EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A2180()
{
  uint64_t v18 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v1 = *(void *)(v18 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v15 = v4;
  uint64_t v17 = type metadata accessor for RoutingSessionConfiguration(0LL);
  uint64_t v5 = *(void *)(v17 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 8) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = type metadata accessor for RoutingSessionConfiguration.Attribution(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v16 = v2 | v6 | v11 | 7;
  unint64_t v13 = (*(void *)(v10 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*((void *)v0 + 2));
  swift_bridgeObjectRelease(*((void *)v0 + 4));
  swift_bridgeObjectRelease(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v1 + 8))(&v0[v3], v18);
  swift_release(*(void *)&v0[v15]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(&v0[v7], v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(&v0[v12], v9);
  swift_bridgeObjectRelease(*(void *)&v0[v13 + 8]);
  return swift_deallocObject(v0, ((v13 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v16);
}

uint64_t sub_1001A22CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for RoutingInteraction(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(type metadata accessor for RoutingSessionConfiguration(0LL) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(type metadata accessor for RoutingSessionConfiguration.Attribution(0LL) - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10018D3D4( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  v2 + v6,  *(char **)(v2 + v7),  v2 + v9,  (uint64_t *)(v2 + v12),  *(void *)(v2 + v13),  *(void *)(v2 + v13 + 8),  *(void *)(v2 + ((v13 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001A23CC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001A2400()
{
  return (*(uint64_t (**)(void, void, void, void, uint64_t))(**(void **)(v0 + 16) + 400LL))( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  1LL);
}

uint64_t sub_1001A2438()
{
  uint64_t v1 = type metadata accessor for RoutingDialog.Action(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001A24D0()
{
  uint64_t v1 = *(void *)(type metadata accessor for RoutingDialog.Action(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return (*(uint64_t (**)(void, void, unint64_t, void, void, uint64_t))(**(void **)(v0 + 16)
                                                                                              + 408LL))( *(void *)(v0 + 24),  *(void *)(v0 + 32),  v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v3 + 8),  1LL);
}

uint64_t sub_1001A2538()
{
  return sub_1001A276C((uint64_t (*)(void))&type metadata accessor for RoutingControl);
}

uint64_t sub_1001A2544()
{
  uint64_t v1 = *(void *)(type metadata accessor for RoutingControl(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return (*(uint64_t (**)(unint64_t, void, void, uint64_t))(**(void **)(v0 + 16) + 416LL))( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v3 + 8),  1LL);
}

uint64_t sub_1001A25A8()
{
  uint64_t v1 = type metadata accessor for RoutingControl(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001A261C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RoutingControl(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unsigned __int8 v7 = *(_BYTE *)(a1 + 24);
  uint64_t v8 = *(void *)(v1 + 16) + 16LL;
  swift_beginAccess(v8, v20, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v8);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v19 = v1 + ((v3 + 24) & ~v3);
    uint64_t v12 = *(void *)(result
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
    uint64_t v13 = *(void *)(result
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                    + 8);
    if (v5)
    {
      unint64_t v14 = sub_1001A7C60();
      uint64_t v15 = swift_allocError(&type metadata for RoutingEvent.Error, v14, 0LL, 0LL);
      *(void *)uint64_t v10 = v5;
      *(void *)(v10 + _Block_object_dispose(va, 8) = v4;
      *(void *)(v10 + swift_weakDestroy(v0 + 16) = v6;
      *(_BYTE *)(v10 + 24) = v7;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    uint64_t v16 = v4;
    uint64_t ObjectType = swift_getObjectType(v12, v10);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 32);
    swift_unknownObjectRetain(v12);
    sub_10018480C(v5, v16, v6, v7);
    v18(v19, v15, ObjectType, v13);
    swift_errorRelease(v15);
    swift_unknownObjectRelease(v12);
    return swift_release(v11);
  }

  return result;
}

uint64_t sub_1001A2760()
{
  return sub_1001A276C((uint64_t (*)(void))&type metadata accessor for RoutingMode);
}

uint64_t sub_1001A276C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  swift_unknownObjectRelease(*(void *)(v1 + v7));
  return swift_deallocObject(v1, v7 + 16, v6);
}

uint64_t sub_1001A2800()
{
  uint64_t v1 = *(void *)(type metadata accessor for RoutingMode(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return (*(uint64_t (**)(unint64_t, void, void, uint64_t))(**(void **)(v0 + 16) + 424LL))( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v3 + 8),  1LL);
}

uint64_t sub_1001A2864()
{
  return sub_1001A2870((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1001A2870(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_1001A28A8()
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(v0 + 16) + 432LL))( *(unsigned __int8 *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  1LL);
}

uint64_t sub_1001A28E0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001A2914()
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(v0 + 16) + 440LL))( *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  1LL);
}

uint64_t sub_1001A2948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10015CAD4(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001A3458();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      char v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_release(v21[1]);
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }

uint64_t sub_1001A2ABC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1001A0A48(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001A32B0();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

uint64_t sub_1001A2C0C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t result = sub_1001A81D4( a3,  v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  type metadata accessor for HostedRoutingSessionSnapshot);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_1001A2C98(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  void *v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_100156B68(&qword_1003F8E68);
  uint64_t result = sub_1001A78A0(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1, &qword_1003F8E68);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1001A2D34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = *(void *)(v2 + 48);
    uint64_t v7 = (void *)(*(void *)(v6 + 8 * v5)
                  + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
    uint64_t v8 = v7[1];
    uint64_t v9 = *(void *)(a1
                   + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
    uint64_t v10 = *(void *)(a1
                    + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier
                    + 8);
    BOOL v11 = *v7 == v9 && v8 == v10;
    if (!v11
      && (_stringCompareWithSmolCheck(_:_:expecting:)( *v7,  v8,  *(void *)(a1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier),  *(void *)(a1 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier + 8),  0LL) & 1) == 0)
    {
      uint64_t v12 = ~v4;
      do
      {
        unint64_t v5 = (v5 + 1) & v12;
        if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(*(void *)(v6 + 8 * v5)
                       + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_identifier);
        uint64_t v14 = v13[1];
        BOOL v15 = *v13 == v9 && v14 == v10;
      }

      while (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, v9, v10, 0LL) & 1) == 0);
    }
  }

  return v5;
}

void *sub_1001A2E30()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F94B0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release(v5);
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v26 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v15) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      int64_t v11 = v21 + 1;
      if (v21 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v26 + 8 * v11);
      if (!v22) {
        break;
      }
    }

void *sub_1001A3064()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100156B68(&qword_1003F8E68);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100156B68(&qword_1003F9490);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release(v5);
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v26 = v5 + 64;
  int64_t v10 = 0LL;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }

    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }

void *sub_1001A32B0()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F9478);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_1001A3458()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F9470);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

uint64_t sub_1001A3618(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_1001A3680(unint64_t a1)
{
  return sub_10019F720(0, *(void *)(a1 + 16), 0, a1, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
}

void (*sub_1001A36B4(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v5 = malloc(0x58uLL);
  *a1 = v5;
  v5[8] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  swift_retain(a2);
  void v5[9] = sub_1001A38E4(v5);
  v5[10] = sub_1001A378C(v5 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1001A373C;
}

void sub_1001A373C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  swift_release(v3);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_1001A378C(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  void v8[2] = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_1001A0A48(a2);
  *((_BYTE *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }

  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        void *v8 = v17;
        return sub_1001A38A8;
      }

void sub_1001A38A8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1001A3910(*a1, *((_BYTE *)*a1 + 32), (uint64_t *)(*a1)[2], (*a1)[3], (*a1)[1]);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*sub_1001A38E4(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_1001A3904;
}

uint64_t sub_1001A3904(uint64_t result)
{
  **(void **)(result + _Block_object_dispose(va, 8) = *(void *)result;
  return result;
}

uint64_t *sub_1001A3910(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7 = *result;
  if (!*result)
  {
    if ((a2 & 1) != 0)
    {
      uint64_t v9 = *(void *)(*a3 + 48) + 8 * a4;
      uint64_t v10 = type metadata accessor for RoutingSessionServer.Client(0LL);
      swift_arrayDestroy(v9, 1LL, v10);
      sub_1001A1C54(a4, *a3);
    }

    return (uint64_t *)swift_bridgeObjectRetain();
  }

  uint64_t v8 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    *(void *)(v8[7] + 8 * a4) = v7;
    return (uint64_t *)swift_bridgeObjectRetain();
  }

  v8[(a4 >> 6) + 8] |= 1LL << a4;
  uint64_t v11 = 8 * a4;
  *(void *)(v8[6] + v11) = a5;
  *(void *)(v8[7] + v11) = v7;
  uint64_t v12 = v8[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    void v8[2] = v14;
    swift_retain(a5);
    return (uint64_t *)swift_bridgeObjectRetain();
  }

  __break(1u);
  return result;
}

uint64_t sub_1001A39DC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100156FEC( &qword_1003F94A0,  v12,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v3;
    uint64_t v31 = a1;
    uint64_t v32 = ~v15;
    uint64_t v33 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      unint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100156FEC( &qword_1003F94A8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v32;
      uint64_t v17 = v21;
      unint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v30;
        a1 = v31;
        uint64_t v26 = v33;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(void *)(*v30 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v34;
    v20(v9, v34, v6);
    uint64_t v35 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1001A3C38((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    void *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1001A3C38(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001A003C(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_10019FAF0();
      goto LABEL_12;
    }

    sub_10019FD14(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100156FEC( &qword_1003F94A0,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100156FEC( &qword_1003F94A8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingSessionConfiguration.ItemType,  (uint64_t)&protocol conformance descriptor for RoutingSessionConfiguration.ItemType);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1001A3E3C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  int64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (isUniquelyReferenced_nonNull_native && v7 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v6 <= v7) {
    int64_t v27 = v6 + v4;
  }
  else {
    int64_t v27 = v6;
  }
  unint64_t v5 = sub_10019F720(isUniquelyReferenced_nonNull_native, v27, 1, v5, a2, a3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v4) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

uint64_t sub_1001A3FBC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001A405C(a1, a2, a3, (void *)*v3, &qword_1003F9460, type metadata accessor for HostedRoutingItem);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001A3FE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001A405C( a1,  a2,  a3,  (void *)*v3,  &qword_1003F8EC8,  type metadata accessor for HostedRoutingSourceSession);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001A4014(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001A405C(a1, a2, a3, (void *)*v3, &qword_1003F94E8, type metadata accessor for HostedRoutingSession);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001A4040(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001A423C(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1001A405C( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100156B68(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  BOOL v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  int64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

uint64_t sub_1001A423C(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F9560);
    uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    void v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8) {
      memmove(v11 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100156B68(&qword_1003F9568);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1001A43C4(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }

  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1LL, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  unint64_t *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_10019F720( isUniquelyReferenced_nonNull_native,  v13,  1,  v5,  &qword_1003F9460,  type metadata accessor for HostedRoutingItem);
    unint64_t *v3 = v5;
  }

  uint64_t v14 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  uint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    char v28 = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v28,  1046LL,  0);
    __break(1u);
    return result;
  }

  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }

  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }

  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    sub_1001A80F8(a3, v18, type metadata accessor for HostedRoutingItem);
  }
  return sub_1001603DC(a3, &qword_1003F94F0);
}

Swift::Int sub_1001A45A8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v161 = a1;
  uint64_t v150 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v158 = *(void *)(v150 - 8);
  uint64_t v4 = __chkstk_darwin(v150);
  uint64_t v151 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v155 = (uint64_t)&v138 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  int64_t v10 = (char *)&v138 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  int64_t v13 = (char *)&v138 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v138 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v138 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  unint64_t v22 = (char *)&v138 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v138 - v23;
  uint64_t v160 = v2;
  Swift::Int v25 = v2[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v25);
  Swift::Int v143 = result;
  if (result >= v25)
  {
    if (v25 < 0) {
      goto LABEL_151;
    }
    if (v25) {
      return sub_1001A518C(0LL, v25, 1LL, v161);
    }
    return result;
  }

  if (v25 >= 0) {
    uint64_t v27 = v25;
  }
  else {
    uint64_t v27 = v25 + 1;
  }
  if (v25 <= -2) {
    goto LABEL_160;
  }
  uint64_t v153 = v10;
  if (v25 < 2)
  {
    char v29 = _swiftEmptyArrayStorage;
    unint64_t v156 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v158 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
    if (v25 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      uint64_t v31 = (char *)_swiftEmptyArrayStorage;
LABEL_114:
      uint64_t v142 = v29;
      if (v60 >= 2)
      {
        uint64_t v128 = *v160;
        do
        {
          unint64_t v129 = v60 - 2;
          if (v60 < 2) {
            goto LABEL_146;
          }
          if (!v128) {
            goto LABEL_159;
          }
          int v130 = v31;
          BOOL v131 = v31 + 32;
          uint64_t v132 = *(void *)&v31[16 * v129 + 32];
          uint64_t v133 = *(void *)&v31[16 * v60 + 24];
          uint64_t v134 = v159;
          sub_1001A53FC( v128 + *(void *)(v158 + 72) * v132,  v128 + *(void *)(v158 + 72) * *(void *)&v131[16 * v60 - 16],  v128 + *(void *)(v158 + 72) * v133,  v156,  (uint64_t (*)(char *, char *))v161,  a2);
          uint64_t v159 = v134;
          if (v134) {
            goto LABEL_128;
          }
          if (v133 < v132) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v130) & 1) == 0) {
            int v130 = sub_1001A5B60((uint64_t)v130);
          }
          if (v129 >= *((void *)v130 + 2)) {
            goto LABEL_148;
          }
          uint64_t v135 = &v130[16 * v129 + 32];
          *(void *)uint64_t v135 = v132;
          *((void *)v135 + 1) = v133;
          unint64_t v136 = *((void *)v130 + 2);
          if (v60 > v136) {
            goto LABEL_149;
          }
          uint64_t v31 = v130;
          memmove(&v130[16 * v60 + 16], &v130[16 * v60 + 32], 16 * (v136 - v60));
          *((void *)v130 + 2) = v136 - 1;
          unint64_t v60 = v136 - 1;
        }

        while (v136 > 2);
      }

      swift_bridgeObjectRelease();
      v142[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    char v140 = v24;
    uint64_t v141 = v22;
    uint64_t v146 = v19;
    uint64_t v147 = v16;
    uint64_t v149 = v13;
  }

  else
  {
    char v140 = v24;
    uint64_t v141 = v22;
    uint64_t v146 = v19;
    uint64_t v147 = v16;
    uint64_t v149 = v13;
    uint64_t v28 = v27 >> 1;
    char v29 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(v27 >> 1, v150);
    v29[2] = v28;
    unint64_t v156 = (unint64_t)v29
         + ((*(unsigned __int8 *)(v158 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80));
  }

  uint64_t v142 = v29;
  Swift::Int v30 = 0LL;
  uint64_t v31 = (char *)_swiftEmptyArrayStorage;
  uint64_t v157 = a2;
  while (1)
  {
    Swift::Int v32 = v30;
    Swift::Int v33 = v30 + 1;
    if (v30 + 1 >= v25)
    {
LABEL_50:
      if (v33 < v32) {
        goto LABEL_150;
      }
      goto LABEL_51;
    }

    Swift::Int v152 = v25;
    Swift::Int v34 = *v160;
    uint64_t v35 = *(void *)(v158 + 72);
    uint64_t v36 = (uint64_t)v140;
    sub_1001A80F8(*v160 + v35 * v33, (uint64_t)v140, type metadata accessor for HostedRoutingItem);
    Swift::Int v144 = v34;
    uint64_t v154 = v35;
    uint64_t v37 = v34 + v35 * v32;
    Swift::Int v38 = v32;
    uint64_t v39 = (uint64_t)v141;
    sub_1001A80F8(v37, (uint64_t)v141, type metadata accessor for HostedRoutingItem);
    uint64_t v40 = v159;
    LODWORD(v14_Block_object_dispose(va, 8) = v161(v36, v39);
    if (v40)
    {
      sub_1001A813C(v39, type metadata accessor for HostedRoutingItem);
      sub_1001A813C(v36, type metadata accessor for HostedRoutingItem);
      swift_bridgeObjectRelease();
      unsigned __int8 v137 = v142;
LABEL_129:
      v137[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    sub_1001A813C(v39, type metadata accessor for HostedRoutingItem);
    sub_1001A813C(v36, type metadata accessor for HostedRoutingItem);
    Swift::Int v41 = v38 + 2;
    Swift::Int v42 = v152;
    Swift::Int v32 = v38;
    if (v38 + 2 >= v152)
    {
      Swift::Int v44 = v38 + 2;
    }

    else
    {
      Swift::Int v139 = v38;
      uint64_t v159 = v154 * v33;
      Swift::Int v43 = v144;
      Swift::Int v44 = v38 + 2;
      char v145 = (char *)(v154 * v41);
      while (1)
      {
        uint64_t v45 = (uint64_t)v146;
        sub_1001A80F8((uint64_t)&v145[v43], (uint64_t)v146, type metadata accessor for HostedRoutingItem);
        uint64_t v46 = (uint64_t)v147;
        sub_1001A80F8(v43 + v159, (uint64_t)v147, type metadata accessor for HostedRoutingItem);
        int v47 = v161(v45, v46);
        sub_1001A813C(v46, type metadata accessor for HostedRoutingItem);
        sub_1001A813C(v45, type metadata accessor for HostedRoutingItem);
        v43 += v154;
        ++v44;
        Swift::Int v42 = v152;
        a2 = v157;
        if (v152 == v44)
        {
          Swift::Int v44 = v152;
          Swift::Int v32 = v139;
          goto LABEL_24;
        }
      }

      a2 = v157;
      Swift::Int v32 = v139;
      Swift::Int v42 = v152;
    }

LABEL_82:
        if ((v87 & 1) != 0) {
          goto LABEL_139;
        }
        unint64_t v95 = (uint64_t *)(v62 + 16 * v64);
        uint64_t v97 = *v95;
        uint64_t v96 = v95[1];
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_142;
        }
        if (v98 < v86) {
          goto LABEL_99;
        }
LABEL_90:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v60)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        if (!*v160) {
          goto LABEL_156;
        }
        uint64_t v104 = a2;
        uint64_t v105 = v31;
        uint64_t v106 = v62;
        uint64_t v107 = (uint64_t *)(v62 + 16 * v103);
        uint64_t v108 = *v107;
        uint64_t v109 = (void *)(v106 + 16 * v64);
        uint64_t v110 = v109[1];
        sub_1001A53FC( *v160 + *(void *)(v158 + 72) * *v107,  *v160 + *(void *)(v158 + 72) * *v109,  *v160 + *(void *)(v158 + 72) * v110,  v156,  (uint64_t (*)(char *, char *))v161,  v104);
        if (v63) {
          goto LABEL_128;
        }
        if (v110 < v108) {
          goto LABEL_132;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_133;
        }
        *uint64_t v107 = v108;
        uint64_t v62 = v154;
        *(void *)(v154 + 16 * v103 + _Block_object_dispose(va, 8) = v110;
        unint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_134;
        }
        uint64_t v31 = v105;
        unint64_t v60 = v111 - 1;
        memmove(v109, v109 + 2, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        a2 = v104;
        if (v111 <= 2) {
          goto LABEL_99;
        }
      }
    }

    unint64_t v60 = 1LL;
    uint64_t v63 = v159;
LABEL_99:
    uint64_t v159 = v63;
    Swift::Int v25 = v160[1];
    Swift::Int v30 = v152;
    char v29 = v142;
    if (v152 >= v25) {
      goto LABEL_114;
    }
  }

LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001A518C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v37 = a4;
  uint64_t v31 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v10 = __chkstk_darwin(v31);
  uint64_t v39 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v36 = (uint64_t)&v29 - v13;
  uint64_t result = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v29 - v16;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v15 + 72);
    uint64_t v41 = v17 * (a3 - 1);
    Swift::Int v32 = v4;
    uint64_t v33 = v17;
    uint64_t v40 = v17 * a3;
    uint64_t v29 = a1;
LABEL_4:
    uint64_t v18 = 0LL;
    uint64_t v34 = a3;
    while (1)
    {
      uint64_t v38 = a1;
      uint64_t v20 = *v6;
      uint64_t v21 = v40 + v18 + *v6;
      uint64_t v22 = v35;
      sub_1001A80F8(v21, v35, type metadata accessor for HostedRoutingItem);
      uint64_t v23 = v36;
      sub_1001A80F8(v41 + v18 + v20, v36, type metadata accessor for HostedRoutingItem);
      char v24 = v37(v22, v23);
      sub_1001A813C(v23, type metadata accessor for HostedRoutingItem);
      uint64_t result = sub_1001A813C(v22, type metadata accessor for HostedRoutingItem);
      if (v5) {
        break;
      }
      if ((v24 & 1) == 0)
      {
        uint64_t v19 = v34;
        uint64_t v6 = v32;
LABEL_11:
        a3 = v19 + 1;
        v41 += v33;
        v40 += v33;
        a1 = v29;
        if (a3 != v30) {
          goto LABEL_4;
        }
        return result;
      }

      Swift::Int v25 = v32;
      uint64_t v26 = *v32;
      if (!*v32)
      {
        __break(1u);
        return result;
      }

      uint64_t v27 = v26 + v40 + v18;
      uint64_t v28 = v26 + v41 + v18;
      sub_1001A81D4(v27, v39, type metadata accessor for HostedRoutingItem);
      swift_arrayInitWithTakeFrontToBack(v27, v28, 1LL, v31);
      uint64_t result = sub_1001A81D4(v39, v28, type metadata accessor for HostedRoutingItem);
      uint64_t v19 = v34;
      v18 -= v33;
      a1 = v38 + 1;
      uint64_t v6 = v25;
      if (v34 == v38 + 1) {
        goto LABEL_11;
      }
    }
  }

  return result;
}

uint64_t sub_1001A53FC( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(char *, char *), uint64_t a6)
{
  uint64_t v7 = v6;
  unint64_t v56 = a5;
  unint64_t v57 = a3;
  uint64_t v55 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v12 = __chkstk_darwin(v55);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v50 - v15;
  __chkstk_darwin(v14);
  uint64_t v20 = (char *)&v50 - v19;
  uint64_t v22 = *(void *)(v21 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }

  unint64_t v23 = a1;
  if (a2 - a1 == 0x8000000000000000LL && v22 == -1) {
    goto LABEL_64;
  }
  int64_t v24 = v57 - a2;
  if (v57 - a2 == 0x8000000000000000LL && v22 == -1) {
    goto LABEL_65;
  }
  uint64_t v25 = (uint64_t)(a2 - a1) / v22;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v26 = v24 / v22;
  if (v25 >= v24 / v22)
  {
    if ((v26 & 0x8000000000000000LL) == 0)
    {
      uint64_t v52 = (char *)v18;
      unint64_t v53 = a1;
      uint64_t v28 = v26 * v22;
      uint64_t v29 = v17;
      if (a4 < a2 || a2 + v28 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v26, v55);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }

      unint64_t v36 = a4 + v28;
      unint64_t v58 = a4 + v28;
      unint64_t v60 = a2;
      if (v28 < 1 || v53 >= a2) {
        goto LABEL_62;
      }
      uint64_t v38 = -v22;
      uint64_t v50 = a6;
      unint64_t v51 = a4;
      while (1)
      {
        sub_1001A80F8(v36 + v38, v29, type metadata accessor for HostedRoutingItem);
        unint64_t v39 = a2 + v38;
        uint64_t v40 = a2 + v38;
        uint64_t v41 = v38;
        uint64_t v20 = (char *)v29;
        uint64_t v16 = v52;
        sub_1001A80F8(v40, (uint64_t)v52, type metadata accessor for HostedRoutingItem);
        char v42 = v56(v20, v16);
        if (v7) {
          goto LABEL_61;
        }
        char v43 = v42;
        unint64_t v54 = a2;
        unint64_t v44 = v57;
        unint64_t v45 = v57 + v41;
        sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
        sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
        uint64_t v29 = (uint64_t)v20;
        if ((v43 & 1) != 0)
        {
          uint64_t v38 = v41;
          unint64_t v46 = v44 + v41;
          if (v44 < v54 || v45 >= v54)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v39, 1LL, v55);
            uint64_t v7 = 0LL;
          }

          else
          {
            uint64_t v7 = 0LL;
            if (v44 != v54) {
              swift_arrayInitWithTakeBackToFront(v45);
            }
          }

          v60 += v38;
        }

        else
        {
          unint64_t v47 = v58;
          unint64_t v48 = v58 + v41;
          v58 += v41;
          uint64_t v38 = v41;
          unint64_t v46 = v44 + v41;
          if (v44 < v47 || v45 >= v47)
          {
            swift_arrayInitWithTakeFrontToBack(v45, v48, 1LL, v55);
            unint64_t v39 = v54;
            uint64_t v7 = 0LL;
          }

          else
          {
            uint64_t v7 = 0LL;
            unint64_t v39 = v54;
            if (v44 != v47) {
              swift_arrayInitWithTakeBackToFront(v45);
            }
          }
        }

        unint64_t v36 = v58;
        if (v58 > v51)
        {
          a2 = v39;
          unint64_t v57 = v46;
          if (v39 > v53) {
            continue;
          }
        }

        goto LABEL_62;
      }
    }
  }

  else if ((v25 & 0x8000000000000000LL) == 0)
  {
    uint64_t v27 = v25 * v22;
    if (a4 < v23 || v23 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v23, v25, v55);
    }

    else if (a4 != v23)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }

    unint64_t v54 = a4 + v27;
    unint64_t v58 = a4 + v27;
    if (v27 < 1 || a2 >= v57) {
      goto LABEL_62;
    }
    while (1)
    {
      sub_1001A80F8(a2, (uint64_t)v20, type metadata accessor for HostedRoutingItem);
      sub_1001A80F8(a4, (uint64_t)v16, type metadata accessor for HostedRoutingItem);
      char v31 = v56(v20, v16);
      if (v6) {
        break;
      }
      char v32 = v31;
      sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
      sub_1001A813C((uint64_t)v20, type metadata accessor for HostedRoutingItem);
      unint64_t v33 = v60;
      if ((v32 & 1) != 0)
      {
        unint64_t v34 = a2 + v22;
        if (v60 < a2 || v60 >= v34)
        {
          swift_arrayInitWithTakeFrontToBack(v60, a2, 1LL, v55);
        }

        else if (v60 == a2)
        {
          unint64_t v33 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v60);
        }
      }

      else
      {
        unint64_t v35 = v59 + v22;
        if (v60 < v59 || v60 >= v35)
        {
          swift_arrayInitWithTakeFrontToBack(v60, v59, 1LL, v55);
        }

        else if (v60 != v59)
        {
          swift_arrayInitWithTakeBackToFront(v60);
        }

        unint64_t v59 = v35;
        unint64_t v34 = a2;
      }

      unint64_t v60 = v33 + v22;
      a4 = v59;
      if (v59 < v54)
      {
        a2 = v34;
        if (v34 < v57) {
          continue;
        }
      }

      goto LABEL_62;
    }

LABEL_66:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  int64_t v99 = v95 + 1;
  if (__OFADD__(v95, 1LL))
  {
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
    return;
  }

  if (v99 < v153)
  {
    uint64_t v100 = *(void *)(v91 + 8 * v99);
    ++v95;
    if (v100) {
      goto LABEL_83;
    }
    unint64_t v95 = v99 + 1;
    if (v99 + 1 >= v153) {
      goto LABEL_115;
    }
    uint64_t v100 = *(void *)(v91 + 8 * v95);
    if (v100) {
      goto LABEL_83;
    }
    unint64_t v95 = v99 + 2;
    if (v99 + 2 >= v153) {
      goto LABEL_115;
    }
    uint64_t v100 = *(void *)(v91 + 8 * v95);
    if (v100) {
      goto LABEL_83;
    }
    unint64_t v95 = v99 + 3;
    if (v99 + 3 >= v153) {
      goto LABEL_115;
    }
    uint64_t v100 = *(void *)(v91 + 8 * v95);
    if (v100) {
      goto LABEL_83;
    }
    unint64_t v95 = v99 + 4;
    if (v99 + 4 >= v153) {
      goto LABEL_115;
    }
    uint64_t v100 = *(void *)(v91 + 8 * v95);
    if (v100)
    {
LABEL_83:
      uint64_t v94 = (v100 - 1) & v100;
      uint64_t v98 = __clz(__rbit64(v100)) + (v95 << 6);
      goto LABEL_84;
    }

    uint64_t v101 = v99 + 5;
    if (v101 < v153)
    {
      uint64_t v100 = *(void *)(v91 + 8 * v101);
      if (v100)
      {
        unint64_t v95 = v101;
        goto LABEL_83;
      }

      while (1)
      {
        unint64_t v95 = v101 + 1;
        if (__OFADD__(v101, 1LL)) {
          goto LABEL_121;
        }
        if (v95 >= v153) {
          break;
        }
        uint64_t v100 = *(void *)(v91 + 8 * v95);
        ++v101;
        if (v100) {
          goto LABEL_83;
        }
      }
    }
  }

char *sub_1001A595C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68((uint64_t *)&unk_1003FAE70);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1001A5A54(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v3 < v4 || v3 >= v4 + v10 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3);
  }
  return result;
}

char *sub_1001A5B60(uint64_t a1)
{
  return sub_1001A595C(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001A5B74(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_1001A5C14(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for RoutingSessionConfiguration.ItemType(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v34 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v33 = (char *)v30 - v7;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (!v8) {
    return (uint64_t)v9;
  }
  v30[1] = v2;
  unint64_t v39 = _swiftEmptyArrayStorage;
  sub_1001A4040(0, v8, 0);
  uint64_t result = sub_1001A5B74(a1);
  int64_t v11 = result;
  int v13 = v12;
  char v15 = v14 & 1;
  uint64_t v31 = a1;
  uint64_t v32 = a1 + 56;
  uint64_t v16 = v34;
  while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != v13) {
      goto LABEL_16;
    }
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v19 = v35;
    uint64_t v18 = v36;
    uint64_t v20 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v33, v17 + *(void *)(v35 + 72) * v11, v36);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v20, v18);
    uint64_t v21 = sub_100187ED8();
    uint64_t v22 = (*(uint64_t (**)(char *))(*(void *)v21 + 656LL))(v16);
    uint64_t v38 = v23;
    swift_release(v21);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    uint64_t v9 = v39;
    if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
    {
      sub_1001A4040(0, v9[2] + 1LL, 1);
      uint64_t v9 = v39;
    }

    unint64_t v25 = v9[2];
    unint64_t v24 = v9[3];
    if (v25 >= v24 >> 1)
    {
      sub_1001A4040(v24 > 1, v25 + 1, 1);
      uint64_t v9 = v39;
    }

    _OWORD v9[2] = v25 + 1;
    uint64_t v26 = &v9[2 * v25];
    uint64_t v27 = v38;
    v26[4] = v22;
    v26[5] = v27;
    a1 = v31;
    uint64_t result = sub_10015E644(v11, v13, v15 & 1, v31);
    int64_t v11 = result;
    int v13 = v28;
    char v15 = v29 & 1;
    if (!--v8)
    {
      sub_100160324(result, v28, v29 & 1);
      return (uint64_t)v9;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_1001A5E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v5 = *(void *)(v42 - 8);
  uint64_t v6 = __chkstk_darwin(v42);
  int64_t v8 = (void *)((char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  unint64_t v10 = (void *)((char *)v38 - v9);
  int64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return _swiftEmptyArrayStorage;
  }
  v38[1] = v2;
  uint64_t v50 = _swiftEmptyArrayStorage;
  int64_t v44 = v11;
  sub_1001A3FBC(0, v11, 0);
  unint64_t v46 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v43 = a1 + v46;
  uint64_t v45 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(v5 + 72);
  uint64_t v13 = 0LL;
  uint64_t v39 = a2 + 32;
  char v14 = (int *)v42;
  uint64_t v38[2] = a2;
  do
  {
    uint64_t v47 = v13;
    sub_1001A80F8(v43 + v12 * v13, (uint64_t)v10, type metadata accessor for HostedRoutingItem);
    *((_BYTE *)v10 + v14[9]) = 0;
    char v15 = (char *)v10 + v14[12];
    *(_DWORD *)char v15 = 0;
    uint64_t v15[4] = 1;
    unint64_t v48 = _swiftEmptyArrayStorage;
    unint64_t v16 = sub_1001A845C();
    uint64_t v17 = sub_100156B68(&qword_1003F9550);
    uint64_t v18 = sub_1001604E8(&qword_1003F9558, &qword_1003F9550, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v17, v18, &type metadata for VolumeCapabilities, v16);
    *((_BYTE *)v10 + v14[13]) = v49;
    if (v45)
    {
      uint64_t v19 = *(void *)(type metadata accessor for HostedRoutingSourceSession(0LL) - 8);
      uint64_t v20 = v39 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
      uint64_t v21 = *(void *)(v19 + 72);
      swift_bridgeObjectRetain();
      uint64_t v22 = 0LL;
      uint64_t v40 = v21;
      uint64_t v41 = v20;
      while (1)
      {
        uint64_t v23 = *(void *)(v20 + v21 * v22);
        uint64_t v24 = *(void *)(v23 + 16);
        if (v24) {
          break;
        }
LABEL_5:
        if (++v22 == v45)
        {
          char v30 = 0;
          goto LABEL_18;
        }
      }

      uint64_t v25 = v23 + v46;
      swift_bridgeObjectRetain_n(v23, 2LL);
      while (1)
      {
        sub_1001A80F8(v25, (uint64_t)v8, type metadata accessor for HostedRoutingItem);
        uint64_t v26 = v8[1];
        uint64_t v27 = v10[1];
        if (*v8 == *v10 && v26 == v27) {
          break;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(*v8, v26, *v10, v27, 0LL);
        sub_1001A813C((uint64_t)v8, type metadata accessor for HostedRoutingItem);
        if ((v29 & 1) != 0) {
          goto LABEL_17;
        }
        v25 += v12;
        if (!--v24)
        {
          swift_bridgeObjectRelease_n(v23, 2LL);
          uint64_t v20 = v41;
          char v14 = (int *)v42;
          uint64_t v21 = v40;
          goto LABEL_5;
        }
      }

      sub_1001A813C((uint64_t)v8, type metadata accessor for HostedRoutingItem);
LABEL_17:
      swift_bridgeObjectRelease_n(v23, 2LL);
      char v30 = 1;
      char v14 = (int *)v42;
LABEL_18:
      swift_bridgeObjectRelease();
    }

    else
    {
      char v30 = 0;
    }

    *((_BYTE *)v10 + v14[10]) = v30;
    uint64_t v31 = v50;
    if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
    {
      sub_1001A3FBC(0, v31[2] + 1LL, 1);
      uint64_t v31 = v50;
    }

    unint64_t v33 = v31[2];
    unint64_t v32 = v31[3];
    if (v33 >= v32 >> 1)
    {
      sub_1001A3FBC(v32 > 1, v33 + 1, 1);
      uint64_t v31 = v50;
    }

    unint64_t v34 = v46;
    uint64_t v35 = v47 + 1;
    _OWORD v31[2] = v33 + 1;
    uint64_t v36 = (uint64_t)v31 + v34 + v33 * v12;
    uint64_t v13 = v35;
    sub_1001A81D4((uint64_t)v10, v36, type metadata accessor for HostedRoutingItem);
  }

  while (v13 != v44);
  return v31;
}

void *sub_1001A61F4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  int64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  int64_t v11 = (uint64_t *)((char *)&v29 - v10);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v32 = *(void *)(v9 + 72);
    uint64_t v29 = v2;
    unint64_t v30 = v14;
    uint64_t v15 = a1 + v14;
    unint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v17 = type metadata accessor for HostedRoutingItem;
    uint64_t v31 = v8;
    while (1)
    {
      sub_1001A80F8(v15, (uint64_t)v11, v17);
      if (*(void *)(a2 + 16))
      {
        uint64_t v18 = v17;
        uint64_t v19 = *v11;
        uint64_t v20 = v11[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = sub_10015CAD4(v19, v20);
        if ((v22 & 1) != 0)
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + 56) + 8 * v21);
          swift_retain(v23);
          uint64_t v24 = swift_bridgeObjectRelease();
          char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 120LL))(v24);
          swift_release(v23);
          uint64_t v17 = v18;
          if ((v25 & 1) != 0)
          {
            sub_1001A81D4((uint64_t)v11, (uint64_t)v8, v18);
            if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
            {
              sub_1001A3FBC(0, v16[2] + 1LL, 1);
              uint64_t v17 = v18;
            }

            unint64_t v16 = v33;
            unint64_t v27 = v33[2];
            unint64_t v26 = v33[3];
            if (v27 >= v26 >> 1)
            {
              sub_1001A3FBC(v26 > 1, v27 + 1, 1);
              uint64_t v17 = v18;
              unint64_t v16 = v33;
            }

            _OWORD v16[2] = v27 + 1;
            uint64_t v28 = (uint64_t)v16 + v30 + v27 * v32;
            int64_t v8 = v31;
            sub_1001A81D4((uint64_t)v31, v28, v17);
            goto LABEL_5;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
        }
      }

      sub_1001A813C((uint64_t)v11, v17);
LABEL_5:
      v15 += v32;
      if (!--v13) {
        return v33;
      }
    }
  }

  return result;
}

uint64_t sub_1001A6418(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10015B404(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_1001A64AC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_10019F720( isUniquelyReferenced_nonNull_native,  v11,  1,  v4,  &qword_1003F8EC8,  type metadata accessor for HostedRoutingSourceSession);
  }

  uint64_t v12 = type metadata accessor for HostedRoutingSourceSession(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy(v17, v7, v12);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v4 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_31;
  }
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    unint64_t v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }

    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(v17);
    }

    uint64_t v23 = *(void *)(v4 + 16);
    BOOL v24 = __OFADD__(v23, v8);
    uint64_t v25 = v23 - v7;
    if (!v24)
    {
      *(void *)(v4 + swift_weakDestroy(v0 + 16) = v25;
LABEL_25:
      unint64_t *v2 = v4;
      return result;
    }

    goto LABEL_32;
  }

uint64_t sub_1001A6664( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001A677C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v50 = a2;
  uint64_t v54 = a1;
  uint64_t v55 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v49 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F8EA0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v51 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for RoutingSessionConfiguration(0LL);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = v19;
  uint64_t v53 = v18;
  (*(void (**)(char *, uint64_t))(v19 + 16))( v17,  a3 + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_configuration);
  uint64_t v20 = OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context;
  unint64_t v21 = (uint64_t *)(*(void *)(a3
                              + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_context)
                  + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_visibleSessionIdentifiersForCurrentPresentation);
  swift_beginAccess(v21, v60, 0LL, 0LL);
  uint64_t v22 = *v21;
  type metadata accessor for Preferences(0LL);
  uint64_t v23 = swift_bridgeObjectRetain();
  double v24 = static Preferences.sessionRecentActivityInterval.getter(v23);
  v59[0] = _swiftEmptyArrayStorage;
  v59[1] = _swiftEmptyArrayStorage;
  uint64_t v57 = 0LL;
  uint64_t v58 = 0LL;
  uint64_t v25 = *(void *)(a3 + v20)
      + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_mostRecentSourceSessionHidingInteraction;
  swift_beginAccess(v25, v56, 0LL, 0LL);
  sub_1001A8360(v25, (uint64_t)v11, &qword_1003F8EA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_1001603DC((uint64_t)v11, &qword_1003F8EA0);
    goto LABEL_9;
  }

  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v51, v11, v12);
  RoutingInteraction.action.getter(v26);
  uint64_t v28 = v47;
  uint64_t v27 = v48;
  int v29 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v8, v48);
  if (v29 == enum case for RoutingInteraction.Action.setActiveItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 96))(v8, v27);
    swift_bridgeObjectRelease();
    unint64_t v30 = sub_10024B258();
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *((void *)v30 + 1);
    unint64_t v33 = *(void (**)(char *, uint64_t))(v13 + 8);
    swift_bridgeObjectRetain();
    v33(v51, v12);
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v57 = v32;
    uint64_t v58 = v31;
    goto LABEL_9;
  }

  int v34 = v29;
  int v35 = enum case for RoutingInteraction.Action.handoff(_:);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v51, v12);
  if (v34 == v35)
  {
    (*(void (**)(char *, uint64_t))(v28 + 96))(v8, v27);
    uint64_t v36 = *(void *)v8;
    uint64_t v32 = *(void *)(*(void *)v8 + 16LL);
    uint64_t v31 = *(void *)(*(void *)v8 + 24LL);
    swift_bridgeObjectRetain();
    swift_release(v36);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
LABEL_9:
  uint64_t v37 = *(void *)(v54 + 16);
  if (v37)
  {
    uint64_t v38 = (uint64_t *)(v54 + ((*(unsigned __int8 *)(v49 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80)));
    uint64_t v39 = *(void *)(v49 + 72);
    swift_bridgeObjectRetain();
    uint64_t v40 = v37 - 1;
    uint64_t v41 = (uint64_t)v38;
    do
    {
      uint64_t v42 = v40;
      sub_1001A80F8(v41, (uint64_t)v5, type metadata accessor for HostedRoutingSession);
      int v43 = v5[*(int *)(v55 + 64)];
      sub_1001A813C((uint64_t)v5, type metadata accessor for HostedRoutingSession);
      if ((v43 & 1) != 0) {
        break;
      }
      uint64_t v40 = v42 - 1;
      v41 += v39;
    }

    while (v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    int64_t v44 = v50;
    do
    {
      sub_10019C734(v38, v44, (uint64_t)v17, v59, &v57, v22, v43, v24);
      uint64_t v38 = (uint64_t *)((char *)v38 + v39);
      --v37;
    }

    while (v37);
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v53);
  swift_bridgeObjectRelease();
  uint64_t v45 = v59[0];
  swift_bridgeObjectRelease();
  return v45;
}

uint64_t sub_1001A6BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v50 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v46 = v8;
  uint64_t v45 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003FD0B0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003F94D8);
  v58[3] = v12;
  uint64_t v13 = sub_1001604E8(&qword_1003F94E0, &qword_1003F94D8, (uint64_t)&protocol conformance descriptor for [A]);
  v58[4] = v13;
  v58[0] = a2;
  uint64_t v14 = sub_1001865C4(v58, v12);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(void *))(v17 + 16))(v16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 0LL,  v13,  v12,  &protocol requirements base descriptor for Sequence,  &associated type descriptor for Sequence.Iterator);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v13,  v12,  AssociatedTypeWitness,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v18 = sub_1001627AC(v55);
  *uint64_t v18 = *v16;
  v18[1] = 0LL;
  swift_bridgeObjectRetain();
  uint64_t v19 = AssociatedTypeWitness;
  uint64_t v20 = AssociatedConformanceWitness;
  sub_1001A7E78((uint64_t)v55, AssociatedTypeWitness);
  dispatch thunk of IteratorProtocol.next()(aBlock, v19, v20);
  for (uint64_t i = aBlock[0]; aBlock[0]; uint64_t i = aBlock[0])
  {
    uint64_t v35 = OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_queue;
    id v36 = objc_retain(*(id *)(i
                            + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_queue));
    uint64_t v37 = *sub_100216E68();

    if (v36 == (id)v37)
    {
      uint64_t v40 = *(void *)(i
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
      uint64_t v39 = *(void *)(i
                      + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                      + 8);
      uint64_t ObjectType = swift_getObjectType(v40, v38);
      sub_1001A80F8(v51, (uint64_t)v11, type metadata accessor for HostedRoutingSessionSnapshot);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v11, 0LL, 1LL, v44);
      uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 8);
      swift_unknownObjectRetain(v40);
      v42(v11, ObjectType, v39);
      swift_release(i);
      swift_unknownObjectRelease(v40);
      sub_1001603DC((uint64_t)v11, &qword_1003FD0B0);
    }

    else
    {
      uint64_t v22 = *(void **)(i + v35);
      uint64_t v23 = v45;
      sub_1001A80F8(v51, v45, type metadata accessor for HostedRoutingSessionSnapshot);
      uint64_t v24 = *(unsigned __int8 *)(v50 + 80);
      uint64_t v25 = (v24 + 24) & ~v24;
      uint64_t v26 = swift_allocObject(&unk_1003A4AE0, v25 + v46, v24 | 7);
      *(void *)(v26 + swift_weakDestroy(v0 + 16) = i;
      sub_1001A81D4(v23, v26 + v25, type metadata accessor for HostedRoutingSessionSnapshot);
      aBlock[4] = sub_1001A80C8;
      uint64_t v54 = v26;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100157EA8;
      aBlock[3] = &unk_1003A4AF8;
      uint64_t v27 = _Block_copy(aBlock);
      id v28 = v22;
      uint64_t v29 = swift_retain(i);
      static DispatchQoS.unspecified.getter(v29);
      uint64_t v52 = _swiftEmptyArrayStorage;
      uint64_t v30 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v32 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v31, v32, v3, v30);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v5, v27);
      _Block_release(v27);
      swift_release(i);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v3);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v48);
      swift_release(v54);
    }

    uint64_t v33 = AssociatedTypeWitness;
    uint64_t v34 = AssociatedConformanceWitness;
    sub_1001A7E78((uint64_t)v55, AssociatedTypeWitness);
    dispatch thunk of IteratorProtocol.next()(aBlock, v33, v34);
  }

  sub_1001607E0(v55);
  return sub_1001607E0(v58);
}

unint64_t sub_1001A70C8(unint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (result >= 3)
  {
    swift_errorRelease(result);
    return sub_100156BA8(a2, a3, a4);
  }

  return result;
}

uint64_t sub_1001A7110()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (uint64_t *)((char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100216E68();
  uint64_t v5 = (void *)*v4;
  uint64_t *v3 = *v4;
  (*(void (**)(uint64_t *, void, uint64_t))(v1 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v3);
  (*(void (**)(uint64_t *, uint64_t))(v1 + 8))(v3, v0);
  if ((v5 & 1) != 0)
  {
    unint64_t v7 = (unint64_t)sub_100187CE0();
    uint64_t v0 = v7;
    if (!(v7 >> 62))
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v8) {
        goto LABEL_4;
      }
      return swift_bridgeObjectRelease_n(v0, 2LL);
    }
  }

  else
  {
    __break(1u);
  }

  if (v0 < 0) {
    uint64_t v12 = v0;
  }
  else {
    uint64_t v12 = v0 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v12);
  uint64_t v8 = result;
  if (!result) {
    return swift_bridgeObjectRelease_n(v0, 2LL);
  }
LABEL_4:
  if (v8 >= 1)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((v0 & 0xC000000000000001LL) != 0)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v0);
      }

      else
      {
        uint64_t v11 = *(void *)(v0 + 8 * i + 32);
        swift_retain(v11);
      }

      sub_100194C40(v11);
      swift_release(v11);
    }

    return swift_bridgeObjectRelease_n(v0, 2LL);
  }

  __break(1u);
  return result;
}

unint64_t sub_1001A7274(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = (uint64_t)v4;
  uint64_t v72 = a1;
  uint64_t v73 = a3;
  unint64_t v68 = *v4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  __chkstk_darwin(v8);
  uint64_t v65 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  __chkstk_darwin(v10);
  uint64_t v62 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v71 = sub_100216E68();
  uint64_t v20 = (void *)*v71;
  *uint64_t v19 = *v71;
  (*(void (**)(uint64_t *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(uint64_t *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    uint64_t v22 = sub_1001741A8();
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    unint64_t v69 = v12;
    v23(v15, v22, v12);
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v24 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    unint64_t v70 = a2;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v61 = v5;
      uint64_t v29 = v28;
      uint64_t v60 = swift_slowAlloc(96LL, -1LL);
      aBlock[0] = v60;
      *(_DWORD *)uint64_t v29 = 136315650;
      uint64_t v30 = _typeName(_:qualified:)(v68, 0LL);
      uint64_t v74 = (void *)sub_10015ADC4(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, aBlock, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v74 = (void *)sub_10015ADC4(v72, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, aBlock, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease_n(a2, 3LL);
      *(_WORD *)(v29 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v74 = (void *)sub_10015ADC4(v73, a4, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, aBlock, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "[%s] dataSourceWillTransition - from: %s to: %s",  (uint8_t *)v29,  0x20u);
      uint64_t v32 = v60;
      swift_arrayDestroy(v60, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a4, 2LL);
      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    (*(void (**)(char *, unint64_t))(v13 + 8))(v15, v69);
    unint64_t result = (unint64_t)sub_100187CE0();
    uint64_t v5 = result;
    unint64_t v69 = a4;
    if (!(result >> 62))
    {
      uint64_t v34 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v34) {
        goto LABEL_7;
      }
      return swift_bridgeObjectRelease();
    }
  }

  else
  {
    __break(1u);
  }

  if (v5 < 0) {
    uint64_t v59 = v5;
  }
  else {
    uint64_t v59 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter(v59);
  uint64_t v34 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  if (v34 >= 1)
  {
    uint64_t v35 = 0LL;
    unint64_t v68 = v5 & 0xC000000000000001LL;
    uint64_t v61 = v5;
    uint64_t v36 = v67;
    do
    {
      if (v68)
      {
        uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v5);
      }

      else
      {
        uint64_t v43 = *(void *)(v5 + 8 * v35 + 32);
        swift_retain(v43);
      }

      uint64_t v44 = *(void **)(v43
                     + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_queue);
      if (v44 == (void *)*v71)
      {
        uint64_t v38 = *(void *)(v43
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
        uint64_t v37 = *(void *)(v43
                        + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient
                        + 8);
        uint64_t ObjectType = swift_getObjectType(v38, v42);
        uint64_t v40 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v37 + 40);
        swift_unknownObjectRetain(v38);
        v40(v72, v70, v73, v69, ObjectType, v37);
        swift_unknownObjectRelease(v38);
        uint64_t v41 = v43;
      }

      else
      {
        uint64_t v45 = (void *)swift_allocObject(&unk_1003A49F0, 56LL, 7LL);
        uint64_t v46 = v72;
        v45[2] = v43;
        v45[3] = v46;
        unint64_t v47 = v69;
        uint64_t v48 = v73;
        void v45[4] = v70;
        v45[5] = v48;
        v45[6] = v47;
        aBlock[4] = (uint64_t)sub_1001A7B3C;
        unint64_t v76 = v45;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = (uint64_t)sub_100157EA8;
        aBlock[3] = (uint64_t)&unk_1003A4A08;
        uint64_t v49 = _Block_copy(aBlock);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v50 = v44;
        uint64_t v51 = swift_retain(v43);
        uint64_t v52 = v34;
        uint64_t v53 = v62;
        static DispatchQoS.unspecified.getter(v51);
        uint64_t v74 = _swiftEmptyArrayStorage;
        uint64_t v54 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v55 = sub_100156B68((uint64_t *)&unk_1003F9A70);
        uint64_t v56 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v57 = v65;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v55, v56, v36, v54);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v53, v57, v49);
        _Block_release(v49);
        swift_release(v43);

        (*(void (**)(char *, uint64_t))(v66 + 8))(v57, v36);
        uint64_t v58 = v53;
        uint64_t v34 = v52;
        uint64_t v5 = v61;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v64);
        uint64_t v41 = (uint64_t)v76;
      }

      swift_release(v41);
      ++v35;
    }

    while (v34 != v35);
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_1001A78A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100156B68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for RoutingSessionServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted20RoutingSessionServer);
}

uint64_t sub_1001A7904()
{
  return type metadata accessor for RoutingSessionServer.Client(0LL);
}

uint64_t sub_1001A790C(uint64_t a1)
{
  v5[0] = &unk_10034C5C8;
  uint64_t result = type metadata accessor for RoutingSessionConfiguration(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = type metadata accessor for RoutingMode(319LL);
    if (v4 <= 0x3F)
    {
      void v5[3] = *(void *)(result - 8) + 64LL;
      v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      void v5[5] = &unk_10034C5C8;
      v5[6] = &unk_10034C5C8;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1001A79BC()
{
  return type metadata accessor for RoutingSessionServer.Client.Context(0LL);
}

void sub_1001A79C4(uint64_t a1)
{
  v4[0] = &unk_10034C5F8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1001A7A68(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_10034C5F8;
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[5] = &unk_10034C610;
    v4[6] = &unk_10034C5C8;
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

void sub_1001A7A68(uint64_t a1)
{
  if (!qword_1003F92E8)
  {
    uint64_t v2 = type metadata accessor for RoutingInteraction(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1003F92E8);
    }
  }

unint64_t sub_1001A7AC0()
{
  unint64_t result = qword_1003FED30[0];
  if (!qword_1003FED30[0])
  {
    uint64_t v1 = type metadata accessor for RoutingSessionServer.Client(255LL);
    unint64_t result = swift_getWitnessTable(&unk_10034C650, v1);
    atomic_store(result, qword_1003FED30);
  }

  return result;
}

uint64_t sub_1001A7B08()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001A7B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = v2[4];
  uint64_t v6 = v2[5];
  uint64_t v7 = v2[6];
  uint64_t v8 = (void *)(v3
                + OBJC_IVAR____TtCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client_externalClient);
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t ObjectType = swift_getObjectType(*v8, a2);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 40);
  swift_unknownObjectRetain(v9);
  v12(v4, v5, v6, v7, ObjectType, v10);
  return swift_unknownObjectRelease(v9);
}

uint64_t sub_1001A7BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100197628(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1001A7BEC()
{
  uint64_t result = swift_weakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = result;
    if (*(void *)(result
                   + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_itemSettlingTimer))
    {
      *(_BYTE *)(result
               + OBJC_IVAR____TtCCC12mediaremoted20RoutingSessionServerP33_3B73967C365FB47E5431CA6E1588B6FE6Client7Context_requestsStableItemOrdering) = 1;
      sub_100186F4C();
    }

    return swift_release(v2);
  }

  return result;
}

unint64_t sub_1001A7C60()
{
  unint64_t result = qword_1003F9468;
  if (!qword_1003F9468)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034BB90, &type metadata for RoutingEvent.Error);
    atomic_store(result, (unint64_t *)&qword_1003F9468);
  }

  return result;
}

uint64_t sub_1001A7CA8()
{
  uint64_t v1 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, ((v7 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

uint64_t sub_1001A7D60(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for RoutingInteraction(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10018E2D4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1001A7DE4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001A7E08(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, *a2);
}

uint64_t sub_1001A7E2C(uint64_t a1)
{
  return sub_1001943A4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001A7E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A7E78(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1001A7EA0()
{
  uint64_t v1 = *(void *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (int *)type metadata accessor for HostedRoutingSession(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48LL))(v0 + v3, 1LL, v6))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + v6[7];
    uint64_t v8 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001A0918(*(void *)(v7 + 32), *(unsigned int *)(v7 + 40), *(_BYTE *)(v7 + 44));
      swift_release(*(void *)(v7 + 48));
      swift_bridgeObjectRelease();
      uint64_t v9 = v7 + *(int *)(v8 + 36);
      uint64_t v10 = type metadata accessor for RoutingSession.NowPlayingInfo.PlaybackInfo(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
      uint64_t v11 = v7 + *(int *)(v8 + 40);
      uint64_t v12 = type metadata accessor for RoutingSession.NowPlayingInfo.TrackInfo(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
    }

    uint64_t v13 = v5 + v6[8];
    uint64_t v14 = type metadata accessor for RoutingControls(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = v5 + v6[13];
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
    uint64_t v17 = v5 + v6[15];
    uint64_t v18 = type metadata accessor for RoutingSession.HostInfo(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001A80C8()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for HostedRoutingSessionSnapshot(0LL) - 8) + 80LL);
  return sub_10019678C(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1001A80F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A813C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1001A8178()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001A819C(uint64_t *a1, uint64_t *a2)
{
  return sub_100198980(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001A81A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1001990FC( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56),  *(uint64_t (**)(uint64_t, uint64_t))(v2 + 64),  a2,  *(void *)(v2 + 72));
}

uint64_t sub_1001A81D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A8218(uint64_t *a1)
{
  return sub_10019BB48(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(_BYTE *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

uint64_t sub_1001A824C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019C4E8(a1, *(uint64_t **)(v2 + 16), *(_BYTE *)(v2 + 24), a2);
}

uint64_t sub_1001A8278(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

unint64_t sub_1001A828C()
{
  unint64_t result = qword_1003F9508;
  if (!qword_1003F9508)
  {
    uint64_t v1 = sub_100160358(&qword_1003F9500);
    sub_100156FEC( &qword_1003F9510,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10034C7A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003F9508);
  }

  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t sub_1001A831C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100156B68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A8360(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100156B68(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A83A4(void *a1)
{
  return sub_10019DD40(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

unint64_t sub_1001A83D4()
{
  unint64_t result = qword_1003F9530;
  if (!qword_1003F9530)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F1BC, &type metadata for RouteRelevance.Classification);
    atomic_store(result, (unint64_t *)&qword_1003F9530);
  }

  return result;
}

unint64_t sub_1001A8418()
{
  unint64_t result = qword_1003F9538;
  if (!qword_1003F9538)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034F10C, &type metadata for RouteRelevance.Classification);
    atomic_store(result, (unint64_t *)&qword_1003F9538);
  }

  return result;
}

unint64_t sub_1001A845C()
{
  unint64_t result = qword_1003F9548;
  if (!qword_1003F9548)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034FF10, &type metadata for VolumeCapabilities);
    atomic_store(result, (unint64_t *)&qword_1003F9548);
  }

  return result;
}

void sub_1001A84A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = Notification.userInfo.getter();
  if (!v2)
  {
    __int128 v23 = 0u;
    __int128 v24 = 0u;
LABEL_20:
    sub_1001603DC((uint64_t)&v23, &qword_1003F9EE0);
    return;
  }

  uint64_t v3 = v2;
  uint64_t v21 = kMRNowPlayingPlayerPathUserInfoKey;
  id v4 = kMRNowPlayingPlayerPathUserInfoKey;
  uint64_t v5 = sub_100156B68(&qword_1003F9500);
  unint64_t v6 = sub_1001A828C();
  AnyHashable.init<A>(_:)(&v21, v5, v6);
  if (*(void *)(v3 + 16) && (unint64_t v7 = sub_10015CAA4((uint64_t)v22), (v8 & 1) != 0))
  {
    sub_100160800(*(void *)(v3 + 56) + 32 * v7, (uint64_t)&v23);
  }

  else
  {
    __int128 v23 = 0u;
    __int128 v24 = 0u;
  }

  swift_bridgeObjectRelease();
  sub_100160990((uint64_t)v22);
  if (!*((void *)&v24 + 1)) {
    goto LABEL_20;
  }
  uint64_t v9 = sub_10016083C(0LL, &qword_1003F9578, &OBJC_CLASS___MRPlayerPath_ptr);
  id v10 = v22[0];
  id v11 = objc_msgSend(v22[0], "origin", v21);
  if (!v11)
  {
LABEL_23:

    return;
  }

  uint64_t v12 = v11;
  if (([v11 isLocal] & 1) == 0)
  {

    goto LABEL_23;
  }

  swift_beginAccess(v1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1 + 16);
  if (!Strong)
  {

    return;
  }

  uint64_t v14 = Strong;
  uint64_t v15 = (uint64_t)sub_100187CE0();
  uint64_t v16 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0) {
      uint64_t v20 = v15;
    }
    else {
      uint64_t v20 = v15 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (v17) {
      goto LABEL_13;
    }
LABEL_29:

    swift_release(v14);
    swift_bridgeObjectRelease_n(v16, 2LL);
    return;
  }

  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17) {
    goto LABEL_29;
  }
LABEL_13:
  if (v17 >= 1)
  {
    for (uint64_t i = 0LL; i != v17; ++i)
    {
      if ((v16 & 0xC000000000000001LL) != 0)
      {
        uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v16);
      }

      else
      {
        uint64_t v19 = *(void *)(v16 + 8 * i + 32);
        swift_retain(v19);
      }

      sub_100194C40(v19);
      swift_release(v19);
    }

    goto LABEL_29;
  }

  __break(1u);
}

uint64_t sub_1001A86FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = Notification.userInfo.getter();
  if (v2)
  {
    uint64_t v3 = v2;
    v16[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(MRAVEndpointOutputDeviceUserInfoKey);
    v16[1] = v4;
    AnyHashable.init<A>(_:)(v16, &type metadata for String, &protocol witness table for String);
    if (*(void *)(v3 + 16) && (unint64_t v5 = sub_10015CAA4((uint64_t)v17), (v6 & 1) != 0))
    {
      sub_100160800(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v18);
    }

    else
    {
      __int128 v18 = 0u;
      __int128 v19 = 0u;
    }

    swift_bridgeObjectRelease();
    sub_100160990((uint64_t)v17);
    if (*((void *)&v19 + 1)) {
      return sub_1001603DC((uint64_t)&v18, &qword_1003F9EE0);
    }
  }

  else
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
  }

  uint64_t v8 = v1 + 16;
  sub_1001603DC((uint64_t)&v18, &qword_1003F9EE0);
  swift_beginAccess(v8, v17, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v8);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (uint64_t)sub_100187CE0();
    uint64_t v11 = v10;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0) {
        uint64_t v15 = v10;
      }
      else {
        uint64_t v15 = v10 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(v15);
      uint64_t v12 = result;
      if (result) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v12)
      {
LABEL_12:
        if (v12 < 1)
        {
          __break(1u);
          return result;
        }

        for (uint64_t i = 0LL; i != v12; ++i)
        {
          if ((v11 & 0xC000000000000001LL) != 0)
          {
            uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v11);
          }

          else
          {
            uint64_t v14 = *(void *)(v11 + 8 * i + 32);
            swift_retain(v14);
          }

          sub_100194C40(v14);
          swift_release(v14);
        }
      }
    }

    swift_release(v9);
    return swift_bridgeObjectRelease_n(v11, 2LL);
  }

  return result;
}

uint64_t sub_1001A88C4()
{
  return sub_100156FEC( &qword_1003F9510,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10034C7A8);
}

uint64_t sub_1001A88F0()
{
  return sub_100156FEC( &qword_1003F9588,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10034C70C);
}

uint64_t sub_1001A891C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A824C(a1, a2);
}

uint64_t sub_1001A8998()
{
  uint64_t v3 = sub_1001A8B10(0LL, 15LL, 0xD00000000000003ELL, 0x800000010033B6D0LL);
  uint64_t v0 = sub_100156B68(&qword_1003F9590);
  unint64_t v1 = sub_1001A8CD0();
  return String.init<A>(_:)(&v3, v0, v1);
}

char *sub_1001A8A10(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100156B68(&qword_1003F95A0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1001A8B10(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (result == a2)
  {
    return (uint64_t)&_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = result;
    if (a2 >= result)
    {
      uint64_t v9 = HIBYTE(a4) & 0xF;
      if ((a4 & 0x2000000000000000LL) == 0) {
        uint64_t v9 = a3 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v20 = v9;
      uint64_t v4 = (char *)&_swiftEmptyArrayStorage;
      while (v6 < a2)
      {
        if (v20)
        {
          uint64_t result = String.count.getter(a3, a4);
          if (result < 0) {
            goto LABEL_23;
          }
          unint64_t v11 = result;
          if (!result) {
            goto LABEL_24;
          }
          unint64_t v21 = 0LL;
          swift_stdlib_random(&v21, 8LL);
          uint64_t v12 = (v21 * (unsigned __int128)v11) >> 64;
          if (v11 > v21 * v11)
          {
            unint64_t v13 = -(uint64_t)v11 % v11;
            if (v13 > v21 * v11)
            {
              do
              {
                unint64_t v21 = 0LL;
                swift_stdlib_random(&v21, 8LL);
              }

              while (v13 > v21 * v11);
              uint64_t v12 = (v21 * (unsigned __int128)v11) >> 64;
            }
          }

          uint64_t v14 = String.index(_:offsetBy:)(15LL, v12, a3, a4);
          uint64_t v15 = String.subscript.getter(v14, a3, a4);
          uint64_t v17 = v16;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v4);
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1001A8A10(0LL, *((void *)v4 + 2) + 1LL, 1, v4);
            uint64_t v4 = (char *)result;
          }

          unint64_t v19 = *((void *)v4 + 2);
          unint64_t v18 = *((void *)v4 + 3);
          if (v19 >= v18 >> 1)
          {
            uint64_t result = (uint64_t)sub_1001A8A10((char *)(v18 > 1), v19 + 1, 1, v4);
            uint64_t v4 = (char *)result;
          }

          *((void *)v4 + 2) = v19 + 1;
          uint64_t v10 = &v4[16 * v19];
          *((void *)v10 + 4) = v15;
          *((void *)v10 + 5) = v17;
        }

        if (++v6 == a2) {
          return (uint64_t)v4;
        }
      }

      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

unint64_t sub_1001A8CD0()
{
  unint64_t result = qword_1003F9598;
  if (!qword_1003F9598)
  {
    uint64_t v1 = sub_100160358(&qword_1003F9590);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003F9598);
  }

  return result;
}

uint64_t sub_1001A8D1C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_1001A8DA4(a1, a2, a3, a4, a5);
}

uint64_t type metadata accessor for RoutingDecisionEngine()
{
  return objc_opt_self(&OBJC_CLASS____TtC12mediaremoted21RoutingDecisionEngine);
}

uint64_t sub_1001A8DA4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v449 = a4;
  uint64_t v471 = a3;
  uint64_t v473 = a1;
  uint64_t v474 = a2;
  uint64_t v455 = a5;
  uint64_t v450 = type metadata accessor for RoutingSessionConfiguration.Context(0LL);
  uint64_t v448 = *(void *)(v450 - 8);
  __chkstk_darwin(v450);
  v447 = (char *)&v426 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __int128 v431 = (char *)&v426 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  unsigned __int8 v433 = (char *)&v426 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v439 = (char *)&v426 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v441 = (char *)&v426 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v440 = (char *)&v426 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v438 = (char *)&v426 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v429 = (char *)&v426 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v430 = (char *)&v426 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  __int128 v432 = (char *)&v426 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v435 = (char *)&v426 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v442 = (char *)&v426 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v437 = (char *)&v426 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v443 = (char *)&v426 - v33;
  __chkstk_darwin(v32);
  v451 = (char *)&v426 - v34;
  uint64_t v453 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v452 = *(void *)(v453 - 8);
  __chkstk_darwin(v453);
  v454 = (uint64_t *)((char *)&v426 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = sub_100156B68(&qword_1003F9450);
  uint64_t v37 = __chkstk_darwin(v36);
  uint64_t v436 = (uint64_t)&v426 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37);
  uint64_t v446 = (uint64_t)&v426 - v39;
  uint64_t v457 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v456 = *(void *)(v457 - 8);
  uint64_t v40 = __chkstk_darwin(v457);
  uint64_t v434 = (uint64_t)&v426 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  uint64_t v445 = (uint64_t)&v426 - v42;
  uint64_t v43 = sub_100156B68(&qword_1003F8918);
  __chkstk_darwin(v43);
  uint64_t v460 = (uint64_t)&v426 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v463 = *(void *)(v45 - 8);
  uint64_t v464 = v45;
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v444 = (uint64_t)&v426 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46);
  uint64_t v459 = (uint64_t)&v426 - v48;
  uint64_t v472 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v470 = *(void *)(v472 - 8);
  uint64_t v49 = __chkstk_darwin(v472);
  uint64_t v51 = (char *)&v426 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v49);
  v467 = (char *)&v426 - v52;
  uint64_t v53 = sub_100156B68(&qword_1003F94C0);
  uint64_t v54 = __chkstk_darwin(v53);
  uint64_t v466 = (uint64_t)&v426 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v462 = (uint64_t)&v426 - v57;
  __chkstk_darwin(v56);
  uint64_t v478 = (uint64_t)&v426 - v58;
  uint64_t v59 = type metadata accessor for HostedRoutingSessionSnapshot(0LL);
  uint64_t v60 = __chkstk_darwin(v59);
  uint64_t v62 = (char *)&v426 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = __chkstk_darwin(v60);
  uint64_t v65 = (char *)&v426 - v64;
  __chkstk_darwin(v63);
  uint64_t v67 = (char *)&v426 - v66;
  uint64_t v68 = sub_100156B68((uint64_t *)&unk_1003FBBE0);
  __chkstk_darwin(v68);
  unint64_t v70 = (char *)&v426 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_1001744D4();
  sub_1001A8360(v71, (uint64_t)v70, (uint64_t *)&unk_1003FBBE0);
  uint64_t v72 = v6;
  int v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v70, 1LL, v6);
  uint64_t v74 = (void *)v474;
  uint64_t v469 = v7;
  if (v73 == 1)
  {
    sub_1001603DC((uint64_t)v70, (uint64_t *)&unk_1003FBBE0);
  }

  else
  {
    sub_1001A80F8(v471, (uint64_t)v67, type metadata accessor for HostedRoutingSessionSnapshot);
    sub_1001A80F8((uint64_t)v67, (uint64_t)v65, type metadata accessor for HostedRoutingSessionSnapshot);
    sub_1001A81D4((uint64_t)v67, (uint64_t)v62, type metadata accessor for HostedRoutingSessionSnapshot);
    uint64_t v75 = swift_bridgeObjectRetain_n(v74, 2LL);
    unint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter();
    int v78 = v77;
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v79 = swift_slowAlloc(32LL, -1LL);
      os_log_t v428 = v76;
      uint64_t v80 = v79;
      uint64_t v458 = swift_slowAlloc(96LL, -1LL);
      v477[0] = v458;
      *(_DWORD *)uint64_t v80 = 136315650;
      LODWORD(v427) = v78;
      uint64_t v81 = _typeName(_:qualified:)(v465, 0LL);
      uint64_t v468 = v72;
      uint64_t v475 = sub_10015ADC4(v81, v82, v477);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v80 + 4, v80 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v475 = sub_10015ADC4(v473, (unint64_t)v74, v477);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v80 + 14, v80 + 22);
      swift_bridgeObjectRelease_n(v74, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 22) = 2080;
      unint64_t v83 = sub_100254B04();
      uint64_t v475 = sub_10015ADC4(v83, v84, v477);
      uint64_t v72 = v468;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v80 + 24, v80 + 32);
      swift_bridgeObjectRelease();
      sub_1001A813C((uint64_t)v62, type metadata accessor for HostedRoutingSessionSnapshot);
      sub_1001A813C((uint64_t)v65, type metadata accessor for HostedRoutingSessionSnapshot);
      os_log_t v85 = v428;
      _os_log_impl( (void *)&_mh_execute_header,  v428,  (os_log_type_t)v427,  "[%s] computeInteraction for item: %s in snapshot: %s",  (uint8_t *)v80,  0x20u);
      uint64_t v86 = v458;
      swift_arrayDestroy(v458, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v74, 2LL);

      sub_1001A813C((uint64_t)v62, type metadata accessor for HostedRoutingSessionSnapshot);
      sub_1001A813C((uint64_t)v65, type metadata accessor for HostedRoutingSessionSnapshot);
    }

    (*(void (**)(char *, uint64_t))(v469 + 8))(v70, v72);
  }

  v477[0] = v473;
  v477[1] = v474;
  uint64_t v475 = 14906LL;
  unint64_t v476 = 0xE200000000000000LL;
  unint64_t v87 = sub_1001AEDE0();
  uint64_t v88 = (os_log_s *)Collection<>.split<A>(separator:maxSplits:omittingEmptySubsequences:)( &v475,  1LL,  1LL,  &type metadata for String,  &type metadata for String,  v87,  v87,  &protocol witness table for Character,  v426,  v427,  v428,  v429);
  uint64_t v89 = v88;
  if (*((void *)v88 + 2) != 2LL)
  {
    swift_bridgeObjectRelease();
    uint64_t v110 = type metadata accessor for InternalRoutingError(0LL);
    uint64_t v111 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
    swift_allocError(v110, v111, 0LL, 0LL);
    uint64_t v113 = v112;
    uint64_t v114 = (unsigned int *)&enum case for InternalRoutingError.itemNotFound(_:);
LABEL_27:
    uint64_t v137 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v110 - 8) + 104LL))(v113, *v114, v110);
    return swift_willThrow(v137);
  }

  uint64_t v91 = *((void *)v88 + 4);
  uint64_t v90 = *((void *)v88 + 5);
  unint64_t v92 = *((void *)v88 + 6);
  uint64_t v93 = *((void *)v88 + 7);
  swift_bridgeObjectRetain();
  uint64_t v94 = static String._fromSubstring(_:)(v91, v90, v92, v93);
  uint64_t v96 = v95;
  swift_bridgeObjectRelease();
  if (*((void *)v89 + 2) < 2uLL)
  {
    __break(1u);
    goto LABEL_112;
  }

  os_log_t v428 = v96;
  uint64_t v468 = v72;
  uint64_t v97 = *((void *)v89 + 8);
  uint64_t v98 = *((void *)v89 + 9);
  uint64_t v99 = *((void *)v89 + 10);
  uint64_t v100 = *((void *)v89 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v426 = static String._fromSubstring(_:)(v97, v98, v99, v100);
  uint64_t v458 = v101;
  swift_bridgeObjectRelease();
  uint64_t v102 = v471;
  uint64_t v427 = sub_100254850();
  uint64_t v103 = v478;
  sub_1001A8360(v102, v478, &qword_1003F94C0);
  uint64_t v104 = v470;
  uint64_t v105 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v470 + 48);
  uint64_t v106 = v472;
  LODWORD(v9_Block_object_dispose(va, 8) = v105(v103, 1LL, v472);
  sub_1001603DC(v103, &qword_1003F94C0);
  uint64_t v478 = v94;
  if ((_DWORD)v98 == 1)
  {
    uint64_t v107 = _swiftEmptyArrayStorage;
    uint64_t v108 = v104;
    uint64_t v109 = v105;
    goto LABEL_14;
  }

  uint64_t v115 = sub_100156B68(&qword_1003F94E8);
  uint64_t v116 = *(unsigned __int8 *)(v104 + 80);
  uint64_t v117 = (v116 + 32) & ~v116;
  uint64_t v107 = (void *)swift_allocObject(v115, v117 + *(void *)(v104 + 72), v116 | 7);
  *((_OWORD *)v107 + 1) = xmmword_10034BE40;
  uint64_t v118 = v102;
  uint64_t v119 = v462;
  sub_1001A8360(v118, v462, &qword_1003F94C0);
  uint64_t result = v105(v119, 1LL, v106);
  if ((_DWORD)result != 1)
  {
    uint64_t v108 = v104;
    uint64_t v109 = v105;
    sub_1001A81D4(v119, (uint64_t)v107 + v117, type metadata accessor for HostedRoutingSession);
LABEL_14:
    v477[0] = v427;
    sub_1001AEB54((uint64_t)v107);
    uint64_t v121 = *(void *)(v477[0] + 16);
    os_log_t v122 = v428;
    os_log_t v123 = v428;
    if (v121)
    {
      uint64_t v124 = v477[0] + ((*(unsigned __int8 *)(v108 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
      uint64_t v125 = *(void *)(v108 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1001A80F8(v124, (uint64_t)v51, type metadata accessor for HostedRoutingSession);
        os_log_t v126 = (os_log_t)*((void *)v51 + 1);
        BOOL v127 = *(void *)v51 == v478 && v126 == v123;
        if (v127 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v51, v126, v478, v123, 0LL) & 1) != 0) {
          break;
        }
        sub_1001A813C((uint64_t)v51, type metadata accessor for HostedRoutingSession);
        v124 += v125;
        if (!--v121)
        {
          swift_bridgeObjectRelease();
          uint64_t v128 = 1LL;
          uint64_t v129 = v466;
          uint64_t v74 = v467;
          unint64_t v130 = v458;
          os_log_t v122 = v123;
          uint64_t v108 = v470;
          goto LABEL_25;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v131 = (uint64_t)v51;
      uint64_t v129 = v466;
      sub_1001A81D4(v131, v466, type metadata accessor for HostedRoutingSession);
      uint64_t v128 = 0LL;
      uint64_t v74 = v467;
      unint64_t v130 = v458;
      os_log_t v122 = v123;
      uint64_t v108 = v470;
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t v128 = 1LL;
      unint64_t v130 = v458;
      uint64_t v129 = v466;
      uint64_t v74 = v467;
    }

LABEL_78:
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease_n(v287, 2LL);
        (*(void (**)(char *, uint64_t))(v285 + 8))(v288, v72);
        uint64_t v193 = v459;
        uint64_t v319 = v454;
        uint64_t v320 = v453;
        uint64_t v321 = v452;
        uint64_t v260 = v426;
        uint64_t v261 = v478;
        uint64_t v74 = v467;
        goto LABEL_79;
      }

      v375 = v431;
      v286(v431, v284, v72);
      swift_bridgeObjectRetain_n(v62, 2LL);
      uint64_t v376 = swift_bridgeObjectRetain_n(v287, 2LL);
      v377 = (void *)Logger.logObject.getter(v376);
      os_log_type_t v378 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled((os_log_t)v377, v378))
      {

        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease_n(v287, 2LL);
        (*(void (**)(char *, uint64_t))(v285 + 8))(v375, v72);
        uint64_t v193 = v459;
        uint64_t v319 = v454;
        uint64_t v320 = v453;
        uint64_t v321 = v452;
        uint64_t v372 = v426;
        uint64_t v373 = v478;
        uint64_t v74 = v467;
        goto LABEL_106;
      }

      uint64_t v379 = swift_slowAlloc(32LL, -1LL);
      uint64_t v473 = swift_slowAlloc(96LL, -1LL);
      v477[0] = v473;
      *(_DWORD *)uint64_t v379 = 136315650;
      uint64_t v474 = v142;
      uint64_t v380 = _typeName(_:qualified:)(v465, 0LL);
      uint64_t v475 = sub_10015ADC4(v380, v381, v477);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v379 + 4, v379 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v379 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v372 = v426;
      uint64_t v475 = sub_10015ADC4(v426, v287, v477);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v379 + 14, v379 + 22);
      swift_bridgeObjectRelease_n(v287, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v379 + 22) = 2080;
      uint64_t v74 = v467;
      swift_bridgeObjectRetain();
      uint64_t v373 = v478;
      uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v379 + 24, v379 + 32);
      swift_bridgeObjectRelease_n(v62, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v377,  v378,  "[%s] Item: %s, is not picked in session: %s -> .add",  (uint8_t *)v379,  0x20u);
      uint64_t v382 = v473;
      swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v382, -1LL, -1LL);
      swift_slowDealloc(v379, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v469 + 8))(v431, v468);
      goto LABEL_98;
    }

    uint64_t v194 = *(int *)(v143 + 36);
    uint64_t v195 = v143;
    uint64_t v196 = v459;
    uint64_t v197 = v468;
    if (*(_BYTE *)(v459 + v194) == 1)
    {
      uint64_t v198 = sub_10025026C();
      uint64_t v199 = sub_1001AF2E0(v198);
      swift_bridgeObjectRelease();
      uint64_t v200 = sub_100156B68(&qword_1003F9460);
      uint64_t v201 = *(unsigned __int8 *)(v463 + 80);
      uint64_t v202 = (v201 + 32) & ~v201;
      uint64_t v203 = swift_allocObject(v200, v202 + *(void *)(v463 + 72), v201 | 7);
      *(_OWORD *)(v203 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
      uint64_t v204 = v203 + v202;
      sub_1001A80F8(v196, v204, type metadata accessor for HostedRoutingItem);
      char v205 = sub_10017FF40((uint64_t)v199, v203);
      swift_setDeallocating(v203);
      swift_arrayDestroy(v204, *(void *)(v203 + 16), v195);
      swift_deallocClassInstance(v203, 32LL, 7LL);
      swift_bridgeObjectRelease();
      uint64_t v206 = sub_1001741A8();
      id v207 = *(void (**)(char *, uint64_t, uint64_t))(v469 + 16);
      if ((v205 & 1) != 0)
      {
        id v208 = v443;
        v207(v443, v206, v197);
        swift_bridgeObjectRetain();
        unint64_t v209 = v458;
        uint64_t v210 = swift_bridgeObjectRetain();
        id v211 = (void *)Logger.logObject.getter(v210);
        os_log_type_t v212 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled((os_log_t)v211, v212))
        {

          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease_n(v209, 2LL);
          uint64_t v217 = *(void (**)(char *, uint64_t))(v469 + 8);
          uint64_t v239 = v208;
          uint64_t v240 = v197;
          goto LABEL_86;
        }

        uint64_t v213 = swift_slowAlloc(32LL, -1LL);
        uint64_t v214 = swift_slowAlloc(96LL, -1LL);
        v477[0] = v214;
        *(_DWORD *)uint64_t v213 = 136315650;
        uint64_t v215 = _typeName(_:qualified:)(v465, 0LL);
        uint64_t v475 = sub_10015ADC4(v215, v216, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v213 + 4, v213 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v213 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v475 = sub_10015ADC4(v426, v209, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v213 + 14, v213 + 22);
        swift_bridgeObjectRelease_n(v209, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v213 + 22) = 2080;
        uint64_t v74 = v467;
        swift_bridgeObjectRetain();
        uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v213 + 24, v213 + 32);
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v211,  v212,  "[%s] Item: %s, is sole picked item in session: %s, not RC context -> no-op",  (uint8_t *)v213,  0x20u);
        swift_arrayDestroy(v214, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v214, -1LL, -1LL);
        swift_slowDealloc(v213, -1LL, -1LL);

        uint64_t v217 = *(void (**)(char *, uint64_t))(v469 + 8);
        uint64_t v218 = &v475;
LABEL_53:
        uint64_t v239 = (char *)*(v218 - 32);
        uint64_t v240 = v468;
LABEL_86:
        v217(v239, v240);
        uint64_t v273 = v459;
LABEL_89:
        uint64_t v274 = type metadata accessor for InternalRoutingError(0LL);
        uint64_t v358 = sub_100156FEC( &qword_1003F8908,  (uint64_t (*)(uint64_t))&type metadata accessor for InternalRoutingError,  (uint64_t)&protocol conformance descriptor for InternalRoutingError);
        swift_allocError(v274, v358, 0LL, 0LL);
        uint64_t v277 = v359;
        uint64_t v278 = (unsigned int *)&enum case for InternalRoutingError.NOP(_:);
LABEL_90:
        uint64_t v360 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v274 - 8) + 104LL))(v277, *v278, v274);
        swift_willThrow(v360);
        uint64_t v156 = v273;
        goto LABEL_115;
      }

      uint64_t v296 = v437;
      v207(v437, v206, v197);
      swift_bridgeObjectRetain_n(v62, 2LL);
      unint64_t v297 = v458;
      uint64_t v298 = swift_bridgeObjectRetain_n(v458, 2LL);
      uint64_t v299 = (os_log_s *)Logger.logObject.getter(v298);
      os_log_type_t v300 = static os_log_type_t.default.getter();
      int v301 = v300;
      if (os_log_type_enabled(v299, v300))
      {
        uint64_t v302 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v472) = v301;
        uint64_t v303 = v302;
        uint64_t v473 = swift_slowAlloc(96LL, -1LL);
        v477[0] = v473;
        *(_DWORD *)uint64_t v303 = 136315650;
        uint64_t v474 = v142;
        uint64_t v304 = _typeName(_:qualified:)(v465, 0LL);
        uint64_t v475 = sub_10015ADC4(v304, v305, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v303 + 4, v303 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v303 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v306 = v426;
        uint64_t v475 = sub_10015ADC4(v426, v297, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v303 + 14, v303 + 22);
        swift_bridgeObjectRelease_n(v297, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v303 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v307 = v478;
        uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v303 + 24, v303 + 32);
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v299,  (os_log_type_t)v472,  "[%s] Item: %s, is picked in session: %s, not RC context -> .remove",  (uint8_t *)v303,  0x20u);
        uint64_t v308 = v473;
        swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v308, -1LL, -1LL);
        swift_slowDealloc(v303, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v469 + 8))(v296, v468);
LABEL_74:
        uint64_t v193 = v459;
        v330 = v454;
        uint64_t v331 = v453;
        uint64_t v332 = v452;
LABEL_95:
        uint64_t *v330 = v306;
        v330[1] = v297;
        v330[2] = v307;
        v330[3] = (uint64_t)v62;
        (*(void (**)(uint64_t *, void, uint64_t))(v332 + 104))( v330,  enum case for RoutingInteraction.Action.remove(_:),  v331);
        RoutingInteraction.init(action:)(v330);
        uint64_t v74 = v467;
        goto LABEL_114;
      }

      swift_bridgeObjectRelease_n(v62, 2LL);
      swift_bridgeObjectRelease_n(v297, 2LL);
      (*(void (**)(char *, uint64_t))(v469 + 8))(v296, v197);
LABEL_94:
      uint64_t v193 = v459;
      v330 = v454;
      uint64_t v331 = v453;
      uint64_t v332 = v452;
      uint64_t v306 = v426;
      uint64_t v307 = v478;
      goto LABEL_95;
    }

    char v241 = *(_BYTE *)(v459 + *(int *)(v195 + 44));
    LOBYTE(v477[0]) = *(_BYTE *)sub_1002493BC();
    LOBYTE(v475) = v241;
    unint64_t v242 = sub_1001AEE24();
    if ((dispatch thunk of SetAlgebra.isSuperset(of:)(v477, &type metadata for RoutingCapabilities, v242) & 1) != 0)
    {
      uint64_t v243 = sub_10025026C();
      unint64_t v244 = sub_1001AF498(v243);
      swift_bridgeObjectRelease();
      uint64_t v245 = v244[2];
      swift_bridgeObjectRelease();
      uint64_t v246 = sub_1001741A8();
      uint64_t v247 = v469;
      uint64_t v248 = *(void (**)(char *, uint64_t, uint64_t))(v469 + 16);
      if (!v245)
      {
        v361 = v432;
        v248(v432, v246, v197);
        swift_bridgeObjectRetain_n(v62, 2LL);
        uint64_t v362 = swift_bridgeObjectRetain_n(v130, 2LL);
        v363 = (void *)Logger.logObject.getter(v362);
        os_log_type_t v364 = static os_log_type_t.default.getter();
        unint64_t v365 = v130;
        int v366 = v364;
        if (!os_log_type_enabled((os_log_t)v363, v364))
        {

          swift_bridgeObjectRelease_n(v62, 2LL);
          swift_bridgeObjectRelease_n(v365, 2LL);
          (*(void (**)(char *, uint64_t))(v247 + 8))(v361, v197);
          uint64_t v193 = v459;
          uint64_t v319 = v454;
          uint64_t v320 = v453;
          uint64_t v321 = v452;
          uint64_t v372 = v426;
          uint64_t v373 = v478;
          goto LABEL_106;
        }

        uint64_t v367 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v472) = v366;
        unint64_t v368 = v365;
        uint64_t v369 = v367;
        uint64_t v473 = swift_slowAlloc(96LL, -1LL);
        v477[0] = v473;
        *(_DWORD *)uint64_t v369 = 136315650;
        uint64_t v474 = v142;
        uint64_t v370 = _typeName(_:qualified:)(v465, 0LL);
        uint64_t v475 = sub_10015ADC4(v370, v371, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v369 + 4, v369 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v369 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v372 = v426;
        uint64_t v475 = sub_10015ADC4(v426, v368, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v369 + 14, v369 + 22);
        swift_bridgeObjectRelease_n(v368, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v369 + 22) = 2080;
        uint64_t v74 = v467;
        swift_bridgeObjectRetain();
        uint64_t v373 = v478;
        uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v369 + 24, v369 + 32);
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v363,  (os_log_type_t)v472,  "[%s] Item: %s, is not picked in session: %s, not RC context -> .add",  (uint8_t *)v369,  0x20u);
        uint64_t v374 = v473;
        swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v374, -1LL, -1LL);
        swift_slowDealloc(v369, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v469 + 8))(v432, v468);
LABEL_98:
        uint64_t v193 = v459;
        uint64_t v319 = v454;
        uint64_t v320 = v453;
        uint64_t v321 = v452;
LABEL_106:
        uint64_t v397 = v458;
        *uint64_t v319 = v372;
        v319[1] = v397;
        v319[2] = v373;
        v319[3] = (uint64_t)v62;
        uint64_t v341 = (unsigned int *)&enum case for RoutingInteraction.Action.add(_:);
        goto LABEL_80;
      }

      uint64_t v249 = v435;
      v248(v435, v246, v197);
      swift_bridgeObjectRetain_n(v62, 2LL);
      uint64_t v250 = swift_bridgeObjectRetain_n(v130, 2LL);
      uint64_t v251 = (os_log_s *)Logger.logObject.getter(v250);
      os_log_type_t v252 = static os_log_type_t.default.getter();
      unint64_t v253 = v130;
      int v254 = v252;
      if (os_log_type_enabled(v251, v252))
      {
        uint64_t v255 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v472) = v254;
        unint64_t v256 = v253;
        uint64_t v257 = v255;
        uint64_t v473 = swift_slowAlloc(96LL, -1LL);
        v477[0] = v473;
        *(_DWORD *)uint64_t v257 = 136315650;
        uint64_t v474 = v142;
        uint64_t v258 = _typeName(_:qualified:)(v465, 0LL);
        uint64_t v475 = sub_10015ADC4(v258, v259, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v257 + 4, v257 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v257 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v260 = v426;
        uint64_t v475 = sub_10015ADC4(v426, v256, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v257 + 14, v257 + 22);
        swift_bridgeObjectRelease_n(v256, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v257 + 22) = 2080;
        uint64_t v74 = v467;
        swift_bridgeObjectRetain();
        uint64_t v261 = v478;
        uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v257 + 24, v257 + 32);
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v251,  (os_log_type_t)v472,  "[%s] Item: %s, is not picked in session: %s, not RC context, session has existing non-groupable items -> .set",  (uint8_t *)v257,  0x20u);
        uint64_t v262 = v473;
        swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v262, -1LL, -1LL);
        swift_slowDealloc(v257, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v469 + 8))(v435, v468);
LABEL_77:
        uint64_t v193 = v459;
        uint64_t v319 = v454;
        uint64_t v320 = v453;
        uint64_t v321 = v452;
        goto LABEL_79;
      }
    }

    else
    {
      uint64_t v309 = sub_1001741A8();
      uint64_t v247 = v469;
      uint64_t v249 = v442;
      (*(void (**)(char *, uint64_t, uint64_t))(v469 + 16))(v442, v309, v197);
      swift_bridgeObjectRetain_n(v62, 2LL);
      uint64_t v310 = swift_bridgeObjectRetain_n(v130, 2LL);
      uint64_t v251 = (os_log_s *)Logger.logObject.getter(v310);
      os_log_type_t v311 = static os_log_type_t.default.getter();
      unint64_t v253 = v130;
      int v312 = v311;
      if (os_log_type_enabled(v251, v311))
      {
        uint64_t v313 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v472) = v312;
        unint64_t v314 = v253;
        uint64_t v315 = v313;
        uint64_t v473 = swift_slowAlloc(96LL, -1LL);
        v477[0] = v473;
        *(_DWORD *)uint64_t v315 = 136315650;
        uint64_t v474 = v142;
        uint64_t v316 = _typeName(_:qualified:)(v465, 0LL);
        uint64_t v475 = sub_10015ADC4(v316, v317, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v315 + 4, v315 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v315 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v260 = v426;
        uint64_t v475 = sub_10015ADC4(v426, v314, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v315 + 14, v315 + 22);
        swift_bridgeObjectRelease_n(v314, 2LL);
        swift_bridgeObjectRelease();
        *(_WORD *)(v315 + 22) = 2080;
        uint64_t v74 = v467;
        swift_bridgeObjectRetain();
        uint64_t v261 = v478;
        uint64_t v475 = sub_10015ADC4(v478, (unint64_t)v62, v477);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v475, &v476, v315 + 24, v315 + 32);
        swift_bridgeObjectRelease_n(v62, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v251,  (os_log_type_t)v472,  "[%s] Item: %s, is not picked in session: %s, not RC context, not multi select -> .set",  (uint8_t *)v315,  0x20u);
        uint64_t v318 = v473;
        swift_arrayDestroy(v473, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v318, -1LL, -1LL);
        swift_slowDealloc(v315, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v469 + 8))(v442, v468);
        goto LABEL_77;
      }
    }

    swift_bridgeObjectRelease_n(v62, 2LL);
    swift_bridgeObjectRelease_n(v253, 2LL);
    (*(void (**)(char *, uint64_t))(v247 + 8))(v249, v197);
    uint64_t v193 = v459;
    uint64_t v319 = v454;
    uint64_t v320 = v453;
    uint64_t v321 = v452;
    uint64_t v260 = v426;
    uint64_t v261 = v478;
LABEL_79:
    uint64_t v340 = v458;
    *uint64_t v319 = v260;
    v319[1] = v340;
    v319[2] = v261;
    v319[3] = (uint64_t)v62;
    uint64_t v341 = (unsigned int *)&enum case for RoutingInteraction.Action.set(_:);
LABEL_80:
    (*(void (**)(uint64_t *, void, uint64_t))(v321 + 104))(v319, *v341, v320);
    RoutingInteraction.init(action:)(v319);
    goto LABEL_114;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001AC480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1001AC4D8(a1, a2, a3, a4);
}

uint64_t sub_1001AC4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100156B68(&qword_1003F94C0);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1001A8360(a3, (uint64_t)v12, &qword_1003F94C0);
  uint64_t v13 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_1001603DC((uint64_t)v12, &qword_1003F94C0);
    goto LABEL_8;
  }

  uint64_t v33 = a4;
  uint64_t v15 = *v12;
  uint64_t v16 = v12[1];
  swift_bridgeObjectRetain();
  sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingSession);
  if (v15 == a1 && v16 == a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v15, v16, 0LL);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_18:
    uint64_t v27 = (unsigned int *)&enum case for InternalRoutingError.NOP(_:);
    goto LABEL_19;
  }

uint64_t sub_1001AC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v309 = a2;
  uint64_t v3 = sub_100156B68(&qword_1003F9450);
  __chkstk_darwin(v3);
  uint64_t v302 = (uint64_t)v288 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v301 = type metadata accessor for HostedRoutingSession.NowPlayingInfo(0LL);
  uint64_t v300 = *(void *)(v301 - 8);
  __chkstk_darwin(v301);
  uint64_t v303 = (uint64_t)v288 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v331 = (int *)type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v327 = *((void *)v331 - 1);
  uint64_t v6 = __chkstk_darwin(v331);
  char v324 = (void *)((char *)v288 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v323 = (uint64_t)v288 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v318 = (char *)v288 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (void *)((char *)v288 - v13);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v288 - v15;
  uint64_t v316 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v317 = *(void *)(v316 - 8);
  uint64_t v17 = __chkstk_darwin(v316);
  int v312 = (char *)v288 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v293 = (void *)((char *)v288 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v292 = (uint64_t)v288 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v295 = (void *)((char *)v288 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v315 = (uint64_t)v288 - v26;
  __chkstk_darwin(v25);
  uint64_t v311 = (uint64_t)v288 - v27;
  uint64_t v28 = sub_100156B68(&qword_1003F94C0);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v310 = (uint64_t)v288 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v304 = (uint64_t)v288 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)v288 - v33;
  uint64_t v35 = type metadata accessor for RoutingInteraction(0LL);
  uint64_t v319 = *(void *)(v35 - 8);
  uint64_t v320 = v35;
  uint64_t v36 = __chkstk_darwin(v35);
  uint64_t v38 = (char *)v288 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v306 = (char *)v288 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v299 = (char *)v288 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  unint64_t v314 = (char *)v288 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v296 = (char *)v288 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  unint64_t v294 = (char *)v288 - v48;
  __chkstk_darwin(v47);
  uint64_t v321 = (char *)v288 - v49;
  uint64_t v50 = type metadata accessor for Logger(0LL);
  uint64_t v328 = *(void *)(v50 - 8);
  uint64_t v329 = v50;
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v53 = (char *)v288 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __chkstk_darwin(v51);
  uint64_t v307 = (char *)v288 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  os_log_type_t v325 = (char *)v288 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  unint64_t v297 = (char *)v288 - v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v326 = (char *)v288 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v298 = (char *)v288 - v63;
  __chkstk_darwin(v62);
  uint64_t v65 = (os_log_s *)((char *)v288 - v64);
  uint64_t v66 = type metadata accessor for RoutingInteraction.Action(0LL);
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v68 = __chkstk_darwin(v66);
  uint64_t v308 = (char *)v288 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = __chkstk_darwin(v68);
  uint64_t v72 = (void *)((char *)v288 - v71);
  uint64_t v322 = a1;
  RoutingInteraction.action.getter(v70);
  uint64_t v73 = v66;
  uint64_t v74 = *(unsigned int (**)(char *, uint64_t))(v67 + 88);
  unsigned int v75 = v74((char *)v72, v73);
  unint64_t v305 = v74;
  if (v75 == enum case for RoutingInteraction.Action.add(_:))
  {
    unint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 96);
    v76((char *)v72, v73);
    uint64_t v77 = *v72;
    uint64_t v78 = v72[1];
    swift_bridgeObjectRelease();
  }

  else if (v75 == enum case for RoutingInteraction.Action.set(_:))
  {
    unint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 96);
    v76((char *)v72, v73);
    uint64_t v77 = v72[2];
    uint64_t v78 = v72[3];
    swift_bridgeObjectRelease();
  }

  else if (v75 == enum case for RoutingInteraction.Action.setActiveItem(_:))
  {
    unint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 96);
    v76((char *)v72, v73);
    uint64_t v77 = *v72;
    uint64_t v78 = v72[1];
  }

  else
  {
    if (v75 != enum case for RoutingInteraction.Action.handoff(_:))
    {
      uint64_t v290 = v73;
      uint64_t v164 = sub_1001741A8();
      uint64_t v166 = v328;
      uint64_t v165 = v329;
      (*(void (**)(char *, uint64_t, uint64_t))(v328 + 16))(v53, v164, v329);
      uint64_t v167 = v319;
      uint64_t v168 = v320;
      uint64_t v169 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v319 + 16))(v38, v322, v320);
      uint64_t v170 = (os_log_s *)Logger.logObject.getter(v169);
      os_log_type_t v171 = static os_log_type_t.default.getter();
      int v172 = v171;
      if (os_log_type_enabled(v170, v171))
      {
        uint64_t v173 = swift_slowAlloc(22LL, -1LL);
        uint64_t v291 = v67;
        uint64_t v174 = v173;
        uint64_t v175 = (int *)swift_slowAlloc(64LL, -1LL);
        uint64_t v334 = v175;
        *(_DWORD *)uint64_t v174 = 136315394;
        uint64_t v331 = (int *)v170;
        uint64_t v176 = _typeName(_:qualified:)(v313, 0LL);
        uint64_t v333 = sub_10015ADC4(v176, v177, (uint64_t *)&v334);
        LODWORD(v330) = v172;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v174 + 4, v174 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v174 + 12) = 2080;
        uint64_t v178 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        uint64_t v179 = dispatch thunk of CustomStringConvertible.description.getter(v168, v178);
        uint64_t v333 = sub_10015ADC4(v179, v180, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v174 + 14, v174 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v167 + 8))(v38, v168);
        os_log_t v181 = (os_log_t)v331;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v331,  (os_log_type_t)v330,  "[%s] Interaction: %s has no applicable dialogs",  (uint8_t *)v174,  0x16u);
        swift_arrayDestroy(v175, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v175, -1LL, -1LL);
        uint64_t v182 = v174;
        uint64_t v67 = v291;
        swift_slowDealloc(v182, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v328 + 8))(v53, v329);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v167 + 8))(v38, v168);

        (*(void (**)(char *, uint64_t))(v166 + 8))(v53, v165);
      }

      (*(void (**)(char *, uint64_t))(v67 + 8))((char *)v72, v290);
      return 0LL;
    }

    unint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 96);
    v76((char *)v72, v73);
    uint64_t v291 = v67;
    uint64_t v79 = v73;
    uint64_t v80 = *v72;
    uint64_t v77 = *(void *)(*v72 + 32LL);
    uint64_t v78 = *(void *)(*v72 + 40LL);
    swift_bridgeObjectRetain();
    uint64_t v81 = v80;
    uint64_t v73 = v79;
    uint64_t v67 = v291;
    swift_release(v81);
  }

  unint64_t v82 = (uint64_t *)sub_100249E64();
  uint64_t v83 = *v82;
  uint64_t v84 = v82[1];
  if (v77 == *v82 && v78 == v84
    || (uint64_t v330 = v77, (_stringCompareWithSmolCheck(_:_:expecting:)(v77, v78, v83, v84, 0LL) & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v85 = sub_1001741A8();
    uint64_t v86 = v328;
    uint64_t v87 = v329;
    (*(void (**)(os_log_s *, uint64_t, uint64_t))(v328 + 16))(v65, v85, v329);
    uint64_t v88 = v319;
    uint64_t v89 = v320;
    uint64_t v90 = v321;
    uint64_t v91 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v319 + 16))(v321, v322, v320);
    unint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
    os_log_type_t v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = swift_slowAlloc(22LL, -1LL);
      unint64_t v95 = (int *)swift_slowAlloc(64LL, -1LL);
      uint64_t v334 = v95;
      *(_DWORD *)uint64_t v94 = 136315394;
      uint64_t v96 = _typeName(_:qualified:)(v313, 0LL);
      uint64_t v333 = sub_10015ADC4(v96, v97, (uint64_t *)&v334);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v94 + 4, v94 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v94 + 12) = 2080;
      uint64_t v98 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      uint64_t v331 = (int *)v65;
      uint64_t v99 = v321;
      uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter(v89, v98);
      uint64_t v333 = sub_10015ADC4(v100, v101, (uint64_t *)&v334);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v94 + 14, v94 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v99, v89);
      _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "[%s] Interaction: %s is handoff to local -> no dialog",  (uint8_t *)v94,  0x16u);
      swift_arrayDestroy(v95, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);

      (*(void (**)(int *, uint64_t))(v328 + 8))(v331, v329);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v89);

      (*(void (**)(os_log_s *, uint64_t))(v86 + 8))(v65, v87);
    }

    return 0LL;
  }

  uint64_t v291 = v67;
  uint64_t v290 = v73;
  uint64_t v103 = v309;
  uint64_t v104 = (int *)sub_100254850();
  sub_1001A8360(v103, (uint64_t)v34, &qword_1003F94C0);
  uint64_t v321 = *(char **)(v317 + 48);
  int v105 = ((uint64_t (*)(char *, uint64_t, uint64_t))v321)(v34, 1LL, v316);
  sub_1001603DC((uint64_t)v34, &qword_1003F94C0);
  uint64_t v106 = _swiftEmptyArrayStorage;
  BOOL v127 = v105 == 1;
  uint64_t v107 = v325;
  uint64_t v108 = (uint64_t)v318;
  if (!v127)
  {
    uint64_t v109 = sub_100156B68(&qword_1003F94E8);
    uint64_t v110 = *(unsigned __int8 *)(v317 + 80);
    uint64_t v111 = (v110 + 32) & ~v110;
    uint64_t v106 = (void *)swift_allocObject(v109, v111 + *(void *)(v317 + 72), v110 | 7);
    *((_OWORD *)v106 + 1) = xmmword_10034BE40;
    uint64_t v112 = v103;
    uint64_t v113 = v304;
    sub_1001A8360(v112, v304, &qword_1003F94C0);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v321)(v113, 1LL, v316);
    if ((_DWORD)result == 1) {
      goto LABEL_92;
    }
    sub_1001A81D4(v113, (uint64_t)v106 + v111, type metadata accessor for HostedRoutingSession);
  }

  uint64_t v334 = v104;
  sub_1001AEB54((uint64_t)v106);
  uint64_t v114 = *((void *)v334 + 2);
  uint64_t v289 = v76;
  uint64_t v304 = v114;
  if (!v114)
  {
    uint64_t v129 = 1LL;
    uint64_t v117 = v314;
    goto LABEL_37;
  }

  uint64_t v115 = (char *)v334 + ((*(unsigned __int8 *)(v317 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v317 + 80));
  uint64_t v309 = *(void *)(v317 + 72);
  v288[1] = v334;
  swift_bridgeObjectRetain();
  uint64_t v116 = 0LL;
  uint64_t v117 = v314;
  uint64_t v118 = v315;
  v288[0] = v115;
  while (1)
  {
    sub_1001A80F8((uint64_t)&v115[v309 * v116], v118, type metadata accessor for HostedRoutingSession);
    uint64_t v119 = sub_10025026C();
    uint64_t v120 = v119;
    uint64_t v121 = *(void *)(v119 + 16);
    if (v121) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_34:
    ++v116;
    uint64_t v118 = v315;
    sub_1001A813C(v315, type metadata accessor for HostedRoutingSession);
    if (v116 == v304)
    {
      swift_bridgeObjectRelease();
      uint64_t v129 = 1LL;
      uint64_t v108 = (uint64_t)v318;
LABEL_37:
      uint64_t v130 = v310;
      goto LABEL_40;
    }
  }

  uint64_t v122 = v327;
  uint64_t v123 = v119 + ((*(unsigned __int8 *)(v327 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v327 + 80));
  swift_bridgeObjectRetain();
  uint64_t v124 = *(void *)(v122 + 72);
  while (1)
  {
    sub_1001A80F8(v123, (uint64_t)v16, type metadata accessor for HostedRoutingItem);
    int v125 = v16[v331[9]];
    sub_1001A80F8((uint64_t)v16, (uint64_t)v14, type metadata accessor for HostedRoutingItem);
    if (v125 != 1)
    {
      sub_1001A813C((uint64_t)v14, type metadata accessor for HostedRoutingItem);
      sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
      goto LABEL_24;
    }

    uint64_t v126 = v14[1];
    BOOL v127 = *v14 == v330 && v126 == v78;
    if (v127) {
      break;
    }
    char v128 = _stringCompareWithSmolCheck(_:_:expecting:)(*v14, v126, v330, v78, 0LL);
    sub_1001A813C((uint64_t)v14, type metadata accessor for HostedRoutingItem);
    sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
    if ((v128 & 1) != 0) {
      goto LABEL_39;
    }
LABEL_24:
    v123 += v124;
    if (!--v121)
    {
      swift_bridgeObjectRelease_n(v120, 2LL);
      uint64_t v107 = v325;
      uint64_t v117 = v314;
      uint64_t v115 = (char *)v288[0];
      goto LABEL_34;
    }
  }

  sub_1001A813C((uint64_t)v14, type metadata accessor for HostedRoutingItem);
  sub_1001A813C((uint64_t)v16, type metadata accessor for HostedRoutingItem);
LABEL_39:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v120, 2LL);
  uint64_t v130 = v310;
  sub_1001A81D4(v315, v310, type metadata accessor for HostedRoutingSession);
  uint64_t v129 = 0LL;
  uint64_t v107 = v325;
  uint64_t v117 = v314;
  uint64_t v108 = (uint64_t)v318;
LABEL_40:
  uint64_t v131 = v316;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v317 + 56))(v130, v129, 1LL, v316);
  swift_bridgeObjectRelease();
  int v132 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v321)(v130, 1LL, v131);
  uint64_t v133 = v329;
  uint64_t v134 = (uint64_t)v312;
  uint64_t v135 = v326;
  uint64_t v136 = v308;
  if (v132 == 1)
  {
    swift_bridgeObjectRelease();
    sub_1001603DC(v130, &qword_1003F94C0);
    uint64_t v137 = sub_1001741A8();
    uint64_t v138 = v328;
    uint64_t v139 = v307;
    (*(void (**)(char *, uint64_t, uint64_t))(v328 + 16))(v307, v137, v133);
    uint64_t v140 = v319;
    uint64_t v141 = v320;
    uint64_t v142 = v306;
    uint64_t v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v319 + 16))(v306, v322, v320);
    uint64_t v144 = (os_log_s *)Logger.logObject.getter(v143);
    uint64_t v145 = v133;
    os_log_type_t v146 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v144, v146))
    {
      uint64_t v147 = swift_slowAlloc(22LL, -1LL);
      uint64_t v148 = (int *)swift_slowAlloc(64LL, -1LL);
      uint64_t v334 = v148;
      *(_DWORD *)uint64_t v147 = 136315394;
      uint64_t v149 = _typeName(_:qualified:)(v313, 0LL);
      uint64_t v333 = sub_10015ADC4(v149, v150, (uint64_t *)&v334);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v147 + 4, v147 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v147 + 12) = 2080;
      uint64_t v151 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
      uint64_t v152 = dispatch thunk of CustomStringConvertible.description.getter(v141, v151);
      uint64_t v333 = sub_10015ADC4(v152, v153, (uint64_t *)&v334);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v147 + 14, v147 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v141);
      _os_log_impl( (void *)&_mh_execute_header,  v144,  v146,  "[%s] Interaction: %s references item not picked in any session -> no dialog",  (uint8_t *)v147,  0x16u);
      swift_arrayDestroy(v148, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v148, -1LL, -1LL);
      swift_slowDealloc(v147, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v328 + 8))(v307, v329);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v141);

      (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v145);
    }

    return 0LL;
  }

  uint64_t v154 = sub_1001A81D4(v130, v311, type metadata accessor for HostedRoutingSession);
  RoutingInteraction.action.getter(v154);
  uint64_t v155 = v290;
  if (v305(v136, v290) != enum case for RoutingInteraction.Action.setActiveItem(_:))
  {
    unsigned __int8 v183 = v136;
    uint64_t v184 = v133;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v291 + 8))(v183, v155);
    goto LABEL_75;
  }

  v289(v136, v155);
  swift_bridgeObjectRelease();
  uint64_t result = sub_10025026C();
  uint64_t v156 = result;
  uint64_t v157 = (int *)_swiftEmptyArrayStorage;
  uint64_t v334 = (int *)_swiftEmptyArrayStorage;
  uint64_t v158 = *(void *)(result + 16);
  if (!v158)
  {
    unsigned __int8 v185 = (int *)_swiftEmptyArrayStorage;
LABEL_63:
    swift_bridgeObjectRelease();
    int64_t v186 = *((void *)v185 + 2);
    if (v186)
    {
      uint64_t v334 = (int *)_swiftEmptyArrayStorage;
      sub_10015DCE8(0, v186, 0);
      uint64_t v187 = *(unsigned __int8 *)(v327 + 80);
      uint64_t v331 = v185;
      uint64_t v188 = (uint64_t)v185 + ((v187 + 32) & ~v187);
      uint64_t v189 = *(void *)(v327 + 72);
      do
      {
        uint64_t v190 = v324;
        sub_1001A80F8(v188, (uint64_t)v324, type metadata accessor for HostedRoutingItem);
        uint64_t v191 = *v190;
        uint64_t v192 = v190[1];
        swift_bridgeObjectRetain();
        sub_1001A813C((uint64_t)v190, type metadata accessor for HostedRoutingItem);
        uint64_t v157 = v334;
        if ((swift_isUniquelyReferenced_nonNull_native(v334) & 1) == 0)
        {
          sub_10015DCE8(0, *((void *)v157 + 2) + 1LL, 1);
          uint64_t v157 = v334;
        }

        unint64_t v194 = *((void *)v157 + 2);
        unint64_t v193 = *((void *)v157 + 3);
        if (v194 >= v193 >> 1)
        {
          sub_10015DCE8(v193 > 1, v194 + 1, 1);
          uint64_t v157 = v334;
        }

        *((void *)v157 + 2) = v194 + 1;
        uint64_t v195 = &v157[4 * v194];
        *((void *)v195 + 4) = v191;
        *((void *)v195 + 5) = v192;
        v188 += v189;
        --v186;
        uint64_t v135 = v326;
      }

      while (v186);
      swift_release(v331);
      uint64_t v107 = v325;
    }

    else
    {
      swift_release(v185);
    }

    uint64_t v196 = sub_100156B68(&qword_1003F8620);
    uint64_t inited = swift_initStackObject(v196, v332);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    *(void *)(inited + 32) = v330;
    *(void *)(inited + 40) = v78;
    char v198 = sub_1001AE868(v157, (void *)inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1LL, &type metadata for String);
    swift_bridgeObjectRelease();
    uint64_t v184 = v329;
    uint64_t v134 = (uint64_t)v312;
    uint64_t v117 = v314;
    if ((v198 & 1) != 0)
    {
      uint64_t v199 = sub_1001741A8();
      uint64_t v200 = v328;
      uint64_t v201 = v298;
      uint64_t v202 = v184;
      (*(void (**)(char *, uint64_t, uint64_t))(v328 + 16))(v298, v199, v184);
      uint64_t v203 = v319;
      uint64_t v204 = v320;
      char v205 = v294;
      (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v294, v322, v320);
      uint64_t v206 = v311;
      id v207 = v295;
      uint64_t v208 = sub_1001A80F8(v311, (uint64_t)v295, type metadata accessor for HostedRoutingSession);
      unint64_t v209 = (os_log_s *)Logger.logObject.getter(v208);
      os_log_type_t v210 = static os_log_type_t.default.getter();
      int v211 = v210;
      if (os_log_type_enabled(v209, v210))
      {
        uint64_t v212 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v330) = v211;
        uint64_t v213 = v212;
        uint64_t v331 = (int *)swift_slowAlloc(96LL, -1LL);
        uint64_t v334 = v331;
        *(_DWORD *)uint64_t v213 = 136315650;
        uint64_t v214 = _typeName(_:qualified:)(v313, 0LL);
        uint64_t v333 = sub_10015ADC4(v214, v215, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v213 + 4, v213 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v213 + 12) = 2080;
        uint64_t v216 = sub_100156FEC( &qword_1003F88F8,  (uint64_t (*)(uint64_t))&type metadata accessor for RoutingInteraction,  (uint64_t)&protocol conformance descriptor for RoutingInteraction);
        uint64_t v217 = dispatch thunk of CustomStringConvertible.description.getter(v204, v216);
        uint64_t v333 = sub_10015ADC4(v217, v218, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v213 + 14, v213 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v203 + 8))(v205, v204);
        *(_WORD *)(v213 + 22) = 2080;
        uint64_t v219 = *v207;
        unint64_t v220 = v207[1];
        swift_bridgeObjectRetain();
        uint64_t v333 = sub_10015ADC4(v219, v220, (uint64_t *)&v334);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v333, &v334, v213 + 24, v213 + 32);
        swift_bridgeObjectRelease();
        sub_1001A813C((uint64_t)v207, type metadata accessor for HostedRoutingSession);
        _os_log_impl( (void *)&_mh_execute_header,  v209,  (os_log_type_t)v330,  "[%s] Interaction: %s references item picked in session: %s, sole picked item -> no dialog",  (uint8_t *)v213,  0x20u);
        uint64_t v221 = v331;
        swift_arrayDestroy(v331, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v221, -1LL, -1LL);
        swift_slowDealloc(v213, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v328 + 8))(v298, v329);
LABEL_84:
        sub_1001A813C(v311, type metadata accessor for HostedRoutingSession);
        return 0LL;
      }

      sub_1001A813C((uint64_t)v207, type metadata accessor for HostedRoutingSession);
      (*(void (**)(char *, uint64_t))(v203 + 8))(v205, v204);
      (*(void (**)(char *, uint64_t))(v200 + 8))(v201, v202);
      uint64_t v287 = v206;
      goto LABEL_90;
    }

uint64_t sub_1001AE6C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for HostedRoutingItem(0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v24 = v10;
    uint64_t v25 = a4;
    uint64_t v26 = v4;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v22 = a1;
    uint64_t v23 = v11;
    uint64_t v16 = *(void *)(v11 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1001A80F8(v15, (uint64_t)v13, type metadata accessor for HostedRoutingItem);
      uint64_t v17 = sub_10024A474();
      if (v17 == a2 && v18 == a3) {
        break;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a2, a3, 0LL);
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0) {
        goto LABEL_10;
      }
      sub_1001A813C((uint64_t)v13, type metadata accessor for HostedRoutingItem);
      v15 += v16;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1LL;
        a4 = v25;
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    a4 = v25;
    sub_1001A81D4((uint64_t)v13, v25, type metadata accessor for HostedRoutingItem);
    uint64_t v20 = 0LL;
LABEL_11:
    uint64_t v11 = v23;
    uint64_t v10 = v24;
  }

  else
  {
    uint64_t v20 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a4, v20, 1LL, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001AE868(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    uint64_t v13 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      uint64_t v15 = *(v13 - 1);
      uint64_t v16 = *v13;
      uint64_t v17 = *(i - 1);
      uint64_t v18 = *i;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1001AE92C()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_1001AE93C()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

uint64_t sub_1001AE94C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100156B68(&qword_1003F94E8);
  uint64_t v11 = *(void *)(type metadata accessor for HostedRoutingSession(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for HostedRoutingSession(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1001AECC8(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease();
  return (uint64_t)v15;
}

uint64_t sub_1001AEB54(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  if (v4 <= v5) {
    int64_t v24 = v4 + v2;
  }
  else {
    int64_t v24 = v4;
  }
  unint64_t v3 = sub_1001AE94C(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = type metadata accessor for HostedRoutingSession(0LL);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 72);
  unint64_t v15 = v3 + v13 + v14 * v9;
  unint64_t v16 = a1 + v13;
  uint64_t v17 = v14 * v8;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFADD__(v21, v8);
  uint64_t v23 = v21 + v8;
  if (!v22)
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v23;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }

uint64_t sub_1001AECC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for HostedRoutingSession(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001AEDE0()
{
  unint64_t result = qword_1003F9640;
  if (!qword_1003F9640)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1003F9640);
  }

  return result;
}

unint64_t sub_1001AEE24()
{
  unint64_t result = qword_1003F9648;
  if (!qword_1003F9648)
  {
    unint64_t result = swift_getWitnessTable(&unk_10034FD18, &type metadata for RoutingCapabilities);
    atomic_store(result, (unint64_t *)&qword_1003F9648);
  }

  return result;
}

void *sub_1001AEE68(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v24 - v8;
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v24 - v11;
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v28 = *(void *)(v10 + 72);
    uint64_t v24 = v1;
    unint64_t v25 = v15;
    uint64_t v16 = a1 + v15;
    uint64_t v17 = _swiftEmptyArrayStorage;
    char v26 = v6;
    uint64_t v27 = v3;
    while (1)
    {
      sub_1001A80F8(v16, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
      int v18 = v12[*(int *)(v3 + 36)];
      sub_1001A80F8((uint64_t)v12, (uint64_t)v9, type metadata accessor for HostedRoutingItem);
      if (v18 == 1)
      {
        char v19 = v9[*(int *)(v3 + 44)];
        char v30 = *(_BYTE *)sub_1002493BC();
        char v29 = v19;
        unint64_t v20 = sub_1001AEE24();
        char v21 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v30, &type metadata for RoutingCapabilities, v20);
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
        if ((v21 & 1) != 0)
        {
          sub_1001A81D4((uint64_t)v12, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
            sub_1001A3FBC(0, v17[2] + 1LL, 1);
          }
          uint64_t v17 = v31;
          unint64_t v23 = v31[2];
          unint64_t v22 = v31[3];
          if (v23 >= v22 >> 1)
          {
            sub_1001A3FBC(v22 > 1, v23 + 1, 1);
            uint64_t v17 = v31;
          }

          uint64_t v17[2] = v23 + 1;
          unint64_t v6 = v26;
          sub_1001A81D4((uint64_t)v26, (uint64_t)v17 + v25 + v23 * v28, type metadata accessor for HostedRoutingItem);
          uint64_t v3 = v27;
          goto LABEL_5;
        }
      }

      else
      {
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
      }

      sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingItem);
LABEL_5:
      v16 += v28;
      if (!--v14) {
        return v31;
      }
    }
  }

  return result;
}

void *sub_1001AF0A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v24 - v8;
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v24 - v11;
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v28 = *(void *)(v10 + 72);
    uint64_t v24 = v1;
    unint64_t v25 = v15;
    uint64_t v16 = a1 + v15;
    uint64_t v17 = _swiftEmptyArrayStorage;
    char v26 = v6;
    uint64_t v27 = v3;
    while (1)
    {
      sub_1001A80F8(v16, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
      BOOL v18 = sub_10024A5A8();
      sub_1001A80F8((uint64_t)v12, (uint64_t)v9, type metadata accessor for HostedRoutingItem);
      if (v18)
      {
        char v19 = v9[*(int *)(v3 + 44)];
        char v30 = *(_BYTE *)sub_1002493BC();
        char v29 = v19;
        unint64_t v20 = sub_1001AEE24();
        char v21 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v30, &type metadata for RoutingCapabilities, v20);
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
        if ((v21 & 1) != 0)
        {
          sub_1001A81D4((uint64_t)v12, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
            sub_1001A3FBC(0, v17[2] + 1LL, 1);
          }
          uint64_t v17 = v31;
          unint64_t v23 = v31[2];
          unint64_t v22 = v31[3];
          if (v23 >= v22 >> 1)
          {
            sub_1001A3FBC(v22 > 1, v23 + 1, 1);
            uint64_t v17 = v31;
          }

          uint64_t v17[2] = v23 + 1;
          unint64_t v6 = v26;
          sub_1001A81D4((uint64_t)v26, (uint64_t)v17 + v25 + v23 * v28, type metadata accessor for HostedRoutingItem);
          uint64_t v3 = v27;
          goto LABEL_5;
        }
      }

      else
      {
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
      }

      sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingItem);
LABEL_5:
      v16 += v28;
      if (!--v14) {
        return v31;
      }
    }
  }

  return result;
}

void *sub_1001AF2E0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v9 = (char *)v17 - v8;
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v17[1] = v1;
    uint64_t v12 = *(void *)(v7 + 72);
    unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v13 = a1 + v19;
    uint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v18 = v3;
    do
    {
      sub_1001A80F8(v13, (uint64_t)v9, type metadata accessor for HostedRoutingItem);
      if (v9[*(int *)(v3 + 36)] == 1)
      {
        sub_1001A81D4((uint64_t)v9, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          sub_1001A3FBC(0, v14[2] + 1LL, 1);
        }
        uint64_t v14 = v20;
        unint64_t v16 = v20[2];
        unint64_t v15 = v20[3];
        if (v16 >= v15 >> 1)
        {
          sub_1001A3FBC(v15 > 1, v16 + 1, 1);
          uint64_t v14 = v20;
        }

        v14[2] = v16 + 1;
        sub_1001A81D4((uint64_t)v6, (uint64_t)v14 + v19 + v16 * v12, type metadata accessor for HostedRoutingItem);
        uint64_t v3 = v18;
      }

      else
      {
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
      }

      v13 += v12;
      --v11;
    }

    while (v11);
    return v20;
  }

  return result;
}

void *sub_1001AF498(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HostedRoutingItem(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v24 - v8;
  __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v24 - v11;
  unint64_t result = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v28 = *(void *)(v10 + 72);
    uint64_t v24 = v1;
    unint64_t v25 = v15;
    uint64_t v16 = a1 + v15;
    uint64_t v17 = _swiftEmptyArrayStorage;
    char v26 = v6;
    uint64_t v27 = v3;
    while (1)
    {
      sub_1001A80F8(v16, (uint64_t)v12, type metadata accessor for HostedRoutingItem);
      int v18 = v12[*(int *)(v3 + 36)];
      sub_1001A80F8((uint64_t)v12, (uint64_t)v9, type metadata accessor for HostedRoutingItem);
      if (v18 == 1)
      {
        char v19 = v9[*(int *)(v3 + 44)];
        char v30 = *(_BYTE *)sub_1002493BC();
        char v29 = v19;
        unint64_t v20 = sub_1001AEE24();
        char v21 = dispatch thunk of SetAlgebra.isSuperset(of:)(&v30, &type metadata for RoutingCapabilities, v20);
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
        if ((v21 & 1) == 0)
        {
          sub_1001A81D4((uint64_t)v12, (uint64_t)v6, type metadata accessor for HostedRoutingItem);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
            sub_1001A3FBC(0, v17[2] + 1LL, 1);
          }
          uint64_t v17 = v31;
          unint64_t v23 = v31[2];
          unint64_t v22 = v31[3];
          if (v23 >= v22 >> 1)
          {
            sub_1001A3FBC(v22 > 1, v23 + 1, 1);
            uint64_t v17 = v31;
          }

          void v17[2] = v23 + 1;
          unint64_t v6 = v26;
          sub_1001A81D4((uint64_t)v26, (uint64_t)v17 + v25 + v23 * v28, type metadata accessor for HostedRoutingItem);
          uint64_t v3 = v27;
          goto LABEL_5;
        }
      }

      else
      {
        sub_1001A813C((uint64_t)v9, type metadata accessor for HostedRoutingItem);
      }

      sub_1001A813C((uint64_t)v12, type metadata accessor for HostedRoutingItem);
LABEL_5:
      v16 += v28;
      if (!--v14) {
        return v31;
      }
    }
  }

  return result;
}

uint64_t sub_1001AF6D4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1001AF708()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v0, qword_1003FEFC8);
  sub_10015ADAC(v0, (uint64_t)qword_1003FEFC8);
  id v1 = (id)*sub_100173F8C();
  return Logger.init(_:)(v1);
}

uint64_t sub_1001AF760()
{
  uint64_t KeyPath = swift_getKeyPath("p'\v");
  uint64_t v2 = swift_getKeyPath(&unk_10034C898);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_1001AF7D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 160LL))();
  *a2 = result;
  return result;
}

uint64_t sub_1001AF800(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 168LL);
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  return v2(v3);
}

uint64_t sub_1001AF830(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath("p'\v");
  uint64_t v4 = swift_getKeyPath(&unk_10034C898);
  uint64_t v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*sub_1001AF89C(void *a1))(void *a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath("p'\v");
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_10034C898);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001AF914;
}

void sub_1001AF914(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_1001AF960()
{
  uint64_t v1 = sub_100156B68(&qword_1003F9658);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_1001AF9C0(uint64_t a1)
{
  uint64_t v3 = sub_100156B68(&qword_1003F8218);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_beginAccess( v1 + OBJC_IVAR____TtC12mediaremoted32GroupSessionRapportUserDiscovery__availableDevices,  v10,  33LL,  0LL);
  uint64_t v7 = sub_100156B68(&qword_1003F9658);
  Published.projectedValue.setter(v6, v7);
  swift_endAccess(v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_1001AFA94(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  void v3[9] = v1;
  uint64_t v4 = sub_100156B68(&qword_1003F8218);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC12mediaremoted32GroupSessionRapportUserDiscovery__availableDevices;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33LL, 0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F9658);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_1001AFB5C;
}

void sub_1001AFB5C(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88LL) + 16LL);
  v4(*(void *)(*(void *)a1 + 104LL), v3[14], v3[10]);
  uint64_t v5 = v3[15];
  uint64_t v6 = v3[16];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = (void *)v3[14];
  uint64_t v10 = v3[11];
  uint64_t v9 = (void *)v3[12];
  uint64_t v11 = v3[9];
  uint64_t v12 = v3[10];
  uint64_t v13 = v11 + v5;
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess(v13, v3 + 3, 33LL, 0LL);
    Published.projectedValue.setter(v9, v6);
    swift_endAccess(v3 + 3);
    uint64_t v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v7, v12);
  }

  else
  {
    swift_beginAccess(v11 + v5, v3 + 6, 33LL, 0LL);
    Published.projectedValue.setter(v7, v6);
    swift_endAccess(v3 + 6);
    uint64_t v14 = *(void (**)(void *, uint64_t))(v10 + 8);
  }

  v14(v8, v12);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

void sub_1001AFC74()
{
  uint64_t v0 = 0LL;
  sub_100236804(sub_1001AFD50);
}

void sub_1001AFD50()
{
  uint64_t v1 = *(void ***)(v0 + 16);
  if (*v1)
  {
    if (qword_1003FEFC0 != -1) {
      swift_once(&qword_1003FEFC0, sub_1001AF708);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10015ADAC(v2, (uint64_t)qword_1003FEFC8);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v7 = (void **)swift_slowAlloc(32LL, -1LL);
      int v18 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v24 = sub_10015ADC4(0xD000000000000020LL, 0x800000010034C8B0LL, (uint64_t *)&v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%s] Attempted to start while already started", v6, 0xCu);
      swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v6, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 24);
    id v9 = [objc_allocWithZone(RPCompanionLinkClient) init];
    [v9 setControlFlags:2052];
    uint64_t v10 = swift_allocObject(&unk_1003A4C60, 24LL, 7LL);
    swift_weakInit(v10 + 16, v8);
    unint64_t v22 = sub_1001B0A7C;
    uint64_t v23 = v10;
    int v18 = _NSConcreteStackBlock;
    uint64_t v19 = 1107296256LL;
    unint64_t v20 = sub_1001B06D8;
    char v21 = &unk_1003A4C78;
    uint64_t v11 = _Block_copy(&v18);
    swift_release(v23);
    [v9 setDeviceFoundHandler:v11];
    _Block_release(v11);
    uint64_t v12 = swift_allocObject(&unk_1003A4C60, 24LL, 7LL);
    swift_weakInit(v12 + 16, v8);
    unint64_t v22 = sub_1001B0A84;
    uint64_t v23 = v12;
    int v18 = _NSConcreteStackBlock;
    uint64_t v19 = 1107296256LL;
    unint64_t v20 = sub_1001B06D8;
    char v21 = &unk_1003A4CA0;
    uint64_t v13 = _Block_copy(&v18);
    swift_release(v23);
    [v9 setDeviceLostHandler:v13];
    _Block_release(v13);
    uint64_t v14 = *v1;
    *uint64_t v1 = v9;

    unint64_t v15 = *v1;
    uint64_t v16 = *(void **)(v8 + 16);
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = *v1;
    id v17 = v15;
  }

void sub_1001B0030(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1003FEFC0 != -1) {
      swift_once(&qword_1003FEFC0, sub_1001AF708);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v2, (uint64_t)qword_1003FEFC8);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = swift_slowAlloc(22LL, -1LL);
      uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v7 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = v7;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v16 = sub_10015ADC4(0xD000000000000020LL, 0x800000010034C8B0LL, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);
      *(_WORD *)(v5 + 12) = 2112;
      swift_errorRetain(a1);
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v16 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 14, v5 + 22);
      *uint64_t v6 = v8;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "[%s] Failed to activate client: %@", (uint8_t *)v5, 0x16u);
      uint64_t v9 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v6, 1LL, v9);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      swift_errorRelease(a1);
      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_1003FEFC0 != -1) {
      swift_once(&qword_1003FEFC0, sub_1001AF708);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10015ADAC(v10, (uint64_t)qword_1003FEFC8);
    oslog = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v16 = sub_10015ADC4(0xD000000000000020LL, 0x800000010034C8B0LL, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "[%s] Activated RP client", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      return;
    }
  }
}

uint64_t sub_1001B03C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001B03D4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1001B03DC()
{
}

void sub_1001B0428()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    [v1 invalidate];
    uint64_t v2 = *(void **)(v0 + 16);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    if (qword_1003FEFC0 != -1) {
      swift_once(&qword_1003FEFC0, sub_1001AF708);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10015ADAC(v3, (uint64_t)qword_1003FEFC8);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v11 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = sub_10015ADC4(0xD000000000000020LL, 0x800000010034C8B0LL, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%s] Attempted to stop with no active client", v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }
  }

uint64_t sub_1001B05C4(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [a1 idsDeviceIdentifier];
    if (v6)
    {
      uint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

      uint64_t v8 = *(void *)(v5 + 24);
      __chkstk_darwin(v9);
      swift_retain(v8);
      sub_100236804((void (*)(void))sub_1001B1CE8);
      swift_release(v8);
      swift_bridgeObjectRelease();
    }

    return swift_release(v5);
  }

  return result;
}

void sub_1001B06D8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

uint64_t sub_1001B0728(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    uint64_t v5 = result;
    id v6 = [a1 idsDeviceIdentifier];
    if (v6)
    {
      uint64_t v7 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

      uint64_t v8 = *(void *)(v5 + 24);
      __chkstk_darwin(v9);
      swift_retain(v8);
      sub_100236804(sub_1001B0A8C);
      swift_release(v8);
      swift_bridgeObjectRelease();
    }

    return swift_release(v5);
  }

  return result;
}

uint64_t sub_1001B0830()
{
  swift_release(*(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12mediaremoted32GroupSessionRapportUserDiscovery__availableDevices;
  uint64_t v2 = sub_100156B68(&qword_1003F9658);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

void *sub_1001B089C()
{
  uint64_t v1 = (void *)swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v1[2] = 0LL;
  type metadata accessor for Lock();
  v1[3] = sub_100236794();
  v1[4] = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = &_swiftEmptySetSingleton;
  uint64_t v2 = sub_100156B68(&qword_1003F9650);
  Published.init(initialValue:)(&v4, v2);
  return v1;
}

uint64_t sub_1001B0928()
{
  return type metadata accessor for GroupSessionRapportUserDiscovery(0LL);
}

uint64_t type metadata accessor for GroupSessionRapportUserDiscovery(uint64_t a1)
{
  uint64_t result = qword_1003FEFF8;
  if (!qword_1003FEFF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GroupSessionRapportUserDiscovery);
  }
  return result;
}

void sub_1001B096C(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1001B0A00(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

void sub_1001B0A00(uint64_t a1)
{
  if (!qword_1003F9688)
  {
    uint64_t v2 = sub_100160358(&qword_1003F9650);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1003F9688);
    }
  }

uint64_t sub_1001B0A58()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001B0A7C(void *a1)
{
  return sub_1001B05C4(a1, v1);
}

uint64_t sub_1001B0A84(void *a1)
{
  return sub_1001B0728(a1, v1);
}

void sub_1001B0A8C()
{
  uint64_t v1 = (uint64_t *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v1 + 4;
  swift_beginAccess(v1 + 4, v11, 33LL, 0LL);
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_10015CAD4(v2, v3);
  LOBYTE(v3) = v6;
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v8 = *v4;
    uint64_t v12 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10015D810();
      uint64_t v8 = v12;
    }

    swift_bridgeObjectRelease();
    uint64_t v9 = *(void **)(*(void *)(v8 + 56) + 8 * v5);
    sub_1001B1630(v5, v8);
    v1[4] = v8;
    swift_bridgeObjectRelease();
    swift_endAccess(v11);
    uint64_t v10 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*v1 + 176))(v11);

    v10(v11, 0LL);
  }

  else
  {
    swift_endAccess(v11);
  }

uint64_t sub_1001B0BBC(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v30 = v9;
      unint64_t v10 = sub_1001B1CAC();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_1001B0E38(v7, result + 1);
    Swift::Int v31 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v28 = v24 + 1;
      id v29 = v8;
      sub_10015B88C(v28);
      uint64_t v25 = v31;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_1001B101C((uint64_t)v8, v25);
    uint64_t *v3 = v25;
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      sub_1001B1CAC();
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)(v16);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        char v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        id v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19);

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v31 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_1001B109C((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v31;
  }

  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1LL;
}

Swift::Int sub_1001B0E38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100156B68(&qword_1003F8208);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      unint64_t v8 = sub_1001B1CAC();
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_10015B88C(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

unint64_t sub_1001B101C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1001B109C(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10015B88C(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1001B1210();
      goto LABEL_14;
    }

    sub_1001B13B8(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    unint64_t v13 = sub_1001B1CAC();
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

id sub_1001B1210()
{
  uint64_t v1 = v0;
  sub_100156B68(&qword_1003F8208);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1001B13B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100156B68(&qword_1003F8208);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

unint64_t sub_1001B1630(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          int64_t v18 = (void *)(v17 + 8 * v3);
          unint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *int64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_1001B1804(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10015CAD4(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10015D810();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

uint64_t sub_1001B1960(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1001B1B24(v5, (uint64_t)v6);
      swift_bridgeObjectRelease();
      return v8;
    }

uint64_t sub_1001B1B24(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1001B0E38(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain(v8);
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    sub_1001B1CAC();
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_100171014(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        Swift::Int *v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_1001B1CAC()
{
  unint64_t result = qword_1003F81E8;
  if (!qword_1003F81E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___RPCompanionLinkDevice);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1003F81E8);
  }

  return result;
}

id sub_1001B1CE8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  id result = [v2 model];
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v9 = v8;

    uint64_t v19 = v7;
    uint64_t v20 = v9;
    uint64_t v21 = 0x656E6F685069LL;
    unint64_t v22 = 0xE600000000000000LL;
    unint64_t v10 = sub_1001727A4();
    if ((StringProtocol.contains<A>(_:)(&v21, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v19 = v7;
      uint64_t v20 = v9;
      uint64_t v21 = 1684099177LL;
      unint64_t v22 = 0xE400000000000000LL;
      char v11 = StringProtocol.contains<A>(_:)(&v21, &type metadata for String, &type metadata for String, v10, v10);
      id result = (id)swift_bridgeObjectRelease();
      if ((v11 & 1) == 0) {
        return result;
      }
    }

    swift_beginAccess(v1 + 4, &v21, 0LL, 0LL);
    if (!*(void *)(v1[4] + 16LL)
      || (swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          sub_10015CAD4(v4, v3),
          char v13 = v12,
          swift_bridgeObjectRelease(),
          id result = (id)swift_bridgeObjectRelease(),
          (v13 & 1) == 0))
    {
      swift_beginAccess(v1 + 4, &v19, 33LL, 0LL);
      swift_bridgeObjectRetain();
      id v14 = v2;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1[4]);
      id v23 = (id)v1[4];
      v1[4] = 0x8000000000000000LL;
      sub_1001B1804((uint64_t)v14, v4, v3, isUniquelyReferenced_nonNull_native);
      v1[4] = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess(&v19);
      id v16 = *(uint64_t (**)(uint64_t *))(*v1 + 176LL);
      id v17 = v14;
      int64_t v18 = (uint64_t (*)(uint64_t *, void))v16(&v19);
      sub_1001B0BBC((Swift::Int *)&v23, v17);

      return (id)v18(&v19, 0LL);
    }
  }

  return result;
}

uint64_t sub_1001B1F1C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100160874(result, a2);
  }
  return result;
}

uint64_t sub_1001B1F30(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

uint64_t destroy for ContactResolver(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >> 60 != 15) {
    return sub_1001608B8(*(void *)(a1 + 16), v3);
  }
  return result;
}

uint64_t initializeWithCopy for ContactResolver(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = a2 + 2;
  unint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *v4;
  }

  else
  {
    uint64_t v6 = *(void *)v4;
    sub_100160874(v6, v5);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
    *(void *)(a1 + 24) = v5;
  }

  return a1;
}

void *assignWithCopy for ContactResolver(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 2;
  unint64_t v5 = a2[3];
  if (a1[3] >> 60 != 15LL)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100160874(*v4, v5);
      uint64_t v8 = a1[2];
      unint64_t v9 = a1[3];
      a1[2] = v7;
      a1[3] = v5;
      sub_1001608B8(v8, v9);
      return a1;
    }

    sub_1001B20D0((uint64_t)(a1 + 2));
    goto LABEL_6;
  }

  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    return a1;
  }

  uint64_t v6 = *v4;
  sub_100160874(*v4, v5);
  a1[2] = v6;
  a1[3] = v5;
  return a1;
}

uint64_t sub_1001B20D0(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ContactResolver(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ContactResolver(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = a2 + 2;
  unint64_t v6 = a1[3];
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = a2[3];
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = a1[2];
      a1[2] = *v5;
      a1[3] = v7;
      sub_1001608B8(v8, v6);
      return a1;
    }

    sub_1001B20D0((uint64_t)(a1 + 2));
  }

  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactResolver(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactResolver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ContactResolver()
{
  return &type metadata for ContactResolver;
}

uint64_t sub_1001B2258(uint64_t a1)
{
  return sub_1001B2280(a1, qword_1003FF018, (uint64_t (*)(void))sub_100173F8C);
}

uint64_t sub_1001B226C(uint64_t a1)
{
  return sub_1001B2280(a1, qword_1003FF038, (uint64_t (*)(void))sub_100174030);
}

uint64_t sub_1001B2280(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_1001609C4(v5, a2);
  sub_10015ADAC(v5, (uint64_t)a2);
  id v6 = *(id *)a3();
  return Logger.init(_:)(v6);
}

Swift::Int sub_1001B22E0(uint64_t a1, uint64_t a2)
{
  void v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_1001B2340(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001EF4FC();
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

unint64_t sub_1001B2378@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001E5DA4(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

uint64_t sub_1001B23A8(uint64_t a1)
{
  unint64_t v2 = sub_1001EF4FC();
  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_1001B23D0(uint64_t a1)
{
  unint64_t v2 = sub_1001EF4FC();
  return _BridgedNSError._code.getter(a1, v2);
}

unint64_t sub_1001B23F8()
{
  return 0xD000000000000021LL;
}

uint64_t sub_1001B2414(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1001EF4FC();
  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

unint64_t MRDFastSyncGroupSessionState.init(rawValue:)(unint64_t a1)
{
  return sub_1001E5DB4(a1);
}

Swift::Int sub_1001B246C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001B24B0()
{
}

Swift::Int sub_1001B24D8(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_1001B2518@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1001E5DB4(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v4 & 1;
  return result;
}

id sub_1001B254C()
{
  Swift::UInt v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TimingEvent(0LL);
    id v4 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v5 = *(void **)(v0 + 32);
    *(void *)(v3 + 32) = v4;
    id v2 = v4;

    Swift::UInt v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

id sub_1001B25A8()
{
  Swift::UInt v1 = *(void **)(v0 + 40);
  if (v1)
  {
    id v2 = *(id *)(v0 + 40);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TimingEvent(0LL);
    id v4 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v5 = *(void **)(v0 + 40);
    *(void *)(v3 + 40) = v4;
    id v2 = v4;

    Swift::UInt v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

id sub_1001B2604()
{
  Swift::UInt v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TimingEvent(0LL);
    id v4 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v5 = *(void **)(v0 + 48);
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = v4;
    id v2 = v4;

    Swift::UInt v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

id sub_1001B2660()
{
  Swift::UInt v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TimingEvent(0LL);
    id v4 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v5 = *(void **)(v0 + 56);
    *(void *)(v3 + 56) = v4;
    id v2 = v4;

    Swift::UInt v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

uint64_t sub_1001B26BC()
{
  return swift_deallocClassInstance(v0, 65LL, 7LL);
}

uint64_t sub_1001B2700()
{
  return sub_1001B2720();
}

uint64_t sub_1001B2720()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 72LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034C910;
  *(void *)(v1 + 32) = sub_1001B2548();
  *(void *)(v1 + 40) = sub_1001B254C();
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = sub_1001B25A8();
  *(void *)(v1 + 56) = sub_1001B2604();
  id v2 = sub_1001B2660();
  *(void *)(v1 + 64) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

id sub_1001B27AC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }

  else
  {
    uint64_t v3 = v0;
    type metadata accessor for TimingEvent(0LL);
    id v4 = MRDFastSyncGroupSession.__allocating_init()();
    uint64_t v5 = *(void **)(v0 + 24);
    *(void *)(v3 + 24) = v4;
    id v2 = v4;

    uint64_t v1 = 0LL;
  }

  id v6 = v1;
  return v2;
}

uint64_t sub_1001B2808()
{
  return swift_deallocClassInstance(v0, 33LL, 7LL);
}

uint64_t sub_1001B282C()
{
  uint64_t v0 = sub_100156B68(&qword_1003F8310);
  uint64_t v1 = swift_allocObject(v0, 40LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_10034BD90;
  id v2 = sub_1001B27AC();
  *(void *)(v1 + 32) = v2;
  specialized Array._endMutation()(v2);
  return v1;
}

uint64_t variable initialization expression of MRDFastSyncGroupSession.delegate()
{
  return 0LL;
}

void *variable initialization expression of MRDFastSyncGroupSession.guests()
{
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1001B28A4()
{
  uint64_t v1 = OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings);
  }

  else
  {
    char v4 = *(_BYTE *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession_isLeader);
    uint64_t v5 = type metadata accessor for JoinTimingEvents();
    uint64_t v3 = swift_allocObject(v5, 65LL, 7LL);
    *(_BYTE *)(v3 + swift_weakDestroy(v0 + 16) = 0;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(void *)(v3 + 56) = 0LL;
    *(_BYTE *)(v3 + 64) = v4;
    *(void *)(v0 + v1) = v3;
    swift_retain(v3);
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  return v3;
}

uint64_t sub_1001B2928()
{
  uint64_t v1 = OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings);
  }

  else
  {
    char v4 = *(_BYTE *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession_isLeader);
    uint64_t v5 = type metadata accessor for SessionTimingEvents();
    uint64_t v3 = swift_allocObject(v5, 33LL, 7LL);
    *(_BYTE *)(v3 + swift_weakDestroy(v0 + 16) = 0;
    *(void *)(v3 + 24) = 0LL;
    *(_BYTE *)(v3 + 32) = v4;
    *(void *)(v0 + v1) = v3;
    swift_retain(v3);
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  return v3;
}

uint64_t sub_1001B29A0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v12 = OBJC_IVAR___MRDFastSyncGroupSession__state;
  if (*(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession__state] != a1)
  {
    uint64_t v47 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v48 = v11;
    uint64_t v49 = result;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v50 = v7;
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v13, (uint64_t)qword_1003FF018);
    id v14 = v1;
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc(42LL, -1LL);
      uint64_t v46 = v4;
      uint64_t v19 = v18;
      uint64_t v20 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = v20;
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v14;
      aBlock[0] = v44;
      *(_DWORD *)uint64_t v19 = 138544130;
      os_log_t v42 = v15;
      int v43 = v17;
      uint64_t v21 = v14;
      uint64_t v45 = v5;
      unint64_t v22 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v19 + 4, v19 + 12);
      *uint64_t v20 = v14;

      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v23 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v24 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v51 = (void *)sub_10015ADC4(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v19 + 14, v19 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2048;
      uint64_t v51 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 2048;
      uint64_t v25 = *(void **)&v2[v12];

      uint64_t v51 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v19 + 34, v19 + 42);

      uint64_t v5 = v45;
      os_log_t v26 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v43,  "[%{public}@]<%{public}s> State changed: %ld -> %ld.",  (uint8_t *)v19,  0x2Au);
      uint64_t v27 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      BOOL v28 = v41;
      swift_arrayDestroy(v41, 1LL, v27);
      swift_slowDealloc(v28, -1LL, -1LL);
      uint64_t v29 = v44;
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v30 = v19;
      uint64_t v4 = v46;
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v31 = *(void *)&v2[v12];
    uint64_t v32 = swift_allocObject(&unk_1003A5940, 32LL, 7LL);
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = v14;
    *(void *)(v32 + 24) = v31;
    aBlock[4] = (uint64_t)sub_1001ED944;
    uint64_t v53 = v32;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A5958;
    uint64_t v33 = _Block_copy(aBlock);
    uint64_t v34 = v14;
    uint64_t v35 = v47;
    static DispatchQoS.unspecified.getter(v34);
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v36 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v37 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v38 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v39 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v37, v38, v4, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v39, v33);
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v39, v4);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v49);
    return swift_release(v53);
  }

  return result;
}

uint64_t MRDFastSyncGroupSession.state.getter()
{
  uint64_t v12 = 0LL;
  char v13 = 1;
  uint64_t v1 = *(dispatch_queue_s **)&v0[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v2 = swift_allocObject(&unk_1003A4D58, 32LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = &v12;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_1003A4D80, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_1001E5DE8;
  *(void *)(v3 + 24) = v2;
  void v10[4] = sub_1001840B4;
  uint64_t v11 = v3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  void v10[2] = sub_1001B2FA0;
  v10[3] = &unk_1003A4D98;
  uint64_t v4 = _Block_copy(v10);
  uint64_t v5 = v11;
  uint64_t v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_async_and_wait(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 121LL, 123LL, 42LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else if ((v13 & 1) == 0)
  {
    uint64_t v9 = v12;
    swift_release(v2);
    return v9;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001B2FA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t MRDFastSyncGroupSession.localParticipant.getter()
{
  uint64_t v12 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)&v0[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v2 = swift_allocObject(&unk_1003A4DD0, 32LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v2 + 24) = &v12;
  uint64_t v3 = swift_allocObject(&unk_1003A4DF8, 32LL, 7LL);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = sub_1001E5E2C;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1001EFCC4;
  uint64_t v11 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B2FA0;
  aBlock[3] = &unk_1003A4E10;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v11;
  uint64_t v6 = v0;
  swift_retain(v3);
  swift_release(v5);
  dispatch_async_and_wait(v1, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 121LL, 133LL, 42LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = v12;
    swift_release(v2);
    return v9;
  }

  return result;
}

void *MRDFastSyncGroupSession.leaderParticipant.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipant);
  swift_beginAccess(v0 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipant, v5, 0LL, 0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void MRDFastSyncGroupSession.leaderParticipant.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipant);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  Swift::Int *v3 = a1;
}

uint64_t (*MRDFastSyncGroupSession.leaderParticipant.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1001B32AC()
{
  uint64_t v1 = v0 + OBJC_IVAR___MRDFastSyncGroupSession_delegate;
  swift_beginAccess(v0 + OBJC_IVAR___MRDFastSyncGroupSession_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1001B32F4(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___MRDFastSyncGroupSession_delegate;
  swift_beginAccess(v3, v5, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_1001B334C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___MRDFastSyncGroupSession_delegate;
  v3[4] = v1;
  v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1001B33BC;
}

void sub_1001B33BC(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_unknownObjectWeakAssign(*(void *)(*(void *)a1 + 32LL) + *(void *)(*(void *)a1 + 40LL), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }

  free(v3);
}

uint64_t MRDFastSyncGroupSession.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8));
  return v1;
}

void *variable initialization expression of MRDFastSyncGroupSession.participantHandleToMediaRemoteIdentifierMap()
{
  return &_swiftEmptyDictionarySingleton;
}

void *variable initialization expression of MRDFastSyncGroupSession.pendingParticipants()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t static MRDFastSyncGroupSession.createSession(nearbyGroup:asUser:delegate:)( void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((char *)a1 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup);
  uint64_t v6 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x68LL);
  uint64_t v7 = swift_retain(v5);
  uint64_t v8 = v6(v7);
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for RemoteControlActivity();
  uint64_t v12 = swift_allocObject(v11, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(v12 + 24) = v10;
  uint64_t v17 = v12;
  uint64_t v13 = sub_100156B68(&qword_1003F9950);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = NearbyGroupSessionProvider.init(nearbyGroup:activity:)(v5, &v17);
  objc_allocWithZone((Class)type metadata accessor for MRDFastSyncGroupSession());
  id v15 = a2;
  swift_unknownObjectRetain(a3);
  return sub_1001B3980(1, v15, v14, a3);
}

uint64_t static MRDFastSyncGroupSession.joinSession(nearbyGroup:asUser:hostSigningKey:delegate:)( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)((char *)a1 + OBJC_IVAR____TtC12mediaremoted14MRDNearbyGroup_nearbyGroup);
  uint64_t v8 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x68LL);
  uint64_t v9 = swift_retain(v7);
  uint64_t v10 = v8(v9);
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for RemoteControlActivity();
  uint64_t v14 = swift_allocObject(v13, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v14 + 24) = v12;
  uint64_t v19 = v14;
  uint64_t v15 = sub_100156B68(&qword_1003F9950);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  uint64_t v16 = NearbyGroupSessionProvider.init(nearbyGroup:activity:)(v7, &v19);
  objc_allocWithZone((Class)type metadata accessor for MRDFastSyncGroupSession());
  id v17 = a2;
  swift_unknownObjectRetain(a5);
  return sub_1001B3980(0, v17, v16, a5);
}

uint64_t sub_1001B3980(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v183 = a4;
  id v179 = a2;
  int v148 = a1;
  uint64_t v7 = sub_100156B68((uint64_t *)&unk_1003FA180);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v144 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = type metadata accessor for UUID(0LL);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v141 = (char *)&v138 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v147);
  os_log_type_t v146 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12);
  uint64_t v145 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v149 = OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger] = 0LL;
  uint64_t v150 = OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables] = &_swiftEmptySetSingleton;
  uint64_t v151 = OBJC_IVAR___MRDFastSyncGroupSession_cancellables;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_cancellables] = &_swiftEmptySetSingleton;
  uint64_t v156 = OBJC_IVAR___MRDFastSyncGroupSession_groupSession;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_groupSession] = 0LL;
  uint64_t v158 = OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger] = 0LL;
  uint64_t v160 = OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___joinTimings] = 0LL;
  uint64_t v162 = OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession____lazy_storage___sessionTimings] = 0LL;
  uint64_t v174 = (id *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipant];
  id *v174 = 0LL;
  uint64_t v178 = &v4[OBJC_IVAR___MRDFastSyncGroupSession_delegate];
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR___MRDFastSyncGroupSession_delegate], 0LL);
  uint64_t v18 = (uint64_t *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_localParticipantIdentifier];
  *uint64_t v18 = 0LL;
  v18[1] = 0LL;
  uint64_t v176 = v18;
  uint64_t v19 = (uint64_t *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_leaderParticipantIdentifier];
  *uint64_t v19 = 0LL;
  v19[1] = 0LL;
  unint64_t v177 = v19;
  uint64_t v20 = &v4[OBJC_IVAR___MRDFastSyncGroupSession_localFastSyncIdentifier];
  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  uint64_t v155 = v20;
  uint64_t v21 = &v4[OBJC_IVAR___MRDFastSyncGroupSession_leaderFastSyncIdentifier];
  void *v21 = 0LL;
  v21[1] = 0LL;
  uint64_t v154 = v21;
  unint64_t v22 = (uint64_t *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
  *unint64_t v22 = 0LL;
  v22[1] = 0LL;
  unint64_t v180 = v22;
  uint64_t v23 = (uint64_t *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
  *uint64_t v23 = 0LL;
  v23[1] = 0LL;
  uint64_t v175 = v23;
  uint64_t v152 = OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap] = &_swiftEmptyDictionarySingleton;
  uint64_t v153 = OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap] = &_swiftEmptyDictionarySingleton;
  uint64_t v157 = OBJC_IVAR___MRDFastSyncGroupSession_identities;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_identities] = &_swiftEmptyDictionarySingleton;
  uint64_t v159 = OBJC_IVAR___MRDFastSyncGroupSession_guests;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_guests] = &_swiftEmptySetSingleton;
  uint64_t v161 = OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_pendingParticipants] = _swiftEmptyArrayStorage;
  uint64_t v163 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager] = 0LL;
  unint64_t v24 = &v4[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers];
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_prewarmedParticipantIdentifiers] = 0LL;
  uint64_t v164 = OBJC_IVAR___MRDFastSyncGroupSession_presenceTask;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_presenceTask] = 0LL;
  uint64_t v165 = OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_joinProviderTask] = 0LL;
  uint64_t v166 = OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask] = 0LL;
  uint64_t v169 = OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_leaderDiscoveryTimer] = 0LL;
  uint64_t v171 = OBJC_IVAR___MRDFastSyncGroupSession_expectedRealtimeParticipants;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_expectedRealtimeParticipants] = &_swiftEmptySetSingleton;
  v4[OBJC_IVAR___MRDFastSyncGroupSession_isLowPowerMode] = 0;
  uint64_t v25 = (uint64_t *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  uint64_t *v25 = 0LL;
  v25[1] = 0LL;
  uint64_t v168 = v25;
  v4[OBJC_IVAR___MRDFastSyncGroupSession_hasEncounteredLowPowerError] = 0;
  uint64_t v167 = OBJC_IVAR___MRDFastSyncGroupSession_removedParticipantIdentityIdentifiers;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_removedParticipantIdentityIdentifiers] = &_swiftEmptySetSingleton;
  uint64_t v170 = OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToPresenceTimeoutTimerMap] = &_swiftEmptyDictionarySingleton;
  int v172 = (void (*)(char *))OBJC_IVAR___MRDFastSyncGroupSession_timedOutParticipantHandles;
  *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_timedOutParticipantHandles] = &_swiftEmptySetSingleton;
  os_log_t v181 = v4;
  uint64_t v26 = a3;
  uint64_t v27 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter();
  uint64_t v173 = NearbyGroup.localMemberHandle.getter();
  uint64_t v29 = v28;
  swift_release(v27);
  uint64_t v182 = v29;
  if (!v29)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v76 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v76, (uint64_t)qword_1003FF018);
    uint64_t v77 = v26;
    uint64_t v78 = swift_retain_n(v26, 2LL);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    os_log_type_t v80 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v82 = swift_slowAlloc(32LL, -1LL);
      uint64_t v140 = v24;
      uint64_t v83 = v82;
      uint64_t v190 = v82;
      *(_DWORD *)uint64_t v81 = 136446210;
      uint64_t v84 = ((uint64_t (*)(void))dispatch thunk of NearbyGroupSessionProvider.id.getter)();
      uint64_t v187 = (void *)sub_10015ADC4(v84, v85, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, v188, v81 + 4, v81 + 12);
      swift_release_n(v26, 2LL);
      swift_bridgeObjectRelease();
      uint64_t v86 = "[MRDFastSyncGroupSession]<%{public}s> Error getting local handle from nearby group.";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v79, v80, v86, v81, 0xCu);
      swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1LL, -1LL);
      swift_slowDealloc(v81, -1LL, -1LL);

      swift_release(v77);
      swift_unknownObjectRelease(v183);
LABEL_16:
      unint64_t v92 = v181;
      os_log_type_t v93 = v174;
      uint64_t v94 = (uint64_t)v178;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(*(void *)&v5[v156]);
      swift_release(*(void *)&v5[v158]);
      swift_release(*(void *)&v5[v160]);
      swift_release(*(void *)&v5[v162]);

      sub_100183478(v94);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(*(void *)&v5[v163]);
      swift_bridgeObjectRelease();
      swift_release(*(void *)&v5[v164]);
      swift_release(*(void *)&v5[v165]);
      swift_release(*(void *)&v5[v166]);

      swift_bridgeObjectRelease();
      sub_100162944(*v168, v168[1]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t v95 = type metadata accessor for MRDFastSyncGroupSession();
      swift_deallocPartialClassInstance(v92, v95, 408LL, 7LL);
      return 0LL;
    }

uint64_t sub_1001B4CBC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *a1;
  a2 += 16LL;
  swift_beginAccess(a2, v55, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v14 = (void *)result;
    uint64_t v47 = v11;
    uint64_t v48 = v9;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v49 = v8;
    uint64_t v50 = v7;
    uint64_t v51 = v5;
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
    id v16 = v14;
    swift_bridgeObjectRetain_n(v12, 2LL);
    id v17 = v16;
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.info.getter();
    int v20 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v46 = v4;
      uint64_t v22 = v21;
      uint64_t v23 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v43 = v23;
      uint64_t v45 = swift_slowAlloc(64LL, -1LL);
      id v52 = v17;
      aBlock[0] = v45;
      *(_DWORD *)uint64_t v22 = 138543874;
      int v44 = v20;
      unint64_t v24 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v22 + 4, v22 + 12);
      *uint64_t v23 = v14;

      *(_WORD *)(v22 + 12) = 2082;
      uint64_t v25 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v26 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      id v52 = (void *)sub_10015ADC4(v25, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v22 + 14, v22 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2082;
      uint64_t v27 = swift_bridgeObjectRetain();
      uint64_t v28 = Set.description.getter(v27, &type metadata for String, &protocol witness table for String);
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      id v52 = (void *)sub_10015ADC4(v28, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease_n(v12, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v18,  (os_log_type_t)v44,  "[%{public}@]<%{public}s> Updated presentHandles: %{public}s",  (uint8_t *)v22,  0x20u);
      uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v32 = v43;
      swift_arrayDestroy(v43, 1LL, v31);
      swift_slowDealloc(v32, -1LL, -1LL);
      uint64_t v33 = v45;
      swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v34 = v22;
      uint64_t v4 = v46;
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    uint64_t v35 = swift_allocObject(&unk_1003A6898, 24LL, 7LL);
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v17;
    aBlock[4] = (uint64_t)sub_1001EFAD4;
    uint64_t v54 = v35;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A68B0;
    uint64_t v36 = _Block_copy(aBlock);
    id v37 = v17;
    uint64_t v38 = v47;
    static DispatchQoS.unspecified.getter(v37);
    id v52 = _swiftEmptyArrayStorage;
    uint64_t v39 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v40 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v41 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v42 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v40, v41, v4, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v42, v36);
    _Block_release(v36);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v4);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v49);

    return swift_release(v54);
  }

  return result;
}

id MRDFastSyncGroupSession.__deallocating_deinit()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v1, (uint64_t)qword_1003FF018);
  uint64_t v2 = v0;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc(22LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v18[0] = v14;
    *(_DWORD *)uint64_t v5 = 138543618;
    uint64_t v16 = (uint64_t)v2;
    uint64_t v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v5 + 4, v5 + 12);
    *uint64_t v6 = v2;

    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v9 = *(void *)&v7[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v8 = *(void *)&v7[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_10015ADC4(v9, v8, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v5 + 14, v5 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}@]<%{public}s> Dealloc.", (uint8_t *)v5, 0x16u);
    uint64_t v10 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v6, 1LL, v10);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v11 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_cancellables];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_cancellables], v18, 1LL, 0LL);
  *(void *)uint64_t v11 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v12 = &v2[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables];
  swift_beginAccess(&v2[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables], &v16, 1LL, 0LL);
  *(void *)uint64_t v12 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  v15.receiver = v2;
  v15.super_class = (Class)type metadata accessor for MRDFastSyncGroupSession();
  return objc_msgSendSuper2(&v15, "dealloc");
}

Swift::Void __swiftcall MRDFastSyncGroupSession.start()()
{
}

void sub_1001B5700(void *a1)
{
  uint64_t v2 = type metadata accessor for GroupSessionProviderState(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (*(void *)((char *)a1 + OBJC_IVAR___MRDFastSyncGroupSession__state))
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v6, (uint64_t)qword_1003FF018);
    uint64_t v67 = a1;
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v67);
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc(22LL, -1LL);
      uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      v68[0] = v11;
      *(_DWORD *)uint64_t v9 = 138543618;
      id v69 = v67;
      uint64_t v12 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v9 + 4, v9 + 12);
      *uint64_t v10 = v67;

      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      id v69 = (char *)sub_10015ADC4(v13, v14, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v9 + 14, v9 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%{public}@]<%{public}s> session can only be started from initial state.",  (uint8_t *)v9,  0x16u);
      uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v10, 1LL, v15);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    uint64_t v67 = (char *)OBJC_IVAR___MRDFastSyncGroupSession__state;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    id v17 = (os_log_s *)sub_10015ADAC(v16, (uint64_t)qword_1003FF018);
    uint64_t v18 = a1;
    os_log_t v66 = v17;
    os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v62 = v23;
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      v68[0] = v63;
      *(_DWORD *)uint64_t v22 = 138543618;
      uint64_t v64 = v3;
      uint64_t v65 = v2;
      id v69 = v18;
      unint64_t v24 = v18;
      int v61 = v21;
      uint64_t v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v22 + 4, v22 + 12);
      *uint64_t v23 = v18;

      *(_WORD *)(v22 + 12) = 2082;
      unint64_t v26 = v19;
      uint64_t v28 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v27 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v29 = v28;
      uint64_t v2 = v65;
      id v69 = (char *)sub_10015ADC4(v29, v27, v68);
      uint64_t v3 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v22 + 14, v22 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v61,  "[%{public}@]<%{public}s> Starting",  (uint8_t *)v22,  0x16u);
      uint64_t v30 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v31 = v62;
      swift_arrayDestroy(v62, 1LL, v30);
      swift_slowDealloc(v31, -1LL, -1LL);
      uint64_t v32 = v63;
      swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v33 = OBJC_IVAR___MRDFastSyncGroupSession_provider;
    uint64_t v34 = *(void *)&v18[OBJC_IVAR___MRDFastSyncGroupSession_provider];
    uint64_t v35 = swift_retain(v34);
    uint64_t v36 = dispatch thunk of NearbyGroupSessionProvider.state.getter(v35);
    swift_release(v34);
    v68[0] = v36;
    uint64_t v37 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v37 + 16, v18);
    uint64_t v38 = sub_100156B68(&qword_1003FA168);
    uint64_t v39 = sub_1001604E8( (unint64_t *)&unk_1003FA170,  &qword_1003FA168,  (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    uint64_t v40 = Publisher<>.sink(receiveValue:)(sub_1001EF9AC, v37, v38, v39);
    swift_release(v37);
    swift_release(v68[0]);
    uint64_t v41 = &v18[OBJC_IVAR___MRDFastSyncGroupSession_cancellables];
    swift_beginAccess(&v18[OBJC_IVAR___MRDFastSyncGroupSession_cancellables], v68, 33LL, 0LL);
    AnyCancellable.store(in:)(v41);
    swift_endAccess(v68);
    swift_release(v40);
    uint64_t v42 = *(void *)&v18[v33];
    uint64_t v43 = swift_retain(v42);
    uint64_t v44 = dispatch thunk of NearbyGroupSessionProvider.state.getter(v43);
    uint64_t v45 = swift_release(v42);
    CurrentValueSubject.value.getter(v45);
    swift_release(v44);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2) == enum case for GroupSessionProviderState.invalidated(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
      uint64_t v46 = *v5;
      uint64_t v47 = v18;
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc(22LL, -1LL);
        uint64_t v65 = swift_slowAlloc(8LL, -1LL);
        os_log_t v66 = v48;
        uint64_t v51 = (void *)v65;
        uint64_t v67 = (char *)swift_slowAlloc(32LL, -1LL);
        v68[0] = (uint64_t)v67;
        *(_DWORD *)uint64_t v50 = 138412546;
        id v69 = v47;
        id v52 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v50 + 4, v50 + 12);
        void *v51 = v18;

        *(_WORD *)(v50 + 12) = 2082;
        uint64_t v53 = *(void *)&v52[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v54 = *(void *)&v52[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        id v69 = (char *)sub_10015ADC4(v53, v54, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v50 + 14, v50 + 22);

        swift_bridgeObjectRelease();
        os_log_t v55 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  v49,  "[%@]<%{public}s> Provider invalidated on start",  (uint8_t *)v50,  0x16u);
        uint64_t v56 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v57 = v65;
        swift_arrayDestroy(v65, 1LL, v56);
        swift_slowDealloc(v57, -1LL, -1LL);
        uint64_t v58 = v67;
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {
      }

      swift_errorRetain(v46);
      sub_1001CF668(v46);
      swift_errorRelease(v46);
      swift_errorRelease(v46);
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v59 = *(void **)&v67[(void)a1];
      *(void *)&v67[(void)a1] = 1LL;
      sub_1001B29A0(v59);
      if ((v18[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) == 0) {
        sub_1001D00B4();
      }
    }
  }

uint64_t sub_1001B5F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for GroupSessionProviderState(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (uint64_t *)((char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v52, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v16 = (void *)result;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v12 + 88))(v14, v11) == enum case for GroupSessionProviderState.invalidated(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v12 + 96))(v14, v11);
      uint64_t v46 = *v14;
      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v47 = v8;
      uint64_t v17 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v17, (uint64_t)qword_1003FF018);
      uint64_t v18 = v16;
      os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.info.getter();
      int v21 = v20;
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v22 = swift_slowAlloc(22LL, -1LL);
        uint64_t v23 = swift_slowAlloc(8LL, -1LL);
        uint64_t v43 = v4;
        unint64_t v24 = (void *)v23;
        uint64_t v41 = v23;
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        os_log_type_t v49 = v18;
        aBlock[0] = v44;
        *(_DWORD *)uint64_t v22 = 138543618;
        uint64_t v45 = v5;
        int v42 = v21;
        os_log_t v40 = v19;
        uint64_t v25 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v22 + 4, v22 + 12);
        *unint64_t v24 = v16;
        uint64_t v4 = v43;

        *(_WORD *)(v22 + 12) = 2082;
        uint64_t v26 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v27 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        os_log_type_t v49 = (void *)sub_10015ADC4(v26, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v22 + 14, v22 + 22);

        uint64_t v5 = v45;
        swift_bridgeObjectRelease();
        os_log_t v28 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  (os_log_type_t)v42,  "[%{public}@]<%{public}s> Provider state invalidated",  (uint8_t *)v22,  0x16u);
        uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        uint64_t v30 = v41;
        swift_arrayDestroy(v41, 1LL, v29);
        swift_slowDealloc(v30, -1LL, -1LL);
        uint64_t v31 = v44;
        swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v45 = *(void *)((char *)v18 + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
      uint64_t v32 = swift_allocObject(&unk_1003A67F8, 32LL, 7LL);
      uint64_t v33 = v46;
      *(void *)(v32 + swift_weakDestroy(v0 + 16) = v18;
      *(void *)(v32 + 24) = v33;
      aBlock[4] = (uint64_t)sub_1001EFFAC;
      uint64_t v51 = v32;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_100157EA8;
      aBlock[3] = (uint64_t)&unk_1003A6810;
      uint64_t v34 = _Block_copy(aBlock);
      uint64_t v35 = v18;
      uint64_t v36 = swift_errorRetain(v33);
      static DispatchQoS.unspecified.getter(v36);
      os_log_type_t v49 = _swiftEmptyArrayStorage;
      uint64_t v37 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v38 = sub_100156B68((uint64_t *)&unk_1003F9A70);
      uint64_t v39 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v38, v39, v4, v37);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v34);
      _Block_release(v34);
      swift_errorRelease(v33);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v47);

      return swift_release(v51);
    }

    else
    {

      return (*(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
    }
  }

  return result;
}

uint64_t sub_1001B6458()
{
  return sub_1001BB1F0((uint64_t)&unk_1003A5F88, (uint64_t)sub_1001EF17C, (uint64_t)&unk_1003A5FA0);
}

uint64_t sub_1001B6474(void *a1)
{
  uint64_t v2 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v5, (uint64_t)qword_1003FF018);
  uint64_t v6 = a1;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = v10;
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = (uint64_t)v6;
    uint64_t v32 = v30;
    *(_DWORD *)uint64_t v9 = 138543618;
    uint64_t v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v9 + 4, v9 + 12);
    *uint64_t v10 = v6;

    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = v4;
    uint64_t v14 = *(void *)&v11[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v13 = *(void *)&v11[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_10015ADC4(v14, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v9 + 14, v9 + 22);

    uint64_t v4 = v12;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%{public}@]<%{public}s> Started observing session.",  (uint8_t *)v9,  0x16u);
    uint64_t v15 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v16 = v29;
    swift_arrayDestroy(v29, 1LL, v15);
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v17 = v30;
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v18 = sub_1001B28A4();
  os_log_type_t v19 = sub_1001B25A8();
  uint64_t v20 = swift_release(v18);
  (*(void (**)(uint64_t))((swift_isaMask & *v19) + 0xC0LL))(v20);

  uint64_t v21 = OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask;
  uint64_t v22 = *(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask];
  if (v22)
  {
    swift_retain(*(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_observeSessionTask]);
    sub_100156B68(&qword_1003F86D0);
    Task.cancel()();
    swift_release(v22);
  }

  uint64_t v23 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v4, 1LL, 1LL, v23);
  unint64_t v24 = (void *)swift_allocObject(&unk_1003A5FD8, 40LL, 7LL);
  v24[2] = 0LL;
  v24[3] = 0LL;
  v24[4] = v6;
  uint64_t v25 = v6;
  uint64_t v26 = sub_1001669DC((uint64_t)v4, (uint64_t)&unk_1003FA0D0, (uint64_t)v24);
  uint64_t v27 = *(void *)&v6[v21];
  *(void *)&v6[v21] = v26;
  return swift_release(v27);
}

uint64_t sub_1001B67EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a4;
  uint64_t v5 = sub_100156B68(&qword_1003FA0D8);
  v4[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003FA0E0);
  v4[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[18] = v8;
  v4[19] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001B687C, 0LL, 0LL);
}

uint64_t sub_1001B687C()
{
  uint64_t v1 = (char *)v0[13];
  if ((v1[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) != 0)
  {
    id v2 = 0LL;
  }

  else
  {
    uint64_t v3 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
    uint64_t v4 = swift_allocObject(&unk_1003A6000, 24LL, 7LL);
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v1;
    id v5 = objc_allocWithZone(&OBJC_CLASS___MSVTimer);
    v0[2] = _NSConcreteStackBlock;
    v0[6] = sub_1001EF1FC;
    v0[7] = v4;
    v0[3] = 1107296256LL;
    v0[4] = sub_100157EA8;
    v0[5] = &unk_1003A6018;
    uint64_t v6 = _Block_copy(v0 + 2);
    uint64_t v7 = v0[7];
    id v8 = v3;
    uint64_t v9 = v1;
    swift_release(v7);
    id v2 = [v5 initWithInterval:0 repeats:v8 queue:v6 block:20.0];

    _Block_release(v6);
    uint64_t v1 = (char *)v0[13];
  }

  v0[20] = v2;
  uint64_t v11 = v0[15];
  uint64_t v10 = v0[16];
  uint64_t v12 = v0[14];
  uint64_t v13 = *(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_provider];
  swift_retain(v13);
  uint64_t v14 = sub_100156B68(&qword_1003F9950);
  uint64_t v15 = sub_1001604E8( &qword_1003F9FA8,  &qword_1003F9950,  (uint64_t)&protocol conformance descriptor for NearbyGroupSessionProvider<A>);
  GroupSessionProvider.sessions.getter(v14, v15);
  swift_release(v13);
  GroupSession.Sessions.makeAsyncIterator()(v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  uint64_t v18 = (char *)&dword_1003FA0E8 + dword_1003FA0E8;
  uint64_t v16 = (void *)swift_task_alloc(unk_1003FA0EC);
  v0[21] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1001B6A74;
  return ((uint64_t (*)(void, void, void *))v18)(0LL, 0LL, v0 + 8);
}

uint64_t sub_1001B6A74(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001B6AD0, 0LL, 0LL);
}

uint64_t sub_1001B6AD0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (v1)
  {
    [*(id *)(v0 + 160) invalidate];
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v2 = *(void **)(v0 + 104);
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v3, (uint64_t)qword_1003FF018);
    id v4 = v2;
    swift_retain_n(v1, 2LL);
    id v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    id v8 = *(void **)(v0 + 104);
    if (v7)
    {
      os_log_type_t type = v6;
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      uint64_t v34 = v33;
      *(_DWORD *)uint64_t v9 = 138543874;
      *(void *)(v0 + 72) = v8;
      uint64_t v10 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v9 + 4, v9 + 12);
      *uint64_t v31 = v8;

      *(_WORD *)(v9 + 12) = 2082;
      uint64_t v11 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v12 = *(void *)&v10[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 80) = sub_10015ADC4(v11, v12, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease();

      *(_WORD *)(v9 + 22) = 2082;
      *(void *)(v0 + 8_Block_object_dispose(va, 8) = v1;
      uint64_t v13 = sub_100156B68(&qword_1003FA0F0);
      uint64_t v14 = sub_1001604E8( &qword_1003FA0F8,  &qword_1003FA0F0,  (uint64_t)&protocol conformance descriptor for GroupSession<A>);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      *(void *)(v0 + 96) = sub_10015ADC4(v15, v16, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease();
      swift_release_n(v1, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  type,  "[%{public}@]<%{public}s> Provider gave session %{public}s.",  (uint8_t *)v9,  0x20u);
      uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v31, 1LL, v17);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v1, 2LL);
    }

    uint64_t v18 = sub_1001B28A4();
    os_log_type_t v19 = sub_1001B25A8();
    uint64_t v20 = swift_release(v18);
    (*(void (**)(uint64_t))((swift_isaMask & *v19) + 0xD0LL))(v20);

    uint64_t v21 = sub_1001B28A4();
    uint64_t v22 = sub_1001B2604();
    uint64_t v23 = swift_release(v21);
    (*(void (**)(uint64_t))((swift_isaMask & *v22) + 0xC0LL))(v23);

    uint64_t v24 = sub_1001B2928();
    uint64_t v25 = sub_1001B27AC();
    uint64_t v26 = swift_release(v24);
    (*(void (**)(uint64_t))((swift_isaMask & *v25) + 0xC0LL))(v26);

    sub_1001C0998(v1);
    swift_release(v1);
  }

  uint64_t v27 = *(void *)(v0 + 152);
  os_log_t v28 = *(void **)(v0 + 160);
  uint64_t v29 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 144) + 8LL))(v27, *(void *)(v0 + 136));

  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001B6EF0(uint64_t a1, uint64_t a2)
{
  void v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = sub_100156B68(&qword_1003FA0E0);
  uint64_t v4 = sub_1001604E8( &qword_1003FA100,  &qword_1003FA0E0,  (uint64_t)&protocol conformance descriptor for GroupSession<A>.Sessions.Iterator);
  id v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v2[6] = v5;
  *id v5 = v2;
  v5[1] = sub_1001667A8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v2 + 2, v3, v4);
}

Swift::Void __swiftcall MRDFastSyncGroupSession.end()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v7) = v0[OBJC_IVAR___MRDFastSyncGroupSession_isLeader];
  uint64_t v16 = *(void *)&v0[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  if ((_DWORD)v7 == 1)
  {
    uint64_t v9 = swift_allocObject(&unk_1003A4EE8, 24LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v0;
    uint64_t v22 = sub_1001E6378;
    uint64_t v23 = v9;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v19 = 1107296256LL;
    uint64_t v10 = &unk_1003A4F00;
  }

  else
  {
    uint64_t v11 = swift_allocObject(&unk_1003A4E98, 24LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = v0;
    uint64_t v22 = sub_1001E6354;
    uint64_t v23 = v11;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v19 = 1107296256LL;
    uint64_t v10 = &unk_1003A4EB0;
  }

  uint64_t v20 = sub_100157EA8;
  uint64_t v21 = v10;
  unint64_t v12 = _Block_copy(&aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v15 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_release(v23);
}

void *sub_1001B71D4(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for Participants(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
  if (v10)
  {
    swift_retain(*(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger]);
    unsigned __int8 v12 = MRDFastSyncGroupSessionState.rawValue.getter(4LL, 0LL, 0xC000000000000000LL, v11);
    unint64_t v49 = v14;
    uint64_t v50 = v13;
    sub_100236C68(v12);
    unint64_t v51 = v16;
    uint64_t v52 = v15;
    uint64_t v17 = *(void (**)(char *, void, uint64_t))(v7 + 104);
    uint64_t v53 = v6;
    v17(v9, enum case for Participants.all(_:), v6);
    uint64_t v18 = swift_allocObject(&unk_1003A6758, 24LL, 7LL);
    uint64_t v19 = *(void **)&a1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
    *(void *)(v18 + swift_weakDestroy(v0 + 16) = a1;
    *uint64_t v5 = v19;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    uint64_t v20 = a1;
    id v21 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v5);
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    if ((v19 & 1) != 0)
    {
      uint64_t v23 = (void *)swift_allocObject(&unk_1003A6780, 40LL, 7LL);
      void v23[2] = v20;
      v23[3] = sub_1001EF96C;
      v23[4] = v18;
      uint64_t v24 = v20;
      swift_retain(v18);
      unint64_t v26 = v51;
      uint64_t v25 = v52;
      uint64_t v48 = v10;
      GroupSessionMessenger.send(_:to:completion:)(v52, v51, v9, sub_1001EFCCC, v23);
      swift_release(v18);
      swift_release(v23);
      sub_1001608B8(v25, v26);
      uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v53);
      uint64_t v27 = *(void **)&v24[OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger];
      if (v27)
      {
        uint64_t v28 = sub_100156B68((uint64_t *)&unk_1003F9AA0);
        uint64_t inited = swift_initStackObject(v28, &v56);
        *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C4E0;
        id v30 = v27;
        uint64_t v31 = sub_1002368B0();
        uint64_t v32 = *((void *)v31 + 1);
        uint64_t v54 = *(void *)v31;
        uint64_t v55 = v32;
        swift_bridgeObjectRetain_n(v32, 2LL);
        AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
        uint64_t v33 = sub_10023691C();
        uint64_t v35 = *(void *)v33;
        uint64_t v34 = *((void *)v33 + 1);
        *(void *)(inited + 96) = &type metadata for String;
        *(void *)(inited + 72) = v35;
        *(void *)(inited + 80) = v34;
        swift_bridgeObjectRetain();
        uint64_t v36 = (uint64_t *)sub_1002368E0();
        uint64_t v37 = v36[1];
        uint64_t v54 = *v36;
        uint64_t v55 = v37;
        swift_bridgeObjectRetain_n(v37, 2LL);
        AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
        uint64_t v39 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        uint64_t v38 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for String;
        *(void *)(inited + 144) = v39;
        *(void *)(inited + 152) = v38;
        swift_bridgeObjectRetain();
        os_log_t v40 = sub_1002368A4();
        uint64_t v41 = *((void *)v40 + 1);
        uint64_t v54 = *(void *)v40;
        uint64_t v55 = v41;
        swift_bridgeObjectRetain_n(v41, 2LL);
        uint64_t result = (void *)AnyHashable.init<A>(_:)(&v54, &type metadata for String, &protocol witness table for String);
        uint64_t v42 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
        if (v42)
        {
          uint64_t v43 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(inited + 240) = &type metadata for String;
          *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v43;
          *(void *)(inited + 224) = v42;
          sub_100159DBC(inited);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          swift_beginAccess( &v24[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v54,  0LL,  0LL);
          uint64_t v45 = swift_bridgeObjectRetain();
          sub_100159180(v45);
          Class v46 = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v30 sendMessage:isa toDestinations:v46];

          sub_1001608B8(v50, v49);
          return (void *)swift_release(v48);
        }

        goto LABEL_10;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }

  return sub_1001CF668(0LL);
}

uint64_t sub_1001B7600(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v45 = v8;
    swift_errorRetain(a1);
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v11, (uint64_t)qword_1003FF018);
    id v12 = a2;
    swift_errorRetain(a1);
    id v13 = v12;
    swift_errorRetain(a1);
    unint64_t v14 = v13;
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v4;
      uint64_t v19 = v18;
      uint64_t v20 = swift_slowAlloc(16LL, -1LL);
      uint64_t v41 = v7;
      id v21 = (void *)v20;
      uint64_t v38 = v20;
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v47 = v14;
      aBlock[0] = v42;
      *(_DWORD *)uint64_t v19 = 138543874;
      uint64_t v43 = v5;
      int v40 = v17;
      uint64_t v22 = v14;
      os_log_t v39 = v15;
      uint64_t v23 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v19 + 4, v19 + 12);
      void *v21 = v14;
      uint64_t v7 = v41;

      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v24 = *(void *)&v23[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v25 = *(void *)&v23[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v47 = (void *)sub_10015ADC4(v24, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v19 + 14, v19 + 22);

      uint64_t v5 = v43;
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2114;
      swift_errorRetain(a1);
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v47 = (void *)v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v19 + 24, v19 + 32);
      uint64_t v27 = v38;
      *(void *)(v38 + _Block_object_dispose(va, 8) = v26;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      os_log_t v28 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  (os_log_type_t)v40,  "[%{public}@]<%{public}s> SessionEndMessage send error %{public}@.",  (uint8_t *)v19,  0x20u);
      uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v27, 2LL, v29);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v30 = v42;
      swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v31 = v19;
      uint64_t v4 = v44;
      swift_slowDealloc(v31, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);

      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    uint64_t v8 = v45;
  }

  uint64_t v32 = swift_allocObject(&unk_1003A67A8, 24LL, 7LL);
  *(void *)(v32 + swift_weakDestroy(v0 + 16) = a2;
  aBlock[4] = (uint64_t)sub_1001EFD38;
  uint64_t v49 = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100157EA8;
  aBlock[3] = (uint64_t)&unk_1003A67C0;
  uint64_t v33 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a2);
  uint64_t v47 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v36 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v35, v36, v4, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v8);
  return swift_release(v49);
}

unint64_t sub_1001B7AA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(&qword_1003F9F08);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10015CAD4(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    id v13 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v13 = v7;
    v13[1] = v8;
    unint64_t v14 = (void *)(v4[7] + 16 * result);
    *unint64_t v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B7BC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68((uint64_t *)&unk_1003FB780);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1001A8360(v7, (uint64_t)&v16, &qword_1003F9E90);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10015CAD4(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100160944(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001B7CFC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100156B68(a2);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }

  swift_retain(v6);
  uint64_t v9 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v10 = *(v9 - 2);
    uint64_t v11 = *(v9 - 1);
    uint64_t v12 = *v9;
    swift_retain(v10);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001E12A0(v10, a3);
    if ((v14 & 1) != 0) {
      break;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v7[6] + 8 * result) = v10;
    uint64_t v15 = (void *)(v7[7] + 16 * result);
    *uint64_t v15 = v11;
    v15[1] = v12;
    uint64_t v16 = v7[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v9 += 3;
    void v7[2] = v18;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t MRDFastSyncGroupSession.prewarm(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = UUID.init()(v6);
  uint64_t v10 = UUID.uuidString.getter(v9);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v13 = *(dispatch_queue_s **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  char v14 = (void *)swift_allocObject(&unk_1003A4F38, 48LL, 7LL);
  v14[2] = v2;
  v14[3] = v10;
  void v14[4] = v12;
  void v14[5] = a1;
  uint64_t v15 = swift_allocObject(&unk_1003A4F60, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = sub_1001E6384;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_1001EFCC4;
  uint64_t v22 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B2FA0;
  aBlock[3] = &unk_1003A4F78;
  uint64_t v16 = _Block_copy(aBlock);
  uint64_t v17 = v22;
  uint64_t v18 = v2;
  swift_bridgeObjectRetain();
  id v19 = a1;
  swift_retain(v15);
  swift_release(v17);
  dispatch_async_and_wait(v13, v16);
  _Block_release(v16);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v15, "", 121LL, 391LL, 42LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v15);
  __break(1u);
  return result;
}

uint64_t sub_1001B8000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v16 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_1001E431C(a1, a2, a3, isUniquelyReferenced_nonNull_native, &qword_1003FA008);
    uint64_t *v3 = v16;
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_10015CAD4(a2, a3);
    char v11 = v10;
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      char v12 = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v13 = *v3;
      uint64_t v17 = *v4;
      uint64_t *v4 = 0x8000000000000000LL;
      if ((v12 & 1) == 0)
      {
        sub_1001E398C(&qword_1003FA008);
        uint64_t v13 = v17;
      }

      swift_bridgeObjectRelease();
      char v14 = *(void **)(*(void *)(v13 + 56) + 8 * v9);
      sub_1001B1630(v9, v13);
      uint64_t *v4 = v13;

      swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t MRDFastSyncGroupSession.cancel(prewarmedIdentifier:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(dispatch_queue_s **)&v3[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v8 = (void *)swift_allocObject(&unk_1003A4FB0, 48LL, 7LL);
  void v8[2] = v3;
  v8[3] = a1;
  void v8[4] = a2;
  v8[5] = a3;
  uint64_t v9 = swift_allocObject(&unk_1003A4FD8, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_1001E694C;
  *(void *)(v9 + 24) = v8;
  void v16[4] = sub_1001EFCC4;
  uint64_t v17 = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  void v16[2] = sub_1001B2FA0;
  v16[3] = &unk_1003A4FF0;
  char v10 = _Block_copy(v16);
  uint64_t v11 = v17;
  char v12 = v3;
  swift_bridgeObjectRetain();
  id v13 = a3;
  swift_retain(v9);
  swift_release(v11);
  dispatch_async_and_wait(v7, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 121LL, 407LL, 42LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall MRDFastSyncGroupSession.prepareForAddedMember()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v6, (uint64_t)qword_1003FF018);
  uint64_t v7 = v0;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = v11;
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = v7;
    aBlock[0] = v31;
    *(_DWORD *)uint64_t v10 = 138543874;
    os_log_t v30 = v8;
    char v12 = v7;
    uint64_t v32 = v2;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v10 + 4, v10 + 12);
    *uint64_t v11 = v7;

    *(_WORD *)(v10 + 12) = 2082;
    char v14 = v4;
    uint64_t v15 = v1;
    uint64_t v16 = *(void *)&v13[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v17 = *(void *)&v13[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v36 = (void *)sub_10015ADC4(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v10 + 14, v10 + 22);

    uint64_t v2 = v32;
    uint64_t v1 = v15;
    uint64_t v4 = v14;
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v36 = (void *)sub_10015ADC4(0xD000000000000017LL, 0x800000010033B820LL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v10 + 24, v10 + 32);
    os_log_t v18 = v30;
    _os_log_impl((void *)&_mh_execute_header, v30, v9, "[%{public}@]<%{public}s> %s", (uint8_t *)v10, 0x20u);
    uint64_t v19 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v20 = v29;
    swift_arrayDestroy(v29, 1LL, v19);
    swift_slowDealloc(v20, -1LL, -1LL);
    uint64_t v21 = v31;
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v22 = swift_allocObject(&unk_1003A5028, 24LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v7;
  aBlock[4] = (uint64_t)sub_1001E7248;
  uint64_t v38 = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100157EA8;
  aBlock[3] = (uint64_t)&unk_1003A5040;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = v7;
  unint64_t v25 = v34;
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v28 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v27, v28, v1, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v25, v4, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v33);
  swift_release(v38);
}

uint64_t MRDFastSyncGroupSession.shouldAutomaticallyApprove(identity:)(void *a1)
{
  unsigned __int8 v15 = 0;
  uint64_t v3 = *(dispatch_queue_s **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v4 = (void *)swift_allocObject(&unk_1003A5078, 40LL, 7LL);
  v4[2] = v1;
  void v4[3] = a1;
  void v4[4] = &v15;
  uint64_t v5 = swift_allocObject(&unk_1003A50A0, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = sub_1001E72B8;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1001EFCC4;
  uint64_t v14 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B2FA0;
  aBlock[3] = &unk_1003A50B8;
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v14;
  uint64_t v8 = v1;
  id v9 = a1;
  swift_retain(v5);
  swift_release(v7);
  dispatch_async_and_wait(v3, v6);
  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 121LL, 438LL, 42LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v12 = v15;
    swift_release(v4);
    return v12;
  }

  return result;
}

Swift::Void __swiftcall MRDFastSyncGroupSession.removeParticipant(identifier:)(Swift::String identifier)
{
}

void sub_1001B89A8(char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(&a1[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap], v54, 0LL, 0LL);
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1001E9900(v9, a2, a3);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
    swift_bridgeObjectRelease();
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v13, (uint64_t)qword_1003FF018);
    uint64_t v14 = a1;
    swift_bridgeObjectRetain_n(v12, 2LL);
    unsigned __int8 v15 = v14;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v49 = v20;
      uint64_t v50 = swift_slowAlloc(64LL, -1LL);
      uint64_t v52 = (uint64_t)v15;
      v53[0] = v50;
      *(_DWORD *)uint64_t v19 = 138543874;
      uint64_t v51 = v10;
      uint64_t v21 = v15;
      HIDWORD(v4_Block_object_dispose(va, 8) = v18;
      uint64_t v22 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v19 + 4, v19 + 12);
      *uint64_t v20 = v15;

      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v23 = v8;
      uint64_t v24 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v25 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_10015ADC4(v24, v25, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v19 + 14, v19 + 22);

      uint64_t v8 = v23;
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_10015ADC4(v51, v12, v53);
      uint64_t v10 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v19 + 24, v19 + 32);
      swift_bridgeObjectRelease_n(v12, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  BYTE4(v48),  "[%{public}@]<%{public}s> Removing member with handle: %{public}s.",  (uint8_t *)v19,  0x20u);
      uint64_t v26 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v27 = v49;
      swift_arrayDestroy(v49, 1LL, v26);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v28 = v50;
      swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    uint64_t v43 = *(void *)&v15[OBJC_IVAR___MRDFastSyncGroupSession_provider];
    uint64_t v44 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v8, 1LL, 1LL, v44);
    uint64_t v45 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v45 + 16, v15);
    uint64_t v46 = (void *)swift_allocObject(&unk_1003A6730, 64LL, 7LL);
    v46[2] = 0LL;
    v46[3] = 0LL;
    void v46[4] = v43;
    v46[5] = v10;
    v46[6] = v12;
    v46[7] = v45;
    swift_retain(v43);
    uint64_t v47 = sub_10015AA50((uint64_t)v8, (uint64_t)&unk_1003FA160, (uint64_t)v46);
    swift_release(v47);
  }

  else
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v29, (uint64_t)qword_1003FF018);
    os_log_t v30 = a1;
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v31 = v30;
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v50) = v34;
      uint64_t v36 = v35;
      uint64_t v37 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v51 = swift_slowAlloc(64LL, -1LL);
      uint64_t v52 = (uint64_t)v31;
      v53[0] = v51;
      *(_DWORD *)uint64_t v36 = 138543874;
      uint64_t v38 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v36 + 4, v36 + 12);
      *uint64_t v37 = v31;

      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v39 = *(void *)&v38[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v40 = *(void *)&v38[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_10015ADC4(v39, v40, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v36 + 14, v36 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_10015ADC4(a2, a3, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v50,  "[%{public}@]<%{public}s> Could not find participant for identifier %{public}s.",  (uint8_t *)v36,  0x20u);
      uint64_t v41 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v37, 1LL, v41);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v42 = v51;
      swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }
  }

void sub_1001B9004(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X8>)
{
  os_log_type_t v33 = a3;
  uint64_t v5 = type metadata accessor for Participant(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v35 = a1 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int v34 = a2;
  uint64_t v16 = &a2[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
  int64_t v36 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v38 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  for (i = v16; ; uint64_t v16 = i)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_23;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v21 >= v36) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v36) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v17);
        if (!v22)
        {
          int64_t v17 = v21 + 3;
          if (v21 + 3 >= v36) {
            goto LABEL_28;
          }
          unint64_t v22 = *(void *)(v35 + 8 * v17);
          if (!v22)
          {
            int64_t v23 = v21 + 4;
            if (v23 >= v36)
            {
LABEL_28:
              swift_release(v38);
              uint64_t v30 = 1LL;
              uint64_t v31 = v34;
              uint64_t v32 = v33;
              goto LABEL_31;
            }

            unint64_t v22 = *(void *)(v35 + 8 * v23);
            int64_t v17 = v23;
            if (!v22) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_1001B9300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v37 = a2;
  uint64_t v6 = type metadata accessor for NearbyGroup.Member(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v33 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v34 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t j = 0LL;
  uint64_t v35 = a3;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v12,  *(void *)(v36 + 48) + *(void *)(v7 + 72) * i,  v6);
    uint64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v24(v10, v12, v6);
    uint64_t v26 = NearbyGroup.Member.handle.getter(v25);
    uint64_t v28 = v27;
    if (v26 == v37 && v27 == a3)
    {
      swift_release(v36);
      swift_bridgeObjectRelease(a3);
LABEL_27:
      uint64_t v30 = v32;
      v24(v32, v10, v6);
      uint64_t v31 = 0LL;
LABEL_29:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v30, v31, 1LL, v6);
      return swift_bridgeObjectRelease(v35);
    }

    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v37, a3, 0LL);
    swift_bridgeObjectRelease(v28);
    if ((v29 & 1) != 0)
    {
      swift_release(v36);
      goto LABEL_27;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    a3 = v35;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v21 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v34) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v33 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v34)
    {
LABEL_28:
      swift_release(v36);
      uint64_t v31 = 1LL;
      uint64_t v30 = v32;
      goto LABEL_29;
    }

    unint64_t v22 = *(void *)(v33 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_31;
      }
      if (j >= v34) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v33 + 8 * j);
    }

uint64_t sub_1001B95E0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(uint64_t)@<X3>, char *a5@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v33 = a5;
  uint64_t v38 = a2;
  uint64_t v6 = a3(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v34 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v35 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v37 = a1;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t j = 0LL;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (j << 6); ; unint64_t i = __clz(__rbit64(v22)) + (j << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v12,  *(void *)(v37 + 48) + *(void *)(v7 + 72) * i,  v6);
    uint64_t v24 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v25 = v24(v10, v12, v6);
    uint64_t v26 = v36(v25);
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)(v38 + 16);
    uint64_t v30 = *(void *)(v38 + 24);
    if (v26 == v29 && v27 == v30)
    {
      swift_release(v37);
      swift_bridgeObjectRelease(v28);
LABEL_27:
      uint64_t v32 = v33;
      v24(v33, v10, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v32, 0LL, 1LL, v6);
      return swift_release(v38);
    }

    char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v29, v30, 0LL);
    swift_bridgeObjectRelease(v28);
    if ((v31 & 1) != 0)
    {
      swift_release(v37);
      goto LABEL_27;
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = j + 1;
    if (__OFADD__(j, 1LL)) {
      break;
    }
    if (v21 >= v35) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v21);
    ++j;
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 1;
    if (v21 + 1 >= v35) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v34 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 2;
    if (v21 + 2 >= v35) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v34 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t j = v21 + 3;
    if (v21 + 3 >= v35) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v34 + 8 * j);
    if (v22) {
      goto LABEL_19;
    }
    int64_t v23 = v21 + 4;
    if (v23 >= v35)
    {
LABEL_28:
      swift_release(v37);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v33, 1LL, 1LL, v6);
      return swift_release(v38);
    }

    unint64_t v22 = *(void *)(v34 + 8 * v23);
    for (int64_t j = v23; !v22; ++v23)
    {
      int64_t j = v23 + 1;
      if (__OFADD__(v23, 1LL)) {
        goto LABEL_31;
      }
      if (j >= v35) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v34 + 8 * j);
    }

uint64_t sub_1001B98B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  void v7[9] = a5;
  return swift_task_switch(sub_1001B98D4, 0LL, 0LL);
}

uint64_t sub_1001B98D4(uint64_t a1)
{
  v1[12] = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(a1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to NearbyGroup.kickMember(_:)[1]);
  v1[13] = v2;
  void *v2 = v1;
  v2[1] = sub_1001B9934;
  return NearbyGroup.kickMember(_:)(v1[9], v1[10]);
}

uint64_t sub_1001B9934()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1001B99A8, 0LL, 0LL);
  }
  swift_release(*(void *)(v3 + 96));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001B99A8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 96));
  v1 += 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v5, (uint64_t)qword_1003FF018);
    id v6 = v3;
    swift_bridgeObjectRetain_n(v4, 2LL);
    id v7 = v6;
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    unint64_t v11 = *(void *)(v0 + 80);
    if (v10)
    {
      uint64_t v20 = *(void *)(v0 + 72);
      uint64_t v22 = *(void *)(v0 + 112);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      os_log_type_t type = v9;
      uint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v21 = swift_slowAlloc(64LL, -1LL);
      uint64_t v23 = v21;
      *(_DWORD *)uint64_t v12 = 138543874;
      *(void *)(v0 + 40) = v7;
      uint64_t v14 = (char *)v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v12 + 4, v12 + 12);
      void *v13 = v3;

      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v15 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v16 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_10015ADC4(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();

      *(_WORD *)(v12 + 22) = 2082;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 56) = sub_10015ADC4(v20, v11, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease_n(v11, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  type,  "[%{public}@]<%s> Failed to remove member: %{public}s.",  (uint8_t *)v12,  0x20u);
      uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v13, 1LL, v17);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_errorRelease(v22);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 112));

      swift_bridgeObjectRelease_n(v11, 2LL);
    }
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 112));
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

id MRDFastSyncGroupSession.markParticipantAsGuestIfNeeded(_:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  BOOL v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [a1 guest];
  if ((_DWORD)result)
  {
    uint64_t v19 = *(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
    uint64_t v12 = swift_allocObject(&unk_1003A5140, 32LL, 7LL);
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = v1;
    *(void *)(v12 + 24) = a1;
    aBlock[4] = sub_1001E7648;
    uint64_t v22 = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100157EA8;
    aBlock[3] = &unk_1003A5158;
    uint64_t v13 = _Block_copy(aBlock);
    uint64_t v14 = v1;
    uint64_t v15 = swift_unknownObjectRetain(a1);
    static DispatchQoS.unspecified.getter(v15);
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v16 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v18 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v3, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v13);
    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return (id)swift_release(v22);
  }

  return result;
}

uint64_t MRDFastSyncGroupSession.addPendingParticipant(_:)(uint64_t a1)
{
  return sub_1001B9FF4(a1, (uint64_t)&unk_1003A5190, (uint64_t)sub_1001E76F0, (uint64_t)&unk_1003A51A8);
}

void sub_1001B9F28(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7 = a1;
  a4(a3);
  swift_unknownObjectRelease(a3);
}

uint64_t MRDFastSyncGroupSession.removePendingParticipant(_:)(uint64_t a1)
{
  return sub_1001B9FF4(a1, (uint64_t)&unk_1003A51E0, (uint64_t)sub_1001E7A40, (uint64_t)&unk_1003A51F8);
}

uint64_t MRDFastSyncGroupSession.remoteApprovePendingParticipant(_:)(uint64_t a1)
{
  return sub_1001B9FF4(a1, (uint64_t)&unk_1003A5230, (uint64_t)sub_1001E7DC8, (uint64_t)&unk_1003A5248);
}

uint64_t MRDFastSyncGroupSession.remoteRejectPendingParticipant(_:)(uint64_t a1)
{
  return sub_1001B9FF4(a1, (uint64_t)&unk_1003A5280, (uint64_t)sub_1001E7DF8, (uint64_t)&unk_1003A5298);
}

uint64_t sub_1001B9FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v16 = swift_allocObject(a2, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v16 + 24) = a1;
  aBlock[4] = a3;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = a4;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v4;
  uint64_t v19 = swift_unknownObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v22 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

void sub_1001BA1E8(void *a1, void *a2, const char *a3, int a4)
{
  int v70 = a4;
  uint64_t v72 = type metadata accessor for Participants(0LL);
  uint64_t v7 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100156B68(&qword_1003F9AB0);
  __chkstk_darwin(v10);
  uint64_t v74 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)type metadata accessor for Participant(0LL);
  uint64_t v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  NSString v71 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
  id v17 = a1;
  swift_unknownObjectRetain_n(a2, 2LL);
  uint64_t v18 = (char *)v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  int v21 = v20;
  BOOL v22 = os_log_type_enabled(v19, v20);
  uint64_t v75 = v13;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    int v66 = v21;
    uint64_t v24 = v23;
    uint64_t v25 = swift_slowAlloc(8LL, -1LL);
    uint64_t v73 = v12;
    uint64_t v26 = (void *)v25;
    uint64_t v65 = v25;
    uint64_t v67 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = (uint64_t)v18;
    uint64_t v77 = v67;
    *(_DWORD *)uint64_t v24 = 138543874;
    uint64_t v68 = v9;
    uint64_t v69 = v7;
    uint64_t v27 = v18;
    uint64_t v64 = a3;
    uint64_t v28 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 4, v24 + 12);
    void *v26 = v18;

    *(_WORD *)(v24 + 12) = 2082;
    uint64_t v30 = *(void *)&v28[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v29 = *(void *)&v28[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10015ADC4(v30, v29, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 14, v24 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2080;
    id v31 = [a2 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v34 = v33;

    uint64_t v35 = v32;
    uint64_t v7 = v69;
    uint64_t v76 = sub_10015ADC4(v35, v34, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 24, v24 + 32);
    swift_unknownObjectRelease_n(a2, 2LL);
    uint64_t v9 = v68;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v66, v64, (uint8_t *)v24, 0x20u);
    uint64_t v36 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v37 = v65;
    swift_arrayDestroy(v65, 1LL, v36);
    uint64_t v12 = v73;
    swift_slowDealloc(v37, -1LL, -1LL);
    uint64_t v38 = v67;
    swift_arrayDestroy(v67, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_unknownObjectRelease_n(a2, 2LL);
  }

  uint64_t v39 = *(void *)&v18[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v39)
  {
    uint64_t v40 = *(void *)&v18[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v40)
    {
      uint64_t v69 = v16;
      uint64_t v73 = a2;
      swift_retain(v39);
      uint64_t v41 = swift_retain(v40);
      uint64_t v42 = GroupSession.activeParticipants.getter(v41);
      uint64_t v43 = v18;
      uint64_t v44 = v74;
      sub_1001B9004(v42, v43, v74);
      swift_bridgeObjectRelease();
      uint64_t v45 = v75;
      if ((*(unsigned int (**)(char *, uint64_t, void *))(v75 + 48))(v44, 1LL, v12) != 1)
      {
        uint64_t v56 = v71;
        (*(void (**)(char *, char *, void *))(v45 + 32))(v71, v44, v12);
        uint64_t v57 = v45;
        id v58 = [v73 identifier];
        static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        uint64_t v73 = v12;

        sub_100237A98();
        id v62 = sub_100237C04(v60, v61, v59 & 1);
        swift_bridgeObjectRelease();
        static Participants.only(_:)(v56);
        sub_1001D73BC(8u, v62, (uint64_t)v9, v40, 0LL, 0LL);

        swift_release(v40);
        swift_release(v39);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v72);
        (*(void (**)(char *, void *))(v57 + 8))(v56, v73);
        return;
      }

      swift_release(v40);
      swift_release(v39);
      sub_1001603DC((uint64_t)v44, &qword_1003F9AB0);
    }
  }

  uint64_t v46 = v18;
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = (uint64_t)v46;
    uint64_t v77 = v51;
    *(_DWORD *)uint64_t v49 = 138543618;
    uint64_t v52 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v49 + 4, v49 + 12);
    *uint64_t v50 = v46;

    *(_WORD *)(v49 + 12) = 2082;
    uint64_t v53 = *(void *)&v52[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v54 = *(void *)&v52[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_10015ADC4(v53, v54, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v49 + 14, v49 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "[%{public}@]<%{public}s> Unable to message leader",  (uint8_t *)v49,  0x16u);
    uint64_t v55 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v50, 1LL, v55);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
  }

Swift::Void __swiftcall MRDFastSyncGroupSession.remoteRemoveParticipant(identifier:)(Swift::String identifier)
{
}

uint64_t sub_1001BA8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  id v17 = (void *)swift_allocObject(a3, 40LL, 7LL);
  void v17[2] = v5;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = a4;
  uint64_t v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = a5;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v5;
  uint64_t v20 = swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v23 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  return swift_release(v30);
}

void sub_1001BAAEC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v67 = a2;
  uint64_t v5 = type metadata accessor for Participants(0LL);
  uint64_t v64 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = sub_100156B68(&qword_1003F9AB0);
  __chkstk_darwin(v8);
  uint64_t v65 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for Participant(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v63 = &v55[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10015ADAC(v13, (uint64_t)qword_1003FF018);
  id v15 = a1;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v16 = (char *)v15;
  id v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  BOOL v20 = os_log_type_enabled(v17, v18);
  uint64_t v66 = v11;
  if (v20)
  {
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = swift_slowAlloc(8LL, -1LL);
    id v62 = (void *)v5;
    uint64_t v57 = v22;
    os_log_t v58 = v17;
    uint64_t v23 = (void *)v22;
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    uint64_t v68 = (uint64_t)v16;
    uint64_t v69 = v59;
    *(_DWORD *)uint64_t v21 = 138543874;
    uint64_t v60 = v10;
    uint64_t v61 = v7;
    uint64_t v24 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v21 + 4, v21 + 12);
    *uint64_t v23 = v16;

    *(_WORD *)(v21 + 12) = 2082;
    int v56 = v19;
    uint64_t v26 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v25 = *(void *)&v24[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v27 = v26;
    uint64_t v10 = v60;
    uint64_t v68 = sub_10015ADC4(v27, v25, &v69);
    uint64_t v7 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v21 + 14, v21 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_10015ADC4(v67, a3, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease_n(a3, 3LL);
    os_log_t v28 = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  (os_log_type_t)v56,  "[%{public}@]<%{public}s> Requesting to remove participant: %s",  (uint8_t *)v21,  0x20u);
    uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v30 = v57;
    swift_arrayDestroy(v57, 1LL, v29);
    uint64_t v5 = (uint64_t)v62;
    swift_slowDealloc(v30, -1LL, -1LL);
    uint64_t v31 = v59;
    swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v32 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v32)
  {
    uint64_t v33 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v33)
    {
      uint64_t v61 = (_BYTE *)v14;
      id v62 = (void *)a3;
      swift_retain(v32);
      uint64_t v34 = swift_retain(v33);
      uint64_t v35 = GroupSession.activeParticipants.getter(v34);
      uint64_t v36 = v16;
      uint64_t v37 = v65;
      sub_1001B9004(v35, v36, v65);
      swift_bridgeObjectRelease();
      uint64_t v38 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v37, 1LL, v10) != 1)
      {
        uint64_t v49 = v63;
        (*(void (**)(_BYTE *, char *, uint64_t))(v38 + 32))(v63, v37, v10);
        uint64_t v50 = v62;
        swift_bridgeObjectRetain();
        v51._uint64_t countAndFlagsBits = v67;
        v51._object = v50;
        ActivityController.endRouteRecommendationActivity(for:)(v51);
        id v54 = sub_100237DAC(v52, v53);
        swift_bridgeObjectRelease();
        static Participants.only(_:)(v49);
        sub_1001D73BC(9u, v54, (uint64_t)v7, v33, 0LL, 0LL);

        swift_release(v33);
        swift_release(v32);
        (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v7, v5);
        (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v49, v10);
        return;
      }

      swift_release(v33);
      swift_release(v32);
      sub_1001603DC((uint64_t)v37, &qword_1003F9AB0);
    }
  }

  uint64_t v39 = v16;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc(22LL, -1LL);
    uint64_t v43 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = (uint64_t)v39;
    uint64_t v69 = v44;
    *(_DWORD *)uint64_t v42 = 138543618;
    uint64_t v45 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v42 + 4, v42 + 12);
    char *v43 = v39;

    *(_WORD *)(v42 + 12) = 2082;
    uint64_t v46 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v47 = *(void *)&v45[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_10015ADC4(v46, v47, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v42 + 14, v42 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "[%{public}@]<%{public}s> Unable to message leader",  (uint8_t *)v42,  0x16u);
    uint64_t v48 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v43, 1LL, v48);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_1001BB180(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease(v8);
}

Swift::Void __swiftcall MRDFastSyncGroupSession.remoteRemoveAllParticipants()()
{
}

uint64_t sub_1001BB1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)&v3[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v14 = swift_allocObject(a1, 24LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v3;
  aBlock[4] = a2;
  uint64_t v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = a3;
  id v15 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v18 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

void sub_1001BB3DC(void *a1)
{
  uint64_t v52 = type metadata accessor for Participants(0LL);
  uint64_t v2 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100156B68(&qword_1003F9AB0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Participant(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v51 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10015ADAC(v11, (uint64_t)qword_1003FF018);
  uint64_t v13 = a1;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v53 = v7;
  uint64_t v54 = v9;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v46 = v18;
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v55 = (uint64_t)v13;
    uint64_t v56 = v48;
    *(_DWORD *)uint64_t v17 = 138543618;
    os_log_t v47 = v14;
    uint64_t v49 = v4;
    int v19 = v13;
    uint64_t v50 = v2;
    BOOL v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v17 + 4, v17 + 12);
    *uint64_t v18 = v13;

    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v21 = v8;
    uint64_t v22 = *(void *)&v20[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v23 = *(void *)&v20[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_10015ADC4(v22, v23, &v56);
    uint64_t v4 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v17 + 14, v17 + 22);

    uint64_t v2 = v50;
    uint64_t v8 = v21;
    swift_bridgeObjectRelease();
    os_log_t v24 = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  v15,  "[%{public}@]<%{public}s> Requesting to remove all participants",  (uint8_t *)v17,  0x16u);
    uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v26 = v46;
    swift_arrayDestroy(v46, 1LL, v25);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v48;
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v28 = *(void *)&v13[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (v28)
  {
    uint64_t v29 = *(void *)&v13[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
    if (v29)
    {
      uint64_t v50 = v12;
      swift_retain(v28);
      uint64_t v30 = swift_retain(v29);
      uint64_t v31 = GroupSession.activeParticipants.getter(v30);
      uint64_t v32 = v13;
      uint64_t v33 = v53;
      sub_1001B9004(v31, v32, v53);
      swift_bridgeObjectRelease();
      uint64_t v34 = v54;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v33, 1LL, v8) != 1)
      {
        uint64_t v45 = v51;
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v51, v33, v8);
        static Participants.only(_:)(v45);
        sub_1001D73BC(0xAu, 0LL, (uint64_t)v4, v29, 0LL, 0LL);
        swift_release(v29);
        swift_release(v28);
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v52);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v45, v8);
        return;
      }

      swift_release(v29);
      swift_release(v28);
      sub_1001603DC((uint64_t)v33, &qword_1003F9AB0);
    }
  }

  uint64_t v35 = v13;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc(22LL, -1LL);
    uint64_t v39 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v55 = (uint64_t)v35;
    uint64_t v56 = v40;
    *(_DWORD *)uint64_t v38 = 138543618;
    os_log_type_t v41 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 4, v38 + 12);
    *uint64_t v39 = v35;

    *(_WORD *)(v38 + 12) = 2082;
    uint64_t v42 = *(void *)&v41[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v43 = *(void *)&v41[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_10015ADC4(v42, v43, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v38 + 14, v38 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "[%{public}@]<%{public}s> Unable to message leader",  (uint8_t *)v38,  0x16u);
    uint64_t v44 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v39, 1LL, v44);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
  }

uint64_t MRDFastSyncGroupSession.enterLowPowerMode(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v11, (uint64_t)qword_1003FF018);
  uint64_t v12 = v2;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    os_log_type_t v41 = v8;
    uint64_t v16 = v15;
    uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
    os_log_type_t v37 = v17;
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v12;
    aBlock[0] = v38;
    *(_DWORD *)uint64_t v16 = 138412546;
    uint64_t v42 = v6;
    uint64_t v39 = a1;
    uint64_t v40 = a2;
    uint64_t v18 = v12;
    uint64_t v43 = v5;
    int v19 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, aBlock, v16 + 4, v16 + 12);
    *uint64_t v17 = v12;

    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = v9;
    uint64_t v21 = *(void *)&v19[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v22 = *(void *)&v19[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v23 = v21;
    uint64_t v6 = v42;
    uint64_t v46 = (void *)sub_10015ADC4(v23, v22, aBlock);
    a1 = v39;
    a2 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, aBlock, v16 + 14, v16 + 22);

    uint64_t v5 = v43;
    uint64_t v9 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%@]<%s> Enter low-power mode", (uint8_t *)v16, 0x16u);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v25 = v37;
    swift_arrayDestroy(v37, 1LL, v24);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v38;
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v16;
    uint64_t v8 = v41;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v28 = (void *)swift_allocObject(&unk_1003A5370, 40LL, 7LL);
  v28[2] = v12;
  v28[3] = a1;
  void v28[4] = a2;
  aBlock[4] = (uint64_t)sub_1001E7E6C;
  uint64_t v48 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100157EA8;
  aBlock[3] = (uint64_t)&unk_1003A5388;
  uint64_t v29 = _Block_copy(aBlock);
  uint64_t v30 = v12;
  uint64_t v31 = swift_retain(a2);
  uint64_t v32 = v44;
  static DispatchQoS.unspecified.getter(v31);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v35 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v35, v5, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v8, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v9);
  return swift_release(v48);
}

uint64_t sub_1001BBE14(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v133 = a3;
  uint64_t v134 = a2;
  id v135 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v126 = *(v135 - 1);
  __chkstk_darwin(v135);
  uint64_t v5 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v127 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  char v128 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v129 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v130 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Participants(0LL);
  uint64_t v9 = *(char **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003F9AB0);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Participant(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = OBJC_IVAR___MRDFastSyncGroupSession__state;
  if (*(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession__state] != 3LL)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v30 = (void (*)(void, void, void))v135;
    uint64_t v31 = sub_10015ADAC((uint64_t)v135, (uint64_t)qword_1003FF018);
    uint64_t v32 = v126;
    (*(void (**)(char *, uint64_t, void))(v126 + 16))(v5, v31, v30);
    uint64_t v33 = a1;
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    int v35 = static os_log_type_t.error.getter();
    uint64_t v125 = v34;
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      LODWORD(v123) = v35;
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      os_log_type_t v37 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v124 = (void **)swift_slowAlloc(64LL, -1LL);
      uint64_t v136 = v33;
      uint64_t aBlock = v124;
      *(_DWORD *)uint64_t v36 = 138543874;
      uint64_t v9 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v36 + 4, v36 + 12);
      uint64_t v122 = v37;
      *os_log_type_t v37 = v33;

      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v39 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v38 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v136 = (void *)sub_10015ADC4(v39, v38, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v36 + 14, v36 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2080;
      unint64_t v40 = *(void *)&a1[v19];
      if (v40 >= 5) {
        goto LABEL_48;
      }
      uint64_t v136 = (void *)sub_10015ADC4( *(void *)&aInitial_0[8 * v40],  *(void *)&aInvalida[8 * v40 + 8],  (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v36 + 24, v36 + 32);

      swift_bridgeObjectRelease();
      os_log_type_t v41 = v125;
      _os_log_impl( (void *)&_mh_execute_header,  v125,  (os_log_type_t)v123,  "[%{public}@]<%{public}s> Cannot enter low-power mode in state: %s.",  (uint8_t *)v36,  0x20u);
      uint64_t v42 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v43 = v122;
      swift_arrayDestroy(v122, 1LL, v42);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v44 = (uint64_t)v124;
      swift_arrayDestroy(v124, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);

      (*(void (**)(char *, void *))(v126 + 8))(v5, v135);
    }

    else
    {

      (*(void (**)(char *, void (*)(void, void, void)))(v32 + 8))(v5, v30);
    }

    uint64_t v56 = v131;
    uint64_t v55 = v132;
    uint64_t v58 = v129;
    uint64_t v57 = v130;
    uint64_t v59 = v128;
    uint64_t v60 = swift_allocObject(&unk_1003A6370, 32LL, 7LL);
    uint64_t v61 = v133;
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = v134;
    *(void *)(v60 + 24) = v61;
    uint64_t v141 = sub_1001EF5D4;
    uint64_t v142 = v60;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v138 = 1107296256LL;
    id v62 = &unk_1003A6388;
LABEL_27:
    uint64_t v139 = sub_100157EA8;
    uint64_t v140 = v62;
    uint64_t v72 = _Block_copy(&aBlock);
    uint64_t v73 = swift_retain(v61);
    static DispatchQoS.unspecified.getter(v73);
    uint64_t v136 = _swiftEmptyArrayStorage;
    uint64_t v74 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v75 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v76 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v136, v75, v76, v56, v74);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v59, v72);
LABEL_28:
    _Block_release(v72);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v59, v56);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v55);
    uint64_t v77 = v142;
    return swift_release(v77);
  }

  if ((a1[OBJC_IVAR___MRDFastSyncGroupSession_isLowPowerMode] & 1) != 0)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC((uint64_t)v135, (uint64_t)qword_1003FF018);
    uint64_t v20 = a1;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = (char **)swift_slowAlloc(8LL, -1LL);
      id v135 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v136 = v20;
      uint64_t aBlock = (void **)v135;
      *(_DWORD *)uint64_t v23 = 138543618;
      uint64_t v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v23 + 4, v23 + 12);
      *uint64_t v24 = v20;

      *(_WORD *)(v23 + 12) = 2082;
      uint64_t v27 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v26 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v136 = (void *)sub_10015ADC4(v27, v26, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v23 + 14, v23 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "[%{public}@]<%{public}s> Already in low power mode.",  (uint8_t *)v23,  0x16u);
      uint64_t v28 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v24, 1LL, v28);
      swift_slowDealloc(v24, -1LL, -1LL);
      uint64_t v29 = (void (*)(void, void, void))v135;
      swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v56 = v131;
    uint64_t v55 = v132;
    uint64_t v58 = v129;
    uint64_t v57 = v130;
    uint64_t v59 = v128;
    uint64_t v63 = v134;
    uint64_t v64 = swift_allocObject(&unk_1003A6528, 32LL, 7LL);
    *(void *)(v64 + swift_weakDestroy(v0 + 16) = v63;
    uint64_t v61 = v133;
    *(void *)(v64 + 24) = v133;
    uint64_t v141 = sub_1001EFFB0;
    uint64_t v142 = v64;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v138 = 1107296256LL;
    id v62 = &unk_1003A6540;
    goto LABEL_27;
  }

  if (*(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion])
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC((uint64_t)v135, (uint64_t)qword_1003FF018);
    uint64_t v45 = a1;
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = (char **)swift_slowAlloc(8LL, -1LL);
      id v135 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v136 = v45;
      uint64_t aBlock = (void **)v135;
      *(_DWORD *)uint64_t v48 = 138543618;
      uint64_t v50 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v48 + 4, v48 + 12);
      *uint64_t v49 = v45;

      *(_WORD *)(v48 + 12) = 2082;
      uint64_t v52 = *(void *)&v50[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v51 = *(void *)&v50[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v136 = (void *)sub_10015ADC4(v52, v51, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v48 + 14, v48 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "[%{public}@]<%{public}s> Cannot enter low power mode while updating low power state.",  (uint8_t *)v48,  0x16u);
      uint64_t v53 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v49, 1LL, v53);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v54 = (void (*)(void, void, void))v135;
      swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v56 = v131;
    uint64_t v55 = v132;
    uint64_t v58 = v129;
    uint64_t v57 = v130;
    uint64_t v59 = v128;
    uint64_t v70 = v134;
    uint64_t v71 = swift_allocObject(&unk_1003A64D8, 32LL, 7LL);
    *(void *)(v71 + swift_weakDestroy(v0 + 16) = v70;
    uint64_t v61 = v133;
    *(void *)(v71 + 24) = v133;
    uint64_t v141 = sub_1001EF5D4;
    uint64_t v142 = v71;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v138 = 1107296256LL;
    id v62 = &unk_1003A64F0;
    goto LABEL_27;
  }

  uint64_t v65 = *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (!v65)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC((uint64_t)v135, (uint64_t)qword_1003FF018);
    uint64_t v79 = a1;
    os_log_type_t v80 = (os_log_s *)Logger.logObject.getter(v79);
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = swift_slowAlloc(22LL, -1LL);
      uint64_t v83 = (char **)swift_slowAlloc(8LL, -1LL);
      id v135 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v136 = v79;
      uint64_t aBlock = (void **)v135;
      *(_DWORD *)uint64_t v82 = 138543618;
      uint64_t v84 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v82 + 4, v82 + 12);
      *uint64_t v83 = v79;

      *(_WORD *)(v82 + 12) = 2082;
      uint64_t v86 = *(void *)&v84[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v85 = *(void *)&v84[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v136 = (void *)sub_10015ADC4(v86, v85, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v82 + 14, v82 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "[%{public}@]<%{public}s> No groupSession to leave.",  (uint8_t *)v82,  0x16u);
      uint64_t v87 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v83, 1LL, v87);
      swift_slowDealloc(v83, -1LL, -1LL);
      uint64_t v88 = (void (*)(void, void, void))v135;
      swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v56 = v131;
    uint64_t v55 = v132;
    uint64_t v58 = v129;
    uint64_t v57 = v130;
    uint64_t v59 = v128;
    uint64_t v110 = v134;
    uint64_t v111 = swift_allocObject(&unk_1003A63C0, 32LL, 7LL);
    *(void *)(v111 + swift_weakDestroy(v0 + 16) = v110;
    uint64_t v61 = v133;
    *(void *)(v111 + 24) = v133;
    uint64_t v141 = sub_1001EF6B8;
    uint64_t v142 = v111;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v138 = 1107296256LL;
    id v62 = &unk_1003A63D8;
    goto LABEL_27;
  }

  uint64_t v66 = *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
  uint64_t v126 = *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  if (!v66)
  {
    swift_retain(v65);
    goto LABEL_35;
  }

  uint64_t v123 = (uint64_t *)&a1[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  swift_retain(v65);
  uint64_t v67 = swift_retain(v66);
  uint64_t v68 = GroupSession.activeParticipants.getter(v67);
  uint64_t v69 = a1;
  uint64_t v124 = (void **)v66;
  uint64_t v125 = v69;
  unint64_t v40 = 0LL;
  sub_1001B9004(v68, (char *)v69, v14);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    swift_release(v124);
    sub_1001603DC((uint64_t)v14, &qword_1003F9AB0);
LABEL_35:
    uint64_t v89 = (void (*)(void, void, void))v135;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC((uint64_t)v89, (uint64_t)qword_1003FF018);
    uint64_t v90 = a1;
    unint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = swift_slowAlloc(22LL, -1LL);
      uint64_t v94 = (char **)swift_slowAlloc(8LL, -1LL);
      id v135 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v136 = v90;
      uint64_t aBlock = (void **)v135;
      *(_DWORD *)uint64_t v93 = 138543618;
      uint64_t v95 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v93 + 4, v93 + 12);
      char *v94 = v90;

      *(_WORD *)(v93 + 12) = 2082;
      uint64_t v97 = *(void *)&v95[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v96 = *(void *)&v95[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v136 = (void *)sub_10015ADC4(v97, v96, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &aBlock, v93 + 14, v93 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "[%{public}@]<%{public}s> Cannot send send low power message.",  (uint8_t *)v93,  0x16u);
      uint64_t v98 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v94, 1LL, v98);
      swift_slowDealloc(v94, -1LL, -1LL);
      uint64_t v99 = (void (*)(void, void, void))v135;
      swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v56 = v131;
    uint64_t v55 = v132;
    uint64_t v58 = v129;
    uint64_t v57 = v130;
    uint64_t v59 = v128;
    uint64_t v100 = v134;
    uint64_t v101 = swift_allocObject(&unk_1003A6410, 32LL, 7LL);
    *(void *)(v101 + swift_weakDestroy(v0 + 16) = v100;
    uint64_t v102 = v133;
    *(void *)(v101 + 24) = v133;
    uint64_t v141 = sub_1001EF6C0;
    uint64_t v142 = v101;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v138 = 1107296256LL;
    uint64_t v139 = sub_100157EA8;
    uint64_t v140 = &unk_1003A6428;
    uint64_t v72 = _Block_copy(&aBlock);
    uint64_t v103 = swift_retain(v102);
    static DispatchQoS.unspecified.getter(v103);
    uint64_t v136 = _swiftEmptyArrayStorage;
    uint64_t v104 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v105 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v106 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v136, v105, v106, v56, v104);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v59, v72);
    swift_release(v126);
    goto LABEL_28;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  uint64_t v107 = *(void *)((char *)v125 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager);
  if (v107)
  {
    uint64_t v108 = *(void *)((char *)v125 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8);
    if (v108)
    {
      uint64_t v109 = *(void *)((char *)v125 + OBJC_IVAR___MRDFastSyncGroupSession_localHandle);
      id v135 = *(void **)(*(void *)v107 + 368LL);
      swift_retain(v107);
      swift_bridgeObjectRetain();
      ((void (*)(uint64_t, uint64_t, uint64_t))v135)(1LL, v109, v108);
      swift_release(v107);
      swift_bridgeObjectRelease();
      static Participants.only(_:)(v18);
      uint64_t v112 = (uint64_t)v124;
      uint64_t v113 = v125;
      sub_1001D73BC(6u, 0LL, (uint64_t)v11, (uint64_t)v124, 0LL, 0LL);
      (*((void (**)(char *, uint64_t))v9 + 1))(v11, v8);
      uint64_t v115 = v133;
      uint64_t v114 = v134;
      uint64_t v116 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v116 + 16, v113);
      uint64_t v117 = (void *)swift_allocObject(&unk_1003A64B0, 40LL, 7LL);
      v117[2] = v116;
      v117[3] = v114;
      v117[4] = v115;
      uint64_t v118 = v123;
      uint64_t v119 = *v123;
      uint64_t v120 = v123[1];
      uint64_t *v123 = (uint64_t)sub_1001EF710;
      v118[1] = (uint64_t)v117;
      swift_retain(v116);
      swift_retain(v115);
      sub_100162944(v119, v120);
      swift_release(v126);
      swift_release(v112);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      uint64_t v77 = v116;
      return swift_release(v77);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_48:

  uint64_t v136 = (void *)v40;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for MRDFastSyncGroupSessionState,  &v136,  &type metadata for MRDFastSyncGroupSessionState,  &type metadata for Int);
  __break(1u);
  return result;
}

void sub_1001BD21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  uint64_t v7 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v13 - 8);
  uint64_t v47 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v53, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v21 = (char *)Strong;
    uint64_t v45 = a4;
    os_log_type_t v22 = *(void **)(Strong + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
    *uint64_t v19 = v22;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))( v19,  enum case for DispatchPredicate.onQueue(_:),  v16);
    id v23 = v22;
    LOBYTE(v22) = _dispatchPreconditionTest(_:)(v19);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
    if ((v22 & 1) != 0)
    {
      if (a1)
      {
        uint64_t v24 = (void *)swift_allocObject(&unk_1003A65A0, 40LL, 7LL);
        uint64_t v25 = v45;
        void v24[2] = v49;
        v24[3] = v25;
        v24[4] = a1;
        aBlock[4] = sub_1001EF65C;
        uint64_t v52 = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_100157EA8;
        aBlock[3] = &unk_1003A65B8;
        unint64_t v26 = _Block_copy(aBlock);
        swift_retain(v25);
        uint64_t v27 = swift_errorRetain(a1);
        static DispatchQoS.unspecified.getter(v27);
        uint64_t v50 = _swiftEmptyArrayStorage;
        uint64_t v28 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003F9A70);
        uint64_t v30 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v29, v30, v10, v28);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v10);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v47);
        swift_release(v52);
        uint64_t v31 = &v21[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
        uint64_t v32 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
        uint64_t v33 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8];
        *(void *)uint64_t v31 = 0LL;
        *((void *)v31 + 1) = 0LL;
        sub_100162944(v32, v33);
      }

      else
      {
        uint64_t v34 = *(void **)&v21[OBJC_IVAR___MRDFastSyncGroupSession__state];
        *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession__state] = 1LL;
        sub_1001B29A0(v34);
        uint64_t v35 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger];
        *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_groupMessenger] = 0LL;
        swift_release(v35);
        uint64_t v36 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
        *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_groupSession] = 0LL;
        swift_release(v36);
        os_log_type_t v37 = &v21[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables];
        swift_beginAccess(&v21[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables], aBlock, 1LL, 0LL);
        *(void *)os_log_type_t v37 = &_swiftEmptySetSingleton;
        swift_bridgeObjectRelease();
        uint64_t v38 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v9, 1LL, 1LL, v38);
        uint64_t v39 = (void *)swift_allocObject(&unk_1003A6578, 56LL, 7LL);
        v39[2] = 0LL;
        v39[3] = 0LL;
        uint64_t v40 = v49;
        void v39[4] = v21;
        v39[5] = v40;
        uint64_t v41 = v45;
        v39[6] = v45;
        swift_retain(v41);
        uint64_t v42 = v21;
        uint64_t v43 = sub_10015AA50((uint64_t)v9, (uint64_t)&unk_1003FA148, (uint64_t)v39);

        swift_release(v43);
      }
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_1001BD63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[29] = a5;
  v6[30] = a6;
  v6[28] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v6[31] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[32] = v8;
  v6[33] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  v6[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[35] = v10;
  v6[36] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001BD6C8, 0LL, 0LL);
}

uint64_t sub_1001BD6C8()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = (void *)v0[28];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[37] = sub_10015ADAC(v2, (uint64_t)qword_1003FF018);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[28];
  if (v5)
  {
    log = v3;
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    os_log_type_t type = v4;
    uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v7 = 138543618;
    v0[26] = v6;
    uint64_t v9 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v7 + 4, v7 + 12);
    void *v8 = v6;

    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v0[27] = sub_10015ADC4(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();

    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%{public}@]<%{public}s> Calling provider.leave",  (uint8_t *)v7,  0x16u);
    uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v8, 1LL, v12);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v13 = *(void *)(v0[28] + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  v0[38] = v13;
  uint64_t v14 = async function pointer to GroupSessionProvider.leave()[1];
  swift_retain(v13);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v0[39] = v15;
  uint64_t v16 = sub_100156B68(&qword_1003F9950);
  uint64_t v17 = sub_1001604E8( &qword_1003F9FA8,  &qword_1003F9950,  (uint64_t)&protocol conformance descriptor for NearbyGroupSessionProvider<A>);
  *uint64_t v15 = v0;
  v15[1] = sub_1001BD990;
  return GroupSessionProvider.leave()(v16, v17);
}

uint64_t sub_1001BD990()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 312);
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1001BDBC0;
  }

  else
  {
    swift_release(*(void *)(v2 + 304));
    os_log_type_t v4 = sub_1001BD9FC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001BD9FC()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[33];
  uint64_t v16 = v0[35];
  uint64_t v17 = v0[34];
  uint64_t v3 = v0[31];
  uint64_t v15 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = swift_allocObject(&unk_1003A6690, 40LL, 7LL);
  uint64_t v6 = (void *)v0[28];
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = *((_OWORD *)v0 + 14);
  *(void *)(v5 + 32) = v4;
  v0[12] = sub_1001EF8B4;
  v0[13] = v5;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256LL;
  v0[10] = sub_100157EA8;
  v0[11] = &unk_1003A66A8;
  uint64_t v7 = _Block_copy(v0 + 8);
  id v8 = v6;
  uint64_t v9 = swift_retain(v4);
  static DispatchQoS.unspecified.getter(v9);
  v0[25] = _swiftEmptyArrayStorage;
  uint64_t v10 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v11 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v12 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 25, v11, v12, v3, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v7);
  _Block_release(v7);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v1, v17);
  swift_release(v0[13]);
  uint64_t v13 = v0[33];
  swift_task_dealloc(v0[36]);
  swift_task_dealloc(v13);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1001BDBC0()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = (void *)v0[28];
  swift_release(v0[38]);
  id v3 = v2;
  swift_errorRetain(v1);
  id v4 = v3;
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[40];
    uint64_t v9 = (void *)v0[28];
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(16LL, -1LL);
    log = v6;
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    v0[21] = v9;
    uint64_t v45 = v43;
    *(_DWORD *)uint64_t v10 = 138543874;
    uint64_t v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v10 + 4, v10 + 12);
    *uint64_t v11 = v9;

    *(_WORD *)(v10 + 12) = 2082;
    uint64_t v14 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v13 = *(void *)&v12[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v0[22] = sub_10015ADC4(v14, v13, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain(v8);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v8);
    v0[23] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v10 + 24, v10 + 32);
    v11[1] = v15;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v7,  "[%{public}@]<%{public}s> Failure on provider.leave: %{public}@",  (uint8_t *)v10,  0x20u);
    uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v11, 2LL, v16);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    uint64_t v17 = v0[40];
    uint64_t v18 = (void *)v0[28];

    swift_errorRelease(v17);
    swift_errorRelease(v17);
  }

  uint64_t v19 = v0[40];
  uint64_t v20 = v0[36];
  uint64_t v21 = v0[33];
  os_log_t loga = (os_log_t)v0[35];
  uint64_t v44 = v0[34];
  uint64_t v22 = v0[31];
  uint64_t v24 = v0[29];
  uint64_t v23 = v0[30];
  uint64_t v25 = (void *)v0[28];
  *(void *)os_log_type_t type = v0[32];
  unint64_t v26 = (void *)swift_allocObject(&unk_1003A65F0, 40LL, 7LL);
  v26[2] = v24;
  v26[3] = v23;
  v26[4] = v19;
  v0[6] = sub_1001EF65C;
  v0[7] = v26;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_100157EA8;
  v0[5] = &unk_1003A6608;
  uint64_t v27 = _Block_copy(v0 + 2);
  swift_retain(v23);
  uint64_t v28 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v28);
  v0[24] = _swiftEmptyArrayStorage;
  uint64_t v38 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v37 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v29 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v37, v29, v22, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v20, v21, v27);
  _Block_release(v27);
  os_log_type_t typea = *(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL);
  typea(v21, v22);
  uint64_t v30 = (void (*)(uint64_t, uint64_t))*((void *)loga + 1);
  v30(v20, v44);
  swift_release(v0[7]);
  uint64_t v31 = swift_allocObject(&unk_1003A6640, 32LL, 7LL);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v25;
  *(void *)(v31 + 24) = v19;
  v0[14] = _NSConcreteStackBlock;
  v0[18] = sub_1001EFFAC;
  v0[19] = v31;
  v0[15] = 1107296256LL;
  v0[16] = sub_100157EA8;
  v0[17] = &unk_1003A6658;
  uint64_t v32 = _Block_copy(v0 + 14);
  id v33 = v25;
  uint64_t v34 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v34);
  v0[20] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 20, v37, v29, v22, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v20, v21, v32);
  _Block_release(v32);
  swift_errorRelease(v19);
  typea(v21, v22);
  v30(v20, v44);
  swift_release(v0[19]);
  uint64_t v35 = v0[33];
  swift_task_dealloc(v0[36]);
  swift_task_dealloc(v35);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1001BE0EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(a1 + OBJC_IVAR___MRDFastSyncGroupSession_isLowPowerMode) = 1;
  unint64_t v13 = (void *)(a1 + OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion);
  uint64_t v14 = *(void *)(a1 + OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion);
  uint64_t v15 = *(void *)(a1 + OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8);
  void *v13 = 0LL;
  v13[1] = 0LL;
  sub_100162944(v14, v15);
  uint64_t v16 = swift_allocObject(&unk_1003A66E0, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  aBlock[4] = sub_1001EFFB0;
  uint64_t v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A66F8;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v26);
}

void sub_1001BE330(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t MRDFastSyncGroupSession.exitLowPowerMode(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v44 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v11, (uint64_t)qword_1003FF018);
  uint64_t v12 = v2;
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v41 = v8;
    uint64_t v16 = v15;
    uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v37 = v17;
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v12;
    aBlock[0] = v38;
    *(_DWORD *)uint64_t v16 = 138543618;
    uint64_t v42 = v6;
    uint64_t v39 = a1;
    uint64_t v40 = a2;
    uint64_t v18 = v12;
    uint64_t v43 = v5;
    uint64_t v19 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, aBlock, v16 + 4, v16 + 12);
    *uint64_t v17 = v12;

    *(_WORD *)(v16 + 12) = 2082;
    uint64_t v20 = v9;
    uint64_t v21 = *(void *)&v19[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v22 = *(void *)&v19[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v23 = v21;
    uint64_t v6 = v42;
    uint64_t v46 = (void *)sub_10015ADC4(v23, v22, aBlock);
    a1 = v39;
    a2 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, aBlock, v16 + 14, v16 + 22);

    uint64_t v5 = v43;
    uint64_t v9 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[%{public}@]<%{public}s> Exit low-power mode",  (uint8_t *)v16,  0x16u);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v25 = v37;
    swift_arrayDestroy(v37, 1LL, v24);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v38;
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v16;
    uint64_t v8 = v41;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v28 = (void *)swift_allocObject(&unk_1003A53C0, 40LL, 7LL);
  v28[2] = v12;
  v28[3] = a1;
  void v28[4] = a2;
  aBlock[4] = (uint64_t)sub_1001E7E84;
  uint64_t v48 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100157EA8;
  aBlock[3] = (uint64_t)&unk_1003A53D8;
  uint64_t v29 = _Block_copy(aBlock);
  uint64_t v30 = v12;
  uint64_t v31 = swift_retain(a2);
  uint64_t v32 = v44;
  static DispatchQoS.unspecified.getter(v31);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v33 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v35 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v34, v35, v5, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v8, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v9);
  return swift_release(v48);
}

uint64_t sub_1001BE7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v149 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(unsigned __int8 **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v145 = (char *)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v146 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v144 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v9);
  uint64_t v141 = (void **)((char *)&v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100156B68(&qword_1003F9A90);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v17) = v16[OBJC_IVAR___MRDFastSyncGroupSession_isLowPowerMode];
  uint64_t v147 = v5;
  uint64_t v148 = v7;
  if ((_DWORD)v17 != 1)
  {
    uint64_t v32 = v16;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v33, (uint64_t)qword_1003FF018);
    uint64_t v34 = v32;
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v140 = v38;
      uint64_t v141 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v152 = v34;
      uint64_t aBlock = v141;
      *(_DWORD *)uint64_t v37 = 138543618;
      uint64_t v142 = v4;
      uint64_t v143 = a3;
      uint64_t v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v37 + 4, v37 + 12);
      *uint64_t v38 = v34;

      *(_WORD *)(v37 + 12) = 2082;
      uint64_t v40 = *(void *)&v39[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v41 = *(void *)&v39[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v152 = (void *)sub_10015ADC4(v40, v41, (uint64_t *)&aBlock);
      uint64_t v4 = v142;
      a3 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v37 + 14, v37 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "[%{public}@]<%{public}s> Not in low power mode.",  (uint8_t *)v37,  0x16u);
      uint64_t v42 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v43 = v140;
      swift_arrayDestroy(v140, 1LL, v42);
      swift_slowDealloc(v43, -1LL, -1LL);
      uint64_t v44 = v141;
      swift_arrayDestroy(v141, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v45 = swift_allocObject(&unk_1003A60F0, 32LL, 7LL);
    *(void *)(v45 + swift_weakDestroy(v0 + 16) = v149;
    *(void *)(v45 + 24) = a3;
    uint64_t v157 = sub_1001EFFB0;
    uint64_t v158 = v45;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v154 = 1107296256LL;
    uint64_t v46 = &unk_1003A6108;
    goto LABEL_19;
  }

  if (*(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion])
  {
    uint64_t v19 = v16;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v20, (uint64_t)qword_1003FF018);
    uint64_t v21 = v19;
    unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc(22LL, -1LL);
      uint64_t v25 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v140 = v25;
      uint64_t v141 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v152 = v21;
      uint64_t aBlock = v141;
      *(_DWORD *)uint64_t v24 = 138543618;
      uint64_t v142 = v4;
      uint64_t v143 = a3;
      uint64_t v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v24 + 4, v24 + 12);
      void *v25 = v21;

      *(_WORD *)(v24 + 12) = 2082;
      uint64_t v27 = *(void *)&v26[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v28 = *(void *)&v26[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v152 = (void *)sub_10015ADC4(v27, v28, (uint64_t *)&aBlock);
      uint64_t v4 = v142;
      a3 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &aBlock, v24 + 14, v24 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[%{public}@]<%{public}s> Cannot exit low power mode while updating low power state.",  (uint8_t *)v24,  0x16u);
      uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v30 = v140;
      swift_arrayDestroy(v140, 1LL, v29);
      swift_slowDealloc(v30, -1LL, -1LL);
      uint64_t v31 = v141;
      swift_arrayDestroy(v141, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v54 = swift_allocObject(&unk_1003A61E0, 32LL, 7LL);
    *(void *)(v54 + swift_weakDestroy(v0 + 16) = v149;
    *(void *)(v54 + 24) = a3;
    uint64_t v157 = sub_1001EF5D4;
    uint64_t v158 = v54;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v154 = 1107296256LL;
    uint64_t v46 = &unk_1003A61F8;
LABEL_19:
    uint64_t v155 = sub_100157EA8;
    uint64_t v156 = v46;
    uint64_t v55 = _Block_copy(&aBlock);
    uint64_t v56 = swift_retain(a3);
    uint64_t v57 = v144;
    static DispatchQoS.unspecified.getter(v56);
    uint64_t v152 = _swiftEmptyArrayStorage;
    uint64_t v58 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v59 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v60 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v61 = v145;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v152, v59, v60, v4, v58);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v61, v55);
    _Block_release(v55);
    (*((void (**)(char *, uint64_t))v147 + 1))(v61, v4);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v57, v148);
    uint64_t v62 = v158;
    return swift_release(v62);
  }

  uint64_t v142 = v4;
  uint64_t v47 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8];
  if (!v47)
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v137 = v12;
  uint64_t v139 = v47;
  uint64_t v143 = a3;
  uint64_t v48 = OBJC_IVAR___MRDFastSyncGroupSession_connectionManager;
  uint64_t v49 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
  if (!v49)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  id v135 = (uint64_t *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  uint64_t v136 = v11;
  uint64_t v140 = v16;
  uint64_t v50 = &v16[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
  uint64_t v51 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
  if (!v51)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v138 = *(void *)&v16[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
  uint64_t v52 = *(void *)v50;
  uint64_t v53 = *(void (**)(void, uint64_t, uint64_t))(*(void *)v49 + 368LL);
  swift_bridgeObjectRetain();
  swift_retain(v49);
  swift_bridgeObjectRetain();
  v53(0LL, v52, v51);
  uint64_t v147 = v50;
  swift_release(v49);
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)((char *)v140 + v48);
  if (!v64) {
    goto LABEL_35;
  }
  uint64_t v65 = *(uint64_t (**)(uint64_t))(*(void *)v64 + 200LL);
  uint64_t v66 = swift_retain(v64);
  uint64_t v67 = v65(v66);
  swift_release(v64);
  uint64_t v68 = v138;
  uint64_t v69 = v139;
  if (!*(void *)(v67 + 16))
  {
LABEL_37:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_38;
  }

  swift_bridgeObjectRetain();
  unint64_t v70 = sub_10015CAD4(v68, v69);
  if ((v71 & 1) == 0)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

  uint64_t v72 = *(void *)(*(void *)(v67 + 56) + 8 * v70);
  swift_retain(v72);
  swift_bridgeObjectRelease();
  uint64_t v73 = swift_bridgeObjectRelease();
  uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 216LL))(v73);
  swift_release(v72);
  uint64_t v75 = *(void *)((char *)v140 + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  uint64_t v76 = swift_retain(v75);
  uint64_t v77 = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v76);
  uint64_t v78 = swift_release(v75);
  uint64_t v79 = NearbyGroup.members.getter(v78);
  swift_release(v77);
  swift_bridgeObjectRetain();
  sub_1001B9300(v79, v68, v69, v18);
  swift_bridgeObjectRelease();
  uint64_t v80 = type metadata accessor for NearbyGroup.Member(0LL);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48))(v18, 1LL, v80);
  if ((_DWORD)v82 == 1)
  {
    sub_1001603DC((uint64_t)v18, &qword_1003F9A90);
  }

  else
  {
    uint64_t v148 = NearbyGroup.Member.tokenDestination.getter(v82);
    uint64_t v84 = v83;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v18, v80);
    if (v84) {
      goto LABEL_28;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v148 = v68;
  uint64_t v84 = v69;
LABEL_28:
  uint64_t v85 = v136;
  uint64_t v86 = v137;
  uint64_t v146 = v84;
  uint64_t v87 = *(void **)((char *)v140 + OBJC_IVAR___MRDFastSyncGroupSession_pushMessenger);
  if (!v87)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v145 = (char *)v74;
  uint64_t v88 = sub_100156B68((uint64_t *)&unk_1003F9AA0);
  uint64_t inited = swift_initStackObject(v88, &v151);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10034C930;
  uint64_t v144 = v87;
  uint64_t v90 = sub_1002368B0();
  os_log_type_t v92 = *(void ***)v90;
  uint64_t v91 = *((void *)v90 + 1);
  uint64_t aBlock = v92;
  uint64_t v154 = v91;
  uint64_t v142 = v91;
  swift_bridgeObjectRetain_n(v91, 2LL);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  uint64_t v93 = (uint64_t *)sub_100236904();
  uint64_t v95 = *v93;
  uint64_t v94 = v93[1];
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v95;
  *(void *)(inited + 80) = v94;
  swift_bridgeObjectRetain();
  unint64_t v96 = sub_1002368C8();
  uint64_t v98 = *(void ***)v96;
  uint64_t v97 = *((void *)v96 + 1);
  uint64_t aBlock = v98;
  uint64_t v154 = v97;
  uint64_t v137 = v97;
  swift_bridgeObjectRetain_n(v97, 2LL);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  uint64_t v99 = *v93;
  uint64_t v100 = v93[1];
  uint64_t v101 = swift_bridgeObjectRetain();
  static String.Encoding.utf8.getter(v101);
  uint64_t v102 = String.data(using:allowLossyConversion:)(v14, 0LL, v99, v100);
  unint64_t v104 = v103;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v14, v85);
  if (v104 >> 60 == 15)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Data;
  *(void *)(inited + 144) = v102;
  *(void *)(inited + 152) = v104;
  uint64_t v105 = sub_1002368D4();
  uint64_t v106 = *((void *)v105 + 1);
  uint64_t aBlock = *(void ***)v105;
  uint64_t v154 = v106;
  swift_bridgeObjectRetain_n(v106, 2LL);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 240) = &type metadata for Int;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v145;
  uint64_t v107 = (void ***)sub_1002368E0();
  uint64_t v108 = (uint64_t)v107[1];
  uint64_t aBlock = *v107;
  uint64_t v154 = v108;
  swift_bridgeObjectRetain_n(v108, 2LL);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  uint64_t v109 = v140;
  uint64_t v111 = *(void *)((char *)v140 + OBJC_IVAR___MRDFastSyncGroupSession_identifier);
  uint64_t v110 = *(void *)((char *)v140 + OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8);
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 28_Block_object_dispose(va, 8) = v111;
  *(void *)(inited + 296) = v110;
  swift_bridgeObjectRetain();
  uint64_t v112 = sub_1002368BC();
  uint64_t v113 = *((void *)v112 + 1);
  uint64_t aBlock = *(void ***)v112;
  uint64_t v154 = v113;
  swift_bridgeObjectRetain_n(v113, 2LL);
  AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 384) = &type metadata for String;
  uint64_t v114 = v139;
  *(void *)(inited + 360) = v138;
  *(void *)(inited + 36_Block_object_dispose(va, 8) = v114;
  uint64_t v115 = sub_1002368A4();
  uint64_t v116 = *((void *)v115 + 1);
  uint64_t aBlock = *(void ***)v115;
  uint64_t v154 = v116;
  swift_bridgeObjectRetain_n(v116, 2LL);
  uint64_t result = AnyHashable.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String);
  uint64_t v117 = *((void *)v147 + 1);
  if (v117)
  {
    uint64_t v118 = *(void *)v147;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(inited + 456) = &type metadata for String;
    *(void *)(inited + 432) = v118;
    *(void *)(inited + 440) = v117;
    sub_100159DBC(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v120 = sub_100156B68(&qword_1003F8620);
    uint64_t v121 = swift_initStackObject(v120, &v150);
    *(_OWORD *)(v121 + swift_weakDestroy(v0 + 16) = xmmword_10034BE40;
    *(void *)(v121 + 32) = v148;
    *(void *)(v121 + 40) = v146;
    sub_1001EA538(v121);
    swift_setDeallocating(v121);
    swift_arrayDestroy(v121 + 32, 1LL, &type metadata for String);
    Class v122 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v123 = v144;
    [v144 sendMessage:isa toDestinations:v122];

    uint64_t v124 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v124 + 16, v109);
    uint64_t v125 = (void *)swift_allocObject(&unk_1003A6190, 40LL, 7LL);
    uint64_t v126 = v149;
    v125[2] = v124;
    v125[3] = v126;
    uint64_t v127 = v143;
    v125[4] = v143;
    char v128 = v135;
    uint64_t v129 = *v135;
    uint64_t v130 = v135[1];
    uint64_t *v135 = (uint64_t)sub_1001EF5E8;
    v128[1] = (uint64_t)v125;
    swift_retain(v127);
    sub_100162944(v129, v130);
    uint64_t v131 = type metadata accessor for TaskPriority(0LL);
    uint64_t v132 = (uint64_t)v141;
    (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56LL))(v141, 1LL, 1LL, v131);
    uint64_t v133 = (void *)swift_allocObject(&unk_1003A61B8, 56LL, 7LL);
    v133[2] = 0LL;
    v133[3] = 0LL;
    v133[4] = v109;
    v133[5] = v126;
    v133[6] = v127;
    swift_retain(v127);
    id v134 = v109;
    uint64_t v62 = sub_10015AA50(v132, (uint64_t)&unk_1003FA138, (uint64_t)v133);
    return swift_release(v62);
  }

uint64_t sub_1001BF978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v48, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v18 = (_BYTE *)result;
    uint64_t v37 = v10;
    uint64_t v19 = *(void **)(result + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
    *uint64_t v16 = v19;
    (*(void (**)(void *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchPredicate.onQueue(_:),  v13);
    id v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v16);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
    if ((v19 & 1) != 0)
    {
      if (a1)
      {
        uint64_t v21 = (void *)swift_allocObject(&unk_1003A6320, 40LL, 7LL);
        v21[2] = v38;
        v21[3] = a4;
        v21[4] = a1;
        uint64_t v46 = sub_1001EF65C;
        uint64_t v47 = v21;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v43 = 1107296256LL;
        uint64_t v44 = sub_100157EA8;
        uint64_t v45 = &unk_1003A6338;
        unint64_t v22 = _Block_copy(&aBlock);
        swift_retain(a4);
        uint64_t v23 = swift_errorRetain(a1);
        static DispatchQoS.unspecified.getter(v23);
        unint64_t v41 = _swiftEmptyArrayStorage;
        uint64_t v24 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003F9A70);
        uint64_t v26 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v25, v26, v7, v24);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v22);
        uint64_t v27 = v22;
      }

      else
      {
        v18[OBJC_IVAR___MRDFastSyncGroupSession_isLowPowerMode] = 0;
        unint64_t v28 = &v18[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
        uint64_t v29 = *(void *)&v18[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
        uint64_t v30 = *(void *)&v18[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8];
        void *v28 = 0LL;
        v28[1] = 0LL;
        sub_100162944(v29, v30);
        uint64_t v31 = swift_allocObject(&unk_1003A62D0, 32LL, 7LL);
        *(void *)(v31 + swift_weakDestroy(v0 + 16) = v38;
        *(void *)(v31 + 24) = a4;
        uint64_t v46 = sub_1001EF690;
        uint64_t v47 = (void *)v31;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v43 = 1107296256LL;
        uint64_t v44 = sub_100157EA8;
        uint64_t v45 = &unk_1003A62E8;
        uint64_t v32 = _Block_copy(&aBlock);
        uint64_t v33 = swift_retain(a4);
        static DispatchQoS.unspecified.getter(v33);
        unint64_t v41 = _swiftEmptyArrayStorage;
        uint64_t v34 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v35 = sub_100156B68((uint64_t *)&unk_1003F9A70);
        uint64_t v36 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v35, v36, v7, v34);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v32);
        uint64_t v27 = v32;
      }

      _Block_release(v27);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v7);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v37);

      return swift_release(v47);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1001BFD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[26] = a5;
  v6[27] = a6;
  v6[25] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v6[28] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[29] = v8;
  v6[30] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  v6[31] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[32] = v10;
  v6[33] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001BFE14, 0LL, 0LL);
}

uint64_t sub_1001BFE14()
{
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v1 = (void *)v0[25];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[34] = sub_10015ADAC(v2, (uint64_t)qword_1003FF018);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.info.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = (void *)v0[25];
  if (v5)
  {
    log = v3;
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    os_log_type_t type = v4;
    uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v21 = swift_slowAlloc(64LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v7 = 138543874;
    v0[22] = v6;
    uint64_t v9 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v7 + 4, v7 + 12);
    void *v8 = v6;

    *(_WORD *)(v7 + 12) = 2082;
    uint64_t v10 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v11 = *(void *)&v9[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v0[23] = sub_10015ADC4(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v7 + 22) = 2080;
    v0[24] = sub_10015ADC4(0xD00000000000001DLL, 0x800000010033C1C0LL, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v7 + 24, v7 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%{public}@]<%{public}s> %s Re-joining provider",  (uint8_t *)v7,  0x20u);
    uint64_t v12 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v8, 1LL, v12);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v13 = *(void *)(v0[25] + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  v0[35] = v13;
  uint64_t v14 = async function pointer to GroupSessionProvider.join()[1];
  swift_retain(v13);
  uint64_t v15 = (void *)swift_task_alloc(v14);
  v0[36] = v15;
  uint64_t v16 = sub_100156B68(&qword_1003F9950);
  uint64_t v17 = sub_1001604E8( &qword_1003F9FA8,  &qword_1003F9950,  (uint64_t)&protocol conformance descriptor for NearbyGroupSessionProvider<A>);
  *uint64_t v15 = v0;
  v15[1] = sub_1001C012C;
  return GroupSessionProvider.join()(v16, v17);
}

uint64_t sub_1001C012C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1001C0410;
  }

  else
  {
    swift_release(*(void *)(v2 + 280));
    os_log_type_t v4 = sub_1001C0198;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001C0198()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 200));
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void **)(v0 + 200);
    uint64_t v4 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    uint64_t v14 = v13;
    *(void *)(v0 + 152) = v3;
    *(_DWORD *)uint64_t v4 = 138543874;
    BOOL v5 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v4 + 4, v4 + 12);
    void *v12 = v3;

    *(_WORD *)(v4 + 12) = 2082;
    uint64_t v6 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v7 = *(void *)&v5[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 160) = sub_10015ADC4(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v4 + 14, v4 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v4 + 22) = 2080;
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = sub_10015ADC4(0xD00000000000001DLL, 0x800000010033C1C0LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v4 + 24, v4 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v1,  v2,  "[%{public}@]<%{public}s> %s Re-joined provider",  (uint8_t *)v4,  0x20u);
    uint64_t v8 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v12, 1LL, v8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  else
  {
    uint64_t v9 = *(void **)(v0 + 200);
  }

  sub_1001B6458();
  uint64_t v10 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C0410()
{
  uint64_t v1 = (void *)v0[25];
  swift_release(v0[35]);
  os_log_type_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (void *)v0[25];
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v35 = swift_slowAlloc(64LL, -1LL);
    uint64_t v37 = v35;
    v0[16] = v4;
    *(_DWORD *)uint64_t v5 = 138543874;
    uint64_t v6 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v5 + 4, v5 + 12);
    *uint64_t v31 = v4;

    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v7 = *(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v8 = *(void *)&v6[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    v0[17] = sub_10015ADC4(v7, v8, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease();

    *(_WORD *)(v5 + 22) = 2080;
    v0[18] = sub_10015ADC4(0xD00000000000001DLL, 0x800000010033C1C0LL, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v5 + 24, v5 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%{public}@]<%{public}s> %s Failed to re-join provider",  (uint8_t *)v5,  0x20u);
    uint64_t v9 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v31, 1LL, v9);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = (void *)v0[25];
  }

  uint64_t v11 = v0[37];
  uint64_t v12 = v0[33];
  uint64_t v13 = v0[30];
  os_log_t log = (os_log_t)v0[32];
  uint64_t v36 = v0[31];
  uint64_t v14 = v0[28];
  uint64_t v16 = v0[26];
  uint64_t v15 = v0[27];
  uint64_t v17 = (void *)v0[25];
  uint64_t v32 = v0[29];
  uint64_t v18 = (void *)swift_allocObject(&unk_1003A6230, 40LL, 7LL);
  v18[2] = v16;
  uint64_t v18[3] = v15;
  v18[4] = v11;
  v0[6] = sub_1001EF65C;
  v0[7] = v18;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_100157EA8;
  v0[5] = &unk_1003A6248;
  uint64_t v19 = _Block_copy(v0 + 2);
  swift_retain(v15);
  uint64_t v20 = swift_errorRetain(v11);
  static DispatchQoS.unspecified.getter(v20);
  v0[14] = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v21 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 14, v29, v21, v14, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v13, v19);
  _Block_release(v19);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v33(v13, v14);
  uint64_t v22 = (void (*)(uint64_t, uint64_t))*((void *)log + 1);
  v22(v12, v36);
  swift_release(v0[7]);
  uint64_t v23 = swift_allocObject(&unk_1003A6280, 32LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v17;
  *(void *)(v23 + 24) = v11;
  v0[8] = _NSConcreteStackBlock;
  v0[12] = sub_1001EF66C;
  v0[13] = v23;
  v0[9] = 1107296256LL;
  v0[10] = sub_100157EA8;
  v0[11] = &unk_1003A6298;
  uint64_t v24 = _Block_copy(v0 + 8);
  id v25 = v17;
  uint64_t v26 = swift_errorRetain(v11);
  static DispatchQoS.unspecified.getter(v26);
  v0[15] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 15, v29, v21, v14, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v13, v24);
  _Block_release(v24);
  swift_errorRelease(v11);
  v33(v13, v14);
  v22(v12, v36);
  swift_release(v0[13]);
  uint64_t v27 = v0[30];
  swift_task_dealloc(v0[33]);
  swift_task_dealloc(v27);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1001C091C( void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject(a4, 24LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  id v12 = a1;
  a6(a5, v11);

  return swift_release(v11);
}

uint64_t sub_1001C0998(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  uint64_t v11 = swift_allocObject(&unk_1003A5E98, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1001EF078;
  uint64_t v22 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100157EA8;
  aBlock[3] = &unk_1003A5EB0;
  id v12 = _Block_copy(aBlock);
  uint64_t v13 = v1;
  uint64_t v14 = swift_retain(a1);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100156B68((uint64_t *)&unk_1003F9A70);
  uint64_t v17 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v22);
}

void sub_1001C0B90(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_100156B68(&qword_1003FA088);
  uint64_t v63 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100156B68(&qword_1003FA090);
  uint64_t v58 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v57 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100156B68(&qword_1003FA098);
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  __chkstk_darwin(v9);
  uint64_t v59 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)&a1[OBJC_IVAR___MRDFastSyncGroupSession__state];
  *(void *)&a1[OBJC_IVAR___MRDFastSyncGroupSession__state] = 2LL;
  sub_1001B29A0(v11);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10015ADAC(v12, (uint64_t)qword_1003FF018);
  uint64_t v14 = a1;
  uint64_t v62 = v13;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = v7;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc(8LL, -1LL);
    uint64_t v55 = v4;
    uint64_t v20 = (void *)v19;
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t)v14;
    v65[0] = v52;
    *(_DWORD *)uint64_t v18 = 138543618;
    uint64_t v56 = a2;
    uint64_t v21 = v14;
    uint64_t v54 = v6;
    uint64_t v22 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v18 + 4, v18 + 12);
    *uint64_t v20 = v14;

    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v24 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v23 = *(void *)&v22[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_10015ADC4(v24, v23, v65);
    a2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v18 + 14, v18 + 22);

    uint64_t v6 = v54;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%{public}@]<%{public}s> Handling session.",  (uint8_t *)v18,  0x16u);
    uint64_t v25 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v20, 1LL, v25);
    uint64_t v26 = v20;
    uint64_t v4 = v55;
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v52;
    uint64_t v7 = v53;
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v28 = v57;
  GroupSession.$activeParticipants.getter();
  uint64_t v29 = sub_1001604E8( &qword_1003FA0A0,  &qword_1003FA090,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v30 = sub_1001604E8(&qword_1003FA0A8, &qword_1003FA0B0, (uint64_t)&protocol conformance descriptor for Set<A>);
  uint64_t v31 = v59;
  Publisher<>.removeDuplicates()(v7, v29, v30);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v28, v7);
  uint64_t v32 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v32 + 16, v14);
  uint64_t v33 = sub_1001604E8( &qword_1003FA0B8,  &qword_1003FA098,  (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  uint64_t v34 = v61;
  uint64_t v35 = Publisher<>.sink(receiveValue:)(sub_1001EF080, v32, v61, v33);
  swift_release(v32);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v34);
  uint64_t v36 = &v14[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables];
  swift_beginAccess(&v14[OBJC_IVAR___MRDFastSyncGroupSession_sessionCancellables], v65, 33LL, 0LL);
  AnyCancellable.store(in:)(v36);
  swift_endAccess(v65);
  uint64_t v37 = swift_release(v35);
  GroupSession.$state.getter(v37);
  uint64_t v38 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v38 + 16, v14);
  uint64_t v39 = sub_1001604E8( &qword_1003FA0C0,  &qword_1003FA088,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  uint64_t v40 = Publisher<>.sink(receiveValue:)(sub_1001EF088, v38, v4, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v6, v4);
  swift_beginAccess(v36, v65, 33LL, 0LL);
  AnyCancellable.store(in:)(v36);
  swift_endAccess(v65);
  swift_release(v40);
  uint64_t v41 = *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_groupSession];
  *(void *)&v14[OBJC_IVAR___MRDFastSyncGroupSession_groupSession] = a2;
  swift_retain(a2);
  swift_release(v41);
  sub_1001D48B4();
  uint64_t v42 = v14;
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = swift_slowAlloc(22LL, -1LL);
    uint64_t v46 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v63 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t)v42;
    v65[0] = v63;
    *(_DWORD *)uint64_t v45 = 138543618;
    uint64_t v47 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v45 + 4, v45 + 12);
    *uint64_t v46 = v42;

    *(_WORD *)(v45 + 12) = 2082;
    uint64_t v48 = *(void *)&v47[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v49 = *(void *)&v47[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v64 = sub_10015ADC4(v48, v49, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v45 + 14, v45 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "[%{public}@]<%{public}s> Will join session.",  (uint8_t *)v45,  0x16u);
    uint64_t v50 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v46, 1LL, v50);
    swift_slowDealloc(v46, -1LL, -1LL);
    uint64_t v51 = v63;
    swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {
  }

  GroupSession.join()();
}

uint64_t sub_1001C12A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v52 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  a2 += 16LL;
  swift_beginAccess(a2, v56, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v13 = (void *)result;
    uint64_t v49 = v8;
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v48 = v10;
    uint64_t v50 = v7;
    uint64_t v51 = v6;
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v14, (uint64_t)qword_1003FF018);
    id v15 = v13;
    swift_bridgeObjectRetain_n(v11, 2LL);
    os_log_type_t v16 = v15;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    int v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_type_t v44 = v21;
      uint64_t v47 = swift_slowAlloc(64LL, -1LL);
      uint64_t v53 = v16;
      aBlock[0] = v47;
      *(_DWORD *)uint64_t v20 = 138543874;
      int v45 = v19;
      uint64_t v22 = v16;
      uint64_t v46 = v4;
      unint64_t v23 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v20 + 4, v20 + 12);
      void *v21 = v13;

      *(_WORD *)(v20 + 12) = 2082;
      uint64_t v24 = *(void *)&v23[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v25 = *(void *)&v23[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v53 = (void *)sub_10015ADC4(v24, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v20 + 14, v20 + 22);

      uint64_t v4 = v46;
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 22) = 2082;
      uint64_t v26 = type metadata accessor for Participant(0LL);
      uint64_t v27 = sub_100156FEC( &qword_1003F9A88,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
      uint64_t v28 = swift_bridgeObjectRetain();
      uint64_t v29 = Set.description.getter(v28, v26, v27);
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v53 = (void *)sub_10015ADC4(v29, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v20 + 24, v20 + 32);
      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v17,  (os_log_type_t)v45,  "[%{public}@]<%{public}s> Fast Sync participants changed: %{public}s.",  (uint8_t *)v20,  0x20u);
      uint64_t v32 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v33 = v44;
      swift_arrayDestroy(v44, 1LL, v32);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v34 = v47;
      swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    uint64_t v35 = swift_allocObject(&unk_1003A5F38, 32LL, 7LL);
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v16;
    *(void *)(v35 + 24) = v11;
    aBlock[4] = (uint64_t)sub_1001EF158;
    uint64_t v55 = v35;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_100157EA8;
    aBlock[3] = (uint64_t)&unk_1003A5F50;
    uint64_t v36 = _Block_copy(aBlock);
    uint64_t v37 = v16;
    uint64_t v38 = swift_bridgeObjectRetain();
    uint64_t v39 = v48;
    static DispatchQoS.unspecified.getter(v38);
    uint64_t v53 = _swiftEmptyArrayStorage;
    uint64_t v40 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v41 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v42 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v43 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v41, v42, v4, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v39, v43, v36);
    _Block_release(v36);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v4);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);

    return swift_release(v55);
  }

  return result;
}

uint64_t sub_1001C179C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100156B68(&qword_1003F9F58);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  a2 += 16LL;
  swift_beginAccess(a2, v30, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v14 = (void *)result;
    uint64_t v23 = *(void *)(result + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v16 = (v15 + 24) & ~v15;
    uint64_t v17 = swift_allocObject(&unk_1003A5EE8, v16 + v12, v15 | 7);
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v17 + v16,  (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
    aBlock[4] = sub_1001EF108;
    uint64_t v29 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100157EA8;
    aBlock[3] = &unk_1003A5F00;
    os_log_type_t v18 = _Block_copy(aBlock);
    id v19 = v14;
    static DispatchQoS.unspecified.getter(v19);
    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v20 = sub_100156FEC( (unint64_t *)&qword_1003FADB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v21 = sub_100156B68((uint64_t *)&unk_1003F9A70);
    uint64_t v22 = sub_1001604E8( (unint64_t *)&qword_1003FADC0,  (uint64_t *)&unk_1003F9A70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v4, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v18);
    _Block_release(v18);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v4);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);

    return swift_release(v29);
  }

  return result;
}

void sub_1001C1A38(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (os_log_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void **)&v1[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v9, (uint64_t)qword_1003FF018);
  uint64_t v10 = v1;
  swift_errorRetain(a1);
  uint64_t v11 = v10;
  uint64_t v12 = swift_errorRetain(a1);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = (char **)swift_slowAlloc(16LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = (uint64_t)v11;
    uint64_t v30 = v28;
    *(_DWORD *)uint64_t v15 = 138543874;
    uint64_t v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 4, v15 + 12);
    *uint64_t v16 = v11;

    *(_WORD *)(v15 + 12) = 2082;
    os_log_t v27 = v13;
    uint64_t v19 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v18 = *(void *)&v17[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_10015ADC4(v19, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(a1);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v29 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v15 + 24, v15 + 32);
    v16[1] = (char *)v20;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    os_log_t v21 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v14,  "[%{public}@]<%{public}s> Encountered push message error: %{public}@.",  (uint8_t *)v15,  0x20u);
    uint64_t v22 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v16, 2LL, v22);
    swift_slowDealloc(v16, -1LL, -1LL);
    uint64_t v23 = v28;
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  if (v11[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] == 1)
  {
    v11[OBJC_IVAR___MRDFastSyncGroupSession_hasEncounteredLowPowerError] = 1;
  }

  else
  {
    unint64_t v24 = sub_1001E8078();
    uint64_t v25 = swift_allocError(&type metadata for FastSyncSessionError, v24, 0LL, 0LL);
    void *v26 = 6LL;
    sub_1001CF668(v25);
    swift_errorRelease(v25);
  }

void sub_1001C1DD4(void *a1)
{
  os_log_type_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v8 = *(void **)&v2[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_87:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_12:
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v14, (uint64_t)qword_1003FF018);
    uint64_t v15 = v2;
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc(22LL, -1LL);
      uint64_t v19 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v20 = (void *)swift_slowAlloc(32LL, -1LL);
      v129[0] = v20;
      *(_DWORD *)uint64_t v18 = 138543618;
      *(void *)&__int128 v130 = v15;
      os_log_t v21 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v18 + 4, v18 + 12);
      *uint64_t v19 = v15;

      *(_WORD *)(v18 + 12) = 2082;
      uint64_t v22 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v23 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      *(void *)&__int128 v130 = sub_10015ADC4(v22, v23, (uint64_t *)v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v18 + 14, v18 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "[%{public}@]<%{public}s> dropping push message for different session identifier.",  (uint8_t *)v18,  0x16u);
      uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v19, 1LL, v24);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
    }

    return;
  }

  *(void *)&v128[0] = 0xD000000000000011LL;
  *((void *)&v128[0] + 1) = 0x800000010033C1A0LL;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)(v128, &type metadata for String, &protocol witness table for String);
  if (a1[2] && (unint64_t v10 = sub_10015CAA4((uint64_t)v129), (v11 & 1) != 0))
  {
    sub_100160800(a1[7] + 32 * v10, (uint64_t)&v130);
  }

  else
  {
    __int128 v130 = 0u;
    __int128 v131 = 0u;
  }

  sub_100160990((uint64_t)v129);
  if (!*((void *)&v131 + 1))
  {
    sub_1001603DC((uint64_t)&v130, &qword_1003F9EE0);
    goto LABEL_11;
  }

  uint64_t v12 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
  unint64_t v13 = *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
  if (v128[0] == __PAIR128__(v13, v12))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)( *(void *)&v128[0],  *((void *)&v128[0] + 1),  *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_identifier],  *(void *)&v2[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8],  0LL);
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    if (qword_1003FF010 == -1) {
      goto LABEL_12;
    }
    goto LABEL_87;
  }

void sub_1001C319C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v90 = a1;
  uint64_t v91 = a4;
  uint64_t v7 = type metadata accessor for Participant(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v87 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v80 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  os_log_type_t v17 = *(void **)&v4[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    if (qword_1003FF010 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_3:
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10015ADAC(v19, (uint64_t)qword_1003FF018);
  uint64_t v21 = v8;
  uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v86(v12, v91, v7);
  uint64_t v22 = v4;
  sub_100160874(a2, a3);
  unint64_t v23 = v22;
  sub_100160874(a2, a3);
  uint64_t v24 = v23;
  sub_100160874(a2, a3);
  char v25 = v24;
  uint64_t v26 = sub_100160874(a2, a3);
  id v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.info.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc(52LL, -1LL);
    os_log_t v83 = v27;
    uint64_t v31 = v30;
    id v32 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v81 = v32;
    uint64_t v33 = swift_slowAlloc(128LL, -1LL);
    uint64_t v84 = v33;
    *(_DWORD *)uint64_t v31 = 138544386;
    int v82 = v29;
    uint64_t v89 = v25;
    uint64_t v92 = (uint64_t)v25;
    uint64_t v93 = v33;
    uint64_t v80 = v21;
    uint64_t v34 = v25;
    uint64_t v85 = v20;
    uint64_t v35 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 4, v31 + 12);
    void *v32 = v89;

    *(_WORD *)(v31 + 12) = 2082;
    uint64_t v88 = v7;
    uint64_t v36 = v12;
    uint64_t v37 = *(void *)&v35[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
    unint64_t v38 = *(void *)&v35[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
    swift_bridgeObjectRetain();
    uint64_t v92 = sub_10015ADC4(v37, v38, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 14, v31 + 22);

    LOBYTE(v3_Block_object_dispose(va, 8) = v90;
    swift_bridgeObjectRelease();
    *(_WORD *)(v31 + 22) = 2080;
    uint64_t v39 = sub_100156FEC( &qword_1003F9AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for Participant,  (uint64_t)&protocol conformance descriptor for Participant);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v88, v39);
    uint64_t v92 = sub_10015ADC4(v40, v41, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 24, v31 + 32);
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v80 + 8);
    v42(v36, v88);
    *(_WORD *)(v31 + 32) = 2082;
    LOBYTE(v92) = v38;
    unint64_t v43 = sub_1001EEE38();
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for FastSyncMessageType, v43);
    uint64_t v92 = sub_10015ADC4(v44, v45, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 34, v31 + 42);
    swift_bridgeObjectRelease();
    sub_1001608B8(a2, a3);
    sub_1001608B8(a2, a3);
    *(_WORD *)(v31 + 42) = 2080;
    sub_100160874(a2, a3);
    uint64_t v46 = Data.description.getter(a2, a3);
    unint64_t v48 = v47;
    sub_1001608B8(a2, a3);
    uint64_t v49 = v46;
    uint64_t v7 = v88;
    uint64_t v92 = sub_10015ADC4(v49, v48, &v93);
    char v25 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v31 + 44, v31 + 52);
    swift_bridgeObjectRelease();
    sub_1001608B8(a2, a3);
    sub_1001608B8(a2, a3);
    os_log_t v50 = v83;
    _os_log_impl( (void *)&_mh_execute_header,  v83,  (os_log_type_t)v82,  "[%{public}@]<%{public}s> received message from %s. Type: %{public}s. Payload: %s",  (uint8_t *)v31,  0x34u);
    uint64_t v51 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    uint64_t v52 = v81;
    swift_arrayDestroy(v81, 1LL, v51);
    swift_slowDealloc(v52, -1LL, -1LL);
    uint64_t v53 = v84;
    swift_arrayDestroy(v84, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    uint64_t v42 = *(void (**)(char *, uint64_t))(v8 + 8);
    v42(v12, v7);
    sub_1001608B8(a2, a3);
    sub_1001608B8(a2, a3);
    sub_1001608B8(a2, a3);
    sub_1001608B8(a2, a3);
  }

  if (*(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession__state] == 3LL)
  {
    LOBYTE(v93) = v90;
    LOBYTE(v92) = 0;
    unint64_t v54 = sub_1001EEDF4();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v93, &v92, &type metadata for FastSyncMessageType, v54) & 1) != 0
      || *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8]
      || *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_leaderFastSyncIdentifier + 8])
    {
      if ((v25[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) != 0)
      {
        uint64_t v55 = v87;
        v86(v87, v91, v7);
LABEL_16:
        v42(v55, v7);
        goto LABEL_17;
      }

      LOBYTE(v93) = v90;
      LOBYTE(v92) = 0;
      char v67 = dispatch thunk of static Equatable.== infix(_:_:)(&v93, &v92, &type metadata for FastSyncMessageType, v54);
      uint64_t v55 = v87;
      uint64_t v68 = ((uint64_t (*)(char *, uint64_t, uint64_t))v86)(v87, v91, v7);
      if ((v67 & 1) != 0) {
        goto LABEL_16;
      }
      uint64_t v69 = Participant.handle.getter(v68);
      unint64_t v71 = &v25[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle];
      uint64_t v72 = *(void *)&v25[OBJC_IVAR___MRDFastSyncGroupSession_leaderHandle + 8];
      if (v72)
      {
        if (v69 == *(void *)v71 && v72 == v70)
        {
          v42(v87, v7);
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }

        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, *(void *)v71, v72, 0LL);
        v42(v87, v7);
        swift_bridgeObjectRelease();
        if ((v73 & 1) != 0) {
LABEL_17:
        }
          __asm { BR              X10 }
      }

      else
      {
        v42(v55, v7);
        swift_bridgeObjectRelease();
      }

      uint64_t v56 = v25;
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc(22LL, -1LL);
        unint64_t v60 = (char **)swift_slowAlloc(8LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        uint64_t v92 = (uint64_t)v56;
        uint64_t v93 = v61;
        *(_DWORD *)uint64_t v59 = 138543618;
        unint64_t v74 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 4, v59 + 12);
        *unint64_t v60 = v56;

        *(_WORD *)(v59 + 12) = 2082;
        uint64_t v75 = *(void *)&v74[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v76 = *(void *)&v74[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v92 = sub_10015ADC4(v75, v76, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 14, v59 + 22);

        swift_bridgeObjectRelease();
        uint64_t v65 = "[%{public}@]<%{public}s> dropping message that did not come from leader.";
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v56 = v25;
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc(22LL, -1LL);
        unint64_t v60 = (char **)swift_slowAlloc(8LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        uint64_t v92 = (uint64_t)v56;
        uint64_t v93 = v61;
        *(_DWORD *)uint64_t v59 = 138543618;
        uint64_t v77 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 4, v59 + 12);
        *unint64_t v60 = v56;

        *(_WORD *)(v59 + 12) = 2082;
        uint64_t v78 = *(void *)&v77[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
        unint64_t v79 = *(void *)&v77[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
        swift_bridgeObjectRetain();
        uint64_t v92 = sub_10015ADC4(v78, v79, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 14, v59 + 22);

        swift_bridgeObjectRelease();
        uint64_t v65 = "[%{public}@]<%{public}s> dropping message received before leader discovered.";
        goto LABEL_14;
      }
    }
  }

  else
  {
    uint64_t v56 = v25;
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc(22LL, -1LL);
      unint64_t v60 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      uint64_t v92 = (uint64_t)v56;
      uint64_t v93 = v61;
      *(_DWORD *)uint64_t v59 = 138543618;
      uint64_t v62 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 4, v59 + 12);
      *unint64_t v60 = v56;

      *(_WORD *)(v59 + 12) = 2082;
      uint64_t v63 = *(void *)&v62[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      unint64_t v64 = *(void *)&v62[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      swift_bridgeObjectRetain();
      uint64_t v92 = sub_10015ADC4(v63, v64, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v59 + 14, v59 + 22);

      swift_bridgeObjectRelease();
      uint64_t v65 = "[%{public}@]<%{public}s> dropping message received while not joined.";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v57, v58, v65, (uint8_t *)v59, 0x16u);
      uint64_t v66 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v60, 1LL, v66);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v59, -1LL, -1LL);

      return;
    }
  }
}

uint64_t sub_1001C3DA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for Participant(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v73 = v11;
  uint64_t v75 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v12);
  unint64_t v74 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  os_log_type_t v17 = (uint64_t *)((char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v18 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *os_log_type_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(va, 8) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if ((v5[OBJC_IVAR___MRDFastSyncGroupSession_isLeader] & 1) != 0)
  {
    if (qword_1003FF010 == -1)
    {
LABEL_4:
      uint64_t v72 = v10;
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v20, (uint64_t)qword_1003FF018);
      uint64_t v21 = v5;
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        char v25 = (char **)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v24 = 138543362;
        uint64_t v76 = (uint64_t)v21;
        uint64_t v26 = v21;
        uint64_t v71 = v9;
        uint64_t v27 = a4;
        os_log_type_t v28 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v24 + 4, v24 + 12);
        char *v25 = v21;

        a4 = v27;
        uint64_t v9 = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[%{public}@] Leader should not receive leader discovery messages.",  v24,  0xCu);
        uint64_t v29 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v25, 1LL, v29);
        swift_slowDealloc(v25, -1LL, -1LL);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      else
      {

        uint64_t v22 = (os_log_s *)v21;
      }

      uint64_t v41 = (uint64_t)v74;
      uint64_t v40 = v75;
      uint64_t v42 = v73;

      uint64_t v44 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier];
      uint64_t v43 = *(void *)&v21[OBJC_IVAR___MRDFastSyncGroupSession_identifier + 8];
      uint64_t v45 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v41, 1LL, 1LL, v45);
      uint64_t v46 = swift_allocObject(&unk_1003A57B0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v46 + 16, v21);
      uint64_t v47 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v40, a4, v9);
      uint64_t v48 = *(unsigned __int8 *)(v47 + 80);
      uint64_t v49 = (v48 + 40) & ~v48;
      uint64_t v50 = v9;
      unint64_t v51 = (v42 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v52 = (char *)swift_allocObject(&unk_1003A5DF8, v51 + 16, v48 | 7);
      *((void *)v52 + 2) = 0LL;
      *((void *)v52 + 3) = 0LL;
      *((void *)v52 + 4) = v46;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&v52[v49], v40, v50);
      uint64_t v53 = &v52[v51];
      *(void *)uint64_t v53 = v44;
      *((void *)v53 + 1) = v43;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_10015AA50(v41, (uint64_t)&unk_1003FA050, (uint64_t)v52);
      return swift_release(v54);
    }

uint64_t sub_1001C43F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  return swift_task_switch(sub_1001C445C, 0LL, 0LL);
}

uint64_t sub_1001C445C()
{
  uint64_t v1 = *(void *)(v0 + 96) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = (void *)Strong;
  uint64_t v4 = *(void *)(Strong + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  swift_retain(v4);

  *(void *)(v0 + 12_Block_object_dispose(va, 8) = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v5);
  uint64_t v6 = swift_release(v4);
  uint64_t v7 = Participant.handle.getter(v6);
  uint64_t v9 = v8;
  *(void *)(v0 + 136) = v8;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NearbyGroup.kickMember(_:)[1]);
  *(void *)(v0 + 144) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001C4594;
  return NearbyGroup.kickMember(_:)(v7, v9);
}

uint64_t sub_1001C4594()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1001EFF5C, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 128);
  swift_bridgeObjectRelease();
  swift_release(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1001C4660(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v330 = a4;
  uint64_t v7 = type metadata accessor for Participants(0LL);
  uint64_t v324 = *(void *)(v7 - 8);
  uint64_t v325 = v7;
  __chkstk_darwin(v7);
  uint64_t v323 = (char *)&v309 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  uint64_t v318 = *(void **)(v9 - 8);
  uint64_t v319 = v9;
  __chkstk_darwin(v9);
  uint64_t v317 = (char *)&v309 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003F9A90);
  __chkstk_darwin(v11);
  uint64_t v316 = (char *)&v309 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v326 = (uint64_t *)type metadata accessor for UUID(0LL);
  unint64_t v322 = *(v326 - 1);
  __chkstk_darwin(v326);
  uint64_t v14 = (char *)&v309 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t *)type metadata accessor for Participant(0LL);
  uint64_t v328 = *(v15 - 1);
  uint64_t v329 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)&v309 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v321 = (os_log_s *)((char *)&v309 - v19);
  uint64_t v20 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v21 = *(void (***)(void *, void, uint64_t))(v20 - 8);
  __chkstk_darwin(v20);
  os_log_type_t v23 = (uint64_t *)((char *)&v309 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = *(void **)&v4[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *os_log_type_t v23 = v24;
  v21[13](v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  ((void (*)(void *, uint64_t))v21[1])(v23, v20);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_103:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_10:
    uint64_t v52 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v52, (uint64_t)qword_1003FF018);
    uint64_t v53 = v21;
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v57 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v56 = 138543362;
      unint64_t v338 = (uint64_t *)v53;
      os_log_type_t v58 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v338, v339, v56 + 4, v56 + 12);
      void *v57 = v53;

      uint64_t v59 = "[%{public}@] Participants should not receive IdentityShare messages.";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v54, v55, v59, v56, 0xCu);
      uint64_t v62 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v57, 1LL, v62);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);

      return;
    }

LABEL_105:
    __break(1u);
LABEL_106:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_79:
    uint64_t v199 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v199, (uint64_t)qword_1003FF018);
    uint64_t v200 = v321;
    uint64_t v201 = v66;
    uint64_t v202 = v329;
    (*((void (**)(os_log_s *, uint64_t, uint64_t *))v18 + 2))(v321, v201, v329);
    uint64_t v203 = v63;
    swift_bridgeObjectRetain_n(v36, 2LL);
    uint64_t v204 = v203;
    char v205 = (os_log_s *)Logger.logObject.getter(v204);
    os_log_type_t v206 = static os_log_type_t.default.getter();
    LODWORD(v314) = v206;
    if (os_log_type_enabled(v205, v206))
    {
      uint64_t v207 = swift_slowAlloc(32LL, -1LL);
      uint64_t v313 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v312 = swift_slowAlloc(64LL, -1LL);
      unint64_t v338 = (uint64_t *)v312;
      *(_DWORD *)uint64_t v207 = 138543874;
      os_log_t v311 = v205;
      uint64_t v334 = v204;
      uint64_t v208 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v207 + 4, v207 + 12);
      *uint64_t v313 = (uint64_t)v204;

      *(_WORD *)(v207 + 12) = 2082;
      unint64_t v209 = v321;
      uint64_t v211 = Participant.id.getter(v210);
      uint64_t v212 = UUID.uuidString.getter(v211);
      unint64_t v214 = v213;
      (*(void (**)(char *, uint64_t *))(v322 + 8))(v14, v326);
      uint64_t v334 = (void *)sub_10015ADC4(v212, v214, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v207 + 14, v207 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(os_log_s *, uint64_t *))(v328 + 8))(v209, v329);
      *(_WORD *)(v207 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v37 = v320;
      uint64_t v334 = (void *)sub_10015ADC4(v320, v36, (uint64_t *)&v338);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v335, v207 + 24, v207 + 32);
      swift_bridgeObjectRelease_n(v36, 3LL);
      os_log_t v215 = v311;
      _os_log_impl( (void *)&_mh_execute_header,  v311,  (os_log_type_t)v314,  "[%{public}@] Mapping fast sync participant: %{public}s to prewarmed identifier %{public}s.",  (uint8_t *)v207,  0x20u);
      uint64_t v216 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      uint64_t v328 = 1LL;
      uint64_t v217 = v313;
      swift_arrayDestroy(v313, 1LL, v216);
      swift_slowDealloc(v217, -1LL, -1LL);
      uint64_t v218 = v312;
      swift_arrayDestroy(v312, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v218, -1LL, -1LL);
      swift_slowDealloc(v207, -1LL, -1LL);
    }

    else
    {

      (*((void (**)(os_log_s *, uint64_t *))v18 + 1))(v200, v202);
      uint64_t v50 = swift_bridgeObjectRelease_n(v36, 2LL);
      uint64_t v328 = 1LL;
      uint64_t v37 = v320;
    }

    unint64_t v31 = v315;
    goto LABEL_45;
  }

  sub_1001E2A80(v64, v36);
  uint64_t v64 = sub_1001E1270((uint64_t)v18);
  uint64_t v66 = v330;
  uint64_t v75 = v327;
  if ((v28 & 1) == (v74 & 1))
  {
    unint64_t v71 = v64;
    if ((v28 & 1) != 0) {
      goto LABEL_38;
    }
    goto LABEL_28;
  }

LABEL_124:
  uint64_t v308 = sub_10016083C(0LL, &qword_1003F9FF8, &OBJC_CLASS___MRUserIdentity_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v308);
  __break(1u);
}

void sub_1001C6738(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v73 = a4;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v72 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = *(void **)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_4:
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v19, (uint64_t)qword_1003FF018);
    uint64_t v20 = v5;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v23 = 138543362;
      uint64_t aBlock = v20;
      id v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v78, v23 + 4, v23 + 12);
      *uint64_t v24 = v20;

      uint64_t v26 = "[%{public}@] Leader should not receive IdentityShareReply messages.";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v26, v23, 0xCu);
      uint64_t v60 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v24, 1LL, v60);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      return;
    }

void sub_1001C6F10(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v79 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (void ***)((char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = *(void **)&v4[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_1003FF010, sub_1001B2258);
LABEL_4:
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v19, (uint64_t)qword_1003FF018);
    uint64_t v20 = v4;
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = (void ***)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v23 = 138543362;
      uint64_t aBlock = v20;
      id v25 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v82, v23 + 4, v23 + 12);
      *uint64_t v24 = v20;

      uint64_t v26 = "[%{public}@] Leader should not receive MemberSync messages.";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v26, v23, 0xCu);
      uint64_t v59 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v24, 1LL, v59);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);

      return;
    }

void *sub_1001C7644(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t result = (void *)sub_1001E4490(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0LL;
    unint64_t v20 = v1 & 0xC000000000000001LL;
    uint64_t v21 = v1;
    while (v2 != v4)
    {
      if (v20)
      {
        uint64_t v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }

      else
      {
        uint64_t v5 = *(void **)(v1 + 8 * v4 + 32);
        swift_unknownObjectRetain(v5);
      }

      id v6 = [v5 identifier];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

      id v7 = [v5 identity];
      [v5 guest];
      [v5 hidden];
      sub_100237734();
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      int v15 = v14;
      swift_unknownObjectRelease(v5);
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        sub_1001E4490(v16 > 1, v17 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      char v18 = &_swiftEmptyArrayStorage[4 * v17];
      v18[4] = v9;
      v18[5] = v11;
      v18[6] = v13;
      *((_BYTE *)v18 + 56) = v15 & 1;
      *((_BYTE *)v18 + 57) = BYTE1(v15) & 1;
      *((_BYTE *)v18 + 5_Block_object_dispose(va, 8) = BYTE2(v15) & 1;
      uint64_t v1 = v21;
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_15:
    if (v1 < 0) {
      uint64_t v19 = v1;
    }
    else {
      uint64_t v19 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

uint64_t sub_1001C785C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t))
{
  id v39 = a4;
  uint64_t v6 = a3(0LL);
  uint64_t v37 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  id v36 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unsigned int v35 = (char *)&v32 - v9;
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (!v10) {
    return (uint64_t)v11;
  }
  uint64_t v32 = v4;
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_10015DCE8(0, v10, 0);
  uint64_t result = sub_1001A5B74(a1);
  int64_t v13 = result;
  int v15 = v14;
  char v17 = v16 & 1;
  uint64_t v33 = a1;
  uint64_t v34 = a1 + 56;
  while ((v13 & 0x8000000000000000LL) == 0 && v13 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != v15) {
      goto LABEL_16;
    }
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v20 = v37;
    uint64_t v19 = v38;
    uint64_t v21 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v35, v18 + *(void *)(v37 + 72) * v13, v38);
    os_log_type_t v22 = v36;
    uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v36, v21, v19);
    uint64_t v24 = v39(v23);
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    uint64_t v11 = v40;
    if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
    {
      sub_10015DCE8(0, v11[2] + 1LL, 1);
      uint64_t v11 = v40;
    }

    unint64_t v28 = v11[2];
    unint64_t v27 = v11[3];
    if (v28 >= v27 >> 1)
    {
      sub_10015DCE8(v27 > 1, v28 + 1, 1);
      uint64_t v11 = v40;
    }

    void v11[2] = v28 + 1;
    uint64_t v29 = &v11[2 * v28];
    v29[4] = v24;
    v29[5] = v26;
    a1 = v33;
    uint64_t result = sub_10015E644(v13, v15, v17 & 1, v33);
    int64_t v13 = result;
    int v15 = v30;
    char v17 = v31 & 1;
    if (!--v10)
    {
      sub_100160324(result, v30, v31 & 1);
      return (uint64_t)v11;
    }
  }

  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1001C7AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v79 = a3;
  uint64_t v8 = type metadata accessor for Participant(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v81 = v10;
  os_log_t v83 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100156B68(&qword_1003F86B0);
  __chkstk_darwin(v11);
  uint64_t v82 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  char v16 = (uint64_t *)((char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v17 = *(void **)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_executionQueue);
  *char v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)(v16);
  uint64_t v20 = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  int v21 = *((unsigned __int8 *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_isLeader);
  uint64_t v80 = v9;
  if (v21 != 1)
  {
    id v31 = (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0x2A0LL))(v20);
    if (!v31) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }

  uint64_t v22 = Participant.handle.getter(v20);
  uint64_t v24 = v23;
  uint64_t v25 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap);
  swift_beginAccess( (char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap,  v87,  0LL,  0LL);
  uint64_t v26 = *v25;
  if (!*(void *)(v26 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  swift_bridgeObjectRetain();
  unint64_t v27 = sub_10015CAD4(v22, v24);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  uint64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v27);
  uint64_t v30 = *v29;
  id v31 = (id)v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_guests);
  swift_beginAccess((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_guests, v86, 0LL, 0LL);
  uint64_t v33 = *v32;
  swift_bridgeObjectRetain();
  char v34 = sub_100158DD4(v30, (uint64_t)v31, v33);
  swift_bridgeObjectRelease();
  unsigned int v35 = (char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap;
  swift_beginAccess((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_participantIdentityMap, v85, 0LL, 0LL);
  uint64_t v36 = *(void *)v35;
  if (!*(void *)(*(void *)v35 + 16LL))
  {
    __break(1u);
LABEL_25:

    __break(1u);
    goto LABEL_26;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v37 = sub_10015CAD4(v30, (uint64_t)v31);
  if ((v38 & 1) == 0)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_27;
  }

  id v39 = (uint64_t *)(*(void *)(v36 + 56) + 16 * v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = (void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_identities);
  swift_beginAccess((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_identities, v84, 0LL, 0LL);
  uint64_t v43 = *v42;
  if (!*(void *)(v43 + 16))
  {
LABEL_27:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_28;
  }

  swift_bridgeObjectRetain();
  unint64_t v44 = sub_10015CAD4(v41, v40);
  if ((v45 & 1) == 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }

  id v46 = *(id *)(*(void *)(v43 + 56) + 8 * v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v47 = objc_allocWithZone((Class)&OBJC_CLASS___MRDFastSyncGroupSessionParticipant);
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = [v47 initWithIdentifier:v48 identity:v46 connected:1 guest:v34 & 1];

  if (v31)
  {
LABEL_12:
    uint64_t v49 = *(void *)((char *)v5 + OBJC_IVAR___MRDFastSyncGroupSession_connectionManager);
    if (v49)
    {
      v89[2] = &type metadata for Data;
      unint64_t v50 = v79;
      uint64_t v88 = (void *)a2;
      v89[0] = v79;
      swift_retain(v49);
      uint64_t v51 = sub_100160874(a2, v50);
      uint64_t v52 = Participant.handle.getter(v51);
      (*(void (**)(void **, uint64_t, uint64_t, void))(*(void *)v49 + 432LL))(&v88, v52, v53, 0LL);
      swift_release(v49);
      swift_bridgeObjectRelease();

      return sub_1001607E0(&v88);
    }

    goto LABEL_25;
  }

uint64_t sub_1001C8150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  return swift_task_switch(sub_1001C81B8, 0LL, 0LL);
}

uint64_t sub_1001C81B8()
{
  uint64_t v1 = *(void *)(v0 + 96) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v3 = (void *)Strong;
  uint64_t v4 = *(void *)(Strong + OBJC_IVAR___MRDFastSyncGroupSession_provider);
  swift_retain(v4);

  *(void *)(v0 + 12_Block_object_dispose(va, 8) = dispatch thunk of NearbyGroupSessionProvider.nearbyGroup.getter(v5);
  uint64_t v6 = swift_release(v4);
  uint64_t v7 = Participant.handle.getter(v6);
  uint64_t v9 = v8;
  *(void *)(v0 + 136) = v8;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to NearbyGroup.kickMember(_:)[1]);
  *(void *)(v0 + 144) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001C82F0;
  return NearbyGroup.kickMember(_:)(v7, v9);
}

uint64_t sub_1001C82F0()
{
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v3 = *v1;
  *(void *)(v3 + 152) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1001C83BC, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 128);
  swift_bridgeObjectRelease();
  swift_release(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1001C83BC()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_release(v1);
  if (qword_1003FF010 != -1) {
    swift_once(&qword_1003FF010, sub_1001B2258);
  }
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v4, (uint64_t)qword_1003FF018);
  swift_bridgeObjectRetain();
  swift_errorRetain(v3);
  swift_bridgeObjectRetain();
  swift_errorRetain(v3);
  uint64_t v5 = swift_retain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v26 = v0 + 80;
    unint64_t v27 = (uint64_t *)(v0 + 88);
    uint64_t v8 = *(void *)(v0 + 96) + 16LL;
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(16LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = v11;
    *(_DWORD *)uint64_t v9 = 138543874;
    swift_beginAccess(v8, v0 + 40, 0LL, 0LL);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8);
    if (Strong)
    {
      uint64_t v13 = v9 + 12;
      uint64_t v14 = v0 + 88;
      uint64_t *v27 = Strong;
      uint64_t v15 = v0 + 96;
    }

    else
    {
      uint64_t v14 = v0 + 64;
      uint64_t v13 = v9 + 12;
      *(void *)(v0 + 64) = 0LL;
      uint64_t v15 = v0 + 72;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v14, v15, v9 + 4, v13);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 112);
    unint64_t v20 = *(void *)(v0 + 120);
    uint64_t v22 = *(void *)(v0 + 96);
    *uint64_t v10 = Strong;
    swift_release(v22);
    *(_WORD *)(v9 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 72) = sub_10015ADC4(v21, v20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v26, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v20, 3LL);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain(v19);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v19);
    *(void *)(v0 + 80) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v26, v27, v9 + 24, v9 + 32);
    v10[1] = v23;
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%{public}@]<%{public}s> Error kicking member: %{public}@",  (uint8_t *)v9,  0x20u);
    uint64_t v24 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v10, 2LL, v24);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    swift_errorRelease(v19);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 96);
    swift_errorRelease(v16);
    swift_release(v18);
    swift_bridgeObjectRelease_n(v17, 2LL);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C870C(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char ***)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)&v4[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once(&qword_1003FF010, sub_1001B2258);
    goto LABEL_10;
  }

  uint64_t v13 = *(void (**)(void))&v4[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion];
  if (v13)
  {
    uint64_t v14 = *(os_log_s **)&v4[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion + 8];
    sub_1001E80BC(*(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_lowPowerCompletion], (uint64_t)v14);
    sub_100160874((uint64_t)a2, a3);
    sub_100237070( (uint64_t)a2,  a3,  (uint64_t)&type metadata for ErrorReplyMessage,  (uint64_t)&off_1003FBB70,  (uint64_t)&v71);
    unint64_t v15 = v72;
    if (v72)
    {
      if (v72 == 1)
      {
        if (qword_1003FF010 != -1) {
          swift_once(&qword_1003FF010, sub_1001B2258);
        }
        uint64_t v16 = type metadata accessor for Logger(0LL);
        sub_10015ADAC(v16, (uint64_t)qword_1003FF018);
        uint64_t v17 = v4;
        uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v68 = v14;
          unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v21 = (char **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)unint64_t v20 = 138543362;
          uint64_t v71 = (uint64_t)v17;
          uint64_t v22 = v17;
          uint64_t v14 = v68;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v20 + 4, v20 + 12);
          char *v21 = v17;

          _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[%{public}@] TransportMigrationReply message payload is malformed.",  v20,  0xCu);
          uint64_t v23 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
          swift_arrayDestroy(v21, 1LL, v23);
          swift_slowDealloc(v21, -1LL, -1LL);
          swift_slowDealloc(v20, -1LL, -1LL);
        }

        else
        {

          uint64_t v18 = (os_log_s *)v17;
        }

        unint64_t v51 = sub_1001E8078();
        uint64_t v52 = swift_allocError(&type metadata for FastSyncSessionError, v51, 0LL, 0LL);
        void *v53 = 6LL;
        v13();
        swift_errorRelease(v52);
        uint64_t v54 = swift_allocError(&type metadata for FastSyncSessionError, v51, 0LL, 0LL);
        void *v55 = 6LL;
        sub_1001CF668(v54);
        uint64_t v56 = v54;
        goto LABEL_27;
      }

      uint64_t v36 = v71;
      if (qword_1003FF010 != -1) {
        swift_once(&qword_1003FF010, sub_1001B2258);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v37, (uint64_t)qword_1003FF018);
      a2 = v4;
      uint64_t v38 = sub_1001EE6FC(v36, v15);
      id v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.fault.getter();
      int v41 = v40;
      uint64_t v68 = v39;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v42 = swift_slowAlloc(22LL, -1LL);
        uint64_t v65 = (char **)swift_slowAlloc(8LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v71 = v67;
        *(_DWORD *)uint64_t v42 = 138543618;
        int v66 = v41;
        uint64_t v69 = (uint64_t)a2;
        uint64_t v43 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v42 + 4, v42 + 12);
        unint64_t v44 = v65;
        const char *v65 = a2;

        *(_WORD *)(v42 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v69 = sub_10015ADC4(v36, v15, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v42 + 14, v42 + 22);
        sub_1001EE710(v36, v15);
        sub_1001EE710(v36, v15);
        swift_bridgeObjectRelease();
        char v45 = v68;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  (os_log_type_t)v66,  "[%{public}@] TransportMigrationReply error: %s. Cancel transition to low power.",  (uint8_t *)v42,  0x16u);
        uint64_t v46 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
        swift_arrayDestroy(v44, 1LL, v46);
        swift_slowDealloc(v44, -1LL, -1LL);
        uint64_t v47 = v67;
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v42, -1LL, -1LL);
      }

      else
      {

        sub_1001EE710(v36, v15);
        sub_1001EE710(v36, v15);
      }

      uint64_t v57 = *(void *)&a2[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
      if (v57)
      {
        uint64_t v58 = *(void *)&a2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
        if (v58)
        {
          uint64_t v59 = *(void *)&a2[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
          uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v57 + 416LL);
          swift_retain(v57);
          swift_bridgeObjectRetain();
          v60(1LL, v59, v58);
          swift_release(v57);
          swift_bridgeObjectRelease();
          unint64_t v61 = sub_1001E8078();
          uint64_t v62 = swift_allocError(&type metadata for FastSyncSessionError, v61, 0LL, 0LL);
          void *v63 = 6LL;
          v13();
          uint64_t v56 = v62;
LABEL_27:
          swift_errorRelease(v56);
          return sub_100162944((uint64_t)v13, (uint64_t)v14);
        }

        goto LABEL_34;
      }
    }

    else
    {
      uint64_t v32 = *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager];
      if (v32)
      {
        uint64_t v33 = *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_localHandle + 8];
        if (v33)
        {
          uint64_t v34 = *(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_localHandle];
          unsigned int v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v32 + 392LL);
          swift_retain(*(void *)&v4[OBJC_IVAR___MRDFastSyncGroupSession_connectionManager]);
          swift_bridgeObjectRetain();
          v35(1LL, v34, v33);
          swift_release(v32);
          swift_bridgeObjectRelease();
          ((void (*)(void))v13)(0LL);
          return sub_100162944((uint64_t)v13, (uint64_t)v14);
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
    }

    __break(1u);
LABEL_34:
    __break(1u);
    uint64_t result = swift_unexpectedError(a2, "mediaremoted/FastSyncSessions.swift", 35LL, 1LL, 1151LL);
    __break(1u);
    return result;
  }

  if (qword_1003FF010 != -1) {
    goto LABEL_30;
  }
LABEL_10:
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_10015ADAC(v24, (uint64_t)qword_1003FF018);
  uint64_t v25 = v4;
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v28 = 138543362;
    uint64_t v71 = (uint64_t)v25;
    uint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v28 + 4, v28 + 12);
    uint64_t *v29 = v25;

    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "[%{public}@] Received transport migration reply with no completion.",  v28,  0xCu);
    uint64_t v31 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v29, 1LL, v31);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    uint64_t v26 = (os_log_s *)v25;
  }

  unint64_t v48 = sub_1001E8078();
  uint64_t v49 = swift_allocError(&type metadata for FastSyncSessionError, v48, 0LL, 0LL);
  *unint64_t v50 = 6LL;
  sub_1001CF668(v49);
  return swift_errorRelease(v49);
}

void sub_1001C9138(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v146 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v143 = (char *)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v142 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v141 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v151 = (void **)type metadata accessor for Participant(0LL);
  uint64_t v150 = (uint64_t)*(v151 - 1);
  uint64_t v11 = __chkstk_darwin(v151);
  uint64_t v13 = (char *)&v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v147 = (char *)&v133 - v14;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  os_log_type_t v149 = *(void ***)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v148 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (uint64_t *)((char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *unint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  uint64_t v23 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_39;
  }

  sub_100160874(a2, a3);
  uint64_t v24 = sub_100237070( a2,  a3,  (uint64_t)&type metadata for JoinResponseMessage,  (uint64_t)&off_1003FBAB0,  (uint64_t)&aBlock);
  unint64_t v25 = v153;
  if (!v153)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
    uint64_t v90 = v5;
    uint64_t v91 = (void *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v91, v92))
    {

      return;
    }

    uint64_t v93 = swift_slowAlloc(22LL, -1LL);
    uint64_t v94 = (char **)swift_slowAlloc(8LL, -1LL);
    unint64_t v95 = (void **)swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v95;
    *(_DWORD *)uint64_t v93 = 138543618;
    uint64_t v165 = (uint64_t)v90;
    unint64_t v96 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v93 + 4, v93 + 12);
    char *v94 = v90;

    *(_WORD *)(v93 + 12) = 2080;
    uint64_t v165 = sub_10015ADC4(0xD000000000000028LL, 0x800000010033C0E0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, v166, v93 + 14, v93 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v91,  v92,  "[%{public}@] %s message payload is malformed.",  (uint8_t *)v93,  0x16u);
    uint64_t v97 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v94, 1LL, v97);
    swift_slowDealloc(v94, -1LL, -1LL);
    swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1LL, -1LL);
    uint64_t v98 = v93;
LABEL_25:
    swift_slowDealloc(v98, -1LL, -1LL);

    return;
  }

  uint64_t v26 = aBlock;
  int v27 = v154;
  uint64_t v28 = Participant.handle.getter(v24);
  uint64_t v30 = v29;
  uint64_t v31 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess( &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v165,  0LL,  0LL);
  uint64_t v32 = *(void *)v31;
  if (!*(void *)(v32 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }

  swift_bridgeObjectRetain();
  unint64_t v33 = sub_10015CAD4(v28, v30);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v17 = v150;
    uint64_t v23 = (uint64_t)v151;
    if (qword_1003FF010 == -1)
    {
LABEL_23:
      sub_10015ADAC(v15, (uint64_t)qword_1003FF018);
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, a4, v23);
      uint64_t v99 = v5;
      uint64_t v91 = (void *)Logger.logObject.getter(v99);
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v91, v100))
      {

        (*(void (**)(char *, uint64_t))(v17 + 8))(v13, v23);
        return;
      }

      uint64_t v101 = swift_slowAlloc(32LL, -1LL);
      __int128 v102 = (char **)swift_slowAlloc(8LL, -1LL);
      os_log_type_t v149 = (void **)swift_slowAlloc(64LL, -1LL);
      uint64_t aBlock = v149;
      *(_DWORD *)uint64_t v101 = 138543874;
      uint64_t v163 = (uint64_t)v99;
      uint64_t v103 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v101 + 4, v101 + 12);
      *__int128 v102 = v99;

      *(_WORD *)(v101 + 12) = 2080;
      uint64_t v163 = sub_10015ADC4(0xD000000000000028LL, 0x800000010033C0E0LL, (uint64_t *)&aBlock);
      uint64_t v104 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v101 + 14, v101 + 22);
      *(_WORD *)(v101 + 22) = 2082;
      uint64_t v105 = Participant.handle.getter(v104);
      uint64_t v163 = sub_10015ADC4(v105, v106, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v101 + 24, v101 + 32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void **))(v150 + 8))(v13, v151);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v91,  v100,  "[%{public}@] %s message received from unknown handle: %{public}s",  (uint8_t *)v101,  0x20u);
      uint64_t v107 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v102, 1LL, v107);
      swift_slowDealloc(v102, -1LL, -1LL);
      uint64_t v108 = v149;
      swift_arrayDestroy(v149, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      uint64_t v98 = v101;
      goto LABEL_25;
    }

void sub_1001CA390(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v143 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v142 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  id v139 = (char *)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Participant(0LL);
  uint64_t v145 = *(char **)(v12 - 8);
  uint64_t v146 = (void **)v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v144 = (void **)((char *)&v133 - v16);
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v133 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void **)&v5[OBJC_IVAR___MRDFastSyncGroupSession_executionQueue];
  *(void *)unint64_t v20 = v21;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }

  sub_100160874(a2, a3);
  uint64_t v23 = sub_100237070( a2,  a3,  (uint64_t)&type metadata for RemoveRequestMessage,  (uint64_t)&off_1003FBAE0,  (uint64_t)&aBlock);
  unint64_t v24 = v148;
  if (!v148)
  {
    if (qword_1003FF010 != -1) {
      swift_once(&qword_1003FF010, sub_1001B2258);
    }
    uint64_t v88 = type metadata accessor for Logger(0LL);
    sub_10015ADAC(v88, (uint64_t)qword_1003FF018);
    uint64_t v89 = v5;
    uint64_t v90 = (void *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v90, v91))
    {

      return;
    }

    uint64_t v92 = swift_slowAlloc(22LL, -1LL);
    uint64_t v93 = (char **)swift_slowAlloc(8LL, -1LL);
    uint64_t v94 = (void **)swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v94;
    *(_DWORD *)uint64_t v92 = 138543618;
    uint64_t v158 = (uint64_t)v89;
    unint64_t v95 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v92 + 4, v92 + 12);
    char *v93 = v89;

    *(_WORD *)(v92 + 12) = 2080;
    uint64_t v158 = sub_10015ADC4(0xD000000000000029LL, 0x800000010033C0B0LL, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, v159, v92 + 14, v92 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v90,  v91,  "[%{public}@] %s message payload is malformed.",  (uint8_t *)v92,  0x16u);
    uint64_t v96 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
    swift_arrayDestroy(v93, 1LL, v96);
    swift_slowDealloc(v93, -1LL, -1LL);
    swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    uint64_t v97 = v92;
LABEL_26:
    swift_slowDealloc(v97, -1LL, -1LL);

    return;
  }

  unint64_t v25 = aBlock;
  uint64_t v26 = Participant.handle.getter(v23);
  uint64_t v28 = v27;
  uint64_t v29 = &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap];
  swift_beginAccess( &v5[OBJC_IVAR___MRDFastSyncGroupSession_participantHandleToMediaRemoteIdentifierMap],  &v158,  0LL,  0LL);
  uint64_t v30 = *(void *)v29;
  if (!*(void *)(v30 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  swift_bridgeObjectRetain();
  unint64_t v31 = sub_10015CAD4(v26, v28);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    unint64_t v20 = v145;
    uint64_t v17 = (uint64_t)v146;
    if (qword_1003FF010 == -1)
    {
LABEL_24:
      uint64_t v98 = type metadata accessor for Logger(0LL);
      sub_10015ADAC(v98, (uint64_t)qword_1003FF018);
      (*((void (**)(char *, uint64_t, uint64_t))v20 + 2))(v15, a4, v17);
      uint64_t v99 = v5;
      uint64_t v90 = (void *)Logger.logObject.getter(v99);
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled((os_log_t)v90, v100))
      {

        (*((void (**)(char *, uint64_t))v20 + 1))(v15, v17);
        return;
      }

      uint64_t v101 = swift_slowAlloc(32LL, -1LL);
      __int128 v102 = (char **)swift_slowAlloc(8LL, -1LL);
      uint64_t v144 = (void **)swift_slowAlloc(64LL, -1LL);
      uint64_t aBlock = v144;
      *(_DWORD *)uint64_t v101 = 138543874;
      uint64_t v156 = (uint64_t)v99;
      uint64_t v103 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v101 + 4, v101 + 12);
      *__int128 v102 = v99;

      *(_WORD *)(v101 + 12) = 2080;
      uint64_t v156 = sub_10015ADC4(0xD000000000000029LL, 0x800000010033C0B0LL, (uint64_t *)&aBlock);
      uint64_t v104 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v101 + 14, v101 + 22);
      *(_WORD *)(v101 + 22) = 2082;
      uint64_t v105 = Participant.handle.getter(v104);
      uint64_t v156 = sub_10015ADC4(v105, v106, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, v157, v101 + 24, v101 + 32);
      swift_bridgeObjectRelease();
      (*((void (**)(char *, void **))v145 + 1))(v15, v146);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v90,  v100,  "[%{public}@] %s message received from unknown handle: %{public}s",  (uint8_t *)v101,  0x20u);
      uint64_t v107 = sub_100156B68((uint64_t *)&unk_1003FB7E0);
      swift_arrayDestroy(v102, 1LL, v107);
      swift_slowDealloc(v102, -1LL, -1LL);
      uint64_t v108 = v144;
      swift_arrayDestroy(v144, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      uint64_t v97 = v101;
      goto LABEL_26;
    }