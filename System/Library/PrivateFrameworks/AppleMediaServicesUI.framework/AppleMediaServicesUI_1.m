uint64_t sub_100072780(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  v2 = sub_1000727DC((uint64_t)sub_1000727D8, 0LL, a1, a2);
  v6 = sub_100072810(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000727DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16), a3, a4);
}

uint64_t sub_100072810(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    sub_100072954(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      sub_1000644FC(v12, 0LL);
      unint64_t v8 = (unint64_t)v13;
      sub_100072A40(v16, (uint64_t)(v13 + 4), v9, a1, a2, v5, a4);
      unint64_t v5 = v14;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v15 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v15;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

void sub_100072954(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((a1 & 0xC) == 4LL << v8)
  {
    sub_100064558(a1, a3, a4);
    unint64_t v7 = v10;
  }

  if ((a2 & 0xC) == v9)
  {
    sub_100064558(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return;
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return;
  }

  unint64_t v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
    return;
  }

  __break(1u);
}

void sub_100072A40( unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v11 = a4;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    unint64_t v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v25 = v16;
  uint64_t v28 = a3 - 1;
  unint64_t v11 = a4;
  while (1)
  {
    unint64_t v17 = v11;
    if ((v11 & 0xC) == v15) {
      sub_100064558(v11, a6, a7);
    }
    if (v17 >> 14 < v29 || v17 >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      char v21 = String.UTF8View._foreignSubscript(position:)();
    }

    else
    {
      unint64_t v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        char v21 = *((_BYTE *)v30 + v19);
      }

      else
      {
        uint64_t v20 = v23;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t v20 = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v21 = *(_BYTE *)(v20 + v19);
      }
    }

    if ((v11 & 0xC) == v15)
    {
      sub_100064558(v11, a6, a7);
      unint64_t v11 = v22;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v25 <= v11 >> 16) {
      goto LABEL_35;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)(v11, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14) {
        continue;
      }
    }

    goto LABEL_33;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_100072C40()
{
  return AnyHashable.init<A>(_:)(v0 - 152);
}

  ;
}

  ;
}

uint64_t sub_100072C74()
{
  uint64_t v1 = *(void *)(v0 - 128);
  v2 = sub_10000D37C((void *)(v0 - 152), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

  ;
}

void sub_100072CA8()
{
}

  ;
}

uint64_t sub_100072CC8(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 152) = v1;
  return AMSLogKey();
}

void sub_100072CD4()
{
}

uint64_t sub_100072CE0()
{
  return sub_10000E854(v0 - 152);
}

void sub_100072CE8(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  uint64_t v8 = _swiftEmptyArrayStorage;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v7 << 6);
LABEL_22:
    uint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = (void *)v14[1];
    swift_bridgeObjectRetain(v16);
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    unint64_t v18 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A6BA0, v17);
    swift_bridgeObjectRelease();
    if (v18 <= 3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_100013FC4();
        uint64_t v8 = v23;
      }

      unint64_t v19 = v8;
      unint64_t v20 = v8[2];
      char v21 = v19;
      if (v20 >= v19[3] >> 1)
      {
        sub_100013FC4();
        char v21 = v24;
      }

      v21[2] = v20 + 1;
      unint64_t v22 = (char *)v21 + v20;
      uint64_t v8 = v21;
      v22[32] = v18;
    }
  }

  int64_t v11 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_30;
  }

  if (v11 >= v6) {
    goto LABEL_28;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v7;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v7 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_28;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v7);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v7 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_28;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v7);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v7 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_28;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v7);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_22;
  }

  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_28:
    swift_release(a1);
    return;
  }

  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_28;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }

LABEL_30:
  __break(1u);
}

  __break(1u);
}

              swift_release(v46);
              return;
            }
          }
        }
      }
    }

  v33 = *(void *)(v0 + 88);
  swift_release();
  sub_1000FDC54();
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_100072EF8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a2 + 56);
  int64_t v50 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v9 = 0LL;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    *(void *)&v48[0] = *v15;
    *((void *)&v48[0] + 1) = v17;
    swift_bridgeObjectRetain_n(v17, 3LL);
    uint64_t v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v48, &type metadata for String);
    id v19 = objc_msgSend(a3, "__swift_objectForKeyedSubscript:", v18);
    swift_unknownObjectRelease(v18);
    if (v19)
    {
      _bridgeAnyObjectToAny(_:)(v19);
      swift_unknownObjectRelease(v19);
    }

    else
    {
      memset(v48, 0, sizeof(v48));
    }

    sub_100076F44((uint64_t)v48, (uint64_t)v49);
    if (v49[3])
    {
      if ((swift_dynamicCast(v47, v49, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }

      uint64_t v44 = v47[0];
      uint64_t v45 = v47[1];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v17);
      char isUnique = swift_isUniquelyReferenced_nonNull_native(a1);
      v49[0] = a1;
      unint64_t v25 = sub_100030CCC(v16, v17);
      uint64_t v27 = a1[2];
      BOOL v28 = (v26 & 1) == 0;
      Swift::Int v29 = v27 + v28;
      if (__OFADD__(v27, v28)) {
        goto LABEL_44;
      }
      char v30 = v26;
      unint64_t v42 = v25;
      sub_10000D33C(&qword_1001C9DE8);
      Swift::Bool v31 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v29);
      unint64_t v32 = v42;
      if (v31)
      {
        unint64_t v33 = sub_100030CCC(v16, v17);
        if ((v30 & 1) != (v34 & 1)) {
          goto LABEL_46;
        }
        unint64_t v32 = v33;
      }

      a1 = (void *)v49[0];
      if ((v30 & 1) != 0)
      {
        v35 = (void *)(*(void *)(v49[0] + 56LL) + 16 * v32);
        swift_bridgeObjectRelease();
        void *v35 = v44;
        v35[1] = v45;
      }

      else
      {
        *(void *)(v49[0] + 8 * (v32 >> 6) + 64) |= 1LL << v32;
        v36 = (uint64_t *)(a1[6] + 16 * v32);
        uint64_t *v36 = v16;
        v36[1] = v17;
        v37 = (void *)(a1[7] + 16 * v32);
        void *v37 = v44;
        v37[1] = v45;
        uint64_t v38 = a1[2];
        BOOL v39 = __OFADD__(v38, 1LL);
        uint64_t v40 = v38 + 1;
        if (v39) {
          goto LABEL_45;
        }
        a1[2] = v40;
        swift_bridgeObjectRetain(v17);
      }

LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

    swift_once(&qword_1001C8028, sub_1000CE7F0);
    goto LABEL_13;
  }

  (*((void (**)(uint64_t, uint64_t))v3 + 1))(v63, v62);
  sub_100019EC0(v128, type metadata accessor for RetryConfiguration);
LABEL_19:
  if ((v130 & 1) != 0)
  {
    v88 = v127;
    sub_1000CFE98(v58, v127, &qword_1001CC200);
    v89 = sub_100048918(v88, 1LL, v23);
    if (v60)
    {
      sub_1000D1264(v89, &qword_1001CC200);
      v91 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v129;
      sub_1000D120C(*((uint64_t (**)(void, void, uint64_t))v129 + 2));
      v92 = v56;
      if ((v54 & 1) != 0) {
        v92 = v55;
      }
      v93 = (uint64_t)v126;
      *v126 = 0LL;
      *(void *)(v93 + 8) = v53;
      *(double *)(v93 + 16) = v92;
      sub_1000D1220(v93 + *(int *)(v23 + 28), v88, v91[4]);
    }

    else
    {
      v103 = v56;
      v104 = v88;
      v105 = v125;
      sub_1000D129C(v104, v90, type metadata accessor for RetryConfiguration);
      uint64_t v3 = (char *)(*v105 + 1LL);
      if (__OFADD__(*v105, 1LL))
      {
        __break(1u);
        goto LABEL_43;
      }

      v106 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v129;
      sub_1000D120C(*((uint64_t (**)(void, void, uint64_t))v129 + 2));
      v93 = (uint64_t)v126;
      if ((v54 & 1) != 0) {
        v107 = v55 * exp2((double)(uint64_t)v3);
      }
      else {
        v107 = v103;
      }
      *(void *)v93 = v3;
      *(void *)(v93 + 8) = v53;
      *(double *)(v93 + 16) = v107;
      sub_1000D1220(v93 + *(int *)(v23 + 28), (uint64_t)v105, v106[4]);
      sub_100019EC0((uint64_t)v125, type metadata accessor for RetryConfiguration);
    }

    sub_100019E6C(v58, &qword_1001CC200);
    sub_100036FD0(v93, v58, type metadata accessor for RetryConfiguration);
    v81 = v58;
    v82 = 0LL;
    v83 = 1LL;
    v84 = v23;
LABEL_37:
    sub_10000D5C0(v81, v82, v83, v84);
    goto LABEL_38;
  }

  if (qword_1001C8028 != -1) {
    swift_once(&qword_1001C8028, sub_1000CE7F0);
  }
  sub_10000D33C(&qword_1001C9C70);
  v94 = *(void *)(*(void *)(sub_10000DC98() - 8) + 72LL);
  sub_1000D126C();
  v96 = (__n128 *)sub_10000DCF0((uint64_t)&v3[2 * v94], v95);
  v97 = sub_1000D11A4(v96, (__n128)xmmword_100164230);
  sub_1000CFE30((uint64_t)v134, (uint64_t)v97, type metadata accessor for MercuryCacheMetadata);
  v99 = (id)AMSLogKey(v98);
  if (v99)
  {
    sub_1000105E8((uint64_t)v99);
    sub_1000D12F8();
    swift_bridgeObjectRetain(v57);
    sub_1000B1A2C();
    sub_10000DC08();
    v100 = v139;
    v101 = sub_10000D37C(v138, v139);
    v102 = sub_10000DC54((uint64_t)v101, v100);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v102);
    v135 = v102;
    sub_1000675BC();
    sub_1000D1140();
    sub_10000DC14();
    MetatypeMetadata = &type metadata for String;
    v135 = *(void *)&v56;
    v136 = v57;
    sub_1000675BC();
    sub_1000D1140();
    sub_10000DC4C(93LL);
    sub_1000D1128();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000B1A18();
    sub_10000DC08();
    v108 = v139;
    v109 = sub_10000D37C(v138, v139);
    v110 = sub_10000DC54((uint64_t)v109, v108);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v110);
    v135 = v110;
    v111 = sub_1000675BC();
    sub_1000D127C(v111, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000D1128();
  }

  sub_1000D12B8();
  v112 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
  v113 = static os_log_type_t.info.getter(v112);
  sub_1000486E4(v113);
  sub_10000DE2C();
LABEL_38:
  sub_10001A30C();
}

void sub_100073380(uint64_t a1, void *a2, uint64_t (*a3)(void *, unint64_t), uint64_t a4)
{
  uint64_t v9 = v26[0];
  uint64_t v24 = v26[1];
  int64_t v10 = v26[3];
  unint64_t v11 = v26[4];
  int64_t v27 = (unint64_t)(v26[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v13 = v12 | (v10 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v9 + 48) + 16 * v13;
    uint64_t v18 = *(void **)v17;
    id v19 = *(void **)(v17 + 8);
    uint64_t v20 = *(void *)(v9 + 56) + 16 * v13;
    char v21 = *(void **)v20;
    char v22 = *(void **)(v20 + 8);
    v25[0] = v18;
    v25[1] = v19;
    v25[2] = v21;
    v25[3] = v22;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    sub_100075D14(v25, a2, a3, a4);
    if (v4)
    {
      swift_release(a4);
      swift_release(a2);
      swift_release(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v14 >= v27) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v14);
    if (!v15)
    {
      int64_t v16 = v10 + 2;
      if (v10 + 2 >= v27) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v10 + 3;
      if (v10 + 3 >= v27) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v10 + 4;
      if (v10 + 4 >= v27) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15)
      {
LABEL_12:
        int64_t v14 = v16;
      }

      else
      {
        int64_t v14 = v10 + 5;
        if (v10 + 5 >= v27) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v24 + 8 * v14);
        if (!v15)
        {
          int64_t v23 = v10 + 6;
          while (v23 < v27)
          {
            unint64_t v15 = *(void *)(v24 + 8 * v23++);
            if (v15)
            {
              int64_t v14 = v23 - 1;
              goto LABEL_13;
            }
          }

uint64_t sub_1000735A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  int64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v4[12];
  uint64_t v15 = swift_allocObject(&unk_1001AB880, 24LL, 7LL);
  swift_weakInit(v15 + 16, v4);
  int64_t v16 = (void *)swift_allocObject(&unk_1001AB8A8, 56LL, 7LL);
  v16[2] = v15;
  unint64_t v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = v8;
  aBlock[4] = sub_1000769B8;
  Swift::Int v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  aBlock[3] = &unk_1001AB8C0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  uint64_t v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  int64_t v27 = _swiftEmptyArrayStorage;
  unint64_t v19 = sub_100010404();
  uint64_t v20 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v21 = sub_100010444();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  char v22 = v29;
  swift_release(v15);
  return swift_release(v22);
}

uint64_t sub_1000737B8( uint64_t a1, uint64_t a2, uint64_t (*a3)(void *, unint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v38[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v42, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v14 = Strong;
    sub_100073AA4(a2, a3, a4);
    sub_100073FB4(a2, (uint64_t)a3, a4);
    return swift_release(v14);
  }

  else
  {
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = type metadata accessor for LogMessage(0LL);
    uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v17 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v18 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a5);
    v40[0] = a5;
    id v19 = (id)AMSLogKey(MetatypeMetadata);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v23 = v22;

      swift_bridgeObjectRetain(v23);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v24._countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t v25 = MetatypeMetadata;
      uint64_t v26 = sub_10000D37C(v40, MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
      BOOL v39 = (void *)swift_getMetatypeMetadata(DynamicType);
      v38[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
      sub_10000E888((uint64_t)v38);
      v28._countAndFlagsBits = 5972026LL;
      v28._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      BOOL v39 = &type metadata for String;
      v38[0] = v21;
      v38[1] = v23;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
      sub_10000E888((uint64_t)v38);
      v29._countAndFlagsBits = 93LL;
      v29._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      LogMessage.init(stringInterpolation:)(v12);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v30._countAndFlagsBits = 0LL;
      v30._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t v31 = MetatypeMetadata;
      unint64_t v32 = sub_10000D37C(v40, MetatypeMetadata);
      uint64_t v33 = swift_getDynamicType(v32, v31, 1LL);
      BOOL v39 = (void *)swift_getMetatypeMetadata(v33);
      v38[0] = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
      sub_10000E888((uint64_t)v38);
      v34._countAndFlagsBits = 58LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      LogMessage.init(stringInterpolation:)(v12);
    }

    sub_10000D3A0(v40);
    uint64_t v35 = LogMessage.init(stringLiteral:)(0xD000000000000024LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v35 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v36 = static os_log_type_t.error.getter(v35);
    sub_1000BD1B0(v36, v18);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100073AA4(uint64_t a1, uint64_t (*a2)(void *, unint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)*v3;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v52[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)&v52[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = (void *)v4[12];
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, void *))(v13 + 104))( v15,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v17 = v16;
  uint64_t v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, void *))(v13 + 8))(v15, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    uint64_t v48 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
LABEL_11:
    uint64_t v49 = static os_log_type_t.debug.getter(v48);
    sub_1000BD1B0(v49, a3);

    return swift_bridgeObjectRelease();
  }

  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  uint64_t v12 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  uint64_t v18 = (uint64_t)String._bridgeToObjectiveC()();
  id v19 = [v12 dictionaryForKey:v18];
  id v54 = 0LL;
  id v20 = [v19 valueWithError:&v54];

  id v21 = v54;
  if (!v20)
  {
    id v24 = v54;
    uint64_t v25 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v26);
    swift_errorRelease(v25);
    uint64_t v27 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v28 = type metadata accessor for LogMessage(0LL);
    a3 = swift_allocObject( v27,  ((*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(v28 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) | 7LL);
    *(_OWORD *)(a3 + 16) = xmmword_100164230;
    v56 = v8;
    id v54 = v4;
    uint64_t v29 = swift_retain(v4);
    id v30 = (id)AMSLogKey(v29);
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v34 = v33;

      swift_bridgeObjectRetain(v34);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v35._countAndFlagsBits = 0LL;
      v35._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      uint64_t v36 = v56;
      v37 = sub_10000D37C(&v54, (uint64_t)v56);
      uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v52[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v52);
      sub_10000E888((uint64_t)v52);
      v39._countAndFlagsBits = 5972026LL;
      v39._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      uint64_t MetatypeMetadata = &type metadata for String;
      v52[0] = v32;
      v52[1] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v52);
      sub_10000E888((uint64_t)v52);
      v40._countAndFlagsBits = 93LL;
      v40._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      LogMessage.init(stringInterpolation:)(v11);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v41._countAndFlagsBits = 0LL;
      v41._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      unint64_t v42 = v56;
      v43 = sub_10000D37C(&v54, (uint64_t)v56);
      uint64_t v44 = swift_getDynamicType(v43, v42, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v44);
      v52[0] = v44;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v52);
      sub_10000E888((uint64_t)v52);
      v45._countAndFlagsBits = 58LL;
      v45._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      LogMessage.init(stringInterpolation:)(v11);
    }

    sub_10000D3A0(&v54);
    id v54 = 0LL;
    unint64_t v55 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    id v54 = (id)0xD000000000000015LL;
    unint64_t v55 = 0x800000010016E830LL;
    v46._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0x7070696B73202D20LL;
    v47._object = (void *)0xEB00000000676E69LL;
    String.append(_:)(v47);
    v56 = &type metadata for String;
    static LogMessage.safe(_:)(&v54);
    uint64_t v48 = sub_10000E888((uint64_t)&v54);
    if (qword_1001C7F80 == -1) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }

  id v22 = v54;
  if (a1) {
    uint64_t v23 = a1;
  }
  else {
    uint64_t v23 = sub_10007551C();
  }
  swift_bridgeObjectRetain(a1);
  sub_10007568C(v23, v20, a2, a3);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100073FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v3 + 96);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    if (a1)
    {
      swift_bridgeObjectRetain(a1);
      sub_100072CE8(v14);
      uint64_t v16 = v15;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v16 = sub_10001C8FC();
    }

    id v17 = (char *)v16[2];
    if (v17)
    {
      swift_bridgeObjectRetain(v16);
      uint64_t v18 = 0LL;
      do
      {
        id v19 = v18 + 1;
        char v21 = v18[(void)v16 + 32];
        sub_100074110((unsigned __int8 *)&v21, v3, a2, a3);
        uint64_t v18 = v19;
      }

      while (v17 != v19);
      swift_bridgeObjectRelease();
    }

    return swift_bridgeObjectRelease();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_100074110(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[5] = a4;
  v8[6] = a3;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  ((void (*)(void))__chkstk_darwin)();
  type metadata accessor for Date(0LL);
  uint64_t v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  __chkstk_darwin(v5);
  v8[9] = (char *)v8 - v6;
  uint64_t v7 = *a1;
  v8[8] = v7;
  __asm { BR              X9 }

uint64_t sub_10007422C()
{
  *(void *)(v6 - 320) = v5 + 104;
  swift_beginAccess(v5 + 104, v6 - 192, 0LL, 0LL);
  uint64_t v7 = *(void *)(v5 + 104);
  swift_bridgeObjectRetain(v7);
  *(void *)(v6 - 296) = 0x6C616E7265746E69LL;
  sub_1000F4E34(0x6C616E7265746E69LL, 0xE800000000000000LL, v7);
  char v9 = v8;
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  id v11 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  *(_BYTE *)(v6 - 168) = 0;
  *(_BYTE *)(v6 - 167) = *(void *)(v6 - 288);
  *(void *)(v6 - 328) = v11;
  *(void *)(v6 - 160) = v11;
  *(void *)(v6 - 152) = -1LL;
  *(void *)(v6 - 144) = 0LL;
  *(void *)(v6 - 136) = 0LL;
  *(void *)(v6 - 336) = "";
  *(void *)(v6 - 128) = 0xD000000000000018LL;
  *(void *)(v6 - 120) = 0x800000010016ADB0LL;
  *(void *)(v6 - 112) = 25LL;
  *(_BYTE *)(v6 - 104) = 2;
  *(void *)(v6 - 96) = 10485760LL;
  uint64_t v12 = *(void *)(v6 - 280);
  sub_10001D030();
  static Date.now.getter(v13);
  double v14 = Date.timeIntervalSince(_:)(v12);
  uint64_t v15 = v2;
  uint64_t v16 = *(void (**)(uint64_t))(v3 + 8);
  *(void *)(v6 - 344) = v15;
  v16(v0);
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
        + 2LL * *(void *)(v18 + 72),
          *(unsigned __int8 *)(v18 + 80) | 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_100164230;
  if (v14 >= 100800.0)
  {
    *(void *)(v6 - 240) = v1;
    *(void *)(v6 - 264) = v5;
    uint64_t v33 = swift_retain(v5);
    id v34 = (id)AMSLogKey(v33);
    if (v34)
    {
      Swift::String v35 = v34;
      *(void *)(v6 - 352) = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      uint64_t v37 = v36;

      swift_bridgeObjectRetain(v37);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v38._countAndFlagsBits = 0LL;
      v38._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v39 = *(void *)(v6 - 240);
      Swift::String v40 = sub_10000D37C((void *)(v6 - 264), v39);
      uint64_t DynamicType = swift_getDynamicType(v40, v39, 1LL);
      *(void *)(v6 - 200) = swift_getMetatypeMetadata(DynamicType);
      *(void *)(v6 - 224) = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
      sub_10000E888(v6 - 224);
      v42._countAndFlagsBits = 5972026LL;
      v42._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      *(void *)(v6 - 200) = &type metadata for String;
      *(void *)(v6 - 224) = *(void *)(v6 - 352);
      *(void *)(v6 - 216) = v37;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
      sub_10000E888(v6 - 224);
      v43._countAndFlagsBits = 93LL;
      v43._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      LogMessage.init(stringInterpolation:)(v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v54._countAndFlagsBits = 0LL;
      v54._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      uint64_t v55 = *(void *)(v6 - 240);
      v56 = sub_10000D37C((void *)(v6 - 264), v55);
      uint64_t v57 = swift_getDynamicType(v56, v55, 1LL);
      *(void *)(v6 - 200) = swift_getMetatypeMetadata(v57);
      *(void *)(v6 - 224) = v57;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
      sub_10000E888(v6 - 224);
      v58._countAndFlagsBits = 58LL;
      v58._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      LogMessage.init(stringInterpolation:)(v4);
    }

    sub_10000D3A0((void *)(v6 - 264));
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(48LL, 2LL);
    v59._countAndFlagsBits = 0x6E65656220736148LL;
    v59._object = (void *)0xE900000000000020LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    *(void *)(v6 - 240) = &type metadata for Double;
    *(double *)(v6 - 264) = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 264);
    sub_10000E888(v6 - 264);
    v60._countAndFlagsBits = 0x73646E6F63657320LL;
    v60._object = (void *)0xEF2065636E697320LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    *(void *)(v6 - 240) = &type metadata for String;
    uint64_t v61 = *(void *)(v6 - 296);
    *(void *)(v6 - 264) = v61;
    *(void *)(v6 - 256) = 0xE800000000000000LL;
    swift_bridgeObjectRetain(0xE800000000000000LL);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 264);
    sub_10000E888(v6 - 264);
    v62._object = (void *)0x800000010016E7B0LL;
    v62._countAndFlagsBits = 0xD000000000000018LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v62);
    uint64_t v63 = LogMessage.init(stringInterpolation:)(v4);
    if (qword_1001C7F80 != -1) {
      uint64_t v63 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v64 = static os_log_type_t.debug.getter(v63);
    sub_1000BD1B0(v64, v19);
    swift_bridgeObjectRelease();
    swift_beginAccess(*(void *)(v6 - 320), v6 - 264, 33LL, 0LL);
    swift_bridgeObjectRetain(0xE800000000000000LL);
    sub_100148020((uint64_t *)(v6 - 224), v61, 0xE800000000000000LL);
    swift_endAccess(v6 - 264);
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }

  *(void *)(v6 - 240) = v1;
  *(void *)(v6 - 264) = v5;
  uint64_t v20 = swift_retain(v5);
  id v21 = (id)AMSLogKey(v20);
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = v16;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v26 = v25;

    swift_bridgeObjectRetain(v26);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v27._countAndFlagsBits = 0LL;
    v27._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = *(void *)(v6 - 240);
    uint64_t v29 = sub_10000D37C((void *)(v6 - 264), v28);
    uint64_t v30 = swift_getDynamicType(v29, v28, 1LL);
    *(void *)(v6 - 200) = swift_getMetatypeMetadata(v30);
    *(void *)(v6 - 224) = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
    sub_10000E888(v6 - 224);
    v31._countAndFlagsBits = 5972026LL;
    v31._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    *(void *)(v6 - 200) = &type metadata for String;
    *(void *)(v6 - 224) = v24;
    *(void *)(v6 - 216) = v26;
    uint64_t v16 = v23;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
    sub_10000E888(v6 - 224);
    v32._countAndFlagsBits = 93LL;
    v32._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v44._countAndFlagsBits = 0LL;
    v44._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v44);
    uint64_t v45 = *(void *)(v6 - 240);
    Swift::String v46 = sub_10000D37C((void *)(v6 - 264), v45);
    uint64_t v47 = swift_getDynamicType(v46, v45, 1LL);
    *(void *)(v6 - 200) = swift_getMetatypeMetadata(v47);
    *(void *)(v6 - 224) = v47;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 224);
    sub_10000E888(v6 - 224);
    v48._countAndFlagsBits = 58LL;
    v48._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v48);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0((void *)(v6 - 264));
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(48LL, 2LL);
  v49._countAndFlagsBits = 0x6E65656220736148LL;
  v49._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v49);
  *(void *)(v6 - 240) = &type metadata for Double;
  *(double *)(v6 - 264) = v14;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 264);
  sub_10000E888(v6 - 264);
  v50._countAndFlagsBits = 0x73646E6F63657320LL;
  v50._object = (void *)0xEF2065636E697320LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v50);
  *(void *)(v6 - 240) = &type metadata for String;
  *(void *)(v6 - 264) = *(void *)(v6 - 296);
  *(void *)(v6 - 256) = 0xE800000000000000LL;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v6 - 264);
  sub_10000E888(v6 - 264);
  v51._object = (void *)0x800000010016E790LL;
  v51._countAndFlagsBits = 0xD000000000000018LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v51);
  uint64_t v52 = LogMessage.init(stringInterpolation:)(v4);
  if (qword_1001C7F80 != -1) {
    uint64_t v52 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v53 = static os_log_type_t.debug.getter(v52);
  sub_1000BD1B0(v53, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return ((uint64_t (*)(void, void))v16)(*(void *)(v6 - 280), *(void *)(v6 - 344));
}

uint64_t sub_100074BB4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  char v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = type metadata accessor for LogMessage(0LL);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
        + 3LL * *(void *)(*(void *)(v11 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_100164240;
  uint64_t v36 = (void *)type metadata accessor for ForceSyncCoordinator();
  v35[0] = a2;
  uint64_t v13 = swift_retain(a2);
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v36;
    id v21 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v23._countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v16;
    v33[1] = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v24._countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v36;
    Swift::String v27 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    v33[0] = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v29._countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v9);
  }

  sub_10000D3A0(v35);
  LogMessage.init(stringLiteral:)(0xD000000000000015LL);
  uint64_t v36 = &type metadata for String;
  v35[0] = a3;
  v35[1] = a4;
  swift_bridgeObjectRetain(a4);
  static LogMessage.safe(_:)(v35);
  uint64_t v30 = sub_10000E888((uint64_t)v35);
  if (qword_1001C7F80 != -1) {
    uint64_t v30 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  sub_1000BD1B0(v31, v12);
  swift_bridgeObjectRelease();
  return sub_100074E98(a3, a4);
}

uint64_t sub_100074E98(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)*v2;
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  char v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = type metadata accessor for LogMessage(0LL);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v11 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_100164230;
  uint64_t v39 = v6;
  uint64_t v37 = (uint64_t)v3;
  uint64_t v13 = swift_retain(v3);
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v39;
    id v21 = sub_10000D37C(&v37, (uint64_t)v39);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v23._countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v16;
    v35[1] = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v24._countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v39;
    Swift::String v27 = sub_10000D37C(&v37, (uint64_t)v39);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    v35[0] = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v29._countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v9);
  }

  sub_10000D3A0(&v37);
  uint64_t v37 = 0LL;
  unint64_t v38 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease();
  uint64_t v37 = 0x676E69766F6D6552LL;
  unint64_t v38 = 0xE900000000000020LL;
  v30._countAndFlagsBits = a1;
  v30._object = a2;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x7571206D6F726620LL;
  v31._object = (void *)0xEB00000000657565LL;
  String.append(_:)(v31);
  uint64_t v39 = &type metadata for String;
  static LogMessage.safe(_:)(&v37);
  uint64_t v32 = sub_10000E888((uint64_t)&v37);
  if (qword_1001C7F80 != -1) {
    uint64_t v32 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v33 = static os_log_type_t.debug.getter(v32);
  sub_1000BD1B0(v33, v12);
  swift_bridgeObjectRelease();
  swift_beginAccess(v3 + 13, &v37, 33LL, 0LL);
  sub_100116588(a1, (uint64_t)a2);
  swift_endAccess(&v37);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000751E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = type metadata accessor for LogMessage(0LL);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
        + 4LL * *(void *)(*(void *)(v12 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_1001649D0;
  Swift::String v46 = (void *)type metadata accessor for ForceSyncCoordinator();
  uint64_t v44 = a2;
  uint64_t v14 = swift_retain(a2);
  id v15 = (id)AMSLogKey(v14);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v40[1] = a2;
    uint64_t v18 = a4;
    uint64_t v19 = a3;
    uint64_t v20 = a1;
    uint64_t v21 = v17;
    uint64_t v23 = v22;

    swift_bridgeObjectRetain(v23);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v24._countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    Swift::String v25 = v46;
    uint64_t v26 = sub_10000D37C(&v44, (uint64_t)v46);
    uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v42[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v28._countAndFlagsBits = 5972026LL;
    v28._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t MetatypeMetadata = &type metadata for String;
    v42[0] = v21;
    v42[1] = v23;
    a1 = v20;
    a3 = v19;
    a4 = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v29._countAndFlagsBits = 93LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v30._countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    Swift::String v31 = v46;
    uint64_t v32 = sub_10000D37C(&v44, (uint64_t)v46);
    uint64_t v33 = swift_getDynamicType(v32, v31, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v33);
    v42[0] = v33;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v34._countAndFlagsBits = 58LL;
    v34._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&v44);
  swift_getErrorValue(a1, v41);
  uint64_t v35 = Error.localizedDescription.getter(v40[3], v40[4]);
  Swift::String v46 = &type metadata for String;
  uint64_t v44 = v35;
  uint64_t v45 = v36;
  static LogMessage.safe(_:)(&v44);
  sub_10000E888((uint64_t)&v44);
  LogMessage.init(stringLiteral:)(0xD000000000000014LL);
  Swift::String v46 = &type metadata for String;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  swift_bridgeObjectRetain(a4);
  static LogMessage.safe(_:)(&v44);
  uint64_t v37 = sub_10000E888((uint64_t)&v44);
  if (qword_1001C7F80 != -1) {
    uint64_t v37 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v38 = static os_log_type_t.error.getter(v37);
  sub_1000BD1B0(v38, v13);
  swift_bridgeObjectRelease();
  return sub_100074E98(a3, a4);
}

uint64_t sub_10007551C()
{
  uint64_t v0 = sub_10001C8FC();
  if (v0[2])
  {
    sub_100016F88();
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  return sub_10013E21C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_10007568C(uint64_t a1, void *a2, uint64_t (*a3)(void *, unint64_t), uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = (void *)v4[12];
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    swift_beginAccess(v4 + 13, v23, 0LL, 0LL);
    uint64_t v16 = v4[13];
    swift_bridgeObjectRetain(v16);
    uint64_t v17 = sub_100075834();
    uint64_t v18 = sub_100072EF8(_swiftEmptyDictionarySingleton, a1, a2);
    swift_bridgeObjectRetain(v16);
    swift_retain(v4);
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = sub_100076A28(v18, v16, (uint64_t)v4, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_retain(v19);
    uint64_t v21 = sub_1000E06E0(v20, v16);
    sub_100075CBC((uint64_t)v21);
    swift_bridgeObjectRelease();
    swift_retain(v4);
    swift_retain(a4);
    sub_100073380(v19, v4, a3, a4);
    return swift_release(v19);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100075834()
{
  CFPropertyListRef v1 = sub_10004A1A4();
  if (!v1) {
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }
  CFPropertyListRef v2 = v1;
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___NSDictionary);
  uint64_t v4 = swift_dynamicCastObjCClass(v2, v3);
  if (!v4)
  {
    swift_unknownObjectRelease(v2);
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }

  uint64_t v6 = 0LL;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v4,  &v6,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  swift_unknownObjectRelease(v2);
  uint64_t result = v6;
  if (!v6) {
    return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }
  return result;
}

uint64_t sub_1000758F4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  sub_1000F4E34(v15, v14, a3);
  if ((v18 & 1) != 0)
  {
    uint64_t v56 = v5;
    uint64_t v19 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v20 = type metadata accessor for LogMessage(0LL);
    uint64_t v21 = swift_allocObject( v19,  ((*(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v20 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v20 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v21 + 16) = xmmword_100164230;
    uint64_t v55 = (void *)type metadata accessor for ForceSyncCoordinator();
    uint64_t v53 = a4;
    uint64_t v22 = swift_retain(a4);
    id v23 = (id)AMSLogKey(v22);
    if (v23)
    {
      Swift::String v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v27 = v26;

      swift_bridgeObjectRetain(v27);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v28._countAndFlagsBits = 0LL;
      v28._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      Swift::String v29 = v55;
      Swift::String v30 = sub_10000D37C(&v53, (uint64_t)v55);
      uint64_t DynamicType = swift_getDynamicType(v30, v29, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v51[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v32._countAndFlagsBits = 5972026LL;
      v32._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t MetatypeMetadata = &type metadata for String;
      v51[0] = v25;
      v51[1] = v27;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v33._countAndFlagsBits = 93LL;
      v33._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      LogMessage.init(stringInterpolation:)(v13);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v42._countAndFlagsBits = 0LL;
      v42._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      Swift::String v43 = v55;
      uint64_t v44 = sub_10000D37C(&v53, (uint64_t)v55);
      uint64_t v45 = swift_getDynamicType(v44, v43, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v45);
      v51[0] = v45;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v46._countAndFlagsBits = 58LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v13);
    }

    sub_10000D3A0(&v53);
    uint64_t v53 = 0LL;
    unint64_t v54 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease();
    uint64_t v53 = v15;
    unint64_t v54 = v14;
    v47._object = (void *)0x800000010016E870LL;
    v47._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v47);
    uint64_t v55 = &type metadata for String;
    static LogMessage.safe(_:)(&v53);
    uint64_t v48 = sub_10000E888((uint64_t)&v53);
    if (qword_1001C7F80 != -1) {
      uint64_t v48 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v49 = static os_log_type_t.debug.getter(v48);
    sub_1000BD1B0(v49, v21);
    swift_bridgeObjectRelease();
    char v41 = 0;
    return v41 & 1;
  }

  if (!*(void *)(a5 + 16))
  {
LABEL_16:
    char v41 = 1;
    return v41 & 1;
  }

  swift_bridgeObjectRetain(v14);
  unint64_t v34 = sub_100030CCC(v15, v14);
  if ((v35 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  uint64_t v36 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v34);
  uint64_t v38 = *v36;
  uint64_t v37 = v36[1];
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  if (v38 == v17 && v37 == v16)
  {
    swift_bridgeObjectRelease();
    char v41 = 0;
  }

  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v37, v17, v16, 0LL);
    swift_bridgeObjectRelease();
    char v41 = v40 ^ 1;
  }

  return v41 & 1;
}

uint64_t sub_100075CBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 104);
  *(void *)(v1 + 104) = a1;
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100075D14(void **a1, void *a2, uint64_t (*a3)(void *, unint64_t), uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (unint64_t)a1[1];
  uint64_t v61 = *a1;
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v13 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v50 = v14;
  uint64_t v16 = swift_allocObject(v12, ((v15 + 32) & ~v15) + 2 * v14, v15 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100164230;
  uint64_t v56 = (void *)type metadata accessor for ForceSyncCoordinator();
  uint64_t v53 = (uint64_t)a2;
  uint64_t v17 = swift_retain(a2);
  id v18 = (id)AMSLogKey(v17);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v48 = v11;
    uint64_t v49 = v10;
    uint64_t v21 = v20;
    unint64_t v23 = v22;

    swift_bridgeObjectRetain(v23);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v24._countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = v56;
    uint64_t v26 = sub_10000D37C(&v53, (uint64_t)v56);
    uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v58 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v58);
    sub_10000E888((uint64_t)&v58);
    v28._countAndFlagsBits = 5972026LL;
    v28._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v58 = v21;
    unint64_t v59 = v23;
    uint64_t v10 = v49;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v58);
    sub_10000E888((uint64_t)&v58);
    v29._countAndFlagsBits = 93LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v8);
    uint64_t v11 = v48;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v30._countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    Swift::String v31 = v56;
    Swift::String v32 = sub_10000D37C(&v53, (uint64_t)v56);
    uint64_t v33 = swift_getDynamicType(v32, v31, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v33);
    uint64_t v58 = v33;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v58);
    sub_10000E888((uint64_t)&v58);
    v34._countAndFlagsBits = 58LL;
    v34._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(&v53);
  uint64_t v53 = 0LL;
  unint64_t v54 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  uint64_t v58 = v53;
  unint64_t v59 = v54;
  v35._object = (void *)0x800000010016E850LL;
  v35._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v35);
  uint64_t v36 = v61;
  uint64_t v53 = (uint64_t)v61;
  unint64_t v54 = v9;
  uint64_t v55 = v11;
  uint64_t v56 = v10;
  uint64_t v37 = sub_10000D33C(&qword_1001CAE60);
  _print_unlocked<A, B>(_:_:)( &v53,  &v58,  v37,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v56 = &type metadata for String;
  uint64_t v53 = v58;
  unint64_t v54 = v59;
  static LogMessage.safe(_:)(&v53);
  uint64_t v38 = sub_10000E888((uint64_t)&v53);
  if (qword_1001C7F80 != -1) {
    uint64_t v38 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v39 = static os_log_type_t.default.getter(v38);
  sub_1000BD1B0(v39, v16);
  swift_bridgeObjectRelease();
  uint64_t v40 = v52(v36, v9);
  char v41 = (void *)swift_allocObject(&unk_1001AB948, 56LL, 7LL);
  v41[2] = a2;
  v41[3] = v36;
  v41[4] = v9;
  v41[5] = v11;
  v41[6] = v10;
  Swift::String v42 = (void *)swift_allocObject(&unk_1001AB970, 56LL, 7LL);
  Swift::String v43 = v11;
  uint64_t v44 = v42;
  v42[2] = a2;
  void v42[3] = v36;
  v42[4] = v9;
  v42[5] = v43;
  v42[6] = v10;
  uint64_t v45 = (void *)a2[12];
  uint64_t v56 = (void *)sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v57 = &protocol witness table for OS_dispatch_queue;
  uint64_t v53 = (uint64_t)v45;
  swift_retain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(v9, 2LL);
  swift_bridgeObjectRetain_n(v10, 2LL);
  id v46 = v45;
  Promise.then(perform:orCatchError:on:)(sub_100076EF0, v41, sub_100076F34, v44, &v53);
  swift_release(v40);
  swift_release(v41);
  swift_release(v44);
  return sub_10000D3A0(&v53);
}

uint64_t sub_100076150(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v15 = type metadata accessor for LogMessage(0LL);
  uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
        + 4LL * *(void *)(*(void *)(v15 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1001649D0;
  uint64_t v45 = (void *)type metadata accessor for ForceSyncCoordinator();
  uint64_t v43 = a2;
  uint64_t v17 = swift_retain(a2);
  id v18 = (id)AMSLogKey(v17);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v39 = a6;
    uint64_t v40 = a3;
    uint64_t v21 = a5;
    uint64_t v22 = v20;
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v25._countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v45;
    uint64_t v27 = sub_10000D37C(&v43, (uint64_t)v45);
    uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v41[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
    sub_10000E888((uint64_t)v41);
    v29._countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t MetatypeMetadata = &type metadata for String;
    v41[0] = v22;
    v41[1] = v24;
    a5 = v21;
    a6 = v39;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
    sub_10000E888((uint64_t)v41);
    v30._countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v13);
    a3 = v40;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v31._countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    Swift::String v32 = v45;
    uint64_t v33 = sub_10000D37C(&v43, (uint64_t)v45);
    uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
    v41[0] = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
    sub_10000E888((uint64_t)v41);
    v35._countAndFlagsBits = 58LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v13);
  }

  sub_10000D3A0(&v43);
  LogMessage.init(stringLiteral:)(0xD000000000000015LL);
  uint64_t v45 = &type metadata for String;
  uint64_t v43 = a3;
  uint64_t v44 = (uint64_t)a4;
  swift_bridgeObjectRetain(a4);
  static LogMessage.safe(_:)(&v43);
  sub_10000E888((uint64_t)&v43);
  uint64_t v45 = &type metadata for String;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  swift_bridgeObjectRetain(a6);
  static LogMessage.safe(_:)(&v43);
  uint64_t v36 = sub_10000E888((uint64_t)&v43);
  if (qword_1001C7F80 != -1) {
    uint64_t v36 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v37 = static os_log_type_t.default.getter(v36);
  sub_1000BD1B0(v37, v16);
  swift_bridgeObjectRelease();
  sub_100076484(a5, a6, a3, (uint64_t)a4);
  return sub_100074E98(a3, a4);
}

uint64_t sub_100076484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100075834();
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  swift_isUniquelyReferenced_nonNull_native(v6);
  sub_100034620();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10007688C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007652C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v41 = a1;
  uint64_t v42 = a5;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v14 = type metadata accessor for LogMessage(0LL);
  uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
        + 5LL * *(void *)(*(void *)(v14 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_100164250;
  uint64_t v49 = (void *)type metadata accessor for ForceSyncCoordinator();
  uint64_t v47 = a2;
  uint64_t v16 = swift_retain(a2);
  id v17 = (id)AMSLogKey(v16);
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v40 = a6;
    uint64_t v20 = a3;
    uint64_t v22 = v21;

    swift_bridgeObjectRetain(v22);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v23._countAndFlagsBits = 0LL;
    v23._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t v24 = v49;
    Swift::String v25 = sub_10000D37C(&v47, (uint64_t)v49);
    uint64_t DynamicType = swift_getDynamicType(v25, v24, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v45[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000E888((uint64_t)v45);
    v27._countAndFlagsBits = 5972026LL;
    v27._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t MetatypeMetadata = &type metadata for String;
    v45[0] = v19;
    v45[1] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000E888((uint64_t)v45);
    v28._countAndFlagsBits = 93LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v12);
    a3 = v20;
    a6 = v40;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v29._countAndFlagsBits = 0LL;
    v29._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    Swift::String v30 = v49;
    Swift::String v31 = sub_10000D37C(&v47, (uint64_t)v49);
    uint64_t v32 = swift_getDynamicType(v31, v30, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v32);
    v45[0] = v32;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000E888((uint64_t)v45);
    v33._countAndFlagsBits = 58LL;
    v33._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    LogMessage.init(stringInterpolation:)(v12);
  }

  sub_10000D3A0(&v47);
  swift_getErrorValue(v41, v44, v43);
  uint64_t v34 = Error.localizedDescription.getter(v43[1], v43[2]);
  uint64_t v49 = &type metadata for String;
  uint64_t v47 = v34;
  uint64_t v48 = v35;
  static LogMessage.safe(_:)(&v47);
  sub_10000E888((uint64_t)&v47);
  LogMessage.init(stringLiteral:)(0xD000000000000014LL);
  uint64_t v49 = &type metadata for String;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  swift_bridgeObjectRetain(a4);
  static LogMessage.safe(_:)(&v47);
  sub_10000E888((uint64_t)&v47);
  uint64_t v49 = &type metadata for String;
  uint64_t v47 = v42;
  uint64_t v48 = a6;
  swift_bridgeObjectRetain(a6);
  static LogMessage.safe(_:)(&v47);
  uint64_t v36 = sub_10000E888((uint64_t)&v47);
  if (qword_1001C7F80 != -1) {
    uint64_t v36 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v37 = static os_log_type_t.error.getter(v36);
  sub_1000BD1B0(v37, v15);
  swift_bridgeObjectRelease();
  return sub_100074E98(a3, a4);
}

void sub_10007688C()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10004A190(isa, 1u);
}

uint64_t sub_1000768F0()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100076924()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for ForceSyncCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20ForceSyncCoordinator);
}

uint64_t sub_100076964()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100076988()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000769B8()
{
  return sub_1000737B8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(uint64_t (**)(void *, unint64_t))(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_1000769C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000769D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000769E4(uint64_t a1)
{
  return sub_100074BB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000769F4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100076A1C(uint64_t a1)
{
  return sub_1000751E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100076A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  char v9 = *(_BYTE *)(a1 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (unint64_t)((1LL << v9) + 63) >> 6;
  uint64_t v12 = 8 * v11;
  swift_bridgeObjectRetain_n(a2, 2LL);
  swift_retain_n(a3, 2LL);
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n(a4, 2LL);
  if (v10 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v12, 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v14 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100149C08(0LL, v11, v14);
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    swift_bridgeObjectRetain(a4);
    uint64_t v15 = sub_100076C80((uint64_t)v14, v11, v8, a2, a3, a4);
    if (v4) {
      swift_willThrow(v15);
    }
    else {
      uint64_t v8 = v15;
    }
    swift_release(a3);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v16 = (void *)swift_slowAlloc(v12, -1LL);
    sub_100149C08(0LL, v11, v16);
    swift_bridgeObjectRetain(a2);
    swift_retain(a3);
    swift_bridgeObjectRetain(a4);
    uint64_t v8 = sub_100076C80((uint64_t)v16, v11, v8, a2, a3, a4);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_release(a3);
    swift_bridgeObjectRelease();
  }

  swift_release_n(a3, 2LL);
  swift_bridgeObjectRelease_n(a2, 2LL);
  swift_bridgeObjectRelease_n(a4, 3LL);
  return v8;
}

uint64_t sub_100076C80(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a4;
  Swift::String v27 = (unint64_t *)result;
  int64_t v9 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v29 = a3 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 64);
  int64_t v30 = (unint64_t)(v10 + 63) >> 6;
  while (v12)
  {
    unint64_t v13 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v14 = v13 | (v9 << 6);
LABEL_17:
    uint64_t v18 = *(void *)(a3 + 56);
    uint64_t v19 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v14);
    uint64_t v20 = v19[1];
    v33[0] = *v19;
    v33[1] = v20;
    uint64_t v21 = (uint64_t *)(v18 + 16 * v14);
    uint64_t v22 = v21[1];
    v32[0] = *v21;
    v32[1] = v22;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    char v23 = sub_1000758F4(v33, v32, v34, a5, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_release(a5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    char v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v24 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      BOOL v15 = __OFADD__(v28++, 1LL);
      if (v15) {
        goto LABEL_30;
      }
    }
  }

  BOOL v15 = __OFADD__(v9++, 1LL);
  if (v15)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v9 >= v30) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v9);
  if (v16)
  {
LABEL_16:
    unint64_t v12 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v9 << 6);
    goto LABEL_17;
  }

  int64_t v17 = v9 + 1;
  if (v9 + 1 >= v30) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v9 + 2;
  if (v9 + 2 >= v30) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v9 + 3;
  if (v9 + 3 >= v30)
  {
LABEL_27:
    Swift::Int v25 = sub_1000CCAE4(v27, a2, v28, a3);
    swift_bridgeObjectRelease();
    swift_release(a5);
    swift_bridgeObjectRelease();
    return v25;
  }

  unint64_t v16 = *(void *)(v29 + 8 * v17);
  if (v16)
  {
LABEL_15:
    int64_t v9 = v17;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v9 >= v30) {
      goto LABEL_27;
    }
    unint64_t v16 = *(void *)(v29 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_16;
    }
  }

LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

      uint64_t v21 = 0LL;
      memset(v38, 0, sizeof(v38));
      uint64_t v37 = 0u;
    }

    uint64_t v29 = *(void *)(v18 + 8 * v30);
    if (v29)
    {
LABEL_18:
      uint64_t v28 = v30;
LABEL_15:
      uint64_t v21 = (v29 - 1) & v29;
      char v24 = __clz(__rbit64(v29)) + (v28 << 6);
      int64_t v17 = v28;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v22)
    {
      int64_t v17 = v33;
      goto LABEL_29;
    }

    uint64_t v29 = *(void *)(v18 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_15;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
}

                swift_bridgeObjectRelease();
                swift_release(v15);
                return (uint64_t)v20;
              }
            }
          }
        }
      }
    }

  v89 = 0LL;
  v91 = 0LL;
LABEL_30:
  uint64_t v57 = *((unsigned __int8 *)v2 + 24);
  v95 = (void *)v2[4];
  uint64_t v58 = v2[5];
  v99 = v2[6];
  v100 = v58;
  v93 = v2[7];
  unint64_t v59 = v2[8];
  Swift::String v60 = v2[9];
  v97 = (unint64_t *)v2[10];
  v98 = v59;
  v96 = *((unsigned __int8 *)v2 + 88);
  v94 = v2[12];
  v90 = v24;
  v92 = v57 | ((unint64_t)v24 << 8);
  uint64_t v61 = (uint64_t)v2 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_context;
  Swift::String v62 = type metadata accessor for JSStackContext(0LL);
  uint64_t v63 = v61 + *(int *)(v62 + 36);
  uint64_t v64 = v102;
  v65 = (char *)v56 + *(int *)(v102 + 20);
  v66 = type metadata accessor for URL(0LL);
  v67 = *(void (**)(void))(*(void *)(v66 - 8) + 16LL);
  v68 = v65;
  v69 = v60;
  ((void (*)(char *, uint64_t, uint64_t))v67)(v68, v63, v66);
  v101 = (char *)v56 + *(int *)(v64 + 24);
  v67();
  v70 = *(_BYTE *)(v61 + *(int *)(v62 + 44));
  v71 = v93;
  v72 = v95;
  void *v56 = v92;
  v56[1] = (unint64_t)v72;
  v73 = v99;
  v56[2] = v100;
  v56[3] = v73;
  v74 = v98;
  v56[4] = v71;
  v56[5] = v74;
  v75 = (char *)v97;
  v56[6] = v69;
  v56[7] = (unint64_t)v75;
  v76 = v94;
  v56[8] = v96;
  v56[9] = v76;
  *((_BYTE *)v56 + *(int *)(v64 + 28)) = v70;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v69);
  v77 = v72;
  v78 = [v109 data];
  v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v78);
  v81 = v80;

  v82 = v91;
  if (v91)
  {
    v83 = (void *)objc_opt_self(&OBJC_CLASS___AMSDefaults);
    v84 = v77;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v82);
    sub_1000657C4(v83);
    v88 = v69;
    v109 = v84;
    if (!v85) {
      Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    }
    __asm { BR              X9 }
  }

  v86 = v103;
  Data.write(to:options:)(v101, 0LL, v79, v81);
  if (!v86) {
    sub_1000789D4();
  }
  sub_100019EC0((uint64_t)v56, type metadata accessor for JetpackOutputWriter);
  sub_10001BD84(v79, v81);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100076EF0(uint64_t a1)
{
  return sub_100076150( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100076F04()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100076F34(uint64_t a1)
{
  return sub_10007652C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48));
}

uint64_t sub_100076F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CAAD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100076F8C( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = a5;
  uint64_t v47 = a8;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v45 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  uint64_t v55 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v13 + 8));
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v50 = (char *)&v41 - v17;
  uint64_t v18 = a4;
  __chkstk_darwin(v16);
  uint64_t v49 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v48 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v44 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  char v24 = (char *)&v41 - v23;
  uint64_t v51 = v8;
  uint64_t v25 = a6;
  uint64_t v26 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v26) {
    return static Array._allocateUninitialized(_:)(0LL, v18);
  }
  Swift::Int v27 = v26;
  uint64_t v42 = v20;
  uint64_t v28 = v15;
  uint64_t v59 = ContiguousArray.init()(v18);
  uint64_t v52 = type metadata accessor for ContiguousArray(0LL, v18);
  ContiguousArray.reserveCapacity(_:)(v27);
  uint64_t v43 = v24;
  uint64_t v29 = a3;
  uint64_t v30 = v51;
  uint64_t v31 = v29;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v27 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v56 = v25;
    uint64_t v34 = v49;
    Swift::String v33 = v50;
    Swift::String v35 = v43;
    while (1)
    {
      uint64_t v36 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v58, v35, v31, v56);
      (*(void (**)(char *))(v28 + 16))(v33);
      v36(v58, 0LL);
      uint64_t v37 = v57;
      v53(v33, v55);
      if (v37) {
        break;
      }
      uint64_t v57 = 0LL;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v33, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v34, v52);
      dispatch thunk of Collection.formIndex(after:)(v35, v31, v56);
      if (!--v27)
      {
        uint64_t v38 = v48;
        uint64_t v39 = v44;
        uint64_t v40 = v42;
        (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v44, v35, v42);
        _expectEnd<A>(of:is:)(v30, v39, v31, v56);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
        return v59;
      }
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v42);
    swift_release(v59);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v55, v46);
  }

  return result;
}

uint64_t (*HeapType.comparator<A>(type:)( uint64_t a1, char a2, uint64_t a3, uint64_t a4))(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) != 0) {
    uint64_t v6 = &unk_1001AB998;
  }
  else {
    uint64_t v6 = &unk_1001AB9C0;
  }
  if ((a2 & 1) != 0) {
    uint64_t v7 = sub_10007733C;
  }
  else {
    uint64_t v7 = sub_10007734C;
  }
  uint64_t v8 = (void *)swift_allocObject(v6, 40LL, 7LL);
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a3;
  return v7;
}

uint64_t sub_10007733C(uint64_t a1, uint64_t a2)
{
  return sub_100077358( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t sub_10007734C(uint64_t a1, uint64_t a2)
{
  return sub_100077358( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t, void, void))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t sub_100077358(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void))
{
  return a3(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24)) & 1;
}

unint64_t sub_100077388()
{
  unint64_t result = qword_1001CAE68[0];
  if (!qword_1001CAE68[0])
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for HeapType, &type metadata for HeapType);
    atomic_store(result, qword_1001CAE68);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for HeapType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100077410 + 4 * byte_1001660DD[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100077444 + 4 * asc_1001660D8[v4]))();
}

uint64_t sub_100077444(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007744C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100077454LL);
  }
  return result;
}

uint64_t sub_100077460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100077468LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10007746C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077474(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HeapType()
{
  return &type metadata for HeapType;
}

uint64_t sub_100077490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t type metadata accessor for Heap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000256DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Heap);
}

uint64_t sub_1000774BC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1001661F8, a1);
}

uint64_t sub_1000774CC(uint64_t result)
{
  if (result + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  BOOL v1 = __OFADD__(2 * result, 2LL);
  unint64_t result = 2 * result + 2;
  if (v1) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000774F0( void *a1, uint64_t (*a2)(char *, char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v28 - v15;
  if (v17 + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v18 = sub_1000774CC(a4);
  uint64_t v19 = *a1;
  uint64_t result = ContiguousArray.count.getter(*a1, a5);
  if (__OFSUB__(result, 1LL))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }

  uint64_t v29 = a6;
  uint64_t v20 = a4;
  if (result - 1 >= ((2 * a4) | 1))
  {
    ContiguousArray.subscript.getter((2 * a4) | 1, v19, a5);
    ContiguousArray.subscript.getter(a4, v19, a5);
    char v21 = v30(v16, v13);
    uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v13, a5);
    v22(v16, a5);
    if ((v21 & 1) != 0) {
      uint64_t v20 = (2 * a4) | 1;
    }
    else {
      uint64_t v20 = a4;
    }
  }

  uint64_t v23 = *a1;
  uint64_t result = ContiguousArray.count.getter(*a1, a5);
  if (__OFSUB__(result, 1LL)) {
    goto LABEL_16;
  }
  if (result - 1 >= v18)
  {
    ContiguousArray.subscript.getter(v18, v23, a5);
    ContiguousArray.subscript.getter(v20, v23, a5);
    char v24 = v30(v16, v13);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v13, a5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v16, a5);
    if ((v24 & 1) != 0) {
      uint64_t v20 = v18;
    }
  }

  if (v20 != a4)
  {
    uint64_t v32 = v20;
    uint64_t v33 = a4;
    uint64_t v26 = type metadata accessor for ContiguousArray(0LL, a5);
    uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v26);
    MutableCollection.swapAt(_:_:)(&v33, &v32, v26, WitnessTable);
    return sub_1000774F0(a1, v30, v31, v20, a5, v29);
  }

  return result;
}

uint64_t sub_100077724( uint64_t *a1, uint64_t (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (void *)__chkstk_darwin(v13);
  uint64_t v18 = (char *)v28 - v17;
  ContiguousArray.subscript.getter(v19, *v16, v20);
  v28[0] = a2;
  v28[1] = a3;
  LOBYTE(a3) = a2(v18, a5);
  char v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v18, a6);
  if ((a3 & 1) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x800000010016E8B0LL,  "amsengagementd/Heap.swift",  25LL,  2LL,  101LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v22 = type metadata accessor for ContiguousArray(0LL, a6);
    ContiguousArray._makeMutableAndUnique()();
    uint64_t v23 = *a1;
    sub_10007865C(a4, *a1);
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 24))( v23 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
             + *(void *)(v12 + 72) * a4,
               a5,
               a6);
    if (a4 >= 1)
    {
      do
      {
        uint64_t v25 = *a1;
        ContiguousArray.subscript.getter(a4, *a1, a6);
        unint64_t v26 = a4 - 1;
        ContiguousArray.subscript.getter((unint64_t)(a4 - 1) >> 1, v25, a6);
        LOBYTE(v25) = ((uint64_t (*)(char *, char *))v28[0])(v18, v15);
        v21(v15, a6);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v18, a6);
        if ((v25 & 1) == 0) {
          break;
        }
        unint64_t v29 = (unint64_t)(a4 - 1) >> 1;
        uint64_t v30 = a4;
        uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v22);
        uint64_t result = MutableCollection.swapAt(_:_:)(&v30, &v29, v22, WitnessTable);
        a4 = (unint64_t)(a4 - 1) >> 1;
      }

      while (v26 > 1);
    }
  }

  return result;
}

uint64_t sub_10007794C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100077958(0LL, a1, a2);
}

uint64_t sub_100077958@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v57 - v14;
  uint64_t v16 = v3[1];
  uint64_t v61 = v3;
  Swift::String v62 = v3 + 1;
  uint64_t v64 = v16;
  uint64_t v17 = type metadata accessor for ContiguousArray(0LL, v6);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
  if ((Collection.isEmpty.getter(v17, WitnessTable) & 1) != 0)
  {
    uint64_t v19 = 1LL;
    uint64_t v20 = v63;
    return sub_10000D5C0(v20, v19, 1LL, v6);
  }

  Swift::String v60 = v15;
  ContiguousArray.subscript.getter(a1, v16, v6);
  uint64_t v21 = swift_retain(v16);
  uint64_t v22 = ContiguousArray.count.getter(v21, v6);
  swift_release(v16);
  uint64_t v23 = v7;
  if (v22 == 1) {
    goto LABEL_6;
  }
  ContiguousArray.subscript.getter(a1, v16, v6);
  uint64_t v24 = swift_retain(v16);
  uint64_t v25 = ContiguousArray.count.getter(v24, v6);
  swift_release(v16);
  uint64_t result = v25 - 1;
  if (__OFSUB__(v25, 1LL))
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  ContiguousArray.subscript.getter(result, v16, v6);
  uint64_t v27 = *(void *)(a2 + 24);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v10, v6, *(void *)(v27 + 8));
  unint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
  v29(v10, v6);
  v29(v13, v6);
  if ((v28 & 1) != 0)
  {
LABEL_6:
    uint64_t v30 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
    uint64_t v31 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
    RangeReplaceableCollection<>.removeLast()(v17, v30, v31);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v6);
LABEL_7:
    uint64_t v20 = v63;
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v63, v60, v6);
    uint64_t v19 = 0LL;
    return sub_10000D5C0(v20, v19, 1LL, v6);
  }

  uint64_t v32 = (uint64_t (*)(char *, char *))v61[2];
  uint64_t v33 = v61[3];
  uint64_t v58 = v27;
  uint64_t v59 = v32;
  uint64_t v34 = v61[1];
  swift_retain(v33);
  ContiguousArray.subscript.getter(a1, v34, v6);
  uint64_t v35 = swift_retain(v34);
  uint64_t v36 = ContiguousArray.count.getter(v35, v6);
  swift_release(v34);
  uint64_t result = v36 - 1;
  if (__OFSUB__(v36, 1LL)) {
    goto LABEL_16;
  }
  ContiguousArray.subscript.getter(result, v34, v6);
  char v37 = v59(v13, v10);
  swift_release(v33);
  v29(v10, v6);
  uint64_t v38 = v29;
  v29(v13, v6);
  if ((v37 & 1) != 0)
  {
    uint64_t v39 = v62;
    uint64_t v40 = *v62;
    uint64_t v41 = swift_retain(*v62);
    uint64_t v42 = ContiguousArray.count.getter(v41, v6);
    swift_release(v40);
    uint64_t result = v42 - 1;
    if (!__OFSUB__(v42, 1LL))
    {
      ContiguousArray.subscript.getter(result, v40, v6);
      ContiguousArray._makeMutableAndUnique()();
      uint64_t v43 = v61;
      uint64_t v44 = v61[1];
      sub_10007865C(a1, v44);
      (*(void (**)(unint64_t, char *, uint64_t))(v23 + 40))( v44 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
      + *(void *)(v23 + 72) * a1,
        v13,
        v6);
      uint64_t v45 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
      uint64_t v46 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
      RangeReplaceableCollection<>.removeLast()(v17, v45, v46);
      v38(v13, v6);
      uint64_t v48 = (uint64_t (*)(char *, char *))v43[2];
      uint64_t v47 = v43[3];
      swift_retain(v47);
      sub_1000774F0(v39, v48, v47, a1, v6, v58);
      swift_release(v47);
      goto LABEL_7;
    }

    goto LABEL_17;
  }

  uint64_t v49 = a1;
  uint64_t v51 = (uint64_t (*)(char *, uint64_t))v61[2];
  uint64_t v50 = v61[3];
  uint64_t v52 = v61[1];
  swift_retain(v50);
  uint64_t v53 = swift_retain(v52);
  uint64_t v54 = ContiguousArray.count.getter(v53, v6);
  swift_release(v52);
  uint64_t result = v54 - 1;
  if (!__OFSUB__(v54, 1LL))
  {
    ContiguousArray.subscript.getter(result, v52, v6);
    sub_100077724(v62, v51, v50, v49, (uint64_t)v13, v6);
    v38(v13, v6);
    swift_release(v50);
    uint64_t v55 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
    uint64_t v56 = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v17);
    RangeReplaceableCollection<>.removeLast()(v17, v55, v56);
    v38(v13, v6);
    goto LABEL_7;
  }

void sub_100077E18(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  object = a2;
  uint64_t v67 = (uint64_t)a2;
  uint64_t v10 = type metadata accessor for ContiguousArray(0LL, a5);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ContiguousArray<A>, v10);
  uint64_t v12 = Collection.isEmpty.getter(v10, WitnessTable);
  if ((v12 & 1) == 0)
  {
    int v59 = a1;
    uint64_t v67 = (uint64_t)object;
    __chkstk_darwin(v12);
    v58[2] = a5;
    v58[3] = a6;
    swift_retain(object);
    uint64_t v14 = sub_100076F8C( (void (*)(char *, char *))sub_100078640,  (uint64_t)v58,  v10,  (uint64_t)&type metadata for String,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v13);
    swift_release(v67);
    int64_t v15 = *(void *)(v14 + 16);
    int64_t v66 = v15;
    if (v15)
    {
      uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
      sub_100017138(0LL, v15, 0);
      uint64_t v16 = (void *)v67;
      uint64_t v17 = v14;
      uint64_t v18 = (void *)(v14 + 40);
      do
      {
        uint64_t v19 = *(v18 - 1);
        uint64_t v20 = *v18;
        swift_bridgeObjectRetain(*v18);
        uint64_t v21 = String.count.getter(v19, v20);
        swift_bridgeObjectRelease();
        uint64_t v67 = (uint64_t)v16;
        unint64_t v23 = v16[2];
        unint64_t v22 = v16[3];
        if (v23 >= v22 >> 1)
        {
          sub_100017138((char *)(v22 > 1), v23 + 1, 1);
          uint64_t v16 = (void *)v67;
        }

        v18 += 2;
        v16[2] = v23 + 1;
        v16[v23 + 4] = v21;
        --v15;
      }

      while (v15);
      uint64_t v14 = v17;
      int64_t v15 = v66;
    }

    else
    {
      uint64_t v16 = _swiftEmptyArrayStorage;
    }

    Swift::Int v24 = sub_100078380(v16);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
LABEL_43:
      __break(1u);
      return;
    }

    uint64_t v61 = a5;
    uint64_t v62 = a6;
    if (v15)
    {
      v60._object = object;
      v69 = _swiftEmptyArrayStorage;
      sub_100016F88();
      uint64_t v27 = 0LL;
      char v28 = v69;
      v60._uint64_t countAndFlagsBits = v14;
      uint64_t v65 = v14 + 32;
      do
      {
        unint64_t v29 = (uint64_t *)(v65 + 16 * v27);
        uint64_t v30 = *v29;
        uint64_t v31 = (void *)v29[1];
        swift_bridgeObjectRetain_n(v31, 2LL);
        uint64_t v32 = String.count.getter(v30, v31);
        uint64_t v33 = v31;
        while (v32 < v24)
        {
          if ((sub_100078838() & 1) != 0)
          {
            uint64_t v67 = v30;
            unint64_t v68 = (unint64_t)v33;
            v35._uint64_t countAndFlagsBits = sub_100078844();
            String.append(_:)(v35);
          }

          else
          {
            uint64_t v67 = 32LL;
            unint64_t v68 = 0xE100000000000000LL;
            v34._uint64_t countAndFlagsBits = v30;
            v34._object = v33;
            String.append(_:)(v34);
            swift_bridgeObjectRelease();
          }

          uint64_t v30 = v67;
          uint64_t v33 = (void *)v68;
          uint64_t v32 = sub_100078838();
        }

        swift_bridgeObjectRelease();
        v69 = v28;
        unint64_t v36 = v28[2];
        if (v36 >= v28[3] >> 1)
        {
          sub_100016F88();
          char v28 = v69;
        }

        ++v27;
        void v28[2] = v36 + 1;
        char v37 = &v28[2 * v36];
        v37[4] = v30;
        v37[5] = v33;
      }

      while (v27 != v66);
      swift_bridgeObjectRelease();
      object = v60._object;
    }

    else
    {
      swift_bridgeObjectRelease();
      char v28 = _swiftEmptyArrayStorage;
    }

    uint64_t v67 = 10LL;
    unint64_t v68 = 0xE100000000000000LL;
    v38._uint64_t countAndFlagsBits = sub_100078844();
    Swift::String v60 = String.init(repeating:count:)(v38, v24);
    int64_t v66 = v28[2];
    if (v66)
    {
      uint64_t v39 = 0LL;
      LODWORD(v65) = v59 & 1;
      uint64_t v40 = v28 + 5;
      while (1)
      {
        uint64_t v41 = *(v40 - 1);
        uint64_t v42 = (void *)*v40;
        swift_bridgeObjectRetain(*v40);
        sub_1000783C4(v39, v65, (uint64_t)object, v63, v64, v24, v61, v62);
        Swift::Int v44 = v43;
        v45._uint64_t countAndFlagsBits = sub_100078844();
        Swift::String v47 = String.init(repeating:count:)(v45, v46);
        String.append(_:)(v47);
        swift_bridgeObjectRelease();
        v48._uint64_t countAndFlagsBits = v41;
        v48._object = v42;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._uint64_t countAndFlagsBits = sub_100078844();
        Swift::String v50 = String.init(repeating:count:)(v49, v44);
        String.append(_:)(v50);
        swift_bridgeObjectRelease();
        double v51 = log2((double)(v39 + 1));
        double v52 = v51;
        if ((~*(void *)&v51 & 0x7FF0000000000000LL) == 0) {
          break;
        }
        if (v51 <= -9.22337204e18) {
          goto LABEL_38;
        }
        if (v51 >= 9.22337204e18) {
          goto LABEL_39;
        }
        uint64_t v53 = v39 + 2;
        double v54 = log2((double)(v39 + 2));
        if ((~*(void *)&v54 & 0x7FF0000000000000LL) == 0) {
          goto LABEL_40;
        }
        if (v54 <= -9.22337204e18) {
          goto LABEL_41;
        }
        if (v54 >= 9.22337204e18) {
          goto LABEL_42;
        }
        if (*(uint64_t *)&v52 == *(uint64_t *)&v54)
        {
          uint64_t countAndFlagsBits = v60._countAndFlagsBits;
          uint64_t v56 = v60._object;
        }

        else
        {
          uint64_t countAndFlagsBits = 10LL;
          uint64_t v56 = (void *)0xE100000000000000LL;
        }

        String.append(_:)(*(Swift::String *)&countAndFlagsBits);
        v40 += 2;
        ++v39;
        if (v53 - 1 == v66) {
          goto LABEL_35;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

uint64_t sub_1000782FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v7 + 16))(v6);
  uint64_t result = String.init<A>(describing:)(v6, a2);
  *a3 = result;
  a3[1] = v9;
  return result;
}

uint64_t sub_100078380(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0LL;
  }
  uint64_t result = a1[4];
  uint64_t v4 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v5 = a1 + 5;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if (result <= v7) {
        uint64_t result = v6;
      }
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t sub_1000783C4( uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result + 0x4000000000000000LL < 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = a2 & 1;
  uint64_t v15 = (2 * result) | 1;
  uint64_t v16 = sub_1000774CC(result);
  if (v15 >= ContiguousArray.count.getter(a3, a7)) {
    goto LABEL_7;
  }
  uint64_t result = sub_1000783C4(v15, v14, a3, a4, a5, a6, a7, a8);
  uint64_t v18 = result + v17;
  if (__OFADD__(result, v17))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v19 = v18 + a6;
  if (!__OFADD__(v18, a6)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_7:
  uint64_t v19 = 0LL;
LABEL_8:
  if (v16 >= ContiguousArray.count.getter(a3, a7)) {
    return v19;
  }
  uint64_t result = sub_1000783C4(v16, v14, a3, a4, a5, a6, a7, a8);
  if (!__OFADD__(result, v20))
  {
    if (__OFADD__(result + v20, a6)) {
      __break(1u);
    }
    return v19;
  }

LABEL_16:
  __break(1u);
  return result;
}

      sub_10000DD84();
      return;
    }

      uint64_t v15 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v15;
      return a1;
    }

void sub_1000784EC(uint64_t a1)
{
}

uint64_t sub_100078504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4 = type metadata accessor for Heap(0LL, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
  return sub_10007794C(v4, a3);
}

uint64_t sub_100078534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ContiguousArray.count.getter(a2, a5);
}

uint64_t sub_100078540(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 & 1;
  swift_retain(a2);
  swift_retain(a4);
  return v5;
}

uint64_t sub_100078590@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(_BYTE *)v1;
  uint64_t v5 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  char v7 = sub_100078540(v3, v5, v4, v6);
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  swift_release(v6);
  uint64_t result = swift_release(v5);
  *(_BYTE *)a1 = v7 & 1;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t sub_10007860C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100078534(a1, *(void *)(v4 + 8), a3, a4, *(void *)(a1 + 16));
}

uint64_t sub_100078620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t sub_100078640@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000782FC(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_10007865C(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_100078678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_100078680(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 24));
}

uint64_t sub_1000786A8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

void *sub_1000786F0(_BYTE *a1, _BYTE *a2)
{
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = v3[1];
  v3[1] = v5;
  swift_retain(v5);
  swift_release(v6);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v9 = v3[3];
  v3[2] = v8;
  v3[3] = v7;
  swift_retain(v7);
  swift_release(v9);
  return v3;
}

uint64_t sub_100078748(_BYTE *a1, _BYTE *a2)
{
  uint64_t v4 = sub_100078824(a1, a2);
  swift_release(*((void *)v4 + 1));
  uint64_t v5 = *(void *)(v2 + 24);
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  uint64_t v6 = *(void *)(v3 + 24);
  *(void *)(v3 + 24) = v5;
  swift_release(v6);
  return v3;
}

uint64_t sub_100078788(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000787C8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for HeapIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000256DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HeapIterator);
}

uint64_t sub_100078814()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

_BYTE *sub_100078824(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_100078838()
{
  return String.count.getter(v0, v1);
}

uint64_t sub_100078844()
{
  return 32LL;
}

id sub_100078850()
{
  id result = [objc_allocWithZone(NSISO8601DateFormatter) init];
  qword_1001DBAD8 = (uint64_t)result;
  return result;
}

uint64_t sub_100078880()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14amsengagementd12JetpackIndex_scriptURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd12JetpackIndex_properties));
  return v0;
}

uint64_t sub_1000788DC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100078900()
{
  return type metadata accessor for JetpackIndex(0LL);
}

uint64_t type metadata accessor for JetpackIndex(uint64_t a1)
{
  uint64_t result = qword_1001CAF98;
  if (!qword_1001CAF98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JetpackIndex);
  }
  return result;
}

uint64_t sub_100078940(uint64_t a1)
{
  v4[0] = &unk_1001662A8;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for JetpackProperties()
{
  return &type metadata for JetpackProperties;
}

uint64_t sub_1000789D4()
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  sub_10000DE7C();
  uint64_t v3 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000DE7C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  uint64_t v43 = type metadata accessor for JetpackOutputWriter(0LL);
  uint64_t v44 = v0;
  if (*(_BYTE *)(v0 + *(int *)(v43 + 28)) == 1)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x566B63617074656ALL,  0xE900000000000032LL,  0x6B63617074656ALL,  0xE700000000000000LL,  0LL);
    swift_bridgeObjectRelease();
    if ((v12 & 1) != 0)
    {
      uint64_t v13 = 1LL;
      goto LABEL_7;
    }

    uint64_t v13 = 2LL;
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v14 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  PropertyListEncoder.init()();
  *(void *)Swift::String v47 = v13;
  unint64_t v15 = sub_100079204();
  uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v47, &type metadata for JetpackMetadata, v15);
  if (v1)
  {
    swift_release();
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v21 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v22 = type metadata accessor for LogMessage(0LL);
    uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v22 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v48 = v43;
    Swift::Int v24 = sub_10000D63C(v47);
    uint64_t v25 = sub_100079240(v44, (uint64_t)v24);
    id v26 = (id)AMSLogKey(v25);
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v30 = v29;

      swift_bridgeObjectRetain(v30);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      sub_1000104F0();
      uint64_t v31 = sub_100037DAC();
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v31);
      sub_100067388(MetatypeMetadata);
      sub_100037DE0();
      v33._uint64_t countAndFlagsBits = 5972026LL;
      v33._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      v46[3] = &type metadata for String;
      v46[0] = v28;
      v46[1] = v30;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_100037DE0();
      v34._uint64_t countAndFlagsBits = 93LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      sub_100079BFC();
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_1000104F0();
      uint64_t v35 = sub_100037DAC();
      uint64_t v36 = swift_getMetatypeMetadata(v35);
      sub_100067388(v36);
      sub_100037DE0();
      v37._uint64_t countAndFlagsBits = 58LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      sub_100079BFC();
    }

    sub_10000D3A0(v47);
    LogMessage.init(stringLiteral:)(0xD000000000000018LL);
    swift_getErrorValue(v1, v49);
    uint64_t v48 = v45;
    Swift::String v38 = sub_10000D63C(v47);
    (*(void (**)(void *))(*(void *)(v45 - 8) + 16LL))(v38);
    static LogMessage.safe(_:)(v47);
    uint64_t v39 = sub_10000E888((uint64_t)v47);
    uint64_t v40 = static os_log_type_t.error.getter(v39);
    sub_1000BD1B0(v40, v23);
    uint64_t v41 = swift_bridgeObjectRelease();
    return swift_willThrow(v41);
  }

  else
  {
    uint64_t v18 = v16;
    uint64_t v19 = v17;
    swift_release();
    strcpy(v47, "metadata.plist");
    v47[15] = -18;
    (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v7,  enum case for URL.DirectoryHint.inferFromPath(_:),  v3);
    unint64_t v20 = sub_10004828C();
    URL.appending<A>(path:directoryHint:)(v47, v7, &type metadata for String, v20);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRelease();
    Data.write(to:options:)(v11, 0LL, v18, v19);
    sub_100079BE0();
    return sub_100079BF0();
  }

uint64_t sub_100078E60(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_100078EE4()
{
  return 0x6E6F6973726576LL;
}

uint64_t sub_100078EFC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB0E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10000DE7C();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000D37C(a1, v9);
  unint64_t v11 = sub_100079A48();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for JetpackMetadata.CodingKeys,  &type metadata for JetpackMetadata.CodingKeys,  v11,  v9,  v10);
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
}

void *sub_100078FD4(void *a1)
{
  uint64_t v3 = sub_10000D33C(&qword_1001CB0D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000DE7C();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = sub_10000D37C(a1, v8);
  unint64_t v11 = sub_100079A48();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for JetpackMetadata.CodingKeys,  &type metadata for JetpackMetadata.CodingKeys,  v11,  v8,  v9);
  if (!v1)
  {
    uint64_t v10 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v12, v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
  }

  sub_10000D3A0(a1);
  return v10;
}

uint64_t sub_1000790D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100078E60(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000790FC()
{
  return sub_100025C7C();
}

uint64_t sub_100079114@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_100006368();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10007913C(uint64_t a1)
{
  unint64_t v2 = sub_100079A48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100079164(uint64_t a1)
{
  unint64_t v2 = sub_100079A48();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10007918C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100078FD4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000791B4(void *a1)
{
  return sub_100078EFC(a1, *v1);
}

uint64_t type metadata accessor for JetpackOutputWriter(uint64_t a1)
{
  uint64_t result = qword_1001CB090;
  if (!qword_1001CB090) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JetpackOutputWriter);
  }
  return result;
}

unint64_t sub_100079204()
{
  unint64_t result = qword_1001CB030;
  if (!qword_1001CB030)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166348, &type metadata for JetpackMetadata);
    atomic_store(result, (unint64_t *)&qword_1001CB030);
  }

  return result;
}

uint64_t sub_100079240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JetpackOutputWriter(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

char *sub_100079284(char *__dst, void *__src, int *a3)
{
  uint64_t v4 = __dst;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *__src;
    *(void *)uint64_t v4 = *__src;
    uint64_t v4 = (char *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = (void *)__src[1];
    if (v7)
    {
      *(_WORD *)__dst = *(_WORD *)__src;
      *((void *)__dst + 1) = v7;
      *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
      uint64_t v9 = __src[4];
      uint64_t v8 = __src[5];
      *((void *)__dst + 4) = v9;
      *((void *)__dst + 5) = v8;
      uint64_t v11 = __src[6];
      uint64_t v10 = __src[7];
      *((void *)__dst + 6) = v11;
      *((void *)__dst + 7) = v10;
      __dst[64] = *((_BYTE *)__src + 64);
      *((void *)__dst + 9) = __src[9];
      id v12 = v7;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
    }

    else
    {
      memcpy(__dst, __src, 0x50uLL);
    }

    uint64_t v14 = a3[5];
    unint64_t v15 = &v4[v14];
    uint64_t v16 = (char *)__src + v14;
    uint64_t v17 = type metadata accessor for URL(0LL);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL);
    v18(v15, v16, v17);
    v18(&v4[a3[6]], (char *)__src + a3[6], v17);
    v4[a3[7]] = *((_BYTE *)__src + a3[7]);
  }

  return v4;
}

uint64_t sub_1000793A4(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {

    swift_bridgeObjectRelease(a1[4]);
    swift_bridgeObjectRelease(a1[6]);
  }

  int v5 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v8(v5, v6);
  return ((uint64_t (*)(char *, uint64_t))v8)((char *)a1 + *(int *)(a2 + 24), v6);
}

void *sub_100079430(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = (void *)__src[1];
  if (v6)
  {
    *(_WORD *)__dst = *(_WORD *)__src;
    __dst[1] = v6;
    *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
    uint64_t v8 = __src[4];
    uint64_t v7 = __src[5];
    __dst[4] = v8;
    __dst[5] = v7;
    uint64_t v10 = __src[6];
    uint64_t v9 = __src[7];
    __dst[6] = v10;
    __dst[7] = v9;
    *((_BYTE *)__dst + 64) = *((_BYTE *)__src + 64);
    __dst[9] = __src[9];
    id v11 = v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
  }

  else
  {
    memcpy(__dst, __src, 0x50uLL);
  }

  uint64_t v12 = a3[5];
  uint64_t v13 = (char *)__dst + v12;
  uint64_t v14 = (char *)__src + v12;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL);
  v16(v13, v14, v15);
  v16((char *)__dst + a3[6], (char *)__src + a3[6], v15);
  *((_BYTE *)__dst + a3[7]) = *((_BYTE *)__src + a3[7]);
  return __dst;
}

void *sub_100079524(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = (void *)__dst[1];
  uint64_t v7 = __src[1];
  if (!v6)
  {
    if (v7)
    {
      *(_BYTE *)__dst = *(_BYTE *)__src;
      *((_BYTE *)__dst + 1) = *((_BYTE *)__src + 1);
      uint64_t v12 = (void *)__src[1];
      __dst[1] = v12;
      __dst[2] = __src[2];
      __dst[3] = __src[3];
      uint64_t v13 = __src[4];
      __dst[4] = v13;
      __dst[5] = __src[5];
      uint64_t v14 = __src[6];
      __dst[6] = v14;
      __dst[7] = __src[7];
      *((_BYTE *)__dst + 64) = *((_BYTE *)__src + 64);
      __dst[9] = __src[9];
      id v15 = v12;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      goto LABEL_8;
    }

uint64_t sub_1000796D4(uint64_t a1)
{
  return a1;
}

char *sub_100079708(char *a1, char *a2, int *a3)
{
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

void *sub_1000797A0(void *__dst, void *__src, int *a3)
{
  uint64_t v6 = (void *)__dst[1];
  if (!v6) {
    goto LABEL_5;
  }
  uint64_t v7 = __src[1];
  if (!v7)
  {
    sub_1000796D4((uint64_t)__dst);
LABEL_5:
    memcpy(__dst, __src, 0x50uLL);
    goto LABEL_6;
  }

  *(_BYTE *)__dst = *(_BYTE *)__src;
  *((_BYTE *)__dst + 1) = *((_BYTE *)__src + 1);
  __dst[1] = v7;

  *((_OWORD *)__dst + 1) = *((_OWORD *)__src + 1);
  __dst[4] = __src[4];
  swift_bridgeObjectRelease();
  uint64_t v8 = __src[6];
  __dst[5] = __src[5];
  __dst[6] = v8;
  swift_bridgeObjectRelease();
  __dst[7] = __src[7];
  *((_BYTE *)__dst + 64) = *((_BYTE *)__src + 64);
  __dst[9] = __src[9];
LABEL_6:
  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)__dst + v9;
  uint64_t v11 = (char *)__src + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40LL);
  v13(v10, v11, v12);
  v13((char *)__dst + a3[6], (char *)__src + a3[6], v12);
  *((_BYTE *)__dst + a3[7]) = *((_BYTE *)__src + a3[7]);
  return __dst;
}

uint64_t sub_1000798B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000798C0);
}

uint64_t sub_1000798C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = type metadata accessor for URL(0LL);
    return sub_1000102D4(a1 + *(int *)(a3 + 20), a2, v9);
  }

uint64_t sub_100079940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007994C);
}

uint64_t sub_10007994C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    return sub_10000D5C0(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t sub_1000799B8(uint64_t a1)
{
  unint64_t v4 = "P";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = &unk_100166320;
    swift_initStructMetadata(a1, 256LL, 4LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for JetpackMetadata()
{
  return &type metadata for JetpackMetadata;
}

unint64_t sub_100079A48()
{
  unint64_t result = qword_1001CB0D8;
  if (!qword_1001CB0D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016645C, &type metadata for JetpackMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CB0D8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for JetpackMetadata.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100079AC4 + 4 * asc_1001662E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100079AE4 + 4 * byte_1001662E5[v4]))();
  }
}

_BYTE *sub_100079AC4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100079AE4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100079AEC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100079AF4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100079AFC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100079B04(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JetpackMetadata.CodingKeys()
{
  return &type metadata for JetpackMetadata.CodingKeys;
}

unint64_t sub_100079B24()
{
  unint64_t result = qword_1001CB0E8;
  if (!qword_1001CB0E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166434, &type metadata for JetpackMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CB0E8);
  }

  return result;
}

unint64_t sub_100079B64()
{
  unint64_t result = qword_1001CB0F0;
  if (!qword_1001CB0F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001663A4, &type metadata for JetpackMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CB0F0);
  }

  return result;
}

unint64_t sub_100079BA4()
{
  unint64_t result = qword_1001CB0F8;
  if (!qword_1001CB0F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001663CC, &type metadata for JetpackMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CB0F8);
  }

  return result;
}

uint64_t sub_100079BE0()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 200) + 8LL))(v0, *(void *)(v1 - 192));
}

uint64_t sub_100079BF0()
{
  return sub_10001BD84(v1, v0);
}

uint64_t sub_100079BFC()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_100079C08(char *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB100);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000D33C(&qword_1001CB108);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v29 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v29 - v12;
  sub_100079F08(a1[1], (uint64_t)v4);
  if (sub_1000102D4((uint64_t)v4, 1LL, v5) == 1)
  {
    sub_1000102E0((uint64_t)v4, &qword_1001CB100);
    if (qword_1001C7F10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    uint64_t v14 = (void *)qword_1001C90F0;
    sub_10000D33C(&qword_1001CB110);
    uint64_t v15 = swift_unknownObjectRetain(v14);
    uint64_t v16 = Promise.__allocating_init()(v15);
    sub_10000D33C(&qword_1001CB118);
    NSString v17 = sub_10001CF04();
    id v18 = [v14 URLForKey:v17];

    id v19 = [v18 valuePromise];
    uint64_t v20 = Promise<A>.init(_:)(v19);
    uint64_t v21 = (void *)swift_allocObject(&unk_1001ABD70, 112LL, 7LL);
    memcpy(v21 + 2, a1, 0x50uLL);
    v21[12] = v14;
    v21[13] = v16;
    swift_retain_n(v16, 2LL);
    swift_unknownObjectRetain(v14);
    sub_100066268(a1);
    sub_100062648(sub_10007A508, v16, sub_10007A95C, v21);
    swift_unknownObjectRelease(v14);
    swift_release(v20);
    swift_release(v16);
    swift_release(v21);
  }

  else
  {
    uint64_t v22 = (uint64_t)&v13[*(int *)(v5 + 48)];
    char v23 = *v4;
    char *v13 = *v4;
    uint64_t v24 = type metadata accessor for URL(0LL);
    uint64_t v25 = *(void *)(v24 - 8);
    sub_10007AA1C(v22);
    v29[1] = sub_10000D33C(&qword_1001CB110);
    id v26 = &v11[*(int *)(v5 + 48)];
    *uint64_t v11 = v23;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16))(v26, v22, v24);
    uint64_t v27 = (uint64_t)&v8[*(int *)(v5 + 48)];
    *uint64_t v8 = v23;
    sub_10007AA1C(v27);
    uint64_t v16 = Promise.__allocating_init(value:)(v8);
    sub_1000102E0((uint64_t)v13, &qword_1001CB108);
  }

  return v16;
}

uint64_t sub_100079F08@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB180);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  type metadata accessor for Defaults();
  if (sub_100049E28()) {
    __asm { BR              X10 }
  }

  if (sub_100049E28()) {
    __asm { BR              X10 }
  }

  uint64_t v8 = sub_10000D33C(&qword_1001CB108);
  return sub_10000D5C0(a2, 1LL, 1LL, v8);
}

uint64_t sub_10007A1FC()
{
  if ([v1 respondsToSelector:"objectForKeyedSubscript:"])
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xE800000000000000LL);
    id v8 = [v1 objectForKeyedSubscript:v7];

    if (v8
      && (*(void *)(v6 - 88) = v8,
          uint64_t v9 = sub_10000D33C(&qword_1001CB188),
          (swift_dynamicCast(v6 - 104, v6 - 88, v9, &type metadata for String, 6LL) & 1) != 0))
    {
      uint64_t v10 = *(void *)(v6 - 96);
      URL.init(string:)(*(void *)(v6 - 104), v10);
      swift_unknownObjectRelease(v1);
      swift_bridgeObjectRelease(v10);
      if (sub_1000102D4(v3, 1LL, v2) != 1)
      {
        uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
        v15(v4, v3, v2);
        uint64_t v16 = sub_10000D33C(&qword_1001CB108);
        NSString v17 = &v0[*(int *)(v16 + 48)];
        *uint64_t v0 = 0;
        v15((uint64_t)v17, v4, v2);
        uint64_t v12 = (uint64_t)v0;
        uint64_t v13 = 0LL;
        uint64_t v11 = v16;
        return sub_10000D5C0(v12, v13, 1LL, v11);
      }

      sub_1000102E0(v3, &unk_1001CB180);
    }

    else
    {
      swift_unknownObjectRelease(v1);
    }
  }

  else
  {
    swift_unknownObjectRelease(v1);
    swift_bridgeObjectRelease(0xE800000000000000LL);
  }

  uint64_t v11 = sub_10000D33C(&qword_1001CB108);
  uint64_t v12 = (uint64_t)v0;
  uint64_t v13 = 1LL;
  return sub_10000D5C0(v12, v13, 1LL, v11);
}

void sub_10007A214()
{
}

uint64_t sub_10007A414(void *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB108);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v9 = &v4[*(int *)(v2 + 48)];
  *uint64_t v4 = 1;
  (*(void (**)(_BYTE *, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  Promise.resolve(_:)(v4);
  return sub_1000102E0((uint64_t)v4, &qword_1001CB108);
}

uint64_t sub_10007A508(void *a1)
{
  return sub_10007A414(a1);
}

uint64_t sub_10007A510(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v43[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = swift_allocObject( v8,  ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + 2 * v10,  *(unsigned __int8 *)(v9 + 80) | 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v44 = &type metadata for JetPackResourceResolver;
  id v12 = (id)AMSLogKey(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v42 = v10;
    uint64_t v15 = v14;
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    id v19 = v44;
    uint64_t v20 = sub_10000D37C(v43, (uint64_t)v44);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v46[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
    sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t MetatypeMetadata = &type metadata for String;
    v46[0] = v15;
    v46[1] = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
    sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = v44;
    id v26 = sub_10000D37C(v43, (uint64_t)v44);
    uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    v46[0] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
    sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
    v28._uint64_t countAndFlagsBits = 58LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v43);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(72LL, 1LL);
  v29._object = (void *)0x800000010016E960LL;
  v29._uint64_t countAndFlagsBits = 0xD000000000000047LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  char v30 = *(_BYTE *)(a2 + 1);
  uint64_t v44 = (ValueMetadata *)&unk_1001A8968;
  LOBYTE(v43[0]) = v30;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
  sub_1000102E0((uint64_t)v43, &qword_1001CAAD0);
  v31._uint64_t countAndFlagsBits = 41LL;
  v31._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = LogMessage.init(stringInterpolation:)(v7);
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  sub_1000BD1B0(v33, v11);
  swift_bridgeObjectRelease();
  sub_10000D33C(&qword_1001CB118);
  NSString v34 = sub_10001CE6C();
  id v35 = [a3 URLForKey:v34];

  id v36 = [v35 valuePromise];
  uint64_t v37 = Promise<A>.init(_:)(v36);
  uint64_t v44 = (ValueMetadata *)type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v45 = &protocol witness table for SyncTaskScheduler;
  Swift::String v38 = sub_10000D63C(v43);
  SyncTaskScheduler.init()(v38);
  uint64_t v39 = sub_10000D33C(&qword_1001CB108);
  uint64_t v40 = Promise.map<A>(on:_:)(v43, sub_10007A968, 0LL, v39);
  swift_release(v37);
  sub_10000D3A0(v43);
  sub_10007A9B8();
  return swift_release(v40);
}

uint64_t sub_10007A918()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_unknownObjectRelease(*(void *)(v0 + 96));
  swift_release(*(void *)(v0 + 104));
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_10007A95C(uint64_t a1)
{
  return sub_10007A510(a1, v1 + 16, *(void **)(v1 + 96));
}

uint64_t sub_10007A968@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  sub_10000D33C(&qword_1001CB108);
  *a2 = 0;
  return static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);
}

uint64_t sub_10007A9B8()
{
  return swift_release_n(v0, 2LL);
}

ValueMetadata *type metadata accessor for JetPackResourceResolver()
{
  return &type metadata for JetPackResourceResolver;
}

uint64_t sub_10007AA1C(uint64_t a1)
{
  return v2(a1, v3, v1);
}

void sub_10007AA34()
{
}

id sub_10007AA4C(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = (void *)a3();
  uint64_t v7 = v6;

  if (v7)
  {
    String._bridgeToObjectiveC()();
    sub_10003AEA4();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10007AAAC()
{
}

void sub_10007AAC4()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account), "ams_DSID");
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = [v1 stringValue];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    sub_10007B020();
  }

  sub_10000DFE8();
}

void sub_10007AB4C()
{
}

id sub_10007AB64()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account), "ams_accountFlags");
  if (v1)
  {
    type metadata accessor for AMSAccountFlag(0LL);
    uint64_t v3 = v2;
    unint64_t v4 = sub_10007B018();
    unint64_t v5 = sub_10007AFD8();
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, v3, v4, v5);

    id v1 = (id)sub_10004BFC4(v6);
    swift_bridgeObjectRelease();
  }

  return v1;
}

void sub_10007AC04()
{
}

id sub_10007AC40()
{
  return sub_10007AC88(&AMSAccountFlagHasFamilySharingEnabled);
}

id sub_10007AC7C()
{
  return sub_10007AC88(&AMSAccountFlagHasiCloudFamily);
}

id sub_10007AC88(void *a1)
{
  id v2 =  objc_msgSend( *(id *)(v1 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account),  "ams_accountFlagValueForAccountFlag:",  *a1);
  if (v2)
  {
    id v3 = v2;
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100076F44((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    sub_10000E888((uint64_t)v10);
    return 0LL;
  }

  unint64_t v4 = sub_10007B018();
  id v5 = v8;
  id v6 = [v8 BOOLValue];

  return v6;
}

id sub_10007AD90()
{
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account), "ams_isHSA2");
}

void sub_10007ADC4()
{
}

id sub_10007ADDC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  if (v5)
  {
    sub_10007B018();
    Dictionary._bridgeToObjectiveC()();
    sub_10003AEA4();
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

uint64_t sub_10007AE40()
{
  id v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account), "ams_privacyAcknowledgement");
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  unint64_t v3 = sub_10007B018();
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  v3,  &protocol witness table for String);

  return v4;
}

void sub_10007AEC0()
{
}

void sub_10007AED8()
{
}

void sub_10007AEE4(SEL *a1)
{
  id v2 = [*(id *)(v1 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account) *a1];
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10007B020();
  }

  sub_10000DFE8();
}

void sub_10007AF40()
{
}

id sub_10007AF78()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSAccount();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSAccount()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSAccount);
}

unint64_t sub_10007AFD8()
{
  unint64_t result = qword_1001C86B0;
  if (!qword_1001C86B0)
  {
    type metadata accessor for AMSAccountFlag(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100163A50, v1);
    atomic_store(result, (unint64_t *)&qword_1001C86B0);
  }

  return result;
}

unint64_t sub_10007B018()
{
  return sub_100038764();
}

void sub_10007B020()
{
}

id sub_10007B05C()
{
  id result =  objc_msgSend( *(id *)(v0 + OBJC_IVAR____TtC14amsengagementd14JSAccountStore_accountStore),  "ams_activeiTunesAccount");
  if (result)
  {
    id v2 = result;
    unint64_t v3 = (objc_class *)sub_10007B6D0();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v2;
    v11.receiver = v4;
    v11.super_class = v3;
    return sub_10007B6D8((uint64_t)v4, "init", v5, v6, v7, v8, v9, v10, v11);
  }

  return result;
}

id sub_10007B100()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14amsengagementd14JSAccountStore_accountStore);
  id v2 = objc_msgSend(v1, "ams_activeiCloudAccount");
  if (!v2) {
    return 0LL;
  }
  unint64_t v3 = v2;
  id v4 = sub_10007B6E0(v1, "ams_iTunesAccountForAccount:");
  uint64_t v5 = (objc_class *)sub_10007B6D0();
  uint64_t v6 = (char *)objc_allocWithZone(v5);
  if (v4)
  {
    *(void *)&v6[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v4;
    v15.receiver = v6;
    v15.super_class = v5;
    id v13 = sub_10007B6D8((uint64_t)v6, "init", v7, v8, v9, v10, v11, v12, v15);
  }

  else
  {
    *(void *)&v6[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v3;
    v16.receiver = v6;
    v16.super_class = v5;
    return objc_msgSendSuper2(&v16, "init");
  }

  return v13;
}

id sub_10007B204()
{
  id v1 =  objc_msgSend( *(id *)(v0 + OBJC_IVAR____TtC14amsengagementd14JSAccountStore_accountStore),  "ams_fetchLocaliTunesAccount");
  id v14 = 0LL;
  id v2 = [v1 resultWithError:&v14];
  id v3 = v14;
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = (objc_class *)sub_10007B6D0();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v4;
    v13.receiver = v6;
    v13.super_class = v5;
    id v7 = v3;
    id v8 = objc_msgSendSuper2(&v13, "init");
  }

  else
  {
    id v9 = v14;
    uint64_t v10 = _convertNSErrorToError(_:)(v3);

    swift_willThrow(v11);
    swift_errorRelease(v10);
    return 0LL;
  }

  return v8;
}

id sub_10007B31C(uint64_t a1)
{
  id v1 = sub_10007B598(a1);
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  id v4 = sub_10007B6E0(v3, "ams_sharedAccountStoreForMediaType:");
  id v5 = objc_msgSend(v4, "ams_activeiTunesAccount");
  if (v5)
  {
    uint64_t v6 = (objc_class *)sub_10007B6D0();
    id v7 = (char *)objc_allocWithZone(v6);
    *(void *)&v7[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v5;
    v15.receiver = v7;
    v15.super_class = v6;
    id v5 = sub_10007B6D8((uint64_t)v7, "init", v8, v9, v10, v11, v12, v13, v15);
  }

  return v5;
}

id sub_10007B40C(uint64_t a1)
{
  id v1 = sub_10007B598(a1);
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  id v3 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
  id v4 = sub_10007B6E0(v3, "ams_sharedAccountStoreForMediaType:");
  id v5 = objc_msgSend(v4, "ams_fetchLocaliTunesAccount");
  id v18 = 0LL;
  id v6 = [v5 resultWithError:&v18];
  id v7 = v18;
  if (!v6)
  {
    id v13 = v18;
    uint64_t v14 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    return 0LL;
  }

  id v8 = v6;
  uint64_t v9 = (objc_class *)sub_10007B6D0();
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  *(void *)&v10[OBJC_IVAR____TtC14amsengagementd9JSAccount_account] = v8;
  v17.receiver = v10;
  v17.super_class = v9;
  id v11 = v7;
  id v12 = objc_msgSendSuper2(&v17, "init");

  return v12;
}

id sub_10007B598(uint64_t a1)
{
  switch(a1)
  {
    case 100LL:
      id v1 = (id *)&AMSAccountMediaTypeAppStore;
      break;
    case 400LL:
      id v1 = (id *)&AMSAccountMediaTypeProduction;
      break;
    case 102LL:
      id v1 = (id *)&AMSAccountMediaTypeAppStoreSandbox;
      break;
    case 200LL:
      id v1 = (id *)&AMSAccountMediaTypeBooks;
      break;
    case 300LL:
      id v1 = (id *)&AMSAccountMediaTypeiTunes;
      break;
    case 101LL:
      id v1 = (id *)&AMSAccountMediaTypeAppStoreBeta;
      break;
    default:
      return 0LL;
  }

  id v2 = *v1;
  id v3 = *v1;
  return v2;
}

void sub_10007B638()
{
}

id sub_10007B670()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSAccountStore();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSAccountStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd14JSAccountStore);
}

uint64_t sub_10007B6D0()
{
  return type metadata accessor for JSAccount();
}

id sub_10007B6D8( uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  return objc_msgSendSuper2(&a9, a2);
}

id sub_10007B6E0(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_10007B6E8@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a3, a1, v6);
  uint64_t v7 = sub_10000D33C(&qword_1001CB2F0);
  return swift_storeEnumTagMultiPayload(a3, v7, v5);
}

id sub_10007B76C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_accounts);
}

id sub_10007B798()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_app);
}

id sub_10007B7C4()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_backlog);
}

id sub_10007B7F0()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_client);
}

id sub_10007B81C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_content);
}

id sub_10007B848()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_database);
}

id sub_10007B874()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_device);
}

id sub_10007B8A0()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_family);
}

id sub_10007B8CC()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_followUp);
}

id sub_10007B8F8()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_localize);
}

id sub_10007B924()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_location);
}

id sub_10007B950()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_log);
}

id sub_10007B97C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_marketing);
}

id sub_10007B9A8()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_media);
}

id sub_10007B9D4()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_metrics);
}

id sub_10007BA00()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_network);
}

id sub_10007BA2C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_plugin);
}

id sub_10007BA58()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_privacy);
}

uint64_t sub_10007BAB8()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd5JSAMS_props));
}

uint64_t sub_10007BB34(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd5JSAMS_props);
  *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd5JSAMS_props) = a1;
  return swift_bridgeObjectRelease(v2);
}

id sub_10007BB6C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_serverDataCache);
}

id sub_10007BB98()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_subscription);
}

id sub_10007BBC4()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_telephony);
}

id sub_10007BBF0()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_treatmentStore);
}

id sub_10007BC1C()
{
  return sub_10007C9B4(OBJC_IVAR____TtC14amsengagementd5JSAMS_userNotifications);
}

id sub_10007BC28(_BYTE *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v11 = v10 - v9;
  uint64_t v104 = type metadata accessor for UUID(0LL);
  uint64_t v102 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  sub_10000DE7C();
  uint64_t v14 = v13 - v12;
  uint64_t v105 = sub_10000D33C(&qword_1001CB2F0);
  sub_10000DC64();
  __chkstk_darwin(v15);
  sub_10000DE7C();
  uint64_t v18 = v17 - v16;
  id v19 = (objc_class *)type metadata accessor for JSAccountStore();
  uint64_t v20 = (char *)objc_allocWithZone(v19);
  *(void *)&v20[OBJC_IVAR____TtC14amsengagementd14JSAccountStore_accountStore] = a2;
  v115.receiver = v20;
  v115.super_class = v19;
  id v21 = v4;
  id v22 = a2;
  id v23 = objc_msgSendSuper2(&v115, "init");
  sub_10007C9C4((uint64_t)v23, OBJC_IVAR____TtC14amsengagementd5JSAMS_accounts);
  Swift::String v24 = (objc_class *)objc_allocWithZone((Class)type metadata accessor for JSApp());
  sub_10007C9E0();
  sub_10007CABC((uint64_t)a1);
  sub_10007C9C4(v25, OBJC_IVAR____TtC14amsengagementd5JSAMS_app);
  id v26 = (objc_class *)type metadata accessor for JSBacklog();
  id v27 = sub_10007CA2C(v26);
  sub_10007C9D0((uint64_t)v27, OBJC_IVAR____TtC14amsengagementd9JSBacklog_config);
  sub_10007C9E0();
  v114.receiver = v27;
  v114.super_class = v24;
  id v28 = objc_msgSendSuper2(&v114, "init");
  sub_10007C9C4((uint64_t)v28, OBJC_IVAR____TtC14amsengagementd5JSAMS_backlog);
  Swift::String v29 = (objc_class *)objc_allocWithZone((Class)type metadata accessor for JSClient());
  sub_10007C9E0();
  id v30 = a3;
  id v31 = sub_100085890(v30, (uint64_t)a1);
  sub_10007C9C4((uint64_t)v31, OBJC_IVAR____TtC14amsengagementd5JSAMS_client);
  uint64_t v32 = (objc_class *)type metadata accessor for JSContent();
  id v33 = sub_10007CA2C(v32);
  sub_10007C9D0((uint64_t)v33, OBJC_IVAR____TtC14amsengagementd9JSContent_config);
  sub_10007C9E0();
  v113.receiver = v33;
  v113.super_class = v29;
  id v34 = objc_msgSendSuper2(&v113, "init");
  sub_10007C9C4((uint64_t)v34, OBJC_IVAR____TtC14amsengagementd5JSAMS_content);
  id v35 = (objc_class *)type metadata accessor for JSDatabaseStore();
  id v36 = sub_10007CA2C(v35);
  sub_10007C9D0((uint64_t)v36, OBJC_IVAR____TtC14amsengagementd15JSDatabaseStore_config);
  sub_10007C9E0();
  v112.receiver = v36;
  v112.super_class = v29;
  id v37 = objc_msgSendSuper2(&v112, "init");
  sub_10007C9C4((uint64_t)v37, OBJC_IVAR____TtC14amsengagementd5JSAMS_database);
  id v38 = objc_allocWithZone((Class)type metadata accessor for JSDevice());
  id v39 = sub_10007C9E8(v38);
  sub_10007C9C4((uint64_t)v39, OBJC_IVAR____TtC14amsengagementd5JSAMS_device);
  id v40 = objc_allocWithZone((Class)type metadata accessor for JSFamily());
  id v41 = v22;
  sub_10007C9E0();
  id v42 = sub_100092D74((uint64_t)v41, a1);
  sub_10007C9C4((uint64_t)v42, OBJC_IVAR____TtC14amsengagementd5JSAMS_family);
  id v43 = objc_allocWithZone((Class)type metadata accessor for JSFollowUp());
  id v44 = v41;
  id v45 = sub_100097044((uint64_t)v44);
  sub_10007C9C4((uint64_t)v45, OBJC_IVAR____TtC14amsengagementd5JSAMS_followUp);
  id v46 = objc_allocWithZone((Class)type metadata accessor for JSLocalize());
  id v47 = sub_10007C9E8(v46);
  sub_10007C9C4((uint64_t)v47, OBJC_IVAR____TtC14amsengagementd5JSAMS_localize);
  id v48 = objc_allocWithZone((Class)type metadata accessor for JSLocation());
  id v49 = sub_10007C9E8(v48);
  sub_10007C9C4((uint64_t)v49, OBJC_IVAR____TtC14amsengagementd5JSAMS_location);
  id v50 = objc_allocWithZone((Class)type metadata accessor for JSLog());
  sub_10007C9E0();
  sub_10009B408((uint64_t)a1);
  uint64_t v52 = sub_10007C9C4(v51, OBJC_IVAR____TtC14amsengagementd5JSAMS_log);
  id v53 = objc_allocWithZone((Class)type metadata accessor for JSMarketing(v52));
  id v54 = v44;
  sub_10007C9E0();
  id v55 = v30;
  v101 = v54;
  id v56 = sub_10009BA54(v54, v55, (uint64_t)a1);
  sub_10007C9C4((uint64_t)v56, OBJC_IVAR____TtC14amsengagementd5JSAMS_marketing);
  Swift::String v57 = (objc_class *)objc_allocWithZone((Class)type metadata accessor for JSMediaAPI());
  sub_10007C9E0();
  id v58 = sub_10009DF94(a1);
  sub_10007C9C4((uint64_t)v58, OBJC_IVAR____TtC14amsengagementd5JSAMS_media);
  int v59 = (objc_class *)type metadata accessor for JSMetrics();
  id v60 = sub_10007CA2C(v59);
  sub_10007C9D0((uint64_t)v60, OBJC_IVAR____TtC14amsengagementd9JSMetrics_config);
  sub_10007C9E0();
  v111.receiver = v60;
  v111.super_class = v57;
  id v61 = objc_msgSendSuper2(&v111, "init");
  sub_10007C9C4((uint64_t)v61, OBJC_IVAR____TtC14amsengagementd5JSAMS_metrics);
  id v62 = objc_allocWithZone((Class)type metadata accessor for JSNetwork());
  id v63 = sub_10007C9E8(v62);
  sub_10007C9C4((uint64_t)v63, OBJC_IVAR____TtC14amsengagementd5JSAMS_network);
  uint64_t v64 = (objc_class *)objc_allocWithZone((Class)type metadata accessor for JSExtension());
  sub_10007C9E0();
  id v65 = sub_100090140(a1);
  sub_10007C9C4((uint64_t)v65, OBJC_IVAR____TtC14amsengagementd5JSAMS_plugin);
  id v66 = objc_allocWithZone((Class)type metadata accessor for JSPrivacy());
  *(void *)((char *)v21 + OBJC_IVAR____TtC14amsengagementd5JSAMS_privacy) = sub_10007C9E8(v66);
  *(void *)((char *)v21 + OBJC_IVAR____TtC14amsengagementd5JSAMS_props) = a4;
  id v67 = objc_allocWithZone((Class)type metadata accessor for JSServerDataCache());
  id v68 = sub_10007C9E8(v67);
  sub_10007C9C4((uint64_t)v68, OBJC_IVAR____TtC14amsengagementd5JSAMS_serverDataCache);
  v69 = (objc_class *)type metadata accessor for JSSubscriptionStatus();
  id v70 = sub_10007CA2C(v69);
  sub_10007C9D0((uint64_t)v70, OBJC_IVAR____TtC14amsengagementd20JSSubscriptionStatus_config);
  sub_10007C9E0();
  v110.receiver = v70;
  v110.super_class = v64;
  id v71 = objc_msgSendSuper2(&v110, "init");
  sub_10007C9C4((uint64_t)v71, OBJC_IVAR____TtC14amsengagementd5JSAMS_subscription);
  id v72 = objc_allocWithZone((Class)type metadata accessor for JSTelephony());
  id v73 = sub_10007C9E8(v72);
  sub_10007C9C4((uint64_t)v73, OBJC_IVAR____TtC14amsengagementd5JSAMS_telephony);
  id v74 = objc_allocWithZone((Class)type metadata accessor for JSTreatmentStore());
  id v75 = sub_10007C9E8(v74);
  sub_10007C9C4((uint64_t)v75, OBJC_IVAR____TtC14amsengagementd5JSAMS_treatmentStore);
  id v76 = objc_allocWithZone((Class)type metadata accessor for JSUserNotifications());
  *(void *)((char *)v21 + OBJC_IVAR____TtC14amsengagementd5JSAMS_userNotifications) = sub_10007C9E8(v76);
  LOBYTE(v64) = a1[1];
  UUID.init()();
  sub_10007B6E8(v14, v64, v18);
  (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v14, v104);
  sub_10007C924(v18, (uint64_t)v21 + OBJC_IVAR____TtC14amsengagementd5JSAMS_uuid);

  v77 = (objc_class *)type metadata accessor for JSAMS(0LL);
  v109.receiver = v21;
  v109.super_class = v77;
  id v78 = objc_msgSendSuper2(&v109, "init");
  uint64_t v79 = qword_1001C7F90;
  id v80 = v78;
  if (v79 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v81 = sub_10000D33C(&qword_1001C9C70);
  type metadata accessor for LogMessage(0LL);
  sub_100067688();
  uint64_t v84 = swift_allocObject(v81, (v83 & ~v82) + 2LL * (void)v21, v82 | 7);
  *(_OWORD *)(v84 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v108 = (uint64_t)v77;
  v107[0] = v80;
  id v85 = v80;
  id v86 = (id)AMSLogKey(v85);
  if (v86)
  {
    v87 = v86;
    uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
    uint64_t v89 = v88;

    swift_bridgeObjectRetain(v89);
    sub_100010564();
    sub_100037DD0();
    uint64_t v90 = sub_10007CA08();
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v90);
    sub_10007C9F0(MetatypeMetadata);
    sub_10007CA34();
    sub_10000DC14();
    v106[3] = &type metadata for String;
    v106[0] = v103;
    v106[1] = v89;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v106);
    sub_10007CA34();
    sub_10000DC4C(93LL);
    sub_10007CA40();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_100037DD0();
    uint64_t v92 = sub_10007CA08();
    uint64_t v93 = swift_getMetatypeMetadata(v92);
    sub_10007C9F0(v93);
    sub_1000102E0((uint64_t)v106, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10007CA40();
  }

  sub_10000D3A0(v107);
  sub_10001A21C(12LL);
  v94._uint64_t countAndFlagsBits = 0x696C616974696E49LL;
  v94._object = (void *)0xEC0000002064657ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v94);
  uint64_t v95 = (uint64_t)v85 + OBJC_IVAR____TtC14amsengagementd5JSAMS_uuid;
  uint64_t v108 = v105;
  v96 = sub_10000D63C(v107);
  sub_10007C96C(v95, (uint64_t)v96);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v107);
  sub_1000102E0((uint64_t)v107, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v97 = LogMessage.init(stringInterpolation:)(v11);
  uint64_t v98 = static os_log_type_t.debug.getter(v97);
  sub_1000BD1B0(v98, v84);

  sub_10002FF78(a1);
  swift_bridgeObjectRelease();

  return v85;
}

id sub_10007C380()
{
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  type metadata accessor for LogMessage(0LL);
  sub_100067688();
  uint64_t v6 = swift_allocObject(v3, (v5 & ~v4) + 2 * v1, v4 | 7);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v7 = (objc_class *)type metadata accessor for JSAMS(0LL);
  uint64_t v30 = (uint64_t)v7;
  v29[0] = v0;
  id v8 = v0;
  id v9 = (id)AMSLogKey(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    sub_100010564();
    sub_10000DC08();
    uint64_t v14 = v30;
    uint64_t v15 = sub_10000D37C(v29, v30);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DEA4();
    sub_100051B5C();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v27[0] = v11;
    v27[1] = v13;
    sub_10000DEA4();
    sub_100051B5C();
    sub_10000DC4C(93LL);
    sub_100025910();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_10000DC08();
    uint64_t v17 = v30;
    uint64_t v18 = sub_10000D37C(v29, v30);
    uint64_t v19 = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v19);
    v27[0] = v19;
    sub_10000DEA4();
    sub_1000102E0((uint64_t)v27, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_100025910();
  }

  sub_10000D3A0(v29);
  sub_10001A21C(8LL);
  v20._uint64_t countAndFlagsBits = 0x20636F6C6C616544LL;
  v20._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v20);
  uint64_t v21 = (uint64_t)v8 + OBJC_IVAR____TtC14amsengagementd5JSAMS_uuid;
  uint64_t v30 = sub_10000D33C(&qword_1001CB2F0);
  id v22 = sub_10000D63C(v29);
  sub_10007C96C(v21, (uint64_t)v22);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v29);
  sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v23 = sub_100025910();
  uint64_t v24 = static os_log_type_t.debug.getter(v23);
  sub_1000BD1B0(v24, v6);
  swift_bridgeObjectRelease();
  v26.receiver = v8;
  v26.super_class = v7;
  return objc_msgSendSuper2(&v26, "dealloc");
}

uint64_t sub_10007C7A8()
{
  return type metadata accessor for JSAMS(0LL);
}

uint64_t type metadata accessor for JSAMS(uint64_t a1)
{
  uint64_t result = qword_1001CB2D8;
  if (!qword_1001CB2D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSAMS);
  }
  return result;
}

void sub_10007C7E8()
{
}

void sub_10007C820(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[19] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[20] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[21] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[22] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[23] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10007C8D0(319LL);
  if (v3 <= 0x3F)
  {
    v4[24] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 25LL, v4, a1 + 80);
  }

void sub_10007C8D0(uint64_t a1)
{
  if (!qword_1001CB2E8)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v5 = type metadata accessor for AppReference(a1, v2, v3, v4);
    if (!v6) {
      atomic_store(v5, (unint64_t *)&qword_1001CB2E8);
    }
  }

uint64_t sub_10007C924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007C96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB2F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

id sub_10007C9B4@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(v1 + a1);
}

void sub_10007C9BC(uint64_t a1@<X8>)
{
}

uint64_t sub_10007C9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + a2) = a1;
  return 0LL;
}

void *sub_10007C9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return memcpy((void *)(a1 + a2), v2, 0x50uLL);
}

void *sub_10007C9E0()
{
  return sub_100066268(v0);
}

id sub_10007C9E8(void *a1)
{
  return [a1 *(SEL *)(v1 + 872)];
}

uint64_t sub_10007C9F0(uint64_t a1)
{
  *(void *)(v2 - 240) = a1;
  *(void *)(v2 - 264) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 264);
}

uint64_t sub_10007CA08()
{
  uint64_t v1 = *(void *)(v0 - 208);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 232), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

id sub_10007CA2C(Class a1)
{
  return objc_allocWithZone(a1);
}

uint64_t sub_10007CA34()
{
  return sub_1000102E0(v1 - 264, v0);
}

uint64_t sub_10007CA40()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10007CA84()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd5JSApp_name);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd5JSApp_name + 8));
  return v1;
}

void sub_10007CABC(uint64_t a1)
{
  __asm { BR              X12 }

id sub_10007CB04()
{
  uint64_t v2 = &v1[OBJC_IVAR____TtC14amsengagementd5JSApp_name];
  *(void *)uint64_t v2 = 0x6C616E7265746E69LL;
  *((void *)v2 + 1) = 0xE800000000000000LL;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for JSApp();
  id v3 = objc_msgSendSuper2(&v5, "init");
  sub_10002FF78(v0);
  return v3;
}

void sub_10007CB9C()
{
}

id sub_10007CBD4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSApp();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSApp()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd5JSApp);
}

BOOL sub_10007CC38(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A7340, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t sub_10007CC7C()
{
  return 0xD000000000000016LL;
}

BOOL sub_10007CCA4@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_10007CC38(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_10007CCD8@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10007CC7C();
  *a1 = 0xD000000000000016LL;
  a1[1] = v3;
  return result;
}

void sub_10007CD04()
{
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v4 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100081950();
  uint64_t v7 = (__n128 *)swift_allocObject(v4, v5, v6);
  uint64_t v22 = sub_100081A4C(v7, (__n128)xmmword_100164230);
  v21[0] = v0;
  uint64_t v8 = swift_retain(v0);
  id v9 = (id)AMSLogKey(v8);
  if (v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    sub_100081A40();
    swift_bridgeObjectRetain(v1);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v10 = v22;
    uint64_t v11 = sub_10000D37C(v21, v22);
    uint64_t v12 = sub_10000DC54((uint64_t)v11, v10);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v12);
    v19[0] = v12;
    sub_10000DEA4();
    sub_1000819D8((uint64_t)v19);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v19[0] = v2;
    v19[1] = v1;
    sub_10000DEA4();
    sub_1000819D8((uint64_t)v19);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v13 = v22;
    uint64_t v14 = sub_10000D37C(v21, v22);
    uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v15);
    v19[0] = v15;
    sub_10000DEA4();
    sub_10000DA68((uint64_t)v19, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v21);
  uint64_t v16 = sub_10000DD38(19LL);
  uint64_t v17 = static os_log_type_t.info.getter(v16);
  sub_1000486E4(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void **)(v0 + 24);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release(*(void *)(v0 + 96));
  sub_10000DD84();
}

uint64_t sub_10007CF10()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for JSAppEngine()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd11JSAppEngine);
}

uint64_t sub_10007CF50(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v110 = *v2;
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v113 = *(void *)(v4 - 8);
  uint64_t v114 = v4;
  __chkstk_darwin(v4);
  sub_10000DD5C();
  uint64_t v112 = v5;
  uint64_t v105 = type metadata accessor for JSONObject(0LL);
  uint64_t v103 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  sub_10000DD5C();
  uint64_t v102 = v6;
  sub_10000DE00();
  sub_10000DC64();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = type metadata accessor for JSRoute(0LL);
  __chkstk_darwin(v11);
  uint64_t v118 = sub_1000378A0();
  uint64_t v111 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  sub_100081A58();
  uint64_t v109 = v12;
  uint64_t v108 = v13;
  __chkstk_darwin(v14);
  v119 = (char *)&v97 - v15;
  uint64_t v16 = sub_100081994();
  uint64_t v116 = *(void *)(v16 - 8);
  uint64_t v117 = v16;
  __chkstk_darwin(v16);
  sub_100081A58();
  uint64_t v104 = v17;
  uint64_t v101 = v18;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v97 - v20;
  char v22 = *((_BYTE *)v2 + 80) == 0;
  double v23 = sub_10001CAD4(*((_BYTE *)v2 + 80));
  swift_bridgeObjectRetain(a1);
  v120 = v21;
  uint64_t v24 = sub_1000A7E34(v22, a1, v23);
  id v25 = (id)AMSLogKey(v24);
  if (v25)
  {
    objc_super v26 = v25;
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v106 = v27;
  }

  else
  {
    uint64_t v107 = 0LL;
    uint64_t v106 = 0LL;
  }

  Date.init()(v25);
  sub_10007F63C();
  uint64_t v115 = v28;
  *(void *)&__int128 v121 = 0LL;
  *((void *)&v121 + 1) = 0xE000000000000000LL;
  uint64_t v29 = JSRequest.route.getter();
  uint64_t v30 = JSRoute.service.getter(v29);
  uint64_t v32 = v31;
  sub_100081A34();
  swift_bridgeObjectRelease();
  *(void *)&__int128 v121 = v30;
  *((void *)&v121 + 1) = v32;
  v33._uint64_t countAndFlagsBits = 46LL;
  v33._object = (void *)0xE100000000000000LL;
  String.append(_:)(v33);
  uint64_t v34 = JSRequest.route.getter();
  uint64_t v35 = JSRoute.function.getter(v34);
  id v37 = v36;
  sub_100081A34();
  v38._uint64_t countAndFlagsBits = v35;
  v38._object = v37;
  String.append(_:)(v38);
  sub_10002C764();
  uint64_t v98 = *((void *)&v121 + 1);
  uint64_t v39 = v121;
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v100 = qword_1001DBB10;
  uint64_t v40 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v41 = *(void *)(sub_10002C79C() - 8);
  uint64_t v42 = *(void *)(v41 + 72);
  uint64_t v43 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v99 = v42;
  uint64_t v44 = swift_allocObject(v40, ((v43 + 32) & ~v43) + 2 * v42, v43 | 7);
  *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  *((void *)&v122 + 1) = type metadata accessor for JSAppEngine();
  *(void *)&__int128 v121 = v2;
  uint64_t v45 = swift_retain(v2);
  id v46 = (id)AMSLogKey(v45);
  if (v46)
  {
    id v47 = v46;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v50 = v49;

    swift_bridgeObjectRetain(v50);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DEBC();
    uint64_t v51 = *((void *)&v122 + 1);
    uint64_t v52 = sub_10000D37C(&v121, *((uint64_t *)&v122 + 1));
    uint64_t v53 = sub_10000DC54((uint64_t)v52, v51);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v53);
    v124[0] = v53;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v124);
    sub_1000819F8();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v124[0] = v48;
    v124[1] = v50;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v124);
    sub_1000819F8();
    sub_10000DC4C(93LL);
    sub_1000819B8();
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DEBC();
    uint64_t v54 = *((void *)&v122 + 1);
    id v55 = sub_10000D37C(&v121, *((uint64_t *)&v122 + 1));
    uint64_t v56 = sub_10000DC54((uint64_t)v55, v54);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v56);
    v124[0] = v56;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v124);
    sub_10000DA68((uint64_t)v124, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000819B8();
  }

  sub_10000D3A0(&v121);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(32LL, 2LL);
  v57._object = (void *)0x800000010016FE10LL;
  v57._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v57);
  *((void *)&v122 + 1) = &type metadata for String;
  uint64_t v58 = v98;
  *(void *)&__int128 v121 = v39;
  *((void *)&v121 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v121);
  sub_10000DA68((uint64_t)&v121, &qword_1001CAAD0);
  v59._uint64_t countAndFlagsBits = 0x736E6F6974706F20LL;
  v59._object = (void *)0xEA0000000000203ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v59);
  uint64_t v60 = JSRequest.options.getter();
  *((void *)&v122 + 1) = sub_10000D33C(&qword_1001C8F18);
  *(void *)&__int128 v121 = v60;
  uint64_t v61 = v102;
  JSONObject.init(wrapping:)(&v121);
  uint64_t v62 = sub_1000A6E18();
  uint64_t v64 = v63;
  (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v61, v105);
  if (v64)
  {
    *((void *)&v122 + 1) = &type metadata for String;
    *(void *)&__int128 v121 = v62;
    *((void *)&v121 + 1) = v64;
  }

  else
  {
    __int128 v121 = 0u;
    __int128 v122 = 0u;
  }

  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v121);
  sub_10000DA68((uint64_t)&v121, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v65 = LogMessage.init(stringInterpolation:)(v10);
  uint64_t v66 = static os_log_type_t.default.getter(v65);
  sub_1000BD1B0(v66, v44);
  sub_10002C764();
  uint64_t v67 = v116;
  uint64_t v68 = v117;
  uint64_t v69 = v104;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v104, v120, v117);
  uint64_t v70 = *(unsigned __int8 *)(v67 + 80);
  uint64_t v71 = v67;
  uint64_t v72 = (v70 + 56) & ~v70;
  id v73 = (char *)swift_allocObject(&unk_1001ABEE0, v72 + v101, v70 | 7);
  uint64_t v74 = v107;
  uint64_t v75 = v106;
  *((void *)v73 + 2) = v107;
  *((void *)v73 + 3) = v75;
  *((void *)v73 + 4) = v2;
  *((void *)v73 + 5) = v39;
  *((void *)v73 + 6) = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(&v73[v72], v69, v68);
  *((void *)&v122 + 1) = type metadata accessor for SyncTaskScheduler(0LL);
  v123 = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(&v121);
  swift_bridgeObjectRetain(v75);
  uint64_t v76 = swift_retain(v2);
  SyncTaskScheduler.init()(v76);
  uint64_t v77 = sub_10000D33C(&qword_1001CB440);
  sub_100081828(&qword_1001CB448, &qword_1001CB440, (uint64_t)&protocol conformance descriptor for Promise<A>);
  uint64_t v105 = Promise.flatMap<A>(on:_:)(&v121, sub_100081318, v73, v77);
  swift_release(v73);
  sub_10000D3A0(&v121);
  uint64_t v78 = sub_10000DDDC((uint64_t)&unk_1001ABF08, 24LL);
  swift_weakInit(v78 + 16, v2);
  uint64_t v79 = v111;
  uint64_t v80 = v109;
  uint64_t v81 = v118;
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v109, v119, v118);
  uint64_t v82 = *(unsigned __int8 *)(v79 + 80);
  uint64_t v83 = (v82 + 40) & ~v82;
  unint64_t v84 = (v108 + v83 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  id v85 = (char *)swift_allocObject(&unk_1001ABF30, v84 + 8, v82 | 7);
  *((void *)v85 + 2) = v78;
  *((void *)v85 + 3) = v74;
  *((void *)v85 + 4) = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(&v85[v83], v80, v81);
  *(void *)&v85[v84] = v110;
  uint64_t v86 = sub_10007DDF8((uint64_t)sub_1000813D0, (uint64_t)v85);
  uint64_t v87 = swift_release(v85);
  sub_10000DE08(v87, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v88 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v89 = v112;
  uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 104);
  uint64_t v91 = v114;
  v90(v112, enum case for DispatchQoS.QoSClass.default(_:), v114);
  uint64_t v92 = (void *)static OS_dispatch_queue.global(qos:)(v89);
  sub_100081A28();
  uint64_t v93 = sub_100081420((uint64_t)sub_10007EA9C, 0LL, v92);

  swift_release(v86);
  v90(v89, v88, v91);
  Swift::String v94 = (void *)static OS_dispatch_queue.global(qos:)(v89);
  sub_100081A28();
  uint64_t v95 = sub_10008150C((uint64_t)sub_10007EE14, 0LL, v94);

  swift_release(v115);
  swift_release(v105);
  swift_release(v93);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v119, v118);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v120, v117);
  return v95;
}

uint64_t sub_10007D848(uint64_t *a1, uint64_t a2, NSString a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v11 = type metadata accessor for JSRequest(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v63 = v13;
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = *a1;
  if (a3) {
    a3 = String._bridgeToObjectiveC()();
  }
  uint64_t v64 = a7;

  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v59 = qword_1001DBB10;
  uint64_t v18 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v19 = type metadata accessor for LogMessage(0LL);
  uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v19 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v68 = (void *)type metadata accessor for JSAppEngine();
  v67[0] = a4;
  uint64_t v21 = swift_retain(a4);
  id v22 = (id)AMSLogKey(v21);
  if (v22)
  {
    double v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v58 = v14;
    uint64_t v25 = v11;
    uint64_t v27 = v26;

    swift_bridgeObjectRetain(v27);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v28._uint64_t countAndFlagsBits = 0LL;
    v28._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v29 = v68;
    uint64_t v30 = sub_10000D37C(v67, (uint64_t)v68);
    uint64_t DynamicType = swift_getDynamicType(v30, v29, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v65[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
    sub_10000DA68((uint64_t)v65, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 5972026LL;
    v32._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    uint64_t MetatypeMetadata = &type metadata for String;
    v65[0] = v24;
    v65[1] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
    sub_10000DA68((uint64_t)v65, &qword_1001CAAD0);
    v33._uint64_t countAndFlagsBits = 93LL;
    v33._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    LogMessage.init(stringInterpolation:)(v17);
    uint64_t v11 = v25;
    uint64_t v14 = v58;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    uint64_t v35 = v68;
    id v36 = sub_10000D37C(v67, (uint64_t)v68);
    uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
    v65[0] = v37;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
    sub_10000DA68((uint64_t)v65, &qword_1001CAAD0);
    v38._uint64_t countAndFlagsBits = 58LL;
    v38._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v38);
    LogMessage.init(stringInterpolation:)(v17);
  }

  sub_10000D3A0(v67);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
  v39._object = (void *)0x800000010016FE90LL;
  v39._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  uint64_t v68 = &type metadata for String;
  v67[0] = v60;
  v67[1] = v61;
  swift_bridgeObjectRetain(v61);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v67);
  sub_10000DA68((uint64_t)v67, &qword_1001CAAD0);
  v40._uint64_t countAndFlagsBits = 0LL;
  v40._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t v41 = LogMessage.init(stringInterpolation:)(v17);
  uint64_t v42 = static os_log_type_t.default.getter(v41);
  sub_1000BD1B0(v42, v20);
  swift_bridgeObjectRelease();
  uint64_t v43 = type metadata accessor for JSStack(0LL);
  uint64_t v44 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v67, v43, v62, v43, v44);
  uint64_t v45 = v67[0];
  uint64_t v46 = JSStack.withUnsafeContext(_:)(sub_100080BA0, 0LL);
  uint64_t v47 = v64;
  double v48 = COERCE_DOUBLE(JSRequest.timeoutInterval.getter(v46));
  if ((v49 & 1) == 0) {
    sub_100080608(v48);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v47, v11);
  uint64_t v50 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v51 = (v50 + 24) & ~v50;
  uint64_t v52 = swift_allocObject(&unk_1001ABFF8, v51 + v63, v50 | 7);
  *(void *)(v52 + swift_weakDestroy(v0 + 16) = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v52 + v51, v14, v11);
  swift_retain(v45);
  uint64_t v53 = sub_10007EF64((uint64_t (*)(CFIndex))sub_100081750, v52);
  swift_release(v52);
  uint64_t v54 = swift_allocObject(&unk_1001AC020, 32LL, 7LL);
  *(void *)(v54 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v54 + 24) = v45;
  swift_retain(a4);
  swift_retain(v45);
  uint64_t v55 = sub_10007DDF8((uint64_t)sub_1000817B0, v54);
  swift_release(v45);
  swift_release(v53);
  swift_release(v54);
  return v55;
}

uint64_t sub_10007DD24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Promise.__allocating_init()(a1);
  uint64_t v5 = (void *)swift_allocObject(&unk_1001ABE90, 40LL, 7LL);
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = v4;
  uint64_t v6 = (void *)swift_allocObject(&unk_1001ABEB8, 40LL, 7LL);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v4;
  swift_retain_n(a2, 2LL);
  swift_retain_n(v4, 2LL);
  sub_100062648(sub_1000812A4, v5, sub_1000812BC, v6);
  swift_release(v5);
  swift_release(v6);
  return v4;
}

uint64_t sub_10007DDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Promise.__allocating_init()(a1);
  uint64_t v5 = (void *)swift_allocObject(&unk_1001ABFA8, 40LL, 7LL);
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = v4;
  uint64_t v6 = (void *)swift_allocObject(&unk_1001ABFD0, 40LL, 7LL);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v4;
  swift_retain_n(a2, 2LL);
  swift_retain_n(v4, 2LL);
  sub_100062648(sub_100081678, v5, sub_1000816BC, v6);
  swift_release(v5);
  swift_release(v6);
  return v4;
}

uint64_t sub_10007DECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v121 = a6;
  *((void *)&v121 + 1) = a1;
  uint64_t v118 = a2;
  uint64_t v116 = type metadata accessor for JSONObject(0LL);
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v11 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000D33C(&qword_1001CB458);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000D33C(&qword_1001CB470);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for JSResponse(0LL);
  uint64_t v120 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  v119 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v117 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v114 - v23;
  a3 += 16LL;
  swift_beginAccess(a3, v131, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v28 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v29 = type metadata accessor for LogMessage(0LL);
    uint64_t v30 = swift_allocObject( v28,  ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v29 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    *((void *)&v130 + 1) = swift_getMetatypeMetadata(a7);
    *(void *)&__int128 v129 = a7;
    id v31 = (id)AMSLogKey(*((void *)&v130 + 1));
    if (v31)
    {
      Swift::String v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v35 = v34;

      swift_bridgeObjectRetain(v35);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v36._uint64_t countAndFlagsBits = 0LL;
      v36._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t v37 = *((void *)&v130 + 1);
      Swift::String v38 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
      uint64_t DynamicType = swift_getDynamicType(v38, v37, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v126 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
      sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
      v40._uint64_t countAndFlagsBits = 5972026LL;
      v40._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v126 = v33;
      uint64_t v127 = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
      sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
      v41._uint64_t countAndFlagsBits = 93LL;
      v41._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      LogMessage.init(stringInterpolation:)(v24);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v83._uint64_t countAndFlagsBits = 0LL;
      v83._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v83);
      uint64_t v84 = *((void *)&v130 + 1);
      id v85 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
      uint64_t v86 = swift_getDynamicType(v85, v84, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v86);
      uint64_t v126 = v86;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
      sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
      v87._uint64_t countAndFlagsBits = 58LL;
      v87._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v87);
      LogMessage.init(stringInterpolation:)(v24);
    }

    sub_10000D3A0(&v129);
    uint64_t v88 = LogMessage.init(stringLiteral:)(0xD000000000000010LL);
    uint64_t v89 = static os_log_type_t.error.getter(v88);
    sub_1000BD1B0(v89, v30);
    return swift_bridgeObjectRelease();
  }

  uint64_t v26 = Strong;
  if (a5) {
    NSString v27 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v27 = 0LL;
  }

  sub_100080BC0();
  uint64_t v42 = sub_10000D33C(&qword_1001CA728);
  uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
  *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  double v44 = Date.timeIntervalSinceNow.getter(v43);
  *(void *)(v43 + 56) = &type metadata for Double;
  *(void *)(v43 + 64) = &protocol witness table for Double;
  *(double *)(v43 + 32) = fabs(v44);
  uint64_t v45 = String.init(format:_:)(1714630181LL, 0xE400000000000000LL, v43);
  uint64_t v47 = v46;
  sub_1000816C8(*((uint64_t *)&v121 + 1), (uint64_t)v18);
  uint64_t v48 = v122;
  if (sub_1000102D4((uint64_t)v18, 1LL, v122) == 1)
  {
    sub_10000DA68((uint64_t)v18, &qword_1001CB470);
    uint64_t v49 = v118;
    if (v118)
    {
      *(void *)&__int128 v121 = v45;
      *((void *)&v121 + 1) = v47;
      swift_errorRetain(v118);
      if (qword_1001C7F90 != -1) {
        swift_once(&qword_1001C7F90, sub_1000BD3BC);
      }
      uint64_t v50 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v51 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v52 = swift_allocObject( v50,  ((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
            + 2LL * *(void *)(v51 + 72),
              *(unsigned __int8 *)(v51 + 80) | 7LL);
      *(_OWORD *)(v52 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
      *((void *)&v130 + 1) = type metadata accessor for JSAppEngine();
      *(void *)&__int128 v129 = v26;
      uint64_t v53 = swift_retain(v26);
      id v54 = (id)AMSLogKey(v53);
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        uint64_t v58 = v57;

        swift_bridgeObjectRetain(v58);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v59._uint64_t countAndFlagsBits = 0LL;
        v59._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v59);
        uint64_t v60 = *((void *)&v130 + 1);
        uint64_t v61 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
        uint64_t v62 = swift_getDynamicType(v61, v60, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v62);
        uint64_t v126 = v62;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
        sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
        v63._uint64_t countAndFlagsBits = 5972026LL;
        v63._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v63);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v126 = v56;
        uint64_t v127 = v58;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
        uint64_t v49 = v118;
        sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
        v64._uint64_t countAndFlagsBits = 93LL;
        v64._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v64);
        LogMessage.init(stringInterpolation:)(v24);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v103._uint64_t countAndFlagsBits = 0LL;
        v103._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v103);
        uint64_t v104 = *((void *)&v130 + 1);
        uint64_t v105 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
        uint64_t v106 = swift_getDynamicType(v105, v104, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v106);
        uint64_t v126 = v106;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
        sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
        v107._uint64_t countAndFlagsBits = 58LL;
        v107._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v107);
        LogMessage.init(stringInterpolation:)(v24);
      }

      sub_10000D3A0(&v129);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 2LL);
      v108._uint64_t countAndFlagsBits = 0xD000000000000012LL;
      v108._object = (void *)0x800000010016FE50LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v108);
      *((void *)&v130 + 1) = &type metadata for String;
      __int128 v129 = v121;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v129);
      sub_10000DA68((uint64_t)&v129, &qword_1001CAAD0);
      v109._uint64_t countAndFlagsBits = 0x3A726F7272652029LL;
      v109._object = (void *)0xE900000000000020LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v109);
      swift_getErrorValue(v49, v125, &v123);
      uint64_t v110 = v124;
      *((void *)&v130 + 1) = v124;
      sub_1000663D0(&v129);
      (*(void (**)(void))(*(void *)(v110 - 8) + 16LL))();
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v129);
      sub_10000DA68((uint64_t)&v129, &qword_1001CAAD0);
      v111._uint64_t countAndFlagsBits = 0LL;
      v111._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v111);
      uint64_t v112 = LogMessage.init(stringInterpolation:)(v24);
      uint64_t v113 = static os_log_type_t.error.getter(v112);
      sub_1000BD1B0(v113, v52);
      swift_bridgeObjectRelease();
      swift_release(v26);
      return swift_errorRelease(v49);
    }

    swift_release(v26);
    return swift_bridgeObjectRelease();
  }

  *(void *)&__int128 v121 = v45;
  *((void *)&v121 + 1) = v47;
  uint64_t v65 = (*(uint64_t (**)(char *, char *, uint64_t))(v120 + 32))(v119, v18, v48);
  JSResponse.body.getter(v65);
  CoarselyTimed.contained.getter(v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v114 = sub_1000A6E18();
  uint64_t v67 = v66;
  (*(void (**)(char *, uint64_t))(v115 + 8))(v11, v116);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v118 = qword_1001DBB10;
  uint64_t v68 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v69 = type metadata accessor for LogMessage(0LL);
  uint64_t v70 = swift_allocObject( v68,  ((*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v69 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  *((void *)&v130 + 1) = type metadata accessor for JSAppEngine();
  *(void *)&__int128 v129 = v26;
  uint64_t v116 = v26;
  uint64_t v71 = swift_retain(v26);
  id v72 = (id)AMSLogKey(v71);
  if (v72)
  {
    id v73 = v72;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v76 = v75;

    swift_bridgeObjectRetain(v76);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v77._uint64_t countAndFlagsBits = 0LL;
    v77._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v77);
    uint64_t v78 = *((void *)&v130 + 1);
    uint64_t v79 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
    uint64_t v80 = swift_getDynamicType(v79, v78, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v80);
    uint64_t v126 = v80;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
    v81._uint64_t countAndFlagsBits = 5972026LL;
    v81._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v81);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v126 = v74;
    uint64_t v127 = v76;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
    v82._uint64_t countAndFlagsBits = 93LL;
    v82._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v82);
    LogMessage.init(stringInterpolation:)(v24);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v91._uint64_t countAndFlagsBits = 0LL;
    v91._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v91);
    uint64_t v92 = *((void *)&v130 + 1);
    uint64_t v93 = sub_10000D37C(&v129, *((uint64_t *)&v130 + 1));
    uint64_t v94 = swift_getDynamicType(v93, v92, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v94);
    uint64_t v126 = v94;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000DA68((uint64_t)&v126, &qword_1001CAAD0);
    v95._uint64_t countAndFlagsBits = 58LL;
    v95._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v95);
    LogMessage.init(stringInterpolation:)(v24);
  }

  sub_10000D3A0(&v129);
  v96 = v117;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 2LL);
  v97._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  v97._object = (void *)0x800000010016FE70LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v97);
  *((void *)&v130 + 1) = &type metadata for String;
  __int128 v129 = v121;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v129);
  sub_10000DA68((uint64_t)&v129, &qword_1001CAAD0);
  v98._uint64_t countAndFlagsBits = 0x203A617461642029LL;
  v98._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v98);
  if (v67)
  {
    *((void *)&v130 + 1) = &type metadata for String;
    *(void *)&__int128 v129 = v114;
    *((void *)&v129 + 1) = v67;
  }

  else
  {
    __int128 v129 = 0u;
    __int128 v130 = 0u;
  }

  uint64_t v99 = v116;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v129);
  sub_10000DA68((uint64_t)&v129, &qword_1001CAAD0);
  v100._uint64_t countAndFlagsBits = 0LL;
  v100._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v100);
  uint64_t v101 = LogMessage.init(stringInterpolation:)(v96);
  uint64_t v102 = static os_log_type_t.default.getter(v101);
  sub_1000BD1B0(v102, v70);
  swift_release(v99);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v119, v122);
}

uint64_t sub_10007EA9C(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB468);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for JSError(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v32 = a1;
  swift_errorRetain(a1);
  uint64_t v9 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  if ((swift_dynamicCast(v4, &v32, v9, v5, 6LL) & 1) != 0)
  {
    sub_10000D5C0((uint64_t)v4, 0LL, 1LL, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    id v35 = (id)_convertErrorToNSError(_:)(a1);
    uint64_t v10 = sub_10000D33C((uint64_t *)&unk_1001C9C80);
    uint64_t inited = swift_initStackObject(v10, &v34);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1001649D0;
    *(void *)&__int128 v32 = 0x6E6D756C6F63LL;
    *((void *)&v32 + 1) = 0xE600000000000000LL;
    uint64_t v12 = AnyHashable.init<A>(_:)(&v32);
    uint64_t v13 = JSError.column.getter(v12);
    if ((v14 & 1) != 0)
    {
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 72) = 0x6E776F6E6B6E75LL;
      *(void *)(inited + 80) = 0xE700000000000000LL;
    }

    else
    {
      uint64_t v33 = &type metadata for Int;
      *(void *)&__int128 v32 = v13;
      sub_10000DA58(&v32, (_OWORD *)(inited + 72));
    }

    *(void *)&__int128 v32 = 1701734764LL;
    *((void *)&v32 + 1) = 0xE400000000000000LL;
    uint64_t v17 = AnyHashable.init<A>(_:)(&v32);
    uint64_t v18 = JSError.line.getter(v17);
    if ((v19 & 1) != 0)
    {
      *(void *)(inited + 168) = &type metadata for String;
      *(void *)(inited + 144) = 0x6E776F6E6B6E75LL;
      *(void *)(inited + 152) = 0xE700000000000000LL;
    }

    else
    {
      uint64_t v33 = &type metadata for Int;
      *(void *)&__int128 v32 = v18;
      sub_10000DA58(&v32, (_OWORD *)(inited + 144));
    }

    *(void *)&__int128 v32 = 0x6567617373656DLL;
    *((void *)&v32 + 1) = 0xE700000000000000LL;
    uint64_t v20 = AnyHashable.init<A>(_:)(&v32);
    uint64_t v21 = JSError.message.getter(v20);
    *(void *)(inited + 240) = &type metadata for String;
    *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v21;
    *(void *)(inited + 224) = v22;
    *(void *)&__int128 v32 = 0x5255656372756F73LL;
    *((void *)&v32 + 1) = 0xE90000000000004CLL;
    uint64_t v23 = AnyHashable.init<A>(_:)(&v32);
    uint64_t v24 = JSError.sourceURL.getter(v23);
    *(void *)(inited + 312) = &type metadata for String;
    if (v25) {
      uint64_t v26 = v24;
    }
    else {
      uint64_t v26 = 0x6E776F6E6B6E75LL;
    }
    if (v25) {
      unint64_t v27 = v25;
    }
    else {
      unint64_t v27 = 0xE700000000000000LL;
    }
    *(void *)(inited + 288) = v26;
    *(void *)(inited + 296) = v27;
    Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v29 = v35;
    objc_msgSend(v35, "ams_errorByAddingUserInfo:", isa);

    swift_willThrow(v30);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  else
  {
    sub_10000D5C0((uint64_t)v4, 1LL, 1LL, v5);
    sub_10000DA68((uint64_t)v4, &qword_1001CB468);
    swift_willThrow(v15);
    return swift_errorRetain(a1);
  }

uint64_t sub_10007EE14@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for JSONObject(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D33C(&qword_1001CB458);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  JSResponse.body.getter(v8);
  CoarselyTimed.contained.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v11 = sub_1000A73D8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 && (sub_1000BDF2C(v11), uint64_t v13 = v12, result = swift_bridgeObjectRelease(), v13))
  {
    *a1 = v13;
  }

  else
  {
    unint64_t v15 = sub_100081618();
    uint64_t v16 = swift_allocError(&type metadata for JSAppEngineError, v15, 0LL, 0LL);
    return swift_willThrow(v16);
  }

  return result;
}

uint64_t sub_10007EF64(uint64_t (*a1)(CFIndex), uint64_t a2)
{
  uint64_t v84 = a1;
  uint64_t v83 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v80 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v82 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::String v81 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  uint64_t v76 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v79 = (char *)&v70 - v16;
  uint64_t v17 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v17);
  char v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for Defaults();
  CFIndex v20 = sub_100049D4C();
  if ((v21 & 1) != 0) {
    return v84(v20);
  }
  CFIndex v22 = v20;
  if (v20 < 1) {
    return v84(v20);
  }
  uint64_t v74 = v5;
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v72 = a2;
  uint64_t v73 = v6;
  uint64_t v71 = qword_1001DBB10;
  uint64_t v23 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v24 = type metadata accessor for LogMessage(0LL);
  uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v24 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v86 = (void *)type metadata accessor for JSAppEngine();
  aBlock[0] = v2;
  uint64_t v26 = swift_retain(v2);
  id v27 = (id)AMSLogKey(v26);
  if (v27)
  {
    uint64_t v28 = v27;
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v30 = v29;

    swift_bridgeObjectRetain(v30);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    __int128 v32 = v86;
    uint64_t v33 = sub_10000D37C(aBlock, (uint64_t)v86);
    uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v89[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v89);
    sub_10000DA68((uint64_t)v89, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 5972026LL;
    v35._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    uint64_t MetatypeMetadata = &type metadata for String;
    v89[0] = v70;
    v89[1] = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v89);
    sub_10000DA68((uint64_t)v89, &qword_1001CAAD0);
    v36._uint64_t countAndFlagsBits = 93LL;
    v36._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    LogMessage.init(stringInterpolation:)(v19);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v38._uint64_t countAndFlagsBits = 0LL;
    v38._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v38);
    Swift::String v39 = v86;
    Swift::String v40 = sub_10000D37C(aBlock, (uint64_t)v86);
    uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v41);
    v89[0] = v41;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v89);
    sub_10000DA68((uint64_t)v89, &qword_1001CAAD0);
    v42._uint64_t countAndFlagsBits = 58LL;
    v42._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v42);
    LogMessage.init(stringInterpolation:)(v19);
  }

  sub_10000D3A0(aBlock);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(26LL, 1LL);
  v43._uint64_t countAndFlagsBits = 0x676E69796C707041LL;
  v43._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v43);
  uint64_t v86 = &type metadata for Int;
  aBlock[0] = v22;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(aBlock);
  sub_10000DA68((uint64_t)aBlock, &qword_1001CAAD0);
  v44._object = (void *)0x800000010016FEB0LL;
  v44._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v44);
  uint64_t v45 = LogMessage.init(stringInterpolation:)(v19);
  uint64_t v46 = static os_log_type_t.info.getter(v45);
  sub_1000BD1B0(v46, v25);
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_10000D33C(&qword_1001CB440);
  uint64_t v48 = Promise.__allocating_init()(v47);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v49 = swift_retain(v48);
  uint64_t v71 = static OS_dispatch_queue.main.getter(v49);
  static DispatchTime.now()(v71);
  *uint64_t v10 = v22;
  uint64_t v51 = v77;
  uint64_t v50 = v78;
  (*(void (**)(CFIndex *, void, uint64_t))(v77 + 104))( v10,  enum case for DispatchTimeInterval.seconds(_:),  v78);
  uint64_t v52 = v79;
  + infix(_:_:)(v15, v10);
  (*(void (**)(CFIndex *, uint64_t))(v51 + 8))(v10, v50);
  uint64_t v53 = v75;
  id v54 = *(void (**)(char *, uint64_t))(v76 + 8);
  v54(v15, v75);
  uint64_t v55 = (void *)swift_allocObject(&unk_1001AC048, 40LL, 7LL);
  uint64_t v56 = v84;
  v55[2] = v48;
  v55[3] = v56;
  uint64_t v57 = v72;
  v55[4] = v72;
  Swift::String v87 = sub_100081804;
  uint64_t v88 = v55;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100061FB8;
  uint64_t v86 = &unk_1001AC060;
  uint64_t v58 = _Block_copy(aBlock);
  Swift::String v59 = v88;
  swift_retain(v57);
  uint64_t v60 = swift_release(v59);
  uint64_t v61 = v53;
  uint64_t v62 = v81;
  static DispatchQoS.unspecified.getter(v60);
  aBlock[0] = _swiftEmptyArrayStorage;
  unint64_t v63 = sub_100010404();
  uint64_t v64 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_100081828( (unint64_t *)&qword_1001CD3F0,  (uint64_t *)&unk_1001CAB00,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v65 = v74;
  uint64_t v66 = v64;
  uint64_t v67 = v83;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v66, v68, v83, v63);
  uint64_t v69 = (void *)v71;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v52, v62, v65, v58);
  _Block_release(v58);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v65, v67);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v62, v73);
  v54(v52, v61);
  return v48;
}

uint64_t sub_10007F600(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  sub_10005FF68();
  return swift_release(v2);
}

void sub_10007F63C()
{
  uint64_t v1 = v0;
  sub_10000D33C(&qword_1001CB420);
  sub_10000DC64();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v79 - v6;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10000DC74();
  uint64_t v9 = sub_1000378A0();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v17 = (char *)&v79 - v16;
  uint64_t v18 = *(void *)(v0 + 96);
  if (v18)
  {
    sub_10000D33C(&qword_1001CB438);
    v107[0] = v18;
    swift_retain(v18);
    Promise.__allocating_init(value:)(v107);
  }

  else
  {
    uint64_t v80 = v5;
    uint64_t v82 = v12;
    uint64_t v83 = v15;
    uint64_t v85 = v14;
    uint64_t v86 = v13;
    id v19 = (id)AMSLogKey(v13);
    if (v19)
    {
      CFIndex v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v89 = v22;
      uint64_t v90 = v21;
    }

    else
    {
      uint64_t v89 = 0LL;
      uint64_t v90 = 0LL;
    }

    uint64_t v84 = v17;
    Date.init()(v19);
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v23 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100081950();
    uint64_t v26 = swift_allocObject(v23, v24, v25);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v108 = type metadata accessor for JSAppEngine();
    v107[0] = v0;
    uint64_t v27 = sub_10002FAA0();
    id v28 = (id)AMSLogKey(v27);
    Swift::String v87 = v7;
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v32 = v31;

      swift_bridgeObjectRetain(v32);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v33 = v108;
      uint64_t v34 = sub_10000D37C(v107, v108);
      uint64_t v35 = sub_10000DC54((uint64_t)v34, v33);
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v35);
      sub_1000819C8(MetatypeMetadata);
      sub_100081A10();
      sub_10000DC14();
      uint64_t v105 = &type metadata for String;
      v104[0] = v30;
      v104[1] = v32;
      uint64_t v7 = v87;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v104);
      sub_100081A10();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v37 = v108;
      Swift::String v38 = sub_10000D37C(v107, v108);
      uint64_t v39 = sub_10000DC54((uint64_t)v38, v37);
      uint64_t v40 = swift_getMetatypeMetadata(v39);
      sub_1000819C8(v40);
      sub_10000DA68((uint64_t)v104, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_100048738();
    uint64_t v41 = sub_10000DD38(21LL);
    uint64_t v42 = static os_log_type_t.info.getter(v41);
    sub_1000BD1B0(v42, v26);
    sub_10002C764();
    Swift::String v43 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
    id v81 = *(id *)(v1 + 24);
    id v44 = [v81 accountMediaType];
    id v88 = objc_msgSend(v43, "ams_sharedAccountStoreForMediaType:", v44);

    type metadata accessor for BaseObjectGraph(0LL);
    static BaseObjectGraph.build(withName:)(v107, 0xD000000000000017LL, 0x800000010016FDB0LL);
    uint64_t v45 = type metadata accessor for Bag(0LL);
    sub_100081A1C((uint64_t)v7, 1LL);
    if (*(_BYTE *)(v1 + 80))
    {
      if (qword_1001C7F10 != -1) {
        swift_once(&qword_1001C7F10, sub_10001CF94);
      }
      uint64_t v46 = swift_unknownObjectRetain(qword_1001C90F0);
      uint64_t v47 = (uint64_t)v80;
      Bag.init(from:)(v46);
      sub_10000DA68((uint64_t)v7, &qword_1001CB420);
      sub_100081A1C(v47, 0LL);
      sub_100080E48(v47, (uint64_t)v7);
    }

    sub_10000D37C(v107, v108);
    sub_100081940();
    uint64_t v48 = v105;
    uint64_t v49 = v106;
    sub_10000D37C(v104, (uint64_t)v105);
    sub_10002FFBC(v45, (uint64_t)v7, (uint64_t)v48, v45, v49, v101);
    uint64_t v51 = v102;
    uint64_t v50 = v103;
    uint64_t v52 = sub_10000D37C(v101, v102);
    uint64_t v53 = sub_10000DE08((uint64_t)v52, &qword_1001CB428, &OBJC_CLASS___AMSURLSession_ptr);
    id v54 = (void *)sub_10000DDDC((uint64_t)&unk_1001ABDF0, 40LL);
    uint64_t v56 = v89;
    uint64_t v55 = v90;
    v54[2] = v90;
    v54[3] = v56;
    uint64_t v90 = v55;
    v54[4] = v1;
    uint64_t v57 = sub_10000DDDC((uint64_t)&unk_1001ABE18, 32LL);
    *(void *)(v57 + swift_weakDestroy(v0 + 16) = sub_100080E9C;
    *(void *)(v57 + 24) = v54;
    swift_bridgeObjectRetain(v56);
    sub_10002FAA0();
    AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v100, v53, sub_100080ECC, v57, v51, v53, v50);
    swift_release(v57);
    uint64_t v58 = sub_10000D37C(v100, v100[3]);
    uint64_t v59 = sub_10000DE08((uint64_t)v58, &qword_1001CB430, &OBJC_CLASS___AMSProcessInfo_ptr);
    v98[0] = v81;
    sub_100081980(v59, (uint64_t)v98);
    uint64_t v60 = sub_10000D37C(v99, v99[3]);
    uint64_t v61 = sub_10000DE08((uint64_t)v60, &qword_1001C8E40, &OBJC_CLASS___ACAccountStore_ptr);
    v95[0] = v88;
    sub_100081980(v61, (uint64_t)v95);
    sub_10000D37C(v98, v98[3]);
    sub_100081940();
    uint64_t v62 = v96;
    uint64_t v63 = v97;
    sub_10000D37C(v95, v96);
    uint64_t v64 = type metadata accessor for JSStack(0LL);
    uint64_t v65 = (void *)sub_10000DDDC((uint64_t)&unk_1001ABE40, 40LL);
    v65[2] = v55;
    void v65[3] = v56;
    uint64_t v89 = v56;
    v65[4] = v1;
    sub_10002FAA0();
    __n128 v66 = swift_bridgeObjectRetain(v56);
    dispatch thunk of AsyncObjectGraphBuilder.satisfying<A>(_:with:)(v94, v64, sub_100080F10, v65, v64, v62, v63, v66);
    swift_release(v65);
    sub_10000D37C(v94, v94[3]);
    sub_100081940();
    uint64_t v67 = v92;
    uint64_t v68 = v93;
    sub_10000D37C(v91, v92);
    uint64_t v69 = dispatch thunk of AsyncObjectGraphBuilder.makeObjectGraph()(v67, v68);
    sub_10000D3A0(v91);
    sub_10000D3A0(v94);
    sub_10000D3A0(v95);
    sub_10000D3A0(v98);
    sub_10000D3A0(v99);
    sub_10000D3A0(v100);
    sub_10000D3A0(v101);
    sub_10000D3A0(v104);
    uint64_t v71 = v84;
    uint64_t v70 = v85;
    uint64_t v72 = v82;
    uint64_t v73 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v82, v84, v86);
    uint64_t v74 = *(unsigned __int8 *)(v70 + 80);
    uint64_t v75 = (v74 + 32) & ~v74;
    unint64_t v76 = (v83 + v75 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v77 = swift_allocObject(&unk_1001ABE68, v76 + 8, v74 | 7);
    uint64_t v78 = v89;
    *(void *)(v77 + swift_weakDestroy(v0 + 16) = v90;
    *(void *)(v77 + 24) = v78;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v77 + v75, v72, v73);
    *(void *)(v77 + v76) = v1;
    sub_10002FAA0();
    sub_10007DD24((uint64_t)sub_100080F84, v77);

    swift_release(v69);
    sub_100037230();
    sub_10000DA68((uint64_t)v87, &qword_1001CB420);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v73);
    sub_100048738();
  }

  sub_10000DD84();
}

id sub_10007FD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0LL;
  }

  memcpy(v8, (const void *)(a4 + 16), sizeof(v8));
  id v6 = objc_allocWithZone((Class)type metadata accessor for AppURLSession());
  sub_100066268(v8);
  return sub_10002FD20(v8);
}

id sub_10007FE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    NSString v6 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v6 = 0LL;
  }

  memcpy(v10, (const void *)(a4 + 16), sizeof(v10));
  id result = [objc_allocWithZone(JSVirtualMachine) init];
  if (result)
  {
    uint64_t v8 = result;
    type metadata accessor for JSStackProvider();
    uint64_t v9 = sub_1000ACC54((uint64_t)v10, a1, v8);

    return v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10007FEE0(uint64_t *a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v75 - v14;
  uint64_t v16 = *a1;
  if (a4) {
    a4 = String._bridgeToObjectiveC()();
  }

  uint64_t v17 = sub_10000D33C(&qword_1001CA728);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  double v19 = Date.timeIntervalSinceNow.getter(v18);
  *(void *)(v18 + 56) = &type metadata for Double;
  *(void *)(v18 + 64) = &protocol witness table for Double;
  *(double *)(v18 + 32) = fabs(v19);
  uint64_t v77 = String.init(format:_:)(1714695717LL, 0xE400000000000000LL, v18);
  uint64_t v21 = v20;
  if (v16)
  {
    uint64_t v22 = *(void *)(a6 + 96);
    *(void *)(a6 + 96) = v16;
    swift_retain_n(v16, 2LL);
    swift_release(v22);
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v23 = qword_1001DBB10;
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = type metadata accessor for LogMessage(0LL);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v25 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    *((void *)&v85 + 1) = type metadata accessor for JSAppEngine();
    *(void *)&__int128 v84 = a6;
    uint64_t v27 = swift_retain(a6);
    id v28 = (id)AMSLogKey(v27);
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v76 = v23;
      uint64_t v31 = v21;
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t v35 = *((void *)&v85 + 1);
      Swift::String v36 = sub_10000D37C(&v84, *((uint64_t *)&v85 + 1));
      uint64_t DynamicType = swift_getDynamicType(v36, v35, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v81 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v38._uint64_t countAndFlagsBits = 5972026LL;
      v38._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v81 = v30;
      uint64_t v82 = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v39._uint64_t countAndFlagsBits = 93LL;
      v39._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      LogMessage.init(stringInterpolation:)(v15);
      uint64_t v21 = v31;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v55._uint64_t countAndFlagsBits = 0LL;
      v55._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      uint64_t v56 = *((void *)&v85 + 1);
      uint64_t v57 = sub_10000D37C(&v84, *((uint64_t *)&v85 + 1));
      uint64_t v58 = swift_getDynamicType(v57, v56, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v58);
      uint64_t v81 = v58;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v59._uint64_t countAndFlagsBits = 58LL;
      v59._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v59);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v84);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(22LL, 1LL);
    v60._uint64_t countAndFlagsBits = 0xD000000000000015LL;
    v60._object = (void *)0x800000010016FDF0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    *((void *)&v85 + 1) = &type metadata for String;
    *(void *)&__int128 v84 = v77;
    *((void *)&v84 + 1) = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v84);
    sub_10000DA68((uint64_t)&v84, &qword_1001CAAD0);
    v61._uint64_t countAndFlagsBits = 41LL;
    v61._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v62 = LogMessage.init(stringInterpolation:)(v15);
    uint64_t v63 = static os_log_type_t.default.getter(v62);
    sub_1000BD1B0(v63, v26);
    swift_release(v16);
  }

  else
  {
    uint64_t v76 = v20;
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    v75[1] = qword_1001DBB10;
    uint64_t v40 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v41 = type metadata accessor for LogMessage(0LL);
    uint64_t v42 = swift_allocObject( v40,  ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v41 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
    *((void *)&v85 + 1) = type metadata accessor for JSAppEngine();
    *(void *)&__int128 v84 = a6;
    uint64_t v43 = swift_retain(a6);
    id v44 = (id)AMSLogKey(v43);
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v48 = v47;

      swift_bridgeObjectRetain(v48);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v49._uint64_t countAndFlagsBits = 0LL;
      v49._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      uint64_t v50 = *((void *)&v85 + 1);
      uint64_t v51 = sub_10000D37C(&v84, *((uint64_t *)&v85 + 1));
      uint64_t v52 = swift_getDynamicType(v51, v50, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
      uint64_t v81 = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v53._uint64_t countAndFlagsBits = 5972026LL;
      v53._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v81 = v46;
      uint64_t v82 = v48;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v54._uint64_t countAndFlagsBits = 93LL;
      v54._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v64._uint64_t countAndFlagsBits = 0LL;
      v64._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v64);
      uint64_t v65 = *((void *)&v85 + 1);
      __n128 v66 = sub_10000D37C(&v84, *((uint64_t *)&v85 + 1));
      uint64_t v67 = swift_getDynamicType(v66, v65, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v67);
      uint64_t v81 = v67;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v68._uint64_t countAndFlagsBits = 58LL;
      v68._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v68);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v84);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(19LL, 1LL);
    v69._object = (void *)0x800000010016FDD0LL;
    v69._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v69);
    *((void *)&v85 + 1) = &type metadata for String;
    *(void *)&__int128 v84 = v77;
    *((void *)&v84 + 1) = v76;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v84);
    sub_10000DA68((uint64_t)&v84, &qword_1001CAAD0);
    v70._uint64_t countAndFlagsBits = 41LL;
    v70._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v70);
    LogMessage.init(stringInterpolation:)(v13);
    if (a2)
    {
      swift_getErrorValue(a2, v80, &v78);
      uint64_t v71 = v79;
      *((void *)&v85 + 1) = v79;
      sub_1000663D0(&v84);
      (*(void (**)(void))(*(void *)(v71 - 8) + 16LL))();
    }

    else
    {
      __int128 v84 = 0u;
      __int128 v85 = 0u;
    }

    static LogMessage.safe(_:)(&v84);
    sub_10000DA68((uint64_t)&v84, &qword_1001CAAD0);
    uint64_t v73 = static os_log_type_t.error.getter(v72);
    sub_1000BD1B0(v73, v42);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100080608(double a1)
{
  uint64_t v5 = *v1;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100067688();
  uint64_t v10 = (__n128 *)swift_allocObject(v7, (v9 & ~v8) + 2 * v3, v8 | 7);
  uint64_t v27 = (void *)sub_100081A4C(v10, (__n128)xmmword_100164230);
  v26[0] = v1;
  uint64_t v11 = swift_retain(v1);
  id v12 = (id)AMSLogKey(v11);
  if (v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    sub_100081A40();
    swift_bridgeObjectRetain(v1);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v13 = (uint64_t)v27;
    uint64_t v14 = sub_10000D37C(v26, (uint64_t)v27);
    uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v15);
    v24[0] = v15;
    sub_100048640();
    sub_1000819D8((uint64_t)v24);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v24[0] = v2;
    v24[1] = v1;
    sub_100048640();
    sub_1000819D8((uint64_t)v24);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v16 = (uint64_t)v27;
    uint64_t v17 = sub_10000D37C(v26, (uint64_t)v27);
    uint64_t v18 = sub_10000DC54((uint64_t)v17, v16);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v18);
    v24[0] = v18;
    sub_100048640();
    sub_10000DA68((uint64_t)v24, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_100048738();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(40LL, 1LL);
  v19._object = (void *)0x800000010016FD30LL;
  v19._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v19);
  uint64_t v27 = &type metadata for Double;
  *(double *)uint64_t v26 = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
  sub_10000DA68((uint64_t)v26, &qword_1001CAAD0);
  sub_10000DC4C(41LL);
  uint64_t v20 = sub_10000DC5C();
  uint64_t v21 = static os_log_type_t.info.getter(v20);
  sub_1000486E4(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_10000DDDC((uint64_t)&unk_1001ABDC8, 32LL);
  *(double *)(v22 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v22 + 24) = v5;
  JSStack.withUnsafeContext(_:)(sub_100080E3C, v22);
  return sub_100037230();
}

uint64_t sub_10008089C(void *a1, double a2)
{
  JSContextGroupRef Group = JSContextGetGroup((JSContextRef)[a1 JSGlobalContextRef]);
  return JSContextGroupSetExecutionTimeLimit(Group, sub_100080B88, 0LL, a2 + 2.0);
}

uint64_t sub_1000808DC()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = type metadata accessor for LogMessage(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v6 = type metadata accessor for JSAppEngine();
  uint64_t v30 = sub_10000D33C(&qword_1001CB418);
  v29[0] = v6;
  id v7 = (id)AMSLogKey(v30);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v12._uint64_t countAndFlagsBits = 0LL;
    v12._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    uint64_t v13 = v30;
    uint64_t v14 = sub_10000D37C(v29, v30);
    uint64_t DynamicType = swift_getDynamicType(v14, v13, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v27[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v27);
    sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
    v16._uint64_t countAndFlagsBits = 5972026LL;
    v16._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t MetatypeMetadata = &type metadata for String;
    v27[0] = v9;
    v27[1] = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v27);
    sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
    v17._uint64_t countAndFlagsBits = 93LL;
    v17._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)(v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v30;
    uint64_t v20 = sub_10000D37C(v29, v30);
    uint64_t v21 = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
    v27[0] = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v27);
    sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
    v22._uint64_t countAndFlagsBits = 58LL;
    v22._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    LogMessage.init(stringInterpolation:)(v2);
  }

  sub_10000D3A0(v29);
  uint64_t v23 = LogMessage.init(stringLiteral:)(0xD00000000000002BLL);
  uint64_t v25 = static os_log_type_t.fault.getter(v23, v24);
  sub_1000BD1B0(v25, v5);
  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t sub_100080B88()
{
  return sub_1000808DC() & 1;
}

uint64_t sub_100080BA0(void *a1)
{
  JSContextGroupRef Group = JSContextGetGroup((JSContextRef)[a1 JSGlobalContextRef]);
  return JSContextGroupClearExecutionTimeLimit(Group);
}

void sub_100080BC0()
{
  uint64_t v3 = *(void *)(v0 + 96);
  if (v3)
  {
    uint64_t v4 = type metadata accessor for JSStack(0LL);
    uint64_t v5 = type metadata accessor for BaseObjectGraph(0LL);
    swift_retain(v3);
    inject<A, B>(_:from:)(v26, v4, v3, v4, v5);
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100067688();
    uint64_t v9 = swift_allocObject(v6, (v8 & ~v7) + 2 * v1, v7 | 7);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v27 = type metadata accessor for JSAppEngine();
    v26[0] = v0;
    uint64_t v10 = swift_retain(v0);
    id v11 = (id)AMSLogKey(v10);
    if (v11)
    {
      Swift::String v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      swift_bridgeObjectRetain(v15);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v16 = v27;
      Swift::String v17 = sub_10000D37C(v26, v27);
      uint64_t v18 = sub_10000DC54((uint64_t)v17, v16);
      swift_getMetatypeMetadata(v18);
      sub_10000DEA4();
      sub_100081A04();
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      v24[0] = v13;
      v24[1] = v15;
      sub_10000DEA4();
      sub_100081A04();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v19 = v27;
      uint64_t v20 = sub_10000D37C(v26, v27);
      uint64_t v21 = sub_10000DC54((uint64_t)v20, v19);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
      v24[0] = v21;
      sub_10000DEA4();
      sub_10000DA68((uint64_t)v24, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v26);
    uint64_t v22 = sub_10000DD38(29LL);
    uint64_t v23 = static os_log_type_t.debug.getter(v22);
    sub_1000BD1B0(v23, v9);
    swift_bridgeObjectRelease();
    JSStack.requestGarbageCollection()();
    swift_release(v3);
    sub_100037230();
  }

uint64_t sub_100080E2C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100080E3C(void *a1)
{
  return sub_10008089C(a1, *(double *)(v1 + 16));
}

uint64_t sub_100080E48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB420);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100080E90()
{
  return sub_100081690((void (*)(void))&_swift_bridgeObjectRelease);
}

id sub_100080E9C(uint64_t a1)
{
  return sub_10007FD98(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100080EA8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100080ECC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100080F04()
{
  return sub_100081690((void (*)(void))&_swift_bridgeObjectRelease);
}

id sub_100080F10(uint64_t a1)
{
  return sub_10007FE20(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100080F1C()
{
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_bridgeObjectRelease();
  sub_100051B30();
  swift_release(*(void *)(v0 + v3));
  return swift_deallocObject(v0, v4, v1);
}

uint64_t sub_100080F84(uint64_t *a1, uint64_t a2)
{
  return sub_10007FEE0(a1, a2, v7, v8, v2 + v5, *(void *)(v2 + v6));
}

uint64_t sub_100080FD0(uint64_t a1, void (*a2)(uint64_t *, void))
{
  uint64_t v5 = a1;
  uint64_t v6 = a1;
  swift_retain(a1);
  a2(&v5, 0LL);
  swift_release(a1);
  return Promise.resolve(_:)(&v6);
}

uint64_t sub_100081030(uint64_t a1, void (*a2)(char *, void))
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB470);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSResponse(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  sub_10000D5C0((uint64_t)v6, 0LL, 1LL, v7);
  a2(v6, 0LL);
  sub_10000DA68((uint64_t)v6, &qword_1001CB470);
  return Promise.resolve(_:)(a1);
}

uint64_t sub_10008110C(uint64_t a1, void (*a2)(uint64_t *, uint64_t))
{
  uint64_t v4 = 0LL;
  a2(&v4, a1);
  return Promise.reject(_:)(a1);
}

uint64_t sub_100081160(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB470);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for JSResponse(0LL);
  sub_10000D5C0((uint64_t)v6, 1LL, 1LL, v7);
  a2(v6, a1);
  sub_10000DA68((uint64_t)v6, &qword_1001CB470);
  return Promise.reject(_:)(a1);
}

uint64_t sub_100081218(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100081290(uint64_t *a1, void (*a2)(uint64_t *, void))
{
  return sub_100080FD0(*a1, a2);
}

uint64_t sub_100081298()
{
  return sub_100081690((void (*)(void))&_swift_release);
}

uint64_t sub_1000812A4(uint64_t *a1)
{
  return sub_100081290(a1, *(void (**)(uint64_t *, void))(v1 + 16));
}

uint64_t sub_1000812B0()
{
  return sub_100081690((void (*)(void))&_swift_release);
}

uint64_t sub_1000812BC(uint64_t a1)
{
  return sub_10008110C(a1, *(void (**)(uint64_t *, uint64_t))(v1 + 16));
}

uint64_t sub_1000812C8()
{
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_100081318(uint64_t *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_100081994() - 8) + 80LL);
  return sub_10007D848( a1,  *(void *)(v1 + 16),  *(NSString *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  v1 + ((v3 + 56) & ~v3));
}

uint64_t sub_10008135C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100081380()
{
  uint64_t v3 = (v2 & 0xFFFFFFFFFFFFFFF8LL) + 8;
  sub_1000675F8();
  swift_bridgeObjectRelease();
  sub_100051B30();
  return sub_100051AA4(v0, v3, v1);
}

uint64_t sub_1000813D0(uint64_t a1, uint64_t a2)
{
  return sub_10007DECC(a1, a2, v7, v8, *(void *)(v2 + 32), v2 + v5, *(void *)(v2 + v6));
}

uint64_t sub_100081420(uint64_t a1, uint64_t a2, void *a3)
{
  v9[3] = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  v9[4] = &protocol witness table for OS_dispatch_queue;
  v9[0] = a3;
  uint64_t v6 = Promise.__allocating_init()(a3);
  uint64_t v7 = (void *)swift_allocObject(&unk_1001ABF80, 40LL, 7LL);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  swift_retain_n(v6, 2LL);
  swift_retain(a2);
  Promise.then(perform:orCatchError:on:)(sub_100081654, v6, sub_100081660, v7, v9);
  swift_release(v6);
  swift_release(v7);
  sub_10000D3A0(v9);
  return v6;
}

uint64_t sub_10008150C(uint64_t a1, uint64_t a2, void *a3)
{
  v9[3] = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  v9[4] = &protocol witness table for OS_dispatch_queue;
  v9[0] = a3;
  sub_10000D33C(&qword_1001CB450);
  uint64_t v6 = Promise.__allocating_init()(a3);
  uint64_t v7 = (void *)swift_allocObject(&unk_1001ABF58, 40LL, 7LL);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  swift_retain_n(v6, 2LL);
  swift_retain(a2);
  Promise.then(perform:orCatchError:on:)(sub_10008160C, v7, j___s9JetEngine7PromiseC6rejectyys5Error_pF, v6, v9);
  swift_release(v7);
  swift_release(v6);
  sub_10000D3A0(v9);
  return v6;
}

uint64_t sub_10008160C(uint64_t a1)
{
  return sub_100081218(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

unint64_t sub_100081618()
{
  unint64_t result = qword_1001CB460;
  if (!qword_1001CB460)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166614, &type metadata for JSAppEngineError);
    atomic_store(result, (unint64_t *)&qword_1001CB460);
  }

  return result;
}

void sub_100081654(uint64_t a1)
{
}

uint64_t sub_100081660(uint64_t a1)
{
  return sub_1000630C4(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10008166C()
{
  return sub_100081690((void (*)(void))&_swift_release);
}

uint64_t sub_100081678(uint64_t a1)
{
  return sub_100081030(a1, *(void (**)(char *, void))(v1 + 16));
}

uint64_t sub_100081684()
{
  return sub_100081690((void (*)(void))&_swift_release);
}

uint64_t sub_100081690(void (*a1)(void))
{
  return swift_deallocObject(v1, 40LL, 7LL);
}

uint64_t sub_1000816BC(uint64_t a1)
{
  return sub_100081160(a1, *(void (**)(char *, uint64_t))(v1 + 16));
}

uint64_t sub_1000816C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB470);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100081710()
{
  return sub_100051AA4(v0, v1, v2);
}

void sub_100081750()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100081994() - 8) + 80LL);
  JSStack.performRequest(_:)(v0 + ((v1 + 24) & ~v1));
  sub_100009044();
}

uint64_t sub_100081788()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000817B0()
{
  return JSStack.withUnsafeContext(_:)(sub_100080BA0, 0LL);
}

uint64_t sub_1000817E0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100081804()
{
  return sub_10007F600(*(void *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_100081810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100081820(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100081828(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_10000D820(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100009044();
}

uint64_t storeEnumTagSinglePayload for JSAppEngineError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000818A4 + 4 * asc_100166510[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000818C4 + 4 * byte_100166515[v4]))();
  }
}

_BYTE *sub_1000818A4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000818C4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000818CC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000818D4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000818DC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000818E4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JSAppEngineError()
{
  return &type metadata for JSAppEngineError;
}

unint64_t sub_100081904()
{
  unint64_t result = qword_1001CB478;
  if (!qword_1001CB478)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001665EC, &type metadata for JSAppEngineError);
    atomic_store(result, (unint64_t *)&qword_1001CB478);
  }

  return result;
}

uint64_t sub_100081940()
{
  return AsyncObjectGraphBuilder.withDependenciesSatisfied.getter(v0, v1);
}

  ;
}

  ;
}

uint64_t sub_100081980(uint64_t a1, uint64_t a2)
{
  return AsyncObjectGraphBuilder.satisfying<A>(_:with:)(a1, a2, v2, a1, v3);
}

uint64_t sub_100081994()
{
  return type metadata accessor for JSRequest(0LL);
}

  ;
}

uint64_t sub_1000819B8()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000819C8(uint64_t a1)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 168) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 168);
}

void sub_1000819D8(uint64_t a1)
{
}

  ;
}

void sub_1000819F8()
{
}

void sub_100081A04()
{
}

void sub_100081A10()
{
}

uint64_t sub_100081A1C(uint64_t a1, uint64_t a2)
{
  return sub_10000D5C0(a1, a2, 1LL, v2);
}

uint64_t sub_100081A28()
{
  return v1(v0, v2);
}

uint64_t sub_100081A34()
{
  return v1(v2, v0);
}

void sub_100081A40()
{
}

uint64_t sub_100081A4C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for JSAppEngine();
}

  ;
}

  ;
}

uint64_t sub_100081A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_100083BE0();
  uint64_t v10 = (void *)static JSContext.requiredCurrent.getter();
  v13[2] = v5;
  v13[3] = a1;
  v13[4] = a4;
  v13[5] = a3;
  v13[6] = a2;
  uint64_t v11 = JSContext.propagateErrorsToExceptions(_:)(sub_100083C1C, v13);

  return v11;
}

void *sub_100081B00(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  Swift::String v61 = a4;
  uint64_t v56 = a3;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v13 = static RunLoopWorkerThread.current.getter();
  if (v13)
  {
    uint64_t v14 = v13;
    Swift::String v55 = a5;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v54 = qword_1001DBB30;
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v17 = *(void *)(v16 + 72);
    uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v53 = v17;
    uint64_t v19 = swift_allocObject(v15, ((v18 + 32) & ~v18) + 2 * v17, v18 | 7);
    *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v60 = type metadata accessor for JSBacklog();
    v59[0] = a2;
    id v20 = a2;
    id v21 = (id)AMSLogKey(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      id v51 = v20;
      uint64_t v52 = a1;
      uint64_t v24 = v23;
      uint64_t v26 = v25;

      swift_bridgeObjectRetain(v26);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v27._uint64_t countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      uint64_t v28 = v60;
      uint64_t v29 = sub_10000D37C(v59, v60);
      uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v57[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v31._uint64_t countAndFlagsBits = 5972026LL;
      v31._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t MetatypeMetadata = &type metadata for String;
      v57[0] = v24;
      v57[1] = v26;
      a1 = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v32._uint64_t countAndFlagsBits = 93LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v12);
      id v20 = v51;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t v35 = v60;
      Swift::String v36 = sub_10000D37C(v59, v60);
      uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
      v57[0] = v37;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v38._uint64_t countAndFlagsBits = 58LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v12);
    }

    sub_10000D3A0(v59);
    uint64_t v39 = LogMessage.init(stringLiteral:)(0xD000000000000019LL);
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    sub_1000BD1B0(v40, v19);
    swift_bridgeObjectRelease();
    sub_100083BE0();
    uint64_t v41 = swift_allocObject(&unk_1001AC1B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v41 + 16, v20);
    uint64_t v42 = (void *)swift_allocObject(&unk_1001AC1D8, 64LL, 7LL);
    v42[2] = v41;
    void v42[3] = v14;
    id v44 = v55;
    uint64_t v43 = v56;
    uint64_t v45 = v61;
    v42[4] = v56;
    v42[5] = v45;
    v42[6] = v44;
    v42[7] = a6;
    swift_retain(v41);
    swift_retain(v14);
    id v46 = v43;
    id v47 = v45;
    id v48 = v44;
    id v49 = a6;
    a2 = (void *)sub_10008C048(a1, (uint64_t)sub_100083CAC, (uint64_t)v42);
    swift_release(v14);
    swift_release(v41);
    swift_release(v42);
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000002DLL, 0x800000010016FF30LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return a2;
}

void sub_100081F04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v73 = a8;
  uint64_t v72 = a7;
  uint64_t v71 = a2;
  uint64_t v14 = type metadata accessor for JSCallable(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  a4 += 16LL;
  swift_beginAccess(a4, v80, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v76 = v16;
    uint64_t v77 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v74 = a3;
    uint64_t v75 = v14;
    uint64_t v78 = a5;
    uint64_t v18 = Strong;
    type metadata accessor for AppDatabase();
    __int128 v85 = (void *)v18;
    uint64_t v19 = sub_100023140(*(unsigned __int8 *)(v18 + OBJC_IVAR____TtC14amsengagementd9JSBacklog_config + 1), 0);
    if (v9)
    {
      uint64_t v20 = v75;
      uint64_t v22 = v76;
      id v21 = v77;
      uint64_t v23 = v15;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v77, v74, v75);
      uint64_t v47 = *(unsigned __int8 *)(v15 + 80);
      uint64_t v48 = (v47 + 32) & ~v47;
      uint64_t v49 = swift_allocObject(&unk_1001AC228, v48 + v22, v47 | 7);
      uint64_t v50 = v85;
      *(void *)(v49 + swift_weakDestroy(v0 + 16) = v85;
      *(void *)(v49 + 24) = v9;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v49 + v48, v21, v20);
      id v51 = v50;
      swift_errorRetain(v9);
      dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100083DA8, v49);
      swift_errorRelease(v9);
      swift_release(v49);
    }

    else
    {
      uint64_t v27 = v19;
      sub_10008AA34(a6);
      uint64_t v29 = v15;
      uint64_t v70 = v27;
      if (v28 && (sub_1000BDF2C(v28), uint64_t v31 = v30, swift_bridgeObjectRelease(), v31))
      {
        sub_1000827C0((uint64_t)v81);
        uint64_t v32 = v81[0];
        uint64_t v33 = v81[1];
        uint64_t v34 = v81[2];
        uint64_t v35 = v81[3];
        int v36 = v82;
      }

      else
      {
        uint64_t v32 = 0LL;
        uint64_t v33 = 0LL;
        uint64_t v34 = 0LL;
        uint64_t v35 = 0LL;
        int v36 = 255;
      }

      uint64_t v66 = v35;
      uint64_t v68 = v33;
      int v65 = v36;
      uint64_t v67 = v34;
      uint64_t v64 = v32;
      v83[0] = v32;
      v83[1] = v33;
      v83[2] = v34;
      v83[3] = v35;
      char v84 = v36;
      uint64_t v37 = swift_allocObject(&unk_1001AC250, 24LL, 7LL);
      *(void *)(v37 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
      uint64_t v63 = v37 + 16;
      uint64_t v72 = JSValue.int.getter(v37);
      int v69 = v38 & 1;
      uint64_t v39 = (void *)swift_allocObject(&unk_1001AC278, 48LL, 7LL);
      uint64_t v40 = v73;
      v39[2] = v37;
      v39[3] = v40;
      uint64_t v41 = v85;
      v39[4] = a9;
      v39[5] = v41;
      id v42 = v40;
      id v43 = a9;
      id v44 = v41;
      sub_100022F94();
      uint64_t v46 = v45;
      sub_10001AC68((uint64_t)v83, v72, v69, (uint64_t)sub_100083E34, (uint64_t)v39);
      swift_retain(v37);
      swift_release(v39);
      swift_release(v46);
      swift_beginAccess(v63, v79, 0LL, 0LL);
      uint64_t v52 = v37;
      uint64_t v53 = *(void *)(v37 + 16);
      if (*(void *)(v53 + 16))
      {
        uint64_t v54 = sub_10000D33C(&qword_1001C8F70);
        uint64_t v55 = swift_allocObject(v54, 64LL, 7LL);
        *(_OWORD *)(v55 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
        *(void *)(v55 + 56) = sub_10000D33C(&qword_1001CA898);
        *(void *)(v55 + 32) = v53;
        swift_bridgeObjectRetain(v53);
      }

      uint64_t v56 = v77;
      uint64_t v57 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v77, v71, v75);
      uint64_t v58 = *(unsigned __int8 *)(v29 + 80);
      uint64_t v59 = (v58 + 24) & ~v58;
      uint64_t v60 = swift_allocObject(&unk_1001AC2A0, v59 + v76, v58 | 7);
      *(void *)(v60 + swift_weakDestroy(v0 + 16) = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v60 + v59, v56, v57);
      id v61 = v44;
      dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100083F04, v60);
      sub_10001BC80(v64, v68, v67, v66, v65);
      swift_release(v52);

      swift_release(v70);
      swift_release(v60);
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))( (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a3,  v14);
    uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v25 = (v24 + 16) & ~v24;
    uint64_t v26 = swift_allocObject(&unk_1001AC200, v25 + v16, v24 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))( v26 + v25,  (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v14);
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100083D34, v26);
    swift_release(v26);
  }

uint64_t sub_100082468()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = type metadata accessor for LogMessage(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v6 = type metadata accessor for JSBacklog();
  uint64_t v33 = sub_10000D33C(&qword_1001CB4D0);
  v32[0] = v6;
  id v7 = (id)AMSLogKey(v33);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v12._uint64_t countAndFlagsBits = 0LL;
    v12._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    uint64_t v13 = v33;
    uint64_t v14 = sub_10000D37C(v32, v33);
    uint64_t DynamicType = swift_getDynamicType(v14, v13, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v30[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v16._uint64_t countAndFlagsBits = 5972026LL;
    v16._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t MetatypeMetadata = &type metadata for String;
    v30[0] = v9;
    v30[1] = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v17._uint64_t countAndFlagsBits = 93LL;
    v17._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)(v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v33;
    uint64_t v20 = sub_10000D37C(v32, v33);
    uint64_t v21 = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
    v30[0] = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v22._uint64_t countAndFlagsBits = 58LL;
    v22._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    LogMessage.init(stringInterpolation:)(v2);
  }

  sub_10000D3A0(v32);
  uint64_t v23 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
  uint64_t v24 = static os_log_type_t.error.getter(v23);
  sub_1000BD1B0(v24, v5);
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v26 = swift_allocObject(v25, 64LL, 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  type metadata accessor for JSError();
  id v27 = sub_10008F29C(0LL, 0x462070756B6F6F4CLL, 0xED000064656C6961LL, 0x6E617620666C6553LL, 0xED00006465687369LL);
  uint64_t v28 = sub_10008F4BC();

  *(void *)(v26 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v26 + 32) = v28;
  sub_1000854E4(v26);
  return swift_bridgeObjectRelease();
}

void sub_1000827C0(uint64_t a1@<X8>)
{
  if (!v171)
  {
    uint64_t v11 = sub_100009070();
    sub_1000841B8(v11, v12);
LABEL_11:
    unint64_t v13 = sub_100083F30();
    uint64_t v14 = sub_100020C48((uint64_t)&type metadata for AppBacklogPredicateError, v13);
    *(void *)uint64_t v15 = 0LL;
    *(void *)(v15 + 8) = 0LL;
    char v16 = 2;
    goto LABEL_12;
  }

  if ((sub_100084158(v3, v4, v5, (uint64_t)&type metadata for String, v6, v7, v8, v9, v146, v160, v170) & 1) == 0)
  {
    sub_100009070();
    goto LABEL_11;
  }

  BOOL v10 = v147 == 6581857 && v161 == 0xE300000000000000LL;
  if (!v10 && (sub_10008416C(6581857LL, 0xE300000000000000LL) & 1) == 0)
  {
    BOOL v34 = v147 == 7368801 && v161 == 0xE300000000000000LL;
    if (v34 || (sub_10008416C(7368801LL, 0xE300000000000000LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_100084198(7368801LL, 0xE300000000000000LL, &v170);
      uint64_t v35 = sub_100009070();
      if (v171)
      {
        if ((sub_100084158(v35, v36, v37, (uint64_t)&type metadata for String, v38, v39, v40, v41, v147, v161, v170) & 1) != 0)
        {
          uint64_t v42 = 0LL;
          uint64_t v43 = 0LL;
          uint64_t v27 = v149;
          uint64_t v26 = v162;
          char v44 = 1;
          goto LABEL_32;
        }
      }

      else
      {
        sub_1000841B8(v35, v36);
      }

      unint64_t v46 = sub_100083F30();
      uint64_t v14 = sub_100020C48((uint64_t)&type metadata for AppBacklogPredicateError, v46);
      __int128 v48 = xmmword_1001666A0;
LABEL_87:
      *(_OWORD *)uint64_t v47 = v48;
      *(_BYTE *)(v47 + swift_weakDestroy(v0 + 16) = 0;
      goto LABEL_88;
    }

    BOOL v49 = v147 == 0x5472657461657267LL && v161 == 0xEB000000006E6168LL;
    if (v49 || (sub_10008416C(0x5472657461657267LL, 0xEB000000006E6168LL) & 1) != 0)
    {
      uint64_t v50 = swift_bridgeObjectRelease();
      sub_10008417C(v50, v51, v52, v53, v54, v55, v56, v57, v147, v161, v170);
      if (v171)
      {
        if ((sub_100084158(v58, v59, v60, (uint64_t)&type metadata for String, v61, v62, v63, v64, v150, v163, v170) & 1) != 0)
        {
          uint64_t v27 = v151;
          uint64_t v26 = v164;
          sub_100084198(0x65756C6176LL, 0xE500000000000000LL, &v170);
          uint64_t v65 = sub_100009070();
          if (v171)
          {
            if ((sub_100084158(v65, v66, v67, (uint64_t)&type metadata for Double, v68, v69, v70, v71, v151, v164, v170) & 1) != 0)
            {
              uint64_t v43 = 0LL;
              uint64_t v42 = v152;
              char v44 = 2;
              goto LABEL_32;
            }

            goto LABEL_56;
          }

          goto LABEL_55;
        }

        goto LABEL_69;
      }

      goto LABEL_68;
    }

    BOOL v72 = v147 == 0x6E6168547373656CLL && v161 == 0xE800000000000000LL;
    if (v72 || (sub_10008416C(0x6E6168547373656CLL, 0xE800000000000000LL) & 1) != 0)
    {
      uint64_t v73 = swift_bridgeObjectRelease();
      sub_10008417C(v73, v74, v75, v76, v77, v78, v79, v80, v147, v161, v170);
      if (v171)
      {
        if ((sub_100084158(v81, v82, v83, (uint64_t)&type metadata for String, v84, v85, v86, v87, v153, v165, v170) & 1) != 0)
        {
          uint64_t v27 = v154;
          uint64_t v26 = v166;
          sub_100084198(0x65756C6176LL, 0xE500000000000000LL, &v170);
          uint64_t v88 = sub_100009070();
          if (v171)
          {
            if ((sub_100084158(v88, v89, v90, (uint64_t)&type metadata for Double, v91, v92, v93, v94, v154, v166, v170) & 1) != 0)
            {
              uint64_t v43 = 0LL;
              uint64_t v42 = v155;
              char v44 = 3;
              goto LABEL_32;
            }

LABEL_56:
            sub_10000DDF8();
            goto LABEL_57;
          }

  __break(1u);
}

LABEL_69:
        sub_100009070();
        goto LABEL_70;
      }

LABEL_68:
      uint64_t v121 = sub_100009070();
      sub_1000841B8(v121, v122);
LABEL_70:
      unint64_t v123 = sub_100083F30();
      uint64_t v14 = sub_100020C48((uint64_t)&type metadata for AppBacklogPredicateError, v123);
      __int128 v48 = xmmword_100166680;
      goto LABEL_87;
    }

    BOOL v124 = v147 == 29295 && v161 == 0xE200000000000000LL;
    if (v124 || (sub_10008416C(29295LL, 0xE200000000000000LL) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_100084198(0x6F697469646E6F63LL, 0xEA0000000000736ELL, &v170);
      uint64_t v17 = sub_100009070();
      if (!v171) {
        goto LABEL_85;
      }
      uint64_t v125 = sub_10000D33C(&qword_1001CB4C0);
      if ((sub_100084158(v125, v126, v127, v125, v128, v129, v130, v131, v147, v161, v170) & 1) == 0) {
        goto LABEL_86;
      }
      uint64_t v26 = v159;
      uint64_t v27 = *(void *)(v159 + 16);
      if (v27)
      {
        sub_1000841C8();
        uint64_t v132 = 0LL;
        uint64_t v29 = (void *)v170;
        while (1)
        {
          sub_1000841E0();
          sub_1000841F4();
          if (v1) {
            goto LABEL_89;
          }
          sub_100020AB8();
          *(void *)&__int128 v170 = v29;
          unint64_t v133 = v29[2];
          unint64_t v134 = v133 + 1;
          if (v133 >= v29[3] >> 1)
          {
            BOOL v135 = sub_100084214();
            unint64_t v137 = v136;
            sub_100017154((char *)v135, v138, v139);
            unint64_t v133 = v137;
            uint64_t v29 = (void *)v170;
          }

          ++v132;
          void v29[2] = v134;
          sub_10001BBF4(&v173, (uint64_t)&v29[5 * v133 + 4]);
          if (v27 == v132)
          {
            sub_10000DDF8();
            goto LABEL_95;
          }
        }
      }

      sub_10000DDF8();
      uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_95:
      sub_100020AF8((uint64_t)&unk_1001AC2C8);
      sub_100084200();
      *(void *)(v145 + swift_weakDestroy(v0 + 16) = v29;
      char v44 = 5;
LABEL_32:
      *(void *)a1 = v27;
      *(void *)(a1 + 8) = v26;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v42;
      *(void *)(a1 + 24) = v43;
      *(_BYTE *)(a1 + 32) = v44;
      return;
    }

    sub_100009070();
    unint64_t v144 = sub_100083F30();
    uint64_t v14 = sub_100020C48((uint64_t)&type metadata for AppBacklogPredicateError, v144);
    *(void *)uint64_t v15 = v147;
    *(void *)(v15 + 8) = v161;
    char v16 = 1;
LABEL_12:
    *(_BYTE *)(v15 + swift_weakDestroy(v0 + 16) = v16;
LABEL_88:
    swift_willThrow(v14);
    return;
  }

  swift_bridgeObjectRelease();
  sub_100084198(0x6F697469646E6F63LL, 0xEA0000000000736ELL, &v170);
  uint64_t v17 = sub_100009070();
  if (!v171)
  {
LABEL_85:
    sub_1000841B8(v17, v18);
    goto LABEL_86;
  }

  uint64_t v19 = sub_10000D33C(&qword_1001CB4C0);
  if ((sub_100084158(v19, v20, v21, v19, v22, v23, v24, v25, v147, v161, v170) & 1) == 0)
  {
LABEL_86:
    unint64_t v140 = sub_100083F30();
    uint64_t v14 = sub_100020C48((uint64_t)&type metadata for AppBacklogPredicateError, v140);
    __int128 v48 = xmmword_100166660;
    goto LABEL_87;
  }

  uint64_t v26 = v148;
  uint64_t v27 = *(void *)(v148 + 16);
  if (!v27)
  {
    sub_10000DDF8();
    uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_31:
    sub_100020AF8((uint64_t)&unk_1001AC2C8);
    sub_100084200();
    char v44 = 0;
    *(void *)(v45 + swift_weakDestroy(v0 + 16) = v29;
    goto LABEL_32;
  }

  sub_1000841C8();
  uint64_t v28 = 0LL;
  uint64_t v29 = (void *)v170;
  while (1)
  {
    sub_1000841E0();
    sub_1000841F4();
    if (v1) {
      break;
    }
    sub_100020AB8();
    *(void *)&__int128 v170 = v29;
    unint64_t v30 = v29[2];
    if (v30 >= v29[3] >> 1)
    {
      BOOL v31 = sub_100084214();
      sub_100017154((char *)v31, v32, v33);
      uint64_t v29 = (void *)v170;
    }

    ++v28;
    void v29[2] = v30 + 1;
    sub_10001BBF4(&v172, (uint64_t)&v29[5 * v30 + 4]);
    if (v27 == v28)
    {
      sub_10000DDF8();
      goto LABEL_31;
    }
  }

LABEL_89:
  sub_10000DDF8();
  swift_release(v29);
  sub_100020AB8();
}

id sub_100082EC8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  BOOL v10 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v68[0] = 0LL;
  id v13 = [v11 JSONObjectWithData:isa options:0 error:v68];

  id v14 = v68[0];
  if (!v13)
  {
    id v32 = v68[0];
    uint64_t v33 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v34);
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    char v35 = qword_1001DBB30;
    uint64_t v36 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v37 = type metadata accessor for LogMessage(0LL);
    uint64_t v38 = swift_allocObject( v36,  ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v37 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v69 = type metadata accessor for JSBacklog();
    v68[0] = a5;
    id v39 = (id)AMSLogKey(a5);
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v43 = v42;

      swift_bridgeObjectRetain(v43);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v44._uint64_t countAndFlagsBits = 0LL;
      v44._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      uint64_t v45 = v69;
      unint64_t v46 = sub_10000D37C(v68, v69);
      uint64_t DynamicType = swift_getDynamicType(v46, v45, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v66[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v66);
      sub_10000E888((uint64_t)v66);
      v48._uint64_t countAndFlagsBits = 5972026LL;
      v48._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      uint64_t MetatypeMetadata = &type metadata for String;
      v66[0] = v41;
      v66[1] = v43;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v66);
      sub_10000E888((uint64_t)v66);
      v49._uint64_t countAndFlagsBits = 93LL;
      v49._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      LogMessage.init(stringInterpolation:)(v10);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v50._uint64_t countAndFlagsBits = 0LL;
      v50._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v50);
      uint64_t v51 = v69;
      uint64_t v52 = sub_10000D37C(v68, v69);
      uint64_t v53 = swift_getDynamicType(v52, v51, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v53);
      v66[0] = v53;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v66);
      sub_10000E888((uint64_t)v66);
      v54._uint64_t countAndFlagsBits = 58LL;
      v54._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      LogMessage.init(stringInterpolation:)(v10);
    }

    sub_10000D3A0(v68);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(53LL, 1LL);
    v55._object = (void *)0x800000010016FFA0LL;
    v55._uint64_t countAndFlagsBits = 0xD000000000000034LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v55);
    swift_getErrorValue(v33, v65);
    uint64_t v56 = v63[1];
    uint64_t v57 = v64;
    uint64_t v69 = v64;
    uint64_t v58 = sub_10000D63C(v68);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16LL))(v58, v56, v57);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v68);
    sub_10000E888((uint64_t)v68);
    v59._uint64_t countAndFlagsBits = 41LL;
    v59._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    uint64_t v60 = LogMessage.init(stringInterpolation:)(v10);
    uint64_t v61 = static os_log_type_t.error.getter(v60);
    char v31 = v35;
    sub_1000BD1B0(v61, v38);
    uint64_t v62 = swift_bridgeObjectRelease();
    swift_willThrow(v62);
    return (id)(v31 & 1);
  }

  id v15 = v68[0];
  _bridgeAnyObjectToAny(_:)(v13);
  swift_unknownObjectRelease(v13);
  uint64_t v16 = sub_10000D33C(&qword_1001C8E58);
  if ((swift_dynamicCast(v66, v68, (char *)&type metadata for Any + 8, v16, 6LL) & 1) == 0)
  {
    char v31 = 0;
    return (id)(v31 & 1);
  }

  uint64_t v17 = (uint64_t *)(a2 + 16);
  uint64_t v18 = v66[0];
  swift_beginAccess(v17, v68, 33LL, 0LL);
  sub_100063E98();
  uint64_t v19 = *(void *)(*v17 + 16);
  sub_100063F44(v19);
  uint64_t v20 = *v17;
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v19 + 1;
  *(void *)(v20 + 8 * v19 + 32) = v18;
  uint64_t v21 = swift_endAccess(v68);
  uint64_t v22 = JSValue.int.getter(v21);
  if ((v23 & 1) != 0 || (uint64_t v24 = v22, swift_beginAccess(v17, v68, 0LL, 0LL), v25 = *v17, *(void *)(*v17 + 16) != v24))
  {
    char v31 = 1;
    return (id)(v31 & 1);
  }

  uint64_t v26 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v27 = swift_allocObject(v26, 64LL, 7LL);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v27 + 56) = sub_10000D33C(&qword_1001CA898);
  *(void *)(v27 + 32) = v25;
  swift_bridgeObjectRetain(v25);
  id result = sub_100083E54(v27, a4);
  if (result)
  {
    uint64_t v29 = result;
    char v30 = JSValue.BOOL.getter();

    char v31 = v30 & 1;
    swift_beginAccess(v17, v66, 1LL, 0LL);
    *uint64_t v17 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    return (id)(v31 & 1);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000833FC(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v33 = type metadata accessor for JSBacklog();
  v32[0] = a1;
  id v8 = (id)AMSLogKey(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v14 = v33;
    id v15 = sub_10000D37C(v32, v33);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v30[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v17._uint64_t countAndFlagsBits = 5972026LL;
    v17._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t MetatypeMetadata = &type metadata for String;
    v30[0] = v10;
    v30[1] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v33;
    uint64_t v21 = sub_10000D37C(v32, v33);
    uint64_t v22 = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    v30[0] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v30);
    sub_10000E888((uint64_t)v30);
    v23._uint64_t countAndFlagsBits = 58LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v32);
  uint64_t v24 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_1000BD1B0(v25, v7);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v27 = swift_allocObject(v26, 64LL, 7LL);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)( &off_1001A7378,  &type metadata for String,  &type metadata for Bool,  &protocol witness table for String);
  *(void *)(v27 + 56) = sub_10000D33C(&qword_1001CB4C8);
  *(void *)(v27 + 32) = v28;
  sub_1000854E4(v27);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100083708(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v45 = type metadata accessor for JSBacklog();
  v44[0] = a1;
  id v10 = (id)AMSLogKey(a1);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v45;
    Swift::String v17 = sub_10000D37C(v44, v45);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v42[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t MetatypeMetadata = &type metadata for String;
    v42[0] = v12;
    v42[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v45;
    Swift::String v23 = sub_10000D37C(v44, v45);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v42[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v44);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(46LL, 1LL);
  v26._object = (void *)0x800000010016FFE0LL;
  v26._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  swift_getErrorValue(a2, v41);
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v45 = v40;
  uint64_t v29 = sub_10000D63C(v44);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v29, v27, v28);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
  sub_10000E888((uint64_t)v44);
  v30._uint64_t countAndFlagsBits = 41LL;
  v30._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t v31 = LogMessage.init(stringInterpolation:)(v6);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  sub_1000BD1B0(v32, v9);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v34 = swift_allocObject(v33, 64LL, 7LL);
  *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  id v35 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a2);
  id v36 = sub_10008F674(a2);
  uint64_t v37 = sub_10008F4BC();

  *(void *)(v34 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v34 + 32) = v37;
  sub_1000854E4(v34);
  return swift_bridgeObjectRelease();
}

void sub_100083B1C()
{
}

id sub_100083B54()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSBacklog();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSBacklog()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSBacklog);
}

unint64_t sub_100083BE0()
{
  unint64_t result = qword_1001CB4B0;
  if (!qword_1001CB4B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___JSContext);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CB4B0);
  }

  return result;
}

void *sub_100083C1C(void *a1)
{
  return sub_100081B00(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100083C3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100083C60()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100083CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100083CD8()
{
  uint64_t v1 = sub_1000841C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100083D34()
{
  return sub_100082468();
}

uint64_t sub_100083D5C()
{
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_100083DA8()
{
  return sub_100083708(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100083DD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100083DF8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

unint64_t sub_100083E34(uint64_t a1)
{
  return (unint64_t)sub_100082EC8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(void **)(v1 + 40)) & 1;
}

id sub_100083E54(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v5 = [a2 callWithArguments:isa];

  return v5;
}

uint64_t sub_100083EC0()
{
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_100083F04()
{
  return sub_1000833FC(*(void **)(v0 + 16));
}

unint64_t sub_100083F30()
{
  unint64_t result = qword_1001CB4B8;
  if (!qword_1001CB4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001666DC, &type metadata for AppBacklogPredicateError);
    atomic_store(result, (unint64_t *)&qword_1001CB4B8);
  }

  return result;
}

uint64_t sub_100083F70(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t destroy for AppBacklogPredicateError(uint64_t a1)
{
  return sub_100083F98(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100083F98(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t _s14amsengagementd24AppBacklogPredicateErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100083F70(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AppBacklogPredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  sub_100083F70(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_100083F98(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AppBacklogPredicateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_100083F98(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppBacklogPredicateError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppBacklogPredicateError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_100084114(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10008412C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppBacklogPredicateError()
{
  return &type metadata for AppBacklogPredicateError;
}

uint64_t sub_100084158( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return swift_dynamicCast(&a9, &a11, v11 + 8, a4, 6LL);
}

uint64_t sub_10008416C(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_10008417C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
}

void sub_100084198(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
}

void sub_1000841A0()
{
}

uint64_t sub_1000841B8(uint64_t a1, uint64_t a2, ...)
{
  return sub_10000E888((uint64_t)va);
}

uint64_t sub_1000841C0()
{
  return type metadata accessor for JSCallable(0LL);
}

char *sub_1000841C8()
{
  return sub_100017154(0LL, v0, 0);
}

uint64_t sub_1000841E0()
{
  return swift_bridgeObjectRetain_n(*(void *)(v0 + 8 * v1 + 32), 2LL);
}

uint64_t sub_1000841F4()
{
  return sub_1000827C0(v0);
}

  ;
}

BOOL sub_100084214()
{
  return (!v1 & v0) != 0;
}

id sub_100084228(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  uint64_t v4 = &v3[OBJC_IVAR____TtC14amsengagementd5JSBag_bag];
  uint64_t v5 = type metadata accessor for Bag(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v9.receiver = v3;
  v9.super_class = v1;
  id v7 = objc_msgSendSuper2(&v9, "init");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v7;
}

id sub_1000842C4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  objc_super v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001CB550);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag, v6);
  id result = (id)sub_100085384(a3);
  if (!v15)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Bag.subscript.getter(v16);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  Bag.Value.currentOrNil()(&v21, v10);
  uint64_t v17 = v22;
  if (v22)
  {
    uint64_t v18 = v21;
    sub_10000DAA0(0LL, &qword_1001CB520, &OBJC_CLASS___JSValue_ptr);
    Swift::String v23 = &type metadata for String;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    id v19 = a1;
    id result = sub_100084498(&v21, a1);
    if (result)
    {
      id v20 = result;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return v20;
    }

    goto LABEL_8;
  }

  id result = [(id)objc_opt_self(JSValue) valueWithUndefinedInContext:a1];
  id v20 = result;
  if (result) {
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

id sub_100084498(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v6 = sub_10000D37C(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    __chkstk_darwin(v6);
    objc_super v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)(v9, v4);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    sub_10000D3A0(a1);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  id v11 = [(id)swift_getObjCClassFromMetadata(v2) valueWithObject:v10 inContext:a2];
  swift_unknownObjectRelease(v10);

  return v11;
}

uint64_t sub_1000845E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  uint64_t v6 = (void *)static JSContext.requiredCurrent.getter();
  _OWORD v9[2] = v4;
  v9[3] = a1;
  uint64_t v7 = JSContext.propagateErrorsToExceptions(_:)(a2, v9);

  return v7;
}

id sub_10008465C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  objc_super v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001CB548);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag, v6);
  id result = (id)sub_100085384(a3);
  if (v15)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Bag.subscript.getter(v16);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    Bag.Value.currentOrNil()(&v19, v10);
    if ((v20 & 1) != 0)
    {
      id v17 = [(id)objc_opt_self(JSValue) valueWithUndefinedInContext:a1];
      if (v17)
      {
LABEL_6:
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        return v17;
      }

      __break(1u);
    }

    id result = [(id)objc_opt_self(JSValue) valueWithDouble:a1 inContext:v19];
    id v17 = result;
    if (result) {
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_100084874(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  objc_super v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001CB540);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag, v6);
  id result = (id)sub_100085384(a3);
  if (v15)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Bag.subscript.getter(v16);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    Bag.Value.currentOrNil()(&v19, v10);
    if (v20 == 1)
    {
      id v17 = [(id)objc_opt_self(JSValue) valueWithUndefinedInContext:a1];
      if (v17)
      {
LABEL_6:
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        return v17;
      }

      __break(1u);
    }

    id result = [(id)objc_opt_self(JSValue) valueWithDouble:a1 inContext:(double)v19];
    id v17 = result;
    if (result) {
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_100084A94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Bag(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  objc_super v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000D33C(&qword_1001CB538);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag, v6);
  id result = (id)sub_100085384(a3);
  if (v15)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Bag.subscript.getter(v16);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    Bag.Value.currentOrNil()(&v20, v10);
    char v17 = v20;
    if (v20 == 2)
    {
      id v18 = [(id)objc_opt_self(JSValue) valueWithUndefinedInContext:a1];
      if (v18)
      {
LABEL_6:
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        return v18;
      }

      __break(1u);
    }

    id result = [(id)objc_opt_self(JSValue) valueWithBool:v17 & 1 inContext:a1];
    id v18 = result;
    if (result) {
      goto LABEL_6;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_100084CFC(void *a1, uint64_t a2, void *a3, uint64_t *a4, void (*a5)(NSString), uint64_t *a6)
{
  Swift::String v26 = a6;
  id v28 = a1;
  uint64_t v10 = type metadata accessor for Bag(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000D33C(a4);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( v13,  a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag,  v10);
  id result = (id)sub_100085384(a3);
  if (!v19)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  a5(v20);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Bag.Value.currentOrNil()(v27, v14);
  uint64_t v21 = v27[0];
  if (v27[0])
  {
    sub_10000DAA0(0LL, &qword_1001CB520, &OBJC_CLASS___JSValue_ptr);
    void v27[3] = sub_10000D33C(v26);
    v27[0] = v21;
    id v22 = v28;
    id v23 = v28;
    id result = sub_100084498(v27, v22);
    if (result)
    {
      id v24 = result;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return v24;
    }

    goto LABEL_8;
  }

  Swift::String v25 = (void *)objc_opt_self(&OBJC_CLASS___JSValue);
  id result = objc_msgSend(v25, "valueWithUndefinedInContext:", v28, v26);
  id v24 = result;
  if (result) {
    goto LABEL_6;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100084F28(void *a1, uint64_t a2, void *a3)
{
  id v32 = a1;
  uint64_t v5 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v5);
  uint64_t v7 = (char **)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v28 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Bag(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000D33C(&qword_1001CB518);
  uint64_t v30 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( v13,  a2 + OBJC_IVAR____TtC14amsengagementd5JSBag_bag,  v10);
  uint64_t result = sub_100085384(a3);
  if (v18)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Bag.subscript.getter(v19);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    Bag.Value.currentOrNil()(v7, v14);
    if (sub_1000102D4((uint64_t)v7, 1LL, v8) == 1)
    {
      sub_1000853E4((uint64_t)v7);
      NSString v20 = (void *)objc_opt_self(&OBJC_CLASS___JSValue);
      id v21 = [v20 valueWithUndefinedInContext:v32];
      if (v21)
      {
LABEL_7:
        (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
        return (uint64_t)v21;
      }

      __break(1u);
    }

    id v23 = v28;
    uint64_t v22 = v29;
    (*(void (**)(char *, void *, uint64_t))(v29 + 32))(v28, v7, v8);
    sub_10000DAA0(0LL, &qword_1001CB520, &OBJC_CLASS___JSValue_ptr);
    uint64_t v24 = URL.absoluteString.getter();
    v31[3] = &type metadata for String;
    v31[0] = v24;
    v31[1] = v25;
    id v26 = v32;
    id v27 = v32;
    uint64_t result = (uint64_t)sub_100084498(v31, v26);
    if (result)
    {
      id v21 = (id)result;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v8);
      goto LABEL_7;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100085218()
{
}

id sub_100085250()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000852C0()
{
  return type metadata accessor for JSBag(0LL);
}

uint64_t type metadata accessor for JSBag(uint64_t a1)
{
  uint64_t result = qword_1001CB508;
  if (!qword_1001CB508) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSBag);
  }
  return result;
}

uint64_t sub_100085300(uint64_t a1)
{
  uint64_t result = type metadata accessor for Bag(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10008536C(void *a1)
{
  return sub_100084F28(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100085384(void *a1)
{
  id v1 = [a1 toString];
  if (!v1) {
    return 0LL;
  }
  objc_super v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1000853E4(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB180);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id sub_100085424(void *a1)
{
  return sub_100084CFC( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  &qword_1001CB528,  (void (*)(NSString))&Bag.subscript.getter,  &qword_1001C8E58);
}

id sub_100085454(void *a1)
{
  return sub_100084CFC( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  &qword_1001CB530,  (void (*)(NSString))&Bag.subscript.getter,  &qword_1001C9518);
}

id sub_100085484(uint64_t a1)
{
  return sub_100084A94(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_10008549C(uint64_t a1)
{
  return sub_100084874(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_1000854B4(uint64_t a1)
{
  return sub_10008465C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_1000854CC(void *a1)
{
  return sub_1000842C4(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000854E4(uint64_t a1)
{
}

void sub_1000854F0(uint64_t a1)
{
}

void sub_1000854FC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
}

uint64_t sub_1000857B0()
{
  uint64_t v1 = *(void *)(v0 - 80);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 104), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000857D4(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 136) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 136);
}

uint64_t sub_1000857E8()
{
  return sub_10000E888(v0 - 136);
}

uint64_t sub_1000857F0()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10008581C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd8JSClient_demo));
}

uint64_t sub_100085878(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd8JSClient_demo);
  *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd8JSClient_demo) = a1;
  return swift_unknownObjectRelease(v2);
}

id sub_100085890(void *a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC14amsengagementd8JSClient_demo;
  id v6 = objc_allocWithZone((Class)type metadata accessor for JSClientDemo());
  uint64_t v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  char v8 = *(_BYTE *)(a2 + 1);
  uint64_t v9 = &v7[OBJC_IVAR____TtC14amsengagementd8JSClient_clientInfo];
  *(void *)uint64_t v9 = a1;
  v9[8] = v8;
  id v10 = a1;

  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for JSClient();
  id v11 = objc_msgSendSuper2(&v13, "init");
  sub_10002FF78((void *)a2);

  return v11;
}

void sub_10008595C()
{
}

void sub_100085974()
{
}

void sub_100085980(SEL *a1)
{
}

uint64_t sub_100085A18()
{
  if (([(id)objc_opt_self(AMSDevice) deviceIsAudioAccessory] & 1) != 0
    && (uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()(), v1 = sub_100085D64(v0), v0, v1)
    && (sub_100085D50(v2, v3, v4, (uint64_t)&type metadata for String, v5) & 1) != 0
    && (uint64_t v6 = v17) != 0)
  {
    uint64_t v7 = v16;
  }

  else
  {
    char v8 = (__CFString *)String._bridgeToObjectiveC()();
    CFPropertyListRef v9 = sub_100085D64(v8);

    if (v9)
    {
      int v14 = sub_100085D50(v10, v11, v12, (uint64_t)&type metadata for String, v13);
      uint64_t v7 = v16;
      uint64_t v6 = v17;
      if (!v14)
      {
        uint64_t v6 = 0LL;
        uint64_t v7 = 0LL;
      }
    }

    else
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
    }
  }

  if (v6) {
    return v7;
  }
  else {
    return 0LL;
  }
}

id sub_100085B84(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

void sub_100085BDC()
{
  id v1 =  [(id)objc_opt_self(AMSUserAgent) userAgentForProcessInfo:*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd8JSClient_clientInfo)];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  sub_100085D74();
  sub_10000DFE8();
}

void sub_100085C38()
{
}

id sub_100085C70()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSClient();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd8JSClient);
}

void sub_100085CF8(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    sub_100085D74();
  }

  sub_10000DFE8();
}

uint64_t sub_100085D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  return swift_dynamicCast(va1, (uint64_t *)va, v5 + 8, a4, 6LL);
}

CFPropertyListRef sub_100085D64(const __CFString *a1)
{
  return CFPreferencesCopyValue(a1, v1, v2, v3);
}

void sub_100085D74()
{
}

id sub_100085D80()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSClientDemo();
  return objc_msgSendSuper2(&v2, "init");
}

void sub_100085E00()
{
  id v15 = 0LL;
  id v0 = [(id)objc_opt_self(MSDKManagedDevice) sharedInstance];
  char v8 = v0;
  if (v0)
  {
    id v14 = 0LL;
    unint64_t v9 = (unint64_t)[v0 typeOfDemoDevice:&v14];

    id v15 = v14;
    id v0 = v14;
    if ((v9 & 0x8000000000000000LL) != 0) {
      __break(1u);
    }
    char v8 = v0;
  }

  uint64_t v10 = sub_100086570((uint64_t)v0, v1, v2, v3, v4, v5, v6, v7, v13, (uint64_t)v14, (char)v15);
  sub_100086584((id *)v10, v11, 37LL, 37LL, v12);

  sub_10001A504();
}

id sub_100085F04()
{
  return [(id)objc_opt_self(AMSDevice) isRunningInStoreDemoMode];
}

void sub_100085F8C()
{
  id v19 = 0LL;
  id v0 = [(id)objc_opt_self(MSDKManagedDevice) sharedInstance];
  if (!v0)
  {
    id v3 = 0LL;
LABEL_6:
    uint64_t v5 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    goto LABEL_7;
  }

  uint64_t v1 = v0;
  id v18 = 0LL;
  id v2 = [v0 getDeviceOptions:&v18];

  id v3 = v18;
  id v19 = v18;
  if (!v2)
  {
    id v13 = v18;
    goto LABEL_6;
  }

  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  id v4 = v3;

LABEL_7:
  id v14 = sub_100086570(v5, v6, v7, v8, v9, v10, v11, v12, v17, (uint64_t)v18, (char)v19);
  sub_100086584((id *)v14, v15, 41LL, 41LL, v16);

  sub_10001A504();
}

void *sub_100086120()
{
  id v18 = 0LL;
  id v0 = [(id)objc_opt_self(MSDKManagedDevice) sharedInstance];
  uint64_t v8 = v0;
  if (v0)
  {
    id v17 = 0LL;
    id v9 = [v0 getStoreID:&v17];

    id v10 = v17;
    id v18 = v17;
    if (v9)
    {
      uint64_t v8 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      id v11 = v10;
    }

    else
    {
      id v0 = v17;
      id v11 = v0;
      uint64_t v8 = 0LL;
    }
  }

  else
  {
    id v11 = 0LL;
  }

  uint64_t v12 = sub_100086570((uint64_t)v0, v1, v2, v3, v4, v5, v6, v7, v16, (uint64_t)v17, (char)v18);
  sub_100086584((id *)v12, v13, 34LL, 34LL, v14);

  return v8;
}

uint64_t sub_10008623C(id *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t result = __chkstk_darwin(v10);
  if (*a1)
  {
    uint64_t v12 = qword_1001C7FB0;
    id v34 = *a1;
    if (v12 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v14 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + 2LL * *(void *)(v14 + 72),
            *(unsigned __int8 *)(v14 + 80) | 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    unint64_t v37 = type metadata accessor for JSClientDemo();
    v36[0] = a2;
    id v16 = (id)AMSLogKey(a2);
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = a4;
      id v19 = a5;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v22 = v21;

      swift_bridgeObjectRetain(v22);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      sub_10000DC08();
      uint64_t v23 = sub_100070254();
      uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v23);
      sub_1000702B8(MetatypeMetadata);
      sub_100037DE0();
      v25._uint64_t countAndFlagsBits = 5972026LL;
      v25._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      void v35[3] = &type metadata for String;
      v35[0] = v20;
      v35[1] = v22;
      a5 = v19;
      a4 = v18;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
      sub_100037DE0();
      v26._uint64_t countAndFlagsBits = 93LL;
      v26._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_10000DC08();
      uint64_t v27 = sub_100070254();
      uint64_t v28 = swift_getMetatypeMetadata(v27);
      sub_1000702B8(v28);
      sub_100037DE0();
      v29._uint64_t countAndFlagsBits = 58LL;
      v29._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      sub_10000DC5C();
    }

    sub_10000D3A0(v36);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(a3, 1LL);
    v30._uint64_t countAndFlagsBits = a4;
    v30._object = a5;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    unint64_t v37 = sub_100086534();
    v36[0] = v34;
    id v31 = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000E888((uint64_t)v36);
    sub_10000DC08();
    uint64_t v32 = sub_10000DC5C();
    uint64_t v33 = static os_log_type_t.error.getter(v32);
    sub_1000BD1B0(v33, v15);

    return swift_bridgeObjectRelease();
  }

  return result;
}

id sub_1000864E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSClientDemo();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSClientDemo()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd12JSClientDemo);
}

unint64_t sub_100086534()
{
  unint64_t result = qword_1001CF9A0;
  if (!qword_1001CF9A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CF9A0);
  }

  return result;
}

char *sub_100086570( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  return &a11;
}

uint64_t sub_100086584(id *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_10008623C(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a5);
}

void sub_10008658C(uint64_t a1)
{
}

void sub_1000865BC()
{
}

void sub_1000865C4(uint64_t a1)
{
}

void sub_1000865CC(void *a1@<X8>)
{
  v35[0] = v5;
  v35[1] = 0xE800000000000000LL;
  sub_1000685A8();
  sub_100068574();
  uint64_t v6 = sub_100072CE0();
  if (!v37)
  {
    uint64_t v18 = sub_10000DE2C();
    sub_10008BDD4(v18, &qword_1001CAAD0);
LABEL_9:
    unint64_t v19 = sub_10008AB6C();
    sub_100020C48((uint64_t)&unk_1001AC498, v19);
    *uint64_t v20 = 0;
LABEL_13:
    sub_10008C040();
    goto LABEL_14;
  }

  if ((sub_10008BD34(v6, v7, v8, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_10000DE2C();
    goto LABEL_9;
  }

  uint64_t v10 = v35[0];
  uint64_t v9 = v35[1];
  sub_10008BF94();
  v35[0] = v11;
  v35[1] = 0xE700000000000000LL;
  sub_1000685A8();
  sub_100068574();
  uint64_t v12 = sub_100072CE0();
  if ((sub_10008BD34(v12, v13, v14, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_10000DDF8();
    sub_10000DE2C();
    unint64_t v21 = sub_10008AB6C();
    sub_100020C48((uint64_t)&unk_1001AC498, v21);
    char v23 = 1;
LABEL_12:
    *uint64_t v22 = v23;
    goto LABEL_13;
  }

  uint64_t v16 = v35[0];
  uint64_t v15 = v35[1];
  strcpy((char *)v35, "contentRequest");
  HIBYTE(v35[1]) = -18;
  sub_1000685A8();
  sub_100068574();
  sub_100072CE0();
  uint64_t v38 = v16;
  uint64_t v17 = sub_10000D33C(&qword_1001C8E58);
  if ((sub_100010BA4((uint64_t)v35, (uint64_t)v36, (uint64_t)&type metadata for Any + 8, v17) & 1) == 0)
  {
    sub_100020AB8();
    sub_10000DDF8();
    sub_10000DE2C();
    unint64_t v24 = sub_10008AB6C();
    sub_100020C48((uint64_t)&unk_1001AC498, v24);
    char v23 = 2;
    goto LABEL_12;
  }

  sub_100086900(v1);
  if (!v2)
  {
    strcpy((char *)v35, "options");
    v35[1] = 0xE700000000000000LL;
    sub_1000685A8();
    sub_100068574();
    sub_10000DE2C();
    uint64_t v25 = sub_100072CE0();
    if (v37)
    {
      if (sub_100010BA4((uint64_t)v35, (uint64_t)v36, (uint64_t)&type metadata for Any + 8, v17))
      {
        uint64_t v31 = v35[0];
LABEL_20:
        int v32 = sub_100086D0C(v31, v26, v27, v28, v29, v30);
        *a1 = v10;
        a1[1] = v9;
        a1[2] = v38;
        a1[3] = v15;
        uint64_t v33 = type metadata accessor for JSContent.CacheRequest(0LL);
        sub_10008AB2C(v1, (uint64_t)a1 + *(int *)(v33 + 24), type metadata accessor for JSContent.Request);
        id v34 = (char *)a1 + *(int *)(v33 + 28);
        *id v34 = v32 & 1;
        v34[1] = BYTE1(v32) & 1;
        v34[2] = (v32 & 0xFFFF0000) != 0;
        goto LABEL_14;
      }
    }

    else
    {
      sub_10008BDD4(v25, &qword_1001CAAD0);
    }

    uint64_t v31 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    goto LABEL_20;
  }

  sub_10000DE2C();
  sub_100020AB8();
  sub_10000DDF8();
LABEL_14:
  sub_100029188();
}

void sub_100086900(uint64_t a1@<X8>)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10003772C();
  v42._uint64_t countAndFlagsBits = 7107189LL;
  v42._object = (void *)0xE300000000000000LL;
  sub_1000685A8();
  sub_100072CA8();
  uint64_t v7 = sub_100072CE0();
  if (!v45)
  {
    sub_10000DCFC();
    uint64_t v10 = &qword_1001CAAD0;
    uint64_t v11 = v44;
    goto LABEL_6;
  }

  if ((sub_10008BD34(v7, v8, v9, (uint64_t)&type metadata for String) & 1) == 0)
  {
    sub_10000DCFC();
    goto LABEL_8;
  }

  URL.init(string:)(v42._countAndFlagsBits, v42._object);
  swift_bridgeObjectRelease();
  if (sub_1000102D4(v1, 1LL, v5) == 1)
  {
    sub_10000DCFC();
    uint64_t v10 = &qword_1001CB180;
    uint64_t v11 = (void *)v1;
LABEL_6:
    sub_100019E6C((uint64_t)v11, v10);
LABEL_8:
    unint64_t v12 = sub_10008AAAC();
    sub_100020C48((uint64_t)&unk_1001AC528, v12);
    _BYTE *v13 = 0;
    sub_10008C040();
    goto LABEL_9;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v2, v1, v5);
  v42._uint64_t countAndFlagsBits = 0x646F6874656DLL;
  v42._object = (void *)0xE600000000000000LL;
  sub_1000685A8();
  sub_100072CA8();
  uint64_t v14 = sub_100072CE0();
  if (sub_10008BD34(v14, v15, v16, (uint64_t)&type metadata for String))
  {
    Swift::String v17 = v42;
  }

  else
  {
    v17._uint64_t countAndFlagsBits = 0LL;
    v17._object = (void *)0xE000000000000000LL;
  }

  char v18 = sub_100087080(v17);
  if (v18 == 8)
  {
    sub_10000DCFC();
    unint64_t v19 = sub_10008AAAC();
    sub_100020C48((uint64_t)&unk_1001AC528, v19);
    *uint64_t v20 = 1;
    sub_10008C040();
    sub_10008BEF8();
  }

  else
  {
    char v41 = v18;
    v42._uint64_t countAndFlagsBits = 0x73726564616568LL;
    v42._object = (void *)0xE700000000000000LL;
    sub_1000685A8();
    sub_100072CA8();
    sub_100072CE0();
    uint64_t v21 = sub_10000D33C(&qword_1001C8F18);
    else {
      uint64_t countAndFlagsBits = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    }
    uint64_t v46 = countAndFlagsBits;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSHTTPHeaderUserAgent);
    uint64_t v39 = v26;
    uint64_t v40 = v25;
    uint64_t v27 = (void *)objc_opt_self(&OBJC_CLASS___AMSUserAgent);
    id v28 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
    id v29 = [v27 userAgentForProcessInfo:v28];

    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    void v43[3] = &type metadata for String;
    v43[0] = v30;
    v43[1] = v32;
    sub_100030118((uint64_t)v43, v40, v39);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v2, v5);
    uint64_t v33 = (int *)type metadata accessor for JSContent.Request(0LL);
    *(_BYTE *)(a1 + v33[6]) = v41;
    *(void *)(a1 + v33[5]) = v46;
    v44[0] = 2036625250LL;
    v44[1] = 0xE400000000000000LL;
    AnyHashable.init<A>(_:)(v44);
    sub_100072CA8();
    sub_10000DCFC();
    sub_100072CE0();
    uint64_t v34 = sub_10008BEF8();
    if (v45)
    {
      int v35 = sub_100010BA4( (uint64_t)&v42,  (uint64_t)v44,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
      uint64_t v36 = v42._countAndFlagsBits;
      object = v42._object;
      if (!v35)
      {
        uint64_t v36 = 0LL;
        object = 0LL;
      }
    }

    else
    {
      sub_10008BDD4(v34, &qword_1001CAAD0);
      uint64_t v36 = 0LL;
      object = 0LL;
    }

    uint64_t v38 = (uint64_t *)(a1 + v33[7]);
    *uint64_t v38 = v36;
    v38[1] = (uint64_t)object;
  }

LABEL_9:
  sub_100029188();
}

  __break(1u);
  return result;
}

uint64_t sub_100086D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&__int128 v72 = 0x756F656D69546E6FLL;
  *((void *)&v72 + 1) = 0xE900000000000074LL;
  uint64_t v6 = sub_10008BE9C(a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, a4, a5, a6);
  sub_10008BE00(v6, v7, v8, v9, v10, v11, v12, v13, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v15 = sub_10008C014(v14);
  if (v73)
  {
    uint64_t v22 = sub_100010BA4( (uint64_t)&v66 + 7,  (uint64_t)&v72,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
    if ((_DWORD)v22)
    {
      int v26 = HIBYTE(v66);
      goto LABEL_6;
    }
  }

  else
  {
    sub_10008C01C(v15, &qword_1001CAAD0, v16, v17, v18, v19, v20, v21);
  }

  int v26 = 0;
LABEL_6:
  *(void *)&__int128 v72 = 0xD000000000000011LL;
  *((void *)&v72 + 1) = 0x8000000100170610LL;
  uint64_t v27 = sub_10008BE9C( v22,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v23,  v24,  v25);
  sub_10008BE00(v27, v28, v29, v30, v31, v32, v33, v34, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v36 = sub_10008C014(v35);
  if (!v73)
  {
    sub_10008C01C(v36, &qword_1001CAAD0, v37, v38, v39, v40, v41, v42);
    goto LABEL_12;
  }

  uint64_t v43 = sub_100010BA4( (uint64_t)&v66 + 7,  (uint64_t)&v72,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool);
  if (!(_DWORD)v43)
  {
LABEL_12:
    int v47 = 0;
    goto LABEL_13;
  }

  if (HIBYTE(v66)) {
    int v47 = 256;
  }
  else {
    int v47 = 0;
  }
LABEL_13:
  *(void *)&__int128 v72 = 0xD00000000000001ALL;
  *((void *)&v72 + 1) = 0x8000000100170630LL;
  uint64_t v48 = sub_10008BE9C( v43,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v44,  v45,  v46);
  sub_10008BE00(v48, v49, v50, v51, v52, v53, v54, v55, v66, v67, v68, v69, v70, v71, v72);
  uint64_t v56 = sub_100009020();
  uint64_t v57 = sub_10008C014(v56);
  if (!v73)
  {
    sub_10008C01C(v57, &qword_1001CAAD0, v58, v59, v60, v61, v62, v63);
    goto LABEL_19;
  }

  if (!sub_100010BA4( (uint64_t)&v66 + 7,  (uint64_t)&v72,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Bool))
  {
LABEL_19:
    int v64 = 0;
    return v47 | v26 | v64;
  }

  if (HIBYTE(v66)) {
    int v64 = 0x10000;
  }
  else {
    int v64 = 0;
  }
  return v47 | v26 | v64;
}

unint64_t sub_100086EC4()
{
  HIWORD(v21._object) = -4864;
  uint64_t v0 = AnyHashable.init<A>(_:)(&v21);
  sub_10008BF08( v0,  v1,  v2,  v3,  v4,  v5,  v6,  v7,  v19,  v21._countAndFlagsBits,  (uint64_t)v21._object,  v22[0],  v23,  v24,  v25,  v26,  v27);
  sub_10000E854((uint64_t)v22);
  if (v28)
  {
    if (sub_100010BA4( (uint64_t)&v21,  (uint64_t)&v27,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
    {
      Swift::String v8 = v21;
      goto LABEL_6;
    }
  }

  else
  {
    sub_100019E6C((uint64_t)&v27, &qword_1001CAAD0);
  }

  v8._uint64_t countAndFlagsBits = 0LL;
  v8._object = (void *)0xE000000000000000LL;
LABEL_6:
  unint64_t v9 = sub_10001C9CC(v8);
  strcpy((char *)&v27, "notificationId");
  HIBYTE(v27) = -18;
  uint64_t v10 = AnyHashable.init<A>(_:)(&v27);
  sub_10008BF08( v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v20,  v21._countAndFlagsBits,  (uint64_t)v21._object,  v22[0],  v23,  v24,  v25,  v26,  v27);
  sub_100009020();
  sub_10000E854((uint64_t)v22);
  if (v28) {
    sub_100010BA4((uint64_t)&v21, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String);
  }
  else {
    sub_100019E6C((uint64_t)&v27, &qword_1001CAAD0);
  }
  return v9;
}

void sub_100087030(uint64_t a1, char a2)
{
}

void sub_100087050(uint64_t a1)
{
}

unint64_t sub_100087080(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A73B0, v2);
  sub_100009020();
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000870C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000870F8 + 4 * byte_100166750[a1]))( 0x5443454E4E4F43LL,  0xE700000000000000LL);
}

uint64_t sub_1000870F8()
{
  return 0x4554454C4544LL;
}

uint64_t sub_10008710C()
{
  return 5522759LL;
}

uint64_t sub_10008715C()
{
  return 0x455441445055LL;
}

void sub_100087170()
{
}

void sub_100087178(uint64_t a1)
{
}

void sub_100087180(char *a1)
{
}

void sub_10008718C()
{
}

void sub_100087194(uint64_t a1)
{
}

void sub_10008719C(uint64_t a1)
{
}

unint64_t sub_1000871A4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100087080(*a1);
  *a2 = result;
  return result;
}

void sub_1000871D0(uint64_t *a1@<X8>)
{
  *a1 = sub_1000870C4(*v1);
  a1[1] = v3;
  sub_100009044();
}

void sub_1000871F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v79 = v25;
  __int128 v27 = v26;
  uint64_t v82 = v28;
  uint64_t v83 = v29;
  uint64_t v84 = *(void *)(type metadata accessor for JSContent.CacheRequest(0LL) - 8);
  sub_10000DC8C();
  __chkstk_darwin(v30);
  sub_10003772C();
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v31);
  sub_10000DD5C();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v32 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100010678();
  uint64_t v36 = sub_100048B40(v32, (v34 & ~v33) + 3 * v35, v33 | 7, (uint64_t)&a18);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v80 = type metadata accessor for JSContent();
  id v81 = sub_10008BFEC(v80);
  id v37 = (id)AMSLogKey(v81);
  if (v37)
  {
    uint64_t v38 = sub_1000105E8((uint64_t)v37);
    sub_10008BFB4();
    sub_100048A30();
    sub_100010564();
    sub_10000DC08();
    uint64_t v39 = v90;
    uint64_t v40 = sub_10000D37C(v89, (uint64_t)v90);
    sub_10000DC54((uint64_t)v40, (uint64_t)v39);
    uint64_t v41 = sub_1000258E8();
    sub_100025828(v41);
    uint64_t v20 = (uint64_t)&qword_1001CAAD0;
    sub_10008BDAC((uint64_t)&v86);
    sub_10000DC14();
    uint64_t v88 = &type metadata for String;
    uint64_t v86 = v38;
    uint64_t v87 = v22;
    sub_10000DF68();
    sub_10008BDAC((uint64_t)&v86);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v42 = v90;
    uint64_t v43 = sub_10000D37C(v89, (uint64_t)v90);
    sub_10000DC54((uint64_t)v43, (uint64_t)v42);
    uint64_t v44 = sub_1000258E8();
    uint64_t v45 = sub_100025828(v44);
    sub_10001A62C(v45, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_100048888();
  sub_1000105B4(0xD000000000000029LL);
  uint64_t v90 = &type metadata for String;
  v89[0] = v82;
  v89[1] = v83;
  swift_bridgeObjectRetain(v83);
  uint64_t v46 = sub_10004866C((uint64_t)v89);
  sub_10008BEF0(v46, &qword_1001CAAD0);
  uint64_t v48 = static os_log_type_t.default.getter(v47);
  sub_10008BF50(v48, v36);
  sub_10000DE74();
  uint64_t v49 = sub_1000B78B8(v27);
  if (v49)
  {
    uint64_t v50 = (void *)v49;
    uint64_t v51 = *(void *)(v49 + 16);
    uint64_t v52 = _swiftEmptyArrayStorage;
    if (v51)
    {
      uint64_t v53 = v49 + 32;
      do
      {
        sub_10000DA1C(v53, (uint64_t)v89);
        sub_10000DA1C((uint64_t)v89, (uint64_t)&v86);
        uint64_t v54 = sub_10000D33C(&qword_1001C8E58);
        sub_100048888();
        uint64_t v20 = v85;
        if (v85)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
          {
            sub_10008BFA8();
            uint64_t v52 = v56;
          }

          unint64_t v55 = v52[2];
          if (v55 >= v52[3] >> 1)
          {
            sub_10008BFA8();
            uint64_t v52 = v57;
          }

          v52[2] = v55 + 1;
          v52[v55 + 4] = v20;
        }

        v53 += 32LL;
        --v51;
      }

      while (v51);
    }

    sub_100009070();
    uint64_t v58 = v52[2];
    if (v58)
    {
      v89[0] = _swiftEmptyArrayStorage;
      sub_100017170();
      uint64_t v20 = 0LL;
      uint64_t v59 = (void *)v89[0];
      do
      {
        uint64_t v50 = (void *)v52[v20 + 4];
        swift_bridgeObjectRetain_n(v50, 2LL);
        sub_1000865CC(v21);
        sub_100009070();
        v89[0] = v59;
        unint64_t v60 = v59[2];
        if (v60 >= v59[3] >> 1)
        {
          uint64_t v50 = v89;
          sub_100017170();
          uint64_t v59 = (void *)v89[0];
        }

        ++v20;
        v59[2] = v60 + 1;
        sub_10008AB2C( (uint64_t)v21,  (uint64_t)v59 + ((*(unsigned __int8 *)(v84 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80))
        + *(void *)(v84 + 72) * v60,
          type metadata accessor for JSContent.CacheRequest);
      }

      while (v58 != v20);
      sub_10000DE74();
    }

    else
    {
      sub_10000DE74();
      uint64_t v59 = _swiftEmptyArrayStorage;
    }

    uint64_t v61 = sub_10008BE18();
    uint64_t v62 = sub_10008BD50(v61);
    id v63 = (id)AMSLogKey(v62);
    if (v63)
    {
      uint64_t v64 = sub_1000105E8((uint64_t)v63);
      uint64_t v66 = v65;

      sub_1000489DC();
      sub_100010564();
      sub_10000DC08();
      char v67 = v90;
      uint64_t v68 = sub_10000D37C(v89, (uint64_t)v90);
      sub_10000DC54((uint64_t)v68, (uint64_t)v67);
      uint64_t v69 = sub_1000258E8();
      sub_100025828(v69);
      sub_10008BD48((uint64_t)&v86);
      sub_10000DC14();
      uint64_t v88 = &type metadata for String;
      uint64_t v86 = v64;
      uint64_t v87 = v66;
      sub_10000DF68();
      sub_10008BD48((uint64_t)&v86);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE74();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v70 = v90;
      uint64_t v71 = sub_10000D37C(v89, (uint64_t)v90);
      sub_10000DC54((uint64_t)v71, (uint64_t)v70);
      uint64_t v72 = sub_1000258E8();
      uint64_t v73 = sub_100025828(v72);
      sub_10001A62C(v73, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v89);
    sub_1000105B4(0xD000000000000035LL);
    uint64_t v90 = (void *)sub_10000D33C(&qword_1001CB5F0);
    v89[0] = v59;
    sub_10000DF10();
    uint64_t v74 = sub_10004885C((uint64_t)v89);
    sub_10008BEF0(v74, &qword_1001CAAD0);
    uint64_t v76 = static os_log_type_t.default.getter(v75);
    sub_1000BD1B0(v76, v20);
    sub_10000DCFC();
    char v77 = v62[OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1];
    uint64_t v78 = sub_10008BD98();
    *(_BYTE *)(sub_10008BD14(v78) + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
    sub_100054044(v79);
    sub_100086EC4();
    sub_10003B740();
    sub_10000DE2C();
    sub_1000292C4();
    sub_100009020();
    sub_10000DD84();
  }

  else
  {
    __break(1u);
  }

#error "100087A20: call analysis failed (funcsize=41)"
void sub_100087A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v0 = sub_10008BD98();
  char v1 = sub_10008BD14(v0);
  sub_10008BEA8(v1);
  sub_100039A34(v2);
  sub_1000292C4();
  sub_100009020();
  sub_10000DFE8();
}

uint64_t sub_100087B3C()
{
  uint64_t v1 = sub_10008BD98();
  uint64_t v2 = sub_10008BD14(v1);
  sub_10008BEA8(v2);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for ContentInfo(0LL) - 8);
    uint64_t v7 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    do
    {
      sub_100040774();
      v7 += v8;
      --v5;
    }

    while (v5);
  }

  sub_10000DE2C();
  return swift_release(v0);
}

void sub_100087BEC()
{
  uint64_t v41 = v1;
  uint64_t v47 = v3;
  uint64_t v48 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_10008C00C();
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v14);
  sub_100048C04();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v45 = qword_1001DBB30;
  uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_10008BFF8();
  uint64_t v18 = v17 & ~v16;
  uint64_t v44 = v15;
  uint64_t v43 = v16 | 7;
  uint64_t v19 = swift_allocObject(v15, v18 + 5 * v0, v16 | 7);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
  uint64_t v42 = type metadata accessor for JSContent();
  uint64_t v46 = sub_10008BFEC(v42);
  id v20 = (id)AMSLogKey(v46);
  if (v20)
  {
    uint64_t v39 = v0;
    uint64_t v21 = v13;
    uint64_t v22 = v9;
    uint64_t v23 = sub_1000105E8((uint64_t)v20);
    uint64_t v40 = v5;
    sub_10008BFB4();
    sub_100048A30();
    sub_100010564();
    sub_1000104F0();
    sub_1000104C0(&v50);
    uint64_t v24 = sub_100010530();
    sub_10001A0CC(v24);
    sub_10008BDAC((uint64_t)v49);
    sub_10000DC14();
    v49[3] = &type metadata for String;
    v49[0] = v23;
    v49[1] = v5;
    uint64_t v9 = v22;
    uint64_t v13 = v21;
    sub_10000DF68();
    sub_100019E6C((uint64_t)v49, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_10001A298();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_1000104F0();
    sub_1000104C0(&v50);
    uint64_t v25 = sub_100010530();
    uint64_t v26 = sub_10001A0CC(v25);
    sub_10001A62C(v26, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10001A298();
  }

  sub_100048888();
  sub_1000105B4(0xD000000000000014LL);
  uint64_t v52 = &type metadata for String;
  uint64_t v50 = v9;
  uint64_t v51 = v7;
  sub_10000DF10();
  sub_10004866C((uint64_t)&v50);
  sub_10008BD90((uint64_t)&v50);
  LogMessage.init(stringLiteral:)(0x6E6F697372657620LL);
  uint64_t v52 = &type metadata for String;
  uint64_t v50 = v48;
  uint64_t v51 = v5;
  sub_100048A30();
  sub_10008BF78((uint64_t)&v50);
  sub_10008BD90((uint64_t)&v50);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v19);
  sub_1000090CC();
  char v29 = v46[OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1];
  uint64_t v30 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v30) + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
  sub_100054044((uint64_t)v47);
  sub_100086900(v13);
  sub_100054044(v41);
  int v37 = sub_100086D0C(v31, v32, v33, v34, v35, v36);
  sub_10003CC74( 0LL,  0LL,  v9,  v7,  v48,  v5,  v13,  v37 & 0x101 | (((v37 & 0xFFFF0000) != 0) << 16),  0LL,  0LL,  1LL,  v38,  v39,  v40,  v9,  v41,  v42,  v43,  v18,  v44,  v45,  (uint64_t)v46,  v47);
  sub_1000292C4();
  sub_100019EC0(v13, type metadata accessor for JSContent.Request);
  sub_10000DD84();
}

uint64_t sub_1000881D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = v10;
  uint64_t v52 = sub_10008BE90();
  uint64_t v11 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  sub_10000DD5C();
  uint64_t v57 = v12;
  char v13 = *(_BYTE *)(v4 + OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1);
  uint64_t v14 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v14) + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  sub_1000400D0();
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = v15 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v51 = *(void *)(v11 + 72);
    do
    {
      sub_100039F1C(v17, v57);
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v18 = *(void *)(sub_10002C79C() - 8);
      uint64_t v19 = sub_10001059C( ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
            + 3LL * *(void *)(v18 + 72),
              *(unsigned __int8 *)(v18 + 80));
      *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
      uint64_t v20 = type metadata accessor for JSContent();
      id v21 = sub_10008BF28(v20);
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        uint64_t v56 = sub_1000105E8((uint64_t)v22);
        sub_10008BF38();
        sub_10000DF10();
        sub_100010564();
        v23._uint64_t countAndFlagsBits = 0LL;
        v23._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v23);
        uint64_t v24 = *((void *)&v63 + 1);
        sub_1000104C0(&v62);
        uint64_t MetatypeMetadata = (void *)sub_100010530();
        uint64_t v59 = v24;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v59);
        sub_10008BD48((uint64_t)&v59);
        sub_10000DC14();
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v59 = v56;
        uint64_t v60 = a1;
        sub_10002C704();
        sub_10008BD48((uint64_t)&v59);
        sub_10000DC4C(93LL);
        LogMessage.init(stringInterpolation:)(v53);
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_10000DC08();
        uint64_t v25 = *((void *)&v63 + 1);
        uint64_t v26 = sub_10000D37C(&v62, *((uint64_t *)&v63 + 1));
        a1 = sub_10000DC54((uint64_t)v26, v25);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a1);
        uint64_t v59 = a1;
        sub_10002C704();
        sub_10008BD48((uint64_t)&v59);
        sub_10000DC4C(58LL);
        sub_10000DC5C();
      }

      sub_10008BFBC();
      LogMessage.init(stringLiteral:)(0xD000000000000012LL);
      *((void *)&v63 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
      sub_10008BF80(a2, v54);
      sub_10004866C((uint64_t)&v62);
      sub_10008BD48((uint64_t)&v62);
      uint64_t v28 = static os_log_type_t.default.getter(v27);
      sub_1000BD1B0(v28, v19);
      sub_100020AB8();
      Date.addTimeInterval(_:)(2592000.0);
      sub_100040CB8();
      sub_100019EC0(v57, type metadata accessor for ContentInfo);
      v17 += v51;
      --v16;
    }

    while (v16);
    sub_10008BE74();
  }

  else
  {
    uint64_t v58 = a3;
    swift_bridgeObjectRelease();
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v29 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v30 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
    sub_100010678();
    uint64_t v33 = (char *)(v32 & ~v31);
    uint64_t v34 = swift_allocObject(v29, &v33[4 * v30], v31 | 7);
    *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    uint64_t v35 = type metadata accessor for JSContent();
    id v36 = sub_10008BF28(v35);
    id v37 = (id)AMSLogKey(v36);
    if (v37)
    {
      uint64_t v38 = sub_1000105E8((uint64_t)v37);
      uint64_t v40 = v39;

      sub_10000DEE0();
      sub_100010564();
      sub_10000DC08();
      uint64_t v41 = *((void *)&v63 + 1);
      uint64_t v42 = sub_10000D37C(&v62, *((uint64_t *)&v63 + 1));
      uint64_t v43 = sub_10000DC54((uint64_t)v42, v41);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v43);
      uint64_t v59 = v43;
      sub_10002C704();
      sub_10008BDAC((uint64_t)&v59);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v59 = v38;
      uint64_t v60 = v40;
      sub_10002C704();
      sub_10008BDAC((uint64_t)&v59);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_100009020();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v44 = *((void *)&v63 + 1);
      uint64_t v45 = sub_10000D37C(&v62, *((uint64_t *)&v63 + 1));
      sub_10000DC54((uint64_t)v45, v44);
      uint64_t MetatypeMetadata = (void *)sub_1000258E8();
      uint64_t v59 = v44;
      sub_10002C704();
      sub_100019E6C((uint64_t)&v59, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10008BFBC();
    sub_1000105B4(0xD000000000000022LL);
    *((void *)&v63 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
    sub_10008BF80(v55, a1);
    uint64_t v46 = sub_10004885C((uint64_t)&v62);
    sub_10008BDDC(v46, &qword_1001CAAD0);
    if (a4)
    {
      *((void *)&v63 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
      *(void *)&__int128 v62 = v58;
      *((void *)&v62 + Hasher._combine(_:)(v1 & 1) = a4;
    }

    else
    {
      __int128 v62 = 0u;
      __int128 v63 = 0u;
    }

    sub_1000489DC();
    uint64_t v47 = sub_10004885C((uint64_t)&v62);
    sub_10008BDDC(v47, &qword_1001CAAD0);
    uint64_t v49 = static os_log_type_t.default.getter(v48);
    sub_10008BF50(v49, v34);
    sub_10008BE74();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100088810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v99 = a2;
  sub_10000DE00();
  sub_10000DC64();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void *)(v11 - 8);
  uint64_t v96 = v11;
  sub_10000DC8C();
  __chkstk_darwin(v12);
  sub_10000DD5C();
  uint64_t v94 = v13;
  uint64_t v93 = sub_10008BE90();
  uint64_t v14 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  sub_10000DD5C();
  unint64_t v97 = (uint64_t *)v15;
  uint64_t v16 = sub_100078EE4();
  sub_1000308B8(v16, v17, a3, v18);
  BOOL v98 = v10;
  uint64_t v20 = a1;
  if (*((void *)&v105 + 1))
  {
    int v21 = sub_100010BA4( (uint64_t)&v100,  (uint64_t)&v104,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
    if (v21) {
      uint64_t v22 = v100;
    }
    else {
      uint64_t v22 = 0LL;
    }
    if (v21) {
      Swift::String v23 = v101;
    }
    else {
      Swift::String v23 = 0LL;
    }
  }

  else
  {
    sub_10008BDDC(v19, &qword_1001CAAD0);
    uint64_t v22 = 0LL;
    Swift::String v23 = 0LL;
  }

  uint64_t v24 = &type metadata for String;
  char v25 = *((_BYTE *)v4 + OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1);
  uint64_t v26 = sub_10008BD98();
  uint64_t v27 = sub_10008BD14(v26);
  *(_BYTE *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  sub_1000400D0();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 + 16);
  uint64_t v89 = v27;
  if (v30)
  {
    uint64_t v99 = v30;
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_10000D33C(&qword_1001C8F18);
    uint64_t v4 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v31,  &protocol witness table for String);
    uint64_t v32 = *(unsigned __int8 *)(v14 + 80);
    uint64_t v88 = v29;
    uint64_t v33 = v29 + ((v32 + 32) & ~v32);
    uint64_t v90 = *(void *)(v14 + 72);
    __int128 v92 = xmmword_1001649E0;
    uint64_t v91 = (char *)&type metadata for Any + 8;
    uint64_t v34 = v97;
    while (1)
    {
      BOOL v98 = (char *)v33;
      sub_100039F1C(v33, (uint64_t)v34);
      uint64_t v35 = sub_10000D33C(&qword_1001C8BC0);
      uint64_t inited = swift_initStackObject(v35, &v103);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v92;
      sub_10008BFD8();
      *(void *)(v37 + 32) = v38;
      *(void *)(v37 + 40) = 0xE800000000000000LL;
      uint64_t v39 = v34[3];
      *(void *)(inited + 48) = v34[2];
      *(void *)(inited + 56) = v39;
      *(void *)(inited + 72) = v24;
      *(void *)(inited + 80) = 0x64657461657263LL;
      *(void *)(inited + 88) = 0xE700000000000000LL;
      uint64_t v40 = (int *)v93;
      swift_bridgeObjectRetain(v39);
      *(double *)(inited + 96) = Date.timeIntervalSince1970.getter(v41) * 1000.0;
      *(void *)(inited + 120) = &type metadata for Double;
      *(void *)(inited + 128) = 0x73657269707865LL;
      *(void *)(inited + 136) = 0xE700000000000000LL;
      uint64_t v42 = (char *)v34 + v40[8];
      *(double *)(inited + 144) = Date.timeIntervalSince1970.getter(v43) * 1000.0;
      *(void *)(inited + 168) = &type metadata for Double;
      *(void *)(inited + 176) = 0x64657269707865LL;
      *(void *)(inited + 184) = 0xE700000000000000LL;
      uint64_t v44 = v94;
      Date.init()(v45);
      LOBYTE(v42) = static Date.< infix(_:_:)(v42, v44);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v44, v96);
      *(_BYTE *)(inited + 192) = v42 & 1;
      *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Bool;
      *(void *)(inited + 224) = 0x6574617473LL;
      *(void *)(inited + 232) = 0xE500000000000000LL;
      *(void *)(inited + 240) = *((unsigned __int8 *)v34 + v40[10]);
      *(void *)(inited + 264) = &type metadata for Int;
      *(void *)(inited + 272) = 1752457584LL;
      *(void *)(inited + 280) = 0xE400000000000000LL;
      uint64_t v46 = (uint64_t *)((char *)v34 + v40[9]);
      uint64_t v48 = *v46;
      uint64_t v47 = v46[1];
      sub_10000D33C(&qword_1001C9760);
      *(void *)(inited + 288) = v48;
      *(void *)(inited + 296) = v47;
      sub_10008BF94();
      *(void *)(inited + 312) = v49;
      *(void *)(inited + 320) = v50;
      *(void *)(inited + 328) = 0xE700000000000000LL;
      uint64_t v51 = (uint64_t *)((char *)v34 + v40[12]);
      uint64_t v53 = *v51;
      uint64_t v52 = v51[1];
      *(void *)(inited + 336) = *v51;
      *(void *)(inited + 344) = v52;
      *(void *)(inited + 360) = v24;
      *(void *)(inited + 368) = 0x79654B6863746162LL;
      *(void *)(inited + 376) = 0xE900000000000073LL;
      uint64_t v54 = *v34;
      *(void *)(inited + 408) = sub_10000D33C(&qword_1001CDF50);
      *(void *)(inited + 384) = v54;
      swift_bridgeObjectRetain(v47);
      sub_10000DF10();
      sub_10000DEB4();
      Swift::String v23 = v24;
      uint64_t v55 = Dictionary.init(dictionaryLiteral:)(inited, v24, v91, &protocol witness table for String);
      sub_10000DF10();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      *(void *)&__int128 v104 = v4;
      unint64_t v57 = sub_100030CCC(v53, v52);
      uint64_t v59 = v4[2];
      BOOL v60 = (v58 & 1) == 0;
      uint64_t v4 = (void *)(v59 + v60);
      if (__OFADD__(v59, v60))
      {
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }

      unint64_t v61 = v57;
      char v62 = v58;
      sub_10000D33C(&qword_1001CA070);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v4))
      {
        unint64_t v63 = sub_100030CCC(v53, v52);
        if ((v62 & 1) != (v64 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          __break(1u);
          return result;
        }

        unint64_t v61 = v63;
      }

      uint64_t v4 = (void *)v104;
      if ((v62 & 1) != 0)
      {
        uint64_t v65 = *(void *)(v104 + 56);
        swift_bridgeObjectRelease();
        *(void *)(v65 + 8 * v6Hasher._combine(_:)(v1 & 1) = v55;
      }

      else
      {
        *(void *)(v104 + 8 * (v61 >> 6) + 64) |= 1LL << v61;
        uint64_t v66 = (uint64_t *)(v4[6] + 16 * v61);
        *uint64_t v66 = v53;
        v66[1] = v52;
        *(void *)(v4[7] + 8 * v6Hasher._combine(_:)(v1 & 1) = v55;
        uint64_t v67 = v4[2];
        BOOL v68 = __OFADD__(v67, 1LL);
        uint64_t v69 = v67 + 1;
        if (v68) {
          goto LABEL_31;
        }
        v4[2] = v69;
        sub_10000DF10();
      }

      sub_10000DE2C();
      swift_bridgeObjectRelease();
      uint64_t v34 = v97;
      sub_100019EC0((uint64_t)v97, type metadata accessor for ContentInfo);
      uint64_t v33 = (uint64_t)&v98[v90];
      --v99;
      uint64_t v24 = v23;
      if (!v99)
      {
        swift_bridgeObjectRelease();
        sub_100054328((uint64_t)v4);
        uint64_t v71 = v70;
        swift_bridgeObjectRelease();
        swift_release(v89);
        return v71;
      }
    }
  }

  uint64_t v94 = v22;
  unint64_t v97 = (uint64_t *)v20;
  sub_100009070();
  if (qword_1001C7FB0 != -1) {
LABEL_32:
  }
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  uint64_t v96 = qword_1001DBB30;
  sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100010678();
  uint64_t v74 = v73 & ~v72;
  uint64_t v95 = v75;
  uint64_t v76 = sub_10001059C(v74 + 2 * v75, v72);
  *(_OWORD *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *((void *)&v105 + Hasher._combine(_:)(v1 & 1) = type metadata accessor for JSContent();
  *(void *)&__int128 v104 = v4;
  id v77 = (id)AMSLogKey(v4);
  if (v77)
  {
    uint64_t v78 = sub_1000105E8((uint64_t)v77);
    sub_10008BF38();
    sub_10000DF10();
    sub_100010564();
    sub_100037DD0();
    sub_1000104C0(&v104);
    uint64_t v79 = sub_100010530();
    sub_10008BE7C(v79);
    sub_10008BE10((uint64_t)&v100);
    sub_10000DC14();
    uint64_t v102 = &type metadata for String;
    uint64_t v100 = v78;
    uint64_t v101 = (void *)v74;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v100);
    sub_10008BE10((uint64_t)&v100);
    sub_10000DC4C(93LL);
    sub_10007CA40();
    sub_10000DE2C();
  }

  else
  {
    sub_10001A1BC();
    sub_100037DD0();
    sub_1000104C0(&v104);
    uint64_t v80 = sub_100010530();
    sub_10008BE7C(v80);
    sub_100019E6C((uint64_t)&v100, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10007CA40();
  }

  sub_10008BFBC();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(49LL, 2LL);
  v81._object = (void *)0x8000000100170550LL;
  v81._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v81);
  *((void *)&v105 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
  sub_10008BF80(v99, (uint64_t)v97);
  uint64_t v82 = sub_10000DEA4();
  sub_10008BDDC(v82, &qword_1001CAAD0);
  v83._uint64_t countAndFlagsBits = 0x6F6973726576202CLL;
  v83._object = (void *)0xEB00000000203A6ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v83);
  if (v23)
  {
    *((void *)&v105 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
    *(void *)&__int128 v104 = v94;
    *((void *)&v104 + Hasher._combine(_:)(v1 & 1) = v23;
  }

  else
  {
    __int128 v104 = 0u;
    __int128 v105 = 0u;
  }

  uint64_t v84 = sub_10000DEA4();
  sub_10008BDDC(v84, &qword_1001CAAD0);
  sub_10000DC4C(41LL);
  uint64_t v85 = sub_10000DC5C();
  uint64_t v86 = static os_log_type_t.default.getter(v85);
  sub_1000BD1B0(v86, v76);
  swift_release(v89);
  sub_100020AB8();
  return 0LL;
}

void sub_10008909C()
{
  char v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1);
  uint64_t v2 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v2) + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  sub_10004050C();
  sub_100039A34(v3);
  sub_1000292C4();
  sub_100009020();
  sub_10000DFE8();
}

void sub_100089190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  char v25 = v24;
  uint64_t v116 = v26;
  uint64_t v118 = v27;
  uint64_t v115 = v28;
  sub_100029328();
  sub_10000DC8C();
  __chkstk_darwin(v29);
  sub_10000DD5C();
  uint64_t v104 = v30;
  uint64_t v107 = type metadata accessor for Date(0LL);
  uint64_t v106 = *(void *)(v107 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v31);
  sub_10000DD5C();
  __int128 v105 = v32;
  sub_10000D33C(&qword_1001C8FE0);
  sub_10000DC64();
  __chkstk_darwin(v33);
  sub_10000DD5C();
  uint64_t v113 = v34;
  uint64_t v35 = sub_10008BE90();
  sub_10000DC64();
  __chkstk_darwin(v36);
  sub_10000DE7C();
  uint64_t v39 = v38 - v37;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v40);
  sub_10000DE7C();
  char v41 = v20[OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1];
  uint64_t v42 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v42) + swift_unknownObjectWeakDestroy(v0 + 16) = v41;
  uint64_t v43 = sub_100078EE4();
  sub_1000308B8(v43, v44, (uint64_t)v25, v45);
  if (v125) {
    sub_100010BA4( (uint64_t)&v120,  (uint64_t)&v123,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
  }
  else {
    sub_10008C02C(v46, &qword_1001CAAD0);
  }
  uint64_t v114 = v35;
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v47 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_10008BFF8();
  uint64_t v50 = v49 & ~v48;
  uint64_t v111 = v47;
  uint64_t v108 = v50 + 5 * v21;
  uint64_t v51 = sub_100048B40(v47, v108, v48 | 7, (uint64_t)&a12);
  *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
  uint64_t v112 = v50;
  uint64_t v52 = type metadata accessor for JSContent();
  id v110 = sub_10008BF18(v52, (uint64_t)&a13);
  id v53 = (id)AMSLogKey(v110);
  if (v53)
  {
    uint64_t v109 = v25;
    uint64_t v54 = v39;
    uint64_t v55 = sub_1000105E8((uint64_t)v53);
    uint64_t v57 = v56;

    swift_bridgeObjectRetain(v57);
    sub_100010564();
    sub_10000DEBC();
    sub_1000104C0(&v123);
    uint64_t v58 = sub_100010530();
    sub_10008BD20(v58);
    sub_10008BDAC((uint64_t)&v120);
    sub_10000DC14();
    uint64_t v122 = &type metadata for String;
    uint64_t v120 = v55;
    uint64_t v121 = v57;
    uint64_t v39 = v54;
    char v25 = v109;
    sub_100048640();
    sub_10008BDAC((uint64_t)&v120);
    sub_10000DC4C(93LL);
    sub_10008BDA0();
    sub_1000090CC();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DEBC();
    sub_1000104C0(&v123);
    uint64_t v59 = sub_100010530();
    uint64_t v60 = sub_10008BD20(v59);
    sub_10008BEBC(v60, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10008BDA0();
  }

  sub_100048738();
  sub_1000105B4(0xD00000000000001ALL);
  uint64_t v125 = &type metadata for String;
  id v123 = v116;
  uint64_t v124 = v118;
  swift_bridgeObjectRetain(v118);
  sub_10004866C((uint64_t)&v123);
  sub_10008BD84();
  sub_10008BE30();
  uint64_t v61 = sub_10000D33C(&qword_1001C8F18);
  uint64_t v125 = (void *)v61;
  id v123 = v25;
  sub_10000DF9C();
  sub_10008C034();
  sub_10008BD84();
  uint64_t v63 = static os_log_type_t.default.getter(v62);
  sub_1000BD1B0(v63, v51);
  sub_100009020();
  sub_1000400D0();
  uint64_t v65 = v64;
  sub_1000090CC();
  uint64_t v66 = (void *)v113;
  sub_100101070(v65, v113);
  sub_100009020();
  if (sub_1000102D4(v113, 1LL, v114) == 1)
  {
    sub_100019E6C(v113, &qword_1001C8FE0);
LABEL_17:
    uint64_t v79 = sub_100048784(v111, v108, (uint64_t)&a12);
    *(_OWORD *)(v79 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
    id v80 = sub_10008BDE4();
    id v81 = (id)AMSLogKey(v80);
    if (v81)
    {
      uint64_t v82 = sub_1000105E8((uint64_t)v81);
      uint64_t v84 = v83;

      swift_bridgeObjectRetain(v84);
      sub_100010564();
      sub_10000DEBC();
      sub_1000104C0(&v123);
      uint64_t v85 = sub_100010530();
      sub_10008BD20(v85);
      sub_10008BE10((uint64_t)&v120);
      sub_10000DC14();
      uint64_t v122 = &type metadata for String;
      uint64_t v120 = v82;
      uint64_t v121 = v84;
      sub_100048640();
      sub_10008BE10((uint64_t)&v120);
      sub_10000DC4C(93LL);
      sub_10008BF88();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DEBC();
      sub_1000104C0(&v123);
      uint64_t v86 = sub_100010530();
      uint64_t v87 = sub_10008BD20(v86);
      sub_10008BEBC(v87, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10008BF88();
    }

    sub_100048738();
    sub_1000105B4(0xD000000000000022LL);
    uint64_t v125 = &type metadata for String;
    sub_10008BF70(v118, (uint64_t)v116);
    sub_10004866C((uint64_t)&v123);
    sub_10008BD84();
    sub_10008BE30();
    uint64_t v125 = (void *)v61;
    id v123 = v25;
    sub_10000DF9C();
    sub_10008C034();
    sub_10008BD84();
    uint64_t v89 = static os_log_type_t.default.getter(v88);
    sub_1000BD1B0(v89, v79);
    sub_10000DE2C();
    sub_10008BE74();
    goto LABEL_21;
  }

  sub_10008AB2C(v113, v39, type metadata accessor for ContentInfo);
  uint64_t v67 = v39 + *(int *)(v114 + 32);
  uint64_t v66 = v105;
  Date.init()(v68);
  LOBYTE(v67) = static Date.< infix(_:_:)(v67, v105);
  (*(void (**)(void *, uint64_t))(v106 + 8))(v105, v107);
  if ((v67 & 1) != 0 || (v69 = v39 + *(int *)(v114 + 36), (uint64_t v70 = *(void *)(v69 + 8)) == 0))
  {
    sub_100019EC0(v39, type metadata accessor for ContentInfo);
    goto LABEL_17;
  }

  uint64_t v71 = *(void **)v69;
  __n128 v72 = swift_bridgeObjectRetain(v70);
  URL.init(fileURLWithPath:)(v71, v70, v72);
  Data.init(contentsOf:options:)(v104, 0LL);
  uint64_t v90 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v123 = 0LL;
  id v92 = [v90 JSONObjectWithData:isa options:0 error:&v123];

  id v93 = v123;
  if (v92)
  {
    sub_10000DCFC();
    _bridgeAnyObjectToAny(_:)(v92);
    sub_10008BF58();
    sub_10008BE74();
    swift_unknownObjectRelease(v92);
    sub_10008BDB4();
    sub_100019EC0(v39, type metadata accessor for ContentInfo);
    goto LABEL_22;
  }

  uint64_t v101 = v93;
  uint64_t v102 = _convertNSErrorToError(_:)(v93);

  swift_willThrow(v103);
  sub_10008BF58();
  uint64_t v117 = v39;
  uint64_t v73 = qword_1001DBB30;
  uint64_t v74 = sub_100048784(v111, v112 + 2 * v21, (uint64_t)&a12);
  *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  id v75 = sub_10008BDE4();
  id v76 = (id)AMSLogKey(v75);
  if (v76)
  {
    uint64_t v77 = sub_1000105E8((uint64_t)v76);
    sub_10008BFB4();
    sub_100048A30();
    sub_100010564();
    sub_10000DEBC();
    sub_1000104C0(&v123);
    uint64_t v78 = sub_100010530();
    sub_10008BD20(v78);
    sub_10008BEE8((uint64_t)&v120);
    sub_10000DC14();
    uint64_t v122 = &type metadata for String;
    uint64_t v120 = v77;
    uint64_t v121 = v73;
    sub_100048640();
    sub_10008BEE8((uint64_t)&v120);
    sub_10000DC4C(93LL);
    sub_10008BDA0();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DEBC();
    sub_1000104C0(&v123);
    uint64_t v94 = sub_100010530();
    uint64_t v95 = sub_10008BD20(v94);
    sub_10008BEBC(v95, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10008BDA0();
  }

  sub_100048738();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(24LL, 2LL);
  v96._object = (void *)0x8000000100170530LL;
  v96._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v96);
  uint64_t v125 = &type metadata for String;
  id v123 = v71;
  uint64_t v124 = v70;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v123);
  sub_10008BEE8((uint64_t)&v123);
  v97._uint64_t countAndFlagsBits = 8236LL;
  v97._object = (void *)0xE200000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v97);
  swift_getErrorValue(v102, &v119);
  BOOL v98 = sub_10008BED8();
  sub_10008BEC4((uint64_t)v98);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v123);
  sub_10008BEE8((uint64_t)&v123);
  sub_10000DC08();
  uint64_t v99 = sub_10008BDA0();
  uint64_t v100 = static os_log_type_t.error.getter(v99);
  sub_10008C024(v100, v74);
  sub_100020AB8();
  sub_10008BE74();
  swift_errorRelease(v102);
  sub_10008BDB4();
  sub_100019EC0(v117, type metadata accessor for ContentInfo);
LABEL_21:
  *uint64_t v115 = 0u;
  v115[1] = 0u;
LABEL_22:
  sub_10000DD84();
}

void sub_100089C70()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_100010678();
  uint64_t v10 = swift_allocObject(v6, (v9 & ~v8) + 3 * v7, v8 | 7);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v31 = (void *)type metadata accessor for JSContent();
  v30[0] = v0;
  uint64_t v11 = v0;
  id v12 = (id)AMSLogKey(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v16 = v15;

    sub_1000489DC();
    sub_100010564();
    sub_10000DC08();
    uint64_t v17 = v31;
    uint64_t v18 = sub_10000D37C(v30, (uint64_t)v31);
    uint64_t v19 = sub_10000DC54((uint64_t)v18, (uint64_t)v17);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v19);
    v28[0] = v19;
    sub_10000DEA4();
    sub_10008BD48((uint64_t)v28);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v28[0] = v14;
    v28[1] = v16;
    sub_10000DEA4();
    sub_10008BD48((uint64_t)v28);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE74();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v20 = v31;
    uint64_t v21 = sub_10000D37C(v30, (uint64_t)v31);
    uint64_t v22 = sub_10000DC54((uint64_t)v21, (uint64_t)v20);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    v28[0] = v22;
    uint64_t v23 = sub_10000DEA4();
    sub_10008BDDC(v23, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v30);
  sub_10000E008();
  sub_10000DD38(17LL);
  uint64_t v31 = &type metadata for String;
  v30[0] = v4;
  v30[1] = v2;
  sub_10000DEE0();
  sub_10004866C((uint64_t)v30);
  sub_100019E6C((uint64_t)v30, &qword_1001CAAD0);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_10008C024(v25, v10);
  sub_10000DDF8();
  char v26 = v11[OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1];
  uint64_t v27 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v27) + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
  sub_100040AD4();
  sub_1000292C4();
  sub_10000DD84();
}

uint64_t sub_100089F08(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease(v8);
}

void sub_100089F5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v77 = v25;
  uint64_t v78 = v26;
  uint64_t v75 = v28;
  uint64_t v76 = v27;
  uint64_t v74 = v29;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v30);
  sub_100048C04();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v31 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v32 = *(void *)(sub_10002C79C() - 8);
  uint64_t v33 = *(void *)(v32 + 72);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = (v34 + 32) & ~v34;
  uint64_t v73 = v31;
  uint64_t v36 = sub_100048B40(v31, v35 + 5 * v33, v34 | 7, (uint64_t)&a17);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
  uint64_t v37 = type metadata accessor for JSContent();
  id v38 = sub_10008BF18(v37, (uint64_t)&a16);
  id v39 = (id)AMSLogKey(v38);
  if (v39)
  {
    uint64_t v40 = sub_1000105E8((uint64_t)v39);
    uint64_t v42 = v41;

    sub_10000DF9C();
    sub_100010564();
    sub_1000104F0();
    sub_1000104C0(&v82);
    uint64_t v43 = sub_100010530();
    sub_1000485E0(v43);
    sub_10008BDAC((uint64_t)&v80);
    sub_10000DC14();
    id v81 = &type metadata for String;
    v80._uint64_t countAndFlagsBits = v40;
    v80._object = v42;
    sub_100048640();
    sub_10008BDAC((uint64_t)&v80);
    sub_10000DC4C(93LL);
    sub_10001A298();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_1000104F0();
    sub_1000104C0(&v82);
    uint64_t v44 = sub_100010530();
    uint64_t v45 = sub_1000485E0(v44);
    sub_10008BEBC(v45, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10001A298();
  }

  sub_100048738();
  LogMessage.init(stringLiteral:)(0x6320676E69766153LL);
  uint64_t v83 = &type metadata for String;
  sub_10008BF70(v75, v76);
  sub_10004866C((uint64_t)&v82);
  sub_10008BD84();
  uint64_t v83 = &type metadata for String;
  sub_10008BF70(v78, v77);
  sub_10008BF78((uint64_t)&v82);
  sub_10008BD84();
  uint64_t v83 = (void *)sub_10000D33C(&qword_1001C8F18);
  *(void *)&__int128 v82 = v24;
  swift_bridgeObjectRetain(v24);
  sub_10008BF78((uint64_t)&v82);
  sub_10008BD84();
  uint64_t v47 = static os_log_type_t.default.getter(v46);
  sub_1000BD1B0(v47, v36);
  sub_10000DE74();
  uint64_t v48 = v38;
  char v49 = *((_BYTE *)v38 + OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1);
  sub_1000308B8(0x6974736575716572LL, 0xED0000707041676ELL, v24, &v82);
  if (v83)
  {
    if ((sub_100010BA4( (uint64_t)&v80,  (uint64_t)&v82,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
    {
      char v51 = sub_10001C9CC(v80);
      if (v51 != 4) {
        char v49 = v51;
      }
    }
  }

  else
  {
    sub_10008C02C(v50, &qword_1001CAAD0);
  }

  uint64_t v52 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v52) + swift_unknownObjectWeakDestroy(v0 + 16) = v49;
  sub_10008AA34(v74);
  if (v53)
  {
    uint64_t v54 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_100009070();
    *(void *)&__int128 v82 = 0LL;
    id v56 = [v54 dataWithJSONObject:isa options:0 error:&v82];

    id v57 = (id)v82;
    if (v56)
    {
      uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      sub_10008BF38();
      sub_100054044(v24);
      sub_100040E9C();
      sub_100020AB8();
      sub_100020AD8();
      sub_10001BD84(v58, (unint64_t)v54);
    }

    else
    {
      uint64_t v59 = v57;
      uint64_t v60 = _convertNSErrorToError(_:)(v57);

      swift_willThrow(v61);
      uint64_t v62 = sub_100048784(v73, v35 + 3 * v33, (uint64_t)&a17);
      *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
      uint64_t v83 = v72;
      *(void *)&__int128 v82 = v48;
      id v63 = (id)AMSLogKey(v48);
      if (v63)
      {
        uint64_t v64 = sub_1000105E8((uint64_t)v63);
        sub_10008BF38();
        sub_10000DF10();
        sub_100010564();
        sub_1000104F0();
        sub_1000104C0(&v82);
        uint64_t v65 = sub_100010530();
        sub_1000485E0(v65);
        sub_10008BD48((uint64_t)&v80);
        sub_10000DC14();
        id v81 = &type metadata for String;
        v80._uint64_t countAndFlagsBits = v64;
        v80._object = v59;
        sub_100048640();
        sub_10008BD48((uint64_t)&v80);
        sub_10000DC4C(93LL);
        sub_10001A298();
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_1000104F0();
        sub_1000104C0(&v82);
        uint64_t v66 = sub_100010530();
        uint64_t v67 = sub_1000485E0(v66);
        sub_10008BEBC(v67, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_10001A298();
      }

      sub_100048738();
      sub_10000E008();
      sub_10000DD38(26LL);
      swift_getErrorValue(v60, &v79);
      uint64_t v68 = sub_10008BED8();
      sub_10008BEC4((uint64_t)v68);
      uint64_t v69 = sub_10004885C((uint64_t)&v82);
      sub_10008C02C(v69, &qword_1001CAAD0);
      uint64_t v71 = static os_log_type_t.error.getter(v70);
      sub_1000BD1B0(v71, v62);
      sub_100020AB8();
      sub_100020AD8();
      swift_errorRelease(v60);
    }
  }

  else
  {
    sub_100020AD8();
  }

  sub_10000DD84();
}

#error "10008A5B8: call analysis failed (funcsize=53)"
void sub_10008A5F0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *MetatypeMetadata;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  sub_1000292AC();
  uint64_t v2 = v1;
  uint64_t v42 = v3;
  uint64_t v43 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  char v41 = v9;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v40 = qword_1001DBB30;
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  id v12 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_100010678();
  uint64_t v15 = swift_allocObject(v11, (v14 & ~v13) + 4 * v12, v13 | 7);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
  uint64_t v50 = (void *)type metadata accessor for JSContent();
  uint64_t v48 = (uint64_t)v0;
  uint64_t v16 = v0;
  uint64_t v17 = (id)AMSLogKey(v16);
  if (v17)
  {
    uint64_t v18 = v17;
    id v39 = v6;
    uint64_t v19 = v2;
    uint64_t v20 = v8;
    uint64_t v21 = v16;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    sub_100010564();
    sub_10000DC08();
    uint64_t v25 = v50;
    uint64_t v26 = sub_10000D37C(&v48, (uint64_t)v50);
    uint64_t v27 = sub_10000DC54((uint64_t)v26, (uint64_t)v25);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    uint64_t v44 = v27;
    sub_10000DEA4();
    sub_10008BD48((uint64_t)&v44);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v44 = v22;
    uint64_t v45 = v24;
    uint64_t v16 = v21;
    uint64_t v8 = v20;
    uint64_t v2 = v19;
    uint64_t v6 = v39;
    sub_10000DEA4();
    sub_10008BD48((uint64_t)&v44);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100020AB8();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v28 = v50;
    uint64_t v29 = sub_10000D37C(&v48, (uint64_t)v50);
    uint64_t v30 = sub_10000DC54((uint64_t)v29, (uint64_t)v28);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v30);
    uint64_t v44 = v30;
    uint64_t v31 = sub_10000DEA4();
    sub_10008BDDC(v31, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v48);
  sub_10000E008();
  sub_10000DD38(16LL);
  uint64_t v50 = &type metadata for String;
  uint64_t v48 = v8;
  char v49 = v6;
  sub_10000DF10();
  sub_10004866C((uint64_t)&v48);
  sub_10008BD90((uint64_t)&v48);
  uint64_t v50 = &type metadata for String;
  uint64_t v48 = v43;
  char v49 = v2;
  sub_10000DEE0();
  static LogMessage.safe(_:)(&v48);
  sub_10008BD90((uint64_t)&v48);
  uint64_t v33 = static os_log_type_t.default.getter(v32);
  sub_1000BD1B0(v33, v15);
  swift_bridgeObjectRelease();
  uint64_t v34 = v16[OBJC_IVAR____TtC14amsengagementd9JSContent_config + 1];
  uint64_t v35 = sub_10008BD98();
  *(_BYTE *)(sub_10008BD14(v35) + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
  sub_100041B68( v41,  v42,  v8,  v6,  v43,  v2,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  (uint64_t)MetatypeMetadata,  v48,  v49);
  sub_1000292C4();
  sub_10000DD84();
}

void sub_10008A970()
{
}

id sub_10008A9A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSContent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSContent()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSContent);
}

void sub_10008AA34(void *a1)
{
  id v1 = [a1 toDictionary];
  if (v1)
  {
    objc_super v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_100009044();
}

uint64_t type metadata accessor for JSContent.Request(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CB6F0, (uint64_t)&nominal type descriptor for JSContent.Request);
}

unint64_t sub_10008AAAC()
{
  unint64_t result = qword_1001CB5E8;
  if (!qword_1001CB5E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166948, &unk_1001AC528);
    atomic_store(result, (unint64_t *)&qword_1001CB5E8);
  }

  return result;
}

uint64_t type metadata accessor for JSContent.CacheRequest(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CB658, (uint64_t)&nominal type descriptor for JSContent.CacheRequest);
}

uint64_t sub_10008AAFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void sub_10008AB2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  sub_100009044();
}

unint64_t sub_10008AB6C()
{
  unint64_t result = qword_1001CB5F8;
  if (!qword_1001CB5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166908, &unk_1001AC498);
    atomic_store(result, (unint64_t *)&qword_1001CB5F8);
  }

  return result;
}

uint64_t sub_10008ABAC(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void sub_10008ABB4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  sub_100009044();
}

uint64_t sub_10008ABE4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 sub_10008AC2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10008AC40(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10008AC78(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }

    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10008ACCC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
    }
  }

  return result;
}

void type metadata accessor for JSContent.BatchOptions()
{
}

uint64_t sub_10008AD2C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10008AD78 + 4 * byte_10016675D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10008ADAC + 4 * byte_100166758[v4]))();
}

uint64_t sub_10008ADAC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008ADB4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10008ADBCLL);
  }
  return result;
}

uint64_t sub_10008ADC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008ADD0LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_10008ADD4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008ADDC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for JSContent.CacheRequest.CacheRequestError()
{
}

uint64_t *sub_10008ADF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v25 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v25);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    __n128 v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    uint64_t v15 = (int *)type metadata accessor for JSContent.Request(0LL);
    uint64_t v16 = v15[5];
    uint64_t v17 = *(void *)&v11[v16];
    *(void *)&v10[v16] = v17;
    v10[v15[6]] = v11[v15[6]];
    uint64_t v18 = v15[7];
    uint64_t v19 = &v10[v18];
    uint64_t v20 = &v11[v18];
    uint64_t v21 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + Hasher._combine(_:)(v1 & 1) = v21;
    uint64_t v22 = *(int *)(a3 + 28);
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (char *)a2 + v22;
    v23[2] = v24[2];
    *(_WORD *)uint64_t v23 = *(_WORD *)v24;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
  }

  return v4;
}

uint64_t sub_10008AF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  type metadata accessor for JSContent.Request(0LL);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_10008AF90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  __n128 v13 = swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11, v13);
  __n128 v14 = (int *)type metadata accessor for JSContent.Request(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = *(void *)&v10[v15];
  *(void *)&v9[v15] = v16;
  v9[v14[6]] = v10[v14[6]];
  uint64_t v17 = v14[7];
  uint64_t v18 = &v9[v17];
  uint64_t v19 = &v10[v17];
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = *(void *)v19;
  *((void *)v18 + Hasher._combine(_:)(v1 & 1) = v20;
  uint64_t v21 = *(int *)(a3 + 28);
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  v22[2] = v23[2];
  *(_WORD *)uint64_t v22 = *(_WORD *)v23;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  return a1;
}

void *sub_10008B088(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  uint64_t v12 = (int *)type metadata accessor for JSContent.Request(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = *(void *)&v10[v13];
  *(void *)&v9[v13] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v9[v12[6]] = v10[v12[6]];
  uint64_t v15 = v12[7];
  uint64_t v16 = &v9[v15];
  uint64_t v17 = &v10[v15];
  *(void *)uint64_t v16 = *(void *)v17;
  uint64_t v18 = *((void *)v17 + 1);
  *((void *)v16 + Hasher._combine(_:)(v1 & 1) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  return a1;
}

_OWORD *sub_10008B1B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for JSContent.Request(0LL);
  *(void *)&v8[v11[5]] = *(void *)&v9[v11[5]];
  v8[v11[6]] = v9[v11[6]];
  *(_OWORD *)&v8[v11[7]] = *(_OWORD *)&v9[v11[7]];
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(_WORD *)uint64_t v13 = *(_WORD *)v14;
  v13[2] = v14[2];
  return a1;
}

void *sub_10008B26C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = (int *)type metadata accessor for JSContent.Request(0LL);
  *(void *)&v9[v12[5]] = *(void *)&v10[v12[5]];
  swift_bridgeObjectRelease();
  v9[v12[6]] = v10[v12[6]];
  uint64_t v13 = v12[7];
  uint64_t v14 = &v9[v13];
  uint64_t v15 = &v10[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + Hasher._combine(_:)(v1 & 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  v19[2] = v20[2];
  return a1;
}

uint64_t sub_10008B35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B368);
}

void sub_10008B368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10008BFC4(*(void *)(a1 + 8));
    sub_10000DFE8();
  }

  else
  {
    uint64_t v6 = sub_10008C00C();
    sub_10008BE48(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_10008B3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B3C8);
}

void sub_10008B3C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10000DFE8();
  }

  else
  {
    uint64_t v7 = sub_10008C00C();
    sub_10008BE54(a1 + *(int *)(a4 + 24), a2, a2, v7);
  }

uint64_t sub_10008B420(uint64_t a1)
{
  v4[0] = &unk_1001667C0;
  v4[1] = &unk_1001667C0;
  uint64_t result = type metadata accessor for JSContent.Request(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1001667D8;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10008B49C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10008B4E8 + 4 * byte_100166767[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10008B51C + 4 * byte_100166762[v4]))();
}

uint64_t sub_10008B51C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008B524(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10008B52CLL);
  }
  return result;
}

uint64_t sub_10008B538(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008B540LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10008B544(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008B54C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for JSContent.Request.RequestError()
{
}

void *sub_10008B564(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void *)((char *)a2 + v8);
    *(void *)((char *)a1 + v8) = v10;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = (void *)((char *)a1 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v14);
  }

  return a1;
}

uint64_t sub_10008B614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_10008B668(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_10008B6EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10008B790(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10008B800(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t *)(a2 + v9);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  uint64_t v14 = v10[1];
  *uint64_t v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10008B888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008B894);
}

void sub_10008B894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100029328();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    sub_10008BE48(a1, a2, v6);
  }

  else
  {
    sub_10008BFC4(*(void *)(a1 + *(int *)(a3 + 20)));
    sub_10000DFE8();
  }

uint64_t sub_10008B8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008B8F8);
}

void sub_10008B8F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100029328();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_10008BE54(a1, a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
    sub_10000DFE8();
  }

uint64_t sub_10008B958(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_100166808;
    void v4[3] = &unk_100166820;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_10008B9E4()
{
  unint64_t result = qword_1001CB730;
  if (!qword_1001CB730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166878, &unk_1001AC528);
    atomic_store(result, (unint64_t *)&qword_1001CB730);
  }

  return result;
}

unint64_t sub_10008BA24()
{
  unint64_t result = qword_1001CB738;
  if (!qword_1001CB738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001668E0, &unk_1001AC498);
    atomic_store(result, (unint64_t *)&qword_1001CB738);
  }

  return result;
}

uint64_t sub_10008BA60(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t sub_10008BA74(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v3 = -1;
    return (v3 + 1);
  }

  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3)) {
        goto LABEL_5;
      }
    }

    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
      {
LABEL_5:
        int v3 = (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
        return (v3 + 1);
      }
    }
  }

  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v3 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_10008BAEC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(_BYTE *)(result + 3) = v4;
      }
    }
  }

  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(_BYTE *)unint64_t result = a2 + 1;
      return result;
    }

    *(_BYTE *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }

  return result;
}

void type metadata accessor for JSContent.Options()
{
}

uint64_t sub_10008BB84(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }

uint64_t sub_10008BC0C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10008BC58 + 4 * byte_100166771[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10008BC8C + 4 * byte_10016676C[v4]))();
}

uint64_t sub_10008BC8C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008BC94(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10008BC9CLL);
  }
  return result;
}

uint64_t sub_10008BCA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10008BCB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10008BCB4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10008BCBC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

void type metadata accessor for JSContent.Request.Method()
{
}

unint64_t sub_10008BCD8()
{
  unint64_t result = qword_1001CB740;
  if (!qword_1001CB740)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166A10, &unk_1001AC640);
    atomic_store(result, (unint64_t *)&qword_1001CB740);
  }

  return result;
}

uint64_t sub_10008BD14(uint64_t a1)
{
  return swift_allocObject(a1, 17LL, 7LL);
}

uint64_t sub_10008BD20(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  *(void *)(v2 - 160) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 160);
}

uint64_t sub_10008BD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 168, v5 - 112, v4 + 8, a4, 6LL);
}

void sub_10008BD48(uint64_t a1)
{
}

id sub_10008BD50(uint64_t a1)
{
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v1 - 288);
  *(void *)(v1 - 96) = *(void *)(v1 - 304);
  uint64_t v2 = *(void **)(v1 - 272);
  *(void *)(v1 - 120) = v2;
  return v2;
}

void sub_10008BD84()
{
}

void sub_10008BD90(uint64_t a1)
{
}

uint64_t sub_10008BD98()
{
  return type metadata accessor for ContentManager();
}

uint64_t sub_10008BDA0()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_10008BDAC(uint64_t a1)
{
}

uint64_t sub_10008BDB4()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 408) + 8LL))( *(void *)(v0 - 392),  *(void *)(v0 - 400));
}

void sub_10008BDD4(uint64_t a1, uint64_t *a2)
{
}

void sub_10008BDDC(uint64_t a1, uint64_t *a2)
{
}

id sub_10008BDE4()
{
  *(void *)(v0 - 104) = *(void *)(v0 - 304);
  uint64_t v1 = *(void **)(v0 - 296);
  *(void *)(v0 - 128) = v1;
  return v1;
}

void sub_10008BE00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15)
{
}

void sub_10008BE10(uint64_t a1)
{
}

uint64_t sub_10008BE18()
{
  return swift_allocObject(*(void *)(v0 - 256), *(void *)(v0 - 296), *(void *)(v0 - 264));
}

uint64_t sub_10008BE30()
{
  return LogMessage.init(stringLiteral:)(0x736E6F6974706FLL);
}

uint64_t sub_10008BE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000102D4(a1, a2, a3);
}

uint64_t sub_10008BE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D5C0(a1, a2, a3, a4);
}

uint64_t sub_10008BE60(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_10008BE74()
{
  return swift_release(*(void *)(v0 - 208));
}

uint64_t sub_10008BE7C(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  *(void *)(v1 + 112) = v2;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 112);
}

uint64_t sub_10008BE90()
{
  return type metadata accessor for ContentInfo(0LL);
}

uint64_t sub_10008BE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

void sub_10008BEA8(uint64_t a1)
{
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  sub_1000402C4();
}

void sub_10008BEBC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10008BEC4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

void *sub_10008BED8()
{
  *(void *)(v0 - 104) = *(void *)(v0 - 192);
  return sub_10000D63C((void *)(v0 - 128));
}

void sub_10008BEE8(uint64_t a1)
{
}

void sub_10008BEF0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10008BEF8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_10008BF08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17)
{
}

id sub_10008BF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = a1;
  *(void *)(v3 - 104) = a1;
  *(void *)(v3 - 128) = v2;
  return v2;
}

id sub_10008BF28(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  uint64_t v2 = *(void **)(v1 - 232);
  *(void *)(v1 - 144) = v2;
  return v2;
}

void sub_10008BF38()
{
}

void *sub_10008BF40(uint64_t a1, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, 0LL);
}

uint64_t sub_10008BF50(uint64_t a1, uint64_t a2)
{
  return sub_1000BD1B0(a1, a2);
}

uint64_t sub_10008BF58()
{
  return sub_10001BD84(v1, v0);
}

void *sub_10008BF64()
{
  *(void *)(v1 - 96) = v0;
  return sub_10000D63C((void *)(v1 - 120));
}

uint64_t sub_10008BF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 128) = a2;
  *(void *)(v2 - 120) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10008BF78(uint64_t a1)
{
  return static LogMessage.safe(_:)(a1);
}

uint64_t sub_10008BF80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 144) = a2;
  *(void *)(v2 - 136) = a1;
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_10008BF88()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

  ;
}

void sub_10008BFA8()
{
}

void sub_10008BFB4()
{
}

uint64_t sub_10008BFBC()
{
  return sub_10000D3A0((void *)(v0 - 144));
}

uint64_t sub_10008BFC4@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(aHasher._combine(_:)(v1 & 1) = -1;
  }
  return (a1 + 1);
}

  ;
}

id sub_10008BFEC(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = v1;
  return v1;
}

  ;
}

uint64_t sub_10008C00C()
{
  return type metadata accessor for JSContent.Request(0LL);
}

uint64_t sub_10008C014(uint64_t a1, ...)
{
  return sub_10000E854((uint64_t)va);
}

void sub_10008C01C( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_10008C024(uint64_t a1, uint64_t a2)
{
  return sub_1000BD1B0(a1, a2);
}

void sub_10008C02C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10008C034()
{
  return static LogMessage.safe(_:)(v0 - 128);
}

uint64_t sub_10008C040()
{
  return swift_willThrow();
}

uint64_t sub_10008C048(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for JSPromise(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    id v11 = a1;
    swift_retain(a3);
    uint64_t v12 = JSPromise.init(in:executor:)(v11, a2, a3);
    if (v3)
    {
    }

    else
    {
      a3 = JSPromise.value.getter(v12);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
  }

  else
  {
    sub_100083BE0();
    uint64_t v13 = (void *)static JSContext.requiredCurrent.getter();
    __chkstk_darwin(v13);
    v15[-2] = a2;
    v15[-1] = a3;
    a3 = JSContext.propagateErrorsToExceptions(_:)(sub_10008C24C, &v15[-4]);
  }

  return a3;
}

uint64_t sub_10008C17C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for JSPromise(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = a1;
  swift_retain(a3);
  uint64_t v13 = JSPromise.init(in:executor:)(v12, a2, a3);
  if (!v4)
  {
    a3 = JSPromise.value.getter(v13);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  return a3;
}

uint64_t sub_10008C24C(void *a1)
{
  return sub_10008C17C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_10008C264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  uint64_t v27 = v2;
  swift_bridgeObjectRetain(a1);
  unsigned int v6 = (uint64_t *)(v5 + 40);
  uint64_t v7 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v8 = *v6;
    if (*(void *)(a2 + 16))
    {
      uint64_t v9 = *(v6 - 1);
      swift_bridgeObjectRetain_n(*v6, 2LL);
      unint64_t v10 = sub_100030CCC(v9, v8);
      if ((v11 & 1) != 0)
      {
        sub_10000DA1C(*(void *)(a2 + 56) + 32 * v10, (uint64_t)&v22);
      }

      else
      {
        __int128 v22 = 0u;
        __int128 v23 = 0u;
      }

      swift_bridgeObjectRelease();
      if (*((void *)&v23 + 1))
      {
        sub_10000DA58(&v22, &v19);
        *(void *)&__int128 v24 = v9;
        *((void *)&v24 + Hasher._combine(_:)(v1 & 1) = v8;
        sub_10000DA58(&v19, &v25);
        goto LABEL_11;
      }
    }

    else
    {
      __int128 v22 = 0u;
      __int128 v23 = 0u;
      swift_bridgeObjectRetain(v8);
    }

    sub_1000102E0((uint64_t)&v22, &qword_1001CAAD0);
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    swift_bridgeObjectRelease();
LABEL_11:
    if (*((void *)&v24 + 1))
    {
      __int128 v19 = v24;
      __int128 v20 = v25;
      __int128 v21 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100014410();
        uint64_t v7 = v16;
      }

      unint64_t v12 = v7[2];
      if (v12 >= v7[3] >> 1)
      {
        sub_100014410();
        uint64_t v7 = v17;
      }

      v7[2] = v12 + 1;
      uint64_t v13 = &v7[6 * v12];
      __int128 v14 = v19;
      __int128 v15 = v21;
      v13[3] = v20;
      v13[4] = v15;
      v13[2] = v14;
    }

    else
    {
      sub_1000102E0((uint64_t)&v24, &qword_1001CB7B8);
    }

    v6 += 2;
    --v4;
  }

  while (v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

void sub_10008C46C(uint64_t a1, void *a2)
{
  uint64_t v4 = v25[0];
  int64_t v5 = v25[3];
  unint64_t v6 = v25[4];
  uint64_t v17 = v25[1];
  int64_t v18 = (unint64_t)(v25[2] + 64LL) >> 6;
  __int128 v26 = v24;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  while (1)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    sub_10000DA1C(*(void *)(v4 + 56) + 32 * v8, (uint64_t)v26);
    *(void *)&__int128 v23 = v14;
    *((void *)&v23 + Hasher._combine(_:)(v1 & 1) = v15;
    __int128 v21 = v23;
    v22[0] = v24[0];
    v22[1] = v24[1];
    __int128 v16 = v23;
    sub_10000DA1C((uint64_t)v22, (uint64_t)v19);
    sub_10000DA58(v19, v20);
    swift_bridgeObjectRetain(v15);
    sub_10008DD08(v16, *((uint64_t *)&v16 + 1), (uint64_t)v20);
    sub_1000102E0((uint64_t)v20, &qword_1001CAAD0);
    sub_1000102E0((uint64_t)&v21, &qword_1001C9908);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v9 >= v18) {
      goto LABEL_21;
    }
    unint64_t v10 = *(void *)(v17 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v18) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(v17 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v5 + 3;
        if (v5 + 3 >= v18) {
          goto LABEL_21;
        }
        unint64_t v10 = *(void *)(v17 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 4;
          if (v5 + 4 >= v18) {
            goto LABEL_21;
          }
          unint64_t v10 = *(void *)(v17 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 5;
            if (v5 + 5 >= v18) {
              goto LABEL_21;
            }
            unint64_t v10 = *(void *)(v17 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v5 + 6;
              while (v12 < v18)
              {
                unint64_t v10 = *(void *)(v17 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10008C68C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  int64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DE7C();
  sub_10008E494();
  uint64_t v8 = v7;
  sub_10002AFDC(v3, v1, v5);
  return sub_10004875C(v8);
}

void sub_10008C970()
{
  unint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_100048C04();
  sub_10008E494();
  sub_10002B080(v1);
  sub_100025894();
  sub_10000DD84();
}

void sub_10008CBE0()
{
  unint64_t v1 = v0;
  unint64_t v3 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_100048C04();
  sub_10008E494();
  sub_10002B97C(v3, v1);
  sub_100025894();
  sub_10000DD84();
}

uint64_t sub_10008CE58()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_100048C04();
  sub_10008E494();
  uint64_t v8 = v7;
  sub_10002957C(v1, v5, v3);
  return sub_10004875C(v8);
}

uint64_t sub_10008D0A4()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_100048C04();
  sub_10008E494();
  uint64_t v4 = v3;
  sub_1000296D8(v1);
  return sub_10004875C(v4);
}

void sub_10008D2DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = v2 + 40;
    do
    {
      sub_10000DEB4();
      uint64_t v4 = sub_10008CE58();
      sub_10008E540(v4, v5, v6, v7, v8, v9, v10, v11, 0LL);
      swift_bridgeObjectRelease();
      v3 += 16LL;
      --v1;
    }

    while (v1);
    sub_100009020();
  }

  sub_10001A398();
}

void sub_10008D364()
{
}

id sub_10008D394()
{
  return sub_10008E13C(type metadata accessor for JSDatabase);
}

uint64_t type metadata accessor for JSDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10JSDatabase);
}

double sub_10008D3D0@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC14amsengagementd20JSUbiquitousDatabase_keyValueStore);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v5);
    swift_unknownObjectRelease(v5);
  }

  else
  {
    double result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }

  return result;
}

id sub_10008D464( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t, uint64_t))
{
  id v7 = sub_10008E504();
  a4(v16, v4, v5);

  sub_10000DE2C();
  uint64_t v8 = v17;
  if (!v17) {
    return 0LL;
  }
  uint64_t v9 = sub_10000D37C(v16, v17);
  uint64_t v10 = *(void *)(v8 - 8);
  __chkstk_darwin(v9);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  (*(void (**)(uint64_t))(v10 + 16))(v12 - v11);
  uint64_t v14 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v13, v8);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v8);
  sub_10000D3A0(v16);
  return v14;
}

uint64_t sub_10008D544(uint64_t a1)
{
  uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (uint64_t)v2;
  }
  sub_10000DEE0();
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    uint64_t v5 = *(i - 1);
    uint64_t v6 = *i;
    sub_10000DF9C();
    sub_10008D3D0(&v30);
    if (!v31)
    {
      sub_1000102E0((uint64_t)&v30, &qword_1001CAAD0);
      swift_bridgeObjectRetain(v2);
      unint64_t v18 = sub_10008E4DC();
      char v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        Swift::Int v22 = v2[3];
        sub_10000D33C(&qword_1001C9CC0);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v22);
        swift_bridgeObjectRelease();
        sub_10000DA58((_OWORD *)(v2[7] + 32 * v18), v29);
        _NativeDictionary._delete(at:)(v18, v2);
        swift_bridgeObjectRelease();
      }

      else
      {
        memset(v29, 0, sizeof(v29));
      }

      sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
      goto LABEL_17;
    }

    sub_10000DA58(&v30, v29);
    char v7 = swift_isUniquelyReferenced_nonNull_native(v2);
    uint64_t v28 = v2;
    unint64_t v8 = sub_10008E4DC();
    uint64_t v10 = v2[2];
    BOOL v11 = (v9 & 1) == 0;
    Swift::Int v12 = v10 + v11;
    if (__OFADD__(v10, v11)) {
      break;
    }
    unint64_t v13 = v8;
    char v14 = v9;
    sub_10000D33C(&qword_1001C9CC0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v7, v12))
    {
      unint64_t v15 = sub_100030CCC(v5, v6);
      if ((v14 & 1) != (v16 & 1)) {
        goto LABEL_22;
      }
      unint64_t v13 = v15;
    }

    uint64_t v2 = v28;
    if ((v14 & 1) != 0)
    {
      uint64_t v17 = (void *)(v28[7] + 32 * v13);
      sub_10000D3A0(v17);
      sub_10000DA58(v29, v17);
    }

    else
    {
      v28[(v13 >> 6) + 8] |= 1LL << v13;
      __int128 v23 = (uint64_t *)(v28[6] + 16 * v13);
      *__int128 v23 = v5;
      v23[1] = v6;
      sub_10000DA58(v29, (_OWORD *)(v28[7] + 32 * v13));
      uint64_t v24 = v28[2];
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25) {
        goto LABEL_21;
      }
      void v28[2] = v26;
      sub_10000DF9C();
    }

    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v2;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

id sub_10008D80C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String);
  id v7 = a1;
  a4(v6);
  sub_10008E4EC();
  sub_10000DE2C();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100009020();
  return sub_10008E470(isa);
}

uint64_t sub_10008D888(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CA728);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10008E390();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  __n128 v8 = swift_bridgeObjectRetain(a2);
  id v9 = (id)NSPredicate.init(format:_:)(0x4B494C20464C4553LL, 0xEC00000040252045LL, v7, v8);
  uint64_t v10 = sub_10000DEE0();
  sub_10008D9D4(v10, v9);
  uint64_t v12 = v11;
  sub_10000DEE0();
  unint64_t v13 = sub_10008C264(v12, v2);
  sub_100009020();
  sub_10000DE2C();
  sub_10008DC04((uint64_t)v13);
  sub_10008E4EC();
  return v2;
}

void sub_10008D9D4(uint64_t a1, void *a2)
{
  uint64_t v3 = v23[0];
  int64_t v4 = v23[3];
  unint64_t v5 = v23[4];
  uint64_t v21 = v23[1];
  int64_t v22 = (unint64_t)(v23[2] + 64LL) >> 6;
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v9 >= v22) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v21 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v22) {
        goto LABEL_27;
      }
      unint64_t v10 = *(void *)(v21 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v22) {
          goto LABEL_27;
        }
        unint64_t v10 = *(void *)(v21 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v22) {
            goto LABEL_27;
          }
          unint64_t v10 = *(void *)(v21 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v22) {
              goto LABEL_27;
            }
            unint64_t v10 = *(void *)(v21 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v4 + 6;
              while (v12 < v22)
              {
                unint64_t v10 = *(void *)(v21 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_10008DC04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_10000D33C(&qword_1001C9DC8);
    int64_t v4 = (void *)static _DictionaryStorage.allocate(capacity:)(v3);
  }

  else
  {
    int64_t v4 = _swiftEmptyDictionarySingleton;
  }

  unint64_t v7 = v4;
  sub_10008E19C(a1, 1, (uint64_t *)&v7);
  uint64_t v5 = (uint64_t)v7;
  if (v1) {
    swift_release(v7);
  }
  return v5;
}

id sub_10008DC9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_100009020();
  return sub_10008E470(isa);
}

void sub_10008DD08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  sub_100048454(a3, (uint64_t)v20, &qword_1001CAAD0);
  if (!v5)
  {
    sub_1000102E0((uint64_t)v20, &qword_1001CAAD0);
    goto LABEL_6;
  }

  sub_100076F44((uint64_t)v20, (uint64_t)v18);
  if (v19)
  {
    uint64_t v6 = sub_10000DAA0(0LL, qword_1001C9528, &OBJC_CLASS___NSNull_ptr);
    if ((swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, v6, 6LL) & 1) != 0)
    {

LABEL_6:
      unint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC14amsengagementd20JSUbiquitousDatabase_keyValueStore);
      NSString v8 = sub_10006859C();
      [v7 removeObjectForKey:v8];
      goto LABEL_12;
    }
  }

  else
  {
    sub_1000102E0((uint64_t)v18, &qword_1001CAAD0);
  }

  int64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC14amsengagementd20JSUbiquitousDatabase_keyValueStore);
  sub_100048454(a3, (uint64_t)v18, &qword_1001CAAD0);
  uint64_t v10 = v19;
  if (v19)
  {
    int64_t v11 = sub_10000D37C(v18, v19);
    uint64_t v12 = *(void *)(v10 - 8);
    __chkstk_darwin(v11);
    sub_10000DE7C();
    uint64_t v15 = v14 - v13;
    (*(void (**)(uint64_t))(v12 + 16))(v14 - v13);
    uint64_t v16 = _bridgeAnythingToObjectiveC<A>(_:)(v15, v10);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v10);
    sub_10000D3A0(v18);
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  NSString v8 = sub_10006859C();
  [v9 setObject:v16 forKey:v8];
  swift_unknownObjectRelease(v16);
LABEL_12:
}

uint64_t sub_10008DEEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _OWORD *))
{
  uint64_t v8 = sub_10008E488(a1, a2, a3);
  uint64_t v10 = v9;
  if (a4)
  {
    id v11 = v5;
    uint64_t v12 = swift_unknownObjectRetain(a4);
    _bridgeAnyObjectToAny(_:)(v12);
    swift_unknownObjectRelease(a4);
  }

  else
  {
    memset(v15, 0, sizeof(v15));
    id v13 = v5;
  }

  a5(v8, v10, v15);

  swift_bridgeObjectRelease();
  return sub_1000102E0((uint64_t)v15, &qword_1001CAAD0);
}

void sub_10008DF8C(uint64_t a1)
{
}

uint64_t sub_10008DFD8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  id v5 = a1;
  sub_10008E51C();

  return sub_10008E464(v4);
}

void sub_10008E034(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      memset(v14, 0, sizeof(v14));
      sub_10000DEB4();
      sub_10008DD08(v4, v5, (uint64_t)v14);
      sub_10008E540(v6, v7, v8, v9, v10, v11, v12, v13, *(uint64_t *)&v14[0]);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v1;
    }

    while (v1);
    sub_100009020();
  }

  sub_10001A398();
}

uint64_t sub_10008E0BC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String);
  id v5 = a1;
  sub_10008E51C();

  return sub_10008E464(v4);
}

void sub_10008E100()
{
}

id sub_10008E130()
{
  return sub_10008E13C(type metadata accessor for JSUbiquitousDatabase);
}

id sub_10008E13C(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for JSUbiquitousDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20JSUbiquitousDatabase);
}

uint64_t sub_10008E19C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  __int128 v30 = &v29;
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    sub_100048454(v6, (uint64_t)v28, &qword_1001CFB00);
    uint64_t v7 = v28[0];
    uint64_t v8 = v28[1];
    sub_10000DA58(v30, v27);
    uint64_t v9 = *a3;
    unint64_t v11 = sub_100030CCC(v7, v8);
    uint64_t v12 = *(void *)(v9 + 16);
    BOOL v13 = (v10 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      break;
    }
    char v15 = v10;
    if (*(void *)(v9 + 24) >= v14)
    {
      if ((a2 & 1) != 0)
      {
        if ((v10 & 1) != 0) {
          goto LABEL_10;
        }
      }

      else
      {
        sub_10000D33C(&qword_1001C9CC0);
        _NativeDictionary.copy()();
        if ((v15 & 1) != 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
      sub_10003264C(v14, a2 & 1);
      unint64_t v16 = sub_100030CCC(v7, v8);
      if ((v15 & 1) != (v17 & 1)) {
        goto LABEL_20;
      }
      unint64_t v11 = v16;
      if ((v15 & 1) != 0)
      {
LABEL_10:
        sub_10000DA1C((uint64_t)v27, (uint64_t)v26);
        sub_10000D3A0(v27);
        swift_bridgeObjectRelease();
        unint64_t v18 = (void *)(*(void *)(*a3 + 56) + 32 * v11);
        sub_10000D3A0(v18);
        sub_10000DA58(v26, v18);
        goto LABEL_14;
      }
    }

    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1LL << v11;
    char v20 = (uint64_t *)(v19[6] + 16 * v11);
    *char v20 = v7;
    v20[1] = v8;
    sub_10000DA58(v27, (_OWORD *)(v19[7] + 32 * v11));
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_19;
    }
    _OWORD v19[2] = v23;
LABEL_14:
    v6 += 48LL;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10008E390()
{
  unint64_t result = qword_1001CB7B0;
  if (!qword_1001CB7B0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001CB7B0);
  }

  return result;
}

uint64_t sub_10008E3CC()
{
  uint64_t v1 = *(void *)(v0 - 96);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 120), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_10008E3F0(uint64_t a1)
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(a1);
}

uint64_t sub_10008E3F8()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
}

uint64_t sub_10008E408(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  *(void *)(v2 - 192) = v4;
  return swift_allocObject(v1, ((v5 + 32) & ~v5) + 2 * v4, v5 | 7);
}

void sub_10008E430()
{
  v0._uint64_t countAndFlagsBits = 8238LL;
  v0._object = (void *)0xE200000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_10008E43C()
{
  return sub_1000102E0(v1 - 152, v0);
}

uint64_t sub_10008E448()
{
  return sub_1000102E0(v1 - 120, v0);
}

void *sub_10008E454()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 176);
  return sub_10000D63C((void *)(v0 - 120));
}

uint64_t sub_10008E464(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

id sub_10008E470(id a1)
{
  return a1;
}

uint64_t sub_10008E47C()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10008E488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
}

void sub_10008E494()
{
}

uint64_t sub_10008E49C(uint64_t a1, uint64_t *a2)
{
  return sub_1000102E0(v2 - 152, a2);
}

uint64_t sub_10008E4A4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

id sub_10008E4B8(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = v1;
  return v1;
}

uint64_t sub_10008E4C4(uint64_t a1)
{
  return sub_1000102E0(a1, v1);
}

void *sub_10008E4CC()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 176);
  return sub_10000D63C((void *)(v0 - 120));
}

unint64_t sub_10008E4DC()
{
  return sub_100030CCC(v0, v1);
}

void sub_10008E4EC()
{
}

void sub_10008E4F4()
{
}

id sub_10008E504()
{
  return v0;
}

uint64_t sub_10008E510(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_10008E51C()
{
  return v0(v1);
}

uint64_t sub_10008E528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_stdlib_reportUnimplementedInitializer(a1, a2, a3, 6LL, 0LL);
}

uint64_t sub_10008E534()
{
  return sub_1000102E0(v1 - 152, v0);
}

uint64_t sub_10008E540( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000102E0((uint64_t)&a9, v9);
}

uint64_t sub_10008E54C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for JSDatabase();
}

void sub_10008E558(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  v4._uint64_t countAndFlagsBits = sub_10003071C(0x73616C4361746164LL, 0xE900000000000073LL, a1);
  if (!v4._object)
  {
    v4._uint64_t countAndFlagsBits = 0LL;
    v4._object = (void *)0xE000000000000000LL;
  }

  char v5 = sub_10015354C(v4);
  if (v5 == 4) {
    char v6 = 0;
  }
  else {
    char v6 = v5;
  }
  type metadata accessor for AppDatabase();
  uint64_t v7 = sub_100023140(*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14amsengagementd15JSDatabaseStore_config + 1), v6);
  uint64_t v8 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = (__n128 *)swift_initStackObject(v8, v14);
  sub_10008F074(inited, (__n128)xmmword_100164220);
  char v10 = (objc_class *)type metadata accessor for JSDatabase();
  unint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC14amsengagementd10JSDatabase_database] = v7;
  v13.receiver = v11;
  v13.super_class = v10;
  swift_retain(v7);
  id v12 = objc_msgSendSuper2(&v13, "init");
  inited[4].n128_u64[1] = (unint64_t)v10;
  inited[3].n128_u64[0] = (unint64_t)v12;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  swift_release(v7);
  sub_10000DD84();
}

void sub_10008E9A8()
{
  uint64_t v1 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v1);
  type metadata accessor for AppDatabase();
  uint64_t v2 = v0 + OBJC_IVAR____TtC14amsengagementd15JSDatabaseStore_config;
  unsigned __int8 v3 = *(_BYTE *)(v0 + OBJC_IVAR____TtC14amsengagementd15JSDatabaseStore_config + 1);
  uint64_t v4 = sub_100023140(v3, 0);
  uint64_t v5 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v5, &v16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0x746C75736572LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  uint64_t v7 = *(void **)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  char v10 = *(_BYTE *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  v17[0] = *(_BYTE *)v2;
  v17[1] = v3;
  __int128 v15 = *(_OWORD *)(v2 + 32);
  __int128 v19 = *(_OWORD *)(v2 + 16);
  __int128 v20 = v15;
  unint64_t v18 = v7;
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  char v23 = v10;
  uint64_t v24 = v11;
  id v12 = (objc_class *)type metadata accessor for JSScheduleDatabase();
  objc_allocWithZone(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v9);
  swift_retain(v4);
  id v13 = v7;
  id v14 = sub_1000A8160((uint64_t)v17, v4);
  *(void *)(inited + 72) = v12;
  *(void *)(inited + 48) = v14;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  swift_release(v4);
  sub_10000DD84();
}

uint64_t sub_10008ED74()
{
  if (qword_1001C80F8 != -1) {
    swift_once(&qword_1001C80F8, sub_10014C5B0);
  }
  uint64_t v1 = (void *)sub_10014D648(*(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14amsengagementd15JSDatabaseStore_config + 1));
  uint64_t v2 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = (__n128 *)swift_initStackObject(v2, v11);
  sub_10008F074(inited, (__n128)xmmword_100164220);
  uint64_t v4 = (objc_class *)type metadata accessor for JSUbiquitousDatabase();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC14amsengagementd20JSUbiquitousDatabase_keyValueStore] = v1;
  v10.receiver = v5;
  v10.super_class = v4;
  id v6 = v1;
  id v7 = objc_msgSendSuper2(&v10, "init");
  inited[4].n128_u64[1] = (unint64_t)v4;
  inited[3].n128_u64[0] = (unint64_t)v7;
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v8;
}

Class sub_10008EF24(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

void sub_10008EF88()
{
}

id sub_10008EFC0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSDatabaseStore();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSDatabaseStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd15JSDatabaseStore);
}

__n128 *sub_10008F04C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x726F727265LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  return result;
}

uint64_t sub_10008F068()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10008F074(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x746C75736572LL;
  a1[2].n128_u64[1] = 0xE600000000000000LL;
  return 0LL;
}

uint64_t sub_10008F094()
{
  return sub_10008F4BC();
}

id sub_10008F09C()
{
  return sub_10008F674(v0);
}

uint64_t sub_10008F0A4(uint64_t a1)
{
  *(void *)(v1 + 200) = a1;
  *(void *)(v1 + 176) = v2;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 176);
}

uint64_t sub_10008F0B8()
{
  return LogMessage.init(stringLiteral:)(0xD000000000000019LL);
}

uint64_t sub_10008F0CC()
{
  return type metadata accessor for JSError();
}

uint64_t sub_10008F0D4()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10008F0E0()
{
  return sub_10000E888(v0 - 152);
}

uint64_t sub_10008F0E8()
{
  return sub_10000E888(v0 + 176);
}

id sub_10008F120()
{
  return [(id)objc_opt_self(AMSDevice) deviceIsBundle];
}

uint64_t sub_10008F154()
{
  return sub_10008F190((SEL *)&selRef_productType);
}

uint64_t sub_10008F16C()
{
  return sub_10008F190((SEL *)&selRef_operatingSystem);
}

uint64_t sub_10008F184()
{
  return sub_10008F190((SEL *)&selRef_productVersion);
}

uint64_t sub_10008F190(SEL *a1)
{
  id v1 = [(id)objc_opt_self(AMSDevice) *a1];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_10008F1EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSDevice();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10008F23C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSDevice();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSDevice()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd8JSDevice);
}

ValueMetadata *type metadata accessor for JSEnginePerformerProvider()
{
  return &type metadata for JSEnginePerformerProvider;
}

id sub_10008F29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v8 = 0LL;
  }

  id v9 = (id)AMSError(a1, v7, v8, 0LL);

  id v10 = objc_allocWithZone((Class)type metadata accessor for JSError());
  return sub_10008F674((uint64_t)v9);
}

uint64_t sub_10008F35C()
{
  return sub_10008F3E8((SEL *)&selRef_ams_message);
}

id sub_10008F374(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }

  else
  {
    NSString v7 = 0LL;
  }

  return v7;
}

uint64_t sub_10008F3DC()
{
  return sub_10008F3E8((SEL *)&selRef_ams_title);
}

uint64_t sub_10008F3E8(SEL *a1)
{
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for JSError();
  id v3 = objc_msgSendSuper2(&v7, *a1);
  if (!v3) {
    return 0LL;
  }
  id v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v5;
}

uint64_t sub_10008F4BC()
{
  uint64_t v0 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v0, &v18);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
  *(void *)(inited + 32) = 0x6E69616D6F64LL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  id v2 = sub_10008FAC0(inited, "domain");
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  uint64_t v5 = v4;

  *(void *)(inited + 48) = v3;
  *(void *)(inited + 56) = v5;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 1701080931LL;
  *(void *)(inited + 88) = 0xE400000000000000LL;
  *(void *)(inited + 96) = sub_10008FAC0(v6, "code");
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 128) = 0x6567617373656DLL;
  *(void *)(inited + 136) = 0xE700000000000000LL;
  uint64_t v7 = sub_10008F35C();
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE000000000000000LL;
  }
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 152) = v10;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0x656C746974LL;
  *(void *)(inited + 184) = 0xE500000000000000LL;
  uint64_t v11 = sub_10008F3DC();
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if (v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = 0xE000000000000000LL;
  }
  *(void *)(inited + 192) = v13;
  *(void *)(inited + 200) = v14;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(inited + 224) = 0x6F666E4972657375LL;
  *(void *)(inited + 232) = 0xE800000000000000LL;
  id v15 = sub_10008FAC0(v11, "userInfo");
  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v15,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  *(void *)(inited + 264) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(inited + 240) = v16;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

id sub_10008F674(uint64_t a1)
{
  id v2 = v1;
  if (a1)
  {
    uint64_t v4 = a1;
  }

  else
  {
    type metadata accessor for JSError();
    uint64_t v4 = sub_10008F29C(0LL, 0x206E776F6E6B6E55LL, 0xED0000726F727245LL, 0LL, 0LL);
  }

  swift_errorRetain(a1);
  uint64_t v5 = (void *)_convertErrorToNSError(_:)(v4);
  uint64_t v6 = swift_errorRelease(v4);
  id v7 = sub_10007032C(v6, "userInfo");
  uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  v52[5] = v8;
  if (!a1
    || (v52[0] = a1,
        swift_errorRetain(a1),
        uint64_t v9 = sub_10000D33C((uint64_t *)&unk_1001CE740),
        uint64_t v10 = sub_10000D33C(&qword_1001CB848),
        (swift_dynamicCast(&v49, v52, v9, v10, 6LL) & 1) == 0))
  {
    uint64_t v51 = 0LL;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    goto LABEL_15;
  }

  if (!*((void *)&v50 + 1))
  {
LABEL_15:
    uint64_t v41 = sub_10008FA3C((uint64_t)&v49);
    goto LABEL_16;
  }

  sub_100019F60(&v49, (uint64_t)v52);
  uint64_t v11 = sub_10008FAA0(v52);
  dispatch thunk of LocalizedError.errorDescription.getter(v11);
  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    sub_10008FA7C( v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  (uint64_t)v48.receiver,  (uint64_t)v48.super_class,  v49,  *((uint64_t *)&v49 + 1),  v50,  *((uint64_t *)&v50 + 1));
  }

  uint64_t v21 = sub_10008FAA0(v52);
  dispatch thunk of LocalizedError.failureReason.getter(v21);
  if (v22)
  {
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureReasonErrorKey);
    sub_10008FA7C( v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  (uint64_t)v48.receiver,  (uint64_t)v48.super_class,  v49,  *((uint64_t *)&v49 + 1),  v50,  *((uint64_t *)&v50 + 1));
  }

  uint64_t v31 = sub_10008FAA0(v52);
  dispatch thunk of LocalizedError.recoverySuggestion.getter(v31);
  if (v32)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedRecoverySuggestionErrorKey);
    sub_10008FA7C( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  (uint64_t)v48.receiver,  (uint64_t)v48.super_class,  v49,  *((uint64_t *)&v49 + 1),  v50,  *((uint64_t *)&v50 + 1));
  }

  uint64_t v41 = sub_10000D3A0(v52);
LABEL_16:
  id v42 = sub_10007032C(v41, "domain");
  NSString v43 = v42;
  if (!v42)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v43 = String._bridgeToObjectiveC()();
    id v42 = (id)swift_bridgeObjectRelease();
  }

  id v44 = sub_10007032C((uint64_t)v42, "code");
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v48.receiver = v2;
  v48.super_class = (Class)type metadata accessor for JSError();
  id v46 = objc_msgSendSuper2(&v48, "initWithDomain:code:userInfo:", v43, v44, isa);
  swift_errorRelease(a1);

  return v46;
}

void sub_10008F918()
{
}

void sub_10008F97C()
{
}

id sub_10008F9EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSError();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSError()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd7JSError);
}

uint64_t sub_10008FA3C(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB840);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10008FA7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a14 = v15;
  a11 = v14;
  a12 = v16;
  sub_100030118((uint64_t)&a11, a1, a2);
}

uint64_t sub_10008FAA0(void *a1)
{
  return v1;
}

id sub_10008FAC0(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_10008FAC8(uint64_t a1, uint64_t a2, double a3)
{
  return sub_10008FAEC( a1,  a2,  (uint64_t)&unk_1001AC970,  (uint64_t)&unk_1001AC998,  (uint64_t)sub_100092CC8,  (uint64_t)&unk_1001AC9B0,  a3);
}

uint64_t sub_10008FAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v49 = a4;
  uint64_t v47 = a3;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v54 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v57 = *(void *)(v54 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v55 = *(void *)(v12 - 8);
  uint64_t v56 = v12;
  sub_10000DC8C();
  __chkstk_darwin(v13);
  sub_10000DE7C();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for DispatchTime(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10000DE7C();
  uint64_t v28 = v27 - v26;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(uint64_t, void, uint64_t))(v25 + 104))( v28,  enum case for DispatchQoS.QoSClass.default(_:),  v24);
  uint64_t v44 = static OS_dispatch_queue.global(qos:)(v28);
  uint64_t v29 = sub_1000292FC(v28, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  static DispatchTime.now()(v29);
  + infix(_:_:)(v21, a7);
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  uint64_t v30 = v45(v21, v17);
  static DispatchQoS.background.getter(v30);
  uint64_t v31 = sub_10000DDDC(v47, 24LL);
  uint64_t v32 = v48;
  swift_weakInit(v31 + 16, v48);
  uint64_t v33 = (void *)sub_10000DDDC(v49, 40LL);
  uint64_t v34 = v50;
  uint64_t v35 = v51;
  uint64_t v33[2] = v31;
  void v33[3] = v34;
  v33[4] = v35;
  aBlock[4] = v52;
  void aBlock[5] = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = v53;
  uint64_t v36 = _Block_copy(aBlock);
  uint64_t v58 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v38 = v37;
  swift_retain(v31);
  swift_bridgeObjectRetain(v35);
  uint64_t v39 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  uint64_t v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v39, v41, v54, v38);
  id v42 = (void *)v44;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v23, v16, v11, v36);
  _Block_release(v36);

  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v11, v40);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v16, v56);
  v45(v23, v46);
  swift_release(v31);
  sub_10001A2D8();
  return swift_retain(v32);
}

uint64_t sub_10008FE28(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || (unint64_t v2 = sub_100030CCC(0xD000000000000013LL, 0x8000000100170F40LL), (v3 & 1) == 0))
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
    sub_100009070();
    goto LABEL_9;
  }

  sub_10000DA1C(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v6);
  sub_100009070();
  if (!*((void *)&v7 + 1))
  {
LABEL_9:
    sub_10000DA68((uint64_t)&v6, &qword_1001CAAD0);
    return 0LL;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_10008FEF0()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  char v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  __int128 v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = v11;
  uint64_t v13 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_1000253B0((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v4, v12);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000017LL,  0x8000000100170EF0LL,  v9,  v6,  v3,  0LL);
  qword_1001DBAF8 = result;
  return result;
}

uint64_t sub_1000900BC()
{
  uint64_t v1 = OBJC_IVAR____TtC14amsengagementd11JSExtension____lazy_storage___extensionLoader;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd11JSExtension____lazy_storage___extensionLoader);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd11JSExtension____lazy_storage___extensionLoader);
  }

  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = type metadata accessor for ExtensionLoader();
    sub_10000DDDC(v5, 32LL);
    uint64_t v3 = sub_10006BD20();
    *(void *)(v4 + vHasher._combine(_:)(v1 & 1) = v3;
    swift_retain(v3);
    sub_100037230();
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  return v3;
}

void sub_10009012C()
{
  off_1001CB850 = &_swiftEmptyArrayStorage;
}

id sub_100090140(void *__src)
{
  *(void *)&v1[OBJC_IVAR____TtC14amsengagementd11JSExtension____lazy_storage___extensionLoader] = 0LL;
  memcpy(&v1[OBJC_IVAR____TtC14amsengagementd11JSExtension_config], __src, 0x50uLL);
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for JSExtension();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t sub_100090194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_bridgeObjectRetain(a4);
  uint64_t v10 = sub_10008FE28(a4);
  char v12 = v11;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  uint64_t v13 = (void *)static JSContext.requiredCurrent.getter();
  v16[2] = v5;
  void v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = v10;
  char v17 = v12 & 1;
  uint64_t v14 = JSContext.propagateErrorsToExceptions(_:)(sub_100092A6C, v16);

  return v14;
}

uint64_t sub_10009024C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v21 = a1;
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v13 = static RunLoopWorkerThread.current.getter();
  if (v13)
  {
    uint64_t v14 = v13;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v15 = swift_allocObject(&unk_1001AC8D0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v15 + 16, a2);
    sub_10000DA1C(a5, (uint64_t)v20);
    uint64_t v16 = swift_allocObject(&unk_1001AC8F8, 96LL, 7LL);
    *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    *(void *)(v16 + 24) = a3;
    *(void *)(v16 + 32) = a4;
    sub_10000DA58(v20, (_OWORD *)(v16 + 40));
    *(void *)(v16 + 72) = a6;
    *(_BYTE *)(v16 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a7 & 1;
    *(void *)(v16 + 88) = v14;
    swift_retain(v15);
    swift_bridgeObjectRetain(a4);
    swift_retain(v14);
    uint64_t v17 = sub_10008C048(v21, (uint64_t)sub_100092AEC, v16);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v17 = type metadata accessor for JSError();
    id v18 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v18);
  }

  return v17;
}

uint64_t sub_1000903E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v35 = a3;
  uint64_t v34 = a2;
  uint64_t v15 = type metadata accessor for JSCallable(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  a4 += 16LL;
  swift_beginAccess(a4, v37, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v32 = a10;
    id v33 = Strong;
    uint64_t v31 = sub_100091B80(a5, a6, a7, a8, a9 & 1);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v19((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL), v34, v15);
    uint64_t v20 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v21 = (v20 + 16) & ~v20;
    uint64_t v22 = v20 | 7;
    uint64_t v23 = swift_allocObject(&unk_1001AC920, v21 + v17, v20 | 7);
    uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v24(v23 + v21, (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15);
    v19((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL), v35, v15);
    uint64_t v25 = swift_allocObject(&unk_1001AC948, v21 + v17, v22);
    v24(v25 + v21, (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL), v15);
    void v36[3] = type metadata accessor for RunLoopWorkerThread(0LL);
    v36[4] = &protocol witness table for RunLoopWorkerThread;
    v36[0] = v32;
    swift_retain(v32);
    Promise.then(perform:orCatchError:on:)(sub_100092B2C, v23, sub_100092BB0, v25, v36);

    swift_release();
    swift_release();
    swift_release();
    return sub_10000D3A0(v36);
  }

  else
  {
    uint64_t v27 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v28 = swift_allocObject(v27, 64LL, 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    type metadata accessor for JSError();
    id v29 = sub_10008F29C(0LL, 0xD000000000000018LL, 0x8000000100170F90LL, 0x6E617620666C6553LL, 0xED00006465687369LL);
    uint64_t v30 = sub_10008F4BC();

    *(void *)(v28 + 56) = sub_10000D33C(&qword_1001C8F18);
    *(void *)(v28 + 32) = v30;
    sub_1000854E4(v28);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_10009067C(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v3 = swift_allocObject(v2, 64LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  sub_10000DA1C(a1, v3 + 32);
  sub_1000854E4(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000906E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v8 = type metadata accessor for JSExtension();
  uint64_t v39 = (void *)sub_10000D33C(&qword_1001CB898);
  v38[0] = v8;
  id v9 = (id)AMSLogKey(v39);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v15 = v39;
    uint64_t v16 = sub_10000D37C(v38, (uint64_t)v39);
    uint64_t DynamicType = swift_getDynamicType(v16, v15, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v36[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000DA68((uint64_t)v36, &qword_1001CAAD0);
    v18._uint64_t countAndFlagsBits = 5972026LL;
    v18._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t MetatypeMetadata = &type metadata for String;
    v36[0] = v11;
    v36[1] = v13;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000DA68((uint64_t)v36, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 93LL;
    v19._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v21 = v39;
    uint64_t v22 = sub_10000D37C(v38, (uint64_t)v39);
    uint64_t v23 = swift_getDynamicType(v22, v21, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
    v36[0] = v23;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000DA68((uint64_t)v36, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 58LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v38);
  LogMessage.init(stringLiteral:)(0xD000000000000020LL);
  v38[0] = a1;
  swift_errorRetain(a1);
  uint64_t v25 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  uint64_t v26 = String.init<A>(describing:)(v38, v25);
  uint64_t v39 = &type metadata for String;
  v38[0] = v26;
  v38[1] = v27;
  static LogMessage.safe(_:)(v38);
  sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
  uint64_t v29 = static os_log_type_t.error.getter(v28);
  sub_1000BD1B0(v29, v7);
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v31 = swift_allocObject(v30, 64LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v32 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a1);
  id v33 = sub_10008F674(a1);
  uint64_t v34 = sub_10008F4BC();

  *(void *)(v31 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v31 + 32) = v34;
  sub_1000854E4(v31);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100090B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = sub_10008FE28(v9);
  sub_100091B80(a1, a2, a3, v10, v11 & 1);
  sub_10013A978(&v17);
  swift_release();
  uint64_t v12 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v12, &v16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0x746C75736572LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE600000000000000LL;
  sub_10000DA1C((uint64_t)&v17, inited + 48);
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_100092554(&v17);
  return v14;
}

void sub_100091084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v38 = a4;
  uint64_t v36 = a1;
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v10 = sub_1000378A0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  __int128 v17 = (char *)&v33 - v16;
  uint64_t v18 = Date.init()(v15);
  id v19 = (id)AMSLogKey(v18);
  if (v19)
  {
    Swift::String v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v34 = v22;
    uint64_t v35 = v21;
  }

  else
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
  }

  sub_10000DA1C(a5, (uint64_t)v39);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  uint64_t v23 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = (v23 + 88) & ~v23;
  unint64_t v25 = (v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v26 = swift_allocObject(&unk_1001AC790, v25 + 16, v23 | 7);
  uint64_t v27 = v36;
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(void *)(v26 + 24) = v27;
  *(void *)(v26 + 32) = a2;
  sub_10000DA58(v39, (_OWORD *)(v26 + 40));
  *(void *)(v26 + 72) = a3;
  uint64_t v28 = a2;
  uint64_t v29 = v38;
  *(void *)(v26 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v26 + v24, v14, v10);
  uint64_t v30 = (uint64_t *)(v26 + v25);
  uint64_t v31 = v34;
  *uint64_t v30 = v35;
  v30[1] = v31;
  id v32 = v6;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  sub_1000918F0((uint64_t)sub_100092650, v26);
  sub_100037230();
  sub_1000292FC((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  sub_10000DD84();
}

void (*sub_100091228( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9))(uint64_t, uint64_t)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v32 = a9;
  uint64_t v33 = a8;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  __int128 v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_100091B80(a2, a3, a4, 0x403E000000000000LL, 0);
  sub_10000DA1C(a4, (uint64_t)v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a7, v14);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 80) & ~v18;
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_1001AC8A8, v21 + 16, v18 | 7);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  uint64_t v23 = v30;
  *(void *)(v22 + 32) = v29;
  *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v23;
  sub_10000DA58(v34, (_OWORD *)(v22 + 48));
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v19, v17, v14);
  *(void *)(v22 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  uint64_t v24 = (void *)(v22 + v21);
  uint64_t v25 = v32;
  *uint64_t v24 = v33;
  v24[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(v23);
  id v26 = a1;
  uint64_t v27 = v31;
  sub_100053DDC();
  swift_release();
  return v27;
}

void sub_1000913B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v15, v32);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100166AD0;
  *(void *)(inited + 32) = 0x6E696769726FLL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE600000000000000LL;
  strcpy((char *)(inited + 48), "amsengagementd");
  *(_BYTE *)(inited + 63) = -18;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x707954746E657665LL;
  *(void *)(inited + 88) = 0xE900000000000065LL;
  *(void *)(inited + 96) = 0x657645636E797341LL;
  *(void *)(inited + 104) = 0xEA0000000000746ELL;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0x64496E6967756C70LL;
  *(void *)(inited + 136) = 0xE800000000000000LL;
  *(void *)(inited + 144) = a3;
  *(void *)(inited + 152) = a4;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0x4974736575716572LL;
  *(void *)(inited + 184) = 0xE900000000000064LL;
  *(void *)(inited + 192) = a5;
  *(void *)(inited + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a6;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
  *(void *)(inited + 224) = 0x4474736575716572LL;
  *(void *)(inited + 232) = 0xEB00000000617461LL;
  sub_10000DA1C(a7, inited + 240);
  *(void *)(inited + 272) = 0x64657461657263LL;
  *(void *)(inited + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE700000000000000LL;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  double v18 = Date.timeIntervalSince1970.getter(v17);
  *(void *)(inited + 312) = &type metadata for Double;
  *(double *)(inited + 288) = v18;
  uint64_t v33 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_100092A2C(a1, (uint64_t)&v28, &qword_1001CA778);
  if (*((void *)&v29 + 1))
  {
    __int128 v30 = v28;
    __int128 v31 = v29;
    sub_10000DA1C((uint64_t)&v30, (uint64_t)&v28);
    sub_100030118((uint64_t)&v28, 0x65736E6F70736572LL, 0xE800000000000000LL);
    sub_100092554(&v30);
  }

  else
  {
    sub_10000DA68((uint64_t)&v28, &qword_1001CA778);
  }

  if (a2)
  {
    id v19 = objc_allocWithZone((Class)type metadata accessor for JSError());
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    id v20 = sub_10008F674(a2);
    uint64_t v21 = sub_10008F4BC();

    *((void *)&v31 + Hasher._combine(_:)(v1 & 1) = sub_10000D33C(&qword_1001C8F18);
    *(void *)&__int128 v30 = v21;
    sub_100030118((uint64_t)&v30, 0x726F727265LL, 0xE500000000000000LL);
    swift_errorRelease(a2);
  }

  [objc_allocWithZone(AMSEngagementEnqueueRequest) init];
  uint64_t v22 = sub_10000D33C(&qword_1001C8F00);
  uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  sub_100054044(v33);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  *(void *)(v23 + 32) = v25;
  sub_1000683E8();
  uint64_t v26 = sub_10000D33C(&qword_1001CD430);
  *(_OWORD *)(swift_allocObject(v26, 40LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
  __asm { BR              X10 }

void sub_100091720()
{
  id v3 = sub_100067A94((void *)0x636974796C616E61LL);
  *(void *)(v2 + 32) = v3;
  specialized Array._endMutation()(v3);
  sub_10006842C(v2);
  id v4 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  [v0 setClientInfo:v4];

  if (v1) {
    NSString v5 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v5 = 0LL;
  }
  [v0 setLogKey:v5];

  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v6 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  id v7 = [objc_allocWithZone(AMSEngagement) initWithBag:v6];

  id v8 = [v7 _enqueue:v0];
}

void sub_1000918F0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v7 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DE8C();
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000292E4();
  if (qword_1001C7F70 != -1) {
    swift_once(&qword_1001C7F70, sub_10008FEF0);
  }
  uint64_t v11 = (void *)sub_10000DDDC((uint64_t)&unk_1001AC7B8, 40LL);
  v11[2] = v2;
  v11[3] = a1;
  v11[4] = a2;
  aBlock[4] = sub_1000926C4;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001AC7D0;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v13);
  id v19 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = v14;
  uint64_t v16 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v16, v17, v7, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4, v3, v12);
  _Block_release(v12);
  sub_1000292FC(v3, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v4, v9);
  swift_release();
  sub_10000DD84();
}

void (*sub_100091B80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5))(uint64_t, uint64_t)
{
  if ((a5 & 0x101) != 0) {
    double v9 = sub_10001CAD4(*(_BYTE *)(v5 + OBJC_IVAR____TtC14amsengagementd11JSExtension_config + 64));
  }
  else {
    double v9 = *(double *)&a4;
  }
  uint64_t v10 = sub_10000D33C(&qword_1001CB890);
  Promise.__allocating_init()(v10);
  uint64_t v11 = (void (*)(uint64_t, uint64_t))sub_10008FAEC( 0xD000000000000011LL,  0x8000000100170ED0LL,  (uint64_t)&unk_1001AC718,  (uint64_t)&unk_1001AC740,  (uint64_t)sub_1000925A0,  (uint64_t)&unk_1001AC758,  v9);
  sub_1000292C4();
  uint64_t v12 = qword_1001C80E8;
  swift_retain(v11);
  if (v12 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  sub_100132364(0x6F69736E65747865LL, 0xEF726564616F4C6ELL);
  sub_1000900BC();
  uint64_t v13 = (void *)sub_10006BF3C(a1, a2);
  sub_1000292C4();
  sub_1000900BC();
  sub_10006C4CC(a3, v13, 0, (uint64_t)sub_10009249C, v11, v9);

  sub_1000292C4();
  sub_10001A2D8();
  return v11;
}

uint64_t sub_100091D58(uint64_t a1, uint64_t a2)
{
  if (v7)
  {
    sub_10000DA58(&v6, v8);
    sub_10000DA1C((uint64_t)v8, (uint64_t)&v6);
    Promise.resolve(_:)(&v6);
    sub_100092554(&v6);
    sub_10000D3A0(v8);
  }

  else
  {
    sub_10000DA68((uint64_t)&v6, &qword_1001CAAD0);
    id v3 = objc_allocWithZone((Class)type metadata accessor for JSError());
    swift_errorRetain(a2);
    id v4 = sub_10008F674(a2);
    Promise.reject(_:)(v4);
  }

  if (qword_1001C80E8 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  return sub_100133128(0x6F69736E65747865LL, 0xEF726564616F4C6ELL);
}

uint64_t sub_100091E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1001C7F78 != -1) {
    swift_once(&qword_1001C7F78, sub_10009012C);
  }
  uint64_t v5 = swift_allocObject(&unk_1001AC808, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  swift_beginAccess(&off_1001CB850, v10, 33LL, 0LL);
  swift_retain(a3);
  swift_retain(v5);
  sub_100063ED4();
  uint64_t v6 = *((void *)off_1001CB850 + 2);
  sub_100063F8C(v6);
  uint64_t v7 = (char *)off_1001CB850;
  *((void *)off_1001CB850 + 2) = v6 + 1;
  uint64_t v8 = &v7[16 * v6];
  *((void *)v8 + 4) = sub_1000926F4;
  *((void *)v8 + 5) = v5;
  swift_endAccess(v10);
  uint64_t result = swift_release();
  if (*((void *)off_1001CB850 + 2) == 1LL) {
    return sub_100091F74();
  }
  return result;
}

uint64_t sub_100091F74()
{
  void (*v9)(uint64_t *__return_ptr, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_10000DE8C();
  if (qword_1001C7F70 != -1) {
    swift_once(&qword_1001C7F70, sub_10008FEF0);
  }
  uint64_t v5 = qword_1001DBAF8;
  *uint64_t v1 = qword_1001DBAF8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v1);
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v1, v3);
  if ((v5 & 1) != 0)
  {
    if (qword_1001C7F78 == -1) {
      goto LABEL_5;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v7 = swift_once(&qword_1001C7F78, sub_10009012C);
LABEL_5:
  uint64_t result = sub_100092D44(v7, (uint64_t)v12);
  if (*((void *)off_1001CB850 + 2))
  {
    double v9 = (void (*)(uint64_t *__return_ptr, uint64_t))*((void *)off_1001CB850 + 4);
    uint64_t v10 = swift_retain(*((void *)off_1001CB850 + 5));
    v9(&v11, v10);
    sub_1000292C4();
    *(void *)(sub_10000DDDC((uint64_t)&unk_1001AC830, 24LL) + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    sub_100053DDC();
    sub_1000292C4();
    return sub_100037230();
  }

  return result;
}

uint64_t sub_1000920E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F70 != -1) {
    swift_once(&qword_1001C7F70, sub_10008FEF0);
  }
  uint64_t v11 = swift_allocObject(&unk_1001AC858, 24LL, 7LL);
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  aBlock[4] = sub_10009272C;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001AC870;
  uint64_t v12 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v12);
  id v19 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = v13;
  uint64_t v15 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1000922E8()
{
  if (qword_1001C7F78 != -1) {
    swift_once(&qword_1001C7F78, sub_10009012C);
  }
  swift_beginAccess(&off_1001CB850, v2, 33LL, 0LL);
  sub_100092370();
  swift_endAccess(v2);
  uint64_t v0 = swift_release();
  return sub_100091F74(v0);
}

uint64_t sub_100092370()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 16))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain(*(void *)(v1 + 40));
    sub_100092830(0LL, 1LL);
    return v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000923C0()
{
}

id sub_1000923F8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSExtension();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSExtension()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd11JSExtension);
}

uint64_t sub_10009249C(uint64_t a1, uint64_t a2)
{
  return sub_100091D58(a1, a2);
}

void sub_1000924A4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  sub_100092D44(a1, (uint64_t)v5);
  if (swift_weakLoadStrong(v1))
  {
    NSString v2 = String._bridgeToObjectiveC()();
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = (id)AMSError(1LL, v2, v3, 0LL);

    Promise.invalidate(_:)(v4);
    sub_1000292C4();
  }

  sub_10001A504();
}

void *sub_100092554(void *a1)
{
  return a1;
}

uint64_t sub_100092578()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000925A0()
{
}

uint64_t sub_1000925BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000925CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000925D4()
{
  uint64_t v4 = *(void *)(sub_1000378A0() - 8);
  sub_100092CE0();

  sub_100092D6C();
  sub_10000D3A0((void *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1000292FC(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_bridgeObjectRelease();
  return sub_100092CCC(v0, v3 + 16, v1);
}

void (*sub_100092650())(uint64_t, uint64_t)
{
  return sub_100091228( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  v0 + 40,  *(void *)(v0 + 72),  *(void *)(v0 + 80),  v0 + v1,  *(void *)(v0 + v2),  *(void *)(v0 + v2 + 8));
}

uint64_t sub_1000926A0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000926C4()
{
  return sub_100091E70(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000926D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000926F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_100092720(uint64_t a1, uint64_t a2)
{
  return sub_1000920E0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10009272C()
{
  return sub_1000922E8();
}

char *sub_100092734(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  id v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_100013F14();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + 16LL * (void)v6);
  uint64_t result = (char *)swift_arrayDestroy(v10, v7, &type metadata for String);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v11 = *(void *)(v4 + 16);
  if (__OFSUB__(v11, a2)) {
    goto LABEL_19;
  }
  uint64_t result = sub_100015BEC((char *)(v4 + 32 + 16 * a2), v11 - a2, v10);
  uint64_t v12 = *(void *)(v4 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 - v7;
  if (!v13)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v14;
LABEL_13:
    void *v2 = v4;
    return result;
  }

char *sub_100092830(char *result, uint64_t a2)
{
  if (((unint64_t)result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  id v6 = result;
  uint64_t v7 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v8 = &result[-a2];
  if (__OFSUB__(0LL, v7))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (__OFADD__(v5, v8))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v2) || v5 - v7 > *(void *)(v4 + 24) >> 1)
  {
    sub_1000144AC();
    uint64_t v4 = v9;
  }

  uint64_t v10 = (char *)(v4 + 32 + 16LL * (void)v6);
  uint64_t v11 = sub_10000D33C(&qword_1001C8FA8);
  uint64_t result = (char *)swift_arrayDestroy(v10, v7, v11);
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(v4 + 16);
  if (__OFSUB__(v12, a2)) {
    goto LABEL_19;
  }
  uint64_t result = sub_100016000((char *)(v4 + 32 + 16 * a2), v12 - a2, v10);
  uint64_t v13 = *(void *)(v4 + 16);
  BOOL v14 = __OFADD__(v13, v8);
  uint64_t v15 = v13 - v7;
  if (!v14)
  {
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v15;
LABEL_13:
    void *v2 = v4;
    return result;
  }

uint64_t sub_100092934()
{
  uint64_t v4 = *(void *)(sub_1000378A0() - 8);
  sub_100092CE0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000D3A0((void *)(v0 + 48));
  sub_1000292FC(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  swift_bridgeObjectRelease();
  return sub_100092CCC(v0, ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v1);
}

void sub_1000929BC(uint64_t a1, uint64_t a2)
{
}

void sub_100092A2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000D33C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  sub_100009044();
}

uint64_t sub_100092A6C(void *a1)
{
  return sub_10009024C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(_BYTE *)(v1 + 56));
}

uint64_t sub_100092A90()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100092AB4()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_100092AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000903E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  v3 + 40,  *(void *)(v3 + 72),  *(_BYTE *)(v3 + 80),  *(void *)(v3 + 88));
}

uint64_t sub_100092B2C()
{
  uint64_t v0 = sub_100092CFC();
  return sub_10009067C(v0);
}

uint64_t sub_100092B54()
{
  uint64_t v1 = sub_1000841C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100092BB0()
{
  uint64_t v0 = sub_100092CFC();
  return sub_1000906E4(v0);
}

uint64_t sub_100092BD8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t destroy for JSExtension.Response(void *a1)
{
  return sub_10000D3A0(a1);
}

uint64_t initializeWithCopy for JSExtension.Response(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

void *assignWithCopy for JSExtension.Response(void *a1, void *a2)
{
  return a1;
}

uint64_t assignWithTake for JSExtension.Response(uint64_t a1, _OWORD *a2)
{
  __int128 v4 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for JSExtension.Response()
{
  return &type metadata for JSExtension.Response;
}

uint64_t sub_100092CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

  ;
}

uint64_t sub_100092CFC()
{
  return v0;
}

uint64_t sub_100092D18(uint64_t a1)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 168) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 168);
}

  ;
}

uint64_t sub_100092D44(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 0LL, 0LL);
}

uint64_t sub_100092D54()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_100092D60()
{
}

uint64_t sub_100092D6C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 32));
}

id sub_100092D74(uint64_t a1, const void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC14amsengagementd8JSFamily_accountStore] = a1;
  memcpy(&v2[OBJC_IVAR____TtC14amsengagementd8JSFamily_config], a2, 0x50uLL);
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for JSFamily();
  return objc_msgSendSuper2(&v4, "init");
}

void sub_100092DC4(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10000DE08(a1, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  objc_super v4 = (void *)static JSContext.requiredCurrent.getter();
  v5[2] = v2;
  v5[3] = a1;
  JSContext.propagateErrorsToExceptions(_:)(sub_100095DD0, v5);

  sub_10001A504();
}

uint64_t sub_100092E28(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v10 = static RunLoopWorkerThread.current.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    id v42 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v47 = v3;
    uint64_t v12 = qword_1001DBB30;
    uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v46 = type metadata accessor for JSFamily();
    v45[0] = a2;
    id v41 = a2;
    id v16 = (id)AMSLogKey(v41);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v40[1] = v12;
      uint64_t v19 = v18;
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(v21);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v22._uint64_t countAndFlagsBits = 0LL;
      v22._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t v23 = v46;
      uint64_t v24 = sub_10000D37C(v45, v46);
      uint64_t DynamicType = swift_getDynamicType(v24, v23, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v43[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
      sub_10000E888((uint64_t)v43);
      v26._uint64_t countAndFlagsBits = 5972026LL;
      v26._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t MetatypeMetadata = &type metadata for String;
      v43[0] = v19;
      v43[1] = v21;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
      sub_10000E888((uint64_t)v43);
      v27._uint64_t countAndFlagsBits = 93LL;
      v27._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      LogMessage.init(stringInterpolation:)(v9);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v30._uint64_t countAndFlagsBits = 0LL;
      v30._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t v31 = v46;
      uint64_t v32 = sub_10000D37C(v45, v46);
      uint64_t v33 = swift_getDynamicType(v32, v31, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v33);
      v43[0] = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
      sub_10000E888((uint64_t)v43);
      v34._uint64_t countAndFlagsBits = 58LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      LogMessage.init(stringInterpolation:)(v9);
    }

    sub_10000D3A0(v45);
    LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v46 = sub_10000D33C(&qword_1001C8F18);
    v45[0] = a3;
    swift_bridgeObjectRetain(a3);
    static LogMessage.safe(_:)(v45);
    uint64_t v35 = sub_10000E888((uint64_t)v45);
    uint64_t v36 = static os_log_type_t.default.getter(v35);
    sub_1000BD1B0(v36, v15);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v37 = swift_allocObject(&unk_1001ACB38, 24LL, 7LL);
    swift_unknownObjectWeakInit(v37 + 16, v41);
    uint64_t v38 = (void *)swift_allocObject(&unk_1001ACB60, 40LL, 7LL);
    v38[2] = v37;
    void v38[3] = a3;
    v38[4] = v11;
    swift_bridgeObjectRetain(a3);
    swift_retain(v37);
    swift_retain(v11);
    uint64_t v28 = sub_10008C048(v42, (uint64_t)sub_100095E40, (uint64_t)v38);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v28 = type metadata accessor for JSError();
    id v29 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v29);
  }

  return v28;
}

void sub_100093238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v64 = a2;
  uint64_t v65 = a6;
  uint64_t v67 = a3;
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = sub_10000D33C(&qword_1001C8BD0);
  __chkstk_darwin(v14);
  id v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a4 + 16, v72, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4 + 16);
  if (Strong)
  {
    uint64_t v21 = (void *)Strong;
    if (*(void *)(Strong + OBJC_IVAR____TtC14amsengagementd8JSFamily_config + 32))
    {
      swift_bridgeObjectRetain(*(void *)(Strong + OBJC_IVAR____TtC14amsengagementd8JSFamily_config + 32));
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v22 = 0LL;
    }

    id v38 = (id)AMSSetLogKey(v22);

    sub_1000308B8(0x746E756F636361LL, 0xE700000000000000LL, a5, &v70);
    if (v71)
    {
      uint64_t v39 = type metadata accessor for JSAccount();
      if ((swift_dynamicCast(v68, &v70, (char *)&type metadata for Any + 8, v39, 6LL) & 1) != 0)
      {
        uint64_t v62 = v68[0];
        uint64_t v40 = type metadata accessor for TaskPriority(0LL);
        id v63 = v16;
        sub_10000D5C0((uint64_t)v16, 1LL, 1LL, v40);
        id v41 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
        v41(v13, v64, v8);
        v41(v66, v67, v8);
        uint64_t v42 = *(unsigned __int8 *)(v9 + 80);
        uint64_t v43 = (v42 + 56) & ~v42;
        uint64_t v44 = (v10 + v42 + v43) & ~v42;
        uint64_t v45 = (char *)swift_allocObject(&unk_1001ACB88, v44 + v10, v42 | 7);
        *((void *)v45 + 2) = 0LL;
        *((void *)v45 + 3) = 0LL;
        uint64_t v46 = v62;
        *((void *)v45 + 4) = v21;
        *((void *)v45 + 5) = v46;
        uint64_t v47 = v65;
        *((void *)v45 + 6) = v65;
        uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v48(&v45[v43], v13, v8);
        v48(&v45[v44], v66, v8);
        id v49 = v21;
        swift_retain(v47);
        sub_100116BA0((uint64_t)v63, (uint64_t)&unk_1001CB8F8, (uint64_t)v45);
        swift_release();

        return;
      }
    }

    else
    {
      sub_10000E888((uint64_t)&v70);
    }

    uint64_t v50 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v51 = swift_allocObject(v50, 64LL, 7LL);
    *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v51 + 56) = &type metadata for String;
    *(void *)(v51 + 32) = 0x2064696C61766E49LL;
    *(void *)(v51 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEF746E756F636361LL;
    uint64_t v52 = v73;
    uint64_t v53 = (void *)JSCallable.call(_:)();
    swift_bridgeObjectRelease();

    if (!v52) {
  }
    }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v23 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v24 = type metadata accessor for LogMessage(0LL);
    uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v24 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v26 = type metadata accessor for JSFamily();
    uint64_t v71 = sub_10000D33C(&qword_1001CB8E8);
    *(void *)&__int128 v70 = v26;
    id v27 = (id)AMSLogKey(v71);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      swift_bridgeObjectRetain(v31);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t v33 = v71;
      Swift::String v34 = sub_10000D37C(&v70, v71);
      uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v68[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v68);
      sub_10000E888((uint64_t)v68);
      v36._uint64_t countAndFlagsBits = 5972026LL;
      v36._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t MetatypeMetadata = &type metadata for String;
      v68[0] = v29;
      v68[1] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v68);
      sub_10000E888((uint64_t)v68);
      v37._uint64_t countAndFlagsBits = 93LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v19);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v54._uint64_t countAndFlagsBits = 0LL;
      v54._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      uint64_t v55 = v71;
      uint64_t v56 = sub_10000D37C(&v70, v71);
      uint64_t v57 = swift_getDynamicType(v56, v55, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v57);
      v68[0] = v57;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v68);
      sub_10000E888((uint64_t)v68);
      v58._uint64_t countAndFlagsBits = 58LL;
      v58._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      LogMessage.init(stringInterpolation:)(v19);
    }

    sub_10000D3A0(&v70);
    uint64_t v59 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v60 = static os_log_type_t.error.getter(v59);
    sub_1000BD1B0(v60, v25);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000937CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  _OWORD v8[2] = a4;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  v8[7] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[8] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v8[9] = v11;
  void v8[10] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100093838, 0LL, 0LL);
}

uint64_t sub_100093838()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC14amsengagementd9JSAccount_account);
  uint64_t v2 = (void *)swift_task_alloc(dword_1001CB8DC);
  *(void *)(v0 + 88) = v2;
  void *v2 = v0;
  v2[1] = sub_100093898;
  return sub_100095248(v1);
}

uint64_t sub_100093898(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 88);
  *(void *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 104) = a1;
  }
  sub_100096178();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_100093908()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void **)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v3, *(void *)(v0 + 40), v5);
  sub_100096164();
  unint64_t v8 = (v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = swift_allocObject(&unk_1001ACBD8, v8 + 8, v9);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v1, v3, v5);
  *(void *)(v10 + v8) = v2;
  id v11 = v7;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100096050, v10);
  uint64_t v12 = *(void *)(v0 + 80);
  swift_release();
  swift_task_dealloc(v12);
  return sub_1000960B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000939C4()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void **)(v0 + 16);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v3, *(void *)(v0 + 48), v5);
  sub_100096164();
  unint64_t v8 = (v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = swift_allocObject(&unk_1001ACBB0, v8 + 8, v9);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v1, v3, v5);
  *(void *)(v10 + v8) = v2;
  id v11 = v7;
  swift_errorRetain(v2);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100095FBC, v10);
  swift_errorRelease(v2);
  uint64_t v12 = *(void *)(v0 + 80);
  swift_release();
  swift_task_dealloc(v12);
  return sub_1000960B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100093A94(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v35 = type metadata accessor for JSFamily();
  v34[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v35;
    uint64_t v18 = sub_10000D37C(v34, v35);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v32[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000E888((uint64_t)v32);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v32[0] = v13;
    v32[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000E888((uint64_t)v32);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v35;
    uint64_t v24 = sub_10000D37C(v34, v35);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v32[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000E888((uint64_t)v32);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v34);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v30 + 32) = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100093D84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v38 = type metadata accessor for JSFamily();
  v37[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v38;
    uint64_t v18 = sub_10000D37C(v37, v38);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v13;
    v35[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v38;
    uint64_t v24 = sub_10000D37C(v37, v38);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v35[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v37);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD000000000000012LL);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v31 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a3);
  id v32 = sub_10008F674(a3);
  uint64_t v33 = sub_10008F4BC();

  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v30 + 32) = v33;
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

void sub_1000940A8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10000DE08(a1, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  uint64_t v4 = (void *)static JSContext.requiredCurrent.getter();
  v5[2] = a1;
  v5[3] = v2;
  JSContext.propagateErrorsToExceptions(_:)(sub_100095BA4, v5);

  sub_10001A504();
}

uint64_t sub_10009410C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = static RunLoopWorkerThread.current.getter();
  if (v6)
  {
    uint64_t v7 = v6;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v8 = (void *)swift_allocObject(&unk_1001ACA98, 40LL, 7LL);
    _OWORD v8[2] = a2;
    v8[3] = a3;
    v8[4] = v7;
    swift_bridgeObjectRetain(a2);
    id v9 = a3;
    swift_retain(v7);
    uint64_t v10 = sub_10008C048(a1, (uint64_t)sub_100095BF0, (uint64_t)v8);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v10 = type metadata accessor for JSError();
    id v11 = sub_10008F29C(12LL, 0xD000000000000037LL, 0x80000001001711A0LL, 0LL, 0LL);
    swift_willThrow(v11);
  }

  return v10;
}

void sub_100094230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v77 = a2;
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v86 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000308B8(0x79747265706F7270LL, 0xEC000000656D614ELL, a4, &aBlock);
  if (!v80)
  {
    sub_10000E888((uint64_t)&aBlock);
    goto LABEL_10;
  }

  uint64_t v75 = v10;
  uint64_t v76 = a6;
  if ((swift_dynamicCast(&v83, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_10:
    uint64_t v41 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v42 = swift_allocObject(v41, 64LL, 7LL);
    *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v42 + 56) = &type metadata for String;
    *(void *)(v42 + 32) = 0xD000000000000014LL;
    *(void *)(v42 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x80000001001711E0LL;
    goto LABEL_14;
  }

  uint64_t v73 = v11;
  uint64_t v74 = v83;
  uint64_t v16 = v84;
  sub_1000308B8(0x4449656C646E7562LL, 0xE800000000000000LL, a4, &aBlock);
  if (!v80)
  {
    swift_bridgeObjectRelease();
    sub_10000E888((uint64_t)&aBlock);
LABEL_13:
    uint64_t v43 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v44 = swift_allocObject(v43, 64LL, 7LL);
    *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v44 + 56) = &type metadata for String;
    *(void *)(v44 + 32) = 0xD000000000000010LL;
    *(void *)(v44 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100171200LL;
LABEL_14:
    id v21 = (id)JSCallable.call(_:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return;
    }
    goto LABEL_18;
  }

  uint64_t v17 = v16;
  if ((swift_dynamicCast(&v83, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  uint64_t v18 = v83;
  uint64_t v19 = v84;
  id v20 = objc_allocWithZone(&OBJC_CLASS___FAEligiblityEvaluationRequest);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  uint64_t v66 = v17;
  uint64_t v69 = v19;
  uint64_t v70 = v18;
  id v21 = sub_100095C0C(v74, v17, v18, v19);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v71 = qword_1001DBB30;
  uint64_t v22 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v23 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v24 = *(void *)(v23 + 72);
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v67 = v24;
  uint64_t v27 = swift_allocObject(v22, v26 + 2 * v24, v25 | 7);
  *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v68 = v27;
  uint64_t v28 = v27 + v26;
  Swift::String v80 = (void *)type metadata accessor for JSFamily();
  *(void *)&__int128 aBlock = a5;
  id v72 = a5;
  id v29 = (id)AMSLogKey(v72);
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v66 = v28;
    uint64_t v32 = v31;
    uint64_t v34 = v33;

    swift_bridgeObjectRetain(v34);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v35._uint64_t countAndFlagsBits = 0LL;
    v35._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    Swift::String v36 = v80;
    Swift::String v37 = sub_10000D37C(&aBlock, (uint64_t)v80);
    uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v83 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v83);
    sub_10000E888((uint64_t)&v83);
    v39._uint64_t countAndFlagsBits = 5972026LL;
    v39._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v83 = v32;
    uint64_t v84 = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v83);
    sub_10000E888((uint64_t)&v83);
    v40._uint64_t countAndFlagsBits = 93LL;
    v40._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    LogMessage.init(stringInterpolation:)(v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v45._uint64_t countAndFlagsBits = 0LL;
    v45._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v45);
    uint64_t v46 = v80;
    uint64_t v47 = sub_10000D37C(&aBlock, (uint64_t)v80);
    uint64_t v48 = swift_getDynamicType(v47, v46, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v48);
    uint64_t v83 = v48;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v83);
    sub_10000E888((uint64_t)&v83);
    v49._uint64_t countAndFlagsBits = 58LL;
    v49._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v49);
    LogMessage.init(stringInterpolation:)(v15);
    uint64_t v17 = v66;
  }

  sub_10000D3A0(&aBlock);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(69LL, 2LL);
  v50._uint64_t countAndFlagsBits = 0xD000000000000034LL;
  v50._object = (void *)0x8000000100171220LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v50);
  Swift::String v80 = &type metadata for String;
  *(void *)&__int128 aBlock = v70;
  *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = v69;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&aBlock);
  sub_10000E888((uint64_t)&aBlock);
  v51._object = (void *)0x8000000100171260LL;
  v51._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v51);
  Swift::String v80 = &type metadata for String;
  *(void *)&__int128 aBlock = v74;
  *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = v17;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&aBlock);
  sub_10000E888((uint64_t)&aBlock);
  v52._uint64_t countAndFlagsBits = 41LL;
  v52._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v52);
  uint64_t v53 = LogMessage.init(stringInterpolation:)(v15);
  uint64_t v54 = static os_log_type_t.default.getter(v53);
  sub_1000BD1B0(v54, v68);
  swift_bridgeObjectRelease();
  uint64_t v55 = v73;
  uint64_t v56 = v86;
  uint64_t v57 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v86, v77, v75);
  uint64_t v58 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v59 = (v58 + 32) & ~v58;
  uint64_t v60 = swift_allocObject(&unk_1001ACAC0, v59 + v12, v58 | 7);
  uint64_t v61 = v72;
  uint64_t v62 = v76;
  *(void *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = v72;
  *(void *)(v60 + 24) = v62;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v60 + v59, v56, v57);
  id v81 = sub_100095CE4;
  uint64_t v82 = v60;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
  uint64_t v79 = sub_100095110;
  Swift::String v80 = &unk_1001ACAD8;
  id v63 = _Block_copy(&aBlock);
  id v64 = v61;
  swift_retain(v62);
  swift_release();
  [v21 startRequestWithCompletion:v63];
  _Block_release(v63);
LABEL_18:
}

uint64_t sub_1000948A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v59 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v16, v68);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0x6C69626967696C65LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEB00000000797469LL;
  *(void *)(inited + 72) = &type metadata for UInt;
  uint64_t v60 = a1;
  *(void *)(inited + 48) = a1;
  uint64_t v69 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (a2)
  {
    uint64_t v56 = a5;
    uint64_t v57 = v10;
    uint64_t v58 = a4;
    swift_errorRetain(a2);
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v55 = qword_1001DBB30;
    uint64_t v18 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v19 = type metadata accessor for LogMessage(0LL);
    uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v19 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v67 = type metadata accessor for JSFamily();
    v66[0] = a3;
    id v21 = (id)AMSLogKey(a3);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v24 = v23;

      swift_bridgeObjectRetain(v24);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v25._uint64_t countAndFlagsBits = 0LL;
      v25._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      uint64_t v26 = v67;
      uint64_t v27 = sub_10000D37C(v66, v67);
      uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v64[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v64);
      sub_10000E888((uint64_t)v64);
      v29._uint64_t countAndFlagsBits = 5972026LL;
      v29._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      uint64_t MetatypeMetadata = &type metadata for String;
      v64[0] = v54;
      v64[1] = v24;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v64);
      sub_10000E888((uint64_t)v64);
      v30._uint64_t countAndFlagsBits = 93LL;
      v30._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t v32 = v67;
      uint64_t v33 = sub_10000D37C(v66, v67);
      uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
      v64[0] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v64);
      sub_10000E888((uint64_t)v64);
      v35._uint64_t countAndFlagsBits = 58LL;
      v35._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(v66);
    LogMessage.init(stringLiteral:)(0xD00000000000002DLL);
    swift_getErrorValue(a2, v63);
    uint64_t v36 = v61;
    uint64_t v37 = v62;
    uint64_t v67 = v62;
    uint64_t v38 = sub_10000D63C(v66);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16LL))(v38, v36, v37);
    static LogMessage.safe(_:)(v66);
    uint64_t v39 = sub_10000E888((uint64_t)v66);
    uint64_t v40 = static os_log_type_t.error.getter(v39);
    sub_1000BD1B0(v40, v20);
    swift_bridgeObjectRelease();
    id v41 = objc_allocWithZone((Class)type metadata accessor for JSError());
    swift_errorRetain(a2);
    id v42 = sub_10008F674(a2);
    uint64_t v43 = sub_10008F4BC();

    uint64_t v67 = sub_10000D33C(&qword_1001C8F18);
    v66[0] = v43;
    sub_100030118((uint64_t)v66, 0x726F727265LL, 0xE500000000000000LL);
    swift_errorRelease(a2);
    uint64_t v10 = v57;
    a5 = v56;
  }

  uint64_t v44 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v59, a5, v10);
  uint64_t v45 = v69;
  uint64_t v46 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v47 = (v46 + 32) & ~v46;
  unint64_t v48 = (v12 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v49 = swift_allocObject(&unk_1001ACB10, v48 + 8, v46 | 7);
  uint64_t v50 = v60;
  *(void *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v49 + 24) = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v49 + v47, v44, v10);
  *(void *)(v49 + v48) = v45;
  id v51 = a3;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100095DA0, v49);
  return swift_release();
}

uint64_t sub_100094DAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  id v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)) + 2 * v12,  *(unsigned __int8 *)(v11 + 80) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  id v42 = (void *)type metadata accessor for JSFamily();
  v41[0] = a1;
  id v14 = (id)AMSLogKey(a1);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v38[1] = v12;
    uint64_t v17 = v16;
    uint64_t v19 = v18;

    swift_bridgeObjectRetain(v19);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    id v21 = v42;
    uint64_t v22 = sub_10000D37C(v41, (uint64_t)v42);
    uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v39[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000E888((uint64_t)v39);
    v24._uint64_t countAndFlagsBits = 5972026LL;
    v24._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t MetatypeMetadata = &type metadata for String;
    v39[0] = v17;
    v39[1] = v19;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000E888((uint64_t)v39);
    v25._uint64_t countAndFlagsBits = 93LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v9);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = v42;
    uint64_t v28 = sub_10000D37C(v41, (uint64_t)v42);
    uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
    v39[0] = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000E888((uint64_t)v39);
    v30._uint64_t countAndFlagsBits = 58LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v9);
  }

  sub_10000D3A0(v41);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(49LL, 1LL);
  v31._object = (void *)0x80000001001712D0LL;
  v31._uint64_t countAndFlagsBits = 0xD000000000000030LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  id v42 = &type metadata for UInt;
  v41[0] = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
  sub_10000E888((uint64_t)v41);
  v32._uint64_t countAndFlagsBits = 41LL;
  v32._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  uint64_t v33 = LogMessage.init(stringInterpolation:)(v9);
  uint64_t v34 = static os_log_type_t.default.getter(v33);
  sub_1000BD1B0(v34, v13);
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v36 = swift_allocObject(v35, 64LL, 7LL);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v36 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v36 + 32) = a4;
  swift_bridgeObjectRetain(a4);
  sub_1000854F0(v36);
  return swift_bridgeObjectRelease();
}

void sub_100095110(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

id sub_10009517C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  id v7 = a1;
  uint64_t v8 = (void *)a4(v6);
  swift_bridgeObjectRelease(v6);

  return v8;
}

uint64_t sub_1000951F4()
{
  v2[3] = &type metadata for AMSFlags;
  v2[4] = sub_100038728();
  LOBYTE(v2[0]) = 1;
  char v0 = isFeatureEnabled(_:)(v2);
  sub_10000D3A0(v2);
  return v0 & 1;
}

uint64_t sub_100095248(uint64_t a1)
{
  v2[62] = a1;
  v2[63] = v1;
  v2[64] = swift_getObjectType(v1);
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v2[65] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000952A0()
{
  if ((sub_1000951F4() & 1) != 0
    && ((objc_msgSend(*(id *)(v1 + 496), "ams_isiCloudAccount") & 1) != 0
     || (v2 =  objc_msgSend( *(id *)(*(void *)(v1 + 504) + OBJC_IVAR____TtC14amsengagementd8JSFamily_accountStore),  "ams_iCloudAccountForAccount:",  *(void *)(v1 + 496))) != 0 && (v3 = v2, unsigned int v4 = objc_msgSend(v2, "isActive"), v3, v4)))
  {
    uint64_t v5 = (void *)(v1 + 224);
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v6 = *(void **)(v1 + 504);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v7 = sub_100010570();
    uint64_t v8 = sub_1000960D4(v7);
    *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    *(void *)(v1 + 248) = type metadata accessor for JSFamily();
    *(void *)(v1 + 224) = v6;
    id v9 = (id)AMSLogKey(v6);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v13 = v12;

      swift_bridgeObjectRetain(v13);
      sub_10000DC34();
      sub_10000DC08();
      sub_10009609C((void *)(v1 + 224));
      *(void *)(v1 + 344) = sub_10003881C();
      *(void *)(v1 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v10;
      sub_100096150();
      sub_100096148();
      sub_10000DC14();
      *(void *)(v1 + 408) = &type metadata for String;
      *(void *)(v1 + 384) = v11;
      *(void *)(v1 + 392) = v13;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 384);
      uint64_t v5 = (void *)(v1 + 224);
      sub_10000E888(v1 + 384);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_10009609C((void *)(v1 + 224));
      *(void *)(v1 + 376) = sub_10003881C();
      *(void *)(v1 + 352) = v0;
      sub_100096150();
      sub_100096148();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    uint64_t v38 = v1 + 16;
    uint64_t v39 = *(void *)(v1 + 504);
    sub_10000D3A0(v5);
    uint64_t v40 = LogMessage.init(stringLiteral:)(0xD000000000000019LL);
    uint64_t v41 = static os_log_type_t.info.getter(v40);
    sub_1000BD1B0(v41, v8);
    swift_bridgeObjectRelease();
    id v42 = [objc_allocWithZone(FAFetchFamilyCircleRequest) init];
    *(void *)(v1 + 528) = v42;
    [v42 setCachePolicy:*(_BYTE *)(v39 + OBJC_IVAR____TtC14amsengagementd8JSFamily_config + 64) != 0];
    *(void *)(v1 + 56) = v1 + 488;
    *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    *(void *)(v1 + 24) = sub_10009585C;
    uint64_t v43 = swift_continuation_init(v1 + 16, 1LL);
    *(void *)(v1 + 144) = _NSConcreteStackBlock;
    uint64_t v44 = (void *)(v1 + 144);
    v44[1] = 0x40000000LL;
    v44[2] = sub_100095A10;
    void v44[3] = &unk_1001ACA70;
    v44[4] = v43;
    sub_100096158(v43, "startRequestWithCompletionHandler:");
    uint64_t v37 = v38;
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    id v14 = *(void **)(v1 + 504);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v15 = sub_100010570();
    uint64_t v16 = sub_1000960D4(v15);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    *(void *)(v1 + 472) = type metadata accessor for JSFamily();
    *(void *)(v1 + 448) = v14;
    id v17 = (id)AMSLogKey(v14);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(v21);
      sub_10000DC34();
      sub_10000DC08();
      sub_10009609C((void *)(v1 + 448));
      *(void *)(v1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10003881C();
      *(void *)(v1 + 256) = v18;
      sub_100096150();
      sub_100096148();
      sub_10000DC14();
      *(void *)(v1 + 312) = &type metadata for String;
      *(void *)(v1 + 288) = v19;
      *(void *)(v1 + 296) = v21;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 288);
      sub_10000E888(v1 + 288);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_10009609C((void *)(v1 + 448));
      *(void *)(v1 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10003881C();
      *(void *)(v1 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v0;
      sub_100096150();
      sub_100096148();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    uint64_t v23 = *(void **)(v1 + 496);
    uint64_t v22 = *(void *)(v1 + 504);
    sub_10000D3A0((void *)(v1 + 448));
    uint64_t v24 = LogMessage.init(stringLiteral:)(0xD00000000000001ELL);
    uint64_t v25 = static os_log_type_t.info.getter(v24);
    sub_1000BD1B0(v25, v16);
    uint64_t v26 = swift_bridgeObjectRelease();
    int v27 = *(unsigned __int8 *)(v22 + OBJC_IVAR____TtC14amsengagementd8JSFamily_config + 64);
    sub_10000DE08(v26, &qword_1001CB8E0, &OBJC_CLASS___AMSFamilyInfoLookupTask_ptr);
    uint64_t v28 = qword_1001C7F10;
    id v29 = v23;
    if (v28 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    uint64_t v30 = 2LL * (v27 == 0);
    uint64_t v31 = v1 + 80;
    Swift::String v32 = *(void **)(v1 + 496);
    uint64_t v33 = qword_1001C90F0;
    swift_unknownObjectRetain(qword_1001C90F0);
    id v34 = sub_100095A24(v32, v33);
    *(void *)(v1 + 544) = v34;
    *(void *)(v1 + 552) = [v34 performFamilyInfoLookupWithCachePolicy:v30];
    *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1 + 480;
    *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
    *(void *)(v1 + 88) = sub_1000958E8;
    uint64_t v35 = swift_continuation_init(v1 + 80, 1LL);
    *(void *)(v1 + 184) = _NSConcreteStackBlock;
    uint64_t v36 = (void *)(v1 + 184);
    v36[1] = 0x40000000LL;
    v36[2] = sub_100095A10;
    void v36[3] = &unk_1001ACA58;
    v36[4] = v35;
    sub_100096158(v35, "resultWithCompletion:");
    uint64_t v37 = v31;
  }

  return swift_continuation_await(v37);
}

uint64_t sub_10009585C()
{
  *(void *)(v0 + 536) = *(void *)(v0 + 48);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000958A0()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 520);

  swift_task_dealloc(v3);
  return sub_100096108(v2, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000958E8()
{
  *(void *)(v0 + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = *(void *)(v0 + 112);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_10009592C()
{
  uint64_t v1 = *(void **)(v0 + 544);
  sub_100096790(*(void **)(v0 + 480));
  uint64_t v3 = v2;

  uint64_t v4 = *(void *)(v0 + 520);
  swift_task_dealloc(v4);
  return sub_100096108(v3, *(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10009597C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 528);
  uint64_t v3 = swift_willThrow(a1);
  swift_willThrow(v3);

  swift_task_dealloc(*(void *)(v1 + 520));
  return sub_1000960F8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1000959C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 552);
  uint64_t v3 = *(void **)(v1 + 544);
  swift_willThrow(a1);

  swift_task_dealloc(*(void *)(v1 + 520));
  return sub_1000960F8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100095A10(uint64_t a1, void *a2, void *a3)
{
  return sub_100095A80( a1,  a2,  a3,  (uint64_t (*)(void, void *))sub_10009B9F8,  (uint64_t (*)(void, void *))sub_10009DE6C);
}

id sub_100095A24(void *a1, uint64_t a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithAccount:a1 bag:a2];

  swift_unknownObjectRelease(a2);
  return v5;
}

uint64_t sub_100095A80( uint64_t result, void *a2, void *a3, uint64_t (*a4)(void, void *), uint64_t (*a5)(void, void *))
{
  if (a3) {
    return a4(*(void *)(result + 32), a3);
  }
  a3 = a2;
  a4 = a5;
  if (a2) {
    return a4(*(void *)(result + 32), a3);
  }
  __break(1u);
  return result;
}

void sub_100095ACC()
{
}

id sub_100095B04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSFamily();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSFamily()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd8JSFamily);
}

uint64_t sub_100095BA4(void *a1)
{
  return sub_10009410C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100095BBC()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100095BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_100095C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  id v9 = [v4 initWithPropertyName:v7 bundleID:v8];

  return v9;
}

uint64_t sub_100095C90()
{
  uint64_t v3 = v1 + v2;
  uint64_t v5 = v4 | 7;
  sub_1000672EC();
  swift_release();
  sub_100051B30();
  return swift_deallocObject(v0, v3, v5);
}

uint64_t sub_100095CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  return sub_1000948A4(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_100095D30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100095D40(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100095D48()
{
  uint64_t v3 = v2 | 7;
  uint64_t v5 = ((v4 + v1 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  sub_1000672EC();
  sub_100051B30();
  swift_bridgeObjectRelease();
  return sub_100092CCC(v0, v5, v3);
}

uint64_t sub_100095DA0()
{
  return sub_100094DAC(*(void **)(v0 + 16), *(void *)(v0 + 24), v0 + v1, *(void *)(v0 + v2));
}

uint64_t sub_100095DD0(void *a1)
{
  return sub_100092E28(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100095DE8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100095E0C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100095E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100095E5C()
{
  uint64_t v1 = sub_1000841C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  swift_release();
  id v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return sub_100092CCC(v0, v8, v6);
}

uint64_t sub_100095EF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_1000841C0() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  id v14 = (void *)swift_task_alloc(dword_1001CB8F4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *id v14 = v2;
  v14[1] = sub_10000D9D4;
  return sub_1000937CC(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100095FB0()
{
  return sub_100095FD4((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100095FBC()
{
  return sub_10009605C((uint64_t (*)(void, uint64_t, void))sub_100093D84);
}

uint64_t sub_100095FC8()
{
  return sub_100095FD4((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100095FD4(void (*a1)(void))
{
  uint64_t v3 = sub_1000841C0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v5 | 7;
  unint64_t v8 = (*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000672EC();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  a1(*(void *)(v1 + v8));
  return sub_100092CCC(v1, v8 + 8, v7);
}

uint64_t sub_100096050()
{
  return sub_10009605C((uint64_t (*)(void, uint64_t, void))sub_100093A94);
}

uint64_t sub_10009605C(uint64_t (*a1)(void, uint64_t, void))
{
  return a1(*(void *)(v1 + 16), v1 + v2, *(void *)(v1 + v3));
}

uint64_t sub_10009609C(void *a1)
{
  uint64_t v2 = sub_10000D37C(a1, v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000960B8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000960D4(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1000960F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100096108(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

  ;
}

void sub_100096130()
{
  uint64_t v2 = (void *)(v1 - 8);
  void *v2 = *v0;
  void *v2 = *v0;
}

uint64_t sub_100096148()
{
  return sub_10000E888(v0);
}

uint64_t sub_100096150()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

id sub_100096158(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

  ;
}

  ;
}

void sub_100096184(void *a1)
{
  v229 = _swiftEmptyDictionarySingleton;
  id v3 = [a1 members];
  uint64_t v4 = sub_10000DAA0(0LL, &qword_1001CB900, &OBJC_CLASS___FAFamilyMember_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);
  sub_100096E54();
  if ((unint64_t)v1 >> 62)
  {
LABEL_54:
    if (v1 < 0) {
      uint64_t v163 = v1;
    }
    else {
      uint64_t v163 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v163);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = 0LL;
  if (v5)
  {
    unint64_t v205 = v1 & 0xC000000000000001LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4LL;
    uint64_t v164 = 0x8000000100171430LL;
    uint64_t v175 = 0x8000000100171410LL;
    uint64_t v185 = v5;
    uint64_t v195 = v1;
    while (1)
    {
      if (v205) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v1);
      }
      else {
        id v9 = *(id *)(v1 + 8 * v8);
      }
      uint64_t v10 = v9;
      if (__OFADD__(v8 - 4, 1LL))
      {
        __break(1u);
        goto LABEL_54;
      }

      uint64_t v11 = (uint64_t)sub_100096DDC((uint64_t)v9, "isOrganizer");
      if ((v11 & 1) != 0)
      {

        uint64_t v11 = v10;
        uint64_t v6 = v10;
      }

      id v12 = sub_100096E4C(v11, "me");
      if (!v12)
      {

        __break(1u);
        return;
      }

      uint64_t v13 = v12;
      id v14 = [v12 dsid];

      id v16 = sub_100096DDC(v15, "dsid");
      id v17 = v16;
      if (v14)
      {
        if (!v16)
        {
          id v17 = v14;
LABEL_20:

          uint64_t v27 = 0LL;
          v228 = _swiftEmptyDictionarySingleton;
LABEL_21:
          uint64_t v28 = -1LL;
          goto LABEL_22;
        }

        sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
        id v18 = v14;
        char v19 = static NSObject.== infix(_:_:)(v18, v17);

        v228 = _swiftEmptyDictionarySingleton;
        if ((v19 & 1) == 0)
        {
          uint64_t v27 = 0LL;
          goto LABEL_21;
        }
      }

      else
      {
        if (v16) {
          goto LABEL_20;
        }
        v228 = _swiftEmptyDictionarySingleton;
      }

      uint64_t v28 = (uint64_t)sub_100096E4C((uint64_t)v16, "ageCategory");
      uint64_t v27 = 1LL;
LABEL_22:
      id v29 = sub_100096D64(v28, v20, v21, v22, v23, v24, v25, v26, v164, v175, v185, v195, v205, v8 - 3, v28);
      sub_100096C94((uint64_t)v29);
      id v31 = sub_100096DDC(v30, "hasAskToBuyEnabled");
      uint64_t v39 = sub_100096D64( (uint64_t)v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v165,  v176,  v186,  v196,  v206,  v216,  (char)v31);
      sub_100096CC4((uint64_t)v39);
      v227 = &type metadata for Bool;
      unint64_t v48 = sub_100096D64(v40, v41, v42, v43, v44, v45, v46, v47, v166, v177, v187, v197, v207, v217, v27);
      sub_100030118((uint64_t)v48, 0xD000000000000013LL, v178);
      sub_10000D6DC(v10, (SEL *)&selRef_firstName);
      if (v49) {
        sub_100096DD0();
      }
      else {
        sub_100096D28();
      }
      uint64_t v58 = sub_100096D64(v50, v51, v52, v53, v54, v55, v56, v57, v167, v178, v188, v198, v208, v218, v225);
      sub_100096D0C((uint64_t)v58);
      id v60 = sub_100096DDC(v59, "dsid");
      if (v60)
      {
        uint64_t v61 = (uint64_t)v60;
        id v62 = [v60 stringValue];
        sub_100096E54();
        static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        sub_100096DF8();
        v227 = &type metadata for String;
        uint64_t v225 = v61;
        v226 = v17;
      }

      else
      {
        sub_100096D28();
      }

      uint64_t v71 = sub_100096DB8(v63, v64, v65, v66, v67, v68, v69, v70, v168, v179, v189, v199, v209, v219, v225);
      sub_100096CB4((uint64_t)v71, v72);
      sub_10000D6DC(v10, (SEL *)&selRef_appleID);
      if (v73) {
        sub_100096DD0();
      }
      else {
        sub_100096D28();
      }
      uint64_t v82 = sub_100096DB8(v74, v75, v76, v77, v78, v79, v80, v81, v169, v180, v190, v200, v210, v220, v225);
      sub_100096C7C((uint64_t)v82, v83);
      id v85 = sub_100096DDC(v84, "iTunesAccountDSID");
      if (v85)
      {
        uint64_t v86 = (uint64_t)v85;
        id v87 = [v85 stringValue];
        sub_100096E54();
        static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        sub_100096DF8();
        v227 = &type metadata for String;
        uint64_t v225 = v86;
        v226 = v17;
      }

      else
      {
        sub_100096D28();
      }

      Swift::String v96 = sub_100096DA0(v88, v89, v90, v91, v92, v93, v94, v95, v170, v181, v191, v201, v211, v221, v225);
      sub_100096CB4((uint64_t)v96, v97);
      sub_10000D6DC(v10, (SEL *)&selRef_iTunesAccountUsername);
      if (v98) {
        sub_100096DD0();
      }
      else {
        sub_100096D28();
      }
      uint64_t v107 = sub_100096DA0(v99, v100, v101, v102, v103, v104, v105, v106, v171, v182, v192, v202, v212, v222, v225);
      sub_100096C7C((uint64_t)v107, v108);
      sub_10000D6DC(v10, (SEL *)&selRef_lastName);
      if (v109) {
        sub_100096DD0();
      }
      else {
        sub_100096D28();
      }
      uint64_t v118 = sub_100096D64(v110, v111, v112, v113, v114, v115, v116, v117, v172, v183, v193, v203, v213, v223, v225);
      sub_100096D34((uint64_t)v118);
      id v120 = sub_100096DDC(v119, "purchaseSharingEnabled");
      v227 = &type metadata for Bool;
      uint64_t v127 = sub_100096D64( (uint64_t)v120,  0xD000000000000010LL,  v121,  v122,  v123,  v124,  v125,  v126,  v173,  v184,  v194,  v204,  v214,  v224,  (char)v120);
      sub_100030118((uint64_t)v127, v128, v164);
      uint64_t v129 = v228;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100014550();
        uint64_t v7 = v132;
      }

      unint64_t v131 = v7[2];
      unint64_t v130 = v7[3];
      if (v131 >= v130 >> 1)
      {
        sub_100096DE4(v130);
        sub_100014550();
        uint64_t v7 = v133;
      }

      v7[2] = v131 + 1;
      v7[v131 + 4] = v129;

      ++v8;
      uint64_t v1 = v195;
      if (v215 == v185) {
        goto LABEL_47;
      }
    }
  }

  uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_47:
  uint64_t v134 = swift_bridgeObjectRelease();
  v227 = &type metadata for Int;
  uint64_t v225 = (uint64_t)sub_100096E4C(v134, "ageCategory");
  sub_100096C94((uint64_t)&v225);
  v227 = (void *)sub_10000D33C(&qword_1001CB4C0);
  uint64_t v225 = (uint64_t)v7;
  sub_100096CE8((uint64_t)&v225);
  if (v6)
  {
    id v135 = v6;
    id v136 = [v135 dsid];
    if (v136)
    {
      unint64_t v137 = v136;
      id v138 = [v136 stringValue];

      uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(v138);
      uint64_t v141 = v140;

      v227 = &type metadata for String;
      uint64_t v225 = v139;
      v226 = v141;
    }

    else
    {
      sub_100096D28();
    }

    uint64_t v149 = sub_100096E30( v142,  0xD000000000000019LL,  v143,  v144,  v145,  v146,  v147,  v148,  v164,  v175,  v185,  v195,  v205,  v215,  v225);
    sub_100030118((uint64_t)v149, v150, v151);
  }

  id v152 = objc_msgSend(a1, "sharedPaymentEnabled", v164);
  v227 = &type metadata for Bool;
  uint64_t v160 = sub_100096E30( (uint64_t)v152,  v153,  v154,  v155,  v156,  v157,  v158,  v159,  v174,  v175,  v185,  v195,  v205,  v215,  (char)v152);
  sub_100096E04((uint64_t)v160, v161, v162);
}

void sub_100096790(void *a1)
{
  unint64_t v205 = _swiftEmptyDictionarySingleton;
  id v2 = [a1 familyMembers];
  uint64_t v3 = sub_10000DAA0(0LL, &qword_1001CB908, &OBJC_CLASS___AMSFamilyMember_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0) {
      uint64_t v156 = v4;
    }
    else {
      uint64_t v156 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v156);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id v157 = a1;
  if (!v5)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v203 = (void *)sub_10000D33C(&qword_1001CB4C0);
    uint64_t v201 = v7;
    sub_100096CE8((uint64_t)&v201);
    unint64_t v130 = v157;
    id v131 = [v157 headOfHouseholdICloudDSID];
    id v132 = [v131 stringValue];

    LOBYTE(v13Hasher._combine(_:)(v1 & 1) = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
    uint64_t v134 = v133;

    uint64_t v203 = &type metadata for String;
    uint64_t v202 = v134;
    uint64_t v142 = sub_100096E1C( v135,  0xD000000000000019LL,  v136,  v137,  v138,  v139,  v140,  v141,  (uint64_t)v157,  v168,  v179,  v190,  (char)v131);
    sub_100030118((uint64_t)v142, v143, v144);
    id v145 = [v130 isHeadOfHouseholdSharingPayment];
    uint64_t v203 = &type metadata for Bool;
    uint64_t v153 = sub_100096E1C( (uint64_t)v145,  v146,  v147,  v148,  v149,  v150,  v151,  v152,  (uint64_t)v167,  v178,  v189,  v200,  (char)v145);
    sub_100096E04((uint64_t)v153, v154, v155);

    return;
  }

  if (v5 >= 1)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v179 = 0x8000000100171410LL;
    unint64_t v190 = v4 & 0xC000000000000001LL;
    uint64_t v168 = 0x8000000100171430LL;
    uint64_t v8 = v4;
    do
    {
      if (v190) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }
      else {
        id v9 = *(id *)(v4 + 8 * v6 + 32);
      }
      id v17 = v9;
      uint64_t v204 = _swiftEmptyDictionarySingleton;
      id v18 = sub_100096D58((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, (uint64_t)v157, v168, v179, v190, -1);
      sub_100096C94((uint64_t)v18);
      id v20 = sub_100096E44(v19, "isAskToBuyEnabled");
      uint64_t v28 = sub_100096D58((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27, (uint64_t)v158, v169, v180, v191, (char)v20);
      sub_100096CC4((uint64_t)v28);
      id v30 = sub_100096E44(v29, "isCurrentSignedInUser");
      uint64_t v203 = &type metadata for Bool;
      uint64_t v38 = sub_100096D58((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, (uint64_t)v159, v170, v181, v192, (char)v30);
      sub_100030118((uint64_t)v38, 0xD000000000000013LL, v182);
      sub_10000D6DC(v17, (SEL *)&selRef_firstName);
      if (v39) {
        sub_100096E10();
      }
      else {
        sub_100096D4C();
      }
      uint64_t v48 = v5;
      uint64_t v49 = sub_100096D58(v40, v41, v42, v43, v44, v45, v46, v47, (uint64_t)v160, v171, v182, v193, (char)v201);
      sub_100096D0C((uint64_t)v49);
      id v50 = [v17 iCloudDSID];
      if (v50)
      {
        uint64_t v51 = v50;
        id v52 = [v50 stringValue];

        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v55 = v54;

        uint64_t v203 = &type metadata for String;
        uint64_t v201 = (void *)v53;
        uint64_t v202 = v55;
      }

      else
      {
        sub_100096D4C();
      }

      uint64_t v64 = sub_100096D88(v56, v57, v58, v59, v60, v61, v62, v63, (uint64_t)v161, v172, v183, v194, (char)v201);
      sub_100096CB4((uint64_t)v64, v65);
      sub_10000D6DC(v17, (SEL *)&selRef_iCloudUsername);
      if (v66) {
        sub_100096E10();
      }
      else {
        sub_100096D4C();
      }
      uint64_t v75 = sub_100096D88(v67, v68, v69, v70, v71, v72, v73, v74, (uint64_t)v162, v173, v184, v195, (char)v201);
      sub_100096C7C((uint64_t)v75, v76);
      id v77 = [v17 iTunesDSID];
      if (v77)
      {
        uint64_t v78 = v77;
        id v79 = [v77 stringValue];

        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        uint64_t v82 = v81;

        uint64_t v203 = &type metadata for String;
        uint64_t v201 = (void *)v80;
        uint64_t v202 = v82;
      }

      else
      {
        sub_100096D4C();
      }

      uint64_t v91 = sub_100096D70(v83, v84, v85, v86, v87, v88, v89, v90, (uint64_t)v163, v174, v185, v196, (char)v201);
      sub_100096CB4((uint64_t)v91, v92);
      sub_10000D6DC(v17, (SEL *)&selRef_iTunesUsername);
      if (v93) {
        sub_100096E10();
      }
      else {
        sub_100096D4C();
      }
      uint64_t v102 = sub_100096D70(v94, v95, v96, v97, v98, v99, v100, v101, (uint64_t)v164, v175, v186, v197, (char)v201);
      sub_100096C7C((uint64_t)v102, v103);
      sub_10000D6DC(v17, (SEL *)&selRef_lastName);
      if (v104) {
        sub_100096E10();
      }
      else {
        sub_100096D4C();
      }
      uint64_t v113 = sub_100096D58(v105, v106, v107, v108, v109, v110, v111, v112, (uint64_t)v165, v176, v187, v198, (char)v201);
      sub_100096D34((uint64_t)v113);
      id v115 = sub_100096E44(v114, "isSharingPurchases");
      uint64_t v203 = &type metadata for Bool;
      uint64_t v122 = sub_100096D58( (uint64_t)v115,  0xD000000000000010LL,  v116,  v117,  v118,  v119,  v120,  v121,  (uint64_t)v166,  v177,  v188,  v199,  (char)v115);
      sub_100030118((uint64_t)v122, v123, v168);
      uint64_t v124 = v204;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_100014550();
        uint64_t v7 = v128;
      }

      unint64_t v126 = v7[2];
      unint64_t v125 = v7[3];
      if (v126 >= v125 >> 1)
      {
        sub_100096DE4(v125);
        sub_100014550();
        uint64_t v7 = v129;
      }

      ++v6;
      v7[2] = v126 + 1;
      v7[v126 + 4] = v124;

      uint64_t v5 = v48;
      BOOL v127 = v48 == v6;
      uint64_t v4 = v8;
    }

    while (!v127);
    goto LABEL_35;
  }

  __break(1u);
}

uint64_t sub_100096C44(uint64_t a1)
{
  return Dictionary.description.getter( a1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

uint64_t sub_100096C64()
{
  return sub_100096C44(*v0);
}

ValueMetadata *type metadata accessor for JSFamilyCircle()
{
  return &type metadata for JSFamilyCircle;
}

void sub_100096C7C(uint64_t a1, uint64_t a2)
{
}

void sub_100096C94(uint64_t a1)
{
}

void sub_100096CB4(uint64_t a1, uint64_t a2)
{
}

void sub_100096CC4(uint64_t a1)
{
}

void sub_100096CE8(uint64_t a1)
{
}

void sub_100096D0C(uint64_t a1)
{
}

double sub_100096D28()
{
  return 0.0;
}

void sub_100096D34(uint64_t a1)
{
}

double sub_100096D4C()
{
  return 0.0;
}

char *sub_100096D58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return &a13;
}

char *sub_100096D64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

char *sub_100096D70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return &a13;
}

char *sub_100096D88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return &a13;
}

char *sub_100096DA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

char *sub_100096DB8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

  ;
}

id sub_100096DDC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

BOOL sub_100096DE4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100096DF8()
{
}

void sub_100096E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

  ;
}

char *sub_100096E1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return &a13;
}

char *sub_100096E30( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  return &a15;
}

id sub_100096E44(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

id sub_100096E4C(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_100096E54()
{
}

void sub_100096E5C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v3)
  {
    while (1)
    {
      sub_100016F5C();
      if (v3 < 0) {
        break;
      }
      uint64_t v4 = 0LL;
      while (v3 != v4)
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        }
        else {
          id v5 = *(id *)(a1 + 8 * v4 + 32);
        }
        uint64_t v6 = v5;
        uint64_t v7 = sub_10001139C(a2);

        unint64_t v8 = _swiftEmptyArrayStorage[2];
        if (v8 >= _swiftEmptyArrayStorage[3] >> 1) {
          sub_100016F5C();
        }
        ++v4;
        _swiftEmptyArrayStorage[2] = v8 + 1;
        _swiftEmptyArrayStorage[v8 + 4] = v7;
        if (v3 == v4) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_14:
      if (a1 < 0) {
        uint64_t v9 = a1;
      }
      else {
        uint64_t v9 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v9);
      swift_bridgeObjectRelease();
      if (!v3) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
  }

id sub_100096FD4()
{
  uint64_t v1 = OBJC_IVAR____TtC14amsengagementd10JSFollowUp____lazy_storage___dateFormatter;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC14amsengagementd10JSFollowUp____lazy_storage___dateFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC14amsengagementd10JSFollowUp____lazy_storage___dateFormatter);
  }

  else
  {
    id v4 = [objc_allocWithZone(NSISO8601DateFormatter) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + vHasher._combine(_:)(v1 & 1) = v4;
    id v3 = v4;

    id v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

id sub_100097044(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC14amsengagementd10JSFollowUp____lazy_storage___dateFormatter] = 0LL;
  *(void *)&v1[OBJC_IVAR____TtC14amsengagementd10JSFollowUp_accountStore] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for JSFollowUp();
  return objc_msgSendSuper2(&v3, "init");
}

void sub_10009708C(uint64_t a1)
{
}

uint64_t sub_1000970EC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = static RunLoopWorkerThread.current.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v10 = (void *)swift_allocObject(&unk_1001ACFA8, 48LL, 7LL);
    v10[2] = a2;
    v10[3] = a3;
    v10[4] = v9;
    v10[5] = a4;
    swift_bridgeObjectRetain(a3);
    swift_retain(v9);
    id v11 = a4;
    uint64_t v12 = sub_10008C048(a1, (uint64_t)sub_10009A0AC, (uint64_t)v10);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v12 = type metadata accessor for JSError();
    id v13 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v13);
  }

  return v12;
}

void sub_100097214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v31 = a7;
  uint64_t v32 = a2;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [objc_allocWithZone(AMSFollowUp) init];
  id v33 = v13;
  NSString v14 = String._bridgeToObjectiveC()();
  id v29 = [v13 clearFollowUpWithBackingIdentifier:v14];

  id v30 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v30(v12, a3, v9);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v28 = v16 + v11;
  uint64_t v17 = v15 | 7;
  uint64_t v18 = swift_allocObject(&unk_1001ACFD0, v16 + v11, v15 | 7);
  uint64_t v19 = a6;
  id v20 = v31;
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a6;
  *(void *)(v18 + 24) = v20;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v27(v18 + v16, v12, v9);
  uint64_t v38 = sub_10009A0C8;
  uint64_t v39 = v18;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v35 = 1107296256LL;
  uint64_t v36 = sub_1000B1D04;
  uint64_t v37 = &unk_1001ACFE8;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_retain(a6);
  id v22 = v20;
  swift_release();
  id v23 = v29;
  [v29 addErrorBlock:v21];
  _Block_release(v21);
  v30(v12, v32, v9);
  uint64_t v24 = swift_allocObject(&unk_1001AD020, v28, v17);
  *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(v24 + 24) = v22;
  v27(v24 + v16, v12, v9);
  uint64_t v38 = sub_10009A130;
  uint64_t v39 = v24;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v35 = 1107296256LL;
  uint64_t v36 = sub_100061FB8;
  uint64_t v37 = &unk_1001AD038;
  uint64_t v25 = _Block_copy(&aBlock);
  swift_retain(v19);
  id v26 = v22;
  swift_release();
  [v23 addSuccessBlock:v25];
  _Block_release(v25);
}

uint64_t sub_10009750C()
{
  return v0;
}

uint64_t sub_10009757C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = static RunLoopWorkerThread.current.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v12 = (void *)swift_allocObject(&unk_1001ACE90, 56LL, 7LL);
    v12[2] = a2;
    v12[3] = a3;
    v12[4] = a4;
    v12[5] = a5;
    v12[6] = v11;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_retain(v11);
    id v13 = a2;
    uint64_t v14 = sub_10008C048(a1, (uint64_t)sub_100099FFC, (uint64_t)v12);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v14 = type metadata accessor for JSError();
    id v15 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v15);
  }

  return v14;
}

void sub_1000976BC( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a2;
  id v29 = a4;
  uint64_t v32 = a3;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [objc_allocWithZone(AMSFollowUp) init];
  id v37 = v13;
  sub_100099A80(a5);
  id v15 = v14;
  id v38 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  id v33 = [v13 clearFollowUpWithIdentifier:v16 account:v15];

  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v34(v12, v32, v9);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v31 = v17 | 7;
  uint64_t v32 = v18 + v11;
  uint64_t v19 = swift_allocObject(&unk_1001ACEB8, v18 + v11, v17 | 7);
  uint64_t v20 = v35;
  uint64_t v21 = v29;
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
  *(void *)(v19 + 24) = v21;
  id v30 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v30(v19 + v18, v12, v9);
  uint64_t v43 = sub_10009A01C;
  uint64_t v44 = v19;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256LL;
  uint64_t v41 = sub_1000B1D04;
  uint64_t v42 = &unk_1001ACED0;
  id v22 = _Block_copy(&aBlock);
  swift_retain(v20);
  id v23 = v21;
  swift_release();
  id v24 = v33;
  [v33 addErrorBlock:v22];
  _Block_release(v22);
  v34(v12, v36, v9);
  uint64_t v25 = swift_allocObject(&unk_1001ACF08, v32, v31);
  *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
  *(void *)(v25 + 24) = v23;
  v30(v25 + v18, v12, v9);
  uint64_t v43 = sub_10009A034;
  uint64_t v44 = v25;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v40 = 1107296256LL;
  uint64_t v41 = sub_100061FB8;
  uint64_t v42 = &unk_1001ACF20;
  id v26 = _Block_copy(&aBlock);
  swift_retain(v20);
  id v27 = v23;
  swift_release();
  [v24 addSuccessBlock:v26];
  _Block_release(v26);
}

void sub_100097974( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  sub_10009A3E4();
  uint64_t v28 = sub_1000841C0();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void *)(v29 + 64);
  __chkstk_darwin(v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))( (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v20,  v28);
  uint64_t v31 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  uint64_t v33 = swift_allocObject(v27, v32 + v30, v31 | 7);
  *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))( v33 + v32,  (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v28);
  id v34 = v21;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(v25, v33);
  swift_release();
  sub_10000DD84();
}

void sub_100097A3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + 2LL * *(void *)(v4 + 72),
         *(unsigned __int8 *)(v4 + 80) | 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v21 = type metadata accessor for JSFollowUp();
  v20[0] = v1;
  id v6 = (id)AMSLogKey(v1);
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    swift_bridgeObjectRetain(v9);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v10 = v21;
    uint64_t v11 = sub_10000D37C(v20, v21);
    uint64_t DynamicType = swift_getDynamicType(v11, v10, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v13 = v21;
    uint64_t v14 = sub_10000D37C(v20, v21);
    uint64_t v15 = swift_getDynamicType(v14, v13, 1LL);
    swift_getMetatypeMetadata(v15);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v20);
  uint64_t v16 = LogMessage.init(stringLiteral:)(0xD000000000000011LL);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  sub_1000BD1B0(v17, v5);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v19 = sub_10009A3FC(v18);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v19 + 56) = &type metadata for Bool;
  *(_BYTE *)(v19 + 32) = 1;
  sub_1000854F0(v19);
  swift_bridgeObjectRelease();
  sub_10000DD84();
}

uint64_t sub_100097C98()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  sub_10000DE08(ObjectType, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  sub_10009A3D4();
  sub_10009A3CC((uint64_t)sub_100099E20, v2, v3, v4, v5, v6, v7, v8, v10);
  sub_10008E4EC();
  return v0;
}

uint64_t sub_100097D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = static RunLoopWorkerThread.current.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v13 = swift_allocObject(&unk_1001ACC38, 24LL, 7LL);
    swift_unknownObjectWeakInit(v13 + 16, a2);
    uint64_t v14 = (void *)swift_allocObject(&unk_1001ACD78, 64LL, 7LL);
    _OWORD v14[2] = v13;
    v14[3] = a3;
    v14[4] = a4;
    v14[5] = a5;
    v14[6] = v12;
    v14[7] = a6;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_retain(v12);
    swift_retain(v13);
    uint64_t v15 = sub_10008C048(0LL, (uint64_t)sub_100099E74, (uint64_t)v14);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v15 = type metadata accessor for JSError();
    id v16 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v16);
  }

  return v15;
}

void sub_100097E88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v69 = a8;
  uint64_t v68 = a2;
  uint64_t v12 = type metadata accessor for JSCallable(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v67 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v78, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v19 = (void *)Strong;
    id v20 = [objc_allocWithZone(AMSFollowUp) init];
    uint64_t v62 = a3;
    uint64_t v21 = v20;
    id v65 = v20;
    sub_100099A80(a5);
    uint64_t v23 = v22;
    id v66 = v22;
    NSString v24 = String._bridgeToObjectiveC()();
    id v63 = [v21 pendingFollowUpWithIdentifier:v24 account:v23];

    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    uint64_t v25 = v67;
    v64(v67, v62, v12);
    uint64_t v26 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v27 = v69;
    uint64_t v28 = v12;
    uint64_t v29 = (v26 + 32) & ~v26;
    uint64_t v62 = v29 + v14;
    uint64_t v61 = v26 | 7;
    uint64_t v30 = swift_allocObject(&unk_1001ACDA0, v29 + v14, v26 | 7);
    *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    *(void *)(v30 + 24) = v19;
    uint64_t v31 = v27;
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
    v32(v30 + v29, v25, v28);
    uint64_t v74 = sub_100099EA0;
    uint64_t v75 = v30;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v71 = 1107296256LL;
    uint64_t v72 = sub_1000B1D04;
    uint64_t MetatypeMetadata = &unk_1001ACDB8;
    uint64_t v33 = _Block_copy(&aBlock);
    swift_retain(v31);
    id v34 = v19;
    swift_release();
    id v35 = v63;
    [v63 addErrorBlock:v33];
    _Block_release(v33);
    uint64_t v36 = v28;
    v64(v25, v68, v28);
    uint64_t v37 = swift_allocObject(&unk_1001ACDF0, v62, v61);
    *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    *(void *)(v37 + 24) = v34;
    v32(v37 + v29, v25, v36);
    uint64_t v74 = sub_100099EF4;
    uint64_t v75 = v37;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v71 = 1107296256LL;
    uint64_t v72 = sub_100098828;
    uint64_t MetatypeMetadata = &unk_1001ACE08;
    id v38 = _Block_copy(&aBlock);
    swift_retain(v31);
    id v39 = v34;
    swift_release();
    [v35 addSuccessBlock:v38];
    _Block_release(v38);
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v40 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v41 = type metadata accessor for LogMessage(0LL);
    uint64_t v42 = swift_allocObject( v40,  ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v41 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a9);
    __int128 aBlock = a9;
    id v43 = (id)AMSLogKey(MetatypeMetadata);
    if (v43)
    {
      uint64_t v44 = v43;
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      uint64_t v47 = v46;

      swift_bridgeObjectRetain(v47);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v48._uint64_t countAndFlagsBits = 0LL;
      v48._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      uint64_t v49 = MetatypeMetadata;
      id v50 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v50, v49, 1LL);
      id v77 = (void *)swift_getMetatypeMetadata(DynamicType);
      v76[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v76);
      sub_10000E888((uint64_t)v76);
      v52._uint64_t countAndFlagsBits = 5972026LL;
      v52._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v52);
      id v77 = &type metadata for String;
      v76[0] = v45;
      v76[1] = v47;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v76);
      sub_10000E888((uint64_t)v76);
      v53._uint64_t countAndFlagsBits = 93LL;
      v53._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      LogMessage.init(stringInterpolation:)(v17);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v54._uint64_t countAndFlagsBits = 0LL;
      v54._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      uint64_t v55 = MetatypeMetadata;
      uint64_t v56 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v57 = swift_getDynamicType(v56, v55, 1LL);
      id v77 = (void *)swift_getMetatypeMetadata(v57);
      v76[0] = v57;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v76);
      sub_10000E888((uint64_t)v76);
      v58._uint64_t countAndFlagsBits = 58LL;
      v58._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      LogMessage.init(stringInterpolation:)(v17);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v59 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v60 = static os_log_type_t.error.getter(v59);
    sub_1000BD1B0(v60, v42);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000983F4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1001ACE40, v13 + 8, v11 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(void *)(v14 + v13) = a1;
  id v15 = a3;
  id v16 = a1;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100099F50, v14);
  return swift_release();
}

uint64_t sub_1000984F8(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + 2 * v7,  *(unsigned __int8 *)(v6 + 80) | 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v37 = type metadata accessor for JSFollowUp();
  v36[0] = a1;
  id v9 = (id)AMSLogKey(a1);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v33[1] = v7;
    uint64_t v12 = v11;
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v37;
    uint64_t v17 = sub_10000D37C(v36, v37);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v34[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t MetatypeMetadata = &type metadata for String;
    v34[0] = v12;
    v34[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v37;
    uint64_t v23 = sub_10000D37C(v36, v37);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v34[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v36);
  uint64_t v26 = LogMessage.init(stringLiteral:)(0xD00000000000003ALL);
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  sub_1000BD1B0(v27, v8);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v29 = swift_allocObject(v28, 64LL, 7LL);
  *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v30 = sub_100096FD4();
  uint64_t v31 = sub_10001139C(v30);

  *(void *)(v29 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v29 + 32) = v31;
  sub_1000854F0(v29);
  return swift_bridgeObjectRelease();
}

void sub_100098828(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

void (*sub_100098884( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t)))(uint64_t, uint64_t, uint64_t)
{
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v10 = v9;
  if (a4) {
    a4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a4,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  id v11 = a1;
  a5(v8, v10, a4);
  sub_10008E4EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a5;
}

void sub_100098924()
{
  uint64_t ObjectType = swift_getObjectType(v0);
  sub_10000DE08(ObjectType, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  sub_10009A3D4();
  sub_10009A3CC((uint64_t)sub_100099C5C, v2, v3, v4, v5, v6, v7, v8, v9);
  sub_10008E4EC();
  sub_100037664();
}

uint64_t sub_10009898C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = static RunLoopWorkerThread.current.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v9 = swift_allocObject(&unk_1001ACC38, 24LL, 7LL);
    swift_unknownObjectWeakInit(v9 + 16, a2);
    uint64_t v10 = (void *)swift_allocObject(&unk_1001ACC60, 48LL, 7LL);
    v10[2] = v9;
    v10[3] = a3;
    v10[4] = v8;
    v10[5] = a4;
    swift_bridgeObjectRetain(a3);
    swift_retain(v8);
    swift_retain(v9);
    uint64_t v11 = sub_10008C048(0LL, (uint64_t)sub_100099CC8, (uint64_t)v10);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v11 = type metadata accessor for JSError();
    id v12 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v12);
  }

  return v11;
}

void sub_100098AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  uint64_t v67 = a3;
  uint64_t v68 = a6;
  uint64_t v65 = a2;
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  __chkstk_darwin(v13);
  Swift::String v15 = (char *)&v60 - v14;
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v77, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    Swift::String v20 = (void *)Strong;
    id v64 = [objc_allocWithZone(AMSFollowUp) init];
    id v66 = sub_100099048(a5, v64);
    uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v61(v15, v67, v10);
    uint64_t v62 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v21 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v22 = v68;
    uint64_t v23 = (v21 + 32) & ~v21;
    uint64_t v63 = v21 | 7;
    uint64_t v24 = swift_allocObject(&unk_1001ACC88, v23 + v12, v21 | 7);
    *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
    *(void *)(v24 + 24) = v20;
    uint64_t v25 = v24 + v23;
    uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
    v26(v25, v15, v10);
    uint64_t v73 = sub_100099CE4;
    uint64_t v74 = v24;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v70 = 1107296256LL;
    uint64_t v71 = sub_1000B1D04;
    uint64_t MetatypeMetadata = &unk_1001ACCA0;
    uint64_t v27 = _Block_copy(&aBlock);
    swift_retain(v22);
    id v60 = v20;
    swift_release();
    [v66 addErrorBlock:v27];
    _Block_release(v27);
    uint64_t v28 = v61;
    v61(v15, v67, v10);
    uint64_t v29 = v62;
    v28(v62, v65, v10);
    uint64_t v30 = (v21 + 24) & ~v21;
    unint64_t v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v32 = (v21 + v31 + 8) & ~v21;
    uint64_t v33 = swift_allocObject(&unk_1001ACCD8, v32 + v12, v63);
    uint64_t v34 = v68;
    *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v68;
    v26(v33 + v30, v15, v10);
    id v35 = v60;
    *(void *)(v33 + v3Hasher._combine(_:)(v1 & 1) = v60;
    v26(v33 + v32, v29, v10);
    uint64_t v73 = sub_100099D58;
    uint64_t v74 = v33;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v70 = 1107296256LL;
    uint64_t v71 = sub_1000B1D04;
    uint64_t MetatypeMetadata = &unk_1001ACCF0;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain(v34);
    id v37 = v35;
    swift_release();
    id v38 = v66;
    [v66 addSuccessBlock:v36];
    _Block_release(v36);
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v39 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v40 = type metadata accessor for LogMessage(0LL);
    uint64_t v41 = swift_allocObject( v39,  ((*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v40 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a7);
    __int128 aBlock = a7;
    id v42 = (id)AMSLogKey(MetatypeMetadata);
    if (v42)
    {
      id v43 = v42;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v46 = v45;

      swift_bridgeObjectRetain(v46);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v47._uint64_t countAndFlagsBits = 0LL;
      v47._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      Swift::String v48 = MetatypeMetadata;
      uint64_t v49 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v49, v48, 1LL);
      uint64_t v76 = (void *)swift_getMetatypeMetadata(DynamicType);
      v75[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v75);
      sub_10000E888((uint64_t)v75);
      v51._uint64_t countAndFlagsBits = 5972026LL;
      v51._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      uint64_t v76 = &type metadata for String;
      v75[0] = v44;
      v75[1] = v46;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v75);
      sub_10000E888((uint64_t)v75);
      v52._uint64_t countAndFlagsBits = 93LL;
      v52._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v52);
      LogMessage.init(stringInterpolation:)(v18);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v53._uint64_t countAndFlagsBits = 0LL;
      v53._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      Swift::String v54 = MetatypeMetadata;
      uint64_t v55 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v56 = swift_getDynamicType(v55, v54, 1LL);
      uint64_t v76 = (void *)swift_getMetatypeMetadata(v56);
      v75[0] = v56;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v75);
      sub_10000E888((uint64_t)v75);
      v57._uint64_t countAndFlagsBits = 58LL;
      v57._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      LogMessage.init(stringInterpolation:)(v18);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v58 = LogMessage.init(stringLiteral:)(0xD000000000000012LL);
    uint64_t v59 = static os_log_type_t.error.getter(v58);
    sub_1000BD1B0(v59, v41);
    swift_bridgeObjectRelease();
  }

id sub_100099048(uint64_t a1, void *a2)
{
  if (!a1)
  {
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    goto LABEL_6;
  }

  sub_1000308B8(0x746E756F636361LL, 0xE700000000000000LL, a1, &v8);
  if (!*((void *)&v9 + 1))
  {
LABEL_6:
    sub_10000E888((uint64_t)&v8);
    return [a2 pendingFollowUps];
  }

  uint64_t v3 = type metadata accessor for JSAccount();
  if ((swift_dynamicCast(&v7, &v8, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0)
  {
    uint64_t v4 = v7;
    id v5 =  [a2 pendingFollowUpsForAccount:*(void *)&v7[OBJC_IVAR____TtC14amsengagementd9JSAccount_account]];

    return v5;
  }

  return [a2 pendingFollowUps];
}

void sub_100099130( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = sub_1000841C0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(void *)(v33 + 64);
  __chkstk_darwin(v32);
  id v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v35, v27, v32);
  uint64_t v36 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v37 = (v36 + 24) & ~v36;
  unint64_t v38 = (v34 + v37 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v39 = swift_allocObject(v25, v38 + 8, v36 | 7);
  *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v39 + v37, v35, v32);
  *(void *)(v39 + v38) = v31;
  id v40 = v29;
  swift_errorRetain(v31);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(v23, v39);
  swift_release();
  sub_10000DD84();
}

void sub_100099218()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v5 = v4;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 2LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  v23[3] = type metadata accessor for JSFollowUp();
  v23[0] = v5;
  id v10 = (id)AMSLogKey(v5);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v14 = sub_10009A370();
    swift_getMetatypeMetadata(v14);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v15 = sub_10009A370();
    swift_getMetatypeMetadata(v15);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v23);
  uint64_t v16 = LogMessage.init(stringLiteral:)(v1);
  uint64_t v17 = static os_log_type_t.error.getter(v16);
  sub_1000BD1B0(v17, v9);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v19 = sub_10009A3FC(v18);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v20 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(v3);
  id v21 = sub_10008F674(v3);
  uint64_t v22 = sub_10008F4BC();

  *(void *)(v19 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v19 + 32) = v22;
  sub_1000854F0(v19);
  swift_bridgeObjectRelease();
  sub_10000DD84();
}

uint64_t sub_100099498(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[0] = a4;
  v27[1] = a2;
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v27 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)v27 - v13, a3, v8);
  v15(v12, a5, v8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  unint64_t v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = (v16 + v18 + 8) & ~v16;
  uint64_t v20 = swift_allocObject(&unk_1001ACD28, v19 + v10, v16 | 7);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v21 = v20 + v17;
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v22(v21, v14, v8);
  uint64_t v23 = (void *)v27[0];
  *(void *)(v20 + v18) = v27[0];
  v22(v20 + v19, v12, v8);
  id v24 = a1;
  id v25 = v23;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_100099DD8, v20);
  return swift_release();
}

uint64_t sub_1000995F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v46[0] = 0LL;
  uint64_t v8 = sub_10000DAA0(0LL, &qword_1001CB948, &OBJC_CLASS___AMSFollowUpItem_ptr);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(a1, v46, v8);
  uint64_t v9 = v46[0];
  if (v46[0])
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v12 = *(void *)(v11 + 72);
    uint64_t v13 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)) + 2 * v12,  *(unsigned __int8 *)(v11 + 80) | 7LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v47 = type metadata accessor for JSFollowUp();
    v46[0] = a3;
    id v14 = (id)AMSLogKey(a3);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v43[1] = v12;
      uint64_t v17 = v16;
      uint64_t v19 = v18;

      swift_bridgeObjectRetain(v19);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v20._uint64_t countAndFlagsBits = 0LL;
      v20._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v20);
      uint64_t v21 = v47;
      uint64_t v22 = sub_10000D37C(v46, v47);
      uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v44[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
      sub_10000E888((uint64_t)v44);
      v24._uint64_t countAndFlagsBits = 5972026LL;
      v24._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t MetatypeMetadata = &type metadata for String;
      v44[0] = v17;
      v44[1] = v19;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
      sub_10000E888((uint64_t)v44);
      v25._uint64_t countAndFlagsBits = 93LL;
      v25._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      LogMessage.init(stringInterpolation:)(v7);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t v32 = v47;
      uint64_t v33 = sub_10000D37C(v46, v47);
      uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
      v44[0] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
      sub_10000E888((uint64_t)v44);
      v35._uint64_t countAndFlagsBits = 58LL;
      v35._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      LogMessage.init(stringInterpolation:)(v7);
    }

    sub_10000D3A0(v46);
    uint64_t v36 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v37 = static os_log_type_t.default.getter(v36);
    sub_1000BD1B0(v37, v13);
    swift_bridgeObjectRelease();
    uint64_t v38 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v39 = swift_allocObject(v38, 64LL, 7LL);
    *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    id v40 = sub_100096FD4();
    sub_100096E5C(v9, v40);
    uint64_t v42 = v41;

    swift_bridgeObjectRelease();
    *(void *)(v39 + 56) = sub_10000D33C(&qword_1001CB4C0);
    *(void *)(v39 + 32) = v42;
    sub_1000854F0(v39);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v26 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v27 = swift_allocObject(v26, 64LL, 7LL);
    *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    uint64_t v28 = type metadata accessor for JSError();
    id v29 = sub_10008F29C(4LL, 0xD000000000000018LL, 0x8000000100171510LL, 0LL, 0LL);
    *(void *)(v27 + 56) = v28;
    *(void *)(v27 + 32) = v29;
    sub_1000854F0(v27);
    return swift_bridgeObjectRelease();
  }

void sub_100099A80(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = v1;
    if (*(void *)(a1 + 16))
    {
      unint64_t v4 = sub_100030CCC(0x746E756F636361LL, 0xE700000000000000LL);
      if ((v5 & 1) != 0)
      {
        sub_10000DA1C(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v16);
        uint64_t v6 = sub_10000D33C(&qword_1001C8F18);
        if ((sub_10009A394(v6, v7, v8, v6, v9) & 1) != 0)
        {
          sub_1000308B8(1684632420LL, 0xE400000000000000LL, v15, &v16);
          uint64_t v10 = swift_bridgeObjectRelease();
          if (v17)
          {
            if ((sub_10009A394(v10, v11, v12, (uint64_t)&type metadata for Int, v13) & 1) != 0)
            {
              id v14 =  objc_msgSend( *(id *)(v2 + OBJC_IVAR____TtC14amsengagementd10JSFollowUp_accountStore),  "ams_iTunesAccountWithDSID:",  objc_msgSend(objc_allocWithZone(NSNumber), "initWithInteger:", v15));
              sub_10008E4EC();
            }
          }

          else
          {
            sub_10000E888((uint64_t)&v16);
          }
        }
      }
    }
  }

  sub_100037664();
}

void sub_100099B9C()
{
}

id sub_100099BD4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSFollowUp();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSFollowUp()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10JSFollowUp);
}

uint64_t sub_100099C5C(uint64_t a1)
{
  return sub_10009898C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100099C78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100099C9C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100099CC8()
{
}

uint64_t sub_100099CE4(uint64_t a1)
{
  return sub_100099EB4(a1, &unk_1001ACD50, sub_100099E04);
}

uint64_t sub_100099CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100099D08(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100099D10()
{
  uint64_t v3 = sub_10009A360();
  return sub_100092CCC(v3, v4, v5);
}

uint64_t sub_100099D58(void *a1)
{
  return sub_100099498(a1, *(void *)(v1 + 16), v1 + v3, *(void *)(v1 + v4), v1 + v5);
}

uint64_t sub_100099D90()
{
  uint64_t v3 = sub_10009A360();
  return sub_100092CCC(v3, v4, v5);
}

uint64_t sub_100099DD8()
{
  return sub_1000995F0(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + v1));
}

void sub_100099E04()
{
}

uint64_t sub_100099E20(uint64_t a1)
{
  return sub_100097D18(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100099E40()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100099E74()
{
}

uint64_t sub_100099EA0(uint64_t a1)
{
  return sub_100099EB4(a1, &unk_1001ACE68, sub_100099F6C);
}

#error "100099EE4: call analysis failed (funcsize=15)"
uint64_t sub_100099EF4(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  sub_1000841C0();
  sub_10009A3A8();
  return sub_1000983F4(a1, v2, v3, v4);
}

uint64_t sub_100099F1C()
{
  uint64_t v0 = sub_10009A360();
  return sub_100092CCC(v0, v1, v2);
}

uint64_t sub_100099F50()
{
  uint64_t v0 = (void *)sub_10009A300();
  return sub_1000984F8(v0);
}

void sub_100099F6C()
{
}

void sub_100099F78()
{
}

uint64_t sub_100099FAC(void *a1)
{
  return sub_10009757C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100099FC8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_100099FFC()
{
}

uint64_t sub_10009A01C(uint64_t a1)
{
  return sub_100099EB4(a1, &unk_1001ACF80, sub_10009A054);
}

uint64_t sub_10009A034()
{
  return sub_10009A144(&unk_1001ACF58, sub_10009A04C);
}

void sub_10009A054()
{
}

uint64_t sub_10009A060(void *a1)
{
  return sub_1000970EC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10009A07C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10009A0AC()
{
}

uint64_t sub_10009A0C8(uint64_t a1)
{
  return sub_100099EB4(a1, &unk_1001AD098, sub_10009A054);
}

uint64_t sub_10009A0E0()
{
  sub_100051B30();
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_10009A130()
{
  return sub_10009A144(&unk_1001AD070, sub_10009A04C);
}

#error "10009A180: call analysis failed (funcsize=18)"
uint64_t sub_10009A190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  sub_1000841C0();
  sub_100081A6C();
  sub_1000672EC();
  sub_100051B30();
  return sub_100051AA4(v0, v1, v2);
}

void sub_10009A1D8()
{
}

uint64_t sub_10009A20C()
{
  uint64_t v2 = sub_10009A360();
  return sub_100092CCC(v2, v3, v4);
}

void sub_10009A27C()
{
}

  ;
}

void sub_10009A2CC()
{
}

uint64_t sub_10009A300()
{
  return *(void *)(v0 + 16);
}

  ;
}

uint64_t sub_10009A360()
{
  return v0;
}

uint64_t sub_10009A370()
{
  uint64_t v1 = *(void *)(v0 - 88);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 112), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_10009A394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5 + 8, a4, 6LL);
}

  ;
}

uint64_t sub_10009A3C4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10009A3CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return JSContext.propagateErrorsToExceptions(_:)(a1, &a9);
}

uint64_t sub_10009A3D4()
{
  return static JSContext.requiredCurrent.getter();
}

uint64_t sub_10009A3DC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

  ;
}

void sub_10009A3F4()
{
}

uint64_t sub_10009A3FC(uint64_t a1)
{
  return swift_allocObject(a1, 64LL, 7LL);
}

  ;
}

uint64_t sub_10009A414(uint64_t a1, void *a2)
{
  uint64_t v4 = (NSBundle *)sub_100006348();
  v9._object = (void *)0xE000000000000000LL;
  v5._uint64_t countAndFlagsBits = a1;
  v5._object = a2;
  v6._uint64_t countAndFlagsBits = 0LL;
  v6._object = (void *)0xE000000000000000LL;
  v9._uint64_t countAndFlagsBits = 0LL;
  uint64_t countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, v4, v6, v9)._countAndFlagsBits;

  return countAndFlagsBits;
}

id sub_10009A518()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSLocalize();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10009A568()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSLocalize();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSLocalize()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10JSLocalize);
}

uint64_t sub_10009A5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v2);
  sub_100083BE0();
  uint64_t v7 = (void *)static JSContext.requiredCurrent.getter();
  v10[2] = v3;
  v10[3] = a1;
  v10[4] = a2;
  v10[5] = ObjectType;
  uint64_t v8 = JSContext.propagateErrorsToExceptions(_:)(sub_10009B2CC, v10);

  return v8;
}

uint64_t sub_10009A638(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v14 = static RunLoopWorkerThread.current.getter();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v49 = a3;
    uint64_t v50 = a5;
    uint64_t v55 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v48 = qword_1001DBB30;
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = type metadata accessor for LogMessage(0LL);
    uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v17 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    Swift::String v54 = (void *)type metadata accessor for JSLocation();
    v53[0] = a2;
    id v19 = a2;
    id v20 = (id)AMSLogKey(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      id v46 = v19;
      uint64_t v47 = v5;
      uint64_t v23 = v22;
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v54;
      uint64_t v28 = sub_10000D37C(v53, (uint64_t)v54);
      uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v51[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v30._uint64_t countAndFlagsBits = 5972026LL;
      v30._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t MetatypeMetadata = &type metadata for String;
      v51[0] = v23;
      v51[1] = v25;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v31._uint64_t countAndFlagsBits = 93LL;
      v31._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      LogMessage.init(stringInterpolation:)(v13);
      id v19 = v46;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      Swift::String v35 = v54;
      uint64_t v36 = sub_10000D37C(v53, (uint64_t)v54);
      uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
      v51[0] = v37;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v38._uint64_t countAndFlagsBits = 58LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v13);
    }

    sub_10000D3A0(v53);
    LogMessage.init(stringLiteral:)(0xD000000000000037LL);
    Swift::String v54 = &type metadata for String;
    uint64_t v39 = v49;
    v53[0] = v49;
    v53[1] = a4;
    swift_bridgeObjectRetain(a4);
    static LogMessage.safe(_:)(v53);
    uint64_t v40 = sub_10000E888((uint64_t)v53);
    uint64_t v41 = static os_log_type_t.default.getter(v40);
    sub_1000BD1B0(v41, v18);
    swift_bridgeObjectRelease();
    sub_100083BE0();
    uint64_t v42 = swift_allocObject(&unk_1001AD0C0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v42 + 16, v19);
    id v43 = (void *)swift_allocObject(&unk_1001AD0E8, 56LL, 7LL);
    void v43[2] = v42;
    void v43[3] = v39;
    v43[4] = a4;
    void v43[5] = v15;
    v43[6] = v50;
    swift_bridgeObjectRetain(a4);
    swift_retain(v42);
    swift_retain(v15);
    uint64_t v32 = sub_10008C048(v55, (uint64_t)sub_10009B340, (uint64_t)v43);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v32 = type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v32;
}

void sub_10009AA50( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = a2;
  uint64_t v47 = a7;
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v52, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v17 = (void *)Strong;
    uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___CLLocationManager);
    NSString v19 = String._bridgeToObjectiveC()();
    LODWORD(v18) = [v18 authorizationStatusForBundleIdentifier:v19];

    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v46,  v10);
    uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v21 = (v20 + 28) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_1001AD110, v21 + v12, v20 | 7);
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(_DWORD *)(v22 + 24) = (_DWORD)v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v22 + v21,  (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
    id v23 = v17;
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_10009B3D4, v22);
    swift_release();
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = type metadata accessor for LogMessage(0LL);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v25 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a8);
    v50[0] = a8;
    id v27 = (id)AMSLogKey(MetatypeMetadata);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      swift_bridgeObjectRetain(v31);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t v33 = MetatypeMetadata;
      Swift::String v34 = sub_10000D37C(v50, MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
      uint64_t v49 = (void *)swift_getMetatypeMetadata(DynamicType);
      v48[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v48);
      sub_10000E888((uint64_t)v48);
      v36._uint64_t countAndFlagsBits = 5972026LL;
      v36._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t v49 = &type metadata for String;
      v48[0] = v29;
      v48[1] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v48);
      sub_10000E888((uint64_t)v48);
      v37._uint64_t countAndFlagsBits = 93LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v38._uint64_t countAndFlagsBits = 0LL;
      v38._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v39 = MetatypeMetadata;
      uint64_t v40 = sub_10000D37C(v50, MetatypeMetadata);
      uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
      uint64_t v49 = (void *)swift_getMetatypeMetadata(v41);
      v48[0] = v41;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v48);
      sub_10000E888((uint64_t)v48);
      v42._uint64_t countAndFlagsBits = 58LL;
      v42._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(v50);
    uint64_t v43 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v44 = static os_log_type_t.error.getter(v43);
    sub_1000BD1B0(v44, v26);
    swift_bridgeObjectRelease();
  }

uint64_t sub_10009AE1C(void *a1, int a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  Swift::String v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10009B19C(a2);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 3LL * *(void *)(v9 + 72),
          *(unsigned __int8 *)(v9 + 80) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v36 = type metadata accessor for JSLocation();
  v35[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v36;
    uint64_t v18 = sub_10000D37C(v35, v36);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v13;
    v33[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v36;
    uint64_t v24 = sub_10000D37C(v35, v36);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v33[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v35);
  LogMessage.init(stringLiteral:)(0xD000000000000035LL);
  uint64_t v27 = sub_10000D33C(&qword_1001C8F18);
  uint64_t v36 = v27;
  v35[0] = v7;
  swift_bridgeObjectRetain(v7);
  static LogMessage.safe(_:)(v35);
  uint64_t v28 = sub_10000E888((uint64_t)v35);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  sub_1000BD1B0(v29, v10);
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v31 = swift_allocObject(v30, 64LL, 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v31 + 56) = v27;
  *(void *)(v31 + 32) = v7;
  sub_1000854E4(v31);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009B19C(int a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v2, &v5);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0xD000000000000013LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x80000001001717B0LL;
  *(void *)(inited + 72) = &type metadata for Int32;
  *(_DWORD *)(inited + 48) = a1;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

id sub_10009B22C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSLocation();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_10009B27C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSLocation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSLocation()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10JSLocation);
}

uint64_t sub_10009B2CC(void *a1)
{
  return sub_10009A638(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10009B2E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10009B30C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10009B340(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10009B360()
{
  uint64_t v1 = type metadata accessor for JSCallable(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 28) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10009B3D4()
{
  return sub_10009AE1C(*(void **)(v0 + 16), *(_DWORD *)(v0 + 24));
}

void sub_10009B408(uint64_t a1)
{
  __asm { BR              X10 }

id sub_10009B47C()
{
  v2._uint64_t countAndFlagsBits = 0x6C616E7265746E69LL;
  uint64_t v9 = 762343521LL;
  unint64_t v10 = 0xE400000000000000LL;
  v2._object = (void *)0xE800000000000000LL;
  String.append(_:)(v2);
  uint64_t v3 = v1;
  sub_1000288A4((uint64_t)&v11);
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Log();
  uint64_t v5 = swift_allocObject(v4, 24LL, 7LL);
  sub_10009B96C();
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)( 0xD000000000000018LL,  0x800000010016ADB0LL,  762343521LL,  0xE400000000000000LL);
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd5JSLog_logger] = v5;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for JSLog();
  id v6 = objc_msgSendSuper2(&v8, "init");
  sub_10002FF78(v0);
  return v6;
}

uint64_t sub_10009B5A4(uint64_t a1, uint64_t a2)
{
  return sub_10009B5F8(a1, a2, (uint64_t (*)(void))&static os_log_type_t.default.getter);
}

uint64_t sub_10009B5BC(uint64_t a1, uint64_t a2)
{
  return sub_10009B5F8(a1, a2, (uint64_t (*)(void))&static os_log_type_t.debug.getter);
}

uint64_t sub_10009B5D4(uint64_t a1, uint64_t a2)
{
  return sub_10009B5F8(a1, a2, (uint64_t (*)(void))&static os_log_type_t.error.getter);
}

uint64_t sub_10009B5EC(uint64_t a1, uint64_t a2)
{
  return sub_10009B5F8(a1, a2, (uint64_t (*)(void))&static os_log_type_t.info.getter);
}

uint64_t sub_10009B5F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = type metadata accessor for LogMessage(0LL);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v12 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  Swift::String v37 = (void *)type metadata accessor for JSLog();
  v36[0] = v5;
  uint64_t v14 = *(void *)&v5[OBJC_IVAR____TtC14amsengagementd5JSLog_logKey + 8];
  if (v14)
  {
    uint64_t v32 = a2;
    uint64_t v15 = a3;
    uint64_t v16 = *(void *)&v5[OBJC_IVAR____TtC14amsengagementd5JSLog_logKey];
    uint64_t v17 = v5;
    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v18 = v37;
    NSString v19 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t DynamicType = swift_getDynamicType(v19, v18, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v33 = DynamicType;
    sub_10000DEA4();
    sub_100037DE0();
    v21._uint64_t countAndFlagsBits = 5972026LL;
    v21._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v33 = v16;
    uint64_t v34 = v14;
    a3 = v15;
    a2 = v32;
    sub_10000DEA4();
    sub_100037DE0();
    uint64_t v22 = 93LL;
  }

  else
  {
    uint64_t v23 = v5;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v24 = v37;
    uint64_t v25 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t v26 = swift_getDynamicType(v25, v24, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v26);
    uint64_t v33 = v26;
    sub_10000DEA4();
    sub_100037DE0();
    uint64_t v22 = 58LL;
  }

  unint64_t v27 = 0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v22);
  LogMessage.init(stringInterpolation:)(v10);
  sub_10000D3A0(v36);
  Swift::String v37 = &type metadata for String;
  v36[0] = a1;
  v36[1] = a2;
  swift_bridgeObjectRetain(a2);
  static LogMessage.sensitive(_:)(v36);
  uint64_t v28 = sub_10000E888((uint64_t)v36);
  uint64_t v29 = a3(v28);
  sub_1000BD1B0(v29, v13);
  return swift_bridgeObjectRelease();
}

void sub_10009B860()
{
}

id sub_10009B898()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSLog();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSLog()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd5JSLog);
}

uint64_t sub_10009B924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10009B96C()
{
  unint64_t result = qword_1001CB9D8;
  if (!qword_1001CB9D8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CB9D8);
  }

  return result;
}

uint64_t sub_10009B9A8(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_10009B9FC(v3, (uint64_t)a3);
  }
  if (a2) {
    return sub_10009BA44(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

uint64_t sub_10009B9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  uint64_t v5 = sub_100020C48(v4, (uint64_t)&protocol self-conformance witness table for Error);
  *id v6 = a2;
  return swift_continuation_throwingResumeWithError(a1, v5);
}

uint64_t sub_10009BA44(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("amsengagementd.JSLog", 20LL, "init()", 6LL, 0LL) = a2;
  return swift_continuation_throwingResume();
}

id sub_10009BA54(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = sub_10009DEF8();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = v3;
  id v13 = objc_msgSend(a1, "ams_activeiTunesAccount");
  *(void *)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_account] = v13;
  v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_app] = *(_BYTE *)(a3 + 1);
  if (qword_1001C7F10 != -1) {
    swift_once(&qword_1001C7F10, sub_10001CF94);
  }
  uint64_t v14 = swift_unknownObjectRetain(qword_1001C90F0);
  Bag.init(from:)(v14);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 32))( &v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_bag],  v11,  v7);
  *(void *)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_clientInfo] = a2;
  __int128 v19 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_mediaClient] = v19;
  id v15 = a2;
  sub_1000288A4((uint64_t)&v19);

  v18.receiver = v12;
  v18.super_class = (Class)sub_10009D7FC();
  id v16 = objc_msgSendSuper2(&v18, "init");
  sub_10002FF78((void *)a3);

  return v16;
}

uint64_t sub_10009BBBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v83 = a4;
  uint64_t v80 = a3;
  uint64_t v81 = a2;
  uint64_t v79 = a1;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v82 = sub_10009DEF8();
  uint64_t v6 = *(void *)(v82 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v82);
  uint64_t v8 = sub_10000D33C(&qword_1001C8BD0);
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = v4;
  id v13 = &v4[OBJC_IVAR____TtC14amsengagementd11JSMarketing_bag];
  uint64_t v14 = (void *)Bag.amsBag.getter();
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 BOOLForKey:v15];
  swift_unknownObjectRelease(v14);

  v86[0] = 0LL;
  id v17 = [v16 valueWithError:v86];

  id v18 = v86[0];
  if (v17)
  {
    id v19 = v86[0];
    unsigned int v20 = [v17 BOOLValue];

    if (v20)
    {
      uint64_t v21 = type metadata accessor for TaskPriority(0LL);
      sub_10000D5C0(v11, 1LL, 1LL, v21);
      uint64_t v22 = *(void **)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_account];
      id v77 = *(void **)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_clientInfo];
      uint64_t v78 = v22;
      uint64_t v23 = *(void *)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_mediaClient];
      uint64_t v74 = *(void *)&v12[OBJC_IVAR____TtC14amsengagementd11JSMarketing_mediaClient + 8];
      uint64_t v75 = v23;
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
      uint64_t v73 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      v24(v73, v13, v82);
      uint64_t v25 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v26 = (v25 + 48) & ~v25;
      unint64_t v27 = (v7 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v31 = v6;
      unint64_t v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v33 = (char *)swift_allocObject(&unk_1001AD138, v32 + 8, v25 | 7);
      *((void *)v33 + 2) = 0LL;
      *((void *)v33 + 3) = 0LL;
      uint64_t v76 = v11;
      uint64_t v34 = v80;
      *((void *)v33 + 4) = v80;
      *((void *)v33 + 5) = v12;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(&v33[v26], v73, v82);
      Swift::String v35 = &v33[v27];
      uint64_t v36 = v74;
      *(void *)Swift::String v35 = v75;
      *((void *)v35 + Hasher._combine(_:)(v1 & 1) = v36;
      Swift::String v38 = v78;
      uint64_t v37 = v79;
      *(void *)&v33[v28] = v78;
      uint64_t v39 = v77;
      *(void *)&v33[v29] = v77;
      uint64_t v40 = &v33[v30];
      uint64_t v41 = v81;
      *(void *)uint64_t v40 = v37;
      *((void *)v40 + Hasher._combine(_:)(v1 & 1) = v41;
      uint64_t v42 = v83;
      *(void *)&v33[v32] = v83;
      id v43 = v38;
      id v44 = v39;
      sub_10000DEB4();
      id v45 = v34;
      uint64_t v46 = v12;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      sub_100116BA0(v76, (uint64_t)&unk_1001CBA50, (uint64_t)v33);
      return swift_release();
    }
  }

  else
  {
    id v48 = v86[0];
    uint64_t v49 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v50);
    swift_errorRelease(v49);
  }

  uint64_t v51 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v52 = sub_10002C79C();
  uint64_t v53 = swift_allocObject( v51,  ((*(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v52 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v52 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v87 = sub_10009D7FC();
  v86[0] = v12;
  id v54 = (id)AMSLogKey(v12);
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    uint64_t v58 = v57;

    sub_10000DEE0();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_100010608();
    uint64_t v59 = v87;
    id v60 = sub_10000D37C(v86, v87);
    uint64_t v61 = sub_10000DC54((uint64_t)v60, v59);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v61);
    v84[0] = v61;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v84);
    sub_1000717A8();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v84[0] = v56;
    v84[1] = v58;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v84);
    sub_1000717A8();
    sub_10000DC4C(93LL);
    sub_100010684();
    sub_100009020();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_100010608();
    uint64_t v62 = v87;
    uint64_t v63 = sub_10000D37C(v86, v87);
    uint64_t v64 = sub_10000DC54((uint64_t)v63, v62);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v64);
    v84[0] = v64;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v84);
    sub_1000717A8();
    sub_10000DC4C(58LL);
    sub_100010684();
  }

  sub_10000D3A0(v86);
  uint64_t v65 = sub_1000105B4(0xD00000000000002ELL);
  if (qword_1001C7F80 != -1) {
    uint64_t v65 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v66 = static os_log_type_t.error.getter(v65);
  sub_1000BD1B0(v66, v53);
  swift_bridgeObjectRelease();
  uint64_t v67 = sub_10009DECC();
  sub_1000308B8(v67, v68, v83, v69);
  if (!v87) {
    return sub_10000E888((uint64_t)v86);
  }
  uint64_t result = sub_100010BA4( (uint64_t)v84,  (uint64_t)v86,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String);
  if ((result & 1) != 0)
  {
    type metadata accessor for ContentManager();
    unint64_t v70 = sub_10009D8D4();
    uint64_t v71 = sub_100020C48((uint64_t)&type metadata for JSMarketing.CacheError, v70);
    *uint64_t v72 = 1;
    sub_10003C3F8();
    swift_errorRelease(v71);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_10009C15C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1152) = v13;
  *(_OWORD *)(v8 + 1136) = v12;
  *(_OWORD *)(v8 + 112_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v11;
  *(void *)(v8 + 1112) = a8;
  *(void *)(v8 + 1104) = a7;
  *(void *)(v8 + 1096) = a6;
  *(void *)(v8 + 1088) = a5;
  *(void *)(v8 + 108_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a4;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v8 + 116_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10009C1D8, 0LL, 0LL);
}

uint64_t sub_10009C1D8()
{
  uint64_t v1 = *(void **)(v0 + 1088);
  uint64_t v34 = (void *)(v0 + 656);
  *(void *)(v0 + 1168) = sub_10000D33C(&qword_1001C9C70);
  uint64_t v2 = *(void *)(sub_10002C79C() - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  *(void *)(v0 + 1176) = v3;
  LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 1232) = v2;
  uint64_t v4 = sub_10001059C( ((v2 + 32LL) & ~(unint64_t)v2) + 3 * v3,  v2);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v5 = sub_10009D7FC();
  *(void *)(v0 + 1184) = v5;
  *(void *)(v0 + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v5;
  *(void *)(v0 + 656) = v1;
  id v6 = (id)AMSLogKey(v1);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    swift_bridgeObjectRetain(v9);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v10 = sub_10000D37C(v34, v5);
    sub_10000DC54((uint64_t)v10, v5);
    *(void *)(v0 + 584) = sub_10000DF48();
    *(void *)(v0 + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v7;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 560);
    sub_10009DF48();
    sub_10000DC14();
    *(void *)(v0 + 488) = &type metadata for String;
    *(void *)(v0 + 464) = v31;
    *(void *)(v0 + 472) = v9;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 464);
    sub_10000E888(v0 + 464);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    __int128 v11 = sub_10000D37C(v34, v5);
    uint64_t v12 = sub_10000DC54((uint64_t)v11, v5);
    *(void *)(v0 + 712) = swift_getMetatypeMetadata(v12);
    *(void *)(v0 + 688) = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 688);
    sub_10000E888(v0 + 688);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v34);
  sub_1000105B4(0xD000000000000036LL);
  *(void *)(v0 + 744) = &type metadata for MarketingItemRequest;
  uint64_t v13 = swift_allocObject(&unk_1001AD160, 88LL, 7LL);
  *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v13;
  memcpy((void *)(v13 + 16), (const void *)(v0 + 352), 0x48uLL);
  sub_10009DB58((uint64_t *)(v0 + 352));
  static LogMessage.safe(_:)(v0 + 720);
  uint64_t v14 = sub_10009DF70();
  if (qword_1001C7F80 != -1) {
    uint64_t v14 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v33 = *(void *)(v0 + 1120);
  uint64_t v35 = *(void *)(v0 + 1128);
  uint64_t v15 = *(void *)(v0 + 1112);
  uint64_t v32 = *(void *)(v0 + 1104);
  uint64_t v16 = static os_log_type_t.default.getter(v14);
  sub_1000BD1B0(v16, v4);
  uint64_t v17 = swift_bridgeObjectRelease();
  uint64_t v18 = Bag.amsBag.getter(v17);
  uint64_t v19 = *(void *)(v0 + 408);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 400);
  *(void *)(v0 + 1192) = v23;
  *(void *)(v0 + 120_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v24;
  id v25 = objc_allocWithZone(&OBJC_CLASS___AMSMarketingItemTask);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  sub_10000DEB4();
  id v26 = sub_10009DBC0(v18, v32, v15, v19, v20, v21, v22, v23, v24);
  *(void *)(v0 + 1208) = v26;
  [v26 setAccount:v33];
  [v26 setClientInfo:v35];
  Class isa = *(Class *)(v0 + 352);
  if (isa)
  {
    sub_10000DEE0();
    sub_100054C98();
    sub_100009020();
    sub_10000D33C(&qword_1001CA770);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1000090CC();
  }

  [v26 setContextInfo:isa];

  if (*(void *)(v0 + 384))
  {
    sub_10000DEE0();
    NSString v28 = String._bridgeToObjectiveC()();
    sub_100009020();
  }

  else
  {
    NSString v28 = 0LL;
  }

  [v26 setOfferHints:v28];

  id v29 = [v26 performWithFetchOnly];
  *(void *)(v0 + 12swift_unknownObjectWeakDestroy(v0 + 16) = v29;
  *(void *)(v0 + 56) = v0 + 1072;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10009C914;
  *(void *)(v0 + 456) = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 424) = _NSConcreteStackBlock;
  *(void *)(v0 + 432) = 0x40000000LL;
  *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10009B9A8;
  *(void *)(v0 + 448) = &unk_1001AD178;
  [v29 resultWithCompletion:v0 + 424];
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_10009C914()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 1224) = v2;
  if (v2)
  {
    sub_10009DCBC((uint64_t *)(v1 + 352));
    uint64_t v3 = sub_10009D388;
  }

  else
  {
    uint64_t v3 = sub_10009C97C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10009C97C()
{
  uint64_t v1 = *(void **)(v0 + 1072);
  uint64_t v69 = 0LL;
  unint64_t v2 = sub_10009DD24();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v1, &v69, v2);

  uint64_t v3 = (uint64_t)v69;
  uint64_t v4 = *(void **)(v0 + 1216);
  if (v69)
  {

    unint64_t v5 = (unint64_t)v3 >> 62;
    if ((unint64_t)v3 >> 62)
    {
      if (v3 < 0) {
        uint64_t v38 = v3;
      }
      else {
        uint64_t v38 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v3);
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      sub_1000090CC();
      if (v39)
      {
LABEL_4:
        uint64_t v67 = v3;
        id v6 = (void *)(v0 + 848);
        uint64_t v7 = *(void *)(v0 + 1184);
        uint64_t v8 = *(void **)(v0 + 1088);
        uint64_t v9 = swift_allocObject( *(void *)(v0 + 1168),  ((*(unsigned __int8 *)(v0 + 1232) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1232))
             + 3LL * *(void *)(v0 + 1176),
               *(unsigned __int8 *)(v0 + 1232) | 7LL);
        *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
        *(void *)(v0 + 872) = v7;
        *(void *)(v0 + 848) = v8;
        id v10 = (id)AMSLogKey(v8);
        if (v10)
        {
          __int128 v11 = v10;
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          uint64_t v13 = v12;

          swift_bridgeObjectRetain(v13);
          sub_10000DC34();
          sub_10000DC08();
          uint64_t v14 = *(void *)(v0 + 872);
          uint64_t v15 = sub_10000D37C((void *)(v0 + 848), v14);
          sub_10000DC54((uint64_t)v15, v14);
          *(void *)(v0 + 84_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10000DF48();
          *(void *)(v0 + 8swift_unknownObjectWeakDestroy(v0 + 16) = v14;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 816);
          sub_10000E888(v0 + 816);
          sub_10000DC14();
          *(void *)(v0 + 776) = &type metadata for String;
          *(void *)(v0 + 752) = v64;
          *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v13;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 752);
          id v6 = (void *)(v0 + 848);
          sub_10000E888(v0 + 752);
          sub_10000DC4C(93LL);
          sub_10000DC5C();
          sub_1000090CC();
        }

        else
        {
          sub_10000DC24();
          sub_10000DC08();
          uint64_t v16 = *(void *)(v0 + 872);
          uint64_t v17 = sub_10000D37C((void *)(v0 + 848), v16);
          sub_10000DC54((uint64_t)v17, v16);
          *(void *)(v0 + 904) = sub_10003881C();
          *(void *)(v0 + 88_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v16;
          sub_100096150();
          sub_100096148();
          sub_10000DC4C(58LL);
          sub_10000DC5C();
        }

        sub_10000D3A0(v6);
        sub_1000105B4(0xD00000000000002CLL);
        uint64_t v18 = v67;
        if (v5)
        {
          if (v67 < 0) {
            uint64_t v20 = v67;
          }
          else {
            uint64_t v20 = v67 & 0xFFFFFFFFFFFFFF8LL;
          }
          sub_10000DEB4();
          uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v20);
          sub_10000DDF8();
        }

        else
        {
          uint64_t v19 = *(void *)((v67 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        uint64_t v21 = *(void *)(v0 + 1144);
        uint64_t v22 = *(void *)(v0 + 1136);
        *(void *)(v0 + 936) = &type metadata for Int;
        *(void *)(v0 + 912) = v19;
        static LogMessage.safe(_:)(v0 + 912);
        uint64_t v23 = sub_10009DF70();
        uint64_t v24 = static os_log_type_t.default.getter(v23);
        sub_1000BD1B0(v24, v9);
        swift_bridgeObjectRelease();
        uint64_t v25 = sub_10000D33C(&qword_1001C8BC0);
        uint64_t inited = swift_initStackObject(v25, v0 + 80);
        *(void *)(inited + 32) = 1684957547LL;
        *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE400000000000000LL;
        *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164250;
        *(void *)(inited + 48) = 0xD000000000000016LL;
        *(void *)(inited + 56) = 0x8000000100171A80LL;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x79654B6568636163LL;
        *(void *)(inited + 88) = 0xE800000000000000LL;
        *(void *)(inited + 96) = v22;
        *(void *)(inited + 104) = v21;
        *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for String;
        *(void *)(inited + 128) = 0x736D657469LL;
        *(void *)(inited + 136) = 0xE500000000000000LL;
        uint64_t v27 = *(void *)(v0 + 1144);
        if (v19)
        {
          uint64_t v69 = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v27);
          sub_10001719C();
          if (v19 < 0)
          {
            __break(1u);
            JUMPOUT(0x10009D378LL);
          }

          uint64_t v28 = 0LL;
          id v29 = v69;
          do
          {
            if ((v67 & 0xC000000000000001LL) != 0) {
              id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, v18);
            }
            else {
              id v30 = *(id *)(v18 + 8 * v28 + 32);
            }
            uint64_t v31 = v30;
            id v32 = [v30 rawValues];
            uint64_t v33 = sub_10000D33C(&qword_1001CA770);
            uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v32,  &type metadata for String,  v33,  &protocol witness table for String);

            uint64_t v69 = v29;
            unint64_t v35 = v29[2];
            if (v35 >= v29[3] >> 1)
            {
              sub_10001719C();
              id v29 = v69;
            }

            ++v28;
            _OWORD v29[2] = v35 + 1;
            v29[v35 + 4] = v34;
            uint64_t v18 = v67;
          }

          while (v19 != v28);
          sub_10000DDF8();
        }

        else
        {
          swift_bridgeObjectRetain(v27);
          sub_10000DDF8();
          id v29 = _swiftEmptyArrayStorage;
        }

        uint64_t v36 = *(void *)(v0 + 1088);
        uint64_t v37 = sub_10000D33C(&qword_1001CBA60);
        *(void *)(inited + 144) = v29;
        *(void *)(inited + 168) = v37;
        strcpy((char *)(inited + 176), "requestingApp");
        *(_WORD *)(inited + 19_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = -4864;
        __asm { BR              X12 }
      }
    }

    else if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_4;
    }

    sub_10009DF8C();
    sub_1000090CC();
  }

  else
  {
    sub_10009DF8C();
  }

  uint64_t v40 = (_OWORD *)(v0 + 528);
  uint64_t v68 = (void *)(v0 + 944);
  uint64_t v41 = *(void **)(v0 + 1208);
  unint64_t v66 = sub_10009D8D4();
  uint64_t v42 = sub_100020C48((uint64_t)&type metadata for JSMarketing.CacheError, v66);
  _BYTE *v43 = 0;
  swift_willThrow(v42);

  id v44 = *(void **)(v0 + 1088);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v45 = *(void *)(sub_10002C79C() - 8);
  uint64_t v46 = sub_10001059C( ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
        + 3LL * *(void *)(v45 + 72),
          *(unsigned __int8 *)(v45 + 80));
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(v0 + 968) = sub_10009D7FC();
  *(void *)(v0 + 944) = v44;
  id v47 = (id)AMSLogKey(v44);
  if (v47)
  {
    id v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v65 = v42;
    uint64_t v51 = v50;

    swift_bridgeObjectRetain(v51);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v52 = *(void *)(v0 + 968);
    uint64_t v53 = sub_10000D37C(v68, v52);
    uint64_t v54 = sub_10000DC54((uint64_t)v53, v52);
    *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = swift_getMetatypeMetadata(v54);
    *(void *)(v0 + 592) = v54;
    sub_100096150();
    sub_100096148();
    sub_10000DC14();
    *(void *)(v0 + 648) = &type metadata for String;
    *(void *)(v0 + 624) = v49;
    *(void *)(v0 + 632) = v51;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 624);
    uint64_t v40 = (_OWORD *)(v0 + 528);
    sub_10000E888(v0 + 624);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v42 = v65;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v55 = *(void *)(v0 + 968);
    uint64_t v56 = sub_10000D37C(v68, v55);
    uint64_t v57 = sub_10000DC54((uint64_t)v56, v55);
    *(void *)(v0 + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_getMetatypeMetadata(v57);
    *(void *)(v0 + 496) = v57;
    sub_100096150();
    sub_100096148();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v68);
  sub_1000105B4(0xD000000000000027LL);
  swift_getErrorValue(v42, v0 + 1064);
  *(void *)(v0 + 808) = *(void *)(v0 + 1016);
  uint64_t v58 = sub_10009DF50();
  sub_10009DF00((uint64_t)v58);
  sub_10009DF28();
  uint64_t v59 = sub_10009DF48();
  if (qword_1001C7F80 != -1) {
    uint64_t v59 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v60 = static os_log_type_t.error.getter(v59);
  sub_1000BD1B0(v60, v46);
  sub_1000090CC();
  sub_10009DE70(v40);
  if (*(void *)(v0 + 552))
  {
    if ((sub_100010BA4( v0 + 1048,  (uint64_t)v40,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) != 0)
    {
      sub_10009DEB8();
      uint64_t v61 = sub_100020C48((uint64_t)&type metadata for JSMarketing.CacheError, v66);
      sub_10009DE98(v61, v62);
      sub_10009DF68();
      sub_10009DF58();
      sub_100009020();
    }

    else
    {
      sub_10009DF68();
    }
  }

  else
  {
    sub_10009DF68();
    sub_10000E888((uint64_t)v40);
  }

  sub_10009DF60();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10009D388(uint64_t a1)
{
  uint64_t v3 = (_OWORD *)(v1 + 528);
  uint64_t v28 = (void *)(v1 + 944);
  uint64_t v4 = *(void **)(v1 + 1216);
  unint64_t v5 = *(void **)(v1 + 1208);
  swift_willThrow(a1);

  uint64_t v6 = *(void *)(v1 + 1224);
  uint64_t v7 = *(void **)(v1 + 1088);
  sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_10009DF78();
  uint64_t v10 = sub_10001059C((v9 & ~v8) + 3 * v2, v8);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(v1 + 968) = sub_10009D7FC();
  *(void *)(v1 + 944) = v7;
  id v11 = (id)AMSLogKey(v7);
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v27 = v6;
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v15 = *(void *)(v1 + 968);
    uint64_t v16 = sub_10000D37C(v28, v15);
    uint64_t v17 = sub_10000DC54((uint64_t)v16, v15);
    *(void *)(v1 + 6swift_unknownObjectWeakDestroy(v0 + 16) = swift_getMetatypeMetadata(v17);
    *(void *)(v1 + 592) = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 592);
    sub_10000E888(v1 + 592);
    sub_10000DC14();
    sub_10009DF14((uint64_t)&type metadata for String);
    uint64_t v3 = (_OWORD *)(v1 + 528);
    sub_10000E888(v1 + 624);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v6 = v27;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v18 = *(void *)(v1 + 968);
    uint64_t v19 = sub_10000D37C(v28, v18);
    sub_10000DC54((uint64_t)v19, v18);
    *(void *)(v1 + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10000DF48();
    *(void *)(v1 + 496) = v18;
    sub_100096150();
    sub_100096148();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v28);
  sub_10009DF34();
  swift_getErrorValue(v6, v1 + 1064);
  *(void *)(v1 + 808) = *(void *)(v1 + 1016);
  uint64_t v20 = sub_10009DF50();
  sub_10009DF00((uint64_t)v20);
  sub_10009DF28();
  uint64_t v21 = sub_10009DF48();
  if (qword_1001C7F80 != -1) {
    uint64_t v21 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v22 = static os_log_type_t.error.getter(v21);
  sub_1000BD1B0(v22, v10);
  sub_1000090CC();
  sub_10009DE70(v3);
  if (*(void *)(v1 + 552))
  {
    if ((sub_100010BA4(v1 + 1048, (uint64_t)v3, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata for String) & 1) != 0)
    {
      sub_10009DEB8();
      unint64_t v23 = sub_10009D8D4();
      uint64_t v24 = sub_100020C48((uint64_t)&type metadata for JSMarketing.CacheError, v23);
      sub_10009DE98(v24, v25);
      sub_10009DEF0();
      sub_10009DF58();
      sub_100009020();
    }

    else
    {
      sub_10009DEF0();
    }
  }

  else
  {
    sub_10009DEF0();
    sub_10000E888((uint64_t)v3);
  }

  sub_10009DF60();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_10009D724()
{
}

id sub_10009D75C()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_10009D7FC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10009D7FC()
{
  return type metadata accessor for JSMarketing(0LL);
}

uint64_t type metadata accessor for JSMarketing(uint64_t a1)
{
  uint64_t result = qword_1001CBA30;
  if (!qword_1001CBA30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSMarketing);
  }
  return result;
}

uint64_t sub_10009D83C(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_100166BB8;
  uint64_t result = type metadata accessor for Bag(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = &unk_100166BD0;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_10009D8D4()
{
  unint64_t result = qword_1001CBA40;
  if (!qword_1001CBA40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166C5C, &type metadata for JSMarketing.CacheError);
    atomic_store(result, &qword_1001CBA40);
  }

  return result;
}

uint64_t sub_10009D910()
{
  uint64_t v1 = sub_10009DEF8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v8 = v3 | 7;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v8);
}

uint64_t sub_10009DA08(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10009DEF8() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[2];
  uint64_t v5 = v1[5];
  uint64_t v12 = v1[4];
  uint64_t v6 = (uint64_t)v1 + v4;
  uint64_t v7 = (void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1001CBA4C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10000D9D4;
  return sub_10009C15C(a1, v14, v13, v12, v5, v6, v8, v9);
}

uint64_t sub_10009DB14()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t *sub_10009DB58(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

id sub_10009DBC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a9);
  id v18 = [v9 initWithBag:a1 clientIdentifier:v14 clientVersion:v15 placement:v16 serviceType:v17];

  swift_unknownObjectRelease(a1);
  return v18;
}

uint64_t *sub_10009DCBC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[6];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

unint64_t sub_10009DD24()
{
  unint64_t result = qword_1001CBA58;
  if (!qword_1001CBA58)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMarketingItem);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CBA58);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for JSMarketing.CacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10009DDAC + 4 * byte_100166B85[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10009DDE0 + 4 * asc_100166B80[v4]))();
}

uint64_t sub_10009DDE0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10009DDE8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x10009DDF0LL);
  }
  return result;
}

uint64_t sub_10009DDFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x10009DE04LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10009DE08(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_10009DE10(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSMarketing.CacheError()
{
  return &type metadata for JSMarketing.CacheError;
}

unint64_t sub_10009DE30()
{
  unint64_t result = qword_1001CBA68;
  if (!qword_1001CBA68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166C34, &type metadata for JSMarketing.CacheError);
    atomic_store(result, (unint64_t *)&qword_1001CBA68);
  }

  return result;
}

void sub_10009DE70(_OWORD *a1@<X8>)
{
}

void sub_10009DE98(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  sub_10003C3F8();
}

uint64_t sub_10009DEB8()
{
  return type metadata accessor for ContentManager();
}

uint64_t sub_10009DECC()
{
  return 0x6163696669746F6ELL;
}

uint64_t sub_10009DEF0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10009DEF8()
{
  return type metadata accessor for Bag(0LL);
}

uint64_t sub_10009DF00(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_10009DF14@<X0>(uint64_t a1@<X8>)
{
  v2[81] = a1;
  v2[78] = v1;
  v2[79] = v3;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v4);
}

uint64_t sub_10009DF28()
{
  return static LogMessage.safe(_:)(v0);
}

uint64_t sub_10009DF34()
{
  return LogMessage.init(stringLiteral:)(0xD000000000000027LL);
}

uint64_t sub_10009DF48()
{
  return sub_10000E888(v0);
}

void *sub_10009DF50()
{
  return sub_10000D63C(v0);
}

uint64_t sub_10009DF58()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10009DF60()
{
  return swift_task_dealloc(*(void *)(v0 + 1160));
}

uint64_t sub_10009DF68()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10009DF70()
{
  return sub_10000E888(v0);
}

  ;
}

uint64_t *sub_10009DF8C()
{
  return sub_10009DCBC(v0);
}

id sub_10009DF94(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_encoders;
  uint64_t v4 = (void *)sub_1000A0830();
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 mapTableWithKeyOptions:0 valueOptions:5];
  uint64_t v6 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_tokenServices;
  uint64_t v7 = (void *)sub_1000A0830();
  *(void *)&v5[v6] = sub_1000A07F4(v7);
  uint64_t v8 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_urlSessions;
  uint64_t v9 = (void *)sub_1000A0830();
  *(void *)&v5[v8] = sub_1000A07F4(v9);
  memcpy(&v5[OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_config], a1, 0x50uLL);
  sub_100066268(a1);

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for JSMediaAPI();
  id v10 = objc_msgSendSuper2(&v12, "init");
  sub_10002FF78(a1);
  return v10;
}

uint64_t sub_10009E094(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v1);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  uint64_t v5 = (void *)static JSContext.requiredCurrent.getter();
  _OWORD v8[2] = v2;
  v8[3] = a1;
  v8[4] = ObjectType;
  uint64_t v6 = JSContext.propagateErrorsToExceptions(_:)(sub_1000A0528, v8);

  return v6;
}

uint64_t sub_10009E118(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v11 = static RunLoopWorkerThread.current.getter();
  if (v11)
  {
    uint64_t v44 = v11;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v12 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v13 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v14 = *(void *)(v13 + 72);
    uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    v42[1] = v14;
    uint64_t v17 = swift_allocObject(v12, v16 + 3 * v14, v15 | 7);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v43 = v17;
    uint64_t v49 = v17 + v16;
    uint64_t v48 = type metadata accessor for JSMediaAPI();
    v47[0] = a2;
    id v18 = a2;
    id v19 = (id)AMSLogKey(v18);
    if (v19)
    {
      uint64_t v20 = v19;
      v42[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v22 = v21;

      swift_bridgeObjectRetain(v22);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v23._uint64_t countAndFlagsBits = 0LL;
      v23._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v23);
      uint64_t v24 = v48;
      uint64_t v25 = sub_10000D37C(v47, v48);
      uint64_t DynamicType = swift_getDynamicType(v25, v24, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v45[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100048258((uint64_t)v45, &qword_1001CAAD0);
      v27._uint64_t countAndFlagsBits = 5972026LL;
      v27._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      uint64_t MetatypeMetadata = &type metadata for String;
      v45[0] = v42[0];
      v45[1] = v22;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100048258((uint64_t)v45, &qword_1001CAAD0);
      v28._uint64_t countAndFlagsBits = 93LL;
      v28._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      LogMessage.init(stringInterpolation:)(v10);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t v32 = v48;
      uint64_t v33 = sub_10000D37C(v47, v48);
      uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
      v45[0] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100048258((uint64_t)v45, &qword_1001CAAD0);
      v35._uint64_t countAndFlagsBits = 58LL;
      v35._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      LogMessage.init(stringInterpolation:)(v10);
    }

    sub_10000D3A0(v47);
    LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v48 = sub_10000D33C(&qword_1001C8F18);
    v47[0] = a3;
    swift_bridgeObjectRetain(a3);
    static LogMessage.safe(_:)(v47);
    uint64_t v36 = sub_100048258((uint64_t)v47, &qword_1001CAAD0);
    uint64_t v37 = static os_log_type_t.default.getter(v36);
    sub_1000BD1B0(v37, v43);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v38 = swift_allocObject(&unk_1001AD2E0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v38 + 16, v18);
    uint64_t v39 = (void *)swift_allocObject(&unk_1001AD308, 48LL, 7LL);
    _OWORD v39[2] = v38;
    void v39[3] = a3;
    uint64_t v40 = v44;
    v39[4] = v44;
    v39[5] = a4;
    swift_bridgeObjectRetain(a3);
    swift_retain(v38);
    swift_retain(v40);
    uint64_t v29 = sub_10008C048(a1, (uint64_t)sub_1000A059C, (uint64_t)v39);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v29 = type metadata accessor for JSError();
    id v30 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v30);
  }

  return v29;
}

void sub_10009E558( uint64_t a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v71 = a2;
  uint64_t v72 = a6;
  uint64_t v79 = a3;
  uint64_t v11 = type metadata accessor for JSCallable(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v78, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    id v19 = (void *)Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_config + 64))
    {
      sub_1000308B8(0xD000000000000010LL, 0x8000000100170210LL, a5, &v76);
      if (MetatypeMetadata)
      {
        if ((swift_dynamicCast(&v73, &v76, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v20 = v74;
          uint64_t v69 = (uint64_t)v73;
          sub_1000308B8(0x6556746E65696C63LL, 0xED00006E6F697372LL, a5, &v76);
          if (MetatypeMetadata)
          {
            uint64_t v70 = v20;
            if ((swift_dynamicCast(&v73, &v76, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
            {
              uint64_t v21 = v74;
              uint64_t v67 = (uint64_t)v73;
              sub_1000308B8(0x746E756F636361LL, 0xE700000000000000LL, a5, &v76);
              if (MetatypeMetadata)
              {
                uint64_t v22 = type metadata accessor for JSAccount();
                else {
                  Swift::String v23 = 0LL;
                }
              }

              else
              {
                sub_100048258((uint64_t)&v76, &qword_1001CAAD0);
                Swift::String v23 = 0LL;
              }

              sub_1000308B8(7107189LL, 0xE300000000000000LL, a5, &v76);
              id v68 = v23;
              if (MetatypeMetadata)
              {
                if ((swift_dynamicCast(&v73, &v76, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
                {
                  uint64_t v54 = v69;
                  uint64_t v69 = v21;
                  uint64_t v67 = sub_10009FBAC((uint64_t)v73, v74, v54, v70, v52, v53, (char *)v23);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_34:
                  swift_bridgeObjectRelease();
LABEL_38:
                  uint64_t v58 = v71;
                  uint64_t v71 = *(void (**)(void, void, void))(v12 + 16);
                  v71((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v58, v11);
                  uint64_t v59 = *(unsigned __int8 *)(v12 + 80);
                  uint64_t v60 = (v59 + 32) & ~v59;
                  uint64_t v69 = v59 | 7;
                  uint64_t v70 = v60 + v13;
                  uint64_t v61 = swift_allocObject(&unk_1001AD330, v60 + v13, v59 | 7);
                  uint64_t v62 = v72;
                  *(void *)(v61 + swift_unknownObjectWeakDestroy(v0 + 16) = v72;
                  *(void *)(v61 + 24) = v19;
                  uint64_t v63 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
                  v63(v61 + v60, v14, v11);
                  v71(v14, v79, v11);
                  uint64_t v64 = swift_allocObject(&unk_1001AD358, v70, v69);
                  *(void *)(v64 + swift_unknownObjectWeakDestroy(v0 + 16) = v62;
                  *(void *)(v64 + 24) = v19;
                  v63(v64 + v60, v14, v11);
                  swift_retain_n(v62, 2LL);
                  id v65 = v19;
                  sub_100062648(sub_1000A05BC, v61, sub_1000A0650, v64);

                  swift_release();
                  swift_release();
                  swift_release();

                  return;
                }
              }

              else
              {
                sub_100048258((uint64_t)&v76, &qword_1001CAAD0);
              }

              sub_1000308B8(1701869940LL, 0xE400000000000000LL, a5, &v76);
              if (MetatypeMetadata)
              {
                if ((swift_dynamicCast(&v73, &v76, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
                {
                  sub_10009FF4C((uint64_t)v73, v69, v70, v67, v21, (uint64_t)v23);
                  uint64_t v67 = v55;
                  swift_bridgeObjectRelease();
                  goto LABEL_34;
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }

              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_100048258((uint64_t)&v76, &qword_1001CAAD0);
              }

              sub_10000D33C(&qword_1001CBAB8);
              NSString v56 = String._bridgeToObjectiveC()();
              id v57 = (id)AMSError(2LL, v56, 0LL, 0LL);

              uint64_t v67 = Promise.__allocating_init(error:)(v57);
              goto LABEL_38;
            }

            swift_bridgeObjectRelease();
          }

          else
          {
            swift_bridgeObjectRelease();
            sub_100048258((uint64_t)&v76, &qword_1001CAAD0);
          }

          uint64_t v50 = sub_10000D33C(&qword_1001C8F70);
          uint64_t v39 = swift_allocObject(v50, 64LL, 7LL);
          *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
          *(void *)(v39 + 56) = &type metadata for String;
          unint64_t v40 = 0xD00000000000001ALL;
          uint64_t v41 = "Client version not present";
          goto LABEL_23;
        }
      }

      else
      {
        sub_100048258((uint64_t)&v76, &qword_1001CAAD0);
      }

      uint64_t v42 = sub_10000D33C(&qword_1001C8F70);
      uint64_t v39 = swift_allocObject(v42, 64LL, 7LL);
      *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
      *(void *)(v39 + 56) = &type metadata for String;
      unint64_t v40 = 0xD00000000000001DLL;
      uint64_t v41 = "Client identifier not present";
    }

    else
    {
      uint64_t v38 = sub_10000D33C(&qword_1001C8F70);
      uint64_t v39 = swift_allocObject(v38, 64LL, 7LL);
      *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
      *(void *)(v39 + 56) = &type metadata for String;
      unint64_t v40 = 0xD000000000000016LL;
      uint64_t v41 = "Networking not enabled";
    }

uint64_t sub_10009EDB8(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1001AD3A8, v14 + 8, v12 | 7);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v15 + v13, v10, v7);
  *(void *)(v15 + v14) = v11;
  id v16 = a3;
  id v17 = v11;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A0700, v15);
  return swift_release();
}

uint64_t sub_10009EEC0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v36 = type metadata accessor for JSMediaAPI();
  v35[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v36;
    id v18 = sub_10000D37C(v35, v36);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_100048258((uint64_t)v33, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v13;
    v33[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_100048258((uint64_t)v33, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v36;
    uint64_t v24 = sub_10000D37C(v35, v36);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v33[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_100048258((uint64_t)v33, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v35);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD000000000000013LL);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  uint64_t v31 = sub_1000A075C(a3);
  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8E58);
  if (!v31) {
    uint64_t v31 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  *(void *)(v30 + 32) = v31;
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10009F1FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1001AD380, v13 + 8, v11 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(void *)(v14 + v13) = a1;
  id v15 = a3;
  swift_errorRetain(a1);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A06B4, v14);
  return swift_release();
}

uint64_t sub_10009F304(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v38 = type metadata accessor for JSMediaAPI();
  v37[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v38;
    id v18 = sub_10000D37C(v37, v38);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_100048258((uint64_t)v35, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v13;
    v35[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_100048258((uint64_t)v35, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v38;
    uint64_t v24 = sub_10000D37C(v37, v38);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v35[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_100048258((uint64_t)v35, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v37);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD000000000000011LL);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v31 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a3);
  id v32 = sub_10008F674(a3);
  uint64_t v33 = sub_10008F4BC();

  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v30 + 32) = v33;
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

id sub_10009F6A8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  Hasher.init()(v22);
  String.hash(into:)(v22, a1, a2);
  if (a3)
  {
    uint64_t v8 = *(void **)&a3[OBJC_IVAR____TtC14amsengagementd9JSAccount_account];
    uint64_t v9 = a3;
    id v10 = [v8 identifier];
    if (v10)
    {
      id v11 = v10;
      Hasher._combine(_:)(1u);
      id v12 = v11;
      NSObject.hash(into:)(v22);

      uint64_t v9 = (char *)v12;
    }

    else
    {
      Hasher._combine(_:)(0);
    }
  }

  memcpy(__dst, v22, sizeof(__dst));
  id v13 = [objc_allocWithZone(NSNumber) initWithInteger:Hasher.finalize()()];
  uint64_t v14 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_encoders;
  id v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v4
                                                              + OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_encoders), "objectForKey:", v13));
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = v13;
  }

  else
  {
    sub_1000A0074(a1, a2);
    uint64_t v17 = v18;
    if (qword_1001C7F10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    uint64_t v19 = (char *)[objc_allocWithZone(AMSMediaRequestEncoder) initWithTokenService:v17 bag:qword_1001C90F0];
    id v16 = v19;
    if (a3)
    {
      uint64_t v19 = (char *)*(id *)&a3[OBJC_IVAR____TtC14amsengagementd9JSAccount_account];
      a3 = v19;
    }

    sub_1000A0844((uint64_t)v19, "setAccount:");

    id v20 = [objc_allocWithZone(AMSMediaResponseDecoder) init];
    sub_1000A0844((uint64_t)v20, "setResponseDecoder:");

    [*(id *)(v4 + v14) setObject:v16 forKey:v13];
  }

  return v16;
}

uint64_t sub_10009F8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v32 = a1;
  uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v35 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v30 - 8);
  uint64_t v8 = __chkstk_darwin(v30);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.utility(_:),  v13);
  uint64_t v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchTime.now()(v18);
  + infix(_:_:)(v10, v31);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v20 = v30;
  v19(v10, v30);
  uint64_t v21 = swift_allocObject(&unk_1001AD290, 24LL, 7LL);
  uint64_t v22 = v32;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v32;
  aBlock[4] = nullsub_1;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001AD2A8;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = swift_unknownObjectRetain(v22);
  static DispatchQoS.unspecified.getter(v24);
  Swift::String v37 = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_100010404();
  uint64_t v26 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v27 = sub_100010444();
  uint64_t v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v33, v25);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v12, v6, v3, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v3, v28);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
  v19(v12, v20);
  return swift_release();
}

uint64_t sub_10009FBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = (void *)(v12 - v11);
  uint64_t v14 = sub_10000D33C(&qword_1001CBAC0);
  __chkstk_darwin(v14);
  sub_10000DE7C();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for URLComponents(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_10000DE7C();
  uint64_t v22 = v21 - v20;
  URLComponents.init(string:)(a1, a2);
  if (sub_1000102D4(v17, 1LL, v18) == 1)
  {
    sub_100048258(v17, &qword_1001CBAC0);
    sub_10000D33C(&qword_1001CBAB8);
    NSString v23 = sub_1000A0804();
    NSString v24 = sub_1000A0804();
    id v25 = (id)AMSError(2LL, v23, v24, 0LL);

    return Promise.__allocating_init(error:)(v25);
  }

  else
  {
    uint64_t v36 = v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v17, v18);
    id v27 = sub_10009F6A8(a3, a4, a7);
    id v28 = sub_1000A0180(a3, a4);
    void *v13 = 3LL;
    sub_1000A0814();
    id v29 = v27;
    sub_10009F8D0((uint64_t)v29, (uint64_t)v13);

    sub_1000A0838();
    void *v13 = 3LL;
    sub_1000A0814();
    id v30 = v28;
    sub_10009F8D0((uint64_t)v30, (uint64_t)v13);

    sub_1000A0838();
    Class isa = URLComponents._bridgeToObjectiveC()().super.isa;
    id v32 = [v29 requestWithComponents:isa];

    sub_10000D33C((uint64_t *)&unk_1001CF2E0);
    Promise<A>.init(_:)([v30 dataTaskPromiseWithRequestPromise:v32]);
    void v40[3] = type metadata accessor for SyncTaskScheduler(0LL);
    v40[4] = &protocol witness table for SyncTaskScheduler;
    uint64_t v33 = sub_10000D63C(v40);
    SyncTaskScheduler.init()(v33);
    uint64_t v34 = sub_10000DAA0(0LL, &qword_1001CBAC8, &OBJC_CLASS___AMSMediaResult_ptr);
    uint64_t v26 = Promise.map<A>(on:_:)(v40, sub_10009FECC, 0LL, v34);

    swift_release();
    sub_10000D3A0(v40);
    sub_100048DD4(v36);
  }

  return v26;
}

id sub_10009FECC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___AMSMediaResult);
  uint64_t v5 = swift_dynamicCastObjCClass(v3, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    id result = v3;
  }

  else
  {
    id result = [objc_allocWithZone(AMSMediaResult) initWithResult:v3];
    uint64_t v6 = (uint64_t)result;
  }

  *a2 = v6;
  return result;
}

void sub_10009FF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = qword_1001C7F10;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  if (v12 != -1) {
    swift_once(&qword_1001C7F10, sub_10001CF94);
  }
  uint64_t v13 = qword_1001C90F0;
  objc_allocWithZone(&OBJC_CLASS___AMSMediaTask);
  swift_unknownObjectRetain(v13);
  id v14 = sub_1000A03DC(a1, a2, a3, a4, a5, v13);
  if (a6) {
    id v15 = *(id *)(a6 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account);
  }
  else {
    id v15 = 0LL;
  }
  [v14 setAccount:v15];

  sub_10000D33C(&qword_1001CBAB8);
  Promise<A>.init(_:)([v14 perform]);

  sub_10000DE10();
}

void sub_1000A0074(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_tokenServices;
  id v7 = *(id *)(v2 + OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_tokenServices);
  NSString v8 = sub_10006859C();
  id v9 = sub_1000A0824((uint64_t)v8, "objectForKey:");

  if (!v9)
  {
    uint64_t v10 = qword_1001C7F10;
    swift_bridgeObjectRetain(a2);
    if (v10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    uint64_t v11 = qword_1001C90F0;
    objc_allocWithZone(&OBJC_CLASS___AMSMediaTokenService);
    swift_unknownObjectRetain(v11);
    id v12 = sub_1000A0488(a1, a2, v11);
    id v13 = *(id *)(v3 + v6);
    id v14 = v12;
    NSString v15 = sub_10006859C();
    sub_1000A07E4((uint64_t)v15, "setObject:forKey:");
  }

  sub_10000DE10();
}

id sub_1000A0180(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_urlSessions;
  id v7 = *(id *)(v2 + OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_urlSessions);
  NSString v8 = sub_10006859C();
  id v9 = sub_1000A0824((uint64_t)v8, "objectForKey:");

  if (!v9)
  {
    sub_1000A0074(a1, a2);
    uint64_t v11 = v10;
    memcpy(v21, (const void *)(v3 + OBJC_IVAR____TtC14amsengagementd10JSMediaAPI_config), sizeof(v21));
    id v12 = objc_allocWithZone((Class)type metadata accessor for AppURLSession());
    sub_100066268(v21);
    id v13 = sub_10002FD20(v21);
    id v14 = objc_allocWithZone(&OBJC_CLASS___AMSMediaProtocolHandler);
    id v15 = v13;
    id v16 = [v14 initWithTokenService:v11];
    [v15 setProtocolHandler:v16];

    uint64_t v17 = *(void **)(v3 + v6);
    id v9 = v15;
    id v18 = v17;
    NSString v19 = sub_10006859C();
    sub_1000A07E4((uint64_t)v19, "setObject:forKey:");
  }

  return v9;
}

void sub_1000A02DC()
{
}

id sub_1000A0314()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSMediaAPI();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSMediaAPI()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10JSMediaAPI);
}

id sub_1000A03DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  id v13 = [v6 initWithType:a1 clientIdentifier:v11 clientVersion:v12 bag:a6];

  swift_unknownObjectRelease(a6);
  return v13;
}

id sub_1000A0488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v7 = [v3 initWithClientIdentifier:v6 bag:a3];

  swift_unknownObjectRelease(a3);
  return v7;
}

uint64_t sub_1000A04EC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A0510(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A0520(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A0528(void *a1)
{
  return sub_10009E118(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000A0544()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A0568()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000A059C(uint64_t a1, void (*a2)(void, void, void), uint64_t a3)
{
}

uint64_t sub_1000A05BC()
{
  uint64_t v0 = (void **)sub_1000A07C4();
  return sub_10009EDB8(v0, v1, v2, v3);
}

uint64_t sub_1000A05E4()
{
  uint64_t v1 = *(void *)(sub_1000841C0() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ((v2 + 32) & ~v2) + *(void *)(v1 + 64);
  uint64_t v4 = v2 | 7;
  swift_release();

  sub_100051B30();
  return swift_deallocObject(v0, v3, v4);
}

uint64_t sub_1000A0650()
{
  uint64_t v0 = sub_1000A07C4();
  return sub_10009F1FC(v0, v1, v2, v3);
}

uint64_t sub_1000A0674()
{
  return sub_100092CCC(v0, v2, v1);
}

uint64_t sub_1000A06B4()
{
  return sub_1000A070C((uint64_t (*)(void, unint64_t, void))sub_10009F304);
}

uint64_t sub_1000A06C0()
{
  return sub_100092CCC(v0, v2, v1);
}

uint64_t sub_1000A0700()
{
  return sub_1000A070C((uint64_t (*)(void, unint64_t, void))sub_10009EEC0);
}

uint64_t sub_1000A070C(uint64_t (*a1)(void, unint64_t, void))
{
  uint64_t v2 = *(void *)(sub_1000841C0() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(*(void *)(v1 + 16), v1 + v3, *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000A075C(void *a1)
{
  id v1 = [a1 responseDictionary];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_1000A07C4()
{
  return v0;
}

id sub_1000A07E4(uint64_t a1, const char *a2)
{
  return objc_msgSend(v4, a2, v3, v2);
}

id sub_1000A07F4(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v1 + 2952), 5, 5);
}

NSString sub_1000A0804()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000A0814()
{
  return v3(v1, v2, v0);
}

id sub_1000A0824(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000A0830()
{
  return objc_opt_self(*(void *)(v0 + 408));
}

uint64_t sub_1000A0838()
{
  return v0(v2, v1);
}

id sub_1000A0844(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

void sub_1000A0850(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, _BYTE *, __n128))
{
  uint64_t v4 = v26[0];
  uint64_t v27 = v26[1];
  int64_t v5 = v26[3];
  unint64_t v6 = v26[4];
  int64_t v7 = (unint64_t)(v26[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  NSString v23 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v5 << 6);
      goto LABEL_20;
    }

    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v27 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_26;
      }
      unint64_t v11 = *(void *)(v27 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_26;
        }
        unint64_t v11 = *(void *)(v27 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_26;
          }
          unint64_t v11 = *(void *)(v27 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_26;
            }
            unint64_t v11 = *(void *)(v27 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v27 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_19;
                }
              }

void *sub_1000A0A88(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    sub_100009020();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  id result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    id result = (void *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = 0LL;
      do
      {
        if ((a1 & 0xC000000000000001LL) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        }
        else {
          id v5 = *(id *)(a1 + 8 * v4 + 32);
        }
        unint64_t v6 = v5;
        ++v4;
        id v14 = v5;
        uint64_t v7 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001C8C70, &OBJC_CLASS___ACAccount_ptr);
        id v8 = v6;
        uint64_t v9 = sub_10000D33C(&qword_1001C9008);
        swift_dynamicCast(&v15, &v14, v7, v9, 7LL);
        uint64_t v10 = v15;

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v11 = v16[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
        uint64_t v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
        specialized ContiguousArray._endMutation()(v12);
      }

      while (v2 != v4);
      return v16;
    }
  }

  return result;
}

void *sub_1000A0BF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
    sub_1000170F0();
    uint64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v10 = *v4;
      swift_bridgeObjectRetain_n(v10, 2LL);
      uint64_t v5 = sub_10000D33C(&qword_1001C8F18);
      uint64_t v6 = sub_10000D33C(&qword_1001C8E58);
      swift_dynamicCast(&v11, &v10, v5, v6, 7LL);
      uint64_t v7 = v11;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000170F0();
        uint64_t v2 = v12;
      }

      unint64_t v8 = v2[2];
      if (v8 >= v2[3] >> 1)
      {
        sub_1000170F0();
        uint64_t v2 = v12;
      }

      v2[2] = v8 + 1;
      v2[v8 + 4] = v7;
      ++v4;
      --v1;
    }

    while (v1);
  }

  return v2;
}

void *sub_1000A0D38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_1000171C8();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v8[0] = *(v4 - 1);
      v8[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v9, v8, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000171C8();
        uint64_t v2 = v10;
      }

      unint64_t v6 = v2[2];
      if (v6 >= v2[3] >> 1)
      {
        sub_1000171C8();
        uint64_t v2 = v10;
      }

      v4 += 2;
      v2[2] = v6 + 1;
      sub_10000DA58(v9, &v2[4 * v6 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_1000A0E5C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v6 = result;
  id result = swift_isUniquelyReferenced_nonNull_native(*v1);
  uint64_t v7 = result;
  *uint64_t v1 = v3;
  if (!(_DWORD)result || (uint64_t v8 = *(void *)(v3 + 24) >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      v4 += v2;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v4, 1LL, v3);
    id result = swift_bridgeObjectRelease(*v1);
    *uint64_t v1 = v3;
    uint64_t v8 = *(void *)(v3 + 24) >> 1;
  }

  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_13;
    }
    goto LABEL_15;
  }

  if (v8 - *(void *)(v3 + 16) < v2)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  id result = sub_10001636C(v6 + 32, v2);
  if (!v2)
  {
LABEL_13:
    uint64_t v12 = sub_100009020();
    return specialized Array._endMutation()(v12);
  }

  uint64_t v9 = *(void *)(*v1 + 16);
  BOOL v10 = __OFADD__(v9, v2);
  uint64_t v11 = v9 + v2;
  if (!v10)
  {
    *(void *)(*v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
    goto LABEL_13;
  }

uint64_t sub_1000A0F64(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v17 = *v1;
    }
    else {
      uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v4;
  uint64_t v5 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1LL;
  }

  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1LL, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_16:
    uint64_t result = sub_100104EB8(v8 + 8LL * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }

  if (v11 < 1) {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v13 = __OFADD__(v12, v11);
  uint64_t v14 = v12 + v11;
  if (!v13)
  {
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v14;
LABEL_20:
    uint64_t v15 = swift_bridgeObjectRelease();
    return specialized Array._endMutation()(v15);
  }

  __break(1u);
  return result;
}

void sub_1000A1118(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_10001466C();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_100016D7C(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    sub_100009020();
    *uint64_t v1 = v3;
    return;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    goto LABEL_11;
  }

LABEL_15:
  __break(1u);
}

          __break(1u);
LABEL_16:
          __break(1u);
          return result;
        }

void *sub_1000A11EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    uint64_t v11 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v12 = *v11++;
      swift_bridgeObjectRetain(v12);
      BOOL v13 = sub_1000A5B9C(a3, a4, v12, a5);
      uint64_t v14 = swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      uint64_t v15 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      uint64_t v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
      specialized ContiguousArray._endMutation()(v16);
      --v8;
    }

    while (v8);
  }

  else
  {
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1000A1308()
{
  uint64_t v2 = v1;
  uint64_t v32 = v3;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v31 = qword_1001DBB30;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(sub_10000DC98() - 8);
  uint64_t v10 = sub_10000DCF0( ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + 3LL * *(void *)(v9 + 72),
          *(unsigned __int8 *)(v9 + 80));
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  Swift::String v37 = (void *)type metadata accessor for JSMetrics();
  v36[0] = v0;
  id v11 = (id)AMSLogKey(v0);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v30 = v7;
    uint64_t v14 = v2;
    uint64_t v16 = v15;

    swift_bridgeObjectRetain(v16);
    sub_1000485F4(4LL);
    sub_10000DC08();
    uint64_t v17 = v37;
    uint64_t v18 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t v19 = sub_10000DC54((uint64_t)v18, (uint64_t)v17);
    swift_getMetatypeMetadata(v19);
    sub_10000DEA4();
    sub_1000A6608();
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v34[0] = v13;
    v34[1] = v16;
    sub_10000DEA4();
    sub_1000A6608();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v2 = v14;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v21 = v37;
    uint64_t v22 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t v23 = sub_10000DC54((uint64_t)v22, (uint64_t)v21);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
    v34[0] = v23;
    sub_10000DEA4();
    sub_1000102E0((uint64_t)v34, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v36);
  LogMessage.init(stringLiteral:)(0xD000000000000024LL);
  Swift::String v37 = &type metadata for String;
  v36[0] = v7;
  v36[1] = v5;
  swift_bridgeObjectRetain(v5);
  static LogMessage.safe(_:)(v36);
  uint64_t v24 = sub_1000102E0((uint64_t)v36, &qword_1001CAAD0);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_1000BD1B0(v25, v10);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1000A5B9C(v7, v5, v32, v2);
  uint64_t v27 = sub_10000D33C(&qword_1001CD430);
  uint64_t inited = swift_initStackObject(v27, &v33);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
  *(void *)(inited + 32) = v26;
  v36[0] = inited;
  specialized Array._endMutation()(inited);
  id v29 = v26;
  sub_1000A5674();
  sub_1000090CC();
  if (qword_1001C7F18 != -1) {
    swift_once(&qword_1001C7F18, sub_10001CFE8);
  }
  objc_msgSend((id)qword_1001C90F8, "enqueueEvent:", v29, v30, v31);

  sub_10000DD84();
}

void sub_1000A1718(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v1);
    for (uint64_t i = 0LL; i != v3; ++i)
    {
      uint64_t v5 = *(void *)(v2 + 8 * i + 32);
      swift_bridgeObjectRetain(v5);
      sub_1000A0F64(v6);
    }

    swift_bridgeObjectRelease_n(v2, 2LL);
  }

  else
  {
    sub_1000090CC();
  }

  sub_1000A5674();
  if (qword_1001C7F18 != -1) {
    uint64_t v7 = swift_once(&qword_1001C7F18, sub_10001CFE8);
  }
  uint64_t v8 = (void *)qword_1001C90F8;
  sub_10000DE08(v7, (unint64_t *)&qword_1001C8F78, &OBJC_CLASS___AMSMetricsEvent_ptr);
  id v9 = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = sub_1000090CC();
  sub_1000A6614(v11, "enqueueEvents:");
}

void *sub_1000A184C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = sub_10000D33C(&qword_1001CB4C0);
  uint64_t v10 = v14;
  id v11 = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a5);
  uint64_t v12 = sub_1000A11EC(v10, v11, a1, a2, a5);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1000A19BC(uint64_t a1)
{
  return v1;
}

uint64_t sub_1000A1A14(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v7 = static RunLoopWorkerThread.current.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v44 = qword_1001DBB30;
    uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v10 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v11 = *(void *)(v10 + 72);
    uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v38 = v11;
    uint64_t v13 = swift_allocObject(v9, ((v12 + 32) & ~v12) + 2 * v11, v12 | 7);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v43 = type metadata accessor for JSMetrics();
    v42[0] = a2;
    id v39 = a2;
    id v14 = (id)AMSLogKey(v39);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      swift_bridgeObjectRetain(v17);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v18._uint64_t countAndFlagsBits = 0LL;
      v18._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v18);
      uint64_t v19 = v43;
      Swift::String v20 = sub_10000D37C(v42, v43);
      uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v40[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_1000102E0((uint64_t)v40, &qword_1001CAAD0);
      v22._uint64_t countAndFlagsBits = 5972026LL;
      v22._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t MetatypeMetadata = &type metadata for String;
      v40[0] = v37;
      v40[1] = v17;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_1000102E0((uint64_t)v40, &qword_1001CAAD0);
      v23._uint64_t countAndFlagsBits = 93LL;
      v23._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v23);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v43;
      id v28 = sub_10000D37C(v42, v43);
      uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
      v40[0] = v29;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_1000102E0((uint64_t)v40, &qword_1001CAAD0);
      v30._uint64_t countAndFlagsBits = 58LL;
      v30._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(v42);
    uint64_t v31 = LogMessage.init(stringLiteral:)(0xD000000000000010LL);
    uint64_t v32 = static os_log_type_t.default.getter(v31);
    sub_1000BD1B0(v32, v13);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v33 = swift_allocObject(&unk_1001AD3D0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v33 + 16, v39);
    uint64_t v34 = swift_allocObject(&unk_1001AD628, 32LL, 7LL);
    *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    *(void *)(v34 + 24) = v8;
    swift_retain(v33);
    swift_retain(v8);
    uint64_t v24 = sub_10008C048(a1, (uint64_t)sub_1000A6388, v34);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v24 = type metadata accessor for JSError();
    id v25 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v25);
  }

  return v24;
}

void sub_1000A1DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = a2;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v71, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v17 = (void *)Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC14amsengagementd9JSMetrics_config + 64))
    {
      uint64_t v60 = a5;
      uint64_t v61 = v5;
      if (qword_1001C7F18 != -1) {
        swift_once(&qword_1001C7F18, sub_10001CFE8);
      }
      id v57 = [(id)qword_1001C90F8 flush];
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      v59((char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), a3, v9);
      uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
      uint64_t v19 = (v18 + 32) & ~v18;
      uint64_t v20 = v19 + v11;
      uint64_t v58 = v19 + v11;
      uint64_t v21 = v18 | 7;
      uint64_t v22 = swift_allocObject(&unk_1001AD650, v20, v18 | 7);
      uint64_t v23 = v60;
      *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v60;
      *(void *)(v22 + 24) = v17;
      uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
      v24(v22 + v19, v12, v9);
      uint64_t v67 = sub_1000A63A4;
      uint64_t v68 = v22;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v64 = 1107296256LL;
      id v65 = sub_1000B1D04;
      uint64_t v66 = &unk_1001AD668;
      id v25 = _Block_copy(&aBlock);
      swift_retain(v23);
      id v26 = v17;
      swift_release();
      id v27 = v57;
      [v57 addErrorBlock:v25];
      _Block_release(v25);
      v59(v12, v62, v9);
      uint64_t v28 = swift_allocObject(&unk_1001AD6A0, v58, v21);
      *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
      *(void *)(v28 + 24) = v26;
      v24(v28 + v19, v12, v9);
      uint64_t v67 = sub_1000A63EC;
      uint64_t v68 = v28;
      __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v64 = 1107296256LL;
      id v65 = sub_1000B1D04;
      uint64_t v66 = &unk_1001AD6B8;
      uint64_t v29 = _Block_copy(&aBlock);
      swift_retain(v23);
      id v30 = v26;
      swift_release();
      [v27 addSuccessBlock:v29];
      _Block_release(v29);
    }

    else
    {
      uint64_t v46 = sub_10000D33C(&qword_1001C8F70);
      uint64_t v47 = swift_allocObject(v46, 64LL, 7LL);
      *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 32) = 0xD000000000000019LL;
      *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100171F20LL;
      uint64_t v48 = (void *)JSCallable.call(_:)();

      swift_bridgeObjectRelease();
      if (!v5) {
    }
      }
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v31 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v32 = type metadata accessor for LogMessage(0LL);
    uint64_t v33 = swift_allocObject( v31,  ((*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v32 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v34 = type metadata accessor for JSMetrics();
    uint64_t v66 = (void *)sub_10000D33C(&qword_1001CBB00);
    __int128 aBlock = (void **)v34;
    id v35 = (id)AMSLogKey(v66);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v39 = v38;

      swift_bridgeObjectRetain(v39);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v40._uint64_t countAndFlagsBits = 0LL;
      v40._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t v41 = v66;
      uint64_t v42 = sub_10000D37C(&aBlock, (uint64_t)v66);
      uint64_t DynamicType = swift_getDynamicType(v42, v41, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v69[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
      sub_1000102E0((uint64_t)v69, &qword_1001CAAD0);
      v44._uint64_t countAndFlagsBits = 5972026LL;
      v44._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      uint64_t MetatypeMetadata = &type metadata for String;
      v69[0] = v37;
      v69[1] = v39;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
      sub_1000102E0((uint64_t)v69, &qword_1001CAAD0);
      v45._uint64_t countAndFlagsBits = 93LL;
      v45._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v49._uint64_t countAndFlagsBits = 0LL;
      v49._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      uint64_t v50 = v66;
      uint64_t v51 = sub_10000D37C(&aBlock, (uint64_t)v66);
      uint64_t v52 = swift_getDynamicType(v51, v50, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
      v69[0] = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
      sub_1000102E0((uint64_t)v69, &qword_1001CAAD0);
      v53._uint64_t countAndFlagsBits = 58LL;
      v53._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v54 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    sub_1000BD1B0(v55, v33);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000A23B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1001AD718, v13 + 8, v11 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(void *)(v14 + v13) = a1;
  id v15 = a3;
  swift_errorRetain(a1);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A64AC, v14);
  return swift_release();
}

uint64_t sub_1000A24B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v38 = type metadata accessor for JSMetrics();
  v37[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v38;
    uint64_t v18 = sub_10000D37C(v37, v38);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_1000102E0((uint64_t)v35, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v13;
    v35[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_1000102E0((uint64_t)v35, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v38;
    uint64_t v24 = sub_10000D37C(v37, v38);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v35[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_1000102E0((uint64_t)v35, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v37);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0x6166206873756C46LL);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v31 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a3);
  id v32 = sub_10008F674(a3);
  uint64_t v33 = sub_10008F4BC();

  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v30 + 32) = v33;
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A27EC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  unint64_t v13 = (v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v14 = swift_allocObject(&unk_1001AD6F0, v13 + 8, v11 | 7);
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v12, v10, v7);
  *(void *)(v14 + v13) = a1;
  id v15 = a3;
  id v16 = a1;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A6468, v14);
  return swift_release();
}

uint64_t sub_1000A28F0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v36 = type metadata accessor for JSMetrics();
  v35[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v36;
    uint64_t v18 = sub_10000D37C(v35, v36);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_1000102E0((uint64_t)v33, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v13;
    v33[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_1000102E0((uint64_t)v33, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v36;
    uint64_t v24 = sub_10000D37C(v35, v36);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v33[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_1000102E0((uint64_t)v33, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v35);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0x6966206873756C46LL);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v30 + 56) = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v30 + 32) = a3;
  id v31 = a3;
  sub_1000854E4(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A2C38()
{
  return v0;
}

char *sub_1000A2CA4(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, int a8)
{
  int v62 = a8;
  uint64_t v68 = a7;
  uint64_t v60 = a3;
  uint64_t v61 = a5;
  uint64_t v59 = a4;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v15 = static RunLoopWorkerThread.current.getter();
  if (v15)
  {
    uint64_t v55 = v15;
    uint64_t v56 = a6;
    id v57 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v58 = v8;
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
          + 2LL * *(void *)(v17 + 72),
            *(unsigned __int8 *)(v17 + 80) | 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v53 = v18;
    uint64_t v67 = (void *)type metadata accessor for JSMetrics();
    id v65 = a2;
    id v54 = a2;
    id v19 = (id)AMSLogKey(v54);
    if (v19)
    {
      Swift::String v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v23 = v22;

      swift_bridgeObjectRetain(v23);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v24._uint64_t countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t v25 = v67;
      Swift::String v26 = sub_10000D37C(&v65, (uint64_t)v67);
      uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v63[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_1000102E0((uint64_t)v63, &qword_1001CAAD0);
      v28._uint64_t countAndFlagsBits = 5972026LL;
      v28._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t MetatypeMetadata = &type metadata for String;
      v63[0] = v21;
      v63[1] = v23;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_1000102E0((uint64_t)v63, &qword_1001CAAD0);
      v29._uint64_t countAndFlagsBits = 93LL;
      v29._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      LogMessage.init(stringInterpolation:)(v14);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      id v32 = v67;
      uint64_t v33 = sub_10000D37C(&v65, (uint64_t)v67);
      uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
      v63[0] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_1000102E0((uint64_t)v63, &qword_1001CAAD0);
      v35._uint64_t countAndFlagsBits = 58LL;
      v35._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      LogMessage.init(stringInterpolation:)(v14);
    }

    sub_10000D3A0(&v65);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(47LL, 2LL);
    v36._object = (void *)0x8000000100171E60LL;
    v36._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    uint64_t v67 = &type metadata for String;
    uint64_t v37 = v59;
    uint64_t v38 = (uint64_t)v60;
    id v65 = v60;
    uint64_t v66 = v59;
    swift_bridgeObjectRetain(v59);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
    sub_1000102E0((uint64_t)&v65, &qword_1001CAAD0);
    v39._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
    v39._object = (void *)0xE700000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    uint64_t v67 = &type metadata for String;
    uint64_t v40 = v38;
    uint64_t v41 = v37;
    uint64_t v42 = v61;
    uint64_t v43 = v56;
    id v65 = v61;
    uint64_t v66 = v56;
    swift_bridgeObjectRetain(v56);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
    sub_1000102E0((uint64_t)&v65, &qword_1001CAAD0);
    v44._uint64_t countAndFlagsBits = 41LL;
    v44._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v44);
    uint64_t v45 = LogMessage.init(stringInterpolation:)(v14);
    uint64_t v46 = static os_log_type_t.default.getter(v45);
    sub_1000BD1B0(v46, v53);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v47 = swift_allocObject(&unk_1001AD3D0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v47 + 16, v54);
    uint64_t v48 = swift_allocObject(&unk_1001AD510, 73LL, 7LL);
    Swift::String v49 = v68;
    *(void *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = v47;
    *(void *)(v48 + 24) = v49;
    *(void *)(v48 + 32) = v40;
    *(void *)(v48 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v41;
    uint64_t v50 = v55;
    *(void *)(v48 + 48) = v55;
    *(void *)(v48 + 56) = v42;
    *(void *)(v48 + 64) = v43;
    *(_BYTE *)(v48 + 72) = v62 & 1;
    id v51 = v49;
    swift_retain(v50);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v43);
    swift_retain(v47);
    uint64_t v14 = (char *)sub_10008C048(v57, (uint64_t)sub_1000A6118, v48);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for JSError();
    id v30 = sub_10008F29C(12LL, 0xD000000000000035LL, 0x8000000100171E20LL, 0LL, 0LL);
    swift_willThrow(v30);
  }

  return v14;
}

void sub_1000A3178( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v72 = a2;
  id v69 = a7;
  uint64_t v70 = a3;
  uint64_t v14 = type metadata accessor for JSCallable(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v71 = v16;
  uint64_t v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v18);
  Swift::String v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v81, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v22 = (void *)Strong;
    if (a5) {
      id v23 = *(id *)(a5 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account);
    }
    else {
      id v23 = 0LL;
    }
    int v66 = a11;
    uint64_t v67 = a10;
    uint64_t v68 = a8;
    uint64_t v65 = a9;
    Swift::String v39 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    NSString v40 = String._bridgeToObjectiveC()();
    if (qword_1001C7F10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    id v69 = [v39 identifierStoreWithAccount:v23 bagNamespace:v40 bag:qword_1001C90F0];

    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v41 = v17;
    v64(v17, (uint64_t)v70, v14);
    uint64_t v42 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v43 = (v42 + 32) & ~v42;
    uint64_t v44 = v71;
    uint64_t v63 = v42 | 7;
    uint64_t v45 = swift_allocObject(&unk_1001AD538, v43 + v71, v42 | 7);
    uint64_t v46 = v68;
    *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = v68;
    *(void *)(v45 + 24) = v22;
    uint64_t v70 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
    v70(v45 + v43, v41, v14);
    id v77 = sub_1000A6144;
    uint64_t v78 = v45;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v74 = 1107296256LL;
    uint64_t v75 = sub_1000B1D04;
    __int128 v76 = &unk_1001AD550;
    uint64_t v47 = _Block_copy(&aBlock);
    swift_retain(v46);
    id v48 = v22;
    swift_release();
    id v49 = v69;
    [v69 addErrorBlock:v47];
    _Block_release(v47);
    v64(v41, v72, v14);
    uint64_t v50 = (v42 + 56) & ~v42;
    uint64_t v51 = swift_allocObject(&unk_1001AD588, v50 + v44, v63);
    uint64_t v52 = v67;
    *(void *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v65;
    *(void *)(v51 + 24) = v52;
    *(_BYTE *)(v51 + 32) = v66 & 1;
    *(void *)(v51 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v46;
    *(void *)(v51 + 48) = v48;
    v70(v51 + v50, v41, v14);
    id v77 = sub_1000A61F8;
    uint64_t v78 = v51;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v74 = 1107296256LL;
    uint64_t v75 = sub_100098828;
    __int128 v76 = &unk_1001AD5A0;
    uint64_t v53 = _Block_copy(&aBlock);
    swift_retain(v46);
    id v54 = v48;
    swift_bridgeObjectRetain(v52);
    swift_release();
    [v49 addSuccessBlock:v53];
    _Block_release(v53);
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = type metadata accessor for LogMessage(0LL);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v25 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v27 = type metadata accessor for JSMetrics();
    __int128 v76 = (void *)sub_10000D33C(&qword_1001CBB00);
    __int128 aBlock = (void **)v27;
    id v28 = (id)AMSLogKey(v76);
    if (v28)
    {
      Swift::String v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v32 = v31;

      swift_bridgeObjectRetain(v32);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t v34 = v76;
      Swift::String v35 = sub_10000D37C(&aBlock, (uint64_t)v76);
      uint64_t DynamicType = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v79[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v79);
      sub_1000102E0((uint64_t)v79, &qword_1001CAAD0);
      v37._uint64_t countAndFlagsBits = 5972026LL;
      v37._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t MetatypeMetadata = &type metadata for String;
      v79[0] = v30;
      v79[1] = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v79);
      sub_1000102E0((uint64_t)v79, &qword_1001CAAD0);
      v38._uint64_t countAndFlagsBits = 93LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v20);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v55._uint64_t countAndFlagsBits = 0LL;
      v55._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      uint64_t v56 = v76;
      id v57 = sub_10000D37C(&aBlock, (uint64_t)v76);
      uint64_t v58 = swift_getDynamicType(v57, v56, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v58);
      v79[0] = v58;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v79);
      sub_1000102E0((uint64_t)v79, &qword_1001CAAD0);
      v59._uint64_t countAndFlagsBits = 58LL;
      v59._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v59);
      LogMessage.init(stringInterpolation:)(v20);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v60 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v61 = static os_log_type_t.error.getter(v60);
    sub_1000BD1B0(v61, v26);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000A375C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v45 = type metadata accessor for JSMetrics();
  v44[0] = a1;
  id v10 = (id)AMSLogKey(a1);
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v45;
    uint64_t v17 = sub_10000D37C(v44, v45);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v42[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t MetatypeMetadata = &type metadata for String;
    v42[0] = v12;
    v42[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v45;
    id v23 = sub_10000D37C(v44, v45);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v42[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v44);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(35LL, 1LL);
  v26._object = (void *)0x8000000100171EB0LL;
  v26._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  swift_getErrorValue(a2, v41);
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v45 = v40;
  Swift::String v29 = sub_10000D63C(v44);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v29, v27, v28);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
  sub_1000102E0((uint64_t)v44, &qword_1001CAAD0);
  v30._uint64_t countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t v31 = LogMessage.init(stringInterpolation:)(v6);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  sub_1000BD1B0(v32, v9);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v34 = swift_allocObject(v33, 64LL, 7LL);
  *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v35 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a2);
  id v36 = sub_10008F674(a2);
  uint64_t v37 = sub_10008F4BC();

  *(void *)(v34 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v34 + 32) = v37;
  sub_1000854E4(v34);
  return swift_bridgeObjectRelease();
}

void sub_1000A3B00(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7)
{
  v25[0] = a7;
  v25[1] = a5;
  uint64_t v12 = type metadata accessor for JSCallable(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  sub_10000DAA0(0LL, (unint64_t *)&unk_1001CF1F0, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  swift_bridgeObjectRetain(a3);
  sub_10013423C(a2, a3, a4);
  uint64_t v16 = v15;
  id v17 = [a1 identifierForKey:v15];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  (*(void (**)(char *, void, uint64_t))(v13 + 16))( (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v25[0],  v12);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = (v21 + 40) & ~v21;
  id v23 = (char *)swift_allocObject(&unk_1001AD5D8, v22 + v14, v21 | 7);
  *((void *)v23 + 2) = a6;
  *((void *)v23 + 3) = v18;
  *((void *)v23 + 4) = v20;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))( &v23[v22],  (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12);
  id v24 = a6;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A6294, v23);
  swift_release();
}

uint64_t sub_1000A3C70(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  v37[1] = v11;
  uint64_t v13 = swift_allocObject(v9, ((v12 + 32) & ~v12) + 2 * v11, v12 | 7);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v41 = (void *)type metadata accessor for JSMetrics();
  v40[0] = a1;
  id v14 = (id)AMSLogKey(a1);
  if (v14)
  {
    Swift::String v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v41;
    uint64_t v21 = sub_10000D37C(v40, (uint64_t)v41);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v38[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_1000102E0((uint64_t)v38, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t MetatypeMetadata = &type metadata for String;
    v38[0] = v16;
    v38[1] = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_1000102E0((uint64_t)v38, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    Swift::String v26 = v41;
    uint64_t v27 = sub_10000D37C(v40, (uint64_t)v41);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    v38[0] = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_1000102E0((uint64_t)v38, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(v40);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 1LL);
  v30._object = (void *)0x8000000100171E90LL;
  v30._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t v41 = &type metadata for String;
  v40[0] = a2;
  v40[1] = a3;
  swift_bridgeObjectRetain(a3);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
  sub_1000102E0((uint64_t)v40, &qword_1001CAAD0);
  v31._uint64_t countAndFlagsBits = 0LL;
  v31._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = LogMessage.init(stringInterpolation:)(v8);
  uint64_t v33 = static os_log_type_t.default.getter(v32);
  sub_1000BD1B0(v33, v13);
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v35 = swift_allocObject(v34, 64LL, 7LL);
  *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v35 + 56) = &type metadata for String;
  *(void *)(v35 + 32) = a2;
  *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a3;
  swift_bridgeObjectRetain(a3);
  sub_1000854E4(v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A4000()
{
  uint64_t ObjectType = swift_getObjectType(v1);
  sub_10000DE08(ObjectType, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  sub_10009A3D4();
  sub_1000A65D4();
  sub_10009A3CC((uint64_t)sub_1000A5EDC, v3, v4, v5, v6, v7, v8, v9, v11);
  sub_10008E4EC();
  return v0;
}

uint64_t sub_1000A4084( void *a1, char *a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, void *a7, int a8, uint64_t a9)
{
  int v61 = a8;
  uint64_t v67 = a7;
  uint64_t v60 = a5;
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v18 = static RunLoopWorkerThread.current.getter();
  if (v18)
  {
    uint64_t v55 = v18;
    uint64_t v56 = a4;
    uint64_t v57 = a6;
    uint64_t v58 = a1;
    uint64_t v59 = v9;
    uint64_t v19 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v20 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v21 = swift_allocObject( v19,  ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))
          + 2LL * *(void *)(v20 + 72),
            *(unsigned __int8 *)(v20 + 80) | 7LL);
    *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    int v66 = (void *)type metadata accessor for JSMetrics();
    uint64_t v64 = a2;
    uint64_t v22 = *(void *)&a2[OBJC_IVAR____TtC14amsengagementd9JSMetrics_config + 32];
    id v54 = a2;
    if (v22)
    {
      uint64_t v53 = *(void *)&a2[OBJC_IVAR____TtC14amsengagementd9JSMetrics_config + 24];
      Swift::String v23 = a2;
      swift_bridgeObjectRetain(v22);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v24._uint64_t countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      Swift::String v25 = v66;
      Swift::String v26 = sub_10000D37C(&v64, (uint64_t)v66);
      uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v62[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
      sub_1000102E0((uint64_t)v62, &qword_1001CAAD0);
      v28._uint64_t countAndFlagsBits = 5972026LL;
      v28._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t MetatypeMetadata = &type metadata for String;
      v62[0] = v53;
      v62[1] = v22;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
      sub_1000102E0((uint64_t)v62, &qword_1001CAAD0);
      uint64_t v29 = 93LL;
    }

    else
    {
      Swift::String v31 = a2;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t v33 = v66;
      uint64_t v34 = sub_10000D37C(&v64, (uint64_t)v66);
      uint64_t v35 = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v35);
      v62[0] = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
      sub_1000102E0((uint64_t)v62, &qword_1001CAAD0);
      uint64_t v29 = 58LL;
    }

    uint64_t v53 = a9;
    unint64_t v36 = 0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v29);
    LogMessage.init(stringInterpolation:)(v17);
    sub_10000D3A0(&v64);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 2LL);
    v37._object = (void *)0x8000000100171D80LL;
    v37._uint64_t countAndFlagsBits = 0xD000000000000023LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    int v66 = &type metadata for String;
    uint64_t v38 = v56;
    uint64_t v64 = (char *)a3;
    uint64_t v65 = v56;
    swift_bridgeObjectRetain(v56);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v64);
    sub_1000102E0((uint64_t)&v64, &qword_1001CAAD0);
    v39._uint64_t countAndFlagsBits = 0x203A79656B202CLL;
    v39._object = (void *)0xE700000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    int v66 = &type metadata for String;
    uint64_t v40 = a3;
    uint64_t v41 = v60;
    uint64_t v42 = v57;
    uint64_t v64 = v60;
    uint64_t v65 = v57;
    swift_bridgeObjectRetain(v57);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v64);
    sub_1000102E0((uint64_t)&v64, &qword_1001CAAD0);
    v43._uint64_t countAndFlagsBits = 41LL;
    v43._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v43);
    uint64_t v44 = LogMessage.init(stringInterpolation:)(v17);
    if (qword_1001C7F80 != -1) {
      uint64_t v44 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v45 = static os_log_type_t.default.getter(v44);
    sub_1000BD1B0(v45, v21);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v46 = swift_allocObject(&unk_1001AD3D0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v46 + 16, v54);
    uint64_t v47 = swift_allocObject(&unk_1001AD3F8, 88LL, 7LL);
    id v48 = v67;
    *(void *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = v46;
    *(void *)(v47 + 24) = v48;
    *(void *)(v47 + 32) = v40;
    *(void *)(v47 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v38;
    uint64_t v49 = v55;
    *(void *)(v47 + 48) = v55;
    *(void *)(v47 + 56) = v41;
    *(void *)(v47 + 64) = v42;
    *(_BYTE *)(v47 + 72) = v61 & 1;
    *(void *)(v47 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v53;
    id v50 = v48;
    swift_retain(v49);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v42);
    swift_retain(v46);
    a3 = sub_10008C048(v58, (uint64_t)sub_1000A5F30, v47);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for JSError();
    id v30 = sub_10008F29C(12LL, 0xD00000000000003BLL, 0x8000000100171D40LL, 0LL, 0LL);
    swift_willThrow(v30);
  }

  return a3;
}

void sub_1000A453C( uint64_t a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v75 = a2;
  id v72 = a7;
  uint64_t v73 = a3;
  uint64_t v15 = type metadata accessor for JSCallable(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v74 = v17;
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v84, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    Swift::String v23 = (void *)Strong;
    uint64_t v71 = v18;
    uint64_t v24 = v15;
    if (a5) {
      id v25 = *(id *)(a5 + OBJC_IVAR____TtC14amsengagementd9JSAccount_account);
    }
    else {
      id v25 = 0LL;
    }
    uint64_t v41 = a8;
    uint64_t v69 = a12;
    int v68 = a11;
    uint64_t v70 = a10;
    uint64_t v67 = a9;
    uint64_t v42 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
    NSString v43 = String._bridgeToObjectiveC()();
    if (qword_1001C7F10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    id v72 = [v42 identifierStoreWithAccount:v25 bagNamespace:v43 bag:qword_1001C90F0];

    int v66 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    uint64_t v44 = v71;
    v66(v71, (uint64_t)v73, v24);
    uint64_t v45 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v46 = (v45 + 32) & ~v45;
    uint64_t v47 = v74;
    uint64_t v65 = v45 | 7;
    uint64_t v48 = swift_allocObject(&unk_1001AD420, v46 + v74, v45 | 7);
    *(void *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = v41;
    *(void *)(v48 + 24) = v23;
    uint64_t v73 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 32);
    v73(v48 + v46, v44, v24);
    uint64_t v80 = sub_1000A5F64;
    uint64_t v81 = v48;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v77 = 1107296256LL;
    uint64_t v78 = sub_1000B1D04;
    uint64_t v79 = &unk_1001AD438;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain(v41);
    id v50 = v23;
    swift_release();
    id v51 = v72;
    [v72 addErrorBlock:v49];
    _Block_release(v49);
    v66(v44, v75, v24);
    uint64_t v52 = (v45 + 56) & ~v45;
    unint64_t v53 = (v47 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v54 = swift_allocObject(&unk_1001AD470, v53 + 8, v65);
    uint64_t v55 = v70;
    *(void *)(v54 + swift_unknownObjectWeakDestroy(v0 + 16) = v67;
    *(void *)(v54 + 24) = v55;
    *(_BYTE *)(v54 + 32) = v68 & 1;
    *(void *)(v54 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v41;
    *(void *)(v54 + 48) = v50;
    v73(v54 + v52, v44, v24);
    *(void *)(v54 + v53) = v69;
    uint64_t v80 = sub_1000A5FE0;
    uint64_t v81 = v54;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v77 = 1107296256LL;
    uint64_t v78 = sub_100098828;
    uint64_t v79 = &unk_1001AD488;
    uint64_t v56 = _Block_copy(&aBlock);
    swift_retain(v41);
    id v57 = v50;
    swift_bridgeObjectRetain(v55);
    swift_release();
    [v51 addSuccessBlock:v56];
    _Block_release(v56);
  }

  else
  {
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = type metadata accessor for LogMessage(0LL);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v27 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v29 = type metadata accessor for JSMetrics();
    uint64_t v79 = (void *)sub_10000D33C(&qword_1001CBB00);
    __int128 aBlock = (void **)v29;
    id v30 = (id)AMSLogKey(v79);
    if (v30)
    {
      Swift::String v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v34 = v33;

      swift_bridgeObjectRetain(v34);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v35._uint64_t countAndFlagsBits = 0LL;
      v35._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      unint64_t v36 = v79;
      Swift::String v37 = sub_10000D37C(&aBlock, (uint64_t)v79);
      uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v82[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v82);
      sub_1000102E0((uint64_t)v82, &qword_1001CAAD0);
      v39._uint64_t countAndFlagsBits = 5972026LL;
      v39._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      uint64_t MetatypeMetadata = &type metadata for String;
      v82[0] = v32;
      v82[1] = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v82);
      sub_1000102E0((uint64_t)v82, &qword_1001CAAD0);
      v40._uint64_t countAndFlagsBits = 93LL;
      v40._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      LogMessage.init(stringInterpolation:)(v21);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v58._uint64_t countAndFlagsBits = 0LL;
      v58._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      uint64_t v59 = v79;
      uint64_t v60 = sub_10000D37C(&aBlock, (uint64_t)v79);
      uint64_t v61 = swift_getDynamicType(v60, v59, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v61);
      v82[0] = v61;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v82);
      sub_1000102E0((uint64_t)v82, &qword_1001CAAD0);
      v62._uint64_t countAndFlagsBits = 58LL;
      v62._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v62);
      LogMessage.init(stringInterpolation:)(v21);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v63 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v63 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v64 = static os_log_type_t.error.getter(v63);
    sub_1000BD1B0(v64, v28);
    swift_bridgeObjectRelease();
  }

void sub_1000A4B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = sub_1000841C0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(void *)(v33 + 64);
  __chkstk_darwin(v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))( (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v27,  v32);
  uint64_t v35 = *(unsigned __int8 *)(v33 + 80);
  uint64_t v36 = (v35 + 32) & ~v35;
  uint64_t v37 = swift_allocObject(v25, v36 + v34, v35 | 7);
  *(void *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = v29;
  *(void *)(v37 + 24) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))( v37 + v36,  (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v32);
  id v38 = v29;
  swift_errorRetain(v31);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(v23, v37);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_1000A4C20(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v45 = type metadata accessor for JSMetrics();
  v44[0] = a1;
  id v10 = (id)AMSLogKey(a1);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v45;
    uint64_t v17 = sub_10000D37C(v44, v45);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v42[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t MetatypeMetadata = &type metadata for String;
    v42[0] = v12;
    v42[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v45;
    uint64_t v23 = sub_10000D37C(v44, v45);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v42[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v44);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(31LL, 1LL);
  v26._object = (void *)0x8000000100171E00LL;
  v26._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  swift_getErrorValue(a2, v41);
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  uint64_t v45 = v40;
  uint64_t v29 = sub_10000D63C(v44);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16LL))(v29, v27, v28);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
  sub_1000102E0((uint64_t)v44, &qword_1001CAAD0);
  v30._uint64_t countAndFlagsBits = 0LL;
  v30._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t v31 = LogMessage.init(stringInterpolation:)(v6);
  if (qword_1001C7F80 != -1) {
    uint64_t v31 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  sub_1000BD1B0(v32, v9);
  swift_bridgeObjectRelease();
  uint64_t v33 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v34 = swift_allocObject(v33, 64LL, 7LL);
  *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v35 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a2);
  id v36 = sub_10008F674(a2);
  uint64_t v37 = sub_10008F4BC();

  *(void *)(v34 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v34 + 32) = v37;
  sub_1000854E4(v34);
  return swift_bridgeObjectRelease();
}

void sub_1000A4FC0( void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v32 = a5;
  uint64_t v13 = type metadata accessor for JSCallable(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000DAA0(0LL, (unint64_t *)&unk_1001CF1F0, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  swift_bridgeObjectRetain(a3);
  sub_10013423C(a2, a3, a4);
  uint64_t v18 = v17;
  uint64_t v19 = sub_10000D33C(&qword_1001CD430);
  uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
  *(void *)(v20 + 32) = v18;
  uint64_t v33 = v20;
  specialized Array._endMutation()(v20);
  id v21 = v18;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [a1 generateEventFieldsForKeys:isa];

  uint64_t v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v23,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  uint64_t v25 = swift_allocObject(&unk_1001AD3D0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v25 + 16, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v30, v13);
  uint64_t v26 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v27 = (v26 + 32) & ~v26;
  unint64_t v28 = (v15 + v27 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v29 = swift_allocObject(&unk_1001AD4C0, v28 + 8, v26 | 7);
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  *(void *)(v29 + 24) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v29 + v27, v16, v13);
  *(void *)(v29 + v28) = v31;
  swift_retain(v25);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A606C, v29);
  swift_release();
  swift_release();
}

uint64_t sub_1000A51F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = a1 + 16;
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + 2LL * *(void *)(v12 + 72),
          *(unsigned __int8 *)(v12 + 80) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  swift_beginAccess(v10, v40, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (Strong)
  {
    uint64_t v15 = Strong;
    uint64_t v42 = (void *)type metadata accessor for JSMetrics();
    *(void *)&__int128 v41 = v15;
    sub_10000DA58(&v41, &v43);
  }

  else
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a4);
    *(void *)&__int128 v43 = a4;
  }

  swift_beginAccess(v10, v39, 0LL, 0LL);
  uint64_t v16 = swift_unknownObjectWeakLoadStrong(v10);
  if (v16
    && (uint64_t v17 = (void *)v16,
        uint64_t v19 = *(void *)(v16 + OBJC_IVAR____TtC14amsengagementd9JSMetrics_config + 24),
        uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC14amsengagementd9JSMetrics_config + 32),
        swift_bridgeObjectRetain(v18),
        v17,
        v18))
  {
    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v21 = MetatypeMetadata;
    uint64_t v22 = sub_10000D37C(&v43, MetatypeMetadata);
    uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
    uint64_t v42 = (void *)swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v41 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v41);
    sub_1000102E0((uint64_t)&v41, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 5972026LL;
    v24._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v42 = &type metadata for String;
    *(void *)&__int128 v41 = v19;
    *((void *)&v41 + Hasher._combine(_:)(v1 & 1) = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v41);
    sub_1000102E0((uint64_t)&v41, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 93LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v9);
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = MetatypeMetadata;
    unint64_t v28 = sub_10000D37C(&v43, MetatypeMetadata);
    uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
    uint64_t v42 = (void *)swift_getMetatypeMetadata(v29);
    *(void *)&__int128 v41 = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v41);
    sub_1000102E0((uint64_t)&v41, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 58LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v9);
  }

  swift_bridgeObjectRelease();
  sub_10000D3A0(&v43);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(23LL, 1LL);
  v31._object = (void *)0x8000000100171DE0LL;
  v31._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = sub_10000D33C(&qword_1001C8E58);
  uint64_t MetatypeMetadata = v32;
  *(void *)&__int128 v43 = a2;
  swift_bridgeObjectRetain(a2);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v43);
  sub_1000102E0((uint64_t)&v43, &qword_1001CAAD0);
  v33._uint64_t countAndFlagsBits = 0LL;
  v33._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v33);
  uint64_t v34 = LogMessage.init(stringInterpolation:)(v9);
  if (qword_1001C7F80 != -1) {
    uint64_t v34 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  sub_1000BD1B0(v35, v13);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v37 = swift_allocObject(v36, 64LL, 7LL);
  *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v37 + 56) = v32;
  *(void *)(v37 + 32) = a2;
  swift_bridgeObjectRetain(a2);
  sub_1000854E4(v37);
  return swift_bridgeObjectRelease();
}

id sub_1000A55C0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v16 = v15;
  id v17 = v7;
  id v18 = v9;
  uint64_t v19 = (void *)v1(v7, v11, v13, v14, v16, v3);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

void sub_1000A5674()
{
  uint64_t v70 = v1;
  uint64_t v71 = v2;
  id v58 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v63 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_10000DF08();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v51))
  {
    uint64_t v8 = 0LL;
    unint64_t v57 = v4 & 0xC000000000000001LL;
    uint64_t v52 = v4 + 32;
    uint64_t v9 = &type metadata for String;
    __int128 v54 = xmmword_100164230;
    unint64_t v53 = (void *)0x8000000100171D10LL;
    uint64_t v55 = v7;
    uint64_t v56 = v4;
    while (1)
    {
      unint64_t v10 = v57;
      sub_100063D14(v8, v57 == 0);
      id v11 = v10 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4) : *(id *)(v52 + 8 * v8);
      uint64_t v12 = v11;
      BOOL v13 = __OFADD__(v8, 1LL);
      uint64_t v14 = v8 + 1;
      if (v13) {
        break;
      }
      uint64_t v62 = v14;
      uint64_t v15 = 0LL;
      *(void *)&__int128 v69 = 0LL;
      *((void *)&v69 + Hasher._combine(_:)(v1 & 1) = 0xE000000000000000LL;
      do
      {
        uint64_t v16 = *(uint64_t *)((char *)&off_1001A7490 + v15 + 32);
        id v17 = *(_UNKNOWN **)((char *)&off_1001A7490 + v15 + 40);
        v68._uint64_t countAndFlagsBits = 0LL;
        v68._object = (void *)0xE000000000000000LL;
        swift_bridgeObjectRetain(v17);
        v18._uint64_t countAndFlagsBits = v16;
        v18._object = v17;
        String.append(_:)(v18);
        v19._uint64_t countAndFlagsBits = 61LL;
        v19._object = (void *)0xE100000000000000LL;
        String.append(_:)(v19);
        NSString v20 = String._bridgeToObjectiveC()();
        sub_1000090CC();
        id v21 = [v12 propertyForBodyKey:v20];
        sub_10008E4EC();
        if (v16)
        {
          _bridgeAnyObjectToAny(_:)(v16);
          swift_unknownObjectRelease(v16);
          sub_10000DA58(&v64, &v66);
        }

        else
        {
          uint64_t v67 = v9;
          *(void *)&__int128 v66 = 0LL;
          *((void *)&v66 + Hasher._combine(_:)(v1 & 1) = 0xE000000000000000LL;
        }

        _print_unlocked<A, B>(_:_:)( &v66,  &v68,  (char *)&type metadata for Any + 8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        sub_10000D3A0(&v66);
        v22._uint64_t countAndFlagsBits = 8251LL;
        v22._object = (void *)0xE200000000000000LL;
        String.append(_:)(v22);
        String.append(_:)(v68);
        sub_100009020();
        v15 += 16LL;
      }

      while (v15 != 48);
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      uint64_t v61 = qword_1001DBB30;
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v23 = *(void *)(sub_10000DC98() - 8);
      uint64_t v24 = *(void *)(v23 + 72);
      uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
      uint64_t v26 = (v25 + 32) & ~v25;
      uint64_t v27 = sub_10000DCF0(v26 + 2 * v24, v25);
      *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v54;
      uint64_t v60 = v27 + v26;
      uint64_t v67 = (void *)type metadata accessor for JSMetrics();
      *(void *)&__int128 v66 = v58;
      id v28 = (id)AMSLogKey(v58);
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        uint64_t v59 = v24;
        uint64_t v31 = v30;
        uint64_t v33 = v32;

        swift_bridgeObjectRetain(v33);
        sub_1000485F4(4LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = (uint64_t)v67;
        uint64_t v36 = sub_10000D37C(&v66, (uint64_t)v67);
        uint64_t v37 = sub_10000DC54((uint64_t)v36, v35);
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v37);
        *(void *)&__int128 v64 = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v64);
        sub_1000A6598((uint64_t)&v64);
        v38._uint64_t countAndFlagsBits = 5972026LL;
        v38._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        uint64_t v39 = (uint64_t)v9;
        uint64_t MetatypeMetadata = (uint64_t)v9;
        *(void *)&__int128 v64 = v31;
        *((void *)&v64 + Hasher._combine(_:)(v1 & 1) = v33;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v64);
        sub_1000A6598((uint64_t)&v64);
        sub_10000DC4C(93LL);
        sub_10000DC5C();
        sub_100009020();
      }

      else
      {
        sub_10000DC24();
        sub_10000DC08();
        uint64_t v40 = (uint64_t)v67;
        __int128 v41 = sub_10000D37C(&v66, (uint64_t)v67);
        uint64_t v42 = sub_10000DC54((uint64_t)v41, v40);
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v42);
        *(void *)&__int128 v64 = v42;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v64);
        sub_1000A6598((uint64_t)&v64);
        sub_10000DC4C(58LL);
        sub_10000DC5C();
        uint64_t v39 = (uint64_t)v9;
      }

      sub_10000D3A0(&v66);
      sub_1000485F4(34LL);
      v43._uint64_t countAndFlagsBits = 0xD000000000000020LL;
      v43._object = v53;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      id v44 = [v12 topic];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v47 = v46;

      uint64_t v67 = (void *)v39;
      *(void *)&__int128 v66 = v45;
      *((void *)&v66 + Hasher._combine(_:)(v1 & 1) = v47;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v66);
      sub_1000A6598((uint64_t)&v66);
      v48._uint64_t countAndFlagsBits = 8251LL;
      v48._object = (void *)0xE200000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      uint64_t v67 = (void *)v39;
      __int128 v66 = v69;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v66);
      sub_1000A6598((uint64_t)&v66);
      sub_10000DC08();
      uint64_t v49 = sub_10000DC5C();
      uint64_t v50 = static os_log_type_t.default.getter(v49);
      sub_1000BD1B0(v50, v27);
      sub_1000090CC();

      uint64_t v4 = v56;
      uint64_t v8 = v62;
      uint64_t v9 = (void *)v39;
      if (v62 == v55)
      {
        swift_bridgeObjectRelease();
        sub_10000DD84();
        return;
      }
    }

    __break(1u);
LABEL_21:
    if (v4 < 0) {
      uint64_t v51 = v4;
    }
    else {
      uint64_t v51 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000DF08();
  }

  swift_bridgeObjectRelease();
}

void *sub_1000A5B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (v33)
  {
    uint64_t v8 = type metadata accessor for JSAccount();
    else {
      uint64_t v12 = 0LL;
    }
  }

  else
  {
    sub_1000A65EC(v5, &qword_1001CAAD0, v6, v7);
    uint64_t v12 = 0LL;
  }

  sub_1000308B8(0x6C616E6F73726570LL, 0xEC00000064657A69LL, a4, &v32);
  if (v33)
  {
    uint64_t v18 = sub_1000A65A0(v13, v14, v15, (uint64_t)&type metadata for Bool, v17);
    if ((_DWORD)v18)
    {
      char v19 = v31 ^ 1;
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v18 = sub_1000A65EC(v13, &qword_1001CAAD0, v15, v16);
  }

  char v19 = 1;
LABEL_11:
  sub_10000DE08(v18, (unint64_t *)&qword_1001C8F78, &OBJC_CLASS___AMSMetricsEvent_ptr);
  sub_10000DF08();
  sub_1000FE8E4();
  id v21 = v20;
  if (v12) {
    id v22 = *(id *)&v12[OBJC_IVAR____TtC14amsengagementd9JSAccount_account];
  }
  else {
    id v22 = 0LL;
  }
  [v21 setAccount:v22];

  [v21 setAnonymous:v19 & 1];
  [v21 setSuppressEngagement:1];
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  [v21 addPropertiesWithDictionary:isa];

  sub_1000308B8(0xD000000000000012LL, 0x8000000100171CF0LL, a4, &v32);
  if (v33)
  {
    uint64_t v24 = sub_10000D33C(&qword_1001CDF50);
    if ((swift_dynamicCast(&v31, &v32, (char *)&type metadata for Any + 8, v24, 6LL) & 1) != 0)
    {
      sub_1000A0D38(v31);
      sub_100009020();
      Class v25 = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v26 = sub_1000090CC();
      sub_1000A6614(v26, "removePropertiesForKeys:");
    }
  }

  else
  {

    sub_1000A65EC(v27, &qword_1001CAAD0, v28, v29);
  }

  return v21;
}

void sub_1000A5E18()
{
}

id sub_1000A5E50()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSMetrics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSMetrics()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSMetrics);
}

uint64_t sub_1000A5EDC()
{
  return sub_1000A4084(v1, v2, v3, v4, v5, v6, v7, v8, *(void *)(v0 + 72));
}

uint64_t sub_1000A5F04()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A5F28()
{
  return sub_1000A60CC(88LL);
}

void sub_1000A5F30()
{
}

uint64_t sub_1000A5F64(uint64_t a1)
{
  return sub_1000A6158(a1, &unk_1001AD4E8, sub_1000A60A0);
}

uint64_t sub_1000A5F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A5F88(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A5F90()
{
  sub_100051B30();
  uint64_t v1 = sub_10009A360();
  return sub_100051AA4(v1, v2, v3);
}

void sub_1000A5FE0(void *a1)
{
}

uint64_t sub_1000A6028()
{
  uint64_t v0 = sub_10009A360();
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_1000A606C()
{
  return sub_1000A51F0(*(void *)(v0 + 16), *(void *)(v0 + 24), v0 + v1, *(void *)(v0 + v2));
}

uint64_t sub_1000A60A0()
{
  return sub_1000A6310((uint64_t (*)(void))sub_1000A4C20);
}

char *sub_1000A60AC()
{
  return sub_1000A2CA4(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1000A60C4()
{
  return sub_1000A60CC(73LL);
}

uint64_t sub_1000A60CC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v1, a1, 7LL);
}

void sub_1000A6118()
{
}

uint64_t sub_1000A6144(uint64_t a1)
{
  return sub_1000A6158(a1, &unk_1001AD600, sub_1000A6304);
}

#error "1000A6188: call analysis failed (funcsize=17)"
uint64_t sub_1000A619C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_1000841C0();
  sub_10009A3DC();
  swift_release();

  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

void sub_1000A61F8(void *a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  sub_1000A3B00( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(_BYTE *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  v1 + ((v3 + 56) & ~v3));
}

uint64_t sub_1000A623C()
{
  swift_bridgeObjectRelease();
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000A6294()
{
  return sub_1000A3C70(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000A62C8()
{
  swift_errorRelease(*(void *)(v0 + 24));
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000A6304()
{
  return sub_1000A6310((uint64_t (*)(void))sub_1000A375C);
}

uint64_t sub_1000A6310(uint64_t (*a1)(void))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  return sub_1000A65B4(*(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((v2 + 32) & ~v2), a1);
}

uint64_t sub_1000A6348(void *a1)
{
  return sub_1000A1A14(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000A6360()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000A6388(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000A63A4(uint64_t a1)
{
  return sub_1000A63F8(a1, (uint64_t (*)(uint64_t))sub_1000A23B0);
}

uint64_t sub_1000A63B4()
{
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000A63EC(uint64_t a1)
{
  return sub_1000A63F8(a1, (uint64_t (*)(uint64_t))sub_1000A27EC);
}

uint64_t sub_1000A63F8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

uint64_t sub_1000A6430()
{
  uint64_t v2 = sub_10009A360();
  return sub_100092CCC(v2, v3, v4);
}

uint64_t sub_1000A6468()
{
  return sub_1000A64B8((uint64_t (*)(void))sub_1000A28F0);
}

uint64_t sub_1000A6474()
{
  uint64_t v2 = sub_10009A360();
  return sub_100092CCC(v2, v3, v4);
}

uint64_t sub_1000A64AC()
{
  return sub_1000A64B8((uint64_t (*)(void))sub_1000A24B8);
}

uint64_t sub_1000A64B8(uint64_t (*a1)(void))
{
  return sub_1000A65B4(*(void *)(v1 + 16), v1 + v2, *(void *)(v1 + v3), a1);
}

void *sub_1000A64F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A184C(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24));
}

  ;
}

  ;
}

uint64_t sub_1000A6568()
{
  return v0;
}

  ;
}

uint64_t sub_1000A6598(uint64_t a1)
{
  return sub_1000102E0(a1, v1);
}

uint64_t sub_1000A65A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5 + 8, a4, 6LL);
}

uint64_t sub_1000A65B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

  ;
}

  ;
}

uint64_t sub_1000A65EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, ...)
{
  return sub_1000102E0((uint64_t)va, a2);
}

  ;
}

uint64_t sub_1000A6608()
{
  return sub_1000102E0(v1 - 144, v0);
}

id sub_1000A6614(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000A6650()
{
  uint64_t v0 = type metadata accessor for NWPath.Status(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for NWPath(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100048DB4();
  NWPathMonitor.currentPath.getter(v11);
  uint64_t v12 = sub_1000292C4();
  NWPath.status.getter(v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1000A6E0C( enum case for NWPath.Status.satisfied(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 104));
  char v13 = static NWPath.Status.== infix(_:_:)(v6, v4);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v4, v0);
  v14(v6, v0);
  return v13 & 1;
}

char *sub_1000A678C()
{
  uint64_t v1 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = OBJC_IVAR____TtC14amsengagementd9JSNetwork_networkMonitor;
  uint64_t v6 = type metadata accessor for NWPathMonitor(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = v0;
  *(void *)&v0[v5] = NWPathMonitor.init()();

  uint64_t v8 = (objc_class *)type metadata accessor for JSNetwork();
  v16.receiver = v7;
  v16.super_class = v8;
  uint64_t v9 = (char *)objc_msgSendSuper2(&v16, "init");
  uint64_t v10 = OBJC_IVAR____TtC14amsengagementd9JSNetwork_networkMonitor;
  uint64_t v11 = swift_allocObject(&unk_1001AD740, 24LL, 7LL);
  swift_unknownObjectWeakInit(v11 + 16, v9);
  uint64_t v12 = v9;
  sub_100048DB4();
  swift_retain(v11);
  sub_100048404((uint64_t)sub_1000A6E04, v11);
  NWPathMonitor.pathUpdateHandler.setter(sub_1000A6E04, v11);
  sub_1000292C4();
  swift_release_n(v11, 2LL);
  uint64_t v13 = *(void *)&v9[v10];
  sub_100049B94();
  sub_1000A6E0C( enum case for DispatchQoS.QoSClass.default(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  swift_retain(v13);
  uint64_t v14 = (void *)static OS_dispatch_queue.global(qos:)(v4);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  NWPathMonitor.start(queue:)(v14);
  swift_release();

  return v12;
}

uint64_t sub_1000A6930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NWPath.Status(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v55, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v15 = (void *)result;
    uint64_t v50 = a1;
    if (qword_1001C7F80 != -1) {
      swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v49 = qword_1001DBB00;
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v18 = *(void *)(v17 + 72);
    uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v48 = v18;
    uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    __int128 v54 = (void *)type metadata accessor for JSNetwork();
    v53[0] = v15;
    id v21 = v15;
    id v22 = (id)AMSLogKey(v21);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      id v47 = v21;
      uint64_t v25 = v24;
      uint64_t v27 = v26;

      swift_bridgeObjectRetain(v27);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v28._uint64_t countAndFlagsBits = 0LL;
      v28._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t v29 = v54;
      uint64_t v30 = sub_10000D37C(v53, (uint64_t)v54);
      uint64_t DynamicType = swift_getDynamicType(v30, v29, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v51[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v32._uint64_t countAndFlagsBits = 5972026LL;
      v32._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t MetatypeMetadata = &type metadata for String;
      v51[0] = v25;
      v51[1] = v27;
      id v21 = v47;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v33._uint64_t countAndFlagsBits = 93LL;
      v33._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      LogMessage.init(stringInterpolation:)(v13);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t v35 = v54;
      uint64_t v36 = sub_10000D37C(v53, (uint64_t)v54);
      uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
      v51[0] = v37;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
      sub_10000E888((uint64_t)v51);
      v38._uint64_t countAndFlagsBits = 58LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v13);
    }

    sub_10000D3A0(v53);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
    v39._object = (void *)0x8000000100172120LL;
    v39._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    NWPath.status.getter(v40);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for NWPath.Status.satisfied(_:), v4);
    char v41 = static NWPath.Status.== infix(_:_:)(v10, v8);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v5 + 8);
    v42(v8, v4);
    v42(v10, v4);
    __int128 v54 = &type metadata for Bool;
    LOBYTE(v53[0]) = v41 & 1;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v53);
    sub_10000E888((uint64_t)v53);
    v43._uint64_t countAndFlagsBits = 0LL;
    v43._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v43);
    uint64_t v44 = LogMessage.init(stringInterpolation:)(v13);
    uint64_t v45 = static os_log_type_t.debug.getter(v44);
    sub_1000BD1B0(v45, v20);

    return swift_bridgeObjectRelease();
  }

  return result;
}

id sub_1000A6D38()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSNetwork();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSNetwork()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSNetwork);
}

uint64_t sub_1000A6DE0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A6E04(uint64_t a1)
{
  return sub_1000A6930(a1, v1);
}

uint64_t sub_1000A6E0C@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

uint64_t sub_1000A6E18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v53[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1000A73D8();
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = sub_1000A74D0().super.isa;
    unsigned int v10 = [v8 isValidJSONObject:isa];

    if (v10)
    {
      Class v11 = sub_1000A74D0().super.isa;
      v54[0] = 0LL;
      id v12 = [v8 dataWithJSONObject:v11 options:2 error:v54];

      id v13 = v54[0];
      if (v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
        unint64_t v16 = v15;

        static String.Encoding.utf8.getter();
        uint64_t v17 = String.init(data:encoding:)(v14, v16, v5);
        sub_10001BD84(v14, v16);
        return v17;
      }

      uint64_t v36 = v13;
      uint64_t v37 = _convertNSErrorToError(_:)(v13);

      swift_willThrow(v38);
      swift_errorRelease(v37);
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v39 = sub_100010570();
      uint64_t v19 = sub_1000A7470(v39);
      uint64_t v40 = sub_1000A74A4((__n128 *)v19, (__n128)xmmword_100164230);
      char v41 = sub_1000A7494(v40);
      uint64_t v42 = sub_1000A745C((uint64_t)v41);
      id v43 = (id)AMSLogKey(v42);
      if (v43)
      {
        sub_1000105E8((uint64_t)v43);
        sub_1000A74C4();
        swift_bridgeObjectRetain(v1);
        sub_10008E3F8();
        sub_1000104F0();
        sub_1000857B0();
        uint64_t v44 = sub_100010530();
        sub_1000A7448(v44);
        sub_1000857E8();
        sub_10000DC14();
        sub_1000A74B4((uint64_t)&type metadata for String);
        sub_1000857E8();
        sub_10000DC4C(93LL);
        sub_10001A298();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_1000857B0();
        uint64_t v48 = sub_100010530();
        sub_1000A7448(v48);
        sub_1000857E8();
        sub_10000DC4C(58LL);
        sub_10001A298();
      }

      sub_10000D3A0(v54);
      sub_10001A21C(21LL);
      unint64_t v47 = 0x80000001001721F0LL;
      unint64_t v46 = 0xD000000000000015LL;
    }

    else
    {
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v28 = sub_100010570();
      uint64_t v19 = sub_1000A7470(v28);
      uint64_t v29 = sub_1000A74A4((__n128 *)v19, (__n128)xmmword_100164230);
      uint64_t v30 = sub_1000A7494(v29);
      uint64_t v31 = sub_1000A745C((uint64_t)v30);
      id v32 = (id)AMSLogKey(v31);
      if (v32)
      {
        sub_1000105E8((uint64_t)v32);
        sub_1000A74C4();
        swift_bridgeObjectRetain(v1);
        sub_10008E3F8();
        sub_1000104F0();
        sub_1000857B0();
        uint64_t v33 = sub_100010530();
        sub_1000A7448(v33);
        sub_1000857E8();
        sub_10000DC14();
        sub_1000A74B4((uint64_t)&type metadata for String);
        sub_1000857E8();
        sub_10000DC4C(93LL);
        sub_10001A298();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_1000857B0();
        uint64_t v45 = sub_100010530();
        sub_1000A7448(v45);
        sub_1000857E8();
        sub_10000DC4C(58LL);
        sub_10001A298();
      }

      sub_10000D3A0(v54);
      sub_10001A21C(43LL);
      unint64_t v46 = 0xD00000000000002BLL;
      unint64_t v47 = 0x80000001001721C0LL;
    }

    LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&v46);
    v54[3] = (id)sub_10000D33C(&qword_1001C8E58);
    v54[0] = v7;
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v54);
    sub_10000E888((uint64_t)v54);
    sub_10000DC08();
  }

  else
  {
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(sub_100010570() - 8);
    uint64_t v19 = swift_allocObject( v0,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
          + 2LL * *(void *)(v18 + 72),
            *(unsigned __int8 *)(v18 + 80) | 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v20 = type metadata accessor for JSONObject(0LL);
    id v21 = sub_1000A7494(v20);
    uint64_t v22 = sub_1000A745C((uint64_t)v21);
    id v23 = (id)AMSLogKey(v22);
    if (v23)
    {
      uint64_t v24 = sub_1000105E8((uint64_t)v23);
      uint64_t v26 = v25;

      swift_bridgeObjectRetain(v26);
      sub_10008E3F8();
      sub_1000104F0();
      sub_1000857B0();
      uint64_t v27 = sub_100010530();
      sub_1000A7448(v27);
      sub_1000857E8();
      sub_10000DC14();
      void v53[3] = &type metadata for String;
      v53[0] = v24;
      v53[1] = v26;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v53);
      sub_1000857E8();
      sub_10000DC4C(93LL);
      sub_10001A298();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_1000857B0();
      uint64_t v34 = sub_100010530();
      sub_1000A7448(v34);
      sub_1000857E8();
      sub_10000DC4C(58LL);
      sub_10001A298();
    }

    sub_10000D3A0(v54);
    sub_10001A21C(40LL);
    v35._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    v35._object = (void *)0x8000000100172190LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    JSONObject.untyped.getter(v54);
    LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v54);
    sub_10000E888((uint64_t)v54);
    sub_10000DC08();
  }

  uint64_t v49 = sub_10001A298();
  if (qword_1001C7F80 != -1) {
    uint64_t v49 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v50 = static os_log_type_t.error.getter(v49);
  sub_1000BD1B0(v50, v19);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_1000A73D8()
{
  if (v3[3])
  {
    uint64_t v0 = sub_10000D33C(&qword_1001C8E58);
    else {
      return 0LL;
    }
  }

  else
  {
    sub_10000E888((uint64_t)v3);
    return 0LL;
  }

uint64_t sub_1000A7448(uint64_t a1)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 136) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 136);
}

uint64_t sub_1000A745C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(a1, v2, v1);
}

uint64_t sub_1000A7470(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

void *sub_1000A7494(uint64_t a1)
{
  *(void *)(v1 - 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  return sub_10000D63C((void *)(v1 - 104));
}

uint64_t sub_1000A74A4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for JSONObject(0LL);
}

uint64_t sub_1000A74B4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 112) = a1;
  *(void *)(v3 - 136) = v2;
  *(void *)(v3 - 128) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 136);
}

void sub_1000A74C4()
{
}

NSDictionary sub_1000A74D0()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000A74DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_100083BE0();
  uint64_t v8 = (void *)static JSContext.requiredCurrent.getter();
  v11[2] = v4;
  v11[3] = a1;
  v11[4] = a2;
  v11[5] = a3;
  uint64_t v9 = JSContext.propagateErrorsToExceptions(_:)(sub_1000A7D2C, v11);

  return v9;
}

uint64_t sub_1000A7554(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a3;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  id v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v13 = static RunLoopWorkerThread.current.getter();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v44 = a5;
    uint64_t v45 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    v43[1] = qword_1001DBB30;
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
          + 3LL * *(void *)(v16 + 72),
            *(unsigned __int8 *)(v16 + 80) | 7LL);
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v49 = (void *)type metadata accessor for JSPrivacy();
    v48[0] = a2;
    id v18 = (id)AMSLogKey(a2);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v43[0] = v5;
      uint64_t v21 = v20;
      uint64_t v23 = v22;

      swift_bridgeObjectRetain(v23);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v24._uint64_t countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t v25 = v49;
      uint64_t v26 = sub_10000D37C(v48, (uint64_t)v49);
      uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v46[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v28._uint64_t countAndFlagsBits = 5972026LL;
      v28._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t MetatypeMetadata = &type metadata for String;
      v46[0] = v21;
      v46[1] = v23;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v29._uint64_t countAndFlagsBits = 93LL;
      v29._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      LogMessage.init(stringInterpolation:)(v12);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t v33 = v49;
      uint64_t v34 = sub_10000D37C(v48, (uint64_t)v49);
      uint64_t v35 = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v35);
      v46[0] = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v36._uint64_t countAndFlagsBits = 58LL;
      v36._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      LogMessage.init(stringInterpolation:)(v12);
    }

    sub_10000D3A0(v48);
    LogMessage.init(stringLiteral:)(0xD000000000000029LL);
    uint64_t v49 = &type metadata for String;
    uint64_t v37 = v50;
    v48[0] = v50;
    v48[1] = a4;
    swift_bridgeObjectRetain(a4);
    static LogMessage.safe(_:)(v48);
    uint64_t v38 = sub_10000E888((uint64_t)v48);
    uint64_t v39 = static os_log_type_t.default.getter(v38);
    sub_1000BD1B0(v39, v17);
    swift_bridgeObjectRelease();
    sub_100083BE0();
    uint64_t v40 = (void *)swift_allocObject(&unk_1001AD768, 48LL, 7LL);
    uint64_t v41 = v44;
    void v40[2] = v44;
    void v40[3] = v37;
    v40[4] = a4;
    void v40[5] = v14;
    swift_bridgeObjectRetain(v41);
    swift_retain(v14);
    swift_bridgeObjectRetain(a4);
    uint64_t v30 = sub_10008C048(v45, (uint64_t)sub_1000A7D7C, (uint64_t)v40);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v30 = type metadata accessor for JSError();
    id v31 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v31);
  }

  return v30;
}

uint64_t sub_1000A7934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for JSCallable(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  unsigned __int8 v9 = sub_1000A7A48(a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v6);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1001AD790, v11 + v8 + 1, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v12 + v11,  (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  *(_BYTE *)(v12 + v11 + sub_10009A3CC((uint64_t)sub_10009A060, v1, v2, v3, v4, v5, v6, v7, v8) = v9 & 1;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000A7DFC, v12);
  return swift_release();
}

id sub_1000A7A48(uint64_t a1)
{
  if (!a1)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_6;
  }

  sub_1000308B8(0x746E756F636361LL, 0xE700000000000000LL, a1, &v10);
  if (!*((void *)&v11 + 1))
  {
LABEL_6:
    sub_10000E888((uint64_t)&v10);
    goto LABEL_7;
  }

  uint64_t v1 = type metadata accessor for JSAccount();
  if ((swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, v1, 6LL) & 1) == 0)
  {
LABEL_7:
    uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AMSAcknowledgePrivacyTask);
    uint64_t v2 = (char *)String._bridgeToObjectiveC()();
    id v6 = [v7 acknowledgementNeededForPrivacyIdentifier:v2];
    goto LABEL_8;
  }

  uint64_t v2 = v9;
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___AMSAcknowledgePrivacyTask);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = *(id *)&v2[OBJC_IVAR____TtC14amsengagementd9JSAccount_account];
  id v6 = [v3 acknowledgementNeededForPrivacyIdentifier:v4 account:v5];

LABEL_8:
  return v6;
}

uint64_t sub_1000A7B8C(uint64_t a1, char a2)
{
  uint64_t v3 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v4 = swift_allocObject(v3, 64LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v4 + 56) = &type metadata for Bool;
  *(_BYTE *)(v4 + 32) = a2;
  sub_1000854E4(v4);
  return swift_bridgeObjectRelease();
}

id sub_1000A7C8C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSPrivacy();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000A7CDC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSPrivacy();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSPrivacy()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd9JSPrivacy);
}

uint64_t sub_1000A7D2C(void *a1)
{
  return sub_1000A7554(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000A7D48()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000A7D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A7934(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000A7D98()
{
  uint64_t v1 = type metadata accessor for JSCallable(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000A7DFC()
{
  uint64_t v1 = *(void *)(type metadata accessor for JSCallable(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000A7B8C(v0 + v2, *(_BYTE *)(v0 + v2 + *(void *)(v1 + 64)));
}

uint64_t sub_1000A7E34(char a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for JSRoute(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  __int128 v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - v11;
  if ((a1 & 1) != 0) {
    uint64_t v13 = 0x65756575716E65LL;
  }
  else {
    uint64_t v13 = 1668184435LL;
  }
  if ((a1 & 1) != 0) {
    unint64_t v14 = 0xE700000000000000LL;
  }
  else {
    unint64_t v14 = 0xE400000000000000LL;
  }
  JSRoute.init(service:function:)(0xD000000000000011LL, 0x80000001001722B0LL, v13, v14);
  uint64_t v34 = v12;
  uint64_t v35 = v7;
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v36 = v6;
  v15(v10, v12, v6);
  uint64_t result = JSRequest.init(route:timeoutInterval:version:)(v10, *(void *)&a3, 0LL, 0LL);
  int64_t v17 = 0LL;
  uint64_t v18 = a2 + 64;
  uint64_t v19 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *(void *)(a2 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  int64_t v33 = v22 - 1;
  if (!v21) {
    goto LABEL_12;
  }
LABEL_10:
  unint64_t v23 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v24 = v23 | (v17 << 6);
  while (2)
  {
    uint64_t v25 = *(void *)(a2 + 56);
    uint64_t v26 = (void *)(*(void *)(a2 + 48) + 16 * v24);
    uint64_t v27 = v26[1];
    *(void *)&__int128 v37 = *v26;
    *((void *)&v37 + Hasher._combine(_:)(v1 & 1) = v27;
    sub_10000DA1C(v25 + 32 * v24, (uint64_t)v38);
    swift_bridgeObjectRetain(v27);
    while (1)
    {
      sub_1000A8118((uint64_t)&v37, (uint64_t)&v39);
      uint64_t v31 = v40;
      if (!v40)
      {
        swift_release(a2);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v36);
      }

      uint64_t v32 = v39;
      sub_10000DA58(&v41, &v37);
      JSRequest.addOption(_:withName:)(&v37, v32, v31);
      swift_bridgeObjectRelease();
      uint64_t result = sub_10000E888((uint64_t)&v37);
      if (v21) {
        goto LABEL_10;
      }
LABEL_12:
      int64_t v28 = v17 + 1;
      if (__OFADD__(v17, 1LL))
      {
        __break(1u);
        goto LABEL_35;
      }

      if (v28 < v22)
      {
        unint64_t v29 = *(void *)(v18 + 8 * v28);
        if (v29) {
          goto LABEL_15;
        }
        int64_t v30 = v17 + 2;
        ++v17;
        if (v28 + 1 < v22)
        {
          unint64_t v29 = *(void *)(v18 + 8 * v30);
          if (v29) {
            goto LABEL_18;
          }
          int64_t v17 = v28 + 1;
          if (v28 + 2 < v22)
          {
            unint64_t v29 = *(void *)(v18 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2LL;
              goto LABEL_15;
            }

            int64_t v30 = v28 + 3;
            int64_t v17 = v28 + 2;
            if (v28 + 3 < v22) {
              break;
            }
          }
        }
      }

uint64_t sub_1000A8118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9900);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id sub_1000A8160(uint64_t a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC14amsengagementd18JSScheduleDatabase_app] = *(_BYTE *)(a1 + 1);
  uint64_t v5 = v2;
  sub_1000230D0();
  *(void *)&v5[OBJC_IVAR____TtC14amsengagementd18JSScheduleDatabase_schedules] = v6;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for JSScheduleDatabase();
  id v7 = objc_msgSendSuper2(&v9, "init");
  swift_release(a2);
  sub_10002FF78((void *)a1);
  return v7;
}

void sub_1000A81F0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_1000292E4();
  sub_10000D33C(&qword_1001C9E00);
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_100048C04();
  sub_10002DA64(v4, v2, v0);
  uint64_t v7 = type metadata accessor for ScheduleInfo(0LL);
  if (sub_1000102D4(v0, 1LL, v7) == 1)
  {
    sub_1000102E0(v0, &qword_1001C9E00);
  }

  else
  {
    sub_100110F20();
    uint64_t v9 = v8;
    sub_100025430(v0);
    sub_100054EFC(v9);
    sub_1000A8F80();
  }

  sub_10000DD84();
}

void sub_1000A84C4()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_1000292E4();
  uint64_t v3 = sub_10002E1DC(v1);
  sub_1000A8CA4(v3);
  sub_1000A8F80();
  sub_10000DD84();
}

void sub_1000A873C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_1000292E4();
  sub_10002EB9C(v3, v1);
  sub_10000DD84();
}

uint64_t sub_1000A8974()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_100048C04();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v1);
    uint64_t v4 = (void *)(v1 + 40);
    do
    {
      swift_bridgeObjectRetain(*v4);
      sub_100111D74();
      sub_10015169C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }

    while (v3);
    sub_10000DE2C();
  }

  return sub_10002F1C4(v1);
}

void sub_1000A8C0C()
{
}

id sub_1000A8C44()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSScheduleDatabase();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSScheduleDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd18JSScheduleDatabase);
}

uint64_t sub_1000A8CA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ScheduleInfo(0LL);
  uint64_t v33 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D33C((uint64_t *)&unk_1001CD8E0);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v6 = (void *)result;
  int64_t v7 = 0LL;
  uint64_t v34 = a1;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = a1 + 64;
  uint64_t v8 = v10;
  uint64_t v11 = 1LL << *(_BYTE *)(v9 - 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v8;
  uint64_t v30 = v9;
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v32 = result + 64;
  if ((v12 & v8) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v14 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v7 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v34 + 48) + 16 * i);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    sub_10002F70C(*(void *)(v34 + 56) + *(void *)(v33 + 72) * i, (uint64_t)v4);
    swift_bridgeObjectRetain(v20);
    sub_100110F20();
    sub_100054EFC(v22);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = sub_100025430((uint64_t)v4);
    *(void *)(v32 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v25 = (void *)(v6[6] + 16 * i);
    *uint64_t v25 = v21;
    v25[1] = v20;
    *(void *)(v6[7] + 8 * i) = v24;
    uint64_t v26 = v6[2];
    BOOL v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v6[2] = v28;
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_24;
    }
    if (v16 >= v31) {
      return (uint64_t)v6;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v31) {
        return (uint64_t)v6;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v31) {
          return (uint64_t)v6;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1000A8F04(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 152) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 152);
}

uint64_t sub_1000A8F18()
{
  return sub_1000102E0(v1 - 152, v0);
}

uint64_t sub_1000A8F24@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 128) = a1;
  *(void *)(v3 - 152) = v2;
  *(void *)(v3 - 144) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 152);
}

uint64_t sub_1000A8F34(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return static LogMessage.safe(_:)(v2 - 120);
}

id sub_1000A8F48(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return v1;
}

uint64_t sub_1000A8F54(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for JSScheduleDatabase();
}

uint64_t sub_1000A8F60()
{
  return type metadata accessor for JSError();
}

uint64_t sub_1000A8F6C(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

void sub_1000A8F78()
{
}

uint64_t sub_1000A8F80()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000A8F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A90F0(a1, a2, a3, a4, a5, (uint64_t)sub_1000AABA0);
}

uint64_t sub_1000A8F98(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 16)
      && (unint64_t v2 = sub_100030CCC(0x506B726F7774656ELL, 0xED00007963696C6FLL), (v3 & 1) != 0)
      && (sub_10000DA1C(*(void *)(v1 + 56) + 32 * v2, (uint64_t)v5),
          (swift_dynamicCast(&v4, v5, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0))
    {
      return v4;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000A9044(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  else {
    uint64_t v6 = 0LL;
  }
  swift_retain(v4);
  id v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000A90E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A90F0(a1, a2, a3, a4, a5, (uint64_t)sub_1000AAA5C);
}

uint64_t sub_1000A90F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType(v6);
  sub_100083BE0();
  static JSContext.requiredCurrent.getter();
  _OWORD v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a1;
  v15[6] = a2;
  v15[7] = ObjectType;
  JSContext.propagateErrorsToExceptions(_:)(a6, v15);
  sub_10008E4EC();
  return a6;
}

uint64_t sub_1000A9180( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = v9;
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t result = static RunLoopWorkerThread.current.getter();
  if (!result)
  {
    type metadata accessor for JSError();
    sub_1000AAE28(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL);
    sub_1000AAE50();
    return v11;
  }

  uint64_t v18 = result;
  uint64_t v19 = HIBYTE(a3) & 0xF;
  uint64_t v20 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v21 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v21 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
LABEL_50:
    type metadata accessor for JSError();
    sub_1000AAE28(2LL, 0x2073692044495344LL, 0xEF64696C61766E69LL);
    sub_1000AAE50();
    swift_release();
    return v11;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v23 = (uint64_t)sub_100072428(a2, a3, 10LL);
    LOBYTE(a2) = v44;
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  if ((a3 & 0x2000000000000000LL) == 0)
  {
    if ((a2 & 0x1000000000000000LL) != 0) {
      uint64_t v22 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v22 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
    }
    uint64_t v23 = (uint64_t)sub_1000723D8(v22, v20, 10LL);
    LOBYTE(a2) = v24 & 1;
LABEL_48:
    if ((a2 & 1) == 0)
    {
      id v39 = [objc_allocWithZone(NSNumber) initWithInteger:v23];
      sub_100083BE0();
      uint64_t v40 = (void *)swift_allocObject(a8, 64LL, 7LL);
      void v40[2] = a4;
      void v40[3] = v39;
      v40[4] = a5;
      void v40[5] = a6;
      v40[6] = v18;
      v40[7] = a7;
      swift_bridgeObjectRetain(a4);
      id v41 = v39;
      swift_bridgeObjectRetain(a6);
      swift_retain(v18);
      uint64_t v11 = sub_10008C048(a1, a9, (uint64_t)v40);
      swift_release();

      swift_release();
      return v11;
    }

    goto LABEL_50;
  }

  if (a2 == 43)
  {
    if (!v19) {
      goto LABEL_62;
    }
    if (v19 == 1) {
      goto LABEL_34;
    }
    sub_100072C50();
    if (!v28 & v27) {
      goto LABEL_34;
    }
    uint64_t v23 = v30;
    if (v29 != 2)
    {
      sub_100072C50();
      if (!v28 & v27) {
        goto LABEL_34;
      }
      uint64_t v23 = 10LL * v23 + v32;
      if (v31 != 3)
      {
        while (1)
        {
          sub_100072CB8();
          if (!v28 & v27) {
            goto LABEL_34;
          }
          sub_100072C60();
          if (!v28) {
            goto LABEL_34;
          }
          uint64_t v23 = v34 + v33;
          if (__OFADD__(v34, v33)) {
            goto LABEL_34;
          }
          sub_1000AAE18();
          if (v28) {
            goto LABEL_48;
          }
        }
      }
    }

LABEL_47:
    LOBYTE(a2) = 0;
    goto LABEL_48;
  }

  if (a2 != 45)
  {
    uint64_t v23 = (a2 - 48);
    if (v19 != 1)
    {
      sub_100072C50();
      if (!v28 & v27) {
        goto LABEL_34;
      }
      uint64_t v23 = 10LL * (a2 - 48) + v36;
      if (v35 != 2)
      {
        while (1)
        {
          sub_100072CB8();
          if (!v28 & v27) {
            goto LABEL_34;
          }
          sub_100072C60();
          if (!v28) {
            goto LABEL_34;
          }
          uint64_t v23 = v38 + v37;
          if (__OFADD__(v38, v37)) {
            goto LABEL_34;
          }
          sub_1000AAE18();
          if (v28) {
            goto LABEL_48;
          }
        }
      }
    }

    goto LABEL_47;
  }

  if (v19)
  {
    if (v19 != 1)
    {
      sub_100072C50();
      if (!(!v28 & v27))
      {
        if (v25 == 2)
        {
          LOBYTE(a2) = 0;
          uint64_t v23 = -(uint64_t)v26;
          goto LABEL_48;
        }

        if ((BYTE2(a2) - 48) <= 9u)
        {
          uint64_t v23 = -10LL * v26 - (BYTE2(a2) - 48);
          if (v25 == 3) {
            goto LABEL_47;
          }
          while (1)
          {
            sub_100072CB8();
            if (!v28 & v27) {
              break;
            }
            sub_100072C60();
            if (!v28) {
              break;
            }
            uint64_t v23 = v43 - v42;
            if (__OFSUB__(v43, v42)) {
              break;
            }
            sub_1000AAE18();
            if (v28) {
              goto LABEL_48;
            }
          }
        }
      }
    }

void sub_1000A9548( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, SEL *a13)
{
  uint64_t v44 = a8;
  uint64_t v45 = a5;
  uint64_t v38 = a3;
  uint64_t v36 = a2;
  uint64_t v42 = a12;
  uint64_t v43 = a13;
  uint64_t v40 = a10;
  uint64_t v41 = a11;
  uint64_t v14 = type metadata accessor for JSCallable(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v35 - v19;
  uint64_t v21 = sub_1000A8F98(a4);
  char v23 = v22;
  if (qword_1001C7F20 != -1) {
    swift_once(&qword_1001C7F20, sub_10001DBA4);
  }
  if ((v23 & 1) != 0) {
    uint64_t v24 = 0LL;
  }
  else {
    uint64_t v24 = v21;
  }
  uint64_t v39 = v24;
  id v37 = *(id *)(qword_1001DBAC0 + 16);
  NSString v35 = String._bridgeToObjectiveC()();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v25(v20, v36, v14);
  v25(v18, v38, v14);
  uint64_t v26 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v27 = (v26 + 24) & ~v26;
  uint64_t v28 = (v16 + v26 + v27) & ~v26;
  uint64_t v29 = swift_allocObject(v40, v28 + v16, v26 | 7);
  uint64_t v30 = v44;
  *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
  uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  v31(v29 + v27, v20, v14);
  v31(v29 + v28, v18, v14);
  aBlock[4] = v41;
  void aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A9044;
  void aBlock[3] = v42;
  unsigned __int8 v32 = _Block_copy(aBlock);
  swift_retain(v30);
  swift_release();
  id v33 = v37;
  uint64_t v34 = v35;
  objc_msgSend(v37, *v43, v45, v35, v39, v32);
  _Block_release(v32);
}

void sub_1000A9780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (a1)
  {
    uint64_t v7 = qword_1001C7FB0;
    swift_bridgeObjectRetain(a1);
    if (v7 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v8 = *(void *)(sub_100010570() - 8);
    uint64_t v9 = sub_10001059C( ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
         + 2LL * *(void *)(v8 + 72),
           *(unsigned __int8 *)(v8 + 80));
    *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    sub_1000AADE0();
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease();
    v32[0] = 0x7465722061746164LL;
    v32[1] = 0xEF20646576656972LL;
    v10._uint64_t countAndFlagsBits = Dictionary.description.getter( a1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    id v33 = &type metadata for String;
    static LogMessage.safe(_:)(v32);
    uint64_t v11 = sub_10000E888((uint64_t)v32);
    uint64_t v12 = a5(v11);
    sub_1000BD1B0(v12, v9);
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v14 = sub_10009A3FC(v13);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v14 + 56) = sub_10000D33C(&qword_1001C8E58);
    *(void *)(v14 + 32) = a1;
    sub_1000854E4(v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v16 = (objc_class *)type metadata accessor for JSError();
    if (a3)
    {
      objc_allocWithZone(v16);
      swift_errorRetain(a3);
      id v17 = sub_10008F674(a3);
    }

    else
    {
      id v17 = sub_10008F29C(0LL, 0x206E776F6E6B6E55LL, 0xED0000726F727265LL, 0LL, 0LL);
    }

    uint64_t v18 = v17;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v19 = *(void *)(sub_100010570() - 8);
    uint64_t v20 = sub_10001059C( ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
          + 2LL * *(void *)(v19 + 72),
            *(unsigned __int8 *)(v19 + 80));
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    sub_1000AADE0();
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease();
    id v21 = v18;
    id v22 = objc_msgSend(v21, "description", 0xD000000000000015, 0x8000000100172500);
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);

    swift_bridgeObjectRelease();
    id v33 = &type metadata for String;
    static LogMessage.safe(_:)(v32);
    uint64_t v27 = sub_10000E888((uint64_t)v32);
    uint64_t v28 = static os_log_type_t.error.getter(v27);
    sub_1000BD1B0(v28, v20);
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v30 = sub_10009A3FC(v29);
    *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v30 + 56) = type metadata accessor for JSError();
    *(void *)(v30 + 32) = v21;
    id v31 = v21;
    sub_1000854E4(v30);
    swift_bridgeObjectRelease();
  }

void (*sub_1000A9B64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v15 = v14;
  if (a5) {
    a5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }
  id v16 = a1;
  a6(v10, v12, v13, v15, a5);
  sub_10008E4EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a6;
}

uint64_t sub_1000A9C30()
{
  uint64_t ObjectType = swift_getObjectType(v1);
  sub_100083BE0();
  static JSContext.requiredCurrent.getter();
  uint64_t v8 = v3;
  uint64_t v9 = v2;
  uint64_t v10 = v0;
  uint64_t v11 = v4;
  uint64_t v12 = ObjectType;
  JSContext.propagateErrorsToExceptions(_:)(sub_1000AA9A4, &v7);
  sub_10008E4EC();
  return v0;
}

uint64_t sub_1000A9CA8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t result = static RunLoopWorkerThread.current.getter();
  if (!result)
  {
    type metadata accessor for JSError();
    id v22 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v22);
    return v7;
  }

  uint64_t v15 = result;
  uint64_t v16 = HIBYTE(a3) & 0xF;
  uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v18 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v18 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
LABEL_48:
    type metadata accessor for JSError();
    id v35 = sub_10008F29C(2LL, 0x2073692044495344LL, 0xEF64696C61766E69LL, 0LL, 0LL);
    swift_willThrow(v35);
    swift_release();
    return v7;
  }

  if ((a3 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v20 = (uint64_t)sub_100072428(a2, a3, 10LL);
    LOBYTE(a2) = v39;
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }

  if ((a3 & 0x2000000000000000LL) == 0)
  {
    if ((a2 & 0x1000000000000000LL) != 0) {
      uint64_t v19 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v19 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a2, a3);
    }
    uint64_t v20 = (uint64_t)sub_1000723D8(v19, v17, 10LL);
    LOBYTE(a2) = v21 & 1;
LABEL_46:
    if ((a2 & 1) == 0)
    {
      id v32 = [objc_allocWithZone(NSNumber) initWithInteger:v20];
      sub_100083BE0();
      id v33 = (void *)swift_allocObject(&unk_1001AD7B8, 56LL, 7LL);
      void v33[2] = a4;
      void v33[3] = v32;
      v33[4] = a5;
      v33[5] = v15;
      v33[6] = a6;
      swift_bridgeObjectRetain(a4);
      id v34 = v32;
      swift_bridgeObjectRetain(a5);
      swift_retain(v15);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000AA9FC, (uint64_t)v33);
      swift_release();

      swift_release();
      return v7;
    }

    goto LABEL_48;
  }

  v40[0] = a2;
  v40[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  if (a2 == 43)
  {
    if (!v16) {
      goto LABEL_59;
    }
    uint64_t v20 = (BYTE1(a2) - 48);
    if (v16 != 2)
    {
      uint64_t v20 = 10LL * (BYTE1(a2) - 48) + (BYTE2(a2) - 48);
      uint64_t v23 = v16 - 3;
      if (v23)
      {
        uint64_t v24 = (unsigned __int8 *)v40 + 3;
        while (1)
        {
          unsigned int v25 = *v24 - 48;
          if (v25 > 9) {
            goto LABEL_33;
          }
          uint64_t v26 = 10 * v20;
          uint64_t v20 = v26 + v25;
          LOBYTE(a2) = 0;
          ++v24;
          if (!--v23) {
            goto LABEL_46;
          }
        }
      }
    }

LABEL_45:
    LOBYTE(a2) = 0;
    goto LABEL_46;
  }

  if (a2 != 45)
  {
    uint64_t v20 = (a2 - 48);
    if (v16 != 1)
    {
      uint64_t v20 = 10LL * (a2 - 48) + (BYTE1(a2) - 48);
      uint64_t v27 = v16 - 2;
      if (v27)
      {
        uint64_t v28 = (unsigned __int8 *)v40 + 2;
        while (1)
        {
          unsigned int v29 = *v28 - 48;
          if (v29 > 9) {
            goto LABEL_33;
          }
          uint64_t v30 = 10 * v20;
          uint64_t v20 = v30 + v29;
          LOBYTE(a2) = 0;
          ++v28;
          if (!--v27) {
            goto LABEL_46;
          }
        }
      }
    }

    goto LABEL_45;
  }

  if (v16)
  {
    if (v16 != 1 && (BYTE1(a2) - 48) <= 9u)
    {
      if (v16 == 2)
      {
        LOBYTE(a2) = 0;
        uint64_t v20 = -(uint64_t)(BYTE1(a2) - 48);
        goto LABEL_46;
      }

      if ((BYTE2(a2) - 48) <= 9u)
      {
        uint64_t v20 = -10LL * (BYTE1(a2) - 48) - (BYTE2(a2) - 48);
        uint64_t v31 = v16 - 3;
        if (!v31) {
          goto LABEL_45;
        }
        uint64_t v36 = (unsigned __int8 *)v40 + 3;
        while (1)
        {
          unsigned int v37 = *v36 - 48;
          if (v37 > 9) {
            break;
          }
          uint64_t v38 = 10 * v20;
          uint64_t v20 = v38 - v37;
          LOBYTE(a2) = 0;
          ++v36;
          if (!--v31) {
            goto LABEL_46;
          }
        }
      }
    }

  __break(1u);
}

uint64_t sub_1000AA100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = a7;
  uint64_t v37 = a5;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = sub_1000A8F98(a4);
  char v18 = v17;
  if (qword_1001C7F20 != -1) {
    swift_once(&qword_1001C7F20, sub_10001DBA4);
  }
  if ((v18 & 1) != 0) {
    unint64_t v19 = 0LL;
  }
  else {
    unint64_t v19 = v16;
  }
  unint64_t v33 = v19;
  id v32 = *(id *)(qword_1001DBAC0 + 16);
  swift_bridgeObjectRetain(a6);
  uint64_t v21 = sub_10013E21C(v20);
  id v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22(v15, v34, v9);
  v22(v13, v35, v9);
  uint64_t v23 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v24 = (v23 + 24) & ~v23;
  uint64_t v25 = (v11 + v23 + v24) & ~v23;
  uint64_t v26 = swift_allocObject(&unk_1001AD7E0, v25 + v11, v23 | 7);
  uint64_t v27 = v36;
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
  uint64_t v28 = v26 + v24;
  unsigned int v29 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v29(v28, v15, v9);
  v29(v26 + v25, v13, v9);
  swift_retain(v27);
  uint64_t v30 = v32;
  sub_100116D34(v37, v21, v33, (uint64_t)sub_1000AAA20, v26);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AA2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a3;
  uint64_t v29 = a7;
  uint64_t v26 = a6;
  uint64_t v27 = a2;
  uint64_t v10 = sub_1000841C0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v26 - v15;
  char v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17((char *)&v26 - v15, a4, v10);
  v17(v14, a5, v10);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = (v18 + v20 + 8) & ~v18;
  uint64_t v22 = swift_allocObject(v26, v21 + v12, v18 | 7);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v23(v22 + v19, v16, v10);
  uint64_t v24 = v27;
  *(void *)(v22 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v27;
  v23(v22 + v21, v14, v10);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(v24);
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(v29, v22);
  return swift_release();
}

void sub_1000AA420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = qword_1001C7FB0;
    swift_bridgeObjectRetain(a1);
    if (v4 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 2LL * *(void *)(v6 + 72),
           *(unsigned __int8 *)(v6 + 80) | 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    LogMessage.init(stringLiteral:)(0xD000000000000011LL);
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease();
    v31[0] = 0xD000000000000018LL;
    v31[1] = 0x80000001001724B0LL;
    v8._uint64_t countAndFlagsBits = Dictionary.description.getter( a1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    id v32 = &type metadata for String;
    static LogMessage.safe(_:)(v31);
    uint64_t v9 = sub_10000E888((uint64_t)v31);
    uint64_t v10 = static os_log_type_t.debug.getter(v9);
    sub_1000BD1B0(v10, v7);
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v12 = swift_allocObject(v11, 64LL, 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v12 + 56) = sub_10000D33C(&qword_1001C8E58);
    *(void *)(v12 + 32) = a1;
    sub_1000854E4(v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v14 = (objc_class *)type metadata accessor for JSError();
    if (a3)
    {
      objc_allocWithZone(v14);
      swift_errorRetain(a3);
      id v15 = sub_10008F674(a3);
    }

    else
    {
      id v15 = sub_10008F29C(0LL, 0x206E776F6E6B6E55LL, 0xED0000726F727265LL, 0LL, 0LL);
    }

    uint64_t v16 = v15;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
          + 2LL * *(void *)(v18 + 72),
            *(unsigned __int8 *)(v18 + 80) | 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    LogMessage.init(stringLiteral:)(0xD000000000000011LL);
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease();
    id v20 = v16;
    id v21 = objc_msgSend(v20, "description", 0xD00000000000001ELL, 0x8000000100172490);
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;

    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);

    swift_bridgeObjectRelease();
    id v32 = &type metadata for String;
    static LogMessage.safe(_:)(v31);
    uint64_t v26 = sub_10000E888((uint64_t)v31);
    uint64_t v27 = static os_log_type_t.error.getter(v26);
    sub_1000BD1B0(v27, v19);
    swift_bridgeObjectRelease();
    uint64_t v28 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v29 = swift_allocObject(v28, 64LL, 7LL);
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v29 + 56) = type metadata accessor for JSError();
    *(void *)(v29 + 32) = v20;
    id v30 = v20;
    sub_1000854E4(v29);
    swift_bridgeObjectRelease();
  }

id sub_1000AA904()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSServerDataCache();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000AA954()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSServerDataCache();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSServerDataCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd17JSServerDataCache);
}

uint64_t sub_1000AA9A4(void *a1)
{
  return sub_1000A9CA8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_1000AA9C4()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000AA9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AA100(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_1000AAA20()
{
  return sub_1000AAAD0();
}

void sub_1000AAA38()
{
  uint64_t v1 = sub_1000AADAC();
  sub_1000AA420(v1, v0 + v3, *(void *)(v0 + v2));
}

uint64_t sub_1000AAA5C(void *a1)
{
  return sub_1000AABC4(a1, (uint64_t)&unk_1001AD830, (uint64_t)sub_1000AAA84);
}

void sub_1000AAA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000AAABC()
{
  return sub_1000AAAD0();
}

uint64_t sub_1000AAAD0()
{
  uint64_t v5 = *(void *)(sub_1000841C0() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  return sub_1000AA2CC( v4,  v3,  *(void *)(v1 + 16),  v1 + ((v6 + 24) & ~v6),  v1 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6),  v2,  v0);
}

uint64_t sub_1000AAB40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AAB50(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000AAB5C()
{
}

void sub_1000AAB68(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = sub_1000AADAC();
  sub_1000A9780(v3, v1 + v4, *(void *)(v1 + v5), v1 + v6, a1);
}

uint64_t sub_1000AABA0(void *a1)
{
  return sub_1000AABC4(a1, (uint64_t)&unk_1001AD8D0, (uint64_t)sub_1000AAC34);
}

uint64_t sub_1000AABC4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A9180( a1,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  a2,  a3);
}

uint64_t sub_1000AABFC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_1000AAC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000AAC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
}

uint64_t sub_1000AACB0()
{
  uint64_t v5 = (v4 + v3 + v2) & ~v3;
  uint64_t v6 = v5 + v4;
  swift_release();
  sub_10009A3C4(v0 + v2);
  sub_10009A3C4(v0 + v5);
  return sub_100092CCC(v0, v6, v1);
}

uint64_t sub_1000AAD10()
{
  return sub_1000AAAD0();
}

uint64_t sub_1000AAD28()
{
  unint64_t v4 = (v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = (v5 + v4 + 8) & ~v5;
  uint64_t v7 = v6 + v3;
  sub_1000AAE48();
  sub_10009A3C4(v0 + v2);
  swift_errorRelease(*(void *)(v0 + v4));
  sub_10009A3C4(v0 + v6);
  return sub_100092CCC(v0, v7, v1);
}

void sub_1000AAD98()
{
}

uint64_t sub_1000AADAC()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1000AADE0()
{
  return LogMessage.init(stringLiteral:)(0xD000000000000011LL);
}

  ;
}

  ;
}

id sub_1000AAE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008F29C(a1, a2, a3, 0LL, 0LL);
}

  ;
}

uint64_t sub_1000AAE48()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_1000AAE50()
{
  return swift_willThrow();
}

char *sub_1000AAE5C(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    Swift::String v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    if (sub_1000102D4((uint64_t)&a2[v9], 1LL, v7))
    {
      uint64_t v12 = sub_10000D33C(&qword_1001CB180);
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      v8(v10, v11, v7);
      sub_10000D5C0((uint64_t)v10, 0LL, 1LL, v7);
    }

    v8(&a1[a3[6]], &a2[a3[6]], v7);
    v8(&a1[a3[7]], &a2[a3[7]], v7);
    uint64_t v14 = a3[8];
    id v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    if (sub_1000102D4((uint64_t)&a2[v14], 1LL, v7))
    {
      uint64_t v17 = sub_10000D33C(&qword_1001CB180);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      v8(v15, v16, v7);
      sub_10000D5C0((uint64_t)v15, 0LL, 1LL, v7);
    }

    v8(&a1[a3[9]], &a2[a3[9]], v7);
    v8(&a1[a3[10]], &a2[a3[10]], v7);
    uint64_t v18 = a3[12];
    a1[a3[11]] = a2[a3[11]];
    uint64_t v19 = *(void **)&a2[v18];
    *(void *)&a1[v18] = v19;
    id v20 = v19;
  }

  return a1;
}

void sub_1000AB024(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  uint64_t v6 = a1 + a2[5];
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  uint64_t v7 = a1 + a2[8];
  v5(a1 + a2[9], v4);
  v5(a1 + a2[10], v4);
}

char *sub_1000AB10C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_1000102D4((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_10000D33C(&qword_1001CB180);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    v7(v9, v10, v6);
    sub_10000D5C0((uint64_t)v9, 0LL, 1LL, v6);
  }

  v7(&a1[a3[6]], &a2[a3[6]], v6);
  v7(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v12 = a3[8];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (sub_1000102D4((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_10000D33C(&qword_1001CB180);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    v7(v13, v14, v6);
    sub_10000D5C0((uint64_t)v13, 0LL, 1LL, v6);
  }

  v7(&a1[a3[9]], &a2[a3[9]], v6);
  v7(&a1[a3[10]], &a2[a3[10]], v6);
  uint64_t v16 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v17 = *(void **)&a2[v16];
  *(void *)&a1[v16] = v17;
  id v18 = v17;
  return a1;
}

char *sub_1000AB2A8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int v12 = sub_1000102D4((uint64_t)&a1[v9], 1LL, v6);
  int v13 = sub_1000102D4((uint64_t)v11, 1LL, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
      sub_10000D5C0((uint64_t)v10, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = sub_10000D33C(&qword_1001CB180);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  v8(v10, v11, v6);
LABEL_7:
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v8(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = sub_1000102D4((uint64_t)&a1[v15], 1LL, v6);
  int v19 = sub_1000102D4((uint64_t)v17, 1LL, v6);
  if (!v18)
  {
    if (!v19)
    {
      v8(v16, v17, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000D33C(&qword_1001CB180);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v16, v17, v6);
  sub_10000D5C0((uint64_t)v16, 0LL, 1LL, v6);
LABEL_13:
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  a1[a3[11]] = a2[a3[11]];
  uint64_t v21 = a3[12];
  uint64_t v22 = *(void **)&a2[v21];
  uint64_t v23 = *(void **)&a1[v21];
  *(void *)&a1[v21] = v22;
  id v24 = v22;

  return a1;
}

char *sub_1000AB4E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (sub_1000102D4((uint64_t)&a2[v8], 1LL, v6))
  {
    uint64_t v11 = sub_10000D33C(&qword_1001CB180);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    v7(v9, v10, v6);
    sub_10000D5C0((uint64_t)v9, 0LL, 1LL, v6);
  }

  v7(&a1[a3[6]], &a2[a3[6]], v6);
  v7(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v12 = a3[8];
  int v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  if (sub_1000102D4((uint64_t)&a2[v12], 1LL, v6))
  {
    uint64_t v15 = sub_10000D33C(&qword_1001CB180);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    v7(v13, v14, v6);
    sub_10000D5C0((uint64_t)v13, 0LL, 1LL, v6);
  }

  v7(&a1[a3[9]], &a2[a3[9]], v6);
  v7(&a1[a3[10]], &a2[a3[10]], v6);
  uint64_t v16 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  return a1;
}

char *sub_1000AB678(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  int v12 = sub_1000102D4((uint64_t)&a1[v9], 1LL, v6);
  int v13 = sub_1000102D4((uint64_t)v11, 1LL, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
      sub_10000D5C0((uint64_t)v10, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = sub_10000D33C(&qword_1001CB180);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  v8(v10, v11, v6);
LABEL_7:
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v8(&a1[a3[7]], &a2[a3[7]], v6);
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = sub_1000102D4((uint64_t)&a1[v15], 1LL, v6);
  int v19 = sub_1000102D4((uint64_t)v17, 1LL, v6);
  if (!v18)
  {
    if (!v19)
    {
      v8(v16, v17, v6);
      goto LABEL_13;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_10000D33C(&qword_1001CB180);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
  sub_10000D5C0((uint64_t)v16, 0LL, 1LL, v6);
LABEL_13:
  v8(&a1[a3[9]], &a2[a3[9]], v6);
  v8(&a1[a3[10]], &a2[a3[10]], v6);
  uint64_t v21 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v22 = *(void **)&a1[v21];
  *(void *)&a1[v21] = *(void *)&a2[v21];

  return a1;
}

uint64_t sub_1000AB8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000AB8B4);
}

uint64_t sub_1000AB8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000ABCD8();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v6;
    uint64_t v8 = v4;
    return sub_1000102D4(v8, v3, v7);
  }

  uint64_t v9 = sub_10000D33C(&qword_1001CB180);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)v3)
  {
    uint64_t v7 = v9;
    uint64_t v8 = v4 + *(int *)(a3 + 20);
    return sub_1000102D4(v8, v3, v7);
  }

  unint64_t v11 = *(void *)(v4 + *(int *)(a3 + 48));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v1Hasher._combine(_:)(v1 & 1) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1000AB94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000AB958);
}

uint64_t sub_1000AB958(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000ABCD8();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v5;
    return sub_10000D5C0(v10, v4, v4, v9);
  }

  uint64_t result = sub_10000D33C(&qword_1001CB180);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return sub_10000D5C0(v10, v4, v4, v9);
  }

  *(void *)(v5 + *(int *)(a4 + sub_1000976BC(v1, v2, v3, v4, v5, v6, v7, *(void *)(v0 + 48)) = (v4 - 1);
  return result;
}

uint64_t type metadata accessor for JSStackContext(uint64_t a1)
{
  uint64_t result = qword_1001CBC18;
  if (!qword_1001CBC18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for JSStackContext);
  }
  return result;
}

void sub_1000ABA24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(v2 - 8) + 64LL;
    uint64_t v7 = v4;
    sub_100028254(319LL);
    if (v6 <= 0x3F)
    {
      uint64_t v8 = *(void *)(v5 - 8) + 64LL;
      uint64_t v9 = v4;
      uint64_t v10 = v4;
      uint64_t v11 = v8;
      uint64_t v12 = v4;
      uint64_t v13 = v4;
      uint64_t v14 = &unk_100166D38;
      uint64_t v15 = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256LL, 9LL, &v7, a1 + 16);
    }
  }

uint64_t sub_1000ABAC8(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A74E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000ABB18(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x566B63617074656ALL;
  }
  else {
    return 0x6B63617074656ALL;
  }
}

void sub_1000ABB54(char *a1, unsigned __int8 *a2)
{
}

void sub_1000ABB60()
{
}

uint64_t sub_1000ABB68(uint64_t a1)
{
  return sub_100006D80(a1, *v1);
}

void sub_1000ABB70(uint64_t a1)
{
}

uint64_t sub_1000ABB78@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000ABAC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000ABBA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000ABB18(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t storeEnumTagSinglePayload for SourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000ABC18 + 4 * byte_100166D1D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000ABC4C + 4 * asc_100166D18[v4]))();
}

uint64_t sub_1000ABC4C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000ABC54(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ABC5CLL);
  }
  return result;
}

uint64_t sub_1000ABC68(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ABC70LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000ABC74(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000ABC7C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SourceType()
{
  return &type metadata for SourceType;
}

unint64_t sub_1000ABC9C()
{
  unint64_t result = qword_1001CBC70;
  if (!qword_1001CBC70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166DD4, &type metadata for SourceType);
    atomic_store(result, (unint64_t *)&qword_1001CBC70);
  }

  return result;
}

uint64_t sub_1000ABCD8()
{
  return type metadata accessor for URL(0LL);
}

void sub_1000ABCE8(char a1, char a2)
{
  uint64_t v8 = v7 - v6;
  uint64_t v9 = sub_100029328();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10004895C();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  sub_1000ACBB8();
  __chkstk_darwin(v15);
  if ((a2 & 1) == 0)
  {
    sub_10014F588();
    sub_1000ACB70(v8);
    if (v16)
    {
      sub_10014F220();
      sub_1000102E0(v8, &qword_1001CB180);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v2, v8, v9);
    }

    sub_1000ACBCC();
    __asm { BR              X10 }
  }

  sub_10001C908(a1);
  uint64_t v17 = sub_1000ACC34();
  URL.appendingPathComponent(_:)(v17, v18);
  sub_1000ACC04(v13, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  sub_10000DD84();
}

uint64_t sub_1000ABEB8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x656372756F73LL;
  }
  else {
    return 0x74757074756FLL;
  }
}

void sub_1000ABEE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DE7C();
  uint64_t v5 = sub_100029328();
  uint64_t v55 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for URL.DirectoryHint(0LL);
  __chkstk_darwin(v9);
  sub_10000DE7C();
  uint64_t v12 = v11 - v10;
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v13);
  sub_10004895C();
  uint64_t v16 = v14 - v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v54 - v19;
  __chkstk_darwin(v18);
  sub_1000ACBB8();
  __chkstk_darwin(v21);
  uint64_t v57 = (uint64_t)&v54 - v22;
  sub_10014FFA4();
  int v23 = sub_1000102D4(v2, 1LL, v5);
  uint64_t v54 = a1;
  if (v23 != 1) {
    __asm { BR              X12 }
  }

  sub_1000102E0(v2, &qword_1001CB180);
  uint64_t v24 = v57;
  sub_1000ACBE0(v57, 1LL);
  sub_10002877C(v24, (uint64_t)v20);
  sub_1000ACB70((uint64_t)v20);
  if (v25)
  {
    sub_1000102E0((uint64_t)v20, &qword_1001CB180);
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = type metadata accessor for LogMessage(0LL);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v27 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v61 = (void *)sub_10000D33C(&qword_1001CBC78);
    v60[0] = &type metadata for JSStackLocations;
    id v29 = (id)AMSLogKey(v61);
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      sub_10000DEBC();
      uint64_t v34 = v61;
      uint64_t v35 = sub_10000D37C(v60, (uint64_t)v61);
      uint64_t DynamicType = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v58[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
      sub_1000ACBAC();
      v37._uint64_t countAndFlagsBits = 5972026LL;
      v37._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t MetatypeMetadata = &type metadata for String;
      v58[0] = v31;
      v58[1] = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
      sub_1000ACBAC();
      sub_10000DC4C(93LL);
      sub_1000ACC0C();
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_10000DEBC();
      unint64_t v47 = v61;
      uint64_t v48 = sub_10000D37C(v60, (uint64_t)v61);
      uint64_t v49 = swift_getDynamicType(v48, v47, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v49);
      v58[0] = v49;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
      sub_1000102E0((uint64_t)v58, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000ACC0C();
    }

    uint64_t v50 = v57;
    sub_10000D3A0(v60);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
    v51._object = (void *)0x8000000100172600LL;
    v51._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v51);
    uint64_t v61 = &unk_1001A8968;
    LOBYTE(v60[0]) = v54;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v60);
    sub_1000102E0((uint64_t)v60, &qword_1001CAAD0);
    sub_10000DC4C(41LL);
    uint64_t v52 = sub_1000ACC0C();
    if (qword_1001C7F80 != -1) {
      uint64_t v52 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v53 = static os_log_type_t.debug.getter(v52);
    sub_1000BD1B0(v53, v28);
    swift_bridgeObjectRelease();
    uint64_t v42 = v50;
    goto LABEL_15;
  }

  uint64_t v38 = v55;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v8, v20, v5);
  id v39 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_10014F918();

  uint64_t v41 = sub_1000ACB70(v16);
  if (v40)
  {
    sub_1000ACC04(v8, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    sub_1000102E0(v57, &qword_1001CB180);
    uint64_t v42 = v16;
LABEL_15:
    sub_1000102E0(v42, &qword_1001CB180);
    uint64_t v46 = 1LL;
    uint64_t v44 = v56;
    goto LABEL_16;
  }

  v60[0] = 0x426B63617074656ALL;
  v60[1] = 0xEF65646F43657479LL;
  sub_1000ACB60(v41, enum case for URL.DirectoryHint.inferFromPath(_:));
  unint64_t v43 = sub_10004828C();
  uint64_t v44 = v56;
  URL.appending<A>(path:directoryHint:)(v60, v12, &type metadata for String, v43);
  sub_1000ACB9C();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v45(v8, v5);
  sub_1000102E0(v57, &qword_1001CB180);
  v45(v16, v5);
  uint64_t v46 = 0LL;
LABEL_16:
  sub_1000ACBE0(v44, v46);
  sub_10000DD84();
}

void sub_1000AC510(char a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100029328();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10004895C();
  uint64_t v10 = (char *)(v8 - v9);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v18 - v12;
  sub_10001C908(a1);
  uint64_t v14 = sub_1000ACC34();
  URL.appendingPathComponent(_:)(v14, v15);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v10, v6);
  uint64_t v18 = 0x2E74757074756FLL;
  unint64_t v19 = 0xE700000000000000LL;
  v17._uint64_t countAndFlagsBits = a2;
  v17._object = a3;
  String.append(_:)(v17);
  URL.appendingPathComponent(_:)(v18, v19);
  swift_bridgeObjectRelease();
  v16(v13, v6);
  sub_10000DE10();
}

void sub_1000AC60C(char a1)
{
  uint64_t v2 = sub_100029328();
  __chkstk_darwin(v2);
  sub_10000DE7C();
  id v3 = [(id)objc_opt_self(NSFileManager) defaultManager];
  id v4 = [v3 temporaryDirectory];

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v4);
  sub_1000ACBCC();
  __asm { BR              X10 }

void sub_1000AC6D0()
{
  uint64_t v3 = sub_10001D42C();
  URL.appendingPathComponent(_:)(v3, 0xE800000000000000LL);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
  sub_10000DE10();
}

void sub_1000AC740()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v2 = sub_1000ACB8C(v1);
  URL.path.getter();
  String._bridgeToObjectiveC()();
  uint64_t v3 = sub_1000ACC48();
  unsigned int v4 = sub_1000ACC14(v3, "fileExistsAtPath:");

  if (v4)
  {
    id v5 = sub_1000ACBEC();
    URL.path.getter();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v10 = 0LL;
    unsigned int v7 = [v5 removeItemAtPath:v6 error:&v10];

    id v8 = v10;
    if (!v7)
    {
      sub_1000ACBF8();

      swift_willThrow(v9);
    }
  }

  sub_1000ACB48();
}

void sub_1000AC85C()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v2 = sub_1000ACB8C(v1);
  URL.path.getter();
  String._bridgeToObjectiveC()();
  uint64_t v3 = sub_1000ACC48();
  unsigned __int8 v4 = sub_1000ACC14(v3, "fileExistsAtPath:");

  if ((v4 & 1) == 0)
  {
    id v5 = sub_1000ACBEC();
    URL._bridgeToObjectiveC()(v6);
    id v8 = v7;
    id v12 = 0LL;
    unsigned int v9 = [v5 createDirectoryAtURL:v7 withIntermediateDirectories:1 attributes:0 error:&v12];

    id v10 = v12;
    if (!v9)
    {
      sub_1000ACBF8();

      swift_willThrow(v11);
    }
  }

  sub_1000ACB48();
}

uint64_t sub_1000AC970(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A7530, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000AC9C0(char *a1, char *a2)
{
  return sub_1000215C8(*a1, *a2);
}

void sub_1000AC9CC()
{
}

uint64_t sub_1000AC9D4(uint64_t a1)
{
  return sub_100006B58(a1, *v1);
}

void sub_1000AC9DC(uint64_t a1)
{
}

uint64_t sub_1000AC9E4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000AC970(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000ACA10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000ABEB8(*v1);
  *a1 = result;
  a1[1] = 0xE600000000000000LL;
  return result;
}

uint64_t storeEnumTagSinglePayload for JSStackLocations(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000ACA88 + 4 * byte_100166E09[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000ACABC + 4 * byte_100166E04[v4]))();
}

uint64_t sub_1000ACABC(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000ACAC4(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000ACACCLL);
  }
  return result;
}

uint64_t sub_1000ACAD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000ACAE0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000ACAE4(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000ACAEC(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSStackLocations()
{
  return &type metadata for JSStackLocations;
}

unint64_t sub_1000ACB0C()
{
  unint64_t result = qword_1001CBC80;
  if (!qword_1001CBC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166E9C, &type metadata for JSStackLocations);
    atomic_store(result, (unint64_t *)&qword_1001CBC80);
  }

  return result;
}

  ;
}

uint64_t sub_1000ACB60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104))(v4, a2, v3);
}

uint64_t sub_1000ACB70(uint64_t a1)
{
  return sub_1000102D4(a1, 1LL, v1);
}

id sub_1000ACB8C(void *a1)
{
  return [a1 defaultManager];
}

uint64_t sub_1000ACB9C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000ACBAC()
{
  return sub_1000102E0(v1 - 144, v0);
}

  ;
}

uint64_t sub_1000ACBCC()
{
  return 0x636974796C616E61LL;
}

uint64_t sub_1000ACBE0(uint64_t a1, uint64_t a2)
{
  return sub_10000D5C0(a1, a2, 1LL, v2);
}

id sub_1000ACBEC()
{
  return [v0 *(SEL *)(v1 + 1040)];
}

uint64_t sub_1000ACBF8()
{
  return _convertNSErrorToError(_:)(v0);
}

uint64_t sub_1000ACC04@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000ACC0C()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

id sub_1000ACC14(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000ACC20()
{
  return 0x6E656D6D6F636572LL;
}

uint64_t sub_1000ACC34()
{
  return 0x656372756F73LL;
}

uint64_t sub_1000ACC48()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000ACC54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  unsigned int v7 = sub_1000AE198(a1, a3);
  id v8 = (void *)sub_10000DDDC((uint64_t)&unk_1001ADB90, 112LL);
  void v8[2] = v3;
  sub_1000AEE00(v8 + 3);
  v8[13] = a2;
  uint64_t v9 = sub_1000AEE3C();
  uint64_t v17 = v9;
  uint64_t v18 = &protocol witness table for SyncTaskScheduler;
  sub_10000D63C(v16);
  sub_1000AEE44();
  uint64_t v10 = swift_retain(a2);
  SyncTaskScheduler.init()(v10);
  uint64_t v11 = sub_10000D33C(&qword_1001CBD60);
  sub_1000AEBD4();
  Promise.flatMap<A>(on:_:)(v16, sub_1000AEBC4, v8, v11);
  swift_release(v7);
  swift_release(v8);
  sub_10000D3A0(v16);
  id v12 = (void *)sub_10000DDDC((uint64_t)&unk_1001ADBB8, 120LL);
  v12[2] = v4;
  v12[3] = a3;
  v12[4] = a2;
  sub_1000AEE00(v12 + 5);
  uint64_t v13 = sub_10000DDDC((uint64_t)&unk_1001ADBE0, 32LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000AEC5C;
  *(void *)(v13 + 24) = v12;
  uint64_t v17 = v9;
  uint64_t v18 = &protocol witness table for SyncTaskScheduler;
  sub_10000D63C(v16);
  sub_1000AEE44();
  swift_retain(a2);
  SyncTaskScheduler.init()(a3);
  uint64_t v14 = type metadata accessor for JSStack(0LL);
  Promise.map<A>(on:_:)(v16, sub_1000AECAC, v13, v14);
  sub_1000AEE1C();
  swift_release(v13);
  sub_10000D3A0(v16);
  return a3;
}

uint64_t sub_1000ACDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000AD1D4(a3);
  uint64_t v11 = type metadata accessor for JSStackContext(0LL);
  else {
    id v12 = &type metadata for RemoteJetpackLoader;
  }
  uint64_t v13 = &off_1001B0B80;
  uint64_t v52 = v12;
  uint64_t v53 = v13;
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v14 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v15 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = swift_allocObject( v14,  ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)) + 2 * v16,  *(unsigned __int8 *)(v15 + 80) | 7LL);
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v50 = sub_10000D33C(&qword_1001CBD40);
  v49[0] = a2;
  id v18 = (id)AMSLogKey(v50);
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v46 = v16;
    uint64_t v21 = a4;
    uint64_t v22 = v20;
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v50;
    uint64_t v27 = sub_10000D37C(v49, v50);
    uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v47[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
    sub_10000E888((uint64_t)v47);
    v29._uint64_t countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t MetatypeMetadata = &type metadata for String;
    v47[0] = v22;
    v47[1] = v24;
    a4 = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
    sub_10000E888((uint64_t)v47);
    v30._uint64_t countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
    id v12 = v52;
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v32 = v50;
    uint64_t v33 = sub_10000D37C(v49, v50);
    uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
    v47[0] = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
    sub_10000E888((uint64_t)v47);
    v35._uint64_t countAndFlagsBits = 58LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(v49);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
  v36._object = (void *)0x80000001001726E0LL;
  v36._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  Swift::String v37 = sub_10000D37C(v51, (uint64_t)v12);
  uint64_t v50 = (uint64_t)v12;
  uint64_t v38 = sub_10000D63C(v49);
  (*((void (**)(void *, void *, ValueMetadata *))v12[-1].Description + 2))(v38, v37, v12);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v49);
  sub_10000E888((uint64_t)v49);
  v39._uint64_t countAndFlagsBits = 41LL;
  v39._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  uint64_t v40 = LogMessage.init(stringInterpolation:)(v10);
  uint64_t v41 = static os_log_type_t.debug.getter(v40);
  sub_1000BD1B0(v41, v17);
  swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t)v52;
  unint64_t v43 = v53;
  sub_10000D37C(v51, (uint64_t)v52);
  uint64_t v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **))v43[1])(a3, a1, a4, v42, v43);
  sub_10000D3A0(v51);
  return v44;
}

void sub_1000AD1D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 64))
  {
    unint64_t v3 = 0xE700000000000000LL;
    uint64_t v4 = 0x65756575716E65LL;
LABEL_5:
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, 1668184435LL, 0xE400000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (*(_BYTE *)(a1 + 64) == 1)
  {
    unint64_t v3 = 0xEF636E7953746867LL;
    uint64_t v4 = 0x696577746867696CLL;
    goto LABEL_5;
  }

  swift_bridgeObjectRelease();
LABEL_8:
  sub_1000AEE34();
  sub_1000AC740();
LABEL_9:
  sub_1000AC85C();
  sub_1000AEE34();
  sub_1000AC85C();
  sub_1000AC85C();
}

uint64_t sub_1000AD694(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v122 = a3;
  uint64_t v6 = v5;
  uint64_t v118 = a1;
  uint64_t v119 = a5;
  id v117 = a2;
  uint64_t v8 = type metadata accessor for Bag(0LL);
  __chkstk_darwin(v8);
  uint64_t v120 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for JSStack.StandardGlobalConfiguration(0LL);
  uint64_t v10 = *(void *)(v125 - 8);
  uint64_t v11 = __chkstk_darwin(v125);
  uint64_t v121 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v131 = (char *)&v104 - v13;
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v116 = qword_1001DBB10;
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (v20 + 32) & ~v20;
  uint64_t v110 = v17;
  uint64_t v108 = v21 + 2 * v19;
  uint64_t v107 = v20 | 7;
  uint64_t v22 = swift_allocObject(v17, v108, v20 | 7);
  __int128 v106 = xmmword_100164230;
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v109 = v21;
  uint64_t v105 = sub_10000D33C(&qword_1001CBD40);
  uint64_t v130 = v105;
  uint64_t v111 = v6;
  v129[0] = v6;
  id v23 = (id)AMSLogKey(v105);
  uint64_t v124 = v10;
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = a4;
    uint64_t v28 = v27;

    swift_bridgeObjectRetain(v28);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v29._uint64_t countAndFlagsBits = 0LL;
    v29._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v30 = v130;
    Swift::String v31 = sub_10000D37C(v129, v130);
    uint64_t DynamicType = swift_getDynamicType(v31, v30, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v126 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000E888((uint64_t)&v126);
    v33._uint64_t countAndFlagsBits = 5972026LL;
    v33._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v126 = v25;
    uint64_t v127 = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000E888((uint64_t)&v126);
    v34._uint64_t countAndFlagsBits = 93LL;
    v34._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    LogMessage.init(stringInterpolation:)(v16);
    a4 = v26;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v35._uint64_t countAndFlagsBits = 0LL;
    v35._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    uint64_t v36 = v130;
    Swift::String v37 = sub_10000D37C(v129, v130);
    uint64_t v38 = swift_getDynamicType(v37, v36, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v38);
    uint64_t v126 = v38;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
    sub_10000E888((uint64_t)&v126);
    v39._uint64_t countAndFlagsBits = 58LL;
    v39._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    LogMessage.init(stringInterpolation:)(v16);
  }

  uint64_t v114 = a4;
  sub_10000D3A0(v129);
  uint64_t v112 = v19;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(37LL, 1LL);
  v40._uint64_t countAndFlagsBits = 0xD000000000000025LL;
  v40._object = (void *)0x8000000100172690LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t v41 = v119[7];
  uint64_t v42 = v119;
  type metadata accessor for QualityOfService(0LL);
  uint64_t v130 = v43;
  uint64_t v115 = v41;
  v129[0] = v41;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v129);
  sub_10000E888((uint64_t)v129);
  v44._uint64_t countAndFlagsBits = 0LL;
  v44._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v44);
  uint64_t v104 = v16;
  uint64_t v45 = LogMessage.init(stringInterpolation:)(v16);
  uint64_t v46 = static os_log_type_t.debug.getter(v45);
  sub_1000BD1B0(v46, v22);
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_10000DAA0(0LL, &qword_1001C8E40, &OBJC_CLASS___ACAccountStore_ptr);
  uint64_t v48 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v129, v47, a4, v47, v48);
  uint64_t v49 = (void *)v129[0];
  uint64_t v50 = sub_10000DAA0(0LL, &qword_1001CB430, &OBJC_CLASS___AMSProcessInfo_ptr);
  Swift::String v51 = inject<A, B>(_:from:)(v129, v50, a4, v50, v48);
  id v113 = (id)v129[0];
  static JSStack.StandardGlobalConfiguration.default.getter(v51);
  uint64_t v52 = sub_10000D33C(&qword_1001CBD70);
  uint64_t v53 = type metadata accessor for JSStack.Prerequisite(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(void *)(v54 + 72);
  uint64_t v56 = *(unsigned __int8 *)(v54 + 80);
  uint64_t v57 = (v56 + 32) & ~v56;
  uint64_t v58 = swift_allocObject(v52, v57 + 3 * v55, v56 | 7);
  *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v116 = v58;
  uint64_t v59 = v58 + v57;
  sub_10004C420((uint64_t)v117, v59);
  uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 104);
  v60(v59, enum case for JSStack.Prerequisite.source(_:), v53);
  uint64_t v61 = (void *)(v59 + v55);
  id v62 = objc_allocWithZone((Class)type metadata accessor for JSAMS(0LL));
  uint64_t v63 = v42;
  sub_100066268(v42);
  __int128 v64 = v49;
  id v65 = v113;
  uint64_t v66 = v118;
  swift_bridgeObjectRetain(v118);
  uint64_t v119 = v64;
  id v117 = v65;
  id v67 = sub_10007BC28(v63, v64, v65, v66);
  *uint64_t v61 = 5459265LL;
  v61[1] = 0xE300000000000000LL;
  v61[2] = v67;
  uint64_t v68 = enum case for JSStack.Prerequisite.globalObject(_:);
  v60(v59 + v55, enum case for JSStack.Prerequisite.globalObject(_:), v53);
  __int128 v69 = (void *)(v59 + 2 * v55);
  type metadata accessor for JSBag(0LL);
  if (qword_1001C7F10 != -1) {
    swift_once(&qword_1001C7F10, sub_10001CF94);
  }
  uint64_t v70 = swift_unknownObjectRetain(qword_1001C90F0);
  uint64_t v71 = (uint64_t)v120;
  Bag.init(from:)(v70);
  id v72 = sub_100084228(v71);
  void *v69 = 6775138LL;
  v69[1] = 0xE300000000000000LL;
  v69[2] = v72;
  v60((uint64_t)v69, v68, v53);
  type metadata accessor for JSStack(0LL);
  uint64_t v74 = v124;
  uint64_t v73 = v125;
  uint64_t v75 = v121;
  __int128 v76 = v131;
  (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v121, v131, v125);
  uint64_t v77 = v114;
  swift_retain(v114);
  id v78 = v122;
  uint64_t v79 = v123;
  uint64_t v80 = JSStack.__allocating_init(asPartOf:virtualMachine:configuration:customPrerequisites:qualityOfService:)( v77,  v78,  v75,  v116,  v115);
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v73);
  }

  else
  {
    JSStack.withUnsafeContext(_:)(sub_1000AE9FC, 0LL);
    if (sub_10000635C())
    {
      type metadata accessor for Defaults();
      if ((sub_100049C68() & 1) != 0)
      {
        uint64_t v81 = (void *)qword_1001DBB10;
        uint64_t v82 = swift_allocObject(v110, v108, v107);
        *(_OWORD *)(v82 + swift_unknownObjectWeakDestroy(v0 + 16) = v106;
        uint64_t v123 = v82 + v109;
        uint64_t v130 = v105;
        v129[0] = v111;
        id v83 = (id)AMSLogKey(v82);
        if (v83)
        {
          uint64_t v84 = v83;
          uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
          uint64_t v87 = v86;

          swift_bridgeObjectRetain(v87);
          id v122 = v81;
          uint64_t v88 = v104;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
          v89._uint64_t countAndFlagsBits = 0LL;
          v89._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v89);
          uint64_t v90 = v130;
          uint64_t v91 = sub_10000D37C(v129, v130);
          uint64_t v92 = swift_getDynamicType(v91, v90, 1LL);
          uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v92);
          uint64_t v126 = v92;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
          sub_10000E888((uint64_t)&v126);
          v93._uint64_t countAndFlagsBits = 5972026LL;
          v93._object = (void *)0xE300000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v93);
          uint64_t MetatypeMetadata = &type metadata for String;
          uint64_t v126 = v85;
          uint64_t v127 = v87;
          __int128 v76 = v131;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
          sub_10000E888((uint64_t)&v126);
          v94._uint64_t countAndFlagsBits = 93LL;
          v94._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v94);
          LogMessage.init(stringInterpolation:)(v88);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v95 = v104;
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
          v96._uint64_t countAndFlagsBits = 0LL;
          v96._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v96);
          uint64_t v97 = v130;
          uint64_t v98 = sub_10000D37C(v129, v130);
          uint64_t v99 = swift_getDynamicType(v98, v97, 1LL);
          uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v99);
          uint64_t v126 = v99;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v126);
          sub_10000E888((uint64_t)&v126);
          v100._uint64_t countAndFlagsBits = 58LL;
          v100._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v100);
          LogMessage.init(stringInterpolation:)(v95);
        }

        sub_10000D3A0(v129);
        uint64_t v101 = LogMessage.init(stringLiteral:)(0xD000000000000019LL);
        uint64_t v102 = static os_log_type_t.debug.getter(v101);
        sub_1000BD1B0(v102, v82);
        swift_bridgeObjectRelease();
        JSStack.makeRemoteInspectable()();
      }
    }

    (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v73);
  }

  return v80;
}

uint64_t sub_1000ADF8C()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000DE7C();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  strcpy((char *)v22, "metadata.plist");
  HIBYTE(v22[1]) = -18;
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))( v5,  enum case for URL.DirectoryHint.inferFromPath(_:),  v1);
  unint64_t v10 = sub_10004828C();
  URL.appending<A>(path:directoryHint:)(v22, v5, &type metadata for String, v10);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  swift_bridgeObjectRelease();
  uint64_t v11 = Data.init(contentsOf:options:)(v9, 0LL);
  if (v0) {
    return sub_1000AEDF0();
  }
  uint64_t v14 = v11;
  uint64_t v15 = v12;
  uint64_t v16 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = PropertyListDecoder.init()();
  unint64_t v18 = sub_1000AEB10();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( v22,  &type metadata for JetpackMetadata,  v14,  v15,  &type metadata for JetpackMetadata,  v18);
  sub_1000AEDF0();
  swift_release(v17);
  sub_1000AEE28();
  if (v22[0] == 1LL) {
    return 0LL;
  }
  if (v22[0] == 2LL) {
    return 1LL;
  }
  unint64_t v19 = sub_1000AEB4C();
  uint64_t v20 = swift_allocError(&type metadata for JSStackProviderError, v19, 0LL, 0LL);
  *uint64_t v21 = 2;
  return swift_willThrow(v20);
}

void *sub_1000AE198(uint64_t a1, void *a2)
{
  Swift::String v31 = a2;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v3);
  sub_10000DE7C();
  uint64_t v4 = sub_10000D33C(&qword_1001CBD38);
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v8 = (_BYTE *)(v7 - v6);
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_10000DE7C();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v30 - v18;
  sub_10001C908(*(_BYTE *)(a1 + 1));
  URL.appendingPathComponent(_:)(0x656372756F73LL, 0xE600000000000000LL);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v17, v13);
  if (*(unsigned __int8 *)(a1 + 64) > 1u)
  {
    uint64_t v20 = sub_100079C08((char *)a1);
    uint64_t v34 = sub_1000AEE3C();
    Swift::String v35 = &protocol witness table for SyncTaskScheduler;
    uint64_t v21 = sub_10001A658();
    SyncTaskScheduler.init()(v21);
    Promise.map<A>(on:_:)(v33, sub_1000AE688, 0LL, v4);
    swift_release(v20);
    sub_100048888();
    id v23 = v31;
  }

  else
  {
    char v22 = sub_1000ADF8C() & 1;
    id v23 = v31;
    sub_10000D33C(&qword_1001CBD48);
    sub_10000D5C0(v12, 1LL, 1LL, v13);
    uint64_t v24 = (uint64_t)&v8[*(int *)(v4 + 48)];
    *uint64_t v8 = v22;
    sub_1000AEAC8(v12, v24);
    Promise.__allocating_init(value:)(v8);
  }

  uint64_t v25 = sub_10000DDDC((uint64_t)&unk_1001ADB40, 104LL);
  sub_1000AEE00((void *)(v25 + 16));
  *(void *)(v25 + 96) = v23;
  uint64_t v26 = sub_10000DDDC((uint64_t)&unk_1001ADB68, 32LL);
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000AEAA0;
  *(void *)(v26 + 24) = v25;
  uint64_t v34 = sub_1000AEE3C();
  Swift::String v35 = &protocol witness table for SyncTaskScheduler;
  uint64_t v27 = sub_10001A658();
  sub_1000AEE44();
  SyncTaskScheduler.init()(v23);
  uint64_t v28 = sub_1000AEE34();
  Promise.map<A>(on:_:)(v33, sub_1000AEAB0, v26, v28);
  sub_1000AEE1C();
  swift_release(v26);
  sub_100048888();
  v32(v19, v13);
  return v27;
}

uint64_t sub_1000AE620(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a2 & 1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a3, v6);
  sub_10000D5C0(a1, 0LL, 1LL, v6);
  return v5;
}

uint64_t sub_1000AE688@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = (uint64_t)&a1[*(int *)(sub_10000D33C(&qword_1001CB108) + 48)];
  uint64_t v5 = sub_10000D33C(&qword_1001CBD38);
  uint64_t result = sub_1000AE620((uint64_t)&a2[*(int *)(v5 + 48)], v3, v4);
  *a2 = result & 1;
  return result;
}

id sub_1000AE6F8@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  Swift::String v35 = a4;
  uint64_t v33 = a2;
  int v34 = a1 & 1;
  uint64_t v7 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v30 = (char *)&v30 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v30 - v20;
  __chkstk_darwin(v19);
  Swift::String v31 = (char *)&v30 - v22;
  uint64_t v23 = *(unsigned __int8 *)(a3 + 1);
  sub_1000AC60C(*(_BYTE *)(a3 + 1));
  sub_1000ABCE8(v23, 0);
  URL.appendingPathComponent(_:)(7368801LL, 0xE300000000000000LL);
  URL.appendingPathExtension(_:)(0x656C646E7562LL, 0xE600000000000000LL);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v24(v16, v9);
  uint64_t v25 = v32;
  sub_1000ABEE0(v23, v32);
  sub_10001C908(v23);
  URL.appendingPathComponent(_:)(0x656372756F73LL, 0xE600000000000000LL);
  v24(v13, v9);
  uint64_t v26 = (int *)type metadata accessor for JSStackContext(0LL);
  sub_1000AC510(v23, 0x6B63617074656ALL, (void *)0xE700000000000000LL);
  sub_10002877C(v33, a5 + v26[8]);
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v27(a5, v31, v9);
  sub_1000AEAC8(v25, a5 + v26[5]);
  v27(a5 + v26[6], v21, v9);
  v27(a5 + v26[7], v30, v9);
  v27(a5 + v26[9], v16, v9);
  *(_BYTE *)(a5 + v26[11]) = v34;
  uint64_t v28 = v35;
  *(void *)(a5 + v26[12]) = v35;
  return v28;
}

uint64_t sub_1000AE998(unsigned __int8 *a1, uint64_t (*a2)(uint64_t, unsigned __int8 *))
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_10000D33C(&qword_1001CBD38);
  return a2(v4, &a1[*(int *)(v5 + 48)]);
}

void sub_1000AE9FC(void *a1)
{
  id v1 = [a1 virtualMachine];
  if (v1)
  {
    id v2 = v1;
    [v1 shrinkFootprintWhenIdle];
  }

  else
  {
    __break(1u);
  }

uint64_t type metadata accessor for JSStackProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd15JSStackProvider);
}

uint64_t sub_1000AEA64()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  return swift_deallocObject(v0, 104LL, 7LL);
}

id sub_1000AEAA0@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000AE6F8(a1 & 1, a2, v3 + 16, *(void **)(v3 + 96), a3);
}

uint64_t sub_1000AEAB0(unsigned __int8 *a1)
{
  return sub_1000AE998(a1, *(uint64_t (**)(uint64_t, unsigned __int8 *))(v1 + 16));
}

uint64_t sub_1000AEAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CB180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AEB10()
{
  unint64_t result = qword_1001CBD50;
  if (!qword_1001CBD50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166370, &type metadata for JetpackMetadata);
    atomic_store(result, (unint64_t *)&qword_1001CBD50);
  }

  return result;
}

unint64_t sub_1000AEB4C()
{
  unint64_t result = qword_1001CBD58;
  if (!qword_1001CBD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166F80, &type metadata for JSStackProviderError);
    atomic_store(result, (unint64_t *)&qword_1001CBD58);
  }

  return result;
}

uint64_t sub_1000AEB88()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_release(*(void *)(v0 + 104));
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_1000AEBC4(uint64_t a1)
{
  return sub_1000ACDFC(a1, *(void *)(v1 + 16), v1 + 24, *(void *)(v1 + 104));
}

unint64_t sub_1000AEBD4()
{
  unint64_t result = qword_1001CBD68;
  if (!qword_1001CBD68)
  {
    uint64_t v1 = sub_10000D820(&qword_1001CBD60);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001CBD68);
  }

  return result;
}

uint64_t sub_1000AEC18()
{
  swift_release(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 88));
  return swift_deallocObject(v0, 120LL, 7LL);
}

uint64_t sub_1000AEC5C(uint64_t a1, void *a2)
{
  return sub_1000AD694(a1, a2, *(void **)(v2 + 24), *(void *)(v2 + 32), (void *)(v2 + 40));
}

uint64_t sub_1000AEC88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000AECAC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void *))(v2 + 16))(*a1, a1 + 1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for JSStackProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000AED2C + 4 * byte_100166ED5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000AED60 + 4 * byte_100166ED0[v4]))();
}

uint64_t sub_1000AED60(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000AED68(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AED70LL);
  }
  return result;
}

uint64_t sub_1000AED7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AED84LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000AED88(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000AED90(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSStackProviderError()
{
  return &type metadata for JSStackProviderError;
}

unint64_t sub_1000AEDB0()
{
  unint64_t result = qword_1001CBD78;
  if (!qword_1001CBD78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100166F58, &type metadata for JSStackProviderError);
    atomic_store(result, (unint64_t *)&qword_1001CBD78);
  }

  return result;
}

uint64_t sub_1000AEDF0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void *sub_1000AEE00(void *a1)
{
  return memcpy(a1, v1, 0x50uLL);
}

uint64_t sub_1000AEE0C()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000AEE1C()
{
  return swift_release(v0);
}

uint64_t sub_1000AEE28()
{
  return sub_10001BD84(v1, v0);
}

uint64_t sub_1000AEE34()
{
  return type metadata accessor for JSStackContext(0LL);
}

uint64_t sub_1000AEE3C()
{
  return type metadata accessor for SyncTaskScheduler(0LL);
}

void *sub_1000AEE44()
{
  return sub_100066268(v0);
}

uint64_t sub_1000AEE4C(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return AMSLogKey();
}

uint64_t sub_1000AEE58(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v1);
  sub_100083BE0();
  uint64_t v5 = (void *)static JSContext.requiredCurrent.getter();
  void v8[2] = v2;
  v8[3] = a1;
  v8[4] = ObjectType;
  uint64_t v6 = JSContext.propagateErrorsToExceptions(_:)(sub_1000B0838, v8);

  return v6;
}

uint64_t sub_1000AEECC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a4;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = swift_allocObject(&unk_1001ADCF8, 24LL, 7LL);
  uint64_t v12 = v11 + 16;
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v13 = static RunLoopWorkerThread.current.getter();
  swift_weakInit(v11 + 16, v13);
  swift_release();
  uint64_t Strong = swift_weakLoadStrong(v11 + 16);
  swift_release();
  if (Strong)
  {
    uint64_t v45 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v46 = v4;
    uint64_t v15 = qword_1001DBB30;
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = type metadata accessor for LogMessage(0LL);
    uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v17 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v17 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v50 = type metadata accessor for JSSubscriptionStatus();
    v49[0] = a2;
    id v19 = a2;
    id v20 = (id)AMSLogKey(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v44[0] = v19;
      v44[1] = v15;
      uint64_t v23 = v22;
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v50;
      uint64_t v28 = sub_10000D37C(v49, v50);
      uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v47[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000E888((uint64_t)v47);
      v30._uint64_t countAndFlagsBits = 5972026LL;
      v30._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t MetatypeMetadata = &type metadata for String;
      v47[0] = v23;
      v47[1] = v25;
      id v19 = (id)v44[0];
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000E888((uint64_t)v47);
      v31._uint64_t countAndFlagsBits = 93LL;
      v31._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      LogMessage.init(stringInterpolation:)(v10);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t v34 = v50;
      Swift::String v35 = sub_10000D37C(v49, v50);
      uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v36);
      v47[0] = v36;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000E888((uint64_t)v47);
      v37._uint64_t countAndFlagsBits = 58LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v10);
    }

    sub_10000D3A0(v49);
    LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v50 = sub_10000D33C(&qword_1001C8F18);
    v49[0] = a3;
    swift_bridgeObjectRetain(a3);
    static LogMessage.safe(_:)(v49);
    uint64_t v38 = sub_10000E888((uint64_t)v49);
    uint64_t v39 = static os_log_type_t.default.getter(v38);
    sub_1000BD1B0(v39, v18);
    swift_bridgeObjectRelease();
    sub_100083BE0();
    uint64_t v40 = swift_allocObject(&unk_1001ADD20, 24LL, 7LL);
    swift_unknownObjectWeakInit(v40 + 16, v19);
    uint64_t v41 = (void *)swift_allocObject(&unk_1001ADD48, 48LL, 7LL);
    v41[2] = v40;
    void v41[3] = a3;
    uint64_t v42 = v51;
    v41[4] = v11;
    v41[5] = v42;
    swift_bridgeObjectRetain(a3);
    swift_retain(v40);
    swift_retain(v11);
    uint64_t v12 = sub_10008C048(v45, (uint64_t)sub_1000B08D0, (uint64_t)v41);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    type metadata accessor for JSError();
    id v32 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v32);
    swift_release();
  }

  return v12;
}

void sub_1000AF320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v63 = a6;
  uint64_t v62 = a2;
  uint64_t v11 = type metadata accessor for JSCallable(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v72, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    id v19 = (void *)Strong;
    sub_1000308B8(1701869940LL, 0xE400000000000000LL, a5, &aBlock);
    if (MetatypeMetadata)
    {
      if ((swift_dynamicCast(v70, &aBlock, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
      {
        if (qword_1001C80E0 != -1) {
          swift_once(&qword_1001C80E0, sub_10012D598);
        }
        id v58 = sub_10012D674();
        uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
        v61((char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), a3, v11);
        uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
        uint64_t v21 = ((v20 + 32) & ~v20) + v13;
        uint64_t v22 = (v20 + 32) & ~v20;
        uint64_t v59 = v20 | 7;
        uint64_t v60 = v22;
        uint64_t v23 = swift_allocObject(&unk_1001ADD70, v21, v20 | 7);
        uint64_t v24 = v63;
        *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v63;
        *(void *)(v23 + 24) = v19;
        uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
        v25(v23 + v22, (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL), v11);
        uint64_t v68 = sub_1000B08F0;
        uint64_t v69 = v23;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
        uint64_t v66 = sub_1000B1D04;
        uint64_t MetatypeMetadata = &unk_1001ADD88;
        Swift::String v26 = _Block_copy(&aBlock);
        swift_retain(v24);
        id v27 = v19;
        swift_release();
        id v28 = v58;
        [v58 addErrorBlock:v26];
        _Block_release(v26);
        v61(v14, v62, v11);
        uint64_t v29 = swift_allocObject(&unk_1001ADDC0, v21, v59);
        *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v24;
        *(void *)(v29 + 24) = v27;
        v25(v29 + v60, v14, v11);
        uint64_t v68 = sub_1000B0918;
        uint64_t v69 = v29;
        *(void *)&__int128 aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
        uint64_t v66 = sub_1000B1D04;
        uint64_t MetatypeMetadata = &unk_1001ADDD8;
        Swift::String v30 = _Block_copy(&aBlock);
        swift_retain(v24);
        id v31 = v27;
        swift_release();
        [v28 addSuccessBlock:v30];
        _Block_release(v30);

        return;
      }
    }

    else
    {
      sub_10000E888((uint64_t)&aBlock);
    }

    uint64_t v46 = v64;
    uint64_t v47 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v48 = swift_allocObject(v47, 64LL, 7LL);
    *(_OWORD *)(v48 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v48 + 56) = &type metadata for String;
    strcpy((char *)(v48 + 32), "Invalid type");
    *(_BYTE *)(v48 + 45) = 0;
    *(_WORD *)(v48 + 46) = -5120;
    uint64_t v49 = v46;
    uint64_t v50 = (void *)JSCallable.call(_:)();

    swift_bridgeObjectRelease();
    if (!v49) {
  }
    }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v32 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v33 = type metadata accessor for LogMessage(0LL);
    uint64_t v34 = swift_allocObject( v32,  ((*(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v33 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a7);
    *(void *)&__int128 aBlock = a7;
    id v35 = (id)AMSLogKey(MetatypeMetadata);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v39 = v38;

      swift_bridgeObjectRetain(v39);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v40._uint64_t countAndFlagsBits = 0LL;
      v40._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t v41 = MetatypeMetadata;
      uint64_t v42 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v42, v41, 1LL);
      uint64_t v71 = (void *)swift_getMetatypeMetadata(DynamicType);
      v70[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
      sub_10000E888((uint64_t)v70);
      v44._uint64_t countAndFlagsBits = 5972026LL;
      v44._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      uint64_t v71 = &type metadata for String;
      v70[0] = v37;
      v70[1] = v39;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
      sub_10000E888((uint64_t)v70);
      v45._uint64_t countAndFlagsBits = 93LL;
      v45._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      LogMessage.init(stringInterpolation:)(v17);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v51._uint64_t countAndFlagsBits = 0LL;
      v51._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      uint64_t v52 = MetatypeMetadata;
      uint64_t v53 = sub_10000D37C(&aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v54 = swift_getDynamicType(v53, v52, 1LL);
      uint64_t v71 = (void *)swift_getMetatypeMetadata(v54);
      v70[0] = v54;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
      sub_10000E888((uint64_t)v70);
      v55._uint64_t countAndFlagsBits = 58LL;
      v55._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      LogMessage.init(stringInterpolation:)(v17);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v56 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v57 = static os_log_type_t.error.getter(v56);
    sub_1000BD1B0(v57, v34);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000AF918(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v58, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2 + 16);
  swift_release();
  if (!Strong)
  {
    uint64_t v51 = a4;
    uint64_t v52 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v50 = qword_1001DBB30;
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v19 = *(void *)(v18 + 72);
    uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v49 = v19;
    uint64_t v22 = swift_allocObject(v17, v21 + 2 * v19, v20 | 7);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v53 = v22 + v21;
    uint64_t v57 = type metadata accessor for JSSubscriptionStatus();
    v56[0] = a3;
    id v23 = (id)AMSLogKey(a3);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      swift_bridgeObjectRetain(v26);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v27._uint64_t countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      uint64_t v28 = v57;
      uint64_t v29 = sub_10000D37C(v56, v57);
      uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v54[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v31._uint64_t countAndFlagsBits = 5972026LL;
      v31._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t MetatypeMetadata = &type metadata for String;
      v54[0] = v48;
      v54[1] = v26;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v32._uint64_t countAndFlagsBits = 93LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v14);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t v34 = v57;
      id v35 = sub_10000D37C(v56, v57);
      uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v36);
      v54[0] = v36;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v37._uint64_t countAndFlagsBits = 58LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v14);
    }

    a1 = v52;
    sub_10000D3A0(v56);
    uint64_t v38 = LogMessage.init(stringLiteral:)(0xD000000000000027LL);
    uint64_t v40 = static os_log_type_t.fault.getter(v38, v39);
    sub_1000BD1B0(v40, v22);
    swift_bridgeObjectRelease();
    a4 = v51;
  }

  swift_beginAccess(v15, v56, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v15);
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v8);
    uint64_t v42 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v43 = (v42 + 24) & ~v42;
    unint64_t v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v45 = swift_allocObject(&unk_1001ADE38, v44 + 8, v42 | 7);
    *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v45 + v43, v11, v8);
    *(void *)(v45 + v44) = a1;
    id v46 = a3;
    swift_errorRetain(a1);
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000B09FC, v45);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1000AFCEC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v38 = type metadata accessor for JSSubscriptionStatus();
  v37[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v38;
    uint64_t v18 = sub_10000D37C(v37, v38);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v13;
    v35[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v38;
    uint64_t v24 = sub_10000D37C(v37, v38);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v35[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000E888((uint64_t)v35);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v37);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v31 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(a3);
  id v32 = sub_10008F674(a3);
  uint64_t v33 = sub_10008F4BC();

  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v30 + 32) = v33;
  sub_1000854F0(v30);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B0004(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  id v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a2 + 16;
  swift_beginAccess(a2 + 16, v59, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2 + 16);
  swift_release();
  if (!Strong)
  {
    uint64_t v52 = a4;
    uint64_t v53 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v51 = qword_1001DBB30;
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v19 = *(void *)(v18 + 72);
    uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v50 = v19;
    uint64_t v22 = swift_allocObject(v17, v21 + 2 * v19, v20 | 7);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v54 = v22 + v21;
    uint64_t v58 = type metadata accessor for JSSubscriptionStatus();
    v57[0] = a3;
    id v23 = (id)AMSLogKey(a3);
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v26 = v25;

      swift_bridgeObjectRetain(v26);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v27._uint64_t countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      uint64_t v28 = v58;
      uint64_t v29 = sub_10000D37C(v57, v58);
      uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v55[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000E888((uint64_t)v55);
      v31._uint64_t countAndFlagsBits = 5972026LL;
      v31._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t MetatypeMetadata = &type metadata for String;
      v55[0] = v49;
      v55[1] = v26;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000E888((uint64_t)v55);
      v32._uint64_t countAndFlagsBits = 93LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v14);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t v34 = v58;
      id v35 = sub_10000D37C(v57, v58);
      uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v36);
      v55[0] = v36;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000E888((uint64_t)v55);
      v37._uint64_t countAndFlagsBits = 58LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v14);
    }

    a1 = v53;
    sub_10000D3A0(v57);
    uint64_t v38 = LogMessage.init(stringLiteral:)(0xD000000000000027LL);
    uint64_t v40 = static os_log_type_t.fault.getter(v38, v39);
    sub_1000BD1B0(v40, v22);
    swift_bridgeObjectRelease();
    a4 = v52;
  }

  swift_beginAccess(v15, v57, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v15);
  if (result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v8);
    uint64_t v42 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v43 = (v42 + 24) & ~v42;
    unint64_t v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v45 = swift_allocObject(&unk_1001ADE10, v44 + 8, v42 | 7);
    *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v45 + v43, v11, v8);
    *(void *)(v45 + v44) = a1;
    id v46 = a3;
    id v47 = a1;
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000B09B0, v45);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1000B03D4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v37 = type metadata accessor for JSSubscriptionStatus();
  v36[0] = a1;
  id v11 = (id)AMSLogKey(a1);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v37;
    uint64_t v18 = sub_10000D37C(v36, v37);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v34[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v34[0] = v13;
    v34[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v37;
    uint64_t v24 = sub_10000D37C(v36, v37);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v34[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_10000E888((uint64_t)v34);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v36);
  uint64_t v27 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v10);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v30 = swift_allocObject(v29, 64LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  id v31 = [a3 exportObject];
  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v31,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  *(void *)(v30 + 56) = sub_10000D33C(&qword_1001C8E58);
  *(void *)(v30 + 32) = v32;
  sub_1000854F0(v30);
  return swift_bridgeObjectRelease();
}

void sub_1000B0774()
{
}

id sub_1000B07AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSSubscriptionStatus();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSSubscriptionStatus()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20JSSubscriptionStatus);
}

uint64_t sub_1000B0838(void *a1)
{
  return sub_1000AEECC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000B0854()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000B0878()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000B089C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000B08D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1000B08F0(uint64_t a1)
{
  return sub_1000B0924(a1, (uint64_t (*)(uint64_t, void, void, uint64_t))sub_1000AF918);
}

uint64_t sub_1000B08FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B090C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B0918(uint64_t a1)
{
  return sub_1000B0924(a1, (uint64_t (*)(uint64_t, void, void, uint64_t))sub_1000B0004);
}

uint64_t sub_1000B0924(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, uint64_t))
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + ((v4 + 32) & ~v4));
}

uint64_t sub_1000B0970()
{
  return sub_100092CCC(v0, v2, v1);
}

uint64_t sub_1000B09B0()
{
  return sub_1000A070C((uint64_t (*)(void, unint64_t, void))sub_1000B03D4);
}

uint64_t sub_1000B09BC()
{
  return sub_100092CCC(v0, v2, v1);
}

uint64_t sub_1000B09FC()
{
  return sub_1000A070C((uint64_t (*)(void, unint64_t, void))sub_1000AFCEC);
}

void *sub_1000B0A10(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    uint64_t v8 = 4LL;
    while (1)
    {
      id v9 = (a3 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      uint64_t v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1LL)) {
        break;
      }
      id v15 = v9;
      char v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_16:
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
  }

char *sub_1000B0B60()
{
  uint64_t v1 = v0;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_10000DD5C();
  uint64_t v103 = v3;
  sub_10000D33C(&qword_1001CBE00);
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DD5C();
  uint64_t v100 = v5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v101 = *(void *)(v6 - 8);
  uint64_t v102 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v99 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v98 = (char *)&v98 - v9;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC64();
  __chkstk_darwin(v16);
  sub_10000DE7C();
  uint64_t v19 = v18 - v17;
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  __chkstk_darwin(v20);
  sub_10000DE7C();
  uint64_t v23 = v22 - v21;
  *(void *)&v1[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyContext] = 0LL;
  uint64_t v24 = OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyEntitlementFineGrained;
  uint64_t v25 = v1;
  *(void *)&v1[v24] = String._bridgeToObjectiveC()();
  Swift::String v26 = &v25[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyEntitlementFineGrainedItemSPI];
  *(void *)Swift::String v26 = 6910067LL;
  *((void *)v26 + Hasher._combine(_:)(v1 & 1) = 0xE300000000000000LL;
  uint64_t v27 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v27);
  v108[0] = _swiftEmptyArrayStorage;
  unint64_t v28 = sub_1000284E0();
  uint64_t v29 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  unint64_t v30 = sub_100028520();
  dispatch thunk of SetAlgebra.init<A>(_:)(v108, v29, v30, v15, v28);
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v14,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v10);
  uint64_t v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000028LL,  0x8000000100172A40LL,  v23,  v19,  v14,  0LL);
  *(void *)&v25[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyQueue] = v31;
  id v32 = [objc_allocWithZone(CoreTelephonyClient) initWithQueue:v31];
  *(void *)&v25[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyClient] = v32;

  Swift::String v33 = (objc_class *)type metadata accessor for JSTelephony();
  v104.receiver = v25;
  v104.super_class = v33;
  uint64_t v34 = (char *)objc_msgSendSuper2(&v104, "init");
  uint64_t v35 = OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyClient;
  uint64_t v36 = *(void **)&v34[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyClient];
  uint64_t v37 = v34;
  [v36 setDelegate:v37];
  NSString v38 = sub_1000B1A40();
  LODWORD(v28) = MGGetBoolAnswer();

  if (!(_DWORD)v28)
  {
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v55 = sub_100010570();
    uint64_t v56 = sub_1000B1A64(v55);
    *(_OWORD *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    id v57 = sub_1000B1A88();
    id v58 = (id)AMSLogKey(v57);
    if (v58)
    {
      sub_1000105E8((uint64_t)v58);
      sub_10004870C();
      swift_bridgeObjectRetain(v29);
      sub_1000B1A2C();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v59 = sub_100048E80();
      sub_1000B1A08(v59);
      sub_1000A8F18();
      sub_10000DC14();
      uint64_t v107 = &type metadata for String;
      uint64_t v105 = v10;
      uint64_t v106 = v29;
      sub_10000DF68();
      sub_1000A8F18();
      sub_10000DC4C(93LL);
      sub_100025910();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1000B1A18();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v63 = sub_100048E80();
      uint64_t v64 = sub_1000B1A08(v63);
      sub_10008E49C(v64, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_10000D3A0(v108);
    unint64_t v65 = 0xD000000000000019LL;
    goto LABEL_24;
  }

  if ((sub_1000B1728() & 1) == 0)
  {
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v60 = sub_100010570();
    uint64_t v56 = sub_1000B1A64(v60);
    *(_OWORD *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    id v57 = sub_1000B1A88();
    id v61 = (id)AMSLogKey(v57);
    if (v61)
    {
      sub_1000105E8((uint64_t)v61);
      sub_10004870C();
      swift_bridgeObjectRetain(v29);
      sub_1000B1A2C();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v62 = sub_100048E80();
      sub_1000B1A08(v62);
      sub_1000A8F18();
      sub_10000DC14();
      uint64_t v107 = &type metadata for String;
      uint64_t v105 = v10;
      uint64_t v106 = v29;
      sub_10000DF68();
      sub_1000A8F18();
      sub_10000DC4C(93LL);
      sub_100025910();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1000B1A18();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v78 = sub_100048E80();
      uint64_t v79 = sub_1000B1A08(v78);
      sub_10008E49C(v79, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_10000D3A0(v108);
    unint64_t v65 = 0xD00000000000001BLL;
LABEL_24:
    uint64_t v80 = LogMessage.init(stringLiteral:)(v65);
    if (qword_1001C7F80 != -1) {
      uint64_t v80 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v81 = static os_log_type_t.error.getter(v80);
    sub_1000BD1B0(v81, v56);
    swift_bridgeObjectRelease();

    return v37;
  }

  uint64_t v39 = *(void **)&v34[v35];
  v108[0] = 0LL;
  id v40 = [v39 getActiveContexts:v108];
  id v41 = v108[0];
  if (v40)
  {
    uint64_t v42 = v40;
    id v43 = v108[0];
    uint64_t v44 = sub_1000B195C(v42);
    if (v44)
    {
      uint64_t v45 = v44;
      if ((unint64_t)v44 >> 62)
      {
        if (v44 >= 0) {
          v44 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter(v44);
        if (v46) {
          goto LABEL_7;
        }
      }

      else
      {
        uint64_t v46 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        if (v46)
        {
LABEL_7:
          v108[0] = _swiftEmptyArrayStorage;
          specialized ContiguousArray.reserveCapacity(_:)(v46);
          if (v46 < 0) {
            __break(1u);
          }
          uint64_t v47 = 0LL;
          do
          {
            if ((v45 & 0xC000000000000001LL) != 0) {
              id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45);
            }
            else {
              id v48 = *(id *)(v45 + 8 * v47 + 32);
            }
            uint64_t v49 = v48;
            ++v47;
            id v50 = [v48 context];

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v51);
            uint64_t v52 = *((void *)v108[0] + 2);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v52);
            uint64_t v53 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v50);
            specialized ContiguousArray._endMutation()(v53);
          }

          while (v46 != v47);
          uint64_t v54 = v108[0];
          swift_bridgeObjectRelease();
LABEL_37:
          id v87 = [v42 voicePreferred];
          uint64_t v89 = v101;
          uint64_t v88 = v102;
          if (v87)
          {
            uint64_t v90 = v87;
            uint64_t v91 = v99;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v92 = *(void (**)(uint64_t, char *, uint64_t))(v89 + 32);
            uint64_t v93 = v100;
            v92(v100, v91, v88);
            sub_100081A1C(v93, 0LL);
            if (sub_1000102D4(v93, 1LL, v88) != 1)
            {
              Swift::String v94 = v98;
              uint64_t v95 = ((uint64_t (*)(char *, uint64_t, uint64_t))v92)(v98, v93, v88);
              __chkstk_darwin(v95);
              *(&v98 - 2) = v94;
              Swift::String v96 = sub_1000B0A10(sub_1000B19C8, (uint64_t)(&v98 - 4), (uint64_t)v54);

              (*(void (**)(char *, uint64_t))(v89 + 8))(v94, v88);
              swift_bridgeObjectRelease();
              uint64_t v97 = *(void **)&v37[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyContext];
              *(void *)&v37[OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyContext] = v96;

              return v37;
            }
          }

          else
          {
            uint64_t v93 = v100;
            sub_100081A1C(v100, 1LL);
          }

          swift_bridgeObjectRelease();
          sub_1000102E0(v93, &qword_1001CBE00);
          return v37;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v54 = _swiftEmptyArrayStorage;
      goto LABEL_37;
    }
  }

  else
  {
    id v66 = v108[0];
    uint64_t v67 = _convertNSErrorToError(_:)(v41);

    swift_willThrow(v68);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v69 = sub_100010570();
    uint64_t v70 = swift_allocObject( v41,  ((*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v69 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v69 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    id v71 = sub_1000B1A88();
    id v72 = (id)AMSLogKey(v71);
    if (v72)
    {
      uint64_t v73 = sub_1000105E8((uint64_t)v72);
      uint64_t v102 = v67;
      id v74 = v71;
      uint64_t v76 = v75;

      swift_bridgeObjectRetain(v76);
      sub_1000B1A2C();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v77 = sub_100048E80();
      sub_1000B1A08(v77);
      sub_10008E43C();
      sub_10000DC14();
      uint64_t v107 = &type metadata for String;
      uint64_t v105 = v73;
      uint64_t v106 = v76;
      sub_10000DF68();
      sub_10008E43C();
      sub_10000DC4C(93LL);
      sub_1000522A8();
      id v71 = v74;
      uint64_t v67 = v102;
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_1000B1A18();
      sub_10000DC08();
      sub_1000B19E4();
      uint64_t v83 = sub_100048E80();
      uint64_t v84 = sub_1000B1A08(v83);
      sub_10008E49C(v84, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000522A8();
    }

    sub_10000D3A0(v108);
    uint64_t v85 = LogMessage.init(stringLiteral:)(0xD000000000000027LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v85 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v86 = static os_log_type_t.error.getter(v85);
    sub_1000BD1B0(v86, v70);
    swift_bridgeObjectRelease();

    swift_errorRelease(v67);
  }

  return v37;
}

uint64_t sub_1000B14F4(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [*a1 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

void sub_1000B1628()
{
  NSString v0 = String._bridgeToObjectiveC()();
  uint64_t v1 = (void *)MGGetStringAnswer();

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000B16C8()
{
  NSString v0 = sub_1000B1A40();
  uint64_t v1 = MGGetBoolAnswer();

  return v1;
}

uint64_t sub_1000B1728()
{
  uint64_t v1 = SecTaskCreateFromSelf(0LL);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  CFErrorRef error = 0LL;
  CFTypeRef v3 = SecTaskCopyValueForEntitlement( v1,  *(CFStringRef *)(v0 + OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyEntitlementFineGrained),  &error);
  if (!v3)
  {

    return 0LL;
  }

  CFTypeRef v4 = v3;
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFArrayGetTypeID())
  {

    sub_1000B1A94();
    return 0LL;
  }

  CFTypeRef v18 = v4;
  swift_unknownObjectRetain(v4);
  uint64_t v6 = sub_10000D33C(&qword_1001CDF50);
  uint64_t v7 = swift_dynamicCast(&v17, &v18, (char *)&type metadata for Swift.AnyObject + 8, v6, 6LL);
  if ((_DWORD)v7)
  {
    uint64_t v8 = *(void *)(v17 + 16);
    if (v8)
    {
      uint64_t v9 = v0 + OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyEntitlementFineGrainedItemSPI;
      uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd11JSTelephony_telephonyEntitlementFineGrainedItemSPI);
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v12 = (uint64_t *)(v17 + 40);
      while (1)
      {
        uint64_t v13 = *(v12 - 1);
        uint64_t v14 = *v12;
        BOOL v15 = v13 == v10 && v14 == v11;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v10, v11, 0LL) & 1) != 0) {
          break;
        }
        v12 += 2;
        if (!--v8) {
          goto LABEL_13;
        }
      }

      sub_1000B1A94();

      swift_bridgeObjectRelease();
    }

    else
    {
LABEL_13:
      swift_bridgeObjectRelease();
      sub_1000B1A94();
    }
  }

  else
  {

    sub_1000B1A94();
  }

  return v7;
}

id sub_1000B18AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSTelephony();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSTelephony()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd11JSTelephony);
}

uint64_t sub_1000B195C(void *a1)
{
  id v1 = [a1 subscriptions];
  if (!v1) {
    return 0LL;
  }
  objc_super v2 = v1;
  uint64_t v3 = sub_10000DAA0(0LL, &qword_1001CBE08, &OBJC_CLASS___CTXPCContextInfo_ptr);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_1000B19C8(id *a1)
{
  return sub_1000B14F4(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000B19E4()
{
  uint64_t v1 = *(void *)(v0 - 96);
  objc_super v2 = sub_10000D37C((void *)(v0 - 120), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000B1A08(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 152) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 152);
}

uint64_t sub_1000B1A18()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
}

uint64_t sub_1000B1A2C()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
}

NSString sub_1000B1A40()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000B1A64(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

id sub_1000B1A88()
{
  *(void *)(v2 - 96) = v1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v0;
  return v0;
}

uint64_t sub_1000B1A94()
{
  return swift_unknownObjectRelease(v0);
}

void sub_1000B1A9C(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  unint64_t v29 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      goto LABEL_5;
    }
LABEL_11:

    return;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v3 = __CocoaSet.count.getter(a1);
  if (!v3) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_100016F5C();
  if (v29)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v5 = __CocoaSet.startIndex.getter(v4);
    unsigned __int8 v7 = 1;
  }

  else
  {
    uint64_t v5 = sub_10014B09C(v2);
    unsigned __int8 v7 = v8 & 1;
  }

  uint64_t v32 = v5;
  uint64_t v33 = v6;
  unsigned __int8 v34 = v7;
  if (v3 < 0)
  {
    __break(1u);
LABEL_31:
    __break(1u);
  }

  else
  {
    uint64_t v9 = v2 & 0xFFFFFFFFFFFFFF8LL;
    if (v2 < 0) {
      uint64_t v9 = v2;
    }
    uint64_t v28 = v9;
    do
    {
      uint64_t v11 = v32;
      uint64_t v10 = v33;
      uint64_t v12 = v34;
      sub_1000B7C08(v32, v33, v34, v2);
      uint64_t v14 = v13;
      uint64_t v15 = sub_1000B3C50();

      uint64_t v16 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
      {
        sub_100016F5C();
        uint64_t v16 = v35;
      }

      unint64_t v17 = v16[2];
      if (v17 >= v16[3] >> 1)
      {
        sub_100016F5C();
        uint64_t v16 = v35;
      }

      v16[2] = v17 + 1;
      v16[v17 + 4] = v15;
      if (v29)
      {
        if ((v12 & 1) == 0) {
          goto LABEL_31;
        }
        uint64_t v18 = __CocoaSet.Index.handleBitPattern.getter(v11, v10);
        if (v18) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v25 = sub_10000D33C(&qword_1001CBE48);
        Swift::String v26 = (void (*)(_BYTE *, void))Set.Index._asCocoa.modify(v31, v25);
        __CocoaSet.formIndex(after:isUnique:)(v27, isUniquelyReferenced_nonNull_native, v28);
        v26(v31, 0LL);
      }

      else
      {
        uint64_t v20 = sub_10014AFB4(v11, v10, v12, v2);
        uint64_t v22 = v21;
        char v24 = v23;
        sub_1000B7E70(v11, v10, v12);
        uint64_t v32 = v20;
        uint64_t v33 = v22;
        unsigned __int8 v34 = v24 & 1;
      }

      --v3;
    }

    while (v3);
    sub_1000B7E70(v32, v33, v34);
  }

id sub_1000B1D08()
{
  uint64_t v1 = OBJC_IVAR____TtC14amsengagementd16JSTreatmentStore____lazy_storage___dateFormatter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC14amsengagementd16JSTreatmentStore____lazy_storage___dateFormatter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC14amsengagementd16JSTreatmentStore____lazy_storage___dateFormatter);
  }

  else
  {
    id v4 = [objc_allocWithZone(NSISO8601DateFormatter) init];
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + vHasher._combine(_:)(v1 & 1) = v4;
    id v3 = v4;

    uint64_t v2 = 0LL;
  }

  id v6 = v2;
  return v3;
}

uint64_t sub_1000B1D78(void *a1, void *a2, void *a3)
{
  uint64_t v7 = 0xD000000000000018LL;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (uint64_t v15 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), v15))
    {
      uint64_t v45 = v15;
      uint64_t v50 = v3;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      void v44[2] = qword_1001DBB30;
      uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v18 = *(void *)(v17 + 72);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
      v44[1] = v18;
      uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v49 = ObjectType;
      v48[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        char v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v49;
        uint64_t v28 = sub_10000D37C(v48, v49);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v46[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v46[0] = v44[0];
        v46[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v49;
        uint64_t v36 = sub_10000D37C(v48, v49);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v46[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v48);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      id v41 = (void *)swift_allocObject(&unk_1001AE4F0, 40LL, 7LL);
      v41[2] = v45;
      void v41[3] = v13;
      v41[4] = v21;
      id v42 = v21;
      swift_retain(v13);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000B80DC, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD000000000000034LL, 0x80000001001730E0LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000003CLL, 0x80000001001730A0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v7;
}

void *sub_1000B21B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  sub_100016F88();
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_10000DA1C(i, (uint64_t)v12);
      if (!swift_dynamicCast( &v10,  v12,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v5 = v10;
      uint64_t v6 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100016F88();
        uint64_t v3 = v13;
      }

      unint64_t v7 = v3[2];
      if (v7 >= v3[3] >> 1)
      {
        sub_100016F88();
        uint64_t v3 = v13;
      }

      v3[2] = v7 + 1;
      char v8 = &v3[2 * v7];
      v8[4] = v5;
      v8[5] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v3;
}

void sub_1000B22F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = a2;
  uint64_t v35 = a6;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v9;
  uint64_t v12 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(a4);
  sub_10013E21C(v15);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v14 areasForNamespaces:isa];

  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v17 = a3;
  uint64_t v18 = v11;
  v33(v13, v17, v11);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v20 + v12;
  uint64_t v21 = swift_allocObject(&unk_1001AE518, v20 + v12, v19 | 7);
  id v22 = v35;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v21 + 24) = v22;
  char v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v23(v21 + v20, v13, v18);
  id v41 = sub_1000B80F8;
  uint64_t v42 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE530;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v25 = v22;
  swift_release();
  id v26 = v34;
  [v34 addErrorBlock:v24];
  _Block_release(v24);
  v33(v13, v36, v18);
  uint64_t v27 = swift_allocObject(&unk_1001AE568, v32, v31);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v27 + 24) = v25;
  v23(v27 + v20, v13, v18);
  id v41 = sub_1000B816C;
  uint64_t v42 = v27;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE580;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v29 = v25;
  swift_release();
  [v26 addSuccessBlock:v28];
  _Block_release(v28);
}

uint64_t sub_1000B25F0(uint64_t a1, uint64_t a2)
{
  v6[2] = a1;
  uint64_t v7 = v2;
  JSContext.propagateErrorsToExceptions(_:)(a2, v6);
  sub_10008E4EC();
  return a2;
}

uint64_t sub_1000B2658(void *a1, void *a2, void *a3)
{
  uint64_t v7 = 0xD000000000000014LL;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (uint64_t v15 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), v15))
    {
      uint64_t v45 = v15;
      uint64_t v50 = v3;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      void v44[2] = qword_1001DBB30;
      uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v18 = *(void *)(v17 + 72);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
      v44[1] = v18;
      uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v49 = ObjectType;
      v48[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        char v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v49;
        uint64_t v28 = sub_10000D37C(v48, v49);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v46[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v46[0] = v44[0];
        v46[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v49;
        uint64_t v36 = sub_10000D37C(v48, v49);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v46[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v48);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      id v41 = (void *)swift_allocObject(&unk_1001AE3D8, 40LL, 7LL);
      v41[2] = v45;
      void v41[3] = v13;
      v41[4] = v21;
      id v42 = v21;
      swift_retain(v13);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000B7FF4, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD00000000000002CLL, 0x8000000100173010LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD000000000000038LL, 0x8000000100172FD0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v7;
}

void sub_1000B2A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = a2;
  uint64_t v35 = a6;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v9;
  uint64_t v12 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(a4);
  sub_10013E21C(v15);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v14 areasForTopics:isa];

  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v17 = a3;
  uint64_t v18 = v11;
  v33(v13, v17, v11);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v20 + v12;
  uint64_t v21 = swift_allocObject(&unk_1001AE400, v20 + v12, v19 | 7);
  id v22 = v35;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v21 + 24) = v22;
  char v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v23(v21 + v20, v13, v18);
  id v41 = sub_1000B8010;
  uint64_t v42 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE418;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v25 = v22;
  swift_release();
  id v26 = v34;
  [v34 addErrorBlock:v24];
  _Block_release(v24);
  v33(v13, v36, v18);
  uint64_t v27 = swift_allocObject(&unk_1001AE450, v32, v31);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v27 + 24) = v25;
  v23(v27 + v20, v13, v18);
  id v41 = sub_1000B8030;
  uint64_t v42 = v27;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE468;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v29 = v25;
  swift_release();
  [v26 addSuccessBlock:v28];
  _Block_release(v28);
}

#error "1000B2D78: call analysis failed (funcsize=39)"
void sub_1000B2DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  sub_1000292AC();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = *(void *)(sub_10000DC98() - 8);
  char v8 = sub_10000DCF0( ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + 2LL * *(void *)(v7 + 72),
         *(unsigned __int8 *)(v7 + 80));
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  type metadata accessor for JSTreatmentStore();
  uint64_t v9 = (id)AMSLogKey(v5);
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10000DC34();
    sub_10000DC08();
    sub_10009A370();
    uint64_t v13 = sub_1000258E8();
    sub_1000B8410(v13);
    sub_1000B847C();
    sub_10000DC14();
    sub_10000DEA4();
    sub_1000B847C();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_10009A370();
    id v14 = sub_1000258E8();
    uint64_t v15 = sub_1000B8410(v14);
    sub_1000B8494(v15, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  uint64_t v16 = LogMessage.init(stringLiteral:)(v1);
  uint64_t v17 = static os_log_type_t.error.getter(v16);
  sub_1000BD1B0(v17, v8);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v19 = sub_10009A3FC(v18);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  uint64_t v20 = objc_allocWithZone((Class)type metadata accessor for JSError());
  swift_errorRetain(v3);
  uint64_t v21 = sub_10008F674(v3);
  id v22 = sub_10008F4BC();

  *(void *)(v19 + 56) = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v19 + 32) = v22;
  sub_1000854F0(v19);
  sub_100009020();
  sub_10000DD84();
}

void sub_1000B3028()
{
  uint64_t v20 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000841C0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v21 = 0LL;
  uint64_t v12 = sub_10000D33C(&qword_1001CBE58);
  static Dictionary._forceBridgeFromObjectiveC(_:result:)( v8,  &v21,  &type metadata for String,  v12,  &protocol witness table for String);
  if (v21)
  {
    sub_1000B7198(v21);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4,  v9);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v17 = swift_allocObject(v2, v16 + v11, v15 | 7);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(void *)(v17 + 24) = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v17 + v16,  (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
    id v18 = v6;
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(v20, v17);
    swift_release();
    sub_10000DD84();
  }

  else
  {
    __break(1u);
  }

void sub_1000B3150()
{
  uint64_t v24 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(sub_10000DC98() - 8);
  uint64_t v9 = sub_10000DCF0( ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 3LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80));
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v26 = type metadata accessor for JSTreatmentStore();
  v25[0] = v6;
  id v10 = (id)AMSLogKey(v6);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v14 = v26;
    uint64_t v15 = sub_10000D37C(v25, v26);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DEA4();
    sub_1000B8470();
    sub_10000DC14();
    sub_10000DEA4();
    sub_1000B8470();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_10009A370();
    uint64_t v17 = sub_1000258E8();
    uint64_t v18 = sub_1000B8410(v17);
    sub_1000B8494(v18, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  LogMessage.init(stringLiteral:)(v2);
  uint64_t v19 = sub_10000D33C(v24);
  uint64_t v26 = v19;
  v25[0] = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000B849C();
  uint64_t v20 = sub_1000102E0((uint64_t)v25, &qword_1001CAAD0);
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  sub_1000BD1B0(v21, v9);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v23 = sub_10009A3FC(v22);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v23 + 56) = v19;
  *(void *)(v23 + 32) = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000B84B4();
  sub_100009020();
  sub_10000DD84();
}

uint64_t sub_1000B33E8(void *a1, void *a2, void *a3)
{
  uint64_t v7 = 0xD00000000000001ALL;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (uint64_t v15 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), v15))
    {
      uint64_t v45 = v15;
      uint64_t v50 = v3;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      void v44[2] = qword_1001DBB30;
      uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v18 = *(void *)(v17 + 72);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
      v44[1] = v18;
      uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v49 = ObjectType;
      v48[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v49;
        uint64_t v28 = sub_10000D37C(v48, v49);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v46[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v46[0] = v44[0];
        v46[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v49;
        uint64_t v36 = sub_10000D37C(v48, v49);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v46[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v48);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      id v41 = (void *)swift_allocObject(&unk_1001AE2C0, 40LL, 7LL);
      v41[2] = v45;
      void v41[3] = v13;
      v41[4] = v21;
      id v42 = v21;
      swift_retain(v13);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000B7EB4, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD000000000000031LL, 0x8000000100172F20LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000003ELL, 0x8000000100172EE0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v7;
}

void sub_1000B3820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = a2;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v32 = v10;
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(a4);
  sub_10013E21C(v13);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v15 = [v12 activeTreatmentsForAreas:isa];

  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v33(v11, a3, v8);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v31 = v16 | 7;
  uint64_t v18 = swift_allocObject(&unk_1001AE2E8, v17 + v10, v16 | 7);
  uint64_t v19 = v34;
  uint64_t v20 = v35;
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
  *(void *)(v18 + 24) = v20;
  Swift::String v30 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v30(v18 + v17, v11, v8);
  id v41 = sub_1000B7ED0;
  id v42 = (void *)v18;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE300;
  id v21 = _Block_copy(&aBlock);
  swift_retain(v19);
  id v22 = v20;
  swift_release();
  uint64_t v23 = v15;
  [v15 addErrorBlock:v21];
  _Block_release(v21);
  id v24 = sub_1000B1D08();
  v33(v11, v36, v8);
  uint64_t v25 = (v16 + 40) & ~v16;
  Swift::String v26 = (void *)swift_allocObject(&unk_1001AE338, v25 + v32, v31);
  _OWORD v26[2] = v24;
  void v26[3] = v19;
  v26[4] = v22;
  v30((uint64_t)v26 + v25, v11, v8);
  id v41 = sub_1000B7F3C;
  id v42 = v26;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE350;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_retain(v19);
  id v28 = v22;
  id v29 = v24;
  swift_release();
  [v23 addSuccessBlock:v27];
  _Block_release(v27);
}

uint64_t sub_1000B3AF0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v21 = 0LL;
  uint64_t v12 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
  uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)( a1,  &v21,  &type metadata for String,  v12,  &protocol witness table for String);
  if (v21)
  {
    sub_1000B745C(v21, a2);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5,  v9);
    uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v17 = (v16 + 32) & ~v16;
    uint64_t v18 = swift_allocObject(&unk_1001AE388, v17 + v11, v16 | 7);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
    *(void *)(v18 + 24) = v15;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v18 + v17,  (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
    id v19 = a4;
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000B7F9C, v18);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000B3C50()
{
  uint64_t v23 = v2;
  uint64_t v24 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v6);
  sub_10000DC74();
  uint64_t v7 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v7, &v22);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(inited + 32) = 0x65746144646E65LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE700000000000000LL;
  id v9 = sub_100067888(inited, "endDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v9);

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  sub_1000B84D4();
  id v11 = [v5 stringFromDate:isa];

  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  sub_1000B84C8();
  *(void *)(inited + 48) = v0;
  *(void *)(inited + 56) = v1;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x696669746E656469LL;
  *(void *)(inited + 88) = 0xEA00000000007265LL;
  id v13 = sub_100067888(v12, "identifier");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  sub_1000B84C8();
  *(void *)(inited + 96) = v0;
  *(void *)(inited + 104) = v1;
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for String;
  *(void *)(inited + 128) = 0x7461447472617473LL;
  *(void *)(inited + 136) = 0xE900000000000065LL;
  id v15 = sub_100067888(v14, "startDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

  Class v16 = Date._bridgeToObjectiveC()().super.isa;
  sub_1000B84D4();
  id v17 = [v5 stringFromDate:v16];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v18;
  *(void *)(inited + 152) = v20;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

uint64_t sub_1000B3EAC(uint64_t a1, uint64_t a2)
{
  v6[2] = a1;
  uint64_t v7 = v2;
  uint64_t v8 = a2;
  JSContext.propagateErrorsToExceptions(_:)(sub_1000B7AF8, v6);
  sub_10008E4EC();
  return v2;
}

void *sub_1000B3F1C(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (a2 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), a2))
    {
      uint64_t v45 = a2;
      uint64_t v46 = a1;
      uint64_t v51 = v4;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v16 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v17 = *(void *)(v16 + 72);
      uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
      uint64_t v19 = (v18 + 32) & ~v18;
      uint64_t v20 = swift_allocObject(v15, v19 + 2 * v17, v18 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      v44[1] = v20 + v19;
      uint64_t v50 = type metadata accessor for JSTreatmentStore();
      v49[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v50;
        id v28 = sub_10000D37C(v49, v50);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v47[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
        sub_1000102E0((uint64_t)v47, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v47[0] = v44[0];
        v47[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
        sub_1000102E0((uint64_t)v47, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v50;
        uint64_t v36 = sub_10000D37C(v49, v50);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v47[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
        sub_1000102E0((uint64_t)v47, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v49);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD000000000000017LL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      id v41 = (void *)swift_allocObject(&unk_1001AE1A8, 48LL, 7LL);
      v41[2] = v21;
      void v41[3] = a4;
      v41[4] = v45;
      v41[5] = v13;
      swift_bridgeObjectRetain(a4);
      swift_retain(v13);
      id v42 = v21;
      a2 = (void *)sub_10008C048(v46, (uint64_t)sub_1000B7B50, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD00000000000002ELL, 0x8000000100172DF0LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000003BLL, 0x8000000100172DB0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return a2;
}

uint64_t sub_1000B4358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  id v141 = a6;
  uint64_t v139 = a3;
  uint64_t v143 = a2;
  uint64_t v10 = type metadata accessor for JSCallable(0LL);
  uint64_t v142 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v147 = v11;
  uint64_t v144 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v138 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000D33C(&qword_1001CF970);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  *((void *)&v140 + Hasher._combine(_:)(v1 & 1) = (char *)&v129 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v137 = (uint64_t)&v129 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  *(void *)&__int128 v140 = (char *)&v129 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v149 = (uint64_t)&v129 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  id v28 = (char *)&v129 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  Swift::String v31 = (char *)&v129 - v30;
  __chkstk_darwin(v29);
  id v33 = (char *)&v129 - v32;
  id v145 = a4;
  id v146 = sub_1000B1D08();
  uint64_t v34 = type metadata accessor for Date(0LL);
  uint64_t v148 = v33;
  sub_10000D5C0((uint64_t)v33, 1LL, 1LL, v34);
  uint64_t v35 = &unk_100164000;
  if (!a5)
  {
    __int128 aBlock = 0u;
    __int128 v153 = 0u;
    uint64_t v36 = (uint64_t)v17;
    goto LABEL_7;
  }

  sub_1000308B8(0x7461447472617473LL, 0xE900000000000065LL, a5, &aBlock);
  uint64_t v36 = (uint64_t)v17;
  if (!*((void *)&v153 + 1))
  {
LABEL_7:
    sub_1000102E0((uint64_t)&aBlock, &qword_1001CAAD0);
    goto LABEL_8;
  }

  if ((swift_dynamicCast(&v150, &aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_8:
    uint64_t v40 = *((void *)&v140 + 1);
LABEL_9:
    uint64_t v41 = v140;
    goto LABEL_10;
  }

  uint64_t v136 = a7;
  __int128 v134 = v150;
  NSString v37 = String._bridgeToObjectiveC()();
  id v38 = [v146 dateFromString:v37];

  if (v38)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

    uint64_t v39 = 0LL;
  }

  else
  {
    uint64_t v39 = 1LL;
  }

  uint64_t v73 = (uint64_t)v148;
  sub_1000102E0((uint64_t)v148, &qword_1001CF970);
  sub_10000D5C0((uint64_t)v31, v39, 1LL, v34);
  sub_1000B7B9C((uint64_t)v31, v73);
  sub_100019E24(v73, (uint64_t)v28);
  int v74 = sub_1000102D4((uint64_t)v28, 1LL, v34);
  a7 = v136;
  if (v74 != 1)
  {
    swift_bridgeObjectRelease();
    sub_1000102E0((uint64_t)v28, &qword_1001CF970);
    uint64_t v36 = (uint64_t)v17;
    uint64_t v40 = *((void *)&v140 + 1);
    uint64_t v35 = (_OWORD *)&unk_100164000;
    goto LABEL_9;
  }

  uint64_t v135 = v10;
  sub_1000102E0((uint64_t)v28, &qword_1001CF970);
  uint64_t v36 = (uint64_t)v17;
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v132 = qword_1001DBB30;
  uint64_t v75 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v76 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v77 = *(void *)(v76 + 72);
  uint64_t v78 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v79 = (v78 + 32) & ~v78;
  uint64_t v130 = v77;
  uint64_t v80 = swift_allocObject(v75, v79 + 2 * v77, v78 | 7);
  *(_OWORD *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v131 = v80;
  uint64_t v133 = v80 + v79;
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = type metadata accessor for JSTreatmentStore();
  *(void *)&__int128 aBlock = v145;
  id v81 = (id)AMSLogKey(v145);
  uint64_t v40 = *((void *)&v140 + 1);
  if (v81)
  {
    uint64_t v82 = v81;
    uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
    uint64_t v84 = v83;

    swift_bridgeObjectRetain(v84);
    uint64_t v85 = v138;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v86._uint64_t countAndFlagsBits = 0LL;
    v86._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v86);
    uint64_t v87 = *((void *)&v153 + 1);
    uint64_t v88 = sub_10000D37C(&aBlock, *((uint64_t *)&v153 + 1));
    uint64_t DynamicType = swift_getDynamicType(v88, v87, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v150 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v90._uint64_t countAndFlagsBits = 5972026LL;
    v90._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v90);
    uint64_t MetatypeMetadata = &type metadata for String;
    *(void *)&__int128 v150 = v129;
    *((void *)&v150 + Hasher._combine(_:)(v1 & 1) = v84;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    a7 = v136;
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v91._uint64_t countAndFlagsBits = 93LL;
    v91._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v91);
    LogMessage.init(stringInterpolation:)(v85);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v85 = v138;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v111._uint64_t countAndFlagsBits = 0LL;
    v111._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v111);
    uint64_t v112 = *((void *)&v153 + 1);
    id v113 = sub_10000D37C(&aBlock, *((uint64_t *)&v153 + 1));
    uint64_t v114 = swift_getDynamicType(v113, v112, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v114);
    *(void *)&__int128 v150 = v114;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v115._uint64_t countAndFlagsBits = 58LL;
    v115._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v115);
    LogMessage.init(stringInterpolation:)(v85);
  }

  uint64_t v10 = v135;
  uint64_t v41 = v140;
  sub_10000D3A0(&aBlock);
  *(void *)&__int128 v140 = v133 + v130;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(29LL, 1LL);
  v116._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v116._object = (void *)0x8000000100172E80LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v116);
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
  __int128 aBlock = v134;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&aBlock);
  sub_1000102E0((uint64_t)&aBlock, &qword_1001CAAD0);
  v117._uint64_t countAndFlagsBits = 10530LL;
  v117._object = (void *)0xE200000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v117);
  uint64_t v118 = LogMessage.init(stringInterpolation:)(v85);
  uint64_t v119 = static os_log_type_t.error.getter(v118);
  sub_1000BD1B0(v119, v131);
  swift_bridgeObjectRelease();
  uint64_t v35 = (_OWORD *)&unk_100164000;
LABEL_10:
  sub_10000D5C0(v149, 1LL, 1LL, v34);
  if (!a5)
  {
    __int128 aBlock = 0u;
    __int128 v153 = 0u;
    goto LABEL_16;
  }

  sub_1000308B8(0x65746144646E65LL, 0xE700000000000000LL, a5, &aBlock);
  if (!*((void *)&v153 + 1))
  {
LABEL_16:
    uint64_t v46 = &qword_1001CAAD0;
    p___int128 aBlock = &aBlock;
LABEL_17:
    sub_1000102E0((uint64_t)p_aBlock, v46);
    goto LABEL_18;
  }

  id v42 = v35;
  __int128 v140 = v150;
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v146 dateFromString:v43];

  if (v44)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

    uint64_t v45 = 0LL;
  }

  else
  {
    uint64_t v45 = 1LL;
  }

  uint64_t v92 = v149;
  sub_1000102E0(v149, &qword_1001CF970);
  sub_10000D5C0(v41, v45, 1LL, v34);
  sub_1000B7B9C(v41, v92);
  uint64_t v93 = v137;
  sub_100019E24((uint64_t)v148, v137);
  if (sub_1000102D4(v93, 1LL, v34) != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = &qword_1001CF970;
    p___int128 aBlock = (__int128 *)v93;
    goto LABEL_17;
  }

  uint64_t v135 = v10;
  sub_1000102E0(v93, &qword_1001CF970);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v137 = qword_1001DBB30;
  uint64_t v94 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v95 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v96 = *(void *)(v95 + 72);
  uint64_t v97 = *(unsigned __int8 *)(v95 + 80);
  uint64_t v98 = (v97 + 32) & ~v97;
  *((void *)&v134 + Hasher._combine(_:)(v1 & 1) = v96;
  uint64_t v99 = swift_allocObject(v94, v98 + 2 * v96, v97 | 7);
  *(_OWORD *)(v99 + swift_unknownObjectWeakDestroy(v0 + 16) = v42[35];
  uint64_t v136 = v99;
  *(void *)&__int128 v134 = v99 + v98;
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = type metadata accessor for JSTreatmentStore();
  *(void *)&__int128 aBlock = v145;
  id v100 = (id)AMSLogKey(v145);
  if (v100)
  {
    uint64_t v101 = v100;
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    uint64_t v103 = v102;

    swift_bridgeObjectRetain(v103);
    objc_super v104 = v138;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v105._uint64_t countAndFlagsBits = 0LL;
    v105._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v105);
    uint64_t v106 = *((void *)&v153 + 1);
    uint64_t v107 = sub_10000D37C(&aBlock, *((uint64_t *)&v153 + 1));
    uint64_t v108 = swift_getDynamicType(v107, v106, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v108);
    *(void *)&__int128 v150 = v108;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v109._uint64_t countAndFlagsBits = 5972026LL;
    v109._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v109);
    uint64_t MetatypeMetadata = &type metadata for String;
    *(void *)&__int128 v150 = v133;
    *((void *)&v150 + Hasher._combine(_:)(v1 & 1) = v103;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v110._uint64_t countAndFlagsBits = 93LL;
    v110._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v110);
    LogMessage.init(stringInterpolation:)(v104);
    swift_bridgeObjectRelease();
  }

  else
  {
    objc_super v104 = v138;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v120._uint64_t countAndFlagsBits = 0LL;
    v120._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v120);
    uint64_t v121 = *((void *)&v153 + 1);
    id v122 = sub_10000D37C(&aBlock, *((uint64_t *)&v153 + 1));
    uint64_t v123 = swift_getDynamicType(v122, v121, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v123);
    *(void *)&__int128 v150 = v123;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v150);
    sub_1000102E0((uint64_t)&v150, &qword_1001CAAD0);
    v124._uint64_t countAndFlagsBits = 58LL;
    v124._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v124);
    LogMessage.init(stringInterpolation:)(v104);
  }

  uint64_t v10 = v135;
  sub_10000D3A0(&aBlock);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 1LL);
  v125._object = (void *)0x8000000100172E60LL;
  v125._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v125);
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
  __int128 aBlock = v140;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&aBlock);
  sub_1000102E0((uint64_t)&aBlock, &qword_1001CAAD0);
  v126._uint64_t countAndFlagsBits = 10530LL;
  v126._object = (void *)0xE200000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v126);
  uint64_t v127 = LogMessage.init(stringInterpolation:)(v104);
  uint64_t v128 = static os_log_type_t.error.getter(v127);
  sub_1000BD1B0(v128, v136);
  swift_bridgeObjectRelease();
LABEL_18:
  id v48 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(v141);
  sub_10013E21C(v49);
  v50.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100019E24((uint64_t)v148, v40);
  if (sub_1000102D4(v40, 1LL, v34) == 1)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8LL))(v40, v34);
  }

  uint64_t v52 = v139;
  sub_100019E24(v149, v36);
  if (sub_1000102D4(v36, 1LL, v34) == 1)
  {
    Class v53 = 0LL;
  }

  else
  {
    Class v53 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8LL))(v36, v34);
  }

  id v141 = [v48 treatmentsForAreas:v50.super.isa startDate:isa endDate:v53];

  uint64_t v54 = v142;
  *((void *)&v140 + Hasher._combine(_:)(v1 & 1) = *(void *)(v142 + 16);
  uint64_t v55 = v144;
  (*((void (**)(char *, uint64_t, uint64_t))&v140 + 1))(v144, v52, v10);
  uint64_t v56 = v10;
  uint64_t v57 = *(unsigned __int8 *)(v54 + 80);
  uint64_t v58 = (v57 + 32) & ~v57;
  *(void *)&__int128 v140 = v57 | 7;
  uint64_t v59 = swift_allocObject(&unk_1001AE1D0, v58 + v147, v57 | 7);
  id v60 = v145;
  *(void *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = a7;
  *(void *)(v59 + 24) = v60;
  uint64_t v61 = v59 + v58;
  uint64_t v62 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
  v62(v61, v55, v56);
  uint64_t v154 = sub_1000B7B70;
  uint64_t v155 = (void *)v59;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
  *(void *)&__int128 v153 = sub_1000B1D04;
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = &unk_1001AE1E8;
  uint64_t v63 = _Block_copy(&aBlock);
  id v64 = v60;
  swift_retain(a7);
  swift_release();
  id v65 = v141;
  [v141 addErrorBlock:v63];
  _Block_release(v63);
  (*((void (**)(char *, uint64_t, uint64_t))&v140 + 1))(v55, v143, v56);
  uint64_t v66 = (v57 + 40) & ~v57;
  uint64_t v67 = (void *)swift_allocObject(&unk_1001AE220, v66 + v147, v140);
  id v68 = v146;
  v67[2] = v146;
  void v67[3] = a7;
  v67[4] = v64;
  v62((uint64_t)v67 + v66, v55, v56);
  uint64_t v154 = sub_1000B7B90;
  uint64_t v155 = v67;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
  *(void *)&__int128 v153 = sub_1000B1D04;
  *((void *)&v153 + Hasher._combine(_:)(v1 & 1) = &unk_1001AE238;
  uint64_t v69 = _Block_copy(&aBlock);
  id v70 = v64;
  swift_retain(a7);
  id v71 = v68;
  swift_release();
  [v65 addSuccessBlock:v69];
  _Block_release(v69);

  sub_1000102E0(v149, &qword_1001CF970);
  return sub_1000102E0((uint64_t)v148, &qword_1001CF970);
}

uint64_t sub_1000B5218(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v20 = 0LL;
  uint64_t v12 = sub_10000D33C((uint64_t *)&unk_1001CF980);
  uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)( a1,  &v20,  &type metadata for String,  v12,  &protocol witness table for String);
  if (v20)
  {
    uint64_t v14 = sub_1000B766C(v20, a2);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a5,  v9);
    uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v17 = swift_allocObject(&unk_1001AE270, v16 + v11, v15 | 7);
    *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
    *(void *)(v17 + 24) = v14;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v17 + v16,  (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
    id v18 = a4;
    dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000B7BE8, v17);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000B5400(void *a1, void *a2, void *a3)
{
  uint64_t v7 = 0xD00000000000001ALL;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (uint64_t v15 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), v15))
    {
      uint64_t v45 = v15;
      uint64_t v50 = v3;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      void v44[2] = qword_1001DBB30;
      uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v18 = *(void *)(v17 + 72);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
      v44[1] = v18;
      uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v49 = ObjectType;
      v48[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v49;
        id v28 = sub_10000D37C(v48, v49);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v46[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v46[0] = v44[0];
        v46[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v49;
        uint64_t v36 = sub_10000D37C(v48, v49);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v46[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v48);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      uint64_t v41 = (void *)swift_allocObject(&unk_1001AE090, 40LL, 7LL);
      v41[2] = v45;
      void v41[3] = v13;
      v41[4] = v21;
      id v42 = v21;
      swift_retain(v13);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000B79D0, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD000000000000032LL, 0x8000000100172D00LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD00000000000003FLL, 0x8000000100172CC0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v7;
}

void sub_1000B5838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = a2;
  uint64_t v35 = a6;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v9;
  uint64_t v12 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(a4);
  sub_10013E21C(v15);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v14 experimentDataForAreas:isa];

  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v17 = a3;
  uint64_t v18 = v11;
  v33(v13, v17, v11);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v20 + v12;
  uint64_t v21 = swift_allocObject(&unk_1001AE0B8, v20 + v12, v19 | 7);
  id v22 = v35;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v21 + 24) = v22;
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v23(v21 + v20, v13, v18);
  uint64_t v41 = sub_1000B79EC;
  uint64_t v42 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE0D0;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v25 = v22;
  swift_release();
  id v26 = v34;
  [v34 addErrorBlock:v24];
  _Block_release(v24);
  v33(v13, v36, v18);
  uint64_t v27 = swift_allocObject(&unk_1001AE108, v32, v31);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v27 + 24) = v25;
  v23(v27 + v20, v13, v18);
  uint64_t v41 = sub_1000B7A0C;
  uint64_t v42 = v27;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE120;
  id v28 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v29 = v25;
  swift_release();
  [v26 addSuccessBlock:v28];
  _Block_release(v28);
}

uint64_t sub_1000B5B34(void *a1, void *a2, void *a3)
{
  uint64_t v7 = 0xD000000000000012LL;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v12 = static RunLoopWorkerThread.current.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = sub_1000B78B8(a2);
    if (v14 && (uint64_t v15 = sub_1000B21B0(v14), swift_bridgeObjectRelease(), v15))
    {
      uint64_t v45 = v15;
      uint64_t v50 = v3;
      if (qword_1001C7FB0 != -1) {
        swift_once(&qword_1001C7FB0, sub_1000BD500);
      }
      void v44[2] = qword_1001DBB30;
      uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v18 = *(void *)(v17 + 72);
      uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
      v44[1] = v18;
      uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
      *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v49 = ObjectType;
      v48[0] = a3;
      id v21 = a3;
      id v22 = (id)AMSLogKey(v21);
      if (v22)
      {
        uint64_t v23 = v22;
        v44[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        swift_bridgeObjectRetain(v25);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v49;
        id v28 = sub_10000D37C(v48, v49);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v46[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v46[0] = v44[0];
        v46[1] = v25;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v11);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v34._uint64_t countAndFlagsBits = 0LL;
        v34._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v34);
        uint64_t v35 = v49;
        uint64_t v36 = sub_10000D37C(v48, v49);
        uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
        v46[0] = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
        sub_1000102E0((uint64_t)v46, &qword_1001CAAD0);
        v38._uint64_t countAndFlagsBits = 58LL;
        v38._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        LogMessage.init(stringInterpolation:)(v11);
      }

      sub_10000D3A0(v48);
      uint64_t v39 = LogMessage.init(stringLiteral:)(0xD000000000000012LL);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      sub_1000BD1B0(v40, v20);
      swift_bridgeObjectRelease();
      sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
      uint64_t v41 = (void *)swift_allocObject(&unk_1001ADF78, 40LL, 7LL);
      v41[2] = v45;
      void v41[3] = v13;
      v41[4] = v21;
      id v42 = v21;
      swift_retain(v13);
      uint64_t v7 = sub_10008C048(a1, (uint64_t)sub_1000B7914, (uint64_t)v41);
      swift_release();
      swift_release();
    }

    else
    {
      type metadata accessor for JSError();
      id v32 = sub_10008F29C(2LL, 0xD00000000000002ALL, 0x8000000100172C30LL, 0LL, 0LL);
      swift_willThrow(v32);
      swift_release();
    }
  }

  else
  {
    type metadata accessor for JSError();
    id v33 = sub_10008F29C(12LL, 0xD000000000000037LL, 0x8000000100172BF0LL, 0LL, 0LL);
    swift_willThrow(v33);
  }

  return v7;
}

void sub_1000B5F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v36 = a2;
  uint64_t v35 = a6;
  uint64_t v9 = type metadata accessor for JSCallable(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v9;
  uint64_t v12 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v14 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  swift_bridgeObjectRetain(a4);
  sub_10013E21C(v15);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v14 treatmentsPayloadForAreas:isa];

  id v33 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v17 = a3;
  uint64_t v18 = v11;
  v33(v13, v17, v11);
  uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v20 + v12;
  uint64_t v21 = swift_allocObject(&unk_1001ADFA0, v20 + v12, v19 | 7);
  id v22 = v35;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v21 + 24) = v22;
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v23(v21 + v20, v13, v18);
  uint64_t v41 = sub_1000B7930;
  uint64_t v42 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001ADFB8;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v25 = v22;
  swift_release();
  id v26 = v34;
  [v34 addErrorBlock:v24];
  _Block_release(v24);
  v33(v13, v36, v18);
  uint64_t v27 = swift_allocObject(&unk_1001ADFF0, v32, v31);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v27 + 24) = v25;
  v23(v27 + v20, v13, v18);
  uint64_t v41 = sub_1000B7950;
  uint64_t v42 = v27;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v38 = 1107296256LL;
  uint64_t v39 = sub_1000B1D04;
  uint64_t v40 = &unk_1001AE008;
  id v28 = _Block_copy(&aBlock);
  swift_retain(a5);
  id v29 = v25;
  swift_release();
  [v26 addSuccessBlock:v28];
  _Block_release(v28);
}

#error "1000B6254: call analysis failed (funcsize=34)"
void sub_1000B629C()
{
  unint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t DynamicType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t *v27;
  void *v28;
  void v29[3];
  uint64_t v30;
  sub_1000292AC();
  uint64_t v27 = v0;
  id v28 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10000DC74();
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = type metadata accessor for LogMessage(0LL);
  uint64_t v10 = sub_1000B84C0( v9,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
        + 3LL * *(void *)(*(void *)(v9 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v30 = type metadata accessor for JSTreatmentStore();
  v29[0] = v7;
  uint64_t v11 = (id)AMSLogKey(v7);
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    id v14 = v13;

    swift_bridgeObjectRetain(v14);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v15 = v30;
    uint64_t v16 = sub_10000D37C(v29, v30);
    uint64_t DynamicType = swift_getDynamicType(v16, v15, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DEA4();
    sub_1000B8488();
    sub_10000DC14();
    sub_10000DEA4();
    sub_1000B8488();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100009020();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_10009A370();
    uint64_t v18 = sub_1000258E8();
    uint64_t v19 = sub_1000B8410(v18);
    sub_1000B8494(v19, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  LogMessage.init(stringLiteral:)(v3);
  uint64_t v20 = sub_10000DAA0(0LL, v27, v28);
  uint64_t v30 = v20;
  v29[0] = v5;
  uint64_t v21 = v5;
  sub_1000B849C();
  id v22 = sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
  uint64_t v23 = static os_log_type_t.default.getter(v22);
  sub_1000BD1B0(v23, v10);
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_10000D33C(&qword_1001C8F70);
  id v25 = sub_10009A3FC(v24);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v25 + 56) = v20;
  *(void *)(v25 + 32) = v21;
  id v26 = v21;
  sub_1000B84B4();
  sub_100009020();
  sub_10000DD84();
}

uint64_t sub_1000B6540(uint64_t a1)
{
  uint64_t v4 = v1;
  JSContext.propagateErrorsToExceptions(_:)(sub_1000B7050, &v3);
  sub_10008E4EC();
  return v1;
}

uint64_t sub_1000B659C(void *a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType(a2);
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v8 = static RunLoopWorkerThread.current.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v46 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v41 = qword_1001DBB30;
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v12 = *(void *)(v11 + 72);
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v40 = v12;
    uint64_t v14 = swift_allocObject(v10, ((v13 + 32) & ~v13) + 2 * v12, v13 | 7);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v45 = ObjectType;
    v44[0] = a2;
    id v15 = a2;
    id v16 = (id)AMSLogKey(v15);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      swift_bridgeObjectRetain(v19);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v20._uint64_t countAndFlagsBits = 0LL;
      v20._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v20);
      uint64_t v21 = v45;
      id v22 = sub_10000D37C(v44, v45);
      uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v42[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
      v24._uint64_t countAndFlagsBits = 5972026LL;
      v24._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t MetatypeMetadata = &type metadata for String;
      v42[0] = v39;
      v42[1] = v19;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
      v25._uint64_t countAndFlagsBits = 93LL;
      v25._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      LogMessage.init(stringInterpolation:)(v7);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v28._uint64_t countAndFlagsBits = 0LL;
      v28._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      uint64_t v29 = v45;
      uint64_t v30 = sub_10000D37C(v44, v45);
      uint64_t v31 = swift_getDynamicType(v30, v29, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v31);
      v42[0] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_1000102E0((uint64_t)v42, &qword_1001CAAD0);
      v32._uint64_t countAndFlagsBits = 58LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v7);
    }

    sub_10000D3A0(v44);
    uint64_t v33 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
    uint64_t v34 = static os_log_type_t.default.getter(v33);
    sub_1000BD1B0(v34, v14);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v35 = swift_allocObject(&unk_1001ADE60, 32LL, 7LL);
    *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    *(void *)(v35 + 24) = v15;
    id v36 = v15;
    swift_retain(v9);
    uint64_t v26 = sub_10008C048(v46, (uint64_t)sub_1000B7090, v35);
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v26 = type metadata accessor for JSError();
    id v27 = sub_10008F29C(12LL, 0xD000000000000032LL, 0x8000000100172B40LL, 0LL, 0LL);
    swift_willThrow(v27);
  }

  return v26;
}

void sub_1000B6954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v28 = a2;
  uint64_t v8 = type metadata accessor for JSCallable(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
  id v26 = [v12 synchronizeTreatments];

  id v27 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27(v11, a3, v8);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v24 = v13 | 7;
  uint64_t v25 = v14 + v10;
  uint64_t v15 = swift_allocObject(&unk_1001ADE88, v14 + v10, v13 | 7);
  uint64_t v16 = a4;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v15 + 24) = a5;
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v17(v15 + v14, v11, v8);
  uint64_t v33 = sub_1000B70AC;
  uint64_t v34 = v15;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  uint64_t v31 = sub_1000B1D04;
  Swift::String v32 = &unk_1001ADEA0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain(a4);
  id v19 = a5;
  swift_release();
  id v20 = v26;
  [v26 addErrorBlock:v18];
  _Block_release(v18);
  v27(v11, v28, v8);
  uint64_t v21 = swift_allocObject(&unk_1001ADED8, v25, v24);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v21 + 24) = v19;
  v17(v21 + v14, v11, v8);
  uint64_t v33 = sub_1000B70E4;
  uint64_t v34 = v21;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v30 = 1107296256LL;
  uint64_t v31 = sub_100061FB8;
  Swift::String v32 = &unk_1001ADEF0;
  id v22 = _Block_copy(&aBlock);
  swift_retain(v16);
  id v23 = v19;
  swift_release();
  [v20 addSuccessBlock:v22];
  _Block_release(v22);
}

uint64_t sub_1000B6BB0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for JSCallable(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a3,  v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_1001ADF28, v9 + v7, v8 | 7);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v10 + v9,  (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  id v11 = a2;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000B7138, v10);
  return swift_release();
}

uint64_t sub_1000B6C98(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v32 = type metadata accessor for JSTreatmentStore();
  v31[0] = a1;
  id v8 = (id)AMSLogKey(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v14 = v32;
    uint64_t v15 = sub_10000D37C(v31, v32);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v29[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v29);
    sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
    v17._uint64_t countAndFlagsBits = 5972026LL;
    v17._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t MetatypeMetadata = &type metadata for String;
    v29[0] = v10;
    v29[1] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v29);
    sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v32;
    uint64_t v21 = sub_10000D37C(v31, v32);
    uint64_t v22 = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    v29[0] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v29);
    sub_1000102E0((uint64_t)v29, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 58LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v31);
  uint64_t v24 = LogMessage.init(stringLiteral:)(0xD000000000000017LL);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_1000BD1B0(v25, v7);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v27 = swift_allocObject(v26, 64LL, 7LL);
  *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v27 + 56) = &type metadata for Bool;
  *(_BYTE *)(v27 + 32) = 1;
  sub_1000854F0(v27);
  return swift_bridgeObjectRelease();
}

id sub_1000B6FC0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd16JSTreatmentStore____lazy_storage___dateFormatter] = 0LL;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for JSTreatmentStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd16JSTreatmentStore);
}

uint64_t sub_1000B7050(void *a1)
{
  return sub_1000B659C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1000B7068()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000B7090(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000B70AC(uint64_t a1)
{
}

uint64_t sub_1000B70C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B70D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B70E4()
{
  uint64_t v0 = sub_1000B83F4();
  return sub_1000B6BB0(v0, v1, v2);
}

uint64_t sub_1000B70FC()
{
  uint64_t v0 = sub_1000A6568();
  return sub_100051AA4(v0, v1, v2);
}

uint64_t sub_1000B7138()
{
  return sub_1000B6C98(*(void **)(v0 + 16));
}

void sub_1000B7168()
{
}

uint64_t sub_1000B7180(void *a1)
{
  return sub_1000B5B34(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000B7198(uint64_t a1)
{
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)v2;
  int64_t v4 = 0LL;
  uint64_t v31 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v27 = (void *)v2;
  uint64_t v28 = a1 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v29 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v30 = v2 + 64;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v31 + 56) + 8 * i);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v32 = *v14;
      unint64_t v33 = v8;
      uint64_t v19 = sub_10000D33C(&qword_1001C8EA0);
      uint64_t v20 = (void *)swift_allocObject(v19, 16 * v18 + 32, 7LL);
      size_t v21 = j__malloc_size(v20);
      _OWORD v20[2] = v18;
      void v20[3] = 2 * ((uint64_t)(v21 - 32) / 16);
      uint64_t v35 = sub_100104224((uint64_t)&v34, v20 + 4, v18, v17);
      uint64_t v22 = v34;
      swift_bridgeObjectRetain_n(v17, 2LL);
      swift_bridgeObjectRetain(v16);
      sub_10004844C(v22);
      if (v35 != v18) {
        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = v27;
      unint64_t v8 = v33;
      uint64_t v15 = v32;
    }

    else
    {
      swift_bridgeObjectRetain(v14[1]);
      uint64_t v20 = _swiftEmptyArrayStorage;
    }

    *(void *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    Swift::String v23 = (void *)(v3[6] + 16 * i);
    *Swift::String v23 = v15;
    v23[1] = v16;
    *(void *)(v3[7] + 8 * i) = v20;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v3[2] = v26;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_29;
    }
    if (v11 >= v29) {
      return;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v29) {
        return;
      }
      unint64_t v12 = *(void *)(v28 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v29) {
          return;
        }
        unint64_t v12 = *(void *)(v28 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }

void sub_1000B745C(uint64_t a1, void *a2)
{
  uint64_t v3 = static _DictionaryStorage.copy(original:)(a1);
  int64_t v4 = (void *)v3;
  int64_t v5 = 0LL;
  uint64_t v28 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v26 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v27 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v3 + 64;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v28 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void **)(*(void *)(v28 + 56) + 8 * i);
    swift_bridgeObjectRetain(v18);
    id v20 = v19;
    uint64_t v21 = sub_1000B3C50();

    *(void *)(v10 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v22 = (void *)(v4[6] + 16 * i);
    *uint64_t v22 = v17;
    v22[1] = v18;
    *(void *)(v4[7] + 8 * i) = v21;
    uint64_t v23 = v4[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v4[2] = v25;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_24;
    }
    if (v13 >= v27) {
      goto LABEL_22;
    }
    unint64_t v14 = *(void *)(v26 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v27) {
        goto LABEL_22;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v27) {
          goto LABEL_22;
        }
        unint64_t v14 = *(void *)(v26 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }

_OWORD *sub_1000B766C(uint64_t a1, void *a2)
{
  uint64_t result = (_OWORD *)static _DictionaryStorage.copy(original:)(a1);
  int64_t v4 = result;
  int64_t v5 = 0LL;
  uint64_t v27 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & v6;
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v26 = result + 4;
  if ((v8 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v10 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v5 << 6))
  {
    int64_t v15 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v27 + 56) + 8 * i);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    sub_1000B1A9C(v18, a2);
    uint64_t v20 = v19;
    uint64_t v30 = sub_10000D33C(&qword_1001CB4C0);
    swift_bridgeObjectRelease();
    *(void *)&__int128 v29 = v20;
    *(void *)((char *)v26 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v21 = (void *)(v4[6] + 16 * i);
    *uint64_t v21 = v17;
    v21[1] = v16;
    uint64_t result = sub_10000DA58(&v29, (_OWORD *)(v4[7] + 32 * i));
    uint64_t v22 = v4[2];
    BOOL v12 = __OFADD__(v22, 1LL);
    uint64_t v23 = v22 + 1;
    if (v12)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v4[2] = v23;
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v5++, 1LL);
    if (v12) {
      goto LABEL_25;
    }
    if (v5 >= v25) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v5);
    if (!v13) {
      break;
    }
LABEL_15:
    unint64_t v9 = (v13 - 1) & v13;
  }

  int64_t v14 = v5 + 1;
  if (v5 + 1 >= v25) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13) {
    goto LABEL_14;
  }
  int64_t v14 = v5 + 2;
  if (v5 + 2 >= v25) {
    goto LABEL_23;
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13) {
    goto LABEL_14;
  }
  int64_t v14 = v5 + 3;
  if (v5 + 3 >= v25)
  {
LABEL_23:

    return v4;
  }

  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
LABEL_14:
    int64_t v5 = v14;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v5 >= v25) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_15;
    }
  }

uint64_t sub_1000B78B8(void *a1)
{
  id v1 = [a1 toArray];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  return v3;
}

void sub_1000B7914()
{
}

void sub_1000B7930(uint64_t a1)
{
}

void sub_1000B7950(uint64_t a1)
{
}

void sub_1000B7970()
{
}

void sub_1000B799C()
{
}

uint64_t sub_1000B79B4(void *a1)
{
  return sub_1000B5400(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000B79D0()
{
}

void sub_1000B79EC(uint64_t a1)
{
}

void sub_1000B7A0C(uint64_t a1)
{
}

uint64_t sub_1000B7A2C()
{
  uint64_t v0 = sub_1000A6568();
  return sub_100051AA4(v0, v1, v2);
}

void sub_1000B7A6C()
{
}

void sub_1000B7A94()
{
}

void sub_1000B7AE0()
{
}

void *sub_1000B7AF8(void *a1)
{
  return sub_1000B3F1C(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000B7B14()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000B7B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B4358(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32), *(void *)(v3 + 40));
}

void sub_1000B7B70(uint64_t a1)
{
}

uint64_t sub_1000B7B90(uint64_t a1)
{
  return sub_1000B7F48(a1, (uint64_t (*)(uint64_t, void, void, void, char *))sub_1000B5218);
}

uint64_t sub_1000B7B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CF970);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000B7BE8()
{
}

void sub_1000B7C08(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v11 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v21 = v11;
        uint64_t v12 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v4 = v22;
        swift_unknownObjectRelease(v11);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v14 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v13 & ~v14;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v15 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            uint64_t v17 = ~v14;
            do
            {
              unint64_t v7 = (v7 + 1) & v17;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v18 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v19 = static NSObject.== infix(_:_:)(v18, v4);
            }

            while ((v19 & 1) == 0);
          }

LABEL_20:
          id v20 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

uint64_t sub_1000B7E70(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

void sub_1000B7E80()
{
}

uint64_t sub_1000B7E98(void *a1)
{
  return sub_1000B33E8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000B7EB4()
{
}

void sub_1000B7ED0(uint64_t a1)
{
}

uint64_t sub_1000B7EF0()
{
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000B7F3C(uint64_t a1)
{
  return sub_1000B7F48(a1, (uint64_t (*)(uint64_t, void, void, void, char *))sub_1000B3AF0);
}

uint64_t sub_1000B7F48(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, char *))
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  return a2(a1, *((void *)v2 + 2), *((void *)v2 + 3), *((void *)v2 + 4), &v2[(v4 + 40) & ~v4]);
}

void sub_1000B7F9C()
{
}

void sub_1000B7FC0()
{
}

uint64_t sub_1000B7FD8(void *a1)
{
  return sub_1000B2658(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000B7FF4()
{
}

void sub_1000B8010(uint64_t a1)
{
}

void sub_1000B8030(uint64_t a1)
{
}

void sub_1000B8050()
{
}

void sub_1000B8074()
{
}

uint64_t sub_1000B808C(void *a1)
{
  return sub_1000B1D78(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000B80A8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000B80DC()
{
}

void sub_1000B80F8(uint64_t a1)
{
}

uint64_t sub_1000B8118()
{
  uint64_t v0 = sub_1000A6568();
  return sub_100051AA4(v0, v1, v2);
}

void sub_1000B816C(uint64_t a1)
{
}

void sub_1000B8188( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(sub_1000841C0() - 8) + 80LL);
  a4(a1, *(void *)(v4 + 16), *(void *)(v4 + 24), v4 + ((v9 + 32) & ~v9), a2, a3);
  sub_10001A094();
}

uint64_t sub_1000B81E4()
{
  uint64_t v0 = sub_1000A6568();
  return sub_100051AA4(v0, v1, v2);
}

void sub_1000B8228()
{
}

void sub_1000B8248()
{
}

uint64_t sub_1000B8288()
{
  uint64_t v1 = *(void *)(sub_1000841C0() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = (*(void *)(v1 + 64) + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL;

  sub_100051B30();
  swift_errorRelease(*(void *)(v0 + v4));
  return swift_deallocObject(v0, v4 + 8, v3);
}

void sub_1000B8308()
{
}

void sub_1000B8320()
{
}

void sub_1000B83E4()
{
}

void sub_1000B83EC()
{
}

uint64_t sub_1000B83F4()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1000B8410(uint64_t a1)
{
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  *(void *)(v2 - 144) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 144);
}

uint64_t sub_1000B8420( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)&a9 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9,  v10);
}

uint64_t sub_1000B8448(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1 + v1, v3, v2);
}

void sub_1000B845C()
{
}

  ;
}

uint64_t sub_1000B8470()
{
  return sub_1000102E0(v1 - 144, v0);
}

uint64_t sub_1000B847C()
{
  return sub_1000102E0(v1 - 144, v0);
}

uint64_t sub_1000B8488()
{
  return sub_1000102E0(v1 - 144, v0);
}

uint64_t sub_1000B8494(uint64_t a1, uint64_t *a2)
{
  return sub_1000102E0(v2 - 144, a2);
}

uint64_t sub_1000B849C()
{
  return static LogMessage.safe(_:)(v0 - 112);
}

uint64_t sub_1000B84A8()
{
  return dispatch thunk of RunLoopWorkerThread.schedule(task:)(v0, v1);
}

void sub_1000B84B4()
{
}

uint64_t sub_1000B84C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocObject(v3, a2, a3);
}

void sub_1000B84C8()
{
}

uint64_t sub_1000B84D4()
{
  return v2(v0, v1);
}

  ;
}

uint64_t sub_1000B84F4(uint64_t a1, uint64_t a2)
{
  return sub_1000B8DD4(a1, a2, (uint64_t)sub_1000BACF4);
}

void sub_1000B8500( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v11 = type metadata accessor for JSCallable(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  char v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v56, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    id v18 = (void *)Strong;
    sub_10000DAA0(0LL, &qword_1001CD950, &OBJC_CLASS___UNUserNotificationCenter_ptr);
    swift_bridgeObjectRetain(a6);
    id v19 = sub_1000F9678();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v48,  v11);
    uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_1001AE798, v21 + v13, v20 | 7);
    uint64_t v23 = v49;
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v49;
    *(void *)(v22 + 24) = v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v22 + v21,  (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11);
    uint64_t v52 = sub_1000BAE40;
    uint64_t v53 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F96E0;
    uint64_t MetatypeMetadata = &unk_1001AE7B0;
    uint64_t v24 = _Block_copy(aBlock);
    swift_retain(v23);
    id v25 = v18;
    swift_release();
    [v19 getNotificationSettingsWithCompletionHandler:v24];
    _Block_release(v24);
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = type metadata accessor for LogMessage(0LL);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v27 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a8);
    aBlock[0] = a8;
    id v29 = (id)AMSLogKey(MetatypeMetadata);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t v35 = MetatypeMetadata;
      id v36 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v36, v35, 1LL);
      uint64_t v55 = (void *)swift_getMetatypeMetadata(DynamicType);
      v54[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v38._uint64_t countAndFlagsBits = 5972026LL;
      v38._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v55 = &type metadata for String;
      v54[0] = v31;
      v54[1] = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v39._uint64_t countAndFlagsBits = 93LL;
      v39._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      LogMessage.init(stringInterpolation:)(v16);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v40._uint64_t countAndFlagsBits = 0LL;
      v40._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t v41 = MetatypeMetadata;
      uint64_t v42 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v43 = swift_getDynamicType(v42, v41, 1LL);
      uint64_t v55 = (void *)swift_getMetatypeMetadata(v43);
      v54[0] = v43;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v44._uint64_t countAndFlagsBits = 58LL;
      v44._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      LogMessage.init(stringInterpolation:)(v16);
    }

    sub_10000D3A0(aBlock);
    uint64_t v45 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v46 = static os_log_type_t.error.getter(v45);
    sub_1000BD1B0(v46, v28);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000B8928(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1001AE7E8, v11 + v9, v10 | 7);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  id v13 = a1;
  id v14 = a3;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000BAEE4, v12);
  return swift_release();
}

uint64_t sub_1000B8A1C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000D33C(&qword_1001CBEA8);
  uint64_t inited = swift_initStackObject(v7, v40);
  __int128 v35 = xmmword_100164220;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0xD000000000000013LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x80000001001717B0LL;
  *(void *)(inited + 48) = [a1 authorizationStatus];
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + 3LL * *(void *)(v11 + 72),
          *(unsigned __int8 *)(v11 + 80) | 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v39 = type metadata accessor for JSUserNotifications();
  v38[0] = a2;
  id v13 = (id)AMSLogKey(a2);
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v39;
    uint64_t v20 = sub_10000D37C(v38, v39);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v36[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000E888((uint64_t)v36);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t MetatypeMetadata = &type metadata for String;
    v36[0] = v15;
    v36[1] = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000E888((uint64_t)v36);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = v39;
    uint64_t v26 = sub_10000D37C(v38, v39);
    uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    v36[0] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10000E888((uint64_t)v36);
    v28._uint64_t countAndFlagsBits = 58LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v38);
  LogMessage.init(stringLiteral:)(0xD000000000000030LL);
  uint64_t v29 = sub_10000D33C(&qword_1001CBEB0);
  uint64_t v39 = v29;
  v38[0] = v9;
  swift_bridgeObjectRetain(v9);
  static LogMessage.safe(_:)(v38);
  uint64_t v30 = sub_10000E888((uint64_t)v38);
  uint64_t v31 = static os_log_type_t.default.getter(v30);
  sub_1000BD1B0(v31, v12);
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v33 = swift_allocObject(v32, 64LL, 7LL);
  *(_OWORD *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
  *(void *)(v33 + 56) = v29;
  *(void *)(v33 + 32) = v9;
  sub_1000854E4(v33);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B8DC8(uint64_t a1, uint64_t a2)
{
  return sub_1000B8DD4(a1, a2, (uint64_t)sub_1000BABB4);
}

uint64_t sub_1000B8DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t ObjectType = swift_getObjectType(v3);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
  uint64_t v9 = (void *)static JSContext.requiredCurrent.getter();
  v12[2] = v5;
  v12[3] = a1;
  v12[4] = a2;
  v12[5] = ObjectType;
  uint64_t v10 = JSContext.propagateErrorsToExceptions(_:)(a3, v12);

  return v10;
}

uint64_t sub_1000B8E64( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v49 = a8;
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  type metadata accessor for RunLoopWorkerThread(0LL);
  uint64_t v15 = static RunLoopWorkerThread.current.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v43 = a1;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = type metadata accessor for LogMessage(0LL);
    uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v18 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v48 = (void *)type metadata accessor for JSUserNotifications();
    v47[0] = a2;
    id v20 = a2;
    id v21 = (id)AMSLogKey(v20);
    if (v21)
    {
      Swift::String v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      id v42 = v20;
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      sub_10000E8C8();
      uint64_t v26 = v48;
      uint64_t v27 = sub_10000D37C(v47, (uint64_t)v48);
      uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v45[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100037DE0();
      v29._uint64_t countAndFlagsBits = 5972026LL;
      v29._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      uint64_t MetatypeMetadata = &type metadata for String;
      v45[0] = v23;
      v45[1] = v25;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100037DE0();
      v30._uint64_t countAndFlagsBits = 93LL;
      v30._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      sub_1000BAF74();
      id v20 = v42;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_10000E8C8();
      uint64_t v33 = v48;
      Swift::String v34 = sub_10000D37C(v47, (uint64_t)v48);
      uint64_t v35 = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v35);
      v45[0] = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
      sub_100037DE0();
      v36._uint64_t countAndFlagsBits = 58LL;
      v36._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      sub_1000BAF74();
    }

    sub_10000D3A0(v47);
    LogMessage.init(stringLiteral:)(a6);
    uint64_t v48 = &type metadata for String;
    v47[0] = a3;
    v47[1] = a4;
    swift_bridgeObjectRetain(a4);
    static LogMessage.safe(_:)(v47);
    uint64_t v37 = sub_10000E888((uint64_t)v47);
    uint64_t v38 = static os_log_type_t.default.getter(v37);
    sub_1000BD1B0(v38, v19);
    swift_bridgeObjectRelease();
    sub_10000DAA0(0LL, (unint64_t *)&qword_1001CB4B0, &OBJC_CLASS___JSContext_ptr);
    uint64_t v39 = swift_allocObject(&unk_1001AE608, 24LL, 7LL);
    swift_unknownObjectWeakInit(v39 + 16, v20);
    Swift::String v40 = (void *)swift_allocObject(v49, 56LL, 7LL);
    void v40[2] = v39;
    void v40[3] = a3;
    v40[4] = a4;
    void v40[5] = v16;
    v40[6] = a5;
    swift_bridgeObjectRetain(a4);
    swift_retain(v39);
    swift_retain(v16);
    uint64_t v31 = sub_10008C048(v43, a9, (uint64_t)v40);
    swift_release();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v31 = type metadata accessor for JSError();
    id v32 = sub_10008F29C(12LL, 0xD00000000000002CLL, 0x8000000100170F60LL, 0LL, 0LL);
    swift_willThrow(v32);
  }

  return v31;
}

void sub_1000B923C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a2;
  uint64_t v52 = a7;
  uint64_t v12 = type metadata accessor for JSCallable(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v59, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    id v20 = (void *)Strong;
    sub_10000DAA0(0LL, &qword_1001CD950, &OBJC_CLASS___UNUserNotificationCenter_ptr);
    swift_bridgeObjectRetain(a6);
    id v50 = sub_1000F9678();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v51,  v12);
    uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v22 = (v21 + 48) & ~v21;
    uint64_t v23 = (char *)swift_allocObject(&unk_1001AE6F8, v22 + v14, v21 | 7);
    uint64_t v24 = v52;
    *((void *)v23 + 2) = v52;
    *((void *)v23 + 3) = a5;
    *((void *)v23 + 4) = a6;
    *((void *)v23 + 5) = v20;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v23[v22], v15, v12);
    uint64_t v55 = sub_1000BAC5C;
    uint64_t v56 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F96E0;
    uint64_t MetatypeMetadata = &unk_1001AE710;
    uint64_t v25 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a6);
    swift_retain(v24);
    id v26 = v20;
    swift_release();
    id v27 = v50;
    [v50 getNotificationSettingsWithCompletionHandler:v25];
    _Block_release(v25);
  }

  else
  {
    uint64_t v28 = a8;
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v29 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v30 = type metadata accessor for LogMessage(0LL);
    uint64_t v31 = swift_allocObject( v29,  ((*(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v30 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    aBlock[0] = v28;
    id v32 = (id)AMSLogKey(MetatypeMetadata);
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v36 = v35;

      swift_bridgeObjectRetain(v36);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v37._uint64_t countAndFlagsBits = 0LL;
      v37._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t v38 = MetatypeMetadata;
      uint64_t v39 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v39, v38, 1LL);
      uint64_t v58 = (void *)swift_getMetatypeMetadata(DynamicType);
      v57[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v41._uint64_t countAndFlagsBits = 5972026LL;
      v41._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      uint64_t v58 = &type metadata for String;
      v57[0] = v34;
      v57[1] = v36;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v42._uint64_t countAndFlagsBits = 93LL;
      v42._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      LogMessage.init(stringInterpolation:)(v18);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v43._uint64_t countAndFlagsBits = 0LL;
      v43._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      Swift::String v44 = MetatypeMetadata;
      uint64_t v45 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v46 = swift_getDynamicType(v45, v44, 1LL);
      uint64_t v58 = (void *)swift_getMetatypeMetadata(v46);
      v57[0] = v46;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000E888((uint64_t)v57);
      v47._uint64_t countAndFlagsBits = 58LL;
      v47._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      LogMessage.init(stringInterpolation:)(v18);
    }

    sub_10000D3A0(aBlock);
    uint64_t v48 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v49 = static os_log_type_t.error.getter(v48);
    sub_1000BD1B0(v49, v31);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000B9674(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v20[1] = a2;
  uint64_t v11 = type metadata accessor for JSCallable(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a6,  v11);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 48) & ~v14;
  uint64_t v16 = (char *)swift_allocObject(&unk_1001AE748, v15 + v13, v14 | 7);
  *((void *)v16 + 2) = a3;
  *((void *)v16 + 3) = a4;
  *((void *)v16 + 4) = a1;
  *((void *)v16 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))( &v16[v15],  (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11);
  swift_bridgeObjectRetain(a4);
  id v17 = a1;
  id v18 = a5;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000BACD0, v16);
  return swift_release();
}

uint64_t sub_1000B9784(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v41[2] = a5;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v9, v46);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(inited + 32) = 0xD000000000000016LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100173460LL;
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___AMSRestrictions);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 explicitContentSettingForBundleID:v12];

  *(void *)(inited + 48) = v13;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xD000000000000014LL;
  *(void *)(inited + 88) = 0x8000000100173280LL;
  uint64_t v14 = sub_1000B9BB0();
  uint64_t v15 = sub_10000D33C(&qword_1001C8F18);
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v15;
  *(void *)(inited + 96) = v14;
  uint64_t v16 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  v41[1] = qword_1001DBB30;
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = type metadata accessor for LogMessage(0LL);
  uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL))
        + 3LL * *(void *)(*(void *)(v18 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v45 = type metadata accessor for JSUserNotifications();
  v44[0] = a4;
  id v20 = (id)AMSLogKey(a4);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v45;
    id v27 = sub_10000D37C(v44, v45);
    uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v42[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v29._uint64_t countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t MetatypeMetadata = &type metadata for String;
    v42[0] = v22;
    v42[1] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v30._uint64_t countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v32 = v45;
    uint64_t v33 = sub_10000D37C(v44, v45);
    uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
    v42[0] = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000E888((uint64_t)v42);
    v35._uint64_t countAndFlagsBits = 58LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(v44);
  LogMessage.init(stringLiteral:)(0xD000000000000031LL);
  uint64_t v45 = v15;
  v44[0] = v16;
  swift_bridgeObjectRetain(v16);
  static LogMessage.safe(_:)(v44);
  uint64_t v36 = sub_10000E888((uint64_t)v44);
  uint64_t v37 = static os_log_type_t.default.getter(v36);
  sub_1000BD1B0(v37, v19);
  swift_bridgeObjectRelease();
  uint64_t v38 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v39 = swift_allocObject(v38, 64LL, 7LL);
  *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v39 + 56) = v15;
  *(void *)(v39 + 32) = v16;
  sub_1000854E4(v39);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B9BB0()
{
  uint64_t v1 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v1, v33);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167010;
  strcpy((char *)(inited + 32), "alertSetting");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  id v3 = sub_10008FAC0(inited, "alertSetting");
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x7974537472656C61LL;
  *(void *)(inited + 88) = 0xEA0000000000656CLL;
  *(void *)(inited + 96) = sub_10008FAC0((uint64_t)v3, "alertStyle");
  *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for Int;
  *(void *)(inited + 128) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 136) = v4;
  *(void *)(inited + 144) = sub_10008FAC0(v5, "announcementSetting");
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 176) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 184) = v6;
  id v8 = sub_10008FAC0(v7, "authorizationStatus");
  *(void *)(inited + 192) = v8;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
  strcpy((char *)(inited + 224), "badgeSetting");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  id v9 = sub_10008FAC0((uint64_t)v8, "badgeSetting");
  *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v9;
  *(void *)(inited + 264) = &type metadata for Int;
  strcpy((char *)(inited + 272), "carPlaySetting");
  *(_BYTE *)(inited + 287) = -18;
  *(void *)(inited + 288) = sub_10008FAC0((uint64_t)v9, "carPlaySetting");
  *(void *)(inited + 312) = &type metadata for Int;
  *(void *)(inited + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xD000000000000014LL;
  sub_100048B94();
  *(void *)(inited + 328) = v10;
  *(void *)(inited + 336) = sub_10008FAC0(v11, "criticalAlertSetting");
  *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for Int;
  *(void *)(inited + 368) = 0xD000000000000015LL;
  sub_1000BAF54();
  *(void *)(inited + 376) = v12;
  id v14 = sub_10008FAC0(v13, "directMessagesSetting");
  *(void *)(inited + 384) = v14;
  *(void *)(inited + 408) = &type metadata for Int;
  *(void *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 16) = 0x676E6970756F7267LL;
  *(void *)(inited + 424) = 0xEF676E6974746553LL;
  *(void *)(inited + 432) = sub_10008FAC0((uint64_t)v14, "groupingSetting");
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = 0xD000000000000011LL;
  sub_1000BAF54();
  *(void *)(inited + 472) = v15;
  *(void *)(inited + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10008FAC0(v16, "lockScreenSetting");
  *(void *)(inited + 504) = &type metadata for Int;
  *(void *)(inited + 512) = 0xD000000000000019LL;
  sub_1000BAF54();
  *(void *)(inited + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v17;
  id v19 = sub_10008FAC0(v18, "notificationCenterSetting");
  *(void *)(inited + 552) = &type metadata for Int;
  *(void *)(inited + 528) = v19;
  *(void *)(inited + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xD00000000000001FLL;
  sub_1000BAF54();
  *(void *)(inited + 568) = v20;
  unsigned __int8 v21 = [v0 providesAppNotificationSettings];
  *(void *)(inited + 60_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for Bool;
  *(_BYTE *)(inited + 576) = v21;
  *(void *)(inited + 608) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  id v24 = sub_10008FAC0(v23, "showPreviewsSetting");
  *(void *)(inited + 648) = &type metadata for Int;
  *(void *)(inited + 624) = v24;
  strcpy((char *)(inited + 656), "soundSetting");
  *(_BYTE *)(inited + 669) = 0;
  *(_WORD *)(inited + 67_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = -5120;
  id v25 = sub_10008FAC0((uint64_t)v24, "soundSetting");
  *(void *)(inited + 696) = &type metadata for Int;
  *(void *)(inited + 672) = v25;
  *(void *)(inited + 704) = 0xD000000000000018LL;
  sub_1000BAF54();
  *(void *)(inited + 712) = v26;
  id v28 = sub_10008FAC0(v27, "scheduledDeliverySetting");
  *(void *)(inited + 744) = &type metadata for Int;
  *(void *)(inited + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v28;
  *(void *)(inited + 752) = 0xD000000000000014LL;
  sub_100048B94();
  *(void *)(inited + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v29;
  id v31 = sub_10008FAC0(v30, "timeSensitiveSetting");
  *(void *)(inited + 792) = &type metadata for Int;
  *(void *)(inited + 768) = v31;
  return Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
}

uint64_t sub_1000B9F08(uint64_t a1, uint64_t a2)
{
  return sub_1000B8DD4(a1, a2, (uint64_t)sub_1000BA8E4);
}

void sub_1000B9F14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v11 = type metadata accessor for JSCallable(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a4 += 16LL;
  swift_beginAccess(a4, v56, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a4);
  if (Strong)
  {
    uint64_t v18 = (void *)Strong;
    sub_10000DAA0(0LL, &qword_1001CD950, &OBJC_CLASS___UNUserNotificationCenter_ptr);
    swift_bridgeObjectRetain(a6);
    id v19 = sub_1000F9678();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v48,  v11);
    uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v21 = (v20 + 32) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_1001AE658, v21 + v13, v20 | 7);
    uint64_t v23 = v49;
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v49;
    *(void *)(v22 + 24) = v18;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v22 + v21,  (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11);
    uint64_t v52 = sub_1000BA978;
    uint64_t v53 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000F96E4;
    uint64_t MetatypeMetadata = &unk_1001AE670;
    id v24 = _Block_copy(aBlock);
    swift_retain(v23);
    id v25 = v18;
    swift_release();
    [v19 getNotificationSettingsForTopicsWithCompletionHandler:v24];
    _Block_release(v24);
  }

  else
  {
    if (qword_1001C7FB0 != -1) {
      swift_once(&qword_1001C7FB0, sub_1000BD500);
    }
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = type metadata accessor for LogMessage(0LL);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v27 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(a8);
    aBlock[0] = a8;
    id v29 = (id)AMSLogKey(MetatypeMetadata);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      Swift::String v35 = MetatypeMetadata;
      uint64_t v36 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v36, v35, 1LL);
      uint64_t v55 = (void *)swift_getMetatypeMetadata(DynamicType);
      v54[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v38._uint64_t countAndFlagsBits = 5972026LL;
      v38._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v55 = &type metadata for String;
      v54[0] = v31;
      v54[1] = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v39._uint64_t countAndFlagsBits = 93LL;
      v39._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      LogMessage.init(stringInterpolation:)(v16);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v40._uint64_t countAndFlagsBits = 0LL;
      v40._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      Swift::String v41 = MetatypeMetadata;
      Swift::String v42 = sub_10000D37C(aBlock, (uint64_t)MetatypeMetadata);
      uint64_t v43 = swift_getDynamicType(v42, v41, 1LL);
      uint64_t v55 = (void *)swift_getMetatypeMetadata(v43);
      v54[0] = v43;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
      sub_10000E888((uint64_t)v54);
      v44._uint64_t countAndFlagsBits = 58LL;
      v44._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      LogMessage.init(stringInterpolation:)(v16);
    }

    sub_10000D3A0(aBlock);
    uint64_t v45 = LogMessage.init(stringLiteral:)(0x6E617620666C6553LL);
    uint64_t v46 = static os_log_type_t.error.getter(v45);
    sub_1000BD1B0(v46, v28);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000BA33C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for JSCallable(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v7);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1001AE6A8, v11 + v9, v10 | 7);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v12 + v11,  (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7);
  swift_bridgeObjectRetain(a1);
  id v13 = a3;
  dispatch thunk of RunLoopWorkerThread.schedule(task:)(sub_1000BA9A8, v12);
  return swift_release();
}

uint64_t sub_1000BA434(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38[-2] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000D33C(&qword_1001CBE98);
  uint64_t inited = swift_initStackObject(v7, v42);
  __int128 v37 = xmmword_100164220;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 32) = 0xD000000000000014LL;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100173280LL;
  sub_1000BA9B4(a1);
  *(void *)(inited + 48) = v9;
  uint64_t v10 = sub_10000D33C(&qword_1001CBE50);
  uint64_t v11 = Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v10, &protocol witness table for String);
  if (qword_1001C7FB0 != -1) {
    swift_once(&qword_1001C7FB0, sub_1000BD500);
  }
  uint64_t v12 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v13 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v14 = swift_allocObject( v12,  ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
        + 3LL * *(void *)(v13 + 72),
          *(unsigned __int8 *)(v13 + 80) | 7LL);
  *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v41 = type metadata accessor for JSUserNotifications();
  v40[0] = a2;
  id v15 = (id)AMSLogKey(a2);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v19 = v18;

    swift_bridgeObjectRetain(v19);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v21 = v41;
    uint64_t v22 = sub_10000D37C(v40, v41);
    uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v38[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000E888((uint64_t)v38);
    v24._uint64_t countAndFlagsBits = 5972026LL;
    v24._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t MetatypeMetadata = &type metadata for String;
    v38[0] = v17;
    v38[1] = v19;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000E888((uint64_t)v38);
    v25._uint64_t countAndFlagsBits = 93LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = v41;
    uint64_t v28 = sub_10000D37C(v40, v41);
    uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
    v38[0] = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000E888((uint64_t)v38);
    v30._uint64_t countAndFlagsBits = 58LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v40);
  LogMessage.init(stringLiteral:)(0xD00000000000003CLL);
  uint64_t v31 = sub_10000D33C(&qword_1001CBEA0);
  uint64_t v41 = v31;
  v40[0] = v11;
  swift_bridgeObjectRetain(v11);
  static LogMessage.safe(_:)(v40);
  uint64_t v32 = sub_10000E888((uint64_t)v40);
  uint64_t v33 = static os_log_type_t.default.getter(v32);
  sub_1000BD1B0(v33, v14);
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_10000D33C(&qword_1001C8F70);
  uint64_t v35 = swift_allocObject(v34, 64LL, 7LL);
  *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v37;
  *(void *)(v35 + 56) = v31;
  *(void *)(v35 + 32) = v11;
  sub_1000854E4(v35);
  return swift_bridgeObjectRelease();
}

id sub_1000BA7E4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v8 = v7;
  id v9 = a1;
  uint64_t v10 = (void *)a4(v6, v8);

  swift_bridgeObjectRelease(v8);
  return v10;
}

id sub_1000BA844()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSUserNotifications();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000BA894()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for JSUserNotifications();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for JSUserNotifications()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd19JSUserNotifications);
}

void sub_1000BA8E4()
{
}

uint64_t sub_1000BA928()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000BA950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAD8C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_1000B9F14);
}

uint64_t sub_1000BA96C()
{
  return sub_1000BADBC((void (*)(void))&_swift_release);
}

uint64_t sub_1000BA978(uint64_t a1)
{
  return sub_1000BAE4C(a1, (uint64_t (*)(uint64_t, void, void, uint64_t))sub_1000BA33C);
}

uint64_t sub_1000BA984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BA994(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BA99C()
{
  return sub_1000BADBC((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000BA9A8()
{
  return sub_1000BAEF0((uint64_t (*)(void, void, uint64_t))sub_1000BA434);
}

void sub_1000BA9B4(uint64_t a1)
{
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v3 = (void *)v2;
  int64_t v4 = 0LL;
  uint64_t v29 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v27 = v6;
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v2 + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v29 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Swift::String v20 = *(void **)(*(void *)(v29 + 56) + 8 * i);
    swift_bridgeObjectRetain(v19);
    id v21 = v20;
    uint64_t v22 = sub_1000B9BB0();

    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v23 = (void *)(v3[6] + 16 * i);
    *uint64_t v23 = v18;
    v23[1] = v19;
    *(void *)(v3[7] + 8 * i) = v22;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v26;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v14 >= v28) {
      return;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v28) {
        return;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v28) {
          return;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

void sub_1000BABB4()
{
}

uint64_t sub_1000BABFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAD8C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_1000B923C);
}

uint64_t sub_1000BAC18()
{
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000BAC5C(void *a1)
{
  return sub_1000B9674(a1, v4, v5, v6, v7, v1 + v3);
}

uint64_t sub_1000BAC8C()
{
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000BACD0()
{
  return sub_1000B9784(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), v0 + v1);
}

void sub_1000BACF4()
{
}

uint64_t sub_1000BAD3C()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000BAD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAD8C( a1,  a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))sub_1000B8500);
}

uint64_t sub_1000BAD8C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void, void, void, void, void))
{
  return a4(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], v4[6]);
}

uint64_t sub_1000BADB0()
{
  return sub_1000BADBC((void (*)(void))&_swift_release);
}

uint64_t sub_1000BADBC(void (*a1)(void))
{
  uint64_t v3 = sub_1000841C0();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  a1(*(void *)(v1 + 16));

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  return swift_deallocObject(v1, v7, v8);
}

uint64_t sub_1000BAE40(uint64_t a1)
{
  return sub_1000BAE4C(a1, (uint64_t (*)(uint64_t, void, void, uint64_t))sub_1000B8928);
}

uint64_t sub_1000BAE4C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, uint64_t))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), v2 + v4);
}

uint64_t sub_1000BAE8C()
{
  sub_100051B30();
  uint64_t v1 = sub_1000A6568();
  return sub_100051AA4(v1, v2, v3);
}

uint64_t sub_1000BAEE4()
{
  return sub_1000BAEF0((uint64_t (*)(void, void, uint64_t))sub_1000B8A1C);
}

uint64_t sub_1000BAEF0(uint64_t (*a1)(void, void, uint64_t))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), v1 + v2);
}

  ;
}

  ;
}

uint64_t sub_1000BAF60( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000B8E64(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a7, a8, a9);
}

  ;
}

uint64_t sub_1000BAF74()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

  ;
}

  ;
}

id sub_1000BAFA8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = sub_10000D37C(a1, v2);
  uint64_t v4 = _bridgeAnythingToObjectiveC<A>(_:)(v3, v2);
  NSString v5 = String._bridgeToObjectiveC()();
  id v11 = 0LL;
  unsigned int v6 = [v1 setValue:v4 forKey:v5 error:&v11];
  swift_unknownObjectRelease(v4);

  id v7 = v11;
  if (v6) {
    return v11;
  }
  id v9 = v11;
  _convertNSErrorToError(_:)(v7);

  return (id)swift_willThrow(v10);
}

uint64_t sub_1000BB09C()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v6 = 0LL;
  id v2 = [v0 valueForKey:v1 error:&v6];

  id v3 = v6;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    return swift_unknownObjectRelease(v2);
  }

  else
  {
    NSString v5 = v3;
    _convertNSErrorToError(_:)(v3);

    return swift_willThrow();
  }

id sub_1000BB170(void *a1)
{
  return sub_1000BAFA8(a1);
}

uint64_t sub_1000BB190()
{
  return sub_1000BB09C();
}

void sub_1000BB1B0()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v3, 0x65636976726573LL, 0xE700000000000000LL);
  qword_1001DBB00 = v0;
  sub_100009044();
}

void sub_1000BB204()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDACC();
    sub_10000E008();
    sub_10000DD38(16LL);
    uint64_t v9 = sub_1000BD9E8();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BB364()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDACC();
    sub_1000BDAA0();
    uint64_t v9 = sub_1000BD9E8();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BB4B4()
{
}

void sub_1000BB4D4()
{
}

void sub_1000BB4FC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  os_log_type_t v5 = sub_1000BD9CC();
  if (sub_1000BDB20(v5))
  {
    unsigned int v19 = sub_1000BDBF4();
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v6 = *(void *)(sub_1000BD998() - 8);
    uint64_t v7 = sub_1000BD98C( ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 4LL * *(void *)(v6 + 72),
           *(unsigned __int8 *)(v6 + 80));
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    id v21 = (void *)sub_1000BDABC();
    v20[0] = v3;
    swift_retain(v1);
    uint64_t v8 = swift_retain(v3);
    id v9 = (id)AMSLogKey(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v12 = v11;

      swift_bridgeObjectRetain(v12);
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DDF8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v13 = v21;
      int64_t v14 = sub_10000D37C(v20, (uint64_t)v21);
      sub_10000DC54((uint64_t)v14, (uint64_t)v13);
      sub_10000DF48();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v20);
    sub_10000E008();
    sub_10000DD38(26LL);
    sub_10001A21C(v17);
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    id v21 = (void *)sub_1000BDAC4();
    v20[0] = v1;
    sub_10001065C();
    sub_10003AD7C();
    sub_10000DC08();
    sub_10000DC5C();
    uint64_t v15 = sub_1000BDB68();
    id v21 = &type metadata for String;
    sub_1000BDB88(v15, v16);
    sub_10003AD7C();
    sub_1000BD1B0(v19, v7);
    sub_100037230();
    sub_10000DE74();
  }

  else
  {
    sub_100037230();
  }

  sub_10001A2D8();
  sub_10000DD84();
}

void sub_1000BB718()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    LogMessage.init(stringLiteral:)(0x2865756575716E65LL);
    sub_1000BDC2C(0x6E65206B636F6C42LL);
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BB8AC()
{
  os_log_type_t v2 = sub_1000BD8FC();
  BOOL v3 = sub_1000BD9B0(v2);
  if (v3)
  {
    uint64_t v4 = static os_log_type_t.default.getter(v3);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v5 = sub_1000BD998();
    uint64_t v6 = (__n128 *)sub_1000BD98C( ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
                   + 3LL * *(void *)(*(void *)(v5 - 8) + 72LL),
                     *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL));
    uint64_t v7 = sub_1000BD9BC(v6, (__n128)xmmword_100164240);
    uint64_t v8 = sub_1000BD93C(v7);
    id v9 = (id)AMSLogKey(v8);
    if (v9)
    {
      sub_1000BDA70((uint64_t)v9);

      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_10000E008();
    sub_10000DD38(24LL);
    sub_1000105B4(0xD000000000000027LL);
    sub_1000BD1B0(v4, (uint64_t)v6);
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v10 = sub_1000BDA80();
    sub_10004875C(v10);
  }

void sub_1000BBA34()
{
  os_log_type_t v3 = sub_1000BD9CC();
  BOOL v4 = sub_1000BDB20(v3);
  if (v4)
  {
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v6 = *(void *)(*(void *)(sub_1000BDBE0() - 8) + 72LL);
    sub_1000BDB78();
    *(_OWORD *)(sub_1000BDC00(v0 + 3 * v6, v7) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v8 = sub_1000BDABC();
    uint64_t v9 = sub_1000BDB2C(v8);
    id v10 = (id)AMSLogKey(v9);
    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      sub_1000BDBB0();
      swift_bridgeObjectRetain(v1);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v11 = v20;
      uint64_t v12 = sub_10000D37C(v19, v20);
      uint64_t v13 = sub_10000DC54((uint64_t)v12, v11);
      swift_getMetatypeMetadata(v13);
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      uint64_t v5 = v18;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE74();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v14 = v20;
      uint64_t v15 = sub_10000D37C(v19, v20);
      sub_10000DC54((uint64_t)v15, v14);
      sub_1000BDBEC();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v19);
    sub_1000105B4(0xD000000000000018LL);
    sub_10001A21C(19LL);
    sub_100048BA0();
    v16._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = sub_1000BDAC4();
    sub_1000BD93C(v17);
    sub_10001065C();
    sub_10003AD7C();
    sub_10000DC08();
    sub_10000DC5C();
    sub_1000BDB5C(v5);
    sub_100037230();
    sub_10000DCFC();
  }

  else
  {
    sub_100037230();
  }

  sub_10001A2D8();
  sub_10000DD84();
}

void sub_1000BBC2C()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = sub_1000BDB20(v7);
  if (v8)
  {
    unsigned int v28 = static os_log_type_t.default.getter(v8);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v9 = *(void *)(sub_1000BD998() - 8);
    uint64_t v10 = sub_1000BD98C( ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + 4LL * *(void *)(v9 + 72),
            *(unsigned __int8 *)(v9 + 80));
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    uint64_t v11 = sub_1000BDABC();
    uint64_t v12 = sub_1000BD93C(v11);
    id v13 = (id)AMSLogKey(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v27 = v1;
      uint64_t v17 = v16;

      swift_bridgeObjectRetain(v17);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v18 = *((void *)&v33 + 1);
      unsigned int v19 = sub_10000D37C(&v32, *((uint64_t *)&v33 + 1));
      sub_10000DC54((uint64_t)v19, v18);
      uint64_t v31 = (void *)sub_10000DF48();
      uint64_t v29 = v18;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      uint64_t v31 = &type metadata for String;
      uint64_t v29 = v15;
      uint64_t v30 = v17;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      uint64_t v1 = v27;
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v21 = *((void *)&v33 + 1);
      uint64_t v22 = sub_10000D37C(&v32, *((uint64_t *)&v33 + 1));
      sub_10000DC54((uint64_t)v22, v21);
      uint64_t v31 = (void *)sub_10000DF48();
      uint64_t v29 = v21;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(&v32);
    sub_10000E008();
    sub_10000DD38(24LL);
    sub_10001A21C(11LL);
    v23._uint64_t countAndFlagsBits = 0x6E696E7275746572LL;
    v23._object = (void *)0xEB00000000203A67LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t v24 = *v1;
    if (*v1)
    {
      *((void *)&v33 + Hasher._combine(_:)(v1 & 1) = sub_1000BDAC4();
      *(void *)&__int128 v32 = v24;
    }

    else
    {
      __int128 v32 = 0u;
      __int128 v33 = 0u;
    }

    swift_retain(v24);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v32);
    sub_10003AD7C();
    sub_10000DC08();
    LogMessage.init(stringInterpolation:)(v5);
    uint64_t v25 = PriorityQueue.debugDescription.getter();
    *((void *)&v33 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
    *(void *)&__int128 v32 = v25;
    *((void *)&v32 + Hasher._combine(_:)(v1 & 1) = v26;
    static LogMessage.safe(_:)(&v32);
    sub_10003AD7C();
    sub_1000BD1B0(v28, v10);
    sub_10001A2D8();
    sub_10000DCFC();
    sub_10000DD84();
  }

  else
  {
    uint64_t v20 = sub_1000BDA80();
    sub_10004875C(v20);
  }

void sub_1000BBEDC()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_10000DD38(38LL);
    sub_1000BDAA0();
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC040()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_1000105B4(0xD000000000000026LL);
    sub_10000E008();
    sub_10000DD38(18LL);
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC1B8()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_1000105B4(0xD000000000000026LL);
    sub_10000E008();
    sub_10000DD38(21LL);
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC330()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_10000DD38(38LL);
    sub_1000BDC2C(0x2065726F6D206F4ELL);
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC4B4()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_10000D3A0(v11);
    sub_1000BD9F8();
    sub_1000BDAA0();
    uint64_t v9 = sub_1000BD9E8();
    v11[3] = &type metadata for String;
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC610()
{
}

void sub_1000BC62C()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_10000D3A0(v11);
    sub_1000BD9F8();
    LogMessage.init(stringLiteral:)(1701736260LL);
    uint64_t v9 = sub_1000BD9E8();
    v11[3] = &type metadata for String;
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BC794()
{
  os_log_type_t v3 = sub_1000BD9CC();
  BOOL v4 = sub_1000BDB20(v3);
  if (v4)
  {
    uint64_t v5 = static os_log_type_t.default.getter(v4);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v6 = *(void *)(*(void *)(sub_1000BDBE0() - 8) + 72LL);
    sub_1000BDB78();
    *(_OWORD *)(sub_1000BDC00(v0 + 4 * v6, v7) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    uint64_t v8 = sub_1000BDABC();
    uint64_t v9 = sub_1000BDB2C(v8);
    id v10 = (id)AMSLogKey(v9);
    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      sub_1000BDBB0();
      swift_bridgeObjectRetain(v1);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v11 = v22;
      uint64_t v12 = sub_10000D37C(v21, (uint64_t)v22);
      uint64_t v13 = sub_10000DC54((uint64_t)v12, (uint64_t)v11);
      swift_getMetatypeMetadata(v13);
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      uint64_t v5 = v20;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE74();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v14 = v22;
      uint64_t v15 = sub_10000D37C(v21, (uint64_t)v22);
      sub_10000DC54((uint64_t)v15, (uint64_t)v14);
      sub_1000BDBEC();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v21);
    sub_1000BDA8C();
    sub_10001A21C(14LL);
    v16._uint64_t countAndFlagsBits = 0x6965756575716E45LL;
    v16._object = (void *)0xEE00206F7420676ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = sub_1000BDAC4();
    sub_1000BD93C(v17);
    sub_10001065C();
    sub_10003AD7C();
    sub_10000DC08();
    sub_10000DC5C();
    uint64_t v18 = PriorityQueue.debugDescription.getter();
    uint64_t v22 = &type metadata for String;
    v21[0] = v18;
    v21[1] = v19;
    static LogMessage.safe(_:)(v21);
    sub_10003AD7C();
    sub_1000BDB5C(v5);
    sub_100037230();
    sub_10000DCFC();
  }

  else
  {
    sub_100037230();
  }

  sub_10001A2D8();
  sub_10000DD84();
}

void sub_1000BC9B8()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    BOOL v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_1000BDA8C();
    LogMessage.init(stringLiteral:)(0x696D726F66726550LL);
    uint64_t v9 = sub_1000BD9E8();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BCB34()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    BOOL v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_1000BDA8C();
    uint64_t v9 = sub_1000BDB98();
    LogMessage.init(stringLiteral:)(v9);
    uint64_t v10 = sub_1000BD9E8();
    sub_1000BD97C(v10, v11);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BCCA0()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    BOOL v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BD9BC(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_1000BDA8C();
    uint64_t v9 = sub_1000BDB98();
    sub_1000BDC2C(v9);
    uint64_t v10 = sub_1000BD9E8();
    sub_1000BD97C(v10, v11);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

void sub_1000BCE08()
{
}

void sub_1000BCE30()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  os_log_type_t v3 = sub_1000BD9CC();
  if (sub_1000BDB20(v3))
  {
    unsigned int v21 = sub_1000BDBF4();
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v4 = *(void *)(*(void *)(sub_1000BD998() - 8) + 72LL);
    sub_1000BDB78();
    *(_OWORD *)(sub_1000BD98C(v1 + 4 * v4, v5) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    uint64_t v6 = sub_1000BDABC();
    uint64_t v7 = sub_1000BDB2C(v6);
    id v8 = (id)AMSLogKey(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v11 = v10;

      swift_bridgeObjectRetain(v11);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v12 = v23;
      uint64_t v13 = sub_10000D37C(v22, (uint64_t)v23);
      sub_10000DC54((uint64_t)v13, (uint64_t)v12);
      sub_1000BDBEC();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DDF8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v14 = v23;
      uint64_t v15 = sub_10000D37C(v22, (uint64_t)v23);
      sub_10000DC54((uint64_t)v15, (uint64_t)v14);
      sub_10000DF48();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v22);
    sub_1000BD9F8();
    sub_10001A21C(v19);
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t v16 = sub_1000BDAC4();
    sub_1000BD93C(v16);
    sub_10001065C();
    sub_10003AD7C();
    sub_10000DC08();
    sub_10000DC5C();
    uint64_t v17 = sub_1000BDB68();
    Swift::String v23 = &type metadata for String;
    sub_1000BDB88(v17, v18);
    sub_10003AD7C();
    sub_1000BDB5C(v21);
    sub_100037230();
    sub_10000DCFC();
  }

  else
  {
    sub_100037230();
  }

  sub_10001A2D8();
  sub_10000DD84();
}

void sub_1000BD028()
{
  os_log_type_t v1 = sub_1000BD8FC();
  BOOL v2 = sub_1000BD9B0(v1);
  if (v2)
  {
    static os_log_type_t.default.getter(v2);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v3 = sub_1000BD998();
    uint64_t v4 = (__n128 *)sub_1000BD8B4(v3);
    uint64_t v5 = sub_1000BDA34(v4, (__n128)xmmword_1001649D0);
    uint64_t v6 = sub_1000BD93C(v5);
    id v7 = (id)AMSLogKey(v6);
    if (v7)
    {
      sub_1000BDA70((uint64_t)v7);
      sub_1000BD95C();
      sub_100020BB4();
      sub_10000DC34();
      sub_10000DC08();
      sub_1000BD918();
      sub_1000BDA78();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_100025910();
      sub_100020AB8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000BD8D8();
      sub_1000BDA54();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_100025910();
    }

    sub_1000BDA1C();
    sub_10000DD38(38LL);
    LogMessage.init(stringLiteral:)(0x74697720656E6F44LL);
    uint64_t v9 = sub_1000BDA44();
    sub_1000BD97C(v9, v10);
    sub_10003AD7C();
    sub_1000BD96C();
    sub_10001A2D8();
    sub_10000DDF8();
    sub_10000DD84();
  }

  else
  {
    uint64_t v8 = sub_1000BDA80();
    sub_10004875C(v8);
  }

uint64_t sub_1000BD1B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = os_log_type_enabled(*(os_log_t *)(v2 + 16), (os_log_type_t)a1);
  if ((_DWORD)result)
  {
    uint64_t v6 = objc_autoreleasePoolPush();
    char v7 = static LogMessage.isRedactionEnabled.getter();
    uint64_t v8 = static LogMessage.describe(contentsOf:withRedaction:separator:)(a2, v7 & 1, 32LL, 0xE100000000000000LL);
    uint64_t v10 = v9;
    objc_autoreleasePoolPop(v6);
    uint64_t v11 = objc_autoreleasePoolPush();
    sub_1000BD26C(v2, a1, v8, v10);
    objc_autoreleasePoolPop(v11);
    return swift_bridgeObjectRelease(v10);
  }

  return result;
}

uint64_t sub_1000BD26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = sub_10000D33C(&qword_1001CA728);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_10008E390();
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a4;
  swift_bridgeObjectRetain(a4);
  os_log(_:dso:log:type:_:)("%{public}@", 10LL, 2LL, &_mh_execute_header, v7, a2, v9);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_1000BD324()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for Log()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd3Log);
}

void sub_1000BD368()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDB04();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v4, v3 | 0x6174616400000000LL, 0xEC00000065736162LL);
  qword_1001DBB08 = v0;
  sub_100009044();
}

void sub_1000BD3BC()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDB04();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDBD8(v2, v4, v3 | 0x69676E6500000000LL, 25966LL);
  qword_1001DBB10 = v0;
  sub_100009044();
}

void sub_1000BD408()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDB04();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB3C(v2, v3, v4);
  qword_1001DBB18 = v0;
  sub_100009044();
}

void sub_1000BD448()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_100048BA0();
  sub_1000BDC0C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 19LL, v4);
  qword_1001DBB20 = v0;
  sub_100009044();
}

void sub_1000BD4A4()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_100048BA0();
  sub_1000BDC0C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 16LL, v4);
  qword_1001DBB28 = v0;
  sub_100009044();
}

void sub_1000BD500()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_100048BA0();
  sub_1000BDC0C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 23LL, v4);
  qword_1001DBB30 = v0;
  sub_100009044();
}

void sub_1000BD55C()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_100048BA0();
  sub_1000BDC0C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 18LL, v4);
  qword_1001DBB38 = v0;
  sub_100009044();
}

void sub_1000BD5B8()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_1000BDC18();
  sub_100048BA0();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 17LL, 0x80000001001735F0LL);
  qword_1001DBB40 = v0;
  sub_100009044();
}

void sub_1000BD60C()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v3, 0x726F74617267696DLL, 0xE800000000000000LL);
  qword_1001DBB48 = v0;
  sub_100009044();
}

void sub_1000BD660()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v3, 0x797469726F697270LL, 0xEE0065756575712DLL);
  qword_1001DBB50 = v0;
  sub_100009044();
}

void sub_1000BD6C0()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDBD8(v2, v3, 0x696C756465686373LL, 26478LL);
  qword_1001DBB58 = v0;
  sub_100009044();
}

void sub_1000BD714()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  sub_1000BDC18();
  sub_100048BA0();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB54(v2, v3, 17LL, 0x8000000100173610LL);
  qword_1001DBB60 = v0;
  sub_100009044();
}

void sub_1000BD768()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v3, 0x7069726373627573LL, 0xEC0000006E6F6974LL);
  qword_1001DBB68 = v0;
  sub_100009044();
}

void sub_1000BD7C4()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDBC0();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = OS_os_log.init(subsystem:category:)(v2, v4, v3 | 0x746361736E610000LL, 0xEB000000006E6F69LL);
  qword_1001DBB70 = v0;
  sub_100009044();
}

void sub_1000BD81C()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDBC0();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDBD8(v2, v4, v3 | 0x6E656D7461650000LL, 29556LL);
  qword_1001DBB78 = v0;
  sub_100009044();
}

void sub_1000BD86C()
{
  uint64_t v1 = type metadata accessor for Log();
  sub_100020AF8(v1);
  sub_1000BD9A4();
  unint64_t v2 = sub_1000BDA5C();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1000BDB3C(v2, v3, 0x2D637078u);
  qword_1001DBB80 = v0;
  sub_100009044();
}

uint64_t sub_1000BD8B4(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 4LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1000BD8D8()
{
  uint64_t v1 = *(void *)(v0 - 88);
  unint64_t v2 = sub_10000D37C((void *)(v0 - 112), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000BD8FC()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000BD918()
{
  uint64_t v1 = *(void *)(v0 - 88);
  unint64_t v2 = sub_10000D37C((void *)(v0 - 112), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000BD93C(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 112) = v1;
  return swift_retain(v1);
}

uint64_t sub_1000BD94C()
{
  return type metadata accessor for LogMessage.StringInterpolation(0LL);
}

void sub_1000BD95C()
{
}

uint64_t sub_1000BD96C()
{
  return sub_1000BD1B0(v1, v0);
}

uint64_t sub_1000BD97C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = a2;
  return static LogMessage.safe(_:)(v2 - 112);
}

uint64_t sub_1000BD98C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_1000BD998()
{
  return type metadata accessor for LogMessage(0LL);
}

unint64_t sub_1000BD9A4()
{
  return sub_10009B96C();
}

BOOL sub_1000BD9B0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000BD9BC(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for PriorityQueue();
}

uint64_t sub_1000BD9CC()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000BD9E8()
{
  return PriorityQueue.debugDescription.getter();
}

uint64_t sub_1000BD9F8()
{
  return LogMessage.init(stringLiteral:)(0x6C69746E556E7572LL);
}

uint64_t sub_1000BDA1C()
{
  return sub_10000D3A0((void *)(v0 - 112));
}

uint64_t sub_1000BDA34(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for Worker();
}

uint64_t sub_1000BDA44()
{
  return sub_100103518();
}

uint64_t sub_1000BDA54()
{
  return swift_getMetatypeMetadata();
}

unint64_t sub_1000BDA5C()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000BDA70(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1000BDA78()
{
  return swift_getMetatypeMetadata();
}

uint64_t sub_1000BDA80()
{
  return v0;
}

uint64_t sub_1000BDA8C()
{
  return LogMessage.init(stringLiteral:)(0xD000000000000013LL);
}

uint64_t sub_1000BDAA0()
{
  return LogMessage.init(stringLiteral:)(0x676E696E6E7552LL);
}

uint64_t sub_1000BDABC()
{
  return type metadata accessor for PriorityQueue();
}

uint64_t sub_1000BDAC4()
{
  return type metadata accessor for Worker();
}

uint64_t sub_1000BDACC()
{
  return LogMessage.init(stringLiteral:)(0x2872656972726162LL);
}

unint64_t sub_1000BDB04()
{
  return 0xD000000000000018LL;
}

BOOL sub_1000BDB20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000BDB2C(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 112) = v1;
  return swift_retain(v1);
}

uint64_t sub_1000BDB3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return OS_os_log.init(subsystem:category:)(a1, a2, a3 | 0x6974636100000000LL, 0xEC00000079746976LL);
}

uint64_t sub_1000BDB54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OS_os_log.init(subsystem:category:)(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a4);
}

uint64_t sub_1000BDB5C(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_1000BDB68()
{
  return PriorityQueue.debugDescription.getter();
}

  ;
}

uint64_t sub_1000BDB88(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 104) = a2;
  return static LogMessage.safe(_:)(v2 - 112);
}

uint64_t sub_1000BDB98()
{
  return 0x2065756575716E45LL;
}

void sub_1000BDBB0()
{
  *(_DWORD *)(v2 - 148) = v0;
}

unint64_t sub_1000BDBC0()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000BDBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return OS_os_log.init(subsystem:category:)(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEA00000000000000LL);
}

uint64_t sub_1000BDBE0()
{
  return type metadata accessor for LogMessage(0LL);
}

uint64_t sub_1000BDBEC()
{
  return swift_getMetatypeMetadata();
}

uint64_t sub_1000BDBF4()
{
  *(void *)(v3 - 176) = v2;
  *(void *)(v3 - 168) = v1;
  *(void *)(v3 - 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v0;
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000BDC00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

  ;
}

unint64_t sub_1000BDC18()
{
  return 0xD000000000000018LL;
}

uint64_t sub_1000BDC2C(uint64_t a1)
{
  return LogMessage.init(stringLiteral:)(a1);
}

void sub_1000BDC34(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000D33C(&qword_1001CBFA0);
    uint64_t v2 = (void *)sub_1000BEC90();
  }

  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }

  sub_1000BE894(a1, v40);
  uint64_t v3 = (uint64_t *)v40[0];
  uint64_t v4 = v40[3];
  unint64_t v5 = v40[4];
  int64_t v32 = (unint64_t)(v40[2] + 64LL) >> 6;
  uint64_t v33 = v40[1];
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = (char *)&type metadata for Any + 8;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v7 = (v5 - 1) & v5;
  unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v8 = __clz(__rbit64(v13)) + (i << 6))
  {
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * v8);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_10000DA1C(v3[7] + 32 * v8, (uint64_t)v39);
    v38[0] = v18;
    v38[1] = v17;
    sub_10000DA1C((uint64_t)v39, (uint64_t)v37);
    swift_bridgeObjectRetain_n(v17, 2LL);
    sub_1000102E0((uint64_t)v38, &qword_1001C9908);
    if (!swift_dynamicCast(&v35, v37, v6, &type metadata for String, 6LL))
    {
      uint64_t v35 = 0LL;
      uint64_t v36 = 0LL;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v30 = sub_1000BEC68();
      sub_10004844C(v30);
      swift_release(v2);
      return;
    }

    unint64_t v34 = v7;
    uint64_t v19 = i;
    uint64_t v20 = v35;
    uint64_t v21 = v36;
    unint64_t v22 = sub_100030CCC(v18, v17);
    unint64_t v23 = v22;
    if ((v24 & 1) != 0)
    {
      sub_1000BECA8(v2[6]);
      *uint64_t v3 = v18;
      v3[1] = v17;
      sub_1000BECA8(v2[7]);
      *uint64_t v3 = v20;
      v3[1] = v21;
      uint64_t v6 = (char *)&type metadata for Any + 8;
      goto LABEL_29;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    sub_1000BECB4((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    uint64_t v26 = (uint64_t *)(v25 + 16 * v23);
    *uint64_t v26 = v18;
    v26[1] = v17;
    uint64_t v27 = (uint64_t *)(v2[7] + 16 * v23);
    *uint64_t v27 = v20;
    v27[1] = v21;
    uint64_t v28 = v2[2];
    BOOL v12 = __OFADD__(v28, 1LL);
    uint64_t v29 = v28 + 1;
    if (v12) {
      goto LABEL_34;
    }
    v2[2] = v29;
LABEL_29:
    uint64_t v4 = v19;
    unint64_t v5 = v34;
    if (v34) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_35;
    }
    sub_1000BEC9C();
    if (v11 == v12) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v33 + 8 * v10);
    uint64_t i = v10;
    if (!v13)
    {
      uint64_t i = v10 + 1;
      if (v10 + 1 >= v32) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v33 + 8 * i);
      if (!v13)
      {
        uint64_t i = v10 + 2;
        if (v10 + 2 >= v32) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v33 + 8 * i);
        if (!v13)
        {
          uint64_t i = v10 + 3;
          if (v10 + 3 >= v32) {
            goto LABEL_32;
          }
          unint64_t v13 = *(void *)(v33 + 8 * i);
          if (!v13)
          {
            uint64_t i = v10 + 4;
            if (v10 + 4 >= v32) {
              goto LABEL_32;
            }
            unint64_t v13 = *(void *)(v33 + 8 * i);
            if (!v13)
            {
              while (1)
              {
                sub_1000BEC9C();
                if (v11 == v12) {
                  break;
                }
                unint64_t v13 = *(void *)(v33 + 8 * v14);
                uint64_t v15 = v14 + 1;
                if (v13)
                {
                  uint64_t i = v15 - 1;
                  goto LABEL_22;
                }
              }

void sub_1000BDF2C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000D33C(&qword_1001C9DC8);
    uint64_t v2 = (void *)sub_1000BEC90();
  }

  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }

  sub_1000BE894(a1, v49);
  uint64_t v3 = v49[0];
  uint64_t v4 = v49[3];
  int64_t v36 = (unint64_t)(v49[2] + 64LL) >> 6;
  uint64_t v37 = v49[1];
  unint64_t v5 = v49[4];
  uint64_t v6 = &__src[40];
  uint64_t v7 = &__dst[40];
  unint64_t v8 = &v43;
  uint64_t v9 = &v45;
  swift_bridgeObjectRetain(a1);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v38 = (v5 - 1) & v5;
  uint64_t v39 = v4;
  for (unint64_t i = __clz(__rbit64(v5)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v15 << 6))
  {
    sub_10002C644(*(void *)(v3 + 48) + 40 * i, (uint64_t)__src);
    sub_10000DA1C(*(void *)(v3 + 56) + 32 * i, (uint64_t)v6);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10002C644((uint64_t)__dst, (uint64_t)v42);
    if (!swift_dynamicCast(&v40, v42, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v40 = 0LL;
      uint64_t v41 = 0LL;
      sub_1000102E0((uint64_t)__dst, &qword_1001CBFA8);
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_1000BEC7C();
      sub_10004844C(v34);
      swift_release(v2);
      return;
    }

    uint64_t v18 = v40;
    uint64_t v19 = v41;
    sub_10000DA1C((uint64_t)v7, (uint64_t)v42);
    sub_1000102E0((uint64_t)__dst, &qword_1001CBFA8);
    sub_10000DA58(v42, v8);
    *(void *)&__int128 v44 = v18;
    *((void *)&v44 + Hasher._combine(_:)(v1 & 1) = v19;
    sub_10000DA58(v8, v9);
    __int128 v20 = v44;
    sub_10000DA58(v9, v46);
    sub_10000DA58(v46, &v44);
    unint64_t v21 = sub_100030CCC(v20, *((uint64_t *)&v20 + 1));
    unint64_t v22 = v21;
    if ((v23 & 1) != 0)
    {
      char v24 = v9;
      uint64_t v25 = v8;
      uint64_t v26 = v7;
      uint64_t v27 = v3;
      uint64_t v28 = v6;
      uint64_t v29 = (_OWORD *)(v2[6] + 16 * v21);
      swift_bridgeObjectRelease();
      *uint64_t v29 = v20;
      uint64_t v6 = v28;
      uint64_t v3 = v27;
      uint64_t v7 = v26;
      unint64_t v8 = v25;
      uint64_t v9 = v24;
      uint64_t v30 = (void *)(v2[7] + 32 * v22);
      sub_10000D3A0(v30);
      sub_10000DA58(&v44, v30);
      goto LABEL_29;
    }

    if (v2[2] >= v2[3]) {
      break;
    }
    sub_1000BECB4((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    *(_OWORD *)(v31 + 16 * v22) = v20;
    sub_10000DA58(&v44, (_OWORD *)(v2[7] + 32 * v22));
    uint64_t v32 = v2[2];
    BOOL v13 = __OFADD__(v32, 1LL);
    uint64_t v33 = v32 + 1;
    if (v13) {
      goto LABEL_34;
    }
    v2[2] = v33;
LABEL_29:
    unint64_t v5 = v38;
    uint64_t v4 = v39;
    if (v38) {
      goto LABEL_5;
    }
LABEL_6:
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_35;
    }
    sub_1000BEC9C();
    if (v12 == v13) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v37 + 8 * v11);
    uint64_t v15 = v11;
    if (!v14)
    {
      uint64_t v15 = v11 + 1;
      if (v11 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v37 + 8 * v15);
      if (!v14)
      {
        uint64_t v15 = v11 + 2;
        if (v11 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v37 + 8 * v15);
        if (!v14)
        {
          uint64_t v15 = v11 + 3;
          if (v11 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v37 + 8 * v15);
          if (!v14)
          {
            uint64_t v15 = v11 + 4;
            if (v11 + 4 >= v36) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v37 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                sub_1000BEC9C();
                if (v12 == v13) {
                  break;
                }
                unint64_t v14 = *(void *)(v37 + 8 * v16);
                uint64_t v17 = v16 + 1;
                if (v14)
                {
                  uint64_t v15 = v17 - 1;
                  goto LABEL_22;
                }
              }

void sub_1000BE2BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000D33C(&qword_1001CBFA0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  sub_1000BE894(a1, v36);
  int64_t v4 = v36[3];
  unint64_t v5 = v36[4];
  int64_t v28 = (unint64_t)(v36[2] + 64LL) >> 6;
  uint64_t v29 = v36[1];
  uint64_t v30 = v36[0];
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = &type metadata for String;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v7 = (v5 - 1) & v5;
  unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
  for (i = v4; ; unint64_t v8 = __clz(__rbit64(v11)) + (i << 6))
  {
    sub_10002C644(*(void *)(v30 + 48) + 40 * v8, (uint64_t)__src);
    sub_10000DA1C(*(void *)(v30 + 56) + 32 * v8, (uint64_t)&__src[40]);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10002C644((uint64_t)__dst, (uint64_t)v33);
    if (!swift_dynamicCast(&v31, v33, &type metadata for AnyHashable, v6, 6LL))
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      sub_1000102E0((uint64_t)__dst, &qword_1001CBFA8);
LABEL_33:
      swift_bridgeObjectRelease();
      sub_10004844C(v30);
      swift_release();
      return;
    }

    uint64_t v13 = v31;
    uint64_t v14 = v32;
    sub_10000DA1C((uint64_t)&__dst[40], (uint64_t)v33);
    sub_1000102E0((uint64_t)__dst, &qword_1001CBFA8);
    if ((swift_dynamicCast(&v31, v33, (char *)&type metadata for Any + 8, v6, 6LL) & 1) == 0)
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }

    uint64_t v15 = v6;
    uint64_t v16 = v31;
    uint64_t v17 = v32;
    unint64_t v18 = sub_100030CCC(v13, v14);
    unint64_t v19 = v18;
    if ((v20 & 1) != 0)
    {
      unint64_t v21 = (uint64_t *)(v3[6] + 16 * v18);
      swift_bridgeObjectRelease();
      *unint64_t v21 = v13;
      v21[1] = v14;
      unint64_t v22 = (uint64_t *)(v3[7] + 16 * v19);
      swift_bridgeObjectRelease();
      *unint64_t v22 = v16;
      v22[1] = v17;
      goto LABEL_29;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v18;
    char v23 = (uint64_t *)(v3[6] + 16 * v18);
    *char v23 = v13;
    v23[1] = v14;
    char v24 = (uint64_t *)(v3[7] + 16 * v18);
    *char v24 = v16;
    v24[1] = v17;
    uint64_t v25 = v3[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_36;
    }
    v3[2] = v27;
LABEL_29:
    int64_t v4 = i;
    unint64_t v5 = v7;
    uint64_t v6 = v15;
    if (v7) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_37;
    }
    if (v10 >= v28) {
      goto LABEL_34;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t i = v4 + 1;
    if (!v11)
    {
      int64_t i = v4 + 2;
      if (v4 + 2 >= v28) {
        goto LABEL_34;
      }
      unint64_t v11 = *(void *)(v29 + 8 * i);
      if (!v11)
      {
        int64_t i = v4 + 3;
        if (v4 + 3 >= v28) {
          goto LABEL_34;
        }
        unint64_t v11 = *(void *)(v29 + 8 * i);
        if (!v11)
        {
          int64_t i = v4 + 4;
          if (v4 + 4 >= v28) {
            goto LABEL_34;
          }
          unint64_t v11 = *(void *)(v29 + 8 * i);
          if (!v11)
          {
            int64_t i = v4 + 5;
            if (v4 + 5 >= v28) {
              goto LABEL_34;
            }
            unint64_t v11 = *(void *)(v29 + 8 * i);
            if (!v11)
            {
              int64_t v12 = v4 + 6;
              while (v12 < v28)
              {
                unint64_t v11 = *(void *)(v29 + 8 * v12++);
                if (v11)
                {
                  int64_t i = v12 - 1;
                  goto LABEL_21;
                }
              }

void sub_1000BE65C(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v5 = (void *)sub_1000BEC1C();
  uint64_t v6 = sub_1000BE8CC(v5);
  if (v6)
  {
    uint64_t v2 = (void *)v6;
    sub_1000BE2BC(v6);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  sub_1000BEC1C();
  uint64_t v9 = sub_1000BEC60();
  uint64_t v11 = v10;

  sub_1000BEC44();
  sub_1000BEC1C();
  uint64_t v12 = sub_1000BEC60();
  uint64_t v14 = v13;

  if (v14)
  {
    uint64_t v26 = v9;
    sub_1000BEC24();
    sub_1000BEC1C();
    uint64_t v25 = sub_1000BEC60();
    uint64_t v16 = v15;

    if (v16)
    {
      uint64_t v24 = v8;
      sub_100078EE4();
      sub_1000BEC1C();
      uint64_t v23 = sub_1000BEC60();
      uint64_t v18 = v17;

      if (v18)
      {

        *a2 = v24;
        a2[1] = v12;
        a2[2] = v14;
        a2[3] = v26;
        a2[4] = v11;
        a2[5] = v25;
        a2[6] = v16;
        a2[7] = v23;
        a2[8] = v18;
        return;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100020AB8();
      sub_100078EE4();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100020AB8();
      sub_1000BEC24();
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_100020AB8();
    sub_1000BEC44();
  }

  uint64_t v19 = sub_1000BEC1C();
  uint64_t v20 = type metadata accessor for JSError(0LL);
  unint64_t v21 = sub_1000BE940();
  swift_allocError(v20, v21, 0LL, 0LL);
  uint64_t v22 = JSError.init(badValue:expected:)(v19, 0x676E69727473LL, 0xE600000000000000LL);
  swift_willThrow(v22);
}

void sub_1000BE848(void *a1@<X0>, void *a2@<X8>)
{
  if (!v2) {
    memcpy(a2, __src, 0x48uLL);
  }
}

uint64_t sub_1000BE894@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1000BE8CC(void *a1)
{
  id v2 = [a1 toDictionary];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

unint64_t sub_1000BE940()
{
  unint64_t result = qword_1001CBF98;
  if (!qword_1001CBF98)
  {
    uint64_t v1 = type metadata accessor for JSError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for JSError, v1);
    atomic_store(result, (unint64_t *)&qword_1001CBF98);
  }

  return result;
}

uint64_t destroy for MarketingItemRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t *initializeWithCopy for MarketingItemRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  uint64_t v8 = a2[4];
  uint64_t v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  uint64_t v10 = a2[6];
  uint64_t v9 = a2[7];
  a1[6] = v10;
  a1[7] = v9;
  uint64_t v11 = a2[8];
  a1[8] = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for MarketingItemRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[7] = a2[7];
  uint64_t v12 = a2[8];
  uint64_t v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *initializeWithTake for MarketingItemRequest(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t *assignWithTake for MarketingItemRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[6];
  uint64_t v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[8];
  uint64_t v12 = a1[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for MarketingItemRequest(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10009A3C4(v0 + v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10009A3C4(v0 + v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MarketingItemRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 72) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MarketingItemRequest()
{
  return &type metadata for MarketingItemRequest;
}

uint64_t sub_1000BEC1C()
{
  return JSValue.subscript.getter();
}

uint64_t sub_1000BEC24()
{
  return 0x5465636976726573LL;
}

uint64_t sub_1000BEC44()
{
  return 0x6E656D6563616C70LL;
}

uint64_t sub_1000BEC60()
{
  return JSValue.string.getter();
}

uint64_t sub_1000BEC68()
{
  return v0;
}

uint64_t sub_1000BEC7C()
{
  return v0;
}

uint64_t sub_1000BEC90()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

  ;
}

uint64_t sub_1000BECA8@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16 * v1 + 8));
}

void sub_1000BECB4(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
}

void *initializeBufferWithCopyOfBuffer for MediaClient(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for MediaClient(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for MediaClient(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for MediaClient(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaClient(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10009A3C4(v0 + v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10009A3C4(v0 + v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaClient(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MediaClient()
{
  return &type metadata for MediaClient;
}

uint64_t sub_1000BEDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0LL);
  }
}

uint64_t sub_1000BEE18(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007265LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_1000BEEA8()
{
  return 0x696669746E656469LL;
}

uint64_t sub_1000BEEC4(uint64_t *a1, uint64_t *a2)
{
  return sub_1000BEDFC(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1000BEEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000BEE18(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000BEF04(uint64_t a1)
{
  unint64_t v2 = sub_1000BF274();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BEF2C(uint64_t a1)
{
  unint64_t v2 = sub_1000BF274();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000BEF54(void *a1)
{
  uint64_t v3 = sub_10000D33C(&qword_1001CBFB0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_10000D37C(a1, v7);
  unint64_t v10 = sub_1000BF274();
  uint64_t v11 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MediaClient.CodingKeys,  &type metadata for MediaClient.CodingKeys,  v10,  v7,  v8);
  if (!v1)
  {
    uint64_t v9 = (void *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  sub_10000D3A0(a1);
  return v9;
}

uint64_t sub_1000BF060(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CBFC0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_10000D37C(a1, v10);
  unint64_t v12 = sub_1000BF274();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MediaClient.CodingKeys,  &type metadata for MediaClient.CodingKeys,  v12,  v10,  v11);
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, v13, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_1000BF150@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000BEF54(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1000BF178(void *a1)
{
  return sub_1000BF060(a1, *v1, v1[1]);
}

ValueMetadata *sub_1000BF190(uint64_t a1, void *a2)
{
  unint64_t v13 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  unint64_t v12 = &type metadata for MediaClient;
  uint64_t v4 = sub_10000D33C(&qword_1001CBFC8);
  uint64_t v5 = String.init<A>(describing:)(&v12, v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  unint64_t v12 = (ValueMetadata *)v5;
  unint64_t v13 = v7;
  v8._object = (void *)0x80000001001737C0LL;
  v8._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v8);
  swift_bridgeObjectRetain(a2);
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 32010LL;
  v10._object = (void *)0xE200000000000000LL;
  String.append(_:)(v10);
  return v12;
}

ValueMetadata *sub_1000BF26C()
{
  return sub_1000BF190(*(void *)v0, *(void **)(v0 + 8));
}

unint64_t sub_1000BF274()
{
  unint64_t result = qword_1001CBFB8;
  if (!qword_1001CBFB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167268, &type metadata for MediaClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CBFB8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for MediaClient.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000BF2F0 + 4 * asc_1001670E8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000BF310 + 4 * byte_1001670ED[v4]))();
  }
}

_BYTE *sub_1000BF2F0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000BF310(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000BF318(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000BF320(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000BF328(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000BF330(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MediaClient.CodingKeys()
{
  return &type metadata for MediaClient.CodingKeys;
}

unint64_t sub_1000BF350()
{
  unint64_t result = qword_1001CBFD0;
  if (!qword_1001CBFD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167240, &type metadata for MediaClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CBFD0);
  }

  return result;
}

unint64_t sub_1000BF390()
{
  unint64_t result = qword_1001CBFD8;
  if (!qword_1001CBFD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001671B0, &type metadata for MediaClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CBFD8);
  }

  return result;
}

unint64_t sub_1000BF3D0()
{
  unint64_t result = qword_1001CBFE0;
  if (!qword_1001CBFE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001671D8, &type metadata for MediaClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CBFE0);
  }

  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheBagAccess()
{
  return &type metadata for MercuryCacheBagAccess;
}

void *sub_1000BF420(void *a1)
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v16 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = a1;
  NSArray.makeIterator()();

  unint64_t v6 = sub_1000C00A0();
  dispatch thunk of IteratorProtocol.next()(&v21, v2, v6);
  if (v22)
  {
    unint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000DA58(&v21, v20);
      sub_10000DA1C((uint64_t)v20, (uint64_t)v17);
      if ((swift_dynamicCast(&v18, v17, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
      {
        uint64_t v18 = 0LL;
        uint64_t v19 = 0LL;
      }

      sub_10000D3A0(v20);
      uint64_t v8 = v19;
      if (v19)
      {
        uint64_t v9 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        {
          sub_100013F14();
          unint64_t v7 = v12;
        }

        unint64_t v10 = v7[2];
        if (v10 >= v7[3] >> 1)
        {
          sub_100013F14();
          unint64_t v7 = v13;
        }

        v7[2] = v10 + 1;
        uint64_t v11 = &v7[2 * v10];
        void v11[4] = v9;
        v11[5] = v8;
      }

      dispatch thunk of IteratorProtocol.next()(&v21, v2, v6);
    }

    while (v22);
  }

  else
  {
    unint64_t v7 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v2);
  return v7;
}

uint64_t sub_1000BF5EC()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CBFF0 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000BF634(void *a1)
{
  uint64_t v3 = sub_10000D33C(&qword_1001CC020);
  uint64_t v4 = Promise.__allocating_init()(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [a1 arrayForKey:v5];

  id v7 = [v6 valuePromise];
  sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v11, v13);
  sub_1000C0168();
  uint64_t v8 = swift_release(v1);
  sub_1000C0190(v8, "addSuccessBlock:");
  _Block_release(v6);
  sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v12, v14);
  sub_1000C0168();
  uint64_t v9 = swift_release(v1);
  sub_1000C0190(v9, "addErrorBlock:");
  _Block_release(v6);

  return v4;
}

uint64_t sub_1000BF794(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return sub_1000C0118((uint64_t)sub_1000BF7A4);
}

uint64_t sub_1000BF7A4()
{
  *(void *)(v0 + 24) = sub_1000BF858(*(void **)(v0 + 16));
  uint64_t v1 = (void *)sub_1000C0124((uint64_t)&unk_1001CFB68);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000C0178(v1, (uint64_t)sub_1000BF7EC, v4);
  return sub_1000105A8(v2);
}

uint64_t sub_1000BF7EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 24);
  if (v1)
  {
    sub_1000C019C();
    a1 = 10LL;
  }

  swift_release(v6);
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1000BF858(void *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CC018);
  uint64_t v3 = Promise.__allocating_init()(v2);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 integerForKey:v4];

  id v6 = [v5 valuePromise];
  uint64_t v16 = sub_1000BFF18;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEB40;
  id v7 = _Block_copy(&v12);
  uint64_t v8 = v17;
  swift_retain(v3);
  swift_release(v8);
  [v6 addSuccessBlock:v7];
  _Block_release(v7);
  uint64_t v16 = sub_1000BFE8C;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEB68;
  uint64_t v9 = _Block_copy(&v12);
  uint64_t v10 = v17;
  swift_retain(v3);
  swift_release(v10);
  [v6 addErrorBlock:v9];
  _Block_release(v9);

  return v3;
}

uint64_t sub_1000BF9F0(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return sub_1000C0118((uint64_t)sub_1000BFA00);
}

uint64_t sub_1000BFA00()
{
  *(void *)(v0 + 24) = sub_1000BFA8C(*(void **)(v0 + 16));
  uint64_t v1 = (void *)sub_1000C0124((uint64_t)&unk_1001CFB58);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000C0178(v1, (uint64_t)sub_1000BFA48, v4);
  return sub_1000105A8(v2);
}

uint64_t sub_1000BFA48()
{
  uint64_t v3 = *(void *)(v0 + 24);
  if (v1) {
    sub_1000C019C();
  }
  swift_release(v3);
  return sub_1000C0158(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000BFA8C(void *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CC000);
  uint64_t v3 = Promise.__allocating_init()(v2);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 doubleForKey:v4];

  id v6 = [v5 valuePromise];
  uint64_t v16 = sub_1000BFE5C;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEAF0;
  id v7 = _Block_copy(&v12);
  uint64_t v8 = v17;
  swift_retain(v3);
  swift_release(v8);
  [v6 addSuccessBlock:v7];
  _Block_release(v7);
  uint64_t v16 = sub_1000BFE8C;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEB18;
  uint64_t v9 = _Block_copy(&v12);
  uint64_t v10 = v17;
  swift_retain(v3);
  swift_release(v10);
  [v6 addErrorBlock:v9];
  _Block_release(v9);

  return v3;
}

uint64_t sub_1000BFC24(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return sub_1000C0118((uint64_t)sub_1000BFC34);
}

uint64_t sub_1000BFC34()
{
  *(void *)(v0 + 24) = sub_1000BFCC4(*(void **)(v0 + 16));
  uint64_t v1 = (void *)sub_1000C0124((uint64_t)&unk_1001CFB58);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = (uint64_t (*)(void))sub_1000C0178(v1, (uint64_t)sub_1000BFC7C, v4);
  return sub_1000105A8(v2);
}

uint64_t sub_1000BFC7C()
{
  uint64_t v3 = *(void *)(v0 + 24);
  if (v1) {
    sub_1000C019C();
  }
  swift_release(v3);
  return sub_1000C0158(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_1000BFCC4(void *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CC000);
  uint64_t v3 = Promise.__allocating_init()(v2);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [a1 integerForKey:v4];

  id v6 = [v5 valuePromise];
  uint64_t v16 = sub_1000BFE5C;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEAA0;
  id v7 = _Block_copy(&v12);
  uint64_t v8 = v17;
  swift_retain(v3);
  swift_release(v8);
  [v6 addSuccessBlock:v7];
  _Block_release(v7);
  uint64_t v16 = sub_1000BFE8C;
  uint64_t v17 = v3;
  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  uint64_t v14 = sub_1000B1D04;
  uint64_t v15 = &unk_1001AEAC8;
  uint64_t v9 = _Block_copy(&v12);
  uint64_t v10 = v17;
  swift_retain(v3);
  swift_release(v10);
  [v6 addErrorBlock:v9];
  _Block_release(v9);

  return v3;
}

uint64_t sub_1000BFE5C(void *a1)
{
  return sub_1000BFEA0(a1);
}

uint64_t sub_1000BFE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BFE84(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BFE8C(uint64_t a1)
{
  return sub_1000C0188(a1);
}

uint64_t sub_1000BFEA0(void *a1)
{
  uint64_t v3 = v1;
  return Promise.resolve(_:)(&v3);
}

uint64_t sub_1000BFEDC(void *a1)
{
  id v2 = [a1 integerValue];
  return Promise.resolve(_:)(&v2);
}

uint64_t sub_1000BFF18(void *a1)
{
  return sub_1000BFEDC(a1);
}

uint64_t sub_1000BFF20(void *a1)
{
  uint64_t v1 = sub_1000BF420(a1);
  uint64_t v3 = sub_10013E21C((uint64_t)v1);
  Promise.resolve(_:)(&v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000BFF70(void *a1)
{
  return sub_1000BFF20(a1);
}

uint64_t sub_1000BFF78(uint64_t a1)
{
  if (qword_1001C8008 != -1) {
    swift_once(&qword_1001C8008, sub_1000BF5EC);
  }
  uint64_t v2 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = type metadata accessor for LogMessage(0LL);
  uint64_t v4 = swift_allocObject( v2,  ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL))
       + *(void *)(*(void *)(v3 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  swift_getErrorValue(a1, v13, &v11);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  v14[3] = v12;
  id v7 = sub_10000D63C(v14);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v7, v5, v6);
  static LogMessage.safe(_:)(v14);
  uint64_t v8 = sub_10000E888((uint64_t)v14);
  uint64_t v9 = static os_log_type_t.error.getter(v8);
  sub_1000BD1B0(v9, v4);
  swift_bridgeObjectRelease();
  return Promise.reject(_:)(a1);
}

unint64_t sub_1000C00A0()
{
  unint64_t result = qword_1001C8C80;
  if (!qword_1001C8C80)
  {
    uint64_t v1 = type metadata accessor for NSFastEnumerationIterator(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_1001C8C80);
  }

  return result;
}

uint64_t sub_1000C0118(uint64_t a1)
{
  return swift_task_switch(a1, 0LL, 0LL);
}

uint64_t sub_1000C0124@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_1000C0138()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 32);
  *uint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t sub_1000C0158(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000C0168()
{
  return swift_retain(v0);
}

uint64_t sub_1000C0178@<X0>(void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  *a1 = v3;
  a1[1] = a2;
  return a3;
}

uint64_t sub_1000C0188(uint64_t a1)
{
  return sub_1000BFF78(a1);
}

id sub_1000C0190(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t sub_1000C019C()
{
  return swift_errorRelease(v0);
}

void *sub_1000C01A4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a4 = a1;
  a5 = v5;
  return _Block_copy(&a2);
}

void sub_1000C01B0( uint64_t a1, uint64_t (*a2)(_BYTE *, _BYTE *), uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v34 = a2;
  sub_1000BE890(v33, a1);
  uint64_t v4 = v33[0];
  int64_t v5 = v33[3];
  unint64_t v6 = v33[4];
  uint64_t v29 = v33[1];
  int64_t v30 = (unint64_t)(v33[2] + 64LL) >> 6;
  sub_10000DEE0();
  int64_t v28 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v5 << 6);
      goto LABEL_20;
    }

    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v9 >= v30) {
      goto LABEL_26;
    }
    unint64_t v10 = *(void *)(v29 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v30) {
        goto LABEL_26;
      }
      unint64_t v10 = *(void *)(v29 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v5 + 3;
        if (v5 + 3 >= v30) {
          goto LABEL_26;
        }
        unint64_t v10 = *(void *)(v29 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 4;
          if (v5 + 4 >= v30) {
            goto LABEL_26;
          }
          unint64_t v10 = *(void *)(v29 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 5;
            if (v5 + 5 >= v30) {
              goto LABEL_26;
            }
            unint64_t v10 = *(void *)(v29 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v5 + 6;
              while (v12 < v30)
              {
                unint64_t v10 = *(void *)(v29 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }

void sub_1000C0410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_27;
  }
  unint64_t v6 = 0LL;
  uint64_t v17 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v7 = v6;
    while (1)
    {
      if (v7 >= *(void *)(a1 + 16))
      {
        __break(1u);
        return;
      }

      uint64_t v8 = *(void *)(a1 + 32 + 8 * v7);
      uint64_t v20 = 1701869940LL;
      unint64_t v21 = 0xE400000000000000LL;
      swift_bridgeObjectRetain(v8);
      AnyHashable.init<A>(_:)(&v20);
      if (*(void *)(v8 + 16) && (unint64_t v9 = sub_100030D24((uint64_t)v22), (v10 & 1) != 0))
      {
        sub_10000DA1C(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v23);
      }

      else
      {
        __int128 v23 = 0u;
        __int128 v24 = 0u;
      }

      sub_10000E854((uint64_t)v22);
      if (!*((void *)&v24 + 1))
      {
        sub_10000DA68((uint64_t)&v23, &qword_1001CAAD0);
LABEL_18:
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }

      if (v20 == a2 && v21 == v3) {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a2, v3, 0LL);
      swift_bridgeObjectRelease();
      if ((v12 & 1) != 0) {
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = a3;
LABEL_19:
      if (v5 == ++v7) {
        goto LABEL_27;
      }
    }

    swift_bridgeObjectRelease();
LABEL_22:
    uint64_t v13 = v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    unint64_t v25 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000170F0();
      uint64_t v13 = v25;
    }

    unint64_t v15 = v13[2];
    unint64_t v16 = v15 + 1;
    if (v15 >= v13[3] >> 1)
    {
      sub_1000170F0();
      unint64_t v16 = v15 + 1;
      uint64_t v13 = v25;
    }

    unint64_t v6 = v7 + 1;
    v13[2] = v16;
    uint64_t v17 = v13;
    v13[v15 + 4] = v8;
    uint64_t v3 = a3;
  }

  while (v5 - 1 != v7);
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000C067C(uint64_t a1, void *a2)
{
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = 15200LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v6._object = (void *)0x8000000100173CB0LL;
  SQLDatabase.execute(sql:parameters:)(v6, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C0740(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001C8EA0);
  uint64_t v7 = swift_allocObject(v6, 48LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease();
  HIBYTE(v17[1]) = -18;
  v8._uint64_t countAndFlagsBits = a1;
  v8._object = a2;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 96LL;
  v9._object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  uint64_t v10 = v17[1];
  *(void *)(v7 + 32) = v17[0];
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v10;
  if (*(void *)(a3 + 16))
  {
    v17[3] = _swiftEmptyArrayStorage;
    sub_100016F88();
    __asm { BR              X8 }
  }

  uint64_t v11 = sub_10000D33C(&qword_1001CDF50);
  sub_10000D890((unint64_t *)&qword_1001C90E8, &qword_1001CDF50);
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = v12;
  v15._object = v14;
  SQLDatabase.execute(sql:parameters:)(v15, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C0BEC(uint64_t a1, void *a2, uint64_t a3)
{
  v37._object = a2;
  uint64_t v3 = a3;
  v37._uint64_t countAndFlagsBits = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  if (v4)
  {
    v40[0] = _swiftEmptyArrayStorage;
    sub_100016F88();
    Swift::String v5 = _swiftEmptyArrayStorage;
    uint64_t v36 = v3;
    uint64_t v6 = (void *)(v3 + 40);
    uint64_t v7 = v4;
    do
    {
      uint64_t v9 = *(v6 - 1);
      uint64_t v8 = *v6;
      v40[0] = v5;
      unint64_t v11 = v5[2];
      unint64_t v10 = v5[3];
      swift_bridgeObjectRetain(*v6);
      if (v11 >= v10 >> 1)
      {
        sub_100016F88();
        Swift::String v5 = (void *)v40[0];
      }

      v6 += 5;
      v5[2] = v11 + 1;
      uint64_t v12 = &v5[2 * v11];
      v12[4] = v9;
      v12[5] = v8;
      --v7;
    }

    while (v7);
    uint64_t v3 = v36;
  }

  uint64_t v13 = sub_10000D33C(&qword_1001CDF50);
  sub_10000D890((unint64_t *)&qword_1001C90E8, &qword_1001CDF50);
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v13);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_1000C0F04(63LL, 0xE100000000000000LL, v4);
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)(44LL, 0xE100000000000000LL, v13);
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(33LL);
  swift_bridgeObjectRelease();
  HIWORD(v40[1]) = -4864;
  String.append(_:)(v37);
  v20._uint64_t countAndFlagsBits = 2629728LL;
  v20._object = (void *)0xE300000000000000LL;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v14;
  v21._object = v16;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0x5345554C41562029LL;
  v22._object = (void *)0xEA00000000002820LL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = v17;
  v23._object = v19;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 41LL;
  v24._object = (void *)0xE100000000000000LL;
  String.append(_:)(v24);
  uint64_t v25 = v40[0];
  uint64_t v26 = v40[1];
  uint64_t v27 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v38 = v40[0];
    uint64_t v39 = v40[1];
    v40[0] = _swiftEmptyArrayStorage;
    sub_100016FBC();
    uint64_t v27 = _swiftEmptyArrayStorage;
    int64_t v28 = (char *)(v3 + 64);
    do
    {
      uint64_t v29 = *((void *)v28 - 2);
      unint64_t v30 = *((void *)v28 - 1);
      char v31 = *v28;
      sub_100049300(v29, v30, *v28);
      v40[0] = v27;
      unint64_t v32 = v27[2];
      if (v32 >= v27[3] >> 1)
      {
        sub_100016FBC();
        uint64_t v27 = (void *)v40[0];
      }

      v28 += 40;
      void v27[2] = v32 + 1;
      uint64_t v33 = &v27[3 * v32];
      v33[4] = v29;
      v33[5] = v30;
      *((_BYTE *)v33 + 48) = v31;
      --v4;
    }

    while (v4);
    uint64_t v25 = v38;
    uint64_t v26 = v39;
  }

  uint64_t v34 = v26;
  SQLDatabase.execute(sql:parameters:)(*(Swift::String *)&v25, (Swift::OpaquePointer)v27);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1000C0F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL);
    __break(1u);
  }

  else
  {
    if (a3)
    {
      uint64_t v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a3, &type metadata for String);
      uint64_t v7 = v6;
      v6[2] = a3;
      v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          uint64_t v9 = v6 + 9;
          do
          {
            *(v9 - Hasher._combine(_:)(v1 & 1) = a1;
            *uint64_t v9 = a2;
            swift_bridgeObjectRetain(a2);
            v9 += 2;
            --v8;
          }

          while (v8);
        }

        swift_bridgeObjectRetain(a2);
      }
    }

    else
    {
      swift_bridgeObjectRelease(a2);
      return &_swiftEmptyArrayStorage;
    }

    return v7;
  }

  return result;
}

uint64_t sub_1000C0FFC(uint64_t a1, void *a2)
{
  LOBYTE(v3) = v2;
  uint64_t v6 = swift_allocObject(&unk_1001AEC98, 17LL, 7LL);
  *(_BYTE *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  v10[0] = 0xD000000000000013LL;
  v10[1] = 0x80000001001739F0LL;
  v7._uint64_t countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 10592LL;
  v8._object = (void *)0xE200000000000000LL;
  String.append(_:)(v8);
  sub_100048EAC( 0xD000000000000013LL,  0x80000001001739F0LL,  (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)sub_1000C7DBC,  v6);
  if (v2)
  {
    swift_release(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_beginAccess(v6 + 16, v10, 0LL, 0LL);
    uint64_t v3 = *(unsigned __int8 *)(v6 + 16);
    swift_release(v6);
  }

  return v3 & 1;
}

uint64_t sub_1000C1130()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC028 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

void sub_1000C1178()
{
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_100029170();
  [v4 integerValue];
  sub_100150B4C();
  v7._uint64_t countAndFlagsBits = 1635017060LL;
  v7._object = (void *)0xE400000000000000LL;
  URL.appendPathComponent(_:)(v7);
  v8._uint64_t countAndFlagsBits = 25188LL;
  v8._object = (void *)0xE200000000000000LL;
  URL.appendPathExtension(_:)(v8);
  uint64_t v9 = URL.path.getter();
  uint64_t v11 = v10;
  uint64_t v12 = sub_10000DDDC((uint64_t)&unk_1001AEC20, 24LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  uint64_t v13 = type metadata accessor for SQLDatabase();
  sub_10000DDDC(v13, 113LL);
  SQLDatabase.init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)( v9,  v11,  0,  0LL,  (uint64_t)sub_1000C7CB0,  v12,  0LL,  0LL);
  uint64_t v15 = v14;
  id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v23 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001C8E50, &OBJC_CLASS___NSFileManager_ptr);
  Swift::String v24 = &off_1001AB750;
  *(void *)&__int128 v22 = v16;
  void v21[3] = v13;
  v21[4] = &off_1001A99C0;
  v21[0] = v15;
  uint64_t v17 = (void *)sub_10000DDDC((uint64_t)v2, 112LL);
  uint64_t v18 = sub_1000665E8((uint64_t)v21, v13);
  __chkstk_darwin(v18);
  sub_1000292E4();
  (*(void (**)(uint64_t *))(v19 + 16))(v2);
  uint64_t v20 = *v2;
  v17[5] = v13;
  v17[6] = &off_1001A99C0;
  void v17[2] = v20;
  sub_100019F60(&v22, (uint64_t)(v17 + 7));
  v17[12] = &type metadata for LiveMercuryCacheUpdateReporter;
  v17[13] = &off_1001AF7F8;
  sub_10000D3A0(v21);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v5);
  sub_10000DD84();
}

uint64_t sub_1000C1364(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = sub_1000C7CD0();
    uint64_t v3 = swift_allocError(&type metadata for MercuryCacheError, v2, 0LL, 0LL);
    *uint64_t v4 = 5;
    swift_willThrow(v3);
  }

  return 0LL;
}

void sub_1000C13BC()
{
  unint64_t v2 = sub_10000D37C(v0 + 2, v0[5]);
  uint64_t v3 = sub_1000C89EC(v2);
  sub_100128B6C(v3, v3);
  sub_10000D3A0(v0 + 2);
  sub_10000D3A0(v0 + 7);
  sub_10000DD84();
}

uint64_t sub_1000C1698()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for MercuryCacheDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20MercuryCacheDatabase);
}

uint64_t sub_1000C16D8()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v6);
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  uint64_t v10 = qword_1001DBBC0;
  static DispatchQoS.unspecified.getter((id)qword_1001DBBC0);
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v12 = v11;
  uint64_t v13 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_10000D890((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v0, v12);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000034LL,  0x8000000100173A10LL,  v5,  v2,  v9,  v10);
  qword_1001CC030 = result;
  return result;
}

void sub_1000C18DC()
{
}

void sub_1000C18F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = *sub_10000D37C((void *)(a1 + 16), *(void *)(a1 + 40));
  uint64_t v8 = swift_retain(v7);
  sub_100128FD0(v8, v7);
  sub_100129D84();
  int v16 = 24;
  if (a2 == 0xD000000000000018LL && a3 == 0x800000010016AC80LL
    || (int v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x800000010016AC80LL, a2, a3, 0LL),
        (v16 & 1) != 0))
  {
    char v17 = sub_1000C1EB0(v16, v9, v10, v11, v12, v13, v14, v15);
  }

  else if (a2 == 0xD000000000000010LL && a3 == 0x800000010016AC60LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010016AC60LL, a2, a3, 0LL) & 1) != 0)
  }
  {
    char v17 = sub_1000C203C();
  }

  else if (a2 == 0xD000000000000013LL && a3 == 0x800000010016ACA0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010016ACA0LL, a2, a3, 0LL) & 1) != 0)
  }
  {
    char v17 = sub_1000C21C8(0LL);
  }

  else
  {
    char v17 = sub_1000C277C(a2, a3);
  }

  LOBYTE(v21[0]) = v17 & 1;
  v21[1] = v18;
  Promise.resolve(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_10000D37C((void *)(a1 + 16), *(void *)(a1 + 40));
  uint64_t v20 = swift_retain(*v19);
  sub_100128B6C(v20, v20);
}

#error "1000C1ED4: call analysis failed (funcsize=91)"
#error "1000C2060: call analysis failed (funcsize=91)"
uint64_t sub_1000C21C8(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63[24];
  void v64[3];
  char v65[64];
  unint64_t v66;
  unint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = 0xD00000000000003ALL;
  if (!a1)
  {
    uint64_t v6 = 0LL;
LABEL_15:
    uint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    uint64_t v6 = 0LL;
    uint64_t v3 = 0LL;
    goto LABEL_15;
  }

  uint64_t v6 = sub_1000C0F04(63LL, 0xE100000000000000LL, v5);
  v64[0] = v6;
  uint64_t v7 = sub_10000D33C(&qword_1001CDF50);
  sub_10000D890((unint64_t *)&qword_1001C90E8, &qword_1001CDF50);
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v7);
  int v10 = v9;
  swift_bridgeObjectRelease();
  int v11 = *(void *)(v3 + 16);
  if (!v11)
  {
    uint64_t v66 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_17:
    _StringGuts.grow(_:)(16LL);
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = v8;
    v25._object = (void *)v10;
    String.append(_:)(v25);
    sub_10000DE2C();
    v26._uint64_t countAndFlagsBits = 41LL;
    v26._object = (void *)0xE100000000000000LL;
    String.append(_:)(v26);
    uint64_t v6 = (void *)0xD000000000000012LL;
    uint64_t v3 = 0x8000000100173BD0LL;
LABEL_18:
    uint64_t v27 = sub_10000D33C(&qword_1001CC100);
    uint64_t inited = swift_initStackObject(v27, v65);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    v64[0] = 0LL;
    v64[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(27LL);
    swift_bridgeObjectRelease();
    unint64_t v2 = 0x8000000100173B90LL;
    *(void *)(inited + 32) = 0xD00000000000003ALL;
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100173B90LL;
    *(void *)(inited + 48) = v6;
    *(void *)(inited + 56) = v3;
    sub_100013F14();
    unint64_t v30 = v29;
    int v10 = *(void *)(v29 + 16);
    int v12 = v10 + 1;
    if (v10 < *(void *)(v29 + 24) >> 1) {
      goto LABEL_19;
    }
    goto LABEL_37;
  }

  uint64_t v58 = v8;
  uint64_t v59 = v10;
  v64[0] = _swiftEmptyArrayStorage;
  sub_100016FBC();
  int v12 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = sub_10014B09C(v3);
  int v14 = v13;
  int v16 = v15 & 1;
  uint64_t v62 = v3 + 56;
  while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(v3 + 32))
  {
    if (*(_DWORD *)(v3 + 36) != (_DWORD)v14) {
      goto LABEL_36;
    }
    LODWORD(v66) = v16;
    char v17 = *(void *)(v3 + 48) + 16 * v4;
    unint64_t v2 = v3;
    int v10 = *(void *)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    v64[0] = v12;
    uint64_t v20 = *(void *)(v12 + 16);
    uint64_t v19 = *(void *)(v12 + 24);
    uint64_t v6 = (void *)(v20 + 1);
    swift_bridgeObjectRetain(v18);
    if (v20 >= v19 >> 1)
    {
      sub_100016FBC();
      int v12 = v64[0];
    }

    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    Swift::String v21 = v12 + 24 * v20;
    *(void *)(v21 + 32) = v10;
    *(void *)(v21 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v18;
    *(_BYTE *)(v21 + 48) = 3;
    __int128 v22 = sub_10014AFB4(v4, v14, v66 & 1, v2);
    uint64_t v4 = v22;
    int v14 = v23;
    int v16 = v24 & 1;
    --v11;
    uint64_t v3 = v2;
    if (!v11)
    {
      uint64_t v66 = v12;
      sub_1000B7E70(v22, v23, v16);
      uint64_t v4 = 0xD00000000000003ALL;
      uint64_t v8 = v58;
      int v10 = v59;
      goto LABEL_17;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  sub_1000C8D54();
  unint64_t v30 = v56;
LABEL_19:
  *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  char v31 = v30 + 16 * v10;
  *(void *)(v31 + 32) = v4;
  *(void *)(v31 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  if (v3)
  {
    unint64_t v32 = *(void *)(v30 + 24);
    uint64_t v33 = (char *)(v10 + 2);
    swift_bridgeObjectRetain(v3);
    if (v12 >= v32 >> 1)
    {
      sub_1000C8D54();
      unint64_t v30 = v57;
    }

    uint64_t v34 = v61;
    *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    uint64_t v35 = v30 + 16 * v12;
    *(void *)(v35 + 32) = v6;
    *(void *)(v35 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v3;
  }

  else
  {
    uint64_t v34 = v61;
  }

  sub_100020B68();
  v64[0] = v30;
  uint64_t v36 = sub_10000D33C(&qword_1001CDF50);
  sub_10000D890((unint64_t *)&qword_1001C90E8, &qword_1001CDF50);
  Swift::String v37 = v64;
  uint64_t v38 = BidirectionalCollection<>.joined(separator:)(32LL, 0xE100000000000000LL, v36);
  uint64_t v40 = v39;
  sub_10000DE74();
  sub_1000C8A90((void *)(v34 + 16), *(void *)(v34 + 40));
  uint64_t v41 = sub_1000C0FFC(v4 - 39, (void *)0x800000010016ACA0LL);
  if (v60)
  {
    sub_10000DCFC();
    Swift::String v42 = swift_bridgeObjectRelease();
  }

  else if ((v41 & 1) != 0)
  {
    uint64_t v43 = sub_10000DDDC((uint64_t)&unk_1001AEC98, 17LL);
    *(_BYTE *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    __int128 v44 = v43 + 16;
    uint64_t v45 = sub_10000DDDC((uint64_t)&unk_1001AECC0, 24LL);
    *(void *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    uint64_t v46 = *(void *)(v34 + 40);
    uint64_t v47 = (void *)(v34 + 16);
    uint64_t v48 = v43;
    uint64_t v49 = sub_10000D37C(v47, v46);
    id v50 = sub_10000DDDC((uint64_t)&unk_1001AEE00, 32LL);
    *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v48;
    *(void *)(v50 + 24) = v45;
    Swift::String v37 = (void *)*v49;
    sub_100048EAC(v38, v40, v66, (uint64_t)sub_1000C88EC, v50);
    swift_retain(v48);
    swift_retain(v45);
    sub_10000DE2C();
    swift_release(v50);
    sub_10000DCFC();
    sub_100020A94(v45 + 16, (uint64_t)v64);
    if (*(void *)(v45 + 16))
    {
      sub_100020A94(v44, (uint64_t)v63);
      LOBYTE(v37) = *(_BYTE *)(v48 + 16);
      sub_10000DEE0();
      swift_release(v48);
      swift_release(v45);
      return v37 & 1;
    }

    uint64_t v54 = sub_1000C7CD0();
    sub_100020C48((uint64_t)&type metadata for MercuryCacheError, v54);
    sub_1000C8950(v55, 1);
    swift_release(v48);
    Swift::String v42 = swift_release(v45);
  }

  else
  {
    sub_10000DCFC();
    swift_bridgeObjectRelease();
    uint64_t v51 = sub_1000C7CD0();
    sub_100020C48((uint64_t)&type metadata for MercuryCacheError, v51);
    Swift::String v42 = sub_1000C8950(v52, 2);
  }

  swift_willThrow(v42);
  return v37 & 1;
}

#error "1000C27B4: call analysis failed (funcsize=119)"
void sub_1000C2978()
{
  sub_1000C2994();
}

void sub_1000C2994()
{
  uint64_t v20 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  sub_100067420();
  sub_10000DC8C();
  __chkstk_darwin(v10);
  sub_10006725C();
  sub_10000DC8C();
  __chkstk_darwin(v11);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CC0F8);
  uint64_t v12 = sub_100067A48();
  if (qword_1001C8018 != -1) {
    swift_once(&qword_1001C8018, sub_1000C16D8);
  }
  int v13 = (void *)sub_10000DDDC(v5, 48LL);
  v13[2] = v0;
  v13[3] = v9;
  v13[4] = v7;
  v13[5] = v12;
  v21[4] = v3;
  void v21[5] = v13;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_100021A3C;
  void v21[3] = v20;
  int v14 = _Block_copy(v21);
  sub_10002C7D4();
  sub_100020BB4();
  sub_100067860();
  sub_1000C8CF4();
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  sub_1000C8904(v15);
  uint64_t v16 = sub_1000C8E08();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v16, v17, v18, v19);
  _Block_release(v14);
  sub_1000C89D8();
  sub_1000C8CA4();
  sub_10006752C();
  sub_1000C8D48();
  sub_10000DD84();
}

uint64_t sub_1000C2B28()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v0);
  sub_1000C2F18();
  LOBYTE(v4[0]) = v1 & 1;
  v4[1] = v2;
  Promise.resolve(_:)(v4);
  return swift_bridgeObjectRelease();
}

void sub_1000C2F18()
{
  uint64_t v4 = sub_1000C8C18();
  sub_1000C8C0C(v4);
  if (!v0)
  {
    sub_1000C8DE8();
    sub_1000C8A90(v2, *(void *)(v1 + 40));
    if ((sub_1000C8ABC(24LL, (void *)0x800000010016AC80LL) & 1) != 0)
    {
      sub_1000C8C50();
      swift_bridgeObjectRelease();
      uint64_t v5 = sub_10000D33C(&qword_1001C8EE8);
      uint64_t inited = (__n128 *)swift_initStackObject(v5, &v21);
      sub_1000C8B3C(inited, (__n128)xmmword_100164220);
      sub_100020C68();
      sub_100020C60();
      uint64_t v7 = sub_1000C895C();
      sub_1000C8A00(v7);
      sub_1000258D4();
      goto LABEL_7;
    }

    unint64_t v8 = sub_1000C7CD0();
    sub_100020C48((uint64_t)&type metadata for MercuryCacheError, v8);
    sub_1000C8950(v9, 2);
  }

  uint64_t v10 = sub_1000C895C();
  sub_1000C8A00(v10);
  if (v0) {
    sub_1000258D4();
  }
LABEL_7:
  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(sub_100010570() - 8);
  uint64_t v12 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                  + 2LL * *(void *)(v11 + 72),
                    *(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = sub_1000C8B54(v12, (__n128)xmmword_100164230);
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = sub_1000105E8((uint64_t)v14);
    sub_1000C8D60(v15);
    sub_10000DEB4();
    sub_100010564();
    sub_100010608();
    sub_1000104C0(v23);
    uint64_t v16 = sub_100010530();
    sub_1000485CC(v16);
    sub_1000C8A20();
    sub_10000DC14();
    sub_1000C8BE4();
    sub_10000DA68((uint64_t)v22, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_1000291E4();
    sub_10000DDF8();
  }

  else
  {
    sub_10001A1BC();
    sub_100010608();
    sub_1000104C0(v23);
    uint64_t v17 = sub_100010530();
    sub_1000485CC(v17);
    sub_10000DA68((uint64_t)v22, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000291E4();
  }

  sub_10000D3A0(v23);
  sub_1000485F4(9LL);
  sub_100010608();
  v23[3] = &type metadata for String;
  sub_1000C8C3C(0xD000000000000027LL);
  sub_1000C8AB0();
  sub_1000C8978();
  sub_1000C8D38();
  uint64_t v18 = sub_1000C8D28();
  sub_1000C8A4C((uint64_t)v18);
  sub_10006B8EC((uint64_t)v23);
  sub_1000C8AB0();
  sub_10000DC08();
  uint64_t v19 = sub_1000291E4();
  uint64_t v20 = static os_log_type_t.error.getter(v19);
  sub_1000C8D88(v20);
  swift_bridgeObjectRelease();
  sub_1000C8B6C();
  sub_1000C8DF0();
  sub_100029188();
}

void sub_1000C324C()
{
  uint64_t v2 = v1;
  sub_100067420();
  sub_10000DC8C();
  __chkstk_darwin(v3);
  sub_10006725C();
  sub_1000C8B14();
  __chkstk_darwin(v4);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CC0F8);
  uint64_t v5 = sub_100067A48();
  if (qword_1001C8018 != -1) {
    swift_once(&qword_1001C8018, sub_1000C16D8);
  }
  uint64_t v6 = (void *)sub_10000DDDC((uint64_t)&unk_1001AEF40, 40LL);
  v6[2] = v0;
  void v6[3] = v2;
  v6[4] = v5;
  uint64_t v7 = sub_100067344((uint64_t)sub_100021A3C);
  sub_10002C7D4();
  sub_100020BB4();
  sub_100067860();
  sub_1000C8CF4();
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  sub_1000C8904(v8);
  sub_1000C8B74();
  _Block_release(v7);
  sub_1000C89D8();
  sub_1000C8D18();
  sub_10006752C();
  sub_1000C8D48();
  sub_10000DD84();
}

uint64_t sub_1000C33C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  sub_1000C37B0(a2, v4, v5, v6, v7, v8, v9, v10, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25);
  LOBYTE(v23) = v11 & 1;
  uint64_t v24 = v12;
  Promise.resolve(_:)(&v23);
  return swift_bridgeObjectRelease();
}

void sub_1000C37B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  unint64_t v26 = v25;
  uint64_t v27 = (void *)*v20;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v28);
  sub_100029170();
  uint64_t v29 = v20 + 2;
  unint64_t v30 = (void *)*sub_10000D37C(v20 + 2, v20[5]);
  uint64_t v31 = swift_retain(v30);
  sub_1000C8C0C(v31);
  if (v21)
  {
    unint64_t v32 = sub_10000D37C(v29, v24[5]);
    uint64_t v33 = sub_1000C89EC(v32);
    sub_1000C8A00(v33);
    sub_1000258D4();
    if (qword_1001C8010 != -1) {
      swift_once(&qword_1001C8010, sub_1000C1130);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v34 = *(void *)(sub_100010570() - 8);
    uint64_t v35 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))
                    + 2LL * *(void *)(v34 + 72),
                      *(unsigned __int8 *)(v34 + 80));
    sub_1000C8DC8(v35, (__n128)xmmword_100164230);
    uint64_t v52 = v27;
    v51[0] = v24;
    uint64_t v36 = sub_10002C7D4();
    id v37 = (id)AMSLogKey(v36);
    if (v37)
    {
      uint64_t v47 = sub_1000105E8((uint64_t)v37);
      uint64_t v39 = v38;

      sub_1000489DC();
      sub_100010564();
      sub_100010608();
      uint64_t v40 = v52;
      sub_1000104C0(v51);
      id v50 = (void *)sub_100010530();
      v49[0] = v40;
      sub_10006B8EC((uint64_t)v49);
      sub_100067788((uint64_t)v49);
      sub_10000DC14();
      id v50 = &type metadata for String;
      v49[0] = v47;
      v49[1] = v39;
      sub_10000DEA4();
      sub_100067788((uint64_t)v49);
      sub_10000DC4C(93LL);
      sub_1000291E4();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001A1BC();
      sub_100010608();
      uint64_t v41 = v52;
      sub_1000104C0(v51);
      id v50 = (void *)sub_100010530();
      v49[0] = v41;
      sub_10006B8EC((uint64_t)v49);
      sub_10000DA68((uint64_t)v49, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000291E4();
    }

    sub_10000D3A0(v51);
    sub_1000485F4(9LL);
    sub_100010608();
    uint64_t v52 = &type metadata for String;
    v51[0] = 0xD000000000000021LL;
    v51[1] = 0x8000000100173D10LL;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v51);
    sub_1000C8DFC();
    sub_1000C8978();
    swift_getErrorValue(v21, &a10);
    uint64_t v52 = v48;
    Swift::String v42 = sub_10000D63C(v51);
    sub_1000C8A4C((uint64_t)v42);
    sub_10006B8EC((uint64_t)v51);
    sub_1000C8DFC();
    sub_10000DC08();
    uint64_t v43 = sub_1000291E4();
    uint64_t v44 = static os_log_type_t.error.getter(v43);
    sub_1000BD1B0(v44, (uint64_t)v35);
    sub_10000DCFC();
    sub_1000C8B6C();
  }

  else
  {
    sub_1000C8DE8();
    sub_1000C21C8(v26);
    uint64_t v45 = sub_10000D37C(v29, v24[5]);
    uint64_t v46 = sub_1000C89EC(v45);
    sub_1000C8BD8(v46);
  }

  sub_1000C8DF0();
  sub_100029188();
}

void sub_1000C3AB8()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_100067420();
  sub_10000DC8C();
  __chkstk_darwin(v9);
  sub_10006725C();
  sub_10000DC8C();
  __chkstk_darwin(v10);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CC0F0);
  uint64_t v11 = sub_100067A48();
  if (qword_1001C8018 != -1) {
    swift_once(&qword_1001C8018, sub_1000C16D8);
  }
  uint64_t v12 = (void *)sub_10000DDDC((uint64_t)&unk_1001AEC48, 64LL);
  v12[2] = v0;
  v12[3] = v8;
  v12[4] = v6;
  v12[5] = v11;
  void v12[6] = v4;
  v12[7] = v2;
  uint64_t v13 = sub_100067344((uint64_t)sub_100021A3C);
  swift_retain(v0);
  sub_1000489DC();
  sub_100067860();
  sub_100020BB4();
  sub_1000C8CF4();
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  sub_1000C8904(v14);
  uint64_t v15 = sub_1000C8E08();
  OS_dispatch_queue.async(group:qos:flags:execute:)(v15, v16, v17, v18);
  _Block_release(v13);
  sub_1000C89D8();
  sub_1000C8CA4();
  sub_10006752C();
  sub_1000C8D48();
  sub_10000DD84();
}

uint64_t sub_1000C3C5C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v49 = a5;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000C4428();
  char v13 = v12;
  uint64_t v15 = v14;
  v50[0] = 0x73746E65746E6F63LL;
  v50[1] = 0xE800000000000000LL;
  swift_bridgeObjectRetain(v14);
  AnyHashable.init<A>(_:)(v50);
  sub_10003079C((uint64_t)&v51, v15, &v54);
  swift_bridgeObjectRelease();
  sub_10000E854((uint64_t)&v51);
  if (MetatypeMetadata)
  {
    uint64_t v16 = sub_10000D33C(&qword_1001CA898);
    if ((swift_dynamicCast(v50, &v54, (char *)&type metadata for Any + 8, v16, 6LL) & 1) != 0)
    {
      uint64_t v17 = v50[0];
      swift_bridgeObjectRetain(a6);
      sub_1000C0410(v17, v49, a6);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      LOBYTE(v5Hasher._combine(_:)(v1 & 1) = v13 & 1;
      unint64_t v52 = v19;
      Promise.resolve(_:)(&v51);
      return swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
  }

  uint64_t v49 = a4;
  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  uint64_t v21 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v22 = type metadata accessor for LogMessage(0LL);
  uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v22 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v53 = (void *)type metadata accessor for MercuryCacheDatabase();
  unint64_t v51 = a1;
  uint64_t v24 = swift_retain(a1);
  id v25 = (id)AMSLogKey(v24);
  if (v25)
  {
    unint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;

    swift_bridgeObjectRetain(v29);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v30._uint64_t countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v31 = v53;
    unint64_t v32 = sub_10000D37C(&v51, (uint64_t)v53);
    uint64_t DynamicType = swift_getDynamicType(v32, v31, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v54 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
    sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
    v34._uint64_t countAndFlagsBits = 5972026LL;
    v34._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    uint64_t MetatypeMetadata = &type metadata for String;
    *(void *)&__int128 v54 = v27;
    *((void *)&v54 + Hasher._combine(_:)(v1 & 1) = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
    sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 93LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v36._uint64_t countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    id v37 = v53;
    uint64_t v38 = sub_10000D37C(&v51, (uint64_t)v53);
    uint64_t v39 = swift_getDynamicType(v38, v37, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v39);
    *(void *)&__int128 v54 = v39;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
    sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
    v40._uint64_t countAndFlagsBits = 58LL;
    v40._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    LogMessage.init(stringInterpolation:)(v11);
  }

  sub_10000D3A0(&v51);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(47LL, 1LL);
  v41._uint64_t countAndFlagsBits = 0LL;
  v41._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v41);
  uint64_t v53 = &type metadata for String;
  unint64_t v51 = 0xD000000000000022LL;
  unint64_t v52 = 0x80000001001738D0LL;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v51);
  sub_10000DA68((uint64_t)&v51, &qword_1001CAAD0);
  v42._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v42._object = (void *)0x8000000100173920LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v42);
  uint64_t v43 = LogMessage.init(stringInterpolation:)(v11);
  uint64_t v44 = static os_log_type_t.error.getter(v43);
  sub_1000BD1B0(v44, v23);
  swift_bridgeObjectRelease();
  unint64_t v45 = sub_1000C7CD0();
  uint64_t v46 = swift_allocError(&type metadata for MercuryCacheError, v45, 0LL, 0LL);
  *uint64_t v47 = 2;
  Promise.reject(_:)(v46);
  return swift_errorRelease(v46);
}

void sub_1000C4428()
{
  uint64_t v5 = sub_1000C8C18();
  sub_1000C8C0C(v5);
  if (!v0)
  {
    sub_1000C8DE8();
    sub_1000C8A90(v2, *(void *)(v1 + 40));
    if ((sub_1000C8ABC(16LL, (void *)0x800000010016AC60LL) & 1) != 0)
    {
      sub_1000C8C50();
      swift_bridgeObjectRelease();
      uint64_t v6 = sub_10000D33C(&qword_1001C8EE8);
      uint64_t inited = (__n128 *)swift_initStackObject(v6, &v23);
      sub_1000C8B3C(inited, (__n128)xmmword_100164220);
      sub_100020C68();
      sub_100020C60();
      uint64_t v7 = sub_1000C895C();
      sub_1000C8A00(v7);
      sub_1000258D4();
      sub_1000C8C98();
      goto LABEL_7;
    }

    unint64_t v8 = sub_1000C7CD0();
    sub_100020C48((uint64_t)&type metadata for MercuryCacheError, v8);
    sub_1000C8950(v9, 2);
  }

  uint64_t v10 = sub_1000C895C();
  sub_1000C8A00(v10);
  if (v0) {
    sub_1000258D4();
  }
LABEL_7:
  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(sub_100010570() - 8);
  char v12 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                  + 2LL * *(void *)(v11 + 72),
                    *(unsigned __int8 *)(v11 + 80));
  uint64_t v13 = sub_1000C8B54(v12, (__n128)xmmword_100164230);
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = sub_1000105E8((uint64_t)v14);
    sub_1000C8D60(v15);
    sub_10000DEB4();
    sub_100010564();
    sub_100010608();
    sub_1000104C0(v25);
    uint64_t v16 = sub_100010530();
    sub_1000485CC(v16);
    uint64_t inited = (__n128 *)&type metadata for String;
    sub_1000C8A20();
    sub_10000DC14();
    sub_1000C8BE4();
    sub_1000C8C98();
    sub_10000DA68(v17, v18);
    sub_10000DC4C(93LL);
    sub_1000291E4();
    sub_10000DDF8();
  }

  else
  {
    sub_10001A1BC();
    sub_100010608();
    sub_1000104C0(v25);
    uint64_t v19 = sub_100010530();
    sub_1000485CC(v19);
    sub_10000DA68((uint64_t)&v24, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000291E4();
  }

  sub_10000D3A0(v25);
  sub_1000485F4(9LL);
  sub_100010608();
  void v25[3] = &type metadata for String;
  sub_1000C8C3C((uint64_t)&inited->n128_i64[1] + 5);
  sub_1000C8AB0();
  sub_1000C8978();
  sub_1000C8D38();
  uint64_t v20 = sub_1000C8D28();
  sub_1000C8A4C((uint64_t)v20);
  sub_10006B8EC((uint64_t)v25);
  sub_1000C8AB0();
  sub_10000DC08();
  uint64_t v21 = sub_1000291E4();
  uint64_t v22 = static os_log_type_t.error.getter(v21);
  sub_1000C8D88(v22);
  swift_bridgeObjectRelease();
  sub_1000C8B6C();
  sub_1000C8DF0();
  sub_100029188();
}

void sub_1000C4750()
{
  uint64_t v2 = v1;
  sub_100067420();
  sub_10000DC8C();
  __chkstk_darwin(v3);
  sub_10006725C();
  sub_1000C8B14();
  __chkstk_darwin(v4);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CFAE0);
  uint64_t v5 = sub_100067A48();
  if (qword_1001C8018 != -1) {
    swift_once(&qword_1001C8018, sub_1000C16D8);
  }
  uint64_t v6 = (void *)sub_10000DDDC((uint64_t)&unk_1001AEE50, 40LL);
  v6[2] = v2;
  void v6[3] = v0;
  v6[4] = v5;
  uint64_t v7 = sub_100067344((uint64_t)sub_100021A3C);
  sub_1000489DC();
  sub_10002C7E8();
  sub_100067860();
  sub_1000C8CF4();
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  sub_1000C8904(v8);
  sub_1000C8B74();
  _Block_release(v7);
  sub_1000C89D8();
  sub_1000C8D18();
  sub_10006752C();
  sub_1000C8D48();
  sub_10000DD84();
}

void sub_1000C48CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) + 48;
  if (*(void *)(a1 + 16))
  {
    uint64_t v7 = *sub_10000D37C((void *)(a2 + 16), *(void *)(a2 + 40));
    uint64_t v8 = swift_retain(v7);
    sub_100128FD0(v8, v7);
    sub_100129D84();
    sub_1000C5038();
    Promise.resolve(_:)(v36);
    id v37 = sub_10000D37C((void *)(a2 + 16), *(void *)(a2 + 40));
    uint64_t v38 = swift_retain(*v37);
    sub_100128B6C(v38, v38);
  }

  else
  {
    if (qword_1001C8010 != -1) {
      swift_once(&qword_1001C8010, sub_1000C1130);
    }
    uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v10 = type metadata accessor for LogMessage(0LL);
    uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v10 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v43 = (void *)type metadata accessor for MercuryCacheDatabase();
    v42[0] = a2;
    uint64_t v12 = swift_retain(a2);
    id v13 = (id)AMSLogKey(v12);
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v17 = v16;

      swift_bridgeObjectRetain(v17);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v18._uint64_t countAndFlagsBits = 0LL;
      v18._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v18);
      uint64_t v19 = v43;
      uint64_t v20 = sub_10000D37C(v42, (uint64_t)v43);
      uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v40[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_10000DA68((uint64_t)v40, &qword_1001CAAD0);
      v22._uint64_t countAndFlagsBits = 5972026LL;
      v22._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t MetatypeMetadata = &type metadata for String;
      v40[0] = v15;
      v40[1] = v17;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_10000DA68((uint64_t)v40, &qword_1001CAAD0);
      v23._uint64_t countAndFlagsBits = 93LL;
      v23._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v23);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v24._uint64_t countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      id v25 = v43;
      unint64_t v26 = sub_10000D37C(v42, (uint64_t)v43);
      uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
      v40[0] = v27;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
      sub_10000DA68((uint64_t)v40, &qword_1001CAAD0);
      v28._uint64_t countAndFlagsBits = 58LL;
      v28._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(v42);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
    v29._uint64_t countAndFlagsBits = 0LL;
    v29._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v43 = &type metadata for String;
    strcpy((char *)v42, "update(with:)");
    HIWORD(v42[1]) = -4864;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
    sub_10000DA68((uint64_t)v42, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v30._object = (void *)0x8000000100173C30LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v31 = LogMessage.init(stringInterpolation:)(v6);
    uint64_t v32 = static os_log_type_t.error.getter(v31);
    sub_1000BD1B0(v32, v11);
    swift_bridgeObjectRelease();
    unint64_t v33 = sub_1000C7CD0();
    uint64_t v34 = swift_allocError(&type metadata for MercuryCacheError, v33, 0LL, 0LL);
    _BYTE *v35 = 3;
    Promise.reject(_:)(v34);
    swift_errorRelease(v34);
  }

void sub_1000C5038()
{
  uint64_t v24 = v2;
  uint64_t v25 = v3;
  uint64_t v5 = v4;
  uint64_t v22 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_1000292E4();
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    sub_1000C8C98();
    uint64_t v8 = v5 + 32;
    sub_10000DEE0();
    while (1)
    {
      sub_10004C420(v8, (uint64_t)v23);
      uint64_t v9 = sub_1000C8D7C();
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      if (*v9 == v1 + 8 && v11 == 0x800000010016AC80LL) {
        break;
      }
      if ((sub_1000C8A70(v1 + 8, 0x800000010016AC80LL) & 1) != 0) {
        break;
      }
      if ((v10 != v1 || v11 != 0x800000010016AC60LL)
        && (sub_1000C8A70(0xD000000000000010LL, 0x800000010016AC60LL) & 1) == 0)
      {
        if ((v10 != v1 + 3 || v11 != 0x800000010016ACA0LL) && (sub_1000C8A70(v1 + 3, 0x800000010016ACA0LL) & 1) == 0)
        {
          uint64_t v21 = sub_1000C8E40();
          sub_1000C766C(v21);
          goto LABEL_11;
        }

        sub_1000C8E1C();
        uint64_t v18 = v17;
        uint64_t v19 = (void *)sub_1000C8E40();
        sub_1000C72E0(v19);
        sub_1000C8E1C();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 + 104) + 24LL))(v18, v20);
        goto LABEL_13;
      }

      uint64_t v15 = (void *)sub_1000C8E40();
      sub_1000C68FC(v15);
      (*(void (**)(void))(*(void *)(v22 + 104) + 16LL))();
LABEL_11:
      sub_10000D3A0(v23);
      v8 += 40LL;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }

    ((void (*)(void))sub_1000C1EB0)();
    uint64_t v13 = v12;
    id v14 = (void *)sub_1000C8E40();
    sub_1000C6838(v14);
    ((void (*)(void))sub_1000C1EB0)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 + 104) + 8LL))(v13, v16);
LABEL_13:
    swift_bridgeObjectRelease();
    sub_100009020();
    goto LABEL_11;
  }

void sub_1000C5610()
{
  uint64_t v1 = *v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_10000DC74();
  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v5 = (__n128 *)swift_allocObject( v3,  ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
                 + 2LL * *(void *)(v4 + 72),
                   *(unsigned __int8 *)(v4 + 80) | 7LL);
  sub_1000C8DC8(v5, (__n128)xmmword_100164230);
  uint64_t v23 = v1;
  v22[0] = v0;
  uint64_t v6 = sub_10002FAA0();
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    sub_1000489DC();
    sub_100010564();
    sub_10000DC08();
    uint64_t v12 = v23;
    uint64_t v13 = sub_10000D37C(v22, v23);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v14);
    v20[0] = v14;
    sub_10000DEA4();
    sub_1000258CC((uint64_t)v20);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v20[0] = v9;
    v20[1] = v11;
    sub_10000DEA4();
    sub_1000258CC((uint64_t)v20);
    sub_10000DC4C(93LL);
    sub_1000522A8();
    sub_10000DE74();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v15 = v23;
    uint64_t v16 = sub_10000D37C(v22, v23);
    uint64_t v17 = sub_10000DC54((uint64_t)v16, v15);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v17);
    v20[0] = v17;
    sub_10000DEA4();
    sub_10000DA68((uint64_t)v20, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000522A8();
  }

  sub_10000D3A0(v22);
  uint64_t v18 = LogMessage.init(stringLiteral:)(0xD000000000000011LL);
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  sub_1000BD1B0(v19, (uint64_t)v5);
  sub_10000DCFC();
  sub_10000D37C(v0 + 7, v0[10]);
  sub_10000D37C(v0 + 2, v0[5]);
  sub_10000DF10();
  sub_100071624();
  sub_10000DE2C();
  sub_1000C8DF0();
  sub_100029188();
}

uint64_t sub_1000C587C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_10000D37C(a1, a1[3]);
  uint64_t v11 = sub_10012B560();
  if (v3)
  {
    swift_errorRelease(v3);
  }

  else if ((v12 & 1) == 0)
  {
    uint64_t v13 = (BOOL *)(a2 + 16);
    uint64_t v14 = Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v11);
    BOOL v15 = Date.timeIntervalSinceNow.getter(v14) < 0.0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_beginAccess(v13, v40, 1LL, 0LL);
    BOOL *v13 = v15;
  }

  sub_10000D37C(a1, a1[3]);
  sub_10012B4A8(v43);
  unint64_t v16 = *((void *)&v43[0] + 1);
  if (*((void *)&v43[0] + 1) >> 60 == 15LL) {
    goto LABEL_11;
  }
  uint64_t v17 = *(void *)&v43[0];
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v43[0] = 0LL;
  id v20 = [v18 JSONObjectWithData:isa options:0 error:v43];

  uint64_t v21 = *(void *)&v43[0];
  if (!v20)
  {
    id v27 = *(id *)&v43[0];
    uint64_t v28 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v29);
    sub_10001BD70(v17, v16);
    swift_errorRelease(v28);
LABEL_11:
    unint64_t v30 = sub_1000C7CD0();
    uint64_t v31 = swift_allocError(&type metadata for MercuryCacheError, v30, 0LL, 0LL);
    *uint64_t v32 = 4;
    swift_willThrow(v31);
    return 1LL;
  }

  id v22 = *(id *)&v43[0];
  _bridgeAnyObjectToAny(_:)(v20);
  swift_unknownObjectRelease(v20);
  uint64_t v23 = sub_10000D33C(&qword_1001C8E58);
  if ((swift_dynamicCast(v42, v43, (char *)&type metadata for Any + 8, v23, 6LL) & 1) == 0)
  {
    sub_10001BD70(v17, v16);
    goto LABEL_11;
  }

  uint64_t v24 = v42[0];
  sub_10000D37C(a1, a1[3]);
  uint64_t v25 = sub_10012B3C4();
  uint64_t v34 = v26;
  uint64_t v39 = v24;
  if (!v26)
  {
    sub_10001BD70(v17, v16);
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  uint64_t v35 = v25;
  uint64_t v36 = (uint64_t *)(a3 + 16);
  swift_beginAccess(a3 + 16, v45, 0LL, 0LL);
  if (!*(void *)(a3 + 16))
  {
    uint64_t v37 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    swift_beginAccess(v36, v41, 1LL, 0LL);
    uint64_t *v36 = v37;
    swift_bridgeObjectRelease();
  }

  swift_beginAccess(v36, v44, 33LL, 0LL);
  uint64_t v38 = v39;
  if (*v36)
  {
    v42[0] = v35;
    v42[1] = v34;
    swift_bridgeObjectRetain_n(v34, 2LL);
    AnyHashable.init<A>(_:)(v42);
    void v42[3] = v23;
    v42[0] = v38;
    swift_bridgeObjectRetain(v38);
    sub_100030188((uint64_t)v42, (uint64_t)v43);
    swift_endAccess(v44);
    sub_10001BD70(v17, v16);
    swift_bridgeObjectRelease_n(v34, 2LL);
  }

  else
  {
    swift_endAccess(v44);
    sub_10001BD70(v17, v16);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  return 1LL;
}

uint64_t sub_1000C5CD0()
{
  uint64_t v46 = v4;
  uint64_t v47 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  type metadata accessor for Date(0LL);
  sub_1000C8B14();
  __chkstk_darwin(v12);
  sub_1000674E0();
  sub_1000C8A90(v11, v11[3]);
  uint64_t v13 = sub_10012B560();
  if (v0)
  {
    sub_100067974();
  }

  else if ((v14 & 1) == 0)
  {
    BOOL v15 = (BOOL *)(v9 + 16);
    uint64_t v16 = Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v13);
    BOOL v17 = Date.timeIntervalSinceNow.getter(v16) < 0.0;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
    sub_10000DC44((uint64_t)v15, (uint64_t)&v40, 1LL);
    *BOOL v15 = v17;
  }

  sub_1000C8A90(v11, v11[3]);
  sub_10012B4A8(v43);
  unint64_t v18 = *((void *)&v43[0] + 1);
  if (*((void *)&v43[0] + 1) >> 60 == 15LL) {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)&v43[0];
  id v20 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v43[0] = 0LL;
  id v22 = [v20 JSONObjectWithData:isa options:0 error:v43];

  uint64_t v23 = *(void *)&v43[0];
  if (!v22)
  {
    id v29 = *(id *)&v43[0];
    uint64_t v30 = _convertNSErrorToError(_:)(v23);

    swift_willThrow(v31);
    sub_1000C8AA4();
    swift_errorRelease(v30);
LABEL_11:
    unint64_t v32 = sub_1000C7CD0();
    sub_100020C48((uint64_t)&type metadata for MercuryCacheError, v32);
    sub_1000C8950(v33, 4);
    return 1LL;
  }

  id v24 = *(id *)&v43[0];
  _bridgeAnyObjectToAny(_:)(v22);
  swift_unknownObjectRelease(v22);
  uint64_t v25 = sub_10000D33C(&qword_1001C8E58);
  if ((swift_dynamicCast(v42, v43, (char *)&type metadata for Any + 8, v25, 6LL) & 1) == 0)
  {
    sub_1000C8AA4();
    goto LABEL_11;
  }

  uint64_t v26 = v42[0];
  sub_1000C8A90(v11, v11[3]);
  uint64_t v27 = sub_10012B3C4();
  uint64_t v35 = v28;
  uint64_t v39 = v26;
  if (!v28)
  {
    sub_1000C8AA4();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  uint64_t v36 = v27;
  uint64_t v37 = (uint64_t *)(v7 + 16);
  sub_100020A94(v7 + 16, (uint64_t)&v45);
  if (!*(void *)(v7 + 16))
  {
    uint64_t v38 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_10000DC44((uint64_t)v37, (uint64_t)&v41, 1LL);
    uint64_t *v37 = v38;
    swift_bridgeObjectRelease();
  }

  sub_10000DC44((uint64_t)v37, (uint64_t)v44, 33LL);
  if (*v37)
  {
    v42[0] = v36;
    v42[1] = v35;
    swift_bridgeObjectRetain_n(v35, 2LL);
    AnyHashable.init<A>(_:)(v42);
    void v42[3] = v25;
    v42[0] = v39;
    sub_10000DEB4();
    sub_100030188((uint64_t)v42, (uint64_t)v43);
    swift_endAccess(v44);
    sub_10001BD70(v19, v18);
    swift_bridgeObjectRelease_n(v35, 2LL);
  }

  else
  {
    swift_endAccess(v44);
    sub_10001BD70(v19, v18);
    swift_bridgeObjectRelease();
  }

  sub_10000DDF8();
  return 1LL;
}

uint64_t sub_1000C60A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v53 = a3;
  uint64_t v4 = v3;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  id v50 = (void *)*v3;
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_allocObject(&unk_1001AEC98, 17LL, 7LL);
  *(_BYTE *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  uint64_t v9 = swift_allocObject(&unk_1001AECC0, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  sub_10000D37C(v3 + 2, v3[5]);
  uint64_t v10 = swift_allocObject(&unk_1001AECE8, 32LL, 7LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = v54;
  sub_100048EAC(v51, v52, v53, (uint64_t)sub_1000C7DA0, v10);
  uint64_t v12 = v11;
  if (v11)
  {
    swift_retain(v8);
    swift_retain(v9);
    swift_release();
  }

  else
  {
    swift_retain(v8);
    swift_retain(v9);
    swift_release();
    swift_beginAccess(v9 + 16, v55, 0LL, 0LL);
    uint64_t v30 = *(void *)(v9 + 16);
    if (v30)
    {
      swift_beginAccess(v8 + 16, v60, 0LL, 0LL);
      LOBYTE(v3Hasher._combine(_:)(v1 & 1) = *(_BYTE *)(v8 + 16);
      swift_bridgeObjectRetain(v30);
      swift_release();
      swift_release();
      return v31 & 1;
    }

    unint64_t v47 = sub_1000C7CD0();
    uint64_t v12 = swift_allocError(&type metadata for MercuryCacheError, v47, 0LL, 0LL);
    *uint64_t v48 = 2;
    swift_willThrow(v12);
  }

  v49[0] = v9;
  v49[1] = v8;
  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v14 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)) + 2 * v15,  *(unsigned __int8 *)(v14 + 80) | 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v61 = v50;
  v60[0] = v4;
  uint64_t v17 = swift_retain(v4);
  id v18 = (id)AMSLogKey(v17);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v54 = v15;
    uint64_t v21 = v20;
    uint64_t v23 = v22;

    swift_bridgeObjectRetain(v23);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = v61;
    uint64_t v26 = sub_10000D37C(v60, (uint64_t)v61);
    uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v58[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
    sub_10000DA68((uint64_t)v58, &qword_1001CAAD0);
    v28._uint64_t countAndFlagsBits = 5972026LL;
    v28._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t MetatypeMetadata = &type metadata for String;
    v58[0] = v21;
    v58[1] = v23;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
    sub_10000DA68((uint64_t)v58, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 93LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v32._uint64_t countAndFlagsBits = 0LL;
    v32._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    unint64_t v33 = v61;
    uint64_t v34 = sub_10000D37C(v60, (uint64_t)v61);
    uint64_t v35 = swift_getDynamicType(v34, v33, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v35);
    v58[0] = v35;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v58);
    sub_10000DA68((uint64_t)v58, &qword_1001CAAD0);
    v36._uint64_t countAndFlagsBits = 58LL;
    v36._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v60);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(9LL, 2LL);
  v37._uint64_t countAndFlagsBits = 0LL;
  v37._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v37);
  uint64_t v61 = &type metadata for String;
  v60[0] = 0xD000000000000024LL;
  v60[1] = 0x80000001001739C0LL;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v60);
  uint64_t v31 = &qword_1001CAAD0;
  sub_10000DA68((uint64_t)v60, &qword_1001CAAD0);
  v38._uint64_t countAndFlagsBits = 0x3A64656C69616620LL;
  v38._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v38);
  swift_getErrorValue(v12, v62);
  uint64_t v39 = v56;
  uint64_t v40 = v57;
  uint64_t v61 = v57;
  uint64_t v41 = sub_10000D63C(v60);
  (*(void (**)(void *, uint64_t, void *))(*(v40 - 1) + 16LL))(v41, v39, v40);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v60);
  sub_10000DA68((uint64_t)v60, &qword_1001CAAD0);
  v42._uint64_t countAndFlagsBits = 0LL;
  v42._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v42);
  uint64_t v43 = LogMessage.init(stringInterpolation:)(v7);
  uint64_t v44 = static os_log_type_t.error.getter(v43);
  sub_1000BD1B0(v44, v16);
  uint64_t v45 = swift_bridgeObjectRelease();
  swift_willThrow(v45);
  swift_release();
  swift_release();
  return v31 & 1;
}

uint64_t sub_1000C65A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D37C(a1, a1[3]);
  uint64_t v11 = sub_10012B560();
  if (v3)
  {
    swift_errorRelease(v3);
  }

  else if ((v12 & 1) == 0)
  {
    uint64_t v13 = (BOOL *)(a2 + 16);
    uint64_t v14 = Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v11);
    BOOL v15 = Date.timeIntervalSinceNow.getter(v14) < 0.0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_beginAccess(v13, v31, 1LL, 0LL);
    BOOL *v13 = v15;
  }

  sub_10000D37C(a1, a1[3]);
  sub_10012B4A8(v32);
  unint64_t v16 = *((void *)&v32[0] + 1);
  if (*((void *)&v32[0] + 1) >> 60 != 15LL)
  {
    uint64_t v17 = *(void *)&v32[0];
    id v18 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    *(void *)&v32[0] = 0LL;
    id v20 = [v18 JSONObjectWithData:isa options:0 error:v32];

    uint64_t v21 = *(void *)&v32[0];
    if (v20)
    {
      id v22 = *(id *)&v32[0];
      _bridgeAnyObjectToAny(_:)(v20);
      sub_10001BD70(v17, v16);
      swift_unknownObjectRelease(v20);
      uint64_t v23 = sub_10000D33C(&qword_1001C8E58);
      if ((swift_dynamicCast(&v30, v32, (char *)&type metadata for Any + 8, v23, 6LL) & 1) != 0)
      {
        Swift::String v24 = (void *)(a3 + 16);
        uint64_t v25 = v30;
        swift_beginAccess(v24, v32, 1LL, 0LL);
        *Swift::String v24 = v25;
        swift_bridgeObjectRelease();
      }
    }

    else
    {
      id v26 = *(id *)&v32[0];
      _convertNSErrorToError(_:)(v21);

      swift_willThrow(v27);
      sub_10001BD70(v17, v16);
    }
  }

  return 0LL;
}

void sub_1000C6838(void *a1)
{
  uint64_t v3 = sub_10000DF08();
  sub_1000C8BF8( v3,  (uint64_t (*)(_BYTE *, _BYTE *))sub_1000C7ED4,  v4,  (uint64_t (*)(void, uint64_t, uint64_t))sub_100014578);
  sub_1000C8A80();
  sub_1000C8A2C();
  sub_1000C8BAC();
  sub_1000C8C78();
  sub_1000C6D50(v5, v6, v7, v8);
  if (!v1)
  {
    uint64_t v9 = sub_10000D37C((void *)(v2 + 16), *(void *)(v2 + 40));
    uint64_t v10 = (void *)__chkstk_darwin(v9);
    uint64_t v11 = sub_1000C8924(v10);
    sub_1000C8A60(v11, v12, sub_1000C7EE8);
  }

  sub_10000DDF8();
  sub_1000C8A0C();
}

void sub_1000C68FC(void *a1)
{
  uint64_t v3 = sub_10000DF08();
  sub_1000C8BF8( v3,  (uint64_t (*)(_BYTE *, _BYTE *))sub_1000C7ED4,  v4,  (uint64_t (*)(void, uint64_t, uint64_t))sub_100014630);
  sub_1000C8A80();
  sub_1000C8A2C();
  sub_1000C8BAC();
  sub_1000C8AC8(16LL, v5);
  if (!v1)
  {
    uint64_t v6 = sub_10000D37C((void *)(v2 + 16), *(void *)(v2 + 40));
    uint64_t v7 = (void *)__chkstk_darwin(v6);
    uint64_t v8 = sub_1000C8924(v7);
    sub_1000C8A60(v8, v9, sub_1000C7F38);
  }

  sub_10000DDF8();
  sub_1000C8A0C();
}

uint64_t sub_1000C69B8()
{
  uint64_t v38 = v1;
  uint64_t v39 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = (void *)*v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DC74();
  sub_10002C644(v8, (uint64_t)v36);
  if ((swift_dynamicCast(v34, v36, &type metadata for AnyHashable, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    uint64_t v12 = v6[3];
    uint64_t v13 = sub_10000D37C(v6, v12);
    uint64_t v14 = ((uint64_t (*)(void *, uint64_t))_bridgeAnythingToObjectiveC<A>(_:))(v13, v12);
    v36[0] = 0LL;
    id v15 = [v11 dataWithJSONObject:v14 options:0 error:v36];
    swift_unknownObjectRelease(v14);
    id v16 = v36[0];
    if (v15)
    {
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);

      return v17;
    }

    uint64_t v0 = v16;
    swift_bridgeObjectRelease();
    uint64_t v18 = _convertNSErrorToError(_:)(v0);

    swift_willThrow(v19);
    swift_errorRelease(v18);
  }

  if (qword_1001C8010 != -1) {
    swift_once(&qword_1001C8010, sub_1000C1130);
  }
  uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v21 = sub_10002C79C();
  id v22 = (__n128 *)swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
                  + 3LL * *(void *)(*(void *)(v21 - 8) + 72LL),
                    *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
  sub_1000C8DC8(v22, (__n128)xmmword_100164240);
  Swift::String v37 = v9;
  v36[0] = v4;
  uint64_t v23 = sub_10002C7D4();
  id v24 = (id)AMSLogKey(v23);
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    sub_1000C8DA8();
    sub_1000489DC();
    sub_100010564();
    sub_10000DC08();
    uint64_t v25 = v37;
    id v26 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t v27 = sub_10000DC54((uint64_t)v26, (uint64_t)v25);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    v34[0] = v27;
    sub_100048640();
    sub_1000258CC((uint64_t)v34);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v34[0] = v0;
    v34[1] = v4;
    sub_100048640();
    sub_1000258CC((uint64_t)v34);
    sub_10000DC4C(93LL);
    sub_1000522A8();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    Swift::String v28 = v37;
    uint64_t v29 = sub_10000D37C(v36, (uint64_t)v37);
    uint64_t v30 = sub_10000DC54((uint64_t)v29, (uint64_t)v28);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v30);
    v34[0] = v30;
    sub_100048640();
    sub_10000DA68((uint64_t)v34, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000522A8();
  }

  sub_10000D3A0(v36);
  LogMessage.init(stringLiteral:)(0xD00000000000001CLL);
  Swift::String v37 = &type metadata for AnyHashable;
  v36[0] = (id)sub_10000DDDC((uint64_t)&unk_1001AEEC8, 56LL);
  sub_10002C644(v8, (uint64_t)v36[0] + 16);
  static LogMessage.safe(_:)(v36);
  sub_10000DA68((uint64_t)v36, &qword_1001CAAD0);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  sub_1000BD1B0(v32, (uint64_t)v22);
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_1000C6D50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1000C067C(a1, a2);
  if (!v5)
  {
    sub_10000D37C((void *)(v4 + 16), *(void *)(v4 + 40));
    uint64_t v11 = sub_10000D33C(qword_1001CC110);
    uint64_t inited = swift_initStackObject(v11, &v18);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
    *(void *)(inited + 32) = 0x7079546568636163LL;
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEB00000000444965LL;
    *(_BYTE *)(inited + 48) = 0;
    *(void *)(inited + 56) = a3;
    *(void *)(inited + 64) = a4;
    *(_BYTE *)(inited + 72) = 0;
    sub_1000C8B28();
    *(void *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v14;
    *(void *)(v13 + 88) = 0xE700000000000000LL;
    *(_BYTE *)(v13 + 96) = 2;
    sub_1000C8D94();
    *(void *)(v15 + 104) = v16;
    *(void *)(v15 + 112) = v17;
    *(_BYTE *)(v15 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 3;
    sub_1000C0740(a1, a2, inited);
    swift_setDeallocating(inited);
    return sub_10012A75C();
  }

  return result;
}

void sub_1000C6E7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v87 = v24;
  uint64_t v88 = v25;
  uint64_t v26 = v22;
  int v86 = v27;
  uint64_t v84 = v28;
  unint64_t v85 = v29;
  uint64_t v83 = v30;
  uint64_t v95 = v31;
  uint64_t v33 = v32;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v34);
  uint64_t v82 = (char *)v76 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = *(void *)(v33 + 16);
  if (v36)
  {
    uint64_t v81 = a22;
    uint64_t v79 = (void *)(v95 + 16);
    uint64_t v80 = a21;
    sub_10000DF08();
    v76[1] = v33;
    Swift::String v37 = (void **)(v33 + 56);
    __int128 v78 = xmmword_100164240;
    __int128 v77 = xmmword_1001649D0;
    while (1)
    {
      uint64_t v90 = v36;
      uint64_t v94 = v26;
      uint64_t v38 = (uint64_t)*(v37 - 3);
      unint64_t v39 = (unint64_t)*(v37 - 2);
      uint64_t v40 = *v37;
      uint64_t v96 = (uint64_t)*(v37 - 1);
      uint64_t v97 = v38;
      unint64_t v104 = v39;
      sub_10001BDC8(v38, v39);
      uint64_t v41 = qword_1001C8010;
      uint64_t v93 = v40;
      sub_10000DF08();
      if (v41 != -1) {
        swift_once(&qword_1001C8010, sub_1000C1130);
      }
      uint64_t v89 = v37;
      sub_10000D33C(&qword_1001C9C70);
      sub_100010570();
      sub_10000DD70();
      uint64_t v44 = sub_10001059C((v43 & ~v42) + 3LL * (void)v23, v42);
      *(_OWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = v78;
      uint64_t v103 = type metadata accessor for MercuryCacheDatabase();
      v102[0] = v95;
      uint64_t v45 = swift_retain(v95);
      id v46 = (id)AMSLogKey(v45);
      if (v46)
      {
        uint64_t v92 = sub_1000105E8((uint64_t)v46);
        uint64_t v48 = v47;

        sub_10000DF10();
        sub_100010564();
        sub_10000DC08();
        uint64_t v49 = v103;
        id v50 = sub_10000D37C(v102, v103);
        uint64_t v51 = sub_10000DC54((uint64_t)v50, v49);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v51);
        uint64_t v99 = v51;
        sub_10000DF68();
        sub_1000C8A20();
        sub_10000DC14();
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v99 = v92;
        uint64_t v100 = v48;
        sub_10000DF68();
        sub_1000C8A20();
        sub_10000DC4C(93LL);
        sub_1000522A8();
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_10000DC08();
        uint64_t v52 = v103;
        uint64_t v53 = sub_10000D37C(v102, v103);
        uint64_t v54 = sub_10000DC54((uint64_t)v53, v52);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v54);
        uint64_t v99 = v54;
        sub_10000DF68();
        sub_1000C8A20();
        sub_10000DC4C(58LL);
        sub_1000522A8();
      }

      sub_10000D3A0(v102);
      LogMessage.init(stringLiteral:)(0x736E69206C6C6957LL);
      uint64_t v103 = v87;
      uint64_t v55 = (void *)sub_10000DDDC(v88, 48LL);
      v102[0] = v55;
      uint64_t v57 = v96;
      uint64_t v56 = v97;
      v55[2] = v97;
      void v55[3] = v104;
      uint64_t v58 = v93;
      v55[4] = v57;
      v55[5] = v58;
      sub_10001BDC8(v56, v104);
      uint64_t v59 = v58;
      swift_bridgeObjectRetain(v58);
      static LogMessage.safe(_:)(v102);
      sub_1000258CC((uint64_t)v102);
      uint64_t v61 = static os_log_type_t.info.getter(v60);
      sub_1000BD1B0(v61, v44);
      sub_10000DDF8();
      Swift::String v91 = sub_10000D37C(v79, *(void *)(v95 + 40));
      uint64_t v62 = sub_1000C8DDC();
      uint64_t v63 = (void *)v62[1];
      uint64_t v92 = *v62;
      uint64_t v64 = sub_10000D33C(&qword_1001CC108);
      uint64_t inited = swift_initStackObject(v64, &v98);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
      sub_1000C8DDC();
      sub_1000C8CB4();
      *(void *)(inited + 32) = v66;
      *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEB00000000444965LL;
      *(void *)(inited + 48) = v67;
      *(void *)(inited + 56) = v41;
      *(_BYTE *)(inited + 64) = 3;
      *(void *)(inited + 72) = 0x797269707865LL;
      uint64_t v69 = v84;
      unint64_t v68 = v85;
      *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE600000000000000LL;
      *(void *)(inited + 88) = v69;
      *(void *)(inited + 96) = v68;
      char v70 = v86;
      *(_BYTE *)(inited + 104) = v86;
      uint64_t v71 = v81;
      *(void *)(inited + 112) = v80;
      *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v71;
      uint64_t v72 = v97;
      *(void *)(inited + 128) = v96;
      *(void *)(inited + 136) = v59;
      *(_BYTE *)(inited + 144) = 3;
      sub_1000C8B28();
      *(void *)(inited + 152) = v73;
      *(void *)(inited + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE700000000000000LL;
      *(void *)(inited + 168) = v72;
      *(void *)(inited + 176) = v104;
      *(_BYTE *)(inited + 184) = 0;
      uint64_t v96 = *v91;
      sub_10000DEB4();
      swift_bridgeObjectRetain(v41);
      uint64_t v74 = v69;
      uint64_t v23 = v59;
      sub_100049300(v74, v68, v70);
      sub_10000DF08();
      sub_10001BDC8(v72, v104);
      uint64_t v75 = v94;
      sub_1000C0BEC(v92, v63, inited);
      uint64_t v26 = v75;
      if (v75) {
        break;
      }
      Swift::String v37 = v89 + 4;
      sub_1000C8DB4();
      sub_1000C8D74();
      sub_10000DDF8();
      sub_1000C8E4C();
      sub_10000DE74();
      uint64_t v36 = v90 - 1;
      if (v90 == 1) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease();
    sub_1000C8DB4();
    sub_1000C8D74();
    sub_10000DDF8();
    sub_1000C8E4C();
LABEL_12:
    swift_bridgeObjectRelease();
  }

  sub_100029188();
}

void sub_1000C72E0(void *a1)
{
  uint64_t v3 = sub_10000DF08();
  sub_1000C8BF8( v3,  (uint64_t (*)(_BYTE *, _BYTE *))sub_1000C7ED4,  v4,  (uint64_t (*)(void, uint64_t, uint64_t))sub_100014644);
  sub_1000C8A80();
  sub_1000C8A2C();
  sub_1000C8BAC();
  sub_1000C8AC8(19LL, v5);
  if (!v1)
  {
    uint64_t v6 = sub_10000D37C((void *)(v2 + 16), *(void *)(v2 + 40));
    uint64_t v7 = (void *)__chkstk_darwin(v6);
    uint64_t v8 = sub_1000C8924(v7);
    sub_1000C8A60(v8, v9, sub_1000C7F60);
  }

  sub_10000DDF8();
  sub_1000C8A0C();
}

uint64_t sub_1000C739C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D37C(a1, a1[3]);
  uint64_t v11 = sub_10012B560();
  if (v3)
  {
    swift_errorRelease(v3);
  }

  else if ((v12 & 1) == 0)
  {
    uint64_t v13 = (BOOL *)(a2 + 16);
    uint64_t v14 = Date.init(timeIntervalSinceReferenceDate:)(*(double *)&v11);
    BOOL v15 = Date.timeIntervalSinceNow.getter(v14) < 0.0;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_beginAccess(v13, v35, 1LL, 0LL);
    BOOL *v13 = v15;
  }

  sub_10000D37C(a1, a1[3]);
  sub_10012B4A8(v36);
  unint64_t v16 = *((void *)&v36[0] + 1);
  if (*((void *)&v36[0] + 1) >> 60 == 15LL) {
    goto LABEL_11;
  }
  uint64_t v17 = *(void *)&v36[0];
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v36[0] = 0LL;
  id v20 = [v18 JSONObjectWithData:isa options:0 error:v36];

  uint64_t v21 = *(void *)&v36[0];
  if (!v20)
  {
    id v30 = *(id *)&v36[0];
    uint64_t v31 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v32);
    sub_10001BD70(v17, v16);
    swift_errorRelease(v31);
    goto LABEL_11;
  }

  id v22 = *(id *)&v36[0];
  _bridgeAnyObjectToAny(_:)(v20);
  sub_10001BD70(v17, v16);
  swift_unknownObjectRelease(v20);
  uint64_t v23 = sub_10000D33C(&qword_1001C8E58);
  if ((swift_dynamicCast(&v34, v36, (char *)&type metadata for Any + 8, v23, 6LL) & 1) == 0)
  {
LABEL_11:
    unint64_t v26 = sub_1000C7CD0();
    uint64_t v27 = swift_allocError(&type metadata for MercuryCacheError, v26, 0LL, 0LL);
    *uint64_t v28 = 4;
    swift_willThrow(v27);
    return 0LL;
  }

  uint64_t v24 = (void *)(a3 + 16);
  uint64_t v25 = v34;
  swift_beginAccess(v24, v36, 1LL, 0LL);
  *uint64_t v24 = v25;
  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t sub_1000C766C(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v1;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_1000674E0();
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_1000C89F4();
  type metadata accessor for MercuryCacheUpdateData.Success(0LL);
  sub_10000DEB4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10000DDF8();
  uint64_t v57 = 0LL;
  id v9 = [v7 dataWithJSONObject:isa options:0 error:&v57];

  id v10 = (id)v57;
  if (v9)
  {
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v13 = v12;

    uint64_t v14 = sub_1000C89F4();
    double v15 = Date.timeIntervalSinceReferenceDate.getter(v14);
    unint64_t v16 = sub_1000C89F4();
    uint64_t v17 = *v16;
    uint64_t v18 = (void *)v16[1];
    sub_10000DF10();
    sub_1000C7B74(v17, v18);
    sub_10000DE2C();
    if (v3)
    {
      uint64_t v19 = v11;
      unint64_t v20 = v13;
    }

    else
    {
      unint64_t v54 = v13;
      if (qword_1001C8010 != -1) {
        swift_once(&qword_1001C8010, sub_1000C1130);
      }
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v24 = *(void *)(sub_100010570() - 8);
      uint64_t v25 = sub_10001059C( ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
            + 3LL * *(void *)(v24 + 72),
              *(unsigned __int8 *)(v24 + 80));
      *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
      uint64_t v53 = v25;
      uint64_t v59 = v5;
      uint64_t v57 = (uint64_t)v1;
      uint64_t v26 = sub_10002C7E8();
      id v27 = (id)AMSLogKey(v26);
      if (v27)
      {
        uint64_t v52 = sub_1000105E8((uint64_t)v27);
        uint64_t v29 = v28;

        sub_10000DF10();
        sub_100010564();
        sub_100048C74();
        sub_1000104C0(&v57);
        uint64_t v30 = sub_100010530();
        sub_1000C8C64(v30);
        sub_100067788((uint64_t)v56);
        sub_10000DC14();
        void v56[3] = &type metadata for String;
        v56[0] = v52;
        v56[1] = v29;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
        sub_100067788((uint64_t)v56);
        sub_10000DC4C(93LL);
        sub_1000C8E28();
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_100048C74();
        sub_1000104C0(&v57);
        uint64_t v31 = sub_100010530();
        sub_1000C8C64(v31);
        sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_1000C8E28();
      }

      sub_10000D3A0(&v57);
      uint64_t v57 = 0x203A656C626154LL;
      unint64_t v58 = 0xE700000000000000LL;
      uint64_t v32 = sub_1000C89F4();
      uint64_t v33 = *v32;
      uint64_t v34 = (void *)v32[1];
      sub_10000DEB4();
      v35._uint64_t countAndFlagsBits = v33;
      v35._object = v34;
      String.append(_:)(v35);
      sub_10000DDF8();
      uint64_t v36 = sub_1000C8E6C();
      static LogMessage.safe(_:)(v36);
      sub_1000C8E34();
      uint64_t v57 = 0LL;
      unint64_t v58 = 0xE000000000000000LL;
      v37._uint64_t countAndFlagsBits = 0x6E69747265736E49LL;
      v37._object = (void *)0xEA00000000002067LL;
      String.append(_:)(v37);
      uint64_t v38 = sub_10000D33C(&qword_1001C8F50);
      _print_unlocked<A, B>(_:_:)( a1,  &v57,  v38,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      uint64_t v39 = sub_1000C8E6C();
      static LogMessage.safe(_:)(v39);
      sub_1000C8E34();
      uint64_t v41 = static os_log_type_t.debug.getter(v40);
      sub_1000BD1B0(v41, v53);
      sub_10000DE2C();
      sub_10000D37C(v1 + 2, v1[5]);
      uint64_t v42 = sub_1000C89F4();
      uint64_t v44 = *v42;
      uint64_t v43 = (void *)v42[1];
      uint64_t v45 = sub_10000D33C(&qword_1001CC108);
      uint64_t inited = swift_initStackObject(v45, v55);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
      sub_1000C89F4();
      sub_1000C8CB4();
      *(void *)(inited + 32) = v47;
      *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEB00000000444965LL;
      *(void *)(inited + 48) = v48;
      *(void *)(inited + 56) = v33;
      *(_BYTE *)(inited + 64) = 3;
      sub_1000C8D94();
      *(void *)(inited + 72) = v49;
      *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v50;
      *(double *)(inited + 88) = v15;
      *(void *)(inited + 96) = 0LL;
      *(_BYTE *)(inited + 104) = 2;
      sub_1000C8B28();
      *(void *)(inited + 112) = v51;
      *(void *)(inited + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE700000000000000LL;
      *(void *)(inited + 128) = v11;
      *(void *)(inited + 136) = v54;
      *(_BYTE *)(inited + 144) = 0;
      sub_10000DF10();
      swift_bridgeObjectRetain(v33);
      sub_10001BDC8(v11, v54);
      sub_1000C0BEC(v44, v43, inited);
      sub_1000C8DB4();
      sub_1000C8D74();
      sub_10000DE2C();
      uint64_t v19 = v11;
      unint64_t v20 = v54;
    }

    return sub_10001BD84(v19, v20);
  }

  else
  {
    uint64_t v21 = v10;
    _convertNSErrorToError(_:)(v10);

    return swift_willThrow(v22);
  }

uint64_t sub_1000C7B74(uint64_t a1, void *a2)
{
  uint64_t result = sub_1000C067C(a1, a2);
  if (!v3)
  {
    sub_10000D37C((void *)(v2 + 16), *(void *)(v2 + 40));
    uint64_t v7 = sub_10000D33C(qword_1001CC110);
    uint64_t inited = swift_initStackObject(v7, v9);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    *(void *)(inited + 32) = 0x7079546568636163LL;
    *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xEB00000000444965LL;
    *(_BYTE *)(inited + 48) = 0;
    *(void *)(inited + 56) = 0x64616F6C796170LL;
    *(void *)(inited + 64) = 0xE700000000000000LL;
    *(_BYTE *)(inited + 72) = 2;
    *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x797269707865LL;
    *(void *)(inited + 88) = 0xE600000000000000LL;
    *(_BYTE *)(inited + 96) = 3;
    sub_1000C0740(a1, a2, inited);
    swift_setDeallocating(inited);
    return sub_10012A75C();
  }

  return result;
}

uint64_t sub_1000C7CA4()
{
  return sub_1000C8C04(v0, 24LL);
}

uint64_t sub_1000C7CB0(uint64_t a1, uint64_t a2)
{
  return sub_1000C1364(a1, a2);
}

unint64_t sub_1000C7CD0()
{
  unint64_t result = qword_1001CC0E8;
  if (!qword_1001CC0E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016746C, &type metadata for MercuryCacheError);
    atomic_store(result, (unint64_t *)&qword_1001CC0E8);
  }

  return result;
}

uint64_t sub_1000C7D0C()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000C7D44()
{
  return sub_1000C3C5C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_1000C7D54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C7D64(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000C7D6C()
{
  return sub_1000C8C04(v0, 17LL);
}

uint64_t sub_1000C7D78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C7DA0(void *a1)
{
  return sub_1000C65A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000C7DBC(uint64_t a1)
{
  return sub_100049094(a1, v1) & 1;
}

uint64_t sub_1000C7DDC()
{
  return sub_1000C2B28();
}

uint64_t sub_1000C7DEC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000C7E1C()
{
}

uint64_t sub_1000C7E2C(void *a1)
{
  return sub_1000C587C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000C7E4C()
{
  return sub_1000C5CD0() & 1;
}

uint64_t sub_1000C7E70()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C7E98(void *a1)
{
  return sub_1000C739C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1000C7EB4()
{
  return sub_1000C8008( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release);
}

void sub_1000C7EC8()
{
}

uint64_t sub_1000C7ED4()
{
  return sub_1000C8DD4();
}

uint64_t sub_1000C7EE8()
{
  return sub_1000C7F84();
}

uint64_t sub_1000C7F14()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000C7F38()
{
  return sub_1000C8AE4((uint64_t)&type metadata for MercuryCacheDatabase.RawEventsData, (uint64_t)&unk_1001AEEF0);
}

uint64_t sub_1000C7F60()
{
  return sub_1000C8AE4((uint64_t)&type metadata for MercuryCacheDatabase.RawRankingData, (uint64_t)&unk_1001AEF18);
}

#error "1000C7FB4: call analysis failed (funcsize=16)"
uint64_t sub_1000C7FC8()
{
  uint64_t v0;
  sub_10001BD84(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000C7FF4()
{
  return sub_1000C8008( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1000C8008(void (*a1)(void), void (*a2)(void))
{
  return swift_deallocObject(v2, 40LL, 7LL);
}

uint64_t sub_1000C804C()
{
  return sub_1000C33C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

ValueMetadata *type metadata accessor for MercuryCacheDatabase.RawRankingData()
{
  return &type metadata for MercuryCacheDatabase.RawRankingData;
}

ValueMetadata *type metadata accessor for MercuryCacheDatabase.RawEventsData()
{
  return &type metadata for MercuryCacheDatabase.RawEventsData;
}

uint64_t _s14amsengagementd20MercuryCacheDatabaseC14RawRankingDataVwxx_0(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void _s14amsengagementd20MercuryCacheDatabaseC14RawRankingDataVwcp_0(uint64_t a1, uint64_t a2)
{
  *uint64_t v3 = v4;
  v3[1] = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  v3[2] = *(void *)(v2 + 16);
  v3[3] = v6;
  swift_bridgeObjectRetain(v6);
  sub_10000DFE8();
}

void _s14amsengagementd20MercuryCacheDatabaseC14RawRankingDataVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  unint64_t v7 = v3[1];
  *uint64_t v3 = v4;
  v3[1] = v5;
  sub_10001BD84(v6, v7);
  v3[2] = *(void *)(v2 + 16);
  uint64_t v8 = *(void *)(v2 + 24);
  v3[3] = v8;
  swift_bridgeObjectRetain(v8);
  sub_100009020();
  sub_10000DFE8();
}

void _s14amsengagementd20MercuryCacheDatabaseC14RawRankingDataVwta_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BD84(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  sub_100009044();
}

ValueMetadata *type metadata accessor for MercuryCacheDatabase.RawPreference()
{
  return &type metadata for MercuryCacheDatabase.RawPreference;
}

uint64_t sub_1000C8188(uint64_t a1)
{
  v4[0] = &unk_1001673C8;
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 24);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000C8200(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = ~v5;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 1) & (unint64_t)~v5) + *(void *)(v4 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v5 + 16) & v6));
    swift_retain(v9);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))( ((unint64_t)a1 + v5 + 1) & v6,  ((unint64_t)a2 + v5 + 1) & v6);
  }

  return v3;
}

uint64_t sub_1000C829C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 80LL));
}

_BYTE *sub_1000C82BC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1000C830C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1000C835C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_BYTE *sub_1000C83AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))( (unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80),  (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1000C83FC(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  int v9 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v10 = ((v8 + 1) & ~v8) + *(void *)(v5 + 64);
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)&a1[v10];
      if (!v12) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)&a1[v10];
      if (!*(_WORD *)&a1[v10]) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v14 < 2)
    {
LABEL_22:
      unsigned int v16 = *a1;
      BOOL v17 = v16 >= 2;
      int v18 = (v16 + 2147483646) & 0x7FFFFFFF;
      if (v17) {
        return (v18 + 1);
      }
      else {
        return 0LL;
      }
    }
  }

  int v12 = a1[v10];
  if (!a1[v10]) {
    goto LABEL_22;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (!(_DWORD)v10) {
    return v7 + v15 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1000C84D0 + 4 * byte_1001672ED[(v10 - 1)]))();
}

void sub_1000C8544(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xFEu) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  size_t v7 = ((*(unsigned __int8 *)(v5 + 80) + 1LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(void *)(v5 + 64);
  char v8 = 8 * v7;
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      unsigned int v11 = ((a3 - v6 + ~(-1 << v8)) >> v8) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = &dword_100000004;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  if (v6 < a2)
  {
    int v10 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        int v12 = v10 & ~(-1 << v8);
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v7 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X12 }

uint64_t type metadata accessor for ExpirableValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000256DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExpirableValue);
}

uint64_t getEnumTagSinglePayload for MercuryCacheError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for MercuryCacheError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1000C880C + 4 * byte_100167300[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000C8840 + 4 * byte_1001672FB[v4]))();
}

uint64_t sub_1000C8840(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000C8848(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C8850LL);
  }
  return result;
}

uint64_t sub_1000C885C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C8864LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1000C8868(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000C8870(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheError()
{
  return &type metadata for MercuryCacheError;
}

unint64_t sub_1000C8890()
{
  unint64_t result = qword_1001CC198;
  if (!qword_1001CC198)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167444, &type metadata for MercuryCacheError);
    atomic_store(result, (unint64_t *)&qword_1001CC198);
  }

  return result;
}

uint64_t sub_1000C88EC()
{
  return sub_1000C7E4C() & 1;
}

uint64_t sub_1000C8904(uint64_t a1)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(v4 - 136, v3, a1, v1, v2);
}

uint64_t sub_1000C8924(void *a1)
{
  return swift_retain(*a1);
}

uint64_t sub_1000C8950@<X0>(_BYTE *a1@<X1>, char a2@<W8>)
{
  *a1 = a2;
  return swift_willThrow();
}

uint64_t sub_1000C895C()
{
  uint64_t v2 = sub_10000D37C(v1, *(void *)(v0 + 40));
  return swift_retain(*v2);
}

void sub_1000C8978()
{
  v0._uint64_t countAndFlagsBits = 0x3A64656C69616620LL;
  v0._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_1000C8994(void *a1)
{
  return type metadata accessor for MercuryCacheUpdateData.Success(0LL);
}

  ;
}

uint64_t sub_1000C89D8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 144) + 8LL))(v1, v0);
}

uint64_t sub_1000C89EC(void *a1)
{
  return swift_retain(*a1);
}

void *sub_1000C89F4()
{
  return sub_10000D37C(v0, v0[3]);
}

void sub_1000C8A00(uint64_t a1)
{
}

  ;
}

void sub_1000C8A20()
{
}

double sub_1000C8A2C()
{
  uint64_t v1 = sub_10000D37C(v0, v0[3]);
  return Date.timeIntervalSinceReferenceDate.getter(v1);
}

uint64_t sub_1000C8A4C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

void sub_1000C8A60(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000C8A70(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_1000C8A80()
{
  return swift_bridgeObjectRelease(v0);
}

void *sub_1000C8A90(void *a1, uint64_t a2)
{
  return sub_10000D37C(a1, a2);
}

uint64_t sub_1000C8AA4()
{
  return sub_10001BD70(v1, v0);
}

void sub_1000C8AB0()
{
}

uint64_t sub_1000C8ABC(uint64_t a1, void *a2)
{
  return sub_1000C0FFC(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2);
}

uint64_t sub_1000C8AC8(uint64_t a1, void *a2)
{
  return sub_1000C6D50(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL, a2, 0x65636976726573LL, 0xE700000000000000LL);
}

uint64_t sub_1000C8AE4(uint64_t a1, uint64_t a2)
{
  return sub_1000C7F84(a1, a2, 0x65636976726573LL, 0xE700000000000000LL);
}

uint64_t sub_1000C8AFC(uint64_t a1, uint64_t a2)
{
  return sub_10001BDC8(*(void *)a2, *(void *)(a2 + 8));
}

  ;
}

  ;
}

uint64_t sub_1000C8B3C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v3;
  a1[2].n128_u64[1] = v2;
  a1[3].n128_u8[0] = 3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000C8B54(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v4 - 96) = v3;
  *(void *)(v4 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C8B6C()
{
  return swift_willThrow();
}

uint64_t sub_1000C8B74()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v0, v2);
}

void sub_1000C8B8C(uint64_t a1)
{
}

void sub_1000C8B94()
{
}

  ;
}

uint64_t sub_1000C8BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C60A4(a1, (a2 - 32) | 0x8000000000000000LL, v2);
}

void sub_1000C8BD8(uint64_t a1)
{
}

uint64_t sub_1000C8BE4()
{
  *(void *)(v2 - 128) = v1;
  *(void *)(v2 - 152) = *(void *)(v2 - 248);
  *(void *)(v2 - 144) = v0;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 152);
}

void sub_1000C8BF8( uint64_t a1, uint64_t (*a2)(_BYTE *, _BYTE *), uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t))
{
}

uint64_t sub_1000C8C04(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(a1, a2, 7LL);
}

void sub_1000C8C0C(uint64_t a1)
{
}

uint64_t sub_1000C8C18()
{
  uint64_t v1 = *sub_10000D37C((void *)(v0 + 16), *(void *)(v0 + 40));
  return swift_retain(v1);
}

uint64_t sub_1000C8C3C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  *(void *)(v2 - 112) = (v1 - 32) | 0x8000000000000000LL;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 120);
}

void sub_1000C8C50()
{
  *(void *)(v0 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0LL;
  *(void *)(v0 - 112) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
}

uint64_t sub_1000C8C64(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  *(void *)(v2 - 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 160);
}

  ;
}

void sub_1000C8C90(unint64_t *a1)
{
}

  ;
}

uint64_t sub_1000C8CA4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 160) + 8LL))(v0, *(void *)(v1 - 152));
}

  ;
}

void *sub_1000C8CCC(uint64_t a1)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  return sub_10000D37C(v2, *(void *)(v1 + 40));
}

uint64_t sub_1000C8CF4()
{
  return static DispatchQoS.unspecified.getter();
}

  ;
}

uint64_t sub_1000C8D18()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void *sub_1000C8D28()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 168);
  return sub_10000D63C((void *)(v0 - 120));
}

uint64_t sub_1000C8D38()
{
  return swift_getErrorValue(v0, v1 - 72, v1 - 176);
}

uint64_t sub_1000C8D48()
{
  return v0;
}

void sub_1000C8D54()
{
}

void sub_1000C8D60(uint64_t a1)
{
  *(void *)(v2 - 248) = a1;
}

uint64_t sub_1000C8D6C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return swift_bridgeObjectRelease(a13);
}

uint64_t sub_1000C8D74()
{
  return sub_10012A784();
}

void *sub_1000C8D7C()
{
  return sub_10000D37C((void *)(v0 - 128), *(void *)(v0 - 104));
}

uint64_t sub_1000C8D88(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

  ;
}

void sub_1000C8DA8()
{
}

uint64_t sub_1000C8DB4()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_1000C8DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100048EAC(a1, a2, a3, a4, v4);
}

__n128 *sub_1000C8DC8(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t sub_1000C8DD4()
{
  return sub_1000C69B8();
}

void *sub_1000C8DDC()
{
  return sub_10000D37C(v0, v0[3]);
}

void sub_1000C8DE8()
{
}

  ;
}

void sub_1000C8DFC()
{
}

uint64_t sub_1000C8E08()
{
  return 0LL;
}

uint64_t sub_1000C8E1C()
{
  return sub_1000C21C8(0LL);
}

uint64_t sub_1000C8E28()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_1000C8E34()
{
}

uint64_t sub_1000C8E40()
{
  return v0 - 128;
}

uint64_t sub_1000C8E4C()
{
  return sub_10001BD84(v1, v0);
}

  ;
}

uint64_t sub_1000C8E6C()
{
  uint64_t v2 = *(void *)(v1 - 128);
  uint64_t v3 = *(void *)(v1 - 120);
  *(void *)(v1 - 104) = v0;
  *(void *)(v1 - 128) = v2;
  *(void *)(v1 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v3;
  return v1 - 128;
}

ValueMetadata *type metadata accessor for MercuryCacheDataFetcher()
{
  return &type metadata for MercuryCacheDataFetcher;
}

uint64_t sub_1000C8E90()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC1A0 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000C8ED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(_BYTE *)(v5 + 233) = a5;
  *(void *)(v5 + 256) = a3;
  *(void *)(v5 + 264) = a4;
  *(void *)(v5 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  *(void *)(v5 + 248) = a2;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v5 + 272) = sub_1000C9AD4(v6);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000C8F1C()
{
  uint64_t v50 = (void *)(v0 + 16);
  if (qword_1001C8020 != -1) {
    swift_once(&qword_1001C8020, sub_1000C8E90);
  }
  uint64_t v51 = v0 + 112;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v2 = *(void *)(sub_100010570() - 8);
  uint64_t v3 = sub_10001059C( ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
       + 3LL * *(void *)(v2 + 72),
         *(unsigned __int8 *)(v2 + 80));
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v4 = sub_10000D33C(&qword_1001CC1B8);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v4;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for MercuryCacheDataFetcher;
  uint64_t v5 = (id)AMSLogKey(v4);
  if (v5)
  {
    uint64_t v1 = v5;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    swift_bridgeObjectRetain(v8);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v17 = sub_1000C9AE8(v9, v10, v11, v12, v13, v14, v15, v16, v49, v50);
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_getMetatypeMetadata(v17);
    *(void *)(v0 + 176) = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 176);
    sub_10000E888(v0 + 176);
    sub_10000DC14();
    *(void *)(v0 + 168) = &type metadata for String;
    *(void *)(v0 + 144) = v6;
    *(void *)(v0 + 152) = v8;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 144);
    sub_10000E888(v0 + 144);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v26 = sub_1000C9AE8(v18, v19, v20, v21, v22, v23, v24, v25, v49, v50);
    *(void *)(v0 + 72) = swift_getMetatypeMetadata(v26);
    *(void *)(v0 + 48) = v26;
    sub_1000C9B38();
    sub_1000C9B40();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  id v27 = *(void **)(v0 + 240);
  sub_10000D3A0(v1);
  id v28 = objc_msgSend(v27, "ams_DSID");
  if (v28)
  {
    id v29 = v28;
    *(void *)(v0 + 104) = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v29;
  }

  else
  {
    *(_OWORD *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0u;
    *(_OWORD *)(v0 + 96) = 0u;
  }

  int v30 = *(unsigned __int8 *)(v0 + 233);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v32 = *(void *)(v0 + 264);
  static LogMessage.sensitive(_:)(v0 + 80);
  sub_10000E888(v0 + 80);
  _StringGuts.grow(_:)(33LL);
  *(void *)(v0 + 208) = 0LL;
  *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xE000000000000000LL;
  v33._object = (void *)0x8000000100173D40LL;
  v33._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = Set.description.getter(v31, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x646F6D20726F6620LL;
  v35._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v35);
  *(void *)(v0 + 224) = v32;
  *(_BYTE *)(v0 + 232) = v30;
  _print_unlocked<A, B>(_:_:)( v0 + 224,  v0 + 208,  &unk_1001AF558,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v36 = *(void *)(v0 + 208);
  uint64_t v37 = *(void *)(v0 + 216);
  *(void *)(v0 + 136) = &type metadata for String;
  *(void *)(v0 + 112) = v36;
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v37;
  static LogMessage.safe(_:)(v51);
  uint64_t v38 = sub_10000E888(v51);
  uint64_t v39 = static os_log_type_t.info.getter(v38);
  sub_1000BD1B0(v39, v3);
  swift_bridgeObjectRelease();
  if (v30)
  {
    uint64_t v40 = *(void *)(v0 + 248);
    uint64_t v41 = *(void *)(v0 + 256);
    uint64_t v42 = *(void **)(v0 + 240);
    objc_allocWithZone(&OBJC_CLASS___AMSMercuryCacheFetchTask);
    id v43 = v42;
    swift_unknownObjectRetain(v40);
    swift_bridgeObjectRetain(v41);
    *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_1000C99E4( v43,  v40,  v41,  0xD00000000000001CLL,  0x800000010016CD90LL,  49LL,  0xE100000000000000LL);
    uint64_t v44 = (void *)swift_task_alloc(dword_1001CC1C4);
    *(void *)(v0 + 288) = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_1000C9330;
    return sub_1000C9418();
  }

  else
  {
    uint64_t v46 = *(void *)(v0 + 272);
    swift_bridgeObjectRetain(*(void *)(v0 + 264));
    swift_task_dealloc(v46);
    uint64_t v47 = sub_1000C9B0C();
    return v48(v47);
  }

uint64_t sub_1000C9330(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 288);
  *(void *)(*v2 + 296) = v1;
  swift_task_dealloc(v5);
  if (!v1) {
    *(void *)(v4 + 304) = a1;
  }
  sub_100096178();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_1000C93A0()
{
  swift_task_dealloc(*(void *)(v0 + 272));
  uint64_t v1 = sub_1000C9B0C();
  return v2(v1);
}

uint64_t sub_1000C93DC()
{
  uint64_t v1 = *(void *)(v0 + 272);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C9418()
{
  *(void *)(v1 + 256) = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v1 + 264) = sub_1000C9AD4(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000C9454()
{
  uint64_t v1 = v0 + 16;
  id v2 = [*(id *)(v0 + 256) perform];
  *(void *)(v0 + 272) = v2;
  *(void *)(v0 + 56) = v0 + 248;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1000C950C;
  uint64_t v3 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = _NSConcreteStackBlock;
  uint64_t v4 = (void *)(v0 + 80);
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000C9998;
  void v4[3] = &unk_1001AF278;
  void v4[4] = v3;
  [v2 resultWithCompletion:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1000C950C()
{
  *(void *)(*(void *)v0 + 28_swift_stdlib_reportUnimplementedInitializer("amsengagementd.JSSubscriptionStatus", 35LL, "init()", 6LL, 0LL) = *(void *)(*(void *)v0 + 48LL);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000C9560()
{
  uint64_t v1 = *(void **)(v0 + 248);

  uint64_t v22 = 0LL;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v1,  &v22,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  if (v22)
  {
    uint64_t v2 = *(void *)(v0 + 264);

    swift_task_dealloc(v2);
    uint64_t v3 = sub_1000C9B0C();
    return v4(v3);
  }

  else
  {
    uint64_t v6 = (void *)(v0 + 120);
    if (qword_1001C8020 != -1) {
      swift_once(&qword_1001C8020, sub_1000C8E90);
    }
    uint64_t v7 = *(void **)(v0 + 256);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v8 = *(void *)(sub_100010570() - 8);
    uint64_t v9 = sub_10001059C( ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
         + 2LL * *(void *)(v8 + 72),
           *(unsigned __int8 *)(v8 + 80));
    *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    *(void *)(v0 + 144) = sub_10000DAA0(0LL, &qword_1001CC1C8, &OBJC_CLASS___AMSMercuryCacheFetchTask_ptr);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v7;
    id v10 = (id)AMSLogKey(v7);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v14 = v13;

      swift_bridgeObjectRetain(v14);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v15 = sub_1000C9B1C((void *)(v0 + 120));
      *(void *)(v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_getMetatypeMetadata(v15);
      *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v15;
      sub_1000C9B38();
      sub_1000C9B40();
      sub_10000DC14();
      *(void *)(v0 + 176) = &type metadata for String;
      *(void *)(v0 + 152) = v12;
      *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v14;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 152);
      uint64_t v6 = (void *)(v0 + 120);
      sub_10000E888(v0 + 152);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v16 = sub_1000C9B1C((void *)(v0 + 120));
      *(void *)(v0 + 208) = swift_getMetatypeMetadata(v16);
      *(void *)(v0 + 184) = v16;
      sub_1000C9B38();
      sub_1000C9B40();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v6);
    uint64_t v17 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
    uint64_t v18 = static os_log_type_t.error.getter(v17);
    sub_1000BD1B0(v18, v9);
    swift_bridgeObjectRelease();
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = String._bridgeToObjectiveC()();
    (id)AMSError(4LL, v19, v20, 0LL);

    swift_willThrow(v21);
    swift_task_dealloc(*(void *)(v0 + 264));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000C9880()
{
  uint64_t v1 = *(void **)(v0 + 272);
  swift_willThrow();

  swift_task_dealloc(*(void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C98C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (void *)swift_task_alloc(dword_1001CC1B4);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_1000C9944;
  return sub_1000C8ED8(a1, a2, a3, a4, a5);
}

uint64_t sub_1000C9944(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000C9998(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return sub_10009B9F8(v3, a3);
  }
  if (a2) {
    return sub_10009BA44(v3, (uint64_t)a2);
  }
  __break(1u);
  return result;
}

id sub_1000C99E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a7);
  id v17 = [v8 initWithAccount:a1 bag:a2 cacheTypeIDs:isa clientIdentifier:v15 clientVersion:v16];

  swift_unknownObjectRelease(a2);
  return v17;
}

uint64_t sub_1000C9AD4(uint64_t a1)
{
  return swift_task_alloc((*(void *)(*(void *)(a1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000C9AE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v11 = sub_10000D37C(a10, v10);
  return swift_getDynamicType(v11, v10, 1LL);
}

uint64_t sub_1000C9B0C()
{
  return v0;
}

uint64_t sub_1000C9B1C(void *a1)
{
  uint64_t v2 = sub_10000D37C(a1, v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000C9B38()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

uint64_t sub_1000C9B40()
{
  return sub_10000E888(v0);
}

void sub_1000C9B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9D80);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  uint64_t v40 = *(void *)(updated - 8);
  uint64_t v8 = __chkstk_darwin(updated);
  uint64_t v38 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v37 = (uint64_t)&v35 - v10;
  uint64_t v11 = a1 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(a1 + 56);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v16 = 0LL;
  uint64_t v39 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_22;
    }

    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    if (v19 >= v15) {
      goto LABEL_34;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v15) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v11 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v15) {
          goto LABEL_34;
        }
        unint64_t v20 = *(void *)(v11 + 8 * v16);
        if (!v20)
        {
          int64_t v16 = v19 + 3;
          if (v19 + 3 >= v15) {
            goto LABEL_34;
          }
          unint64_t v20 = *(void *)(v11 + 8 * v16);
          if (!v20) {
            break;
          }
        }
      }
    }

LABEL_36:
  __break(1u);
}

      unint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v68;
      uint64_t v5 = a3;
      uint64_t v4 = v72;
    }
  }

  unint64_t v18 = v8 + 4;
  if (v8 + 4 >= v65) {
    goto LABEL_79;
  }
  int64_t v16 = *(void *)(v64 + 8 * v18);
  if (v16)
  {
    unint64_t v17 = v8 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    unint64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v17 >= v65) {
      goto LABEL_79;
    }
    int64_t v16 = *(void *)(v64 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_21;
    }
  }

                  sub_10004844C(v44);
                  return;
                }
              }
            }
          }
        }

  __break(1u);
LABEL_37:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1000C9ED0(uint64_t a1)
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  uint64_t v36 = *(void *)(updated - 8);
  uint64_t v2 = __chkstk_darwin(updated);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v31 - v6;
  __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)&v31 - v8;
  sub_1000BE890(v45, a1);
  uint64_t v46 = v45[0];
  uint64_t v32 = v45[1];
  int64_t v9 = v45[3];
  unint64_t v10 = v45[4];
  int64_t v34 = (unint64_t)(v45[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v11 = _swiftEmptyArrayStorage;
  Swift::String v33 = v7;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_20;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v14 >= v34) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v34) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v34) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v34) {
            goto LABEL_30;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v34) {
              goto LABEL_30;
            }
            unint64_t v15 = *(void *)(v32 + 8 * v16);
            if (!v15)
            {
              int64_t v17 = v9 + 6;
              while (v17 < v34)
              {
                unint64_t v15 = *(void *)(v32 + 8 * v17++);
                if (v15)
                {
                  int64_t v16 = v17 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_1000CA34C(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_10000D33C(&qword_1001CC1D8);
  v2[4] = sub_1000C9AD4(v3);
  uint64_t updated = type metadata accessor for MercuryCacheUpdateResponse(0LL);
  void v2[5] = updated;
  v2[6] = sub_1000C9AD4(updated);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000CA3A0()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  sub_1000CADC4(v0[2], v2);
  if (sub_1000102D4(v2, 1LL, v1) == 1)
  {
    sub_100019E6C(v0[4], &qword_1001CC1D8);
    uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1001CC1E4);
    v0[13] = (uint64_t)v3;
    *uint64_t v3 = v0;
    v3[1] = (uint64_t *)sub_1000CA6C4;
    return sub_1000CA710(1);
  }

  else
  {
    uint64_t v5 = (uint64_t *)v0[6];
    uint64_t v6 = (uint64_t *)v0[3];
    sub_1000CCDAC(v0[4], (uint64_t)v5, type metadata accessor for MercuryCacheUpdateResponse);
    sub_1000CAF70(v5);
    uint64_t v8 = v7;
    v0[7] = v7;
    uint64_t updated = type metadata accessor for MercuryCacheDataUpdateHandler(0LL);
    v0[8] = updated;
    unint64_t v10 = (char *)v6 + *(int *)(updated + 24);
    uint64_t v11 = *v5;
    uint64_t v12 = swift_task_alloc(32LL);
    *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
    swift_bridgeObjectRetain(v11);
    uint64_t v13 = sub_1000CC3B4((uint64_t)sub_1000CC398, v12, v11);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v12);
    sub_1000C9ED0(v13);
    v0[9] = v14;
    swift_release(v13);
    uint64_t v15 = *v6;
    int64_t v16 = (uint64_t **)swift_task_alloc(dword_1001CC4F4);
    v0[10] = (uint64_t)v16;
    *int64_t v16 = v0;
    v16[1] = (uint64_t *)sub_1000CA52C;
    return sub_1000D17E0(v8, v15);
  }

uint64_t sub_1000CA52C()
{
  uint64_t v2 = *v0;
  sub_100067A34(*(void *)(v2 + 80), &v2);
  swift_bridgeObjectRelease();
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000CA57C()
{
  uint64_t v1 = (void *)(v0[3] + *(int *)(v0[8] + 44LL));
  sub_10000D37C(v1, v1[3]);
  sub_1000C4750();
  v0[11] = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))((char *)&dword_1001CF990 + dword_1001CF990);
  uint64_t v3 = (void *)swift_task_alloc(unk_1001CF994);
  v0[12] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000CA60C;
  return v5();
}

uint64_t sub_1000CA60C()
{
  uint64_t v2 = *v1;
  uint64_t v8 = v2;
  sub_100067A34(*(void *)(v2 + 96), &v8);
  uint64_t v3 = *(void *)(v2 + 88);
  if (v0) {
    swift_errorRelease(v0);
  }
  swift_release(v3);
  sub_100096178();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000CA680()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v1);
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000CA6C4()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v6 = v1;
  uint64_t v2 = (void *)*v0;
  sub_100067A34(v1[13], &v6);
  uint64_t v3 = v1[6];
  uint64_t v4 = v1[4];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return sub_1000105A8((uint64_t (*)(void))v2[1]);
}

uint64_t sub_1000CA710(char a1)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(_BYTE *)(v2 + 152) = a1;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  *(void *)(v2 + 24) = updated;
  *(void *)(v2 + 32) = sub_1000C9AD4(updated);
  uint64_t v4 = sub_1000378A0();
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 56) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D33C(&qword_1001CC218);
  *(void *)(v2 + 64) = sub_1000C9AD4(v6);
  uint64_t v7 = type metadata accessor for MercuryCacheMetadata(0LL);
  *(void *)(v2 + 72) = v7;
  *(void *)(v2 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = *(void *)(v7 - 8);
  *(void *)(v2 + 88) = sub_1000CD93C();
  *(void *)(v2 + 96) = sub_1000CD93C();
  *(void *)(v2 + 104) = sub_1000CD93C();
  *(void *)(v2 + 112) = sub_1000CD93C();
  uint64_t v8 = type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v8;
  *(void *)(v2 + 128) = sub_1000C9AD4(v8);
  sub_100096178();
  return sub_10000DD48();
}

void sub_1000CA7E0()
{
  uint64_t v63 = *(void *)(v0 + 120);
  uint64_t v64 = *(void *)(v0 + 128);
  uint64_t v67 = *(void *)(v0 + 80);
  uint64_t v68 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t updated = (int *)type metadata accessor for MercuryCacheDataUpdateHandler(0LL);
  uint64_t v62 = v1;
  uint64_t v2 = (uint64_t *)(v1 + updated[6]);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  swift_bridgeObjectRetain(*v2);
  uint64_t v5 = swift_bridgeObjectRetain(v4);
  uint64_t v6 = sub_1000E0580(v5, v3);
  uint64_t v7 = swift_bridgeObjectRetain(v2[2]);
  uint64_t v8 = sub_1000E0580(v7, v6);
  int64_t v9 = 0LL;
  uint64_t v60 = v8 + 56;
  uint64_t v65 = v8;
  uint64_t v10 = -1LL;
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  if (-v11 < 64) {
    uint64_t v10 = ~(-1LL << -(char)v11);
  }
  unint64_t v12 = v10 & *(void *)(v8 + 56);
  int64_t v61 = (unint64_t)(63 - v11) >> 6;
  uint64_t v13 = _swiftEmptyArrayStorage;
  while (1)
  {
    *(void *)(v0 + 136) = v13;
    if (v12)
    {
      int64_t v69 = v9;
      unint64_t v14 = __clz(__rbit64(v12)) | (v9 << 6);
      goto LABEL_20;
    }

    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v15 >= v61) {
      goto LABEL_38;
    }
    unint64_t v16 = *(void *)(v60 + 8 * v15);
    int64_t v17 = v9 + 1;
    if (!v16)
    {
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v61) {
        goto LABEL_38;
      }
      unint64_t v16 = *(void *)(v60 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v9 + 3;
        if (v9 + 3 >= v61) {
          goto LABEL_38;
        }
        unint64_t v16 = *(void *)(v60 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_1000CAD04()
{
  uint64_t v11 = (void *)*v0;
  uint64_t v1 = v11[16];
  uint64_t v3 = v11[13];
  uint64_t v2 = v11[14];
  uint64_t v5 = v11[11];
  uint64_t v4 = v11[12];
  uint64_t v7 = v11[7];
  uint64_t v6 = v11[8];
  uint64_t v8 = v11[4];
  int64_t v9 = (void *)*v0;
  sub_100067A34(v11[18], &v11);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return ((uint64_t (*)(void))v9[1])();
}

uint64_t sub_1000CADC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000D33C(&qword_1001CC1D8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t updated = (int *)type metadata accessor for MercuryCacheDataUpdateHandler(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + updated[9], v5);
    double v13 = *(double *)(v2 + updated[7]);
    uint64_t v14 = *(void *)(v2 + updated[8]);
    double v15 = *(double *)(v2 + updated[10]);
    swift_bridgeObjectRetain(a1);
    sub_1000DE228(v16, (uint64_t)v8, v14, (uint64_t)v11, v13, v15);
    uint64_t v17 = type metadata accessor for MercuryCacheUpdateResponse(0LL);
    if (sub_1000102D4((uint64_t)v11, 1LL, v17) == 1)
    {
      sub_100019E6C((uint64_t)v11, &qword_1001CC1D8);
      uint64_t v18 = a2;
      uint64_t v19 = 1LL;
    }

    else
    {
      sub_1000CCDAC((uint64_t)v11, a2, type metadata accessor for MercuryCacheUpdateResponse);
      uint64_t v18 = a2;
      uint64_t v19 = 0LL;
    }

    return sub_10000D5C0(v18, v19, 1LL, v17);
  }

  else
  {
    uint64_t v20 = type metadata accessor for MercuryCacheUpdateResponse(0LL);
    return sub_10000D5C0(a2, 1LL, 1LL, v20);
  }

void sub_1000CAF70(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.Success(0LL);
  __chkstk_darwin(updated);
  __int128 v153 = (uint64_t *)((char *)&v144 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_10000D33C(&qword_1001CC200);
  __chkstk_darwin(v5);
  id v157 = (char *)&v144 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
  uint64_t v7 = __chkstk_darwin(v152);
  uint64_t v151 = (uint64_t)&v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  id v162 = (uint64_t *)((char *)&v144 - v9);
  uint64_t v172 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  uint64_t v155 = *(void *)(v172 - 8);
  uint64_t v10 = __chkstk_darwin(v172);
  uint64_t v156 = (char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v164 = (uint64_t)&v144 - v12;
  uint64_t v13 = sub_10000D33C(&qword_1001C9D80);
  __chkstk_darwin(v13);
  uint64_t v170 = (uint64_t)&v144 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v177 - 8);
  uint64_t v16 = __chkstk_darwin(v177);
  uint64_t v147 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  __int128 v150 = (char *)&v144 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v149 = (char *)&v144 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  id v161 = (char *)&v144 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  id v160 = (char *)&v144 - v25;
  __chkstk_darwin(v24);
  uint64_t v174 = (uint64_t)&v144 - v26;
  uint64_t v159 = type metadata accessor for MercuryCacheMetadata(0LL);
  uint64_t v175 = *(void *)(v159 - 8);
  uint64_t v27 = __chkstk_darwin(v159);
  uint64_t v169 = (uint64_t)&v144 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v176 = (uint64_t *)((char *)&v144 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v144 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  int v36 = (char *)&v144 - v35;
  __chkstk_darwin(v34);
  uint64_t v178 = (uint64_t *)((char *)&v144 - v37);
  uint64_t v38 = sub_10000D33C(&qword_1001CC208);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (uint64_t *)((char *)&v144 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v39);
  id v167 = (uint64_t *)((char *)&v144 - v42);
  uint64_t v43 = *a1;
  uint64_t v181 = v2;
  swift_bridgeObjectRetain(v43);
  uint64_t v44 = sub_1000CC3B4((uint64_t)sub_1000CCD90, (uint64_t)v180, v43);
  uint64_t v146 = 0LL;
  swift_bridgeObjectRelease();
  uint64_t v166 = v2;
  uint64_t v45 = *(void *)(v2 + 8);
  uint64_t v46 = *(void *)(v45 + 64);
  uint64_t v148 = v45 + 64;
  uint64_t v47 = 1LL << *(_BYTE *)(v45 + 32);
  uint64_t v48 = -1LL;
  if (v47 < 64) {
    uint64_t v48 = ~(-1LL << v47);
  }
  unint64_t v49 = v48 & v46;
  int64_t v158 = (unint64_t)(v47 + 63) >> 6;
  int64_t v145 = v158 - 1;
  uint64_t v163 = v45;
  swift_bridgeObjectRetain(v45);
  int64_t v168 = 0LL;
  uint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v171 = v15;
  id v165 = v41;
  while (1)
  {
    uint64_t v179 = v50;
    if (v49)
    {
      uint64_t v173 = (v49 - 1) & v49;
      unint64_t v51 = __clz(__rbit64(v49)) | (v168 << 6);
LABEL_6:
      uint64_t v52 = *(void *)(v163 + 56);
      uint64_t v53 = (void *)(*(void *)(v163 + 48) + 16 * v51);
      uint64_t v54 = v53[1];
      *uint64_t v41 = *v53;
      v41[1] = v54;
      uint64_t v55 = v52 + *(void *)(v175 + 72) * v51;
      uint64_t v56 = sub_10000D33C(&qword_1001CC210);
      sub_1000CCDCC(v55, (uint64_t)v41 + *(int *)(v56 + 48), type metadata accessor for MercuryCacheMetadata);
      sub_10000D5C0((uint64_t)v41, 0LL, 1LL, v56);
      swift_bridgeObjectRetain(v54);
      uint64_t v57 = v167;
      goto LABEL_25;
    }

    int64_t v58 = v168 + 1;
    if (__OFADD__(v168, 1LL))
    {
      __break(1u);
      goto LABEL_54;
    }

    uint64_t v57 = v167;
    if (v58 < v158)
    {
      unint64_t v59 = *(void *)(v148 + 8 * v58);
      if (v59) {
        goto LABEL_10;
      }
      int64_t v60 = v168 + 2;
      ++v168;
      if (v58 + 1 < v158)
      {
        unint64_t v59 = *(void *)(v148 + 8 * v60);
        if (v59) {
          goto LABEL_13;
        }
        int64_t v168 = v58 + 1;
        if (v58 + 2 < v158)
        {
          unint64_t v59 = *(void *)(v148 + 8 * (v58 + 2));
          if (v59)
          {
            v58 += 2LL;
            goto LABEL_10;
          }

          int64_t v60 = v58 + 3;
          int64_t v168 = v58 + 2;
          if (v58 + 3 < v158)
          {
            unint64_t v59 = *(void *)(v148 + 8 * v60);
            if (v59)
            {
LABEL_13:
              int64_t v58 = v60;
LABEL_10:
              uint64_t v173 = (v59 - 1) & v59;
              unint64_t v51 = __clz(__rbit64(v59)) + (v58 << 6);
              int64_t v168 = v58;
              goto LABEL_6;
            }

            while (1)
            {
              int64_t v58 = v60 + 1;
              if (__OFADD__(v60, 1LL)) {
                break;
              }
              if (v58 >= v158)
              {
                int64_t v168 = v145;
                goto LABEL_24;
              }

              unint64_t v59 = *(void *)(v148 + 8 * v58);
              ++v60;
              if (v59) {
                goto LABEL_10;
              }
            }

uint64_t type metadata accessor for MercuryCacheDataUpdateHandler(uint64_t a1)
{
  uint64_t result = qword_1001CC278;
  if (!qword_1001CC278) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MercuryCacheDataUpdateHandler);
  }
  return result;
}

uint64_t sub_1000CBDAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CC1F8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  *uint64_t v9 = v11;
  v9[1] = v10;
  sub_1000CCDCC(a2, (uint64_t)v9 + *(int *)(v7 + 48), type metadata accessor for MercuryCacheUpdateData.DataKind);
  uint64_t v12 = (uint64_t *)(a3 + *(int *)(type metadata accessor for MercuryCacheDataUpdateHandler(0LL) + 24));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = sub_1000E0580(v15, v13);
  swift_bridgeObjectRetain(v12[2]);
  uint64_t v18 = sub_1000E0580(v17, v16);
  sub_1000F4E34(v11, v10, v18);
  LOBYTE(v12) = v19;
  swift_bridgeObjectRelease();
  sub_100019E6C((uint64_t)v9, &qword_1001CC1F8);
  return v12 & 1;
}

void sub_1000CBEC8( uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v61 = a3;
  uint64_t v62 = a5;
  uint64_t v60 = a4;
  int v65 = a2;
  uint64_t v67 = a6;
  uint64_t v66 = sub_1000378A0();
  uint64_t v64 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  sub_10000DD5C();
  uint64_t v63 = v9;
  uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
  sub_10000DC64();
  __chkstk_darwin(v11);
  sub_10000DE7C();
  uint64_t v14 = (char *)(v13 - v12);
  uint64_t v57 = type metadata accessor for MercuryCacheUpdateData.Success(0LL);
  sub_10000DC64();
  __chkstk_darwin(v15);
  sub_10000DD5C();
  uint64_t v58 = v16;
  sub_10000D33C(&qword_1001C9D80);
  sub_10000DC64();
  __chkstk_darwin(v17);
  sub_10000DE7C();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  sub_10000DC64();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v56 - v26;
  uint64_t v28 = (int *)type metadata accessor for MercuryCacheMetadata(0LL);
  sub_10000DC64();
  __chkstk_darwin(v29);
  sub_10000DE7C();
  uint64_t v32 = v31 - v30;
  sub_1000CCDCC((uint64_t)a1, v31 - v30, v33);
  uint64_t v34 = a1[1];
  uint64_t v59 = *a1;
  sub_1000CCE2C(v62, v20);
  if (sub_1000102D4(v20, 1LL, v21) == 1)
  {
    swift_bridgeObjectRetain(v34);
    sub_100019E6C(v20, &qword_1001C9D80);
    uint64_t v35 = (char *)a1 + v28[5];
    uint64_t v36 = v64;
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
    uint64_t v38 = v66;
    v37(&v14[updated[5]], v35, v66);
    uint64_t v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v37)(&v14[updated[7]], v60, v38);
    *(void *)uint64_t v14 = v59;
    *((void *)v14 + Hasher._combine(_:)(v1 & 1) = v34;
    uint64_t v40 = &v14[updated[6]];
    *(_OWORD *)uint64_t v40 = xmmword_100167500;
    *((void *)v40 + 2) = v61;
    *((double *)v40 + 3) = a7;
    v40[32] = 0;
    uint64_t v41 = v63;
    static Date.now.getter(v39);
    sub_1000CDA0C((uint64_t)v14, v65 & 1, v41);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v41, v38);
    uint64_t v42 = type metadata accessor for MercuryCacheUpdateData.Failure;
    uint64_t v43 = (uint64_t)v14;
  }

  else
  {
    uint64_t v44 = v63;
    char v45 = v65;
    sub_1000CD944(v20, (uint64_t)v27);
    sub_1000CCDCC((uint64_t)v27, (uint64_t)v25, type metadata accessor for MercuryCacheUpdateData.DataKind);
    if (swift_getEnumCaseMultiPayload(v25, v21) == 1)
    {
      uint64_t v46 = type metadata accessor for MercuryCacheUpdateData.Failure;
      sub_1000CD944((uint64_t)v25, (uint64_t)v14);
      static Date.now.getter(v47);
      sub_1000CDA0C((uint64_t)v14, v45 & 1, v44);
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v44, v66);
      uint64_t v48 = (uint64_t)v14;
    }

    else
    {
      uint64_t v46 = type metadata accessor for MercuryCacheUpdateData.Success;
      uint64_t v49 = (uint64_t)v25;
      uint64_t v50 = v58;
      sub_1000CD944(v49, v58);
      uint64_t v51 = v57;
      uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 24);
      uint64_t v53 = v66;
      v52(v32 + v28[5], v50 + *(int *)(v57 + 20), v66);
      v52(v32 + v28[6], v50 + *(int *)(v51 + 28), v53);
      uint64_t v54 = v32 + v28[7];
      sub_100019E6C(v54, &qword_1001CC200);
      uint64_t v55 = type metadata accessor for RetryConfiguration(0LL);
      sub_10000D5C0(v54, 1LL, 1LL, v55);
      uint64_t v48 = v50;
    }

    sub_100019EC0(v48, v46);
    uint64_t v42 = type metadata accessor for MercuryCacheUpdateData.DataKind;
    uint64_t v43 = (uint64_t)v27;
  }

  sub_100019EC0(v43, v42);
  sub_1000CCDAC(v32, v67, type metadata accessor for MercuryCacheMetadata);
}

uint64_t sub_1000CC28C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CC1F8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  *uint64_t v9 = v11;
  v9[1] = v10;
  sub_1000CCDCC(a2, (uint64_t)v9 + *(int *)(v7 + 48), type metadata accessor for MercuryCacheUpdateData.DataKind);
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = sub_1000E0580(v14, v12);
  swift_bridgeObjectRetain(a3[2]);
  uint64_t v17 = sub_1000E0580(v16, v15);
  sub_1000F4E34(v11, v10, v17);
  LOBYTE(v13) = v18;
  swift_bridgeObjectRelease();
  sub_100019E6C((uint64_t)v9, &qword_1001CC1F8);
  return v13 & 1;
}

uint64_t sub_1000CC398(uint64_t *a1, uint64_t a2)
{
  return sub_1000CC28C(a1, a2, *(uint64_t **)(v2 + 16)) & 1;
}

uint64_t sub_1000CC3B4(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t (*)(void *, char *, __n128))isStackAllocationSafe;
  char v7 = *(_BYTE *)(a3 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v12 = (unint64_t *)((char *)&v17 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100149C08(0LL, v10, v12);
    sub_1000CC530(v12, v10, a3, v6);
    if (v3) {
      swift_willThrow(v13);
    }
    else {
      return v13;
    }
  }

  else
  {
    uint64_t v14 = (unint64_t *)swift_slowAlloc(v11, -1LL);
    sub_100149C08(0LL, v10, v14);
    sub_1000CC530(v14, v10, a3, v6);
    a2 = v15;
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return a2;
}

void sub_1000CC530( unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, char *, __n128))
{
  uint64_t v31 = a4;
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  uint64_t v29 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  unsigned int v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v26 = 0LL;
  uint64_t v27 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v9 << 6);
LABEL_17:
    uint64_t v19 = *(void *)(a3 + 56);
    uint64_t v20 = (void *)(*(void *)(a3 + 48) + 16 * v15);
    uint64_t v21 = v20[1];
    v30[0] = *v20;
    v30[1] = v21;
    sub_1000CCDCC( v19 + *(void *)(v29 + 72) * v15,  (uint64_t)v8,  type metadata accessor for MercuryCacheUpdateData.DataKind);
    __n128 v22 = swift_bridgeObjectRetain(v21);
    char v23 = v31(v30, v8, v22);
    sub_100019EC0((uint64_t)v8, type metadata accessor for MercuryCacheUpdateData.DataKind);
    swift_bridgeObjectRelease();
    if (v4) {
      return;
    }
    if ((v23 & 1) != 0)
    {
      *(unint64_t *)((char *)v25 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      BOOL v16 = __OFADD__(v26++, 1LL);
      if (v16) {
        goto LABEL_30;
      }
    }
  }

  BOOL v16 = __OFADD__(v9++, 1LL);
  if (v16)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v9 >= v28) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v9);
  if (v17)
  {
LABEL_16:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
    goto LABEL_17;
  }

  int64_t v18 = v9 + 1;
  if (v9 + 1 >= v28) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v9 + 2;
  if (v9 + 2 >= v28) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v9 + 3;
  if (v9 + 3 >= v28)
  {
LABEL_27:
    sub_1000CC790(v25, v24, v26, (void *)a3);
    return;
  }

  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_15:
    int64_t v9 = v18;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v28) {
      goto LABEL_27;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_16;
    }
  }

void sub_1000CC790(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v41 = a1;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  uint64_t v45 = *(void *)(updated - 8);
  uint64_t v8 = __chkstk_darwin(updated);
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)&v40 - v10;
  if (!a3) {
    return;
  }
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return;
  }

  uint64_t v43 = v9;
  sub_10000D33C(&qword_1001CC1F0);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)(a3);
  uint64_t v12 = v11;
  uint64_t v40 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0LL;
  }
  else {
    unint64_t v13 = *v41;
  }
  uint64_t v14 = 0LL;
  uint64_t v15 = v11 + 64;
  uint64_t v16 = v43;
  uint64_t v17 = (uint64_t)v44;
  uint64_t v42 = a4;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v46 = v14;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_25;
    }

    uint64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v20 >= v40) {
      return;
    }
    unint64_t v21 = v41[v20];
    uint64_t v22 = v14 + 1;
    if (!v21)
    {
      uint64_t v22 = v14 + 2;
      if (v14 + 2 >= v40) {
        return;
      }
      unint64_t v21 = v41[v22];
      if (!v21)
      {
        uint64_t v22 = v14 + 3;
        if (v14 + 3 >= v40) {
          return;
        }
        unint64_t v21 = v41[v22];
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1000CCAE4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_10000D33C(&qword_1001CBFA0);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v39 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v38) {
              return v9;
            }
            unint64_t v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  return v9;
                }
                unint64_t v16 = v37[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v17 = v11 + 4;
          }
        }
      }

uint64_t sub_1000CCD90(uint64_t *a1, uint64_t a2)
{
  return sub_1000CBDAC(a1, a2, *(void *)(v2 + 16)) & 1;
}

void sub_1000CCDAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10001A48C(a1, a2, a3);
  sub_1000CD924(v3);
  sub_100009044();
}

void sub_1000CCDCC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = sub_10001A48C(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v3, v4, v5);
  sub_100009044();
}

void sub_1000CCE00(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000D33C(a3);
  sub_1000CD924(v3);
  sub_100009044();
}

uint64_t sub_1000CCE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

char *sub_1000CCE74(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v8;
    uint64_t v9 = a3[6];
    unint64_t v10 = &a1[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = *(uint64_t *)((char *)a2 + v9 + 8);
    *(void *)unint64_t v10 = v12;
    *((void *)v10 + Hasher._combine(_:)(v1 & 1) = v13;
    uint64_t v14 = *(uint64_t *)((char *)a2 + v9 + 16);
    uint64_t v28 = *(uint64_t *)((char *)a2 + v9 + 24);
    *((void *)v10 + 2) = v14;
    *((void *)v10 + 3) = v28;
    uint64_t v15 = *(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32);
    uint64_t v26 = v11 + v15;
    unint64_t v27 = &v10[v15];
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(v16 - 8) + 16LL);
    uint64_t v18 = v4;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    __n128 v19 = swift_bridgeObjectRetain(v28);
    v17(v27, v26, v16, v19);
    uint64_t v20 = a3[8];
    *(void *)&v7[a3[7]] = *(char **)((char *)a2 + a3[7]);
    *(void *)&v7[v20] = *(char **)((char *)a2 + v20);
    ((void (*)(char *, char *, uint64_t))v17)(&v7[a3[9]], (char *)a2 + a3[9], v16);
    uint64_t v21 = a3[11];
    *(void *)&v7[a3[10]] = *(char **)((char *)a2 + a3[10]);
    __int128 v22 = *(_OWORD *)((char *)a2 + v21 + 24);
    *(_OWORD *)&v7[v21 + 24] = v22;
    (**(void (***)(void))(v22 - 8))();
    uint64_t v23 = a3[12];
    __int128 v24 = *(_OWORD *)((char *)a2 + v23);
    *(_OWORD *)&v7[v23] = v24;
    swift_unknownObjectRetain(v24);
  }

  return v7;
}

uint64_t sub_1000CCFE8(id *a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = (char *)a1 + a2[6];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = &v4[*(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32)];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v5, v6);
  v7((char *)a1 + a2[9], v6);
  sub_10000D3A0((id *)((char *)a1 + a2[11]));
  return swift_unknownObjectRelease(*(id *)((char *)a1 + a2[12]));
}

void *sub_1000CD0A4(void *a1, uint64_t a2, int *a3)
{
  uint64_t v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8);
  uint64_t v12 = *(void *)(a2 + v8 + 8);
  *uint64_t v9 = v11;
  v9[1] = v12;
  uint64_t v13 = *(void *)(a2 + v8 + 16);
  uint64_t v27 = *(void *)(a2 + v8 + 24);
  _OWORD v9[2] = v13;
  v9[3] = v27;
  uint64_t v14 = *(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32);
  uint64_t v25 = v10 + v14;
  uint64_t v26 = (char *)v9 + v14;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
  id v17 = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  __n128 v18 = swift_bridgeObjectRetain(v27);
  v16(v26, v25, v15, v18);
  uint64_t v19 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)((char *)a1 + v19) = *(void *)(a2 + v19);
  ((void (*)(char *, uint64_t, uint64_t))v16)((char *)a1 + a3[9], a2 + a3[9], v15);
  uint64_t v20 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)(a2 + a3[10]);
  __int128 v21 = *(_OWORD *)(a2 + v20 + 24);
  *(_OWORD *)((char *)a1 + v20 + 24) = v21;
  (**(void (***)(void))(v21 - 8))();
  uint64_t v22 = a3[12];
  __int128 v23 = *(_OWORD *)(a2 + v22);
  *(_OWORD *)((char *)a1 + v22) = v23;
  swift_unknownObjectRetain(v23);
  return a1;
}

uint64_t sub_1000CD1E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = *(void *)(a2 + v10);
  *(void *)(a1 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = v12[1];
  v11[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = v12[2];
  v11[2] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v12[3];
  v11[3] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32);
  __n128 v18 = (char *)v11 + v17;
  uint64_t v19 = (char *)v12 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  __int128 v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24LL);
  v21(v18, v19, v20);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  v21((char *)(a1 + a3[9]), (char *)(a2 + a3[9]), v20);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  sub_1000CD368((void *)(a1 + a3[11]), (void *)(a2 + a3[11]));
  uint64_t v22 = a3[12];
  __int128 v23 = (uint64_t *)(a1 + v22);
  __int128 v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  uint64_t v27 = *v23;
  *__int128 v23 = *v24;
  swift_unknownObjectRetain(v25);
  swift_unknownObjectRelease(v27);
  v23[1] = v26;
  return a1;
}

void *sub_1000CD368(void *result, void *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        Swift::Int result = (void *)swift_release(v11);
        *int v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *int v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *int v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

char *sub_1000CD4D0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  uint64_t v7 = a3[6];
  int v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  __int128 v10 = *(_OWORD *)&a2[v7 + 16];
  *(_OWORD *)int v8 = *(_OWORD *)&a2[v7];
  *((_OWORD *)v8 + Hasher._combine(_:)(v1 & 1) = v10;
  uint64_t v11 = *(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32);
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL);
  v15(v12, v13, v14);
  uint64_t v16 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  v15(&a1[a3[9]], &a2[a3[9]], v14);
  uint64_t v17 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  __n128 v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  __int128 v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)__n128 v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + Hasher._combine(_:)(v1 & 1) = v20;
  *((void *)v18 + 4) = *((void *)v19 + 4);
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

uint64_t sub_1000CD5BC(uint64_t a1, char *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[6];
  int v8 = (void *)(a1 + v7);
  uint64_t v9 = &a2[v7];
  *(void *)(a1 + v7) = *(void *)&a2[v7];
  swift_bridgeObjectRelease();
  v8[1] = *((void *)v9 + 1);
  swift_bridgeObjectRelease();
  void v8[2] = *((void *)v9 + 2);
  swift_bridgeObjectRelease();
  v8[3] = *((void *)v9 + 3);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for MercuryCacheUpdateInput(0LL) + 32);
  uint64_t v11 = (char *)v8 + v10;
  uint64_t v12 = &v9[v10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL);
  v14(v11, v12, v13);
  uint64_t v15 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)&a2[a3[7]];
  *(void *)(a1 + v15) = *(void *)&a2[v15];
  v14((char *)(a1 + a3[9]), &a2[a3[9]], v13);
  uint64_t v16 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)&a2[a3[10]];
  uint64_t v17 = a1 + v16;
  __n128 v18 = &a2[v16];
  sub_10000D3A0((void *)(a1 + v16));
  __int128 v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(v17 + 32) = *((void *)v18 + 4);
  uint64_t v20 = a3[12];
  __int128 v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *((void *)v22 + 1);
  uint64_t v24 = *v21;
  *__int128 v21 = *(void *)v22;
  swift_unknownObjectRelease(v24);
  v21[1] = v23;
  return a1;
}

uint64_t sub_1000CD714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CD720);
}

uint64_t sub_1000CD720(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t updated = type metadata accessor for MercuryCacheUpdateInput(0LL);
    if (*(_DWORD *)(*(void *)(updated - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v9 = updated;
      uint64_t v10 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000378A0();
      uint64_t v10 = *(int *)(a3 + 36);
    }

    return sub_1000102D4((uint64_t)a1 + v10, a2, v9);
  }

uint64_t sub_1000CD7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CD7C0);
}

void *sub_1000CD7C0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *Swift::Int result = (a2 - 1);
  }

  else
  {
    uint64_t updated = type metadata accessor for MercuryCacheUpdateInput(0LL);
    if (*(_DWORD *)(*(void *)(updated - 8) + 84LL) == a3)
    {
      uint64_t v9 = updated;
      uint64_t v10 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v9 = sub_1000378A0();
      uint64_t v10 = *(int *)(a4 + 36);
    }

    return (void *)sub_10000D5C0((uint64_t)v5 + v10, a2, a2, v9);
  }

  return result;
}

uint64_t sub_1000CD850(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for MercuryCacheUpdateInput(319LL);
  if (v3 <= 0x3F)
  {
    v5[2] = *(void *)(result - 8) + 64LL;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[5] = *(void *)(result - 8) + 64LL;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = "(";
      v5[8] = &unk_100167548;
      swift_initStructMetadata(a1, 256LL, 9LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void sub_1000CD918()
{
}

uint64_t sub_1000CD924(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32LL))(v1, v2, a1);
}

uint64_t sub_1000CD93C()
{
  return swift_task_alloc(v0);
}

void sub_1000CD944(uint64_t a1, uint64_t a2)
{
}

  ;
}

void sub_1000CD960(uint64_t a1, uint64_t a2)
{
}

void sub_1000CD968(uint64_t a1, unsigned __int8 a2)
{
  if (v6)
  {
    sub_10000DA58(&v5, v7);
    v4[0] = sub_1000CE8C8(a2);
    v4[1] = v3;
    AnyHashable.init<A>(_:)(v4);
    sub_10000DA1C((uint64_t)v7, (uint64_t)v4);
    sub_100030188((uint64_t)v4, (uint64_t)&v5);
    sub_10000D3A0(v7);
  }

  else
  {
    sub_100019E6C((uint64_t)&v5, &qword_1001CAAD0);
  }

void sub_1000CDA0C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v120 = a3;
  LODWORD(v13_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a2;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DD5C();
  uint64_t v133 = v8;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_10000DE7C();
  uint64_t v12 = v11 - v10;
  sub_1000378A0();
  sub_1000D12C0();
  __chkstk_darwin(v13);
  sub_10001A284();
  uint64_t v123 = v14;
  sub_10001A210();
  __chkstk_darwin(v15);
  uint64_t v122 = (char *)&v120 - v16;
  sub_10001A210();
  __chkstk_darwin(v17);
  uint64_t v121 = (uint64_t)&v120 - v18;
  sub_10000D33C(&qword_1001CC200);
  sub_10000DC64();
  __chkstk_darwin(v19);
  sub_10001A284();
  uint64_t v127 = v20;
  sub_10001A210();
  __chkstk_darwin(v21);
  uint64_t v22 = sub_1000D12A4();
  uint64_t v23 = type metadata accessor for RetryConfiguration(v22);
  sub_10000DC64();
  __chkstk_darwin(v24);
  sub_10001A284();
  uint64_t v125 = (void *)v25;
  sub_10001A210();
  __chkstk_darwin(v26);
  Swift::String v126 = (uint64_t *)((char *)&v120 - v27);
  sub_10001A210();
  __chkstk_darwin(v28);
  uint64_t v128 = (uint64_t)&v120 - v29;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
  uint64_t v31 = a1 + *(int *)(updated + 28);
  uint64_t v32 = type metadata accessor for MercuryCacheMetadata(0LL);
  uint64_t v33 = &v3[*(int *)(v32 + 24)];
  uint64_t v129 = v4;
  char v34 = (void (*)(char *, uint64_t, uint64_t))*((void *)v4 + 3);
  uint64_t v124 = v31;
  uint64_t v132 = v5;
  v34(v33, v31, v5);
  uint64_t v35 = *(int *)(updated + 24);
  uint64_t v131 = a1;
  uint64_t v36 = a1 + v35;
  char v37 = *(_BYTE *)(v36 + 32);
  uint64_t v134 = (void (**)(void, void))v3;
  if ((v37 & 1) != 0)
  {
    uint64_t v132 = v23;
    if (qword_1001C8028 != -1) {
      swift_once(&qword_1001C8028, sub_1000CE7F0);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v38 = *(void *)(*(void *)(sub_10000DC98() - 8) + 72LL);
    sub_1000D126C();
    uint64_t v40 = sub_10000DCF0((uint64_t)&v3[3 * v38], v39);
    *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v139 = v32;
    uint64_t v41 = sub_10000D63C(v138);
    sub_1000CFE30((uint64_t)v134, (uint64_t)v41, type metadata accessor for MercuryCacheMetadata);
    id v43 = (id)AMSLogKey(v42);
    if (v43)
    {
      uint64_t v44 = sub_1000105E8((uint64_t)v43);
      uint64_t v130 = v32;
      uint64_t v45 = v44;
      uint64_t v47 = v46;

      sub_10000DEE0();
      uint64_t v48 = v133;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v49._uint64_t countAndFlagsBits = 0LL;
      v49._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      uint64_t v50 = v139;
      uint64_t v51 = sub_10000D37C(v138, v139);
      uint64_t v52 = sub_10000DC54((uint64_t)v51, v50);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
      uint64_t v135 = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v135);
      sub_1000D1304();
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v135 = v45;
      uint64_t v136 = v47;
      sub_1000675BC();
      sub_1000D1304();
      sub_10000DC4C(93LL);
      LogMessage.init(stringInterpolation:)(v48);
      sub_100009020();
    }

    else
    {
      sub_1000B1A18();
      sub_10000DC08();
      uint64_t v73 = v139;
      uint64_t v74 = sub_10000D37C(v138, v139);
      uint64_t v75 = sub_10000DC54((uint64_t)v74, v73);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v75);
      uint64_t v135 = v75;
      uint64_t v76 = sub_1000675BC();
      sub_1000D127C(v76, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      LogMessage.init(stringInterpolation:)(v3);
    }

    sub_1000D12B8();
    sub_1000105B4(0xD000000000000025LL);
    uint64_t v139 = updated;
    uint64_t v77 = sub_10000D63C(v138);
    sub_1000CFE30(v131, (uint64_t)v77, type metadata accessor for MercuryCacheUpdateData.Failure);
    static LogMessage.safe(_:)(v138);
    sub_100019E6C((uint64_t)v138, &qword_1001CAAD0);
    uint64_t v79 = static os_log_type_t.info.getter(v78);
    sub_1000BD1B0(v79, v40);
    uint64_t v80 = sub_10000DE2C();
    sub_1000D1264(v80, &qword_1001CC200);
    sub_1000D10F8();
    uint64_t v84 = v132;
    goto LABEL_37;
  }

  uint64_t v54 = *(void *)(v36 + 8);
  uint64_t v53 = *(void *)(v36 + 16);
  double v55 = *(double *)(v36 + 24);
  double v56 = *(double *)v36;
  uint64_t v57 = v32;
  uint64_t v58 = (uint64_t)&v3[*(int *)(v32 + 28)];
  sub_1000CFE98(v58, (uint64_t)v3, &qword_1001CC200);
  sub_100048918((uint64_t)v3, 1LL, v23);
  if (v60)
  {
    sub_100019E6C((uint64_t)v3, &qword_1001CC200);
    goto LABEL_19;
  }

  uint64_t v61 = v128;
  sub_1000D129C((uint64_t)v3, v59, type metadata accessor for RetryConfiguration);
  uint64_t v62 = v132;
  if (*(void *)v61 >= *(void *)(v61 + 8))
  {
    sub_1000D10F8();
    sub_10000D5C0(v85, v86, v87, v62);
    goto LABEL_18;
  }

  uint64_t v3 = (char *)(v61 + *(int *)(v23 + 28));
  Date.addingTimeInterval(_:)(*(double *)(v61 + 16));
  sub_1000D1200(v12, 0LL);
  sub_100048918(v12, 1LL, v62);
  if (v60)
  {
LABEL_18:
    sub_100019EC0(v61, type metadata accessor for RetryConfiguration);
    sub_100019E6C(v12, &qword_1001CF970);
    goto LABEL_19;
  }

  uint64_t v3 = v129;
  uint64_t v63 = v121;
  sub_1000D1220(v121, v12, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v129 + 4));
  if ((static Date.> infix(_:_:)(v63, v120) & 1) != 0)
  {
    if (qword_1001C8028 == -1)
    {
LABEL_13:
      sub_10000D33C(&qword_1001C9C70);
      uint64_t v64 = *(void *)(*(void *)(sub_10000DC98() - 8) + 72LL);
      sub_1000D126C();
      uint64_t v66 = (__n128 *)sub_10000DCF0((uint64_t)&v3[2 * v64], v65);
      uint64_t v67 = sub_1000D11A4(v66, (__n128)xmmword_100164230);
      sub_1000CFE30((uint64_t)v134, (uint64_t)v67, type metadata accessor for MercuryCacheMetadata);
      id v69 = (id)AMSLogKey(v68);
      if (v69)
      {
        sub_1000105E8((uint64_t)v69);
        sub_1000D12F8();
        swift_bridgeObjectRetain(v57);
        sub_1000B1A2C();
        sub_10000DC08();
        uint64_t v70 = v139;
        uint64_t v71 = sub_10000D37C(v138, v139);
        uint64_t v72 = sub_10000DC54((uint64_t)v71, v70);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v72);
        uint64_t v135 = v72;
        sub_1000675BC();
        sub_1000D1140();
        sub_10000DC14();
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v135 = *(void *)&v56;
        uint64_t v136 = v57;
        sub_1000675BC();
        sub_1000D1140();
        sub_10000DC4C(93LL);
        sub_1000D1128();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_1000B1A18();
        sub_10000DC08();
        uint64_t v114 = v139;
        uint64_t v115 = sub_10000D37C(v138, v139);
        uint64_t v116 = sub_10000DC54((uint64_t)v115, v114);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v116);
        uint64_t v135 = v116;
        uint64_t v117 = sub_1000675BC();
        sub_1000D127C(v117, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_1000D1128();
      }

      sub_1000D12B8();
      uint64_t v118 = sub_1000105B4(0xD00000000000001ELL);
      uint64_t v119 = static os_log_type_t.info.getter(v118);
      sub_1000486E4(v119);
      sub_10000DE2C();
      (*((void (**)(uint64_t, uint64_t))v129 + 1))(v121, v132);
      sub_100019EC0(v128, type metadata accessor for RetryConfiguration);
      goto LABEL_38;
    }

void sub_1000CE3F0(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData.Success(0LL);
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v8 = (uint64_t *)(v7 - v6);
  sub_10000D33C(&qword_1001CC200);
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_10000DD5C();
  uint64_t v72 = v10;
  uint64_t v11 = sub_1000378A0();
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v74 = v11;
  __chkstk_darwin(v11);
  sub_10001A284();
  uint64_t v71 = (char *)v12;
  sub_10001A210();
  __chkstk_darwin(v13);
  id v69 = (char *)&v66 - v14;
  sub_10001A210();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v66 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = sub_1000D12A4();
  uint64_t v23 = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(v22);
  sub_10000DC64();
  __chkstk_darwin(v24);
  sub_10004895C();
  uint64_t v27 = v25 - v26;
  __chkstk_darwin(v28);
  char v30 = (uint64_t *)((char *)&v66 - v29);
  uint64_t v31 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  sub_10000DC64();
  __chkstk_darwin(v32);
  sub_100048C04();
  sub_1000CFE30(a1, v2, v33);
  if (swift_getEnumCaseMultiPayload(v2, v31) == 1)
  {
    uint64_t v67 = v18;
    uint64_t v71 = (char *)a1;
    sub_100036FD0(v2, (uint64_t)v30, type metadata accessor for MercuryCacheUpdateData.Failure);
    uint64_t v34 = v30[1];
    uint64_t v68 = *v30;
    id v69 = v3;
    uint64_t v35 = v73;
    uint64_t v36 = (uint64_t)v3;
    uint64_t v37 = v74;
    sub_1000D11C0(v36, (uint64_t)v30 + v23[5]);
    uint64_t v38 = (uint64_t)v30 + v23[7];
    uint64_t updated = (uint64_t)v21;
    sub_1000D11C0((uint64_t)v21, v38);
    sub_1000CFE30((uint64_t)v30, v27, type metadata accessor for MercuryCacheUpdateData.Failure);
    uint64_t v39 = v27 + v23[6];
    uint64_t v40 = v75;
    if ((*(_BYTE *)(v39 + 32) & 1) != 0)
    {
      swift_bridgeObjectRetain(v34);
      sub_100019EC0(v27, type metadata accessor for MercuryCacheUpdateData.Failure);
      type metadata accessor for RetryConfiguration(0LL);
      uint64_t v41 = (uint64_t)v72;
      sub_1000D10F8();
    }

    else
    {
      uint64_t v59 = *(void *)(v39 + 16);
      if ((*(void *)(v39 + 8) & 1LL) != 0) {
        v39 += 24LL;
      }
      uint64_t v60 = *(void *)v39;
      uint64_t v61 = (uint64_t)v67;
      sub_1000D11C0((uint64_t)v67, v27 + v23[7]);
      uint64_t v41 = (uint64_t)v72;
      *uint64_t v72 = 0LL;
      *(void *)(v41 + 8) = v59;
      *(void *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = v60;
      uint64_t v62 = sub_1000D11EC();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v41 + *(int *)(v62 + 28), v61, v37);
      swift_bridgeObjectRetain(v34);
      sub_100019EC0(v27, type metadata accessor for MercuryCacheUpdateData.Failure);
      uint64_t v42 = sub_1000D1234();
      uint64_t v45 = v62;
    }

    sub_10000D5C0(v42, v43, v44, v45);
    sub_100019EC0((uint64_t)v71, type metadata accessor for MercuryCacheUpdateData.DataKind);
    sub_1000D12E8(v63, type metadata accessor for MercuryCacheUpdateData.Failure);
    *(void *)uint64_t v40 = v68;
    *((void *)v40 + Hasher._combine(_:)(v1 & 1) = v34;
    uint64_t v64 = (int *)type metadata accessor for MercuryCacheMetadata(0LL);
    uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v65(&v40[v64[5]], v69, v37);
    v65(&v40[v64[6]], (char *)updated, v37);
    sub_1000CFE50(v41, (uint64_t)&v40[v64[7]]);
  }

  else
  {
    sub_100019EC0(a1, type metadata accessor for MercuryCacheUpdateData.DataKind);
    sub_100036FD0(v2, (uint64_t)v8, type metadata accessor for MercuryCacheUpdateData.Success);
    uint64_t v47 = *v8;
    uint64_t v46 = v8[1];
    uint64_t v49 = (uint64_t)v69;
    uint64_t v48 = updated;
    uint64_t v50 = v74;
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    v51(v69, (char *)v8 + *(int *)(updated + 20), v74);
    uint64_t v52 = (uint64_t)v71;
    v51(v71, (char *)v8 + *(int *)(v48 + 28), v50);
    sub_10000DEE0();
    sub_100019EC0((uint64_t)v8, type metadata accessor for MercuryCacheUpdateData.Success);
    uint64_t v53 = sub_1000D11E4();
    uint64_t v54 = v75;
    type metadata accessor for RetryConfiguration(0LL);
    sub_1000D10F8();
    sub_10000D5C0(v55, v56, v57, v58);
    *(void *)uint64_t v54 = v47;
    *((void *)v54 + Hasher._combine(_:)(v1 & 1) = v46;
    sub_1000D11C0((uint64_t)&v54[*(int *)(v53 + 20)], v49);
    sub_1000D11C0((uint64_t)&v54[*(int *)(v53 + 24)], v52);
  }

  sub_10001A30C();
}

uint64_t sub_1000CE7F0()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC2D0 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

void sub_1000CE838(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  BOOL v7 = v4 == *a2 && v5 == v6;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL) & 1) != 0)
  {
    uint64_t updated = type metadata accessor for CacheUpdateRun(0LL);
    static Date.== infix(_:_:)((char *)a1 + *(int *)(updated + 20), (char *)a2 + *(int *)(updated + 20));
  }

  sub_10000DFE8();
}

uint64_t sub_1000CE8C8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000CE900 + 4 * byte_100167560[a1]))( 0x756F437972746572LL,  0xEA0000000000746ELL);
}

uint64_t sub_1000CE900()
{
  return 0x797274655278616DLL;
}

uint64_t sub_1000CE924()
{
  return 0x6C65447972746572LL;
}

uint64_t sub_1000CE93C()
{
  return 0x74616E696769726FLL;
}

uint64_t sub_1000CE960()
{
  return 0x727465527478656ELL;
}

uint64_t sub_1000CE988@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)v1 >= *(void *)(v1 + 8))
  {
    uint64_t v3 = 1LL;
  }

  else
  {
    type metadata accessor for RetryConfiguration(0LL);
    Date.addingTimeInterval(_:)(*(double *)(v1 + 16));
    uint64_t v3 = 0LL;
  }

  uint64_t v4 = sub_1000378A0();
  return sub_1000D11B8(a1, v3, 1LL, v4);
}

uint64_t sub_1000CE9EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(void *)(a1 + 8) != *(void *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0LL;
  }

  uint64_t v4 = *(int *)(type metadata accessor for RetryConfiguration(0LL) + 28);
  return static Date.== infix(_:_:)(a1 + v4, a2 + v4);
}

void sub_1000CEA64()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000378A0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000105F0();
  uint64_t v11 = sub_1000D11EC();
  sub_10000DC64();
  __chkstk_darwin(v12);
  sub_10003772C();
  uint64_t v13 = sub_1000DE0DC(0, v3);
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = v13;
    uint64_t v16 = sub_1000DE0DC(1u, v3);
    if ((v17 & 1) == 0)
    {
      uint64_t v18 = v16;
      uint64_t v19 = sub_1000DE0E8(2u, v3);
      if ((v20 & 1) == 0)
      {
        uint64_t v32 = v19;
        sub_1000DE184(3u, v3, (uint64_t)v8);
        sub_100048918((uint64_t)v8, 1LL, v9);
        if (!v21)
        {
          sub_10000DE2C();
          uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
          v28((uint64_t)v0, v8, v9);
          *uint64_t v1 = v15;
          v1[1] = v18;
          v1[2] = v32;
          v28((uint64_t)v1 + *(int *)(v11 + 28), v0, v9);
          sub_1000D129C((uint64_t)v1, v29, type metadata accessor for RetryConfiguration);
          uint64_t v30 = 0LL;
          goto LABEL_10;
        }

        sub_100019E6C((uint64_t)v8, &qword_1001CF970);
      }
    }
  }

  if (qword_1001C8028 != -1) {
    swift_once(&qword_1001C8028, sub_1000CE7F0);
  }
  uint64_t v22 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v23 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
        + 2LL * *(void *)(v23 + 72),
          *(unsigned __int8 *)(v23 + 80) | 7LL);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  LogMessage.init(stringLiteral:)(0x436572756C696146LL);
  unint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  unint64_t v33 = 0xD000000000000025LL;
  unint64_t v34 = 0x8000000100173E50LL;
  v25._uint64_t countAndFlagsBits = Dictionary.description.getter( v3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  String.append(_:)(v25);
  sub_10000DE2C();
  sub_10000DE74();
  uint64_t v35 = &type metadata for String;
  static LogMessage.safe(_:)(&v33);
  sub_100019E6C((uint64_t)&v33, &qword_1001CAAD0);
  uint64_t v27 = static os_log_type_t.info.getter(v26);
  sub_1000BD1B0(v27, v24);
  swift_bridgeObjectRelease();
  uint64_t v30 = 1LL;
LABEL_10:
  sub_1000ACBE0(v5, v30);
  sub_10000DD84();
}

void sub_1000CED2C()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = sub_10000D33C((uint64_t *)&unk_1001C9C80);
  uint64_t inited = swift_initStackObject(v5, v18);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
  *(void *)&__int128 v16 = 0x756F437972746572LL;
  *((void *)&v16 + Hasher._combine(_:)(v1 & 1) = 0xEA0000000000746ELL;
  sub_1000D10EC((uint64_t)&v16);
  uint64_t v7 = *v0;
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 72) = v7;
  strcpy((char *)&v16, "maxRetryCount");
  HIWORD(vswift_unknownObjectWeakDestroy(v0 + 16) = -4864;
  sub_1000D10EC((uint64_t)&v16);
  uint64_t v8 = v0[1];
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v8;
  *(void *)&__int128 v16 = 0x6C65447972746572LL;
  *((void *)&v16 + Hasher._combine(_:)(v1 & 1) = 0xEA00000000007961LL;
  sub_1000D10EC((uint64_t)&v16);
  uint64_t v9 = v0[2];
  *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for Double;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)&__int128 v16 = 0x74616E696769726FLL;
  *((void *)&v16 + Hasher._combine(_:)(v1 & 1) = 0xEF657461446E6F69LL;
  sub_1000D10EC((uint64_t)&v16);
  uint64_t v10 = (char *)v0 + *(int *)(type metadata accessor for RetryConfiguration(0LL) + 28);
  uint64_t v11 = sub_1000378A0();
  *(void *)(inited + 312) = v11;
  uint64_t v12 = sub_10000D63C((void *)(inited + 288));
  uint64_t v13 = *(void *)(v11 - 8);
  (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v12, v10, v11);
  v18[40] = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000CE988(v4);
  sub_100048918(v4, 1LL, v11);
  if (v14)
  {
    sub_100019E6C(v4, &qword_1001CF970);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
  }

  else
  {
    *((void *)&v17 + Hasher._combine(_:)(v1 & 1) = v11;
    uint64_t v15 = sub_10000D63C(&v16);
    (*(void (**)(void *, uint64_t, uint64_t))(v13 + 32))(v15, v4, v11);
  }

  sub_1000CD968((uint64_t)&v16, 4u);
  sub_100019E6C((uint64_t)&v16, &qword_1001CAAD0);
  sub_10000DD84();
}

void sub_1000CEF6C()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000378A0();
  uint64_t v37 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000105F0();
  sub_10000D33C(&qword_1001CC200);
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for RetryConfiguration(0LL);
  sub_10000DC64();
  __chkstk_darwin(v15);
  uint64_t v16 = sub_1000D11C8();
  uint64_t v17 = type metadata accessor for MercuryCacheMetadata(v16);
  sub_1000CFE98((uint64_t)v3 + *(int *)(v17 + 28), v13, &qword_1001CC200);
  sub_100048918(v13, 1LL, v14);
  if (v18)
  {
    sub_100019E6C(v13, &qword_1001CC200);
    uint64_t v19 = (uint64_t)v3 + *(int *)(v17 + 20);
    unint64_t v20 = sub_1000CFDF0();
    if ((sub_1000D114C(v20) & 1) == 0) {
      goto LABEL_11;
    }
  }

  else
  {
    sub_100036FD0(v13, v2, type metadata accessor for RetryConfiguration);
    if (*(void *)v2 >= *(void *)(v2 + 8))
    {
      sub_1000ACBE0((uint64_t)v8, 1LL);
    }

    else
    {
      Date.addingTimeInterval(_:)(*(double *)(v2 + 16));
      sub_1000ACBE0((uint64_t)v8, 0LL);
      uint64_t v25 = sub_100048918((uint64_t)v8, 1LL, v9);
      if (!v18)
      {
        sub_1000D12E8(v25, type metadata accessor for RetryConfiguration);
        uint64_t v26 = v37;
        sub_1000D12F0(v1, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
        uint64_t v28 = *v3;
        uint64_t v27 = v3[1];
        uint64_t updated = type metadata accessor for CacheUpdateRun(0LL);
        sub_1000D12F0( (uint64_t)v5 + *(int *)(updated + 20),  v1,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
        *uint64_t v5 = v28;
        v5[1] = v27;
        *((_BYTE *)v5 + *(int *)(updated + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = 1;
        uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
        swift_bridgeObjectRetain(v27);
        v30(v1, v9);
        uint64_t v21 = (uint64_t)v5;
        uint64_t v22 = 0LL;
        uint64_t v23 = 1LL;
        uint64_t v24 = updated;
        goto LABEL_8;
      }
    }

    sub_100019E6C((uint64_t)v8, &qword_1001CF970);
    uint64_t v19 = (uint64_t)v3 + *(int *)(v17 + 20);
    unint64_t v31 = sub_1000CFDF0();
    uint64_t v32 = sub_1000D114C(v31);
    sub_1000D12E8(v32, type metadata accessor for RetryConfiguration);
    if ((v32 & 1) == 0)
    {
LABEL_11:
      uint64_t v34 = *v3;
      uint64_t v33 = v3[1];
      uint64_t v35 = type metadata accessor for CacheUpdateRun(0LL);
      sub_1000D12F0( (uint64_t)v5 + *(int *)(v35 + 20),  v19,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
      *uint64_t v5 = v34;
      v5[1] = v33;
      *((_BYTE *)v5 + *(int *)(v35 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = 0;
      sub_1000D1200((uint64_t)v5, 0LL);
      swift_bridgeObjectRetain(v33);
      goto LABEL_12;
    }
  }

  type metadata accessor for CacheUpdateRun(0LL);
  sub_1000D10F8();
LABEL_8:
  sub_10000D5C0(v21, v22, v23, v24);
LABEL_12:
  sub_10000DD84();
}

BOOL sub_1000CF214()
{
  uint64_t v36 = v1;
  uint64_t v37 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_1000D11EC();
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = sub_10000D33C(&qword_1001CC4B0);
  sub_10000DC64();
  __chkstk_darwin(v13);
  sub_100048C04();
  sub_10000D33C(&qword_1001CC200);
  sub_10000DC64();
  __chkstk_darwin(v14);
  sub_10004895C();
  uint64_t v17 = v15 - v16;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = &v35[-v20];
  __chkstk_darwin(v19);
  uint64_t v23 = &v35[-v22];
  uint64_t v24 = v6[1];
  uint64_t v25 = v4[1];
  BOOL v26 = *v6 == *v4 && v24 == v25;
  if (v26 || (char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v6, v24, *v4, v25, 0LL), result = 0LL, (v27 & 1) != 0))
  {
    uint64_t v29 = (int *)sub_1000D11E4();
    if ((sub_1000D131C(v29[5]) & 1) == 0 || (sub_1000D131C(v29[6]) & 1) == 0) {
      return 0LL;
    }
    sub_1000D125C((uint64_t)v6 + v29[7], (uint64_t)v23);
    sub_1000D125C((uint64_t)v4 + v29[7], (uint64_t)v21);
    uint64_t v30 = v0 + *(int *)(v12 + 48);
    sub_1000D125C((uint64_t)v23, v0);
    sub_1000D125C((uint64_t)v21, v30);
    sub_100048918(v0, 1LL, v7);
    if (v26)
    {
      sub_100019E6C((uint64_t)v21, &qword_1001CC200);
      sub_100019E6C((uint64_t)v23, &qword_1001CC200);
      uint64_t v31 = sub_100048918(v30, 1LL, v7);
      if (v26)
      {
        sub_1000D1264(v31, &qword_1001CC200);
        return 1LL;
      }

      uint64_t v33 = &qword_1001CC4B0;
    }

    else
    {
      sub_1000CFE98(v0, v17, &qword_1001CC200);
      sub_100048918(v30, 1LL, v7);
      if (v32)
      {
        uint64_t v33 = &qword_1001CC4B0;
      }

      else
      {
        sub_100036FD0(v30, v11, type metadata accessor for RetryConfiguration);
        if (*(void *)v17 == *(void *)v11
          && *(void *)(v17 + 8) == *(void *)(v11 + 8)
          && *(double *)(v17 + 16) == *(double *)(v11 + 16))
        {
          char v34 = static Date.== infix(_:_:)(v17 + *(int *)(v7 + 28), v11 + *(int *)(v7 + 28));
          sub_100019EC0(v11, type metadata accessor for RetryConfiguration);
          sub_1000D119C((uint64_t)v21);
          sub_1000D119C((uint64_t)v23);
          sub_100019EC0(v17, type metadata accessor for RetryConfiguration);
          sub_1000D119C(v0);
          return (v34 & 1) != 0;
        }

        sub_100019EC0(v11, type metadata accessor for RetryConfiguration);
        uint64_t v33 = &qword_1001CC200;
      }

      sub_1000D119C((uint64_t)v21);
      sub_1000D119C((uint64_t)v23);
      sub_100019EC0(v17, type metadata accessor for RetryConfiguration);
    }

    sub_100019E6C(v0, v33);
    return 0LL;
  }

  return result;
}

void sub_1000CF518()
{
  uint64_t v4 = v3;
  uint64_t v75 = v5;
  sub_10000D33C(&qword_1001CC200);
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DD5C();
  uint64_t v72 = v7;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10001A284();
  uint64_t v73 = v9;
  sub_10001A210();
  __chkstk_darwin(v10);
  uint64_t v74 = (char *)&v68 - v11;
  sub_1000378A0();
  sub_1000D12C0();
  __chkstk_darwin(v12);
  sub_10004895C();
  uint64_t v15 = (char *)(v13 - v14);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v68 - v17;
  sub_1000D11E4();
  sub_10000DC64();
  __chkstk_darwin(v19);
  sub_10003772C();
  uint64_t v76 = v20;
  uint64_t v21 = (uint64_t)v1 + *(int *)(v20 + 28);
  uint64_t v22 = sub_1000D11EC();
  uint64_t v77 = v21;
  sub_1000D10F8();
  sub_10000D5C0(v23, v24, v25, v22);
  sub_1000D117C();
  *(void *)&v78[0] = v26;
  *((void *)&v78[0] + Hasher._combine(_:)(v1 & 1) = v27;
  AnyHashable.init<A>(_:)(v78);
  uint64_t v28 = v4;
  sub_10003079C((uint64_t)v79, v4, v78);
  sub_1000D1284();
  uint64_t v29 = sub_10000D33C(&qword_1001CAAD0);
  if ((sub_100010BA4((uint64_t)&v80, (uint64_t)v78, v29, (uint64_t)&type metadata for String) & 1) == 0
    || (uint64_t v30 = v74, v70 = v22, v71 = v1, (v31 = v81) == 0))
  {
    sub_100009020();
LABEL_11:
    uint64_t v50 = v76;
    sub_100019E6C(v77, &qword_1001CC200);
    sub_1000D10F8();
    sub_10000D5C0(v51, v52, v53, v50);
    goto LABEL_12;
  }

  uint64_t v32 = v80;
  sub_1000C8D94();
  *(void *)&v78[0] = v33;
  *((void *)&v78[0] + Hasher._combine(_:)(v1 & 1) = v34;
  sub_1000D1228();
  sub_1000D128C();
  sub_1000D1284();
  uint64_t v35 = (uint64_t)v30;
  uint64_t v36 = (uint64_t)v30;
  uint64_t v37 = v2;
  int v38 = sub_100010BA4(v36, (uint64_t)v78, v29, v2);
  sub_10000D5C0(v35, v38 ^ 1u, 1LL, v2);
  sub_100048918(v35, 1LL, v2);
  if (v48)
  {
    sub_10000DE74();
    sub_100009020();
    uint64_t v39 = v35;
LABEL_10:
    sub_100019E6C(v39, &qword_1001CF970);
    goto LABEL_11;
  }

  uint64_t v69 = v32;
  uint64_t v40 = v35;
  uint64_t v41 = v0;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 32);
  uint64_t v43 = v18;
  v42(v18, v40, v2);
  sub_1000D1104();
  *(void *)&v78[0] = v44;
  *((void *)&v78[0] + Hasher._combine(_:)(v1 & 1) = v45;
  sub_1000D1228();
  sub_1000D128C();
  sub_1000D1284();
  uint64_t v46 = v73;
  int v47 = sub_100010BA4(v73, (uint64_t)v78, v29, v37);
  sub_10000D5C0(v46, v47 ^ 1u, 1LL, v37);
  sub_100048918(v46, 1LL, v37);
  uint64_t v49 = v28;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v37);
    sub_10000DE74();
    sub_10000DE2C();
    uint64_t v39 = v46;
    goto LABEL_10;
  }

  uint64_t v54 = v46;
  uint64_t v55 = v15;
  v42(v15, v54, v37);
  uint64_t v56 = (uint64_t)v71;
  *uint64_t v71 = v69;
  *(void *)(v56 + 8) = v31;
  uint64_t v57 = v76;
  uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v41 + 16);
  v58(v56 + *(int *)(v76 + 20), v43, v37);
  v58(v56 + *(int *)(v57 + 24), v55, v37);
  *(void *)&v78[0] = 0xD000000000000012LL;
  *((void *)&v78[0] + Hasher._combine(_:)(v1 & 1) = 0x8000000100173E30LL;
  sub_1000D1228();
  sub_10003079C((uint64_t)v79, v49, v78);
  sub_1000D1284();
  uint64_t v59 = sub_10000D33C(&qword_1001C8E58);
  char v60 = sub_100010BA4((uint64_t)&v80, (uint64_t)v78, v29, v59);
  if ((v60 & 1) != 0)
  {
    uint64_t v61 = v80;
  }

  else
  {
    uint64_t v61 = 0LL;
    uint64_t v80 = 0LL;
  }

  uint64_t v62 = v72;
  sub_10000DE2C();
  if (v61)
  {
    sub_10000DEE0();
    sub_1000CEA64();
  }

  else
  {
    sub_1000ACBE0(v62, 1LL);
  }

  uint64_t v63 = v75;
  uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v64((uint64_t)v55, v37);
  v64((uint64_t)v43, v37);
  sub_100009020();
  sub_1000CFEC4(v62, v77);
  sub_1000CFE30(v56, v63, type metadata accessor for MercuryCacheMetadata);
  uint64_t v65 = sub_1000D1234();
  sub_10000D5C0(v65, v66, v67, v57);
  sub_100019EC0(v56, type metadata accessor for MercuryCacheMetadata);
LABEL_12:
  sub_10000DD84();
}

void sub_1000CF95C()
{
  uint64_t v28 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *((void *)&v27 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
  *(void *)&__int128 v26 = v4;
  *((void *)&v26 + Hasher._combine(_:)(v1 & 1) = v3;
  sub_1000D117C();
  *(void *)&v23[0] = v5;
  *((void *)&v23[0] + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRetain(v7);
  sub_1000D10EC((uint64_t)v23);
  sub_1000D11F4();
  sub_1000D1134((uint64_t)v23);
  sub_100048738();
  uint64_t v8 = sub_1000D11E4();
  uint64_t v9 = sub_1000378A0();
  *((void *)&v27 + Hasher._combine(_:)(v1 & 1) = v9;
  uint64_t v10 = sub_10000D63C(&v26);
  sub_1000D1310((uint64_t)v10);
  sub_1000C8D94();
  *(void *)&v23[0] = v11;
  *((void *)&v23[0] + Hasher._combine(_:)(v1 & 1) = v12;
  sub_1000D10EC((uint64_t)v23);
  sub_1000D11F4();
  sub_1000D1134((uint64_t)v23);
  sub_100048738();
  *((void *)&v27 + Hasher._combine(_:)(v1 & 1) = v9;
  uint64_t v13 = sub_10000D63C(&v26);
  sub_1000D1310((uint64_t)v13);
  sub_1000D1104();
  *(void *)&v23[0] = v14;
  *((void *)&v23[0] + Hasher._combine(_:)(v1 & 1) = v15;
  sub_1000D10EC((uint64_t)v23);
  sub_1000D11F4();
  sub_1000D1134((uint64_t)v23);
  sub_100048738();
  sub_1000CFE98((uint64_t)v1 + *(int *)(v8 + 28), v0, &qword_1001CC200);
  uint64_t v16 = sub_1000D11EC();
  uint64_t v17 = sub_100048918(v0, 1LL, v16);
  if (v18)
  {
    sub_1000D1264(v17, &qword_1001CC200);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
  }

  else
  {
    sub_1000CED2C();
    uint64_t v20 = v19;
    sub_100019EC0(v0, type metadata accessor for RetryConfiguration);
    *((void *)&v27 + Hasher._combine(_:)(v1 & 1) = sub_10000D33C(&qword_1001C8E58);
    *(void *)&__int128 v26 = v20;
  }

  sub_1000CFE98((uint64_t)&v26, (uint64_t)&v24, &qword_1001CAAD0);
  if (v25)
  {
    sub_10000DA58(&v24, v23);
    v22[0] = 0xD000000000000012LL;
    v22[1] = 0x8000000100173E30LL;
    AnyHashable.init<A>(_:)(v22);
    sub_10000DA1C((uint64_t)v23, (uint64_t)v22);
    sub_1000D1134((uint64_t)v22);
    sub_10000D3A0(v23);
  }

  else
  {
    sub_1000D127C(v21, &qword_1001CAAD0);
  }

  sub_100019E6C((uint64_t)&v26, &qword_1001CAAD0);
  sub_10000DD84();
}

BOOL sub_1000CFBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for CacheUpdateRun(0LL) + 20);
  uint64_t v4 = type metadata accessor for Date(0LL);
  unint64_t v5 = sub_1000CFDF0();
  return (dispatch thunk of static Comparable.< infix(_:_:)(a2, v3, v4, v5) & 1) == 0;
}

uint64_t sub_1000CFC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = sub_1000D11C8();
  uint64_t updated = type metadata accessor for CacheUpdateRun(v8);
  sub_10000DC64();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000CEF6C();
  if (sub_1000102D4(v3, 1LL, updated) == 1)
  {
    sub_100019E6C(v3, &qword_1001CC2D8);
LABEL_6:
    sub_10000D33C(&qword_1001C8F20);
    sub_1000D10F8();
    return sub_10000D5C0(v17, v18, v19, v20);
  }

  sub_100036FD0(v3, (uint64_t)v12, type metadata accessor for CacheUpdateRun);
  uint64_t v13 = &v12[*(int *)(updated + 20)];
  if ((static Date.> infix(_:_:)(v13, a2) & 1) == 0)
  {
    sub_100019EC0((uint64_t)v12, type metadata accessor for CacheUpdateRun);
    goto LABEL_6;
  }

  uint64_t v14 = sub_10000D33C(&qword_1001C8F20);
  uint64_t v15 = a3 + *(int *)(v14 + 48);
  sub_1000CFE30(a1, a3, type metadata accessor for MercuryCacheMetadata);
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v15, v13, v16);
  sub_100019EC0((uint64_t)v12, type metadata accessor for CacheUpdateRun);
  uint64_t v17 = sub_1000D1234();
  uint64_t v20 = v14;
  return sub_10000D5C0(v17, v18, v19, v20);
}

uint64_t type metadata accessor for CacheUpdateRun(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CC3D0, (uint64_t)&nominal type descriptor for CacheUpdateRun);
}

uint64_t type metadata accessor for MercuryCacheMetadata(uint64_t a1)
{
  return sub_10008AAFC(a1, (uint64_t *)&unk_1001CC468, (uint64_t)&nominal type descriptor for MercuryCacheMetadata);
}

uint64_t type metadata accessor for RetryConfiguration(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CC338, (uint64_t)&nominal type descriptor for RetryConfiguration);
}

unint64_t sub_1000CFDF0()
{
  unint64_t result = qword_1001C8E90;
  if (!qword_1001C8E90)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1001C8E90);
  }

  return result;
}

void sub_1000CFE30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = sub_10001A48C(a1, a2, a3);
  sub_1000D1164(v3);
  sub_100009044();
}

uint64_t sub_1000CFE50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CC200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000CFE98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_10000D33C(a3);
  sub_1000D1164(v3);
  sub_100009044();
}

uint64_t sub_1000CFEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CC200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000CFF0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1000CFF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1000CFFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *sub_1000D0038(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000D00A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000D0108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000D016C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0178);
}

uint64_t sub_1000D0178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = sub_1000378A0();
  return sub_1000102D4(v4, a2, v5);
}

uint64_t sub_1000D01AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D01B8);
}

uint64_t sub_1000D01B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = sub_1000378A0();
  return sub_1000D11B8(v5, a2, a2, v6);
}

uint64_t sub_1000D01EC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1000D0268(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    *((_BYTE *)v4 + *(int *)(a3 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }

  return v4;
}

uint64_t sub_1000D0320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1000D0368(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000D03F4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1000D0484(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000D04FC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000D057C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0588);
}

void sub_1000D0588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000D1244();
    sub_10000DFE8();
  }

  else
  {
    uint64_t v6 = sub_1000378A0();
    sub_10008BE48(a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_1000D05D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D05E4);
}

void sub_1000D05E4()
{
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
    sub_10000DFE8();
  }

  else
  {
    uint64_t v4 = v2;
    uint64_t v5 = sub_1000378A0();
    sub_10008BE54(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }

uint64_t sub_1000D0630(uint64_t a1)
{
  v4[0] = &unk_1001675A8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1001675C0;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000D06AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v19);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
    __n128 v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    ((void (*)(char *, char *, uint64_t))v12)((char *)v4 + a3[6], (char *)a2 + a3[6], v11);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for RetryConfiguration(0LL);
    if (sub_1000102D4((uint64_t)v16, 1LL, v17))
    {
      uint64_t v18 = sub_10000D33C(&qword_1001CC200);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      _OWORD v15[2] = v16[2];
      ((void (*)(char *, char *, uint64_t))v12)( (char *)v15 + *(int *)(v17 + 28),  (char *)v16 + *(int *)(v17 + 28),  v11);
      sub_10000D5C0((uint64_t)v15, 0LL, 1LL, v17);
    }
  }

  return v4;
}

uint64_t sub_1000D07F4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v9(v4, v5);
  v9(a1 + a2[6], v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for RetryConfiguration(0LL);
  uint64_t result = sub_1000102D4(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return v9(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

void *sub_1000D08BC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v10 - 8) + 16LL);
  __n128 v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  ((void (*)(char *, char *, uint64_t))v11)((char *)a1 + a3[6], (char *)a2 + a3[6], v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for RetryConfiguration(0LL);
  if (sub_1000102D4((uint64_t)v15, 1LL, v16))
  {
    uint64_t v17 = sub_10000D33C(&qword_1001CC200);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    _OWORD v14[2] = v15[2];
    ((void (*)(char *, char *, uint64_t))v11)( (char *)v14 + *(int *)(v16 + 28),  (char *)v15 + *(int *)(v16 + 28),  v10);
    sub_10000D5C0((uint64_t)v14, 0LL, 1LL, v16);
  }

  return a1;
}

char *sub_1000D09D8(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v12(&a1[a3[6]], &a2[a3[6]], v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for RetryConfiguration(0LL);
  LODWORD(v9) = sub_1000102D4((uint64_t)v14, 1LL, v16);
  int v17 = sub_1000102D4((uint64_t)v15, 1LL, v16);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + Hasher._combine(_:)(v1 & 1) = *((void *)v15 + 1);
      *((void *)v14 + 2) = *((void *)v15 + 2);
      v12(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v10);
      return a1;
    }

    sub_100019EC0((uint64_t)v14, type metadata accessor for RetryConfiguration);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000D33C(&qword_1001CC200);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v14 = *(void *)v15;
  *((void *)v14 + Hasher._combine(_:)(v1 & 1) = *((void *)v15 + 1);
  *((void *)v14 + 2) = *((void *)v15 + 2);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v10);
  sub_10000D5C0((uint64_t)v14, 0LL, 1LL, v16);
  return a1;
}

char *sub_1000D0B6C(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[7];
  __n128 v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for RetryConfiguration(0LL);
  if (sub_1000102D4((uint64_t)v13, 1LL, v14))
  {
    uint64_t v15 = sub_10000D33C(&qword_1001CC200);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    *(_OWORD *)__n128 v12 = *(_OWORD *)v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    v10(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v9);
    sub_10000D5C0((uint64_t)v12, 0LL, 1LL, v14);
  }

  return a1;
}

char *sub_1000D0C80(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v12(&a1[a3[6]], &a2[a3[6]], v10);
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for RetryConfiguration(0LL);
  LODWORD(v9) = sub_1000102D4((uint64_t)v14, 1LL, v16);
  int v17 = sub_1000102D4((uint64_t)v15, 1LL, v16);
  if (!(_DWORD)v9)
  {
    if (!v17)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *((void *)v14 + 2) = *((void *)v15 + 2);
      v12(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v10);
      return a1;
    }

    sub_100019EC0((uint64_t)v14, type metadata accessor for RetryConfiguration);
    goto LABEL_6;
  }

  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000D33C(&qword_1001CC200);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
    return a1;
  }

  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((void *)v14 + 2) = *((void *)v15 + 2);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v10);
  sub_10000D5C0((uint64_t)v14, 0LL, 1LL, v16);
  return a1;
}

uint64_t sub_1000D0DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D0E00);
}

void sub_1000D0E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000D1244();
    sub_10000DFE8();
  }

  else
  {
    uint64_t v6 = sub_1000378A0();
    if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v7 = sub_10000D33C(&qword_1001CC200);
      uint64_t v8 = *(int *)(a3 + 28);
    }

    sub_10008BE48(a1 + v8, a2, v7);
  }

uint64_t sub_1000D0E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D0E84);
}

void sub_1000D0E84()
{
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
    sub_10000DFE8();
  }

  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    uint64_t v7 = sub_1000378A0();
    if (*(_DWORD *)(*(void *)(v7 - 8) + 84LL) == v6)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(int *)(v5 + 20);
    }

    else
    {
      uint64_t v8 = sub_10000D33C(&qword_1001CC200);
      uint64_t v9 = *(int *)(v5 + 28);
    }

    sub_10008BE54(v1 + v9, v0, v0, v8);
  }

void sub_1000D0EFC(uint64_t a1)
{
  int v6 = &unk_1001675A8;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v2 - 8) + 64LL;
    uint64_t v8 = v7;
    sub_1000D0F8C(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 4LL, &v6, a1 + 16);
    }
  }

void sub_1000D0F8C(uint64_t a1)
{
  if (!qword_1001CC478)
  {
    uint64_t v2 = type metadata accessor for RetryConfiguration(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001CC478);
    }
  }

uint64_t storeEnumTagSinglePayload for CacheUpdateRun.RunType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000D102C + 4 * byte_10016756E[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D1060 + 4 * byte_100167569[v4]))();
}

uint64_t sub_1000D1060(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000D1068(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D1070LL);
  }
  return result;
}

uint64_t sub_1000D107C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D1084LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000D1088(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000D1090(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CacheUpdateRun.RunType()
{
  return &type metadata for CacheUpdateRun.RunType;
}

unint64_t sub_1000D10B0()
{
  unint64_t result = qword_1001CC4B8;
  if (!qword_1001CC4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001676B8, &type metadata for CacheUpdateRun.RunType);
    atomic_store(result, (unint64_t *)&qword_1001CC4B8);
  }

  return result;
}

uint64_t sub_1000D10EC(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1);
}

  ;
}

  ;
}

uint64_t sub_1000D1128()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_1000D1134(uint64_t a1)
{
}

void sub_1000D1140()
{
}

uint64_t sub_1000D114C(uint64_t a1)
{
  return dispatch thunk of static Comparable.< infix(_:_:)(v3, v1, v2, a1);
}

uint64_t sub_1000D1164(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

  ;
}

void sub_1000D119C(uint64_t a1)
{
}

void *sub_1000D11A4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v3 - 112) = v2;
  return sub_10000D63C((void *)(v3 - 136));
}

uint64_t sub_1000D11B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000D5C0(a1, a2, a3, a4);
}

uint64_t sub_1000D11C0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000D11C8()
{
  return 0LL;
}

uint64_t sub_1000D11E4()
{
  return type metadata accessor for MercuryCacheMetadata(0LL);
}

uint64_t sub_1000D11EC()
{
  return type metadata accessor for RetryConfiguration(0LL);
}

uint64_t sub_1000D11F4()
{
  return sub_10000DA1C(v0 - 128, v0 - 200);
}

uint64_t sub_1000D1200(uint64_t a1, uint64_t a2)
{
  return sub_10000D5C0(a1, a2, 1LL, v2);
}

uint64_t sub_1000D120C@<X0>(uint64_t (*a1)(void, void, uint64_t)@<X8>)
{
  return a1(*(void *)(v1 - 256), *(void *)(v3 - 256), v2);
}

uint64_t sub_1000D1220@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000D1228()
{
  return AnyHashable.init<A>(_:)(v0 - 176);
}

uint64_t sub_1000D1234()
{
  return v0;
}

uint64_t sub_1000D1244()
{
  unint64_t v1 = *(void *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vHasher._combine(_:)(v1 & 1) = -1;
  }
  return (v1 + 1);
}

void sub_1000D125C(uint64_t a1, uint64_t a2)
{
}

void sub_1000D1264(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_1000D127C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000D1284()
{
  return sub_10000E854(v0 - 144);
}

void sub_1000D128C()
{
}

void sub_1000D129C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
}

uint64_t sub_1000D12A4()
{
  return 0LL;
}

uint64_t sub_1000D12B8()
{
  return sub_10000D3A0((void *)(v0 - 136));
}

  ;
}

  ;
}

void sub_1000D12E8(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000D12F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_1000D12F8()
{
}

void sub_1000D1304()
{
}

uint64_t sub_1000D1310(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_1000D131C@<X0>(uint64_t a1@<X8>)
{
  return static Date.== infix(_:_:)(v2 + a1, v1 + a1);
}

uint64_t sub_1000D1328(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  uint64_t v8 = a2;
  sub_1000D2A94(a1, (uint64_t)sub_1000D2CD8, 0LL, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_1000D13A4()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC4C0 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000D13EC()
{
  unint64_t v0 = sub_1000D2A10();
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSStorageDatabaseDefaultDomain);
  unint64_t v7 = v0;
  uint64_t v8 = &off_1001AE800;
  *(void *)&__int128 v6 = sub_1000D1468(v1, v2);
  uint64_t v3 = type metadata accessor for MercuryCacheMetadataStore();
  uint64_t v4 = swift_allocObject(v3, 152LL, 15LL);
  swift_defaultActor_initialize(v4);
  uint64_t result = sub_100019F60(&v6, v4 + 112);
  qword_1001DBB88 = v4;
  return result;
}

id sub_1000D1468(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithDomain:v5];

  return v6;
}

uint64_t sub_1000D14D8(void *a1)
{
  id v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000D11E4();
  uint64_t v34 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10001A284();
  uint64_t v35 = v6;
  __chkstk_darwin(v7);
  uint64_t v33 = (uint64_t)v32 - v8;
  id v9 = [a1 stringValue];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v13 = sub_1000D27F4(v10, v12);
  swift_bridgeObjectRelease();
  sub_1000BE890(v36, v13);
  uint64_t v15 = v36[0];
  uint64_t v14 = v36[1];
  int64_t v16 = v36[3];
  unint64_t v17 = v36[4];
  int64_t v18 = (unint64_t)(v36[2] + 64LL) >> 6;
  v32[1] = v13;
  uint64_t result = swift_bridgeObjectRetain(v13);
  uint64_t v20 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_22;
    }

    int64_t v23 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v23 >= v18) {
      goto LABEL_29;
    }
    unint64_t v24 = *(void *)(v14 + 8 * v23);
    int64_t v25 = v16 + 1;
    if (!v24)
    {
      int64_t v25 = v16 + 2;
      if (v16 + 2 >= v18) {
        goto LABEL_29;
      }
      unint64_t v24 = *(void *)(v14 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v16 + 3;
        if (v16 + 3 >= v18) {
          goto LABEL_29;
        }
        unint64_t v24 = *(void *)(v14 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v16 + 4;
          if (v16 + 4 >= v18) {
            goto LABEL_29;
          }
          unint64_t v24 = *(void *)(v14 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v16 + 5;
            if (v16 + 5 >= v18) {
              goto LABEL_29;
            }
            unint64_t v24 = *(void *)(v14 + 8 * v25);
            if (!v24)
            {
              int64_t v25 = v16 + 6;
              if (v16 + 6 >= v18) {
                goto LABEL_29;
              }
              unint64_t v24 = *(void *)(v14 + 8 * v25);
              if (!v24)
              {
                int64_t v26 = v16 + 7;
                while (v26 < v18)
                {
                  unint64_t v24 = *(void *)(v14 + 8 * v26++);
                  if (v24)
                  {
                    int64_t v25 = v26 - 1;
                    goto LABEL_21;
                  }
                }

uint64_t sub_1000D17E0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  void v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = *(void *)(sub_1000D11E4() - 8);
  v3[5] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[6] = swift_task_alloc(v5);
  v3[7] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000D184C, v2, 0LL);
}

uint64_t sub_1000D184C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[2];
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v32 = v0[7];
    uint64_t v4 = v0[5];
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain(v2);
    uint64_t v7 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v33 = v3;
      uint64_t v9 = v1[6];
      uint64_t v8 = (uint64_t *)v1[7];
      uint64_t v10 = v1;
      sub_10004AF7C(v5, (uint64_t)v8);
      uint64_t v11 = *v8;
      uint64_t v12 = *(void *)(v32 + 8);
      sub_10004AF7C((uint64_t)v8, v9);
      swift_bridgeObjectRetain(v12);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
      uint64_t v34 = v7;
      uint64_t result = sub_1000D2F6C();
      uint64_t v16 = v7[2];
      BOOL v17 = (v15 & 1) == 0;
      Swift::Int v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        break;
      }
      unint64_t v19 = result;
      char v20 = v15;
      sub_10000D33C(&qword_1001CC5D0);
      Swift::Bool v21 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
      uint64_t v7 = v34;
      uint64_t v1 = v10;
      if (v21)
      {
        unint64_t v22 = sub_1000D2F6C();
        if ((v20 & 1) != (v23 & 1)) {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        }
        unint64_t v19 = v22;
      }

      uint64_t v24 = v10[6];
      if ((v20 & 1) != 0)
      {
        sub_1000D2F28(v24, v34[7] + v19 * v6);
      }

      else
      {
        v34[(v19 >> 6) + 8] |= 1LL << v19;
        int64_t v25 = (void *)(v34[6] + 16 * v19);
        *int64_t v25 = v11;
        v25[1] = v12;
        uint64_t result = sub_1000D2EE4(v24, v34[7] + v19 * v6);
        uint64_t v26 = v34[2];
        BOOL v27 = __OFADD__(v26, 1LL);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_17;
        }
        _OWORD v34[2] = v28;
        swift_bridgeObjectRetain(v12);
      }

      uint64_t v29 = v10[7];
      sub_10004C578();
      swift_bridgeObjectRelease();
      sub_10004AFC0(v29);
      v5 += v6;
      uint64_t v3 = v33 - 1;
      if (v33 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
  }

  else
  {
    uint64_t v7 = _swiftEmptyDictionarySingleton;
LABEL_14:
    uint64_t v31 = v1[6];
    uint64_t v30 = v1[7];
    sub_1000D1A78((uint64_t)v7, (void *)v1[3]);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return ((uint64_t (*)(void))v1[1])();
  }

  return result;
}

void sub_1000D1A78(uint64_t a1, void *a2)
{
  uint64_t v66 = sub_10000D33C(&qword_1001CC210);
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10001A284();
  uint64_t v65 = v6;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v59 - v9);
  __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v59 - v11;
  id v60 = a2;
  id v12 = [a2 stringValue];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  uint64_t v61 = v2;
  uint64_t v59 = sub_1000D27F4(v13, v15);
  sub_10000DE2C();
  sub_1000BE890(v71, a1);
  uint64_t v67 = v71[0];
  int64_t v68 = v71[3];
  unint64_t v16 = v71[4];
  uint64_t v62 = v71[1];
  int64_t v63 = (unint64_t)(v71[2] + 64LL) >> 6;
  sub_10000DEE0();
  BOOL v17 = _swiftEmptyDictionarySingleton;
  if (!v16) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v69 = (v16 - 1) & v16;
  for (unint64_t i = __clz(__rbit64(v16)) | (v68 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    uint64_t v26 = *(void *)(v67 + 56);
    BOOL v27 = (uint64_t *)(*(void *)(v67 + 48) + 16 * i);
    uint64_t v29 = *v27;
    uint64_t v28 = v27[1];
    uint64_t v30 = v26 + *(void *)(*(void *)(sub_1000D11E4() - 8) + 72LL) * i;
    uint64_t v31 = v66;
    uint64_t v32 = v64;
    sub_10004AF7C(v30, (uint64_t)&v64[*(int *)(v66 + 48)]);
    *uint64_t v32 = v29;
    v32[1] = v28;
    sub_1000D2C90((uint64_t)v32, (uint64_t)v10);
    uint64_t v33 = *(int *)(v31 + 48);
    uint64_t v34 = v65;
    uint64_t v35 = (uint64_t)v65 + v33;
    uint64_t v36 = *v10;
    uint64_t v37 = v10[1];
    uint64_t v38 = (uint64_t)v10;
    *uint64_t v65 = *v10;
    v34[1] = v37;
    sub_10004AF7C((uint64_t)v10 + v33, (uint64_t)v34 + v33);
    swift_bridgeObjectRetain(v28);
    sub_10000DF10();
    sub_1000CF95C();
    uint64_t v40 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    uint64_t v70 = v17;
    unint64_t v42 = sub_100030CCC(v36, v37);
    uint64_t v44 = v17[2];
    BOOL v45 = (v43 & 1) == 0;
    Swift::Int v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      break;
    }
    unint64_t v47 = v42;
    char v48 = v43;
    sub_10000D33C(&qword_1001CC5C8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v46))
    {
      unint64_t v49 = sub_100030CCC(v36, v37);
      if ((v48 & 1) != (v50 & 1)) {
        goto LABEL_39;
      }
      unint64_t v47 = v49;
    }

    BOOL v17 = v70;
    if ((v48 & 1) != 0)
    {
      uint64_t v51 = v70[7];
      swift_bridgeObjectRelease();
      *(void *)(v51 + 8 * v47) = v40;
    }

    else
    {
      v70[(v47 >> 6) + 8] |= 1LL << v47;
      uint64_t v52 = (uint64_t *)(v17[6] + 16 * v47);
      *uint64_t v52 = v36;
      v52[1] = v37;
      *(void *)(v17[7] + 8 * v47) = v40;
      uint64_t v53 = v17[2];
      BOOL v23 = __OFADD__(v53, 1LL);
      uint64_t v54 = v53 + 1;
      if (v23) {
        goto LABEL_37;
      }
      void v17[2] = v54;
      sub_10000DF10();
    }

    sub_10000DE2C();
    sub_10004C578();
    sub_10004AFC0(v35);
    uint64_t v10 = (uint64_t *)v38;
    sub_1000102E0(v38, &qword_1001CC210);
    unint64_t v16 = v69;
    if (v69) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v19 = v68 + 1;
    if (__OFADD__(v68, 1LL)) {
      goto LABEL_38;
    }
    if (v19 >= v63) {
      goto LABEL_35;
    }
    unint64_t v20 = *(void *)(v62 + 8 * v19);
    int64_t v21 = v68 + 1;
    if (!v20)
    {
      sub_1000D2F9C();
      if (v22 == v23) {
        goto LABEL_35;
      }
      sub_1000D2F90();
      if (!v20)
      {
        sub_1000D2F9C();
        if (v22 == v23) {
          goto LABEL_35;
        }
        sub_1000D2F90();
        if (!v20)
        {
          sub_1000D2F9C();
          if (v22 == v23) {
            goto LABEL_35;
          }
          sub_1000D2F90();
          if (!v20)
          {
            sub_1000D2F9C();
            if (v22 == v23) {
              goto LABEL_35;
            }
            sub_1000D2F90();
            if (!v20)
            {
              int64_t v21 = v24 + 5;
              if (v24 + 5 >= v63) {
                goto LABEL_35;
              }
              unint64_t v20 = *(void *)(v62 + 8 * v21);
              if (!v20)
              {
                int64_t v25 = v68 + 7;
                while (v25 < v63)
                {
                  unint64_t v20 = *(void *)(v62 + 8 * v25++);
                  if (v20)
                  {
                    int64_t v21 = v25 - 1;
                    goto LABEL_24;
                  }
                }

uint64_t sub_1000D1EA4(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v2[33] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D1EFC, v1, 0LL);
}

uint64_t sub_1000D1EFC()
{
  uint64_t v1 = v0 + 80;
  uint64_t v44 = v0 + 112;
  if (qword_1001C8030 != -1) {
    swift_once(&qword_1001C8030, sub_1000D13A4);
  }
  BOOL v45 = (void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v43 = *(void *)(v4 + 72);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + 2 * v43,  *(unsigned __int8 *)(v4 + 80) | 7LL);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v6 = type metadata accessor for MercuryCacheMetadataStore();
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v6;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  uint64_t v7 = swift_retain(v2);
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v42 = v0 + 80;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    sub_10000DEE0();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v13 = sub_10000D37C((void *)(v0 + 16), v6);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v6);
    *(void *)(v0 + 232) = swift_getMetatypeMetadata(v14);
    *(void *)(v0 + 208) = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 208);
    sub_1000102E0(v0 + 208, &qword_1001CAAD0);
    sub_10000DC14();
    *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for String;
    *(void *)(v0 + 176) = v10;
    *(void *)(v0 + 184) = v12;
    uint64_t v1 = v0 + 80;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 176);
    sub_1000102E0(v0 + 176, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v15 = sub_10000D37C((void *)(v0 + 16), v6);
    uint64_t v16 = sub_10000DC54((uint64_t)v15, v6);
    *(void *)(v0 + 72) = swift_getMetatypeMetadata(v16);
    *(void *)(v0 + 48) = v16;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 48);
    sub_1000102E0(v0 + 48, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  BOOL v17 = *(void **)(v0 + 248);
  Swift::Int v18 = *(void **)(v0 + 256);
  sub_10000D3A0((void *)(v0 + 16));
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease();
  unint64_t v46 = 0xD00000000000001CLL;
  unint64_t v47 = 0x8000000100173EF0LL;
  uint64_t v19 = sub_1000105E8((uint64_t)[v17 description]);
  int64_t v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  unint64_t v23 = v46;
  unint64_t v24 = v47;
  *(void *)(v0 + 104) = &type metadata for String;
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v23;
  *(void *)(v0 + 88) = v24;
  static LogMessage.sensitive(_:)(v1);
  uint64_t v25 = sub_1000102E0(v1, &qword_1001CAAD0);
  uint64_t v26 = static os_log_type_t.info.getter(v25);
  sub_1000BD1B0(v26, v5);
  swift_bridgeObjectRelease();
  uint64_t v27 = v18[17];
  uint64_t v28 = v18[18];
  uint64_t v29 = sub_10000D37C(v18 + 14, v27);
  (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v28 + 16))( 0xD00000000000001ELL,  0x8000000100173EB0LL,  v27,  v28);
  if (*(void *)(v0 + 136))
  {
    uint64_t v29 = (uint64_t *)(v0 + 240);
    uint64_t v41 = sub_10000D33C(&qword_1001CC5C0);
    if (sub_100010BA4(v0 + 240, v44, (uint64_t)&type metadata for Any + 8, v41))
    {
      uint64_t v31 = *v29;
      goto LABEL_8;
    }
  }

  else
  {
    sub_1000102E0(v44, &qword_1001CAAD0);
  }

  uint64_t v30 = sub_10000D33C(&qword_1001C9D98);
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v30,  &protocol witness table for String);
LABEL_8:
  uint64_t v32 = *(void **)(v0 + 248);
  unint64_t v46 = v31;
  uint64_t v33 = sub_1000105E8((uint64_t)objc_msgSend(v32, "stringValue", v42, v43));
  uint64_t v35 = v34;

  sub_100033538(v33, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = v18[17];
  uint64_t v37 = v18[18];
  sub_10000D37C(v18 + 14, v36);
  unint64_t v38 = v46;
  *(void *)(v0 + 168) = sub_10000D33C(&qword_1001CC5C0);
  *(void *)(v0 + 144) = v38;
  (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v37 + 8))( v45,  0xD00000000000001ELL,  0x8000000100173EB0LL,  v36,  v37);
  uint64_t v39 = *(void *)(v0 + 264);
  sub_10000D3A0(v45);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D2398(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4 = v3;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v6);
  if (qword_1001C8030 != -1) {
    swift_once(&qword_1001C8030, sub_1000D13A4);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 3LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v42 = (void *)type metadata accessor for MercuryCacheMetadataStore();
  unint64_t v40 = v3;
  uint64_t v10 = swift_retain(v3);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v16 = v42;
    BOOL v17 = sub_10000D37C(&v40, (uint64_t)v42);
    uint64_t v18 = sub_10000DC54((uint64_t)v17, (uint64_t)v16);
    swift_getMetatypeMetadata(v18);
    sub_10000DEA4();
    sub_1000B8488();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v38[0] = v13;
    v38[1] = v15;
    sub_10000DEA4();
    sub_1000B8488();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v19 = v42;
    unint64_t v20 = sub_10000D37C(&v40, (uint64_t)v42);
    uint64_t v21 = sub_10000DC54((uint64_t)v20, (uint64_t)v19);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
    v38[0] = v21;
    sub_10000DEA4();
    sub_1000102E0((uint64_t)v38, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v40);
  unint64_t v40 = 0LL;
  unint64_t v41 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease();
  unint64_t v40 = 0xD00000000000001CLL;
  unint64_t v41 = 0x8000000100173ED0LL;
  v22._uint64_t countAndFlagsBits = a2;
  v22._object = a3;
  String.append(_:)(v22);
  uint64_t v42 = &type metadata for String;
  static LogMessage.sensitive(_:)(&v40);
  sub_100068544();
  unint64_t v40 = 0x203A68746977LL;
  unint64_t v41 = 0xE600000000000000LL;
  uint64_t v23 = sub_10000D33C(&qword_1001C8E58);
  v24._uint64_t countAndFlagsBits = Dictionary.description.getter( a1,  &type metadata for String,  v23,  &protocol witness table for String);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  uint64_t v42 = &type metadata for String;
  static LogMessage.safe(_:)(&v40);
  uint64_t v25 = sub_100068544();
  uint64_t v26 = static os_log_type_t.info.getter(v25);
  sub_1000BD1B0(v26, v9);
  swift_bridgeObjectRelease();
  uint64_t v27 = (void *)(v3 + 112);
  sub_10000D37C((void *)(v3 + 112), *(void *)(v3 + 136));
  unint64_t v28 = sub_1000D2F7C();
  v29(v28);
  if (&qword_1001CAAD0)
  {
    sub_1000258D4();
  }

  else if (v42)
  {
    uint64_t v35 = sub_10000D33C(&qword_1001CC5C0);
    if (sub_100010BA4((uint64_t)v38, (uint64_t)&v40, (uint64_t)&type metadata for Any + 8, v35))
    {
      uint64_t v31 = v38[0];
      goto LABEL_9;
    }
  }

  else
  {
    sub_1000102E0((uint64_t)&v40, &qword_1001CAAD0);
  }

  uint64_t v30 = sub_10000D33C(&qword_1001C9D98);
  uint64_t v31 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v30,  &protocol witness table for String);
LABEL_9:
  sub_10000DF10();
  swift_bridgeObjectRetain(a1);
  swift_isUniquelyReferenced_nonNull_native(v31);
  unint64_t v40 = v31;
  sub_100034FE4();
  unint64_t v32 = v40;
  sub_10000DE2C();
  sub_10004C578();
  uint64_t v34 = *(void *)(v4 + 136);
  uint64_t v33 = *(void *)(v4 + 144);
  sub_10000D37C(v27, v34);
  uint64_t v42 = (void *)sub_10000D33C(&qword_1001CC5C0);
  unint64_t v40 = v32;
  (*(void (**)(unint64_t *, unint64_t, unint64_t, uint64_t, uint64_t))(v33 + 8))( &v40,  0xD00000000000001ELL,  0x8000000100173EB0LL,  v34,  v33);
  sub_10000D3A0(&v40);
  sub_10000DD84();
}

uint64_t sub_1000D27F4(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = sub_1000D2F7C();
  v7(v6);
  if (v3)
  {
    sub_1000258D4();
    goto LABEL_11;
  }

  if (!v16)
  {
    uint64_t v12 = (__int128 *)v15;
LABEL_10:
    sub_1000102E0((uint64_t)v12, &qword_1001CAAD0);
    goto LABEL_11;
  }

  uint64_t v8 = sub_10000D33C(&qword_1001C8E58);
  uint64_t v9 = v17;
  v14[0] = a1;
  v14[1] = a2;
  sub_10000DEE0();
  AnyHashable.init<A>(_:)(v14);
  sub_10003079C((uint64_t)v15, v9, &v17);
  swift_bridgeObjectRelease();
  sub_10000E854((uint64_t)v15);
  if (!v18)
  {
    uint64_t v12 = &v17;
    goto LABEL_10;
  }

  uint64_t v10 = sub_10000D33C(&qword_1001C9D98);
LABEL_11:
  uint64_t v13 = sub_10000D33C(&qword_1001C8E58);
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v13,  &protocol witness table for String);
}

uint64_t sub_1000D296C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MercuryCacheMetadataStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd25MercuryCacheMetadataStore);
}

unint64_t sub_1000D29B0(uint64_t a1)
{
  unint64_t result = sub_1000D29D4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D29D4()
{
  unint64_t result = qword_1001CC5B0;
  if (!qword_1001CC5B0)
  {
    uint64_t v1 = type metadata accessor for MercuryCacheMetadataStore();
    unint64_t result = swift_getWitnessTable(&unk_100167748, v1);
    atomic_store(result, (unint64_t *)&qword_1001CC5B0);
  }

  return result;
}

unint64_t sub_1000D2A10()
{
  unint64_t result = qword_1001CC5B8;
  if (!qword_1001CC5B8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSStorageDatabase);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CC5B8);
  }

  return result;
}

uint64_t sub_1000D2A4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  return a2;
}

uint64_t sub_1000D2A94(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v35 = v36;
  swift_bridgeObjectRetain(a1);
  uint64_t v34 = a3;
  swift_retain(a3);
  uint64_t v9 = sub_1000D2D54();
  if (v10)
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    while (1)
    {
      uint64_t v15 = (void *)*a5;
      unint64_t v17 = sub_100030CCC(v12, v13);
      uint64_t v18 = v15[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v15[3] >= v20)
      {
        if ((a4 & 1) == 0)
        {
          sub_10000D33C(&qword_1001CC5C8);
          _NativeDictionary.copy()();
        }
      }

      else
      {
        sub_1000323D8(v20, a4 & 1);
        unint64_t v22 = sub_100030CCC(v12, v13);
        if ((v21 & 1) != (v23 & 1)) {
          goto LABEL_17;
        }
        unint64_t v17 = v22;
      }

      Swift::String v24 = (void *)*a5;
      if ((v21 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v25 = v24[7];
        swift_bridgeObjectRelease();
        *(void *)(v25 + 8 * v17) = v14;
      }

      else
      {
        v24[(v17 >> 6) + 8] |= 1LL << v17;
        uint64_t v26 = (uint64_t *)(v24[6] + 16 * v17);
        *uint64_t v26 = v12;
        v26[1] = v13;
        *(void *)(v24[7] + 8 * v17) = v14;
        uint64_t v27 = v24[2];
        BOOL v28 = __OFADD__(v27, 1LL);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_16;
        }
        void v24[2] = v29;
      }

      uint64_t v12 = sub_1000D2D54();
      uint64_t v13 = v30;
      uint64_t v14 = v31;
      a4 = 1;
      if (!v30) {
        goto LABEL_14;
      }
    }

    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
  }

  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v32 = v37;
    swift_release(v34);
    sub_10004844C(v35);
    return swift_release(v32);
  }

  return result;
}

uint64_t sub_1000D2C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CC210);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D2CD8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000D2A4C(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_1000D2D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v8 = -1LL;
  }
  a4[3] = 0LL;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1000D2D54()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v11(&v19, v20);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    return v19;
  }

  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      char v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      unint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        char v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          char v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          unint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            char v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              char v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v18 < v14)
              {
                char v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = 0LL;
    v0[3] = v4;
    v0[4] = 0LL;
  }

  return result;
}

uint64_t sub_1000D2EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MercuryCacheMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D2F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MercuryCacheMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000D2F6C()
{
  return sub_100030CCC(v1, v0);
}

unint64_t sub_1000D2F7C()
{
  return 0xD00000000000001ELL;
}

  ;
}

  ;
}

unint64_t sub_1000D2FA8(void *a1)
{
  id v1 = [a1 description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  v5._uint64_t countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 95LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  sub_100009020();
  return 0xD00000000000001ELL;
}

uint64_t sub_1000D3050()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC5D8 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000D3098()
{
  *(void *)(v1 + 472) = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v1 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return sub_10000DD48();
}

uint64_t sub_1000D30E8()
{
  uint64_t v1 = v0 + 160;
  if (qword_1001C8040 != -1) {
    swift_once(&qword_1001C8040, sub_1000D3050);
  }
  unint64_t v38 = (_OWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  *(void *)(v0 + 488) = v3;
  uint64_t v4 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  *(void *)(v0 + 496) = v5;
  LODWORD(v4) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v4;
  uint64_t v6 = swift_allocObject( v3,  ((v4 + 32LL) & ~(unint64_t)v4) + 3 * v5,  v4 | 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v7 = *(void *)(v2 + 16);
  *(_OWORD *)(v0 + 408) = *(_OWORD *)v2;
  *(void *)(v0 + 424) = v7;
  uint64_t v8 = *(void **)(v2 + 24);
  *(void *)(v0 + 504) = v8;
  uint64_t v9 = *(void *)(v2 + 32);
  *(void *)(v0 + 512) = v9;
  char v35 = *(_BYTE *)(v2 + 40);
  *(_BYTE *)(v0 + 57) = v35;
  *(_OWORD *)(v0 + 448) = *(_OWORD *)(v0 + 416);
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &unk_1001AF5D0;
  uint64_t v10 = sub_10000DDDC((uint64_t)&unk_1001AF3A8, 57LL);
  *(void *)(v0 + 96) = v10;
  sub_1000D3F38(v10, *(__n128 *)(v2 + 25), *(__n128 *)(v2 + 16), *(__n128 *)v2);
  uint64_t v36 = v9;
  swift_bridgeObjectRetain(v9);
  id v37 = v8;
  id v11 = (id)AMSLogKey(v37);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v15 = *(void *)(v0 + 120);
    char v16 = sub_10000D37C((void *)(v0 + 96), v15);
    uint64_t DynamicType = swift_getDynamicType(v16, v15, 1LL);
    *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = swift_getMetatypeMetadata(DynamicType);
    *(void *)(v0 + 192) = DynamicType;
    uint64_t v18 = (void *)(v0 + 96);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 192);
    uint64_t v1 = v0 + 160;
    sub_10000E888(v0 + 192);
    sub_10000DC14();
    *(void *)(v0 + 88) = &type metadata for String;
    *(void *)(v0 + 64) = v34;
    *(void *)(v0 + 72) = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 64);
    sub_10000E888(v0 + 64);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100009020();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v18 = (void *)(v0 + 96);
    uint64_t v20 = sub_10000D37C((void *)(v0 + 96), v19);
    uint64_t v21 = swift_getDynamicType(v20, v19, 1LL);
    *(void *)(v0 + 152) = swift_getMetatypeMetadata(v21);
    *(void *)(v0 + 128) = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 128);
    sub_10000E888(v0 + 128);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v18);
  LogMessage.init(stringLiteral:)(0x20676E696E6E7552LL);
  *(void *)(v0 + 432) = 0LL;
  *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE000000000000000LL;
  v22._uint64_t countAndFlagsBits = 0x646F6D2068746977LL;
  v22._object = (void *)0xEB00000000206C65LL;
  String.append(_:)(v22);
  *unint64_t v38 = *(_OWORD *)(v0 + 408);
  *(void *)(v0 + 32) = *(void *)(v0 + 424);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v37;
  *(void *)(v0 + 48) = v36;
  *(_BYTE *)(v0 + 56) = v35;
  _print_unlocked<A, B>(_:_:)( v38,  v0 + 432,  &unk_1001AF4B8,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v23 = *(void *)(v0 + 432);
  uint64_t v24 = *(void *)(v0 + 440);
  *(void *)(v0 + 184) = &type metadata for String;
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v23;
  *(void *)(v0 + 168) = v24;
  static LogMessage.sensitive(_:)(v1);
  uint64_t v25 = sub_10000E888(v1);
  uint64_t v26 = static os_log_type_t.info.getter(v25);
  sub_1000BD1B0(v26, v6);
  swift_bridgeObjectRelease();
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  uint64_t v27 = qword_1001DBB90;
  *(void *)(v0 + 52_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = qword_1001DBB90;
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  *(void *)(v0 + 528) = qword_1001DBB88;
  type metadata accessor for MercuryCacheDatabase();
  id v28 = v37;
  sub_1000C1178();
  *(void *)(v0 + 536) = v29;
  sub_100011AF8();
  *(void *)(v0 + 544) = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  uint64_t updated = type metadata accessor for MercuryCacheUpdateStateManager();
  uint64_t v31 = swift_allocObject(updated, 120LL, 15LL);
  *(void *)(v0 + 552) = v31;
  swift_defaultActor_initialize(v31);
  *(void *)(v31 + 112) = &_swiftEmptySetSingleton;
  uint64_t v32 = type metadata accessor for DynamicActivityTaskScheduler();
  *(void *)(v0 + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10000DDDC(v32, 16LL);
  return swift_task_switch(sub_1000D3578, v27, 0LL);
}

uint64_t sub_1000D3578()
{
  uint64_t v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = *(void **)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 536);
  *(void *)(v0 + 568) = sub_100121B40( *(void *)(v0 + 504),  *(void *)(v0 + 528),  v4,  (uint64_t)v3,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher,  (uint64_t)&off_1001AF268,  v2,  v1,  *(unint64_t **)(v0 + 520));

  swift_release(v1);
  swift_release(v2);
  swift_release(v4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001CC61C);
  *(void *)(v0 + 576) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000D3650;
  return sub_1000D426C(*(void *)(v0 + 512), *(_BYTE *)(v0 + 57));
}

uint64_t sub_1000D3650()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 576LL);
  *(void *)(*(void *)v1 + 584LL) = v0;
  swift_task_dealloc(v2);
  return sub_10000DD48();
}

uint64_t sub_1000D36AC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D36E8()
{
  uint64_t v2 = *(void **)(v0 + 504);
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = swift_allocObject( *(void *)(v0 + 488),  ((*(unsigned __int8 *)(v0 + 60) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 60))
       + 2LL * *(void *)(v0 + 496),
         *(unsigned __int8 *)(v0 + 60) | 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &unk_1001AF5D0;
  uint64_t v5 = sub_10000DDDC((uint64_t)&unk_1001AF3A8, 57LL);
  *(void *)(v0 + 256) = v5;
  sub_1000D3F38(v5, *(__n128 *)(v3 + 25), *(__n128 *)(v3 + 16), *(__n128 *)v3);
  id v6 = v2;
  uint64_t v7 = swift_bridgeObjectRetain(v1);
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v13 = sub_1000D3F14();
    *(void *)(v0 + 376) = swift_getMetatypeMetadata();
    *(void *)(v0 + 352) = v13;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 352);
    sub_10000E888(v0 + 352);
    sub_10000DC14();
    *(void *)(v0 + 312) = &type metadata for String;
    *(void *)(v0 + 288) = v10;
    *(void *)(v0 + 296) = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 288);
    sub_10000E888(v0 + 288);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v14 = sub_1000D3F14();
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    *(void *)(v0 + 224) = v14;
    *(void *)(v0 + 248) = MetatypeMetadata;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 224);
    sub_10000E888(v0 + 224);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v16 = *(void *)(v0 + 584);
  uint64_t v17 = *(void *)(v0 + 568);
  sub_10000D3A0((void *)(v0 + 256));
  swift_getErrorValue(v16, v0 + 464, v0 + 384);
  uint64_t v19 = *(void *)(v0 + 384);
  uint64_t v18 = *(void *)(v0 + 392);
  *(void *)(v0 + 344) = v18;
  uint64_t v20 = sub_10000D63C((void *)(v0 + 320));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v20, v19, v18);
  static LogMessage.safe(_:)(v0 + 320);
  uint64_t v21 = sub_10000E888(v0 + 320);
  uint64_t v22 = static os_log_type_t.error.getter(v21);
  sub_1000BD1B0(v22, v4);
  swift_release(v17);
  swift_bridgeObjectRelease();
  swift_errorRelease(v16);
  swift_task_dealloc(*(void *)(v0 + 480));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D393C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 57LL, 7LL);
}

id sub_1000D3974(void *a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    id v4 = a1;
    a1 = a2;
  }

  return a1;
}

void sub_1000D399C(uint64_t a1)
{
}

void sub_1000D39AC(void *a1, void *a2, char a3)
{
  if ((a3 & 1) != 0) {
}
  }

void sub_1000D39F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000D3974(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_10000DFE8();
}

uint64_t sub_1000D3A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000D3974(*(void **)a2, v4, v5);
  id v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_1000D39AC(v6, v7, v8);
  return a1;
}

uint64_t sub_1000D3A84(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  id v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1000D39AC(v4, v5, v6);
  return a1;
}

uint64_t sub_1000D3AC8(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000D3B08(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000D3B4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000D3B54(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2 & 1;
  return result;
}

void type metadata accessor for Identity()
{
}

__n128 sub_1000D3B78(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return result;
}

void type metadata accessor for MercuryCacheUpdateActivityModel()
{
}

uint64_t sub_1000D3BA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *sub_1000D3BD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((_BYTE *)a2 + 8);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for NetworkObserver.NetworkError(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t *sub_1000D3C2C(uint64_t *a1, uint64_t *a2)
{
  char v3 = *((_BYTE *)a2 + 8);
  uint64_t v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000D3C64(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000D3CA4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000D3CE8(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000D3D00(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

void type metadata accessor for MercuryCacheUpdateMode()
{
}

uint64_t sub_1000D3D24(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

void sub_1000D3D54(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v6;
  swift_bridgeObjectRetain(v3);
  id v7 = v4;
  swift_bridgeObjectRetain(v5);
  sub_10000DFE8();
}

void sub_1000D3DA4(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  char v6 = *(void **)(v2 + 24);
  id v7 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v6;
  id v8 = v6;

  uint64_t v9 = *(void *)(v2 + 32);
  char v10 = *(_BYTE *)(v2 + 40);
  *(void *)(v3 + 32) = v9;
  *(_BYTE *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v10;
  swift_bridgeObjectRetain(v9);
  sub_100009020();
  sub_10000DFE8();
}

uint64_t sub_1000D3E0C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(v3 + 24);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v2 + 16);

  char v5 = *(_BYTE *)(v2 + 40);
  *(void *)(v3 + 32) = *(void *)(v2 + 32);
  *(_BYTE *)(v3 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1000D3E5C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 41))
    {
      LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(sub_10009A3C4(v0 + v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(sub_10009A3C4(v0 + v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000D3E9C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4Hasher._combine(_:)(v1 & 1) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4Hasher._combine(_:)(v1 & 1) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for MercuryCacheUpdateActivity()
{
}

double sub_1000D3EF8(void *a1, uint64_t a2)
{
  double result = *(double *)a2;
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  return result;
}

uint64_t sub_1000D3F14()
{
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = sub_10000D37C(v1, v2);
  return swift_getDynamicType(v3, v2, 1LL);
}

uint64_t sub_1000D3F38(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  *(__n128 *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(__n128 *)(a1 + 32) = a3;
  *(__n128 *)(a1 + 4Hasher._combine(_:)(v1 & 1) = a2;
  return sub_1000288A4(v4);
}

void *sub_1000D3F48(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CC708);
  __chkstk_darwin(v6);
  id v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_10000D33C(&qword_1001C8F20);
  uint64_t v25 = *(void *)(v27 - 8);
  uint64_t v9 = __chkstk_darwin(v27);
  uint64_t v26 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v24 = (uint64_t)v22 - v11;
  uint64_t v12 = *(void *)(a3 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for MercuryCacheMetadata(0LL) - 8);
  uint64_t v14 = a3 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  v22[1] = a3;
  swift_bridgeObjectRetain(a3);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v23 = a1;
  while (1)
  {
    a1(v14);
    if (v3) {
      break;
    }
    if (sub_1000102D4((uint64_t)v8, 1LL, v27) == 1)
    {
      sub_1000102E0((uint64_t)v8, &qword_1001CC708);
    }

    else
    {
      uint64_t v17 = v24;
      sub_1000D6C78((uint64_t)v8, v24);
      sub_1000D6C78(v17, v26);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_10001413C();
        uint64_t v16 = v19;
      }

      unint64_t v18 = v16[2];
      if (v18 >= v16[3] >> 1)
      {
        sub_10001413C();
        uint64_t v16 = v20;
      }

      v16[2] = v18 + 1;
      sub_1000D6C78( v26,  (uint64_t)v16 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
      + *(void *)(v25 + 72) * v18);
      a1 = v23;
    }

    v14 += v15;
    if (!--v12)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1000D4198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v6[2] = a1;
  uint64_t v7 = sub_1000D3F48((void (*)(void))sub_1000D6C18, (uint64_t)v6, a2);
  swift_bridgeObjectRetain(v7);
  sub_1000D5998(&v7);
  swift_bridgeObjectRelease();
  uint64_t v4 = v7;
  sub_1001010C4((uint64_t)v7, a3);
  return swift_release(v4);
}

uint64_t sub_1000D4224()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC5E8 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000D426C(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 169) = a2;
  *(void *)(v3 + 392) = a1;
  *(void *)(v3 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  uint64_t v4 = sub_10000DE00();
  *(void *)(v3 + 408) = sub_1000D6CFC(*(void *)(v4 - 8));
  uint64_t v5 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 424) = v6;
  *(void *)(v3 + 432) = sub_1000D6CFC(v6);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_1000D42C8()
{
  uint64_t v1 = *(void *)(v0 + 400);
  __int128 v9 = *(_OWORD *)(v1 + 208);
  sub_10004C420(v1 + 168, v0 + 32);
  uint64_t v2 = *(void *)(v1 + 160);
  *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  __int128 v7 = *(_OWORD *)(v1 + 240);
  __int128 v8 = *(_OWORD *)(v1 + 224);
  sub_10004C420(v1 + 256, v0 + 112);
  uint64_t v3 = *(void **)(v1 + 152);
  *(void *)(v0 + 448) = v3;
  *(_OWORD *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v0 + 72) = v2;
  *(_OWORD *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v8;
  *(_OWORD *)(v0 + 96) = v7;
  *(void *)(v0 + 152) = v3;
  *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0LL;
  *(_BYTE *)(v0 + 168) = 0;
  swift_unknownObjectRetain(v9);
  swift_unknownObjectRetain(v2);
  id v4 = v3;
  uint64_t v5 = (void *)sub_1000D6E1C();
  *(void *)(v0 + 456) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1000D43A4;
  return sub_1000E0A14(*(void *)(v0 + 392), *(_BYTE *)(v0 + 169));
}

uint64_t sub_1000D43A4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 456);
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    id v4 = sub_1000D4604;
  }
  else {
    id v4 = sub_1000D4404;
  }
  return sub_1000D6CF4((uint64_t)v4, *(void *)(v2 + 400), 0LL);
}

uint64_t sub_1000D4404()
{
  *(void *)(v0 + 472) = 0LL;
  static Date.now.getter();
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CC624);
  *(void *)(v0 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  uint64_t v2 = sub_1000D6DBC(v1, (uint64_t)sub_1000D4450);
  return sub_1000D4998(v2);
}

uint64_t sub_1000D4450()
{
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[50];
  sub_1000D6DA0(v0[60]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return sub_1000D6CF4((uint64_t)sub_1000D44B0, v4, 0LL);
}

uint64_t sub_1000D44B0(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 169) == 2 && *(void *)(v1 + 392) == 0LL)
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_1001CBFFC);
    *(void *)(v1 + 488) = v5;
    *uint64_t v5 = v1;
    v5[1] = sub_1000D455C;
    return sub_1000BFC24(*(void *)(v1 + 440));
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 432);
    if (*(void *)(v1 + 472)) {
      swift_willThrow(a1);
    }
    sub_1000D6CC0(v1 + 16);
    swift_task_dealloc(v3);
    sub_1000D6E24();
    return sub_1000D6D0C(*(uint64_t (**)(void))(v1 + 8));
  }

uint64_t sub_1000D455C()
{
  uint64_t v2 = *(void *)(v1 + 488);
  *uint64_t v3 = *v0;
  *(void *)(v1 + 496) = v4;
  swift_task_dealloc(v2);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_1000D45A0()
{
  uint64_t v2 = *(void *)(v0 + 432);
  if (*(void *)(v0 + 472)) {
    swift_willThrow(v1);
  }
  sub_1000D6CC0(v0 + 16);
  swift_task_dealloc(v2);
  sub_1000D6E24();
  return sub_1000D6D0C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D4604()
{
  if (qword_1001C8048 != -1) {
    swift_once(&qword_1001C8048, sub_1000D4224);
  }
  uint64_t v2 = v1[50];
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(*(void *)(sub_10000DC98() - 8) + 72LL);
  sub_1000D6D70();
  uint64_t v5 = sub_10000DCF0(v0 + 3 * v3, v4);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v39 = v5;
  v1[25] = type metadata accessor for MercuryCacheUpdateCoordinator();
  v1[22] = v2;
  uint64_t v6 = sub_100048DB4();
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    __int128 v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v12 = v1[25];
    uint64_t v13 = sub_10000D37C(v1 + 22, v12);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    v1[41] = swift_getMetatypeMetadata(v14);
    v1[38] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 38);
    sub_10008E4C4((uint64_t)(v1 + 38));
    sub_10000DC14();
    v1[45] = &type metadata for String;
    v1[42] = v9;
    v1[43] = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 42);
    sub_10008E4C4((uint64_t)(v1 + 42));
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100020AB8();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v15 = v1[25];
    uint64_t v16 = sub_10000D37C(v1 + 22, v15);
    uint64_t v17 = sub_10000DC54((uint64_t)v16, v15);
    v1[29] = swift_getMetatypeMetadata(v17);
    v1[26] = v17;
    uint64_t v18 = sub_100096150();
    sub_1000D6DD4(v18, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v38 = v1[58];
  uint64_t v19 = (void *)v1[56];
  sub_10000D3A0(v1 + 22);
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  uint64_t v40 = 0x726F66206B736154LL;
  unint64_t v41 = 0xE900000000000020LL;
  id v20 = v19;
  uint64_t v21 = sub_1000105E8((uint64_t)[v20 description]);
  uint64_t v23 = v22;

  v24._uint64_t countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);

  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x64656C69616620LL;
  v25._object = (void *)0xE700000000000000LL;
  String.append(_:)(v25);
  uint64_t v26 = v40;
  unint64_t v27 = v41;
  v1[33] = &type metadata for String;
  v1[30] = v26;
  v1[31] = v27;
  sub_1000D6DF0();
  sub_10008E4C4((uint64_t)(v1 + 30));
  v1[46] = 0LL;
  v1[47] = 0xE000000000000000LL;
  v28._uint64_t countAndFlagsBits = sub_1000D6DDC();
  String.append(_:)(v28);
  v1[48] = v38;
  uint64_t v29 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  _print_unlocked<A, B>(_:_:)( v1 + 48,  v1 + 46,  v29,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v30 = v1[46];
  uint64_t v31 = v1[47];
  v1[37] = &type metadata for String;
  v1[34] = v30;
  v1[35] = v31;
  static LogMessage.safe(_:)(v1 + 34);
  uint64_t v32 = sub_10008E4C4((uint64_t)(v1 + 34));
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  sub_1000BD1B0(v33, v39);
  uint64_t v34 = sub_100009020();
  v1[59] = v38;
  static Date.now.getter(v34);
  char v35 = (void *)swift_task_alloc(dword_1001CC624);
  v1[60] = v35;
  uint64_t v36 = sub_1000D6DBC(v35, (uint64_t)sub_1000D4450);
  return sub_1000D4998(v36);
}

uint64_t sub_1000D4998(uint64_t a1)
{
  v2[54] = a1;
  v2[55] = v1;
  uint64_t v3 = sub_10000DE00();
  v2[56] = sub_1000D6CFC(*(void *)(v3 - 8));
  uint64_t v4 = sub_10000D33C(&qword_1001CC708);
  v2[57] = sub_1000D6CFC(*(void *)(v4 - 8));
  v2[58] = sub_10000D33C(&qword_1001C8F20);
  v2[59] = sub_1000D6E1C();
  v2[60] = sub_1000D6E1C();
  sub_1000D6DB0();
  return sub_1000D6CF4(v5, v6, v7);
}

uint64_t sub_1000D4A20()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = *(void *)(v1 + 208);
  v0[61] = v2;
  v0[62] = *(void *)(v1 + 152);
  return swift_task_switch(sub_1000D4A44, v2, 0LL);
}

uint64_t sub_1000D4A44()
{
  uint64_t v1 = *(void *)(v0 + 440);
  *(void *)(v0 + 504) = sub_1000D14D8(*(void **)(v0 + 496));
  return sub_1000D6CF4((uint64_t)sub_1000D4A84, v1, 0LL);
}

uint64_t sub_1000D4A84()
{
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 464);
  sub_1000D4198(*(void *)(v0 + 432), *(void *)(v0 + 504), v2);
  sub_100009070();
  if (sub_1000102D4(v2, 1LL, v1) == 1)
  {
    uint64_t v3 = v0 + 128;
    sub_1000102E0(*(void *)(v0 + 456), &qword_1001CC708);
    if (qword_1001C8048 != -1) {
      swift_once(&qword_1001C8048, sub_1000D4224);
    }
    uint64_t v4 = *(void *)(v0 + 440);
    sub_10000D33C(&qword_1001C9C70);
    sub_10000DC98();
    sub_1000D6D70();
    uint64_t v7 = sub_10000DCF0(v2 + 2 * v5, v6);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t updated = type metadata accessor for MercuryCacheUpdateCoordinator();
    *(void *)(v0 + 88) = updated;
    *(void *)(v0 + 64) = v4;
    uint64_t v9 = sub_100048DB4();
    id v10 = (id)AMSLogKey(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v14 = v13;

      swift_bridgeObjectRetain(v14);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v15 = sub_10000D37C((void *)(v0 + 64), updated);
      uint64_t v16 = sub_10000DC54((uint64_t)v15, updated);
      *(void *)(v0 + 184) = swift_getMetatypeMetadata(v16);
      *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v16;
      sub_100096150();
      sub_1000102E0(v0 + 160, &qword_1001CAAD0);
      sub_10000DC14();
      *(void *)(v0 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
      *(void *)(v0 + 192) = v12;
      *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v14;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 192);
      sub_1000102E0(v0 + 192, &qword_1001CAAD0);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      uint64_t v3 = v0 + 128;
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v36 = sub_10000D37C((void *)(v0 + 64), updated);
      sub_10000DC54((uint64_t)v36, updated);
      *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10003881C();
      *(void *)(v0 + 96) = v2;
      uint64_t v37 = sub_100096150();
      sub_1000D6DD4(v37, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    uint64_t v38 = *(void **)(v0 + 496);
    sub_10000D3A0((void *)(v0 + 64));
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000016LL;
    unint64_t v87 = 0x8000000100174030LL;
    id v39 = v38;
    uint64_t v40 = sub_1000105E8((uint64_t)[v39 description]);
    uint64_t v42 = v41;

    v43._uint64_t countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);

    sub_100020AB8();
    unint64_t v44 = v86;
    unint64_t v45 = v87;
    *(void *)(v0 + 152) = &type metadata for String;
    *(void *)(v0 + 128) = v44;
    *(void *)(v0 + 136) = v45;
    static LogMessage.sensitive(_:)(v3);
    uint64_t v46 = sub_1000102E0(v3, &qword_1001CAAD0);
    uint64_t v47 = static os_log_type_t.info.getter(v46);
    sub_1000BD1B0(v47, v7);
  }

  else
  {
    uint64_t v78 = (void *)(v0 + 224);
    uint64_t v84 = v0 + 320;
    uint64_t v17 = *(void *)(v0 + 480);
    uint64_t v18 = *(void *)(v0 + 456);
    uint64_t v83 = *(void *)(v0 + 464);
    uint64_t v19 = *(int *)(v83 + 48);
    uint64_t v20 = v17 + v19;
    uint64_t v21 = v18 + v19;
    sub_1000D2EE4(v18, v17);
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v81 = *(void *)(v22 - 8);
    uint64_t v82 = v22;
    uint64_t v85 = v20;
    (*(void (**)(uint64_t, uint64_t))(v81 + 32))(v20, v21);
    if (qword_1001C8048 != -1) {
      swift_once(&qword_1001C8048, sub_1000D4224);
    }
    uint64_t v23 = *(void *)(v0 + 440);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v24 = *(void *)(*(void *)(sub_10000DC98() - 8) + 72LL);
    sub_1000D6D70();
    uint64_t v26 = sub_10000DCF0(v2 + 3 * v24, v25);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v80 = v26;
    uint64_t v27 = type metadata accessor for MercuryCacheUpdateCoordinator();
    *(void *)(v0 + 248) = v27;
    *(void *)(v0 + 224) = v23;
    uint64_t v28 = sub_100048DB4();
    id v29 = (id)AMSLogKey(v28);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v34 = (void *)(v0 + 224);
      char v35 = sub_10000D37C(v78, v27);
      sub_10000DC54((uint64_t)v35, v27);
      *(void *)(v0 + 376) = sub_10003881C();
      *(void *)(v0 + 352) = v27;
      sub_100096150();
      sub_1000D6D68(v0 + 352);
      sub_10000DC14();
      *(void *)(v0 + 408) = &type metadata for String;
      *(void *)(v0 + 384) = v31;
      *(void *)(v0 + 392) = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 384);
      sub_1000D6D68(v0 + 384);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v34 = (void *)(v0 + 224);
      char v48 = sub_10000D37C(v78, v27);
      sub_10000DC54((uint64_t)v48, v27);
      *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10003881C();
      *(void *)(v0 + 256) = v27;
      uint64_t v49 = sub_100096150();
      sub_1000D6DD4(v49, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    char v50 = *(void **)(v0 + 496);
    uint64_t v51 = *(void *)(v0 + 472);
    uint64_t v52 = *(void *)(v0 + 480);
    uint64_t v79 = *(void *)(v0 + 440);
    uint64_t v76 = *(void *)(v0 + 464);
    uint64_t v77 = *(void *)(v0 + 432);
    sub_10000D3A0(v34);
    _StringGuts.grow(_:)(26LL);
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000018LL;
    unint64_t v87 = 0x8000000100174050LL;
    id v53 = v50;
    uint64_t v54 = sub_1000105E8((uint64_t)[v53 description]);
    uint64_t v56 = v55;

    v57._uint64_t countAndFlagsBits = v54;
    v57._object = v56;
    String.append(_:)(v57);

    swift_bridgeObjectRelease();
    unint64_t v58 = v86;
    unint64_t v59 = v87;
    *(void *)(v0 + 312) = &type metadata for String;
    *(void *)(v0 + 288) = v58;
    *(void *)(v0 + 296) = v59;
    sub_1000D6DF0();
    sub_1000D6D68(v0 + 288);
    *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v0 + 424) = 0xE000000000000000LL;
    v60._uint64_t countAndFlagsBits = sub_1000D6DDC();
    String.append(_:)(v60);
    uint64_t v61 = v51 + *(int *)(v83 + 48);
    sub_10004AF7C(v52, v51);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v61, v85, v82);
    _print_unlocked<A, B>(_:_:)( v51,  v0 + 416,  v76,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    sub_1000102E0(v51, &qword_1001C8F20);
    uint64_t v62 = *(void *)(v0 + 416);
    uint64_t v63 = *(void *)(v0 + 424);
    *(void *)(v0 + 344) = &type metadata for String;
    *(void *)(v0 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v62;
    *(void *)(v0 + 328) = v63;
    static LogMessage.safe(_:)(v84);
    uint64_t v64 = sub_1000D6D68(v84);
    uint64_t v65 = static os_log_type_t.info.getter(v64);
    sub_1000BD1B0(v65, v80);
    sub_1000090CC();
    unint64_t v86 = sub_1000D2FA8(v53);
    unint64_t v87 = v66;
    swift_bridgeObjectRetain(v66);
    sub_1000D6D3C();
    sub_1000090CC();
    unint64_t v68 = v86;
    unint64_t v67 = v87;
    *(double *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = Date.timeIntervalSince(_:)(v77);
    *(void *)(v0 + 24) = v68;
    *(void *)(v0 + 32) = v67;
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v53;
    *(void *)(v0 + 48) = &_swiftEmptySetSingleton;
    *(_BYTE *)(v0 + 56) = 1;
    id v69 = v53;
    swift_bridgeObjectRetain_n(v67, 2LL);
    id v70 = v69;
    sub_10015169C();
    sub_1000090CC();
    uint64_t v71 = (uint64_t *)*sub_10000D37C((void *)(v79 + 112), *(void *)(v79 + 136));
    id v72 = v70;
    sub_1000D6E10();
    sub_1000D6948((_OWORD *)(v0 + 16), v71);

    swift_bridgeObjectRelease_n(v67, 2LL);
    sub_1000102E0(v52, &qword_1001C8F20);
  }

  swift_bridgeObjectRelease();
  uint64_t v73 = *(void *)(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 448);
  swift_task_dealloc(*(void *)(v0 + 480));
  swift_task_dealloc(v73);
  sub_1000D6E24();
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D522C(double a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000DE00();
  __chkstk_darwin(v5);
  uint64_t v6 = *(void **)(v1 + 152);
  *(void *)uint64_t v37 = sub_1000D2FA8(v6);
  *(void *)&v37[8] = v7;
  swift_bridgeObjectRetain(v7);
  sub_1000D6D20();
  sub_1000090CC();
  __int128 v8 = *(_OWORD *)v37;
  *(double *)uint64_t v37 = a1;
  *(_OWORD *)&v37[8] = v8;
  uint64_t v38 = v6;
  uint64_t v39 = 0LL;
  char v40 = 2;
  uint64_t v9 = qword_1001C8048;
  id v10 = v6;
  swift_bridgeObjectRetain(*((void *)&v8 + 1));
  if (v9 != -1) {
    swift_once(&qword_1001C8048, sub_1000D4224);
  }
  uint64_t v11 = (void *)qword_1001CC5E8;
  uint64_t v12 = (void *)sub_10000D33C(&qword_1001C9C70);
  type metadata accessor for LogMessage(0LL);
  sub_10009DF78();
  uint64_t v15 = swift_allocObject(v12, (v14 & ~v13) + 2 * v2, v13 | 7);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateCoordinator();
  v35[0] = v3;
  uint64_t v16 = swift_retain(v3);
  id v17 = (id)AMSLogKey(v16);
  if (v17)
  {
    id v33 = v10;
    uint64_t v18 = v11;
    uint64_t v19 = sub_1000105E8((uint64_t)v17);
    uint64_t v21 = v20;

    swift_bridgeObjectRetain(v21);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DEBC();
    uint64_t v22 = updated;
    uint64_t v23 = sub_10000D37C(v35, updated);
    uint64_t v24 = sub_10000DC54((uint64_t)v23, v22);
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v24);
    sub_1000D6D54(MetatypeMetadata);
    sub_1000D6E04();
    sub_10000DC14();
    void v34[3] = &type metadata for String;
    v34[0] = v19;
    v34[1] = v21;
    uint64_t v11 = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v34);
    sub_1000D6E04();
    sub_10000DC4C(93LL);
    sub_10008BDA0();
    id v10 = v33;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DEBC();
    uint64_t v26 = updated;
    uint64_t v27 = sub_10000D37C(v35, updated);
    sub_10000DC54((uint64_t)v27, v26);
    uint64_t v28 = ((uint64_t (*)(void))swift_getMetatypeMetadata)();
    sub_1000D6D54(v28);
    sub_1000102E0((uint64_t)v34, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10008BDA0();
  }

  sub_10000D3A0(v35);
  uint64_t v29 = LogMessage.init(stringLiteral:)(0xD00000000000001ELL);
  uint64_t v30 = static os_log_type_t.info.getter(v29);
  sub_1000BD1B0(v30, v15);
  sub_100020AB8();
  uint64_t v31 = (uint64_t *)*sub_10000D37C((void *)(v3 + 112), *(void *)(v3 + 136));
  id v32 = v10;
  sub_1000D6E10();
  sub_1000D6948(v37, v31);
  swift_bridgeObjectRelease_n(*((void *)&v8 + 1), 3LL);
}

uint64_t sub_1000D550C()
{
  *(void *)(v1 + 176) = v0;
  uint64_t v2 = sub_10000DE00();
  *(void *)(v1 + 184) = sub_1000D6CFC(*(void *)(v2 - 8));
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_1000D5548()
{
  if (qword_1001C8048 != -1) {
    swift_once(&qword_1001C8048, sub_1000D4224);
  }
  uint64_t v2 = v0[22];
  sub_10000D33C(&qword_1001C9C70);
  sub_10000DC98();
  sub_10009DF78();
  uint64_t v5 = sub_10000DCF0((v4 & ~v3) + 2 * v1, v3);
  *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateCoordinator();
  v0[5] = updated;
  v0[2] = v2;
  uint64_t v7 = sub_100048DB4();
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v13 = sub_10000D37C(v0 + 2, updated);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, updated);
    v0[17] = swift_getMetatypeMetadata(v14);
    v0[14] = v14;
    sub_100096150();
    sub_1000102E0((uint64_t)(v0 + 14), &qword_1001CAAD0);
    sub_10000DC14();
    v0[21] = &type metadata for String;
    v0[18] = v10;
    v0[19] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 18);
    sub_1000102E0((uint64_t)(v0 + 18), &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v15 = sub_10000D37C(v0 + 2, updated);
    uint64_t v16 = sub_10000DC54((uint64_t)v15, updated);
    v0[9] = swift_getMetatypeMetadata(v16);
    v0[6] = v16;
    uint64_t v17 = sub_100096150();
    sub_1000D6DD4(v17, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v18 = v0[22];
  sub_10000D3A0(v0 + 2);
  _StringGuts.grow(_:)(35LL);
  swift_bridgeObjectRelease();
  unint64_t v34 = 0xD000000000000021LL;
  unint64_t v35 = 0x8000000100173FC0LL;
  id v19 = *(id *)(v18 + 152);
  uint64_t v20 = sub_1000105E8((uint64_t)[v19 description]);
  uint64_t v22 = v21;

  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);

  sub_100020AB8();
  unint64_t v24 = v34;
  unint64_t v25 = v35;
  v0[13] = &type metadata for String;
  v0[10] = v24;
  v0[11] = v25;
  sub_1000D6DF0();
  uint64_t v26 = sub_1000102E0((uint64_t)(v0 + 10), &qword_1001CAAD0);
  uint64_t v27 = static os_log_type_t.info.getter(v26);
  sub_1000BD1B0(v27, v5);
  sub_1000090CC();
  unint64_t v28 = sub_1000D2FA8(v19);
  sub_1000D6D80(v28, v29);
  sub_1000D6D3C();
  sub_100009020();
  sub_1000D6DF8();
  sub_100009070();
  unint64_t v30 = sub_1000D2FA8(v19);
  sub_1000D6D80(v30, v31);
  sub_1000D6D20();
  sub_100009020();
  sub_1000D6DF8();
  sub_100009070();
  id v32 = (void *)swift_task_alloc(dword_1001CC4FC);
  v0[24] = v32;
  *id v32 = v0;
  v32[1] = sub_1000D5878;
  return sub_1000D1EA4((uint64_t)v19);
}

uint64_t sub_1000D5878()
{
  return sub_10000DD48();
}

uint64_t sub_1000D58B0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D5914()
{
  swift_unknownObjectRelease(*(void *)(v0 + 160));
  sub_10000D3A0((void *)(v0 + 168));
  swift_unknownObjectRelease(*(void *)(v0 + 208));
  sub_10000D3A0((void *)(v0 + 256));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1000D5960()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MercuryCacheUpdateCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd29MercuryCacheUpdateCoordinator);
}

void sub_1000D5998(void *a1)
{
  uint64_t v2 = *(void *)(sub_10000D33C(&qword_1001C8F20) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_10006560C();
    uint64_t v3 = v4;
  }

  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1000D5A1C(v6);
  *a1 = v3;
}

void sub_1000D5A1C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v139 = sub_10000D33C(&qword_1001C8F20);
  uint64_t v4 = *(void *)(v139 - 8);
  uint64_t v5 = __chkstk_darwin(v139);
  uint64_t v130 = (uint64_t)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v140 = (uint64_t)&v123 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v123 - v10;
  __chkstk_darwin(v9);
  uint64_t v135 = (uint64_t)&v123 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if ((v12 & 0x8000000000000000LL) == 0)
    {
      if (v12) {
        sub_1000D6340(0LL, v12, 1LL, a1);
      }
      return;
    }

    goto LABEL_142;
  }

  Swift::Int v14 = v13;
  uint64_t v138 = a1;
  uint64_t v126 = sub_100063D3C(v12 / 2);
  uint64_t v127 = v12;
  unint64_t v132 = v15;
  uint64_t v133 = v4;
  if (v12 <= 0)
  {
LABEL_106:
    uint64_t v17 = (char *)_swiftEmptyArrayStorage;
    unint64_t v51 = _swiftEmptyArrayStorage[2];
LABEL_107:
    uint64_t v115 = (uint64_t)v17;
    if (v51 < 2)
    {
LABEL_118:
      swift_bridgeObjectRelease();
      if (v127 >= -1) {
        goto LABEL_119;
      }
      goto LABEL_146;
    }

    uint64_t v116 = *v138;
    while (1)
    {
      unint64_t v117 = v51 - 2;
      if (v51 < 2) {
        break;
      }
      if (!v116) {
        goto LABEL_150;
      }
      uint64_t v118 = *(void *)(v115 + 32 + 16 * v117);
      uint64_t v119 = *(void *)(v115 + 32 + 16 * (v51 - 1) + 8);
      sub_1000D6558( v116 + *(void *)(v133 + 72) * v118,  v116 + *(void *)(v133 + 72) * *(void *)(v115 + 32 + 16 * (v51 - 1)),  v116 + *(void *)(v133 + 72) * v119,  v132);
      if (v2) {
        goto LABEL_104;
      }
      if (v119 < v118) {
        goto LABEL_137;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
      {
        sub_1000655F8(v115);
        uint64_t v115 = v122;
      }

      if (v117 >= *(void *)(v115 + 16)) {
        goto LABEL_138;
      }
      uint64_t v120 = (void *)(v115 + 32 + 16 * v117);
      void *v120 = v118;
      v120[1] = v119;
      unint64_t v121 = *(void *)(v115 + 16);
      if (v51 > v121) {
        goto LABEL_139;
      }
      memmove((void *)(v115 + 32 + 16 * (v51 - 1)), (const void *)(v115 + 32 + 16 * v51), 16 * (v121 - v51));
      *(void *)(v115 + swift_unknownObjectWeakDestroy(v0 + 16) = v121 - 1;
      unint64_t v51 = v121 - 1;
      if (v121 <= 2) {
        goto LABEL_118;
      }
    }

LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    return;
  }

  Swift::Int v125 = v14;
  uint64_t v16 = 0LL;
  uint64_t v17 = (char *)_swiftEmptyArrayStorage;
  uint64_t v18 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    uint64_t v20 = v16 + 1;
    uint64_t v131 = v16;
    if (v16 + 1 >= v18)
    {
      uint64_t v27 = v16 + 1;
    }

    else
    {
      uint64_t v21 = *v138;
      uint64_t v22 = *(void *)(v4 + 72);
      uint64_t v23 = v135;
      sub_1000D6C30(*v138 + v22 * v20, v135);
      uint64_t v134 = v18;
      uint64_t v24 = v136;
      sub_1000D6C30(v21 + v22 * v19, v136);
      int v25 = static Date.< infix(_:_:)(v23 + *(int *)(v139 + 48), v24 + *(int *)(v139 + 48));
      sub_1000102E0(v24, &qword_1001C8F20);
      uint64_t v18 = v134;
      sub_1000102E0(v23, &qword_1001C8F20);
      uint64_t v26 = v22;
      uint64_t v27 = v19 + 2;
      uint64_t v129 = v21;
      uint64_t v141 = v26;
      if (v19 + 2 >= v18)
      {
        uint64_t v4 = v133;
        if ((v25 & 1) == 0) {
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v128 = v2;
        uint64_t v28 = v26 * v20;
        uint64_t v29 = v19 + 2;
        uint64_t v30 = v26 * v27;
        while (1)
        {
          uint64_t v31 = v135;
          sub_1000D6C30(v21 + v30, v135);
          uint64_t v32 = v136;
          sub_1000D6C30(v21 + v28, v136);
          int v33 = static Date.< infix(_:_:)(v31 + *(int *)(v139 + 48), v32 + *(int *)(v139 + 48));
          sub_1000102E0(v32, &qword_1001C8F20);
          sub_1000102E0(v31, &qword_1001C8F20);
          if (((v25 ^ v33) & 1) != 0) {
            break;
          }
          v21 += v141;
          ++v29;
          uint64_t v18 = v134;
          if (v29 >= v134)
          {
            uint64_t v27 = v134;
            uint64_t v4 = v133;
            goto LABEL_83;
          }
        }

        uint64_t v4 = v133;
        uint64_t v18 = v134;
        uint64_t v27 = v29;
LABEL_83:
        uint64_t v2 = v128;
        uint64_t v19 = v131;
        if ((v25 & 1) == 0) {
          goto LABEL_11;
        }
      }

      uint64_t v101 = v141;
      if (v27 < v19) {
        goto LABEL_145;
      }
      if (v19 < v27)
      {
        uint64_t v128 = v2;
        uint64_t v102 = 0LL;
        uint64_t v103 = v27;
        uint64_t v104 = v141 * (v27 - 1);
        uint64_t v105 = v19;
        uint64_t v106 = v103 * v141;
        uint64_t v107 = v105;
        uint64_t v108 = v105 * v141;
        unint64_t v34 = v138;
        do
        {
          uint64_t v109 = v103;
          if (v107 != v103 + v102 - 1)
          {
            uint64_t v110 = v129;
            if (!v129) {
              goto LABEL_149;
            }
            unint64_t v111 = v129 + v108;
            uint64_t v137 = v129 + v104;
            sub_1000D6C78(v129 + v108, v130);
            if (v108 < v104 || v111 >= v110 + v106)
            {
              swift_arrayInitWithTakeFrontToBack(v110 + v108, v137, 1LL, v139);
              uint64_t v101 = v141;
            }

            else
            {
              uint64_t v101 = v141;
              if (v108 != v104) {
                swift_arrayInitWithTakeBackToFront(v111, v137, 1LL, v139);
              }
            }

            sub_1000D6C78(v130, v137);
            unint64_t v34 = v138;
          }

          ++v107;
          --v102;
          uint64_t v103 = v109;
          v104 -= v101;
          v106 -= v101;
          v108 += v101;
        }

        while (v107 < v109 + v102);
        uint64_t v2 = v128;
        uint64_t v4 = v133;
        uint64_t v18 = v134;
        uint64_t v27 = v103;
        uint64_t v19 = v131;
        goto LABEL_12;
      }
    }

LABEL_61:
    if ((v78 & 1) != 0) {
      goto LABEL_131;
    }
    unint64_t v86 = &v53[2 * v55];
    uint64_t v88 = *v86;
    uint64_t v87 = v86[1];
    BOOL v66 = __OFSUB__(v87, v88);
    uint64_t v89 = v87 - v88;
    if (v66) {
      goto LABEL_133;
    }
    if (v89 < v77) {
      goto LABEL_78;
    }
LABEL_69:
    uint64_t v94 = v17;
    unint64_t v95 = v55 - 1;
    if (v55 - 1 >= v51)
    {
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
      goto LABEL_136;
    }

    if (!*v138) {
      goto LABEL_148;
    }
    uint64_t v96 = &v53[2 * v95];
    uint64_t v97 = *v96;
    uint64_t v98 = &v53[2 * v55];
    uint64_t v99 = v98[1];
    sub_1000D6558( *v138 + *(void *)(v133 + 72) * *v96,  *v138 + *(void *)(v133 + 72) * *v98,  *v138 + *(void *)(v133 + 72) * v99,  v132);
    if (v52) {
      break;
    }
    if (v99 < v97) {
      goto LABEL_122;
    }
    if (v55 > *((void *)v94 + 2)) {
      goto LABEL_123;
    }
    uint64_t *v96 = v97;
    v53[2 * v95 + 1] = v99;
    unint64_t v100 = *((void *)v94 + 2);
    if (v55 >= v100) {
      goto LABEL_124;
    }
    uint64_t v17 = v94;
    unint64_t v51 = v100 - 1;
    memmove(&v53[2 * v55], v98 + 2, 16 * (v100 - 1 - v55));
    *((void *)v94 + 2) = v100 - 1;
    if (v100 <= 2) {
      goto LABEL_78;
    }
  }

  uint64_t v2 = v52;
LABEL_104:
  swift_bridgeObjectRelease();
  if (v127 < -1)
  {
    __break(1u);
    goto LABEL_106;
  }

          uint64_t v41 = (v46 - 1) & v46;
          uint64_t v44 = __clz(__rbit64(v46)) + (v38 << 6);
        }

        uint64_t v48 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
        unint64_t v50 = *v48;
        unint64_t v49 = v48[1];
        Hasher.init(_seed:)(v71, *(void *)(v4 + 40));
        swift_bridgeObjectRetain(v49);
        String.hash(into:)(v71, v50, v49);
        unint64_t v51 = Hasher._finalize()();
        uint64_t v52 = -1LL << *(_BYTE *)(v4 + 32);
        id v53 = v51 & ~v52;
        if (((*(void *)(v42 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) != 0) {
          break;
        }
LABEL_78:
        double result = swift_bridgeObjectRelease();
        uint64_t v5 = a3;
        uint64_t v4 = v72;
      }

      uint64_t v54 = *(void *)(v72 + 48);
      unint64_t v55 = (void *)(v54 + 16 * v53);
      uint64_t v56 = v55[1];
      uint64_t v57 = *v55 == v50 && v56 == v49;
      if (!v57 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v55, v56, v50, v49, 0LL) & 1) == 0)
      {
        uint64_t v58 = ~v52;
        do
        {
          id v53 = (v53 + 1) & v58;
          if (((*(void *)(v42 + ((v53 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v53) & 1) == 0) {
            goto LABEL_78;
          }
          char v59 = (void *)(v54 + 16 * v53);
          Swift::String v60 = v59[1];
          uint64_t v61 = *v59 == v50 && v60 == v49;
        }

        while (!v61 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v59, v60, v50, v49, 0LL) & 1) == 0);
      }

      double result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v63 + ((v44 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v44;
      uint64_t v37 = __OFADD__(v67++, 1LL);
      uint64_t v5 = a3;
      uint64_t v4 = v72;
      if (v37) {
        goto LABEL_83;
      }
    }
  }

  uint64_t v8 = 0LL;
  uint64_t v64 = a4 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  uint64_t v11 = v10 & *(void *)(a4 + 56);
  uint64_t v65 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v67 = 0LL;
  Swift::Int v12 = a3 + 56;
  while (1)
  {
    if (v11)
    {
      Swift::Int v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v68 = v8;
      Swift::Int v14 = v13 | (v8 << 6);
      goto LABEL_22;
    }

    unint64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_81;
    }

    if (v15 >= v65) {
      goto LABEL_79;
    }
    uint64_t v16 = *(void *)(v64 + 8 * v15);
    uint64_t v17 = v8 + 1;
    if (!v16)
    {
      uint64_t v17 = v8 + 2;
      if (v8 + 2 >= v65) {
        goto LABEL_79;
      }
      uint64_t v16 = *(void *)(v64 + 8 * v17);
      if (!v16)
      {
        uint64_t v17 = v8 + 3;
        if (v8 + 3 >= v65) {
          goto LABEL_79;
        }
        uint64_t v16 = *(void *)(v64 + 8 * v17);
        if (!v16) {
          break;
        }
      }
    }

LABEL_119:
  *(void *)(v126 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  swift_bridgeObjectRelease();
}

uint64_t sub_1000D6340(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = sub_10000D33C(&qword_1001C8F20);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
    while (2)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = v26;
      do
      {
        uint64_t v19 = *a4;
        sub_1000D6C30(v31 + v17 + *a4, (uint64_t)v15);
        sub_1000D6C30(v32 + v17 + v19, (uint64_t)v11);
        LOBYTE(v19) = static Date.< infix(_:_:)(&v15[*(int *)(v29 + 48)], &v11[*(int *)(v29 + 48)]);
        sub_1000102E0((uint64_t)v11, &qword_1001C8F20);
        uint64_t result = sub_1000102E0((uint64_t)v15, &qword_1001C8F20);
        if ((v19 & 1) == 0) {
          break;
        }
        uint64_t v20 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }

        uint64_t v21 = a4;
        uint64_t v22 = v20 + v31 + v17;
        uint64_t v23 = v20 + v32 + v17;
        sub_1000D6C78(v22, v30);
        swift_arrayInitWithTakeFrontToBack(v22, v23, 1LL, v29);
        uint64_t result = sub_1000D6C78(v30, v23);
        v17 -= v27;
        ++v18;
        a4 = v21;
      }

      while (v28 != v18);
      v32 += v27;
      v31 += v27;
      if (++v28 != v25) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_1000D6558(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v51 = sub_10000D33C(&qword_1001C8F20);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v49 = (uint64_t)&v44 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }

  int64_t v13 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_76;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_77;
  }
  uint64_t v17 = v13 / v12;
  uint64_t v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    sub_100015D5C(a2, v15 / v12);
    unint64_t v19 = a4 + v18 * v12;
    if (v18 * v12 < 1 || a1 >= a2) {
      goto LABEL_70;
    }
    unint64_t v47 = a4;
    uint64_t v48 = -v12;
    unint64_t v45 = a1;
    uint64_t v46 = v12;
    while (1)
    {
      uint64_t v30 = v48;
      uint64_t v31 = v49;
      unint64_t v32 = a3 + v48;
      unint64_t v33 = v19 + v48;
      unint64_t v34 = v19;
      sub_1000D6C30(v19 + v48, v49);
      unint64_t v35 = a2 + v30;
      uint64_t v36 = a2 + v30;
      uint64_t v37 = v50;
      sub_1000D6C30(v36, v50);
      char v38 = static Date.< infix(_:_:)(v31 + *(int *)(v51 + 48), v37 + *(int *)(v51 + 48));
      sub_1000102E0(v37, &qword_1001C8F20);
      sub_1000102E0(v31, &qword_1001C8F20);
      if ((v38 & 1) != 0) {
        break;
      }
      if (a3 < v34 || v32 >= v34)
      {
        swift_arrayInitWithTakeFrontToBack(v32, v33, 1LL, v51);
        unint64_t v19 = v33;
        a4 = v47;
LABEL_65:
        uint64_t v12 = v46;
        a3 = v32;
        goto LABEL_66;
      }

      a4 = v47;
      if (a3 == v34)
      {
        unint64_t v19 = v33;
        goto LABEL_65;
      }

      a3 = v32;
      swift_arrayInitWithTakeBackToFront(v32, v33, 1LL, v51);
      unint64_t v19 = v33;
      uint64_t v12 = v46;
LABEL_66:
      if (v19 <= a4 || a2 <= v45) {
        goto LABEL_70;
      }
    }

    if (a3 < a2 || v32 >= a2)
    {
      swift_arrayInitWithTakeFrontToBack(v32, v35, 1LL, v51);
      a2 = v35;
      a4 = v47;
    }

    else
    {
      a4 = v47;
      if (a3 != a2)
      {
        a3 = v32;
        swift_arrayInitWithTakeBackToFront(v32, v35, 1LL, v51);
        a2 = v35;
        uint64_t v12 = v46;
LABEL_63:
        unint64_t v19 = v34;
        goto LABEL_66;
      }

      a2 = v35;
    }

    uint64_t v12 = v46;
    a3 = v32;
    goto LABEL_63;
  }

  sub_100015D5C(a1, v13 / v12);
  unint64_t v19 = a4 + v17 * v12;
  if (v17 * v12 >= 1 && a2 < a3)
  {
    do
    {
      unint64_t v21 = v19;
      uint64_t v22 = v49;
      sub_1000D6C30(a2, v49);
      uint64_t v23 = v50;
      sub_1000D6C30(a4, v50);
      char v24 = static Date.< infix(_:_:)(v22 + *(int *)(v51 + 48), v23 + *(int *)(v51 + 48));
      sub_1000102E0(v23, &qword_1001C8F20);
      sub_1000102E0(v22, &qword_1001C8F20);
      if ((v24 & 1) != 0)
      {
        unint64_t v25 = a2 + v12;
        if (a1 < a2 || a1 >= v25)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a2, 1LL, v51);
        }

        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1LL, v51);
        }
      }

      else
      {
        if (a1 < a4 || a1 >= a4 + v12)
        {
          swift_arrayInitWithTakeFrontToBack(a1, a4, 1LL, v51);
        }

        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront(a1, a4, 1LL, v51);
        }

        unint64_t v25 = a2;
        a4 += v12;
      }

      unint64_t v19 = v21;
      a1 += v12;
      BOOL v28 = a4 >= v21 || v25 >= a3;
      a2 = v25;
    }

    while (!v28);
  }

LABEL_70:
  int64_t v42 = v19 - a4;
  if (v12 != -1 || v42 != 0x8000000000000000LL)
  {
    sub_100015D5C(a4, v42 / v12);
    return;
  }

        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }

    else
    {
      uint64_t v50 = v87;
      uint64_t v51 = *(void *)((v87 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v51) {
        goto LABEL_35;
      }
    }

uint64_t sub_1000D6948(_OWORD *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v22 = &unk_1001AF5D0;
  uint64_t v23 = &off_1001AF5E8;
  uint64_t v5 = (_OWORD *)swift_allocObject(&unk_1001AF628, 57LL, 7LL);
  v21[0] = v5;
  __int128 v6 = a1[1];
  *(_OWORD *)char v24 = *a1;
  *(_OWORD *)&v24[16] = v6;
  *(_OWORD *)&v24[25] = *(_OWORD *)((char *)a1 + 25);
  __int128 v26 = *(_OWORD *)&v24[8];
  uint64_t v7 = *(void **)&v24[24];
  sub_1000D6B7C((uint64_t *)&v24[32], (uint64_t)v25);
  __int128 v8 = a1[1];
  v5[1] = *a1;
  v5[2] = v8;
  *(_OWORD *)((char *)v5 + 4Hasher._combine(_:)(v1 & 1) = *(_OWORD *)((char *)a1 + 25);
  unint64_t v27 = 0LL;
  unint64_t v28 = 0xE000000000000000LL;
  sub_1000288A4((uint64_t)&v26);
  id v9 = v7;
  sub_10002887C(v25);
  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0xD000000000000010LL;
  unint64_t v28 = 0x8000000100174010LL;
  uint64_t v10 = sub_10000D37C(v21, (uint64_t)&unk_1001AF5D0);
  uint64_t v11 = v10[1];
  uint64_t v12 = (void *)v10[2];
  swift_bridgeObjectRetain(v12);
  v13._uint64_t countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  unint64_t v14 = v27;
  unint64_t v15 = v28;
  uint64_t v16 = sub_10000D37C(v21, (uint64_t)v22)[2];
  unint64_t v17 = *sub_10000D37C(v21, (uint64_t)v22);
  LOWORD(v27) = 1;
  unint64_t v28 = v17;
  char v29 = 0;
  uint64_t v30 = 0x404E000000000000LL;
  uint64_t v31 = 0x4072C00000000000LL;
  char v32 = 0;
  uint64_t v33 = 0LL;
  char v34 = 1;
  __int16 v35 = 257;
  char v36 = 0;
  sub_10004C420((uint64_t)v21, (uint64_t)v20);
  uint64_t v18 = (void *)swift_allocObject(&unk_1001AF650, 88LL, 7LL);
  v18[2] = v14;
  void v18[3] = v15;
  sub_100019F60(v20, (uint64_t)(v18 + 4));
  v18[9] = a2;
  v18[10] = v4;
  swift_bridgeObjectRetain(v16);
  swift_retain(a2);
  sub_100151D58();
  swift_release(v18);
  swift_bridgeObjectRelease();
  return sub_10000D3A0(v21);
}

uint64_t sub_1000D6B48()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_1000D6B7C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D6BB8()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1000D6BEC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_10004C724(a1, a2, a3, a4, v4[2], v4[3], v4 + 4, v4[9]);
}

uint64_t sub_1000D6C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CFC2C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1000D6C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C8F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C8F20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6CC0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000D6CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000D6CFC@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000D6D0C(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000D6D20()
{
  v0._uint64_t countAndFlagsBits = 0x6C6F50676E6F6C5FLL;
  v0._object = (void *)0xE90000000000006CLL;
  String.append(_:)(v0);
}

void sub_1000D6D3C()
{
  v0._uint64_t countAndFlagsBits = 0x6574616470755FLL;
  v0._object = (void *)0xE700000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_1000D6D54(uint64_t a1)
{
  *(void *)(v2 - 184) = a1;
  *(void *)(v2 - 208) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 208);
}

uint64_t sub_1000D6D68(uint64_t a1)
{
  return sub_1000102E0(a1, v1);
}

  ;
}

uint64_t sub_1000D6D80(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

void sub_1000D6D90()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000D6DA0(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

  ;
}

uint64_t sub_1000D6DBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return *(void *)(v2 + 432);
}

uint64_t sub_1000D6DD4(uint64_t a1, uint64_t *a2)
{
  return sub_1000102E0(v2, a2);
}

uint64_t sub_1000D6DDC()
{
  return 0x203A68746977LL;
}

uint64_t sub_1000D6DF0()
{
  return static LogMessage.sensitive(_:)(v0);
}

void sub_1000D6DF8()
{
}

uint64_t sub_1000D6E04()
{
  return sub_1000102E0(v1 - 208, v0);
}

uint64_t sub_1000D6E10()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000D6E1C()
{
  return swift_task_alloc(v0);
}

uint64_t sub_1000D6E24()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000D6E2C()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CC710 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000D6E74()
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateCoordinatorProvider();
  uint64_t v1 = swift_allocObject(updated, 120LL, 15LL);
  swift_defaultActor_initialize(v1);
  unint64_t v2 = sub_100038764();
  uint64_t v3 = type metadata accessor for MercuryCacheUpdateCoordinator();
  unint64_t v4 = sub_100036F44();
  uint64_t result = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v3, v4);
  *(void *)(v1 + 112) = result;
  qword_1001DBB90 = v1;
  return result;
}

uint64_t sub_1000D6EEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 272) = v13;
  *(void *)(v9 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v8;
  *(_OWORD *)(v9 + 256) = v12;
  *(void *)(v9 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a7;
  *(void *)(v9 + 248) = a8;
  *(void *)(v9 + 224) = a5;
  *(void *)(v9 + 232) = a6;
  *(void *)(v9 + 208) = a2;
  *(void *)(v9 + 2swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  *(void *)(v9 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v9 + 288) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D6F60, v8, 0LL);
}

uint64_t sub_1000D6F60()
{
  uint64_t v41 = (void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 272);
  unint64_t v2 = *(unint64_t **)(v0 + 280);
  uint64_t v3 = *(void **)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v40 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void **)(v0 + 200);
  uint64_t v9 = sub_10000D37C(*(void **)(v0 + 216), *(void *)(*(void *)(v0 + 216) + 24LL));
  uint64_t v10 = sub_10000D37C(v3, v3[3]);
  uint64_t v11 = sub_10000D37C(v1, v1[3]);
  *(void *)(v0 + 296) = sub_100121B40((uint64_t)v8, v7, *v9, v5, v6, v4, v38, v40, *v10, *v11, v2);
  swift_beginAccess(v2 + 14, v0 + 176, 33LL, 0LL);
  id v12 = v8;
  sub_10003351C((uint64_t)v12);
  swift_endAccess(v0 + 176);

  swift_release();
  if (qword_1001C8050 != -1) {
    swift_once(&qword_1001C8050, sub_1000D6E2C);
  }
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v14 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v15 = type metadata accessor for LogMessage(0LL);
  uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
        + 3LL * *(void *)(*(void *)(v15 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = type metadata accessor for MercuryCacheUpdateCoordinatorProvider();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  uint64_t v17 = swift_retain(v13);
  id v18 = (id)AMSLogKey(v17);
  if (v18)
  {
    unint64_t v19 = v18;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v21 = v20;

    swift_bridgeObjectRetain(v21);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v23 = sub_10000D37C(v41, v22);
    uint64_t DynamicType = swift_getDynamicType(v23, v22, 1LL);
    *(void *)(v0 + 136) = swift_getMetatypeMetadata(DynamicType);
    *(void *)(v0 + 112) = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 112);
    sub_10000E888(v0 + 112);
    v25._uint64_t countAndFlagsBits = 5972026LL;
    v25._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    *(void *)(v0 + 168) = &type metadata for String;
    *(void *)(v0 + 144) = v39;
    *(void *)(v0 + 152) = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 144);
    sub_10000E888(v0 + 144);
    v26._uint64_t countAndFlagsBits = 93LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    sub_1000522A8();
    unint64_t v27 = (void *)(v0 + 16);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v28 = *(void *)(v0 + 40);
    unint64_t v27 = (void *)(v0 + 16);
    char v29 = sub_10000D37C(v41, v28);
    uint64_t v30 = swift_getDynamicType(v29, v28, 1LL);
    *(void *)(v0 + 72) = swift_getMetatypeMetadata(v30);
    *(void *)(v0 + 48) = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 48);
    sub_10000E888(v0 + 48);
    v31._uint64_t countAndFlagsBits = 58LL;
    v31._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    sub_1000522A8();
  }

  char v32 = *(void **)(v0 + 200);
  sub_10000D3A0(v27);
  LogMessage.init(stringLiteral:)(0xD000000000000025LL);
  *(void *)(v0 + 104) = sub_100038764();
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v32;
  id v33 = v32;
  static LogMessage.sensitive(_:)(v0 + 80);
  uint64_t v34 = sub_10000E888(v0 + 80);
  uint64_t v35 = static os_log_type_t.info.getter(v34);
  sub_1000BD1B0(v35, v16);
  swift_bridgeObjectRelease();
  char v36 = (void *)swift_task_alloc(dword_1001CC62C);
  *(void *)(v0 + 304) = v36;
  void *v36 = v0;
  v36[1] = sub_1000D72F8;
  return sub_1000D550C();
}

uint64_t sub_1000D72F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 304);
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000D7390;
  }
  else {
    uint64_t v4 = sub_1000D735C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 280), 0LL);
}

uint64_t sub_1000D735C()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_release();
  swift_task_dealloc(v1);
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D7390()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_release();
  swift_task_dealloc(v1);
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D73C4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MercuryCacheUpdateCoordinatorProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd37MercuryCacheUpdateCoordinatorProvider);
}

uint64_t sub_1000D7408()
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData(0LL);
  __chkstk_darwin(updated);
  sub_100029170();
  uint64_t v4 = v0 + *(int *)(v3 + 32);
  if ((*(_BYTE *)(v4 + 49) & 1) != 0)
  {
    int v5 = 1;
    double v6 = 0.0;
  }

  else
  {
    double v6 = *(double *)v4;
    int v5 = *(_BYTE *)(v4 + 8) & 1;
  }

  sub_1000D76F8(v0, (uint64_t)v1);
  if (v5) {
    double v6 = *v1;
  }
  sub_10002F870((uint64_t)v1, type metadata accessor for MercuryCacheUpdateData);
  return Date.addingTimeInterval(_:)(v6);
}

uint64_t sub_1000D74C8@<X0>(void *a1@<X8>)
{
  uint64_t v4 = sub_1000378A0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100029170();
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData(0LL);
  uint64_t v7 = updated;
  uint64_t v8 = *(void *)(v1 + *(int *)(updated + 28));
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v1 + *(int *)(updated + 24));
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v12 = type metadata accessor for MercuryCacheUpdateData.Success(0LL);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    sub_1000D7408();
    sub_1000D12F0( (uint64_t)a1 + *(int *)(v12 + 28),  v1 + *(int *)(v7 + 20),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    *a1 = v11;
    a1[1] = v10;
    *(void *)((char *)a1 + *(int *)(v12 + sub_1000C48CC(*(void *)(v0 + 16), *(void *)(v0 + 24)) = v8;
    uint64_t v13 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
    return swift_storeEnumTagMultiPayload(a1, v13, 0LL);
  }

  else
  {
    uint64_t v15 = (uint64_t *)(v1 + *(int *)(updated + 24));
    uint64_t v27 = v15[1];
    uint64_t v28 = *v15;
    swift_bridgeObjectRetain(v27);
    sub_1000D7408();
    uint64_t v16 = v1 + *(int *)(v7 + 32);
    if ((*(_BYTE *)(v16 + 49) & 1) != 0)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      char v21 = 1;
    }

    else
    {
      uint64_t v19 = *(void *)(v16 + 32);
      uint64_t v20 = *(void *)(v16 + 40);
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v18 = *(void *)(v16 + 24);
      char v21 = *(_BYTE *)(v16 + 48) & 1;
    }

    char v26 = v21;
    uint64_t v22 = v1 + *(int *)(v7 + 20);
    uint64_t v23 = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
    sub_1000D12F0((uint64_t)a1 + v23[7], v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    *a1 = v28;
    a1[1] = v27;
    sub_1000D12F0((uint64_t)a1 + v23[5], v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    char v24 = (char *)a1 + v23[6];
    *(void *)char v24 = v17;
    *((void *)v24 + Hasher._combine(_:)(v1 & 1) = v18;
    *((void *)v24 + 2) = v19;
    *((void *)v24 + 3) = v20;
    v24[32] = v26;
    uint64_t v25 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
    return swift_storeEnumTagMultiPayload(a1, v25, 1LL);
  }

uint64_t type metadata accessor for MercuryCacheUpdateData(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CC8E0, (uint64_t)&nominal type descriptor for MercuryCacheUpdateData);
}

uint64_t type metadata accessor for MercuryCacheUpdateData.Failure(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CC848, (uint64_t)&nominal type descriptor for MercuryCacheUpdateData.Failure);
}

uint64_t type metadata accessor for MercuryCacheUpdateData.DataKind(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CC998, (uint64_t)&nominal type descriptor for MercuryCacheUpdateData.DataKind);
}

uint64_t type metadata accessor for MercuryCacheUpdateData.Success(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CCA28, (uint64_t)&nominal type descriptor for MercuryCacheUpdateData.Success);
}

uint64_t sub_1000D76F8(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16LL))(a2, a1, updated);
  return a2;
}

void sub_1000D773C( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData(0LL);
  uint64_t v15 = (void *)((char *)a5 + updated[6]);
  *uint64_t v15 = a1;
  v15[1] = a2;
  *((void *)&v73 + Hasher._combine(_:)(v1 & 1) = 0xE700000000000000LL;
  uint64_t v23 = sub_1000D9378((uint64_t)updated, v16, v17, v18, v19, v20, v21, v22, 0x64616F6C796170LL);
  sub_1000D93B0(v23, v24, v25, v26, v27, v28, v29, v30, v73, v79, v83, v87, v92);
  sub_10000E854((uint64_t)&v92);
  sub_10000D33C(&qword_1001CAAD0);
  uint64_t v31 = sub_10000D33C(&qword_1001C8E58);
  uint64_t v39 = sub_1000D9360(v31, v32, v33, v34, v35, v36, v37, v38, v74, v77, v80, v84, v88);
  uint64_t v47 = v89;
  if (!(_DWORD)v39) {
    uint64_t v47 = 0LL;
  }
  *(void *)((char *)a5 + updated[7]) = v47;
  *a5 = a6;
  *((void *)&v75 + Hasher._combine(_:)(v1 & 1) = 0xE400000000000000LL;
  uint64_t v48 = sub_1000D9378(v39, v40, v41, v42, v43, v44, v45, v46, 1635018093LL);
  sub_1000D93B0(v48, v49, v50, v51, v52, v53, v54, v55, v75, v81, v85, v89, v92);
  uint64_t v56 = sub_10000E854((uint64_t)&v92);
  if ((sub_1000D9360(v56, v57, v58, v59, v60, v61, v62, v63, v76, v78, v82, v86, v90) & 1) != 0) {
    uint64_t v64 = v91;
  }
  else {
    uint64_t v64 = 0LL;
  }
  swift_bridgeObjectRelease();
  if (v64)
  {
    sub_1000D78DC(a4, (uint64_t)&v92, a7);
    uint64_t v65 = v92;
    uint64_t v66 = v93;
    __int128 v67 = v94;
    __int128 v68 = v95;
    char v69 = v96;
  }

  else
  {
    uint64_t v65 = 0LL;
    uint64_t v66 = 0LL;
    char v69 = 0;
    __int128 v67 = 0uLL;
    __int128 v68 = 0uLL;
  }

  uint64_t v70 = (char *)a5 + updated[8];
  *(void *)uint64_t v70 = v65;
  *((void *)v70 + Hasher._combine(_:)(v1 & 1) = v66;
  *((_OWORD *)v70 + Hasher._combine(_:)(v1 & 1) = v67;
  *((_OWORD *)v70 + 2) = v68;
  v70[48] = v69;
  v70[49] = v64 == 0;
  uint64_t v71 = (char *)a5 + updated[5];
  uint64_t v72 = sub_1000378A0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v72 - 8) + 32LL))(v71, a3, v72);
  sub_1000D9330();
}

void sub_1000D78DC(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v63 = 0xD000000000000010LL;
  unint64_t v64 = 0x8000000100174100LL;
  uint64_t v6 = AnyHashable.init<A>(_:)(&v63);
  sub_1000D9350(v6, v7, v8);
  sub_1000D93C0(v9, v10, v11, v12, v13, v14, v15);
  sub_10000D33C(&qword_1001CAAD0);
  unint64_t v16 = sub_100038764();
  uint64_t v20 = sub_1000D931C(v16, v17, v18, v16, v19);
  if ((v20 & 1) != 0)
  {
    uint64_t v23 = v62;
    if (v62)
    {
      uint64_t v20 = (uint64_t)[v62 doubleValue];
      uint64_t v25 = v24;
      char v26 = 0;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  uint64_t v25 = 0LL;
  char v26 = 1;
LABEL_6:
  unint64_t v63 = 0x6C65446465786966LL;
  unint64_t v64 = 0xEA00000000007961LL;
  uint64_t v27 = sub_1000D938C(v20, v21, v22);
  sub_1000D9350(v27, v28, v29);
  uint64_t v37 = sub_1000D93C0(v30, v31, v32, v33, v34, v35, v36);
  uint64_t v41 = sub_1000D931C(v37, v38, v39, (uint64_t)&type metadata for Double, v40);
  int v44 = v41;
  if ((_DWORD)v41) {
    id v45 = v62;
  }
  else {
    id v45 = 0LL;
  }
  unint64_t v63 = 0x6179727465527369LL;
  unint64_t v64 = 0xEB00000000656C62LL;
  uint64_t v46 = sub_1000D938C(v41, v42, v43);
  sub_1000D9350(v46, v47, v48);
  uint64_t v56 = sub_1000D93C0(v49, v50, v51, v52, v53, v54, v55);
  else {
    BOOL v60 = 1;
  }
  swift_bridgeObjectRelease();

  if (v60)
  {
    id v45 = 0LL;
    uint64_t v61 = 0LL;
    a1 = 0LL;
    a3 = 0.0;
  }

  else
  {
    uint64_t v61 = v44 ^ 1u;
  }

  *(void *)a2 = v25;
  *(_BYTE *)(a2 + 8) = v26;
  *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v45;
  *(void *)(a2 + 24) = v61;
  *(void *)(a2 + 32) = a1;
  *(double *)(a2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a3;
  *(_BYTE *)(a2 + 48) = v60;
  sub_1000D9330();
}

char *sub_1000D7A98(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = &v4[v13];
    unint64_t v16 = &a2[v13];
    __int128 v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + Hasher._combine(_:)(v1 & 1) = v17;
    _BYTE v15[32] = v16[32];
    v12(&v4[v14], &a2[v14], v11);
  }

  return v4;
}

uint64_t sub_1000D7B70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 28), v5);
}

char *sub_1000D7BE8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  __int128 v16 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + Hasher._combine(_:)(v1 & 1) = v16;
  v14[32] = v15[32];
  v11(&a1[v13], &a2[v13], v10);
  return a1;
}

char *sub_1000D7C94(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  __int128 v16 = *(_OWORD *)v15;
  __int128 v17 = *((_OWORD *)v15 + 1);
  v14[32] = v15[32];
  *(_OWORD *)uint64_t v14 = v16;
  *((_OWORD *)v14 + Hasher._combine(_:)(v1 & 1) = v17;
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  return a1;
}

char *sub_1000D7D54(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  __int128 v15 = *((_OWORD *)v14 + 1);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((_OWORD *)v13 + Hasher._combine(_:)(v1 & 1) = v15;
  v13[32] = v14[32];
  v10(&a1[v12], &a2[v12], v9);
  return a1;
}

char *sub_1000D7DF8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  __int128 v15 = &a1[v13];
  __int128 v16 = &a2[v13];
  __int128 v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)__int128 v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + Hasher._combine(_:)(v1 & 1) = v17;
  _BYTE v15[32] = v16[32];
  v12(&a1[v14], &a2[v14], v11);
  return a1;
}

uint64_t sub_1000D7EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D7EB0);
}

uint64_t sub_1000D7EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D7EC0);
}

uint64_t sub_1000D7EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D91BC(a1, a2, a3, (uint64_t)&unk_100167910);
}

uint64_t *sub_1000D7ED0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = a3[6];
    uint64_t v12 = a3[7];
    uint64_t v13 = (uint64_t *)((char *)v4 + v11);
    uint64_t v14 = (uint64_t *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + v12) = v16;
    uint64_t v17 = a3[8];
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    *((_WORD *)v18 + 24) = *((_WORD *)v19 + 24);
    __int128 v20 = *((_OWORD *)v19 + 2);
    __int128 v21 = *(_OWORD *)v19;
    *((_OWORD *)v18 + Hasher._combine(_:)(v1 & 1) = *((_OWORD *)v19 + 1);
    *((_OWORD *)v18 + 2) = v20;
    *(_OWORD *)uint64_t v18 = v21;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
  }

  return v4;
}

uint64_t sub_1000D7FB4(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
}

void *sub_1000D8018(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)((char *)a1 + v10);
  uint64_t v13 = (void *)((char *)a2 + v10);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + v1Hasher._combine(_:)(v1 & 1) = v15;
  uint64_t v16 = a3[8];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *((_WORD *)v17 + 24) = *((_WORD *)v18 + 24);
  __int128 v19 = *((_OWORD *)v18 + 2);
  __int128 v20 = *(_OWORD *)v18;
  *((_OWORD *)v17 + Hasher._combine(_:)(v1 & 1) = *((_OWORD *)v18 + 1);
  *((_OWORD *)v17 + 2) = v19;
  *(_OWORD *)uint64_t v17 = v20;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

void *sub_1000D80D0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = *(void *)((char *)a1 + v15);
  uint64_t v17 = *(void *)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  uint64_t v18 = a3[8];
  __int128 v19 = (char *)a1 + v18;
  __int128 v20 = (char *)a2 + v18;
  __int128 v21 = *(_OWORD *)v20;
  __int128 v22 = *((_OWORD *)v20 + 1);
  __int128 v23 = *((_OWORD *)v20 + 2);
  *((_WORD *)v19 + 24) = *((_WORD *)v20 + 24);
  *((_OWORD *)v19 + Hasher._combine(_:)(v1 & 1) = v22;
  *((_OWORD *)v19 + 2) = v23;
  *(_OWORD *)__int128 v19 = v21;
  return a1;
}

void *sub_1000D81A8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  __int128 v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + Hasher._combine(_:)(v1 & 1) = v14;
  *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  *((_WORD *)v12 + 24) = *((_WORD *)v13 + 24);
  return a1;
}

void *sub_1000D824C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  uint64_t v15 = v11[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)((char *)a1 + v16);
  *(void *)((char *)a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(void *)((char *)a2 + v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a3[8];
  __int128 v19 = (char *)a1 + v18;
  __int128 v20 = (char *)a2 + v18;
  __int128 v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)__int128 v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + Hasher._combine(_:)(v1 & 1) = v21;
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_WORD *)v19 + 24) = *((_WORD *)v20 + 24);
  return a1;
}

uint64_t sub_1000D830C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D8318);
}

void sub_1000D8318(uint64_t a1, int a2, uint64_t a3)
{
  if (*(_DWORD *)(*(void *)(sub_1000378A0() - 8) + 84LL) == a2)
  {
    uint64_t v5 = sub_1000D93A0();
    sub_10008BE48(v5, v6, v7);
  }

  else
  {
    sub_10008BFC4(*(void *)(a1 + *(int *)(a3 + 24) + 8));
    sub_10000DFE8();
  }

uint64_t sub_1000D8370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D837C);
}

void sub_1000D837C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1000378A0();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    sub_10008BE54(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }

  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
    sub_10000DFE8();
  }

uint64_t sub_1000D83E4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1001678F8;
    void v4[3] = "\b";
    void v4[4] = &unk_100167960;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000D8478(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v23);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
      uint64_t v10 = updated[5];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
      __n128 v15 = swift_bridgeObjectRetain(v8);
      v14(v11, v12, v13, v15);
      uint64_t v16 = updated[6];
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      __int128 v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + Hasher._combine(_:)(v1 & 1) = v19;
      _BYTE v17[32] = v18[32];
      ((void (*)(char *, char *, uint64_t))v14)((char *)a1 + updated[7], (char *)a2 + updated[7], v13);
      __int128 v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 1LL;
    }

    else
    {
      uint64_t v24 = (int *)type metadata accessor for MercuryCacheUpdateData.Success(0LL);
      uint64_t v25 = v24[5];
      char v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for Date(0LL);
      uint64_t v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v28 - 8) + 16LL);
      __n128 v30 = swift_bridgeObjectRetain(v8);
      v29(v26, v27, v28, v30);
      uint64_t v31 = v24[6];
      uint64_t v32 = *(uint64_t *)((char *)a2 + v31);
      *(uint64_t *)((char *)a1 + v3Hasher._combine(_:)(v1 & 1) = v32;
      uint64_t v33 = v24[7];
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      __n128 v36 = swift_bridgeObjectRetain(v32);
      v29(v34, v35, v28, v36);
      __int128 v20 = a1;
      uint64_t v21 = a3;
      uint64_t v22 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }

  return a1;
}

uint64_t sub_1000D860C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t updated = type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
    uint64_t v5 = a1 + *(int *)(updated + 20);
    uint64_t v6 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
    v9(v5, v6);
  }

  else
  {
    uint64_t updated = type metadata accessor for MercuryCacheUpdateData.Success(0LL);
    uint64_t v7 = a1 + *(int *)(updated + 20);
    uint64_t v6 = type metadata accessor for Date(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
    v9(v7, v6);
    swift_bridgeObjectRelease();
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1 + *(int *)(updated + 28), v6);
}

void *sub_1000D86E8(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
    uint64_t v9 = updated[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    __n128 v14 = swift_bridgeObjectRetain(v7);
    v13(v10, v11, v12, v14);
    uint64_t v15 = updated[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    __int128 v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + Hasher._combine(_:)(v1 & 1) = v18;
    v16[32] = v17[32];
    ((void (*)(char *, char *, uint64_t))v13)((char *)a1 + updated[7], (char *)a2 + updated[7], v12);
    uint64_t v19 = 1LL;
  }

  else
  {
    __int128 v20 = (int *)type metadata accessor for MercuryCacheUpdateData.Success(0LL);
    uint64_t v21 = v20[5];
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for Date(0LL);
    uint64_t v25 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v24 - 8) + 16LL);
    __n128 v26 = swift_bridgeObjectRetain(v7);
    v25(v22, v23, v24, v26);
    uint64_t v27 = v20[6];
    uint64_t v28 = *(void *)((char *)a2 + v27);
    *(void *)((char *)a1 + v27) = v28;
    uint64_t v29 = v20[7];
    __n128 v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    __n128 v32 = swift_bridgeObjectRetain(v28);
    v25(v30, v31, v24, v32);
    uint64_t v19 = 0LL;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v19);
  return a1;
}

void *sub_1000D8848(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F870((uint64_t)a1, type metadata accessor for MercuryCacheUpdateData.DataKind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    uint64_t v7 = a2[1];
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
      uint64_t v9 = updated[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Date(0LL);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
      __n128 v14 = swift_bridgeObjectRetain(v7);
      v13(v10, v11, v12, v14);
      uint64_t v15 = updated[6];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      __int128 v18 = *(_OWORD *)v17;
      __int128 v19 = *((_OWORD *)v17 + 1);
      v16[32] = v17[32];
      *(_OWORD *)uint64_t v16 = v18;
      *((_OWORD *)v16 + Hasher._combine(_:)(v1 & 1) = v19;
      ((void (*)(char *, char *, uint64_t))v13)((char *)a1 + updated[7], (char *)a2 + updated[7], v12);
      uint64_t v20 = 1LL;
    }

    else
    {
      uint64_t v21 = (int *)type metadata accessor for MercuryCacheUpdateData.Success(0LL);
      uint64_t v22 = v21[5];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      uint64_t v25 = type metadata accessor for Date(0LL);
      __n128 v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v25 - 8) + 16LL);
      __n128 v27 = swift_bridgeObjectRetain(v7);
      v26(v23, v24, v25, v27);
      uint64_t v28 = v21[6];
      uint64_t v29 = *(void *)((char *)a2 + v28);
      *(void *)((char *)a1 + v28) = v29;
      uint64_t v30 = v21[7];
      uint64_t v31 = (char *)a1 + v30;
      __n128 v32 = (char *)a2 + v30;
      __n128 v33 = swift_bridgeObjectRetain(v29);
      v26(v31, v32, v25, v33);
      uint64_t v20 = 0LL;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v20);
  }

  return a1;
}

char *sub_1000D89C8(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
    uint64_t v8 = updated[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
    v12(v9, v10, v11);
    uint64_t v13 = updated[6];
    __n128 v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    __int128 v16 = *((_OWORD *)v15 + 1);
    *(_OWORD *)__n128 v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + Hasher._combine(_:)(v1 & 1) = v16;
    v14[32] = v15[32];
    v12(&a1[updated[7]], &a2[updated[7]], v11);
    uint64_t v17 = 1LL;
  }

  else
  {
    __int128 v18 = (int *)type metadata accessor for MercuryCacheUpdateData.Success(0LL);
    uint64_t v19 = v18[5];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL);
    v23(v20, v21, v22);
    *(void *)&a1[v18[6]] = *(void *)&a2[v18[6]];
    v23(&a1[v18[7]], &a2[v18[7]], v22);
    uint64_t v17 = 0LL;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v17);
  return a1;
}

char *sub_1000D8B04(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10002F870((uint64_t)a1, type metadata accessor for MercuryCacheUpdateData.DataKind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateData.Failure(0LL);
      uint64_t v8 = updated[5];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL);
      v12(v9, v10, v11);
      uint64_t v13 = updated[6];
      __n128 v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      __int128 v16 = *((_OWORD *)v15 + 1);
      *(_OWORD *)__n128 v14 = *(_OWORD *)v15;
      *((_OWORD *)v14 + Hasher._combine(_:)(v1 & 1) = v16;
      v14[32] = v15[32];
      v12(&a1[updated[7]], &a2[updated[7]], v11);
      uint64_t v17 = 1LL;
    }

    else
    {
      __int128 v18 = (int *)type metadata accessor for MercuryCacheUpdateData.Success(0LL);
      uint64_t v19 = v18[5];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for Date(0LL);
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL);
      v23(v20, v21, v22);
      *(void *)&a1[v18[6]] = *(void *)&a2[v18[6]];
      v23(&a1[v18[7]], &a2[v18[7]], v22);
      uint64_t v17 = 0LL;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v17);
  }

  return a1;
}

uint64_t sub_1000D8C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1000D8C74(uint64_t a1)
{
  uint64_t result = type metadata accessor for MercuryCacheUpdateData.Success(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for MercuryCacheUpdateData.Failure(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1000D8CF4(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v4 + v13) = v15;
    __int128 v16 = (char *)v4 + v14;
    uint64_t v17 = (char *)a2 + v14;
    swift_bridgeObjectRetain(v15);
    v12(v16, v17, v11);
  }

  return v4;
}

uint64_t sub_1000D8DC8(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6]));
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[7], v5);
}

void *sub_1000D8E4C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)((char *)a2 + v12);
  *(void *)((char *)a1 + v12) = v14;
  uint64_t v15 = (char *)a1 + v13;
  __int128 v16 = (char *)a2 + v13;
  swift_bridgeObjectRetain(v14);
  v11(v15, v16, v10);
  return a1;
}

char *sub_1000D8EF4(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)&a2[v13];
  uint64_t v15 = *(void *)&a1[v13];
  *(void *)&a1[v13] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  return a1;
}

char *sub_1000D8FB4(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  v10(&a1[v11], &a2[v11], v9);
  return a1;
}

char *sub_1000D9048(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a1 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v1 & 1) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)&a1[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_bridgeObjectRelease(v14);
  v12(&a1[a3[7]], &a2[a3[7]], v11);
  return a1;
}

uint64_t sub_1000D90F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D90FC);
}

void sub_1000D9100(uint64_t a1, int a2)
{
  if (a2 == 0x7FFFFFFF)
  {
    sub_10008BFC4(*(void *)(a1 + 8));
    sub_10000DFE8();
  }

  else
  {
    sub_1000378A0();
    uint64_t v2 = sub_1000D93A0();
    sub_10008BE48(v2, v3, v4);
  }

uint64_t sub_1000D914C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D9158);
}

void sub_1000D915C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + 8) = (a2 - 1);
    sub_10000DFE8();
  }

  else
  {
    sub_1000378A0();
    uint64_t v4 = sub_1000D93A0();
    sub_10008BE54(v4, v5, a2, v6);
  }

uint64_t sub_1000D91AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D91BC(a1, a2, a3, (uint64_t)&value witness table for Builtin.BridgeObject + 64);
}

uint64_t sub_1000D91BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = &unk_1001678F8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v7 <= 0x3F)
  {
    uint64_t v9 = *(void *)(result - 8) + 64LL;
    uint64_t v10 = a4;
    uint64_t v11 = v9;
    swift_initStructMetadata(a1, 256LL, 4LL, &v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for MercuryCacheUpdateData.RetryMetadata(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MercuryCacheUpdateData.RetryMetadata(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheUpdateData.RetryMetadata()
{
  return &type metadata for MercuryCacheUpdateData.RetryMetadata;
}

__n128 initializeWithCopy for MercuryCacheUpdateData.Meta(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MercuryCacheUpdateData.Meta(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for MercuryCacheUpdateData.Meta(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheUpdateData.Meta()
{
  return &type metadata for MercuryCacheUpdateData.Meta;
}

uint64_t sub_1000D931C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5, a4, 6LL);
}

  ;
}

void sub_1000D9350(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  __int128 v4 = va_arg(va1, _OWORD);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_10003079C((uint64_t)va1, v3, (__int128 *)va);
}

uint64_t sub_1000D9360( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return swift_dynamicCast(&a13, &a9, v13, v14, 6LL);
}

uint64_t sub_1000D9378( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return AnyHashable.init<A>(_:)(&a9);
}

uint64_t sub_1000D938C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_1000D93A0()
{
  return v0 + *(int *)(v1 + 20);
}

void sub_1000D93B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1000D93C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  return sub_10000E854((uint64_t)va);
}

void sub_1000D93C8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
}

void sub_1000D93EC( uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t v6 = a4;
  __n128 v26 = a1;
  uint64_t v27 = a2;
  uint64_t v8 = a4(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10001A284();
  uint64_t v24 = v9;
  sub_10001A210();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v23 = *(void *)(a3 + 16);
  if (v23)
  {
    unint64_t v13 = 0LL;
    uint64_t v14 = _swiftEmptyArrayStorage;
    uint64_t v21 = v6;
    uint64_t v22 = a3;
    while (v13 < *(void *)(a3 + 16))
    {
      unint64_t v15 = (*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      uint64_t v16 = *(void *)(v25 + 72);
      sub_1000DA500(a3 + v15 + v16 * v13, (uint64_t)v12, v6);
      char v17 = v26(v12);
      if (v5)
      {
        sub_1000DAAAC();
        swift_release(v14);
        swift_bridgeObjectRelease();
        return;
      }

      if ((v17 & 1) != 0)
      {
        sub_100036FD0((uint64_t)v12, v24, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
          sub_1000DAAA0(0LL, v14[2] + 1LL);
        }
        uint64_t v14 = v28;
        unint64_t v19 = v28[2];
        unint64_t v18 = v28[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000DAAA0(v18 > 1, v19 + 1);
          uint64_t v14 = v28;
        }

        void v14[2] = v19 + 1;
        uint64_t v6 = v21;
        sub_100036FD0(v24, (uint64_t)v14 + v15 + v19 * v16, v21);
        a3 = v22;
      }

      else
      {
        sub_1000DAAAC();
      }

      if (v23 == ++v13) {
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
  }

void sub_1000D95CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CF970);
  __chkstk_darwin(v4);
  uint64_t v64 = (uint64_t)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v61 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D33C(&qword_1001CC200);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = type metadata accessor for RetryConfiguration(0LL);
  __chkstk_darwin(v67);
  uint64_t v12 = (double *)((char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_10000D33C(&qword_1001CC2D8);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for CacheUpdateRun(0LL);
  uint64_t v59 = *(void *)(updated - 8);
  uint64_t v17 = __chkstk_darwin(updated);
  uint64_t v63 = (uint64_t)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v58 = (uint64_t)v54 - v19;
  uint64_t v65 = type metadata accessor for MercuryCacheMetadata(0LL);
  uint64_t v20 = __chkstk_darwin(v65);
  uint64_t v23 = (void *)((char *)v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = *(void *)(a2 + 16);
  if (v24)
  {
    v54[1] = a2;
    uint64_t v55 = a1;
    uint64_t v25 = a2 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v62 = *(void *)(v21 + 72);
    swift_bridgeObjectRetain(a2);
    uint64_t v66 = _swiftEmptyArrayStorage;
    BOOL v60 = v12;
    __n128 v26 = (int *)v65;
    uint64_t v56 = v10;
    while (1)
    {
      sub_1000DA500(v25, (uint64_t)v23, type metadata accessor for MercuryCacheMetadata);
      sub_1000DA49C((uint64_t)v23 + v26[7], (uint64_t)v10);
      sub_100019E6C((uint64_t)v10, &qword_1001CC200);
      uint64_t v27 = (char *)v23 + v26[6];
      uint64_t v28 = (char *)v23 + v26[5];
      unint64_t v29 = sub_1000CFDF0();
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v28, v27, v6, v29) & 1) != 0) {
        goto LABEL_12;
      }
      uint64_t v31 = *v23;
      uint64_t v30 = v23[1];
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(&v15[*(int *)(updated + 20)], v28, v6);
      *(void *)unint64_t v15 = v31;
      *((void *)v15 + Hasher._combine(_:)(v1 & 1) = v30;
      uint64_t v12 = v60;
      v15[*(int *)(updated + 24)] = 0;
      sub_10000D5C0((uint64_t)v15, 0LL, 1LL, updated);
      swift_bridgeObjectRetain(v30);
LABEL_16:
      sub_100019EC0((uint64_t)v23, type metadata accessor for MercuryCacheMetadata);
      if (sub_1000102D4((uint64_t)v15, 1LL, updated) == 1)
      {
        sub_100019E6C((uint64_t)v15, &qword_1001CC2D8);
      }

      else
      {
        uint64_t v47 = v58;
        sub_100036FD0((uint64_t)v15, v58, type metadata accessor for CacheUpdateRun);
        sub_100036FD0(v47, v63, type metadata accessor for CacheUpdateRun);
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) != 0)
        {
          uint64_t v48 = v66;
        }

        else
        {
          sub_100014078();
          uint64_t v48 = v51;
        }

        unint64_t v49 = v48[2];
        if (v49 >= v48[3] >> 1)
        {
          sub_100014078();
          uint64_t v48 = v52;
        }

        _OWORD v48[2] = v49 + 1;
        unint64_t v50 = (*(unsigned __int8 *)(v59 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
        uint64_t v66 = v48;
        sub_100036FD0(v63, (uint64_t)v48 + v50 + *(void *)(v59 + 72) * v49, type metadata accessor for CacheUpdateRun);
      }

      __n128 v26 = (int *)v65;
      v25 += v62;
      if (!--v24)
      {
        uint64_t v20 = swift_bridgeObjectRelease();
        a1 = v55;
        goto LABEL_26;
      }
    }

    sub_100036FD0((uint64_t)v10, (uint64_t)v12, type metadata accessor for RetryConfiguration);
    if (*(void *)v12 >= *((void *)v12 + 1))
    {
      sub_10000D5C0(v64, 1LL, 1LL, v6);
    }

    else
    {
      uint64_t v32 = v64;
      Date.addingTimeInterval(_:)(v12[2]);
      sub_10000D5C0(v32, 0LL, 1LL, v6);
      uint64_t v33 = v32;
      __n128 v26 = (int *)v65;
      if (sub_1000102D4(v33, 1LL, v6) != 1)
      {
        uint64_t v34 = v61;
        uint64_t v35 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v57, v64, v6);
        uint64_t v37 = *v23;
        uint64_t v36 = v23[1];
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(&v15[*(int *)(updated + 20)], v35, v6);
        *(void *)unint64_t v15 = v37;
        *((void *)v15 + Hasher._combine(_:)(v1 & 1) = v36;
        v15[*(int *)(updated + 24)] = 1;
        swift_bridgeObjectRetain(v36);
        uint64_t v38 = *(void (**)(char *, uint64_t))(v34 + 8);
        uint64_t v12 = v60;
        uint64_t v39 = v35;
        uint64_t v10 = v56;
        v38(v39, v6);
        goto LABEL_14;
      }
    }

    sub_100019E6C(v64, &qword_1001CF970);
    uint64_t v40 = (char *)v12 + *(int *)(v67 + 28);
    uint64_t v41 = (char *)v23 + v26[5];
    unint64_t v42 = sub_1000CFDF0();
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v41, v40, v6, v42) & 1) != 0)
    {
      sub_100019EC0((uint64_t)v12, type metadata accessor for RetryConfiguration);
LABEL_12:
      uint64_t v43 = (uint64_t)v15;
      uint64_t v44 = 1LL;
LABEL_15:
      sub_10000D5C0(v43, v44, 1LL, updated);
      goto LABEL_16;
    }

    uint64_t v46 = *v23;
    uint64_t v45 = v23[1];
    (*(void (**)(char *, char *, uint64_t))(v61 + 16))(&v15[*(int *)(updated + 20)], v41, v6);
    *(void *)unint64_t v15 = v46;
    *((void *)v15 + Hasher._combine(_:)(v1 & 1) = v45;
    uint64_t v12 = v60;
    v15[*(int *)(updated + 24)] = 0;
    swift_bridgeObjectRetain(v45);
LABEL_14:
    sub_100019EC0((uint64_t)v12, type metadata accessor for RetryConfiguration);
    uint64_t v43 = (uint64_t)v15;
    uint64_t v44 = 0LL;
    goto LABEL_15;
  }

uint64_t sub_1000D9BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_BYTE *)(v6 + 88) = a6;
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a4;
  *(void *)(v6 + 48) = a5;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a3;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1000D9C1C, 0LL, 0LL);
}

uint64_t sub_1000D9C1C()
{
  *(void *)(v0 + 56) = sub_1000BF634(*(void **)(v0 + 32));
  uint64_t v3 = (uint64_t (*)(void))((char *)&dword_1001CFB78 + dword_1001CFB78);
  uint64_t v1 = (void *)swift_task_alloc(unk_1001CFB7C);
  *(void *)(v0 + 64) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000D9C7C;
  return sub_1000105A8(v3);
}

uint64_t sub_1000D9C7C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 64);
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1000D9D3C;
  }

  else
  {
    swift_release(*(void *)(v4 + 56));
    *(void *)(v4 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
    uint64_t v6 = sub_1000D9CF8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1000D9CF8()
{
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000D9D3C()
{
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000D9D68( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  uint64_t v87 = a3;
  char v88 = (unint64_t *)a2;
  uint64_t v85 = a6;
  uint64_t v86 = a1;
  uint64_t updated = type metadata accessor for CacheUpdateRun(0LL);
  uint64_t v11 = *(void *)(updated - 8);
  uint64_t v93 = updated;
  uint64_t v94 = v11;
  __chkstk_darwin(updated);
  sub_10001A284();
  uint64_t v91 = v12;
  sub_10001A210();
  __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v85 - v14;
  sub_10001A210();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v85 - v17);
  __chkstk_darwin(v16);
  uint64_t v92 = (uint64_t)&v85 - v19;
  sub_10001A210();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v85 - v21;
  uint64_t v23 = type metadata accessor for MercuryCacheMetadata(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  __n128 v26 = (uint64_t *)((char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v97 = &_swiftEmptySetSingleton;
  if (!a5)
  {
    uint64_t v36 = sub_1000DE030(a4);
    if (v36) {
      uint64_t v37 = sub_10013E2B8(v36);
    }
    else {
      uint64_t v37 = &_swiftEmptySetSingleton;
    }
    uint64_t v80 = v87;
    uint64_t v81 = (uint64_t)v88;
    uint64_t v74 = v85;
    swift_bridgeObjectRetain(v88);
    sub_1000E2054((uint64_t)v37, v81);
    uint64_t v77 = v82;
    swift_bridgeObjectRelease();
    sub_1000DAA70();
    sub_1000378A0();
    uint64_t v83 = sub_1000DAA78();
    v84(v83, v86);
    BOOL v60 = &_swiftEmptySetSingleton;
    uint64_t v76 = &_swiftEmptySetSingleton;
    goto LABEL_54;
  }

  uint64_t v27 = _swiftEmptyArrayStorage;
  if (a5 == 1)
  {
    swift_bridgeObjectRetain(a4);
    sub_1000E2054((uint64_t)v88, a4);
    sub_100115050(v28);
    uint64_t v29 = v87;
    uint64_t v30 = *(void *)(v87 + 16);
    uint64_t v31 = _swiftEmptyArrayStorage;
    if (v30)
    {
      __int128 v95 = _swiftEmptyArrayStorage;
      sub_100016F88();
      uint64_t v7 = v29 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      uint64_t v90 = *(void *)(v24 + 72);
      uint64_t v31 = v95;
      do
      {
        sub_1000DA500(v7, (uint64_t)v26, type metadata accessor for MercuryCacheMetadata);
        uint64_t v6 = *v26;
        uint64_t v32 = v26[1];
        sub_10000DEE0();
        sub_100019EC0((uint64_t)v26, type metadata accessor for MercuryCacheMetadata);
        if ((sub_10000DF00() & 1) == 0)
        {
          sub_100016F88();
          uint64_t v31 = v95;
        }

        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          sub_1000DAA58(v33);
          sub_100016F88();
          uint64_t v31 = v95;
        }

        v31[2] = v34 + 1;
        uint64_t v35 = &v31[2 * v34];
        void v35[4] = v6;
        v35[5] = v32;
        v7 += v90;
        --v30;
      }

      while (v30);
      uint64_t v39 = v87;
    }

    else
    {
      uint64_t v39 = v87;
    }

    uint64_t v27 = _swiftEmptyArrayStorage;
    uint64_t v40 = sub_10013E21C((uint64_t)v31);
    uint64_t v41 = (uint64_t)v88;
    sub_10000DEE0();
    uint64_t v38 = sub_1000DEB48(v40, v41);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v38 = v88;
    sub_10000DEE0();
    uint64_t v39 = v87;
  }

  sub_100115050((uint64_t)v38);
  sub_1000D95CC(v86, v39);
  uint64_t v43 = v42;
  __int128 v95 = _swiftEmptyArrayStorage;
  uint64_t v44 = *(void *)(v42 + 16);
  uint64_t v90 = v44;
  if (v44)
  {
    unint64_t v45 = 0LL;
    while (v45 < *(void *)(v43 + 16))
    {
      sub_1000DAA18();
      if (v22[*(int *)(v93 + 24)] == 1)
      {
        sub_1000DAA68((uint64_t)v22, v92);
        if ((sub_10000DF00() & 1) == 0) {
          sub_1000DAA40();
        }
        uint64_t v46 = v95;
        unint64_t v48 = v95[2];
        unint64_t v47 = v95[3];
        if (v48 >= v47 >> 1)
        {
          sub_1000DAA58(v47);
          sub_100017048();
          uint64_t v46 = v95;
        }

        _OWORD v46[2] = v48 + 1;
        sub_1000DAA68(v92, (uint64_t)v46 + v6 + v48 * v7);
        uint64_t v44 = v90;
      }

      else
      {
        sub_100019EC0((uint64_t)v22, type metadata accessor for CacheUpdateRun);
      }

      if (v44 == ++v45)
      {
        unint64_t v49 = v95;
        uint64_t v50 = (uint64_t)v89;
        uint64_t v27 = _swiftEmptyArrayStorage;
        goto LABEL_29;
      }
    }

    __break(1u);
    goto LABEL_56;
  }

  unint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v50 = (uint64_t)v89;
LABEL_29:
  char v96 = &_swiftEmptySetSingleton;
  uint64_t v51 = v49[2];
  if (v51)
  {
    sub_1000DAA8C();
    uint64_t v54 = v52 + v53;
    uint64_t v56 = *(void *)(v55 + 72);
    uint64_t v92 = v52;
    swift_retain(v52);
    do
    {
      sub_1000DA500(v54, (uint64_t)v18, type metadata accessor for CacheUpdateRun);
      uint64_t v57 = *v18;
      uint64_t v6 = v18[1];
      swift_bridgeObjectRetain(v6);
      sub_100148020((uint64_t *)&v95, v57, v6);
      swift_bridgeObjectRelease();
      sub_100019EC0((uint64_t)v18, type metadata accessor for CacheUpdateRun);
      v54 += v56;
      --v51;
    }

    while (v51);
    swift_release_n(v92, 2LL);
    uint64_t v58 = v96;
    uint64_t v50 = (uint64_t)v89;
    uint64_t v27 = _swiftEmptyArrayStorage;
  }

  else
  {
    swift_release(v49);
    uint64_t v58 = &_swiftEmptySetSingleton;
  }

  sub_1000E2054((uint64_t)v88, (uint64_t)v58);
  BOOL v60 = v59;
  __int128 v95 = _swiftEmptyArrayStorage;
  if (!v44)
  {
LABEL_46:
    swift_bridgeObjectRelease();
    char v96 = &_swiftEmptySetSingleton;
    uint64_t v65 = v27[2];
    if (v65)
    {
      sub_1000DAA8C();
      uint64_t v67 = (uint64_t)v27 + v66;
      uint64_t v69 = *(void *)(v68 + 72);
      uint64_t v70 = v27;
      swift_retain(v27);
      do
      {
        sub_1000DA500(v67, (uint64_t)v18, type metadata accessor for CacheUpdateRun);
        uint64_t v71 = *v18;
        uint64_t v72 = v18[1];
        swift_bridgeObjectRetain(v72);
        sub_100148020((uint64_t *)&v95, v71, v72);
        swift_bridgeObjectRelease();
        sub_100019EC0((uint64_t)v18, type metadata accessor for CacheUpdateRun);
        v67 += v69;
        --v65;
      }

      while (v65);
      swift_release_n(v70, 2LL);
      __int128 v73 = v96;
    }

    else
    {
      swift_release(v27);
      __int128 v73 = &_swiftEmptySetSingleton;
    }

    uint64_t v74 = v85;
    sub_1000E2054((uint64_t)v88, (uint64_t)v73);
    uint64_t v76 = v75;
    uint64_t v77 = v97;
    uint64_t v78 = (char *)v74 + *(int *)(sub_1000DAA70() + 32);
    uint64_t v79 = sub_1000378A0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16LL))(v78, v86, v79);
    uint64_t v80 = v87;
LABEL_54:
    *uint64_t v74 = v77;
    v74[1] = v60;
    v74[2] = v76;
    v74[3] = v80;
    swift_bridgeObjectRetain(v80);
    return;
  }

  unint64_t v61 = 0LL;
  while (v61 < *(void *)(v43 + 16))
  {
    sub_1000DAA18();
    if ((*(_BYTE *)(v50 + *(int *)(v93 + 24)) & 1) != 0)
    {
      sub_100019EC0(v50, type metadata accessor for CacheUpdateRun);
    }

    else
    {
      sub_1000DAA68(v50, v91);
      if ((sub_10000DF00() & 1) == 0) {
        sub_1000DAA40();
      }
      uint64_t v62 = v95;
      unint64_t v64 = v95[2];
      unint64_t v63 = v95[3];
      if (v64 >= v63 >> 1)
      {
        sub_1000DAA58(v63);
        sub_100017048();
        uint64_t v62 = v95;
      }

      v62[2] = v64 + 1;
      sub_1000DAA68(v91, (uint64_t)v62 + v6);
      uint64_t v50 = (uint64_t)v89;
      uint64_t v44 = v90;
    }

    if (v44 == ++v61)
    {
      uint64_t v27 = v95;
      goto LABEL_46;
    }
  }

uint64_t sub_1000DA3E0(uint64_t *a1, uint64_t *a2)
{
  if ((sub_100047848(*a1, *a2) & 1) == 0
    || (sub_100047848(a1[1], a2[1]) & 1) == 0
    || (sub_100047848(a1[2], a2[2]) & 1) == 0
    || !sub_10004A7FC(a1[3], a2[3]))
  {
    return 0LL;
  }

  uint64_t v4 = *(int *)(sub_1000DAA70() + 32);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t type metadata accessor for MercuryCacheUpdateInput(uint64_t a1)
{
  uint64_t result = qword_1001CCAC8;
  if (!qword_1001CCAC8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MercuryCacheUpdateInput);
  }
  return result;
}

uint64_t sub_1000DA49C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CC200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL sub_1000DA4E4(uint64_t a1)
{
  return sub_1000CFBBC(a1, *(void *)(v1 + 16));
}

void sub_1000DA500(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = sub_1000DAA78();
  v5(v4, v3);
  sub_100009044();
}

uint64_t *sub_1000DA528(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    uint64_t v8 = a2[3];
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
  }

  return v5;
}

uint64_t sub_1000DA5F8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1000DA658(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  return a1;
}

uint64_t *sub_1000DA6F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[2];
  uint64_t v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[3];
  uint64_t v13 = a1[3];
  a1[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

_OWORD *sub_1000DA7B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000DA810(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000DA8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DA8B8);
}

uint64_t sub_1000DA8B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000378A0();
    return sub_1000102D4((uint64_t)a1 + *(int *)(a3 + 32), a2, v8);
  }

uint64_t sub_1000DA928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DA934);
}

void *sub_1000DA934(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_1000378A0();
    return (void *)sub_10000D5C0((uint64_t)v5 + *(int *)(a4 + 32), a2, a2, v7);
  }

  return result;
}

uint64_t sub_1000DA99C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void sub_1000DAA18()
{
  sub_1000DA500( v1 + ((*(unsigned __int8 *)(*(void *)(v4 - 120) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 120) + 80LL))
  + *(void *)(*(void *)(v4 - 120) + 72LL) * v3,
    v2,
    v0);
}

void sub_1000DAA40()
{
}

BOOL sub_1000DAA58@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_1000DAA68(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000DAA70()
{
  return type metadata accessor for MercuryCacheUpdateInput(0LL);
}

uint64_t sub_1000DAA78()
{
  return v0;
}

  ;
}

uint64_t sub_1000DAAA0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 - 144))(a1, a2, 1LL);
}

void sub_1000DAAAC()
{
}

uint64_t sub_1000DAAB8(uint64_t a1, void *a2)
{
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v32 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v7 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    uint64_t v12 = (void *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v13 = v12[1];
    *(void *)&__int128 v35 = *v12;
    *((void *)&v35 + Hasher._combine(_:)(v1 & 1) = v13;
    swift_bridgeObjectRetain_n(v13, 2LL);
    AnyHashable.init<A>(_:)(&v35);
    uint64_t v36 = sub_10000D33C(&qword_1001C8E58);
    *(void *)&__int128 v35 = _swiftEmptyDictionarySingleton;
    sub_10000DA58(&v35, v34);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    uint64_t v38 = (void *)*a2;
    uint64_t v15 = v38;
    *a2 = 0x8000000000000000LL;
    unint64_t v16 = sub_100030D24((uint64_t)v37);
    uint64_t v18 = v15[2];
    BOOL v19 = (v17 & 1) == 0;
    Swift::Int v20 = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    unint64_t v21 = v16;
    char v22 = v17;
    sub_10000D33C(qword_1001C9918);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v20))
    {
      unint64_t v23 = sub_100030D24((uint64_t)v37);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_36;
      }
      unint64_t v21 = v23;
    }

    uint64_t v25 = v38;
    if ((v22 & 1) != 0)
    {
      __n128 v26 = (void *)(v38[7] + 32 * v21);
      sub_10000D3A0(v26);
      sub_10000DA58(v34, v26);
    }

    else
    {
      v38[(v21 >> 6) + 8] |= 1LL << v21;
      sub_10002C644((uint64_t)v37, v25[6] + 40 * v21);
      sub_10000DA58(v34, (_OWORD *)(v25[7] + 32 * v21));
      uint64_t v27 = v25[2];
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_33;
      }
      void v25[2] = v29;
    }

    *a2 = v25;
    swift_bridgeObjectRelease();
    sub_10000E854((uint64_t)v37);
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_34;
    }
    if (v9 >= v32) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v31 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v32) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v31 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v32) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v31 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v32) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v31 + 8 * v6);
          if (!v10) {
            break;
          }
        }
      }
    }

uint64_t sub_1000DADDC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v50 = a1 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v52 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  uint64_t v51 = a3;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_22;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_42;
    }
    if (v11 >= v52)
    {
LABEL_40:
      swift_bridgeObjectRelease();
      return swift_release();
    }

    unint64_t v12 = *(void *)(v50 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v52) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v50 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v52) {
          goto LABEL_40;
        }
        unint64_t v12 = *(void *)(v50 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v52) {
            goto LABEL_40;
          }
          unint64_t v12 = *(void *)(v50 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_1000DB284( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v23 = a1 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(a1 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v15 = 0LL;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    unint64_t v21 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v22 = v21[1];
    v25[0] = *v21;
    v25[1] = v22;
    swift_bridgeObjectRetain(v22);
    sub_1000DD640(v25, a2, a3, a4, v26, a6);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_27;
    }

    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1LL)) {
      break;
    }
    if (v15 >= v24) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v15);
    if (!v19)
    {
      int64_t v20 = v15 + 1;
      if (v15 + 1 >= v24) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_16;
      }
      int64_t v20 = v15 + 2;
      if (v15 + 2 >= v24) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19) {
        goto LABEL_16;
      }
      int64_t v20 = v15 + 3;
      if (v15 + 3 >= v24) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v20);
      if (v19)
      {
LABEL_16:
        int64_t v15 = v20;
        goto LABEL_17;
      }

      int64_t v20 = v15 + 4;
      if (v15 + 4 < v24)
      {
        unint64_t v19 = *(void *)(v23 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v15 = v20 + 1;
            if (__OFADD__(v20, 1LL)) {
              goto LABEL_29;
            }
            if (v15 >= v24) {
              goto LABEL_26;
            }
            unint64_t v19 = *(void *)(v23 + 8 * v15);
            ++v20;
            if (v19) {
              goto LABEL_17;
            }
          }
        }

        goto LABEL_16;
      }

void sub_1000DB4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &type metadata for String;
  uint64_t v152 = sub_10000D33C(&qword_1001C8F18);
  Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v152,  &protocol witness table for String);
  uint64_t v146 = a2 + 64;
  sub_1000DDD2C();
  uint64_t v155 = v8 & v7;
  uint64_t v156 = v6;
  int64_t v149 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v10 = v168;
  sub_10000DED8();
  int64_t v11 = 0LL;
  uint64_t v150 = a2;
  uint64_t v143 = a2 + 104;
  while (1)
  {
LABEL_2:
    unint64_t v12 = v155;
    if (v155)
    {
      int64_t v154 = v11;
      v155 &= v155 - 1;
      unint64_t v13 = __clz(__rbit64(v12)) | (v11 << 6);
LABEL_4:
      sub_10002C644(*(void *)(v150 + 48) + 40 * v13, (uint64_t)&v167);
      sub_10000DA1C(*(void *)(v150 + 56) + 32 * v13, (uint64_t)&v168[1] + 8);
      goto LABEL_11;
    }

    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_136;
    }
    if (v14 >= v149)
    {
      int64_t v16 = v11;
    }

    else
    {
      unint64_t v15 = *(void *)(v146 + 8 * v14);
      if (v15) {
        goto LABEL_8;
      }
      int64_t v16 = v11 + 1;
      if (v11 + 2 < v149)
      {
        unint64_t v15 = *(void *)(v146 + 8 * (v11 + 2));
        if (v15)
        {
          int64_t v14 = v11 + 2;
LABEL_8:
          int64_t v154 = v14;
          uint64_t v155 = (v15 - 1) & v15;
          unint64_t v13 = __clz(__rbit64(v15)) + (v14 << 6);
          goto LABEL_4;
        }

        int64_t v16 = v11 + 2;
        if (v11 + 3 < v149)
        {
          unint64_t v15 = *(void *)(v146 + 8 * (v11 + 3));
          if (v15)
          {
            int64_t v14 = v11 + 3;
            goto LABEL_8;
          }

          int64_t v14 = v11 + 4;
          int64_t v16 = v11 + 3;
          if (v11 + 4 < v149)
          {
            unint64_t v15 = *(void *)(v146 + 8 * v14);
            if (v15) {
              goto LABEL_8;
            }
            while (v11 + 5 < v149)
            {
              unint64_t v15 = *(void *)(v143 + 8 * v11++);
              if (v15)
              {
                int64_t v14 = v11 + 4;
                goto LABEL_8;
              }
            }

            int64_t v16 = v149 - 1;
          }
        }
      }
    }

    int64_t v154 = v16;
    uint64_t v155 = 0LL;
    uint64_t v169 = 0LL;
    memset(v168, 0, sizeof(v168));
    __int128 v167 = 0u;
LABEL_11:
    sub_1000288E8((uint64_t)&v167, (uint64_t)&v170, &qword_1001C9910);
    if (!*((void *)&v171 + 1))
    {
      swift_release();
      if (*(void *)(v156 + 16))
      {
        swift_bridgeObjectRetain(v156);
        sub_100054328(v117);
        uint64_t v119 = v118;
        sub_10000DDF8();
        uint64_t v120 = sub_10000D33C(&qword_1001CD430);
        uint64_t v121 = sub_10000DDDC(v120, 40LL);
        *(_OWORD *)(v121 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
        sub_10000DAA0(0LL, &qword_1001CA298, &OBJC_CLASS___AMSEngagementDestination_ptr);
        id v122 = sub_1000DDCF0();
        id v123 = [v122 setAllowsResponse:0];
        *(void *)(v121 + 32) = v122;
        *(void *)&__int128 v170 = v121;
        specialized Array._endMutation()(v123);
        sub_1000DC908(0xD000000000000018LL, 0x800000010016AC80LL, v119, v170);
        sub_10000DDF8();
        sub_1000090CC();
      }

      goto LABEL_133;
    }

    sub_10000DA58(v173, v166);
    __int128 v167 = v170;
    v168[0] = v171;
    *(void *)&v168[1] = v172;
    if ((sub_100010BA4( (uint64_t)&v164,  (uint64_t)&v167,  (uint64_t)&type metadata for AnyHashable,  (uint64_t)&type metadata for String) & 1) == 0) {
      goto LABEL_128;
    }
    __int128 v17 = v164;
    sub_10000DA1C((uint64_t)v166, (uint64_t)&v167);
    if ((sub_100010BA4((uint64_t)&v164, (uint64_t)&v167, (uint64_t)&type metadata for Any + 8, v152) & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_128:
      if (qword_1001C7FE0 == -1)
      {
LABEL_129:
        uint64_t v124 = sub_10000D33C(&qword_1001C9C70);
        sub_10002C79C();
        sub_1000DDDE0();
        uint64_t v127 = swift_allocObject(v124, (v126 & ~v125) + 2 * isUniquelyReferenced_nonNull_native, v125 | 7);
        *(_OWORD *)(v127 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
        *((void *)&v168[0] + Hasher._combine(_:)(v1 & 1) = &type metadata for MercuryCacheUpdateReporter;
        *(void *)&__int128 v167 = sub_10000DDDC((uint64_t)&unk_1001AF828, 64LL);
        uint64_t v128 = sub_1000DDA34(v144, v167 + 16);
        id v129 = (id)AMSLogKey(v128);
        if (v129)
        {
          uint64_t v130 = v129;
          uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
          unint64_t v132 = v5;
          uint64_t v134 = v133;

          sub_100020BB4();
          sub_10000DC34();
          sub_10000DC08();
          uint64_t v135 = *((void *)&v168[0] + 1);
          uint64_t v136 = sub_10000D37C(&v167, *((uint64_t *)&v168[0] + 1));
          uint64_t v137 = sub_10000DC54((uint64_t)v136, v135);
          v165[1] = swift_getMetatypeMetadata(v137);
          *(void *)&__int128 v164 = v137;
          sub_1000DDE24();
          sub_1000DDD48();
          sub_10000DC14();
          v165[1] = v132;
          *(void *)&__int128 v164 = v131;
          *((void *)&v164 + Hasher._combine(_:)(v1 & 1) = v134;
          sub_1000DDE24();
          sub_1000DDD48();
          sub_10000DC4C(93LL);
          sub_100025910();
          sub_100020AB8();
        }

        else
        {
          sub_10000DC24();
          sub_10000DC08();
          uint64_t v138 = *((void *)&v168[0] + 1);
          uint64_t v139 = sub_10000D37C(&v167, *((uint64_t *)&v168[0] + 1));
          uint64_t v140 = sub_10000DC54((uint64_t)v139, v138);
          v165[1] = swift_getMetatypeMetadata(v140);
          *(void *)&__int128 v164 = v140;
          sub_1000DDE24();
          sub_1000DDD48();
          sub_10000DC4C(58LL);
          sub_100025910();
        }

        sub_10000D3A0(&v167);
        uint64_t v141 = LogMessage.init(stringLiteral:)(0xD000000000000027LL);
        uint64_t v142 = static os_log_type_t.error.getter(v141);
        sub_1000BD1B0(v142, v127);
        sub_10000DE2C();
        sub_1000DDE0C();
        swift_release();
LABEL_133:
        swift_bridgeObjectRelease();
        sub_10000DD84();
        return;
      }

LABEL_144:
      swift_once(&qword_1001C7FE0, sub_1000BD714);
      goto LABEL_129;
    }

    uint64_t isUniquelyReferenced_nonNull_native = v164;
    if (!a1)
    {
      sub_1000DDD58();
LABEL_101:
      uint64_t v102 = isUniquelyReferenced_nonNull_native;
      sub_1000DDD48();
      goto LABEL_103;
    }

    v163[0] = v17;
    swift_bridgeObjectRetain(*((void *)&v17 + 1));
    AnyHashable.init<A>(_:)(v163);
    else {
      sub_1000DDD58();
    }
    sub_10000E854((uint64_t)&v167);
    if (!v165[1]) {
      goto LABEL_101;
    }
    uint64_t v102 = isUniquelyReferenced_nonNull_native;
LABEL_103:
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v156);
    *(void *)&__int128 v167 = v156;
    sub_1000DDD50(v17);
    sub_1000DDD1C();
    Swift::Int v107 = v105 + v106;
    if (__OFADD__(v105, v106))
    {
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }

    unint64_t v108 = v103;
    char v109 = v104;
    sub_10000D33C(&qword_1001CA070);
    Swift::Bool v110 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v107);
    uint64_t isUniquelyReferenced_nonNull_native = v17;
    if (v110)
    {
      unint64_t v111 = sub_1000DDD50(v17);
      if ((v109 & 1) != (v112 & 1)) {
        goto LABEL_147;
      }
      unint64_t v108 = v111;
    }

    uint64_t v113 = (void *)v167;
    uint64_t v156 = v167;
    if ((v109 & 1) != 0)
    {
      uint64_t v114 = *(void *)(v167 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v114 + 8 * v108) = v102;
    }

    else
    {
      *(void *)(v167 + 8 * (v108 >> 6) + 64) |= 1LL << v108;
      *(_OWORD *)(v113[6] + 16 * v108) = v17;
      *(void *)(v113[7] + 8 * v108) = v102;
      uint64_t v115 = v113[2];
      BOOL v62 = __OFADD__(v115, 1LL);
      uint64_t v116 = v115 + 1;
      if (v62) {
        goto LABEL_137;
      }
      v113[2] = v116;
      swift_bridgeObjectRetain(*((void *)&v17 + 1));
    }

    swift_bridgeObjectRelease();
    sub_10004C578();
    sub_1000DDE0C();
    int64_t v11 = v154;
  }

  int64_t v20 = 0LL;
  uint64_t v5 = (void *)v167;
  sub_1000DDD2C();
  unint64_t v23 = v22 & v21;
  int64_t v158 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v159 = v5;
  uint64_t v153 = v25;
  uint64_t v145 = v25 + 40;
  uint64_t v148 = isUniquelyReferenced_nonNull_native;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v23)
        {
          unint64_t v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          unint64_t v27 = v26 | (v20 << 6);
LABEL_25:
          uint64_t v28 = *(void *)(isUniquelyReferenced_nonNull_native + 56);
          unint64_t v29 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v27);
          uint64_t v30 = v29[1];
          *(void *)&__int128 v164 = *v29;
          *((void *)&v164 + Hasher._combine(_:)(v1 & 1) = v30;
          sub_10000DA1C(v28 + 32 * v27, (uint64_t)v165);
          sub_10000DF08();
          goto LABEL_32;
        }

        int64_t v31 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          goto LABEL_135;
        }

        if (v31 >= v158)
        {
          int64_t v33 = v20;
        }

        else
        {
          unint64_t v32 = *(void *)(v153 + 8 * v31);
          if (v32) {
            goto LABEL_29;
          }
          int64_t v33 = v20 + 1;
          if (v20 + 2 < v158)
          {
            unint64_t v32 = *(void *)(v153 + 8 * (v20 + 2));
            if (v32)
            {
              int64_t v31 = v20 + 2;
LABEL_29:
              unint64_t v23 = (v32 - 1) & v32;
              unint64_t v27 = __clz(__rbit64(v32)) + (v31 << 6);
              int64_t v20 = v31;
              goto LABEL_25;
            }

            int64_t v33 = v20 + 2;
            if (v20 + 3 < v158)
            {
              unint64_t v32 = *(void *)(v153 + 8 * (v20 + 3));
              if (v32)
              {
                int64_t v31 = v20 + 3;
                goto LABEL_29;
              }

              int64_t v31 = v20 + 4;
              int64_t v33 = v20 + 3;
              if (v20 + 4 < v158)
              {
                unint64_t v32 = *(void *)(v153 + 8 * v31);
                if (v32) {
                  goto LABEL_29;
                }
                while (v20 + 5 < v158)
                {
                  unint64_t v32 = *(void *)(v145 + 8 * v20++);
                  if (v32)
                  {
                    int64_t v31 = v20 + 4;
                    goto LABEL_29;
                  }
                }

                int64_t v33 = v158 - 1;
              }
            }
          }
        }

        unint64_t v23 = 0LL;
        memset(v165, 0, sizeof(v165));
        int64_t v20 = v33;
        __int128 v164 = 0u;
LABEL_32:
        sub_1000288E8((uint64_t)&v164, (uint64_t)&v167, &qword_1001C9900);
        uint64_t v34 = *((void *)&v167 + 1);
        if (!*((void *)&v167 + 1))
        {
          swift_release();
          swift_bridgeObjectRelease();
          sub_100020AB8();
          sub_1000DDE0C();
          uint64_t v5 = &type metadata for String;
          int64_t v11 = v154;
          goto LABEL_2;
        }

        int64_t v160 = v20;
        uint64_t v35 = v167;
        sub_10000DA58(v10, &v164);
        uint64_t v36 = sub_10000DAA0(0LL, &qword_1001CCB30, &OBJC_CLASS___NSDictionary_ptr);
LABEL_37:
        swift_bridgeObjectRelease();
        int64_t v20 = v160;
      }

      unint64_t v37 = v5;
      uint64_t v5 = v10;
      char v38 = *(void **)&v163[0];
      if (!v37[2])
      {
        sub_1000DDD58();
LABEL_47:
        sub_1000DDD48();
LABEL_48:
        if (*(void *)(v156 + 16))
        {
          swift_bridgeObjectRetain(*((void *)&v17 + 1));
          unint64_t v44 = sub_100030CCC(v17, *((uint64_t *)&v17 + 1));
          if ((v45 & 1) != 0)
          {
            uint64_t v46 = *(void **)(*(void *)(v156 + 56) + 8 * v44);
            sub_10000DF08();
            sub_10000DDF8();
LABEL_56:
            id v51 = sub_1000DDD9C();
            uint64_t isUniquelyReferenced_nonNull_native = sub_1000DDE2C((uint64_t)v51);
            id v161 = v46;
            sub_1000DDCE4();
            sub_1000DDD1C();
            if (__OFADD__(v54, v55)) {
              goto LABEL_138;
            }
            unint64_t v56 = v52;
            char v57 = v53;
            sub_10000D33C(&qword_1001C9CC0);
            if (sub_1000DDE00())
            {
              unint64_t v58 = sub_1000DDCE4();
              if ((v57 & 1) != (v59 & 1)) {
                goto LABEL_147;
              }
              unint64_t v56 = v58;
            }

            if ((v57 & 1) != 0)
            {
              sub_1000DDD7C(v46[7]);
            }

            else
            {
              sub_1000DDD64((uint64_t)&v46[v56 >> 6]);
              BOOL v60 = (void *)(v46[6] + 16 * v56);
              *BOOL v60 = v35;
              v60[1] = v34;
              sub_1000DDDC8(v46[7]);
              uint64_t v61 = v46[2];
              BOOL v62 = __OFADD__(v61, 1LL);
              uint64_t v63 = v61 + 1;
              if (v62) {
                goto LABEL_140;
              }
              _OWORD v46[2] = v63;
              sub_10000DF10();
            }

            sub_10000DE2C();
            sub_10004C578();
            sub_10000DF10();
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v156);
            *(void *)&__int128 v164 = v156;
            unint64_t v64 = sub_100030CCC(v17, *((uint64_t *)&v17 + 1));
            if (__OFADD__(*(void *)(v156 + 16), (v65 & 1) == 0)) {
              goto LABEL_139;
            }
            unint64_t v66 = v64;
            char v67 = v65;
            unint64_t v10 = v5;
            sub_10000D33C(&qword_1001CA070);
            uint64_t v68 = &v164;
            uint64_t isUniquelyReferenced_nonNull_native = v148;
            uint64_t v5 = v159;
            if (sub_1000DDE00())
            {
              uint64_t v68 = (__int128 *)v164;
              unint64_t v69 = sub_1000DDD50(v17);
              if ((v67 & 1) != (v70 & 1)) {
                goto LABEL_147;
              }
              unint64_t v66 = v69;
            }

            uint64_t v156 = v164;
            if ((v67 & 1) != 0)
            {
              sub_1000DDE38();
              *((void *)v68 + v66) = v161;
            }

            else
            {
              sub_1000DDCAC();
              *(void *)(v72 + 8 * v66) = v161;
              uint64_t v73 = *(void *)(v71 + 16);
              BOOL v62 = __OFADD__(v73, 1LL);
              uint64_t v74 = v73 + 1;
              if (v62) {
                goto LABEL_141;
              }
              *(void *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = v74;
              sub_10000DF08();
            }

            swift_bridgeObjectRelease();
            goto LABEL_37;
          }

          sub_10000DDF8();
        }

        uint64_t v46 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
        goto LABEL_56;
      }

      sub_10000DF10();
      unint64_t v39 = sub_1000DDCE4();
      if ((v40 & 1) != 0) {
        sub_1000DDDD4(v39, v37[7]);
      }
      else {
        sub_1000DDD58();
      }
      sub_10000DE2C();
      if (!v165[1]) {
        goto LABEL_47;
      }
      uint64_t v41 = sub_10000D33C(&qword_1001C8E58);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      sub_1000090CC();
      unsigned __int8 v43 = [v38 isEqualToDictionary:isa];

      if ((v43 & 1) == 0) {
        break;
      }
      sub_10000DE2C();

      unint64_t v10 = v5;
      uint64_t v5 = v159;
      int64_t v20 = v160;
    }

    if (*(void *)(v156 + 16))
    {
      sub_10000DED8();
      unint64_t v47 = sub_100030CCC(v17, *((uint64_t *)&v17 + 1));
      if ((v48 & 1) != 0)
      {
        uint64_t v49 = v156;
        uint64_t v50 = *(void **)(*(void *)(v156 + 56) + 8 * v47);
        sub_10000DF08();
        sub_10000DDF8();
        goto LABEL_78;
      }

      sub_1000090CC();
    }

    uint64_t v49 = v156;
    uint64_t v50 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
LABEL_78:
    id v75 = sub_1000DDD9C();
    char v157 = sub_1000DDE2C((uint64_t)v75);
    id v162 = v50;
    sub_1000DDCE4();
    sub_1000DDD1C();
    uint64_t isUniquelyReferenced_nonNull_native = v78 + v79;
    if (__OFADD__(v78, v79)) {
      goto LABEL_142;
    }
    unint64_t v80 = v76;
    char v81 = v77;
    sub_10000D33C(&qword_1001C9CC0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v157, isUniquelyReferenced_nonNull_native))
    {
      unint64_t v82 = sub_1000DDCE4();
      if ((v81 & 1) != (v83 & 1)) {
        goto LABEL_147;
      }
      unint64_t v80 = v82;
    }

    if ((v81 & 1) != 0)
    {
      sub_1000DDD7C(v50[7]);
      goto LABEL_86;
    }

    sub_1000DDD64((uint64_t)&v50[v80 >> 6]);
    uint64_t v84 = (void *)(v50[6] + 16 * v80);
    *uint64_t v84 = v35;
    v84[1] = v34;
    sub_1000DDDC8(v50[7]);
    uint64_t v85 = v50[2];
    BOOL v62 = __OFADD__(v85, 1LL);
    uint64_t v86 = v85 + 1;
    if (v62) {
      break;
    }
    void v50[2] = v86;
    sub_10000DF10();
LABEL_86:
    sub_10000DE2C();
    sub_10004C578();
    sub_10000DF10();
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
    *(void *)&__int128 v164 = v49;
    sub_100030CCC(v17, *((uint64_t *)&v17 + 1));
    sub_1000DDD1C();
    Swift::Int v91 = v89 + v90;
    if (__OFADD__(v89, v90)) {
      goto LABEL_143;
    }
    unint64_t v92 = v87;
    char v93 = v88;
    unint64_t v10 = v5;
    sub_10000D33C(&qword_1001CA070);
    uint64_t v94 = &v164;
    Swift::Bool v95 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v91);
    uint64_t isUniquelyReferenced_nonNull_native = v148;
    uint64_t v5 = v159;
    if (v95)
    {
      uint64_t v94 = (__int128 *)v164;
      unint64_t v96 = sub_1000DDD50(v17);
      if ((v93 & 1) != (v97 & 1)) {
        goto LABEL_147;
      }
      unint64_t v92 = v96;
    }

    uint64_t v156 = v164;
    if ((v93 & 1) != 0)
    {
      sub_1000DDE38();
      *((void *)v94 + v92) = v162;
    }

    else
    {
      sub_1000DDCAC();
      *(void *)(v99 + 8 * v92) = v162;
      uint64_t v100 = *(void *)(v98 + 16);
      BOOL v62 = __OFADD__(v100, 1LL);
      uint64_t v101 = v100 + 1;
      if (v62) {
        goto LABEL_146;
      }
      *(void *)(v98 + swift_unknownObjectWeakDestroy(v0 + 16) = v101;
      sub_10000DF08();
    }

    swift_bridgeObjectRelease();
    sub_10004C578();
    int64_t v20 = v160;
  }

  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void *sub_1000DC310()
{
  if (qword_1001C7F50 != -1) {
    swift_once(&qword_1001C7F50, sub_100055FD4);
  }
  uint64_t v0 = (void *)qword_1001DBAC8;
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSDistributedNotificationCenter);
  id v2 = v0;
  id v3 = [v1 defaultCenter];
  void v5[4] = sub_10000DAA0(0LL, &qword_1001CCB10, &OBJC_CLASS___NSDistributedNotificationCenter_ptr);
  v5[5] = &off_1001AF7C8;
  v5[0] = v2;
  v5[1] = v3;
  sub_1000DC3D4();
  return sub_1000DD974(v5);
}

void sub_1000DC3D4()
{
  unint64_t v3 = sub_1000DC88C(0xD000000000000010LL, (void *)0x800000010016AC60LL);
  uint64_t v5 = v4;
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000DDDE0();
  uint64_t v9 = swift_allocObject(v6, (v8 & ~v7) + 2 * v1, v7 | 7);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v30 = &type metadata for MercuryCacheUpdateReporter;
  uint64_t v28 = sub_10000DDDC((uint64_t)&unk_1001AF828, 64LL);
  uint64_t v10 = sub_1000DDA34(v0, v28 + 16);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    unint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    sub_10000DC34();
    sub_10000DC08();
    unint64_t v15 = v30;
    int64_t v16 = sub_10000D37C(&v28, (uint64_t)v30);
    uint64_t v17 = sub_10000DC54((uint64_t)v16, (uint64_t)v15);
    swift_getMetatypeMetadata(v17);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_1000522A8();
    sub_10000DE74();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    unint64_t v18 = v30;
    char v19 = sub_10000D37C(&v28, (uint64_t)v30);
    uint64_t v20 = sub_10000DC54((uint64_t)v19, (uint64_t)v18);
    swift_getMetatypeMetadata(v20);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_1000522A8();
  }

  sub_10000D3A0(&v28);
  uint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease();
  sub_100020BC8();
  uint64_t v28 = v21;
  unint64_t v29 = v22;
  v23._uint64_t countAndFlagsBits = v3;
  v23._object = v5;
  String.append(_:)(v23);
  uint64_t v30 = (ValueMetadata *)&type metadata for String;
  static LogMessage.safe(_:)(&v28);
  uint64_t v24 = sub_10000E888((uint64_t)&v28);
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_1000BD1B0(v25, v9);
  swift_bridgeObjectRelease();
  uint64_t v27 = v0[4];
  uint64_t v26 = v0[5];
  sub_10000D37C(v0 + 1, v27);
  (*(void (**)(unint64_t, void *, uint64_t, uint64_t))(v26 + 8))(v3, v5, v27, v26);
  sub_1000090CC();
  sub_10000DD84();
}

void *sub_1000DC688(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  if (qword_1001C7F50 != -1) {
    swift_once(&qword_1001C7F50, sub_100055FD4);
  }
  uint64_t v6 = (void *)qword_1001DBAC8;
  uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___NSDistributedNotificationCenter);
  id v8 = v6;
  id v9 = [v7 defaultCenter];
  void v11[4] = sub_10000DAA0(0LL, &qword_1001CCB10, &OBJC_CLASS___NSDistributedNotificationCenter_ptr);
  v11[5] = &off_1001AF7C8;
  v11[0] = v8;
  v11[1] = v9;
  a3(a1, a2);
  return sub_1000DD974(v11);
}

uint64_t sub_1000DC768(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = sub_10000D33C(&qword_1001CD430);
    uint64_t v5 = sub_10000DDDC(v4, 40LL);
    *(_OWORD *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
    sub_10000DAA0(0LL, &qword_1001CA298, &OBJC_CLASS___AMSEngagementDestination_ptr);
    id v6 = sub_1000DDCF0();
    id v7 = [v6 setAllowsResponse:0];
    *(void *)(v5 + 32) = v6;
    specialized Array._endMutation()(v7);
    sub_1000DC908(0xD000000000000013LL, 0x800000010016ACA0LL, v3, v5);
    sub_1000090CC();
  }

  return swift_bridgeObjectRelease();
}

void *sub_1000DC850(uint64_t a1, uint64_t a2)
{
  return sub_1000DC688(a1, a2, sub_1000DB4A8);
}

void *sub_1000DC870(uint64_t a1, uint64_t a2)
{
  return sub_1000DC688(a1, a2, (void (*)(uint64_t, uint64_t))sub_1000DC768);
}

unint64_t sub_1000DC88C(uint64_t a1, void *a2)
{
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD00000000000002FLL;
}

void sub_1000DC908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DD5C();
  uint64_t v64 = v9;
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v62 = *(void *)(v10 - 8);
  uint64_t v63 = v10;
  sub_10000DC8C();
  __chkstk_darwin(v11);
  sub_10000DD5C();
  uint64_t v61 = v12;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v13);
  sub_10000DC74();
  id v58 = [objc_allocWithZone(AMSEngagementEnqueueRequest) init];
  uint64_t v14 = sub_10000D33C(&qword_1001C8F00);
  uint64_t v15 = sub_10000DDDC(v14, 40LL);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  uint64_t v16 = sub_10000D33C((uint64_t *)&unk_1001C9C80);
  uint64_t inited = swift_initStackObject(v16, &v79);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  sub_1000DDD0C();
  *(void *)(inited + 96) = &type metadata for String;
  sub_100020BC8();
  *(void *)(inited + 72) = v18;
  *(void *)(inited + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v19;
  sub_1000DDD0C();
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 144), "amsengagementd");
  *(_BYTE *)(inited + 159) = -18;
  sub_100020BC8();
  *(void *)&__int128 v74 = 0xD000000000000012LL;
  *((void *)&v74 + Hasher._combine(_:)(v1 & 1) = v20;
  sub_1000DDD0C();
  uint64_t v21 = sub_10000D33C(&qword_1001CCB18);
  uint64_t v22 = swift_initStackObject(v21, &v78);
  *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v22 + 32) = a1;
  *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a2;
  uint64_t v23 = sub_10000D33C(&qword_1001CCB20);
  uint64_t v24 = swift_initStackObject(v23, &v77);
  *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v24 + 32) = 0x64657461647075LL;
  *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE700000000000000LL;
  *(void *)(v24 + 48) = a3;
  swift_bridgeObjectRetain(a2);
  sub_100020BB4();
  uint64_t v25 = sub_10000D33C(&qword_1001C8E58);
  *(void *)(v22 + 48) = Dictionary.init(dictionaryLiteral:)( v24,  &type metadata for String,  v25,  &protocol witness table for String);
  uint64_t v26 = sub_10000D33C(&qword_1001C9D98);
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)(v22, &type metadata for String, v26, &protocol witness table for String);
  *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10000D33C(&qword_1001CC5C0);
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v27;
  *(void *)(v15 + 32) = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000683E8();
  id v28 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  [v58 setClientInfo:v28];

  sub_1000DD9A0(a4, v58);
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  uint64_t v29 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v30 = sub_10002C79C();
  uint64_t v31 = swift_allocObject( v29,  ((*(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v30 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *((void *)&v75 + Hasher._combine(_:)(v1 & 1) = &type metadata for MercuryCacheUpdateReporter;
  *(void *)&__int128 v74 = sub_10000DDDC((uint64_t)&unk_1001AF828, 64LL);
  uint64_t v32 = sub_1000DDA34(v60, v74 + 16);
  id v33 = (id)AMSLogKey(v32);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v37 = v36;

    sub_10000DED8();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v38 = *((void *)&v75 + 1);
    unint64_t v39 = sub_10000D37C(&v74, *((uint64_t *)&v75 + 1));
    uint64_t v40 = sub_10000DC54((uint64_t)v39, v38);
    swift_getMetatypeMetadata(v40);
    sub_1000DDE1C();
    sub_1000DDE14();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v68 = (void **)v35;
    uint64_t v69 = v37;
    sub_1000DDE1C();
    sub_1000DDE14();
    sub_10000DC4C(93LL);
    sub_1000522A8();
    sub_1000090CC();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v41 = *((void *)&v75 + 1);
    int64_t v42 = sub_10000D37C(&v74, *((uint64_t *)&v75 + 1));
    uint64_t v43 = sub_10000DC54((uint64_t)v42, v41);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v43);
    uint64_t v68 = (void **)v43;
    sub_1000DDE1C();
    sub_1000DDE14();
    sub_10000DC4C(58LL);
    sub_1000522A8();
  }

  sub_10000D3A0(&v74);
  *(void *)&__int128 v74 = 0LL;
  *((void *)&v74 + Hasher._combine(_:)(v1 & 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  sub_100020BC8();
  *(void *)&__int128 v74 = v44;
  *((void *)&v74 + Hasher._combine(_:)(v1 & 1) = v45;
  sub_10006B680(v58);
  uint64_t v68 = v46;
  uint64_t v47 = sub_10000D33C(&qword_1001CCB28);
  v48._uint64_t countAndFlagsBits = String.init<A>(describing:)(&v68, v47);
  String.append(_:)(v48);
  sub_10000DE2C();
  *((void *)&v75 + Hasher._combine(_:)(v1 & 1) = &type metadata for String;
  static LogMessage.safe(_:)(&v74);
  uint64_t v49 = sub_10000E888((uint64_t)&v74);
  uint64_t v50 = static os_log_type_t.info.getter(v49);
  sub_1000BD1B0(v50, v31);
  sub_10000DDF8();
  if (qword_1001C80B8 != -1) {
    swift_once(&qword_1001C80B8, sub_10010D688);
  }
  sub_1000DDA34(v60, (uint64_t)&v74);
  uint64_t v51 = sub_10000DDDC((uint64_t)&unk_1001AF850, 72LL);
  __int128 v52 = v75;
  *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = v74;
  *(_OWORD *)(v51 + 32) = v52;
  *(_OWORD *)(v51 + 48) = v76;
  *(void *)(v51 + 64) = v58;
  uint64_t v72 = sub_1000DDA9C;
  uint64_t v73 = v51;
  uint64_t v68 = _NSConcreteStackBlock;
  uint64_t v69 = 1107296256LL;
  char v70 = sub_100021A3C;
  uint64_t MetatypeMetadata = &unk_1001AF868;
  char v53 = _Block_copy(&v68);
  id v54 = v58;
  static DispatchQoS.unspecified.getter(v54);
  char v67 = _swiftEmptyArrayStorage;
  unint64_t v55 = sub_100010404();
  uint64_t v56 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v57 = sub_100010444();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v56, v57, v66, v55);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v61, v64, v53);
  _Block_release(v53);

  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_1000DCFAC(void *a1, uint64_t a2)
{
  return swift_release();
}

id sub_1000DCFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v8 = 1635018093LL;
  unint64_t v9 = 0xE400000000000000LL;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)(&v8);
  sub_100032F3C(&v8, v7);
  sub_10000E854((uint64_t)v7);
  sub_10000E888((uint64_t)&v8);
  uint64_t v8 = 1635018093LL;
  unint64_t v9 = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)(&v8);
  sub_100032F3C(&v8, v7);
  sub_10000E854((uint64_t)v7);
  sub_10000E888((uint64_t)&v8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v4 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = -[objc_class isEqualToDictionary:](isa, "isEqualToDictionary:", v4);

  return v5;
}

void sub_1000DD138(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (!a1)
  {
    sub_10000DEE0();
    return;
  }

  uint64_t v63 = _swiftEmptyDictionarySingleton;
  sub_1000BE890(v64, a1);
  uint64_t v5 = v64[0];
  uint64_t v52 = v64[1];
  int64_t v6 = v64[3];
  unint64_t v7 = v64[4];
  int64_t v8 = (unint64_t)(v64[2] + 64LL) >> 6;
  uint64_t v50 = a1;
  swift_bridgeObjectRetain_n(a1, 2LL);
  unint64_t v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_23;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
LABEL_63:
      __break(1u);
      return;
    }

    if (v12 >= v8) {
      goto LABEL_31;
    }
    unint64_t v13 = *(void *)(v52 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      if (v6 + 2 >= v8) {
        goto LABEL_31;
      }
      sub_1000DDDBC();
      if (!v13)
      {
        if (v15 + 2 >= v8) {
          goto LABEL_31;
        }
        sub_1000DDDBC();
        if (!v13)
        {
          if (v16 + 3 >= v8) {
            goto LABEL_31;
          }
          sub_1000DDDBC();
          if (!v13)
          {
            if (v17 + 4 >= v8) {
              goto LABEL_31;
            }
            sub_1000DDDBC();
            if (!v13)
            {
              int64_t v14 = v18 + 5;
              if (v18 + 5 >= v8) {
                goto LABEL_31;
              }
              unint64_t v13 = *(void *)(v52 + 8 * v14);
              if (!v13) {
                break;
              }
            }
          }
        }
      }
    }

LABEL_31:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v53 = sub_10013E21C((uint64_t)v9);
  sub_1000BE890(&v65, a2);
  __int128 v26 = v65;
  int64_t v27 = *((void *)&v66 + 1);
  unint64_t v28 = v67;
  int64_t v29 = (unint64_t)(v66 + 64) >> 6;
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v30 = _swiftEmptyArrayStorage;
  while (2)
  {
    if (v28)
    {
      unint64_t v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      unint64_t v32 = v31 | (v27 << 6);
LABEL_52:
      sub_10002C644(*(void *)(v26 + 48) + 40 * v32, (uint64_t)&v60);
      v58[0] = v60;
      v58[1] = v61;
      unint64_t v59 = v62;
      sub_10002C644((uint64_t)v58, (uint64_t)&v54);
      if ((sub_100010BA4( (uint64_t)&v56,  (uint64_t)&v54,  (uint64_t)&type metadata for AnyHashable,  (uint64_t)&type metadata for String) & 1) == 0)
      {
        uint64_t v56 = 0LL;
        uint64_t v57 = 0LL;
      }

      sub_10000E854((uint64_t)v58);
      uint64_t v37 = v57;
      if (v57)
      {
        uint64_t v38 = v56;
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
        {
          sub_100048824();
          uint64_t v30 = v41;
        }

        unint64_t v39 = v30[2];
        if (v39 >= v30[3] >> 1)
        {
          sub_100048824();
          uint64_t v30 = v42;
        }

        void v30[2] = v39 + 1;
        uint64_t v40 = &v30[2 * v39];
        v40[4] = v38;
        void v40[5] = v37;
      }

      continue;
    }

    break;
  }

  int64_t v33 = v27 + 1;
  if (__OFADD__(v27, 1LL)) {
    goto LABEL_63;
  }
  if (v33 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v33);
  int64_t v35 = v27 + 1;
  if (v34) {
    goto LABEL_51;
  }
  int64_t v35 = v27 + 2;
  if (v27 + 2 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v35);
  if (v34) {
    goto LABEL_51;
  }
  int64_t v35 = v27 + 3;
  if (v27 + 3 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v35);
  if (v34) {
    goto LABEL_51;
  }
  int64_t v35 = v27 + 4;
  if (v27 + 4 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v35);
  if (v34) {
    goto LABEL_51;
  }
  int64_t v35 = v27 + 5;
  if (v27 + 5 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v35);
  if (v34) {
    goto LABEL_51;
  }
  int64_t v35 = v27 + 6;
  if (v27 + 6 >= v29) {
    goto LABEL_60;
  }
  unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v35);
  if (v34)
  {
LABEL_51:
    unint64_t v28 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v35 << 6);
    int64_t v27 = v35;
    goto LABEL_52;
  }

  int64_t v36 = v27 + 7;
  while (v36 < v29)
  {
    unint64_t v34 = *(void *)(*((void *)&v26 + 1) + 8 * v36++);
    if (v34)
    {
      int64_t v35 = v36 - 1;
      goto LABEL_51;
    }
  }

LABEL_60:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v43 = sub_10013E21C((uint64_t)v30);
  sub_10000DF08();
  uint64_t v44 = sub_1000DEB48(v43, v53);
  sub_1000DAAB8((uint64_t)v44, &v63);
  sub_10000DE74();
  sub_100020BB4();
  uint64_t v45 = sub_1000DEB48(v53, v43);
  sub_10000DEE0();
  sub_1000DADDC((uint64_t)v45, &v63, a2);
  sub_10000DE74();
  sub_1000E2054(v43, v53);
  uint64_t v47 = v46;
  sub_100020AB8();
  swift_bridgeObjectRetain(v50);
  sub_10000DEE0();
  sub_100048404((uint64_t)a3, a4);
  sub_1000DB284(v47, v50, a2, a3, a4, (uint64_t)&v63);
  swift_release();
}

void sub_1000DD640( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v21 = *a1;
  uint64_t v22 = v11;
  swift_bridgeObjectRetain(v11);
  AnyHashable.init<A>(_:)(&v21);
  sub_10003079C((uint64_t)v23, a2, &v24);
  sub_10000E854((uint64_t)v23);
  if (!v25) {
    goto LABEL_9;
  }
  uint64_t v13 = sub_10000D33C(&qword_1001C8E58);
  uint64_t v26 = a6;
  uint64_t v14 = v21;
  uint64_t v21 = v12;
  uint64_t v22 = v11;
  swift_bridgeObjectRetain(v11);
  AnyHashable.init<A>(_:)(&v21);
  sub_10003079C((uint64_t)v23, a3, &v24);
  sub_10000E854((uint64_t)v23);
  if (!v25)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    sub_10000E888((uint64_t)&v24);
    return;
  }

  if ((swift_dynamicCast(&v21, &v24, (char *)&type metadata for Any + 8, v13, 6LL) & 1) != 0)
  {
    uint64_t v15 = v21;
    if (a4)
    {
      swift_retain(a5);
      char v16 = a4(v14, v15);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        *(void *)&__int128 v24 = v12;
        *((void *)&v24 + Hasher._combine(_:)(v1 & 1) = v11;
        swift_bridgeObjectRetain(v11);
        AnyHashable.init<A>(_:)(&v24);
        uint64_t v25 = v13;
        *(void *)&__int128 v24 = v15;
        sub_100030188((uint64_t)&v24, (uint64_t)v23);
        sub_10006675C((uint64_t)a4, a5);
        return;
      }

      sub_10006675C((uint64_t)a4, a5);
    }

    else
    {
      uint64_t v20 = v21;
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unsigned __int8 v19 = -[objc_class isEqualToDictionary:](isa, "isEqualToDictionary:", v18);

      if ((v19 & 1) == 0)
      {
        *(void *)&__int128 v24 = v12;
        *((void *)&v24 + Hasher._combine(_:)(v1 & 1) = v11;
        swift_bridgeObjectRetain(v11);
        AnyHashable.init<A>(_:)(&v24);
        uint64_t v25 = v13;
        *(void *)&__int128 v24 = v20;
        sub_100030188((uint64_t)&v24, (uint64_t)v23);
        return;
      }
    }
  }

  swift_bridgeObjectRelease();
}

void sub_1000DD900()
{
  id v1 = String._bridgeToObjectiveC()();
  [v0 postNotificationName:v1 object:0 userInfo:0 deliverImmediately:1];
}

void sub_1000DD944()
{
}

ValueMetadata *type metadata accessor for LiveMercuryCacheUpdateReporter()
{
  return &type metadata for LiveMercuryCacheUpdateReporter;
}

void *sub_1000DD974(void *a1)
{
  return a1;
}

void sub_1000DD9A0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [a2 setDestinations:isa];
}

uint64_t sub_1000DDA08()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000DDA34(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000DDA68()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000DDA9C()
{
  return sub_1000DCFAC((void *)(v0 + 16), *(void *)(v0 + 64));
}

uint64_t sub_1000DDAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DDAB8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t destroy for MercuryCacheUpdateReporter(void *a1)
{
  id v1 = a1 + 1;
  swift_unknownObjectRelease(*a1);
  return sub_10000D3A0(v1);
}

uint64_t initializeWithCopy for MercuryCacheUpdateReporter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  Class v4 = a2 + 1;
  __int128 v5 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v6 = v5;
  unint64_t v7 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v5 - 8);
  swift_unknownObjectRetain(v3);
  v7(a1 + 8, v4, v6);
  return a1;
}

uint64_t *assignWithCopy for MercuryCacheUpdateReporter(uint64_t *a1, uint64_t *a2)
{
  Class v4 = a2 + 1;
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRelease(v5);
  sub_1000CD368(a1 + 1, v4);
  return a1;
}

__n128 initializeWithTake for MercuryCacheUpdateReporter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for MercuryCacheUpdateReporter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  sub_10000D3A0(a1 + 1);
  *(_OWORD *)(a1 + Hasher._combine(_:)(v1 & 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for MercuryCacheUpdateReporter(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10009A3C4(v0 + v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MercuryCacheUpdateReporter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheUpdateReporter()
{
  return &type metadata for MercuryCacheUpdateReporter;
}

void sub_1000DDCAC()
{
  *(void *)(v0 + 8 * (v2 >> 6) + 64) |= 1LL << v2;
  __int128 v3 = (void *)(*(void *)(v0 + 48) + 16 * v2);
  uint64_t v4 = *(void *)(v1 + 200);
  *__int128 v3 = *(void *)(v1 + 112);
  v3[1] = v4;
}

unint64_t sub_1000DDCE4()
{
  return sub_100030CCC(v1, v0);
}

id sub_1000DDCF0()
{
  return sub_100067A94((void *)0x7379656E72756F6ALL);
}

uint64_t sub_1000DDD0C()
{
  return AnyHashable.init<A>(_:)(v0 + 160);
}

  ;
}

  ;
}

uint64_t sub_1000DDD48()
{
  return sub_10000E888(v0 + 256);
}

unint64_t sub_1000DDD50(uint64_t a1)
{
  return sub_100030CCC(a1, *(void *)(v1 + 200));
}

double sub_1000DDD58()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  return result;
}

void sub_1000DDD64(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1LL << v1;
}

_OWORD *sub_1000DDD7C@<X0>(uint64_t a1@<X8>)
{
  __int128 v3 = (void *)(a1 + 32 * v2);
  sub_10000D3A0(v3);
  return sub_10000DA58((_OWORD *)(v1 + 224), v3);
}

id sub_1000DDD9C()
{
  *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  *(void *)(v0 + 256) = v2;
  sub_10000DA58((_OWORD *)(v0 + 256), (_OWORD *)(v0 + 224));
  return v2;
}

  ;
}

_OWORD *sub_1000DDDC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10000DA58((_OWORD *)(v1 + 224), (_OWORD *)(a1 + 32 * v2));
}

uint64_t sub_1000DDDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000DA1C(a2 + 32 * a1, v2 + 256);
}

  ;
}

void sub_1000DDDF4()
{
}

BOOL sub_1000DDE00()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t sub_1000DDE0C()
{
  return sub_10000D3A0((void *)(v0 + 304));
}

uint64_t sub_1000DDE14()
{
  return sub_10000E888(v0 + 112);
}

uint64_t sub_1000DDE1C()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 112);
}

uint64_t sub_1000DDE24()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 256);
}

uint64_t sub_1000DDE2C(uint64_t a1)
{
  *(void *)(v1 + 64) = a1;
  return swift_isUniquelyReferenced_nonNull_native(v2);
}

uint64_t sub_1000DDE38()
{
  return swift_bridgeObjectRelease(*(void *)(*(void *)(v0 + 56) + 8 * v1));
}

uint64_t sub_1000DDE44(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  sub_1000BE890(v24, a4);
  uint64_t v7 = v24[0];
  uint64_t v22 = v24[1];
  int64_t v8 = v24[3];
  unint64_t v9 = v24[4];
  int64_t v10 = (unint64_t)(v24[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a4);
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v13 = v12 | (v8 << 6);
  while (1)
  {
    uint64_t v17 = (void *)(*(void *)(v7 + 48) + 16 * v13);
    uint64_t v18 = v17[1];
    uint64_t v19 = *(void *)(*(void *)(v7 + 56) + 8 * v13);
    v23[0] = *v17;
    v23[1] = v18;
    _OWORD v23[2] = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    a2(&v25, v23);
    if (v4)
    {
      uint64_t v21 = v25;
      swift_release(v7);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v18);
      return swift_bridgeObjectRelease(v21);
    }

    swift_bridgeObjectRelease(v19);
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v14 >= v10) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v14);
    if (!v15)
    {
      int64_t v16 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v16);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v8 + 3;
      if (v8 + 3 >= v10) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v16);
      if (v15) {
        goto LABEL_12;
      }
      int64_t v16 = v8 + 4;
      if (v8 + 4 >= v10) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v16);
      if (v15)
      {
LABEL_12:
        int64_t v14 = v16;
      }

      else
      {
        int64_t v14 = v8 + 5;
        if (v8 + 5 >= v10) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v22 + 8 * v14);
        if (!v15)
        {
          int64_t v20 = v8 + 6;
          while (v20 < v10)
          {
            unint64_t v15 = *(void *)(v22 + 8 * v20++);
            if (v15)
            {
              int64_t v14 = v20 - 1;
              goto LABEL_13;
            }
          }

uint64_t sub_1000DE030(uint64_t a1)
{
  *(void *)&v5[0] = 0x73746C75736572LL;
  *((void *)&v5[0] + Hasher._combine(_:)(v1 & 1) = 0xE700000000000000LL;
  AnyHashable.init<A>(_:)(v5);
  sub_10003079C((uint64_t)v6, a1, v5);
  sub_10000E854((uint64_t)v6);
  uint64_t v2 = sub_10000D33C(&qword_1001CAAD0);
  uint64_t v3 = sub_10000D33C(&qword_1001C9D98);
  else {
    return 0LL;
  }
}

uint64_t sub_1000DE0DC(unsigned __int8 a1, uint64_t a2)
{
  return sub_1000DE0F4(a1, a2, (uint64_t)&type metadata for Int);
}

uint64_t sub_1000DE0E8(unsigned __int8 a1, uint64_t a2)
{
  return sub_1000DE0F4(a1, a2, (uint64_t)&type metadata for Double);
}

uint64_t sub_1000DE0F4(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v10[0] = sub_1000CE8C8(a1);
  *((void *)&v10[0] + Hasher._combine(_:)(v1 & 1) = v5;
  sub_1000DEB3C(*(uint64_t *)&v10[0], &type metadata for String, &protocol witness table for String);
  sub_10003079C((uint64_t)v11, a2, v10);
  sub_10000E854((uint64_t)v11);
  uint64_t v6 = sub_10000D33C(&qword_1001CAAD0);
  int v7 = sub_100010BA4((uint64_t)&v12, (uint64_t)v10, v6, a3);
  uint64_t v8 = v12;
  if (!v7) {
    return 0LL;
  }
  return v8;
}

uint64_t sub_1000DE184@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&v10[0] = sub_1000CE8C8(a1);
  *((void *)&v10[0] + Hasher._combine(_:)(v1 & 1) = v5;
  sub_1000DEB3C(*(uint64_t *)&v10[0], &type metadata for String, &protocol witness table for String);
  sub_10003079C((uint64_t)v11, a2, v10);
  sub_10000E854((uint64_t)v11);
  uint64_t v6 = sub_10000D33C(&qword_1001CAAD0);
  uint64_t v7 = sub_1000378A0();
  int v8 = sub_100010BA4(a3, (uint64_t)v10, v6, v7);
  return sub_10000D5C0(a3, v8 ^ 1u, 1LL, v7);
}

uint64_t sub_1000DE228@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t updated = (int *)type metadata accessor for MercuryCacheUpdateResponse(0LL);
  __chkstk_darwin(updated);
  int64_t v14 = (uint64_t *)&v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = sub_1000DE030(a1);
  uint64_t v16 = swift_bridgeObjectRelease();
  if (v15)
  {
    __chkstk_darwin(v16);
    *(void *)&v22[-32] = a2;
    *(double *)&v22[-24] = a5;
    *(void *)&v22[-16] = a3;
    *(double *)&v22[-8] = a6;
    uint64_t v17 = sub_1000DDE44( (uint64_t)_swiftEmptyDictionarySingleton,  (void (*)(uint64_t *, void *))sub_1000DE5B0,  (uint64_t)&v22[-48],  v15);
    swift_bridgeObjectRelease();
    *int64_t v14 = v17;
    uint64_t v18 = (char *)v14 + updated[5];
    uint64_t v19 = sub_1000378A0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32LL))(v18, a2, v19);
    *(double *)((char *)v14 + updated[6]) = a5;
    *(uint64_t *)((char *)v14 + updated[7]) = a3;
    *(double *)((char *)v14 + updated[8]) = a6;
    sub_1000DE5D4((uint64_t)v14, a4);
    return sub_10000D5C0(a4, 0LL, 1LL, (uint64_t)updated);
  }

  else
  {
    uint64_t v21 = sub_1000378A0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(a2, v21);
    return sub_10000D5C0(a4, 1LL, 1LL, (uint64_t)updated);
  }

uint64_t type metadata accessor for MercuryCacheUpdateResponse(uint64_t a1)
{
  uint64_t result = qword_1001CCB90;
  if (!qword_1001CCB90) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MercuryCacheUpdateResponse);
  }
  return result;
}

uint64_t sub_1000DE40C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  v25[0] = a4;
  v25[1] = a1;
  uint64_t v10 = sub_10000D33C(&qword_1001C9D80);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData(0LL);
  __chkstk_darwin(updated);
  uint64_t v19 = (double *)((char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  uint64_t v22 = a2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3, v13);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_1000D773C(v20, v21, (uint64_t)v16, v25[0], v19, a5, a6);
  swift_bridgeObjectRetain(v21);
  sub_1000D74C8(v12);
  uint64_t v23 = type metadata accessor for MercuryCacheUpdateData.DataKind(0LL);
  sub_10000D5C0((uint64_t)v12, 0LL, 1LL, v23);
  sub_1000305C0();
  return sub_1000DE618((uint64_t)v19);
}

uint64_t sub_1000DE5B0(uint64_t a1, uint64_t *a2)
{
  return sub_1000DE40C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 32), *(double *)(v2 + 24), *(double *)(v2 + 40));
}

uint64_t sub_1000DE5D4(uint64_t a1, uint64_t a2)
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 32LL))(a2, a1, updated);
  return a2;
}

uint64_t sub_1000DE618(uint64_t a1)
{
  uint64_t updated = type metadata accessor for MercuryCacheUpdateData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(updated - 8) + 8LL))(a1, updated);
  return a1;
}

uint64_t *sub_1000DE654(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v7 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }

  return v7;
}

uint64_t sub_1000DE71C(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1000DE764(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t *sub_1000DE804(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  return a1;
}

void *sub_1000DE8A4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = *(void *)((char *)a2 + v10);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t *sub_1000DE930(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v1Hasher._combine(_:)(v1 & 1) = *(uint64_t *)((char *)a2 + v11);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1000DE9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DE9D0);
}

uint64_t sub_1000DE9D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1000378A0();
    return sub_1000102D4((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t sub_1000DEA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DEA4C);
}

void *sub_1000DEA4C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_1000378A0();
    return (void *)sub_10000D5C0((uint64_t)v5 + *(int *)(a4 + 20), a2, a2, v7);
  }

  return result;
}

uint64_t sub_1000DEAB4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000DEB3C(uint64_t a1, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

unint64_t *sub_1000DEB48(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) > *(void *)(a2 + 16) >> 3) {
    return sub_1000DF468(a1, a2);
  }
  sub_100116894(a1);
  return (unint64_t *)a2;
}

uint64_t sub_1000DEB98()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CCBD8 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1000DEBE0(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v2[30] = sub_1000C9AD4(v3);
  return sub_10000DD48();
}

uint64_t sub_1000DEC20()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = (void *)(*(void *)(v0 + 232) + 112LL);
  swift_beginAccess(v2, v0 + 200, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_1000DEB48(v4, v1);
  sub_10000DDF8();
  sub_10000DBFC((uint64_t)v2, v0 + 176);
  uint64_t v6 = sub_1000489DC();
  sub_100115050(v6);
  swift_endAccess(v0 + 176);
  if (qword_1001C8060 != -1) {
    swift_once(&qword_1001C8060, sub_1000DEB98);
  }
  uint64_t v7 = *(void *)(v0 + 232);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(sub_10000DC98() - 8);
  uint64_t v9 = swift_allocObject( v0 + 176,  ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
       + 2LL * *(void *)(v8 + 72),
         *(unsigned __int8 *)(v8 + 80) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v0 + 104) = type metadata accessor for MercuryCacheUpdateStateManager();
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v7;
  uint64_t v10 = swift_retain(v7);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    int64_t v29 = v5;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = sub_10000D37C((void *)(v0 + 80), v16);
    uint64_t v18 = sub_10000DC54((uint64_t)v17, v16);
    *(void *)(v0 + 72) = swift_getMetatypeMetadata(v18);
    *(void *)(v0 + 48) = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 48);
    sub_10000E888(v0 + 48);
    sub_10000DC14();
    *(void *)(v0 + 136) = &type metadata for String;
    *(void *)(v0 + 112) = v13;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v15;
    uint64_t v5 = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 112);
    sub_10000E888(v0 + 112);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v20 = sub_10000D37C((void *)(v0 + 80), v19);
    uint64_t v21 = sub_10000DC54((uint64_t)v20, v19);
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_getMetatypeMetadata(v21);
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 16);
    sub_10000E888(v0 + 16);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v22 = *(void *)(v0 + 240);
  sub_10000D3A0((void *)(v0 + 80));
  sub_1000E0558();
  uint64_t v30 = v23;
  uint64_t v24 = swift_bridgeObjectRetain(*v2);
  v25._uint64_t countAndFlagsBits = Set.description.getter(v24, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v25);
  sub_10000DDF8();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 168) = &type metadata for String;
  *(void *)(v0 + 144) = v30;
  *(void *)(v0 + 152) = 0xEA0000000000203ALL;
  static LogMessage.safe(_:)(v0 + 144);
  uint64_t v26 = sub_10000E888(v0 + 144);
  uint64_t v27 = static os_log_type_t.info.getter(v26);
  sub_1000BD1B0(v27, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(unint64_t *))(v0 + 8))(v5);
}

uint64_t sub_1000DEF40(uint64_t a1)
{
  v2[45] = a1;
  v2[46] = v1;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v2[47] = sub_1000C9AD4(v3);
  return sub_10000DD48();
}

uint64_t sub_1000DEF80()
{
  uint64_t v2 = v1 + 80;
  uint64_t v43 = v1 + 336;
  if (qword_1001C8060 != -1) {
    swift_once(&qword_1001C8060, sub_1000DEB98);
  }
  uint64_t v44 = (void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 368);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(sub_10000DC98() - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v42 = v0;
  uint64_t v40 = v6 | 7;
  uint64_t v41 = ((v6 + 32) & ~v6) + 2 * v5;
  uint64_t v7 = swift_allocObject(v0, v41, v6 | 7);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateStateManager();
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = updated;
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  uint64_t v8 = swift_retain(v3);
  id v9 = (id)AMSLogKey(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = (void *)(v1 + 16);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v14 = v13;

    sub_1000489DC();
    sub_10000DC34();
    sub_10000DC08();
    sub_1000E04A4((void *)(v1 + 16));
    *(void *)(v1 + 328) = sub_10003881C();
    *(void *)(v1 + 304) = updated;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 304);
    sub_10000E888(v1 + 304);
    sub_10000DC14();
    *(void *)(v1 + 136) = &type metadata for String;
    *(void *)(v1 + 112) = v12;
    *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 112);
    uint64_t v2 = v1 + 80;
    sub_10000E888(v1 + 112);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE74();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v15 = sub_10000D37C((void *)(v1 + 16), updated);
    id v11 = (void *)(v1 + 16);
    uint64_t v16 = sub_10000DC54((uint64_t)v15, updated);
    *(void *)(v1 + 72) = swift_getMetatypeMetadata(v16);
    *(void *)(v1 + 48) = v16;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 48);
    sub_10000E888(v1 + 48);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v17 = *(void *)(v1 + 360);
  uint64_t v18 = *(void *)(v1 + 368);
  sub_10000D3A0(v11);
  v19._uint64_t countAndFlagsBits = Set.description.getter(v17, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v19);
  sub_10000DDF8();
  *(void *)(v1 + 104) = &type metadata for String;
  *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x676E69766F6D6572LL;
  *(void *)(v1 + 88) = 0xEA0000000000203ALL;
  static LogMessage.safe(_:)(v2);
  uint64_t v20 = sub_10000E888(v2);
  uint64_t v21 = static os_log_type_t.info.getter(v20);
  sub_1000BD1B0(v21, v7);
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)(v18 + 112);
  sub_10000DBFC(v18 + 112, v43);
  sub_100116894(v17);
  swift_endAccess(v43);
  uint64_t v23 = swift_allocObject(v42, v41, v40);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v1 + 168) = updated;
  *(void *)(v1 + 144) = v18;
  uint64_t v24 = swift_retain(v18);
  id v25 = (id)AMSLogKey(v24);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;

    swift_bridgeObjectRetain(v29);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v30 = *(void *)(v1 + 168);
    unint64_t v31 = (void *)(v1 + 144);
    sub_1000E04A4(v44);
    *(void *)(v1 + 264) = sub_10003881C();
    *(void *)(v1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 240);
    sub_10000E888(v1 + 240);
    sub_10000DC14();
    *(void *)(v1 + 296) = &type metadata for String;
    *(void *)(v1 + 272) = v27;
    *(void *)(v1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 272);
    sub_10000E888(v1 + 272);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v32 = *(void *)(v1 + 168);
    unint64_t v31 = (void *)(v1 + 144);
    sub_1000E04A4(v44);
    *(void *)(v1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_10003881C();
    *(void *)(v1 + 176) = v32;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 176);
    sub_10000E888(v1 + 176);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v33 = *(void *)(v1 + 376);
  sub_10000D3A0(v31);
  sub_1000E0558();
  uint64_t v46 = v34;
  swift_bridgeObjectRetain(*v22);
  v36._uint64_t countAndFlagsBits = Set.description.getter(v35, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 232) = &type metadata for String;
  *(void *)(v1 + 208) = v46;
  *(void *)(v1 + 2swift_unknownObjectWeakDestroy(v0 + 16) = 0xEA0000000000203ALL;
  static LogMessage.safe(_:)(v1 + 208);
  uint64_t v37 = sub_10000E888(v1 + 208);
  uint64_t v38 = static os_log_type_t.info.getter(v37);
  sub_1000BD1B0(v38, v23);
  sub_10000DDF8();
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t type metadata accessor for MercuryCacheUpdateStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd30MercuryCacheUpdateStateManager);
}

unint64_t *sub_1000DF468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & v4;
    int64_t v40 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    int64_t v9 = 0LL;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)(v42, *(void *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1LL))
      {
        __break(1u);
        goto LABEL_50;
      }

      if (v12 >= v40) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v41 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v40) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v40) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v40) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v40)
              {
LABEL_48:
                sub_10004844C(a1);
                return (unint64_t *)v2;
              }

              unint64_t v13 = *(void *)(v41 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1LL)) {
                    break;
                  }
                  if (v14 >= v40) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v41 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }

LABEL_50:
                __break(1u);
              }

              int64_t v14 = v9 + 5;
            }
          }
        }
      }

  sub_10004844C(v4);
  return (unint64_t *)v2;
}

unint64_t *sub_1000DF8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    sub_10001A2D8();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }

  sub_1000BE890(v45, a1);
  uint64_t v4 = v45[0];
  uint64_t v43 = v45[1];
  int64_t v5 = v47;
  unint64_t v6 = v48;
  v41[1] = v46;
  int64_t v42 = (unint64_t)(v46 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_4;
  }
LABEL_3:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v8);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    Hasher.init(_seed:)(v44, *(void *)(v2 + 40));
    sub_1000489DC();
    String.hash(into:)(v44, v18, v17);
    Swift::Int v19 = Hasher._finalize()();
    uint64_t v20 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v21 = v19 & ~v20;
    sub_1000E056C();
    if ((v22 & 1) == 0) {
      goto LABEL_37;
    }
    uint64_t v23 = *(void *)(v2 + 48);
    uint64_t v24 = (uint64_t *)(v23 + 16 * v21);
    uint64_t v25 = v24[1];
    BOOL v26 = *v24 == v18 && v25 == v17;
    if (v26 || (sub_1000E04FC(*v24, v25) & 1) != 0)
    {
      sub_10000DE74();
      sub_1000E04DC();
LABEL_40:
      char v33 = *(_BYTE *)(v2 + 32);
      unsigned int v34 = v33 & 0x3F;
      unint64_t v35 = (1LL << v33) + 63;
      uint64_t v36 = 8 * (v35 >> 6);
      if (v34 < 0xE
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v35 >> 6), 8LL),
            (_DWORD)isStackAllocationSafe))
      {
        __chkstk_darwin(isStackAllocationSafe);
        sub_1000E054C((char *)v41 - ((v36 + 15) & 0x3FFFFFFFFFFFFFF0LL));
        uint64_t v37 = sub_1000E04C0();
        uint64_t v38 = sub_10001A2D8();
        if (v2 == -56)
        {
          sub_1000E050C();
          return v37;
        }

        swift_willThrow(v38);
        swift_errorRelease(v2 + 56);
        __break(1u);
      }

      else
      {
        uint64_t v39 = (void *)swift_slowAlloc(v36, -1LL);
        sub_1000E054C(v39);
        uint64_t v37 = sub_1000E04C0();
        sub_10001A2D8();
        if (v2 == -56)
        {
          sub_1000E050C();
          sub_1000E051C();
          return v37;
        }
      }

      swift_errorRelease(v2 + 56);
      uint64_t result = (unint64_t *)sub_1000E051C();
      __break(1u);
      return result;
    }

    uint64_t v27 = ~v20;
    while (1)
    {
      uint64_t v21 = (v21 + 1) & v27;
      sub_1000E056C();
      if ((v28 & 1) == 0) {
        break;
      }
      BOOL v29 = (uint64_t *)(v23 + 16 * v21);
      uint64_t v30 = v29[1];
      BOOL v31 = *v29 == v18 && v30 == v17;
      if (v31 || (sub_1000E04FC(*v29, v30) & 1) != 0)
      {
        sub_1000E04DC();
        uint64_t isStackAllocationSafe = sub_10000DE74();
        goto LABEL_40;
      }
    }

LABEL_37:
    sub_10000DE74();
    if (v6) {
      goto LABEL_3;
    }
LABEL_4:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      __break(1u);
    }
    if (v9 >= v42) {
      goto LABEL_50;
    }
    unint64_t v10 = *(void *)(v43 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      sub_1000E053C();
      if (v12 == v13) {
        goto LABEL_50;
      }
      sub_1000E052C();
      if (!v10)
      {
        sub_1000E053C();
        if (v12 == v13) {
          goto LABEL_50;
        }
        sub_1000E052C();
        if (!v10)
        {
          sub_1000E053C();
          if (v12 == v13) {
            goto LABEL_50;
          }
          sub_1000E052C();
          if (!v10)
          {
            int64_t v11 = v14 + 4;
            if (v14 + 4 >= v42) {
              goto LABEL_50;
            }
            unint64_t v10 = *(void *)(v43 + 8 * v11);
            if (!v10) {
              break;
            }
          }
        }
      }
    }

unint64_t *sub_1000DFC58( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_15;
        }

        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_48;
        }

        int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_46;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_46;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_14;
            }

            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_46;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_46;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v38 = v9 + 6;
                while (v38 < v14)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    int64_t v13 = v38 - 1;
                    goto LABEL_14;
                  }
                }

                int64_t v15 = v14 - 1;
LABEL_46:
                a5[3] = v15;
                a5[4] = 0LL;
                swift_retain(a3);
                return (unint64_t *)sub_1000E0220(v41, a2, v40, a3);
              }

              goto LABEL_14;
            }
          }

          int64_t v13 = v18;
        }

LABEL_14:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_15:
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(void *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1LL << *(_BYTE *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1LL << v24;
        if (((1LL << v24) & *(void *)(v43 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        char v28 = (void *)(v27 + 16 * v24);
        uint64_t v29 = v28[1];
        BOOL v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0LL) & 1) != 0) {
          break;
        }
        uint64_t v32 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v34 + 1)
        {
          unint64_t v34 = i & v32;
          unint64_t v35 = (void *)(v27 + 16 * v34);
          uint64_t v36 = v35[1];
          BOOL v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0LL) & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v34 >> 6;
            uint64_t v26 = 1LL << v34;
            goto LABEL_22;
          }
        }

        __break(1u);
        goto LABEL_15;
      }
    }

    __break(1u);
    goto LABEL_14;
  }

  return result;
}
}

  Swift::Int v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = __OFADD__(v20, 1LL);
  Swift::Int v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  }
}

unint64_t *sub_1000DFF48( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v40 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }

        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1LL))
          {
            __break(1u);
            goto LABEL_46;
          }

          int64_t v14 = (unint64_t)(a5[2] + 64LL) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_44;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_44;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }

            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_44;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }

              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_44;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v18 = v9 + 5;
                  while (v18 < v14)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_20;
                    }
                  }

                  int64_t v15 = v14 - 1;
LABEL_44:
                  a5[3] = v15;
                  a5[4] = 0LL;
                  swift_retain(a3);
                  return (unint64_t *)sub_1000E0220(v40, a2, v39, a3);
                }
              }
            }
          }

Swift::Int sub_1000E0220(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_35:
    sub_10001A2D8();
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_10000D33C(&qword_1001CFB50);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  uint64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_1000E04A4(void *a1)
{
  uint64_t v2 = sub_10000D37C(a1, v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

unint64_t *sub_1000E04C0()
{
  return sub_1000DFF48(v3, v2, v0, v1, (void *)(v4 - 136));
}

void sub_1000E04DC()
{
  uint64_t v4 = *(void *)(v3 - 264);
  *(void *)(v3 - 136) = v1;
  *(void *)(v3 - 128) = v4;
  *(void *)(v3 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = *(void *)(v3 - 280);
  *(void *)(v3 - 112) = v2;
  *(void *)(v3 - 104) = v0;
}

uint64_t sub_1000E04FC(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000E050C()
{
  return sub_10004844C(*(void *)(v0 - 136));
}

uint64_t sub_1000E051C()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

  ;
}

  ;
}

void *sub_1000E054C(void *a1)
{
  return memcpy(a1, v1, v2);
}

  ;
}

  ;
}

uint64_t sub_1000E0580(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0LL;
  uint64_t v15 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  uint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  sub_1000E2CD0();
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    sub_1000E2CC4(*(void *)(v2 + 48) + 16 * i);
    sub_1000E2D1C(&v14);
    Swift::Int result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }

void *sub_1000E06E0(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = a2;
  Swift::Int result = sub_1000BE890(v16, a1);
  uint64_t v3 = v16[0];
  uint64_t v4 = v16[1];
  int64_t v5 = v16[3];
  uint64_t v6 = v17;
  int64_t v7 = (unint64_t)(v16[2] + 64LL) >> 6;
  if (!v17) {
    goto LABEL_3;
  }
LABEL_2:
  sub_1000E2CD0();
  unint64_t v9 = v8 | (v5 << 6);
  while (1)
  {
    sub_1000E2CC4(*(void *)(v3 + 48) + 16 * v9);
    sub_1000E2D1C(&v14);
    Swift::Int result = (void *)swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    unint64_t v11 = *(void *)(v4 + 8 * v10);
    int64_t v12 = v5 + 1;
    if (!v11)
    {
      int64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      unint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        unint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          unint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            unint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                unint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_1000E081C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for MercuryCacheMetadata(0LL);
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v25 = (uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v5);
  unint64_t v9 = (void *)((char *)v22 - v8);
  int64_t v10 = _swiftEmptyArrayStorage;
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    v22[1] = v2;
    unint64_t v11 = 0LL;
    int64_t v12 = type metadata accessor for MercuryCacheMetadata;
    while (v11 < *(void *)(a1 + 16))
    {
      unint64_t v13 = (*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      uint64_t v14 = *(void *)(v23 + 72);
      uint64_t v15 = a1;
      sub_1000E21F0(a1 + v13 + v14 * v11, (uint64_t)v9, v12);
      uint64_t v16 = v12;
      uint64_t v17 = *v9;
      uint64_t v18 = v9[1];
      swift_bridgeObjectRetain(v18);
      sub_1000F4E34(v17, v18, v26);
      char v20 = v19;
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        sub_1000D2EE4((uint64_t)v9, v25);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
          sub_100017074();
        }
        int64_t v10 = v27;
        unint64_t v21 = v27[2];
        if (v21 >= v27[3] >> 1)
        {
          sub_100017074();
          int64_t v10 = v27;
        }

        _OWORD v10[2] = v21 + 1;
        uint64_t result = sub_1000D2EE4(v25, (uint64_t)v10 + v13 + v21 * v14);
      }

      else
      {
        uint64_t result = sub_10002F870((uint64_t)v9, v16);
      }

      int64_t v12 = v16;
      ++v11;
      a1 = v15;
      if (v24 == v11)
      {
        int64_t v10 = v27;
        goto LABEL_13;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

  return result;
}

uint64_t sub_1000E0A14(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 257) = a2;
  *(void *)(v3 + 264) = a1;
  *(void *)(v3 + 272) = v2;
  uint64_t updated = type metadata accessor for MercuryCacheDataUpdateHandler(0LL);
  *(void *)(v3 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = updated;
  *(void *)(v3 + 288) = sub_1000E2BF8(*(void *)(updated - 8));
  *(void *)(v3 + 296) = sub_1000CD93C();
  uint64_t v5 = *(void *)(type metadata accessor for MercuryCacheMetadata(0LL) - 8);
  *(void *)(v3 + 304) = v5;
  *(void *)(v3 + 312) = sub_1000E2BF8(v5);
  *(void *)(v3 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_1000CD93C();
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  *(void *)(v3 + 328) = sub_1000D6CFC(*(void *)(v6 - 8));
  uint64_t v7 = type metadata accessor for MercuryCacheUpdateInput(0LL);
  *(void *)(v3 + 336) = v7;
  *(void *)(v3 + 344) = sub_1000E2BF8(*(void *)(v7 - 8));
  *(void *)(v3 + 352) = sub_1000CD93C();
  uint64_t v8 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 368) = v9;
  *(void *)(v3 + 376) = sub_1000D6CFC(v9);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E0AD4()
{
  *(void *)(v0 + 384) = v1;
  if (!v1)
  {
    unint64_t v9 = sub_1000E1F84();
    uint64_t v10 = sub_100020C48((uint64_t)&type metadata for MercuryCacheUpdateTask.UpdateError, v9);
    *unint64_t v11 = 0;
    swift_willThrow(v10);
LABEL_8:
    sub_1000E2BE0();
    sub_1000D6E24();
    sub_1000E2CFC();
    sub_1000E2C54();
    sub_1000E2C80();
    sub_1000E2C4C();
    sub_1000E2C44();
    sub_1000E2C3C();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v2 = v1;
  if (![v1 isActive])
  {
    unint64_t v12 = sub_1000E1F84();
    uint64_t v13 = sub_100020C48((uint64_t)&type metadata for MercuryCacheUpdateTask.UpdateError, v12);
    *uint64_t v14 = 1;
    swift_willThrow(v13);

    goto LABEL_8;
  }

  uint64_t v3 = *(uint64_t **)(v0 + 272);
  uint64_t v4 = *v3;
  *(void *)(v0 + 392) = *v3;
  uint64_t v5 = 17LL;
  if (*((_BYTE *)v3 + 152)) {
    uint64_t v5 = 18LL;
  }
  uint64_t v6 = (void *)v3[v5];
  *(void *)(v0 + 40_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v6;
  id v7 = v6;
  return swift_task_switch(sub_1000E0C10, v4, 0LL);
}

uint64_t sub_1000E0C10()
{
  uint64_t v1 = *(void **)(v0 + 400);
  *(void *)(v0 + 408) = sub_1000D14D8(v1);

  sub_100096178();
  return sub_1000E2BD4(v2, v3, v4);
}

uint64_t sub_1000E0C4C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(*(void *)(v0 + 272) + 56LL);
  *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = swift_unknownObjectRetain(v2);
  static Date.now.getter(v3);
  uint64_t v4 = (void *)swift_task_alloc(dword_1001CCA6C);
  *(void *)(v0 + 424) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000E0CD0;
  return sub_1000D9BF8( *(void *)(v0 + 352),  *(void *)(v0 + 376),  v2,  *(void *)(v0 + 408),  *(void *)(v0 + 264),  *(_BYTE *)(v0 + 257));
}

uint64_t sub_1000E0CD0()
{
  uint64_t v3 = *(void *)(v2 + 424);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 432) = v0;
  swift_task_dealloc(v3);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E0D20()
{
  uint64_t v1 = sub_10000DED8();
  sub_1000E2C0C(v1);
  uint64_t v2 = sub_1000E2C5C();
  *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = sub_1000E2C0C(v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001CCC0C);
  *(void *)(v0 + 448) = v3;
  uint64_t v4 = sub_1000E2C88(v3, (uint64_t)sub_1000E0D8C);
  return sub_1000DEBE0(v4);
}

uint64_t sub_1000E0D8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  *(void *)(*(void *)v1 + 456LL) = a1;
  swift_task_dealloc(v2);
  sub_100009070();
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E0DE0()
{
  uint64_t v102 = v0 + 80;
  uint64_t v104 = v0 + 248;
  uint64_t v105 = v0 + 232;
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v100 = (void *)(v0 + 16);
  uint64_t v101 = *(void *)(v0 + 368);
  uint64_t v3 = *(uint64_t **)(v0 + 352);
  uint64_t v107 = *(void *)(v0 + 360);
  uint64_t v109 = v0 + 112;
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = *(char **)(v0 + 344);
  uint64_t v6 = v3[1];
  sub_10000DEE0();
  sub_1000E2054(v1, v6);
  uint64_t v8 = v7;
  uint64_t v9 = v3[2];
  sub_100020BB4();
  sub_1000E2054(v1, v9);
  uint64_t v11 = v10;
  swift_retain(v8);
  uint64_t v12 = swift_retain(v11);
  uint64_t v13 = sub_1000E2C0C(v12);
  uint64_t v14 = *v3;
  uint64_t v15 = sub_100048A30();
  uint64_t v16 = sub_1000E0580(v15, v13);
  swift_bridgeObjectRetain(v3[3]);
  uint64_t v18 = sub_1000E081C(v17, v16);
  uint64_t v103 = v2;
  uint64_t v19 = *(int *)(v4 + 32);
  char v20 = (char *)v3 + v19;
  Swift::Int v21 = (Swift::Int)v5;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(&v5[v19], v20, v107);
  *(void *)uint64_t v5 = v14;
  *((void *)v5 + Hasher._combine(_:)(v1 & 1) = v8;
  *((void *)v5 + 2) = v11;
  *((void *)v5 + 3) = v18;
  sub_100048A30();
  sub_100009070();
  uint64_t v22 = qword_1001C8068;
  swift_bridgeObjectRetain(v18);
  if (v22 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v108 = v18;
    uint64_t v23 = *(_OWORD **)(v0 + 272);
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
          + 3LL * *(void *)(v25 + 72),
            *(unsigned __int8 *)(v25 + 80) | 7LL);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v99 = v26;
    *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &type metadata for MercuryCacheUpdateTask;
    uint64_t v27 = swift_allocObject(&unk_1001AF950, 169LL, 7LL);
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    uint64_t v28 = sub_1000E21BC(v23, v27 + 16);
    id v29 = (id)AMSLogKey(v28);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      sub_100048A30();
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      sub_10000DC08();
      unint64_t v34 = v100;
      unint64_t v35 = sub_10000D37C(v100, (uint64_t)&type metadata for MercuryCacheUpdateTask);
      uint64_t DynamicType = swift_getDynamicType(v35, &type metadata for MercuryCacheUpdateTask, 1LL);
      *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = swift_getMetatypeMetadata(DynamicType);
      *(void *)(v0 + 176) = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 176);
      sub_10000E888(v0 + 176);
      v37._uint64_t countAndFlagsBits = 5972026LL;
      v37._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      *(void *)(v0 + 168) = &type metadata for String;
      *(void *)(v0 + 144) = v31;
      *(void *)(v0 + 152) = v33;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 144);
      sub_10000E888(v0 + 144);
      v38._uint64_t countAndFlagsBits = 93LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      sub_1000E2D10();
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_10000DC08();
      unint64_t v34 = v100;
      uint64_t v39 = sub_10000D37C(v100, (uint64_t)&type metadata for MercuryCacheUpdateTask);
      uint64_t v40 = swift_getDynamicType(v39, &type metadata for MercuryCacheUpdateTask, 1LL);
      *(void *)(v0 + 72) = swift_getMetatypeMetadata(v40);
      *(void *)(v0 + 48) = v40;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 48);
      sub_10000E888(v0 + 48);
      v41._uint64_t countAndFlagsBits = 58LL;
      v41._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      sub_1000E2D10();
    }

    unint64_t v111 = (void *)v0;
    uint64_t v42 = *(uint64_t **)(v0 + 344);
    uint64_t v43 = *(void *)(v0 + 272);
    uint64_t v44 = *(void *)(v0 + 264);
    char v45 = *(_BYTE *)(v0 + 257);
    sub_10000D3A0(v34);
    uint64_t v46 = *(void **)(v43 + 136);
    uint64_t v47 = *(void **)(v43 + 144);
    char v48 = *(_BYTE *)(v43 + 152);
    *(void *)(v0 + 104) = &unk_1001AF440;
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v46;
    *(void *)(v0 + 88) = v47;
    *(_BYTE *)(v0 + 96) = v48;
    sub_1000D3974(v46, v47, v48);
    static LogMessage.sensitive(_:)(v102);
    sub_10000E888(v102);
    _StringGuts.grow(_:)(35LL);
    *(void *)(v0 + 232) = 0LL;
    *(void *)(v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xE000000000000000LL;
    v49._object = (void *)0x8000000100174260LL;
    v49._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v49);
    uint64_t v50 = *v42;
    swift_bridgeObjectRetain(*v42);
    uint64_t v51 = sub_10000DEE0();
    sub_1000E0580(v51, v50);
    swift_bridgeObjectRetain(*(void *)(v21 + 16));
    uint64_t v53 = sub_1000E2C0C(v52);
    v54._uint64_t countAndFlagsBits = Set.description.getter(v53, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v54);
    sub_10000DDF8();
    sub_100009020();
    v55._uint64_t countAndFlagsBits = 0x646F6D20726F6620LL;
    v55._object = (void *)0xEB00000000203A65LL;
    String.append(_:)(v55);
    *(void *)(v0 + 248) = v44;
    uint64_t v56 = (void *)v0;
    *(_BYTE *)(v0 + 256) = v45;
    _print_unlocked<A, B>(_:_:)( v104,  v105,  &unk_1001AF558,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v57 = *(void *)(v0 + 232);
    uint64_t v58 = *(void *)(v0 + 240);
    *(void *)(v0 + 136) = &type metadata for String;
    *(void *)(v0 + 112) = v57;
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v58;
    static LogMessage.safe(_:)(v109);
    uint64_t v59 = sub_10000E888(v109);
    uint64_t v60 = static os_log_type_t.info.getter(v59);
    sub_1000BD1B0(v60, v99);
    sub_100009020();
    uint64_t v61 = *v42;
    swift_bridgeObjectRetain(*v42);
    uint64_t v62 = sub_10000DEE0();
    uint64_t v63 = sub_1000E0580(v62, v61);
    swift_bridgeObjectRetain(*(void *)(v21 + 16));
    uint64_t v65 = sub_1000E0580(v64, v63);
    sub_1000E1FC0(v65, v45, v65);
    if (v103)
    {
      uint64_t v66 = *(void *)(v0 + 416);
      unint64_t v67 = *(void **)(v0 + 384);
      uint64_t v110 = *(void *)(v0 + 376);
      uint64_t v68 = *(void *)(v0 + 368);
      uint64_t v106 = *(void *)(v0 + 360);
      uint64_t v70 = *(void *)(v0 + 344);
      uint64_t v69 = *(void *)(v0 + 352);
      sub_100009070();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease(v66);
      sub_10000DDF8();
      swift_bridgeObjectRelease();

      sub_1000E2C68(v70);
      sub_1000E2C68(v69);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v110, v106);
      uint64_t v71 = *(void *)(v0 + 352);
      swift_task_dealloc(*(void *)(v0 + 376));
      swift_task_dealloc(v71);
      sub_1000D6E24();
      sub_1000E2C54();
      sub_1000E2C80();
      sub_1000E2C4C();
      sub_1000E2C44();
      sub_1000E2C3C();
      sub_1000E2CA8();
      __asm { BR              X0 }
    }

    sub_100009070();
    uint64_t v0 = *(void *)(v108 + 16);
    if (!v0) {
      break;
    }
    uint64_t v109 = v56[40];
    uint64_t v73 = v56[38];
    uint64_t v74 = v108 + ((*(unsigned __int8 *)(v73 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
    uint64_t v75 = *(void *)(v73 + 72);
    sub_10000DEE0();
    while (1)
    {
      uint64_t v77 = v56[39];
      __int128 v76 = (uint64_t *)v56[40];
      sub_1000E21F0(v74, (uint64_t)v76, type metadata accessor for MercuryCacheMetadata);
      uint64_t v18 = *v76;
      uint64_t v78 = *(void *)(v109 + 8);
      sub_1000E21F0((uint64_t)v76, v77, type metadata accessor for MercuryCacheMetadata);
      sub_100020BB4();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      unint64_t v80 = sub_1000E2CE4();
      uint64_t v82 = _swiftEmptyDictionarySingleton[2];
      BOOL v83 = (v81 & 1) == 0;
      Swift::Int v21 = v82 + v83;
      if (__OFADD__(v82, v83)) {
        break;
      }
      unint64_t v84 = v80;
      char v85 = v81;
      sub_10000D33C(&qword_1001CC5D0);
      Swift::Bool v86 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v21);
      uint64_t v56 = v111;
      if (v86)
      {
        unint64_t v87 = sub_1000E2CE4();
        if ((v85 & 1) != (v88 & 1))
        {
          sub_1000E2CA8();
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v98);
        }

        unint64_t v84 = v87;
      }

      uint64_t v89 = v111[39];
      if ((v85 & 1) != 0)
      {
        sub_1000D2F28(v89, _swiftEmptyDictionarySingleton[7] + v84 * v75);
      }

      else
      {
        _swiftEmptyDictionarySingleton[(v84 >> 6) + 8] |= 1LL << v84;
        uint64_t v90 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v84);
        *uint64_t v90 = v18;
        v90[1] = v78;
        sub_1000D2EE4(v89, _swiftEmptyDictionarySingleton[7] + v84 * v75);
        uint64_t v91 = _swiftEmptyDictionarySingleton[2];
        BOOL v92 = __OFADD__(v91, 1LL);
        uint64_t v93 = v91 + 1;
        if (v92) {
          goto LABEL_22;
        }
        _swiftEmptyDictionarySingleton[2] = v93;
        sub_100020BB4();
      }

      uint64_t v94 = v111[40];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002F870(v94, type metadata accessor for MercuryCacheMetadata);
      v74 += v75;
      if (!--v0)
      {
        sub_100009020();
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once(&qword_1001C8068, sub_1000E1EC4);
  }

uint64_t sub_1000E159C()
{
  uint64_t v2 = *(void *)(v1 + 472);
  *uint64_t v3 = *v0;
  *(void *)(v1 + 48_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v4;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E15DC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CC014);
  *(void *)(v0 + 488) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E1628;
  uint64_t v2 = sub_1000E2D04();
  return sub_1000BF794(v2);
}

uint64_t sub_1000E1628(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 496LL) = a1;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E1678()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CC00C);
  *(void *)(v0 + 504) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000E16C4;
  uint64_t v2 = sub_1000E2D04();
  return sub_1000BF9F0(v2);
}

uint64_t sub_1000E16C4()
{
  uint64_t v2 = *(void *)(v1 + 504);
  *uint64_t v3 = *v0;
  *(void *)(v1 + 512) = v4;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E1704()
{
  uint64_t v1 = (uint64_t *)v0[43];
  uint64_t v2 = v0[34];
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  uint64_t v6 = sub_100020BB4();
  uint64_t v7 = sub_1000E0580(v6, v5);
  swift_bridgeObjectRetain(v1[2]);
  uint64_t v9 = sub_1000E0580(v8, v7);
  v0[65] = v9;
  uint64_t v10 = *(int **)(v3 + 8);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  uint64_t v11 = (void *)swift_task_alloc(v10[1]);
  v0[66] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000E17D4;
  uint64_t v12 = sub_1000E2D04();
  return v14(v12, v4, v9);
}

uint64_t sub_1000E17D4(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[26] = v2;
  v3[27] = a1;
  v3[28] = v1;
  uint64_t v4 = v3[66];
  v3[67] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_bridgeObjectRelease();
  }
  sub_100096178();
  return sub_1000E2BD4(v5, v6, v7);
}

uint64_t sub_1000E183C()
{
  uint64_t v1 = sub_10000DED8();
  sub_1000E2C0C(v1);
  uint64_t v2 = sub_1000E2C5C();
  *(void *)(v0 + 544) = sub_1000E2C0C(v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001CCC14);
  *(void *)(v0 + 552) = v3;
  uint64_t v4 = sub_1000E2C88(v3, (uint64_t)sub_1000E189C);
  return sub_1000E2C14(v4);
}

uint64_t sub_1000E189C()
{
  return sub_10000DD48();
}

uint64_t sub_1000E18D8()
{
  uint64_t v1 = (__int128 *)v0[34];
  uint64_t v2 = (int *)v0[35];
  uint64_t v3 = 136LL;
  if (*((_BYTE *)v1 + 152)) {
    uint64_t v3 = 144LL;
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[64];
  uint64_t v6 = v0[62];
  uint64_t v7 = v0[60];
  uint64_t v8 = v0[58];
  uint64_t v9 = (void *)v0[37];
  uint64_t v10 = *(void **)((char *)v1 + v3);
  v0[70] = v4;
  id v11 = v10;
  sub_1000E2CF0((uint64_t)v11, v12, type metadata accessor for MercuryCacheUpdateInput);
  uint64_t v13 = sub_10000DEE0();
  static Date.now.getter(v13);
  sub_10004C420((uint64_t)(v1 + 1), (uint64_t)v9 + v2[11]);
  __int128 v14 = *v1;
  *uint64_t v9 = v11;
  v9[1] = v8;
  *(void *)((char *)v9 + v2[7]) = v7;
  *(void *)((char *)v9 + v2[8]) = v6;
  *(void *)((char *)v9 + v2[10]) = v5;
  *(_OWORD *)((char *)v9 + v2[12]) = v14;
  swift_unknownObjectRetain(v14);
  sub_100009020();
  uint64_t v15 = (void *)swift_task_alloc(dword_1001CC1D4);
  v0[71] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1000E19FC;
  return sub_1000CA34C(v4);
}

uint64_t sub_1000E19FC()
{
  uint64_t v1 = *(void *)(v0 + 296);
  sub_1000D6DA0(*(void *)(v0 + 568));
  sub_100009070();
  sub_10002F870(v1, type metadata accessor for MercuryCacheDataUpdateHandler);
  sub_100096178();
  return sub_1000E2BD4(v2, v3, v4);
}

uint64_t sub_1000E1A4C()
{
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  uint64_t v6 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v8 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v11 = *(void *)(v0 + 288);
  swift_unknownObjectRelease(*(void *)(v0 + 416));
  swift_bridgeObjectRelease();
  sub_100009020();

  sub_10002F870(v6, type metadata accessor for MercuryCacheUpdateInput);
  sub_10002F870(v5, type metadata accessor for MercuryCacheUpdateInput);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000E2C54();
  sub_1000E2C4C();
  sub_1000E2C44();
  sub_1000E2C3C();
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1B38()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void **)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 368);
  swift_unknownObjectRelease(*(void *)(v0 + 416));
  sub_100009070();
  sub_10000DDF8();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  sub_1000E2BE0();
  sub_1000D6E24();
  sub_1000E2CFC();
  sub_1000E2C54();
  sub_1000E2C80();
  sub_1000E2C4C();
  sub_1000E2C44();
  sub_1000E2C3C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E1BCC()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[34];
  swift_bridgeObjectRelease();
  uint64_t v3 = (void *)_convertErrorToNSError(_:)(v1);
  char v4 = sub_1000E2020();

  uint64_t v5 = 136LL;
  if (*(_BYTE *)(v2 + 152)) {
    uint64_t v5 = 144LL;
  }
  uint64_t v6 = v0[64];
  uint64_t v7 = v0[62];
  uint64_t v8 = v0[60];
  uint64_t v9 = v0[58];
  uint64_t v11 = (int *)v0[35];
  uint64_t v10 = (void *)v0[36];
  uint64_t v12 = (__int128 *)v0[34];
  id v13 = *(id *)((char *)v12 + v5);
  sub_1000E2CF0((uint64_t)v13, v14, type metadata accessor for MercuryCacheUpdateInput);
  uint64_t v15 = sub_10000DEE0();
  static Date.now.getter(v15);
  sub_10004C420((uint64_t)(v12 + 1), (uint64_t)v10 + v11[11]);
  __int128 v16 = *v12;
  *uint64_t v10 = v13;
  v10[1] = v9;
  *(void *)((char *)v10 + v11[7]) = v8;
  *(void *)((char *)v10 + v11[8]) = v7;
  *(void *)((char *)v10 + v11[10]) = v6;
  *(_OWORD *)((char *)v10 + v11[12]) = v16;
  swift_unknownObjectRetain(v16);
  sub_100009020();
  uint64_t v17 = (void *)swift_task_alloc(dword_1001CC1E4);
  v0[72] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_1000E1D14;
  return sub_1000CA710(v4 & 1);
}

uint64_t sub_1000E1D14()
{
  uint64_t v1 = *(void *)(v0 + 288);
  sub_1000D6DA0(*(void *)(v0 + 576));
  sub_10002F870(v1, type metadata accessor for MercuryCacheDataUpdateHandler);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000E1D5C()
{
  uint64_t v1 = sub_10000DED8();
  sub_1000E2C0C(v1);
  uint64_t v2 = sub_1000E2C5C();
  *(void *)(v0 + 584) = sub_1000E2C0C(v2);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001CCC14);
  *(void *)(v0 + 592) = v3;
  uint64_t v4 = sub_1000E2C88(v3, (uint64_t)sub_1000E1DBC);
  return sub_1000E2C14(v4);
}

uint64_t sub_1000E1DBC()
{
  return sub_10000DD48();
}

uint64_t sub_1000E1DF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 416);
  uint64_t v3 = *(void **)(v1 + 384);
  uint64_t v9 = *(void *)(v1 + 376);
  uint64_t v5 = *(void *)(v1 + 360);
  uint64_t v4 = *(void *)(v1 + 368);
  uint64_t v7 = *(void *)(v1 + 344);
  uint64_t v6 = *(void *)(v1 + 352);
  swift_willThrow(a1);
  swift_unknownObjectRelease(v2);
  sub_100009020();
  swift_bridgeObjectRelease();

  sub_1000E2C68(v7);
  sub_1000E2C68(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v5);
  sub_1000E2BE0();
  sub_1000D6E24();
  sub_1000E2CFC();
  sub_1000E2C54();
  sub_1000E2C80();
  sub_1000E2C4C();
  sub_1000E2C44();
  sub_1000E2C3C();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000E1EC4()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CCCC0 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

void sub_1000E1F0C()
{
  uint64_t v1 = *(void **)(v0 + 136);
  if ((*(_BYTE *)(v0 + 152) & 1) != 0)
  {
    id v2 = v1;
  }

  else
  {
    uint64_t v3 = *(void **)(v0 + 144);
    (*(void (**)(id, void, void))(*(void *)(v0 + 72) + 8))( [v1 integerValue],  *(void *)(v0 + 64),  *(void *)(v0 + 72));
    sub_1000D39AC(v1, v3, 0);
  }

  sub_10001A094();
}

unint64_t sub_1000E1F84()
{
  unint64_t result = qword_1001CCCD0;
  if (!qword_1001CCCD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167C10, &type metadata for MercuryCacheUpdateTask.UpdateError);
    atomic_store(result, (unint64_t *)&qword_1001CCCD0);
  }

  return result;
}

void sub_1000E1FC0(uint64_t a1, char a2, uint64_t a3)
{
  if (a2)
  {
    if (!*(void *)(a3 + 16))
    {
      unint64_t v3 = sub_1000E1F84();
      uint64_t v4 = swift_allocError(&type metadata for MercuryCacheUpdateTask.UpdateError, v3, 0LL, 0LL);
      *uint64_t v5 = 4;
      swift_willThrow(v4);
    }
  }

uint64_t sub_1000E2020()
{
  BOOL v0 = (unint64_t)(sub_1000FDE60() - 500) < 0xFFFFFFFFFFFFFF9CLL;
  return (v1 | v0) & 1;
}

void sub_1000E2054(uint64_t isStackAllocationSafe, uint64_t a2)
{
  char v2 = *(_BYTE *)(a2 + 32);
  unsigned int v3 = v2 & 0x3F;
  unint64_t v4 = (1LL << v2) + 63;
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = 8 * (v4 >> 6);
  if (v3 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v4 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    sub_1000E2C98();
    sub_1000E2C24();
    uint64_t v6 = v5;
    uint64_t v7 = sub_10001A2D8();
    if (!v5)
    {
LABEL_7:
      sub_10001A094();
      return;
    }

    swift_willThrow(v7);
    swift_errorRelease(v5);
    __break(1u);
  }

  swift_slowAlloc(v6, -1LL);
  sub_1000E2C98();
  sub_1000E2C24();
  sub_10001A2D8();
  if (!v5)
  {
    sub_1000E2C70();
    goto LABEL_7;
  }

  swift_errorRelease(v5);
  sub_1000E2C70();
  __break(1u);
}

uint64_t sub_1000E2174()
{
  return swift_deallocObject(v0, 169LL, 7LL);
}

uint64_t sub_1000E21BC(_OWORD *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000E21F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

Swift::Int sub_1000E2234(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v63 = (unint64_t *)result;
  unint64_t v6 = *(void *)(a3 + 16);
  unint64_t v7 = *(void *)(a4 + 16);
  uint64_t v72 = a4;
  if (v7 >= v6)
  {
    int64_t v38 = 0LL;
    uint64_t v66 = a3 + 56;
    uint64_t v67 = 0LL;
    uint64_t v39 = 1LL << *(_BYTE *)(a3 + 32);
    if (v39 < 64) {
      uint64_t v40 = ~(-1LL << v39);
    }
    else {
      uint64_t v40 = -1LL;
    }
    unint64_t v41 = v40 & *(void *)(a3 + 56);
    int64_t v69 = (unint64_t)(v39 + 63) >> 6;
    uint64_t v42 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v41)
        {
          unint64_t v43 = __clz(__rbit64(v41));
          v41 &= v41 - 1;
          unint64_t v44 = v43 | (v38 << 6);
        }

        else
        {
          int64_t v45 = v38 + 1;
          if (__OFADD__(v38, 1LL))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }

          if (v45 >= v69) {
            goto LABEL_79;
          }
          unint64_t v46 = *(void *)(v66 + 8 * v45);
          ++v38;
          if (!v46)
          {
            int64_t v38 = v45 + 1;
            if (v45 + 1 >= v69) {
              goto LABEL_79;
            }
            unint64_t v46 = *(void *)(v66 + 8 * v38);
            if (!v46)
            {
              int64_t v38 = v45 + 2;
              if (v45 + 2 >= v69) {
                goto LABEL_79;
              }
              unint64_t v46 = *(void *)(v66 + 8 * v38);
              if (!v46)
              {
                int64_t v47 = v45 + 3;
                if (v47 >= v69) {
                  goto LABEL_79;
                }
                unint64_t v46 = *(void *)(v66 + 8 * v47);
                if (!v46)
                {
                  while (1)
                  {
                    int64_t v38 = v47 + 1;
                    if (__OFADD__(v47, 1LL)) {
                      goto LABEL_85;
                    }
                    if (v38 >= v69) {
                      break;
                    }
                    unint64_t v46 = *(void *)(v66 + 8 * v38);
                    ++v47;
                    if (v46) {
                      goto LABEL_61;
                    }
                  }

LABEL_79:
                  swift_retain(v5);
                  return sub_1000E0220(v63, a2, v67, v5);
                }

                int64_t v38 = v47;
              }
            }
          }

LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t storeEnumTagSinglePayload for MercuryCacheUpdateTask.UpdateError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000E27BC + 4 * byte_100167B75[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E27F0 + 4 * byte_100167B70[v4]))();
}

uint64_t sub_1000E27F0(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000E27F8(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E2800LL);
  }
  return result;
}

uint64_t sub_1000E280C(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E2814LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000E2818(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

uint64_t sub_1000E2820(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v1 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheUpdateTask.UpdateError()
{
  return &type metadata for MercuryCacheUpdateTask.UpdateError;
}

void destroy for MercuryCacheUpdateTask(uint64_t a1)
{
}

uint64_t initializeWithCopy for MercuryCacheUpdateTask(uint64_t a1, _OWORD *a2)
{
  char v2 = a2;
  __int128 v4 = *a2;
  *(_OWORD *)a1 = *a2;
  uint64_t v5 = a1 + 16;
  unint64_t v6 = a2 + 1;
  __int128 v7 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v7;
  uint64_t v8 = v7;
  uint64_t v9 = **(void (***)(uint64_t, _OWORD *, uint64_t))(v7 - 8);
  swift_unknownObjectRetain(v4);
  v9(v5, v6, v8);
  __int128 v10 = *(_OWORD *)((char *)v2 + 56);
  *(_OWORD *)(a1 + 56) = v10;
  uint64_t v11 = *((void *)v2 + 11);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)v2 + 72);
  *(void *)(a1 + 88) = v11;
  __int128 v12 = *(_OWORD *)((char *)v2 + 120);
  *(_OWORD *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v12;
  uint64_t v13 = v12;
  unint64_t v14 = **(void (***)(uint64_t, _OWORD *, uint64_t))(v12 - 8);
  swift_unknownObjectRetain(v10);
  v14(a1 + 96, v2 + 6, v13);
  int64_t v15 = (void *)*((void *)v2 + 17);
  unint64_t v16 = (void *)*((void *)v2 + 18);
  LOBYTE(sub_10009A3C4(v0 + v2) = *((_BYTE *)v2 + 152);
  sub_1000D3974(v15, v16, (char)v2);
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v16;
  *(_BYTE *)(a1 + 152) = (_BYTE)v2;
  return a1;
}

uint64_t *assignWithCopy for MercuryCacheUpdateTask(uint64_t *a1, void *a2)
{
  char v2 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  sub_1000CD368(a1 + 2, v2 + 2);
  uint64_t v7 = v2[7];
  uint64_t v8 = a1[7];
  a1[7] = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v8);
  *((_OWORD *)a1 + 4) = *((_OWORD *)v2 + 4);
  *((_OWORD *)a1 + 5) = *((_OWORD *)v2 + 5);
  sub_1000CD368(a1 + 12, v2 + 12);
  uint64_t v9 = (void *)v2[17];
  __int128 v10 = (void *)v2[18];
  LOBYTE(sub_10009A3C4(v0 + v2) = *((_BYTE *)v2 + 152);
  sub_1000D3974(v9, v10, (char)v2);
  uint64_t v11 = (void *)a1[17];
  __int128 v12 = (void *)a1[18];
  char v13 = *((_BYTE *)a1 + 152);
  a1[17] = (uint64_t)v9;
  a1[18] = (uint64_t)v10;
  *((_BYTE *)a1 + 152) = (_BYTE)v2;
  sub_1000D39AC(v11, v12, v13);
  return a1;
}

void *initializeWithTake for MercuryCacheUpdateTask(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x99uLL);
}

uint64_t *assignWithTake for MercuryCacheUpdateTask(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v5);
  a1[1] = v4;
  sub_10000D3A0(a1 + 2);
  __int128 v6 = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + Hasher._combine(_:)(v1 & 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)a1 + 2) = v6;
  uint64_t v7 = a2[7];
  uint64_t v8 = a1[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_unknownObjectRelease(v8);
  __int128 v9 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v9;
  sub_10000D3A0(a1 + 12);
  __int128 v10 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v10;
  a1[16] = a2[16];
  char v11 = *((_BYTE *)a2 + 152);
  __int128 v12 = (void *)a1[17];
  char v13 = (void *)a1[18];
  char v14 = *((_BYTE *)a1 + 152);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *((_BYTE *)a1 + 152) = v11;
  sub_1000D39AC(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for MercuryCacheUpdateTask(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 153))
    {
      LODWORD(sub_10009A3C4(v0 + v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(sub_10009A3C4(v0 + v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MercuryCacheUpdateTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 152) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 153) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MercuryCacheUpdateTask()
{
  return &type metadata for MercuryCacheUpdateTask;
}

unint64_t sub_1000E2B70()
{
  unint64_t result = qword_1001CCCD8;
  if (!qword_1001CCCD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167BE8, &type metadata for MercuryCacheUpdateTask.UpdateError);
    atomic_store(result, (unint64_t *)&qword_1001CCCD8);
  }

  return result;
}

double sub_1000E2BAC()
{
  *(void *)&double result = swift_bridgeObjectRetain(*v1).n128_u64[0];
  return result;
}

uint64_t sub_1000E2BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000E2BE0()
{
  return swift_task_dealloc(*(void *)(v0 + 376));
}

uint64_t sub_1000E2BF8@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc((*(void *)(a1 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000E2C0C(uint64_t a1)
{
  return sub_1000E0580(a1, v1);
}

uint64_t sub_1000E2C14(uint64_t a1)
{
  return sub_1000DEF40(a1);
}

Swift::Int sub_1000E2C24()
{
  return sub_1000E2234(v3, v2, v0, v1);
}

uint64_t sub_1000E2C3C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2C44()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2C4C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2C54()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2C5C()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1000E2C68(uint64_t a1)
{
  return sub_10002F870(a1, v1);
}

uint64_t sub_1000E2C70()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_1000E2C80()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_1000E2C98()
{
  return sub_100149C08(0LL, v0, v1);
}

  ;
}

uint64_t sub_1000E2CC4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 + 8));
}

  ;
}

unint64_t sub_1000E2CE4()
{
  return sub_100030CCC(v1, v0);
}

uint64_t sub_1000E2CF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return sub_1000E21F0(v3, v4, a3);
}

uint64_t sub_1000E2CFC()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000E2D04()
{
  return v0;
}

uint64_t sub_1000E2D10()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000E2D1C(uint64_t *a1)
{
  return sub_100148020(a1, v1, v2);
}

void sub_1000E2D28(uint64_t a1)
{
  id v4 = [objc_allocWithZone(AMSEngagementPushEvent) init];
  uint64_t v2 = sub_10000D33C(&qword_1001C8F00);
  uint64_t v3 = swift_allocObject(v2, 40LL, 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(v3 + 32) = a1;
  swift_bridgeObjectRetain(a1);
  sub_10006B848(v3, v4);
  type metadata accessor for MessageEventNotifier();
  sub_1000E2DF4((uint64_t)v4);
}

uint64_t type metadata accessor for MessageAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd13MessageAction);
}

void sub_1000E2DE0(uint64_t a1)
{
}

uint64_t sub_1000E2DF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  unint64_t v53 = (uint64_t *)v5;
  uint64_t v50 = v8 | 7;
  uint64_t v51 = v9 + 2 * v7;
  int64_t v10 = swift_allocObject(v5, v51, v8 | 7);
  __int128 v49 = xmmword_100164230;
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v52 = v9;
  uint64_t v48 = sub_10000D33C((uint64_t *)&unk_1001CCE10);
  uint64_t v58 = v48;
  v57[0] = v2;
  id v11 = (id)AMSLogKey(v48);
  if (v11)
  {
    __int128 v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    sub_1000E3618();
    sub_100037DD0();
    sub_10008E3CC();
    uint64_t v16 = sub_100010530();
    sub_1000E35F4(v16);
    sub_10008F0E0();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v54 = v13;
    uint64_t v55 = v15;
    sub_10000DF68();
    sub_10008F0E0();
    sub_10000DC4C(93LL);
    sub_10006796C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000E3608();
    sub_100037DD0();
    sub_10008E3CC();
    uint64_t v17 = sub_100010530();
    sub_1000E35F4(v17);
    sub_10008F0E0();
    sub_10000DC4C(58LL);
    sub_10006796C();
  }

  unint64_t v18 = 0xD000000000000014LL;
  sub_10000D3A0(v57);
  uint64_t v19 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
  if (qword_1001C7F80 == -1) {
    goto LABEL_5;
  }
LABEL_34:
  uint64_t v19 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
LABEL_5:
  uint64_t v20 = static os_log_type_t.debug.getter(v19);
  sub_1000BD1B0(v20, v10);
  swift_bridgeObjectRelease();
  if (qword_1001C7F20 != -1) {
    swift_once(&qword_1001C7F20, sub_10001DBA4);
  }
  uint64_t v21 = sub_10001D718();
  uint64_t v22 = v21;
  if (*(void *)(v21 + 16))
  {
    unint64_t v53 = &v47;
    sub_1000BE890(v57, v21);
    uint64_t v23 = v57[0];
    uint64_t v24 = v57[1];
    uint64_t v25 = v58;
    unint64_t v18 = v59;
    int64_t v10 = (unint64_t)(v57[2] + 64LL) >> 6;
    swift_bridgeObjectRetain(v22);
    if (v18)
    {
LABEL_9:
      unint64_t v26 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_26;
    }

    while (1)
    {
      int64_t v28 = v25 + 1;
      if (__OFADD__(v25, 1LL))
      {
        __break(1u);
        goto LABEL_34;
      }

      if (v28 >= v10) {
        goto LABEL_28;
      }
      unint64_t v29 = *(void *)(v24 + 8 * v28);
      uint64_t v30 = v25 + 1;
      if (!v29)
      {
        uint64_t v30 = v25 + 2;
        if (v25 + 2 >= v10) {
          goto LABEL_28;
        }
        unint64_t v29 = *(void *)(v24 + 8 * v30);
        if (!v29)
        {
          uint64_t v30 = v25 + 3;
          if (v25 + 3 >= v10) {
            goto LABEL_28;
          }
          unint64_t v29 = *(void *)(v24 + 8 * v30);
          if (!v29)
          {
            uint64_t v30 = v25 + 4;
            if (v25 + 4 >= v10) {
              goto LABEL_28;
            }
            unint64_t v29 = *(void *)(v24 + 8 * v30);
            if (!v29)
            {
              uint64_t v30 = v25 + 5;
              if (v25 + 5 >= v10) {
                goto LABEL_28;
              }
              unint64_t v29 = *(void *)(v24 + 8 * v30);
              if (!v29) {
                break;
              }
            }
          }
        }
      }

id sub_1000E32D4(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  int64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = type metadata accessor for LogMessage(0LL);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
        + 4LL * *(void *)(*(void *)(v12 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
  id v36 = (void *)sub_10000D33C((uint64_t *)&unk_1001CCE10);
  v35[0] = a3;
  id v14 = (id)AMSLogKey(v36);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v36;
    uint64_t v21 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v23._uint64_t countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v16;
    v33[1] = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v24._uint64_t countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    unint64_t v26 = v36;
    unint64_t v27 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    v33[0] = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000E888((uint64_t)v33);
    v29._uint64_t countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(v35);
  LogMessage.init(stringLiteral:)(0x6E69796669746F4ELL);
  id v36 = &type metadata for Int32;
  LODWORD(v35[0]) = a1;
  static LogMessage.safe(_:)(v35);
  sub_10000E888((uint64_t)v35);
  uint64_t v30 = LogMessage.init(stringLiteral:)(0xD000000000000010LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v30 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v31 = static os_log_type_t.debug.getter(v30);
  sub_1000BD1B0(v31, v13);
  swift_bridgeObjectRelease();
  return [a2 handlePushedEvent:a4];
}

uint64_t type metadata accessor for MessageEventNotifier()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20MessageEventNotifier);
}

uint64_t sub_1000E35F4(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 152) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 152);
}

uint64_t sub_1000E3608()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
}

uint64_t sub_1000E3618()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
}

uint64_t sub_1000E3628(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    uint64_t v17 = a2;
    unint64_t v19 = v3 & 0xC000000000000001LL;
    a2 += 120LL;
    for (uint64_t i = 4LL; ; ++i)
    {
      if (v19)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3);
      }

      else
      {
        uint64_t v6 = *(void **)(v3 + 8 * i);
        swift_unknownObjectRetain(v6);
      }

      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v8 = [v6 identifier];
      uint64_t v9 = v4;
      uint64_t v10 = v3;
      id v11 = [v8 name];
      swift_unknownObjectRelease(v8);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      uint64_t v3 = v10;
      uint64_t v4 = v9;
      swift_beginAccess(a2, v18, 33LL, 0LL);
      sub_100116588(v12, v14);
      swift_endAccess(v18);
      swift_unknownObjectRelease(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7 == v9)
      {
        swift_release(v17);
        return swift_bridgeObjectRelease();
      }
    }

    __break(1u);
LABEL_11:
    if (v3 < 0) {
      uint64_t v16 = v3;
    }
    else {
      uint64_t v16 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
  }

  swift_release(a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E37DC(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    uint64_t v17 = a2;
    unint64_t v19 = v3 & 0xC000000000000001LL;
    a2 += 120LL;
    for (uint64_t i = 4LL; ; ++i)
    {
      if (v19)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v3);
      }

      else
      {
        uint64_t v6 = *(void **)(v3 + 8 * i);
        swift_unknownObjectRetain(v6);
      }

      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1LL)) {
        break;
      }
      id v8 = [v6 name];
      uint64_t v9 = v4;
      uint64_t v10 = v3;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      uint64_t v13 = v12;

      swift_beginAccess(a2, v18, 33LL, 0LL);
      uint64_t v14 = v11;
      uint64_t v3 = v10;
      uint64_t v4 = v9;
      sub_100116588(v14, v13);
      swift_endAccess(v18);
      swift_unknownObjectRelease(v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7 == v9)
      {
        swift_release(v17);
        return swift_bridgeObjectRelease();
      }
    }

    __break(1u);
LABEL_11:
    if (v3 < 0) {
      uint64_t v16 = v3;
    }
    else {
      uint64_t v16 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
  }

  swift_release(a2);
  return swift_bridgeObjectRelease();
}

void sub_1000E396C(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4 = v17[0];
  uint64_t v5 = v17[1];
  int64_t v6 = v17[3];
  unint64_t v7 = v17[4];
  int64_t v8 = (unint64_t)(v17[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v6 << 6);
  while (1)
  {
    sub_10002C644(*(void *)(v4 + 48) + 40 * v10, (uint64_t)v15);
    id v16 = *(id *)(*(void *)(v4 + 56) + 8 * v10);
    a2(v15, v16);
    sub_10000DA68((uint64_t)v15, (uint64_t *)&unk_1001CD410);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_21;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    int64_t v13 = v6 + 1;
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_21;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_21;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_21;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_21;
            }
            unint64_t v12 = *(void *)(v5 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v6 + 6;
              while (v14 < v8)
              {
                unint64_t v12 = *(void *)(v5 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }

void sub_1000E3AF8(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t v4 = v18[0];
  uint64_t v5 = v18[1];
  int64_t v6 = v18[3];
  unint64_t v7 = v18[4];
  int64_t v8 = (unint64_t)(v18[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v6 << 6);
  while (1)
  {
    sub_10002C644(*(void *)(v4 + 48) + 40 * v10, (uint64_t)v16);
    uint64_t v15 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
    uint64_t v17 = v15;
    swift_unknownObjectRetain(v15);
    a2(v16, v15);
    sub_10000DA68((uint64_t)v16, &qword_1001CD468);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v11 >= v8) {
      goto LABEL_21;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    int64_t v13 = v6 + 1;
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_21;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_21;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_21;
          }
          unint64_t v12 = *(void *)(v5 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_21;
            }
            unint64_t v12 = *(void *)(v5 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v6 + 6;
              while (v14 < v8)
              {
                unint64_t v12 = *(void *)(v5 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }

void *sub_1000E3C88(unint64_t a1, IMP *p_imp)
{
  uint64_t v3 = a1;
  id v36 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  uint64_t v5 = (uint64_t *)(p_imp + 15);
  swift_beginAccess(p_imp + 15, v35, 0LL, 0LL);
  if (v4)
  {
    unint64_t v27 = p_imp;
    unint64_t v6 = 0LL;
    uint64_t v30 = v3 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v31 = v3 & 0xC000000000000001LL;
    p_imp = &stru_1001C1FF0.imp;
    uint64_t v28 = v4;
    uint64_t v29 = v3;
    while (1)
    {
      if (v31)
      {
        unint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }

      else
      {
        if (v6 >= *(void *)(v30 + 16))
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          if (v3 < 0) {
            uint64_t v26 = v3;
          }
          else {
            uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8LL;
          }
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v26);
          goto LABEL_3;
        }

        unint64_t v7 = *(void **)(v3 + 8 * v6 + 32);
        swift_unknownObjectRetain(v7);
      }

      if (__OFADD__(v6, 1LL)) {
        goto LABEL_18;
      }
      unint64_t v32 = v6 + 1;
      uint64_t v8 = *v5;
      id v9 = objc_msgSend(v7, "identifier", swift_bridgeObjectRetain(*v5).n128_f64[0]);
      id v10 = objc_msgSend(v9, (SEL)p_imp[363]);
      swift_unknownObjectRelease(v9);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      unint64_t v12 = p_imp;
      uint64_t v14 = v13;

      sub_1000F4E34(v11, v14, v8);
      LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v15;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
      {
        swift_unknownObjectRelease(v7);
      }

      else
      {
        id v16 = [v7 identifier];
        id v17 = [v16 (SEL)v12[363]];
        swift_unknownObjectRelease(v16);
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v20 = v19;

        swift_beginAccess(v5, v33, 33LL, 0LL);
        sub_100148020(&v34, v18, v20);
        swift_endAccess(v33);
        uint64_t v21 = swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        uint64_t v22 = v36[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v7);
        specialized ContiguousArray._endMutation()(v23);
      }

      uint64_t v3 = v29;
      ++v6;
      p_imp = (IMP *)(&stru_1001C1FF0 + 16);
      if (v32 == v28)
      {
        Swift::String v24 = v36;
        p_imp = v27;
        goto LABEL_16;
      }
    }
  }

  Swift::String v24 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_release(p_imp);
  swift_bridgeObjectRelease();
  return v24;
}

void *sub_1000E3F10(unint64_t a1, IMP *p_imp)
{
  uint64_t v3 = a1;
  unint64_t v33 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  uint64_t v5 = (uint64_t *)(p_imp + 15);
  swift_beginAccess(p_imp + 15, v32, 0LL, 0LL);
  if (v4)
  {
    Swift::String v25 = p_imp;
    unint64_t v6 = 0LL;
    uint64_t v28 = v3 & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v29 = v3 & 0xC000000000000001LL;
    p_imp = &stru_1001C1FF0.imp;
    uint64_t v26 = v3;
    uint64_t v27 = v4;
    while (1)
    {
      if (v29)
      {
        unint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      }

      else
      {
        if (v6 >= *(void *)(v28 + 16))
        {
          __break(1u);
LABEL_18:
          __break(1u);
LABEL_19:
          if (v3 < 0) {
            uint64_t v24 = v3;
          }
          else {
            uint64_t v24 = v3 & 0xFFFFFFFFFFFFFF8LL;
          }
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v24);
          goto LABEL_3;
        }

        unint64_t v7 = *(void **)(v3 + 8 * v6 + 32);
        swift_unknownObjectRetain(v7);
      }

      unint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_18;
      }
      uint64_t v9 = *v5;
      id v10 = objc_msgSend(v7, "name", swift_bridgeObjectRetain(*v5).n128_f64[0]);
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      sub_1000F4E34(v11, v13, v9);
      LOBYTE(v1Hasher._combine(_:)(v1 & 1) = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
      {
        swift_unknownObjectRelease(v7);
      }

      else
      {
        id v15 = [v7 name];
        uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v18 = v17;

        swift_beginAccess(v5, v30, 33LL, 0LL);
        sub_100148020(&v31, v16, v18);
        swift_endAccess(v30);
        uint64_t v19 = swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v19);
        uint64_t v20 = v33[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
        uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v7);
        specialized ContiguousArray._endMutation()(v21);
      }

      uint64_t v3 = v26;
      ++v6;
      if (v8 == v27)
      {
        uint64_t v22 = v33;
        p_imp = v25;
        goto LABEL_16;
      }
    }
  }

  uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_release(p_imp);
  swift_bridgeObjectRelease();
  return v22;
}

void sub_1000E4144()
{
  uint64_t v0 = type metadata accessor for MetricsIdentifierCloudDataController();
  uint64_t v1 = sub_10000DDDC(v0, 216LL);
  sub_1000E544C();
  qword_1001DBB98 = v1;
}

uint64_t sub_1000E417C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  sub_10000D8C4(v0, qword_1001CCE20);
  sub_10000D7B8(v0, (uint64_t)qword_1001CCE20);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(2LL);
}

uint64_t sub_1000E41C8()
{
  uint64_t v2 = *(void *)(v1 + 48);
  if (v2)
  {
    uint64_t v0 = *(void *)(v1 + 48);
  }

  else
  {
    uint64_t v3 = *(void **)(v1 + 40);
    if (v3)
    {
      uint64_t v0 = *(void *)(v1 + 40);
    }

    else
    {
      objc_msgSend( objc_msgSend(objc_allocWithZone((Class)AMSCloudDataContainerOptions), "init"),  "setRecordZoneEncryption:",  1);
      id v4 = *(id *)(v1 + 72);
      sub_100048BA0();
      NSString v5 = String._bridgeToObjectiveC()();
      id v6 = sub_1000F03CC((uint64_t)v5, "containerWithContainerIdentifier:options:");
      sub_1000F050C();

      uint64_t v3 = 0LL;
    }

    *(void *)(v1 + 48) = v0;
    id v7 = v3;
    sub_1000F0294();
    sub_1000B1A94();
    uint64_t v2 = 0LL;
  }

  swift_unknownObjectRetain(v2);
  return v0;
}

BOOL sub_1000E42AC()
{
  uint64_t v0 = sub_1000378A0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  sub_10004895C();
  id v4 = (char *)(v2 - v3);
  __chkstk_darwin(v5);
  id v7 = (char *)&v14 - v6;
  sub_1000E47EC();
  double v8 = sub_1000E43D0();
  Date.addingTimeInterval(_:)(v8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v10 = v9(v4, v0);
  double v11 = Date.timeIntervalSinceNow.getter(v10);
  uint64_t v12 = v9(v7, v0);
  return (Double.sign.getter(v12, v11) & 1) == 0;
}

uint64_t sub_1000E4378()
{
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  return OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB40 + 16));
}

double sub_1000E43D0()
{
  uint64_t v46 = v2;
  uint64_t v47 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DC74();
  uint64_t v5 = (void *)v0[4];
  sub_100048BA0();
  String._bridgeToObjectiveC()();
  id v6 = sub_100051B28(v5, "doubleForKey:");
  sub_1000F050C();
  id v8 = sub_1000F03BC(v7, "valuePromise");
  v44[0] = 0LL;
  id v9 = [v8 resultWithError:v44];

  id v10 = v44[0];
  if (v9)
  {
    id v11 = v44[0];
    [v9 doubleValue];
    double v13 = v12;

    uint64_t v5 = v9;
  }

  else
  {
    id v14 = v44[0];
    uint64_t v15 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
    sub_1000F0334();
    uint64_t v20 = (__n128 *)swift_allocObject(v17, v1 + 3 * v18, v19 | 7);
    uint64_t v45 = sub_1000F0424(v20, (__n128)xmmword_100164240);
    v44[0] = v0;
    uint64_t v21 = sub_10002C7E8();
    id v22 = (id)AMSLogKey(v21);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v26 = v25;

      sub_100020BB4();
      sub_100010564();
      sub_10000DC08();
      uint64_t v27 = v45;
      uint64_t v28 = sub_10000D37C(v44, v45);
      uint64_t v29 = sub_10000DC54((uint64_t)v28, v27);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
      v42[0] = v29;
      sub_1000675BC();
      sub_100067788((uint64_t)v42);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      v42[0] = v24;
      v42[1] = v26;
      sub_1000675BC();
      sub_100067788((uint64_t)v42);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_100020AB8();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v30 = v45;
      uint64_t v31 = sub_10000D37C(v44, v45);
      uint64_t v32 = sub_10000DC54((uint64_t)v31, v30);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v32);
      v42[0] = v32;
      sub_1000675BC();
      sub_10000DA68((uint64_t)v42, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v44);
    sub_1000105B4(0xD00000000000003BLL);
    swift_getErrorValue(v15, &v41, &v39);
    uint64_t v33 = v39;
    uint64_t v34 = v40;
    uint64_t v45 = v40;
    uint64_t v35 = sub_10000D63C(v44);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16LL))(v35, v33, v34);
    static LogMessage.safe(_:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    uint64_t v37 = static os_log_type_t.debug.getter(v36);
    sub_1000F0484(v37, (uint64_t)v20);
    sub_10000DDF8();
    swift_errorRelease(v15);
    double v13 = 21600.0;
  }

  return v13;
}

uint64_t sub_1000E4740(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 setValue:isa forKey:v4];

  uint64_t v5 = sub_1000378A0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t sub_1000E47EC()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 doubleForKey:v1];
  double v3 = v2;

  return Date.init(timeIntervalSince1970:)(v3);
}

void sub_1000E4870()
{
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_1000292E4();
  sub_1000E51E4();
  uint64_t v10 = v9;
  if (v4)
  {
    if (v9)
    {
      BOOL v11 = v8 == v6 && v9 == v4;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v8, v9, 0LL) & 1) != 0)
      {
        sub_10000DCFC();
        swift_bridgeObjectRelease();
        return;
      }
    }

    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_1000F0344();
    uint64_t v47 = v18;
    uint64_t v20 = (__n128 *)sub_10001059C((uint64_t)&JSTreatmentStore.weak_ivar_lyt + 2 * v18, v19);
    uint64_t v52 = (void *)sub_1000F02A4(v20, (__n128)xmmword_100164230);
    v51[0] = v0;
    uint64_t v21 = sub_10002588C();
    id v22 = (id)AMSLogKey(v21);
    if (v22)
    {
      uint64_t v23 = sub_1000105E8((uint64_t)v22);
      sub_1000F02D8();
      sub_10000DF9C();
      sub_100010564();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v24 = sub_100010530();
      sub_10000DDE4(v24);
      sub_1000675A8();
      sub_10000DC14();
      uint64_t v50 = &type metadata for String;
      uint64_t v48 = v23;
      uint64_t v49 = v4;
      sub_10000DEA4();
      sub_1000675A8();
      sub_10000DC4C(93LL);
      sub_1000F0144();
      sub_1000F02E4();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v25 = sub_100010530();
      uint64_t v26 = sub_10000DDE4(v25);
      sub_10006779C(v26, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000F0144();
    }

    sub_1000677AC();
    sub_10001A21C(57LL);
    v55._uint64_t countAndFlagsBits = 0xD000000000000038LL;
    v55._object = (void *)0x8000000100174FB0LL;
    sub_1000F0180(v55);
    uint64_t v52 = &type metadata for String;
    v51[0] = v6;
    v51[1] = v4;
    sub_10000DF9C();
    sub_10001065C();
    sub_10000DA68((uint64_t)v51, &qword_1001CAAD0);
    sub_10000DC4C(46LL);
    uint64_t v27 = sub_1000ACC0C();
    uint64_t v28 = static os_log_type_t.info.getter(v27);
    sub_1000BD1B0(v28, (uint64_t)v20);
    sub_10000DE74();
    if (!v10) {
      goto LABEL_31;
    }
    goto LABEL_23;
  }

  if (v9)
  {
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v12 = *(void *)(sub_10002C79C() - 8);
    double v13 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
                    + 2LL * *(void *)(v12 + 72),
                      *(unsigned __int8 *)(v12 + 80));
    uint64_t v52 = (void *)sub_1000F02A4(v13, (__n128)xmmword_100164230);
    v51[0] = v0;
    uint64_t v14 = sub_10002588C();
    id v15 = (id)AMSLogKey(v14);
    if (v15)
    {
      uint64_t v16 = sub_1000105E8((uint64_t)v15);
      sub_1000F02D8();
      sub_10000DF9C();
      sub_100010564();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v17 = sub_100010530();
      sub_10000DDE4(v17);
      sub_1000675A8();
      sub_10000DC14();
      uint64_t v50 = &type metadata for String;
      uint64_t v48 = v16;
      uint64_t v49 = 0LL;
      sub_10000DEA4();
      sub_1000675A8();
      sub_10000DC4C(93LL);
      sub_1000F0144();
      sub_1000F02E4();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v29 = sub_100010530();
      uint64_t v30 = sub_10000DDE4(v29);
      sub_10006779C(v30, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000F0144();
    }

    sub_10000D3A0(v51);
    sub_10000E008();
    uint64_t v31 = sub_10000DD38(32LL);
    uint64_t v32 = static os_log_type_t.info.getter(v31);
    sub_1000BD1B0(v32, (uint64_t)v13);
    sub_10000DE74();
LABEL_23:
    sub_10000DCFC();
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v33 = *(void *)(sub_10002C79C() - 8);
    uint64_t v34 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
                    + 2LL * *(void *)(v33 + 72),
                      *(unsigned __int8 *)(v33 + 80));
    uint64_t v52 = (void *)sub_1000F02A4(v34, (__n128)xmmword_100164230);
    v51[0] = v0;
    uint64_t v35 = sub_10002588C();
    id v36 = (id)AMSLogKey(v35);
    if (v36)
    {
      uint64_t v37 = sub_1000105E8((uint64_t)v36);
      sub_1000F02D8();
      sub_10000DF9C();
      sub_100010564();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v38 = sub_100010530();
      sub_10000DDE4(v38);
      sub_1000819D8((uint64_t)&v48);
      sub_10000DC14();
      uint64_t v50 = &type metadata for String;
      uint64_t v48 = v37;
      uint64_t v49 = v4;
      sub_10000DEA4();
      sub_1000819D8((uint64_t)&v48);
      sub_10000DC4C(93LL);
      sub_1000F0144();
      sub_1000F02E4();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DEBC();
      sub_1000104C0(v51);
      uint64_t v39 = sub_100010530();
      uint64_t v40 = sub_10000DDE4(v39);
      sub_10006779C(v40, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000F0144();
    }

    sub_10000D3A0(v51);
    uint64_t v41 = sub_1000105B4(0xD000000000000037LL);
    uint64_t v42 = static os_log_type_t.info.getter(v41);
    sub_1000BD1B0(v42, (uint64_t)v34);
    sub_100020AB8();
    sub_1000E4ECC();
    id v43 = [(id)sub_1000F02B0() privateDatabase];
    sub_1000F04E4();
    if (qword_1001C8080 != -1) {
      swift_once(&qword_1001C8080, sub_1000EF290);
    }
    objc_msgSend(v43, "persistChangedRecordsChangeToken:forRecordZoneIdentifier:", 0, qword_1001CCE38, v47);
    sub_1000F029C();
LABEL_31:
    id v44 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    if (v4)
    {
      NSString v45 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v45 = 0LL;
    }

    NSString v46 = String._bridgeToObjectiveC()();
    [v44 setValue:v45 forKey:v46];

    sub_1000F04E4();
    sub_1000E5270(0);
  }

  sub_10000DD84();
}

uint64_t sub_1000E4ECC()
{
  uint64_t v0 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v37 - v8;
  id v10 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_100150470();
  URL._bridgeToObjectiveC()(v11);
  double v13 = v12;
  id v40 = 0LL;
  id v39 = v10;
  id v14 = [v10 contentsOfDirectoryAtURL:v12 includingPropertiesForKeys:0 options:1 error:&v40];

  id v15 = v40;
  if (v14)
  {
    uint64_t v38 = v9;
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v3);
    id v17 = v15;

    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v37 = v16;
    if (v18)
    {
      unint64_t v19 = v16 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v20 = v16;
      uint64_t v21 = *(void *)(v4 + 72);
      id v22 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16);
      __n128 v23 = swift_bridgeObjectRetain(v20);
      while (1)
      {
        v22(v2, v19, v3, v23);
        sub_10000D5C0((uint64_t)v2, 0LL, 1LL, v3);
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v2, v3);
        URL._bridgeToObjectiveC()(v24);
        uint64_t v26 = v25;
        id v40 = 0LL;
        unsigned int v27 = objc_msgSend(v39, "removeItemAtURL:error:", v25, &v40, v37);

        id v28 = v40;
        if (v27)
        {
          id v29 = v40;
        }

        else
        {
          id v30 = v40;
          uint64_t v31 = _convertNSErrorToError(_:)(v28);

          swift_willThrow(v32);
          swift_errorRelease(v31);
        }

        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        v19 += v21;
        if (!--v18) {
          goto LABEL_12;
        }
      }
    }

    else
    {
      swift_bridgeObjectRetain(v16);
LABEL_12:
      sub_10000D5C0((uint64_t)v2, 1LL, 1LL, v3);
    }

    swift_bridgeObjectRelease_n(v37, 2LL);
    uint64_t v9 = v38;
  }

  else
  {
    id v33 = v40;
    uint64_t v34 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v35);
    swift_errorRelease(v34);
  }

  [(id)objc_opt_self(AMSMetricsIdentifierCloudDataSource) clearSyncState];

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

void sub_1000E51E4()
{
  id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = sub_1000F03DC(v1, "stringForKey:");
  sub_1000F050C();

  if (v0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    sub_100085D74();
  }

  sub_10000DFE8();
}

void sub_1000E5270(char a1)
{
  id v3 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  Class isa = sub_1000F0500().super.super.isa;
  NSString v5 = String._bridgeToObjectiveC()();
  [v1 setValue:isa forKey:v5];

  if ((a1 & 1) == 0) {
    sub_1000E5374(0LL);
  }
}

void sub_1000E5310()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  sub_1000F04C8((uint64_t)v1, "BOOLForKey:");

  sub_10000DFE8();
}

void sub_1000E5374(void *a1)
{
  id v3 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_1000F0500();
  id v4 = sub_1000F0514();
  [v1 setValue:a1 forKey:v4];
}

void sub_1000E53F0()
{
  id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v2 = sub_1000F0514();
  sub_1000F04C8((uint64_t)v2, "BOOLForKey:");

  sub_10000DFE8();
}

void sub_1000E544C()
{
  uint64_t v2 = v0;
  unint64_t v84 = (void *)v3;
  sub_10000D33C((uint64_t *)&unk_1001CD380);
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DD5C();
  uint64_t v73 = v5;
  uint64_t v6 = sub_100070310();
  uint64_t v74 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(v6);
  uint64_t v81 = *(void *)(v74 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v7);
  sub_10000DD5C();
  uint64_t v72 = v8;
  uint64_t v76 = sub_10000D33C((uint64_t *)&unk_1001CACC0);
  uint64_t v80 = *(void *)(v76 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v9);
  sub_10000DD5C();
  uint64_t v75 = v10;
  uint64_t v11 = sub_100070310();
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(v11);
  uint64_t v82 = *(void *)(v12 - 8);
  uint64_t v83 = v12;
  sub_10000DC8C();
  __chkstk_darwin(v13);
  sub_10000DD5C();
  uint64_t v79 = v14;
  uint64_t v15 = sub_100070310();
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.Attributes(v15);
  sub_10000DC64();
  __chkstk_darwin(v17);
  sub_1000F0374();
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_10000D33C((uint64_t *)&unk_1001CD390);
  sub_100029350(v21);
  uint64_t v22 = sub_1000F0528();
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
  *(void *)(v0 + 24) = 0LL;
  sub_10000DE08(v22, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v23 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  *(void *)(v0 + 64) = 0LL;
  *(_BYTE *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0LL;
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 32) = v23;
  *(_BYTE *)(v0 + 56) = 0;
  uint64_t v24 = v21;
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(void *)(v0 + 88) = sub_1000F0528();
  *(void *)(v0 + 96) = 0LL;
  id v25 = [objc_allocWithZone(NSLock) init];
  *(void *)(v0 + 112) = v25;
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = &_swiftEmptySetSingleton;
  uint64_t v26 = sub_10000DE08((uint64_t)v25, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  uint64_t v27 = qword_1001DBBC0;
  static DispatchQoS.unspecified.getter((id)qword_1001DBBC0);
  Swift::Bool v86 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v29 = v28;
  uint64_t v30 = sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CAAC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v30, v31, v16, v29);
  uint64_t v32 = v79;
  (*(void (**)(uint64_t, void, uint64_t))(v82 + 104))( v79,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v83);
  sub_100048BA0();
  uint64_t v70 = v26;
  *(void *)(v2 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( v33,  v34,  v20,  v1,  v32,  v27);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(void *)(v2 + 136) = sub_1000F0528();
  *(_OWORD *)(v2 + 144) = xmmword_100167CA0;
  *(void *)(v2 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0x8000000100174640LL;
  *(void *)(v2 + 168) = 0xD000000000000022LL;
  *(void *)(v2 + 192) = 0x80000001001746A0LL;
  *(void *)(v2 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0xD00000000000002BLL;
  *(void *)(v2 + 176) = 0x8000000100174670LL;
  *(void *)(v2 + 184) = 0xD00000000000001FLL;
  *(void *)(v2 + 208) = 0x80000001001746C0LL;
  uint64_t v35 = *(void **)(v2 + 40);
  id v36 = v84;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v84;
  id v71 = v36;

  sub_10000DE08(v37, (unint64_t *)&unk_1001CD3B0, &off_1001A5DF0);
  sub_100048BA0();
  *(void *)(v2 + 72) = sub_1000E5B4C(v38, v39);
  *(void *)(v2 + 104) = [objc_allocWithZone(AMSMetricsIdentifierCloudDataSource) init];
  sub_10007B6E0(*(id *)(v2 + 72), "setDelegate:");
  sub_10007B6E0(*(id *)(v2 + 104), "setDelegate:");
  Swift::Bool v86 = *(void **)(v2 + 16);
  uint64_t v40 = qword_1001C8078;
  swift_retain(v86);
  if (v40 != -1) {
    swift_once(&qword_1001C8078, sub_1000E417C);
  }
  uint64_t v41 = v74;
  uint64_t v42 = sub_10000D7B8(v74, (uint64_t)qword_1001CCE20);
  uint64_t v43 = v81;
  id v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
  uint64_t v77 = v42;
  uint64_t v78 = v44;
  uint64_t v45 = v72;
  sub_1000D12F0(v72, v42, v44);
  char v85 = *(void **)(v2 + 128);
  NSString v46 = v85;
  unint64_t v84 = (void *)type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v47 = v73;
  sub_10000D5C0(v73, 1LL, 1LL, (uint64_t)v84);
  sub_10000D890(&qword_1001CA398, (uint64_t *)&unk_1001CD390);
  uint64_t v49 = v48;
  uint64_t v83 = v48;
  sub_1000EFAA8( (unint64_t *)&qword_1001CACE0,  (unint64_t *)&qword_1001CACD0,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v51 = v50;
  uint64_t v82 = v50;
  id v52 = v46;
  uint64_t v53 = v75;
  uint64_t v69 = v24;
  Publisher.debounce<A>(for:scheduler:options:)(v45, &v85, v47, v24, v70, v49, v51);
  sub_10000DA68(v47, (uint64_t *)&unk_1001CD380);
  sub_1000F04D4();
  uint64_t v81 = *(void *)(v43 + 8);
  ((void (*)(uint64_t, uint64_t))v81)(v45, v41);
  sub_10006752C();
  uint64_t v54 = sub_10000DDDC((uint64_t)&unk_1001AFB18, 24LL);
  sub_1000F0254(v54);
  sub_10000D890(&qword_1001CA3A0, (uint64_t *)&unk_1001CACC0);
  uint64_t v79 = v55;
  uint64_t v56 = v76;
  uint64_t v57 = Publisher<>.sink(receiveValue:)(sub_1000EFB00, v54, v76, v55);
  sub_100020AD8();
  uint64_t v80 = *(void *)(v80 + 8);
  ((void (*)(uint64_t, uint64_t))v80)(v53, v56);
  uint64_t v58 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = v57;
  swift_release(v58);
  Swift::Bool v86 = *(void **)(v2 + 88);
  sub_1000D12F0(v45, v77, v78);
  char v85 = *(void **)(v2 + 128);
  unint64_t v59 = v85;
  sub_10000D5C0(v47, 1LL, 1LL, (uint64_t)v84);
  sub_100048DB4();
  id v60 = v59;
  sub_1000F01E8();
  sub_10000DA68(v47, (uint64_t *)&unk_1001CD380);
  sub_1000F04D4();
  sub_1000F03AC();
  sub_10006752C();
  uint64_t v61 = sub_10000DDDC((uint64_t)&unk_1001AFB18, 24LL);
  sub_1000F0254(v61);
  uint64_t v62 = sub_1000F039C((uint64_t)sub_1000EFB20, v61);
  sub_100020AD8();
  sub_1000F0324();
  uint64_t v63 = *(void *)(v2 + 96);
  *(void *)(v2 + 96) = v62;
  swift_release(v63);
  Swift::Bool v86 = *(void **)(v2 + 136);
  sub_1000D12F0(v45, v77, v78);
  char v85 = *(void **)(v2 + 128);
  uint64_t v64 = v85;
  sub_10000D5C0(v47, 1LL, 1LL, (uint64_t)v84);
  sub_100048DB4();
  id v65 = v64;
  sub_1000F01E8();
  sub_10000DA68(v47, (uint64_t *)&unk_1001CD380);
  sub_1000F04D4();
  sub_1000F03AC();
  sub_10006752C();
  uint64_t v66 = sub_10000DDDC((uint64_t)&unk_1001AFB18, 24LL);
  sub_1000F0254(v66);
  uint64_t v67 = sub_1000F039C((uint64_t)sub_1000EFB40, v66);

  swift_release(v66);
  sub_1000F0324();
  uint64_t v68 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = v67;
  swift_release(v68);
  sub_10000DD84();
}

id sub_1000E5B4C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithPushNotificationTopic:v5];

  return v6;
}

uint64_t sub_1000E5BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    swift_retain(result);
    sub_1000EE8C4();
    return swift_release_n(v4, 2LL);
  }

  return result;
}

void sub_1000E5C24()
{
}

uint64_t sub_1000E5C48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  NSString v5 = (char *)&v31[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v35, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v7 = result;
    if (sub_1000E42AC())
    {
      if (qword_1001C7FC0 != -1) {
        swift_once(&qword_1001C7FC0, sub_1000BD5B8);
      }
      uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v9 = type metadata accessor for LogMessage(0LL);
      uint64_t v10 = swift_allocObject( v8,  ((*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL))
            + 2LL * *(void *)(*(void *)(v9 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v9 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v34 = type metadata accessor for MetricsIdentifierCloudDataController();
      v33[0] = v7;
      uint64_t v11 = swift_retain(v7);
      id v12 = (id)AMSLogKey(v11);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v16 = v15;

        swift_bridgeObjectRetain(v16);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v17._uint64_t countAndFlagsBits = 0LL;
        v17._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v17);
        uint64_t v18 = v34;
        uint64_t v19 = sub_10000D37C(v33, v34);
        uint64_t DynamicType = swift_getDynamicType(v19, v18, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v31[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
        sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
        v21._uint64_t countAndFlagsBits = 5972026LL;
        v21._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v21);
        uint64_t MetatypeMetadata = &type metadata for String;
        v31[0] = v14;
        v31[1] = v16;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
        sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
        v22._uint64_t countAndFlagsBits = 93LL;
        v22._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v22);
        LogMessage.init(stringInterpolation:)(v5);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v23._uint64_t countAndFlagsBits = 0LL;
        v23._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v23);
        uint64_t v24 = v34;
        id v25 = sub_10000D37C(v33, v34);
        uint64_t v26 = swift_getDynamicType(v25, v24, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v26);
        v31[0] = v26;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
        sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
        v27._uint64_t countAndFlagsBits = 58LL;
        v27._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v27);
        LogMessage.init(stringInterpolation:)(v5);
      }

      sub_10000D3A0(v33);
      uint64_t v28 = LogMessage.init(stringLiteral:)(0xD00000000000002BLL);
      uint64_t v29 = static os_log_type_t.info.getter(v28);
      sub_1000BD1B0(v29, v10);
      swift_release(v7);
      return swift_bridgeObjectRelease();
    }

    else
    {
      swift_retain(v7);
      sub_1000EE8C4();
      return swift_release_n(v7, 2LL);
    }
  }

  return result;
}

uint64_t sub_1000E5F6C()
{
  uint64_t result = sub_1000E5FD8();
  if ((result & 1) == 0)
  {
    sub_10002588C();
    sub_1000EE8C4();
    return swift_release(v0);
  }

  return result;
}

uint64_t sub_1000E5FD8()
{
  uint64_t v34 = v1;
  uint64_t v35 = v2;
  char v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_10000DC74();
  unsigned int v10 = [(id)objc_opt_self(AMSDefaults) autoSyncDisabledForMetricsIdentifierStore];
  uint64_t v11 = 0LL;
  if (v10 && (v4 & 1) == 0)
  {
    char v12 = v10;
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_1000F0274();
    uint64_t v16 = swift_allocObject(v13, v14, v15);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v33 = (void *)sub_10000D33C(&qword_1001CD488);
    v32[0] = v0;
    id v17 = (id)AMSLogKey(v33);
    if (v17)
    {
      uint64_t v18 = v17;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

      sub_1000489DC();
      sub_100010564();
      sub_10000DC08();
      uint64_t v19 = v33;
      uint64_t v20 = sub_10000D37C(v32, (uint64_t)v33);
      uint64_t v21 = sub_10000DC54((uint64_t)v20, (uint64_t)v19);
      swift_getMetatypeMetadata(v21);
      sub_10000DEA4();
      sub_100067A7C();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100067A7C();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE74();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      Swift::String v22 = v33;
      Swift::String v23 = sub_10000D37C(v32, (uint64_t)v33);
      sub_10000DC54((uint64_t)v23, (uint64_t)v22);
      sub_1000BDBEC();
      uint64_t v24 = sub_10000DEA4();
      sub_10006779C(v24, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_1000677AC();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(70LL, 4LL);
    v25._uint64_t countAndFlagsBits = 0x676E697070696B53LL;
    v25._object = (void *)0xE900000000000020LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v33 = &type metadata for String;
    v32[0] = v8;
    v32[1] = v6;
    sub_10000DEB4();
    sub_10001065C();
    sub_1000F023C();
    sub_100048BA0();
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v33 = &type metadata for Bool;
    uint64_t v11 = 1LL;
    LOBYTE(v32[0]) = 1;
    sub_10001065C();
    sub_1000F023C();
    sub_100048BA0();
    v27._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v33 = &type metadata for Bool;
    LOBYTE(v32[0]) = v12;
    sub_10001065C();
    sub_1000F023C();
    v28._uint64_t countAndFlagsBits = 0x6C61756E616D202CLL;
    v28._object = (void *)0xEF203A636E797320LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v33 = &type metadata for Bool;
    LOBYTE(v32[0]) = 0;
    sub_10001065C();
    sub_1000F023C();
    sub_10000DC08();
    uint64_t v29 = sub_10000DC5C();
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    sub_1000BD1B0(v30, v16);
    sub_1000090CC();
  }

  return v11;
}

id sub_1000E62F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  char v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_1000E42AC())
  {
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v6 = type metadata accessor for LogMessage(0LL);
    uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(v6 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v58 = type metadata accessor for MetricsIdentifierCloudDataController();
    v57[0] = a1;
    uint64_t v8 = swift_retain(a1);
    id v9 = (id)AMSLogKey(v8);
    if (v9)
    {
      unsigned int v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      uint64_t v13 = v12;

      swift_bridgeObjectRetain(v13);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v14._uint64_t countAndFlagsBits = 0LL;
      v14._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v14);
      uint64_t v15 = v58;
      uint64_t v16 = sub_10000D37C(v57, v58);
      uint64_t DynamicType = swift_getDynamicType(v16, v15, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v54 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v18._uint64_t countAndFlagsBits = 5972026LL;
      v18._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v18);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v54 = v11;
      uint64_t v55 = v13;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v19._uint64_t countAndFlagsBits = 93LL;
      v19._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v19);
      LogMessage.init(stringInterpolation:)(v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v35._uint64_t countAndFlagsBits = 0LL;
      v35._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      uint64_t v36 = v58;
      uint64_t v37 = sub_10000D37C(v57, v58);
      uint64_t v38 = swift_getDynamicType(v37, v36, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v38);
      uint64_t v54 = v38;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v39._uint64_t countAndFlagsBits = 58LL;
      v39._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      LogMessage.init(stringInterpolation:)(v4);
    }

    sub_10000D3A0(v57);
    uint64_t v40 = LogMessage.init(stringLiteral:)(0xD00000000000002BLL);
    uint64_t v41 = static os_log_type_t.info.getter(v40);
    sub_1000BD1B0(v41, v7);
    swift_bridgeObjectRelease();
    return [(id)objc_opt_self(AMSBinaryPromise) promiseWithSuccess];
  }

  else
  {
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v21 = type metadata accessor for LogMessage(0LL);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v21 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v58 = type metadata accessor for MetricsIdentifierCloudDataController();
    v57[0] = a1;
    uint64_t v23 = swift_retain(a1);
    id v24 = (id)AMSLogKey(v23);
    if (v24)
    {
      Swift::String v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v28 = v27;

      swift_bridgeObjectRetain(v28);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v29._uint64_t countAndFlagsBits = 0LL;
      v29._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      uint64_t v30 = v58;
      uint64_t v31 = sub_10000D37C(v57, v58);
      uint64_t v32 = swift_getDynamicType(v31, v30, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v32);
      uint64_t v54 = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v33._uint64_t countAndFlagsBits = 5972026LL;
      v33._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v54 = v26;
      uint64_t v55 = v28;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v34._uint64_t countAndFlagsBits = 93LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      LogMessage.init(stringInterpolation:)(v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v43._uint64_t countAndFlagsBits = 0LL;
      v43._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      uint64_t v44 = v58;
      uint64_t v45 = sub_10000D37C(v57, v58);
      uint64_t v46 = swift_getDynamicType(v45, v44, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v46);
      uint64_t v54 = v46;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v54);
      sub_10000DA68((uint64_t)&v54, &qword_1001CAAD0);
      v47._uint64_t countAndFlagsBits = 58LL;
      v47._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      LogMessage.init(stringInterpolation:)(v4);
    }

    sub_10000D3A0(v57);
    uint64_t v48 = LogMessage.init(stringLiteral:)(0xD000000000000013LL);
    uint64_t v49 = static os_log_type_t.info.getter(v48);
    sub_1000BD1B0(v49, v22);
    swift_bridgeObjectRelease();
    [(id)objc_opt_self(AMSMetricsIdentifierCloudDataSource) cleanupIdentifiers];
    sub_10000DAA0(0LL, &qword_1001CD438, &OBJC_CLASS___AMSBinaryPromise_ptr);
    uint64_t v50 = sub_10000D33C(&qword_1001CD430);
    uint64_t v51 = swift_allocObject(v50, 48LL, 7LL);
    *(_OWORD *)(v51 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167CB0;
    sub_1000EA800();
    *(void *)(v51 + 32) = v52;
    sub_1000E77A8();
    *(void *)(v51 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v53;
    v57[0] = v51;
    specialized Array._endMutation()(v53);
    return sub_1000E68C4();
  }

id sub_1000E68C4()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = [(id)swift_getObjCClassFromMetadata(v0) promiseWithFlattenedPromises:isa];

  return v2;
}

void sub_1000E6944()
{
  if ((sub_1000E5FD8() & 1) == 0)
  {
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v4 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
    sub_1000F0334();
    uint64_t v6 = (__n128 *)sub_10001059C(v1 + 2 * v4, v5);
    uint64_t v19 = sub_1000F0424(v6, (__n128)xmmword_100164230);
    v18[0] = v0;
    uint64_t v7 = sub_10002588C();
    id v8 = (id)AMSLogKey(v7);
    if (v8)
    {
      uint64_t v9 = sub_1000105E8((uint64_t)v8);
      sub_10004877C();
      sub_100020BB4();
      sub_100010564();
      sub_100037DD0();
      uint64_t v10 = v19;
      sub_1000104C0(v18);
      id v17 = (void *)sub_100010530();
      v16[0] = v10;
      sub_1000F020C((uint64_t)v16);
      sub_100067788((uint64_t)v16);
      sub_10000DC14();
      id v17 = &type metadata for String;
      v16[0] = v9;
      v16[1] = v2;
      sub_10000DEA4();
      sub_100067788((uint64_t)v16);
      sub_10000DC4C(93LL);
      sub_10006796C();
      sub_100020AB8();
    }

    else
    {
      sub_10001A1BC();
      sub_100037DD0();
      uint64_t v11 = v19;
      sub_1000104C0(v18);
      id v17 = (void *)sub_100010530();
      v16[0] = v11;
      uint64_t v12 = sub_1000F020C((uint64_t)v16);
      sub_10006779C(v12, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10006796C();
    }

    sub_1000677AC();
    uint64_t v13 = LogMessage.init(stringLiteral:)(0x71657220636E7953LL);
    uint64_t v14 = static os_log_type_t.debug.getter(v13);
    sub_1000BD1B0(v14, (uint64_t)v6);
    sub_10000DDF8();
    sub_100048DB4();
    sub_1000F04B4();
    sub_1000F047C((unint64_t *)&unk_1001CACF0);
    sub_1000F02F8(v15);
    sub_1000292C4();
  }

  sub_10000DD84();
}

void sub_1000E6B64()
{
  uint64_t v2 = v0;
  char v4 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_100029170();
  if ((sub_1000E5FD8() & 1) == 0)
  {
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v6 = (void *)sub_10000D33C(&qword_1001C9C70);
    uint64_t v7 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
    sub_1000BDB78();
    uint64_t v9 = (__n128 *)sub_10001059C(v1 + 2 * v7, v8);
    void v18[3] = sub_1000F0430(v9, (__n128)xmmword_100164230);
    v18[0] = v2;
    uint64_t v10 = sub_10002588C();
    id v11 = (id)AMSLogKey(v10);
    if (v11)
    {
      sub_1000105E8((uint64_t)v11);

      sub_1000489DC();
      sub_100010564();
      sub_100010608();
      sub_1000104C0(v18);
      uint64_t v12 = sub_100010530();
      sub_1000F02C4(v12);
      sub_100067A7C();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100067A7C();
      sub_10000DC4C(93LL);
      sub_100010684();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001A1BC();
      sub_100010608();
      sub_1000104C0(v18);
      uint64_t v13 = sub_100010530();
      uint64_t v14 = sub_1000F02C4(v13);
      sub_10006779C(v14, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_100010684();
    }

    sub_1000677AC();
    uint64_t v15 = LogMessage.init(stringLiteral:)(0x6572206863746546LL);
    uint64_t v16 = static os_log_type_t.debug.getter(v15);
    sub_1000BD1B0(v16, (uint64_t)v9);
    sub_10000DCFC();
    *(_BYTE *)(v2 + 56) = v4 & 1;
    sub_100048DB4();
    sub_1000F04B4();
    sub_1000F047C((unint64_t *)&unk_1001CACF0);
    sub_1000F02F8(v17);
    sub_1000292C4();
  }

  sub_10000DD84();
}

id sub_1000E6D84(void *a1, char a2)
{
  if (qword_1001C8080 != -1) {
    swift_once(&qword_1001C8080, sub_1000EF290);
  }
  NSString v5 = [(id)qword_1001CCE38 name];
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v5 = String._bridgeToObjectiveC()();
    sub_1000090CC();
  }

  id v6 = [a1 createRecordZoneWithRecordZoneName:v5];

  if ((a2 & 1) != 0)
  {
    uint64_t v7 = (void *)objc_opt_self(&OBJC_CLASS___AMSPromise);
    id v8 = sub_100051B28(v7, "promiseWithResult:");
    sub_1000B1A94();
    return v8;
  }

  else
  {
    id v10 = sub_100051B28(a1, "saveRecordZone:");
    uint64_t v11 = sub_10000DDDC((uint64_t)&unk_1001B0270, 32LL);
    *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    *(void *)(v11 + 24) = a1;
    sub_1000C01A4((uint64_t)sub_1000E7260, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v12, v13);
    sub_100048DB4();
    sub_1000F0294();
    sub_100020AD8();
    sub_1000F04DC(v10, "addSuccessBlock:");
    sub_1000F043C();
    sub_1000B1A94();
    return v10;
  }

void sub_1000E6F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  id v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000E5270(1);
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
        + 2LL * *(void *)(v10 + 72),
          *(unsigned __int8 *)(v10 + 80) | 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t ObjectType = type metadata accessor for MetricsIdentifierCloudDataController();
  v37[0] = a2;
  uint64_t v12 = swift_retain(a2);
  id v13 = (id)AMSLogKey(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v34[0] = a1;
    v34[1] = a3;
    uint64_t v16 = v15;
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = ObjectType;
    uint64_t v21 = sub_10000D37C(v37, ObjectType);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v35[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000DA68((uint64_t)v35, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t MetatypeMetadata = &type metadata for String;
    v35[0] = v16;
    v35[1] = v18;
    a1 = v34[0];
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000DA68((uint64_t)v35, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = ObjectType;
    uint64_t v27 = sub_10000D37C(v37, ObjectType);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    v35[0] = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
    sub_10000DA68((uint64_t)v35, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(v37);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v30._object = (void *)0x8000000100174EC0LL;
  v30._uint64_t countAndFlagsBits = 0xD000000000000014LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t ObjectType = swift_getObjectType(a1);
  v37[0] = a1;
  swift_unknownObjectRetain(a1);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v37);
  sub_10000DA68((uint64_t)v37, &qword_1001CAAD0);
  v31._uint64_t countAndFlagsBits = 46LL;
  v31._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = LogMessage.init(stringInterpolation:)(v8);
  uint64_t v33 = static os_log_type_t.info.getter(v32);
  sub_1000BD1B0(v33, v11);
  swift_bridgeObjectRelease();
  sub_1000E7264();
}

void sub_1000E7264()
{
  uint64_t v1 = v0;
  if (qword_1001C8080 != -1) {
    swift_once(&qword_1001C8080, sub_1000EF290);
  }
  id v2 = (id)qword_1001CCE38;
  _StringGuts.grow(_:)(39LL);
  uint64_t v3 = swift_bridgeObjectRelease();
  v12[0] = 0xD000000000000019LL;
  v12[1] = 0x8000000100174E10LL;
  id v4 = sub_100011A20(v3, "name");
  sub_1000105E8((uint64_t)v4);

  sub_1000F0304();
  sub_10000DCFC();
  v5._uint64_t countAndFlagsBits = 0x7069726373627553LL;
  v5._object = (void *)0xEC0000006E6F6974LL;
  String.append(_:)(v5);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v7 = sub_100009070();
  id v8 = sub_1000F03CC(v7, "subscribeWithIdentifier:recordZoneIdentifier:");

  uint64_t v9 = sub_10000DDDC((uint64_t)&unk_1001B0220, 32LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v9 + 24) = v2;
  v12[4] = (uint64_t)sub_1000F000C;
  v12[5] = v9;
  sub_1000C01A4((uint64_t)sub_100011198, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v12[2], v12[3]);
  id v10 = v2;
  sub_10002588C();
  uint64_t v11 = sub_10002FAF4();
  sub_100096158(v11, "addFinishBlock:");
  sub_1000F03C4();
}

void sub_1000E7408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = type metadata accessor for LogMessage(0LL);
    uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v11 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v45 = type metadata accessor for MetricsIdentifierCloudDataController();
    v44[0] = a3;
    uint64_t v13 = swift_retain(a3);
    id v14 = (id)AMSLogKey(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;

      swift_bridgeObjectRetain(v18);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v19._uint64_t countAndFlagsBits = 0LL;
      v19._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v19);
      uint64_t v20 = v45;
      uint64_t v21 = sub_10000D37C(v44, v45);
      uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v42[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_10000DA68((uint64_t)v42, &qword_1001CAAD0);
      v23._uint64_t countAndFlagsBits = 5972026LL;
      v23._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v23);
      uint64_t MetatypeMetadata = &type metadata for String;
      v42[0] = v16;
      v42[1] = v18;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_10000DA68((uint64_t)v42, &qword_1001CAAD0);
      v24._uint64_t countAndFlagsBits = 93LL;
      v24._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      LogMessage.init(stringInterpolation:)(v9);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v25._uint64_t countAndFlagsBits = 0LL;
      v25._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      uint64_t v26 = v45;
      uint64_t v27 = sub_10000D37C(v44, v45);
      uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
      v42[0] = v28;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
      sub_10000DA68((uint64_t)v42, &qword_1001CAAD0);
      v29._uint64_t countAndFlagsBits = 58LL;
      v29._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      LogMessage.init(stringInterpolation:)(v9);
    }

    sub_10000D3A0(v44);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(62LL, 2LL);
    v30._object = (void *)0x8000000100174E50LL;
    v30._uint64_t countAndFlagsBits = 0xD000000000000036LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v45 = sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
    v44[0] = a4;
    id v31 = a4;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 0x20726F72726520LL;
    v32._object = (void *)0xE700000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    swift_getErrorValue(a2, v41, &v39);
    uint64_t v33 = v39;
    uint64_t v34 = v40;
    uint64_t v45 = v40;
    Swift::String v35 = sub_10000D63C(v44);
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16LL))(v35, v33, v34);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    v36._uint64_t countAndFlagsBits = 46LL;
    v36._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    uint64_t v37 = LogMessage.init(stringInterpolation:)(v9);
    uint64_t v38 = static os_log_type_t.error.getter(v37);
    sub_1000BD1B0(v38, v12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
  }

  else
  {
    sub_1000E5374((void *)1);
  }

void sub_1000E77A8()
{
  uint64_t v2 = v0;
  int v63 = v3;
  uint64_t v64 = *(void **)v0;
  uint64_t v62 = sub_1000F0520();
  uint64_t v60 = *(void *)(v62 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v4);
  sub_10001A284();
  id v65 = v5;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v58 - v7;
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10001A284();
  uint64_t v61 = v11;
  __chkstk_darwin(v12);
  id v14 = (char *)v58 - v13;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v15);
  sub_10000DC74();
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_1000292E4();
  uint64_t v18 = *(void **)(v0 + 128);
  *uint64_t v1 = v18;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v16);
  id v19 = v18;
  uint64_t v20 = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v1, v16);
  if ((v20 & 1) != 0)
  {
    unint64_t v59 = v14;
    if (qword_1001C7FC0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1001C7FC0, sub_1000BD5B8);
LABEL_3:
  v58[1] = qword_1001DBB40;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v21 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_1000F0334();
  uint64_t v23 = sub_10000DCF0(v20 + 2 * v21, v22);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v68 = type metadata accessor for MetricsIdentifierCloudDataController();
  uint64_t v66 = (void **)v0;
  uint64_t v24 = sub_10002FAA0();
  id v25 = (id)AMSLogKey(v24);
  if (v25)
  {
    uint64_t v26 = sub_1000F0410((uint64_t)v25);
    v58[0] = v10;
    uint64_t v27 = v9;
    uint64_t v29 = v28;

    sub_10000DF9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v30 = v68;
    id v31 = sub_10000D37C(&v66, v68);
    sub_10000DC54((uint64_t)v31, v30);
    uint64_t v72 = (void *)sub_1000BDBEC();
    v71[0] = v30;
    sub_1000F0408();
    sub_1000819D8((uint64_t)v71);
    sub_10000DC14();
    uint64_t v72 = &type metadata for String;
    v71[0] = v26;
    v71[1] = v29;
    sub_1000F0408();
    sub_1000819D8((uint64_t)v71);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v9 = v27;
    uint64_t v10 = v58[0];
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v32 = v68;
    uint64_t v33 = sub_10000D37C(&v66, v68);
    sub_10000DC54((uint64_t)v33, v32);
    uint64_t v72 = (void *)sub_10000DDAC();
    v71[0] = v32;
    sub_1000F0408();
    sub_10000DA68((uint64_t)v71, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v66);
  sub_10000E008();
  uint64_t v34 = sub_10000DD38(27LL);
  uint64_t v35 = static os_log_type_t.info.getter(v34);
  sub_1000BD1B0(v35, v23);
  sub_10000DDF8();
  uint64_t v36 = sub_1000E4378();
  uint64_t v37 = OSSignposter.logHandle.getter(v36);
  uint64_t v38 = (uint64_t)v59;
  OSSignpostID.init(log:)(v37);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v60 + 8);
  uint64_t v40 = v8;
  uint64_t v41 = v62;
  v39(v40, v62);
  uint64_t v42 = sub_1000E4378();
  Swift::String v43 = (os_log_s *)OSSignposter.logHandle.getter(v42);
  os_signpost_type_t v44 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v45 = (uint8_t *)sub_1000F0248();
    *(_WORD *)uint64_t v45 = 0;
    os_signpost_id_t v46 = OSSignpostID.rawValue.getter(v45);
    sub_1000F036C((void *)&_mh_execute_header, v43, v44, v46, "MetricsIdentifier", "Fetching changes from cloud", v45);
    sub_100070354((uint64_t)v45);
  }

  uint64_t v47 = v61;
  sub_1000F03F4(v61, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  uint64_t v48 = type metadata accessor for OSSignpostIntervalState(0LL);
  sub_100029350(v48);
  uint64_t v49 = OSSignpostIntervalState.init(id:isOpen:)(v47, 1LL);
  v39(v65, v41);
  *(_BYTE *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 0;
  sub_1000E99E4();
  uint64_t v51 = v50;
  uint64_t v52 = (void *)sub_10000DDDC((uint64_t)&unk_1001B0108, 40LL);
  v52[2] = v0;
  void v52[3] = v49;
  uint64_t v53 = v64;
  v52[4] = v64;
  uint64_t v69 = sub_1000EFF68;
  uint64_t v70 = v52;
  uint64_t v66 = _NSConcreteStackBlock;
  uint64_t v67 = 1107296256LL;
  uint64_t v54 = sub_1000F02B8((uint64_t)sub_1000E88B4);
  sub_10002FAA0();
  sub_10002588C();
  sub_1000292C4();
  id v55 = [v51 thenWithBlock:v54];
  _Block_release(v54);

  uint64_t v56 = (void *)sub_10000DDDC((uint64_t)&unk_1001B0158, 40LL);
  v56[2] = v2;
  void v56[3] = v49;
  void v56[4] = v53;
  uint64_t v69 = sub_1000EFF80;
  uint64_t v70 = v56;
  uint64_t v66 = _NSConcreteStackBlock;
  uint64_t v67 = 1107296256LL;
  sub_1000F02B8((uint64_t)sub_1000B1D04);
  sub_10002FAA0();
  sub_10002588C();
  sub_100020AD8();
  sub_1000F04DC(v55, "addErrorBlock:");
  sub_1000F043C();
  uint64_t v57 = (void *)objc_opt_self(&OBJC_CLASS___AMSBinaryPromise);
  sub_1000F03DC(v57, "promiseWithPromise:");
  swift_release(v49);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v38, v9);
  sub_10001A30C();
}

id sub_1000E7D00(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1001C8080 != -1) {
    swift_once(&qword_1001C8080, sub_1000EF290);
  }
  uint64_t v8 = (void *)qword_1001CCE38;
  uint64_t v9 = sub_10000D33C(&qword_1001CD430);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100165690;
  *(void *)(v10 + 32) = v8;
  v20[0] = v10;
  specialized Array._endMutation()(v10);
  id v11 = v8;
  sub_10000D33C(&qword_1001CD458);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(a1, "fetchChangedRecordsInRecordZonesWithRecordZoneIdentifiers:", isa, v20[0]);

  id v14 = (void *)swift_allocObject(&unk_1001B01D0, 56LL, 7LL);
  void v14[2] = a2;
  v14[3] = a1;
  void v14[4] = v11;
  v14[5] = a3;
  v14[6] = a4;
  v20[4] = sub_1000EFFD0;
  uint64_t v21 = v14;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  __int128 v20[2] = sub_1000E88B0;
  void v20[3] = &unk_1001B01E8;
  uint64_t v15 = _Block_copy(v20);
  uint64_t v16 = v21;
  id v17 = v11;
  swift_retain(a2);
  swift_unknownObjectRetain(a1);
  swift_retain(a3);
  swift_release(v16);
  id v18 = [v13 continueWithBlock:v15];
  _Block_release(v15);

  return v18;
}

id sub_1000E7EC8(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v96 = a6;
  uint64_t v97 = a4;
  uint64_t v10 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v94 = *(void *)(v10 - 8);
  uint64_t v95 = v10;
  __chkstk_darwin(v10);
  uint64_t v93 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OSSignposter(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v98 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v88 = v17;
    uint64_t v89 = v16;
    uint64_t v90 = v15;
    uint64_t v92 = v12;
    id v22 = a1;
    sub_1000EFD80(v22, (SEL *)&selRef_changedRecords);
    if (v23)
    {
      uint64_t v24 = v23;
      v101[0] = a5;
      sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      sub_1000EFAA8(&qword_1001CD460, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      id v25 = a5;
      AnyHashable.init<A>(_:)(v101);
      sub_100030A50(v99, v24);
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)v99);
    }

    sub_1000EFD80(v22, (SEL *)&selRef_deletedRecords);
    if (v27)
    {
      uint64_t v28 = v27;
      v101[0] = a5;
      sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      sub_1000EFAA8(&qword_1001CD460, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      id v29 = a5;
      AnyHashable.init<A>(_:)(v101);
      sub_100030A50(v99, v28);
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)v99);
    }

    uint64_t v91 = v13;
    sub_1000EFD80(v22, (SEL *)&selRef_errors);
    if (v30)
    {
      uint64_t v31 = v30;
      v101[0] = a5;
      sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      sub_1000EFAA8(&qword_1001CD460, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      id v32 = a5;
      AnyHashable.init<A>(_:)(v101);
      sub_100030A84((uint64_t)v99, v31);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)v99);
    }

    else
    {
      uint64_t v34 = 0LL;
    }

    uint64_t v35 = v97;
    sub_1000EDBBC();
    swift_errorRelease(v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000EFD80(v22, (SEL *)&selRef_changeTokens);
    if (v36)
    {
      uint64_t v37 = __chkstk_darwin(v36);
      *(&v88 - 2) = (uint64_t)a5;
      *(&v88 - Hasher._combine(_:)(v1 & 1) = v35;
      sub_1000E3AF8(v37, (void (*)(_BYTE *, uint64_t))sub_1000EFFE0);
      swift_bridgeObjectRelease();
    }

    sub_1000EFD80(v22, (SEL *)&selRef_errors);
    if (v38)
    {
      uint64_t v39 = v38;
      v101[0] = a5;
      sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      sub_1000EFAA8(&qword_1001CD460, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
      id v40 = a5;
      AnyHashable.init<A>(_:)(v101);
      sub_100030A84((uint64_t)v99, v39);
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)v99);
      if (v42)
      {
        sub_1000E902C();
        swift_errorRelease(v42);
      }
    }

    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v43 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v44 = type metadata accessor for LogMessage(0LL);
    uint64_t v45 = swift_allocObject( v43,  ((*(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v44 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v44 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v100 = type metadata accessor for MetricsIdentifierCloudDataController();
    v99[0] = a3;
    uint64_t v46 = swift_retain(a3);
    id v47 = (id)AMSLogKey(v46);
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v51 = v50;

      swift_bridgeObjectRetain(v51);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v52._uint64_t countAndFlagsBits = 0LL;
      v52._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v52);
      uint64_t v53 = v100;
      uint64_t v54 = sub_10000D37C(v99, v100);
      uint64_t DynamicType = swift_getDynamicType(v54, v53, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v101[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v101);
      sub_10000DA68((uint64_t)v101, &qword_1001CAAD0);
      v56._uint64_t countAndFlagsBits = 5972026LL;
      v56._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      uint64_t MetatypeMetadata = &type metadata for String;
      v101[0] = v49;
      v101[1] = v51;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v101);
      sub_10000DA68((uint64_t)v101, &qword_1001CAAD0);
      v57._uint64_t countAndFlagsBits = 93LL;
      v57._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      LogMessage.init(stringInterpolation:)(v21);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v58._uint64_t countAndFlagsBits = 0LL;
      v58._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      uint64_t v59 = v100;
      uint64_t v60 = sub_10000D37C(v99, v100);
      uint64_t v61 = swift_getDynamicType(v60, v59, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v61);
      v101[0] = v61;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v101);
      sub_10000DA68((uint64_t)v101, &qword_1001CAAD0);
      v62._uint64_t countAndFlagsBits = 58LL;
      v62._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v62);
      LogMessage.init(stringInterpolation:)(v21);
    }

    uint64_t v64 = v88;
    uint64_t v63 = v89;
    sub_10000D3A0(v99);
    uint64_t v65 = LogMessage.init(stringLiteral:)(0xD000000000000028LL);
    uint64_t v66 = static os_log_type_t.info.getter(v65);
    sub_1000BD1B0(v66, v45);
    swift_bridgeObjectRelease();
    uint64_t v67 = sub_1000E4378();
    uint64_t v68 = (os_log_s *)OSSignposter.logHandle.getter(v67);
    uint64_t v69 = v90;
    uint64_t v70 = v96;
    uint64_t v71 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v72 = static os_signpost_type_t.end.getter(v71);
    char v73 = OS_os_log.signpostsEnabled.getter();
    uint64_t v74 = v91;
    if ((v73 & 1) != 0)
    {
      uint64_t v75 = swift_retain(v70);
      uint64_t v76 = v93;
      checkForErrorAndConsumeState(state:)(v75);
      swift_release(v70);
      uint64_t v78 = v94;
      uint64_t v77 = v95;
      if ((*(unsigned int (**)(char *, uint64_t))(v94 + 88))(v76, v95) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v79 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v77);
        uint64_t v79 = "Finished";
      }

      uint64_t v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v80 = 0;
      os_signpost_id_t v81 = OSSignpostID.rawValue.getter(v80);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, v72, v81, "MetricsIdentifier", v79, v80, 2u);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v74 + 8))(v69, v92);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v98, v63);
    id v82 = [(id)objc_opt_self(AMSPromise) promiseWithResult:v22];

    return v82;
  }

  else
  {
    if (a2)
    {
      id v26 = a2;
    }

    else
    {
      NSString v84 = String._bridgeToObjectiveC()();
      NSString v85 = String._bridgeToObjectiveC()();
      id v26 = (id)AMSError(0LL, v84, v85, 0LL);
    }

    swift_errorRetain(a2);
    sub_1000E902C();
    Swift::Bool v86 = (void *)_convertErrorToNSError(_:)(v26);
    id v87 = [(id)objc_opt_self(AMSPromise) promiseWithError:v86];
    swift_errorRelease(v26);

    return v87;
  }

id sub_1000E87D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v10 = a3;
  sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
  sub_1000EFAA8(&qword_1001CD460, (unint64_t *)&unk_1001CD3C8, &OBJC_CLASS___CKRecordZoneID_ptr);
  id v8 = a3;
  AnyHashable.init<A>(_:)(&v10);
  LOBYTE(aHasher._combine(_:)(v1 & 1) = static AnyHashable.== infix(_:_:)(a1, v11);
  id result = (id)sub_10000E854((uint64_t)v11);
  if ((a1 & 1) != 0) {
    return objc_msgSend(a4, "persistChangedRecordsChangeToken:forRecordZoneIdentifier:", a2, v8, v10);
  }
  return result;
}

id sub_1000E88B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  uint64_t v6 = (void *)v4(v5);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v6;
}

uint64_t sub_1000E8908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = a3;
  uint64_t v75 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v84 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  __chkstk_darwin(v7);
  os_signpost_id_t v81 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v71 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v80 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = type metadata accessor for OSSignposter(0LL);
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  NSString v85 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v74 = qword_1001DBB40;
  uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
        + 2LL * *(void *)(v17 + 72),
          *(unsigned __int8 *)(v17 + 80) | 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  id v87 = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
  aBlock[0] = a2;
  uint64_t v19 = swift_retain(a2);
  id v20 = (id)AMSLogKey(v19);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v70 = v10;
    uint64_t v23 = a2;
    uint64_t v24 = v5;
    uint64_t v25 = v4;
    uint64_t v27 = v26;

    swift_bridgeObjectRetain(v27);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v28._uint64_t countAndFlagsBits = 0LL;
    v28._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    id v29 = v87;
    uint64_t v30 = sub_10000D37C(aBlock, (uint64_t)v87);
    uint64_t DynamicType = swift_getDynamicType(v30, v29, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v93[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v93);
    sub_10000DA68((uint64_t)v93, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 5972026LL;
    v32._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    uint64_t MetatypeMetadata = &type metadata for String;
    v93[0] = v22;
    v93[1] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v93);
    sub_10000DA68((uint64_t)v93, &qword_1001CAAD0);
    v33._uint64_t countAndFlagsBits = 93LL;
    v33._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    LogMessage.init(stringInterpolation:)(v15);
    uint64_t v4 = v25;
    uint64_t v5 = v24;
    a2 = v23;
    uint64_t v10 = v70;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v34._uint64_t countAndFlagsBits = 0LL;
    v34._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    uint64_t v35 = v87;
    uint64_t v36 = sub_10000D37C(aBlock, (uint64_t)v87);
    uint64_t v37 = swift_getDynamicType(v36, v35, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v37);
    v93[0] = v37;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v93);
    sub_10000DA68((uint64_t)v93, &qword_1001CAAD0);
    v38._uint64_t countAndFlagsBits = 58LL;
    v38._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v38);
    LogMessage.init(stringInterpolation:)(v15);
  }

  sub_10000D3A0(aBlock);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(67LL, 1LL);
  v39._object = (void *)0x8000000100174D20LL;
  v39._uint64_t countAndFlagsBits = 0xD000000000000043LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v39);
  swift_getErrorValue(v75, v92, &v90);
  uint64_t v40 = v90;
  uint64_t v41 = v91;
  id v87 = v91;
  uint64_t v42 = sub_10000D63C(aBlock);
  (*(void (**)(void *, uint64_t, void *))(*(v41 - 1) + 16LL))(v42, v40, v41);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(aBlock);
  sub_10000DA68((uint64_t)aBlock, &qword_1001CAAD0);
  v43._uint64_t countAndFlagsBits = 0LL;
  v43._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v43);
  uint64_t v44 = LogMessage.init(stringInterpolation:)(v15);
  uint64_t v45 = static os_log_type_t.error.getter(v44);
  sub_1000BD1B0(v45, v18);
  swift_bridgeObjectRelease();
  uint64_t v46 = sub_1000E4378();
  id v47 = (os_log_s *)OSSignposter.logHandle.getter(v46);
  uint64_t v48 = v79;
  uint64_t v49 = v76;
  uint64_t v50 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v51 = static os_signpost_type_t.end.getter(v50);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v52 = swift_retain(v49);
    uint64_t v53 = v71;
    checkForErrorAndConsumeState(state:)(v52);
    swift_release(v49);
    uint64_t v54 = v72;
    uint64_t v55 = v73;
    if ((*(unsigned int (**)(char *, uint64_t))(v72 + 88))(v53, v73) == enum case for OSSignpostError.doubleEnd(_:))
    {
      Swift::String v56 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
      Swift::String v56 = "Failed";
    }

    Swift::String v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)Swift::String v57 = 0;
    os_signpost_id_t v58 = OSSignpostID.rawValue.getter(v57);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v47, v51, v58, "MetricsIdentifier", v56, v57, 2u);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v10);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v85, v78);
  uint64_t v59 = *(void **)(a2 + 128);
  uint64_t v88 = sub_1000EFF8C;
  uint64_t v89 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  id v87 = &unk_1001B0198;
  uint64_t v60 = _Block_copy(aBlock);
  swift_retain(a2);
  id v61 = v59;
  Swift::String v62 = v81;
  static DispatchQoS.unspecified.getter(v61);
  v93[0] = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v64 = v63;
  uint64_t v65 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  uint64_t v66 = v84;
  dispatch thunk of SetAlgebra.init<A>(_:)(v93, v65, v67, v4, v64);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v62, v66, v60);
  _Block_release(v60);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v66, v4);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v62, v83);
  return swift_release(v89);
}

void sub_1000E902C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DE8C();
  id v7 = (id)_convertErrorToNSError(_:)(v5);
  __int16 v62 = 0;
  id v8 = sub_1000F035C(26LL);
  sub_1000F03EC(v8);
  if (v0)
  {
    HIBYTE(v62) = 1;
LABEL_4:
    if (v62 == 1)
    {
      if (qword_1001C7FC0 != -1) {
        swift_once(&qword_1001C7FC0, sub_1000BD5B8);
      }
      uint64_t v10 = (void *)sub_10000D33C(&qword_1001C9C70);
      uint64_t v11 = *(void *)(sub_10002C79C() - 8);
      uint64_t v12 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
                      + 2LL * *(void *)(v11 + 72),
                        *(unsigned __int8 *)(v11 + 80));
      uint64_t v59 = sub_1000F0430(v12, (__n128)xmmword_100164230);
      *(void *)&__int128 v58 = v1;
      uint64_t v13 = sub_10002FAA0();
      id v14 = (id)AMSLogKey(v13);
      if (v14)
      {
        uint64_t v15 = sub_1000105E8((uint64_t)v14);
        uint64_t v17 = v16;

        sub_10000DF10();
        sub_100010564();
        sub_100037DD0();
        uint64_t v18 = v59;
        sub_1000104C0(&v58);
        Swift::String v57 = (void *)sub_100010530();
        v56[0] = v18;
        sub_1000F020C((uint64_t)v56);
        sub_100067788((uint64_t)v56);
        sub_10000DC14();
        Swift::String v57 = &type metadata for String;
        v56[0] = v15;
        v56[1] = v17;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
        sub_100067788((uint64_t)v56);
        sub_10000DC4C(93LL);
        sub_10006796C();
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_100037DD0();
        uint64_t v21 = v59;
        sub_1000104C0(&v58);
        Swift::String v57 = (void *)sub_100010530();
        v56[0] = v21;
        sub_1000F020C((uint64_t)v56);
        sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_10006796C();
      }

      sub_10000D3A0(&v58);
      sub_10001A21C(23LL);
      sub_100048BA0();
      v22._uint64_t countAndFlagsBits = 0xD000000000000017LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t v59 = sub_10000DE08(v23, (unint64_t *)&qword_1001CF9A0, &OBJC_CLASS___NSError_ptr);
      *(void *)&__int128 v58 = v7;
      id v7 = v7;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v58);
      sub_10000DA68((uint64_t)&v58, &qword_1001CAAD0);
      sub_10000DC08();
      uint64_t v24 = sub_10006796C();
      uint64_t v25 = static os_log_type_t.error.getter(v24);
      sub_1000F0498(v25, (uint64_t)v12);
      sub_10000DCFC();
    }

    else if (HIBYTE(v62) == 1)
    {
      sub_1000E5270(0);
      id v19 = sub_1000E6D84(v3, 0);
      uint64_t v60 = sub_1000EFF54;
      id v61 = v1;
      *(void *)&__int128 v58 = _NSConcreteStackBlock;
      *((void *)&v58 + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
      sub_1000F02B8((uint64_t)sub_1000B1D04);
      sub_10002FAA0();
      uint64_t v20 = sub_10002FAF4();
      sub_1000C0190(v20, "addErrorBlock:");

      sub_100051B08();
      id v7 = v19;
    }

    sub_10000DD84();
    return;
  }

  id v9 = sub_1000F035C(28LL);
  sub_1000F03EC(v9);
  id v26 = sub_1000F035C(112LL);
  sub_1000F03EC(v26);
  id v27 = sub_1000F035C(2LL);
  if (!v27) {
    goto LABEL_4;
  }
  Swift::String v28 = v27;
  v63[0] = v27;
  sub_1000F03E4();
  uint64_t v30 = v29;
  sub_10000D904(&qword_1001CD400, (uint64_t (*)(uint64_t))type metadata accessor for CKError);
  uint64_t v32 = _BridgedStoredNSError.userInfo.getter(v30, v31);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
  sub_1000308B8(v33, v34, v32, &v58);
  sub_100020AB8();
  sub_100009070();
  if (!v59)
  {

    sub_10000DA68((uint64_t)&v58, &qword_1001CAAD0);
    goto LABEL_4;
  }

  uint64_t v35 = sub_10000D33C(&qword_1001CD408);
  if ((sub_100010BA4((uint64_t)v63, (uint64_t)&v58, (uint64_t)&type metadata for Any + 8, v35) & 1) == 0)
  {

    goto LABEL_4;
  }

  id v54 = v28;
  uint64_t v55 = v3;
  v53[2] = v53;
  uint64_t v36 = v63[0];
  sub_1000BE890(v63, v63[0]);
  uint64_t v38 = v63[0];
  uint64_t v37 = v63[1];
  int64_t v39 = v63[3];
  unint64_t v40 = v63[4];
  int64_t v41 = (unint64_t)(v63[2] + 64LL) >> 6;
  v53[1] = v36;
  swift_bridgeObjectRetain(v36);
  if (!v40) {
    goto LABEL_19;
  }
LABEL_18:
  unint64_t v42 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  unint64_t v43 = v42 | (v39 << 6);
  while (1)
  {
    sub_10002C644(*(void *)(v38 + 48) + 40 * v43, (uint64_t)&v58);
    id v61 = *(id *)(*(void *)(v38 + 56) + 8 * v43);
    char v48 = HIBYTE(v62);
    id v49 = v61;
    if ((v48 & 1) == 0
      && ((id v51 = sub_1000E95D4(26LL), v51, v51) || (v52 = sub_1000E95D4(28LL), v52, v52)))
    {
      HIBYTE(v62) = 1;
    }

    else if ((v62 & 1) == 0)
    {
      id v50 = sub_1000E95D4(112LL);
      sub_1000F03EC(v50);
      if (v49) {
        LOBYTE(v62) = 1;
      }
    }

    sub_10000DA68((uint64_t)&v58, (uint64_t *)&unk_1001CD410);
    if (v40) {
      goto LABEL_18;
    }
LABEL_19:
    int64_t v44 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v44 >= v41) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v37 + 8 * v44);
    int64_t v46 = v39 + 1;
    if (!v45)
    {
      int64_t v46 = v39 + 2;
      if (v39 + 2 >= v41) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v37 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v39 + 3;
        if (v39 + 3 >= v41) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v37 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v39 + 4;
          if (v39 + 4 >= v41) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v37 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v39 + 5;
            if (v39 + 5 >= v41) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v37 + 8 * v46);
            if (!v45)
            {
              int64_t v47 = v39 + 6;
              while (v47 < v41)
              {
                unint64_t v45 = *(void *)(v37 + 8 * v47++);
                if (v45)
                {
                  int64_t v46 = v47 - 1;
                  goto LABEL_34;
                }
              }

LABEL_46:
              sub_1000F0474();
              swift_bridgeObjectRelease();

              uint64_t v3 = v55;
              goto LABEL_4;
            }
          }
        }
      }
    }

id sub_1000E95D4(uint64_t a1)
{
  id v3 = objc_msgSend(v1, "ams_hasDomain:code:", CKErrorDomain, a1);
  if ((_DWORD)v3)
  {
    id v14 = v1;
    uint64_t v4 = sub_10000DE08((uint64_t)v3, (unint64_t *)&qword_1001CF9A0, &OBJC_CLASS___NSError_ptr);
    sub_1000F03E4();
    uint64_t v6 = v5;
    id v7 = v1;
    uint64_t v8 = v4;
    uint64_t v9 = v6;
  }

  else
  {
    id result = objc_msgSend(v1, "ams_underlyingErrorWithDomain:code:", CKErrorDomain, a1);
    if (!result) {
      return result;
    }
    id v14 = result;
    uint64_t v11 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    sub_1000F03E4();
    uint64_t v9 = v12;
    uint64_t v8 = v11;
  }

  else {
    return 0LL;
  }
}

uint64_t sub_1000E96C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v41 = type metadata accessor for MetricsIdentifierCloudDataController();
  v40[0] = a2;
  uint64_t v10 = swift_retain(a2);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v41;
    uint64_t v18 = sub_10000D37C(v40, v41);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v38[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v38[0] = v13;
    v38[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v41;
    uint64_t v24 = sub_10000D37C(v40, v41);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v38[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v40);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(43LL, 1LL);
  v27._object = (void *)0x8000000100174CD0LL;
  v27._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  swift_getErrorValue(a1, v37, &v35);
  uint64_t v28 = v35;
  uint64_t v29 = v36;
  uint64_t v41 = v36;
  uint64_t v30 = sub_10000D63C(v40);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v30, v28, v29);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
  sub_10000DA68((uint64_t)v40, &qword_1001CAAD0);
  v31._uint64_t countAndFlagsBits = 46LL;
  v31._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = LogMessage.init(stringInterpolation:)(v6);
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  sub_1000BD1B0(v33, v9);
  return swift_bridgeObjectRelease();
}

void sub_1000E99E4()
{
  uint64_t v3 = v0;
  int v44 = v4;
  sub_1000F0520();
  sub_1000F04EC();
  __chkstk_darwin(v5);
  sub_10004895C();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  id v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000674E0();
  uint64_t v14 = *(void **)(v3 + 128);
  *uint64_t v1 = v14;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v12);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v1, v12);
  if ((v14 & 1) != 0)
  {
    Swift::String v16 = *(void **)(v3 + 64);
    if (v16)
    {
      v16;
      uint64_t v17 = sub_1000E4378();
      uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v17);
      os_signpost_type_t v19 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        Swift::String v20 = (uint8_t *)sub_1000F0248();
        os_signpost_id_t v21 = sub_1000F04A0(v20);
        sub_1000F036C((void *)&_mh_execute_header, v18, v19, v21, "MetricsIdentifier", "Re-using cloud database", v20);
        sub_100070354((uint64_t)v20);
      }

      sub_100067744((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    }

    else
    {
      uint64_t v22 = sub_1000E4378();
      uint64_t v23 = (os_log_s *)OSSignposter.logHandle.getter(v22);
      os_signpost_type_t v24 = static os_signpost_type_t.event.getter();
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        uint64_t v25 = (uint8_t *)sub_1000F0248();
        os_signpost_id_t v26 = sub_1000F04A0(v25);
        sub_1000F036C((void *)&_mh_execute_header, v23, v24, v26, "MetricsIdentifier", "Preparing database", v25);
        sub_100070354((uint64_t)v25);
      }

      sub_100067744(v8, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      id v27 = [objc_allocWithZone(AMSMutablePromise) init];
      uint64_t v28 = *(void **)(v3 + 64);
      *(void *)(v3 + 64) = v27;
      id v29 = v27;

      uint64_t v30 = sub_10000DDDC((uint64_t)&unk_1001AFF50, 32LL);
      *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
      *(void *)(v30 + 24) = v29;
      int64_t v47 = sub_1000EFEA0;
      uint64_t v48 = v30;
      unint64_t v45 = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      sub_1000F0268((uint64_t)sub_1000B1D04);
      id v31 = v29;
      sub_10002588C();
      sub_100020AD8();
      sub_1000F04DC(v31, "addErrorBlock:");
      sub_1000F043C();
      id v32 = [(id)sub_1000F02B0() queryDeviceToDeviceEncryptionAvailability];
      sub_1000F029C();
      id v33 = [(id)sub_1000F02B0() fetchUserRecordID];
      sub_1000F029C();
      id v34 = [(id)sub_1000F02B0() privateDatabase];
      sub_1000F029C();
      uint64_t v35 = sub_10000D33C(&qword_1001CD430);
      uint64_t v36 = sub_10000DDDC(v35, 48LL);
      *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167CB0;
      *(void *)(v36 + 32) = v32;
      *(void *)(v36 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v33;
      unint64_t v45 = (void **)v36;
      specialized Array._endMutation()(v36);
      id v37 = v32;
      id v38 = v33;
      sub_10000D33C(&qword_1001CD448);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      sub_10000DE74();
      id v40 = [(id)objc_opt_self(AMSPromise) promiseWithAll:isa timeout:30.0];

      uint64_t v41 = sub_10000DDDC((uint64_t)&unk_1001AFFA0, 48LL);
      *(_BYTE *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = v44 & 1;
      *(void *)(v41 + 24) = v3;
      *(void *)(v41 + 32) = v31;
      *(void *)(v41 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v34;
      int64_t v47 = sub_1000EFED0;
      uint64_t v48 = v41;
      unint64_t v45 = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      unint64_t v42 = sub_1000F0268((uint64_t)sub_1000EA720);
      v31;
      sub_10002588C();
      swift_unknownObjectRetain(v34);
      sub_1000F0474();
      [v40 addFinishBlock:v42];
      swift_unknownObjectRelease(v34);

      sub_100051B08();
    }

    sub_10001A30C();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000E9E0C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v30 - v16;
  id v30 = *(id *)(a2 + 128);
  static DispatchTime.now()(v30);
  + infix(_:_:)(v15, 30.0);
  id v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  v31(v15, v11);
  uint64_t v18 = swift_allocObject(&unk_1001AFB18, 24LL, 7LL);
  swift_weakInit(v18 + 16, a2);
  uint64_t v19 = swift_allocObject(&unk_1001B0090, 32LL, 7LL);
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v19 + 24) = v18;
  aBlock[4] = sub_1000EFF4C;
  uint64_t v37 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001B00A8;
  Swift::String v20 = _Block_copy(aBlock);
  id v21 = a3;
  uint64_t v22 = swift_retain(v18);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v24 = v23;
  uint64_t v25 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v5, v24);
  id v27 = v30;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v10, v7, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  v31(v17, v11);
  uint64_t v28 = v37;
  swift_release(v18);
  return swift_release(v28);
}

void sub_1000EA0CC(void *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    uint64_t v5 = Strong;
    uint64_t v6 = *(void **)(Strong + 64);
    id v7 = v6;
    swift_release(v5);
    if (v6)
    {
      sub_10000D33C(&qword_1001CD448);
      id v8 = a1;
      char v9 = static NSObject.== infix(_:_:)(v8, v7);

      if ((v9 & 1) != 0)
      {
        swift_beginAccess(v3, &v12, 0LL, 0LL);
        uint64_t v10 = swift_weakLoadStrong(v3);
        if (v10)
        {
          uint64_t v11 = *(void **)(v10 + 64);
          *(void *)(v10 + 64) = 0LL;
          swift_release(v10);
        }
      }
    }
  }

void sub_1000EA1A4(uint64_t a1, void *a2, char a3, uint64_t a4, void *a5, void *a6)
{
  if ((a3 & 1) != 0)
  {
    id v9 = sub_1000E6D84(a6, 1);
    uint64_t v10 = swift_allocObject(&unk_1001B0040, 32LL, 7LL);
    *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
    *(void *)(v10 + 24) = a6;
    int64_t v47 = sub_1000F0140;
    uint64_t v48 = v10;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v44 = 1107296256LL;
    unint64_t v45 = sub_1000EA720;
    uint64_t v46 = &unk_1001B0058;
    uint64_t v11 = _Block_copy(&aBlock);
    uint64_t v12 = v48;
    id v13 = a5;
    swift_unknownObjectRetain(a6);
    swift_release(v12);
    [v9 addFinishBlock:v11];
    uint64_t v14 = v11;
LABEL_3:
    _Block_release(v14);
LABEL_4:

    return;
  }

  if (!a1) {
    goto LABEL_11;
  }
  swift_unknownObjectRetain(a1);
  uint64_t v17 = objc_opt_self(&OBJC_CLASS___NSArray);
  uint64_t v18 = (void *)swift_dynamicCastObjCClass(a1, v17);
  if (!v18 || (uint64_t v19 = v18, [v18 count] != (id)2))
  {
    swift_unknownObjectRelease(a1);
LABEL_11:
    if (a2)
    {
      uint64_t v24 = (void *)_convertErrorToNSError(_:)(a2);
      id v25 = sub_1000E95D4(9LL);

      if (v25)
      {
        uint64_t v26 = *(void **)(a4 + 112);
        swift_retain(a4);
        [v26 lock];
        sub_1000E4870();
        [v26 unlock];

        swift_release(a4);
      }

      else
      {
      }

      id v29 = a2;
    }

    else
    {
      NSString v27 = String._bridgeToObjectiveC()();
      NSString v28 = String._bridgeToObjectiveC()();
      id v29 = (id)AMSError(0LL, v27, v28, 0LL);
    }

    swift_errorRetain(a2);
    id v30 = (void *)_convertErrorToNSError(_:)(v29);
    [a5 finishWithError:v30];

    swift_errorRelease(v29);
    return;
  }

  id v20 = [v19 objectAtIndexedSubscript:0];
  _bridgeAnyObjectToAny(_:)(v20);
  swift_unknownObjectRelease(v20);
  uint64_t v21 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  swift_dynamicCast(&v49, &aBlock, (char *)&type metadata for Any + 8, v21, 7LL);
  id v22 = v49;
  unsigned __int8 v23 = [v49 integerValue];
  if ((v23 & 1) == 0 || (v23 & 2) == 0)
  {
    NSString v31 = String._bridgeToObjectiveC()();
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = (id)AMSError(0LL, v31, v32, 0LL);

    id v9 = (id)_convertErrorToNSError(_:)(v33);
    [a5 finishWithError:v9];
    swift_unknownObjectRelease(a1);

    goto LABEL_4;
  }

  id v34 = [v19 objectAtIndexedSubscript:1];
  _bridgeAnyObjectToAny(_:)(v34);
  swift_unknownObjectRelease(v34);
  uint64_t v35 = sub_10000D33C(&qword_1001CD440);
  swift_dynamicCast(&v49, &aBlock, (char *)&type metadata for Any + 8, v35, 7LL);
  id v36 = v49;
  swift_retain(a4);
  swift_unknownObjectRetain(v36);
  sub_1000EE7AC(a4, a4, v36);
  sub_1000E5310();
  if ((v37 & 1) == 0)
  {
    id v9 = sub_1000E6D84(a6, 0);
    uint64_t v39 = swift_allocObject(&unk_1001AFFF0, 32LL, 7LL);
    *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
    *(void *)(v39 + 24) = a6;
    int64_t v47 = sub_1000EFEEC;
    uint64_t v48 = v39;
    __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v44 = 1107296256LL;
    unint64_t v45 = sub_1000EA720;
    uint64_t v46 = &unk_1001B0008;
    id v40 = _Block_copy(&aBlock);
    uint64_t v41 = v48;
    id v42 = a5;
    swift_unknownObjectRetain(a6);
    swift_release(v41);
    [v9 addFinishBlock:v40];
    swift_unknownObjectRelease(a1);

    swift_unknownObjectRelease(v36);
    uint64_t v14 = v40;
    goto LABEL_3;
  }

  sub_1000E53F0();
  if ((v38 & 1) == 0) {
    sub_1000E7264();
  }
  [a5 finishWithResult:a6];
  swift_unknownObjectRelease(a1);

  swift_unknownObjectRelease(v36);
}

id sub_1000EA724(int a1, uint64_t a2, id a3, uint64_t a4)
{
  if (!a2) {
    return [a3 finishWithResult:a4];
  }
  swift_errorRetain(a2);
  uint64_t v6 = (void *)_convertErrorToNSError(_:)(a2);
  [a3 finishWithError:v6];

  return (id)swift_errorRelease(a2);
}

uint64_t sub_1000EA7A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  sub_100048DB4();
  swift_unknownObjectRetain(a2);
  id v6 = a3;
  v5(a2, a3);
  sub_1000292C4();

  return swift_unknownObjectRelease(a2);
}

void sub_1000EA800()
{
  uint64_t v2 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v3);
  sub_10000DE8C();
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v4 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000BDB78();
  uint64_t v6 = v1 + 2 * v5;
  uint64_t v37 = v7 | 7;
  uint64_t v8 = swift_allocObject(v4, v6, v7 | 7);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v36 = type metadata accessor for MetricsIdentifierCloudDataController();
  uint64_t v40 = v36;
  char v38 = v0;
  uint64_t v9 = sub_10002588C();
  id v10 = (id)AMSLogKey(v9);
  if (v10)
  {
    uint64_t v11 = sub_1000105E8((uint64_t)v10);
    uint64_t v13 = v12;

    sub_10000DEB4();
    sub_100010564();
    sub_100037DD0();
    sub_1000104C0(&v38);
    uint64_t v14 = sub_100010530();
    uint64_t v15 = sub_1000F0150(v14);
    sub_10000DF18(v15, &qword_1001CAAD0);
    sub_10000DC14();
    unint64_t v45 = &type metadata for String;
    uint64_t v43 = v11;
    uint64_t v44 = v13;
    sub_10000DCE8();
    sub_10000DA68((uint64_t)&v43, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_10006796C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_100037DD0();
    sub_1000104C0(&v38);
    uint64_t v16 = sub_100010530();
    uint64_t v17 = sub_1000F0150(v16);
    sub_10000DF18(v17, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10006796C();
  }

  sub_10002C774();
  sub_10000E008();
  uint64_t v18 = sub_10000DD38(23LL);
  uint64_t v19 = static os_log_type_t.info.getter(v18);
  sub_1000F0498(v19, v8);
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_allocObject(v4, v6, v37);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v40 = v36;
  char v38 = v0;
  uint64_t v21 = sub_10002588C();
  id v22 = (id)AMSLogKey(v21);
  if (v22)
  {
    uint64_t v23 = sub_1000105E8((uint64_t)v22);
    sub_10004877C();
    sub_100020BB4();
    sub_100010564();
    sub_100037DD0();
    sub_1000104C0(&v38);
    uint64_t v24 = sub_100010530();
    sub_1000F0150(v24);
    sub_100067788((uint64_t)&v43);
    sub_10000DC14();
    unint64_t v45 = &type metadata for String;
    uint64_t v43 = v23;
    uint64_t v44 = v1;
    sub_10000DCE8();
    sub_100067788((uint64_t)&v43);
    sub_10000DC4C(93LL);
    sub_10006796C();
    sub_100020AB8();
  }

  else
  {
    sub_10001A1BC();
    sub_100037DD0();
    sub_1000104C0(&v38);
    uint64_t v25 = sub_100010530();
    uint64_t v26 = sub_1000F0150(v25);
    sub_10000DF18(v26, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10006796C();
  }

  sub_10002C774();
  uint64_t v27 = sub_1000105B4(0xD000000000000019LL);
  uint64_t v28 = static os_log_type_t.debug.getter(v27);
  sub_1000F0498(v28, v20);
  sub_10000DE2C();
  id v29 = [objc_allocWithZone(AMSMutableBinaryPromise) init];
  id v30 = v2[13];
  uint64_t v31 = sub_10000DDDC((uint64_t)&unk_1001AFE60, 32LL);
  *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *(void *)(v31 + 24) = v29;
  uint64_t v41 = sub_1000EFE48;
  uint64_t v42 = v31;
  char v38 = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256LL;
  NSString v32 = sub_100051A7C((uint64_t)sub_1000EAEB8);
  sub_10002588C();
  id v33 = v30;
  v29;
  sub_100025894();
  [v33 fetchModifiedRecordsWithCompletion:v32];
  sub_100051B08();

  uint64_t v41 = sub_1000EFE50;
  uint64_t v42 = (uint64_t)v2;
  char v38 = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256LL;
  sub_100051A7C((uint64_t)sub_100061FB8);
  sub_10002588C();
  uint64_t v34 = sub_100025894();
  sub_1000C0190(v34, "addSuccessBlock:");
  sub_100051B08();
  uint64_t v41 = sub_1000EFE58;
  uint64_t v42 = (uint64_t)v2;
  char v38 = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256LL;
  sub_100051A7C((uint64_t)sub_1000B1D04);
  sub_10002588C();
  uint64_t v35 = sub_100025894();
  sub_1000C0190(v35, "addErrorBlock:");
  sub_100051B08();
  sub_10001A30C();
}

uint64_t sub_1000EAC4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void **)(a4 + 128);
  uint64_t v16 = (void *)swift_allocObject(&unk_1001AFF00, 48LL, 7LL);
  v16[2] = a5;
  void v16[3] = a4;
  void v16[4] = a1;
  v16[5] = a2;
  aBlock[4] = sub_1000EFE90;
  uint64_t v31 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001AFF18;
  uint64_t v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  id v18 = v15;
  id v19 = a5;
  swift_retain(a4);
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v20);
  id v29 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v22 = v21;
  uint64_t v23 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v9, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v27);
  return swift_release(v31);
}

void sub_1000EAE68(void *a1)
{
  id v3 = v2;
  [a1 finishWithPromise:v2];
}

uint64_t sub_1000EAEB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  if (a2)
  {
    uint64_t v9 = sub_10000D33C((uint64_t *)&unk_1001CD420);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v9);
  }

  if (a3)
  {
    uint64_t v10 = sub_10000D33C(&qword_1001CD440);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v10);
  }

  swift_retain(v7);
  id v11 = a4;
  v8(v6, a3, a4);
  swift_release(v7);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000EAF68(uint64_t a1)
{
  uint64_t v1 = swift_retain(a1);
  return sub_1000EE844(v1, v1, (void (*)(id))&static Date.now.getter);
}

uint64_t sub_1000EAF8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v41 = type metadata accessor for MetricsIdentifierCloudDataController();
  v40[0] = a2;
  uint64_t v10 = swift_retain(a2);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v16._uint64_t countAndFlagsBits = 0LL;
    v16._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    uint64_t v17 = v41;
    id v18 = sub_10000D37C(v40, v41);
    uint64_t DynamicType = swift_getDynamicType(v18, v17, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v38[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 5972026LL;
    v20._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    uint64_t MetatypeMetadata = &type metadata for String;
    v38[0] = v13;
    v38[1] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v21._uint64_t countAndFlagsBits = 93LL;
    v21._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    LogMessage.init(stringInterpolation:)(v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v22._uint64_t countAndFlagsBits = 0LL;
    v22._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t v23 = v41;
    uint64_t v24 = sub_10000D37C(v40, v41);
    uint64_t v25 = swift_getDynamicType(v24, v23, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v38[0] = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v38);
    sub_10000DA68((uint64_t)v38, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 58LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v40);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(64LL, 1LL);
  v27._object = (void *)0x8000000100174B40LL;
  v27._uint64_t countAndFlagsBits = 0xD000000000000040LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v27);
  swift_getErrorValue(a1, v37, &v35);
  uint64_t v28 = v35;
  uint64_t v29 = v36;
  uint64_t v41 = v36;
  id v30 = sub_10000D63C(v40);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16LL))(v30, v28, v29);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v40);
  sub_10000DA68((uint64_t)v40, &qword_1001CAAD0);
  v31._uint64_t countAndFlagsBits = 0LL;
  v31._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v31);
  uint64_t v32 = LogMessage.init(stringInterpolation:)(v6);
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  sub_1000BD1B0(v33, v9);
  return swift_bridgeObjectRelease();
}

void sub_1000EB2B0()
{
  uint64_t v1 = v0;
  uint64_t v41 = v3;
  uint64_t v42 = v2;
  uint64_t v43 = *v0;
  uint64_t v4 = sub_1000F0520();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10004895C();
  uint64_t v8 = (char *)(v6 - v7);
  __chkstk_darwin(v9);
  id v11 = (char *)&v40 - v10;
  uint64_t v12 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  sub_10000DC8C();
  __chkstk_darwin(v14);
  sub_10004895C();
  uint64_t v17 = v15 - v16;
  __chkstk_darwin(v18);
  Swift::String v20 = (char *)&v40 - v19;
  uint64_t v21 = sub_1000E4378();
  uint64_t v22 = OSSignposter.logHandle.getter(v21);
  OSSignpostID.init(log:)(v22);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v5 + 8);
  v23(v11, v4);
  uint64_t v24 = sub_1000E4378();
  uint64_t v25 = (os_log_s *)OSSignposter.logHandle.getter(v24);
  os_signpost_type_t v26 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    Swift::String v27 = (uint8_t *)sub_1000F0248();
    *(_WORD *)Swift::String v27 = 0;
    os_signpost_id_t v28 = OSSignpostID.rawValue.getter(v27);
    sub_1000F036C((void *)&_mh_execute_header, v25, v26, v28, "MetricsIdentifier", "Syncing changes to cloud", v27);
    sub_100070354((uint64_t)v27);
  }

  sub_1000F03F4(v17, (uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 16));
  uint64_t v29 = type metadata accessor for OSSignpostIntervalState(0LL);
  sub_100029350(v29);
  uint64_t v30 = OSSignpostIntervalState.init(id:isOpen:)(v17, 1LL);
  v23(v8, v4);
  sub_1000E99E4();
  uint64_t v32 = v31;
  uint64_t v33 = (void *)sub_10000DDDC((uint64_t)&unk_1001AFD20, 40LL);
  uint64_t v34 = v41;
  void v33[2] = v42;
  void v33[3] = v34;
  v33[4] = v1;
  uint64_t v48 = sub_1000EFD00;
  id v49 = v33;
  uint64_t v46 = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256LL;
  uint64_t v35 = sub_1000F0268((uint64_t)sub_1000E88B4);
  swift_bridgeObjectRetain(v34);
  sub_10002FAA0();
  sub_10000DD9C();
  sub_1000292C4();
  id v36 = [v32 thenWithBlock:v35];
  _Block_release(v35);

  uint64_t v37 = (void *)sub_10000DDDC((uint64_t)&unk_1001AFD70, 40LL);
  void v37[2] = v1;
  void v37[3] = v30;
  v37[4] = v43;
  uint64_t v48 = sub_1000EFD18;
  id v49 = v37;
  uint64_t v46 = _NSConcreteStackBlock;
  uint64_t v47 = 1107296256LL;
  char v38 = sub_1000F0268((uint64_t)sub_1000EA720);
  sub_10002FAA0();
  swift_retain(v30);
  sub_10002FAF4();
  sub_10007B6E0(v36, "addFinishBlock:");
  _Block_release(v38);
  uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___AMSBinaryPromise);
  sub_1000F03DC(v39, "promiseWithPromise:");
  sub_1000F0474();

  sub_1000F038C(v45);
  sub_10001A30C();
}

id sub_1000EB5A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject(&unk_1001AFDC0, 24LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  uint64_t v9 = swift_allocObject(&unk_1001AFDE8, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  uint64_t v10 = *(void **)(a4 + 112);
  swift_bridgeObjectRetain(a3);
  objc_msgSend(v10, "lock", swift_bridgeObjectRetain(a2).n128_f64[0]);
  if (a2)
  {
    swift_retain(a4);
    swift_bridgeObjectRetain(a2);
    uint64_t v12 = sub_1000E3C88(v11, (IMP *)a4);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  swift_bridgeObjectRelease();
  if (a3)
  {
    swift_retain(a4);
    swift_bridgeObjectRetain(a3);
    uint64_t v14 = sub_1000E3F10(v13, (IMP *)a4);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  swift_bridgeObjectRelease();
  [v10 unlock];
  if (!v12)
  {
    v15.super.Class isa = 0LL;
    if (v14) {
      goto LABEL_9;
    }
LABEL_11:
    v16.super.Class isa = 0LL;
    goto LABEL_12;
  }

  swift_bridgeObjectRetain(v12);
  sub_10000D33C((uint64_t *)&unk_1001CD420);
  v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_11;
  }
LABEL_9:
  swift_bridgeObjectRetain(v14);
  sub_10000D33C(&qword_1001CD440);
  v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_12:
  id v17 = [a1 addRecordsToSave:v15.super.isa recordIdentifiersToDelete:v16.super.isa];

  uint64_t v18 = (void *)swift_allocObject(&unk_1001AFE10, 48LL, 7LL);
  v18[2] = a4;
  void v18[3] = v8;
  void v18[4] = v9;
  void v18[5] = a1;
  aBlock[4] = sub_1000EFD74;
  uint64_t v24 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000E88B0;
  void aBlock[3] = &unk_1001AFE28;
  uint64_t v19 = _Block_copy(aBlock);
  Swift::String v20 = v24;
  swift_retain(a4);
  swift_retain(v8);
  swift_retain(v9);
  swift_unknownObjectRetain(a1);
  swift_release(v20);
  id v21 = [v17 continueWithBlock:v19];
  _Block_release(v19);
  swift_release(v8);
  swift_release(v9);

  return v21;
}

id sub_1000EB840(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (uint64_t *)(a4 + 16);
  uint64_t v7 = (uint64_t *)(a5 + 16);
  if (a1)
  {
    swift_beginAccess(a5 + 16, v31, 0LL, 0LL);
    uint64_t v9 = *v7;
    if (*v7)
    {
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain_n(*v7, 2LL);
      id v12 = a1;
      swift_retain(a3);
      for (; v11; uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v24))
      {
        unint64_t v13 = v6;
        uint64_t v14 = 4LL;
        while (1)
        {
          if ((v9 & 0xC000000000000001LL) != 0)
          {
            uint64_t v6 = (uint64_t *)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v9);
          }

          else
          {
            uint64_t v6 = *(uint64_t **)(v9 + 8 * v14);
            swift_unknownObjectRetain(v6);
          }

          uint64_t v15 = v14 - 3;
          if (__OFADD__(v14 - 4, 1LL)) {
            break;
          }
          sub_1000ED018();
          swift_unknownObjectRelease(v6);
          ++v14;
          if (v15 == v11)
          {
            swift_release(a3);
            swift_bridgeObjectRelease_n(v9, 2LL);
            uint64_t v6 = v13;
            goto LABEL_23;
          }
        }

        __break(1u);
LABEL_18:
        if (v9 >= 0) {
          uint64_t v24 = v10;
        }
        else {
          uint64_t v24 = v9;
        }
        swift_bridgeObjectRetain_n(v9, 2LL);
        id v25 = a1;
        swift_retain(a3);
      }

      swift_release(a3);
      swift_bridgeObjectRelease_n(v9, 2LL);
    }

    else
    {
      id v18 = a1;
    }

id sub_1000EBB6C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void **)(a1 + 112);
  [v6 lock];
  swift_beginAccess(a2, v13, 0LL, 0LL);
  uint64_t v7 = *a2;
  if (v7)
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(v7);
    sub_1000E3628(v8, a1);
    swift_bridgeObjectRelease();
  }

  swift_beginAccess(a3, v12, 0LL, 0LL);
  uint64_t v9 = *a3;
  if (v9)
  {
    swift_retain(a1);
    swift_bridgeObjectRetain(v9);
    sub_1000E37DC(v10, a1);
    swift_bridgeObjectRelease();
  }

  return [v6 unlock];
}

id sub_1000EBC48(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(uint64_t (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (void *)v6(a2, a3);
  swift_release(v5);

  return v9;
}

uint64_t sub_1000EBCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)&v45 - v16;
  uint64_t v18 = type metadata accessor for OSSignposter(0LL);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v45 - v22;
  if (a2)
  {
    uint64_t v24 = sub_1000E4378();
    id v25 = (os_log_s *)OSSignposter.logHandle.getter(v24);
    uint64_t v26 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v27 = static os_signpost_type_t.end.getter(v26);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v28 = swift_retain(a4);
      checkForErrorAndConsumeState(state:)(v28);
      swift_release(a4);
      uint64_t v29 = v46;
      if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v11, v46) == enum case for OSSignpostError.doubleEnd(_:))
      {
        uint64_t v30 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v29);
        uint64_t v30 = "Failed";
      }

      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      os_signpost_id_t v42 = OSSignpostID.rawValue.getter(v41);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, v27, v42, "MetricsIdentifier", v30, v41, 2u);
LABEL_14:
      uint64_t v38 = v49;
      uint64_t v37 = v50;
      uint64_t v40 = v47;
      uint64_t v39 = v48;
      swift_slowDealloc(v41, -1LL, -1LL);
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v31 = sub_1000E4378();
    id v25 = (os_log_s *)OSSignposter.logHandle.getter(v31);
    uint64_t v32 = OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v33 = static os_signpost_type_t.end.getter(v32);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v34 = swift_retain(a4);
      checkForErrorAndConsumeState(state:)(v34);
      swift_release(a4);
      uint64_t v35 = v46;
      if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v9, v46) == enum case for OSSignpostError.doubleEnd(_:))
      {
        id v36 = "[Error] Interval already ended";
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v35);
        id v36 = "Finished";
      }

      uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v41 = 0;
      os_signpost_id_t v43 = OSSignpostID.rawValue.getter(v41);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, v33, v43, "MetricsIdentifier", v36, v41, 2u);
      id v17 = v15;
      uint64_t v23 = v21;
      goto LABEL_14;
    }

    id v17 = v15;
    uint64_t v23 = v21;
  }

  uint64_t v38 = v49;
  uint64_t v37 = v50;
  uint64_t v40 = v47;
  uint64_t v39 = v48;
LABEL_15:

  (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v23, v39);
}

void sub_1000EC020()
{
  uint64_t v3 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DC74();
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v5 = sub_10002C79C();
  uint64_t v6 = (__n128 *)sub_1000F01BC(v5);
  uint64_t v27 = sub_1000F0418(v6, (__n128)xmmword_100164230);
  id v25 = v0;
  uint64_t v7 = sub_10002588C();
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    sub_1000F0410((uint64_t)v8);
    sub_100081A40();
    sub_10000DD9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v9 = v27;
    uint64_t v10 = sub_10000D37C(&v25, v27);
    sub_10000DC54((uint64_t)v10, v9);
    uint64_t v31 = (void *)sub_1000BDBEC();
    v30[0] = v9;
    sub_10000DCE8();
    sub_1000819D8((uint64_t)v30);
    sub_10000DC14();
    uint64_t v31 = &type metadata for String;
    v30[0] = v2;
    v30[1] = v1;
    sub_10000DCE8();
    sub_1000819D8((uint64_t)v30);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DCFC();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v11 = v27;
    uint64_t v12 = sub_10000D37C(&v25, v27);
    sub_10000DC54((uint64_t)v12, v11);
    uint64_t v31 = (void *)sub_10000DDAC();
    v30[0] = v11;
    uint64_t v13 = sub_10000DCE8();
    sub_10000DF18(v13, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10002C774();
  sub_10000E008();
  uint64_t v14 = sub_10000DD38(21LL);
  uint64_t v15 = static os_log_type_t.debug.getter(v14);
  sub_1000F0484(v15, (uint64_t)v6);
  sub_10000DE2C();
  id v16 = objc_allocWithZone(&OBJC_CLASS___AMSMutableBinaryPromise);
  id v17 = objc_msgSend(v16, "init", v25);
  id v18 = [(id)sub_1000F02B0() fetchUserRecordID];
  sub_1000F04E4();
  uint64_t v19 = sub_10000DDDC((uint64_t)&unk_1001AFB18, 24LL);
  sub_1000F0254(v19);
  uint64_t v20 = sub_10000DDDC((uint64_t)&unk_1001AFC30, 32LL);
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  *(void *)(v20 + 24) = v17;
  uint64_t v28 = sub_1000EFCAC;
  uint64_t v29 = v20;
  id v25 = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256LL;
  sub_100051A7C((uint64_t)sub_1000E7260);
  id v21 = v17;
  uint64_t v22 = sub_10002FAF4();
  sub_100096158(v22, "addSuccessBlock:");
  sub_1000F03C4();
  uint64_t v23 = sub_10000DDDC((uint64_t)&unk_1001AFC80, 32LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(v23 + 24) = v21;
  uint64_t v28 = sub_1000EFCB8;
  uint64_t v29 = v23;
  id v25 = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256LL;
  sub_100051A7C((uint64_t)sub_1000B1D04);
  sub_10002588C();
  v21;
  uint64_t v24 = sub_10002FAF4();
  sub_100096158(v24, "addErrorBlock:");

  sub_1000F03C4();
  sub_10001A30C();
}

id sub_1000EC30C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v90 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v98, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (!Strong) {
    return [a3 finishWithSuccess];
  }
  uint64_t v17 = Strong;
  uint64_t v87 = v10;
  uint64_t v88 = v7;
  id v89 = a3;
  id v18 = *(void **)(Strong + 112);
  swift_retain(Strong);
  [v18 lock];
  sub_1000E51E4();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  [v18 unlock];
  swift_release();
  id v23 = [a1 name];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  if (v20 != v24 || v22 != v26)
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v26, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0) {
      goto LABEL_16;
    }
LABEL_11:
    if (qword_1001C7FC0 != -1) {
      swift_once(&qword_1001C7FC0, sub_1000BD5B8);
    }
    uint64_t v30 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v31 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v32 = *(void *)(v31 + 72);
    uint64_t v33 = *(unsigned __int8 *)(v31 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v35 = swift_allocObject(v30, v34 + 2 * v32, v33 | 7);
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    v86[1] = v35 + v34;
    uint64_t v92 = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
    aBlock[0] = v17;
    uint64_t v36 = swift_retain(v17);
    id v37 = (id)AMSLogKey(v36);
    if (v37)
    {
      uint64_t v38 = v37;
      v86[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      uint64_t v40 = v39;

      swift_bridgeObjectRetain(v40);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v41._uint64_t countAndFlagsBits = 0LL;
      v41._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      os_signpost_id_t v42 = v92;
      os_signpost_id_t v43 = sub_10000D37C(aBlock, (uint64_t)v92);
      uint64_t DynamicType = swift_getDynamicType(v43, v42, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v95 = (void *)DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
      sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
      v45._uint64_t countAndFlagsBits = 5972026LL;
      v45._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v95 = (void *)v86[0];
      uint64_t v96 = v40;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
      sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
      v46._uint64_t countAndFlagsBits = 93LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v62._uint64_t countAndFlagsBits = 0LL;
      v62._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v62);
      uint64_t v63 = v92;
      uint64_t v64 = sub_10000D37C(aBlock, (uint64_t)v92);
      uint64_t v65 = swift_getDynamicType(v64, v63, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v65);
      uint64_t v95 = (void *)v65;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
      sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
      v66._uint64_t countAndFlagsBits = 58LL;
      v66._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v66);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(aBlock);
    uint64_t v67 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
    uint64_t v68 = static os_log_type_t.debug.getter(v67);
    sub_1000BD1B0(v68, v35);
    swift_bridgeObjectRelease();
    uint64_t v69 = swift_retain(v17);
    sub_1000EE844(v69, v17, (void (*)(id))&static Date.distantPast.getter);
    uint64_t v70 = *(void **)(v17 + 128);
    uint64_t v71 = swift_allocObject(&unk_1001AFCD0, 32LL, 7LL);
    id v72 = v89;
    *(void *)(v71 + swift_unknownObjectWeakDestroy(v0 + 16) = v17;
    *(void *)(v71 + 24) = v72;
    uint64_t v93 = sub_1000EFCC4;
    uint64_t v94 = v71;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100021A3C;
    uint64_t v92 = &unk_1001AFCE8;
    uint64_t v73 = _Block_copy(aBlock);
    swift_retain(v17);
    id v74 = v70;
    static DispatchQoS.unspecified.getter(v72);
    uint64_t v95 = _swiftEmptyArrayStorage;
    sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    uint64_t v76 = v75;
    uint64_t v77 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
    sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v77, v78, v6, v76);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v73);
    _Block_release(v73);
    swift_release();

    (*(void (**)(char *, uint64_t))(v88 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v12, v87);
    return (id)swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_16:
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v47 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v48 = type metadata accessor for LogMessage(0LL);
  uint64_t v49 = swift_allocObject( v47,  ((*(unsigned __int8 *)(*(void *)(v48 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v48 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v48 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v92 = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
  aBlock[0] = v17;
  uint64_t v50 = swift_retain(v17);
  id v51 = (id)AMSLogKey(v50);
  if (v51)
  {
    id v52 = v51;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    uint64_t v55 = v54;

    swift_bridgeObjectRetain(v55);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v56._uint64_t countAndFlagsBits = 0LL;
    v56._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v56);
    Swift::String v57 = v92;
    __int128 v58 = sub_10000D37C(aBlock, (uint64_t)v92);
    uint64_t v59 = swift_getDynamicType(v58, v57, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v59);
    uint64_t v95 = (void *)v59;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
    sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
    v60._uint64_t countAndFlagsBits = 5972026LL;
    v60._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v95 = (void *)v53;
    uint64_t v96 = v55;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
    sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
    v61._uint64_t countAndFlagsBits = 93LL;
    v61._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v61);
    LogMessage.init(stringInterpolation:)(v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v79._uint64_t countAndFlagsBits = 0LL;
    v79._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v79);
    uint64_t v80 = v92;
    os_signpost_id_t v81 = sub_10000D37C(aBlock, (uint64_t)v92);
    uint64_t v82 = swift_getDynamicType(v81, v80, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v82);
    uint64_t v95 = (void *)v82;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
    sub_10000DA68((uint64_t)&v95, &qword_1001CAAD0);
    v83._uint64_t countAndFlagsBits = 58LL;
    v83._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v83);
    LogMessage.init(stringInterpolation:)(v15);
  }

  sub_10000D3A0(aBlock);
  uint64_t v84 = LogMessage.init(stringLiteral:)(0xD000000000000013LL);
  uint64_t v85 = static os_log_type_t.debug.getter(v84);
  sub_1000BD1B0(v85, v49);
  swift_bridgeObjectRelease();
  [v89 finishWithSuccess];
  return (id)swift_release();
}

void sub_1000ECB24(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10000D33C(&qword_1001CD430);
  uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167CB0;
  sub_1000EA800();
  *(void *)(v4 + 32) = v5;
  sub_1000E77A8();
  *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v6;
  specialized Array._endMutation()(v6);
  sub_10000DAA0(0LL, &qword_1001CD438, &OBJC_CLASS___AMSBinaryPromise_ptr);
  id v7 = sub_1000E68C4();
  [a2 finishWithPromise:v7];
}

uint64_t sub_1000ECBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  sub_100048DB4();
  uint64_t v4 = sub_1000F0294();
  v3(v4);
  sub_1000292C4();
  return swift_unknownObjectRelease(a2);
}

void sub_1000ECC20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = type metadata accessor for LogMessage(0LL);
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v10 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v35 = type metadata accessor for MetricsIdentifierCloudDataController();
  v34[0] = a2;
  uint64_t v12 = swift_retain(a2);
  id v13 = (id)AMSLogKey(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v35;
    uint64_t v20 = sub_10000D37C(v34, v35);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v32[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000DA68((uint64_t)v32, &qword_1001CAAD0);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t MetatypeMetadata = &type metadata for String;
    v32[0] = v15;
    v32[1] = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000DA68((uint64_t)v32, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = v35;
    uint64_t v26 = sub_10000D37C(v34, v35);
    uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    v32[0] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
    sub_10000DA68((uint64_t)v32, &qword_1001CAAD0);
    v28._uint64_t countAndFlagsBits = 58LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(v34);
  uint64_t v29 = LogMessage.init(stringLiteral:)(0xD00000000000001ELL);
  uint64_t v30 = static os_log_type_t.error.getter(v29);
  sub_1000BD1B0(v30, v11);
  swift_bridgeObjectRelease();
  uint64_t v31 = (void *)_convertErrorToNSError(_:)(a1);
  [a3 finishWithError:v31];
}

uint64_t sub_1000ECEF8@<X0>(uint64_t a1@<X8>)
{
  id v4 = sub_100011A20(v3, "name");
  uint64_t v5 = sub_1000105E8((uint64_t)v4);
  uint64_t v7 = v6;

  sub_10000DEB4();
  v8._uint64_t countAndFlagsBits = 95LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = sub_10000DDF8();
  id v10 = objc_msgSend(sub_100011A20(v9, "zoneIdentifier"), "name");
  sub_1000F029C();
  static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  sub_10000DF10();
  sub_1000F0304();
  sub_10000DE2C();
  sub_10000DCFC();
  v11._uint64_t countAndFlagsBits = v5;
  v11._object = v7;
  URL.appendPathComponent(_:)(v11);
  sub_1000090CC();
  v12._uint64_t countAndFlagsBits = 0x64726F636572LL;
  v12._object = (void *)0xE600000000000000LL;
  URL.appendPathExtension(_:)(v12);
  uint64_t v13 = type metadata accessor for URL(0LL);
  return sub_10000D5C0(a1, 0LL, 1LL, v13);
}

void sub_1000ED018()
{
  uint64_t v5 = v4;
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_1000F0188();
  uint64_t v60 = *(void *)(v7 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_1000105F0();
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_1000292E4();
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000F0344();
  uint64_t v56 = v10;
  uint64_t v55 = v2 + 2 * v11;
  uint64_t v54 = v12 | 7;
  uint64_t v13 = swift_allocObject(v10, v55, v12 | 7);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v53 = type metadata accessor for MetricsIdentifierCloudDataController();
  uint64_t v69 = v53;
  v68[0] = v0;
  Swift::String v61 = v0;
  uint64_t v14 = sub_100048DB4();
  id v15 = (id)AMSLogKey(v14);
  if (v15)
  {
    uint64_t v16 = sub_1000105E8((uint64_t)v15);
    uint64_t v57 = v7;
    uint64_t v18 = v17;

    sub_10000DF9C();
    sub_100010564();
    sub_10000DEBC();
    sub_1000104C0(v68);
    uint64_t v19 = sub_100010530();
    sub_10008BD20(v19);
    sub_1000F045C();
    sub_10000DC14();
    uint64_t v67 = &type metadata for String;
    uint64_t v65 = v16;
    uint64_t v66 = v18;
    sub_100048640();
    sub_1000F045C();
    sub_10000DC4C(93LL);
    sub_1000ACC0C();
    uint64_t v7 = v57;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DEBC();
    sub_1000104C0(v68);
    uint64_t v20 = sub_100010530();
    uint64_t v21 = sub_10008BD20(v20);
    sub_10006B9BC(v21, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000ACC0C();
  }

  sub_10000D3A0(v68);
  sub_10001A21C(35LL);
  sub_100048BA0();
  v70._uint64_t countAndFlagsBits = 0xD000000000000022LL;
  sub_1000F0180(v70);
  uint64_t ObjectType = swift_getObjectType(v5);
  uint64_t v69 = ObjectType;
  v68[0] = v5;
  swift_unknownObjectRetain(v5);
  uint64_t v23 = sub_10000DCE8();
  sub_10000DF18(v23, &qword_1001CAAD0);
  sub_10000DC4C(46LL);
  uint64_t v24 = sub_1000ACC0C();
  uint64_t v25 = static os_log_type_t.info.getter(v24);
  sub_1000BD1B0(v25, v13);
  swift_bridgeObjectRelease();
  [v0[13] removeRecordWithIdentifier:v5];
  sub_1000ECEF8(v1);
  uint64_t v26 = sub_1000102D4(v1, 1LL, v7);
  if ((_DWORD)v26 == 1)
  {
    sub_1000F04AC(v26, &qword_1001CB180);
  }

  else
  {
    sub_1000F03F4(v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 32));
    id v27 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    v68[0] = 0LL;
    unsigned int v31 = [v27 removeItemAtURL:v29 error:v68];

    id v32 = v68[0];
    if (v31)
    {
      uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
      id v34 = v68[0];
      v33(v3, v7);
    }

    else
    {
      uint64_t v58 = v3;
      uint64_t v59 = v5;
      id v35 = v68[0];
      uint64_t v36 = _convertNSErrorToError(_:)(v32);

      swift_willThrow(v37);
      uint64_t v38 = swift_allocObject(v56, v55, v54);
      *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v69 = v53;
      v68[0] = v61;
      uint64_t v39 = swift_retain(v61);
      id v40 = (id)AMSLogKey(v39);
      if (v40)
      {
        uint64_t v41 = sub_1000105E8((uint64_t)v40);
        uint64_t v43 = v42;

        sub_10000DF10();
        sub_100010564();
        sub_10000DEBC();
        sub_1000104C0(v68);
        uint64_t v44 = sub_100010530();
        sub_10008BD20(v44);
        sub_1000F0230();
        sub_10000DC14();
        uint64_t v67 = &type metadata for String;
        uint64_t v65 = v41;
        uint64_t v66 = v43;
        sub_100048640();
        sub_1000F0230();
        sub_10000DC4C(93LL);
        sub_1000F0144();
        sub_10000DE2C();
      }

      else
      {
        sub_10001A1BC();
        sub_10000DEBC();
        sub_1000104C0(v68);
        uint64_t v45 = sub_100010530();
        uint64_t v46 = sub_10008BD20(v45);
        sub_10006B9BC(v46, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_1000F0144();
      }

      sub_10000D3A0(v68);
      sub_1000485F4(61LL);
      v71._uint64_t countAndFlagsBits = 0xD000000000000035LL;
      v71._object = (void *)0x8000000100174920LL;
      sub_1000F0180(v71);
      uint64_t v69 = ObjectType;
      v68[0] = v59;
      swift_unknownObjectRetain(v59);
      sub_10000DCE8();
      sub_1000F0224();
      sub_1000F01A4();
      swift_getErrorValue(v36, &v64, &v62);
      uint64_t v47 = v36;
      uint64_t v48 = v62;
      uint64_t v49 = v63;
      uint64_t v69 = v63;
      uint64_t v50 = sub_100048BDC();
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v49 - 8) + 16LL))(v50, v48, v49);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v68);
      sub_1000F0224();
      sub_10000DC08();
      uint64_t v51 = sub_1000ACC0C();
      uint64_t v52 = static os_log_type_t.error.getter(v51);
      sub_1000BD1B0(v52, v38);
      sub_10000DE74();
      swift_errorRelease(v47);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v7);
    }
  }

  sub_10000DD84();
}

void sub_1000ED5C4()
{
  char v4 = v3;
  uint64_t v6 = v5;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_1000F0374();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1000F0188();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000292E4();
  [*(id *)(v0 + 104) saveRecord:v6 isServerRecord:v4 & 1];
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___CKRecord);
  uint64_t v12 = swift_dynamicCastObjCClass(v6, v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v38 = v10;
    id v14 = objc_allocWithZone(&OBJC_CLASS___NSKeyedArchiver);
    sub_1000F0294();
    id v15 = [v14 initRequiringSecureCoding:1];
    [v13 encodeSystemFieldsWithCoder:v15];
    id v16 = [v15 encodedData];
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v19 = v18;

    id v21 = sub_1000F03BC(v20, "identifier");
    sub_1000F03FC();
    swift_unknownObjectRelease(v16);
    if (sub_1000102D4(v1, 1LL, v9) == 1)
    {
      sub_10001BD84(v17, v19);

      uint64_t v22 = sub_1000F02F0();
      sub_1000F04AC(v22, &qword_1001CB180);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v2, v1, v9);
      Data.write(to:options:)(v2, 1LL, v17, v19);
      if (qword_1001C7FC0 != -1) {
        swift_once(&qword_1001C7FC0, sub_1000BD5B8);
      }
      sub_10000D33C(&qword_1001C9C70);
      sub_10002C79C();
      sub_1000BDB78();
      uint64_t v25 = sub_1000678EC((uint64_t)v16 + 2 * v23, v24);
      *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v37 = v25;
      uint64_t ObjectType = type metadata accessor for MetricsIdentifierCloudDataController();
      v39[0] = v0;
      uint64_t v26 = sub_100048DB4();
      id v27 = (id)AMSLogKey(v26);
      if (v27)
      {
        sub_1000105E8((uint64_t)v27);
        sub_10004877C();
        sub_100020BB4();
        sub_100010564();
        sub_10001A224();
        sub_1000104C0(v39);
        uint64_t v28 = sub_100010530();
        sub_100048674(v28);
        sub_1000F0450();
        sub_10000DC14();
        sub_100048640();
        sub_1000F0450();
        sub_10000DC4C(93LL);
        sub_10001A410();
        sub_100020AB8();
      }

      else
      {
        sub_10001A1BC();
        sub_10001A224();
        sub_1000104C0(v39);
        uint64_t v29 = sub_100010530();
        uint64_t v30 = sub_100048674(v29);
        sub_10006B9BC(v30, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_10001A410();
      }

      sub_100048738();
      sub_10001A21C(50LL);
      sub_100048BA0();
      v31._uint64_t countAndFlagsBits = 0xD000000000000031LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      id v33 = sub_1000F03BC(v32, "identifier");
      uint64_t ObjectType = swift_getObjectType(v33);
      v39[0] = v33;
      uint64_t v34 = sub_1000F0260((uint64_t)v39);
      sub_10000DF18(v34, &qword_1001CAAD0);
      sub_10000DC4C(46LL);
      uint64_t v35 = sub_10001A410();
      uint64_t v36 = static os_log_type_t.info.getter(v35);
      sub_1000BD1B0(v36, v37);
      sub_10001BD84(v17, v19);

      sub_1000090CC();
      sub_1000F02F0();
      sub_100067744(v2, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    }
  }

  sub_10000DD84();
}

void sub_1000EDBBC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100067420();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  sub_10000DC8C();
  __chkstk_darwin(v9);
  sub_10000DD5C();
  uint64_t v46 = v10;
  uint64_t v11 = sub_100070310();
  uint64_t v12 = type metadata accessor for DispatchQoS(v11);
  uint64_t v44 = *(void *)(v12 - 8);
  uint64_t v45 = v12;
  sub_10000DC8C();
  __chkstk_darwin(v13);
  sub_10000DD5C();
  uint64_t v43 = v14;
  if (!v7) {
    goto LABEL_11;
  }
  uint64_t v15 = v7 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v49 = v3;
  uint64_t v16 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  sub_1000F0364(v7);
  sub_10002C7E8();
  if (v16) {
    goto LABEL_4;
  }
LABEL_10:
  while (1)
  {
    swift_release(v0);
    swift_bridgeObjectRelease_n(v7, 2LL);
    uint64_t v3 = v49;
LABEL_11:
    if (!v5) {
      break;
    }
    if ((unint64_t)v5 >> 62)
    {
      if (v5 >= 0) {
        uint64_t v42 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v42 = v5;
      }
      sub_1000F0364(v5);
      sub_10002C7E8();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (!v7)
      {
LABEL_20:
        swift_release(v0);
        swift_bridgeObjectRelease_n(v5, 2LL);
        break;
      }
    }

    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      sub_1000F0364(v5);
      sub_10002C7E8();
      if (!v7) {
        goto LABEL_20;
      }
    }

    uint64_t v19 = 4LL;
    while (1)
    {
      if ((v5 & 0xC000000000000001LL) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v5);
      }
      else {
        sub_1000F0294();
      }
      uint64_t v20 = v19 - 3;
      if (__OFADD__(v19 - 4, 1LL)) {
        break;
      }
      sub_1000ED018();
      sub_1000F02F0();
      ++v19;
      if (v20 == v7) {
        goto LABEL_20;
      }
    }

    while (1)
    {
      __break(1u);
LABEL_32:
      uint64_t v41 = v7 >= 0 ? v15 : v7;
      sub_1000F0364(v7);
      sub_10002C7E8();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v41);
      if (!v16) {
        break;
      }
LABEL_4:
      uint64_t v17 = 4LL;
      while (1)
      {
        if ((v7 & 0xC000000000000001LL) != 0) {
          specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v7);
        }
        else {
          sub_1000F0294();
        }
        uint64_t v18 = v17 - 3;
        if (__OFADD__(v17 - 4, 1LL)) {
          break;
        }
        sub_1000ED5C4();
        sub_1000F02F0();
        ++v17;
        if (v18 == v16) {
          goto LABEL_10;
        }
      }

      __break(1u);
    }
  }

  if (v3)
  {
    id v21 = (void *)_convertErrorToNSError(_:)(v3);
    uint64_t v22 = sub_1000E95D4(2LL);

    if (v22)
    {
      uint64_t v56 = v22;
      sub_1000F03E4();
      uint64_t v24 = v23;
      sub_10000D904(&qword_1001CD400, (uint64_t (*)(uint64_t))type metadata accessor for CKError);
      uint64_t v26 = _BridgedStoredNSError.userInfo.getter(v24, v25);
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
      sub_1000308B8(v27, v28, v26, &v50);
      sub_100009070();
      sub_100009020();
      if (v52)
      {
        uint64_t v29 = sub_10000D33C(&qword_1001CD408);
        uint64_t v30 = sub_100010BA4((uint64_t)&v56, (uint64_t)&v50, (uint64_t)&type metadata for Any + 8, v29);
        if ((v30 & 1) != 0 {
          && (uint64_t v31 = (uint64_t)v56,
        }
              char v55 = 0,
              __chkstk_darwin(v30),
              *(&v43 - 2) = v1,
              *(&v43 - Hasher._combine(_:)(v1 & 1) = (uint64_t)&v55,
              sub_1000E396C(v31, (void (*)(_BYTE *, id))sub_1000EFC74),
              sub_100009020(),
              v55 == 1))
        {
          uint64_t v32 = *(void **)(v1 + 128);
          uint64_t v53 = sub_1000EFC7C;
          uint64_t v54 = v1;
          *(void *)&__int128 v50 = _NSConcreteStackBlock;
          *((void *)&v50 + Hasher._combine(_:)(v1 & 1) = 1107296256LL;
          uint64_t v51 = sub_100021A3C;
          uint64_t v52 = &unk_1001AFBD0;
          id v33 = _Block_copy(&v50);
          sub_10002C7E8();
          id v34 = v32;
          uint64_t v35 = v43;
          static DispatchQoS.unspecified.getter(v34);
          uint64_t v56 = _swiftEmptyArrayStorage;
          sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          uint64_t v37 = v36;
          uint64_t v38 = sub_1000673F0();
          sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
          uint64_t v39 = v46;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v38, v40, v48, v37);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v39, v33);
          _Block_release(v33);

          sub_100067744(v39, *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8));
          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v35, v45);
          swift_release(v54);
        }

        else
        {
        }
      }

      else
      {

        sub_10000DA68((uint64_t)&v50, &qword_1001CAAD0);
      }
    }
  }

  sub_10000DD84();
}

void sub_1000EE018(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = sub_1000E95D4(14LL);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v79 = (uint64_t)v11;
    type metadata accessor for CKError(0LL);
    uint64_t v14 = v13;
    sub_10000D904(&qword_1001CD400, (uint64_t (*)(uint64_t))type metadata accessor for CKError);
    uint64_t v16 = _BridgedStoredNSError.userInfo.getter(v14, v15);
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordChangedErrorServerRecordKey);
    sub_1000308B8(v17, v18, v16, &v82);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (ObjectType)
    {
      uint64_t v19 = sub_10000D33C((uint64_t *)&unk_1001CD420);
      if ((swift_dynamicCast(&v79, &v82, (char *)&type metadata for Any + 8, v19, 6LL) & 1) != 0)
      {
        uint64_t v20 = v79;
        if (qword_1001C7FC0 != -1) {
          swift_once(&qword_1001C7FC0, sub_1000BD5B8);
        }
        uint64_t v78 = qword_1001DBB40;
        uint64_t v21 = sub_10000D33C(&qword_1001C9C70);
        uint64_t v22 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
        uint64_t v23 = *(void *)(v22 + 72);
        uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
        uint64_t v77 = v23;
        uint64_t v25 = swift_allocObject(v21, ((v24 + 32) & ~v24) + 2 * v23, v24 | 7);
        *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
        uint64_t ObjectType = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
        *(void *)&__int128 v82 = a3;
        uint64_t v26 = swift_retain(a3);
        id v27 = (id)AMSLogKey(v26);
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          uint64_t v30 = v29;

          swift_bridgeObjectRetain(v30);
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
          v31._uint64_t countAndFlagsBits = 0LL;
          v31._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v31);
          uint64_t v32 = ObjectType;
          id v33 = sub_10000D37C(&v82, (uint64_t)ObjectType);
          uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
          uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
          uint64_t v79 = DynamicType;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
          sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
          v35._uint64_t countAndFlagsBits = 5972026LL;
          v35._object = (void *)0xE300000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v35);
          uint64_t MetatypeMetadata = &type metadata for String;
          uint64_t v79 = v76;
          uint64_t v80 = v30;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
          sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
          v36._uint64_t countAndFlagsBits = 93LL;
          v36._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v36);
          LogMessage.init(stringInterpolation:)(v10);
          swift_bridgeObjectRelease();
        }

        else
        {
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
          v66._uint64_t countAndFlagsBits = 0LL;
          v66._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v66);
          uint64_t v67 = ObjectType;
          uint64_t v68 = sub_10000D37C(&v82, (uint64_t)ObjectType);
          uint64_t v69 = swift_getDynamicType(v68, v67, 1LL);
          uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v69);
          uint64_t v79 = v69;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
          sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
          v70._uint64_t countAndFlagsBits = 58LL;
          v70._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v70);
          LogMessage.init(stringInterpolation:)(v10);
        }

        sub_10000D3A0(&v82);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(66LL, 1LL);
        v71._uint64_t countAndFlagsBits = 0xD000000000000042LL;
        v71._object = (void *)0x8000000100174820LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v71);
        uint64_t ObjectType = (void *)swift_getObjectType(v20);
        *(void *)&__int128 v82 = v20;
        swift_unknownObjectRetain(v20);
        LogMessage.StringInterpolation.appendInterpolation(sensitive:)(&v82);
        sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
        v72._uint64_t countAndFlagsBits = 0LL;
        v72._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v72);
        uint64_t v73 = LogMessage.init(stringInterpolation:)(v10);
        uint64_t v74 = static os_log_type_t.default.getter(v73);
        sub_1000BD1B0(v74, v25);
        swift_bridgeObjectRelease();
        sub_1000ED5C4();
        swift_unknownObjectRelease(v20);

        *a4 = 1;
        return;
      }
    }

    else
    {

      sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
    }
  }

  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v37 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v38 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v39 = *(void *)(v38 + 72);
  uint64_t v40 = swift_allocObject( v37,  ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)) + 2 * v39,  *(unsigned __int8 *)(v38 + 80) | 7LL);
  *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t ObjectType = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
  *(void *)&__int128 v82 = a3;
  uint64_t v41 = swift_retain(a3);
  id v42 = (id)AMSLogKey(v41);
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    uint64_t v78 = v39;
    uint64_t v45 = a1;
    uint64_t v46 = v44;
    uint64_t v48 = v47;

    swift_bridgeObjectRetain(v48);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v49._uint64_t countAndFlagsBits = 0LL;
    v49._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v49);
    __int128 v50 = ObjectType;
    uint64_t v51 = sub_10000D37C(&v82, (uint64_t)ObjectType);
    uint64_t v52 = swift_getDynamicType(v51, v50, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
    uint64_t v79 = v52;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
    sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
    v53._uint64_t countAndFlagsBits = 5972026LL;
    v53._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v53);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v79 = v46;
    uint64_t v80 = v48;
    a1 = v45;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
    sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
    v54._uint64_t countAndFlagsBits = 93LL;
    v54._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v54);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v55._uint64_t countAndFlagsBits = 0LL;
    v55._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v55);
    uint64_t v56 = ObjectType;
    uint64_t v57 = sub_10000D37C(&v82, (uint64_t)ObjectType);
    uint64_t v58 = swift_getDynamicType(v57, v56, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v58);
    uint64_t v79 = v58;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v79);
    sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
    v59._uint64_t countAndFlagsBits = 58LL;
    v59._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&v82);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(57LL, 2LL);
  v60._object = (void *)0x80000001001747E0LL;
  v60._uint64_t countAndFlagsBits = 0xD000000000000031LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v60);
  uint64_t ObjectType = &type metadata for AnyHashable;
  *(void *)&__int128 v82 = swift_allocObject(&unk_1001AFC08, 56LL, 7LL);
  sub_10002C644(a1, v82 + 16);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v82);
  sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
  v61._uint64_t countAndFlagsBits = 0x203A726F72726520LL;
  v61._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v61);
  uint64_t ObjectType = (void *)sub_10000DAA0(0LL, (unint64_t *)&qword_1001CF9A0, &OBJC_CLASS___NSError_ptr);
  *(void *)&__int128 v82 = a2;
  id v62 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v82);
  sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
  v63._uint64_t countAndFlagsBits = 0LL;
  v63._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v63);
  uint64_t v64 = LogMessage.init(stringInterpolation:)(v10);
  uint64_t v65 = static os_log_type_t.error.getter(v64);
  sub_1000BD1B0(v65, v40);
  swift_bridgeObjectRelease();
}

void sub_1000EE788()
{
}

uint64_t sub_1000EE7AC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 112);
  [v5 lock];
  id v6 = [a3 name];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  sub_1000E4870();
  [v5 unlock];
  swift_unknownObjectRelease(a3);
  return swift_release(a2);
}

uint64_t sub_1000EE844(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v7 = *(void **)(a1 + 112);
  a3([v7 lock]);
  sub_1000E4740(v3);
  [v7 unlock];
  return sub_1000292C4();
}

void sub_1000EE8C4()
{
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_100067420();
  uint64_t v20 = *(void *)(v8 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v9);
  sub_10006725C();
  sub_1000F04EC();
  __chkstk_darwin(v10);
  sub_1000292E4();
  if (qword_1001C80E8 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  sub_100132364(0x696669746E656469LL, 0xEE00636E79537265LL);
  id v11 = *(void **)(v0 + 128);
  uint64_t v12 = sub_10000DDDC((uint64_t)&unk_1001AFB68, 32LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)(v12 + 24) = v5;
  void v22[4] = sub_1000EFC6C;
  v22[5] = v12;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256LL;
  void v22[2] = sub_100021A3C;
  void v22[3] = &unk_1001AFB80;
  uint64_t v13 = _Block_copy(v22);
  id v14 = v11;
  uint64_t v15 = sub_100067860();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v17 = v16;
  uint64_t v18 = sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v8, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v13);
  _Block_release(v13);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v1, v8);
  sub_100067744(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  sub_10006752C();
  sub_10000DD84();
}

void sub_1000EEAA8(uint64_t (*a1)(void))
{
  uint64_t v1 = (void *)a1();
  void v3[4] = sub_1000EEB38;
  v3[5] = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256LL;
  v3[2] = sub_100095110;
  v3[3] = &unk_1001AFBA8;
  uint64_t v2 = _Block_copy(v3);
  [v1 addFinishBlock:v2];
  _Block_release(v2);
}

uint64_t sub_1000EEB38()
{
  if (qword_1001C80E8 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  return sub_100133128(0x696669746E656469LL, 0xEE00636E79537265LL);
}

uint64_t sub_1000EEBA4()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000EEC48()
{
  return swift_deallocClassInstance(v0, 216LL, 7LL);
}

uint64_t type metadata accessor for MetricsIdentifierCloudDataController()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd36MetricsIdentifierCloudDataController);
}

void sub_1000EEC88()
{
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = sub_10002C79C();
  uint64_t v5 = (__n128 *)sub_1000F01BC(v4);
  uint64_t v19 = sub_1000F0418(v5, (__n128)xmmword_100164230);
  v18[0] = v0;
  uint64_t v6 = sub_10002588C();
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    sub_1000F0410((uint64_t)v7);
    sub_100081A40();
    sub_10000DD9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v8 = v19;
    uint64_t v9 = sub_10000D37C(v18, v19);
    sub_10000DC54((uint64_t)v9, v8);
    uint64_t v17 = (void *)sub_1000BDBEC();
    v16[0] = v8;
    sub_10000DEA4();
    sub_1000819D8((uint64_t)v16);
    sub_10000DC14();
    uint64_t v17 = &type metadata for String;
    v16[0] = v2;
    v16[1] = v1;
    sub_10000DEA4();
    sub_1000819D8((uint64_t)v16);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DCFC();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v10 = v19;
    id v11 = sub_10000D37C(v18, v19);
    sub_10000DC54((uint64_t)v11, v10);
    uint64_t v17 = (void *)sub_10000DDAC();
    v16[0] = v10;
    uint64_t v12 = sub_10000DEA4();
    sub_10006779C(v12, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10000E008();
  uint64_t v13 = sub_10000DD38(26LL);
  uint64_t v14 = static os_log_type_t.info.getter(v13);
  sub_1000F0484(v14, (uint64_t)v5);
  sub_10000DE2C();
  sub_100048DB4();
  sub_1000F04B4();
  sub_1000F047C((unint64_t *)&unk_1001CACF0);
  sub_1000F02F8(v15);
  sub_1000292C4();
  sub_10000DD84();
}

void sub_1000EEE80()
{
  uint64_t v3 = sub_100067420();
  uint64_t v36 = *(void *)(v3 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v4);
  uint64_t v5 = sub_10006725C();
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  sub_10000DC8C();
  __chkstk_darwin(v6);
  sub_1000292E4();
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DC74();
  if (qword_1001C7FC0 != -1) {
    swift_once(&qword_1001C7FC0, sub_1000BD5B8);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000F0274();
  uint64_t v11 = swift_allocObject(v8, v9, v10);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v38 = (void *)type metadata accessor for MetricsIdentifierCloudDataController();
  v37[0] = v0;
  uint64_t v12 = sub_100067860();
  id v13 = (id)AMSLogKey(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v33 = v3;
    uint64_t v17 = v16;

    sub_10000DF9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v18 = (uint64_t)v38;
    uint64_t v19 = sub_10000D37C(v37, (uint64_t)v38);
    uint64_t v20 = sub_10000DC54((uint64_t)v19, v18);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v20);
    v41[0] = v20;
    sub_10001065C();
    sub_1000F048C();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v41[0] = v15;
    v41[1] = v17;
    sub_10001065C();
    sub_1000F048C();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v3 = v33;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v21 = (uint64_t)v38;
    uint64_t v22 = sub_10000D37C(v37, (uint64_t)v38);
    uint64_t v23 = sub_10000DC54((uint64_t)v22, v21);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
    v41[0] = v23;
    sub_10001065C();
    sub_10000DA68((uint64_t)v41, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v37);
  sub_10000E008();
  uint64_t v24 = sub_10000DD38(18LL);
  uint64_t v25 = static os_log_type_t.info.getter(v24);
  sub_1000BD1B0(v25, v11);
  sub_10000DE74();
  uint64_t v26 = *(void **)(v0 + 128);
  uint64_t v39 = sub_1000EFC34;
  uint64_t v40 = v0;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 1107296256LL;
  void v37[2] = sub_100021A3C;
  uint64_t v38 = &unk_1001AFB30;
  id v27 = _Block_copy(v37);
  sub_100067860();
  id v28 = v26;
  static DispatchQoS.unspecified.getter(v28);
  v41[0] = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v30 = v29;
  uint64_t v31 = sub_1000673F0();
  sub_1000C8C90((unint64_t *)&qword_1001CD3F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v41, v31, v32, v3, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v27);
  sub_1000F03C4();

  sub_1000F038C(v36);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v2, v35);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_1000EF1BC(uint64_t result)
{
  if (*(_BYTE *)(result + 80) == 1)
  {
    swift_retain(*(void *)(result + 88));
    uint64_t v1 = sub_10000D33C((uint64_t *)&unk_1001CD390);
    sub_10000D890((unint64_t *)&unk_1001CACF0, (uint64_t *)&unk_1001CD390);
    Subject<>.send()(v1, v2);
    return swift_release();
  }

  return result;
}

uint64_t sub_1000EF24C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = sub_100048DB4();
  a4(v5);
  sub_1000B1A94();
  return swift_release();
}

CKRecordZoneID sub_1000EF290()
{
  v0._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v0._object = v1;
  v2._uint64_t countAndFlagsBits = 0x696669746E656449LL;
  v2._object = (void *)0xEE00656E6F5A7265LL;
  result.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v2, v0).super.isa;
  qword_1001CCE38 = (uint64_t)result.super.isa;
  return result;
}

void sub_1000EF3A8()
{
  uint64_t v32 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_1000674E0();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v10);
  uint64_t v11 = sub_1000F0188();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_1000105F0();
  sub_10000DE08(v13, &qword_1001CD3C0, &OBJC_CLASS___CKRecordID_ptr);
  uint64_t v14 = qword_1001C8080;
  swift_bridgeObjectRetain(v6);
  if (v14 != -1) {
    swift_once(&qword_1001C8080, sub_1000EF290);
  }
  id v15 = (id)qword_1001CCE38;
  v16._uint64_t countAndFlagsBits = (uint64_t)v8;
  v16._object = v6;
  uint64_t v17 = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
  sub_1000F03FC();

  uint64_t v18 = sub_1000102D4(v0, 1LL, v11);
  if ((_DWORD)v18 == 1)
  {
    sub_1000F04AC(v18, &qword_1001CB180);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v1, v0, v11);
    id v20 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL.path.getter(v20, v21);
    NSString v22 = String._bridgeToObjectiveC()();
    sub_100009070();
    unsigned int v23 = [v20 fileExistsAtPath:v22];

    if (v23)
    {
      uint64_t v31 = v4;
      uint64_t v24 = Data.init(contentsOf:options:)(v1, 0LL);
      unint64_t v26 = v25;
      id v27 = objc_allocWithZone(&OBJC_CLASS___NSKeyedUnarchiver);
      sub_10001BDC8(v24, v26);
      id v29 = sub_1000EFB58(v24, v26);
      [v29 setRequiresSecureCoding:1];
      id v30 = sub_1000F03DC(objc_allocWithZone(&OBJC_CLASS___CKRecord), "initWithCoder:");

      sub_1000F04BC();
      uint64_t v19 = sub_1000F0214();
      uint64_t v4 = v31;
      if (v30)
      {

        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v19 = sub_1000F0214();
    }
  }

  sub_10000DE08(v19, &qword_1001CD3D8, &OBJC_CLASS___CKRecord_ptr);
  sub_10000DF9C();
  v28._uint64_t countAndFlagsBits = v32;
  v28._object = v4;
  CKRecord.init(recordType:recordID:)(v28, (CKRecordID)v8);
LABEL_9:
  sub_10000DD84();
}

void sub_1000EF8F8(void *a1)
{
}

CKRecordID sub_1000EF9B8(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_1001C8080;
  swift_bridgeObjectRetain(a2);
  if (v4 != -1) {
    swift_once(&qword_1001C8080, sub_1000EF290);
  }
  id v5 = (id)qword_1001CCE38;
  v6._uint64_t countAndFlagsBits = a1;
  v6._object = a2;
  return CKRecordID.init(recordName:zoneID:)(v6, (CKRecordZoneID)v5);
}

void sub_1000EFAA8(unint64_t *a1, unint64_t *a2, void *a3)
{
  if (!*a1)
  {
    uint64_t v4 = sub_10000DAA0(255LL, a2, a3);
    atomic_store(sub_10000DFD4(v4), a1);
  }

  sub_100009044();
}

uint64_t sub_1000EFADC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000EFB00(uint64_t a1)
{
  return sub_1000E5BBC(a1, v1);
}

uint64_t sub_1000EFB20(uint64_t a1)
{
  return sub_1000E5BBC(a1, v1);
}

uint64_t sub_1000EFB40(uint64_t a1)
{
  return sub_1000E5C48(a1, v1);
}

void sub_1000EFB4C()
{
}

id sub_1000EFB58(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v13 = 0LL;
  id v7 = [v3 initForReadingFromData:isa error:&v13];

  id v8 = v13;
  if (v7)
  {
    id v9 = v13;
  }

  else
  {
    id v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }

  sub_10001BD84(a1, a2);
  return v7;
}

uint64_t sub_1000EFC34()
{
  return sub_1000EF1BC(v0);
}

uint64_t sub_1000EFC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000EFC4C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000EFC54()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1000EFC6C()
{
}

void sub_1000EFC74(uint64_t a1, void *a2)
{
}

void sub_1000EFC7C()
{
}

uint64_t sub_1000EFC84()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

id sub_1000EFCAC(void *a1)
{
  return sub_1000EC30C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1000EFCB8(uint64_t a1)
{
}

void sub_1000EFCC4()
{
}

uint64_t sub_1000EFCCC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

id sub_1000EFD00(void *a1)
{
  return sub_1000EB5A8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000EFD0C()
{
  return sub_1000F01E0((void (*)(void))&_swift_release);
}

uint64_t sub_1000EFD18(uint64_t a1, uint64_t a2)
{
  return sub_1000EBCBC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000EFD24()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000EFD48()
{
  uint64_t v1 = sub_100067610();
  return swift_deallocObject(v1, v2, v3);
}

id sub_1000EFD74(void *a1, void *a2)
{
  return sub_1000EB840(a1, a2, v2[2], v2[3], v2[4]);
}

void sub_1000EFD80(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_1000673F0();
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for AnyHashable,  v4,  &protocol witness table for AnyHashable);
  }

  sub_100009044();
}

uint64_t sub_1000EFDE4(void *a1)
{
  id v1 = [a1 savedRecords];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = sub_10000D33C((uint64_t *)&unk_1001CD420);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

uint64_t sub_1000EFE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAC4C(a1, a2, a3, *(void *)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_1000EFE50()
{
  return sub_1000EAF68(v0);
}

uint64_t sub_1000EFE58(uint64_t a1)
{
  return sub_1000EAF8C(a1, v1);
}

uint64_t sub_1000EFE60()
{
  sub_10006739C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = sub_100067610();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000EFE90()
{
}

uint64_t sub_1000EFEA0(uint64_t a1)
{
  return sub_1000E9E0C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000EFEA8()
{
  swift_unknownObjectRelease(*(void *)(v0 + 40));
  uint64_t v1 = sub_100067610();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000EFED0(uint64_t a1, void *a2)
{
}

uint64_t sub_1000EFEE0()
{
  return sub_1000EFF1C((void (*)(void))&_swift_unknownObjectRelease);
}

id sub_1000EFEEC(int a1, uint64_t a2)
{
  return sub_1000EA724(a1, a2, *(id *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000EFF04()
{
  return sub_1000EFF1C((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1000EFF10()
{
  return sub_1000EFF1C((void (*)(void))&_swift_release);
}

uint64_t sub_1000EFF1C(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  uint64_t v3 = sub_1000673A4();
  return swift_deallocObject(v3, v4, v5);
}

void sub_1000EFF4C()
{
}

uint64_t sub_1000EFF54(uint64_t a1)
{
  return sub_1000E96C0(a1, v1);
}

uint64_t sub_1000EFF5C()
{
  return sub_1000F01E0((void (*)(void))&_swift_release);
}

id sub_1000EFF68(void *a1)
{
  return sub_1000E7D00(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000EFF74()
{
  return sub_1000F01E0((void (*)(void))&_swift_release);
}

uint64_t sub_1000EFF80(uint64_t a1)
{
  return sub_1000E8908(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1000EFF8C()
{
  *(_BYTE *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = 1;
}

uint64_t sub_1000EFF98()
{
  swift_release();
  return swift_deallocObject(v0, 56LL, 7LL);
}

id sub_1000EFFD0(void *a1, void *a2)
{
  return sub_1000E7EC8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

id sub_1000EFFE0(uint64_t a1, uint64_t a2)
{
  return sub_1000E87D0(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000EFFEC()
{
  uint64_t v1 = sub_1000673A4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000F000C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000F0014()
{
  return sub_1000F0024((void (*)(void))&_swift_unknownObjectRelease, 32LL);
}

uint64_t sub_1000F0024(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_1000F0064(uint64_t a1)
{
}

id sub_1000F006C()
{
  return sub_1000E62F8(v0);
}

uint64_t sub_1000F0144()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000F0150(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 128) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 128);
}

  ;
}

void sub_1000F0180(Swift::String a1)
{
}

uint64_t sub_1000F0188()
{
  return type metadata accessor for URL(0LL);
}

void sub_1000F01A4()
{
  v0._uint64_t countAndFlagsBits = 0x203A726F72726520LL;
  v0._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_1000F01BC(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1000F01E0(void (*a1)(void))
{
  return sub_1000F0024(a1, 40LL);
}

uint64_t sub_1000F01E8()
{
  return Publisher.debounce<A>(for:scheduler:options:)( v3,  v4 - 96,  v1,  v2,  v0,  *(void *)(v4 - 112),  *(void *)(v4 - 120));
}

uint64_t sub_1000F020C(uint64_t a1)
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(a1);
}

uint64_t sub_1000F0214()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void sub_1000F0224()
{
}

void sub_1000F0230()
{
}

void sub_1000F023C()
{
}

uint64_t sub_1000F0248()
{
  return swift_slowAlloc(2LL, -1LL);
}

uint64_t sub_1000F0254(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000F0260(uint64_t a1)
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(a1);
}

void *sub_1000F0268@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return _Block_copy((const void *)(v2 - 144));
}

  ;
}

uint64_t sub_1000F0294()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000F029C()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000F02A4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for MetricsIdentifierCloudDataController();
}

uint64_t sub_1000F02B0()
{
  return sub_1000E41C8();
}

void *sub_1000F02B8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 168) = a1;
  *(void *)(v2 - 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = v1;
  return _Block_copy((const void *)(v2 - 184));
}

uint64_t sub_1000F02C4(uint64_t a1)
{
  *(void *)(v2 - 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000025LL,  0x8000000100170DD0LL,  "amsengagementd/JSError.swift",  28LL,  2LL,  69LL, 0) = a1;
  *(void *)(v2 - 144) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 144);
}

void sub_1000F02D8()
{
  *(void *)(v2 - 152) = v1;
}

uint64_t sub_1000F02E4()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000F02F0()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000F02F8(uint64_t a1)
{
  return Subject<>.send()(v1, a1);
}

void sub_1000F0304()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

uint64_t sub_1000F0314()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000F0324()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 136))(v0, v1);
}

  ;
}

  ;
}

id sub_1000F035C(uint64_t a1)
{
  return sub_1000E95D4(a1);
}

uint64_t sub_1000F0364(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

void sub_1000F036C( void *a1, os_log_s *a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5, const char *a6, uint8_t *a7)
{
}

  ;
}

uint64_t sub_1000F038C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t sub_1000F039C(uint64_t a1, uint64_t a2)
{
  return Publisher<>.sink(receiveValue:)(a1, a2, v2, *(void *)(v3 - 144));
}

uint64_t sub_1000F03AC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 128))(v1, v0);
}

id sub_1000F03BC(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

void sub_1000F03C4()
{
}

id sub_1000F03CC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v4, v2);
}

id sub_1000F03DC(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

void sub_1000F03E4()
{
}

void sub_1000F03EC(void *a1)
{
}

uint64_t sub_1000F03F4@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}