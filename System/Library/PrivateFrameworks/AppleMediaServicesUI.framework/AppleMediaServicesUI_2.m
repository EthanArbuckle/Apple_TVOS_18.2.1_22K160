uint64_t sub_1000F03FC()
{
  uint64_t v0;
  return sub_1000ECEF8(v0);
}

uint64_t sub_1000F0408()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 - 136);
}

uint64_t sub_1000F0410(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1000F0418(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for MetricsIdentifierCloudDataController();
}

uint64_t sub_1000F0424(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for MetricsIdentifierCloudDataController();
}

uint64_t sub_1000F0430(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for MetricsIdentifierCloudDataController();
}

void sub_1000F043C()
{
}

void sub_1000F0444()
{
}

void sub_1000F0450()
{
}

void sub_1000F045C()
{
}

void sub_1000F0468()
{
}

uint64_t sub_1000F0474()
{
  return swift_release(v0);
}

void sub_1000F047C(unint64_t *a1)
{
}

uint64_t sub_1000F0484(uint64_t a1, uint64_t a2)
{
  return sub_1000BD1B0(a1, a2);
}

void sub_1000F048C()
{
}

uint64_t sub_1000F0498(uint64_t a1, uint64_t a2)
{
  return sub_1000BD1B0(a1, a2);
}

uint64_t sub_1000F04A0(_WORD *a1)
{
  *a1 = 0;
  return OSSignpostID.rawValue.getter();
}

void sub_1000F04AC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000F04B4()
{
  return sub_10000D33C(v0);
}

uint64_t sub_1000F04BC()
{
  return sub_10001BD84(v0, v1);
}

id sub_1000F04C8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

void sub_1000F04D4()
{
}

id sub_1000F04DC(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000F04E4()
{
  return swift_unknownObjectRelease(v0);
}

  ;
}

NSNumber sub_1000F0500()
{
  return Bool._bridgeToObjectiveC()();
}

void sub_1000F050C()
{
}

NSString sub_1000F0514()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000F0520()
{
  return type metadata accessor for OSSignposter(0LL);
}

uint64_t sub_1000F0528()
{
  return PassthroughSubject.init()();
}

uint64_t sub_1000F0530(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (void *)(*(void *)(a3 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    v20[0] = *v18;
    v20[1] = v19;
    swift_bridgeObjectRetain(v19);
    a1(v20);
    if (v3)
    {
      swift_release(a3);
      return swift_bridgeObjectRelease(v19);
    }

    uint64_t result = swift_bridgeObjectRelease(v19);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    if (!v16) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v16 - 1) & v16;
  }

  int64_t v17 = v12 + 1;
  if (v12 + 1 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 2;
  if (v12 + 2 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 3;
  if (v12 + 3 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10) {
    return swift_release(a3);
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    int64_t v12 = v17;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release(a3);
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_17;
    }
  }

void sub_1000F06DC(char a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  sub_10014F220();
  URL.appendingPathComponent(_:)(0x656372756F73LL, 0xE600000000000000LL);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v7[0] = 0LL;
  v7[1] = 0xE000000000000000LL;
  __asm { BR              X10 }

uint64_t sub_1000F07CC()
{
  v6._countAndFlagsBits = 0x6C616E7265746E69LL;
  v6._object = (void *)0xE800000000000000LL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  v7._countAndFlagsBits = 46LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v2;
  v8._object = v1;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v5 - 88);
  ((void (*)(void, uint64_t))URL.appendingPathComponent(_:))(*(void *)(v5 - 96), v9);
  swift_bridgeObjectRelease(v9);
  return v4(v3, v0);
}

void sub_1000F0890()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v1 = [v0 defaultManager];
  URL.path.getter();
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  LODWORD(v3) = [v1 fileExistsAtPath:v4];

  if ((_DWORD)v3)
  {
    id v5 = [v0 defaultManager];
    URL.path.getter();
    uint64_t v7 = v6;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    id v13 = 0LL;
    unsigned int v9 = [v5 removeItemAtPath:v8 error:&v13];

    id v10 = v13;
    if (v9)
    {
      id v11 = v13;
    }

    else
    {
      id v12 = v13;
      _convertNSErrorToError(_:)(v10);

      swift_willThrow();
    }
  }

void *sub_1000F09EC()
{
  uint64_t v0 = sub_10001C8FC();
  id v1 = (char *)v0[2];
  if (v1)
  {
    uint64_t v2 = (unsigned __int8 *)(v0 + 4);
    do
    {
      unsigned int v3 = *v2++;
      sub_1000F0ABC(v3);
      sub_1000F1508(v3);
      sub_1000F1AB4(v3);
      sub_1000F2C08(v3);
      --v1;
    }

    while (v1);
  }

  swift_bridgeObjectRelease();
  v6[3] = &type metadata for AMSFlags;
  v6[4] = sub_100038728();
  LOBYTE(v6[0]) = 0;
  char v4 = isFeatureEnabled(_:)(v6);
  sub_10000D3A0(v6);
  if ((v4 & 1) != 0) {
    [(id)objc_opt_self(AMSEngagementClientData) erase];
  }
  type metadata accessor for AppDatabase();
  return sub_100024244();
}

uint64_t sub_1000F0ABC(int a1)
{
  int v122 = a1;
  uint64_t v1 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v1);
  v124 = (char *)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  v118 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v120 = (char *)&v115 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v121 = (char *)&v115 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v119 = (char *)&v115 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v123 = (char *)&v115 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  int64_t v17 = (char *)&v115 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  v20 = (char *)&v115 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  v23 = (char *)&v115 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v115 - v24;
  v26 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v27 = [v26 defaultManager];
  id v28 = [v27 temporaryDirectory];

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);
  URL.appendingPathComponent(_:)(0xD000000000000010LL, 0x8000000100175340LL);
  v29 = *(void (**)(char *, uint64_t))(v4 + 8);
  v29(v23, v3);
  sub_1000F0890();
  uint64_t v117 = v4;
  v30 = v123;
  v29(v25, v3);
  sub_10014F220();
  URL.appendingPathComponent(_:)(0x6B63617074656ALL, 0xE700000000000000LL);
  v29(v23, v3);
  sub_1000F0890();
  v29(v20, v3);
  char v58 = v122;
  sub_1000F06DC(v122);
  sub_1000AC510(v58, 29546LL, (void *)0xE200000000000000LL);
  v59 = &selRef_BOOLean_;
  v60 = v26;
  id v61 = [v26 defaultManager];
  v115 = v17;
  URL.path.getter(v61, v62);
  NSString v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v64 = [v61 fileExistsAtPath:v63];

  v65 = v119;
  uint64_t v117 = *(void *)(v117 + 16);
  ((void (*)(char *, char *, uint64_t))v117)(v119, v30, v3);
  v116 = v29;
  if (!v64)
  {
    v29(v65, v3);
    v71 = v120;
    v72 = v121;
LABEL_13:
    char v84 = v122;
    sub_1000F06DC(v122);
    sub_1000AC510(v84, 0x6B63617074656ALL, (void *)0xE700000000000000LL);
    id v85 = [v60 v59[130]];
    URL.path.getter(v85, v86);
    NSString v87 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v88 = [v85 fileExistsAtPath:v87];

    v89 = v118;
    ((void (*)(char *, char *, uint64_t))v117)(v118, v71, v3);
    if (v88)
    {
      id v90 = [v60 v59[130]];
      URL.path.getter(v90, v91);
      v92 = v89;
      NSString v93 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v94 = [v90 fileExistsAtPath:v93];

      v95 = v116;
      v116(v92, v3);
      if ((v94 & 1) == 0)
      {
        id v96 = [v60 v59[130]];
        URL.path.getter(v96, v97);
        NSString v98 = String._bridgeToObjectiveC()();
        uint64_t v99 = swift_bridgeObjectRelease();
        URL.path.getter(v99, v100);
        NSString v101 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v131[0] = 0LL;
        unsigned int v102 = [v96 moveItemAtPath:v98 toPath:v101 error:v131];

        id v103 = v131[0];
        if (v102)
        {
          id v104 = v131[0];
          v105 = v71;
          v106 = v116;
          v116(v105, v3);
          v106(v72, v3);
          v106(v123, v3);
          return ((uint64_t (*)(char *, uint64_t))v106)(v115, v3);
        }

        id v112 = v131[0];
        uint64_t v108 = _convertNSErrorToError(_:)(v103);

        swift_willThrow(v113);
        v114 = v71;
        v110 = v116;
        v116(v114, v3);
        v110(v72, v3);
        v110(v123, v3);
        v111 = v115;
        goto LABEL_2;
      }
    }

    else
    {
      v95 = v116;
      v116(v89, v3);
    }

    v95(v71, v3);
    v95(v72, v3);
    v95(v123, v3);
    return ((uint64_t (*)(char *, uint64_t))v95)(v115, v3);
  }

  id v66 = [v26 defaultManager];
  URL.path.getter(v66, v67);
  v68 = v65;
  NSString v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v70 = [v66 fileExistsAtPath:v69];

  v29(v68, v3);
  v71 = v120;
  v72 = v121;
  if ((v70 & 1) != 0) {
    goto LABEL_13;
  }
  id v73 = [v26 defaultManager];
  v74 = v115;
  URL.path.getter(v73, v75);
  NSString v76 = String._bridgeToObjectiveC()();
  uint64_t v77 = swift_bridgeObjectRelease();
  v78 = v123;
  URL.path.getter(v77, v79);
  NSString v80 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v131[0] = 0LL;
  unsigned int v81 = [v73 moveItemAtPath:v76 toPath:v80 error:v131];

  id v82 = v131[0];
  if (v81)
  {
    id v83 = v131[0];
    v72 = v121;
    v60 = v26;
    v59 = &selRef_BOOLean_;
    goto LABEL_13;
  }

  id v107 = v131[0];
  uint64_t v108 = _convertNSErrorToError(_:)(v82);

  swift_willThrow(v109);
  v110 = v116;
  v116(v78, v3);
  v111 = v74;
LABEL_2:
  v110(v111, v3);
  if (qword_1001C7FC8 != -1) {
    swift_once(&qword_1001C7FC8, sub_1000BD60C);
  }
  uint64_t v31 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v32 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v33 = swift_allocObject( v31,  ((*(unsigned __int8 *)(v32 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
        + 3LL * *(void *)(v32 + 72),
          *(unsigned __int8 *)(v32 + 80) | 7LL);
  *(_OWORD *)(v33 + 16) = xmmword_100164240;
  uint64_t v132 = sub_10000D33C(&qword_1001CD528);
  v131[0] = v125;
  id v34 = (id)AMSLogKey(v132);
  if (v34)
  {
    v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v38 = v37;

    swift_bridgeObjectRetain(v38);
    v39 = v124;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v40._countAndFlagsBits = 0LL;
    v40._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    uint64_t v41 = v132;
    v42 = sub_10000D37C(v131, v132);
    uint64_t DynamicType = swift_getDynamicType(v42, v41, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v129[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v129);
    sub_1000102E0((uint64_t)v129, &qword_1001CAAD0);
    v44._countAndFlagsBits = 5972026LL;
    v44._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v44);
    MetatypeMetadata = &type metadata for String;
    v129[0] = v36;
    v129[1] = v38;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v129);
    sub_1000102E0((uint64_t)v129, &qword_1001CAAD0);
    v45._countAndFlagsBits = 93LL;
    v45._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v45);
    LogMessage.init(stringInterpolation:)(v39);
    swift_bridgeObjectRelease();
  }

  else
  {
    v46 = v124;
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v47._countAndFlagsBits = 0LL;
    v47._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v47);
    uint64_t v48 = v132;
    v49 = sub_10000D37C(v131, v132);
    uint64_t v50 = swift_getDynamicType(v49, v48, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v50);
    v129[0] = v50;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v129);
    sub_1000102E0((uint64_t)v129, &qword_1001CAAD0);
    v51._countAndFlagsBits = 58LL;
    v51._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v51);
    LogMessage.init(stringInterpolation:)(v46);
  }

  sub_10000D3A0(v131);
  LogMessage.init(stringLiteral:)(0xD000000000000029LL);
  swift_getErrorValue(v108, v128);
  uint64_t v52 = v126;
  uint64_t v53 = v127;
  uint64_t v132 = v127;
  v54 = sub_10000D63C(v131);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16LL))(v54, v52, v53);
  static LogMessage.safe(_:)(v131);
  uint64_t v55 = sub_1000102E0((uint64_t)v131, &qword_1001CAAD0);
  uint64_t v56 = static os_log_type_t.error.getter(v55);
  sub_1000BD1B0(v56, v33);
  swift_bridgeObjectRelease();
  return swift_errorRelease(v108);
}

void sub_1000F1508(char a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  sub_10014F220();
  __asm { BR              X10 }

uint64_t sub_1000F1620()
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v8(v1, v0);
  URL.appendingPathComponent(_:isDirectory:)(0x74757074756FLL, 0xE600000000000000LL, 1LL);
  v8(v2, v0);
  uint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v10 = [v9 defaultManager];
  URL.path.getter(v10, v11);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v13 = [v10 fileExistsAtPath:v12];

  if (v13)
  {
    id v14 = [v9 defaultManager];
    URL._bridgeToObjectiveC()(v15);
    int64_t v17 = v16;
    *(void *)(v7 - 120) = 0LL;
    unsigned int v18 = [v14 removeItemAtURL:v16 error:v7 - 120];

    uint64_t v19 = *(void **)(v7 - 120);
    if (v18)
    {
      id v20 = v19;
    }

    else
    {
      id v21 = v19;
      uint64_t v22 = _convertNSErrorToError(_:)(v19);

      *(void *)(v7 - 200) = v22;
      swift_willThrow(v23);
      if (qword_1001C7FC8 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      *(void *)(v7 - 208) = qword_1001DBB48;
      uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v25 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
            + 3LL * *(void *)(v25 + 72),
              *(unsigned __int8 *)(v25 + 80) | 7LL);
      *(_OWORD *)(v26 + 16) = xmmword_100164240;
      uint64_t v27 = sub_10000D33C(&qword_1001CD528);
      *(void *)(v7 - 96) = v27;
      *(void *)(v7 - 120) = v5;
      id v28 = (id)AMSLogKey(v27);
      if (v28)
      {
        v29 = v28;
        *(void *)(v7 - 216) = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        uint64_t v31 = v30;

        swift_bridgeObjectRetain(v31);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v32._countAndFlagsBits = 0LL;
        v32._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v32);
        uint64_t v33 = *(void *)(v7 - 96);
        id v34 = sub_10000D37C((void *)(v7 - 120), v33);
        uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
        *(void *)(v7 - 128) = swift_getMetatypeMetadata(DynamicType);
        *(void *)(v7 - 152) = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v7 - 152);
        sub_1000102E0(v7 - 152, &qword_1001CAAD0);
        v36._countAndFlagsBits = 5972026LL;
        v36._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v36);
        *(void *)(v7 - 128) = &type metadata for String;
        *(void *)(v7 - 152) = *(void *)(v7 - 216);
        *(void *)(v7 - 144) = v31;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v7 - 152);
        sub_1000102E0(v7 - 152, &qword_1001CAAD0);
        v37._countAndFlagsBits = 93LL;
        v37._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v37);
        LogMessage.init(stringInterpolation:)(v4);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v38._countAndFlagsBits = 0LL;
        v38._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v38);
        uint64_t v39 = *(void *)(v7 - 96);
        Swift::String v40 = sub_10000D37C((void *)(v7 - 120), v39);
        uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
        *(void *)(v7 - 128) = swift_getMetatypeMetadata(v41);
        *(void *)(v7 - 152) = v41;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v7 - 152);
        sub_1000102E0(v7 - 152, &qword_1001CAAD0);
        v42._countAndFlagsBits = 58LL;
        v42._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v42);
        LogMessage.init(stringInterpolation:)(v4);
      }

      sub_10000D3A0((void *)(v7 - 120));
      LogMessage.init(stringLiteral:)(0xD000000000000030LL);
      uint64_t v43 = *(void *)(v7 - 200);
      swift_getErrorValue(v43, v7 - 168);
      uint64_t v44 = *(void *)(v7 - 192);
      uint64_t v45 = *(void *)(v7 - 184);
      *(void *)(v7 - 96) = v45;
      v46 = sub_10000D63C((void *)(v7 - 120));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16LL))(v46, v44, v45);
      static LogMessage.safe(_:)(v7 - 120);
      uint64_t v47 = sub_1000102E0(v7 - 120, &qword_1001CAAD0);
      uint64_t v48 = static os_log_type_t.error.getter(v47);
      sub_1000BD1B0(v48, v26);
      swift_bridgeObjectRelease();
      swift_errorRelease(v43);
    }
  }

  return ((uint64_t (*)(uint64_t, uint64_t))v8)(v3, v0);
}

void sub_1000F1AB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  v13[3] = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000D33C(&qword_1001CB180);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v13[9] = (char *)v13 - v7;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v8 = __chkstk_darwin(v14);
  v13[8] = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v13 - v12;
  v13[4] = sub_100121998((uint64_t)&off_1001A6E58);
  sub_10014F220();
  v13[5] = a1;
  __asm { BR              X10 }

uint64_t sub_1000F1CA8()
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v6 = *(void *)(v4 - 224);
  *(void *)(v4 - 256) = v5;
  v5(v1, v6);
  sub_10014F588();
  if (sub_1000102D4(v2, 1LL, v6) != 1) {
    __asm { BR              X10 }
  }

  sub_1000102E0(v2, &qword_1001CB180);
  uint64_t v7 = *(void *)(v4 - 232);
  sub_10000D5C0(v7, 1LL, 1LL, v6);
  sub_10002877C(v7, v3);
  int v8 = sub_1000102D4(v3, 1LL, v6);
  uint64_t v9 = *(void **)(v4 - 240);
  if (v8 == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000102E0(v3, &qword_1001CB180);
    if (qword_1001C7FC8 != -1) {
      swift_once(&qword_1001C7FC8, sub_1000BD60C);
    }
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = type metadata accessor for LogMessage(0LL);
    uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v11 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v12 + 16) = xmmword_100164230;
    uint64_t v13 = sub_10000D33C(&qword_1001CD528);
    *(void *)(v4 - 104) = v13;
    *(void *)(v4 - 128) = *(void *)(v4 - 248);
    id v14 = (id)AMSLogKey(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v18 = v17;

      swift_bridgeObjectRetain(v18);
      uint64_t v19 = *(void *)(v4 - 280);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v20._countAndFlagsBits = 0LL;
      v20._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v20);
      uint64_t v21 = *(void *)(v4 - 104);
      uint64_t v22 = sub_10000D37C((void *)(v4 - 128), v21);
      uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
      *(void *)(v4 - 136) = swift_getMetatypeMetadata(DynamicType);
      *(void *)(v4 - 160) = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
      sub_1000102E0(v4 - 160, &qword_1001CAAD0);
      v24._countAndFlagsBits = 5972026LL;
      v24._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      *(void *)(v4 - 136) = &type metadata for String;
      *(void *)(v4 - 160) = v16;
      *(void *)(v4 - 152) = v18;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
      sub_1000102E0(v4 - 160, &qword_1001CAAD0);
      v25._countAndFlagsBits = 93LL;
      v25._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      LogMessage.init(stringInterpolation:)(v19);
      uint64_t v7 = *(void *)(v4 - 232);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v56 = *(void *)(v4 - 280);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v57._countAndFlagsBits = 0LL;
      v57._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      uint64_t v58 = *(void *)(v4 - 104);
      v59 = sub_10000D37C((void *)(v4 - 128), v58);
      uint64_t v60 = swift_getDynamicType(v59, v58, 1LL);
      *(void *)(v4 - 136) = swift_getMetatypeMetadata(v60);
      *(void *)(v4 - 160) = v60;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
      sub_1000102E0(v4 - 160, &qword_1001CAAD0);
      v61._countAndFlagsBits = 58LL;
      v61._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v61);
      LogMessage.init(stringInterpolation:)(v56);
    }

    uint64_t v62 = *(void *)(v4 - 224);
    sub_10000D3A0((void *)(v4 - 128));
    uint64_t v63 = LogMessage.init(stringLiteral:)(0xD00000000000001BLL);
    uint64_t v65 = static os_log_type_t.fault.getter(v63, v64);
    sub_1000BD1B0(v65, v12);
    swift_bridgeObjectRelease();
    sub_1000102E0(v7, &qword_1001CB180);
    return (*(uint64_t (**)(void, uint64_t))(v4 - 256))(*(void *)(v4 - 216), v62);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v0 + 32))(*(void *)(v4 - 240), v3, v6);
    uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
    id v27 = [v26 defaultManager];
    *(_BYTE *)(v4 - 161) = 1;
    URL.path.getter(v27, v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v30 = [v27 fileExistsAtPath:v29 isDirectory:v4 - 161];

    if (v30)
    {
      if (qword_1001C7FC8 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      uint64_t v31 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v32 = type metadata accessor for LogMessage(0LL);
      uint64_t v33 = swift_allocObject( v31,  ((*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL))
            + 2LL * *(void *)(*(void *)(v32 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v32 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v33 + 16) = xmmword_100164230;
      uint64_t v34 = sub_10000D33C(&qword_1001CD528);
      *(void *)(v4 - 104) = v34;
      *(void *)(v4 - 128) = *(void *)(v4 - 248);
      id v35 = (id)AMSLogKey(v34);
      if (v35)
      {
        Swift::String v36 = v35;
        id v37 = v27;
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        uint64_t v40 = v39;

        swift_bridgeObjectRetain(v40);
        uint64_t v41 = *(void *)(v4 - 280);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v42._countAndFlagsBits = 0LL;
        v42._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v42);
        uint64_t v43 = *(void *)(v4 - 104);
        uint64_t v44 = sub_10000D37C((void *)(v4 - 128), v43);
        uint64_t v45 = swift_getDynamicType(v44, v43, 1LL);
        *(void *)(v4 - 136) = swift_getMetatypeMetadata(v45);
        *(void *)(v4 - 160) = v45;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v46._countAndFlagsBits = 5972026LL;
        v46._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v46);
        *(void *)(v4 - 136) = &type metadata for String;
        *(void *)(v4 - 160) = v38;
        *(void *)(v4 - 152) = v40;
        id v27 = v37;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v47._countAndFlagsBits = 93LL;
        v47._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v47);
        LogMessage.init(stringInterpolation:)(v41);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v41 = *(void *)(v4 - 280);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v86._countAndFlagsBits = 0LL;
        v86._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v86);
        uint64_t v87 = *(void *)(v4 - 104);
        unsigned int v88 = sub_10000D37C((void *)(v4 - 128), v87);
        uint64_t v89 = swift_getDynamicType(v88, v87, 1LL);
        *(void *)(v4 - 136) = swift_getMetatypeMetadata(v89);
        *(void *)(v4 - 160) = v89;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v90._countAndFlagsBits = 58LL;
        v90._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v90);
        LogMessage.init(stringInterpolation:)(v41);
      }

      sub_10000D3A0((void *)(v4 - 128));
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(33LL, 1LL);
      v91._countAndFlagsBits = 0xD000000000000020LL;
      v91._object = (void *)0x80000001001751F0LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v91);
      *(void *)(v4 - 104) = &unk_1001A8968;
      uint64_t v92 = *(void *)(v4 - 264);
      *(_BYTE *)(v4 - 128) = v92;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 128);
      sub_1000102E0(v4 - 128, &qword_1001CAAD0);
      v93._countAndFlagsBits = 41LL;
      v93._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v93);
      uint64_t v94 = LogMessage.init(stringInterpolation:)(v41);
      uint64_t v95 = static os_log_type_t.debug.getter(v94);
      sub_1000BD1B0(v95, v33);
      uint64_t v96 = swift_bridgeObjectRelease();
      __chkstk_darwin(v96);
      uint64_t v54 = *(void *)(v4 - 216);
      uint64_t v142 = v54;
      id v143 = v27;
      v144 = *(void **)(v4 - 248);
      char v145 = v92;
      sub_1000F0530((void (*)(void *))sub_1000F4E20, (uint64_t)v141, *(void *)(v4 - 272));
      swift_bridgeObjectRelease();
    }

    else
    {
      id v48 = [v26 defaultManager];
      URL.path.getter(v48, v49);
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)(v4 - 128) = 0LL;
      unsigned int v51 = [v48 createDirectoryAtPath:v50 withIntermediateDirectories:1 attributes:0 error:v4 - 128];

      uint64_t v52 = *(void **)(v4 - 128);
      *(void *)(v4 - 288) = v27;
      if (v51)
      {
        id v53 = v52;
        uint64_t v54 = *(void *)(v4 - 216);
        uint64_t v55 = *(void *)(v4 - 264);
      }

      else
      {
        id v67 = v52;
        uint64_t v68 = _convertNSErrorToError(_:)(v52);

        *(void *)(v4 - 296) = v68;
        swift_willThrow(v69);
        if (qword_1001C7FC8 != -1) {
          swift_once(&qword_1001C7FC8, sub_1000BD60C);
        }
        *(void *)(v4 - 304) = qword_1001DBB48;
        uint64_t v70 = sub_10000D33C(&qword_1001C9C70);
        uint64_t v71 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
        uint64_t v72 = swift_allocObject( v70,  ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
              + 2LL * *(void *)(v71 + 72),
                *(unsigned __int8 *)(v71 + 80) | 7LL);
        *(_OWORD *)(v72 + 16) = xmmword_100164230;
        uint64_t v73 = sub_10000D33C(&qword_1001CD528);
        *(void *)(v4 - 104) = v73;
        *(void *)(v4 - 128) = *(void *)(v4 - 248);
        id v74 = (id)AMSLogKey(v73);
        if (v74)
        {
          uint64_t v75 = v74;
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
          uint64_t v78 = v77;

          swift_bridgeObjectRetain(v78);
          uint64_t v79 = *(void *)(v4 - 280);
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
          v80._countAndFlagsBits = 0LL;
          v80._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v80);
          uint64_t v81 = *(void *)(v4 - 104);
          id v82 = sub_10000D37C((void *)(v4 - 128), v81);
          uint64_t v83 = swift_getDynamicType(v82, v81, 1LL);
          *(void *)(v4 - 136) = swift_getMetatypeMetadata(v83);
          *(void *)(v4 - 160) = v83;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
          sub_1000102E0(v4 - 160, &qword_1001CAAD0);
          v84._countAndFlagsBits = 5972026LL;
          v84._object = (void *)0xE300000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v84);
          *(void *)(v4 - 136) = &type metadata for String;
          *(void *)(v4 - 160) = v76;
          *(void *)(v4 - 152) = v78;
          uint64_t v9 = *(void **)(v4 - 240);
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
          sub_1000102E0(v4 - 160, &qword_1001CAAD0);
          v85._countAndFlagsBits = 93LL;
          v85._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v85);
          LogMessage.init(stringInterpolation:)(v79);
          swift_bridgeObjectRelease();
        }

        else
        {
          uint64_t v79 = *(void *)(v4 - 280);
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
          v97._countAndFlagsBits = 0LL;
          v97._object = (void *)0xE000000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v97);
          uint64_t v98 = *(void *)(v4 - 104);
          uint64_t v99 = sub_10000D37C((void *)(v4 - 128), v98);
          uint64_t v100 = swift_getDynamicType(v99, v98, 1LL);
          *(void *)(v4 - 136) = swift_getMetatypeMetadata(v100);
          *(void *)(v4 - 160) = v100;
          LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
          sub_1000102E0(v4 - 160, &qword_1001CAAD0);
          v101._countAndFlagsBits = 58LL;
          v101._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v101);
          LogMessage.init(stringInterpolation:)(v79);
        }

        sub_10000D3A0((void *)(v4 - 128));
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(47LL, 2LL);
        v102._countAndFlagsBits = 0xD000000000000025LL;
        v102._object = (void *)0x80000001001751A0LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v102);
        *(void *)(v4 - 104) = &unk_1001A8968;
        uint64_t v55 = *(void *)(v4 - 264);
        *(_BYTE *)(v4 - 128) = v55;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 128);
        sub_1000102E0(v4 - 128, &qword_1001CAAD0);
        v103._object = (void *)0xE900000000000020LL;
        v103._countAndFlagsBits = 0x3A726F727265202CLL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v103);
        uint64_t v104 = *(void *)(v4 - 296);
        swift_getErrorValue(v104, v4 - 184);
        uint64_t v105 = *(void *)(v4 - 208);
        uint64_t v106 = *(void *)(v4 - 200);
        *(void *)(v4 - 104) = v106;
        id v107 = sub_10000D63C((void *)(v4 - 128));
        (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16LL))(v107, v105, v106);
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 128);
        sub_1000102E0(v4 - 128, &qword_1001CAAD0);
        v108._countAndFlagsBits = 41LL;
        v108._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v108);
        uint64_t v109 = LogMessage.init(stringInterpolation:)(v79);
        uint64_t v111 = static os_log_type_t.fault.getter(v109, v110);
        sub_1000BD1B0(v111, v72);
        swift_bridgeObjectRelease();
        id v53 = (id)swift_errorRelease(v104);
        uint64_t v54 = *(void *)(v4 - 216);
      }

      __chkstk_darwin(v53);
      id v112 = *(void **)(v4 - 248);
      uint64_t v142 = v54;
      id v143 = v112;
      v144 = v9;
      char v145 = v55;
      sub_1000F0530((void (*)(void *))sub_1000F4DDC, (uint64_t)v141, *(void *)(v4 - 272));
      if (qword_1001C7FC8 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      uint64_t v113 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v114 = type metadata accessor for LogMessage(0LL);
      uint64_t v115 = swift_allocObject( v113,  ((*(unsigned __int8 *)(*(void *)(v114 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v114 - 8) + 80LL))
             + 2LL * *(void *)(*(void *)(v114 - 8) + 72LL),
               *(unsigned __int8 *)(*(void *)(v114 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v115 + 16) = xmmword_100164230;
      uint64_t v116 = sub_10000D33C(&qword_1001CD528);
      *(void *)(v4 - 104) = v116;
      *(void *)(v4 - 128) = v112;
      id v117 = (id)AMSLogKey(v116);
      if (v117)
      {
        v118 = v117;
        uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
        uint64_t v121 = v120;

        swift_bridgeObjectRetain(v121);
        uint64_t v122 = *(void *)(v4 - 280);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v123._countAndFlagsBits = 0LL;
        v123._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v123);
        uint64_t v124 = *(void *)(v4 - 104);
        v125 = sub_10000D37C((void *)(v4 - 128), v124);
        uint64_t v126 = swift_getDynamicType(v125, v124, 1LL);
        *(void *)(v4 - 136) = swift_getMetatypeMetadata(v126);
        *(void *)(v4 - 160) = v126;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v127._countAndFlagsBits = 5972026LL;
        v127._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v127);
        *(void *)(v4 - 136) = &type metadata for String;
        *(void *)(v4 - 160) = v119;
        *(void *)(v4 - 152) = v121;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        id v112 = *(void **)(v4 - 248);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v128._countAndFlagsBits = 93LL;
        v128._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v128);
        LogMessage.init(stringInterpolation:)(v122);
        uint64_t v54 = *(void *)(v4 - 216);
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v129 = *(void *)(v4 - 280);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v130._countAndFlagsBits = 0LL;
        v130._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v130);
        uint64_t v131 = *(void *)(v4 - 104);
        uint64_t v132 = sub_10000D37C((void *)(v4 - 128), v131);
        uint64_t v133 = swift_getDynamicType(v132, v131, 1LL);
        *(void *)(v4 - 136) = swift_getMetatypeMetadata(v133);
        *(void *)(v4 - 160) = v133;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v4 - 160);
        sub_1000102E0(v4 - 160, &qword_1001CAAD0);
        v134._countAndFlagsBits = 58LL;
        v134._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v134);
        LogMessage.init(stringInterpolation:)(v129);
      }

      sub_10000D3A0((void *)(v4 - 128));
      uint64_t v135 = LogMessage.init(stringLiteral:)(0xD00000000000001DLL);
      uint64_t v136 = static os_log_type_t.default.getter(v135);
      sub_1000BD1B0(v136, v115);
      uint64_t v137 = swift_bridgeObjectRelease();
      __chkstk_darwin(v137);
      v138 = *(void **)(v4 - 288);
      uint64_t v142 = v54;
      id v143 = v138;
      v144 = v112;
      char v145 = *(void *)(v4 - 264);
      sub_1000F0530((void (*)(void *))sub_1000F4DFC, (uint64_t)v141, *(void *)(v4 - 272));
      swift_bridgeObjectRelease();
    }

    sub_1000102E0(*(void *)(v4 - 232), &qword_1001CB180);
    uint64_t v139 = *(void *)(v4 - 224);
    v140 = *(uint64_t (**)(uint64_t, uint64_t))(v4 - 256);
    v140(*(void *)(v4 - 240), v139);
    return v140(v54, v139);
  }

uint64_t sub_1000F2C08(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ScheduleInfo(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AppDatabase();
  sub_100023140(a1, 0);
  uint64_t v73 = v9;
  uint64_t v74 = v1;
  uint64_t v71 = v4;
  sub_1000230D0();
  uint64_t v11 = v10;
  swift_release();
  uint64_t v12 = swift_allocObject(&unk_1001B02C0, 24LL, 7LL);
  *(void *)(v12 + 16) = _swiftEmptyArrayStorage;
  uint64_t v13 = (void *)(v12 + 16);
  uint64_t v14 = swift_allocObject(&unk_1001B02E8, 24LL, 7LL);
  *(void *)(v14 + 16) = _swiftEmptyArrayStorage;
  uint64_t v15 = swift_allocObject(&unk_1001B0310, 40LL, 7LL);
  int v72 = a1;
  *(_BYTE *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = v12;
  uint64_t v75 = v11;
  sub_10002D1E4();
  swift_retain(v14);
  uint64_t v70 = v12;
  swift_retain(v12);
  swift_release();
  swift_beginAccess(v14 + 16, v77, 0LL, 0LL);
  if (!*(void *)(*(void *)(v14 + 16) + 16LL))
  {
    uint64_t v69 = v14;
    if (qword_1001C7FC8 != -1) {
      swift_once(&qword_1001C7FC8, sub_1000BD60C);
    }
    uint64_t v41 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v42 = type metadata accessor for LogMessage(0LL);
    uint64_t v43 = swift_allocObject( v41,  ((*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v42 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v42 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v43 + 16) = xmmword_100164230;
    uint64_t v44 = v74;
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v74);
    v81[0] = v44;
    id v45 = (id)AMSLogKey(MetatypeMetadata);
    Swift::String v46 = v73;
    if (v45)
    {
      Swift::String v47 = v45;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v50 = v49;

      swift_bridgeObjectRetain(v50);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v51._countAndFlagsBits = 0LL;
      v51._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      uint64_t v52 = MetatypeMetadata;
      id v53 = sub_10000D37C(v81, (uint64_t)MetatypeMetadata);
      uint64_t DynamicType = swift_getDynamicType(v53, v52, 1LL);
      Swift::String v80 = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v78 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
      v55._countAndFlagsBits = 5972026LL;
      v55._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      Swift::String v80 = &type metadata for String;
      uint64_t v78 = v48;
      uint64_t v79 = v50;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
      v56._countAndFlagsBits = 93LL;
      v56._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      LogMessage.init(stringInterpolation:)(v46);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v60._countAndFlagsBits = 0LL;
      v60._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v60);
      Swift::String v61 = MetatypeMetadata;
      uint64_t v62 = sub_10000D37C(v81, (uint64_t)MetatypeMetadata);
      uint64_t v63 = swift_getDynamicType(v62, v61, 1LL);
      Swift::String v80 = (void *)swift_getMetatypeMetadata(v63);
      uint64_t v78 = v63;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
      v64._countAndFlagsBits = 58LL;
      v64._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v64);
      LogMessage.init(stringInterpolation:)(v46);
    }

    sub_10000D3A0(v81);
    uint64_t v65 = LogMessage.init(stringLiteral:)(0xD000000000000017LL);
    uint64_t v66 = static os_log_type_t.debug.getter(v65);
    sub_1000BD1B0(v66, v43);
    swift_release();
    swift_release();
    goto LABEL_19;
  }

  swift_bridgeObjectRetain(*(void *)(v14 + 16));
  sub_10002F1C4(v16);
  uint64_t v69 = v14;
  swift_bridgeObjectRelease();
  swift_beginAccess(v13, v76, 0LL, 0LL);
  uint64_t v57 = *(void *)(*v13 + 16LL);
  uint64_t v44 = v74;
  if (v57)
  {
    uint64_t v58 = *v13 + ((*(unsigned __int8 *)(v71 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    uint64_t v59 = *(void *)(v71 + 72);
    swift_bridgeObjectRetain(*v13);
    swift_retain(v75);
    Swift::String v46 = v73;
    do
    {
      sub_10002F70C(v58, (uint64_t)v6);
      sub_10002F3F0((uint64_t)v6);
      sub_100025430((uint64_t)v6);
      v58 += v59;
      --v57;
    }

    while (v57);
    swift_release();
    swift_release();
    swift_release();
LABEL_19:
    swift_bridgeObjectRelease();
    char v67 = v72;
    goto LABEL_3;
  }

  swift_release();
  swift_release();
  char v67 = v72;
  Swift::String v46 = v73;
LABEL_3:
  if (qword_1001C7FC8 != -1) {
    swift_once(&qword_1001C7FC8, sub_1000BD60C);
  }
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = type metadata accessor for LogMessage(0LL);
  uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v18 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v18 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_100164230;
  MetatypeMetadata = (void *)swift_getMetatypeMetadata(v44);
  v81[0] = v44;
  id v20 = (id)AMSLogKey(MetatypeMetadata);
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v25._countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = MetatypeMetadata;
    id v27 = sub_10000D37C(v81, (uint64_t)MetatypeMetadata);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    Swift::String v80 = (void *)swift_getMetatypeMetadata(v28);
    uint64_t v78 = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
    sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
    v29._countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    Swift::String v80 = &type metadata for String;
    uint64_t v78 = v22;
    uint64_t v79 = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
    sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
    v30._countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v46);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v31._countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v32 = MetatypeMetadata;
    uint64_t v33 = sub_10000D37C(v81, (uint64_t)MetatypeMetadata);
    uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
    Swift::String v80 = (void *)swift_getMetatypeMetadata(v34);
    uint64_t v78 = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
    sub_1000102E0((uint64_t)&v78, &qword_1001CAAD0);
    v35._countAndFlagsBits = 58LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v46);
  }

  sub_10000D3A0(v81);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(23LL, 1LL);
  v36._object = (void *)0x8000000100175120LL;
  v36._countAndFlagsBits = 0xD000000000000017LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v36);
  MetatypeMetadata = &unk_1001A8968;
  LOBYTE(v81[0]) = v67;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v81);
  sub_1000102E0((uint64_t)v81, &qword_1001CAAD0);
  v37._countAndFlagsBits = 0LL;
  v37._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v37);
  uint64_t v38 = LogMessage.init(stringInterpolation:)(v46);
  uint64_t v39 = static os_log_type_t.info.getter(v38);
  sub_1000BD1B0(v39, v19);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F3968(void *a1, uint64_t a2, void *a3, char *a4, int a5)
{
  int v94 = a5;
  uint64_t v95 = a4;
  uint64_t v96 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  Swift::String v97 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v99 = *(void *)(v8 - 8);
  uint64_t v100 = (void *)v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v93 - v12;
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  URL.appendingPathComponent(_:)(*a1, v14);
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v17 = [v16 defaultManager];
  URL.path.getter(v17, v18);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v20 = [v17 fileExistsAtPath:v19];

  if (v20)
  {
    URL.appendingPathComponent(_:)(v15, v14);
    id v21 = [v16 defaultManager];
    URL.path.getter(v21, v22);
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v24 = swift_bridgeObjectRelease();
    URL.path.getter(v24, v25);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v107[0] = 0LL;
    unsigned int v27 = [v21 moveItemAtPath:v23 toPath:v26 error:v107];

    id v28 = v107[0];
    Swift::String v29 = v13;
    if (v27)
    {
      Swift::String v30 = *(void (**)(char *, void *))(v99 + 8);
      id v31 = v107[0];
      uint64_t v32 = v100;
      v30(v11, v100);
    }

    else
    {
      uint64_t v98 = v11;
      id v48 = v107[0];
      uint64_t v49 = _convertNSErrorToError(_:)(v28);

      swift_willThrow(v50);
      uint64_t v32 = v100;
      if (qword_1001C7FC8 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      uint64_t v93 = qword_1001DBB48;
      uint64_t v51 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v52 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v53 = swift_allocObject( v51,  ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
            + 2LL * *(void *)(v52 + 72),
              *(unsigned __int8 *)(v52 + 80) | 7LL);
      *(_OWORD *)(v53 + 16) = xmmword_100164230;
      Swift::String v108 = (void *)sub_10000D33C(&qword_1001CD528);
      v107[0] = v96;
      id v54 = (id)AMSLogKey(v108);
      Swift::String v55 = v97;
      if (v54)
      {
        Swift::String v56 = v54;
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
        uint64_t v95 = v13;
        uint64_t v59 = v58;

        swift_bridgeObjectRetain(v59);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v60._countAndFlagsBits = 0LL;
        v60._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v60);
        Swift::String v61 = v108;
        uint64_t v62 = sub_10000D37C(v107, (uint64_t)v108);
        uint64_t DynamicType = swift_getDynamicType(v62, v61, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        uint64_t v104 = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
        sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
        v64._countAndFlagsBits = 5972026LL;
        v64._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v64);
        MetatypeMetadata = &type metadata for String;
        uint64_t v104 = v57;
        uint64_t v105 = v59;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
        sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
        v65._countAndFlagsBits = 93LL;
        v65._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v65);
        LogMessage.init(stringInterpolation:)(v55);
        Swift::String v29 = v95;
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v77._countAndFlagsBits = 0LL;
        v77._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v77);
        uint64_t v78 = v108;
        uint64_t v79 = sub_10000D37C(v107, (uint64_t)v108);
        uint64_t v80 = swift_getDynamicType(v79, v78, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(v80);
        uint64_t v104 = v80;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
        sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
        v81._countAndFlagsBits = 58LL;
        v81._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v81);
        LogMessage.init(stringInterpolation:)(v55);
      }

      sub_10000D3A0(v107);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(44LL, 2LL);
      v82._object = (void *)0x80000001001752D0LL;
      v82._countAndFlagsBits = 0xD000000000000022LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v82);
      Swift::String v108 = &unk_1001A8968;
      LOBYTE(v107[0]) = v94;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v107);
      sub_1000102E0((uint64_t)v107, &qword_1001CAAD0);
      v83._countAndFlagsBits = 0x3A726F727265202CLL;
      v83._object = (void *)0xE900000000000020LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v83);
      swift_getErrorValue(v49, v103);
      uint64_t v84 = v49;
      uint64_t v85 = v101;
      Swift::String v86 = v102;
      Swift::String v108 = v102;
      uint64_t v87 = sub_10000D63C(v107);
      (*(void (**)(void *, uint64_t, void *))(*(v86 - 1) + 16LL))(v87, v85, v86);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v107);
      sub_1000102E0((uint64_t)v107, &qword_1001CAAD0);
      v88._countAndFlagsBits = 41LL;
      v88._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v88);
      uint64_t v89 = LogMessage.init(stringInterpolation:)(v55);
      uint64_t v91 = static os_log_type_t.fault.getter(v89, v90);
      sub_1000BD1B0(v91, v53);
      swift_bridgeObjectRelease();
      swift_errorRelease(v84);
      Swift::String v30 = *(void (**)(char *, void *))(v99 + 8);
      v30(v98, v32);
    }
  }

  else
  {
    uint64_t v95 = v13;
    if (qword_1001C7FC8 != -1) {
      swift_once(&qword_1001C7FC8, sub_1000BD60C);
    }
    uint64_t v33 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v34 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v35 = swift_allocObject( v33,  ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))
          + 2LL * *(void *)(v34 + 72),
            *(unsigned __int8 *)(v34 + 80) | 7LL);
    *(_OWORD *)(v35 + 16) = xmmword_100164230;
    Swift::String v108 = (void *)sub_10000D33C(&qword_1001CD528);
    v107[0] = v96;
    id v36 = (id)AMSLogKey(v108);
    uint64_t v32 = v100;
    Swift::String v37 = v97;
    if (v36)
    {
      uint64_t v38 = v36;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v41 = v40;

      swift_bridgeObjectRetain(v41);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v42._countAndFlagsBits = 0LL;
      v42._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      uint64_t v43 = v108;
      uint64_t v44 = sub_10000D37C(v107, (uint64_t)v108);
      uint64_t v45 = swift_getDynamicType(v44, v43, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v45);
      uint64_t v104 = v45;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
      sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
      v46._countAndFlagsBits = 5972026LL;
      v46._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      MetatypeMetadata = &type metadata for String;
      uint64_t v104 = v39;
      uint64_t v105 = v41;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
      sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
      v47._countAndFlagsBits = 93LL;
      v47._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      LogMessage.init(stringInterpolation:)(v37);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v66._countAndFlagsBits = 0LL;
      v66._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v66);
      char v67 = v108;
      uint64_t v68 = sub_10000D37C(v107, (uint64_t)v108);
      uint64_t v69 = swift_getDynamicType(v68, v67, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v69);
      uint64_t v104 = v69;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v104);
      sub_1000102E0((uint64_t)&v104, &qword_1001CAAD0);
      v70._countAndFlagsBits = 58LL;
      v70._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v70);
      LogMessage.init(stringInterpolation:)(v37);
    }

    sub_10000D3A0(v107);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(53LL, 1LL);
    v71._countAndFlagsBits = 0xD000000000000034LL;
    v71._object = (void *)0x8000000100175290LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v71);
    Swift::String v108 = v32;
    int v72 = sub_10000D63C(v107);
    uint64_t v73 = v99;
    Swift::String v29 = v95;
    (*(void (**)(void *, char *, void *))(v99 + 16))(v72, v95, v32);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v107);
    sub_1000102E0((uint64_t)v107, &qword_1001CAAD0);
    v74._countAndFlagsBits = 41LL;
    v74._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v74);
    uint64_t v75 = LogMessage.init(stringInterpolation:)(v37);
    uint64_t v76 = static os_log_type_t.debug.getter(v75);
    sub_1000BD1B0(v76, v35);
    swift_bridgeObjectRelease();
    Swift::String v30 = *(void (**)(char *, void *))(v73 + 8);
  }

  return ((uint64_t (*)(char *, void *))v30)(v29, v32);
}

void sub_1000F41C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ScheduleInfo(0LL);
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v22 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v17[1] = a3 + 16;
  uint64_t v19 = a1;
  uint64_t v20 = a4 + 16;
  uint64_t v11 = a1 + *(int *)(v9 + 20);
  uint64_t v18 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v12 = (uint64_t *)(v11 + *(int *)(v18 + 44));
  uint64_t v13 = v12[1];
  uint64_t v23 = *v12;
  uint64_t v24 = v13;
  v26[0] = 0xD000000000000019LL;
  v26[1] = 0x8000000100175160LL;
  v25[0] = 0LL;
  v25[1] = 0xE000000000000000LL;
  unint64_t v14 = sub_10004828C();
  __n128 v15 = swift_bridgeObjectRetain(v13);
  uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v26,  v25,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  v15,  &type metadata for String,  v14,  v14,  v14);
  uint64_t v24 = v16;
  __asm { BR              X11 }

uint64_t sub_1000F431C()
{
  *(void *)(v5 - 96) = 0x6C616E7265746E69LL;
  *(void *)(v5 - 88) = 0xE800000000000000LL;
  swift_bridgeObjectRetain(0xE800000000000000LL);
  v6._countAndFlagsBits = 95LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v5 - 88);
  *(void *)(v5 - 96) = *(void *)(v5 - 96);
  *(void *)(v5 - 88) = v7;
  *(void *)(v5 - 112) = 0LL;
  *(void *)(v5 - 104) = 0xE000000000000000LL;
  uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))StringProtocol.replacingOccurrences<A, B>(of:with:options:range:))( v5 - 96,  v5 - 112,  0LL,  0LL,  0LL,  1LL,  v2,  v2,  v2,  v1,  v1,  v1);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0 == v8 && v4 == v10)
  {
    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v0, v4, v8, v10, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10015169C();
    uint64_t v12 = *(uint64_t **)(v5 - 184);
    swift_beginAccess(v12, v5 - 136, 33LL, 0LL);
    sub_100063EC8();
    uint64_t v13 = *(void *)(*v12 + 16);
    sub_100063F80(v13);
    uint64_t v14 = *v12;
    *(void *)(v14 + 16) = v13 + 1;
    uint64_t v15 = v14 + 16 * v13;
    *(void *)(v15 + 32) = v0;
    *(void *)(v15 + 40) = v4;
    swift_endAccess(v5 - 136);
    uint64_t v16 = *(void *)(v5 - 144);
    sub_10002F70C(*(void *)(v5 - 168), v16);
    id v17 = (uint64_t *)(v16 + *(int *)(v3 + 20) + (uint64_t)*(int *)(*(void *)(v5 - 176) + 44LL));
    swift_bridgeObjectRelease();
    *id v17 = v8;
    v17[1] = v10;
    uint64_t v18 = *(uint64_t **)(v5 - 160);
    swift_beginAccess(v18, v5 - 136, 33LL, 0LL);
    sub_100063EE0();
    uint64_t v19 = *(void *)(*v18 + 16);
    sub_100063F98(v19);
    uint64_t v20 = *v18;
    *(void *)(v20 + 16) = v19 + 1;
    sub_10002F70C( v16,  v20 + ((*(unsigned __int8 *)(*(void *)(v5 - 152) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 152) + 80LL))
    + *(void *)(*(void *)(v5 - 152) + 72LL) * v19);
    swift_endAccess(v5 - 136);
    sub_100025430(v16);
  }

  return 1LL;
}

uint64_t type metadata accessor for Migrator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd8Migrator);
}

uint64_t sub_1000F4574()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000F4598()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000F45C4(uint64_t a1)
{
  return v2 & 1;
}

uint64_t sub_1000F45E4(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v88 = a5;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v90 = *(void *)(v15 - 8);
  uint64_t v91 = v15;
  __chkstk_darwin(v15);
  id v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void **)(a1 + 8);
  v98[0] = *(id *)a1;
  v98[1] = v18;
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for URL.DirectoryHint.inferFromPath(_:),  v11);
  unint64_t v19 = sub_10004828C();
  URL.appending<A>(path:directoryHint:)(v98, v14, &type metadata for String, v19);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  URL.path.getter(v20, v21);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(v14) = [a3 fileExistsAtPath:v22];

  if ((_DWORD)v14)
  {
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    v98[0] = 0LL;
    unsigned int v26 = [a3 removeItemAtURL:v24 error:v98];

    id v27 = v98[0];
    if (v26)
    {
      uint64_t v28 = qword_1001C7FC8;
      id v29 = v98[0];
      if (v28 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      uint64_t v30 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v31 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v32 = *(void *)(v31 + 72);
      uint64_t v33 = swift_allocObject( v30,  ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)) + 2 * v32,  *(unsigned __int8 *)(v31 + 80) | 7LL);
      *(_OWORD *)(v33 + 16) = xmmword_100164230;
      uint64_t v99 = (void *)sub_10000D33C(&qword_1001CD528);
      v98[0] = a4;
      id v34 = (id)AMSLogKey(v99);
      if (v34)
      {
        uint64_t v35 = v34;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
        uint64_t v87 = v32;
        uint64_t v37 = v36;
        uint64_t v39 = v38;

        swift_bridgeObjectRetain(v39);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v40._countAndFlagsBits = 0LL;
        v40._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v40);
        uint64_t v41 = v99;
        Swift::String v42 = sub_10000D37C(v98, (uint64_t)v99);
        uint64_t DynamicType = swift_getDynamicType(v42, v41, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        uint64_t v95 = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v44._countAndFlagsBits = 5972026LL;
        v44._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v44);
        MetatypeMetadata = &type metadata for String;
        uint64_t v95 = v37;
        uint64_t v96 = v39;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v45._countAndFlagsBits = 93LL;
        v45._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v45);
        LogMessage.init(stringInterpolation:)(v10);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v63._countAndFlagsBits = 0LL;
        v63._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v63);
        Swift::String v64 = v99;
        Swift::String v65 = sub_10000D37C(v98, (uint64_t)v99);
        uint64_t v66 = swift_getDynamicType(v65, v64, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(v66);
        uint64_t v95 = v66;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v67._countAndFlagsBits = 58LL;
        v67._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v67);
        LogMessage.init(stringInterpolation:)(v10);
      }

      sub_10000D3A0(v98);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(46LL, 1LL);
      v68._object = (void *)0x8000000100175260LL;
      v68._countAndFlagsBits = 0xD00000000000002DLL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v68);
      uint64_t v99 = &unk_1001A8968;
      LOBYTE(v98[0]) = v88;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v98);
      sub_1000102E0((uint64_t)v98, &qword_1001CAAD0);
      v69._countAndFlagsBits = 41LL;
      v69._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v69);
      uint64_t v70 = LogMessage.init(stringInterpolation:)(v10);
      uint64_t v71 = static os_log_type_t.debug.getter(v70);
      sub_1000BD1B0(v71, v33);
      swift_bridgeObjectRelease();
    }

    else
    {
      id v46 = v98[0];
      uint64_t v47 = _convertNSErrorToError(_:)(v27);

      uint64_t v89 = v47;
      swift_willThrow(v48);
      if (qword_1001C7FC8 != -1) {
        swift_once(&qword_1001C7FC8, sub_1000BD60C);
      }
      uint64_t v87 = qword_1001DBB48;
      uint64_t v49 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v50 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v51 = swift_allocObject( v49,  ((*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
            + 2LL * *(void *)(v50 + 72),
              *(unsigned __int8 *)(v50 + 80) | 7LL);
      *(_OWORD *)(v51 + 16) = xmmword_100164230;
      uint64_t v99 = (void *)sub_10000D33C(&qword_1001CD528);
      v98[0] = a4;
      id v52 = (id)AMSLogKey(v99);
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        uint64_t v56 = v55;

        swift_bridgeObjectRetain(v56);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v57._countAndFlagsBits = 0LL;
        v57._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v57);
        uint64_t v58 = v99;
        uint64_t v59 = sub_10000D37C(v98, (uint64_t)v99);
        uint64_t v60 = swift_getDynamicType(v59, v58, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(v60);
        uint64_t v95 = v60;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v61._countAndFlagsBits = 5972026LL;
        v61._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v61);
        MetatypeMetadata = &type metadata for String;
        uint64_t v95 = v54;
        uint64_t v96 = v56;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v62._countAndFlagsBits = 93LL;
        v62._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v62);
        LogMessage.init(stringInterpolation:)(v10);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v72._countAndFlagsBits = 0LL;
        v72._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v72);
        uint64_t v73 = v99;
        Swift::String v74 = sub_10000D37C(v98, (uint64_t)v99);
        uint64_t v75 = swift_getDynamicType(v74, v73, 1LL);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(v75);
        uint64_t v95 = v75;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v95);
        sub_1000102E0((uint64_t)&v95, &qword_1001CAAD0);
        v76._countAndFlagsBits = 58LL;
        v76._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v76);
        LogMessage.init(stringInterpolation:)(v10);
      }

      sub_10000D3A0(v98);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(63LL, 2LL);
      v77._countAndFlagsBits = 0xD000000000000035LL;
      v77._object = (void *)0x8000000100175220LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v77);
      uint64_t v99 = &unk_1001A8968;
      LOBYTE(v98[0]) = v88;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v98);
      sub_1000102E0((uint64_t)v98, &qword_1001CAAD0);
      v78._countAndFlagsBits = 0x3A726F727265202CLL;
      v78._object = (void *)0xE900000000000020LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v78);
      uint64_t v79 = v89;
      swift_getErrorValue(v89, v94);
      uint64_t v80 = v92;
      Swift::String v81 = v93;
      uint64_t v99 = v93;
      Swift::String v82 = sub_10000D63C(v98);
      (*(void (**)(void *, uint64_t, void *))(*(v81 - 1) + 16LL))(v82, v80, v81);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v98);
      sub_1000102E0((uint64_t)v98, &qword_1001CAAD0);
      v83._countAndFlagsBits = 41LL;
      v83._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v83);
      uint64_t v84 = LogMessage.init(stringInterpolation:)(v10);
      uint64_t v85 = static os_log_type_t.debug.getter(v84);
      sub_1000BD1B0(v85, v51);
      swift_bridgeObjectRelease();
      swift_errorRelease(v79);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v17, v91);
}

uint64_t sub_1000F4DDC(void *a1)
{
  return sub_1000F3968( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(char **)(v1 + 32),  *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_1000F4DFC(uint64_t a1)
{
  return sub_1000F45E4( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void **)(v1 + 32),  *(unsigned __int8 *)(v1 + 40));
}

uint64_t sub_1000F4E20(uint64_t a1)
{
  return sub_1000F4DFC(a1);
}

void sub_1000F4E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
    String.hash(into:)(v21, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    sub_1000F7978();
    if ((v9 & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      if ((*v11 != a1 || v12 != a2) && (sub_10003ADAC(*v11, v12) & 1) == 0)
      {
        uint64_t v14 = ~v7;
        uint64_t v15 = (v8 + 1) & v14;
        sub_1000F7978();
        if ((v16 & 1) != 0)
        {
          do
          {
            id v17 = (uint64_t *)(v10 + 16 * v15);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((sub_10003ADAC(*v17, v18) & 1) != 0) {
              break;
            }
            uint64_t v15 = (v15 + 1) & v14;
            sub_1000F7978();
          }

          while ((v20 & 1) != 0);
        }
      }
    }
  }

id sub_1000F4F2C()
{
  return sub_1000F79A8(&OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___session, 604800.0);
}

id sub_1000F4F40()
{
  return sub_1000F79A8(&OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___sessionOnTimeout, 300.0);
}

id sub_1000F4F54()
{
  return sub_1000F4F6C( &OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___sessionPluggedIn,  1,  604800.0);
}

id sub_1000F4F6C(uint64_t *a1, char a2, double a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(v3 + *a1);
  if (v5)
  {
    id v6 = *(id *)(v3 + *a1);
  }

  else
  {
    id v7 = sub_1000F4FC8(a2 & 1, a3);
    Swift::Int v8 = *(void **)(v3 + v4);
    *(void *)(v3 + v4) = v7;
    id v6 = v7;

    uint64_t v5 = 0LL;
  }

  id v9 = v5;
  return v6;
}

id sub_1000F4FC8(char a1, double a2)
{
  uint64_t v4 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DE7C();
  unint64_t v34 = 0xD000000000000018LL;
  unint64_t v35 = 0x800000010016ADB0LL;
  if ((a1 & 1) != 0)
  {
    v8._countAndFlagsBits = 0x64656767756C702ELL;
    v8._object = (void *)0xEA00000000006E49LL;
    String.append(_:)(v8);
  }

  if (a2 < 604800.0)
  {
    v9._object = (void *)0xEA00000000007475LL;
    v9._countAndFlagsBits = 0x6F656D69546E6F2ELL;
    String.append(_:)(v9);
  }

  if (qword_1001C7FA0 != -1) {
    swift_once(&qword_1001C7FA0, sub_1000BD448);
  }
  uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(sub_10002C79C() - 8);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
        + 2LL * *(void *)(v11 + 72),
          *(unsigned __int8 *)(v11 + 80) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_100164230;
  uint64_t v33 = (void *)type metadata accessor for NetworkObserver();
  v32[0] = v4;
  id v13 = v4;
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = sub_1000105E8((uint64_t)v14);
    sub_1000F7A00();
    sub_1000489DC();
    sub_100010564();
    sub_100010608();
    sub_1000104C0(v32);
    uint64_t v16 = sub_100010530();
    sub_1000F79D0(v16);
    sub_1000102E0((uint64_t)v31, &qword_1001CAAD0);
    sub_10000DC14();
    v31[3] = &type metadata for String;
    v31[0] = v15;
    v31[1] = v3;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_1000102E0((uint64_t)v31, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_1000291E4();
    sub_10000DE74();
  }

  else
  {
    sub_10001A1BC();
    sub_100010608();
    sub_1000104C0(v32);
    uint64_t v17 = sub_100010530();
    sub_1000F79D0(v17);
    sub_1000102E0((uint64_t)v31, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000291E4();
  }

  sub_10000D3A0(v32);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(42LL, 1LL);
  sub_100048BA0();
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v33 = &type metadata for String;
  v32[0] = v34;
  v32[1] = v35;
  sub_100020BB4();
  uint64_t v19 = sub_10000DEA4();
  sub_1000B8494(v19, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v20 = sub_1000291E4();
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  sub_1000BD1B0(v21, v12);
  swift_bridgeObjectRelease();
  NSString v22 = (void *)objc_opt_self(&OBJC_CLASS___NSURLSessionConfiguration);
  NSString v23 = String._bridgeToObjectiveC()();
  sub_100020AB8();
  id v24 = [v22 backgroundSessionConfigurationWithIdentifier:v23];

  id v26 = sub_1000F796C(v25, "setSessionSendsLaunchEvents:");
  sub_1000F796C((uint64_t)v26, "setDiscretionary:");
  id v27 = sub_1000F796C((uint64_t)[v24 setHTTPShouldSetCookies:0], "setHTTPShouldUsePipelining:");
  id v28 = sub_1000F796C((uint64_t)v27, "setHTTPCookieAcceptPolicy:");
  sub_1000F796C((uint64_t)v28, "set_allowsRetryForBackgroundDataTasks:");
  objc_msgSend(v24, "set_requiresPowerPluggedIn:", a1 & 1);
  sub_100048BA0();
  sub_1000F7664(0xD000000000000012LL, v29, v24);
  sub_1000F796C((uint64_t)[v24 setURLCache:0], "setRequestCachePolicy:");
  sub_10000DE08( (uint64_t)[v24 setTimeoutIntervalForResource:a2],  (unint64_t *)&unk_1001CD680,  NSURLSession_ptr);
  swift_unknownObjectRetain(v13);
  return sub_1000F53D4(v24, (uint64_t)v13, 0LL);
}

id sub_1000F53D4(void *a1, uint64_t a2, void *a3)
{
  id v7 =  [(id)swift_getObjCClassFromMetadata(v3) sessionWithConfiguration:a1 delegate:a2 delegateQueue:a3];

  swift_unknownObjectRelease(a2);
  return v7;
}

id sub_1000F5440()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for NetworkObserver()) init];
  qword_1001DBBA0 = (uint64_t)result;
  return result;
}

id sub_1000F546C()
{
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___session] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___sessionOnTimeout] = 0LL;
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd15NetworkObserver____lazy_storage___sessionPluggedIn] = 0LL;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for NetworkObserver();
  id v1 = objc_msgSendSuper2(&v3, "init");

  return v1;
}

void sub_1000F5510()
{
  uint64_t v3 = v1;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10004895C();
  id v7 = (void *)(v5 - v6);
  __chkstk_darwin(v8);
  if (qword_1001C80E8 != -1) {
    goto LABEL_77;
  }
  while (1)
  {
    uint64_t v9 = sub_1000F7948();
    sub_100132364(v9, v10);
    id v11 = sub_1000F4F2C();
    unint64_t v84 = (unint64_t)sub_1000F7A88(v11);

    id v12 = sub_1000F4F40();
    unint64_t v87 = (unint64_t)sub_1000F7A88(v12);

    id v13 = sub_1000F4F54();
    unint64_t v86 = (unint64_t)sub_1000F7A88(v13);

    if (qword_1001C7FA0 != -1) {
      swift_once(&qword_1001C7FA0, sub_1000BD448);
    }
    uint64_t v14 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v15 = *(void *)(sub_10002C79C() - 8);
    uint64_t v16 = sub_10000DCF0( ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
          + 2LL * *(void *)(v15 + 72),
            *(unsigned __int8 *)(v15 + 80));
    *(_OWORD *)(v16 + 16) = xmmword_100164230;
    uint64_t v95 = type metadata accessor for NetworkObserver();
    v94[0] = v3;
    id v17 = (id)AMSLogKey((id)v3);
    if (v17)
    {
      sub_1000105E8((uint64_t)v17);
      sub_1000F7A90();
      sub_100020BB4();
      sub_100010564();
      sub_10004865C();
      uint64_t v18 = v95;
      sub_1000104C0(v94);
      MetatypeMetadata = (void *)sub_100010530();
      v92[0] = v18;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v92);
      sub_1000B8470();
      sub_10000DC14();
      MetatypeMetadata = &type metadata for String;
      v92[0] = v14;
      v92[1] = v2;
      sub_10000DEA4();
      sub_1000B8470();
      sub_10000DC4C(93LL);
      sub_1000F7A44();
      sub_100020AB8();
    }

    else
    {
      sub_10001A1BC();
      sub_10004865C();
      uint64_t v19 = v95;
      uint64_t v20 = sub_10000D37C(v94, v95);
      uint64_t v21 = sub_10000DC54((uint64_t)v20, v19);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
      v92[0] = v21;
      uint64_t v22 = sub_10000DEA4();
      sub_1000B8494(v22, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000F7A44();
    }

    sub_1000677AC();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(58LL, 3LL);
    sub_100048BA0();
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    unint64_t v24 = v84;
    uint64_t v2 = v84 >> 62;
    if (v84 >> 62)
    {
      sub_1000F79BC();
      sub_1000F79A0();
      sub_10002C764();
    }

    uint64_t v25 = sub_1000F790C();
    sub_100010654(v25, &qword_1001CAAD0);
    v26._countAndFlagsBits = 0x6D69546E6F5B202CLL;
    v26._object = (void *)0xED00003A74756F65LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    if (v87 >> 62)
    {
      sub_1000F78F8();
      sub_1000F79A0();
      sub_100009070();
    }

    uint64_t v27 = sub_1000F790C();
    sub_100010654(v27, &qword_1001CAAD0);
    sub_100048BA0();
    v28._countAndFlagsBits = 0xD000000000000014LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    if (v86 >> 62)
    {
      sub_1000F78F8();
      sub_1000F79A0();
      sub_100009070();
    }

    uint64_t v29 = sub_1000F790C();
    sub_100010654(v29, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    uint64_t v30 = LogMessage.init(stringInterpolation:)(v7);
    uint64_t v31 = static os_log_type_t.default.getter(v30);
    sub_1000BD1B0(v31, v16);
    uint64_t v32 = sub_10000DE74();
    uint64_t v33 = sub_10000DE08(v32, &qword_1001C9DF8, &OBJC_CLASS___NSURLSessionDownloadTask_ptr);
    id v7 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v33,  &protocol witness table for String);
    if (v2) {
      break;
    }
    uint64_t v3 = *(void *)((v84 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_17;
    }
LABEL_31:
    sub_10002C764();
    if (v87 >> 62)
    {
      sub_1000F78F8();
      uint64_t v51 = sub_1000F79A0();
      sub_100009070();
      unint64_t v50 = v87;
      if (v51)
      {
LABEL_35:
        unint64_t v85 = v50 & 0xC000000000000001LL;
        uint64_t v3 = 4LL;
        while (1)
        {
          uint64_t v0 = (void *)(v3 - 4);
          id v52 = v85 ? (id)sub_1000F7A64() : *(id *)(v50 + 8 * v3);
          uint64_t v53 = v52;
          if (__OFADD__(v0, 1LL)) {
            break;
          }
          uint64_t v90 = v3 - 3;
          id v54 = sub_1000F4F40();
          uint64_t v0 = (void *)sub_1000F7A5C(v54);
          sub_1000F7A00();
          id v55 = v53;
          uint64_t v2 = sub_1000F7A2C();
          v94[0] = v7;
          sub_1000F7A3C((uint64_t)v0, v16);
          sub_1000F798C();
          if (v42) {
            goto LABEL_71;
          }
          unint64_t v58 = v56;
          char v59 = v57;
          sub_10000D33C(&qword_1001C9DF0);
          if (sub_1000F7A34(v2))
          {
            unint64_t v60 = sub_100030CCC((uint64_t)v0, v16);
            if ((v59 & 1) != (v61 & 1)) {
              goto LABEL_78;
            }
            unint64_t v58 = v60;
          }

          id v7 = (void *)v94[0];
          if ((v59 & 1) != 0)
          {
            sub_1000F7A08();
            *((void *)v0 + v58) = v55;
          }

          else
          {
            sub_1000F7920();
            *Swift::String v62 = v0;
            v62[1] = v16;
            *(void *)(v7[7] + 8 * v58) = v55;
            uint64_t v63 = v7[2];
            BOOL v42 = __OFADD__(v63, 1LL);
            uint64_t v64 = v63 + 1;
            if (v42) {
              goto LABEL_75;
            }
            void v7[2] = v64;
            sub_1000489DC();
          }

          sub_10000DE74();
          sub_10004C578();
          ++v3;
          unint64_t v50 = v87;
          if (v90 == v51) {
            goto LABEL_49;
          }
        }

LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    swift_once(&qword_1001C80E8, sub_100131F04);
  }

  sub_1000F79BC();
  uint64_t v3 = sub_1000F79A0();
  sub_10002C764();
  if (!v3) {
    goto LABEL_31;
  }
LABEL_17:
  uint64_t v2 = 4LL;
  while (1)
  {
    uint64_t v0 = (void *)(v2 - 4);
    if ((v84 & 0xC000000000000001LL) != 0) {
      id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v2 - 4, v24);
    }
    else {
      id v34 = *(id *)(v24 + 8 * v2);
    }
    unint64_t v35 = v34;
    if (__OFADD__(v0, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }

    uint64_t v89 = v2 - 3;
    id v36 = sub_1000F4F2C();
    uint64_t v0 = (void *)sub_1000F7A5C(v36);
    uint64_t v38 = v37;

    id v39 = v35;
    uint64_t v16 = sub_1000F7A2C();
    v94[0] = v7;
    sub_1000F7A3C((uint64_t)v0, v38);
    sub_1000F798C();
    if (v42) {
      goto LABEL_69;
    }
    unint64_t v43 = v40;
    char v44 = v41;
    sub_10000D33C(&qword_1001C9DF0);
    if (sub_1000F7A34(v16)) {
      break;
    }
LABEL_26:
    id v7 = (void *)v94[0];
    if ((v44 & 1) != 0)
    {
      sub_1000F7A08();
      *((void *)v0 + v43) = v39;
    }

    else
    {
      sub_1000F7920();
      *uint64_t v47 = v0;
      v47[1] = v38;
      *(void *)(v7[7] + 8 * v43) = v39;
      uint64_t v48 = v7[2];
      BOOL v42 = __OFADD__(v48, 1LL);
      uint64_t v49 = v48 + 1;
      if (v42) {
        goto LABEL_74;
      }
      void v7[2] = v49;
      swift_bridgeObjectRetain(v38);
    }

    swift_bridgeObjectRelease();
    sub_10004C578();
    ++v2;
    unint64_t v24 = v84;
    if (v89 == v3) {
      goto LABEL_31;
    }
  }

  unint64_t v45 = sub_100030CCC((uint64_t)v0, v38);
  if ((v44 & 1) == (v46 & 1))
  {
    unint64_t v43 = v45;
    goto LABEL_26;
  }

uint64_t sub_1000F5D64()
{
  uint64_t v52 = v1;
  uint64_t v53 = v2;
  unint64_t v45 = v0;
  int v4 = v3;
  uint64_t v6 = v5;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DE7C();
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10000DC74();
  uint64_t v15 = sub_1000F79F8();
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  __chkstk_darwin(v15);
  sub_10000DE7C();
  uint64_t v18 = v17 - v16;
  char v46 = *(void (**)(void *, uint64_t, uint64_t))(v14 + 16);
  v46(v0, v6, v13);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v0, 0LL, 60.0);
  uint64_t v19 = (int *)type metadata accessor for JSContent.Request(0LL);
  uint64_t v20 = sub_1000870C4(*(_BYTE *)(v6 + v19[6]));
  ((void (*)(uint64_t))URLRequest.httpMethod.setter)(v20);
  sub_1000BDC34(*(void *)(v6 + v19[5]));
  if (!v21) {
    uint64_t v21 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  }
  ((void (*)(uint64_t))URLRequest.allHTTPHeaderFields.setter)(v21);
  uint64_t v22 = ((uint64_t (*)(uint64_t))URLRequest.cachePolicy.setter)(1LL);
  Swift::String v23 = (uint64_t *)(v6 + v19[7]);
  uint64_t v24 = v23[1];
  if (v24)
  {
    uint64_t v25 = *v23;
    ((void (*)(uint64_t))static String.Encoding.utf8.getter)(v22);
    uint64_t v24 = String.data(using:allowLossyConversion:)(v12, 0LL, v25, v24);
    unint64_t v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  }

  else
  {
    unint64_t v27 = 0xF000000000000000LL;
  }

  ((void (*)(uint64_t, unint64_t))URLRequest.httpBody.setter)(v24, v27);
  if ((v4 & 0x10000) != 0)
  {
    ((void (*)(void))URLRequest.allowsCellularAccess.setter)(0LL);
    ((void (*)(void))URLRequest.allowsConstrainedNetworkAccess.setter)(0LL);
    ((void (*)(void))URLRequest.allowsExpensiveNetworkAccess.setter)(0LL);
  }

  __int16 v47 = v4;
  if (qword_1001C7FA0 != -1) {
    swift_once(&qword_1001C7FA0, sub_1000BD448);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v28 = *(void *)(sub_10002C79C() - 8);
  uint64_t v29 = sub_10000DCF0( ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
        + 2LL * *(void *)(v28 + 72),
          *(unsigned __int8 *)(v28 + 80));
  *(_OWORD *)(v29 + 16) = xmmword_100164230;
  uint64_t v51 = type metadata accessor for NetworkObserver();
  v50[0] = v45;
  id v30 = (id)AMSLogKey(v45);
  if (v30)
  {
    sub_1000105E8((uint64_t)v30);
    sub_1000F7A00();
    sub_1000489DC();
    sub_100010564();
    sub_10000DEBC();
    sub_1000104C0(v50);
    uint64_t v31 = sub_100010530();
    sub_10000DDE4(v31);
    sub_1000ACBAC();
    sub_10000DC14();
    sub_10000DEA4();
    sub_1000ACBAC();
    sub_10000DC4C(93LL);
    sub_1000F79B0();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DEBC();
    sub_1000104C0(v50);
    uint64_t v32 = sub_100010530();
    uint64_t v33 = sub_10000DDE4(v32);
    sub_1000B8494(v33, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000F79B0();
  }

  sub_1000677AC();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(19LL, 1LL);
  sub_100048BA0();
  v34._countAndFlagsBits = 0xD000000000000013LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v34);
  uint64_t v51 = v13;
  unint64_t v35 = sub_10000D63C(v50);
  v46(v35, v6, v13);
  uint64_t v36 = LogMessage.StringInterpolation.appendInterpolation(safe:)(v50);
  sub_100010654(v36, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v37 = sub_1000F79B0();
  uint64_t v38 = static os_log_type_t.default.getter(v37);
  sub_1000BD1B0(v38, v29);
  swift_bridgeObjectRelease();
  if ((v47 & 0x100) != 0)
  {
    id v39 = sub_1000F4F54();
  }

  else if ((v47 & 1) != 0)
  {
    id v39 = sub_1000F4F40();
  }

  else
  {
    id v39 = sub_1000F4F2C();
  }

  unint64_t v40 = v39;
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v42 = [v40 downloadTaskWithRequest:isa];

  [v42 resume];
  uint64_t v43 = sub_1000F7A5C(v40);

  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v18, v49);
  return v43;
}

uint64_t sub_1000F61E8(uint64_t a1)
{
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - v8;
  id v10 = sub_1000F4F2C();
  char v11 = sub_1000F79E4();

  sub_100039F1C(a1, (uint64_t)v9);
  if ((v11 & 1) != 0)
  {
    sub_1000207E4((uint64_t)v9);
    sub_1000F7A50();
  }

  else
  {
    id v12 = sub_1000F4F40();
    char v13 = sub_1000F79E4();

    sub_1000207E4((uint64_t)v9);
    sub_1000F7A50();
    if ((v13 & 1) == 0)
    {
      id v15 = sub_1000F4F54();
      char v14 = sub_1000F79E4();

      goto LABEL_6;
    }
  }

  char v14 = 1;
LABEL_6:
  sub_1000207E4(v6);
  return v14 & 1;
}

void sub_1000F6310(uint64_t a1, void *a2, void *a3)
{
  id v5 = sub_1000F6494(a2, a3);
  sub_10000DE08((uint64_t)v5, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v6 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  [v5 setBag:v6];

  id v7 =  [(id)objc_opt_self(AMSMetricsLoadURLEvent) shouldCollectMetricsPromiseForContext:v5];
  uint64_t v8 = swift_allocObject(&unk_1001B03B0, 24LL, 7LL);
  *(void *)(v8 + 16) = v5;
  v11[4] = sub_1000F780C;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1000B1D04;
  v11[3] = &unk_1001B03C8;
  uint64_t v9 = _Block_copy(v11);
  id v10 = v5;
  swift_release();
  [v7 addSuccessBlock:v9];
  _Block_release(v9);
}

id sub_1000F6494(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithTask:a1 metrics:a2];

  return v5;
}

void sub_1000F64EC(void *a1, void *a2)
{
  if ([a1 BOOLValue])
  {
    id v3 = [(id)objc_opt_self(AMSMetricsLoadURLEvent) loadURLEventPromiseWithContext:a2];
    uint64_t v4 = swift_allocObject(&unk_1001B0400, 24LL, 7LL);
    *(void *)(v4 + 16) = a2;
    v7[4] = sub_1000F7838;
    v7[5] = v4;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256LL;
    void v7[2] = sub_100098828;
    v7[3] = &unk_1001B0418;
    id v5 = _Block_copy(v7);
    id v6 = a2;
    swift_release();
    [v3 addSuccessBlock:v5];
    _Block_release(v5);
  }

void sub_1000F65DC(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
  id v5 = [a2 bag];
  id v6 = [v4 internalInstanceUsingBag:v5];
  swift_unknownObjectRelease(v5);
  [v6 enqueueEvent:a1];
}

#error "1000F6D68: call analysis failed (funcsize=416)"
void __cdecl -[NetworkObserver URLSession:downloadTask:didFinishDownloadingToURL:]( _TtC14amsengagementd15NetworkObserver *self,  SEL a2,  id a3,  id a4,  id a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  _TtC14amsengagementd15NetworkObserver *v15;
  uint64_t v16;
  uint64_t v9 = type metadata accessor for URL(0LL);
  id v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(a5);
  char v13 = a3;
  char v14 = a4;
  id v15 = self;
  sub_1000F66E8(v13, v14, v12);

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1000F6E8C(uint64_t result, void *a2, uint64_t a3)
{
  if (a3)
  {
    id v5 = (void *)result;
    sub_10008BD98();
    swift_errorRetain(a3);
    sub_1000F752C(v5, a2);
    sub_10003DE94();
    sub_1000090CC();
    return swift_errorRelease(a3);
  }

  return result;
}

uint64_t sub_1000F6F7C()
{
  uint64_t v38 = v1;
  uint64_t v39 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10004895C();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  char v14 = (char *)&v36[-1] - v13;
  id v15 = [objc_allocWithZone(AMSMutablePromise) init];
  uint64_t v16 = (void *)swift_allocObject(&unk_1001B0360, 40LL, 7LL);
  v16[2] = v0;
  v16[3] = v4;
  v16[4] = v15;
  v36[4] = sub_1000F777C;
  uint64_t v37 = v16;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = (id)1107296256;
  v36[2] = sub_1000F7360;
  v36[3] = &unk_1001B0378;
  uint64_t v17 = _Block_copy(v36);
  uint64_t v18 = v37;
  id v19 = v4;
  id v20 = v15;
  swift_release(v18);
  [v19 getTasksWithCompletionHandler:v17];
  _Block_release(v17);
  static Date.now.getter(v21);
  ((void (*)(uint64_t, double))static Date.+ infix(_:_:))(v11, 1.0);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v22(v11, v7);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  v22((uint64_t)v14, v7);
  v36[0] = 0LL;
  id v24 = [v20 resultBeforeDate:isa error:v36];

  id v25 = v36[0];
  if (!v24)
  {
    unint64_t v27 = v25;
    uint64_t v28 = _convertNSErrorToError(_:)(v25);

    swift_willThrow(v29);
    swift_errorRelease(v28);
LABEL_5:
    swift_bridgeObjectRelease();
    id v26 = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }

  v36[0] = 0LL;
  ((void (*)(id, id *, void *, void *))static Set._conditionallyBridgeFromObjectiveC(_:result:))( v24,  v36,  &type metadata for String,  &protocol witness table for String);

  id v26 = v36[0];
  if (!v36[0]) {
    goto LABEL_5;
  }
LABEL_6:
  id v30 = (uint64_t *)(v6 + *(int *)(type metadata accessor for ContentInfo(0LL) + 44));
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  sub_10000DED8();
  sub_1000F4E34(v31, v32, (uint64_t)v26);
  LOBYTE(v31) = v33;
  sub_1000090CC();
  sub_100009070();

  return v31 & 1;
}

void sub_1000F71FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  void v17[2] = (uint64_t)&_swiftEmptySetSingleton;
  if (!((unint64_t)a3 >> 62))
  {
    uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a3);
    if (v9) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [a6 finishWithResult:isa];

    return;
  }

  if (a3 < 0) {
    uint64_t v15 = a3;
  }
  else {
    uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!v9) {
    goto LABEL_14;
  }
LABEL_3:
  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a3);
      }
      else {
        id v11 = *(id *)(a3 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      ++v10;
      uint64_t v13 = sub_1000F752C(a5, v11);
      sub_100148020(v17, v13, v14);

      swift_bridgeObjectRelease();
    }

    while (v9 != v10);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t sub_1000F7360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v9 = sub_10000DAA0(0LL, &qword_1001CD638, &OBJC_CLASS___NSURLSessionDataTask_ptr);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v9);
  uint64_t v11 = sub_10000DAA0(0LL, (unint64_t *)&unk_1001CD640, &OBJC_CLASS___NSURLSessionUploadTask_ptr);
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v11);
  uint64_t v13 = sub_10000DAA0(0LL, &qword_1001C9DF8, &OBJC_CLASS___NSURLSessionDownloadTask_ptr);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v13);
  swift_retain(v7);
  v8(v10, v12, v14);
  swift_release(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

NSString sub_1000F7444(void *a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CD630);
  uint64_t v3 = Promise.__allocating_init()(v2);
  aBlock[4] = sub_1000F7714;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F7360;
  aBlock[3] = &unk_1001B0328;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain(v3);
  swift_release();
  [a1 getTasksWithCompletionHandler:v4];
  _Block_release(v4);
  NSString v5 = sub_10013A81C();
  swift_release();
  return v5;
}

uint64_t sub_1000F752C(void *a1, void *a2)
{
  uint64_t v3 = sub_1000F76A8([a1 configuration]);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0LL;
  }
  uint64_t v9 = v5;
  v6._countAndFlagsBits = 45LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  [a2 taskIdentifier];
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v7);
  sub_100009020();
  return v9;
}

id sub_1000F75CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NetworkObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NetworkObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd15NetworkObserver);
}

void sub_1000F7664(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a3, "set_sourceApplicationBundleIdentifier:", v4);
}

uint64_t sub_1000F76A8(void *a1)
{
  id v2 = [a1 identifier];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_1000F7714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return Promise.resolve(_:)(&v4);
}

uint64_t sub_1000F7738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F7748(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000F7750()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000F777C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t sub_1000F7788()
{
  unint64_t result = qword_1001CD660;
  if (!qword_1001CD660)
  {
    unint64_t result = swift_getWitnessTable(&unk_100167E38, &type metadata for NetworkObserver.NetworkError);
    atomic_store(result, (unint64_t *)&qword_1001CD660);
  }

  return result;
}

uint64_t sub_1000F77C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C((uint64_t *)&unk_1001CD650);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000F780C(void *a1)
{
}

uint64_t sub_1000F7814()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000F7838(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for NetworkObserver.NetworkError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for NetworkObserver.NetworkError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000F7890(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000F78AC(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for NetworkObserver.NetworkError()
{
  return &type metadata for NetworkObserver.NetworkError;
}

uint64_t sub_1000F78F8()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000F790C()
{
  *(void *)(v2 - 88) = v1;
  *(void *)(v2 - 112) = v0;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 112);
}

void sub_1000F7920()
{
  *(void *)(v1 + 8 * (v0 >> 6) + 64) |= 1LL << v0;
}

uint64_t sub_1000F7948()
{
  return 0x4D6B726F7774656ELL;
}

id sub_1000F796C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 1);
}

  ;
}

  ;
}

uint64_t sub_1000F79A0()
{
  return _CocoaArrayWrapper.endIndex.getter(v0);
}

id sub_1000F79A8(uint64_t *a1, double a2)
{
  return sub_1000F4F6C(a1, 0, a2);
}

uint64_t sub_1000F79B0()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000F79BC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000F79D0(uint64_t a1)
{
  *(void *)(v2 - 152) = a1;
  *(void *)(v2 - 176) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 176);
}

uint64_t sub_1000F79E4()
{
  return sub_1000F6F7C();
}

uint64_t sub_1000F79EC()
{
  return sub_1000102E0(v1 - 144, v0);
}

uint64_t sub_1000F79F8()
{
  return type metadata accessor for URLRequest(0LL);
}

void sub_1000F7A00()
{
}

void sub_1000F7A08()
{
}

id sub_1000F7A14()
{
  return [v0 *(SEL *)(v1 + 1704)];
}

uint64_t sub_1000F7A20()
{
  return sub_1000F752C(v1, v0);
}

uint64_t sub_1000F7A2C()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

BOOL sub_1000F7A34(Swift::Bool a1)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(a1, v1);
}

unint64_t sub_1000F7A3C(uint64_t a1, uint64_t a2)
{
  return sub_100030CCC(a1, a2);
}

uint64_t sub_1000F7A44()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_1000F7A50()
{
  return sub_100039F1C(v1, v0);
}

uint64_t sub_1000F7A5C(void *a1)
{
  return sub_1000F752C(a1, v1);
}

uint64_t sub_1000F7A64()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000F7A70()
{
  return sub_1000102E0(v1 - 112, v0);
}

uint64_t sub_1000F7A7C()
{
  return static LogMessage.safe(_:)(v0 - 112);
}

NSString sub_1000F7A88(void *a1)
{
  return sub_1000F7444(a1);
}

void sub_1000F7A90()
{
}

id sub_1000F7A9C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for NotificationObserver()) init];
  qword_1001CD6F0 = (uint64_t)result;
  return result;
}

id sub_1000F7AC8()
{
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_10000DE7C();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  uint64_t v22 = OBJC_IVAR____TtC14amsengagementd20NotificationObserver_queue;
  sub_100049B94();
  uint64_t v14 = v0;
  static DispatchQoS.utility.getter();
  if (qword_1001C80A8 != -1) {
    swift_once(&qword_1001C80A8, sub_10010D4CC);
  }
  uint64_t v15 = (void *)qword_1001DBBB8;
  id v25 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_10006FF54( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  id v17 = v15;
  uint64_t v18 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  uint64_t v19 = sub_10006FF94((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v16);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v23);
  *(void *)&v14[v22] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002BLL,  0x8000000100175850LL,  v13,  v9,  v4,  v15);

  v24.receiver = v14;
  v24.super_class = (Class)type metadata accessor for NotificationObserver();
  id v20 = objc_msgSendSuper2(&v24, "init");
  sub_1000F7CF8();
  sub_1000F83E8();

  return v20;
}

void sub_1000F7CF8()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v1 addObserver:v0 selector:"timezoneChanged" name:NSSystemTimeZoneDidChangeNotification object:0];

  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  uint64_t v3 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterAddObserver( v2,  v0,  (CFNotificationCallback)sub_1000F8308,  v3,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);

  uint64_t v4 = swift_allocObject(&unk_1001B0580, 24LL, 7LL);
  swift_unknownObjectWeakInit(v4 + 16, v0);
  v6[4] = sub_1000F95EC;
  void v6[5] = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  v6[2] = sub_100151CE0;
  v6[3] = &unk_1001B0598;
  uint64_t v5 = _Block_copy(v6);
  swift_release();
  sub_1000F9634("com.apple.notifyd.matching");
  _Block_release(v5);
}

uint64_t sub_1000F7E58()
{
  uint64_t v0 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = type metadata accessor for LogMessage(0LL);
  uint64_t v5 = swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v4 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100164230;
  uint64_t v6 = type metadata accessor for NotificationObserver();
  uint64_t v29 = sub_10000D33C(&qword_1001CD728);
  v28[0] = v6;
  id v7 = (id)AMSLogKey(v29);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v12._countAndFlagsBits = 0LL;
    v12._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    uint64_t v13 = v29;
    uint64_t v14 = sub_10000D37C(v28, v29);
    uint64_t DynamicType = swift_getDynamicType(v14, v13, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v26[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v16._countAndFlagsBits = 5972026LL;
    v16._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v16);
    MetatypeMetadata = &type metadata for String;
    v26[0] = v9;
    v26[1] = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v17._countAndFlagsBits = 93LL;
    v17._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    LogMessage.init(stringInterpolation:)(v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v18._countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v29;
    id v20 = sub_10000D37C(v28, v29);
    uint64_t v21 = swift_getDynamicType(v20, v19, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v21);
    v26[0] = v21;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v22._countAndFlagsBits = 58LL;
    v22._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    LogMessage.init(stringInterpolation:)(v2);
  }

  sub_10000D3A0(v28);
  uint64_t v23 = LogMessage.init(stringLiteral:)(0x1000000000000010LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v23 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  sub_1000BD1B0(v24, v5);
  swift_bridgeObjectRelease();
  return sub_1000F80EC();
}

uint64_t sub_1000F80EC()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v16 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C8090 != -1) {
    swift_once(&qword_1001C8090, sub_1000F7A9C);
  }
  uint64_t v8 = *(void **)(qword_1001CD6F0 + OBJC_IVAR____TtC14amsengagementd20NotificationObserver_queue);
  uint64_t v9 = swift_allocObject(&unk_1001B0508, 24LL, 7LL);
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000F95A8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  aBlock[3] = &unk_1001B0520;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v8;
  static DispatchQoS.unspecified.getter(v11);
  Swift::String v17 = _swiftEmptyArrayStorage;
  uint64_t v12 = sub_10006FF54( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v13 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  uint64_t v14 = sub_10006FF94((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void sub_1000F8308(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a5;
  sub_1000F7E58();
}

void sub_1000F8390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_1000F847C();
  }

void sub_1000F83E8()
{
  uint64_t v1 = swift_unknownObjectWeakInit(v4, v0);
  swift_unknownObjectWeakDestroy(v1);
  aBlock[4] = nullsub_1;
  aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100151CE0;
  aBlock[3] = &unk_1001B0548;
  uint64_t v2 = _Block_copy(aBlock);
  sub_1000F9634("com.apple.distnoted.matching");
  _Block_release(v2);
}

void sub_1000F847C()
{
  if (!xpc_dictionary_get_string(v0, _xpc_event_key_name)) {
    return;
  }
  uint64_t v4 = String.init(cString:)();
  uint64_t v5 = v3;
  if (v4 == 0xD000000000000021LL && v3 == 0x8000000100175640LL
    || (uint64_t v6 = sub_1000F9658(), (sub_100025718(v6, v7, 0xD000000000000021LL, v8) & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_10000DD70();
    *(_OWORD *)(swift_allocObject(v9, (v11 & ~v10) + 2 * v1, v10 | 7) + 16) = xmmword_100164230;
    uint64_t v12 = type metadata accessor for NotificationObserver();
    id v13 = sub_1000F9628(v12);
    id v14 = (id)AMSLogKey(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

      sub_10000DF10();
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v16 = v63;
      Swift::String v17 = sub_10000D37C(v62, (uint64_t)v63);
      uint64_t v18 = sub_10000DC54((uint64_t)v17, (uint64_t)v16);
      swift_getMetatypeMetadata(v18);
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE2C();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_100070254();
      sub_100048E80();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v62);
    uint64_t v19 = sub_1000105B4(0xD000000000000030LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v19 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v20 = static os_log_type_t.default.getter(v19);
    sub_10000DE24(v20);
    sub_100009020();
    sub_1000F80EC();
    return;
  }

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(FAFamilyUpdateNotification);
  if (v4 == v21 && v5 == v22)
  {
    sub_100009020();
  }

  else
  {
    char v24 = sub_100025718(v4, v5, v21, v22);
    sub_10000DDF8();
    if ((v24 & 1) == 0)
    {
      if (v4 == 0xD00000000000004FLL && v5 == 0x8000000100175670LL
        || (uint64_t v25 = sub_1000F9658(), (sub_100025718(v25, v26, v27, v28) & 1) != 0))
      {
        swift_bridgeObjectRelease();
        sub_10000D33C(&qword_1001C9C70);
        uint64_t v29 = sub_10002C79C();
        id v30 = (__n128 *)sub_1000F9604(v29);
        uint64_t v31 = sub_1000F966C(v30, (__n128)xmmword_100164230);
        id v32 = sub_1000F9628(v31);
        id v33 = (id)AMSLogKey(v32);
        if (v33)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          sub_1000F964C();
          sub_10000DF10();
          sub_10000DC34();
          sub_10000DC08();
          Swift::String v34 = v63;
          unint64_t v35 = sub_10000D37C(v62, (uint64_t)v63);
          uint64_t v36 = sub_10000DC54((uint64_t)v35, (uint64_t)v34);
          swift_getMetatypeMetadata(v36);
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC14();
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC4C(93LL);
          sub_10000DC5C();
          sub_10000DE2C();
        }

        else
        {
          sub_10000DC24();
          sub_10000DC08();
          sub_100070254();
          sub_100048E80();
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC4C(58LL);
          sub_10000DC5C();
        }

        sub_10000D3A0(v62);
        uint64_t v47 = sub_1000105B4(0xD000000000000062LL);
        if (qword_1001C7F80 != -1) {
          uint64_t v47 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
        }
        uint64_t v48 = static os_log_type_t.default.getter(v47);
        sub_10000DE24(v48);
        sub_100009020();
        if (qword_1001C80E0 != -1) {
          swift_once(&qword_1001C80E0, sub_10012D598);
        }
        sub_10012DAD0();
      }

      else
      {
        uint64_t v49 = sub_10000D33C(&qword_1001C9C70);
        uint64_t v50 = sub_10002C79C();
        uint64_t v51 = swift_allocObject( v49,  ((*(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL))
              + 2LL * *(void *)(*(void *)(v50 - 8) + 72LL),
                *(unsigned __int8 *)(*(void *)(v50 - 8) + 80LL) | 7LL);
        *(_OWORD *)(v51 + 16) = xmmword_100164230;
        uint64_t v52 = type metadata accessor for NotificationObserver();
        id v53 = sub_1000F9628(v52);
        id v54 = (id)AMSLogKey(v53);
        if (v54)
        {
          id v55 = v54;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v54);

          sub_10000DF10();
          sub_10000DC34();
          sub_10000DC08();
          unint64_t v56 = v63;
          char v57 = sub_10000D37C(v62, (uint64_t)v63);
          uint64_t v58 = sub_10000DC54((uint64_t)v57, (uint64_t)v56);
          swift_getMetatypeMetadata(v58);
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC14();
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC4C(93LL);
          sub_10000DC5C();
          sub_10000DE2C();
        }

        else
        {
          sub_10000DC24();
          sub_10000DC08();
          sub_100070254();
          sub_100048E80();
          sub_10000DEA4();
          sub_100037DE0();
          sub_10000DC4C(58LL);
          sub_10000DC5C();
        }

        sub_10000D3A0(v62);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(30LL, 1LL);
        v59._countAndFlagsBits = 0xD00000000000001ELL;
        v59._object = (void *)0x80000001001756C0LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v59);
        uint64_t v63 = &type metadata for String;
        v62[0] = v4;
        v62[1] = v5;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
        sub_10000E888((uint64_t)v62);
        sub_10000DC08();
        uint64_t v60 = sub_10000DC5C();
        if (qword_1001C7F80 != -1) {
          uint64_t v60 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
        }
        uint64_t v61 = static os_log_type_t.default.getter(v60);
        sub_1000BD1B0(v61, v51);
        sub_10000DDF8();
      }

      return;
    }
  }

  sub_100009020();
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v37 = sub_10002C79C();
  uint64_t v38 = (__n128 *)sub_1000F9604(v37);
  uint64_t v39 = sub_1000F966C(v38, (__n128)xmmword_100164230);
  id v40 = sub_1000F9628(v39);
  id v41 = (id)AMSLogKey(v40);
  if (v41)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    sub_1000F964C();
    sub_10000DF10();
    sub_10000DC34();
    sub_10000DC08();
    id v42 = v63;
    uint64_t v43 = sub_10000D37C(v62, (uint64_t)v63);
    uint64_t v44 = sub_10000DC54((uint64_t)v43, (uint64_t)v42);
    swift_getMetatypeMetadata(v44);
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE2C();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_100070254();
    sub_100048E80();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v62);
  uint64_t v45 = sub_1000105B4(0xD000000000000032LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v45 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v46 = static os_log_type_t.default.getter(v45);
  sub_10000DE24(v46);
  sub_100009020();
  if (qword_1001C7F58 != -1) {
    swift_once(&qword_1001C7F58, sub_1000705DC);
  }
  sub_1000709A8();
}

uint64_t sub_1000F8BDC()
{
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_10000DD70();
  uint64_t v6 = swift_allocObject(v3, (v5 & ~v4) + 2 * v1, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100164230;
  uint64_t v21 = type metadata accessor for NotificationObserver();
  v20[0] = v0;
  id v7 = (id)AMSLogKey(v0);
  if (v7)
  {
    uint64_t v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;

    swift_bridgeObjectRetain(v10);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v11 = v21;
    uint64_t v12 = sub_10000D37C(v20, v21);
    uint64_t v13 = sub_10000DC54((uint64_t)v12, v11);
    swift_getMetatypeMetadata(v13);
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC14();
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DDF8();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v14 = v21;
    uint64_t v15 = sub_10000D37C(v20, v21);
    uint64_t v16 = sub_10000DC54((uint64_t)v15, v14);
    swift_getMetatypeMetadata(v16);
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v20);
  uint64_t v17 = LogMessage.init(stringLiteral:)(0x1000000000000010LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v17 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  sub_1000BD1B0(v18, v6);
  swift_bridgeObjectRelease();
  return sub_1000F80EC();
}

uint64_t sub_1000F8E10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v68 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for TimeZone(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for AppDatabase();
  uint64_t v12 = sub_100023140(1LL, 0);
  uint64_t v70 = a1;
  char v71 = v4;
  uint64_t v69 = v5;
  uint64_t v49 = v12;
  if (!v12)
  {
    uint64_t v72 = 0LL;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    char v13 = 1;
LABEL_3:
    uint64_t v14 = sub_10000E888((uint64_t)&v76);
    goto LABEL_4;
  }

  swift_retain(v12);
  sub_10002306C();
  swift_release();
  sub_10002AF6C(1, &v76);
  uint64_t v72 = v49;
  swift_release();
  if (!*((void *)&v77 + 1))
  {
    char v13 = 0;
    goto LABEL_3;
  }

  uint64_t v14 = swift_dynamicCast(&v73, &v76, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL);
  char v13 = 0;
  if ((_DWORD)v14)
  {
    uint64_t v15 = v73;
    int v16 = 1;
    goto LABEL_5;
  }

id sub_1000F9538()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NotificationObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NotificationObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20NotificationObserver);
}

uint64_t sub_1000F9598()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000F95A8()
{
  return sub_1000F8E10(*(void *)(v0 + 16));
}

uint64_t sub_1000F95B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000F95C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000F95C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000F95EC(uint64_t a1)
{
}

uint64_t sub_1000F9604(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

id sub_1000F9628(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 112) = v1;
  return v1;
}

void sub_1000F9634(const char *a1)
{
}

uint64_t sub_1000F9640()
{
  return type metadata accessor for LogMessage.StringInterpolation(0LL);
}

void sub_1000F964C()
{
}

uint64_t sub_1000F9658()
{
  return v0;
}

uint64_t sub_1000F966C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for NotificationObserver();
}

id sub_1000F9678()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  sub_100009020();
  id v3 = [v1 initWithBundleIdentifier:v2];

  return v3;
}

uint64_t sub_1000F96E4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v4 = sub_10000DE08(a1, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  v4,  &protocol witness table for String);
  sub_100048DB4();
  v3(v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000F9758()
{
  Swift::Int result = sub_100121998((uint64_t)&off_1001A75B0);
  qword_1001DBBA8 = result;
  return result;
}

void sub_1000F977C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v11);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100029328();
  sub_1000FDD5C();
  __chkstk_darwin(v15);
  sub_100029170();
  sub_1000FA0AC(a2, a3, (uint64_t)v14);
  if (sub_1000102D4((uint64_t)v14, 1LL, v3) == 1)
  {
    sub_1000FDB4C((uint64_t)v14, &qword_1001CB180);
  }

  else
  {
    sub_1000FDC88(v5, (uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    int v16 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    v55[0] = 0LL;
    id v17 = [v16 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:v55];
    id v18 = v55[0];
    if (v17)
    {
      uint64_t v50 = v6;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v21 = v20;

      uint64_t v22 = v7[17];
      uint64_t v23 = v7[18];
      sub_10000D37C(v7 + 14, v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 32))(v19, v21, v5, v22, v23);
      sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
      sub_1000FDCDC();
    }

    else
    {
      uint64_t v24 = v18;
      uint64_t v25 = _convertNSErrorToError(_:)(v18);

      swift_willThrow(v26);
      uint64_t v27 = (void *)sub_10000D33C(&qword_1001C9C70);
      uint64_t v28 = *(void *)(sub_10002C79C() - 8);
      uint64_t v29 = sub_10001059C( ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
            + 2LL * *(void *)(v28 + 72),
              *(unsigned __int8 *)(v28 + 80));
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v56 = type metadata accessor for NotificationSettingsEventManager();
      v55[0] = v7;
      uint64_t v30 = swift_retain(v7);
      id v31 = (id)AMSLogKey(v30);
      if (v31)
      {
        uint64_t v32 = sub_1000105E8((uint64_t)v31);
        uint64_t v48 = v33;
        uint64_t v49 = v32;

        sub_100020BB4();
        sub_100010564();
        sub_10000DEBC();
        uint64_t v34 = v56;
        uint64_t v35 = sub_10000D37C(v55, v56);
        sub_10000DC54((uint64_t)v35, v34);
        uint64_t v36 = sub_100010530();
        sub_1000A8F04(v36);
        uint64_t v50 = v29;
        sub_1000FDB4C((uint64_t)v54, &qword_1001CAAD0);
        sub_10000DC14();
        v54[3] = &type metadata for String;
        v54[0] = v49;
        v54[1] = v48;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v54);
        sub_1000FDB4C((uint64_t)v54, &qword_1001CAAD0);
        sub_10000DC4C(93LL);
        sub_1000ACC0C();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10001A1BC();
        sub_10000DEBC();
        uint64_t v37 = v56;
        uint64_t v38 = sub_10000D37C(v55, v56);
        sub_10000DC54((uint64_t)v38, v37);
        uint64_t v39 = sub_100010530();
        sub_1000A8F04(v39);
        sub_1000FDB4C((uint64_t)v54, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_1000ACC0C();
      }

      sub_10000D3A0(v55);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(38LL, 2LL);
      sub_100048BA0();
      sub_1000FDCF4(36LL, v40);
      uint64_t v56 = v3;
      uint64_t v41 = sub_10000D63C(v55);
      sub_1000FDC88((uint64_t)v41, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_1000FDD48();
      sub_1000FDCE8();
      swift_getErrorValue(v25, v53);
      uint64_t v42 = v51;
      uint64_t v43 = v52;
      uint64_t v56 = v52;
      uint64_t v44 = sub_10000D63C(v55);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16LL))(v44, v42, v43);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_1000FDD48();
      sub_10000DC08();
      uint64_t v45 = sub_1000ACC0C();
      if (qword_1001C7F80 != -1) {
        uint64_t v45 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
      }
      uint64_t v46 = static os_log_type_t.debug.getter(v45);
      sub_10006B93C(v46);
      sub_1000090CC();
      swift_errorRelease(v25);
      sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    }
  }

  sub_10000DD84();
}

uint64_t sub_1000F9BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100029328();
  sub_1000FDD5C();
  __chkstk_darwin(v13);
  sub_100029170();
  sub_1000FA0AC(a1, a2, (uint64_t)v12);
  if (sub_1000102D4((uint64_t)v12, 1LL, v2) == 1)
  {
    uint64_t v14 = &qword_1001CB180;
    uint64_t v15 = v12;
LABEL_3:
    sub_1000FDB4C((uint64_t)v15, v14);
    return 0LL;
  }

  sub_1000FDC88(v4, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  uint64_t v16 = v6[18];
  sub_10000D37C(v6 + 14, v6[17]);
  uint64_t countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v16 + 8))(countAndFlagsBits);
  unint64_t v20 = v19;
  uint64_t v21 = swift_bridgeObjectRelease();
  if (v20 >> 60 == 15)
  {
    sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    return 0LL;
  }

  uint64_t v28 = v5;
  sub_10000DE08(v21, &qword_1001CD998, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v22 = sub_10000D33C((uint64_t *)&unk_1001CD9A0);
  uint64_t v23 = sub_10000DDDC(v22, 56LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v24 = type metadata accessor for DisplayCriteria();
  *(void *)(v23 + 32) = v24;
  uint64_t v25 = sub_10000DE08(v24, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  *(void *)(v23 + 40) = v25;
  *(void *)(v23 + 48) = sub_10000DE08(v25, &qword_1001CCB30, &OBJC_CLASS___NSDictionary_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v30, v23, v18, v20);
  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  swift_bridgeObjectRelease();
  sub_10001BD70(v18, v20);
  if (!v30[3])
  {
    uint64_t v14 = &qword_1001CAAD0;
    uint64_t v15 = v30;
    goto LABEL_3;
  }

  else {
    return 0LL;
  }
}

void sub_1000FA0AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v40 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  sub_1000292E4();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = sub_100029328();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v37 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v31 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v31 - v21;
  sub_10014F588();
  if (sub_1000102D4((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_1000FDB4C((uint64_t)v13, &qword_1001CB180);
    uint64_t v23 = 1LL;
  }

  else
  {
    uint64_t v35 = v15;
    uint64_t v36 = a3;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v34(v22, v13, v14);
    uint64_t v24 = v5[8];
    uint64_t v41 = v5[7];
    uint64_t v42 = v24;
    uint64_t v33 = *(void (**)(uint64_t, void, uint64_t))(v7 + 104);
    v33(v4, enum case for URL.DirectoryHint.isDirectory(_:), v40);
    unint64_t v25 = sub_10004828C();
    swift_bridgeObjectRetain(v24);
    unint64_t v32 = v25;
    URL.appending<A>(path:directoryHint:)(&v41, v4, &type metadata for String, v25);
    sub_1000FDD34();
    swift_bridgeObjectRelease();
    uint64_t v26 = v5 + 14;
    uint64_t v27 = v5[17];
    uint64_t v28 = v5[18];
    sub_10000D37C(v26, v27);
    sub_100070FB0((uint64_t)v20, 1, 0LL, v27, v28, (uint64_t)v11);
    if (sub_1000102D4((uint64_t)v11, 1LL, v14) == 1)
    {
      sub_1000FDC10((uint64_t)v20);
      sub_1000FDC10((uint64_t)v22);
      sub_1000FDB4C((uint64_t)v11, &qword_1001CB180);
      uint64_t v23 = 1LL;
      a3 = v36;
    }

    else
    {
      uint64_t v29 = (uint64_t)v37;
      v34(v37, v11, v14);
      uint64_t v41 = v38;
      uint64_t v42 = v39;
      v33(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v40);
      uint64_t v30 = v36;
      URL.appending<A>(path:directoryHint:)(&v41, v4, &type metadata for String, v32);
      a3 = v30;
      sub_1000FDD34();
      sub_1000FDC10(v29);
      sub_1000FDC10((uint64_t)v20);
      sub_1000FDC10((uint64_t)v22);
      uint64_t v23 = 0LL;
    }
  }

  sub_10000D5C0(a3, v23, 1LL, v14);
  sub_10000DD84();
}

uint64_t sub_1000FA3AC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 1360) = a2;
  *(void *)(v2 + 1352) = a1;
  return sub_1000C0118((uint64_t)sub_1000FA3C0);
}

uint64_t sub_1000FA3C0()
{
  uint64_t v1 = v0[170];
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___AMSRestrictions);
  NSString v3 = String._bridgeToObjectiveC()();
  v0[171] = [v2 explicitContentSettingForBundleID:v3];

  sub_10000DE08(v4, &qword_1001CD950, &OBJC_CLASS___UNUserNotificationCenter_ptr);
  swift_bridgeObjectRetain(v1);
  id v5 = sub_1000F9678();
  v0[172] = v5;
  uint64_t v6 = sub_1000FDBFC();
  v0[173] = v6;
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v7 = sub_10000DAA0(255LL, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  ((void (*)(void *, void, uint64_t, void *, uint64_t, void *))swift_asyncLet_begin)( v0 + 82,  0LL,  v7,  &unk_1001CD960,  v6,  v0 + 168);
  uint64_t v8 = sub_1000FDBFC();
  v0[174] = v8;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  uint64_t v9 = sub_10000D820((uint64_t *)&unk_1001CD900);
  ((void (*)(void *, void, uint64_t, void *, uint64_t, void *))swift_asyncLet_begin)( v0 + 2,  0LL,  v9,  &unk_1001CD970,  v8,  v0 + 167);
  return swift_asyncLet_get(v0 + 82, v0 + 168, sub_1000FA520, v0 + 162);
}

uint64_t sub_1000FA520()
{
  uint64_t v1 = *(void **)(v0 + 1344);
  *(void *)(v0 + 1400) = v1;
  id v2 = v1;
  return swift_asyncLet_get(v0 + 16, v0 + 1336, sub_1000FA578, v0 + 1296);
}

uint64_t sub_1000FA578()
{
  return sub_1000C0118((uint64_t)sub_1000FA584);
}

uint64_t sub_1000FA584()
{
  uint64_t v1 = v0[175];
  uint64_t v2 = v0[171];
  uint64_t v3 = v0[167];
  objc_allocWithZone((Class)type metadata accessor for DisplayCriteria());
  sub_100020BB4();
  v0[176] = sub_1000FC100(v2, v1, v3);
  return swift_asyncLet_finish(v0 + 2);
}

uint64_t sub_1000FA614()
{
  return sub_1000C0118((uint64_t)sub_1000FA620);
}

uint64_t sub_1000FA620()
{
  uint64_t v1 = sub_1000FDD70();
  return swift_asyncLet_finish(v1);
}

uint64_t sub_1000FA670()
{
  return sub_1000C0118((uint64_t)sub_1000FA67C);
}

uint64_t sub_1000FA67C()
{
  sub_1000FDC54();
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 1408));
}

uint64_t sub_1000FA6B8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000FA6D0, 0LL, 0LL);
}

uint64_t sub_1000FA6D0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_1000FDBFC();
  v0[4] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  sub_10000DE08((uint64_t)v3, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  *uint64_t v3 = v0;
  v3[1] = sub_1000FDB80;
  sub_1000FDC5C();
  return sub_1000FDC04();
}

void sub_1000FA75C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000D33C((uint64_t *)&unk_1001CD980);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1001B0720, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_1000FDB08;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F96E0;
  aBlock[3] = &unk_1001B0738;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 getNotificationSettingsWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_1000FA88C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000FA8A4, 0LL, 0LL);
}

uint64_t sub_1000FA8A4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = sub_1000FDBFC();
  v0[4] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  sub_10000D33C((uint64_t *)&unk_1001CD900);
  *uint64_t v3 = v0;
  v3[1] = sub_1000FA928;
  sub_1000FDC5C();
  return sub_1000FDC04();
}

uint64_t sub_1000FA928()
{
  return sub_1000105A8(v0[1]);
}

void sub_1000FA964(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CD978);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1001B06D0, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v9 + v8,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_1000FDA84;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000F96E4;
  aBlock[3] = &unk_1001B06E8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 getNotificationSettingsForTopicsWithCompletionHandler:v10];
  _Block_release(v10);
}

uint64_t sub_1000FAA94(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v1 = sub_10000D33C(&qword_1001CD978);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t sub_1000FAAD8()
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  *(void *)(v1 + 24) = *v0;
  return sub_1000C0118((uint64_t)sub_1000FAAF0);
}

uint64_t sub_1000FAAF0()
{
  uint64_t v1 = sub_1000FDBFC();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withDiscardingTaskGroup<A>(returning:isolation:body:)[1]);
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1000FAB70;
  return withDiscardingTaskGroup<A>(returning:isolation:body:)();
}

uint64_t sub_1000FAB70()
{
  return sub_10000DD48();
}

uint64_t sub_1000FABB0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FABB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[9] = a2;
  v3[10] = a3;
  unint64_t v4 = (*(void *)(*(void *)(sub_10000D33C(&qword_1001C8BD0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v4);
  v3[12] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000FAC24, 0LL, 0LL);
}

uint64_t sub_1000FAC24()
{
  if (qword_1001C8098 == -1) {
    goto LABEL_2;
  }
LABEL_33:
  swift_once(&qword_1001C8098, sub_1000F9758);
LABEL_2:
  uint64_t v35 = qword_1001DBBA8 + 56;
  uint64_t v1 = -1LL;
  uint64_t v2 = -1LL << *(_BYTE *)(qword_1001DBBA8 + 32);
  if (-v2 < 64) {
    uint64_t v1 = ~(-1LL << -(char)v2);
  }
  unint64_t v3 = v1 & *(void *)(qword_1001DBBA8 + 56);
  int64_t v36 = (unint64_t)(63 - v2) >> 6;
  uint64_t v37 = qword_1001DBBA8;
  swift_bridgeObjectRetain(qword_1001DBBA8);
  int64_t v4 = 0LL;
  if (v3)
  {
LABEL_5:
    unint64_t v5 = __clz(__rbit64(v3));
    v3 &= v3 - 1;
    int64_t v38 = v4;
    unint64_t v6 = v5 | (v4 << 6);
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }

    if (v7 >= v36) {
      goto LABEL_30;
    }
    unint64_t v8 = *(void *)(v35 + 8 * v7);
    int64_t v9 = v4 + 1;
    if (!v8)
    {
      int64_t v9 = v4 + 2;
      if (v4 + 2 >= v36) {
        goto LABEL_30;
      }
      unint64_t v8 = *(void *)(v35 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v4 + 3;
        if (v4 + 3 >= v36) {
          goto LABEL_30;
        }
        unint64_t v8 = *(void *)(v35 + 8 * v9);
        if (!v8) {
          break;
        }
      }
    }

uint64_t sub_1000FAF88()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CD774);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FDB88;
  return sub_1000FAFEC();
}

uint64_t sub_1000FAFEC()
{
  v3[86] = v1;
  v3[85] = v4;
  v3[84] = v5;
  uint64_t v6 = sub_10000DE00();
  v3[87] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v7 = (void *)swift_task_alloc(dword_1001CD764);
  v3[88] = v7;
  *int64_t v7 = v3;
  v7[1] = sub_1000FB06C;
  return sub_1000FA3AC(v2, v0);
}

uint64_t sub_1000FB06C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 704LL);
  *(void *)(*(void *)v1 + 712LL) = a1;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1000FB0BC()
{
  uint64_t v2 = (void *)sub_1000F9BE8(*(void *)(v0 + 672), *(void *)(v0 + 680));
  if (v2)
  {
    unint64_t v3 = v2;
    if ([v2 isEqual:*(void *)(v0 + 712)])
    {
      uint64_t v4 = (void *)(v0 + 560);
      uint64_t v5 = v0 + 624;
      uint64_t v6 = *(void *)(v0 + 688);
      uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
      sub_10002C79C();
      sub_10001A5F8();
      *(_OWORD *)(swift_allocObject(v7, (v9 & ~v8) + 2 * v10, v8 | 7) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v11 = type metadata accessor for NotificationSettingsEventManager();
      *(void *)(v0 + 584) = v11;
      *(void *)(v0 + 560) = v6;
      uint64_t v12 = sub_100048DB4();
      id v13 = (id)AMSLogKey(v12);
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v16 = v15;

        sub_100048A30();
        sub_100010564();
        sub_10000DC08();
        uint64_t v17 = sub_10000D37C((void *)(v0 + 560), v11);
        uint64_t v18 = sub_10000DC54((uint64_t)v17, v11);
        *(void *)(v0 + 168) = swift_getMetatypeMetadata(v18);
        *(void *)(v0 + 144) = v18;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 144);
        sub_1000FDB4C(v0 + 144, &qword_1001CAAD0);
        sub_10000DC14();
        *(void *)(v0 + 392) = &type metadata for String;
        *(void *)(v0 + 368) = v70;
        *(void *)(v0 + 376) = v16;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 368);
        uint64_t v4 = (void *)(v0 + 560);
        sub_1000FDB4C(v0 + 368, &qword_1001CAAD0);
        sub_10000DC4C(93LL);
        sub_10000DC5C();
        uint64_t v5 = v0 + 624;
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10001A1BC();
        sub_10000DC08();
        Swift::String v63 = sub_10000D37C((void *)(v0 + 560), v11);
        sub_10000DC54((uint64_t)v63, v11);
        *(void *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = sub_10000DDAC();
        *(void *)(v0 + 592) = v1;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 592);
        sub_1000FDB4C(v0 + 592, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_10000DC5C();
      }

      uint64_t v64 = *(void *)(v0 + 680);
      uint64_t v65 = *(void *)(v0 + 672);
      sub_10000D3A0(v4);
      sub_10001A21C(19LL);
      sub_100048BA0();
      sub_1000FDD00(19LL, v66);
      *(void *)(v0 + 648) = &type metadata for String;
      *(void *)(v0 + 624) = v65;
      *(void *)(v0 + 632) = v64;
      swift_bridgeObjectRetain(v64);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v5);
      sub_1000FDB4C(v5, &qword_1001CAAD0);
      sub_10000DC08();
      uint64_t v67 = sub_10000DC5C();
      if (qword_1001C7F80 != -1) {
        uint64_t v67 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
      }
      uint64_t v68 = *(void **)(v0 + 712);
      uint64_t v69 = static os_log_type_t.default.getter(v67);
      sub_10006B93C(v69);

      sub_1000090CC();
      sub_1000FDD54();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v19 = *(void *)(v0 + 688);
  uint64_t v20 = *(void *)(v0 + 680);
  uint64_t v21 = *(void *)(v0 + 672);
  uint64_t v22 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t v23 = sub_10000DDDC(v22, 368LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167F00;
  *(void *)(v23 + 32) = 7368801LL;
  *(void *)(v23 + 40) = 0xE300000000000000LL;
  *(void *)(v23 + 48) = v21;
  *(void *)(v23 + 56) = v20;
  *(void *)(v23 + 72) = &type metadata for String;
  *(void *)(v23 + 80) = 0x4379616C70736964LL;
  *(void *)(v23 + 88) = 0xEF61697265746972LL;
  swift_bridgeObjectRetain(v20);
  uint64_t v24 = sub_1000FC7A8();
  uint64_t v25 = sub_10000D33C(&qword_1001C8F18);
  *(void *)(v23 + 96) = v24;
  *(void *)(v23 + 120) = v25;
  *(void *)(v23 + 128) = 0x707954746E657665LL;
  *(void *)(v23 + 136) = 0xE900000000000065LL;
  *(void *)(v23 + 144) = 0x6B63696C63LL;
  *(void *)(v23 + 152) = 0xE500000000000000LL;
  *(void *)(v23 + 168) = &type metadata for String;
  strcpy((char *)(v23 + 176), "eventVersion");
  *(_BYTE *)(v23 + 189) = 0;
  *(_WORD *)(v23 + 190) = -5120;
  *(void *)(v23 + 192) = 5LL;
  *(void *)(v23 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
  *(void *)(v23 + 224) = 0x746E6F4365676170LL;
  *(void *)(v23 + 232) = 0xEB00000000747865LL;
  *(void *)(v23 + 240) = 0xD000000000000018LL;
  *(void *)(v23 + 248) = 0x80000001001759F0LL;
  *(void *)(v23 + 264) = &type metadata for String;
  *(void *)(v23 + 272) = 0x6570795465676170LL;
  *(void *)(v23 + 280) = 0xE800000000000000LL;
  *(void *)(v23 + 288) = 0x73676E6974746553LL;
  *(void *)(v23 + 296) = 0xE800000000000000LL;
  *(void *)(v23 + 312) = &type metadata for String;
  *(void *)(v23 + 320) = 0x6369706F74LL;
  *(void *)(v23 + 360) = &type metadata for String;
  *(void *)(v23 + 328) = 0xE500000000000000LL;
  *(void *)(v23 + 336) = 0xD000000000000014LL;
  sub_100048B94();
  *(void *)(v23 + 344) = v26;
  *(void *)(v0 + 664) = Dictionary.init(dictionaryLiteral:)( v23,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v27 = sub_10000D37C((void *)(v19 + 16), *(void *)(v19 + 40));
  uint64_t v28 = sub_1000FDD70();
  uint64_t v30 = (void *)v29(v28);
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v27 = objc_msgSend(v30, "ams_DSID");

    if (v27)
    {
      id v32 = sub_10008FAC0((uint64_t)v30, "stringValue");

      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v35 = v34;

      v73[3] = &type metadata for String;
      v73[0] = v33;
      v73[1] = v35;
      uint64_t v27 = (void *)(v0 + 664);
      sub_100030118((uint64_t)v73, 1684632420LL, 0xE400000000000000LL);
    }
  }

  uint64_t v72 = v0 + 112;
  id v36 = (id)AMSLogKey(v30);
  if (v36)
  {
    uint64_t v37 = sub_1000105E8((uint64_t)v36);
    uint64_t v39 = v38;
  }

  else
  {
    uint64_t v37 = 0LL;
    uint64_t v39 = 0LL;
  }

  *(void *)(v0 + 728) = v39;
  *(void *)(v0 + 720) = v37;
  uint64_t v40 = *(void *)(v0 + 688);
  *(void *)(v0 + 736) = sub_10000D33C(&qword_1001C9C70);
  uint64_t v41 = *(void *)(sub_10002C79C() - 8);
  uint64_t v42 = *(void *)(v41 + 72);
  *(void *)(v0 + 744) = v42;
  LODWORD(v41) = *(_DWORD *)(v41 + 80);
  *(_DWORD *)(v0 + 784) = v41;
  uint64_t v43 = sub_10001059C( ((v41 + 32LL) & ~(unint64_t)v41) + 2 * v42,  v41);
  *(_OWORD *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v71 = v43;
  uint64_t v44 = type metadata accessor for NotificationSettingsEventManager();
  *(void *)(v0 + 752) = v44;
  *(void *)(v0 + 72) = v44;
  *(void *)(v0 + 48) = v40;
  if (v39)
  {
    uint64_t v45 = v0 + 528;
    swift_retain(v40);
    sub_100048A30();
    sub_100010564();
    sub_10000DC08();
    uint64_t v46 = sub_10000D37C((void *)(v0 + 48), v44);
    uint64_t v47 = sub_10000DC54((uint64_t)v46, v44);
    *(void *)(v0 + 520) = swift_getMetatypeMetadata(v47);
    *(void *)(v0 + 496) = v47;
    uint64_t v48 = sub_1000FDC4C();
    sub_1000FDD7C(v48, &qword_1001CAAD0);
    sub_10000DC14();
    uint64_t v49 = v37;
    uint64_t v50 = (void *)(v0 + 48);
    *(void *)(v0 + 552) = &type metadata for String;
    *(void *)(v0 + 528) = v49;
    uint64_t v51 = 93LL;
    *(void *)(v0 + 536) = v39;
  }

  else
  {
    uint64_t v45 = v0 + 80;
    swift_retain(v40);
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v52 = sub_10000D37C((void *)(v0 + 48), v44);
    uint64_t v53 = sub_10000DC54((uint64_t)v52, v44);
    *(void *)(v0 + 104) = swift_getMetatypeMetadata(v53);
    *(void *)(v0 + 80) = v53;
    uint64_t v51 = 58LL;
    uint64_t v50 = (void *)(v0 + 48);
  }

  LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
  sub_1000FDBC0(v45);
  uint64_t v54 = *(void *)(v0 + 680);
  uint64_t v55 = *(void *)(v0 + 672);
  sub_10000DC4C(v51);
  sub_10000DC5C();
  sub_10000D3A0(v50);
  sub_10001A21C(21LL);
  sub_100048BA0();
  LogMessage.StringInterpolation.appendLiteral(_:)(v56);
  *(void *)(v0 + 136) = &type metadata for String;
  *(void *)(v0 + 112) = v55;
  *(void *)(v0 + 120) = v54;
  swift_bridgeObjectRetain(v54);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v72);
  sub_1000FDBC0(v72);
  sub_10000DC08();
  uint64_t v57 = sub_10000DC5C();
  if (qword_1001C7F80 != -1) {
    uint64_t v57 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v58 = *(void *)(v0 + 688);
  uint64_t v59 = static os_log_type_t.default.getter(v57);
  sub_1000BD1B0(v59, v71);
  swift_bridgeObjectRelease();
  uint64_t v60 = sub_1000FDBFC();
  *(void *)(v0 + 760) = v60;
  *(void *)(v60 + swift_unknownObjectWeakDestroy(v0 + 16) = v58;
  *(void *)(v60 + 24) = v0 + 664;
  uint64_t v61 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 768) = v61;
  sub_10000DE08((uint64_t)v61, (unint64_t *)&qword_1001CA998, &OBJC_CLASS___AMSEngagementEnqueueResult_ptr);
  *uint64_t v61 = v0;
  v61[1] = sub_1000FB8FC;
  sub_100096178();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1000FB8FC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 768);
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc(v3);
  if (!v0)
  {

    sub_1000FDC54();
  }

  sub_100096178();
  return swift_task_switch(v4, v5, v6);
}

uint64_t sub_1000FB96C()
{
  uint64_t v2 = *(void *)(v0 + 752);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 784);
  uint64_t v4 = *(void *)(v0 + 736);
  uint64_t v5 = *(void **)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 688);
  uint64_t v7 = ((v3 + 32) & ~v3) + 2LL * *(void *)(v0 + 744);
  uint64_t v8 = v3 | 7;
  sub_1000F977C(*(void *)(v0 + 712), *(void *)(v0 + 672), *(void *)(v0 + 680));
  uint64_t v9 = swift_allocObject(v4, v7, v8);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v0 + 360) = v2;
  *(void *)(v0 + 336) = v6;
  if (v5)
  {
    uint64_t v10 = v0 + 464;
    uint64_t v5 = (void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 728);
    uint64_t v1 = *(void *)(v0 + 720);
    sub_1000FDBF0();
    sub_10000DD9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v12 = *(void *)(v0 + 360);
    id v13 = sub_10000D37C((void *)(v0 + 336), v12);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    *(void *)(v0 + 456) = swift_getMetatypeMetadata(v14);
    *(void *)(v0 + 432) = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 432);
    sub_1000FDCA8(v0 + 432);
    sub_10000DC14();
    *(void *)(v0 + 488) = &type metadata for String;
    *(void *)(v0 + 464) = v1;
    *(void *)(v0 + 472) = v11;
    sub_1000FDC4C();
    sub_1000FDCA8(v0 + 464);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000FDBF0();
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v16 = sub_10000D37C((void *)(v0 + 336), v15);
    sub_10000DC54((uint64_t)v16, v15);
    uint64_t v17 = sub_10000DDAC();
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
    uint64_t v10 = v0 + 16;
    *(void *)(v0 + 40) = v17;
    uint64_t v18 = sub_1000FDC4C();
    sub_1000FDD7C(v18, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000FDBD4();
  sub_10001A21C(32LL);
  sub_100048BA0();
  sub_1000FDD00(32LL, v19);
  *(void *)(v0 + 424) = &type metadata for String;
  *(void *)(v0 + 400) = v1;
  *(void *)(v0 + 408) = v10;
  sub_100020BB4();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 400);
  sub_1000FDB4C(v0 + 400, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v20 = sub_10000DC5C();
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  sub_1000BD1B0(v21, v9);
  sub_100009020();

  swift_bridgeObjectRelease();
  sub_1000FDD54();
  return sub_1000960B8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000FBB80()
{
  uint64_t v2 = *(void *)(v0 + 752);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 784);
  uint64_t v4 = *(void *)(v0 + 736);
  uint64_t v5 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 688);
  uint64_t v7 = (char *)((v3 + 32) & ~v3);
  uint64_t v8 = &v7[2 * *(void *)(v0 + 744)];
  uint64_t v9 = v3 | 7;
  swift_task_dealloc(*(void *)(v0 + 760));
  uint64_t v10 = swift_allocObject(v4, v8, v9);
  *(void *)(v0 + 176) = v6;
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v0 + 200) = v2;
  if (v5)
  {
    uint64_t v11 = v0 + 304;
    uint64_t v7 = (char *)(v0 + 272);
    uint64_t v12 = *(void *)(v0 + 728);
    uint64_t v1 = *(void *)(v0 + 720);
    sub_1000FDBF0();
    sub_10000DD9C();
    sub_100010564();
    sub_10000DC08();
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v14 = sub_10000D37C((void *)(v0 + 176), v13);
    uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
    *(void *)(v0 + 296) = swift_getMetatypeMetadata(v15);
    *(void *)(v0 + 272) = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 272);
    sub_1000FDCA8(v0 + 272);
    sub_10000DC14();
    *(void *)(v0 + 328) = &type metadata for String;
    *(void *)(v0 + 304) = v1;
    *(void *)(v0 + 312) = v12;
    sub_1000FDC4C();
    sub_1000FDCA8(v0 + 304);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000FDBF0();
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v17 = sub_10000D37C((void *)(v0 + 176), v16);
    sub_10000DC54((uint64_t)v17, v16);
    uint64_t v18 = sub_10000DDAC();
    *(void *)(v0 + 208) = v16;
    uint64_t v11 = v0 + 208;
    *(void *)(v0 + 232) = v18;
    uint64_t v19 = sub_1000FDC4C();
    sub_1000FDD7C(v19, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v20 = *(void *)(v0 + 776);
  sub_1000FDBD4();
  sub_10001A21C(28LL);
  sub_100048BA0();
  sub_1000FDD00(28LL, v21);
  *(void *)(v0 + 264) = &type metadata for String;
  *(void *)(v0 + 240) = v1;
  *(void *)(v0 + 248) = v11;
  sub_100020BB4();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 240);
  sub_1000FDB4C(v0 + 240, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v22 = sub_10000DC5C();
  uint64_t v23 = static os_log_type_t.error.getter(v22);
  sub_1000BD1B0(v23, v10);

  sub_100009020();
  swift_errorRelease(v20);
  swift_bridgeObjectRelease();
  sub_1000FDD54();
  return sub_1000960B8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000FBD9C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = sub_10000D33C(&qword_1001CD910);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2 + 9;
  uint64_t v12 = a2[12];
  uint64_t v11 = a2[13];
  sub_10000D37C(v10, v12);
  swift_bridgeObjectRetain(*a3);
  sub_100054044(v13);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 8))(v15, v12, v11);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v17(v9, a1, v6);
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = v19 + v8;
  uint64_t v21 = v18 | 7;
  uint64_t v22 = swift_allocObject(&unk_1001B05E0, v20, v18 | 7);
  uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v23(v22 + v19, v9, v6);
  uint64_t v31 = sub_1000FD7C8;
  uint64_t v32 = v22;
  aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256LL;
  uint64_t v29 = (void (*)(uint64_t, void *))sub_1000F96E0;
  uint64_t v30 = &unk_1001B05F8;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_release();
  [v16 addSuccessBlock:v24];
  _Block_release(v24);
  v17(v9, a1, v6);
  uint64_t v25 = swift_allocObject(&unk_1001B0630, v20, v21);
  v23(v25 + v19, v9, v6);
  uint64_t v31 = sub_1000FD7F8;
  uint64_t v32 = v25;
  aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256LL;
  uint64_t v29 = sub_1000B1D04;
  uint64_t v30 = &unk_1001B0648;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_release();
  [v16 addErrorBlock:v26];
  _Block_release(v26);
}

uint64_t sub_1000FBFD8(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a1;
  id v4 = a1;
  uint64_t v5 = sub_10000D33C(a3);
  return CheckedContinuation.resume(returning:)(&v7, v5);
}

void sub_1000FC01C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  sub_100048DB4();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000FC068(uint64_t a1)
{
  uint64_t v3 = a1;
  swift_errorRetain(a1);
  uint64_t v1 = sub_10000D33C(&qword_1001CD910);
  return CheckedContinuation.resume(throwing:)(&v3, v1);
}

void *sub_1000FC0AC()
{
  return v0;
}

uint64_t sub_1000FC0E0()
{
  return swift_deallocClassInstance(v0, 152LL, 7LL);
}

id sub_1000FC100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_explicitContentSetting] = a1;
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettings] = a2;
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettingsForTopics] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for DisplayCriteria();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_1000FC154()
{
  return byte_1001CD730;
}

uint64_t sub_1000FC178(uint64_t result)
{
  byte_1001CD730 = result;
  return result;
}

void sub_1000FC19C(void *a1)
{
  NSString v2 = sub_10001D3D0();
  sub_1000FDCCC((uint64_t)v2, "encodeInteger:forKey:");

  NSString v3 = sub_1000FDC2C();
  sub_1000FDCCC((uint64_t)v3, "encodeObject:forKey:");

  sub_10000DE08(v4, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v6 = sub_10001D3D0();
  [a1 encodeObject:isa forKey:v6];
}

id sub_1000FC2FC(void *a1)
{
  NSString v3 = v1;
  NSString v4 = sub_10001D3D0();
  id v5 = sub_1000FDC40((uint64_t)v4, "decodeIntegerForKey:");

  NSString v6 = sub_1000FDC2C();
  id v7 = sub_1000FDC40((uint64_t)v6, "decodeObjectForKey:");

  if (v7)
  {
    sub_1000FDD28();
    uint64_t v8 = swift_unknownObjectRelease(v7);
  }

  else
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
  }

  sub_1000FDD1C(v8, v9, &qword_1001CAAD0, v10, v11, v12, v13);
  if (!v45)
  {

    sub_1000FDB4C((uint64_t)v44, &qword_1001CAAD0);
LABEL_13:
    uint64_t v38 = type metadata accessor for DisplayCriteria();
    swift_deallocPartialClassInstance(v3, v38, 32LL, 7LL);
    return 0LL;
  }

  uint64_t v15 = sub_10000DE08(v14, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  if ((sub_1000FDC18(v15, v16, v17, v15, v18, v19, v20) & 1) == 0)
  {

    goto LABEL_13;
  }

  id v21 = v41;
  NSString v22 = sub_10001D3D0();
  id v23 = sub_1000FDC40((uint64_t)v22, "decodeObjectForKey:");

  if (v23)
  {
    sub_1000FDD28();
    uint64_t v24 = swift_unknownObjectRelease(v23);
  }

  else
  {
    __int128 v42 = 0u;
    __int128 v43 = 0u;
  }

  sub_1000FDD1C(v24, v25, &qword_1001CAAD0, v26, v27, v28, v29);
  uint64_t v30 = sub_10000D33C((uint64_t *)&unk_1001CD900);
  if ((sub_1000FDC18(v30, v31, v32, v30, v33, v34, v35) & 1) == 0)
  {

    goto LABEL_13;
  }

  id v36 = v41;
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_explicitContentSetting] = v5;
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettings] = v21;
  *(void *)&v3[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettingsForTopics] = v36;

  v40.receiver = v3;
  v40.super_class = (Class)type metadata accessor for DisplayCriteria();
  id v37 = objc_msgSendSuper2(&v40, "init");

  return v37;
}

uint64_t sub_1000FC54C(uint64_t a1)
{
  if (!v11[3])
  {
    sub_1000FDB4C((uint64_t)v11, &qword_1001CAAD0);
    return 0LL;
  }

  uint64_t v2 = type metadata accessor for DisplayCriteria();
  NSString v3 = v10;
  if (*(void *)&v10[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_explicitContentSetting] != *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_explicitContentSetting)
    || (id v4 = [*(id *)&v10[OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettings] isEqual:*(void *)(v1 + OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettings)],  !(_DWORD)v4))
  {

    return 0LL;
  }

  sub_10000DE08((uint64_t)v4, (unint64_t *)&unk_1001CD8F0, &OBJC_CLASS___UNNotificationSettings_ptr);
  v5.super.Class isa = sub_1000FDC78().super.isa;
  v6.super.Class isa = sub_1000FDC78().super.isa;
  v11[0] = 0LL;
  uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)( v6.super.isa,  v11,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  if (v11[0])
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = -[objc_class isEqualToDictionary:](v5.super.isa, "isEqualToDictionary:", isa);

    return (uint64_t)v9;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FC768(uint64_t a1)
{
  uint64_t v1 = 0x6E61656C63LL;
  if (a1) {
    uint64_t v1 = 0LL;
  }
  if (a1 == 1) {
    return 0x746963696C707865LL;
  }
  else {
    return v1;
  }
}

uint64_t sub_1000FC7A8()
{
  uint64_t v1 = 0x746963696C707865LL;
  uint64_t v10 = sub_1000FC8C4();
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_explicitContentSetting);
  if (v2)
  {
    if (v2 != 1) {
      goto LABEL_6;
    }
    unint64_t v3 = 0xE800000000000000LL;
  }

  else
  {
    unint64_t v3 = 0xE500000000000000LL;
    uint64_t v1 = 0x6E61656C63LL;
  }

  id v9 = &type metadata for String;
  v8[0] = v1;
  v8[1] = v3;
  sub_100030118((uint64_t)v8, 0x746963696C707865LL, 0xEF64656C62616E45LL);
LABEL_6:
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd15DisplayCriteria_notificationSettingsForTopics);
  if (*(void *)(v4 + 16))
  {
    sub_1000FD5B4(v4);
    uint64_t v6 = v5;
    id v9 = (void *)sub_10000D33C(&qword_1001CBE50);
    v8[0] = v6;
    sub_100030118((uint64_t)v8, 0x6974636573627573LL, 0xEB00000000736E6FLL);
  }

  return v10;
}

uint64_t sub_1000FC8C4()
{
  uint64_t v1 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v1, v174);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100167010;
  strcpy((char *)(inited + 32), "alertSetting");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  id v3 = sub_10008FAC0(inited, "alertSetting");
  uint64_t v11 = UNNotificationSetting.description.getter((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 7sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x7974537472656C61LL;
  *(void *)(inited + 88) = 0xEA0000000000656CLL;
  id v13 = sub_10008FAC0(v11, "alertStyle");
  *(void *)(inited + 96) = UNAlertStyle.description.getter((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(inited + 104) = v21;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 136) = v22;
  id v24 = sub_10008FAC0(v23, "announcementSetting");
  *(void *)(inited + 144) = UNNotificationSetting.description.getter((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31);
  *(void *)(inited + 15sub_10000D3A0(v0 + 2) = v32;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 184) = v33;
  id v35 = sub_10008FAC0(v34, "authorizationStatus");
  uint64_t v43 = UNAuthorizationStatus.description.getter((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
  *(void *)(inited + 19sub_10000D3A0(v0 + 2) = v43;
  *(void *)(inited + 200) = v44;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for String;
  strcpy((char *)(inited + 224), "badgeSetting");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  id v45 = sub_10008FAC0(v43, "badgeSetting");
  uint64_t v53 = UNNotificationSetting.description.getter((uint64_t)v45, v46, v47, v48, v49, v50, v51, v52);
  *(void *)(inited + 240) = v53;
  *(void *)(inited + 248) = v54;
  *(void *)(inited + 264) = &type metadata for String;
  strcpy((char *)(inited + 272), "carPlaySetting");
  *(_BYTE *)(inited + 287) = -18;
  id v55 = sub_10008FAC0(v53, "carPlaySetting");
  *(void *)(inited + 288) = UNNotificationSetting.description.getter((uint64_t)v55, v56, v57, v58, v59, v60, v61, v62);
  *(void *)(inited + 296) = v63;
  *(void *)(inited + 31sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 320) = 0xD000000000000014LL;
  sub_100048B94();
  *(void *)(inited + 328) = v64;
  id v66 = sub_10008FAC0(v65, "criticalAlertSetting");
  *(void *)(inited + 336) = UNNotificationSetting.description.getter((uint64_t)v66, v67, v68, v69, v70, v71, v72, v73);
  *(void *)(inited + 344) = v74;
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 368) = 0xD000000000000015LL;
  sub_1000BAF54();
  *(void *)(inited + 376) = v75;
  id v77 = sub_10008FAC0(v76, "directMessagesSetting");
  uint64_t v85 = UNNotificationSetting.description.getter((uint64_t)v77, v78, v79, v80, v81, v82, v83, v84);
  *(void *)(inited + 384) = v85;
  *(void *)(inited + 39sub_10000D3A0(v0 + 2) = v86;
  *(void *)(inited + 408) = &type metadata for String;
  *(void *)(inited + 4swift_unknownObjectWeakDestroy(v0 + 16) = 0x676E6970756F7267LL;
  *(void *)(inited + 424) = 0xEF676E6974746553LL;
  id v87 = sub_10008FAC0(v85, "groupingSetting");
  *(void *)(inited + 43sub_10000D3A0(v0 + 2) = UNNotificationGroupingSetting.description.getter( (uint64_t)v87,  v88,  v89,  v90,  v91,  v92,  v93,  v94);
  *(void *)(inited + 440) = v95;
  *(void *)(inited + 456) = &type metadata for String;
  *(void *)(inited + 464) = 0xD000000000000011LL;
  sub_1000BAF54();
  *(void *)(inited + 47sub_10000D3A0(v0 + 2) = v96;
  id v98 = sub_10008FAC0(v97, "lockScreenSetting");
  *(void *)(inited + 480) = UNNotificationSetting.description.getter( (uint64_t)v98,  v99,  v100,  v101,  v102,  v103,  v104,  v105);
  *(void *)(inited + 488) = v106;
  *(void *)(inited + 504) = &type metadata for String;
  *(void *)(inited + 51sub_10000D3A0(v0 + 2) = 0xD000000000000019LL;
  sub_1000BAF54();
  *(void *)(inited + 520) = v107;
  id v109 = sub_10008FAC0(v108, "notificationCenterSetting");
  uint64_t v117 = UNNotificationSetting.description.getter((uint64_t)v109, v110, v111, v112, v113, v114, v115, v116);
  *(void *)(inited + 55sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 528) = v117;
  *(void *)(inited + 536) = v118;
  *(void *)(inited + 560) = 0xD00000000000001FLL;
  sub_1000BAF54();
  *(void *)(inited + 568) = v119;
  unsigned int v120 = [v0 providesAppNotificationSettings];
  uint64_t v121 = 28526LL;
  if (v120) {
    uint64_t v121 = 7562617LL;
  }
  unint64_t v122 = 0xE200000000000000LL;
  if (v120) {
    unint64_t v122 = 0xE300000000000000LL;
  }
  *(void *)(inited + 600) = &type metadata for String;
  *(void *)(inited + 576) = v121;
  *(void *)(inited + 584) = v122;
  *(void *)(inited + 608) = 0xD000000000000018LL;
  sub_1000BAF54();
  *(void *)(inited + 6swift_unknownObjectWeakDestroy(v0 + 16) = v123;
  id v125 = sub_10008FAC0(v124, "scheduledDeliverySetting");
  uint64_t v133 = UNNotificationSetting.description.getter((uint64_t)v125, v126, v127, v128, v129, v130, v131, v132);
  *(void *)(inited + 648) = &type metadata for String;
  *(void *)(inited + 624) = v133;
  *(void *)(inited + 63sub_10000D3A0(v0 + 2) = v134;
  *(void *)(inited + 656) = 0xD000000000000013LL;
  sub_100048B94();
  *(void *)(inited + 664) = v135;
  id v137 = sub_10008FAC0(v136, "showPreviewsSetting");
  uint64_t v145 = UNShowPreviewsSetting.description.getter((uint64_t)v137, v138, v139, v140, v141, v142, v143, v144);
  *(void *)(inited + 696) = &type metadata for String;
  *(void *)(inited + 67sub_10000D3A0(v0 + 2) = v145;
  *(void *)(inited + 680) = v146;
  strcpy((char *)(inited + 704), "soundSetting");
  *(_BYTE *)(inited + 717) = 0;
  *(_WORD *)(inited + 718) = -5120;
  id v147 = sub_10008FAC0(v145, "soundSetting");
  uint64_t v155 = UNNotificationSetting.description.getter((uint64_t)v147, v148, v149, v150, v151, v152, v153, v154);
  *(void *)(inited + 744) = &type metadata for String;
  *(void *)(inited + 720) = v155;
  *(void *)(inited + 728) = v156;
  *(void *)(inited + 75sub_10000D3A0(v0 + 2) = 0xD000000000000014LL;
  sub_100048B94();
  *(void *)(inited + 760) = v157;
  id v159 = sub_10008FAC0(v158, "timeSensitiveSetting");
  uint64_t v167 = UNNotificationSetting.description.getter((uint64_t)v159, v160, v161, v162, v163, v164, v165, v166);
  *(void *)(inited + 79sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 768) = v167;
  *(void *)(inited + 776) = v168;
  uint64_t v169 = sub_1000FDD70();
  return Dictionary.init(dictionaryLiteral:)(v169, v170, v171, v172);
}

void sub_1000FCC74()
{
}

id sub_1000FCCAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DisplayCriteria();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000FCD14()
{
  return sub_1000FCD34();
}

id sub_1000FCD34()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v2 = [v0 enqueueData:isa];

  return v2;
}

uint64_t UNAlertStyle.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0LL:
      return 1701736302LL;
    case 2LL:
      return 0x7472656C61LL;
    case 1LL:
      return 0x72656E6E6162LL;
  }

  uint64_t result = sub_1000FDBA4( (uint64_t)"Fatal error",  a2,  a3,  a4,  a5,  (uint64_t)"amsengagementd/NotificationSettingsEventManager.swift",  a7,  a8,  219LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000FCE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FCE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000FCEEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UNAlertStyle.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t UNAuthorizationStatus.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 0x7A69726F68747561LL;
  switch(a1)
  {
    case 0LL:
      uint64_t result = 0x7265746544746F6ELL;
      break;
    case 1LL:
      uint64_t result = 0x6465696E6564LL;
      break;
    case 2LL:
      return result;
    case 3LL:
      uint64_t result = 0x6F697369766F7270LL;
      break;
    case 4LL:
      uint64_t result = 0x6172656D65687065LL;
      break;
    default:
      uint64_t result = sub_1000FDBA4( (uint64_t)"Fatal error",  0xEA00000000006465LL,  a3,  a4,  a5,  (uint64_t)"amsengagementd/NotificationSettingsEventManager.swift",  a7,  a8,  238LL,  0);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_1000FCFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD0AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UNAuthorizationStatus.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t UNNotificationGroupingSetting.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0LL:
      return 0x746C7561666564LL;
    case 1LL:
      return 0x656372756F73LL;
    case 2LL:
      return 6710895LL;
  }

  uint64_t result = sub_1000FDBA4( (uint64_t)"Fatal error",  a2,  a3,  a4,  a5,  (uint64_t)"amsengagementd/NotificationSettingsEventManager.swift",  a7,  a8,  253LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD20C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UNNotificationGroupingSetting.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t UNNotificationSetting.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0LL:
      return 0x6F70707553746F6ELL;
    case 1LL:
      return 0x64656C6261736964LL;
    case 2LL:
      return 0x64656C62616E65LL;
  }

  uint64_t result = sub_1000FDBA4( (uint64_t)"Fatal error",  a2,  a3,  a4,  a5,  (uint64_t)"amsengagementd/NotificationSettingsEventManager.swift",  a7,  a8,  268LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1000FD2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD380( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UNNotificationSetting.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t UNShowPreviewsSetting.description.getter( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0LL:
      return 0x737961776C61LL;
    case 1LL:
      sub_100048BA0();
      return 0xD000000000000011LL;
    case 2LL:
      return 0x726576656ELL;
    default:
      uint64_t result = sub_1000FDBA4( (uint64_t)"Fatal error",  a2,  a3,  a4,  a5,  (uint64_t)"amsengagementd/NotificationSettingsEventManager.swift",  a7,  a8,  306LL,  0);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_1000FD414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000FD4EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UNShowPreviewsSetting.description.getter(*v8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for NotificationSettingsEventManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd32NotificationSettingsEventManager);
}

uint64_t type metadata accessor for DisplayCriteria()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd15DisplayCriteria);
}

uint64_t sub_1000FD534(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  id v2 = (void *)swift_task_alloc(a1[1]);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *id v2 = v1;
  v2[1] = sub_1000FD58C;
  return v4();
}

uint64_t sub_1000FD58C()
{
  return sub_1000105A8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000FD5B4(uint64_t a1)
{
  uint64_t v2 = static _DictionaryStorage.copy(original:)(a1);
  id v3 = (void *)v2;
  int64_t v4 = 0LL;
  uint64_t v29 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1LL << *(_BYTE *)(v6 - 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v27 = v6;
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v2 + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v29 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void **)(*(void *)(v29 + 56) + 8 * i);
    swift_bridgeObjectRetain(v19);
    id v21 = v20;
    uint64_t v22 = sub_1000FC8C4();

    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t v23 = (void *)(v3[6] + 16 * i);
    void *v23 = v18;
    v23[1] = v19;
    *(void *)(v3[7] + 8 * i) = v22;
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v3[2] = v26;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      goto LABEL_24;
    }
    if (v14 >= v28) {
      return;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v28) {
        return;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v28) {
          return;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

void sub_1000FD7B4(uint64_t a1)
{
}

uint64_t sub_1000FD7BC()
{
  return sub_1000FDAAC(&qword_1001CD910);
}

uint64_t sub_1000FD7C8()
{
  return sub_1000FDB14();
}

uint64_t sub_1000FD7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000FD7E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000FD7EC()
{
  return sub_1000FDAAC(&qword_1001CD910);
}

uint64_t sub_1000FD7F8(uint64_t a1)
{
  return sub_1000FD80C(a1, &qword_1001CD910, sub_1000FC068);
}

uint64_t sub_1000FD80C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  return a3(a1);
}

uint64_t sub_1000FD844()
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001CD91C);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1000102A8;
  return sub_1000FABB8(v2, v0, v4);
}

uint64_t sub_1000FD8AC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000FD8E0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CD934);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000FDB88;
  sub_1000FDD70();
  return sub_1000FAF88();
}

uint64_t sub_1000FD950()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000FD974()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1001CD944);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000FDB84;
  return ((uint64_t (*)(int *))((char *)&dword_1001CD940 + dword_1001CD940))(v2);
}

uint64_t sub_1000FD9D8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CD95C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_1000FDD08(v1);
  return sub_1000FA6B8(v2, v3);
}

uint64_t sub_1000FDA24()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CD96C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_1000FDD08(v1);
  return sub_1000FA88C(v2, v3);
}

void sub_1000FDA70(uint64_t a1)
{
}

uint64_t sub_1000FDA78()
{
  return sub_1000FDAAC(&qword_1001CD978);
}

uint64_t sub_1000FDA84(uint64_t a1)
{
  return sub_1000FD80C(a1, &qword_1001CD978, sub_1000FAA94);
}

void sub_1000FDA98(uint64_t a1)
{
}

uint64_t sub_1000FDAA0()
{
  return sub_1000FDAAC((uint64_t *)&unk_1001CD980);
}

uint64_t sub_1000FDAAC(uint64_t *a1)
{
  uint64_t v2 = sub_10000D33C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000FDB08()
{
  return sub_1000FDB14();
}

uint64_t sub_1000FDB14()
{
  return sub_1000FBFD8(v1, v4, v0);
}

void sub_1000FDB4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000FDD40(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  sub_100009044();
}

uint64_t sub_1000FDBA4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, 0LL, 0xE000000000000000LL, a6, 53LL, 2LL, a9, a10);
}

void sub_1000FDBC0(uint64_t a1)
{
}

uint64_t sub_1000FDBC8@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_1000FDBD4()
{
  return sub_10000D3A0(v0);
}

uint64_t sub_1000FDBF0()
{
  return swift_retain(*(void *)(v0 + 688));
}

uint64_t sub_1000FDBFC()
{
  return swift_task_alloc(32LL);
}

uint64_t sub_1000FDC04()
{
  return ((uint64_t (*)(void))withCheckedContinuation<A>(isolation:function:_:))();
}

uint64_t sub_1000FDC10(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000FDC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v7 + 8, a4, 6LL);
}

NSString sub_1000FDC2C()
{
  return String._bridgeToObjectiveC()();
}

id sub_1000FDC40(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t sub_1000FDC4C()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

uint64_t sub_1000FDC54()
{
  return swift_task_dealloc(v0);
}

  ;
}

NSDictionary sub_1000FDC78()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_1000FDC88@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

void sub_1000FDCA8(uint64_t a1)
{
}

  ;
}

id sub_1000FDCCC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3, v4);
}

uint64_t sub_1000FDCDC()
{
  return sub_10001BD84(v1, v0);
}

void sub_1000FDCE8()
{
  v0._uint64_t countAndFlagsBits = 8250LL;
  v0._object = (void *)0xE200000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

void sub_1000FDCF4(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)(&a2 - 1));
}

void sub_1000FDD00(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_1000FDD08(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_1000FDD1C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_1000254B4((uint64_t)va, (uint64_t)va1, a3);
}

uint64_t sub_1000FDD28()
{
  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_1000FDD34()
{
  return v2(v1, v0);
}

uint64_t sub_1000FDD40(uint64_t a1, uint64_t *a2)
{
  return sub_10000D33C(a2);
}

void sub_1000FDD48()
{
}

uint64_t sub_1000FDD54()
{
  return swift_task_dealloc(*(void *)(v0 + 696));
}

  ;
}

uint64_t sub_1000FDD70()
{
  return v0;
}

void sub_1000FDD7C(uint64_t a1, uint64_t *a2)
{
}

  ;
}

uint64_t sub_1000FDD90(uint64_t a1)
{
  id v1 = sub_10008FAC0(a1, "code");
  if (v1 == (id)4 || (id v1 = sub_10008FAC0((uint64_t)v1, "code"), v1 == (id)260))
  {
    id v2 = sub_10008FAC0((uint64_t)v1, "domain");
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    uint64_t v5 = v4;

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
    if (v3 == v6 && v5 == v7)
    {
      char v10 = 1;
      uint64_t v9 = v5;
    }

    else
    {
      uint64_t v9 = v7;
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
    }

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
  }

  else
  {
    char v10 = 0;
  }

  return v10 & 1;
}

uint64_t sub_1000FDE60()
{
  id v1 = [v0 userInfo];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  sub_1000308B8(0x7574617453534D41LL, 0xED000065646F4373LL, v2, &v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
  }

  else
  {
    sub_10000E888((uint64_t)&v5);
  }

  return 0LL;
}

uint64_t sub_1000FDF48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v6 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v14 = v13 - v12;
  uint64_t v50 = 7107189LL;
  unint64_t v51 = 0xE300000000000000LL;
  AnyHashable.init<A>(_:)(&v50);
  sub_10003079C((uint64_t)v52, a1, &v54);
  uint64_t v15 = sub_10000E854((uint64_t)v52);
  if (!v55)
  {
    sub_100010654(v15, &qword_1001CAAD0);
    goto LABEL_7;
  }

  if ((swift_dynamicCast(&v50, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_7:
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v22 = *(void *)(sub_10000DC98() - 8);
    uint64_t v17 = sub_10000DCF0( ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
          + 2LL * *(void *)(v22 + 72),
            *(unsigned __int8 *)(v22 + 80));
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v53 = sub_10000D33C(&qword_1001CDAD8);
    v52[0] = v2;
    uint64_t v23 = *(void *)(a2 + 32);
    if (v23)
    {
      uint64_t v24 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain(*(void *)(a2 + 32));
      sub_10000DC34();
      sub_10000DC08();
      sub_1000FE4E8();
      uint64_t v25 = sub_100048E80();
      sub_1000FE50C(v25);
      sub_100010664();
      sub_10000DC14();
      id v55 = &type metadata for String;
      *(void *)&__int128 v54 = v24;
      *((void *)&v54 + 1) = v23;
      sub_10001065C();
      sub_100010664();
      uint64_t v26 = 93LL;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000FE4E8();
      uint64_t v27 = sub_100048E80();
      uint64_t v28 = sub_1000FE50C(v27);
      sub_100010654(v28, &qword_1001CAAD0);
      uint64_t v26 = 58LL;
    }

    sub_10000DC4C(v26);
    sub_10000DC5C();
    sub_1000FE51C();
    unint64_t v29 = 0xD000000000000027LL;
    goto LABEL_11;
  }

  URL.init(string:)(v50, v51);
  swift_bridgeObjectRelease();
  if (sub_1000102D4(v9, 1LL, v10) == 1)
  {
    sub_1000102E0(v9, &qword_1001CB180);
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(sub_10000DC98() - 8);
    uint64_t v17 = sub_10000DCF0( ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
          + 2LL * *(void *)(v16 + 72),
            *(unsigned __int8 *)(v16 + 80));
    *(_OWORD *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v53 = sub_10000D33C(&qword_1001CDAD8);
    v52[0] = v2;
    uint64_t v18 = *(void *)(a2 + 32);
    if (v18)
    {
      uint64_t v19 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain(*(void *)(a2 + 32));
      sub_10000DC34();
      sub_10000DC08();
      sub_1000FE4E8();
      uint64_t v20 = sub_100048E80();
      sub_1000FE50C(v20);
      sub_100010664();
      sub_10000DC14();
      id v55 = &type metadata for String;
      *(void *)&__int128 v54 = v19;
      *((void *)&v54 + 1) = v18;
      sub_10001065C();
      sub_100010664();
      uint64_t v21 = 93LL;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_1000FE4E8();
      uint64_t v39 = sub_100048E80();
      uint64_t v40 = sub_1000FE50C(v39);
      sub_100010654(v40, &qword_1001CAAD0);
      uint64_t v21 = 58LL;
    }

    sub_10000DC4C(v21);
    sub_10000DC5C();
    sub_1000FE51C();
    unint64_t v29 = 0xD000000000000024LL;
LABEL_11:
    uint64_t v30 = LogMessage.init(stringLiteral:)(v29);
    if (qword_1001C7F80 != -1) {
      uint64_t v30 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v31 = static os_log_type_t.error.getter(v30);
    sub_1000BD1B0(v31, v17);
    return swift_bridgeObjectRelease();
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14, v9, v10);
  uint64_t v33 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v34 = type metadata accessor for LogMessage(0LL);
  uint64_t v35 = swift_allocObject( v33,  ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v34 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v53 = sub_10000D33C(&qword_1001CDAD8);
  v52[0] = v2;
  uint64_t v36 = *(void *)(a2 + 32);
  if (v36)
  {
    uint64_t v49 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain(v36);
    sub_10000DC34();
    sub_10000DC08();
    sub_1000FE4E8();
    uint64_t v37 = sub_100048E80();
    sub_1000FE50C(v37);
    sub_100010664();
    sub_10000DC14();
    id v55 = &type metadata for String;
    *(void *)&__int128 v54 = v49;
    *((void *)&v54 + 1) = v36;
    sub_10001065C();
    sub_100010664();
    uint64_t v38 = 93LL;
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_1000FE4E8();
    uint64_t v41 = sub_100048E80();
    uint64_t v42 = sub_1000FE50C(v41);
    sub_100010654(v42, &qword_1001CAAD0);
    uint64_t v38 = 58LL;
  }

  sub_10000DC4C(v38);
  sub_10000DC5C();
  sub_1000FE51C();
  uint64_t v43 = LogMessage.init(stringLiteral:)(0xD000000000000016LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v43 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  sub_1000BD1B0(v44, v35);
  swift_bridgeObjectRelease();
  id v45 = (void *)objc_opt_self(&OBJC_CLASS___AMSOpenURL);
  URL._bridgeToObjectiveC()(v46);
  uint64_t v48 = v47;
  [v45 openStandardURL:v47];

  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t type metadata accessor for OpenURLAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd13OpenURLAction);
}

uint64_t sub_1000FE4E8()
{
  uint64_t v1 = *(void *)(v0 - 128);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 152), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_1000FE50C(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 112);
}

uint64_t sub_1000FE51C()
{
  return sub_10000D3A0((void *)(v0 - 152));
}

uint64_t sub_1000FE524(uint64_t a1)
{
  return sub_10012359C(a1);
}

uint64_t sub_1000FE544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Data.init(contentsOf:options:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }

  return result;
}

uint64_t sub_1000FE56C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000D33C(&qword_1001CDAE0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  JetpackBundle.init(bundleURL:)(v7);
  uint64_t v11 = type metadata accessor for JetpackBundle(0LL);
  sub_1000FE6B4((uint64_t)v10);
  unint64_t v12 = sub_1000AEB4C();
  uint64_t v13 = swift_allocError(&type metadata for JSStackProviderError, v12, 0LL, 0LL);
  *uint64_t v14 = 0;
  return swift_willThrow(v13);
}

uint64_t sub_1000FE6B4(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CDAE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000FE6F4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100016F5C();
    uint64_t v4 = _swiftEmptyArrayStorage;
    uint64_t v5 = sub_1001052B4(a1);
    if ((v5 & 0x8000000000000000LL) == 0)
    {
      unint64_t v7 = v5;
      if (v5 < 1LL << *(_BYTE *)(a1 + 32))
      {
        int v8 = v6;
        uint64_t v9 = a1 + 64;
        uint64_t v21 = a1 + 64;
        while ((*(void *)(v9 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
        {
          if (v8 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_18;
          }
          uint64_t v23 = v2;
          uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v7);
          uint64_t v11 = v4;
          uint64_t v12 = *v10;
          uint64_t v13 = v10[1];
          uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 8 * v7);
          swift_bridgeObjectRetain(v13);
          id v15 = v14;
          uint64_t v16 = a2(v12, v13, v15);
          uint64_t v4 = v11;
          uint64_t v17 = v16;

          swift_bridgeObjectRelease();
          unint64_t v18 = v4[2];
          if (v18 >= v4[3] >> 1) {
            sub_100016F5C();
          }
          v4[2] = v18 + 1;
          v4[v18 + 4] = v17;
          uint64_t v19 = -1LL << *(_BYTE *)(a1 + 32);
          uint64_t v9 = a1 + 64;
          if ((*(void *)(v21 + 8 * (v7 >> 6)) & (1LL << v7)) == 0) {
            goto LABEL_20;
          }
          if (v8 != *(_DWORD *)(a1 + 36)) {
            goto LABEL_21;
          }
          uint64_t v20 = _HashTable.occupiedBucket(after:)(v7, v21, ~v19);
          uint64_t v2 = v23 - 1;
          if (v23 == 1) {
            return;
          }
          unint64_t v7 = v20;
          if ((v20 & 0x8000000000000000LL) == 0)
          {
            int v8 = *(_DWORD *)(a1 + 36);
            if (v20 < 1LL << *(_BYTE *)(a1 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

void sub_1000FE8E4()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 initWithTopic:v2];

  sub_10000DFE8();
}

void sub_1000FE94C(uint64_t a1)
{
  NSString v2 = *(void **)(v1 + 16);
  if (!v2)
  {
    uint64_t v3 = v1;
    sub_10000DE08(a1, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
    id v4 = sub_100010500();
    id v5 = objc_allocWithZone(&OBJC_CLASS___AMSMetrics);
    sub_100048BA0();
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [v5 initWithContainerID:v6 bag:v4];

    int v8 = *(void **)(v3 + 16);
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    id v9 = v7;

    NSString v2 = 0LL;
  }

  id v10 = v2;
  sub_10000DFE8();
}

void sub_1000FEA04()
{
  NSString v0 = String._bridgeToObjectiveC()();
  sub_10000DE08((uint64_t)v0, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v1 = sub_100010500();
  id v2 = [v1 BOOLForKey:v0];

  id v3 = [v2 valuePromise];
  sub_10000DFE8();
}

void sub_1000FEA9C()
{
  id v1 = v0;
  sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v2, v4);
  sub_100048DB4();
  swift_release();
  sub_100051B28(v1, "addErrorBlock:");
  sub_100051B08();
  sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v3, v5);
  sub_100048DB4();
  swift_release();
  sub_100051B28(v1, "addSuccessBlock:");
  sub_100051B08();
}

void sub_1000FEB90(void *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  NSString v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([a1 BOOLValue])
  {
    id v7 = [objc_allocWithZone(AMSSubscriptionEntitlementsTask) initWithMediaType:6];
    id v8 = [v7 performExternalLookup];

    uint64_t v37 = sub_100100CF8;
    uint64_t v38 = a2;
    aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256LL;
    uint64_t v35 = sub_1000B1D04;
    uint64_t v36 = &unk_1001B0880;
    id v9 = _Block_copy(&aBlock);
    swift_retain(a2);
    swift_release();
    [v8 addErrorBlock:v9];
    _Block_release(v9);
    uint64_t v37 = sub_100100D20;
    uint64_t v38 = a2;
    aBlock = _NSConcreteStackBlock;
    uint64_t v34 = 1107296256LL;
    uint64_t v35 = sub_1000B1D04;
    uint64_t v36 = &unk_1001B08A8;
    id v10 = _Block_copy(&aBlock);
    swift_retain(a2);
    swift_release();
    [v8 addSuccessBlock:v10];
    _Block_release(v10);
  }

  else
  {
    uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v12 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v12 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v36 = (void *)type metadata accessor for PodcastsEventManager();
    aBlock = a2;
    uint64_t v14 = swift_retain(a2);
    id v15 = (id)AMSLogKey(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v19 = v18;

      swift_bridgeObjectRetain(v19);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v20._uint64_t countAndFlagsBits = 0LL;
      v20._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v20);
      uint64_t v21 = v36;
      uint64_t v22 = sub_10000D37C(&aBlock, (uint64_t)v36);
      uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v39[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
      sub_1000102E0((uint64_t)v39, &qword_1001CAAD0);
      v24._uint64_t countAndFlagsBits = 5972026LL;
      v24._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      MetatypeMetadata = &type metadata for String;
      v39[0] = v17;
      v39[1] = v19;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
      sub_1000102E0((uint64_t)v39, &qword_1001CAAD0);
      v25._uint64_t countAndFlagsBits = 93LL;
      v25._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v36;
      uint64_t v28 = sub_10000D37C(&aBlock, (uint64_t)v36);
      uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
      v39[0] = v29;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
      sub_1000102E0((uint64_t)v39, &qword_1001CAAD0);
      v30._uint64_t countAndFlagsBits = 58LL;
      v30._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(&aBlock);
    uint64_t v31 = LogMessage.init(stringLiteral:)(0xD00000000000003ELL);
    if (qword_1001C7F80 != -1) {
      uint64_t v31 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v32 = static os_log_type_t.default.getter(v31);
    sub_1000BD1B0(v32, v13);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000FEF6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v37 = type metadata accessor for PodcastsEventManager();
  v36[0] = a2;
  uint64_t v10 = swift_retain(a2);
  id v11 = (id)AMSLogKey(v10);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v16 = v37;
    uint64_t v17 = sub_10000D37C(v36, v37);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DEA4();
    sub_100051B5C();
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    MetatypeMetadata = &type metadata for String;
    v34[0] = v13;
    v34[1] = v15;
    sub_10000DEA4();
    sub_100051B5C();
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    sub_100025910();
    sub_100020AB8();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v21 = v37;
    uint64_t v22 = sub_10000D37C(v36, v37);
    uint64_t v23 = swift_getDynamicType(v22, v21, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
    v34[0] = v23;
    sub_10000DEA4();
    sub_1000102E0((uint64_t)v34, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 58LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    sub_100025910();
  }

  sub_10000D3A0(v36);
  LogMessage.init(stringLiteral:)(a3);
  swift_getErrorValue(a1, v33, &v31);
  uint64_t v25 = v31;
  uint64_t v26 = v32;
  uint64_t v37 = v32;
  uint64_t v27 = sub_10000D63C(v36);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v27, v25, v26);
  static LogMessage.safe(_:)(v36);
  uint64_t v28 = sub_1000102E0((uint64_t)v36, &qword_1001CAAD0);
  if (qword_1001C7F80 != -1) {
    uint64_t v28 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v29 = static os_log_type_t.error.getter(v28);
  sub_1000BD1B0(v29, v9);
  return swift_bridgeObjectRelease();
}

void sub_1000FF228(void *a1)
{
  id v2 = [a1 entitlements];
  uint64_t v3 = sub_10000DAA0(0LL, &qword_1001CDBD0, &OBJC_CLASS___AMSSubscriptionEntitlement_ptr);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  v3,  &protocol witness table for String);

  uint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v6 = sub_1000FFFE8();
    sub_100100BF8(0x746E756F636361LL, 0xE700000000000000LL, v6);
    id v7 = [a1 entitlements];
    uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String,  v3,  &protocol witness table for String);

    sub_1000FE6F4(v8, (uint64_t (*)(uint64_t, uint64_t, id))sub_100100D28);
    swift_bridgeObjectRelease();
    sub_10000D33C(&qword_1001C8F18);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v10 = String._bridgeToObjectiveC()();
    [v6 setProperty:isa forBodyKey:v10];

    sub_1000FE94C(v11);
    uint64_t v13 = v12;
    [v12 enqueueEvent:v6];
  }

void sub_1000FF3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  HIWORD(v42[1]) = -4864;
  sub_100100E88(a1, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, a4, a5, a6);
  sub_10003079C((uint64_t)&v36, a1, &v43);
  sub_10000E854((uint64_t)&v36);
  if (!v44)
  {
    sub_1000102E0((uint64_t)&v43, &qword_1001CAAD0);
    return;
  }

  uint64_t v8 = sub_10000D33C(&qword_1001C8E58);
  if ((sub_100100DC4(v8, v9, v10, v8, v11, v12, v13, v14, v36, v37) & 1) == 0) {
    return;
  }
  uint64_t v15 = v42[0];
  sub_100100E4C();
  v42[0] = v16;
  v42[1] = 0x8000000100175D90LL;
  sub_100100E88(v17, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, v18, v19, v20);
  sub_10003079C((uint64_t)&v36, v15, &v43);
  uint64_t v21 = sub_10000E854((uint64_t)&v36);
  if (!v44)
  {
    sub_1000102E0((uint64_t)&v43, &qword_1001CAAD0);
    goto LABEL_13;
  }

  if ((sub_100100DC4(v21, v22, v23, (uint64_t)&type metadata for String, v24, v25, v26, v27, v36, v37) & 1) == 0)
  {
LABEL_13:
    sub_1000FEA04();
    uint64_t v31 = v30;
    uint64_t v40 = sub_100100C70;
    uint64_t v41 = v6;
    uint64_t v32 = sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v38, v39);
    uint64_t v33 = v41;
    sub_100048DB4();
    swift_release(v33);
    [v31 addErrorBlock:v32];
    _Block_release(v32);
    uint64_t v34 = (void *)swift_allocObject(&unk_1001B07F0, 40LL, 7LL);
    v34[2] = v6;
    void v34[3] = a1;
    v34[4] = v15;
    uint64_t v40 = sub_100100CEC;
    uint64_t v41 = v34;
    sub_1000C01A4((uint64_t)sub_1000B1D04, (uint64_t)_NSConcreteStackBlock, 1107296256LL, v38, v39);
    uint64_t v35 = v41;
    sub_100048DB4();
    swift_bridgeObjectRetain(a1);
    swift_release(v35);
    sub_100051B28(v31, "addSuccessBlock:");
    sub_100051B08();

    return;
  }

  if (v42[0] != 1702195828LL || v42[1] != 0xE400000000000000LL)
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v42[0], v42[1], 1702195828LL, 0xE400000000000000LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }

  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
}

uint64_t sub_1000FF658(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ([a1 BOOLValue])
  {
    uint64_t v11 = sub_1000FFFE8();
    sub_100100BF8(0x6C75736552797562LL, 0xE900000000000074LL, v11);
    strcpy((char *)&v76, "eventVersion");
    BYTE13(v76) = 0;
    HIWORD(v76) = -5120;
    AnyHashable.init<A>(_:)(&v76);
    sub_10003079C((uint64_t)&v74, a3, &v76);
    sub_10000E854((uint64_t)&v74);
    uint64_t v12 = *((void *)&v77 + 1);
    uint64_t v69 = a2;
    if (*((void *)&v77 + 1))
    {
      uint64_t v13 = sub_10000D37C(&v76, *((uint64_t *)&v77 + 1));
      uint64_t v14 = *(void *)(v12 - 8);
      __chkstk_darwin(v13);
      uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v14 + 16))(v16);
      uint64_t v17 = _bridgeAnythingToObjectiveC<A>(_:)(v16, v12);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v12);
      sub_10000D3A0(&v76);
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    NSString v33 = String._bridgeToObjectiveC()();
    [v11 setProperty:v17 forBodyKey:v33];
    swift_unknownObjectRelease(v17);

    uint64_t v34 = sub_10000D33C(&qword_1001CDBC8);
    uint64_t v35 = swift_allocObject(v34, 64LL, 7LL);
    __int128 v68 = xmmword_100164220;
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    uint64_t v36 = (_OWORD *)(v35 + 32);
    strcpy((char *)&v76, "salableAdamId");
    HIWORD(v76) = -4864;
    AnyHashable.init<A>(_:)(&v76);
    sub_10003079C((uint64_t)&v74, a4, v36);
    sub_10000E854((uint64_t)&v74);
    sub_10000D33C(&qword_1001CAAD0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v38 = String._bridgeToObjectiveC()();
    [v11 setProperty:isa forBodyKey:v38];

    uint64_t v39 = swift_allocObject(v34, 64LL, 7LL);
    *(_OWORD *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v68;
    uint64_t v40 = (_OWORD *)(v39 + 32);
    *(void *)&__int128 v76 = 0x54746375646F7270LL;
    *((void *)&v76 + 1) = 0xEB00000000657079LL;
    AnyHashable.init<A>(_:)(&v76);
    sub_10003079C((uint64_t)&v74, a4, v40);
    sub_10000E854((uint64_t)&v74);
    Class v41 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v42 = String._bridgeToObjectiveC()();
    [v11 setProperty:v41 forBodyKey:v42];

    __int128 v76 = 0u;
    __int128 v77 = 0u;
    unint64_t v70 = 0xD000000000000012LL;
    unint64_t v71 = 0x8000000100175E00LL;
    AnyHashable.init<A>(_:)(&v70);
    sub_10003079C((uint64_t)&v74, a3, &v72);
    sub_10000E854((uint64_t)&v74);
    if (v73)
    {
      uint64_t v43 = sub_10000D33C(&qword_1001C8E58);
      if ((swift_dynamicCast(&v70, &v72, (char *)&type metadata for Any + 8, v43, 6LL) & 1) == 0)
      {
LABEL_21:
        sub_10002546C((uint64_t)&v76, (uint64_t)&v72);
        if (v73)
        {
          sub_10000DA58(&v72, &v74);
        }

        else
        {
          uint64_t v75 = &type metadata for String;
          *(void *)&__int128 v74 = 0x6572756C696166LL;
          *((void *)&v74 + 1) = 0xE700000000000000LL;
          sub_1000102E0((uint64_t)&v72, &qword_1001CAAD0);
        }

        uint64_t v61 = v75;
        uint64_t v62 = sub_10000D37C(&v74, (uint64_t)v75);
        uint64_t v63 = _bridgeAnythingToObjectiveC<A>(_:)(v62, v61);
        sub_10000D3A0(&v74);
        NSString v64 = String._bridgeToObjectiveC()();
        [v11 setProperty:v63 forBodyKey:v64];
        swift_unknownObjectRelease(v63);

        sub_1000FE94C(v65);
        uint64_t v67 = v66;
        [v66 enqueueEvent:v11];

        return sub_1000102E0((uint64_t)&v76, &qword_1001CAAD0);
      }

      uint64_t v44 = v70;
      strcpy((char *)&v72, "jingleDocType");
      HIWORD(v7sub_10000D3A0(v0 + 2) = -4864;
      AnyHashable.init<A>(_:)(&v72);
      sub_10003079C((uint64_t)&v74, v44, &v72);
      sub_10000E854((uint64_t)&v74);
      sub_1000102E0((uint64_t)&v76, &qword_1001CAAD0);
      sub_100076F44((uint64_t)&v72, (uint64_t)&v76);
      unint64_t v70 = 0x7363697274656DLL;
      unint64_t v71 = 0xE700000000000000LL;
      AnyHashable.init<A>(_:)(&v70);
      sub_10003079C((uint64_t)&v74, v44, &v72);
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)&v74);
      if (v73)
      {
        if ((swift_dynamicCast(&v70, &v72, (char *)&type metadata for Any + 8, v43, 6LL) & 1) != 0)
        {
          uint64_t v45 = v70;
          strcpy((char *)&v72, "sapTypes");
          BYTE9(v7sub_10000D3A0(v0 + 2) = 0;
          WORD5(v7sub_10000D3A0(v0 + 2) = 0;
          HIDWORD(v7sub_10000D3A0(v0 + 2) = -402653184;
          AnyHashable.init<A>(_:)(&v72);
          sub_10003079C((uint64_t)&v74, v45, &v72);
          swift_bridgeObjectRelease();
          sub_10000E854((uint64_t)&v74);
          uint64_t v46 = v73;
          if (v73)
          {
            uint64_t v47 = sub_10000D37C(&v72, v73);
            uint64_t v48 = *(void *)(v46 - 8);
            __chkstk_darwin(v47);
            uint64_t v50 = (char *)&v68 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            (*(void (**)(char *))(v48 + 16))(v50);
            uint64_t v51 = _bridgeAnythingToObjectiveC<A>(_:)(v50, v46);
            (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v46);
            sub_10000D3A0(&v72);
          }

          else
          {
            uint64_t v51 = 0LL;
          }

          NSString v60 = String._bridgeToObjectiveC()();
          [v11 setProperty:v51 forBodyKey:v60];
          swift_unknownObjectRelease(v51);
        }

        goto LABEL_21;
      }
    }

    sub_1000102E0((uint64_t)&v72, &qword_1001CAAD0);
    goto LABEL_21;
  }

  uint64_t v18 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v19 = type metadata accessor for LogMessage(0LL);
  uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v19 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v75 = (void *)type metadata accessor for PodcastsEventManager();
  *(void *)&__int128 v74 = a2;
  uint64_t v21 = swift_retain(a2);
  id v22 = (id)AMSLogKey(v21);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v26 = v25;

    swift_bridgeObjectRetain(v26);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v27._uint64_t countAndFlagsBits = 0LL;
    v27._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = v75;
    char v29 = sub_10000D37C(&v74, (uint64_t)v75);
    uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
    *((void *)&v77 + 1) = swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v76 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v76);
    sub_1000102E0((uint64_t)&v76, &qword_1001CAAD0);
    v31._uint64_t countAndFlagsBits = 5972026LL;
    v31._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    *((void *)&v77 + 1) = &type metadata for String;
    *(void *)&__int128 v76 = v24;
    *((void *)&v76 + 1) = v26;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v76);
    sub_1000102E0((uint64_t)&v76, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 93LL;
    v32._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v52._uint64_t countAndFlagsBits = 0LL;
    v52._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v52);
    uint64_t v53 = v75;
    __int128 v54 = sub_10000D37C(&v74, (uint64_t)v75);
    uint64_t v55 = swift_getDynamicType(v54, v53, 1LL);
    *((void *)&v77 + 1) = swift_getMetatypeMetadata(v55);
    *(void *)&__int128 v76 = v55;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v76);
    sub_1000102E0((uint64_t)&v76, &qword_1001CAAD0);
    v56._uint64_t countAndFlagsBits = 58LL;
    v56._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v56);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&v74);
  uint64_t v57 = LogMessage.init(stringLiteral:)(0xD000000000000040LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v57 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v58 = static os_log_type_t.default.getter(v57);
  sub_1000BD1B0(v58, v20);
  return swift_bridgeObjectRelease();
}

void *sub_1000FFFE8()
{
  id v0 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  id v1 = objc_msgSend(v0, "ams_activeiTunesAccount");

  id v2 = [objc_allocWithZone(AMSMetricsIdentifierStore) init];
  sub_10000DE08((uint64_t)[v2 setAccount:v1], &qword_1001CB430, AMSProcessInfo_ptr);
  sub_100134298();
  uint64_t v4 = v3;
  [v2 setClientInfo:v3];

  sub_10000DE08(v5, (unint64_t *)&qword_1001C8F78, &OBJC_CLASS___AMSMetricsEvent_ptr);
  sub_100048BA0();
  sub_1000FE8E4();
  id v7 = v6;
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 setApp:v8];

  sub_10000DE08(v9, (unint64_t *)&unk_1001CF1F0, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  sub_10013423C(0x6449746E65696C63LL, 0xE800000000000000LL, 0);
  uint64_t v11 = v10;
  id v12 = sub_100100E3C();

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  sub_100100BA8(v13, v15, v7);
  [v7 setAnonymous:1];
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  NSString v17 = [v16 productType];
  if (!v17)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v17 = String._bridgeToObjectiveC()();
    sub_100020AB8();
  }

  NSString v18 = String._bridgeToObjectiveC()();
  sub_100100D80();

  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v20 = String._bridgeToObjectiveC()();
  sub_100100D80();

  NSString v21 = [v16 operatingSystem];
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v21 = String._bridgeToObjectiveC()();
    sub_100020AB8();
  }

  NSString v22 = String._bridgeToObjectiveC()();
  sub_100100D80();

  id v23 = [v16 buildVersion];
  if (!v23)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v21 = v24;
    String._bridgeToObjectiveC()();
    sub_100100E94();
  }

  NSString v25 = String._bridgeToObjectiveC()();
  sub_100100D68((uint64_t)v25);

  if (v1 && (uint64_t v26 = sub_10014AE48(v1), v27))
  {
    v44[0] = v26;
    v44[1] = v27;
    uint64_t v28 = _bridgeAnythingToObjectiveC<A>(_:)(v44, &type metadata for String);
    sub_100100C3C((uint64_t)v44);
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  sub_100048BA0();
  NSString v29 = String._bridgeToObjectiveC()();
  sub_100100D68((uint64_t)v29);
  swift_unknownObjectRelease(v28);

  Swift::String v30 = (void *)objc_opt_self(&OBJC_CLASS___AMSUserAgent);
  id v31 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  id v32 = [v30 userAgentForProcessInfo:v31];

  if (!v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    id v31 = v33;
    String._bridgeToObjectiveC()();
    sub_100100E94();
  }

  NSString v34 = String._bridgeToObjectiveC()();
  sub_100100D68((uint64_t)v34);

  NSString v35 = String._bridgeToObjectiveC()();
  NSString v36 = String._bridgeToObjectiveC()();
  sub_100100D68((uint64_t)v36);

  uint64_t v37 = sub_100100E68();
  sub_10013423C(v37, v38, 1);
  uint64_t v40 = v39;
  NSString v41 = sub_100100E3C();

  if (!v41)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  sub_100100E68();
  NSString v42 = String._bridgeToObjectiveC()();
  [v7 setProperty:v41 forBodyKey:v42];

  return v7;
}

void *sub_1001004E4(void *a1)
{
  Class isa = (Class)0xE900000000000065LL;
  uint64_t v3 = sub_10000D33C(&qword_1001CF970);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v74 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  NSString v8 = (char *)&v74 - v7;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v74 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v74 - v14;
  __chkstk_darwin(v13);
  NSString v17 = (char *)&v74 - v16;
  uint64_t v79 = _swiftEmptyDictionarySingleton;
  unsigned __int8 v18 = [a1 autoRenewEnabled];
  uint64_t v78 = &type metadata for Bool;
  LOBYTE(v76) = v18;
  uint64_t v19 = sub_100100E7C();
  sub_100030118(v19, 0x656E65526F747561LL, v20);
  NSString v22 = (objc_class *)sub_1000F03BC(v21, "chargeStoreFrontID");
  if (v22)
  {
    Class isa = v22;
    uint64_t v78 = (void *)sub_10000DE08((uint64_t)v22, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    __int128 v76 = (char *)isa;
  }

  else
  {
    sub_100100E18();
  }

  sub_100100DA8((uint64_t)"chargeStoreFrontId");
  id v24 = sub_1000F03BC(v23, "expiration");
  uint64_t v75 = v15;
  if (v24)
  {
    NSString v25 = v24;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

    Class isa = *(Class *)(v10 + 32);
    sub_100100E34((uint64_t)v8, (uint64_t)v15);
    sub_1000ACBE0((uint64_t)v8, 0LL);
    if (sub_1000102D4((uint64_t)v8, 1LL, v9) != 1)
    {
      sub_100100E34((uint64_t)v17, (uint64_t)v8);
      uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      NSString v8 = (char *)[v26 serverTimeFromDate:isa];

      uint64_t v78 = (void *)sub_10000DE08(v27, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
      __int128 v76 = v8;
      uint64_t v28 = sub_100100E7C();
      sub_100030118(v28, 0x6144657269707865LL, 0xEA00000000006574LL);
      uint64_t v29 = v10;
      uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      goto LABEL_9;
    }
  }

  else
  {
    sub_1000ACBE0((uint64_t)v8, 1LL);
  }

  uint64_t v29 = v10;
  uint64_t v30 = sub_1000102E0((uint64_t)v8, &qword_1001CF970);
LABEL_9:
  id v31 = sub_1000F03BC(v30, "featureAccessTypeId");
  if (v31)
  {
    id v32 = sub_100100E0C(v31);
    sub_100100EA8();
    sub_100100EA0();
    sub_100100E00();
    uint64_t v78 = &type metadata for String;
    __int128 v76 = (char *)isa;
    __int128 v77 = v8;
  }

  else
  {
    sub_100100E18();
  }

  sub_100100E4C();
  sub_100100DEC(v33 + 1, (uint64_t)"featureAccessTypeId");
  id v35 = sub_1000F03BC(v34, "freeTrialPeriodId");
  if (v35)
  {
    id v36 = sub_100100E0C(v35);
    sub_100100EA8();
    sub_100100EA0();
    sub_100100E00();
    uint64_t v78 = &type metadata for String;
    __int128 v76 = (char *)isa;
    __int128 v77 = v8;
  }

  else
  {
    sub_100100E18();
  }

  sub_100100E4C();
  sub_100100DEC(v37 - 1, (uint64_t)"freeTrialPeriodId");
  id v39 = sub_1000F03BC(v38, "inAppAdamId");
  if (v39)
  {
    id v40 = sub_100100E0C(v39);
    sub_100100EA8();
    sub_100100EA0();
    sub_100100E00();
    uint64_t v78 = &type metadata for String;
    __int128 v76 = (char *)isa;
    __int128 v77 = v8;
  }

  else
  {
    sub_100100E18();
  }

  uint64_t v41 = sub_100100E7C();
  sub_100030118(v41, 0x6164417070416E69LL, 0xEB0000000064496DLL);
  [a1 initialPurchaseTimestamp];
  uint64_t v78 = &type metadata for Double;
  __int128 v76 = v42;
  sub_100100E4C();
  sub_100100E24(v43 + 6, (uint64_t)"initialPurchaseTimestamp");
  unsigned __int8 v45 = sub_1000F03BC(v44, "period");
  uint64_t v78 = &type metadata for Bool;
  uint64_t v46 = sub_100100E58((v45 & 4) != 0);
  sub_100100D94(v46, v47 | 0x5065636172470000LL);
  unsigned __int8 v49 = sub_1000F03BC(v48, "period");
  uint64_t v78 = &type metadata for Bool;
  uint64_t v50 = sub_100100E58((v49 & 2) != 0);
  sub_100100D94(v50, v51 | 0x50726566664F0000LL);
  unsigned __int8 v52 = [a1 purchaser];
  uint64_t v78 = &type metadata for Bool;
  LOBYTE(v76) = v52;
  sub_100030118((uint64_t)&v76, 0x6168637275507369LL, 0xEB00000000726573LL);
  unsigned __int8 v54 = sub_1000F03BC(v53, "period");
  uint64_t v78 = &type metadata for Bool;
  uint64_t v55 = sub_100100E58(v54 & 1);
  sub_100100D94(v55, v56 | 0x506C616972540000LL);
  uint64_t v57 = sub_10000D6DC(a1, (SEL *)&selRef_offerId);
  if (v58)
  {
    uint64_t v78 = &type metadata for String;
    __int128 v76 = (char *)v57;
    __int128 v77 = v58;
  }

  else
  {
    sub_100100E18();
  }

  sub_100030118((uint64_t)&v76, 0x656449726566666FLL, 0xEF7265696669746ELL);
  [a1 serviceBeginsTimestamp];
  uint64_t v78 = &type metadata for Double;
  __int128 v76 = v59;
  sub_100100E4C();
  sub_100100E24(v60 + 4, (uint64_t)"serviceBeginsTimestamp");
  id v62 = sub_1000F03BC(v61, "startDate");
  if (v62)
  {
    uint64_t v63 = v62;
    uint64_t v64 = (uint64_t)v75;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

    sub_100100E34((uint64_t)v6, v64);
    sub_1000ACBE0((uint64_t)v6, 0LL);
    if (sub_1000102D4((uint64_t)v6, 1LL, v9) != 1)
    {
      uint64_t v65 = v74;
      sub_100100E34(v74, (uint64_t)v6);
      id v66 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
      Class v67 = Date._bridgeToObjectiveC()().super.isa;
      __int128 v68 = (char *)[v66 serverTimeFromDate:v67];

      uint64_t v78 = (void *)sub_10000DE08(v69, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
      __int128 v76 = v68;
      uint64_t v70 = sub_100100E7C();
      sub_100030118(v70, 0x7461447472617473LL, 0xE900000000000065LL);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v65, v9);
      goto LABEL_26;
    }
  }

  else
  {
    sub_1000ACBE0((uint64_t)v6, 1LL);
  }

  sub_1000102E0((uint64_t)v6, &qword_1001CF970);
LABEL_26:
  uint64_t v71 = sub_10000D6DC(a1, (SEL *)&selRef_vendorAdHocOfferId);
  if (v72)
  {
    uint64_t v78 = &type metadata for String;
    __int128 v76 = (char *)v71;
    __int128 v77 = v72;
  }

  else
  {
    sub_100100E18();
  }

  sub_100100DA8((uint64_t)"vendorAdHocOfferId");
  return v79;
}

uint64_t type metadata accessor for PodcastsEventManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20PodcastsEventManager);
}

void sub_100100BA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setClientIdentifier:v5];
}

void sub_100100BF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setEventType:v4];
}

uint64_t sub_100100C3C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100100C70(uint64_t a1)
{
  return sub_1000FEF6C(a1, v1, 0xD000000000000026LL);
}

uint64_t sub_100100CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100100CB0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100100CB8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100100CEC(void *a1)
{
  return sub_1000FF658(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100100CF8(uint64_t a1)
{
  return sub_100100DD8(a1, v1);
}

void sub_100100D18(void *a1)
{
}

void sub_100100D20(void *a1)
{
}

void *sub_100100D28(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1001004E4(a3);
}

id sub_100100D68(uint64_t a1)
{
  return objc_msgSend(v1, *(SEL *)(v3 + 80), v2, a1);
}

id sub_100100D80()
{
  return objc_msgSend(v0, *(SEL *)(v3 + 80), v1, v2);
}

void sub_100100D94(uint64_t a1, uint64_t a2)
{
}

void sub_100100DA8(uint64_t a1@<X8>)
{
}

uint64_t sub_100100DC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v10 + 8, a4, 6LL);
}

uint64_t sub_100100DD8(uint64_t a1, uint64_t a2)
{
  return sub_1000FEF6C(a1, a2, 0xD000000000000024LL);
}

void sub_100100DEC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void sub_100100E00()
{
}

id sub_100100E0C(void *a1)
{
  return [a1 *(SEL *)(v1 + 2456)];
}

double sub_100100E18()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 11sub_10000D3A0(v0 + 2) = 0u;
  return result;
}

void sub_100100E24(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_100100E34(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

id sub_100100E3C()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 3112), v1);
}

  ;
}

uint64_t sub_100100E58@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_100100E68()
{
  return 0x644972657375LL;
}

uint64_t sub_100100E7C()
{
  return v0 - 128;
}

uint64_t sub_100100E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_100100E94()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100100EA0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

void sub_100100EA8()
{
}

void sub_100100EB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_100016F88();
    uint64_t v3 = sub_10000D738(v2);
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      unint64_t v5 = v3;
      if (v3 < 1LL << *(_BYTE *)(v2 + 32))
      {
        int v6 = v4;
        uint64_t v7 = v2 + 64;
        uint64_t v16 = v2 + 64;
        while ((*(void *)(v7 + 8 * (v5 >> 6)) & (1LL << v5)) != 0)
        {
          if (v6 != *(_DWORD *)(v2 + 36)) {
            goto LABEL_18;
          }
          NSString v8 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
          uint64_t v9 = v8[1];
          uint64_t v17 = v1;
          uint64_t v18 = *v8;
          uint64_t v10 = v2;
          unint64_t v12 = _swiftEmptyArrayStorage[2];
          unint64_t v11 = _swiftEmptyArrayStorage[3];
          swift_bridgeObjectRetain(v9);
          if (v12 >= v11 >> 1) {
            sub_100016F88();
          }
          _swiftEmptyArrayStorage[2] = v12 + 1;
          uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
          v13[4] = v18;
          v13[5] = v9;
          uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
          uint64_t v7 = v16;
          if ((*(void *)(v16 + 8 * (v5 >> 6)) & (1LL << v5)) == 0) {
            goto LABEL_20;
          }
          uint64_t v2 = v10;
          if (v6 != *(_DWORD *)(v10 + 36)) {
            goto LABEL_21;
          }
          uint64_t v15 = _HashTable.occupiedBucket(after:)(v5, v16, ~v14);
          uint64_t v1 = v17 - 1;
          if (v17 == 1) {
            return;
          }
          unint64_t v5 = v15;
          if ((v15 & 0x8000000000000000LL) == 0)
          {
            int v6 = *(_DWORD *)(v2 + 36);
            if (v15 < 1LL << *(_BYTE *)(v2 + 32)) {
              continue;
            }
          }

          goto LABEL_22;
        }

        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
    }

uint64_t sub_100101070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for ContentInfo(0LL);
  if (v3)
  {
    uint64_t v5 = sub_1001057F0();
    sub_100039F1C(v5, v6);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return sub_10008BE54(a2, v7, 1LL, v4);
}

uint64_t sub_1001010C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = sub_10000D33C(&qword_1001C8F20);
  if (v3)
  {
    uint64_t v5 = sub_1001057F0();
    sub_1000D6C30(v5, v6);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return sub_10008BE54(a2, v7, 1LL, v4);
}

uint64_t sub_10010111C(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return swift_retain(*(void *)(a1 + 32));
  }
  else {
    return 0LL;
  }
}

unint64_t sub_100101144(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    if ((a3 & 0x2000000000000000LL) != 0) {
      uint64_t v5 = HIBYTE(a3) & 0xF;
    }
    else {
      uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v6 = 7LL;
    if (((a3 >> 60) & ((a2 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v6 = 11LL;
    }
    unint64_t v7 = v6 | (v5 << 16);
    double result = String.index(_:offsetBy:limitedBy:)(15LL, result, v7, a2, a3);
    if ((v8 & 1) != 0) {
      double result = v7;
    }
    if (4 * v5 >= result >> 14)
    {
      uint64_t v9 = String.subscript.getter(result, v7, a2, a3);
      sub_100009020();
      return v9;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100101210(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v9 = a5 >> 1;
    double result = sub_100105678(a4, result, a5 >> 1);
    if ((v10 & 1) != 0) {
      double result = v9;
    }
    if (v9 >= result)
    {
      uint64_t v11 = sub_100105600(result, v9, a2, a3, a4, a5);
      swift_unknownObjectRelease(a2);
      return v11;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1001012C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 80);
  if (v4 == v6 && v5 == v7) {
    return 0LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 1LL);
  }
}

unint64_t sub_1001012F8( unint64_t result, uint64_t (*a2)(unint64_t *, unint64_t *), uint64_t a3, unint64_t a4)
{
  if ((uint64_t)(a4 + 0x4000000000000000LL) < 0)
  {
LABEL_13:
    __break(1u);
  }

  else
  {
    unint64_t v4 = a4;
    uint64_t v6 = (uint64_t *)result;
    while (!__OFADD__(2 * v4, 2LL))
    {
      uint64_t v7 = *v6;
      uint64_t v8 = *(void *)(*v6 + 16);
      unint64_t v9 = v4;
      if (v8 > (uint64_t)((2 * v4) | 1))
      {
        unint64_t v10 = sub_10010145C((2 * v4) | 1, *v6);
        unint64_t v17 = v10;
        unint64_t v11 = sub_10010145C(v4, v7);
        unint64_t v16 = v11;
        char v12 = a2(&v17, &v16);
        swift_release(v10);
        double result = swift_release(v11);
        if ((v12 & 1) != 0) {
          unint64_t v9 = (2 * v4) | 1;
        }
        else {
          unint64_t v9 = v4;
        }
      }

      if (v8 > (uint64_t)(2 * v4 + 2))
      {
        unint64_t v13 = sub_10010145C(2 * v4 + 2, v7);
        unint64_t v17 = v13;
        unint64_t v14 = sub_10010145C(v9, v7);
        unint64_t v16 = v14;
        char v15 = a2(&v17, &v16);
        swift_release(v13);
        double result = swift_release(v14);
        if ((v15 & 1) != 0) {
          unint64_t v9 = 2 * v4 + 2;
        }
      }

      if (v9 == v4) {
        return result;
      }
      double result = sub_100101480(v4, v9);
      unint64_t v4 = v9;
    }

    __break(1u);
  }

  return result;
}

unint64_t sub_10010145C(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(a2 + 16) > result)
  {
    return swift_retain(*(void *)(a2 + 8 * result + 32));
  }

  __break(1u);
  return result;
}

unint64_t sub_100101480(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v3 = result;
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v4 = *v2;
      unint64_t v5 = *(void *)(*v2 + 16);
      if (v5 > result)
      {
        if (v5 > a2)
        {
          uint64_t v7 = *(void *)(v4 + 32 + 8 * result);
          uint64_t v8 = *(void *)(v4 + 32 + 8 * a2);
          swift_retain(v7);
          swift_retain(v8);
          double result = swift_isUniquelyReferenced_nonNull_native(v4);
          *uint64_t v2 = v4;
          if ((result & 1) == 0)
          {
            double result = sub_100065634(v4);
            uint64_t v4 = result;
            *uint64_t v2 = result;
          }

          if (*(void *)(v4 + 16) > v3)
          {
            uint64_t v9 = v4 + 8 * v3;
            uint64_t v10 = *(void *)(v9 + 32);
            *(void *)(v9 + 3sub_10000D3A0(v0 + 2) = v8;
            uint64_t v11 = swift_release(v10);
            specialized ContiguousArray._endMutation()(v11);
            uint64_t v12 = *v2;
            double result = swift_isUniquelyReferenced_nonNull_native(*v2);
            *uint64_t v2 = v12;
            if ((result & 1) == 0)
            {
              double result = sub_100065634(v12);
              uint64_t v12 = result;
              *uint64_t v2 = result;
            }

            if (*(void *)(v12 + 16) > a2)
            {
              uint64_t v13 = v12 + 8 * a2;
              uint64_t v14 = *(void *)(v13 + 32);
              *(void *)(v13 + 3sub_10000D3A0(v0 + 2) = v7;
              uint64_t v15 = swift_release(v14);
              return specialized ContiguousArray._endMutation()(v15);
            }

            goto LABEL_16;
          }

uint64_t sub_100101598(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t *), uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(void *)(*a1 + 16);
  uint64_t v8 = swift_retain(a4);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  uint64_t v9 = *(void *)(*a1 + 16);
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
  uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, a4);
  uint64_t result = specialized ContiguousArray._endMutation()(v10);
  if (v7)
  {
    while (1)
    {
      unint64_t v12 = *(void *)(*a1 + 16);
      if (v7 >= v12) {
        break;
      }
      uint64_t v13 = *a1 + 32;
      uint64_t v14 = *(void *)(v13 + 8 * v7);
      uint64_t v31 = v14;
      unint64_t v15 = v7 - 1;
      unint64_t v16 = (v7 - 1) >> 1;
      if (v16 >= v12) {
        goto LABEL_18;
      }
      uint64_t v30 = *(void *)(v13 + 8 * v16);
      uint64_t v17 = v30;
      swift_retain(v14);
      swift_retain(v17);
      char v18 = a2(&v31, &v30);
      swift_release(v14);
      uint64_t result = swift_release(v17);
      if ((v18 & 1) == 0) {
        return result;
      }
      if (v7 != v16)
      {
        uint64_t v19 = *a1;
        unint64_t v20 = *(void *)(*a1 + 16);
        if (v7 >= v20) {
          goto LABEL_19;
        }
        if (v16 >= v20) {
          goto LABEL_20;
        }
        uint64_t v21 = *(void *)(v19 + 32 + 8 * v7);
        uint64_t v22 = *(void *)(v19 + 32 + 8 * v16);
        swift_retain(v21);
        swift_retain(v22);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v19);
        *a1 = v19;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100065634(v19);
          uint64_t v19 = result;
          *a1 = result;
        }

        if (v7 >= *(void *)(v19 + 16)) {
          goto LABEL_21;
        }
        unint64_t v23 = v19 + 8 * v7;
        uint64_t v24 = *(void *)(v23 + 32);
        *(void *)(v23 + 3sub_10000D3A0(v0 + 2) = v22;
        uint64_t v25 = swift_release(v24);
        specialized ContiguousArray._endMutation()(v25);
        uint64_t v26 = *a1;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a1);
        *a1 = v26;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100065634(v26);
          uint64_t v26 = result;
          *a1 = result;
        }

        if (v16 >= *(void *)(v26 + 16)) {
          goto LABEL_22;
        }
        unint64_t v27 = v26 + 8 * v16;
        uint64_t v28 = *(void *)(v27 + 32);
        *(void *)(v27 + 3sub_10000D3A0(v0 + 2) = v21;
        uint64_t v29 = swift_release(v28);
        uint64_t result = specialized ContiguousArray._endMutation()(v29);
      }

      unint64_t v7 = (v7 - 1) >> 1;
      if (v15 <= 1) {
        return result;
      }
    }

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  return result;
}

uint64_t sub_10010177C( uint64_t *a1, uint64_t (*a2)(unint64_t *, uint64_t *), uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v6 = a4;
  uint64_t v39 = a5;
  unint64_t v9 = sub_10010145C(a4, *a1);
  unint64_t v38 = v9;
  char v10 = a2(&v38, &v39);
  swift_release(v9);
  if ((v10 & 1) != 0) {
    goto LABEL_30;
  }
  uint64_t v11 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v11 = sub_100065634(v11);
    *a1 = v11;
  }

  if ((v6 & 0x8000000000000000LL) != 0) {
    goto LABEL_28;
  }
  if (*(void *)(v11 + 16) <= v6)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000033LL,  0x800000010016E8B0LL,  "amsengagementd/Heap.swift",  25LL,  2LL,  101LL,  0);
    __break(1u);
    return result;
  }

  unint64_t v13 = v11 + 8 * v6;
  uint64_t v14 = *(void *)(v13 + 32);
  swift_retain(a5);
  uint64_t v15 = swift_release(v14);
  *(void *)(v13 + 3sub_10000D3A0(v0 + 2) = a5;
  uint64_t result = specialized ContiguousArray._endMutation()(v15);
  if (v6)
  {
    while (1)
    {
      unint64_t v17 = *(void *)(*a1 + 16);
      if (v6 >= v17) {
        break;
      }
      uint64_t v18 = *a1 + 32;
      unint64_t v19 = *(void *)(v18 + 8 * v6);
      unint64_t v38 = v19;
      unint64_t v20 = v6 - 1;
      unint64_t v21 = (v6 - 1) >> 1;
      if (v21 >= v17) {
        goto LABEL_23;
      }
      uint64_t v37 = *(void *)(v18 + 8 * v21);
      uint64_t v22 = v37;
      swift_retain(v19);
      swift_retain(v22);
      char v23 = a2(&v38, &v37);
      swift_release(v19);
      uint64_t result = swift_release(v22);
      if ((v23 & 1) == 0) {
        return result;
      }
      if (v6 != v21)
      {
        uint64_t v24 = *a1;
        unint64_t v25 = *(void *)(*a1 + 16);
        if (v6 >= v25) {
          goto LABEL_24;
        }
        if (v21 >= v25) {
          goto LABEL_25;
        }
        uint64_t v26 = *(void *)(v24 + 32 + 8 * v6);
        uint64_t v27 = *(void *)(v24 + 32 + 8 * v21);
        swift_retain(v26);
        swift_retain(v27);
        char v28 = swift_isUniquelyReferenced_nonNull_native(v24);
        *a1 = v24;
        if ((v28 & 1) == 0)
        {
          uint64_t v24 = sub_100065634(v24);
          *a1 = v24;
        }

        if (v6 >= *(void *)(v24 + 16)) {
          goto LABEL_26;
        }
        unint64_t v29 = v24 + 8 * v6;
        uint64_t v30 = *(void *)(v29 + 32);
        *(void *)(v29 + 3sub_10000D3A0(v0 + 2) = v27;
        uint64_t v31 = swift_release(v30);
        specialized ContiguousArray._endMutation()(v31);
        uint64_t v32 = *a1;
        char v33 = swift_isUniquelyReferenced_nonNull_native(*a1);
        *a1 = v32;
        if ((v33 & 1) == 0)
        {
          uint64_t v32 = sub_100065634(v32);
          *a1 = v32;
        }

        if (v21 >= *(void *)(v32 + 16)) {
          goto LABEL_27;
        }
        unint64_t v34 = v32 + 8 * v21;
        uint64_t v35 = *(void *)(v34 + 32);
        *(void *)(v34 + 3sub_10000D3A0(v0 + 2) = v26;
        uint64_t v36 = swift_release(v35);
        uint64_t result = specialized ContiguousArray._endMutation()(v36);
      }

      unint64_t v6 = (v6 - 1) >> 1;
      if (v20 <= 1) {
        return result;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  return result;
}

uint64_t sub_100101A10(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 1;
  uint64_t v3 = v1[1];
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    return 0LL;
  }
  unint64_t v7 = sub_10010145C(a1, v3);
  unint64_t v8 = v5 - 1;
  if (!v8) {
    goto LABEL_12;
  }
  type metadata accessor for Worker();
  unint64_t v9 = sub_10010145C(a1, v3);
  unint64_t v10 = sub_10010145C(v8, v3);
  char v11 = sub_100103CB4();
  swift_release(v9);
  swift_release(v10);
  if ((v11 & 1) != 0) {
    goto LABEL_12;
  }
  unint64_t v13 = (uint64_t (*)(unint64_t *, uint64_t *))v2[2];
  uint64_t v12 = v2[3];
  uint64_t v14 = v2[1];
  unint64_t v15 = sub_10010145C(a1, v14);
  unint64_t v26 = v15;
  unint64_t v16 = sub_10010145C(*(void *)(v14 + 16) - 1LL, v14);
  unint64_t v25 = v16;
  swift_retain(v12);
  char v17 = v13(&v26, (uint64_t *)&v25);
  swift_release(v15);
  swift_release(v16);
  swift_release(v12);
  uint64_t v18 = v2[1];
  unint64_t v19 = sub_10010145C(*(void *)(v18 + 16) - 1LL, v18);
  if ((v17 & 1) == 0)
  {
    swift_retain(v12);
    sub_10010177C(v4, v13, v12, a1, v19);
    swift_release(v12);
    swift_release(v19);
LABEL_12:
    sub_100101C10();
    uint64_t v12 = v24;
    goto LABEL_13;
  }

  uint64_t result = swift_isUniquelyReferenced_nonNull_native(v18);
  *uint64_t v4 = v18;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_100065634(v18);
    uint64_t v18 = result;
    *uint64_t v4 = result;
  }

  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(v18 + 16) > a1)
  {
    unint64_t v21 = v18 + 8 * a1;
    uint64_t v22 = swift_release(*(void *)(v21 + 32));
    *(void *)(v21 + 3sub_10000D3A0(v0 + 2) = v19;
    specialized ContiguousArray._endMutation()(v22);
    sub_100101C10();
    swift_release(v23);
    swift_retain(v12);
    sub_1001012F8((unint64_t)v4, (uint64_t (*)(unint64_t *, unint64_t *))v13, v12, a1);
LABEL_13:
    swift_release(v12);
    return v7;
  }

  __break(1u);
  return result;
}

void sub_100101C10()
{
  if (*(void *)(*(void *)v0 + 16LL))
  {
    if (!sub_100105598()) {
      sub_100105518(*(void *)(*(void *)v0 + 16LL) - 1LL);
    }
  }

  else
  {
    __break(1u);
  }

void sub_100101C4C()
{
  uint64_t v2 = v0;
  uint64_t v25 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  sub_100029170();
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  sub_10000DE7C();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10000DE7C();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Worker();
  *(void *)(v2 + 64) = sub_100105874( v16,  (uint64_t)&type metadata for String,  v17,  (uint64_t)&protocol witness table for String);
  *(void *)(v2 + 80) = 0LL;
  *(void *)(v2 + 88) = 0LL;
  unint64_t v19 = _swiftEmptyArrayStorage;
  *(_BYTE *)(v2 + 24) = 1;
  *(void *)(v2 + 3sub_10000D3A0(v0 + 2) = v19;
  *(void *)(v2 + 40) = sub_1001051E4;
  *(void *)(v2 + 48) = 0LL;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100105874( (uint64_t)v19,  (uint64_t)&type metadata for String,  v18,  (uint64_t)&protocol witness table for String);
  *(void *)(v2 + 56) = v5;
  sub_100049B94();
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v12 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v11);
  static DispatchQoS.unspecified.getter(v20);
  unint64_t v26 = _swiftEmptyArrayStorage;
  sub_100105280( (unint64_t *)&qword_1001CAAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v22 = v21;
  uint64_t v23 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_10000D890((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v23, v24, v6, v22);
  *(void *)(v2 + 7sub_10000D3A0(v0 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001ALL,  0x8000000100176040LL,  v10,  v1,  v15,  v25);
  sub_10000DD84();
}

uint64_t sub_100101E54()
{
  uint64_t v1 = sub_10000DEE0();
  sub_100100EB0(v1);
  uint64_t v3 = v2;
  sub_100009020();
  return v3;
}

BOOL sub_100101EA8()
{
  return *(void *)(*(void *)(v0 + 64) + 16LL) != 0LL;
}

uint64_t PriorityQueue.debugDescription.getter()
{
  uint64_t v13 = 0LL;
  *(void *)&__int128 v14 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(75LL);
  v18[0] = 0LL;
  v18[1] = 0xE000000000000000LL;
  sub_10010589C(0x6B726F576C6C6128LL, 0x3A737265u);
  sub_100020A94(v0 + 16, (uint64_t)v17);
  type metadata accessor for Worker();
  uint64_t v1 = sub_10000DD9C();
  v19._uint64_t countAndFlagsBits = sub_10010581C(v1);
  sub_1001058B4(v19);
  sub_10000DCFC();
  sub_100020AB8();
  v20._uint64_t countAndFlagsBits = 0xD000000000000018LL;
  v20._object = (void *)0x8000000100175F00LL;
  sub_1001058B4(v20);
  sub_100020A94(v0 + 24, (uint64_t)v16);
  uint64_t v2 = *(void *)(v0 + 48);
  LOBYTE(v13) = *(_BYTE *)(v0 + 24);
  __int128 v14 = *(_OWORD *)(v0 + 32);
  uint64_t v15 = v2;
  uint64_t v3 = sub_10000D33C(&qword_1001CDBD8);
  _print_unlocked<A, B>(_:_:)( &v13,  v18,  v3,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  sub_1001058F8(0x6E696E6E7572202CLL, 14951LL);
  BOOL v4 = sub_100101EA8();
  BOOL v5 = !v4;
  if (v4) {
    uint64_t v6 = 1702195828LL;
  }
  else {
    uint64_t v6 = 0x65736C6166LL;
  }
  if (v5) {
    unint64_t v7 = 0xE500000000000000LL;
  }
  else {
    unint64_t v7 = 0xE400000000000000LL;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  sub_10000DCFC();
  v9._object = (void *)0x8000000100175F20LL;
  v9._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v9);
  sub_100020A94(v0 + 64, (uint64_t)&v13);
  uint64_t v10 = sub_10000DEE0();
  v21._uint64_t countAndFlagsBits = sub_10010581C(v10);
  sub_1001058B4(v21);
  sub_100009020();
  sub_1000090CC();
  v11._uint64_t countAndFlagsBits = 41LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return v18[0];
}

uint64_t type metadata accessor for Worker()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd6Worker);
}

void sub_1001020DC()
{
  uint64_t v1 = *(void *)(v0 + 88);
  if (!v1)
  {
    *(void *)(v0 + 80) = sub_100102138();
    *(void *)(v0 + 88) = v2;
    swift_bridgeObjectRetain(v2);
    sub_10000DE2C();
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  sub_10000DFE8();
}

uint64_t sub_100102138()
{
  id v0 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  swift_bridgeObjectRetain(0x800000010016ADB0LL);
  uint64_t v1 = sub_10001D1B4();
  swift_bridgeObjectRelease_n(0x800000010016ADB0LL, 2LL);
  swift_bridgeObjectRelease_n(0LL, 2LL);

  return v1;
}

uint64_t sub_10010220C(uint64_t a1, uint64_t a2)
{
  if (qword_1001C7FD0 != -1) {
    swift_once(&qword_1001C7FD0, sub_1000BD660);
  }
  sub_100048DB4();
  sub_1000BB204();
  sub_1001022F0((uint64_t)v7);
  BOOL v5 = (void *)sub_10000DDDC((uint64_t)&unk_1001B0A80, 40LL);
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  sub_100048DB4();
  sub_10002588C();
  sub_10006264C();
  swift_release();
  __int128 v11 = v8;
  sub_1000662B4((uint64_t)&v11);
  __int128 v10 = v9;
  sub_1000662B4((uint64_t)&v10);
  return sub_10001A2D8();
}

uint64_t sub_1001022F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100029170();
  uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v6 = v5;
  uint64_t v7 = UUID.init()();
  uint64_t v8 = UUID.uuidString.getter(v7);
  uint64_t v10 = v9;
  uint64_t result = sub_1001058CC(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  *(_WORD *)a1 = 257;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  return result;
}

uint64_t sub_1001023AC(uint64_t a1, void (*a2)(void))
{
  if (qword_1001C7FD0 != -1) {
    swift_once(&qword_1001C7FD0, sub_1000BD660);
  }
  swift_retain(a1);
  sub_1000BB364();
  a2();
  sub_10000D33C(&qword_1001CA760);
  char v5 = 1;
  return Promise.__allocating_init(value:)(&v5);
}

void sub_100102448(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1001024A4()
{
  v4._uint64_t countAndFlagsBits = 46LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  sub_10000DCFC();
  sub_10000DD9C();
  sub_1001058EC();
  uint64_t result = sub_10000DCFC();
  *(_BYTE *)uint64_t v2 = v3;
  *(_BYTE *)(v2 + 1) = 0;
  *(void *)(v2 + 8) = 0x6C616E7265746E69LL;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0xE800000000000000LL;
  *(void *)(v2 + 24) = v1;
  *(void *)(v2 + 3sub_10000D3A0(v0 + 2) = v0;
  return result;
}

uint64_t sub_100102554(__int128 *a1)
{
  Swift::String v4 = v1;
  sub_10010580C();
  sub_1001058D8();
  __chkstk_darwin(v6);
  sub_1001057A4(v7, v28[0]);
  sub_100105864(v8, enum case for DispatchPredicate.onQueue(_:));
  id v9 = v3;
  _dispatchPreconditionTest(_:)(v2);
  sub_1001057DC();
  if ((v3 & 1) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = *((void *)a1 + 1);
  uint64_t v11 = *((void *)a1 + 2);
  sub_100020A94((uint64_t)(v4 + 2), (uint64_t)v29);
  uint64_t v12 = v4[2];
  sub_10000DF10();
  swift_bridgeObjectRetain(v12);
  sub_100030AC4(v10, v11, v12);
  uint64_t v2 = v13;
  sub_10000DE2C();
  sub_100020AB8();
  if (v2)
  {
    uint64_t v14 = qword_1001C7FD0;
    sub_10000DFF4();
    if (v14 == -1)
    {
LABEL_4:
      sub_10000DFF4();
      sub_10002588C();
      sub_1000BB4B4();
      uint64_t v15 = v2;
      goto LABEL_8;
    }

void sub_10010278C()
{
  uint64_t v3 = v0;
  sub_10010580C();
  sub_1001058D8();
  __chkstk_darwin(v4);
  sub_1001057A4(v5, v26);
  sub_100105864(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v2;
  _dispatchPreconditionTest(_:)(v1);
  sub_1001057DC();
  if ((v2 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }

  uint64_t v33 = 0LL;
  uint64_t v8 = v0 + 24;
  sub_100020A94(v0 + 24, (uint64_t)v30);
  char v9 = *(_BYTE *)(v0 + 24);
  uint64_t v10 = *(void *)(v0 + 48);
  v30[24] = v9;
  __int128 v31 = *(_OWORD *)(v3 + 32);
  uint64_t v32 = v10;
  uint64_t v11 = (uint64_t *)(v3 + 64);
  swift_retain(v31);
  sub_100048DB4();
  sub_100020A94(v3 + 64, (uint64_t)&v29);
  uint64_t v12 = sub_1001058A8();
  if (!v12) {
    goto LABEL_27;
  }
  uint64_t v27 = v8;
  while (1)
  {
    char v13 = *(_BYTE *)(v12 + 49);
    uint64_t v14 = *v11;
    uint64_t v15 = *(void *)(*v11 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain(*v11);
      sub_100030CCC(0x72656972726162LL, 0xE700000000000000LL);
      char v17 = v16;
      swift_bridgeObjectRelease();
      sub_100105888();
      if ((v18 & 1) == 0) {
        goto LABEL_9;
      }
    }

    else
    {
      char v17 = 0;
      if ((*(_BYTE *)(v12 + 49) & 1) == 0) {
LABEL_9:
      }
        __asm { BR              X9 }

      sub_100105888();
    }

    if (!*(void *)(*v11 + 16)) {
      break;
    }
    swift_bridgeObjectRetain(*v11);
    sub_100030CCC(v14, 0xE700000000000000LL);
    char v20 = v19;
    sub_10001C258();
    if ((v20 & 1) == 0) {
      break;
    }
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0) {
      goto LABEL_20;
    }
LABEL_16:
    if (qword_1001C7FD0 != -1) {
      swift_once(&qword_1001C7FD0, sub_1000BD660);
    }
    sub_10002588C();
    sub_10000DFF4();
    sub_1000BBA34();
    sub_100037230();
    uint64_t v12 = sub_1001058A8();
    if (!v12) {
      goto LABEL_27;
    }
  }

  sub_10001C258();
  if ((v13 & 1) == 0)
  {
    if ((v17 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }

uint64_t sub_100102AE0()
{
  if ((v0[1] & 1) != 0) {
    return 0x72656972726162LL;
  }
  else {
    return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100102B1C + 4 * byte_10016836C[*v0]))( 0x636974796C616E61LL,  0xE900000000000073LL);
  }
}

uint64_t sub_100102B1C()
{
  return 0x6C616E7265746E69LL;
}

uint64_t sub_100102B4C()
{
  return 0x7379656E72756F6ALL;
}

uint64_t sub_100102B64()
{
  return 0x6E656D6D6F636572LL;
}

uint64_t sub_100102B88(void *a1)
{
  uint64_t v4 = sub_10010580C();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100029170();
  uint64_t v6 = *(void **)(v1 + 72);
  *uint64_t v2 = v6;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v2, enum case for DispatchPredicate.onQueue(_:), v4);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v2);
  uint64_t result = sub_1001058CC(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if ((v6 & 1) != 0)
  {
    uint64_t v10 = a1[9];
    uint64_t v9 = a1[10];
    swift_bridgeObjectRetain(v9);
    sub_1001020DC();
    if (v11 == v10 && v12 == v9)
    {
      swift_bridgeObjectRelease_n(v9, 2LL);
    }

    else
    {
      char v14 = sub_1001058BC(v11, v12, v10, v9);
      sub_1000090CC();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        sub_100020A94(v1 + 24, (uint64_t)v28);
        uint64_t v15 = sub_10010111C(*(void *)(v1 + 32));
        if (v15)
        {
          uint64_t v16 = v15;
          uint64_t v18 = *(void *)(v15 + 72);
          uint64_t v17 = *(void *)(v15 + 80);
          sub_10000DD9C();
          sub_1001020DC();
          if (v19 == v18 && v20 == v17) {
            char v22 = 0;
          }
          else {
            char v22 = sub_1001058BC(v19, v20, v18, v17);
          }
          sub_10000DCFC();
          sub_100020AB8();
          if (a1[12] >= a1[11])
          {
            uint64_t v24 = *(void *)(v16 + 72);
            uint64_t v25 = *(void *)(v16 + 80);
            if (v10 == v24 && v9 == v25)
            {
              sub_10002FAF4();
              char v23 = 1;
            }

            else
            {
              char v27 = sub_1001058BC(v10, v9, v24, v25);
              sub_10002FAF4();
              char v23 = v22 & v27 ^ 1;
            }
          }

          else
          {
            sub_10002FAF4();
            char v23 = v22 ^ 1;
          }

          return v23 & 1;
        }
      }
    }

    char v23 = 0;
    return v23 & 1;
  }

  __break(1u);
  return result;
}

void sub_100102D30()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_10010580C();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100029170();
  uint64_t v5 = (void *)v2[9];
  *uint64_t v1 = v5;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v3);
  v5;
  char v6 = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v1, v3);
  if ((v6 & 1) != 0)
  {
    if (qword_1001C7FD0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1001C7FD0, sub_1000BD660);
LABEL_3:
  sub_10002588C();
  sub_100067984();
  sub_1000BC4B4();
  unint64_t v7 = v2[7];
  sub_100020A94((uint64_t)(v2 + 8), (uint64_t)&v21);
  if (*(void *)(v2[8] + 16LL) < (int64_t)v7)
  {
    while (1)
    {
      sub_10010278C();
      if (!v8) {
        break;
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_100102AE0();
      uint64_t v12 = v11;
      sub_10000DC44((uint64_t)(v2 + 8), (uint64_t)v20, 33LL);
      uint64_t v13 = sub_10002C7D4();
      sub_100034310(v13, v10, v12, v14, v15, v16, v17, v18, v20[0], v20[1]);
      sub_1001058C4();
      sub_10001C258();
      sub_10002588C();
      sub_10002C7D4();
      sub_100067984();
      sub_1000BC610();
      uint64_t v19 = sub_10000DDDC((uint64_t)&unk_1001B0A58, 32LL);
      *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
      *(void *)(v19 + 24) = v9;
      swift_retain_n(v2, 2LL);
      sub_10002C7D4();
      sub_1001037C8();
      swift_release(v9);
      sub_10001A2D8();
      swift_release(v19);
      if (*(void *)(v2[8] + 16LL) >= v7) {
        goto LABEL_8;
      }
    }

    sub_10002588C();
    sub_100067984();
    sub_1000BC62C();
  }

LABEL_8:
  sub_10000DD84();
}

uint64_t sub_100102F28(char a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = (void *)a2[9];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once(&qword_1001C7FD0, sub_1000BD660);
    goto LABEL_6;
  }

  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v14 = sub_100102AE0();
  uint64_t v16 = v15;
  swift_beginAccess(a2 + 8, v22, 33LL, 0LL);
  uint64_t v17 = sub_100033930(v14, v16);
  swift_endAccess(v22);
  swift_bridgeObjectRelease();
  swift_release(v17);
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(a2 + 2, v22, 33LL, 0LL);
    swift_bridgeObjectRetain(v12);
    uint64_t v18 = sub_100033930(v13, v12);
    swift_endAccess(v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_beginAccess(a2 + 3, v22, 33LL, 0LL);
    uint64_t v19 = (uint64_t (*)(uint64_t *, uint64_t *))a2[5];
    uint64_t v18 = a2[6];
    swift_retain(v18);
    sub_100101598(a2 + 4, v19, v18, a3);
    swift_endAccess(v22);
  }

  swift_release(v18);
  if (qword_1001C7FD0 != -1) {
    goto LABEL_8;
  }
LABEL_6:
  swift_retain(a2);
  swift_retain(a3);
  sub_1000BCE08();
  return sub_100102D30();
}

void PriorityQueue.deinit()
{
  swift_bridgeObjectRelease();
  sub_100009044();
}

uint64_t PriorityQueue.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 96LL, 7LL);
}

uint64_t sub_100103198()
{
  return PriorityQueue.debugDescription.getter();
}

uint64_t type metadata accessor for PriorityQueue()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd13PriorityQueue);
}

uint64_t sub_1001031D8()
{
  v12[0] = 0LL;
  v12[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(49LL);
  v1._uint64_t countAndFlagsBits = 0x203A70706128LL;
  v1._object = (void *)0xE600000000000000LL;
  String.append(_:)(v1);
  char v11 = *v0;
  _print_unlocked<A, B>(_:_:)( &v11,  v12,  &unk_1001A8968,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  sub_1001058F8(0x656972726162202CLL, 14962LL);
  if ((v0[1] & 1) != 0) {
    uint64_t v2 = 1702195828LL;
  }
  else {
    uint64_t v2 = 0x65736C6166LL;
  }
  if ((v0[1] & 1) != 0) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE500000000000000LL;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  sub_1000090CC();
  v5._uint64_t countAndFlagsBits = 0x4B6863746162202CLL;
  v5._object = (void *)0xEC000000203A7965LL;
  String.append(_:)(v5);
  uint64_t v6 = *((void *)v0 + 1);
  uint64_t v7 = (void *)*((void *)v0 + 2);
  sub_10000DF10();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  sub_10000DE2C();
  v9._object = (void *)0xEC000000203A7974LL;
  v9._uint64_t countAndFlagsBits = 0x69726F697270202CLL;
  String.append(_:)(v9);
  sub_10000DEE0();
  sub_1001058EC();
  sub_100009020();
  return v12[0];
}

void sub_100103344(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_1001033AC()
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100103418 + 4 * byte_100168374[*v0]))(0x6C616E7265746E69LL);
}

uint64_t sub_100103418(uint64_t a1)
{
  if (a1 == 0x6C616E7265746E69LL && v3 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  else
  {
    char v5 = sub_100025718(a1, v3, 0x6C616E7265746E69LL, 0xE800000000000000LL);
    sub_10000DE2C();
    sub_1000090CC();
    char v6 = 0;
    if ((v5 & 1) == 0) {
      return v6 & 1;
    }
  }

  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = *(void *)(v1 + 32);
  BOOL v11 = v7 == v9 && v8 == v10;
  if (v11 || (v12 = sub_100025718(v7, v8, v9, v10), char v6 = 0, (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(v2 + 8);
    uint64_t v14 = *(void *)(v2 + 16);
    uint64_t v15 = *(void *)(v1 + 8);
    uint64_t v16 = *(void *)(v1 + 16);
    BOOL v17 = v13 == v15 && v14 == v16;
    if (v17 || (v18 = sub_100025718(v13, v14, v15, v16), char v6 = 0, (v18 & 1) != 0)) {
      char v6 = ((*(_BYTE *)(v2 + 1) & 1) == 0) ^ *(_BYTE *)(v1 + 1);
    }
  }

  return v6 & 1;
}

uint64_t sub_100103518()
{
  uint64_t v7 = 0LL;
  *(void *)&__int128 v8 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(54LL);
  v11[0] = 0LL;
  v11[1] = 0xE000000000000000LL;
  sub_10010589C(0x282072656B726F57LL, 0x3A79656Bu);
  char v1 = *(_BYTE *)(v0 + 49);
  __int128 v2 = *(_OWORD *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  LOBYTE(v7) = *(_BYTE *)(v0 + 48);
  BYTE1(v7) = v1;
  __int128 v8 = v2;
  uint64_t v9 = v3;
  uint64_t v10 = v4;
  _print_unlocked<A, B>(_:_:)( &v7,  v11,  &type metadata for WorkerKey,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v5._object = (void *)0x8000000100176060LL;
  v5._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v5);
  uint64_t result = sub_100020A94(v0 + 16, (uint64_t)&v7);
  if (__OFSUB__(*(void *)(v0 + 40) >> 1, *(void *)(v0 + 32)))
  {
    __break(1u);
  }

  else
  {
    v12._uint64_t countAndFlagsBits = sub_10010582C();
    sub_100105880(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v13._object = (void *)0x8000000100176080LL;
    sub_100105880(v13);
    v14._uint64_t countAndFlagsBits = sub_10010582C();
    sub_100105880(v14);
    sub_100009020();
    return v11[0];
  }

  return result;
}

void sub_100103670(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000DDDC((uint64_t)&unk_1001B0A08, 32LL);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  sub_10000DC44((uint64_t)(v3 + 2), (uint64_t)v11, 33LL);
  swift_retain(a2);
  sub_10010461C();
  uint64_t v7 = v3[4];
  uint64_t v8 = v3[5] >> 1;
  uint64_t v9 = v8 - v7;
  if (__OFSUB__(v8, v7))
  {
    __break(1u);
    goto LABEL_5;
  }

  sub_10010467C(v8 - v7);
  sub_10010480C((void *)(v9 + 1));
  uint64_t v10 = (uint64_t (**)(uint64_t *))(v3[3] + 16LL * v3[4] + 16 * v9);
  *uint64_t v10 = sub_1001056C4;
  v10[1] = (uint64_t (*)(uint64_t *))v6;
  swift_endAccess(v11);
  if (qword_1001C7FD0 != -1) {
LABEL_5:
  }
    swift_once(&qword_1001C7FD0, sub_1000BD660);
  sub_10002588C();
  sub_100067984();
  sub_1000BB718();
}

uint64_t sub_10010375C(uint64_t *a1, void (*a2)(void (*)(), uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject(&unk_1001B0A30, 32LL, 7LL);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain(v3);
  a2(sub_1000667AC, v5);
  return swift_release(v5);
}

void sub_1001037C8()
{
  char v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  BOOL v11 = v10;
  uint64_t v12 = sub_10010580C();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_10000DE7C();
  uint64_t v16 = v15 - v14;
  *(void *)(v15 - vsub_10000D3A0(v0 + 14) = v11;
  (*(void (**)(uint64_t, void, uint64_t))(v13 + 104))( v15 - v14,  enum case for DispatchPredicate.onQueue(_:),  v12);
  id v17 = v11;
  char v18 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  if ((v18 & 1) != 0)
  {
    if (qword_1001C7FD0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1001C7FD0, sub_1000BD660);
LABEL_3:
  sub_10000DFF4();
  sub_1000BBEDC();
  sub_10000DC44((uint64_t)(v1 + 2), (uint64_t)&v41, 1LL);
  uint64_t v19 = v1[4];
  unint64_t v20 = v1[5];
  if (v19 == v20 >> 1)
  {
    sub_10000DFF4();
    sub_1000BC330();
    v1[12] = 0LL;
    uint64_t v21 = 1LL;
    goto LABEL_8;
  }

  if (v19 < (uint64_t)(v20 >> 1))
  {
    char v22 = (void *)(v1[3] + 16 * v19);
    uint64_t v24 = (void (*)(void *))*v22;
    uint64_t v23 = v22[1];
    swift_retain(v23);
    if ((v9(v1) & 1) == 0)
    {
      uint64_t v38 = v3;
      uint64_t v39 = v24;
      uint64_t v25 = v1[2];
      uint64_t v26 = v1[3];
      uint64_t v37 = v17;
      uint64_t v28 = v1[4];
      unint64_t v27 = v1[5];
      swift_unknownObjectRetain(v25);
      uint64_t v29 = sub_100101210(1LL, v25, v26, v28, v27);
      uint64_t v30 = v1[2];
      v1[2] = v29;
      v1[3] = v31;
      v1[4] = v32;
      v1[5] = v33;
      swift_unknownObjectRelease(v30);
      sub_10000DFF4();
      sub_1000BC040();
      unint64_t v34 = (void *)sub_10000DDDC((uint64_t)&unk_1001B0968, 64LL);
      v34[2] = v1;
      void v34[3] = v37;
      v34[4] = v9;
      v34[5] = v7;
      v34[6] = v5;
      v34[7] = v38;
      uint64_t v35 = sub_10000DDDC((uint64_t)&unk_1001B0990, 32LL);
      *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1001051F4;
      *(void *)(v35 + 24) = v34;
      v40[0] = sub_1000667AC;
      v40[1] = v35;
      id v36 = v37;
      sub_10000DFF4();
      sub_100048DB4();
      sub_10002588C();
      swift_retain(v34);
      v39(v40);
      swift_release(v23);
      swift_release(v34);
      swift_release(v35);
      goto LABEL_10;
    }

    swift_release(v23);
    sub_10000DFF4();
    sub_1000BC1B8();
    v1[12] = 0LL;
    uint64_t v21 = 0LL;
LABEL_8:
    v5(v21);
LABEL_10:
    sub_10000DD84();
    return;
  }

  __break(1u);
}

uint64_t sub_100103A3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a1 + 96);
  BOOL v22 = __OFADD__(v21, 1LL);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
    goto LABEL_5;
  }

  uint64_t v32 = v18;
  uint64_t v33 = v17;
  uint64_t v34 = v13;
  *(void *)(a1 + 96) = v23;
  if (qword_1001C7FD0 != -1) {
LABEL_5:
  }
    swift_once(&qword_1001C7FD0, sub_1000BD660);
  swift_retain(a1);
  sub_1000BD028();
  uint64_t v24 = (void *)swift_allocObject(&unk_1001B09B8, 64LL, 7LL);
  v24[2] = a1;
  v24[3] = a2;
  v24[4] = a3;
  v24[5] = a4;
  v24[6] = a5;
  v24[7] = a6;
  aBlock[4] = sub_100105240;
  uint64_t v37 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  aBlock[3] = &unk_1001B09D0;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain(a1);
  a2;
  swift_retain(a4);
  uint64_t v26 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_100105280( (unint64_t *)&qword_1001CD3E0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v28 = v27;
  uint64_t v29 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v29, v30, v12, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v20, v15, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v33);
  return swift_release(v37);
}

uint64_t sub_100103CB4()
{
  int v1 = *(unsigned __int8 *)(v0 + 49);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  int v7 = *(unsigned __int8 *)(v6 + 49);
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(void *)(v6 + 72);
  uint64_t v11 = *(void *)(v6 + 80);
  sub_100020F3C(*(_BYTE *)(v0 + 48));
  if ((v12 & 1) == 0) {
    return 0LL;
  }
  BOOL v13 = v4 == v10 && v5 == v11;
  if (v13 || (v14 = sub_100025718(v4, v5, v10, v11), uint64_t result = 0LL, (v14 & 1) != 0))
  {
    if (v2 == v8 && v3 == v9) {
      return v1 ^ v7 ^ 1u;
    }
    char v17 = sub_100025718(v2, v3, v8, v9);
    uint64_t result = 0LL;
    if ((v17 & 1) != 0) {
      return v1 ^ v7 ^ 1u;
    }
  }

  return result;
}

void sub_100103D74()
{
}

uint64_t sub_100103DA4()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t destroy for WorkerKey(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for WorkerKey(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for WorkerKey(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for WorkerKey(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WorkerKey(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkerKey(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_10000D3A0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkerKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for WorkerKey()
{
  return &type metadata for WorkerKey;
}

uint64_t sub_100103FAC(uint64_t *a1, uint64_t *a2)
{
  return sub_1001012C8(*a1, *a2) & 1;
}

uint64_t sub_100103FD8()
{
  return sub_100103518();
}

uint64_t sub_100103FF8()
{
  return sub_100103CB4() & 1;
}

void sub_100104018(uint64_t a1, uint64_t a2)
{
}

void *sub_100104044(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_10000D33C(&qword_1001CD430);
      uint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      size_t v5 = j__malloc_size(v4);
      v4[2] = v2;
      v4[3] = (2 * ((uint64_t)(v5 - 32) / 8)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v6 = sub_100104D20((uint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v7;
    swift_bridgeObjectRelease(v6);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_8:
    if (v1 < 0) {
      uint64_t v8 = v1;
    }
    else {
      uint64_t v8 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void sub_100104134(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = sub_10000D33C(&qword_1001C8EA0);
    uint64_t v3 = (const void *)sub_10000DDDC(v2, 16 * v1 + 32);
    size_t v4 = j__malloc_size(v3);
    sub_100105760(v4);
    sub_100104224(v5, v6, v7, v8);
    sub_1001057C4();
    sub_10010583C();
    if (!v9) {
      __break(1u);
    }
  }

  sub_100105788();
}

void sub_1001041AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = sub_10000D33C(&qword_1001C8EA0);
    uint64_t v3 = (const void *)sub_10000DDDC(v2, 16 * v1 + 32);
    size_t v4 = j__malloc_size(v3);
    sub_100105760(v4);
    sub_100104420(v5, v6, v7, v8);
    sub_1001057C4();
    sub_10010583C();
    if (!v9) {
      __break(1u);
    }
  }

  sub_100105788();
}

uint64_t sub_100104224(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    __n128 result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_100104420(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    __n128 result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t sub_10010461C()
{
  unint64_t v1 = v0[3];
  if ((v1 & 1) == 0 || (v2 = *v0, result = swift_isUniquelyReferenced_nonNull(*v0), *uint64_t v0 = v2, (result & 1) == 0))
  {
    uint64_t v4 = v0[2];
    uint64_t result = (v1 >> 1) - v4;
    if (__OFSUB__(v1 >> 1, v4)) {
      __break(1u);
    }
    else {
      return sub_100104764((void *)result);
    }
  }

  return result;
}

uint64_t sub_10010467C(uint64_t result)
{
  uint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  uint64_t v5 = (v3 >> 1) - v4;
  if (__OFSUB__(v3 >> 1, v4))
  {
    __break(1u);
    return sub_100104764(v1);
  }

  unint64_t v1 = (void *)result;
  if ((v3 & 1) != 0)
  {
    uint64_t v6 = *v2;
    uint64_t v7 = v2[1];
    uint64_t v8 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v9 = swift_unknownObjectRetain(v6);
    uint64_t v10 = (void *)swift_dynamicCastClass(v9, v8);
    if (!v10)
    {
      swift_unknownObjectRelease(v6);
      uint64_t v10 = _swiftEmptyArrayStorage;
    }

    uint64_t v11 = v10[2];
    if ((void *)(v7 + 16 * v4 + 16 * v5) == &v10[2 * v11 + 4])
    {
      unint64_t v12 = v10[3];
      uint64_t result = swift_release(v10);
      uint64_t v13 = (v12 >> 1) - v11;
      BOOL v14 = __OFADD__(v5, v13);
      v5 += v13;
      if (v14)
      {
        __break(1u);
        return result;
      }
    }

    else
    {
      uint64_t result = swift_release(v10);
    }
  }

  return result;
}

uint64_t sub_100104764(void *a1)
{
  uint64_t v3 = (uint64_t)a1 + 1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  uint64_t v6 = v1[2];
  unint64_t v7 = v1[3];
  swift_unknownObjectRetain(*v1);
  uint64_t v8 = sub_1001048C0(a1, v3, v4, v5, v6, v7);
  swift_unknownObjectRelease(v4);
  uint64_t v13 = v8;
  uint64_t v9 = (void (*)(uint64_t, uint64_t))sub_100104ABC();
  uint64_t v11 = v10;
  sub_100104ACC((uint64_t)&v13, (uint64_t)a1, 0LL, v9);
  swift_release(v11);
  return swift_release(v8);
}

void *sub_10010480C(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }

  unint64_t v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v7) {
    return result;
  }
  uint64_t v8 = *v1;
  uint64_t v9 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v10 = swift_unknownObjectRetain(v8);
  uint64_t result = (void *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    uint64_t result = &_swiftEmptyArrayStorage;
  }

  uint64_t v11 = result[2];
  BOOL v5 = __OFADD__(v11, v7);
  unint64_t v12 = &v7[v11];
  if (v5) {
    goto LABEL_13;
  }
  result[2] = v12;
  uint64_t result = (void *)swift_release(result);
  uint64_t v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (((unint64_t)v13 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  v1[3] = v3 & 1 | (2LL * (void)v13);
  return result;
}

void *sub_1001048C0(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000LL >= 0)
    {
      v8 *= 2LL;
      goto LABEL_21;
    }

    __break(1u);
    goto LABEL_35;
  }

  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v12 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v13 = swift_unknownObjectRetain(a3);
  BOOL v14 = (void *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    BOOL v14 = _swiftEmptyArrayStorage;
  }

  uint64_t v15 = v14[2];
  uint64_t v16 = a4 + 16 * a5 + 16 * v8;
  if ((void *)v16 == &v14[2 * v15 + 4])
  {
    unint64_t v18 = v14[3];
    uint64_t result = (void *)swift_release(v14);
    uint64_t v19 = (v18 >> 1) - v15;
    uint64_t v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }

  else
  {
    swift_release(v14);
    uint64_t v17 = v8;
  }

  uint64_t v20 = swift_unknownObjectRetain(a3);
  uint64_t v21 = (void *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      uint64_t v21 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = v21[2];
    if ((void *)v16 == &v21[2 * v22 + 4])
    {
      unint64_t v24 = v21[3];
      uint64_t result = (void *)swift_release(v21);
      uint64_t v25 = (v24 >> 1) - v22;
      BOOL v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }

    else
    {
      uint64_t result = (void *)swift_release(v21);
    }

    goto LABEL_18;
  }

  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    uint64_t v21 = _swiftEmptyArrayStorage;
  }

  uint64_t v23 = v21[2];
  if ((void *)v16 == &v21[2 * v23 + 4])
  {
    unint64_t v27 = v21[3];
    uint64_t result = (void *)swift_release(v21);
    uint64_t v28 = (v27 >> 1) - v23;
    BOOL v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26) {
      goto LABEL_21;
    }
LABEL_37:
    __break(1u);
    return result;
  }

  swift_release(v21);
LABEL_21:
  if (v8 <= v7) {
    uint64_t v29 = v7;
  }
  else {
    uint64_t v29 = v8;
  }
  else {
    uint64_t v30 = v29;
  }
  if (!v30) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v31 = sub_10000D33C(&qword_1001CDE78);
  uint64_t v32 = (void *)swift_allocObject(v31, 16 * v30 + 32, 7LL);
  size_t v33 = j__malloc_size(v32);
  v32[2] = v6;
  void v32[3] = 2 * ((uint64_t)(v33 - 32) / 16);
  return v32;
}

uint64_t (*sub_100104ABC())(void)
{
  return nullsub_1;
}

uint64_t sub_100104ACC(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v5 = v4[2];
  unint64_t v6 = (unint64_t)v4[3] >> 1;
  unint64_t v7 = v6 - v5;
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v9 = *(void *)result;
  uint64_t v10 = *(void *)(*(void *)result + 16LL);
  BOOL v11 = __OFSUB__(v10, a2);
  uint64_t v12 = v10 - a2;
  if (v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v13 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  BOOL v14 = (char *)(v7 - a2);
  if (__OFSUB__(v7, a2))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  BOOL v11 = __OFSUB__(v14, v13);
  uint64_t v15 = &v14[-v13];
  if (v11)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v16 = v4;
  id v40 = v15;
  unint64_t v18 = (char *)(v9 + 32);
  uint64_t v19 = v9 + 32 + 16 * a2;
  uint64_t v38 = v13;
  uint64_t v39 = (char *)(v19 + 16 * a3);
  uint64_t result = sub_100105300((void *)v7);
  if (result)
  {
    uint64_t v20 = result;
    uint64_t v36 = v4[2];
    uint64_t v35 = a4;
    uint64_t v21 = (char *)(v4[1] + 16 * v36);
    uint64_t v22 = result + 32;
    uint64_t v23 = (uint64_t)&v21[-result - 32] / 16;
    uint64_t v37 = v9;
    uint64_t v24 = sub_10000D33C(&qword_1001C8FA8);
    swift_arrayDestroy(v22, v23, v24);
    sub_100016000(v21, a2, v18);
    swift_arrayDestroy(&v21[16 * a2], v40, v24);
    v35(v19, a3);
    sub_100016000(&v21[16 * a2 + 16 * (void)v40], v38, v39);
    uint64_t v25 = v24;
    uint64_t v9 = v37;
    swift_arrayDestroy(&v21[16 * v7], (v22 + 16LL * *(void *)(v20 + 16) - (uint64_t)&v21[16 * v7]) / 16, v25);
    *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    uint64_t v26 = v20;
    uint64_t v27 = v36;
    swift_release(v26);
LABEL_15:
    uint64_t v31 = *v16;
    swift_retain(v9);
    swift_unknownObjectRelease(v31);
    uint64_t result = sub_1001052B8(v9, v27);
    *uint64_t v16 = result;
    v16[1] = v32;
    void v16[2] = v33;
    v16[3] = v34;
    return result;
  }

  uint64_t v27 = v4[2];
  uint64_t v28 = v27 + a2;
  if (__OFADD__(v27, a2)) {
    goto LABEL_21;
  }
  if (v28 < v27)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (__OFSUB__(v28, v27))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  sub_10000D33C(&qword_1001C8FA8);
  swift_arrayInitWithCopy(v9 + 32);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))a4)(&v18[16 * a2], a3);
  uint64_t v29 = &v40[v28];
  if (__OFADD__(v28, v40))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  int64_t v30 = (unint64_t)v4[3] >> 1;
  if (v30 < (uint64_t)v29)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (!__OFSUB__(v30, v29))
  {
    swift_arrayInitWithCopy(v39);
    goto LABEL_15;
  }

uint64_t sub_100104D20(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v14);
    uint64_t result = swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a3);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = swift_bridgeObjectRelease(a3);
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10000D890(&qword_1001CDE70, &qword_1001CDE68);
          swift_bridgeObjectRetain(a3);
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_10000D33C(&qword_1001CDE68);
            BOOL v11 = sub_100105038(v15, i, a3);
            uint64_t v13 = *v12;
            swift_retain(*v12);
            ((void (*)(uint64_t **, void))v11)(v15, 0LL);
            *(void *)(v5 + 8 * i) = v13;
          }

          swift_bridgeObjectRelease(a3);
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_1000164E8((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100104EB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10000DEE0();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    uint64_t result = sub_100009020();
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (v5)
  {
    if (v6)
    {
      if (a3 < 0) {
        uint64_t v8 = a3;
      }
      else {
        uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10000DEE0();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v8);
      uint64_t result = sub_100009020();
      if (v9 <= a2)
      {
        if (v7 >= 1)
        {
          sub_10000D890((unint64_t *)&unk_1001CDE80, &qword_1001C8F88);
          sub_10000DEE0();
          for (uint64_t i = 0LL; i != v7; ++i)
          {
            sub_10000D33C(&qword_1001C8F88);
            sub_100105090(v16, i, a3);
            uint64_t v12 = v11;
            id v14 = *v13;
            v12(v16, 0LL);
            *(void *)(v5 + 8 * i) = v14;
          }

          sub_100009020();
          return a3;
        }

        goto LABEL_22;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        sub_100016CE4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10));
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

void (*sub_100105038(uint64_t **a1, uint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_100105108(v6, a2, a3);
  return sub_10010508C;
}

void sub_100105090(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  sub_10010517C(v6, a2, a3);
  v6[4] = v7;
  sub_10000DFE8();
}

void sub_1001050DC(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

uint64_t (*sub_100105108(uint64_t *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_100063D14(a2, (a3 & 0xC000000000000001LL) == 0);
  if (v6) {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    uint64_t v7 = swift_retain(*(void *)(a3 + 8 * a2 + 32));
  }
  *a1 = v7;
  return sub_100105174;
}

uint64_t sub_100105174(void *a1)
{
  return swift_release(*a1);
}

void sub_10010517C(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = a3 & 0xC000000000000001LL;
  sub_100063D14(a2, (a3 & 0xC000000000000001LL) == 0);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  sub_10000DFE8();
}

uint64_t sub_1001051E4(uint64_t *a1, uint64_t *a2)
{
  return sub_1001012C8(*a1, *a2);
}

uint64_t sub_1001051F4()
{
  return sub_100103A3C( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56));
}

uint64_t sub_100105208()
{
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100105240()
{
}

uint64_t sub_100105268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100105278(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100105280(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!*a1)
  {
    uint64_t v4 = a3(a2);
    atomic_store(sub_10000DFD4(v4), a1);
  }

  sub_100009044();
}

uint64_t sub_1001052B8(uint64_t result, uint64_t a2)
{
  if (__OFSUB__(0LL, a2))
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v2 = *(void *)(result + 16);
  BOOL v3 = __OFADD__(a2, v2);
  uint64_t v4 = a2 + v2;
  if (v3)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v4 < a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0) {
LABEL_9:
  }
    __break(1u);
  return result;
}

uint64_t sub_100105300(void *a1)
{
  isUniquelyReferenced_nonNull = (char *)swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull) {
    return 0LL;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v9 = *v1;
  uint64_t v10 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v11 = swift_unknownObjectRetain(v9);
  uint64_t v12 = (void *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    uint64_t v12 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v12[2];
  if ((void *)(v8 + 16 * v6 + 16 * v7) != &v12[2 * v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    uint64_t v14 = v7;
    goto LABEL_10;
  }

  unint64_t v15 = v12[3];
  uint64_t result = swift_release(v12);
  uint64_t v17 = (v15 >> 1) - v13;
  BOOL v18 = __OFADD__(v7, v17);
  uint64_t v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    uint64_t v19 = *v1;
    uint64_t v20 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v21 = swift_unknownObjectRetain(v19);
    a1 = (void *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }

    uint64_t v22 = (v8 + 16 * v6 - (uint64_t)a1 - 32) / 16;
    isUniquelyReferenced_nonNull = (char *)(v7 + v22);
    if (!__OFADD__(v7, v22))
    {
      uint64_t v4 = a1[2];
LABEL_19:
      sub_100105468(isUniquelyReferenced_nonNull, v4, 0LL);
      return (uint64_t)a1;
    }

char *sub_100105468(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v7 = *v3;
  uint64_t v8 = v7 + 32 + 16LL * (void)result;
  uint64_t v9 = sub_10000D33C(&qword_1001C8FA8);
  uint64_t result = (char *)swift_arrayDestroy(v8, v4, v9);
  BOOL v10 = __OFSUB__(a3, v4);
  uint64_t v11 = a3 - v4;
  if (v10)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (!v11) {
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (__OFSUB__(v12, a2)) {
    goto LABEL_11;
  }
  uint64_t result = sub_100016000((char *)(v7 + 32 + 16 * a2), v12 - a2, (char *)(v8 + 16 * a3));
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v10 = __OFADD__(v13, v11);
  uint64_t v14 = v13 + v11;
  if (v10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
LABEL_7:
  if (a3 > 0) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_100105518(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  *unint64_t v1 = v3;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_100065634(v3);
    uint64_t v3 = result;
    *unint64_t v1 = result;
  }

  unint64_t v5 = *(void *)(v3 + 16);
  if (v5 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v6 = v5 - 1;
    uint64_t v7 = v5 - 1 - a1;
    uint64_t v8 = v3 + 8 * a1;
    uint64_t v9 = *(void *)(v8 + 32);
    BOOL v10 = sub_100016160((char *)(v8 + 40), v7, (char *)(v8 + 32));
    *(void *)(*v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    specialized ContiguousArray._endMutation()(v10);
    return v9;
  }

  return result;
}

uint64_t sub_100105598()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v0);
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    uint64_t result = sub_100065634(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }

  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = v3 - 1;
    uint64_t v5 = *(void *)(v1 + 8 * v4 + 32);
    *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
    specialized ContiguousArray._endMutation()(result);
    return v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100105600(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((a2 & 0x8000000000000000LL) == 0) {
    return swift_unknownObjectRetain(a3);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100105678(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }

  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0LL;
    }
  }

  else if ((v3 & 0x8000000000000000LL) == 0 && v3 < (unint64_t)a2)
  {
    return 0LL;
  }

  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1001056C4(uint64_t *a1)
{
  return sub_10010375C(a1, *(void (**)(void (*)(), uint64_t))(v1 + 16));
}

uint64_t sub_1001056CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001056F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10010571C(char a1)
{
  return sub_100102F28(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100105724()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10010574C()
{
  return sub_1001023AC(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_100105760(uint64_t a1)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((a1 - 32) / 16);
}

  ;
}

void sub_1001057A4(uint64_t a1@<X8>, uint64_t a2)
{
  *(uint64_t *)((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL)) = *(void *)(v2 + 72);
}

uint64_t sub_1001057C4()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1001057DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1001057F0()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 - 8) + 80LL);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t sub_10010580C()
{
  return type metadata accessor for DispatchPredicate(0LL);
}

void sub_100105814(id *a1)
{
}

uint64_t sub_10010581C(uint64_t a1)
{
  return Dictionary.description.getter(a1, v3, v1, v2);
}

uint64_t sub_10010582C()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_10010583C()
{
  return sub_10004844C(v0);
}

uint64_t sub_100105864(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_100105874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(v4, a2, v5, a4);
}

void sub_100105880(Swift::String a1)
{
}

  ;
}

void sub_10010589C(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = a2 | 0xED00002000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_1001058A8()
{
  return sub_100101A10(0LL);
}

void sub_1001058B4(Swift::String a1)
{
}

uint64_t sub_1001058BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 1LL);
}

uint64_t sub_1001058C4()
{
  return swift_endAccess(v0 - 128);
}

uint64_t sub_1001058CC@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

void sub_1001058EC()
{
  v2._uint64_t countAndFlagsBits = v1;
  v2._object = v0;
  String.append(_:)(v2);
}

void sub_1001058F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0xFFFF0000FFFFLL | 0xEB00000000200000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

id sub_100105904()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for PushService()) init];
  qword_1001DBBB0 = (uint64_t)result;
  return result;
}

void sub_100105930(uint64_t a1)
{
  unint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC14amsengagementd11PushService_connection);
  *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd11PushService_connection) = a1;
}

id sub_100105944()
{
  uint64_t v32 = v3;
  uint64_t v33 = v4;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = sub_1001073B4();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(v6);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_1000292E4();
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd11PushService_connection] = 0LL;
  uint64_t v27 = OBJC_IVAR____TtC14amsengagementd11PushService_connectionQueue;
  v26[1] = sub_10000DE08(v10, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v13 = qword_1001C80B8;
  uint64_t v14 = v0;
  if (v13 != -1) {
    swift_once(&qword_1001C80B8, sub_10010D688);
  }
  uint64_t v15 = qword_1001DBBC8;
  static DispatchQoS.unspecified.getter((id)qword_1001DBBC8);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100107324( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_1000673F0();
  uint64_t v18 = sub_1001073DC((unint64_t *)&qword_1001CAAC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v17, v18, v7, v16);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v1,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v28);
  sub_100048BA0();
  uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000024LL,  v19,  v12,  v2,  v1,  v15);
  *(void *)&v14[v27] = v20;
  uint64_t v21 = sub_10000D33C(&qword_1001CDF58);
  uint64_t inited = swift_initStackObject(v21, &v30);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = 0xD000000000000033LL;
  *(void *)(inited + 40) = 0x80000001001746F0LL;
  uint64_t v23 = sub_10000D33C(&qword_1001CDF38);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(void *)(inited + 48) = PassthroughSubject.init()();
  *(void *)&v14[OBJC_IVAR____TtC14amsengagementd11PushService_publishers] = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  v23,  &protocol witness table for String);

  uint64_t v24 = (objc_class *)type metadata accessor for PushService();
  v29.receiver = v14;
  v29.super_class = v24;
  return objc_msgSendSuper2(&v29, "init");
}

void sub_100105BF0()
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v14 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_1001073B4();
  uint64_t v5 = type metadata accessor for DispatchQoS(v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000292E4();
  uint64_t v7 = *(void **)&v0[OBJC_IVAR____TtC14amsengagementd11PushService_connectionQueue];
  uint64_t v8 = swift_allocObject(&unk_1001B0B20, 24LL, 7LL);
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  void v16[4] = sub_100107304;
  v16[5] = v8;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  void v16[2] = sub_100021A3C;
  v16[3] = &unk_1001B0B38;
  uint64_t v9 = _Block_copy(v16);
  id v10 = v7;
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100107324( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v12 = sub_1000673F0();
  uint64_t v13 = sub_1001073DC((unint64_t *)&qword_1001CD3F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v12, v13, v3, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v9);
  _Block_release(v9);

  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v5);
  swift_release();
  sub_10000DD84();
}

void sub_100105DA4(char *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = *(void **)&a1[OBJC_IVAR____TtC14amsengagementd11PushService_connection];
  if (v5)
  {
    id v6 = v5;
    [v6 shutdown];
    sub_100105930(0LL);
  }

  id v7 = [(id)objc_opt_self(AMSDefaults) pushEnvironment];
  uint64_t v8 = &APSEnvironmentDevelopment;
  if (v7 != (id)2) {
    uint64_t v8 = &APSEnvironmentProduction;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v8);
  uint64_t v11 = v10;
  uint64_t v12 = &_s9JetEngine9JSPromiseV5valueSo7JSValueCvg_ptr;
  uint64_t v13 = objc_opt_self(&OBJC_CLASS___APSConnection);
  swift_bridgeObjectRetain(v11);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v13) = [(id)v13 isValidEnvironment:v14];

  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)&a1[OBJC_IVAR____TtC14amsengagementd11PushService_publishers]);
    sub_1001041AC(v15);
    uint64_t v73 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
          + 2LL * *(void *)(v18 + 72),
            *(unsigned __int8 *)(v18 + 80) | 7LL);
    *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v79 = (void *)type metadata accessor for PushService();
    __int128 v77 = a1;
    uint64_t v20 = a1;
    id v21 = (id)AMSLogKey(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v79;
      uint64_t v28 = sub_10000D37C(&v77, (uint64_t)v79);
      uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v74 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v30._uint64_t countAndFlagsBits = 5972026LL;
      v30._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      MetatypeMetadata = &type metadata for String;
      uint64_t v74 = v23;
      uint64_t v75 = v25;
      uint64_t v12 = &_s9JetEngine9JSPromiseV5valueSo7JSValueCvg_ptr;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v31._uint64_t countAndFlagsBits = 93LL;
      v31._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      LogMessage.init(stringInterpolation:)(v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v46._uint64_t countAndFlagsBits = 0LL;
      v46._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      unsigned __int16 v47 = v79;
      uint64_t v48 = sub_10000D37C(&v77, (uint64_t)v79);
      uint64_t v49 = swift_getDynamicType(v48, v47, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v49);
      uint64_t v74 = v49;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v50._uint64_t countAndFlagsBits = 58LL;
      v50._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v50);
      LogMessage.init(stringInterpolation:)(v4);
    }

    sub_10000D3A0(&v77);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 2LL);
    v51._uint64_t countAndFlagsBits = 0xD000000000000027LL;
    v51._object = (void *)0x80000001001761B0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v51);
    uint64_t v79 = &type metadata for String;
    __int128 v77 = (char *)v9;
    uint64_t v78 = v11;
    swift_bridgeObjectRetain(v11);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v77);
    sub_10000E888((uint64_t)&v77);
    v52._uint64_t countAndFlagsBits = 0x736369706F74202CLL;
    v52._object = (void *)0xEA0000000000203ALL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v52);
    uint64_t v79 = (void *)sub_10000D33C(&qword_1001CDF50);
    uint64_t v53 = v73;
    __int128 v77 = (char *)v73;
    swift_retain(v73);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v77);
    sub_10000E888((uint64_t)&v77);
    v54._uint64_t countAndFlagsBits = 41LL;
    v54._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v54);
    uint64_t v55 = LogMessage.init(stringInterpolation:)(v4);
    if (qword_1001C7F80 != -1) {
      uint64_t v55 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v56 = static os_log_type_t.info.getter(v55);
    sub_1000BD1B0(v56, v19);
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void **)&v20[OBJC_IVAR____TtC14amsengagementd11PushService_connectionQueue];
    id v58 = objc_allocWithZone((Class)v12[508]);
    id v59 = v57;
    id v60 = sub_100107138(v9, v11, 0xD00000000000001CLL, 0x80000001001761E0LL, v57);
    if (v60)
    {
      uint64_t v61 = v60;
      [v60 setDelegate:v20];
      sub_1001071E0(v53, v61);
      id v62 = v61;
      sub_100105930((uint64_t)v61);
    }

    else
    {
      swift_release();
    }
  }

  else
  {
    uint64_t v32 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v33 = type metadata accessor for LogMessage(0LL);
    uint64_t v34 = swift_allocObject( v32,  ((*(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v33 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v33 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v79 = (void *)type metadata accessor for PushService();
    __int128 v77 = a1;
    id v35 = (id)AMSLogKey(a1);
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v39 = v38;

      swift_bridgeObjectRetain(v39);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v40._uint64_t countAndFlagsBits = 0LL;
      v40._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t v41 = v79;
      NSString v42 = sub_10000D37C(&v77, (uint64_t)v79);
      uint64_t v43 = swift_getDynamicType(v42, v41, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v43);
      uint64_t v74 = v43;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v44._uint64_t countAndFlagsBits = 5972026LL;
      v44._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      MetatypeMetadata = &type metadata for String;
      uint64_t v74 = v37;
      uint64_t v75 = v39;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v45._uint64_t countAndFlagsBits = 93LL;
      v45._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      LogMessage.init(stringInterpolation:)(v4);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v63._uint64_t countAndFlagsBits = 0LL;
      v63._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v63);
      uint64_t v64 = v79;
      uint64_t v65 = sub_10000D37C(&v77, (uint64_t)v79);
      uint64_t v66 = swift_getDynamicType(v65, v64, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v66);
      uint64_t v74 = v66;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v74);
      sub_10000E888((uint64_t)&v74);
      v67._uint64_t countAndFlagsBits = 58LL;
      v67._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v67);
      LogMessage.init(stringInterpolation:)(v4);
    }

    sub_10000D3A0(&v77);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(24LL, 1LL);
    v68._object = (void *)0x8000000100176190LL;
    v68._uint64_t countAndFlagsBits = 0xD000000000000018LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v68);
    uint64_t v79 = &type metadata for String;
    __int128 v77 = (char *)v9;
    uint64_t v78 = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v77);
    sub_10000E888((uint64_t)&v77);
    v69._uint64_t countAndFlagsBits = 0LL;
    v69._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v69);
    uint64_t v70 = LogMessage.init(stringInterpolation:)(v4);
    if (qword_1001C7F80 != -1) {
      uint64_t v70 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v71 = static os_log_type_t.error.getter(v70);
    sub_1000BD1B0(v71, v34);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1001064CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC14amsengagementd11PushService_publishers);
  if (!*(void *)(v5 + 16)) {
    return 0LL;
  }
  swift_bridgeObjectRetain(a2);
  unint64_t v10 = sub_100030CCC(a1, a2);
  if ((v11 & 1) == 0)
  {
    sub_10000DDF8();
    return 0LL;
  }

  swift_retain(*(void *)(*(void *)(v5 + 56) + 8 * v10));
  sub_10000DDF8();
  uint64_t v12 = swift_allocObject(&unk_1001B0AF8, 32LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(v12 + 24) = a4;
  swift_retain(a4);
  uint64_t v13 = sub_1000673F0();
  uint64_t v14 = sub_1001073DC((unint64_t *)&unk_1001CDF40);
  uint64_t v15 = Publisher.sink(receiveCompletion:receiveValue:)(nullsub_1, 0LL, sub_1001072BC, v12, v13, v14);
  swift_release();
  swift_release();
  return v15;
}

id sub_1001065E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PushService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for PushService()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd11PushService);
}

uint64_t sub_10010667C(uint64_t a1, char a2)
{
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100107394();
  uint64_t v8 = (__n128 *)swift_allocObject(v5, v6, v7);
  uint64_t v20 = (void *)sub_1001073D0(v8, (__n128)xmmword_100164230);
  v19[0] = v2;
  id v9 = (id)AMSLogKey(v2);
  if (v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    sub_1001073FC();
    swift_bridgeObjectRetain(v2);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v10 = (uint64_t)v20;
    char v11 = sub_10000D37C(v19, (uint64_t)v20);
    sub_10000DC54((uint64_t)v11, v10);
    sub_1000BDA54();
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC14();
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DDF8();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v12 = (uint64_t)v20;
    uint64_t v13 = sub_10000D37C(v19, (uint64_t)v20);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    swift_getMetatypeMetadata(v14);
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v19);
  sub_10001A21C(18LL);
  sub_100048BA0();
  v15._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  uint64_t v20 = &type metadata for Bool;
  LOBYTE(v19[0]) = a2 & 1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v19);
  sub_10000E888((uint64_t)v19);
  sub_10000DC08();
  uint64_t v16 = sub_10000DC5C();
  if (qword_1001C7F80 != -1) {
    uint64_t v16 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v17 = static os_log_type_t.info.getter(v16);
  sub_1000BD1B0(v17, (uint64_t)v8);
  return swift_bridgeObjectRelease();
}

void sub_1001068DC()
{
  unint64_t v2 = v1;
  sub_10000DE00();
  sub_10000DC64();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(sub_10002C79C() - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  v26[1] = v9;
  uint64_t v11 = swift_allocObject(v7, ((v10 + 32) & ~v10) + 2 * v9, v10 | 7);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  *((void *)&v31 + 1) = type metadata accessor for PushService();
  v30._uint64_t countAndFlagsBits = (uint64_t)v0;
  id v12 = (id)AMSLogKey(v0);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v16 = v15;

    swift_bridgeObjectRetain(v16);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v17 = *((void *)&v31 + 1);
    uint64_t v18 = sub_10000D37C(&v30, *((uint64_t *)&v31 + 1));
    uint64_t v19 = sub_10000DC54((uint64_t)v18, v17);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v19);
    uint64_t v27 = v19;
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    MetatypeMetadata = &type metadata for String;
    uint64_t v27 = v14;
    uint64_t v28 = v16;
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v20 = *((void *)&v31 + 1);
    id v21 = sub_10000D37C(&v30, *((uint64_t *)&v31 + 1));
    sub_10000DC54((uint64_t)v21, v20);
    MetatypeMetadata = (void *)sub_1000BDA54();
    uint64_t v27 = v20;
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10001A21C(23LL);
  sub_100048BA0();
  v22._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v22);
  if (v2 >> 60 == 15)
  {
    Swift::String v30 = (Swift::String)0;
    __int128 v31 = 0u;
  }

  else
  {
    Swift::String v23 = Data.base64EncodedString(options:)(0LL);
    *((void *)&v31 + 1) = &type metadata for String;
    Swift::String v30 = v23;
  }

  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v30);
  sub_10003AD7C();
  sub_10000DC08();
  uint64_t v24 = LogMessage.init(stringInterpolation:)(v6);
  if (qword_1001C7F80 != -1) {
    uint64_t v24 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v25 = static os_log_type_t.info.getter(v24);
  sub_1000BD1B0(v25, v11);
  sub_1000090CC();
  sub_10000DD84();
}

void sub_100106C00()
{
  unint64_t v2 = v0;
  id v4 = v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10000DC74();
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC14amsengagementd11PushService_connectionQueue];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v11 = v10;
  uint64_t v12 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v4)
  {
    uint64_t v13 = sub_100107238(v4);
    if (!v14)
    {
      uint64_t v29 = sub_10000D33C(&qword_1001C9C70);
      sub_10002C79C();
      sub_100107394();
      uint64_t v32 = (__n128 *)swift_allocObject(v29, v30, v31);
      uint64_t v33 = sub_1001073D0(v32, (__n128)xmmword_100164230);
      id v34 = sub_1001073F0(v33);
      id v35 = (id)AMSLogKey(v34);
      if (v35)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        sub_1001073FC();
        swift_bridgeObjectRetain(v12);
        sub_10000DC34();
        sub_10000DC08();
        uint64_t v36 = v62;
        uint64_t v37 = sub_10000D37C(v61, v62);
        sub_10000DC54((uint64_t)v37, v36);
        MetatypeMetadata = (void *)sub_1000BDA54();
        uint64_t v58 = v36;
        sub_10000DEA4();
        sub_100037DE0();
        sub_10000DC14();
        MetatypeMetadata = &type metadata for String;
        uint64_t v58 = (uint64_t)v0;
        uint64_t v59 = v12;
        sub_10000DEA4();
        sub_100037DE0();
        sub_10000DC4C(93LL);
        sub_10000DC5C();
        sub_10000DDF8();
      }

      else
      {
        sub_10000DC24();
        sub_10000DC08();
        uint64_t v49 = v62;
        Swift::String v50 = sub_10000D37C(v61, v62);
        uint64_t v51 = sub_10000DC54((uint64_t)v50, v49);
        MetatypeMetadata = (void *)swift_getMetatypeMetadata(v51);
        uint64_t v58 = v51;
        sub_10000DEA4();
        sub_100037DE0();
        sub_10000DC4C(58LL);
        sub_10000DC5C();
      }

      sub_1000677AC();
      sub_10001A21C(44LL);
      sub_100048BA0();
      LogMessage.StringInterpolation.appendLiteral(_:)(v52);
      uint64_t v54 = sub_10000DE08(v53, &qword_1001CDF30, &OBJC_CLASS___APSIncomingMessage_ptr);
      sub_1001073E4(v54);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v61);
      sub_10003AD7C();
      sub_10000DC08();
      uint64_t v55 = sub_10000DC5C();
      if (qword_1001C7F80 != -1) {
        uint64_t v55 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
      }
      uint64_t v56 = static os_log_type_t.info.getter(v55);
      sub_1000BD1B0(v56, (uint64_t)v32);
      sub_1000090CC();
      goto LABEL_16;
    }

    uint64_t v1 = v13;
    uint64_t v6 = v14;
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(sub_10002C79C() - 8);
    uint64_t v12 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
          + 2LL * *(void *)(v16 + 72),
            *(unsigned __int8 *)(v16 + 80) | 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v17 = type metadata accessor for PushService();
    unint64_t v2 = (char *)sub_1001073F0(v17);
    id v18 = (id)AMSLogKey(v2);
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v57[1] = v4;
      id v21 = v2;
      uint64_t v22 = v1;
      uint64_t v23 = v20;
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v26 = v62;
      uint64_t v27 = sub_10000D37C(v61, v62);
      uint64_t v28 = sub_10000DC54((uint64_t)v27, v26);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
      uint64_t v58 = v28;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC14();
      MetatypeMetadata = &type metadata for String;
      uint64_t v58 = v23;
      uint64_t v59 = v25;
      uint64_t v1 = v22;
      unint64_t v2 = v21;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v38 = v62;
      uint64_t v39 = sub_10000D37C(v61, v62);
      uint64_t v40 = sub_10000DC54((uint64_t)v39, v38);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v40);
      uint64_t v58 = v40;
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_1000677AC();
    sub_10001A21C(30LL);
    sub_100048BA0();
    v41._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    uint64_t v43 = sub_10000DE08(v42, &qword_1001CDF30, &OBJC_CLASS___APSIncomingMessage_ptr);
    id v4 = sub_1001073E4(v43);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v61);
    sub_10003AD7C();
    sub_10000DC08();
    uint64_t v44 = sub_10000DC5C();
    if (qword_1001C7F80 == -1)
    {
LABEL_10:
      uint64_t v45 = static os_log_type_t.info.getter(v44);
      sub_1000BD1B0(v45, v12);
      sub_10000DDF8();
      sub_100030AC4(v1, v6, *(void *)&v2[OBJC_IVAR____TtC14amsengagementd11PushService_publishers]);
      uint64_t v47 = v46;
      sub_1000090CC();
      if (v47)
      {
        v61[0] = v4;
        id v48 = v4;
        PassthroughSubject.send(_:)(v61);

        swift_release();
      }

id sub_100107138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2)
  {
    NSString v9 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v10 = 0LL;
    goto LABEL_6;
  }

  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v11 = [v5 initWithEnvironmentName:v9 namedDelegatePort:v10 queue:a5];

  return v11;
}

void sub_1001071E0(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 _setEnabledTopics:isa];
}

uint64_t sub_100107238(void *a1)
{
  id v1 = [a1 topic];
  if (!v1) {
    return 0LL;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100107298()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001072BC(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1001072E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100107304()
{
}

uint64_t sub_10010730C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010731C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100107324(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = sub_10000DFD4(v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10010735C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10000D820(a2);
    uint64_t result = sub_10000DFD4(v4);
    atomic_store(result, a1);
  }

  return result;
}

  ;
}

uint64_t sub_1001073B4()
{
  return 0LL;
}

uint64_t sub_1001073D0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for PushService();
}

uint64_t sub_1001073DC(unint64_t *a1)
{
  return sub_10010735C(a1, v1);
}

id sub_1001073E4(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return v1;
}

id sub_1001073F0(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return v1;
}

void sub_1001073FC()
{
}

ValueMetadata *type metadata accessor for RemoteJetpackLoader()
{
  return &type metadata for RemoteJetpackLoader;
}

void sub_100107418(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v194 = a2;
  uint64_t v185 = a1;
  uint64_t v165 = a3;
  uint64_t v167 = type metadata accessor for JSBytecodeSource(0LL);
  uint64_t v166 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  uint64_t v4 = (char *)&v165 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v184 = type metadata accessor for JSStackContext(0LL);
  __chkstk_darwin(v184);
  uint64_t v169 = (uint64_t)&v165 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000D33C(&qword_1001CB180);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v172 = (uint64_t)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v183 = (uint64_t)&v165 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v165 - v11;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v171 = (char *)&v165 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v170 = (char *)&v165 - v18;
  __chkstk_darwin(v17);
  v188 = (char *)&v165 - v19;
  uint64_t v20 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v165 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  v174 = v4;
  uint64_t v168 = qword_1001DBB10;
  uint64_t v23 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v24 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v25 = *(void *)(v24 + 72);
  uint64_t v26 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v27 = (v26 + 32) & ~v26;
  uint64_t v187 = v25;
  uint64_t v181 = v23;
  uint64_t v178 = v26 | 7;
  uint64_t v179 = v27 + 2 * v25;
  uint64_t v28 = swift_allocObject(v23, v179, v26 | 7);
  __int128 v177 = xmmword_100164230;
  *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v180 = v27;
  uint64_t v29 = sub_10000D33C(&qword_1001CDF68);
  uint64_t v175 = sub_10000D33C(&qword_1001CE050);
  uint64_t v193 = v175;
  uint64_t v176 = v29;
  v192[0] = v29;
  id v30 = (id)AMSLogKey(v175);
  uint64_t v186 = v13;
  uint64_t v182 = v14;
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v34 = v33;

    swift_bridgeObjectRetain(v34);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v35._uint64_t countAndFlagsBits = 0LL;
    v35._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    uint64_t v36 = v193;
    uint64_t v37 = sub_10000D37C(v192, v193);
    uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v189 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v39._uint64_t countAndFlagsBits = 5972026LL;
    v39._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v39);
    MetatypeMetadata = &type metadata for String;
    uint64_t v189 = v32;
    uint64_t v190 = v34;
    uint64_t v14 = v182;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    uint64_t v13 = v186;
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v40._uint64_t countAndFlagsBits = 93LL;
    v40._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    LogMessage.init(stringInterpolation:)(v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v41._uint64_t countAndFlagsBits = 0LL;
    v41._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    uint64_t v42 = v193;
    uint64_t v43 = sub_10000D37C(v192, v193);
    uint64_t v44 = swift_getDynamicType(v43, v42, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v44);
    uint64_t v189 = v44;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v45._uint64_t countAndFlagsBits = 58LL;
    v45._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v45);
    LogMessage.init(stringInterpolation:)(v22);
  }

  sub_10000D3A0(v192);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(26LL, 1LL);
  v46._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  v46._object = (void *)0x80000001001762F0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v46);
  uint64_t v193 = v13;
  sub_1000663D0(v192);
  uint64_t v47 = *(void (**)(void))(v14 + 16);
  v47();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v192);
  sub_10000DA68((uint64_t)v192, &qword_1001CAAD0);
  v48._uint64_t countAndFlagsBits = 41LL;
  v48._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v48);
  uint64_t v49 = LogMessage.init(stringInterpolation:)(v22);
  uint64_t v50 = static os_log_type_t.debug.getter(v49);
  sub_1000BD1B0(v50, v28);
  swift_bridgeObjectRelease();
  uint64_t v51 = v184;
  uint64_t v52 = v194;
  sub_10002877C(v194 + *(int *)(v184 + 32), (uint64_t)v12);
  uint64_t v53 = v52;
  uint64_t v54 = v169;
  sub_10010A32C(v53, v169);
  if (sub_1000102D4((uint64_t)v12, 1LL, v13) == 1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v47)(v188, v54 + *(int *)(v51 + 40), v13);
    sub_10010A508(v54);
    sub_10000DA68((uint64_t)v12, &qword_1001CB180);
  }

  else
  {
    sub_10010A508(v54);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v188, v12, v13);
  }

  uint64_t v55 = v183;
  sub_10002877C(v194 + *(int *)(v51 + 20), v183);
  int v56 = sub_1000102D4(v55, 1LL, v13);
  uint64_t v57 = swift_allocObject(v181, v179, v178);
  uint64_t v58 = v57;
  *(_OWORD *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = v177;
  if (v56 == 1)
  {
    uint64_t v193 = v175;
    v192[0] = v176;
    id v59 = (id)AMSLogKey(v57);
    if (v59)
    {
      id v60 = v59;
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
      uint64_t v63 = v62;

      swift_bridgeObjectRetain(v63);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v64._uint64_t countAndFlagsBits = 0LL;
      v64._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v64);
      uint64_t v65 = v193;
      uint64_t v66 = sub_10000D37C(v192, v193);
      uint64_t v67 = swift_getDynamicType(v66, v65, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v67);
      uint64_t v189 = v67;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v68._uint64_t countAndFlagsBits = 5972026LL;
      v68._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v68);
      MetatypeMetadata = &type metadata for String;
      uint64_t v189 = v61;
      uint64_t v190 = v63;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      uint64_t v55 = v183;
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v69._uint64_t countAndFlagsBits = 93LL;
      v69._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v69);
      LogMessage.init(stringInterpolation:)(v22);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v81._uint64_t countAndFlagsBits = 0LL;
      v81._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v81);
      uint64_t v82 = v193;
      uint64_t v83 = sub_10000D37C(v192, v193);
      uint64_t v84 = swift_getDynamicType(v83, v82, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v84);
      uint64_t v189 = v84;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v85._uint64_t countAndFlagsBits = 58LL;
      v85._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v85);
      LogMessage.init(stringInterpolation:)(v22);
    }

    uint64_t v86 = v174;
    sub_10000D3A0(v192);
    uint64_t v87 = LogMessage.init(stringLiteral:)(0xD00000000000001BLL);
    uint64_t v88 = static os_log_type_t.debug.getter(v87);
  }

  else
  {
    uint64_t v193 = v175;
    v192[0] = v176;
    id v70 = (id)AMSLogKey(v57);
    if (v70)
    {
      uint64_t v71 = v70;
      uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      uint64_t v74 = v73;

      swift_bridgeObjectRetain(v74);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v75._uint64_t countAndFlagsBits = 0LL;
      v75._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v75);
      uint64_t v76 = v193;
      __int128 v77 = sub_10000D37C(v192, v193);
      uint64_t v78 = swift_getDynamicType(v77, v76, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v78);
      uint64_t v189 = v78;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v79._uint64_t countAndFlagsBits = 5972026LL;
      v79._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v79);
      MetatypeMetadata = &type metadata for String;
      uint64_t v189 = v72;
      uint64_t v190 = v74;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      uint64_t v55 = v183;
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v80._uint64_t countAndFlagsBits = 93LL;
      v80._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v80);
      LogMessage.init(stringInterpolation:)(v22);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v89._uint64_t countAndFlagsBits = 0LL;
      v89._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v89);
      uint64_t v90 = v193;
      uint64_t v91 = sub_10000D37C(v192, v193);
      uint64_t v92 = swift_getDynamicType(v91, v90, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v92);
      uint64_t v189 = v92;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v93._uint64_t countAndFlagsBits = 58LL;
      v93._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v93);
      LogMessage.init(stringInterpolation:)(v22);
    }

    uint64_t v86 = v174;
    sub_10000D3A0(v192);
    uint64_t v94 = LogMessage.init(stringLiteral:)(0xD000000000000017LL);
    uint64_t v88 = static os_log_type_t.info.getter(v94);
  }

  sub_1000BD1B0(v88, v58);
  swift_bridgeObjectRelease();
  uint64_t v95 = v170;
  uint64_t v96 = v186;
  ((void (*)(char *, uint64_t, uint64_t))v47)(v170, v185, v186);
  uint64_t v97 = v171;
  ((void (*)(char *, char *, uint64_t))v47)(v171, v188, v96);
  uint64_t v98 = v172;
  sub_10002877C(v55, v172);
  id v99 = *(id *)(v194 + *(int *)(v184 + 48));
  uint64_t v100 = v173;
  uint64_t v101 = JSBytecodeSource.init(fileURL:sourceURL:cacheURL:virtualMachine:)(v95, v97, v98, v99);
  if (v100) {
    goto LABEL_19;
  }
  char v102 = JSBytecodeSource.isUsingBytecodeCache.getter(v101);
  uint64_t v103 = swift_allocObject(v181, v179, v178);
  uint64_t v104 = v103;
  *(_OWORD *)(v103 + swift_unknownObjectWeakDestroy(v0 + 16) = v177;
  if ((v102 & 1) != 0)
  {
    uint64_t v193 = v175;
    v192[0] = v176;
    id v105 = (id)AMSLogKey(v103);
    if (v105)
    {
      uint64_t v106 = v105;
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v105);
      uint64_t v109 = v108;

      swift_bridgeObjectRetain(v109);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v110._uint64_t countAndFlagsBits = 0LL;
      v110._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v110);
      uint64_t v111 = v193;
      uint64_t v112 = sub_10000D37C(v192, v193);
      uint64_t v113 = swift_getDynamicType(v112, v111, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v113);
      uint64_t v189 = v113;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v114._uint64_t countAndFlagsBits = 5972026LL;
      v114._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v114);
      MetatypeMetadata = &type metadata for String;
      uint64_t v189 = v107;
      uint64_t v190 = v109;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v115._uint64_t countAndFlagsBits = 93LL;
      v115._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v115);
      LogMessage.init(stringInterpolation:)(v22);
      uint64_t v55 = v183;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v127._uint64_t countAndFlagsBits = 0LL;
      v127._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v127);
      uint64_t v128 = v193;
      uint64_t v129 = sub_10000D37C(v192, v193);
      uint64_t v130 = swift_getDynamicType(v129, v128, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v130);
      uint64_t v189 = v130;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
      sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
      v131._uint64_t countAndFlagsBits = 58LL;
      v131._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v131);
      LogMessage.init(stringInterpolation:)(v22);
    }

    sub_10000D3A0(v192);
    uint64_t v132 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v133 = static os_log_type_t.info.getter(v132);
    sub_1000BD1B0(v133, v104);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }

  uint64_t v193 = v175;
  v192[0] = v176;
  id v116 = (id)AMSLogKey(v103);
  if (v116)
  {
    uint64_t v117 = v116;
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
    uint64_t v120 = v119;

    swift_bridgeObjectRetain(v120);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v121._uint64_t countAndFlagsBits = 0LL;
    v121._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v121);
    uint64_t v122 = v193;
    uint64_t v123 = sub_10000D37C(v192, v193);
    uint64_t v124 = swift_getDynamicType(v123, v122, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v124);
    uint64_t v189 = v124;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v125._uint64_t countAndFlagsBits = 5972026LL;
    v125._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v125);
    MetatypeMetadata = &type metadata for String;
    uint64_t v189 = v118;
    uint64_t v190 = v120;
    uint64_t v86 = v174;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v126._uint64_t countAndFlagsBits = 93LL;
    v126._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v126);
    LogMessage.init(stringInterpolation:)(v22);
    uint64_t v55 = v183;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v138._uint64_t countAndFlagsBits = 0LL;
    v138._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v138);
    uint64_t v139 = v193;
    uint64_t v140 = sub_10000D37C(v192, v193);
    uint64_t v141 = swift_getDynamicType(v140, v139, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v141);
    uint64_t v189 = v141;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v142._uint64_t countAndFlagsBits = 58LL;
    v142._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v142);
    LogMessage.init(stringInterpolation:)(v22);
  }

  sub_10000D3A0(v192);
  uint64_t v143 = LogMessage.init(stringLiteral:)(0xD00000000000001ELL);
  uint64_t v144 = static os_log_type_t.debug.getter(v143);
  sub_1000BD1B0(v144, v104);
  swift_bridgeObjectRelease();
  uint64_t v137 = v186;
  if (sub_1000102D4(v55, 1LL, v186) == 1)
  {
    uint64_t v134 = v167;
    uint64_t v135 = v165;
    uint64_t v136 = v166;
    goto LABEL_31;
  }

  uint64_t v145 = swift_allocObject(v181, v179, v178);
  *(_OWORD *)(v145 + swift_unknownObjectWeakDestroy(v0 + 16) = v177;
  uint64_t v193 = v175;
  v192[0] = v176;
  id v146 = (id)AMSLogKey(v145);
  if (v146)
  {
    id v147 = v146;
    uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
    uint64_t v150 = v149;

    swift_bridgeObjectRetain(v150);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v151._uint64_t countAndFlagsBits = 0LL;
    v151._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v151);
    uint64_t v152 = v193;
    uint64_t v153 = sub_10000D37C(v192, v193);
    uint64_t v154 = swift_getDynamicType(v153, v152, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v154);
    uint64_t v189 = v154;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v155._uint64_t countAndFlagsBits = 5972026LL;
    v155._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v155);
    MetatypeMetadata = &type metadata for String;
    uint64_t v189 = v148;
    uint64_t v190 = v150;
    uint64_t v86 = v174;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v156._uint64_t countAndFlagsBits = 93LL;
    v156._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v156);
    LogMessage.init(stringInterpolation:)(v22);
    uint64_t v55 = v183;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v157._uint64_t countAndFlagsBits = 0LL;
    v157._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v157);
    uint64_t v158 = v193;
    id v159 = sub_10000D37C(v192, v193);
    uint64_t v160 = swift_getDynamicType(v159, v158, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v160);
    uint64_t v189 = v160;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v189);
    sub_10000DA68((uint64_t)&v189, &qword_1001CAAD0);
    v161._uint64_t countAndFlagsBits = 58LL;
    v161._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v161);
    LogMessage.init(stringInterpolation:)(v22);
  }

  sub_10000D3A0(v192);
  uint64_t v162 = LogMessage.init(stringLiteral:)(0xD000000000000020LL);
  uint64_t v163 = static os_log_type_t.debug.getter(v162);
  sub_1000BD1B0(v163, v145);
  swift_bridgeObjectRelease();
  JSBytecodeSource.cacheBytecode()();
  if (!v164)
  {
LABEL_27:
    uint64_t v134 = v167;
    uint64_t v135 = v165;
    uint64_t v136 = v166;
    uint64_t v137 = v186;
LABEL_31:
    v135[3] = v134;
    v135[4] = &protocol witness table for JSBytecodeSource;
    sub_1000663D0(v135);
    (*(void (**)(void))(v136 + 32))();
    (*(void (**)(char *, uint64_t))(v182 + 8))(v188, v137);
    goto LABEL_32;
  }

  (*(void (**)(char *, uint64_t))(v166 + 8))(v86, v167);
  uint64_t v96 = v186;
LABEL_19:
  (*(void (**)(char *, uint64_t))(v182 + 8))(v188, v96);
LABEL_32:
  sub_10000DA68(v55, &qword_1001CB180);
}

uint64_t sub_100108504(void *a1, uint64_t a2, void (*a3)(_OWORD *, void, uint64_t))
{
  v210 = a3;
  uint64_t v185 = a1;
  uint64_t v208 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v206 = *(void *)(v208 - 8);
  __chkstk_darwin(v208);
  sub_10000DD5C();
  uint64_t v207 = v5;
  uint64_t v6 = sub_10000D33C(&qword_1001CDF60);
  uint64_t v204 = *(void *)(v6 - 8);
  uint64_t v205 = v6;
  __chkstk_darwin(v6);
  sub_10000DD5C();
  sub_10010A570(v7);
  uint64_t v8 = sub_10000D33C(&qword_1001CDF68);
  sub_10010A57C(v8, (uint64_t)&v223);
  sub_10010A544(v9);
  __chkstk_darwin(v10);
  sub_10000DD5C();
  sub_10010A570(v11);
  uint64_t v12 = sub_10000D33C(&qword_1001CDF70);
  sub_10010A57C(v12, (uint64_t)&v222);
  sub_10010A544(v13);
  __chkstk_darwin(v14);
  sub_10000DD5C();
  uint64_t v16 = sub_10001A4F4(v15);
  uint64_t v209 = type metadata accessor for JSStackContext(v16);
  uint64_t v195 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  uint64_t v196 = v17;
  sub_10010A570((uint64_t)v178 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_10000D33C(&qword_1001CDF78);
  sub_10010A57C(v18, (uint64_t)v221);
  sub_10010A544(v19);
  __chkstk_darwin(v20);
  sub_10000DD5C();
  sub_10010A570(v21);
  uint64_t v22 = sub_10000D33C(&qword_1001CDF80);
  sub_10010A57C(v22, (uint64_t)&v217);
  sub_10010A544(v23);
  __chkstk_darwin(v24);
  sub_10000DD5C();
  uint64_t v26 = sub_10001A4F4(v25);
  uint64_t v214 = type metadata accessor for JetpackBundle.Resource(v26);
  sub_10010A544(*(void *)(v214 - 8));
  __chkstk_darwin(v27);
  sub_10000DD5C();
  sub_10010A570(v28);
  uint64_t v213 = sub_10000D33C(&qword_1001CDF88);
  sub_10010A544(*(void *)(v213 - 8));
  __chkstk_darwin(v29);
  sub_10000DD5C();
  sub_10010A570(v30);
  uint64_t v31 = sub_10000D33C(&qword_1001CDF90);
  sub_10010A57C(v31, (uint64_t)&v203);
  sub_10010A544(v32);
  __chkstk_darwin(v33);
  sub_10000DD5C();
  sub_10010A570(v34);
  uint64_t v35 = sub_10000D33C(&qword_1001CDF98);
  sub_10010A57C(v35, (uint64_t)v202);
  sub_10010A544(v36);
  __chkstk_darwin(v37);
  sub_10000DD5C();
  sub_10010A570(v38);
  uint64_t v39 = sub_10000D33C(&qword_1001CDFA0);
  sub_10010A57C(v39, (uint64_t)&v215);
  sub_10010A544(v40);
  __chkstk_darwin(v41);
  sub_10000DD5C();
  sub_10010A570(v42);
  uint64_t v43 = sub_10000D33C(&qword_1001CDFA8);
  sub_10010A57C(v43, (uint64_t)&v212);
  sub_10010A544(v44);
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v184 = (char *)v178 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46);
  sub_10010A570((uint64_t)v178 - v48);
  uint64_t v49 = sub_10000D33C(&qword_1001CDFB0);
  sub_10010A57C(v49, (uint64_t)v200);
  sub_10010A544(v50);
  __chkstk_darwin(v51);
  sub_10000DD5C();
  uint64_t v53 = sub_10001A4F4(v52);
  uint64_t v54 = type metadata accessor for LogMessage.StringInterpolation(v53);
  __chkstk_darwin(v54);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  v211 = (void *)qword_1001DBB10;
  uint64_t v55 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v56 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v57 = *(void *)(v56 + 72);
  uint64_t v58 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v212 = v57;
  uint64_t v189 = v55;
  uint64_t v188 = ((v58 + 32) & ~v58) + 2 * v57;
  uint64_t v187 = v58 | 7;
  uint64_t v59 = swift_allocObject(v55, v188, v58 | 7);
  __int128 v186 = xmmword_100164230;
  *(_OWORD *)(v59 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  id v60 = (id)sub_10010A714((uint64_t)&type metadata for RemoteJetpackLoader);
  if (v60)
  {
    uint64_t v61 = sub_1000105E8((uint64_t)v60);
    uint64_t v62 = a2;
    uint64_t v64 = v63;

    swift_bridgeObjectRetain(v64);
    sub_10000E970();
    sub_10000E8C8();
    sub_10001049C();
    uint64_t v65 = sub_100010530();
    sub_10010A554(v65);
    sub_10010A6AC();
    sub_10000DC14();
    MetatypeMetadata = &type metadata for String;
    uint64_t v218 = v61;
    uint64_t v219 = v64;
    sub_100029288();
    sub_10010A6AC();
    sub_10000DC4C(93LL);
    sub_10010A668();
    a2 = v62;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000E980();
    sub_10000E8C8();
    uint64_t v66 = sub_10010A634();
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v66);
    uint64_t v218 = v66;
    uint64_t v67 = sub_100029288();
    sub_10010A6C4(v67, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10010A668();
  }

  sub_10000D3A0(v216);
  uint64_t v68 = sub_1000105B4(0xD000000000000019LL);
  uint64_t v69 = static os_log_type_t.info.getter(v68);
  sub_1000BD1B0(v69, v59);
  uint64_t v70 = swift_bridgeObjectRelease();
  uint64_t v71 = sub_10000DE08(v70, &qword_1001CB430, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v72 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(v216, v71, v210, v71, v72);
  v211 = (void *)v216[0];
  id v73 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v74 = *(int *)(v209 + 28);
  uint64_t v215 = a2;
  Swift::String v75 = (uint64_t *)(a2 + v74);
  URL.path.getter(v73, v76);
  NSString v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v78 = [v73 fileExistsAtPath:v77];

  uint64_t v79 = swift_allocObject(v189, v188, v187);
  *(_OWORD *)(v79 + swift_unknownObjectWeakDestroy(v0 + 16) = v186;
  if ((_DWORD)v78)
  {
    id v80 = (id)sub_10010A714((uint64_t)&type metadata for RemoteJetpackLoader);
    if (v80)
    {
      uint64_t v81 = sub_1000105E8((uint64_t)v80);
      uint64_t v83 = v82;

      swift_bridgeObjectRetain(v83);
      sub_10000E970();
      sub_10000E8C8();
      sub_10001049C();
      uint64_t v84 = sub_100010530();
      sub_10010A554(v84);
      sub_10010A6A0();
      sub_10000DC14();
      MetatypeMetadata = &type metadata for String;
      uint64_t v218 = v81;
      uint64_t v219 = v83;
      sub_100029288();
      sub_10010A6A0();
      sub_10000DC4C(93LL);
      sub_10010A5D8();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000E980();
      sub_10000E8C8();
      uint64_t v91 = sub_10010A634();
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v91);
      uint64_t v218 = v91;
      uint64_t v92 = sub_100029288();
      sub_10010A6C4(v92, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10010A5D8();
    }

    sub_10000D3A0(v216);
    uint64_t v93 = sub_1000105B4(0xD000000000000021LL);
    uint64_t v94 = static os_log_type_t.info.getter(v93);
    sub_1000BD1B0(v94, v79);
    swift_bridgeObjectRelease();
    uint64_t v95 = sub_100029328();
    uint64_t v96 = v178[0];
    static Pipeline.start<A>(with:)(v75);
    uint64_t v97 = type metadata accessor for JetpackBundle(0LL);
    uint64_t v98 = v180;
    sub_10010A6F8((uint64_t)sub_1000FE56C, 0LL, v95);
    sub_100081828( &qword_1001CE048,  &qword_1001CDFB0,  (uint64_t)&protocol conformance descriptor for PipelineEntryTask<A>);
    uint64_t v99 = v179;
    PipelineTask.andThen<A>(_:)(v98, v179, v97);
    sub_10010A700();
    sub_100048DBC(v98, v100);
    (*(void (**)(uint64_t, uint64_t))(v178[1] + 8LL))(v96, v99);
    v216[0] = v96;
    uint64_t v101 = v190;
    sub_10010A5CC();
    uint64_t v102 = sub_1000673F0();
    sub_100081828( &qword_1001CDFD8,  &qword_1001CDFD0,  (uint64_t)&protocol conformance descriptor for MapPipelineTask<A, B>);
    sub_10010A594(v101);
    sub_10010A6E4();
    sub_100048DBC(v101, v103);
    sub_10010A568();
    uint64_t v104 = v215;
  }

  else
  {
    Swift::String v85 = v75;
    id v86 = (id)sub_10010A714((uint64_t)&type metadata for RemoteJetpackLoader);
    if (v86)
    {
      uint64_t v87 = sub_1000105E8((uint64_t)v86);
      uint64_t v89 = v88;

      swift_bridgeObjectRetain(v89);
      sub_10000E970();
      sub_10000E8C8();
      sub_10001049C();
      uint64_t v90 = sub_100010530();
      sub_10010A554(v90);
      Swift::String v75 = &qword_1001CAAD0;
      sub_10010A6B8();
      sub_10000DC14();
      MetatypeMetadata = &type metadata for String;
      uint64_t v218 = v87;
      uint64_t v219 = v89;
      sub_100029288();
      sub_10010A6B8();
      sub_10000DC4C(93LL);
      sub_10010A5D8();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000E980();
      sub_10000E8C8();
      sub_10001049C();
      uint64_t v105 = sub_100010530();
      uint64_t v106 = sub_10010A554(v105);
      sub_10010A6C4(v106, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10010A5D8();
    }

    sub_10000D3A0(v216);
    uint64_t v107 = LogMessage.init(stringLiteral:)(0xD000000000000011LL);
    uint64_t v108 = static os_log_type_t.debug.getter(v107);
    sub_1000BD1B0(v108, v79);
    swift_bridgeObjectRelease();
    uint64_t v104 = v215;
    uint64_t v109 = v215 + *(int *)(v209 + 32);
    sub_10000D33C(&qword_1001CB180);
    sub_10010A71C();
    uint64_t v110 = static Pipeline.start<A>(with:)(v109);
    uint64_t v111 = sub_10000DE08(v110, &qword_1001CB428, &OBJC_CLASS___AMSURLSession_ptr);
    inject<A, B>(_:from:)(v216, v111, v210, v111, v72);
    uint64_t v112 = (void *)v216[0];
    if (qword_1001C7F10 != -1) {
      swift_once(&qword_1001C7F10, sub_10001CF94);
    }
    uint64_t v113 = qword_1001C90F0;
    swift_unknownObjectRetain(qword_1001C90F0);
    uint64_t v114 = v182;
    Swift::String v115 = v185;
    sub_10010A738(v185, v104, v112, v211, v113);

    swift_unknownObjectRelease(v113);
    uint64_t v95 = sub_100029328();
    sub_100081828( &qword_1001CDFB8,  &qword_1001CDF98,  (uint64_t)&protocol conformance descriptor for PipelineEntryTask<A>);
    uint64_t v116 = v181;
    uint64_t v117 = PipelineTask.andThen<A>(_:)(v114, v181, v95);
    sub_100048DBC(v114, *(uint64_t (**)(uint64_t, void))(v183 + 8));
    uint64_t v118 = sub_10010A5E4();
    v119(v118, v116);
    v216[0] = v117;
    sub_100109680(*((_BYTE *)v115 + 1));
    uint64_t v121 = v120;
    if (sub_10000635C())
    {
      type metadata accessor for Defaults();
      char v122 = sub_100049C68();
      BOOL v123 = v122 == 2 || (v122 & 1) == 0;
    }

    else
    {
      BOOL v123 = 1LL;
    }

    uint64_t v124 = type metadata accessor for JetpackBundle(0LL);
    uint64_t v125 = (uint64_t)v184;
    static PipelinePhase<>.unpackJetpack(keyURLs:bundleOutputURL:artifactStoreURL:verifySignature:)( v121,  v85,  v104,  v123,  v124);
    swift_bridgeObjectRelease();
    sub_1000673F0();
    sub_10010A6D8(&qword_1001CDFC8);
    sub_10010A594(v125);
    sub_10010A700();
    sub_100048DBC(v125, v126);
    sub_10010A568();
    v216[0] = v216;
    uint64_t v127 = v190;
    sub_10010A5CC();
    uint64_t v102 = sub_1000673F0();
    sub_10010A6D8(&qword_1001CDFD8);
    sub_10010A594(v127);
    sub_10010A6E4();
    sub_100048DBC(v127, v128);
    sub_10010A568();
  }

  v216[0] = v102;
  uint64_t v129 = v199;
  _OWORD *v199 = xmmword_100168540;
  v129[1] = xmmword_100168550;
  uint64_t v212 = v102;
  uint64_t v130 = v193;
  v210 = *(void (**)(_OWORD *, void, uint64_t))(v193 + 104);
  uint64_t v131 = v214;
  v210(v129, enum case for JetpackBundle.Resource.other(_:), v214);
  sub_100029328();
  swift_retain(v102);
  uint64_t v132 = v198;
  static PipelinePhase<>.urlForResource(_:)(v129, v95);
  uint64_t v209 = *(void *)(v130 + 8);
  ((void (*)(_OWORD *, uint64_t))v209)(v129, v131);
  uint64_t v133 = sub_1000F04B4();
  uint64_t v193 = v133;
  sub_10010A674(&qword_1001CDFE8);
  uint64_t v192 = v134;
  uint64_t v135 = PipelineTask.andThen<A>(_:)(v132, v133, v95);
  uint64_t v194 = *(void *)(v194 + 8);
  ((void (*)(uint64_t, uint64_t))v194)(v132, v213);
  sub_10010A568();
  v216[0] = v135;
  *(void *)(swift_allocObject(&unk_1001B0BA0, 24LL, 7LL) + swift_unknownObjectWeakDestroy(v0 + 16) = 1LL;
  sub_10010A71C();
  PipelinePhase.init(mapOutput:)(v136, v137, v95, &type metadata for Data);
  uint64_t v138 = sub_1000F04B4();
  uint64_t v191 = v138;
  sub_10010A674(&qword_1001CDFF8);
  uint64_t v190 = v139;
  uint64_t v140 = PipelineTask.andThen<A>(_:)(v75, v138, &type metadata for Data);
  uint64_t v141 = sub_10010A5E4();
  sub_100048DBC(v141, v142);
  sub_10010A568();
  v216[0] = v140;
  uint64_t v143 = v104;
  uint64_t v144 = v95;
  uint64_t v145 = v201;
  sub_10010A32C(v143, v201);
  uint64_t v146 = *(unsigned __int8 *)(v195 + 80);
  v196 += (v146 + 16) & ~v146;
  uint64_t v195 = v146 | 7;
  uint64_t v147 = swift_allocObject(&unk_1001B0BC8, v196, v146 | 7);
  sub_10010A658(v147);
  type metadata accessor for JSPackageIndex(0LL);
  sub_10010A71C();
  sub_10010A6F8(v148, (uint64_t)v216, (uint64_t)&type metadata for Data);
  sub_1000673F0();
  sub_10010A680(&qword_1001CE008, &qword_1001CE000);
  uint64_t v149 = sub_10010A5F4();
  uint64_t v150 = sub_10010A5E4();
  sub_100048DBC(v150, v151);
  sub_10010A568();
  v216[0] = v149;
  sub_10010A71C();
  sub_10010A5CC();
  sub_1000673F0();
  sub_10010A680(&qword_1001CE018, &qword_1001CE010);
  uint64_t v197 = sub_10010A5F4();
  uint64_t v152 = sub_10010A5E4();
  sub_100048DBC(v152, v153);
  sub_10010A568();
  uint64_t v154 = v212;
  v216[0] = v212;
  uint64_t v155 = v214;
  v210(v129, enum case for JetpackBundle.Resource.source(_:), v214);
  swift_retain(v154);
  static PipelinePhase<>.urlForResource(_:)(v129, v144);
  ((void (*)(_OWORD *, uint64_t))v209)(v129, v155);
  uint64_t v156 = PipelineTask.andThen<A>(_:)(v132, v193, v144);
  ((void (*)(uint64_t, uint64_t))v194)(v132, v213);
  sub_10010A568();
  v216[0] = v156;
  sub_10010A32C(v215, v145);
  uint64_t v157 = swift_allocObject(&unk_1001B0BF0, v196, v195);
  sub_10010A658(v157);
  uint64_t v158 = sub_10000D33C(&qword_1001CE020);
  uint64_t v159 = v202[0];
  sub_10010A6F8((uint64_t)sub_10010A4BC, (uint64_t)v216, v144);
  uint64_t v160 = PipelineTask.andThen<A>(_:)(v159, v191, v158);
  sub_100048DBC(v159, *(uint64_t (**)(uint64_t, void))(v202[1] + 8LL));
  sub_10010A568();
  v216[0] = v160;
  uint64_t v161 = v203;
  sub_10010A5CC();
  sub_1000673F0();
  sub_10010A680(&qword_1001CE030, &qword_1001CE028);
  uint64_t v215 = sub_10010A594(v161);
  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v161, v205);
  uint64_t v162 = sub_10010A568();
  uint64_t v163 = dispatch thunk of MapPipelineTask.run()(v162);
  sub_10000DE08(v163, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v164 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v165 = v207;
  uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 104);
  uint64_t v167 = v208;
  v166(v207, enum case for DispatchQoS.QoSClass.default(_:), v208);
  uint64_t v168 = (void *)sub_10010A688();
  sub_10010A694();
  uint64_t v169 = sub_10010D0EC((uint64_t)sub_10010A4E0, 0LL, v168, v163);

  uint64_t v170 = swift_release();
  dispatch thunk of MapPipelineTask.run()(v170);
  v216[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v217 = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(v216);
  SyncTaskScheduler.init()(v171);
  uint64_t v172 = Promise.map<A>(on:_:)(v216, sub_100109B24, 0LL, &type metadata for JetpackProperties);
  swift_release();
  sub_10000D3A0(v216);
  v166(v165, v164, v167);
  uint64_t v173 = (void *)sub_10010A688();
  sub_10010A694();
  sub_10010D11C((uint64_t)sub_10010A4F4, 0LL, v173, v172);

  swift_release();
  uint64_t v174 = sub_1000F04B4();
  sub_100081828(&qword_1001CE040, &qword_1001CE038, (uint64_t)&protocol conformance descriptor for Promise<A>);
  uint64_t v176 = Promise.join<A>(with:)(v169, v174, v175);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v176;
}

void sub_100109680(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1001096D0()
{
  uint64_t v0 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for Int,  &type metadata for String,  &protocol witness table for Int);
  swift_bridgeObjectRetain(0x80000001001764E0LL);
  swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10003521C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(0x8000000100176530LL);
  swift_isUniquelyReferenced_nonNull_native(v0);
  sub_10003521C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v0);
  sub_100109EA0(v1);
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v0, 2LL);
  return v3;
}

uint64_t sub_100109814(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 3LL * *(void *)(v6 + 72),
         *(unsigned __int8 *)(v6 + 80) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v34 = &type metadata for RemoteJetpackLoader;
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v14 = v34;
    uint64_t v15 = sub_10000D37C(v33, (uint64_t)v34);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v31[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v17._uint64_t countAndFlagsBits = 5972026LL;
    v17._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    MetatypeMetadata = &type metadata for String;
    v31[0] = v10;
    v31[1] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v34;
    uint64_t v21 = sub_10000D37C(v33, (uint64_t)v34);
    uint64_t v22 = swift_getDynamicType(v21, v20, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    v31[0] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 58LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v33);
  LogMessage.init(stringLiteral:)(0xD000000000000017LL);
  swift_getErrorValue(a1, v35);
  uint64_t v24 = v30;
  uint64_t v34 = v30;
  sub_1000663D0(v33);
  (*((void (**)(void))v24[-1].Description + 2))();
  static LogMessage.safe(_:)(v33);
  sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
  uint64_t v26 = static os_log_type_t.error.getter(v25);
  sub_1000BD1B0(v26, v7);
  uint64_t v27 = swift_bridgeObjectRelease();
  swift_willThrow(v27);
  return swift_errorRetain(a1);
}

uint64_t sub_100109B24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = JSPackageIndex.properties.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100109B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v36 = &type metadata for RemoteJetpackLoader;
  id v10 = (id)AMSLogKey(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v31 = a2;
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v36;
    Swift::String v17 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    MetatypeMetadata = &type metadata for String;
    v33[0] = v12;
    v33[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v6);
    a2 = v31;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v36;
    Swift::String v23 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v33[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v35);
  LogMessage.init(stringLiteral:)(0xD000000000000028LL);
  swift_getErrorValue(a1, v37);
  uint64_t v26 = v32;
  uint64_t v36 = v32;
  sub_1000663D0(v35);
  (*((void (**)(void))v26[-1].Description + 2))();
  static LogMessage.safe(_:)(v35);
  sub_10000DA68((uint64_t)v35, &qword_1001CAAD0);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v9);
  swift_bridgeObjectRelease();
  uint64_t result = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a2 = result;
  return result;
}

void sub_100109EA0(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v40 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v38 - v8;
  uint64_t v50 = _swiftEmptyDictionarySingleton;
  sub_1000BE890(v46, a1);
  uint64_t v44 = v46[0];
  int64_t v45 = v48;
  unint64_t v9 = v49;
  uint64_t v38 = v47;
  uint64_t v42 = v46[1];
  int64_t v43 = (unint64_t)(v47 + 64) >> 6;
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    while (1)
    {
      if (v9)
      {
        unint64_t v10 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v11 = v10 | (v45 << 6);
      }

      else
      {
        int64_t v12 = v45 + 1;
        if (__OFADD__(v45, 1LL)) {
          goto LABEL_38;
        }
        if (v12 >= v43) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v42 + 8 * v12);
        int64_t v14 = v45 + 1;
        if (!v13)
        {
          int64_t v14 = v45 + 2;
          if (v45 + 2 >= v43) {
            goto LABEL_36;
          }
          unint64_t v13 = *(void *)(v42 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v45 + 3;
            if (v45 + 3 >= v43) {
              goto LABEL_36;
            }
            unint64_t v13 = *(void *)(v42 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v45 + 4;
              if (v45 + 4 >= v43) {
                goto LABEL_36;
              }
              unint64_t v13 = *(void *)(v42 + 8 * v14);
              if (!v13)
              {
                int64_t v14 = v45 + 5;
                if (v45 + 5 >= v43) {
                  goto LABEL_36;
                }
                unint64_t v13 = *(void *)(v42 + 8 * v14);
                if (!v13)
                {
                  int64_t v15 = v45 + 6;
                  while (v15 < v43)
                  {
                    unint64_t v13 = *(void *)(v42 + 8 * v15++);
                    if (v13)
                    {
                      int64_t v14 = v15 - 1;
                      goto LABEL_19;
                    }
                  }

uint64_t sub_10010A304()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10010A314@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000FE544(a1);
}

uint64_t sub_10010A32C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSStackContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010A374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JSStackContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10010A3B8()
{
  uint64_t v0 = sub_10010A5A0();
  sub_10010CFEC(v0, v1, v2);
  sub_10010A6CC();
}

uint64_t sub_10010A3E0()
{
  uint64_t v2 = (int *)type metadata accessor for JSStackContext(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  sub_100029328();
  sub_10010A5C4(v0 + v5);
  sub_10010A588(v2[6]);
  sub_10010A588(v2[7]);
  sub_10010A588(v2[9]);
  sub_10010A588(v2[10]);

  return swift_deallocObject(v0, v5 + v6, v4 | 7);
}

void sub_10010A4BC()
{
  uint64_t v0 = sub_10010A5A0();
  sub_100107418(v0, v1, v2);
  sub_10010A6CC();
}

uint64_t sub_10010A4E0(uint64_t a1)
{
  return sub_100109814(a1);
}

uint64_t sub_10010A4F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100109B5C(a1, a2);
}

uint64_t sub_10010A508(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JSStackContext(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_10010A544(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_10010A554(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 120);
}

uint64_t sub_10010A568()
{
  return swift_release(*(void *)(v0 - 160));
}

void sub_10010A570(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_10010A57C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

uint64_t sub_10010A588@<X0>(uint64_t a1@<X8>)
{
  return v3(v1 + a1, v2);
}

uint64_t sub_10010A594(uint64_t a1)
{
  return PipelineTask.andThen<A>(_:)(a1, v2, v1);
}

uint64_t sub_10010A5A0()
{
  return v0;
}

uint64_t sub_10010A5C4(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_10010A5CC()
{
  return static PipelinePhase.cacheValueIfSuccessful()(v0, v0);
}

uint64_t sub_10010A5D8()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10010A5E4()
{
  return v0;
}

uint64_t sub_10010A5F4()
{
  return PipelineTask.andThen<A>(_:)(v2, v1, v0);
}

uint64_t sub_10010A60C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000102D4(v1 + a1, 1LL, v2);
}

uint64_t sub_10010A620()
{
  return type metadata accessor for JSStackContext(0LL);
}

uint64_t sub_10010A634()
{
  uint64_t v1 = *(void *)(v0 - 136);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 160), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_10010A658(uint64_t a1)
{
  return sub_10010A374(v2, a1 + v1);
}

uint64_t sub_10010A668()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_10010A674(unint64_t *a1)
{
}

void sub_10010A680(unint64_t *a1, uint64_t *a2)
{
}

uint64_t sub_10010A688()
{
  return static OS_dispatch_queue.global(qos:)(v0);
}

uint64_t sub_10010A694()
{
  return v1(v0, v2);
}

void sub_10010A6A0()
{
}

void sub_10010A6AC()
{
}

void sub_10010A6B8()
{
}

void sub_10010A6C4(uint64_t a1, uint64_t *a2)
{
}

  ;
}

void sub_10010A6D8(unint64_t *a1)
{
}

  ;
}

uint64_t sub_10010A6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PipelinePhase.init(mapOutput:)(a1, a2, a3, v3);
}

  ;
}

uint64_t sub_10010A714@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  return AMSLogKey();
}

  ;
}

ValueMetadata *type metadata accessor for RemoteJetpackV2Loader()
{
  return &type metadata for RemoteJetpackV2Loader;
}

uint64_t sub_10010A738(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v13 = v12 - v11;
  sub_10010A32C(a2, v12 - v11);
  uint64_t v14 = type metadata accessor for SourceFetcher(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = sub_100123E7C(a1, v13, (uint64_t)a3, (uint64_t)a4, a5);
  sub_100066268(a1);
  id v16 = a3;
  id v17 = a4;
  swift_unknownObjectRetain(a5);
  uint64_t v18 = sub_10000D33C(&qword_1001CB180);
  uint64_t v19 = type metadata accessor for URL(0LL);
  return PipelinePhase.init(mapOutput:)(sub_10010D27C, v15, v18, v19);
}

uint64_t sub_10010A834(uint64_t a1, uint64_t a2, int a3)
{
  int v61 = a3;
  uint64_t v60 = a1;
  uint64_t v4 = type metadata accessor for JetPackFileStreamSource(0LL);
  uint64_t v62 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DiskJetPackLoader(0LL);
  uint64_t v68 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v67 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JetPackSigningPolicy(0LL);
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v63 = (char *)&v58 - v11;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v15 = qword_1001DBB10;
  uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v18 = swift_allocObject( v16,  ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
        + 2LL * *(void *)(v17 + 72),
          *(unsigned __int8 *)(v17 + 80) | 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v19 = sub_10000D33C(&qword_1001CE070);
  uint64_t v73 = sub_10000D33C((uint64_t *)&unk_1001CE0D0);
  v72[0] = v19;
  id v20 = (id)AMSLogKey(v73);
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v58 = v15;
    uint64_t v23 = v4;
    uint64_t v24 = v22;
    uint64_t v26 = v25;

    swift_bridgeObjectRetain(v26);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v27._uint64_t countAndFlagsBits = 0LL;
    v27._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = v73;
    uint64_t v29 = sub_10000D37C(v72, v73);
    uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v69[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
    sub_10000DA68((uint64_t)v69, &qword_1001CAAD0);
    v31._uint64_t countAndFlagsBits = 5972026LL;
    v31._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    MetatypeMetadata = &type metadata for String;
    v69[0] = v24;
    v69[1] = v26;
    uint64_t v4 = v23;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
    sub_10000DA68((uint64_t)v69, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 93LL;
    v32._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v33._uint64_t countAndFlagsBits = 0LL;
    v33._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t v34 = v73;
    unint64_t v35 = sub_10000D37C(v72, v73);
    uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v36);
    v69[0] = v36;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v69);
    sub_10000DA68((uint64_t)v69, &qword_1001CAAD0);
    v37._uint64_t countAndFlagsBits = 58LL;
    v37._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    LogMessage.init(stringInterpolation:)(v14);
  }

  sub_10000D3A0(v72);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
  v38._object = (void *)0x8000000100176670LL;
  v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v38);
  uint64_t v39 = type metadata accessor for URL(0LL);
  uint64_t v73 = v39;
  sub_1000663D0(v72);
  (*(void (**)(void))(*(void *)(v39 - 8) + 16LL))();
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v72);
  sub_10000DA68((uint64_t)v72, &qword_1001CAAD0);
  v40._uint64_t countAndFlagsBits = 41LL;
  v40._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t v41 = LogMessage.init(stringInterpolation:)(v14);
  uint64_t v42 = static os_log_type_t.debug.getter(v41);
  sub_1000BD1B0(v42, v18);
  swift_bridgeObjectRelease();
  uint64_t v43 = a2 + *(int *)(type metadata accessor for JSStackContext(0LL) + 28);
  static DiskJetPackResourceBundle.cleanUpOldSessions(baseURL:)(v43);
  uint64_t v44 = (unsigned int *)&enum case for JetPackSigningPolicy.required(_:);
  uint64_t v45 = v65;
  uint64_t v46 = v66;
  if ((v61 & 1) == 0) {
    uint64_t v44 = (unsigned int *)&enum case for JetPackSigningPolicy.ignore(_:);
  }
  uint64_t v47 = v63;
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v63, *v44, v66);
  uint64_t v48 = v59;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v59, v47, v46);
  uint64_t v73 = type metadata accessor for JetPackManagedKeyProvider(0LL);
  uint64_t v74 = &protocol witness table for JetPackManagedKeyProvider;
  sub_1000663D0(v72);
  JetPackManagedKeyProvider.init()();
  unint64_t v49 = v67;
  uint64_t v50 = DiskJetPackLoader.init(signingPolicy:keyProvider:)(v48, v72);
  uint64_t v52 = URL.path.getter(v50, v51);
  JetPackFileStreamSource.init(path:)(v52);
  uint64_t v73 = v4;
  uint64_t v74 = &protocol witness table for JetPackFileStreamSource;
  sub_1000663D0(v72);
  uint64_t v53 = v62;
  uint64_t v54 = (*(uint64_t (**)(void))(v62 + 16))();
  uint64_t v55 = static DiskJetPackLoader.sharedUnpackQueue.getter(v54);
  MetatypeMetadata = (void *)sub_10000DAA0( 0LL,  (unint64_t *)&qword_1001CACD0,  &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v71 = &protocol witness table for OS_dispatch_queue;
  v69[0] = v55;
  uint64_t v56 = DiskJetPackLoader.bundle(from:baseURL:automaticallyCleanUp:on:)(v72, v43, 1LL, v69);
  sub_10000D3A0(v69);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v49, v64);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
  sub_10000D3A0(v72);
  return v56;
}

uint64_t sub_10010ADD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v68 = a1;
  uint64_t v1 = type metadata accessor for JetPackPath(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v71 = qword_1001DBB10;
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v67 = v8;
  uint64_t v64 = v11 | 7;
  uint64_t v65 = v12 + 2 * v10;
  uint64_t v13 = swift_allocObject(v8, v65, v11 | 7);
  __int128 v63 = xmmword_100164230;
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v66 = v12;
  uint64_t v14 = sub_10000D33C(&qword_1001CE060);
  uint64_t v61 = sub_10000D33C(&qword_1001CE0C8);
  uint64_t v62 = v14;
  uint64_t v76 = v61;
  v75[0] = v14;
  id v15 = (id)AMSLogKey(v61);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v70 = v2;
    uint64_t v18 = v17;

    swift_bridgeObjectRetain(v18);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v76;
    id v21 = sub_10000D37C(v75, v76);
    uint64_t DynamicType = swift_getDynamicType(v21, v20, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v72 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
    sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 5972026LL;
    v23._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    MetatypeMetadata = &type metadata for String;
    uint64_t v72 = v69;
    uint64_t v73 = v18;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
    sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 93LL;
    v24._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    LogMessage.init(stringInterpolation:)(v7);
    uint64_t v2 = v70;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v76;
    Swift::String v27 = sub_10000D37C(v75, v76);
    uint64_t v28 = swift_getDynamicType(v27, v26, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
    uint64_t v72 = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
    sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 58LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v7);
  }

  sub_10000D3A0(v75);
  uint64_t v30 = LogMessage.init(stringLiteral:)(0xD000000000000016LL);
  uint64_t v31 = static os_log_type_t.debug.getter(v30);
  sub_1000BD1B0(v31, v13);
  swift_bridgeObjectRelease();
  JetPackPath.init(_:)(0x2E7865646E692F2ELL, 0xEA0000000000736ALL);
  uint64_t v32 = v77;
  uint64_t v33 = DiskJetPackResourceBundle.fileData(atPath:)(v4);
  if (v32) {
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v36 = v33;
  unint64_t v37 = v34;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v37 >> 60 == 15)
  {
    uint64_t v38 = swift_allocObject(v67, v65, v64);
    *(_OWORD *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = v63;
    uint64_t v76 = v61;
    v75[0] = v62;
    id v39 = (id)AMSLogKey(v38);
    if (v39)
    {
      Swift::String v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v43 = v42;

      swift_bridgeObjectRetain(v43);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v44._uint64_t countAndFlagsBits = 0LL;
      v44._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v44);
      uint64_t v45 = v76;
      uint64_t v46 = sub_10000D37C(v75, v76);
      uint64_t v47 = swift_getDynamicType(v46, v45, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v47);
      uint64_t v72 = v47;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
      sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
      v48._uint64_t countAndFlagsBits = 5972026LL;
      v48._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      MetatypeMetadata = &type metadata for String;
      uint64_t v72 = v41;
      uint64_t v73 = v43;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
      sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
      v49._uint64_t countAndFlagsBits = 93LL;
      v49._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      LogMessage.init(stringInterpolation:)(v7);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v51._uint64_t countAndFlagsBits = 0LL;
      v51._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      uint64_t v52 = v76;
      uint64_t v53 = sub_10000D37C(v75, v76);
      uint64_t v54 = swift_getDynamicType(v53, v52, 1LL);
      MetatypeMetadata = (void *)swift_getMetatypeMetadata(v54);
      uint64_t v72 = v54;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v72);
      sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
      v55._uint64_t countAndFlagsBits = 58LL;
      v55._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      LogMessage.init(stringInterpolation:)(v7);
    }

    sub_10000D3A0(v75);
    uint64_t v56 = LogMessage.init(stringLiteral:)(0xD000000000000023LL);
    uint64_t v57 = static os_log_type_t.error.getter(v56);
    sub_1000BD1B0(v57, v38);
    swift_bridgeObjectRelease();
    unint64_t v58 = sub_1000AEB4C();
    uint64_t v59 = swift_allocError(&type metadata for JSStackProviderError, v58, 0LL, 0LL);
    _BYTE *v60 = 1;
    return swift_willThrow(v59);
  }

  else
  {
    uint64_t v50 = v68;
    uint64_t *v68 = v36;
    v50[1] = v37;
  }

  return result;
}

uint64_t sub_10010B3A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v49 = a1;
  uint64_t v4 = type metadata accessor for JetPackPath(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  v42[3] = qword_1001DBB10;
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  void v42[2] = v13;
  uint64_t v15 = swift_allocObject(v11, ((v14 + 32) & ~v14) + 2 * v13, v14 | 7);
  *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v16 = sub_10000D33C(&qword_1001CE058);
  uint64_t v48 = sub_10000D33C(&qword_1001CE0B8);
  v47[0] = v16;
  id v17 = (id)AMSLogKey(v48);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v42[1] = v3;
    uint64_t v20 = v5;
    uint64_t v21 = v4;
    uint64_t v22 = v19;
    uint64_t v24 = v23;

    swift_bridgeObjectRetain(v24);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v25._uint64_t countAndFlagsBits = 0LL;
    v25._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    uint64_t v26 = v48;
    Swift::String v27 = sub_10000D37C(v47, v48);
    uint64_t DynamicType = swift_getDynamicType(v27, v26, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v45[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000DA68((uint64_t)v45, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    MetatypeMetadata = &type metadata for String;
    v45[0] = v22;
    v45[1] = v24;
    uint64_t v4 = v21;
    uint64_t v5 = v20;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000DA68((uint64_t)v45, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v32 = v48;
    uint64_t v33 = sub_10000D37C(v47, v48);
    uint64_t v34 = swift_getDynamicType(v33, v32, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
    v45[0] = v34;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_10000DA68((uint64_t)v45, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 58LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(v47);
  uint64_t v36 = LogMessage.init(stringLiteral:)(0x20676E6964616F4CLL);
  uint64_t v37 = static os_log_type_t.debug.getter(v36);
  sub_1000BD1B0(v37, v15);
  swift_bridgeObjectRelease();
  uint64_t v38 = type metadata accessor for JSStackContext(0LL);
  uint64_t v39 = *(void *)(v43 + *(int *)(v38 + 48));
  uint64_t v40 = v43 + *(int *)(v38 + 20);
  static JetPackPath.sourcePath.getter();
  DiskJetPackResourceBundle.memoryMappedSource(atPath:virtualMachine:cacheURL:)(v7, v39, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10010B728@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v65 = a3;
  unint64_t v74 = a2;
  uint64_t v69 = a1;
  uint64_t v61 = a4;
  uint64_t v6 = type metadata accessor for JSONContext(0LL);
  __chkstk_darwin(v6);
  uint64_t v60 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONObject(0LL);
  __chkstk_darwin(v8);
  uint64_t v68 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = type metadata accessor for JSStackContext(0LL);
  __chkstk_darwin(v63);
  uint64_t v64 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v59 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v66 = (char *)&v57 - v17;
  uint64_t v18 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v62 = qword_1001DBB10;
  uint64_t v21 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v22 = type metadata accessor for LogMessage(0LL);
  uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v22 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v22 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v24 = sub_10000D33C(&qword_1001CDF78);
  uint64_t v73 = sub_10000D33C(&qword_1001CE0C0);
  v72[0] = v24;
  id v25 = (id)AMSLogKey(v73);
  if (v25)
  {
    uint64_t v26 = v25;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v58 = v4;
    uint64_t v29 = v28;

    swift_bridgeObjectRetain(v29);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v30._uint64_t countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v31 = v73;
    uint64_t v32 = sub_10000D37C(v72, v73);
    uint64_t DynamicType = swift_getDynamicType(v32, v31, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v70[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
    sub_10000DA68((uint64_t)v70, &qword_1001CAAD0);
    v34._uint64_t countAndFlagsBits = 5972026LL;
    v34._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    MetatypeMetadata = &type metadata for String;
    v70[0] = v27;
    v70[1] = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
    sub_10000DA68((uint64_t)v70, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 93LL;
    v35._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    LogMessage.init(stringInterpolation:)(v20);
    uint64_t v5 = v58;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v36._uint64_t countAndFlagsBits = 0LL;
    v36._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    uint64_t v37 = v73;
    uint64_t v38 = sub_10000D37C(v72, v73);
    uint64_t v39 = swift_getDynamicType(v38, v37, 1LL);
    MetatypeMetadata = (void *)swift_getMetatypeMetadata(v39);
    v70[0] = v39;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v70);
    sub_10000DA68((uint64_t)v70, &qword_1001CAAD0);
    v40._uint64_t countAndFlagsBits = 58LL;
    v40._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    LogMessage.init(stringInterpolation:)(v20);
  }

  sub_10000D3A0(v72);
  uint64_t v41 = LogMessage.init(stringLiteral:)(0xD000000000000011LL);
  uint64_t v42 = static os_log_type_t.debug.getter(v41);
  sub_1000BD1B0(v42, v23);
  swift_bridgeObjectRelease();
  uint64_t v43 = v63;
  uint64_t v44 = v65;
  sub_10002877C(v65 + *(int *)(v63 + 32), (uint64_t)v13);
  uint64_t v45 = v44;
  uint64_t v46 = v64;
  sub_10010A32C(v45, v64);
  int v47 = sub_1000102D4((uint64_t)v13, 1LL, v14);
  uint64_t v48 = v66;
  if (v47 == 1)
  {
    uint64_t v49 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v46 + *(int *)(v43 + 40), v14);
    sub_10010A508(v46);
    sub_10000DA68((uint64_t)v13, &qword_1001CB180);
  }

  else
  {
    sub_10010A508(v46);
    uint64_t v49 = v67;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v48, v13, v14);
  }

  Swift::String v51 = v68;
  uint64_t v50 = v69;
  unint64_t v52 = v74;
  sub_10001BDC8(v69, v74);
  uint64_t v53 = JSONObject.init(deserializing:)(v50, v52);
  if (!v5)
  {
    uint64_t v54 = v60;
    JSONContext.init()(v53);
    Swift::String v55 = v59;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v59, v48, v14);
    JSPackageIndex.init(deserializing:using:from:)(v51, v54, v55);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v48, v14);
}

uint64_t sub_10010BC64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v149 = a1;
  uint64_t v166 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v164 = *(void *)(v166 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v5);
  sub_10000DD5C();
  uint64_t v165 = v6;
  uint64_t v7 = sub_10000D33C(&qword_1001CDF60);
  uint64_t v162 = *(void *)(v7 - 8);
  uint64_t v163 = v7;
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DD5C();
  uint64_t v161 = v9;
  uint64_t v10 = sub_10000D33C(&qword_1001CE058);
  uint64_t v159 = *(void *)(v10 - 8);
  uint64_t v160 = v10;
  sub_10000DC8C();
  __chkstk_darwin(v11);
  sub_10000DD5C();
  uint64_t v158 = v12;
  uint64_t v13 = sub_10000D33C(&qword_1001CDF70);
  uint64_t v156 = *(void *)(v13 - 8);
  uint64_t v157 = v13;
  sub_10000DC8C();
  __chkstk_darwin(v14);
  sub_10000DD5C();
  sub_10010A570(v15);
  uint64_t v16 = sub_10000D33C(&qword_1001CDF78);
  sub_10010A57C(v16, (uint64_t)&v173);
  uint64_t v153 = v17;
  sub_10000DC8C();
  __chkstk_darwin(v18);
  sub_10000DD5C();
  sub_10010A570(v19);
  uint64_t v20 = sub_10000D33C(&qword_1001CE060);
  sub_10010A57C(v20, (uint64_t)&v172);
  uint64_t v151 = v21;
  sub_10000DC8C();
  __chkstk_darwin(v22);
  sub_10000DD5C();
  sub_10010A570(v23);
  uint64_t v24 = sub_10000D33C(&qword_1001CE068);
  sub_10010A57C(v24, (uint64_t)&v171);
  uint64_t v147 = v25;
  sub_10000DC8C();
  __chkstk_darwin(v26);
  sub_10000DD5C();
  uint64_t v146 = v27;
  uint64_t v28 = sub_1000AEE34();
  uint64_t v143 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v144 = v29;
  sub_10010A570((uint64_t)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v167 = sub_10000D33C(&qword_1001CE070);
  uint64_t v145 = *(void *)(v167 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v30);
  sub_10000DD5C();
  sub_10010A570(v31);
  uint64_t v32 = sub_10000D33C(&qword_1001CDF90);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  sub_10000DE7C();
  uint64_t v36 = v35 - v34;
  uint64_t v37 = sub_10000D33C(&qword_1001CDF98);
  sub_10010A57C(v37, (uint64_t)v169);
  uint64_t v141 = v38;
  sub_10000DC8C();
  __chkstk_darwin(v39);
  sub_10000DD5C();
  uint64_t v140 = v40;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC8C();
  __chkstk_darwin(v41);
  sub_10000DE7C();
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v139 = qword_1001DBB10;
  uint64_t v42 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v43 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v44 = *(void *)(v43 + 72);
  uint64_t v45 = *(unsigned __int8 *)(v43 + 80);
  uint64_t v138 = v44;
  uint64_t v46 = swift_allocObject(v42, ((v45 + 32) & ~v45) + 2 * v44, v45 | 7);
  *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  v169[0] = &type metadata for RemoteJetpackV2Loader;
  id v47 = (id)AMSLogKey(v46);
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v136 = v36;
    uint64_t v50 = v33;
    uint64_t v51 = v32;
    uint64_t v52 = a3;
    uint64_t v53 = a2;
    uint64_t v54 = v49;
    uint64_t v135 = v28;
    uint64_t v56 = v55;

    swift_bridgeObjectRetain(v56);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v57 = sub_10010A634();
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v57);
    sub_10010D2F0(MetatypeMetadata);
    sub_10010A6AC();
    v59._uint64_t countAndFlagsBits = 5972026LL;
    v59._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    v170[3] = &type metadata for String;
    v170[0] = v54;
    v170[1] = v56;
    a2 = v53;
    a3 = v52;
    uint64_t v32 = v51;
    uint64_t v33 = v50;
    uint64_t v36 = v136;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v170);
    sub_10010A6AC();
    v60._uint64_t countAndFlagsBits = 93LL;
    v60._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v60);
    sub_10010D368();
    uint64_t v28 = v135;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v61 = sub_10010A634();
    uint64_t v62 = swift_getMetatypeMetadata(v61);
    sub_10010D2F0(v62);
    sub_10000DA68((uint64_t)v170, &qword_1001CAAD0);
    v63._uint64_t countAndFlagsBits = 58LL;
    v63._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v63);
    sub_10010D368();
  }

  sub_10000D3A0(&v168);
  uint64_t v64 = LogMessage.init(stringLiteral:)(0xD000000000000019LL);
  uint64_t v65 = static os_log_type_t.info.getter(v64);
  sub_1000BD1B0(v65, v46);
  uint64_t v66 = swift_bridgeObjectRelease();
  uint64_t v67 = sub_10000DE08(v66, &qword_1001CB430, &OBJC_CLASS___AMSProcessInfo_ptr);
  uint64_t v68 = type metadata accessor for BaseObjectGraph(0LL);
  inject<A, B>(_:from:)(&v168, v67, a3, v67, v68);
  uint64_t v69 = v168;
  uint64_t v70 = a2 + *(int *)(v28 + 32);
  sub_10000D33C(&qword_1001CB180);
  uint64_t v71 = v140;
  uint64_t v72 = static Pipeline.start<A>(with:)(v70);
  uint64_t v73 = sub_10000DE08(v72, &qword_1001CB428, &OBJC_CLASS___AMSURLSession_ptr);
  inject<A, B>(_:from:)(&v168, v73, a3, v73, v68);
  unint64_t v74 = v168;
  if (qword_1001C7F10 != -1) {
    swift_once(&qword_1001C7F10, sub_10001CF94);
  }
  uint64_t v75 = qword_1001C90F0;
  swift_unknownObjectRetain(qword_1001C90F0);
  uint64_t v76 = v149;
  uint64_t v149 = v69;
  sub_10010A738(v76, a2, v74, v69, v75);

  swift_unknownObjectRelease(v75);
  uint64_t v77 = type metadata accessor for URL(0LL);
  sub_100081828(&qword_1001CDFB8, &qword_1001CDF98, (uint64_t)&protocol conformance descriptor for PipelineEntryTask<A>);
  uint64_t v78 = v142;
  uint64_t v79 = PipelineTask.andThen<A>(_:)(v36, v142, v77);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v36, v32);
  (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v71, v78);
  uint64_t v168 = (void *)v79;
  BOOL v81 = !sub_10000635C()
     || (type metadata accessor for Defaults(), char v80 = sub_100049C68(), v80 == 2)
     || (v80 & 1) == 0;
  sub_10010D33C(a2);
  uint64_t v82 = *(unsigned __int8 *)(v143 + 80);
  uint64_t v83 = a2;
  uint64_t v137 = a2;
  uint64_t v84 = ((v82 + 16) & ~v82) + v144;
  uint64_t v85 = (v82 + 16) & ~v82;
  uint64_t v143 = v85;
  uint64_t v144 = v82 | 7;
  uint64_t v86 = swift_allocObject(&unk_1001B0C50, v84 + 1, v82 | 7);
  sub_10010D328(v86, v86 + v85);
  *(_BYTE *)(v86 + v84) = v81;
  uint64_t v142 = v84;
  uint64_t v87 = type metadata accessor for DiskJetPackResourceBundle(0LL);
  PipelinePhase.init(mapOutput:)(sub_10010CFA0, v86, v77, v87);
  sub_1000F04B4();
  sub_10010D310(&qword_1001CDFC8);
  uint64_t v88 = sub_10010D2E0();
  uint64_t v89 = sub_10010D2D0();
  v90(v89, v167);
  sub_10010A568();
  uint64_t v168 = (void *)v88;
  static PipelinePhase.cacheValueIfSuccessful()(v87, v87);
  sub_1000F04B4();
  sub_10010D310(&qword_1001CE080);
  uint64_t v91 = sub_10010D2E0();
  uint64_t v167 = v91;
  uint64_t v92 = sub_10010D2D0();
  sub_100048DBC(v92, v93);
  sub_10010A568();
  uint64_t v168 = (void *)v91;
  uint64_t v94 = v150;
  PipelinePhase.init(mapOutput:)(sub_10010ADD4, 0LL, v87, &type metadata for Data);
  uint64_t v95 = sub_10000D33C(&qword_1001CE088);
  uint64_t v148 = v95;
  sub_100081828(&qword_1001CE090, &qword_1001CE088, (uint64_t)&protocol conformance descriptor for MapPipelineTask<A, B>);
  uint64_t v147 = v96;
  uint64_t v97 = PipelineTask.andThen<A>(_:)(v94, v95, &type metadata for Data);
  uint64_t v98 = sub_10010D2D0();
  sub_100048DBC(v98, v99);
  uint64_t v168 = (void *)v97;
  sub_10010D33C(v83);
  uint64_t v100 = v84;
  uint64_t v101 = v144;
  uint64_t v102 = swift_allocObject(&unk_1001B0C78, v100, v144);
  uint64_t v103 = v143;
  sub_10010D328(v102, v102 + v143);
  uint64_t v104 = type metadata accessor for JSPackageIndex(0LL);
  uint64_t v105 = v152;
  PipelinePhase.init(mapOutput:)(sub_10010A3B8, v102, &type metadata for Data, v104);
  sub_1000F04B4();
  sub_10010D31C(&qword_1001CE0A0);
  uint64_t v106 = sub_10010D2C0();
  sub_100048DBC(v105, *(uint64_t (**)(uint64_t, void))(v153 + 8));
  sub_10010A568();
  uint64_t v168 = (void *)v106;
  uint64_t v107 = v155;
  static PipelinePhase.cacheValueIfSuccessful()(v104, v104);
  sub_1000F04B4();
  sub_10010D31C(&qword_1001CE018);
  uint64_t v154 = sub_10010D2C0();
  (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v107, v157);
  sub_10010A568();
  uint64_t v168 = (void *)v167;
  sub_10010D33C(v137);
  uint64_t v108 = swift_allocObject(&unk_1001B0CA0, v142, v101);
  sub_10010D328(v108, v108 + v103);
  uint64_t v109 = sub_10000D33C(&qword_1001CE020);
  uint64_t v110 = v158;
  PipelinePhase.init(mapOutput:)(sub_10010D0B4, v108, v87, v109);
  uint64_t v111 = PipelineTask.andThen<A>(_:)(v110, v148, v109);
  sub_10010D35C(v159);
  uint64_t v168 = (void *)v111;
  uint64_t v112 = v161;
  static PipelinePhase.cacheValueIfSuccessful()(v109, v109);
  uint64_t v113 = sub_1000F04B4();
  sub_100081828(&qword_1001CE0B0, &qword_1001CE0A8, (uint64_t)&protocol conformance descriptor for MapPipelineTask<A, B>);
  uint64_t v160 = PipelineTask.andThen<A>(_:)(v112, v113, v109);
  sub_10010D35C(v162);
  uint64_t v114 = sub_10010A568();
  uint64_t v115 = dispatch thunk of MapPipelineTask.run()(v114);
  sub_10000DE08(v115, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v116 = enum case for DispatchQoS.QoSClass.default(_:);
  uint64_t v117 = v165;
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v164 + 104);
  uint64_t v119 = v166;
  v118(v165, enum case for DispatchQoS.QoSClass.default(_:), v166);
  uint64_t v120 = (void *)sub_10010D350();
  sub_10010D344();
  uint64_t v124 = sub_10010D300( (uint64_t)sub_10010D0D8,  v121,  v122,  v123,  (uint64_t)&unk_1001B0CF0,  (uint64_t)sub_100081654,  (uint64_t)sub_10010D270);

  uint64_t v125 = swift_release();
  dispatch thunk of MapPipelineTask.run()(v125);
  v169[0] = type metadata accessor for SyncTaskScheduler(0LL);
  v169[1] = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(&v168);
  SyncTaskScheduler.init()(v126);
  Promise.map<A>(on:_:)(&v168, sub_100109B24, 0LL, &type metadata for JetpackProperties);
  swift_release();
  sub_10000D3A0(&v168);
  v118(v117, v116, v119);
  uint64_t v127 = (void *)sub_10010D350();
  sub_10010D344();
  sub_10010D300( (uint64_t)sub_10010D108,  v128,  v129,  v130,  (uint64_t)&unk_1001B0CC8,  (uint64_t)sub_10010D228,  (uint64_t)sub_10010D234);

  swift_release();
  uint64_t v131 = sub_1000F04B4();
  sub_100081828(&qword_1001CE040, &qword_1001CE038, (uint64_t)&protocol conformance descriptor for Promise<A>);
  uint64_t v133 = Promise.join<A>(with:)(v124, v131, v132);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v133;
}

uint64_t sub_10010C8A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 3LL * *(void *)(v6 + 72),
         *(unsigned __int8 *)(v6 + 80) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v34 = &type metadata for RemoteJetpackV2Loader;
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v13._uint64_t countAndFlagsBits = 0LL;
    v13._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    uint64_t v14 = v34;
    uint64_t v15 = sub_10000D37C(v33, (uint64_t)v34);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v31[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v17._uint64_t countAndFlagsBits = 5972026LL;
    v17._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t MetatypeMetadata = &type metadata for String;
    v31[0] = v10;
    v31[1] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v19._uint64_t countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t v20 = v34;
    uint64_t v21 = sub_10000D37C(v33, (uint64_t)v34);
    uint64_t v22 = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    v31[0] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v31);
    sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 58LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v33);
  LogMessage.init(stringLiteral:)(0xD000000000000017LL);
  swift_getErrorValue(a1, v35);
  uint64_t v24 = v30;
  uint64_t v34 = v30;
  sub_1000663D0(v33);
  (*((void (**)(void))v24[-1].Description + 2))();
  static LogMessage.safe(_:)(v33);
  sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
  uint64_t v26 = static os_log_type_t.error.getter(v25);
  sub_1000BD1B0(v26, v7);
  uint64_t v27 = swift_bridgeObjectRelease();
  swift_willThrow(v27);
  return swift_errorRetain(a1);
}

uint64_t sub_10010CBB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = type metadata accessor for LogMessage(0LL);
  uint64_t v9 = swift_allocObject( v7,  ((*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v8 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v8 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v36 = &type metadata for RemoteJetpackV2Loader;
  id v10 = (id)AMSLogKey(v9);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v31 = a2;
    uint64_t v14 = v13;

    swift_bridgeObjectRetain(v14);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = v36;
    Swift::String v17 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t DynamicType = swift_getDynamicType(v17, v16, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v33[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 5972026LL;
    v19._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v12;
    v33[1] = v14;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v20._uint64_t countAndFlagsBits = 93LL;
    v20._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    LogMessage.init(stringInterpolation:)(v6);
    a2 = v31;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v36;
    Swift::String v23 = sub_10000D37C(v35, (uint64_t)v36);
    uint64_t v24 = swift_getDynamicType(v23, v22, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v24);
    v33[0] = v24;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v33);
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 58LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v6);
  }

  sub_10000D3A0(v35);
  LogMessage.init(stringLiteral:)(0xD000000000000028LL);
  swift_getErrorValue(a1, v37);
  uint64_t v26 = v32;
  uint64_t v36 = v32;
  sub_1000663D0(v35);
  (*((void (**)(void))v26[-1].Description + 2))();
  static LogMessage.safe(_:)(v35);
  sub_10000DA68((uint64_t)v35, &qword_1001CAAD0);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v9);
  swift_bridgeObjectRelease();
  uint64_t result = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  *a2 = result;
  return result;
}

uint64_t sub_10010CEFC()
{
  return sub_10010D284(v1, v6 + v5 + 1, v4 | 7);
}

uint64_t sub_10010CFA0(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1000AEE34() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10010A834(a1, v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(void *)(v3 + 64)));
}

void sub_10010CFE4(uint64_t *a1)
{
}

uint64_t sub_10010CFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10010B728(*(void *)a1, *(void *)(a1 + 8), a2, a3);
}

uint64_t sub_10010D014()
{
  return sub_10010D284(v1, v5 + v6, v4 | 7);
}

void sub_10010D0B4()
{
  uint64_t v0 = sub_10010A5A0();
  sub_10010B3A8(v0, v1, v2);
  sub_10010A6CC();
}

uint64_t sub_10010D0D8(uint64_t a1)
{
  return sub_10010C8A4(a1);
}

uint64_t sub_10010D0EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_10010D138(a1, a2, a3, a4, (uint64_t)&unk_1001B0CF0, (uint64_t)sub_100081654, (uint64_t)sub_10010D270);
}

uint64_t sub_10010D108@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10010CBB4(a1, a2);
}

uint64_t sub_10010D11C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_10010D138(a1, a2, a3, a4, (uint64_t)&unk_1001B0CC8, (uint64_t)sub_10010D228, (uint64_t)sub_10010D234);
}

uint64_t sub_10010D138(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v16[3] = sub_10000DE08(a1, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  void v16[4] = &protocol witness table for OS_dispatch_queue;
  v16[0] = a3;
  uint64_t v13 = Promise.__allocating_init()(a3);
  uint64_t v14 = (void *)swift_allocObject(a5, 40LL, 7LL);
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  swift_retain_n(v13, 2LL);
  swift_retain(a2);
  Promise.then(perform:orCatchError:on:)(a6, v13, a7, v14, v16);
  swift_release();
  swift_release();
  sub_10000D3A0(v16);
  return v13;
}

void sub_10010D228(uint64_t *a1)
{
}

void sub_10010D234(uint64_t a1)
{
  sub_10006316C( a1,  *(void *)(v1 + 16),  *(void *(**)(uint64_t *__return_ptr))(v1 + 24),  *(void *)(v1 + 32));
}

uint64_t sub_10010D244()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10010D270(uint64_t a1)
{
  return sub_1000631B0( a1,  *(void *)(v1 + 16),  *(void *(**)(uint64_t *__return_ptr))(v1 + 24),  *(void *)(v1 + 32));
}

uint64_t sub_10010D27C(uint64_t a1)
{
  return sub_1000FE524(a1);
}

uint64_t sub_10010D284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_10010D29C()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_10010D2C0()
{
  return PipelineTask.andThen<A>(_:)(v2, v0, v1);
}

uint64_t sub_10010D2D0()
{
  return v0;
}

uint64_t sub_10010D2E0()
{
  return PipelineTask.andThen<A>(_:)(v1, v0, v2);
}

uint64_t sub_10010D2F0(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 120);
}

uint64_t sub_10010D300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10010D138(a1, 0LL, v8, v7, a5, a6, a7);
}

void sub_10010D310(unint64_t *a1)
{
}

void sub_10010D31C(unint64_t *a1)
{
}

uint64_t sub_10010D328(uint64_t a1, uint64_t a2)
{
  return sub_10010A374(v2, a2);
}

void sub_10010D330()
{
}

uint64_t sub_10010D33C(uint64_t a1)
{
  return sub_10010A32C(a1, v1);
}

uint64_t sub_10010D344()
{
  return v1(v0, v2);
}

uint64_t sub_10010D350()
{
  return static OS_dispatch_queue.global(qos:)(v0);
}

uint64_t sub_10010D35C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_10010D368()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

id sub_10010D374(uint64_t a1, SEL *a2)
{
  uint64_t v4 = v16[0];
  uint64_t v5 = v16[1];
  int64_t v6 = v16[3];
  unint64_t v7 = v16[4];
  int64_t v8 = (unint64_t)(v16[2] + 64LL) >> 6;
  id result = (id)swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v6 << 6);
  while (1)
  {
    id result = objc_msgSend( *(id *)(*(void *)(*(void *)(v4 + 56) + 8 * v11)
                     + OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_listener),
               *a2);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      return (id)swift_release(v4);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        return (id)swift_release(v4);
      }
      unint64_t v13 = *(void *)(v5 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          return (id)swift_release(v4);
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            return (id)swift_release(v4);
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              return (id)swift_release(v4);
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v5 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

              return (id)swift_release(v4);
            }
          }
        }
      }
    }

void sub_10010D4CC(uint64_t a1)
{
}

void sub_10010D4EC(uint64_t a1)
{
}

void sub_10010D50C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000105F0();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  __chkstk_darwin(v12);
  sub_10000DE7C();
  uint64_t v15 = v14 - v13;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = &_swiftEmptyArrayStorage;
  uint64_t v16 = sub_10006FF54( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v17 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  uint64_t v18 = sub_10006FF94((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v4,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v5);
  *a4 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(a2, a3, v15, v11, v4, 0LL);
  sub_10000DD84();
}

void sub_10010D688(uint64_t a1)
{
}

uint64_t sub_10010D6A8()
{
  uint64_t v2 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = type metadata accessor for LogMessage(0LL);
  uint64_t v4 = swift_allocObject( v2,  ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v3 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v31 = type metadata accessor for RunLoop();
  v30[0] = v0;
  id v5 = v0;
  id v6 = (id)AMSLogKey(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    swift_bridgeObjectRetain(v9);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v10 = v31;
    uint64_t v11 = sub_10000D37C(v30, v31);
    uint64_t DynamicType = swift_getDynamicType(v11, v10, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DCE8();
    sub_10000E8FC();
    v13._uint64_t countAndFlagsBits = 5972026LL;
    v13._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    sub_10000DCE8();
    sub_10000E8FC();
    v14._uint64_t countAndFlagsBits = 93LL;
    v14._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    sub_10010EAC8();
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v15 = v31;
    uint64_t v16 = sub_10000D37C(v30, v31);
    uint64_t v17 = swift_getDynamicType(v16, v15, 1LL);
    swift_getMetatypeMetadata(v17);
    sub_10000DCE8();
    sub_10000E8FC();
    v18._uint64_t countAndFlagsBits = 58LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    sub_10010EAC8();
  }

  sub_10000D3A0(v30);
  uint64_t v19 = LogMessage.init(stringLiteral:)(0x676E696E6E7552LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v19 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  sub_1000BD1B0(v20, v4);
  swift_bridgeObjectRelease();
  uint64_t v21 = qword_1001C80E8;
  id v22 = v5;
  if (v21 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  uint64_t v23 = sub_10010EA94();
  sub_100132364(v23, v24);
  Swift::String v25 = objc_autoreleasePoolPush();
  sub_10010DF38();
  objc_autoreleasePoolPop(v25);
  uint64_t v26 = sub_10010EA94();
  sub_100133128(v26, v27);

  sub_10010E210();
  if (qword_1001C7F20 != -1) {
    swift_once(&qword_1001C7F20, sub_10001DBA4);
  }
  uint64_t v28 = sub_10010EABC(qword_1001DBAC0);
  sub_10010D374(v28, (SEL *)&selRef_suspend);
  swift_bridgeObjectRelease();
  return sub_10010DEC4();
}

uint64_t sub_10010D9D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd7RunLoop_cloudKitPushSubscription);
  *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd7RunLoop_cloudKitPushSubscription) = a1;
  return swift_release(v2);
}

uint64_t sub_10010D9F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd7RunLoop_terminationSignalSource);
  *(void *)(v1 + OBJC_IVAR____TtC14amsengagementd7RunLoop_terminationSignalSource) = a1;
  return swift_unknownObjectRelease(v2);
}

void sub_10010DA08()
{
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_10000DE7C();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_1000105F0();
  sub_10000DAA0(0LL, &qword_1001CE188, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v8 = static OS_dispatch_source.makeSignalSource(signal:queue:)(15LL, 0LL);
  uint64_t ObjectType = swift_getObjectType(v8);
  uint64_t v10 = swift_allocObject(&unk_1001B0D20, 24LL, 7LL);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_10010EA6C;
  void aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100061FB8;
  aBlock[3] = &unk_1001B0D38;
  uint64_t v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  sub_10010DE18();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v1, v5, v11, ObjectType);
  _Block_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v13);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v6);
  swift_release();
  uint64_t v12 = swift_unknownObjectRetain(v8);
  sub_10010D9F0(v12);
  OS_dispatch_source.activate()();
  swift_unknownObjectRelease(v8);
  sub_10000DD84();
}

void sub_10010DBA8(void *a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = type metadata accessor for LogMessage(0LL);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v6 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v29 = type metadata accessor for RunLoop();
  v28[0] = a1;
  id v8 = (id)AMSLogKey(a1);
  if (v8)
  {
    Swift::String v14 = v8;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v29;
    uint64_t v20 = sub_10000D37C(v28, v29);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v26[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t MetatypeMetadata = &type metadata for String;
    v26[0] = v15;
    v26[1] = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v9._uint64_t countAndFlagsBits = 0LL;
    v9._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v9);
    uint64_t v10 = v29;
    uint64_t v11 = sub_10000D37C(v28, v29);
    uint64_t v12 = swift_getDynamicType(v11, v10, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v12);
    v26[0] = v12;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v26);
    sub_10000E888((uint64_t)v26);
    v13._uint64_t countAndFlagsBits = 58LL;
    v13._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    LogMessage.init(stringInterpolation:)(v4);
  }

  sub_10000D3A0(v28);
  uint64_t v24 = LogMessage.init(stringLiteral:)(0xD00000000000003FLL);
  if (qword_1001C7F80 != -1) {
    uint64_t v24 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  sub_1000BD1B0(v25, v7);
  swift_bridgeObjectRelease();
  exit(0);
}

uint64_t sub_10010DE18()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_10006FF54( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  uint64_t v3 = sub_10006FF94((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10010DEC4()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd7RunLoop_terminationSignalSource);
  if (v1)
  {
    swift_getObjectType(*(void *)(v0 + OBJC_IVAR____TtC14amsengagementd7RunLoop_terminationSignalSource));
    swift_unknownObjectRetain(v1);
    OS_dispatch_source.cancel()();
    sub_10010D9F0(0LL);
    return swift_unknownObjectRelease(v1);
  }

  return result;
}

uint64_t sub_10010DF38()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___AMSEphemeralDefaults);
  [v0 setHARLoggingItemLimit:0];
  [v0 setPreferEphemeralURLSessions:1];
  type metadata accessor for Migrator();
  sub_1000F09EC();
  sub_10010DA08();
  if (qword_1001C7F20 != -1) {
    swift_once(&qword_1001C7F20, sub_10001DBA4);
  }
  uint64_t v1 = sub_10010EABC(qword_1001DBAC0);
  sub_10010D374(v1, (SEL *)&selRef_resume);
  swift_bridgeObjectRelease();
  if (qword_1001C7EF8 != -1) {
    swift_once(&qword_1001C7EF8, sub_100009380);
  }
  sub_10000B218();
  if (qword_1001C8090 != -1) {
    swift_once(&qword_1001C8090, sub_1000F7A9C);
  }
  uint64_t v2 = type metadata accessor for ActivityObserver();
  swift_initStaticObject(v2, &unk_1001C8108);
  sub_10000EE80();
  if (qword_1001C80A0 != -1) {
    swift_once(&qword_1001C80A0, sub_100105904);
  }
  sub_100105BF0();
  if (qword_1001C80F8 != -1) {
    swift_once(&qword_1001C80F8, sub_10014C5B0);
  }
  if (qword_1001C8088 != -1) {
    swift_once(&qword_1001C8088, sub_1000F5440);
  }
  if (qword_1001C80E0 != -1) {
    swift_once(&qword_1001C80E0, sub_10012D598);
  }
  uint64_t v3 = sub_1001064CC(0xD000000000000033LL, 0x80000001001746F0LL, (uint64_t)sub_10010E1C0, 0LL);
  sub_10010D9D8(v3);
  type metadata accessor for ServerDataCacheService();
  id v4 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  sub_100117118();

  return 1LL;
}

void sub_10010E1C0()
{
  if (qword_1001C8070 != -1) {
    swift_once(&qword_1001C8070, sub_1000E4144);
  }
  sub_1000E6B64();
}

void sub_10010E210()
{
  char v2 = 1;
  do
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    sub_10010E268(v0, &v2);
    objc_autoreleasePoolPop(v1);
  }

  while ((v2 & 1) != 0);
}

void sub_10010E268(void *a1, _BYTE *a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  CFRunLoopRunResult v7 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 15.0, 0);
  if ((v7 - 3) >= 2)
  {
    CFRunLoopRunResult v26 = v7;
    if ((v7 - 1) > 1)
    {
      uint64_t v65 = 0LL;
      unint64_t v66 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(23LL);
      v60._uint64_t countAndFlagsBits = 0xD000000000000015LL;
      v60._object = (void *)0x80000001001767A0LL;
      String.append(_:)(v60);
      LODWORD(v6sub_10000D3A0(v0 + 2) = v26;
      type metadata accessor for CFRunLoopRunResult(0LL);
      _print_unlocked<A, B>(_:_:)( &v62,  &v65,  v61,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v65,  v66,  "amsengagementd/RunLoop.swift",  28LL,  2LL,  111LL,  0);
      __break(1u);
    }

    else
    {
      uint64_t v27 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v28 = type metadata accessor for LogMessage(0LL);
      uint64_t v29 = swift_allocObject( v27,  ((*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL))
            + 2LL * *(void *)(*(void *)(v28 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v28 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v67 = (void *)type metadata accessor for RunLoop();
      uint64_t v65 = (uint64_t)a1;
      id v30 = (id)AMSLogKey(a1);
      if (v30)
      {
        uint64_t v31 = v30;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        uint64_t v34 = v33;

        swift_bridgeObjectRetain(v34);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v35._uint64_t countAndFlagsBits = 0LL;
        v35._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v35);
        uint64_t v36 = v67;
        uint64_t v37 = sub_10000D37C(&v65, (uint64_t)v67);
        uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        uint64_t v62 = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v39._uint64_t countAndFlagsBits = 5972026LL;
        v39._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v39);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v62 = v32;
        uint64_t v63 = v34;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v40._uint64_t countAndFlagsBits = 93LL;
        v40._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v40);
        LogMessage.init(stringInterpolation:)(v6);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v41._uint64_t countAndFlagsBits = 0LL;
        v41._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v41);
        uint64_t v42 = v67;
        uint64_t v43 = sub_10000D37C(&v65, (uint64_t)v67);
        uint64_t v44 = swift_getDynamicType(v43, v42, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v44);
        uint64_t v62 = v44;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v45._uint64_t countAndFlagsBits = 58LL;
        v45._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v45);
        LogMessage.init(stringInterpolation:)(v6);
      }

      sub_10000D3A0(&v65);
      uint64_t v46 = LogMessage.init(stringLiteral:)(0xD000000000000016LL);
      if (qword_1001C7F80 != -1) {
        uint64_t v46 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
      }
      uint64_t v47 = static os_log_type_t.debug.getter(v46);
      sub_1000BD1B0(v47, v29);
      swift_bridgeObjectRelease();
      *a2 = 0;
    }
  }

  else
  {
    if (qword_1001C80E8 != -1) {
      swift_once(&qword_1001C80E8, sub_100131F04);
    }
    sub_100132320();
    if (v8 >= 1)
    {
      uint64_t v9 = v8;
      if (qword_1001C7FF0 != -1) {
        swift_once(&qword_1001C7FF0, sub_1000BD7C4);
      }
      uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
      uint64_t v12 = *(void *)(v11 + 72);
      uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
      uint64_t v68 = v12;
      uint64_t v14 = swift_allocObject(v10, ((v13 + 32) & ~v13) + 2 * v12, v13 | 7);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v67 = (void *)type metadata accessor for RunLoop();
      uint64_t v65 = (uint64_t)a1;
      id v15 = (id)AMSLogKey(a1);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        uint64_t v19 = v18;

        swift_bridgeObjectRetain(v19);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v20._uint64_t countAndFlagsBits = 0LL;
        v20._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v20);
        uint64_t v21 = v67;
        Swift::String v22 = sub_10000D37C(&v65, (uint64_t)v67);
        uint64_t v23 = swift_getDynamicType(v22, v21, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
        uint64_t v62 = v23;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v24._uint64_t countAndFlagsBits = 5972026LL;
        v24._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v24);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v62 = v17;
        uint64_t v63 = v19;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v25._uint64_t countAndFlagsBits = 93LL;
        v25._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v25);
        LogMessage.init(stringInterpolation:)(v6);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v48._uint64_t countAndFlagsBits = 0LL;
        v48._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v48);
        uint64_t v49 = v67;
        uint64_t v50 = sub_10000D37C(&v65, (uint64_t)v67);
        uint64_t v51 = swift_getDynamicType(v50, v49, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v51);
        uint64_t v62 = v51;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v62);
        sub_10000E888((uint64_t)&v62);
        v52._uint64_t countAndFlagsBits = 58LL;
        v52._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v52);
        LogMessage.init(stringInterpolation:)(v6);
      }

      sub_10000D3A0(&v65);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(32LL, 2LL);
      v53._uint64_t countAndFlagsBits = 0x7261206572656854LL;
      v53._object = (void *)0xEA00000000002065LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      uint64_t v67 = &type metadata for Int;
      uint64_t v65 = v9;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000E888((uint64_t)&v65);
      v54._object = (void *)0x80000001001767C0LL;
      v54._uint64_t countAndFlagsBits = 0xD000000000000016LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      sub_10013222C();
      uint64_t v56 = v55;
      uint64_t v67 = (void *)sub_10000DAA0(0LL, &qword_1001CE180, &OBJC_CLASS___NSCountedSet_ptr);
      uint64_t v65 = v56;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000E888((uint64_t)&v65);
      v57._uint64_t countAndFlagsBits = 0LL;
      v57._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      uint64_t v58 = LogMessage.init(stringInterpolation:)(v6);
      uint64_t v59 = static os_log_type_t.debug.getter(v58);
      sub_1000BD1B0(v59, v14);
      swift_bridgeObjectRelease();
    }
  }

id sub_10010E920()
{
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd7RunLoop_cloudKitPushSubscription] = 0LL;
  uint64_t v1 = OBJC_IVAR____TtC14amsengagementd7RunLoop_setupAssistantObserver;
  uint64_t v2 = type metadata accessor for SetupAssistantObserver();
  *(void *)&v0[v1] = swift_allocObject(v2, 16LL, 7LL);
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd7RunLoop_terminationSignalSource] = 0LL;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for RunLoop();
  return objc_msgSendSuper2(&v4, "init");
}

id sub_10010E9B0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RunLoop();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RunLoop()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd7RunLoop);
}

uint64_t sub_10010EA48()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10010EA6C()
{
}

uint64_t sub_10010EA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10010EA84(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_10010EA8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

uint64_t sub_10010EA94()
{
  return 0x74536E6F6D656164LL;
}

uint64_t sub_10010EABC@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 + 24));
}

uint64_t sub_10010EAC8()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

BOOL sub_10010EAD4(unsigned __int8 *a1)
{
  uint64_t v6 = *a1;
  type metadata accessor for AppDatabase();
  sub_10010FCCC();
  if (v1)
  {
    if (qword_1001C7FD8 != -1) {
      swift_once(&qword_1001C7FD8, sub_1000BD6C0);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v8 = sub_100010570();
    *(_OWORD *)(sub_10010FCA8(v8) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v9 = sub_10000D33C(&qword_1001CE190);
    id v10 = (id)sub_10010FDA0(v9, (uint64_t)&type metadata for ScheduleDatabase);
    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      sub_10004870C();
      sub_100020BB4();
      sub_10008E3F8();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v11 = sub_100010530();
      sub_10001A0CC(v11);
      sub_1000A8F18();
      sub_10000DC14();
      sub_1000A8F24((uint64_t)&type metadata for String);
      sub_1000A8F18();
      sub_10000DC4C(93LL);
      sub_100010690();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v12 = sub_100010530();
      sub_10001A0CC(v12);
      sub_1000102E0((uint64_t)v19, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_100010690();
    }

    sub_10000D3A0(v20);
    sub_10010FCFC();
    sub_10010FCE4((uint64_t)"Failed to fetch schedules. ");
    sub_1000486C0();
    uint64_t v13 = sub_10010FD5C();
    sub_10010FD28((uint64_t)v13);
    sub_10001A66C();
    sub_1000102E0((uint64_t)v20, &qword_1001CAAD0);
    sub_10000DC08();
    uint64_t v14 = sub_100010690();
    uint64_t v15 = static os_log_type_t.error.getter(v14);
    sub_10010FD94(v15);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    return 0LL;
  }

  else
  {
    sub_10010FD80();
    sub_10010FD74();
    uint64_t v7 = type metadata accessor for ScheduleInfo.Metadata(0LL);
    sub_10002DA64(*(void *)&a1[*(int *)(v7 + 44)], *(void *)&a1[*(int *)(v7 + 44) + 8], v2);
    swift_release(v6);
    uint64_t v17 = type metadata accessor for ScheduleInfo(0LL);
    BOOL v18 = sub_1000102D4(v2, 1LL, v17) != 1;
    sub_1000102E0(v2, &qword_1001C9E00);
  }

  return v18;
}

void sub_10010ED38(uint64_t a1)
{
  if (qword_1001C7FD8 != -1) {
    swift_once(&qword_1001C7FD8, sub_1000BD6C0);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (char *)((v6 + 32) & ~v6);
  uint64_t v45 = v6 | 7;
  uint64_t v46 = &v7[2 * v5];
  uint64_t v8 = swift_allocObject(v3, v46, v6 | 7);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v44 = sub_10000D33C(&qword_1001CE190);
  Swift::String v53 = (void *)v44;
  id v9 = (id)sub_10001A560((uint64_t)&type metadata for ScheduleDatabase);
  if (v9)
  {
    uint64_t v10 = sub_1000105E8((uint64_t)v9);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10008E3F8();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v13 = sub_100010530();
    sub_10001A0CC(v13);
    sub_1000102E0((uint64_t)&v48, &qword_1001CAAD0);
    sub_10000DC14();
    uint64_t v50 = &type metadata for String;
    uint64_t v48 = v10;
    uint64_t v49 = v12;
    sub_10000DF68();
    sub_1000102E0((uint64_t)&v48, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_10001A298();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001058C();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v14 = sub_100010530();
    uint64_t v15 = sub_10001A0CC(v14);
    sub_10008E49C(v15, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10001A298();
  }

  sub_10000D3A0(&v51);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v55._object = (void *)0x8000000100176960LL;
  v55._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  sub_10001A2AC(v55);
  uint64_t v16 = (unsigned __int8 *)(a1 + *(int *)(type metadata accessor for ScheduleInfo(0LL) + 20));
  uint64_t v17 = sub_100112344();
  Swift::String v53 = &type metadata for String;
  uint64_t v51 = v17;
  uint64_t v52 = v18;
  sub_10008E3F0((uint64_t)&v51);
  sub_1000102E0((uint64_t)&v51, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v19 = sub_10001A298();
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  sub_1000BD1B0(v20, v8);
  swift_bridgeObjectRelease();
  uint64_t v21 = *v16;
  uint64_t v22 = sub_10010FD8C();
  uint64_t v23 = v21;
  Swift::String v24 = (void *)v22;
  uint64_t v25 = sub_100023140(v23, 0);
  if (v47)
  {
    uint64_t v29 = swift_allocObject(v3, v46, v45);
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    Swift::String v53 = (void *)v44;
    id v30 = (id)sub_10001A560((uint64_t)&type metadata for ScheduleDatabase);
    if (v30)
    {
      uint64_t v31 = sub_1000105E8((uint64_t)v30);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      sub_10008E3F8();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v34 = sub_100010530();
      sub_10001A0CC(v34);
      sub_10010FCA0((uint64_t)&v48);
      sub_10000DC14();
      uint64_t v50 = &type metadata for String;
      uint64_t v48 = v31;
      uint64_t v49 = v33;
      sub_10000DF68();
      sub_10010FCA0((uint64_t)&v48);
      sub_10000DC4C(93LL);
      sub_10001A298();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v35 = sub_100010530();
      uint64_t v36 = sub_10001A0CC(v35);
      sub_10008E49C(v36, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10001A298();
    }

    sub_10000D3A0(&v51);
    sub_1000485F4(28LL);
    v56._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v56._object = (void *)0x8000000100176980LL;
    sub_10001A2AC(v56);
    uint64_t v37 = &v16[*(int *)(type metadata accessor for ScheduleInfo.Metadata(0LL) + 44)];
    uint64_t v39 = *(void *)v37;
    uint64_t v38 = *((void *)v37 + 1);
    Swift::String v53 = &type metadata for String;
    uint64_t v51 = v39;
    uint64_t v52 = v38;
    swift_bridgeObjectRetain(v38);
    sub_100029288();
    sub_10010FCA0((uint64_t)&v51);
    sub_10008E430();
    swift_getErrorValue(v47, v54);
    Swift::String v40 = sub_10010FD3C();
    sub_10008E4A4((uint64_t)v40);
    sub_10008E3F0((uint64_t)&v51);
    sub_10010FCA0((uint64_t)&v51);
    sub_10000DC08();
    uint64_t v41 = sub_10001A298();
    uint64_t v42 = static os_log_type_t.error.getter(v41);
    sub_1000BD1B0(v42, v29);
    uint64_t v43 = swift_bridgeObjectRelease();
    swift_willThrow(v43);
  }

  else
  {
    uint64_t v26 = v25;
    sub_10010FD6C();
    uint64_t v28 = v27;
    swift_release(v26);
    sub_10002F3F0(a1);
    swift_release(v28);
  }

  sub_100029188();
}

uint64_t sub_10010F1D4(uint64_t a1)
{
  if (v1)
  {
    if (qword_1001C7FD8 != -1) {
      swift_once(&qword_1001C7FD8, sub_1000BD6C0);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v4 = sub_100010570();
    *(_OWORD *)(sub_10010FCA8(v4) + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v5 = sub_10000D33C(&qword_1001CE190);
    id v6 = (id)sub_10010FDA0(v5, (uint64_t)&type metadata for ScheduleDatabase);
    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      sub_10004870C();
      sub_100020BB4();
      sub_10008E3F8();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v7 = sub_100010530();
      sub_10001A0CC(v7);
      sub_1000A8F18();
      sub_10000DC14();
      sub_1000A8F24((uint64_t)&type metadata for String);
      sub_1000A8F18();
      sub_10000DC4C(93LL);
      sub_100010690();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v8 = sub_100010530();
      sub_10001A0CC(v8);
      sub_1000102E0((uint64_t)v13, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_100010690();
    }

    sub_10000D3A0(v14);
    sub_10010FCFC();
    sub_10010FCE4((uint64_t)"Failed to fetch schedules. ");
    sub_1000486C0();
    id v9 = sub_10010FD5C();
    sub_10010FD28((uint64_t)v9);
    sub_10001A66C();
    sub_1000102E0((uint64_t)v14, &qword_1001CAAD0);
    sub_10000DC08();
    uint64_t v10 = sub_100010690();
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    sub_10010FD94(v11);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v1);
  }

  else
  {
    sub_10010FD80();
    sub_10010FD74();
    sub_10002D298();
    return swift_release(a1);
  }

void sub_10010F3EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1001C7FD8 != -1) {
    swift_once(&qword_1001C7FD8, sub_1000BD6C0);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v5 = *(void *)(sub_100010570() - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v39 = v3;
  uint64_t v37 = v7 | 7;
  uint64_t v38 = ((v7 + 32) & ~v7) + 2 * v6;
  uint64_t v8 = swift_allocObject(v3, v38, v7 | 7);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v36 = sub_10000D33C(&qword_1001CE190);
  uint64_t v51 = (void *)v36;
  id v9 = (id)sub_10001A560((uint64_t)&type metadata for ScheduleDatabase);
  if (v9)
  {
    uint64_t v10 = sub_1000105E8((uint64_t)v9);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10008E3F8();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v13 = sub_100010530();
    sub_10001A0CC(v13);
    sub_10010FCA0((uint64_t)&v47);
    sub_10000DC14();
    uint64_t v49 = &type metadata for String;
    uint64_t v47 = v10;
    uint64_t v48 = v12;
    sub_10000DF68();
    sub_10010FCA0((uint64_t)&v47);
    sub_10000DC4C(93LL);
    sub_10001A298();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001058C();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v14 = sub_100010530();
    uint64_t v15 = sub_10001A0CC(v14);
    sub_10008E49C(v15, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10001A298();
  }

  sub_10000D3A0(v50);
  sub_1000485F4(24LL);
  v53._object = (void *)0x80000001001768D0LL;
  v53._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  sub_10001A2AC(v53);
  sub_10010FD4C();
  sub_100029288();
  sub_10010FCA0((uint64_t)v50);
  v16._uint64_t countAndFlagsBits = 0x206D6F726620LL;
  v16._object = (void *)0xE600000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v16);
  uint64_t v51 = &unk_1001A8968;
  LOBYTE(v50[0]) = a3;
  sub_100029288();
  sub_10010FCA0((uint64_t)v50);
  sub_10000DC08();
  uint64_t v17 = sub_10001A298();
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  sub_1000BD1B0(v18, v8);
  swift_bridgeObjectRelease();
  uint64_t v19 = (void *)sub_10010FD8C();
  uint64_t v20 = v42;
  uint64_t v21 = sub_100023140(a3, 0);
  if (v42)
  {
    uint64_t v25 = swift_allocObject(v39, v38, v37);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v43 = v25;
    uint64_t v51 = (void *)v36;
    id v26 = (id)sub_10001A560((uint64_t)&type metadata for ScheduleDatabase);
    if (v26)
    {
      uint64_t v41 = sub_1000105E8((uint64_t)v26);
      uint64_t v28 = v27;

      swift_bridgeObjectRetain(v28);
      sub_10008E3F8();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v29 = sub_100010530();
      sub_10001A0CC(v29);
      sub_1000102E0((uint64_t)&v47, &qword_1001CAAD0);
      sub_10000DC14();
      uint64_t v49 = &type metadata for String;
      uint64_t v47 = v41;
      uint64_t v48 = v28;
      sub_10000DF68();
      sub_1000102E0((uint64_t)&v47, &qword_1001CAAD0);
      sub_10000DC4C(93LL);
      sub_10001A298();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10008E3CC();
      uint64_t v30 = sub_100010530();
      uint64_t v31 = sub_10001A0CC(v30);
      sub_10008E49C(v31, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10001A298();
    }

    sub_10000D3A0(v50);
    sub_1000485F4(30LL);
    v54._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v54._object = (void *)0x80000001001768F0LL;
    sub_10001A2AC(v54);
    sub_10010FD4C();
    sub_100029288();
    sub_10002931C();
    sub_10008E430();
    swift_getErrorValue(v20, v52, v46);
    uint64_t v32 = sub_10010FD3C();
    sub_10008E4A4((uint64_t)v32);
    sub_10008E3F0((uint64_t)v50);
    sub_10002931C();
    sub_10000DC08();
    uint64_t v33 = sub_10001A298();
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    sub_1000BD1B0(v34, v43);
    uint64_t v35 = swift_bridgeObjectRelease();
    swift_willThrow(v35);
  }

  else
  {
    uint64_t v22 = v21;
    sub_10010FD6C();
    uint64_t v24 = v23;
    swift_release(v22);
    sub_10002F0BC(a1, a2);
    swift_release(v24);
  }

  sub_100029188();
}

uint64_t sub_10010F86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) + 16LL);
  sub_100063F50(v4);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4 + 1;
  uint64_t v6 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  sub_10010FC4C( a1,  v5 + ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80LL))
  + *(void *)(*(void *)(v6 - 8) + 72LL) * v4);
  swift_endAccess(v8);
  return 1LL;
}

void sub_10010F90C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = (void *)sub_10010FD8C();
  uint64_t v11 = sub_100023140(a3, 0);
  if (v4)
  {
    uint64_t v32 = a1;
    if (qword_1001C7FD8 != -1) {
      swift_once(&qword_1001C7FD8, sub_1000BD6C0);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v15 = *(void *)(sub_100010570() - 8);
    uint64_t v16 = swift_allocObject( v10,  ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
          + 2LL * *(void *)(v15 + 72),
            *(unsigned __int8 *)(v15 + 80) | 7LL);
    *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v37 = &type metadata for ScheduleDatabase;
    id v17 = (id)AMSLogKey(v16);
    if (v17)
    {
      uint64_t v31 = a2;
      uint64_t v18 = sub_1000105E8((uint64_t)v17);
      uint64_t v20 = v19;

      swift_bridgeObjectRetain(v20);
      sub_1000485F4(4LL);
      sub_100010608();
      sub_1000104C0(v36);
      uint64_t v21 = sub_100010530();
      sub_1000F02C4(v21);
      sub_10010FCA0((uint64_t)v35);
      sub_10000DC14();
      void v35[3] = &type metadata for String;
      v35[0] = v18;
      v35[1] = v20;
      a2 = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v35);
      sub_10010FCA0((uint64_t)v35);
      sub_10000DC4C(93LL);
      sub_10010FD1C();
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      sub_100010608();
      sub_1000104C0(v36);
      uint64_t v22 = sub_100010530();
      sub_1000F02C4(v22);
      sub_1000102E0((uint64_t)v35, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10010FD1C();
    }

    sub_10000D3A0(v36);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(52LL, 3LL);
    v23._object = (void *)0x8000000100176910LL;
    v23._uint64_t countAndFlagsBits = 0xD000000000000029LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    uint64_t v37 = (ValueMetadata *)&type metadata for String;
    v36[0] = v32;
    v36[1] = a2;
    sub_100020BB4();
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10010FD10();
    v24._uint64_t countAndFlagsBits = 0x70706120726F6620LL;
    v24._object = (void *)0xE900000000000020LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v37 = (ValueMetadata *)&unk_1001A8968;
    LOBYTE(v36[0]) = a3;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10010FD10();
    sub_10008E430();
    swift_getErrorValue(v4, v38, &v33);
    uint64_t v25 = v33;
    id v26 = v34;
    uint64_t v37 = v34;
    uint64_t v27 = sub_10000D63C(v36);
    (*((void (**)(void *, uint64_t, ValueMetadata *))v26[-1].Description + 2))(v27, v25, v26);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v36);
    sub_10010FD10();
    sub_10000DC08();
    uint64_t v28 = sub_10010FD1C();
    uint64_t v29 = static os_log_type_t.error.getter(v28);
    sub_1000BD1B0(v29, v16);
    uint64_t v30 = swift_bridgeObjectRelease();
    swift_willThrow(v30);
  }

  else
  {
    uint64_t v12 = v11;
    sub_10010FD6C();
    uint64_t v14 = v13;
    swift_release(v12);
    sub_10002DA64(a1, a2, a4);
    swift_release(v14);
  }

  sub_100029188();
}

uint64_t sub_10010FC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ScheduleDatabase()
{
  return &type metadata for ScheduleDatabase;
}

uint64_t sub_10010FCA0(uint64_t a1)
{
  return sub_1000102E0(a1, v1);
}

uint64_t sub_10010FCA8(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_10010FCCC()
{
  return sub_100023140(v0, 0);
}

void sub_10010FCE4(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v1);
}

uint64_t sub_10010FCFC()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 1LL);
}

uint64_t sub_10010FD10()
{
  return sub_1000102E0(v1 - 112, v0);
}

uint64_t sub_10010FD1C()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10010FD28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

void *sub_10010FD3C()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 168);
  return sub_10000D63C((void *)(v0 - 120));
}

uint64_t sub_10010FD4C()
{
  *(void *)(v1 - 96) = v0;
  uint64_t v2 = *(void *)(v1 - 184);
  *(void *)(v1 - 120) = *(void *)(v1 - 192);
  *(void *)(v1 - 11sub_10000D3A0(v0 + 2) = v2;
  return swift_bridgeObjectRetain(v2);
}

void *sub_10010FD5C()
{
  *(void *)(v0 - 96) = *(void *)(v0 - 176);
  return sub_10000D63C((void *)(v0 - 120));
}

void sub_10010FD6C()
{
}

uint64_t sub_10010FD74()
{
  return swift_release(v0);
}

void sub_10010FD80()
{
}

uint64_t sub_10010FD8C()
{
  return type metadata accessor for AppDatabase();
}

uint64_t sub_10010FD94(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_10010FDA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = a2;
  return AMSLogKey();
}

#error "10010FE08: call analysis failed (funcsize=50)"
void sub_10010FE78( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20,  uint64_t a21,  uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  sub_1000F0164();
  a21 = v25;
  a22 = v26;
  uint64_t v27 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  sub_10000DC64();
  __chkstk_darwin(v28);
  sub_10000DE7C();
  uint64_t v31 = v30 - v29;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000378A0();
  sub_1000F04EC();
  __chkstk_darwin(v35);
  sub_10000DE7C();
  uint64_t v38 = v37 - v36;
  sub_1001128F8(v22 + v27[8], (uint64_t)v34, &qword_1001CF970);
  sub_100112854(v22, v31, type metadata accessor for ScheduleInfo.Metadata);
  if (sub_1000102D4((uint64_t)v34, 1LL, v23) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v38, v31 + v27[6], v23);
    sub_100019EC0(v31, type metadata accessor for ScheduleInfo.Metadata);
    sub_100019E6C((uint64_t)v34, &qword_1001CF970);
  }

  else
  {
    sub_100019EC0(v31, type metadata accessor for ScheduleInfo.Metadata);
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v38, v34, v23);
  }

  uint64_t v39 = *(double *)(v22 + v27[10]);
  sub_100111E80();
  Date.addingTimeInterval(_:)(v39 + v40);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v38, v23);
  sub_10001A30C();
}

uint64_t sub_10010FFE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v4 = v3[13];
  int v5 = *(unsigned __int8 *)(v1 + v4);
  double v6 = sub_10001CAD4(*(_BYTE *)(v1 + v4));
  if (v5) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  uint64_t result = sub_100111F88();
  char v9 = *(_BYTE *)(v1 + v3[7]);
  uint64_t v10 = *(void *)(v1 + v3[10]);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 1);
  *(_BYTE *)(a1 + setenv("JavaScriptCoreUseJIT", "0", 1) = v9;
  *(void *)(a1 + 8) = result;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11 & 1;
  *(double *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v10;
  *(_BYTE *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0LL;
  *(_BYTE *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 57) = v7;
  *(_WORD *)(a1 + 58) = 1;
  return result;
}

uint64_t sub_100110090@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  double v6 = v3;
  type metadata accessor for Date(0LL);
  sub_1000F04EC();
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  type metadata accessor for ScheduleInfo.Metadata(0LL);
  sub_10000DC64();
  __chkstk_darwin(v14);
  sub_10000DE7C();
  id v17 = (_BYTE *)(v16 - v15);
  uint64_t v18 = sub_10004BD20(a1);
  sub_1000308F4(7LL, v18, &v27);
  if (v28)
  {
    a1 = v5;
    uint64_t v5 = v4;
    uint64_t v4 = (uint64_t)v3;
    double v6 = a3;
    a3 = a2;
    a2 = &type metadata for Any;
    uint64_t v19 = sub_10000D33C(&qword_1001CA898);
    if (sub_100010BA4((uint64_t)&v29, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, v19))
    {
      sub_1001144F0();
      goto LABEL_7;
    }

    sub_1001144F0();
  }

  else
  {
    sub_100019E6C((uint64_t)&v27, &qword_1001CAAD0);
  }

  uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_7:
  *a3 = v20;
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(v13, a2, v4);
  sub_1001102C0(a1, v13, v17);
  if (v6)
  {
    sub_100114578();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v22 = type metadata accessor for ScheduleInfo(0LL);
  sub_100112810((uint64_t)v17, (uint64_t)a3 + *(int *)(v22 + 20));
  sub_1000308F4(12LL, v18, &v27);
  uint64_t v23 = swift_bridgeObjectRelease();
  if (!v28)
  {
    sub_100019E6C((uint64_t)&v27, &qword_1001CAAD0);
    goto LABEL_13;
  }

  uint64_t v24 = sub_10000DE08(v23, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  if ((sub_100010BA4((uint64_t)&v29, (uint64_t)&v27, (uint64_t)&type metadata for Any + 8, v24) & 1) == 0)
  {
LABEL_13:
    unsigned __int8 v26 = 0;
    goto LABEL_14;
  }

  id v25 = v29;
  unsigned __int8 v26 = [v29 BOOLValue];

LABEL_14:
  uint64_t result = sub_100114578();
  *((_BYTE *)a3 + *(int *)(v22 + swift_release(*(void *)(v0 + 24)) = v26;
  return result;
}

void sub_1001102C0(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v139 = a2;
  uint64_t v140 = a3;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DD5C();
  uint64_t v135 = v5;
  uint64_t v6 = type metadata accessor for TimeZone(0LL);
  uint64_t v137 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000DD5C();
  uint64_t v134 = v7;
  sub_10000D33C(&qword_1001CA2C0);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10001A284();
  uint64_t v136 = v9;
  sub_10001A210();
  __chkstk_darwin(v10);
  uint64_t v133 = (char *)&v131 - v11;
  sub_10001A210();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v131 - v13;
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v142 = *(uint64_t (***)(void, void))(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v131 - v19;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  __int128 v27 = (char *)&v131 - v26;
  __chkstk_darwin(v25);
  uint64_t v141 = (uint64_t)&v131 - v28;
  sub_10004BD20(a1);
  swift_bridgeObjectRelease();
  sub_10011446C(0LL, &v145);
  if (v146)
  {
    if (sub_100010BA4( (uint64_t)&v143,  (uint64_t)&v145,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String))
    {
      Swift::String v30 = v143;
      uint64_t v31 = v142;
      goto LABEL_6;
    }
  }

  else
  {
    sub_10008BEF0(v29, &qword_1001CAAD0);
  }

  uint64_t v31 = v142;
  v30._uint64_t countAndFlagsBits = sub_10011450C();
LABEL_6:
  char v32 = sub_10001C9CC(v30);
  if (v32 == 4)
  {
    unint64_t v33 = sub_1001128BC();
    sub_100020C48((uint64_t)&type metadata for ScheduleInfo.ScheduleError, v33);
    *(void *)uint64_t v34 = 7368801LL;
    *(void *)(v34 + 8) = 0xE300000000000000LL;
    sub_10011446C(0LL, (_OWORD *)(v34 + 16));
    sub_10001C258();
    sub_1001145A0();
    v31[1](v139, v15);
    return;
  }

  *uint64_t v140 = v32;
  sub_1001144B8(v141, 1LL);
  sub_10011446C(2LL, &v145);
  if (v146)
  {
    uint64_t v36 = sub_10000DE08(v35, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v37 = sub_100114434(v36, (uint64_t)&type metadata for Any);
    if ((v37 & 1) != 0)
    {
      uint64_t countAndFlagsBits = (void *)v143._countAndFlagsBits;
      sub_10008FAC0(v37, "doubleValue");
      Date.init(timeIntervalSinceReferenceDate:)(v39);

      uint64_t v40 = v6;
      uint64_t v41 = v14;
      uint64_t v42 = v141;
      sub_1000D1264(v43, &qword_1001CF970);
      sub_1001144B8((uint64_t)v27, 0LL);
      uint64_t v44 = v42;
      uint64_t v14 = v41;
      uint64_t v6 = v40;
      uint64_t v31 = v142;
      sub_100112918((uint64_t)v27, v44, &qword_1001CF970);
    }
  }

  else
  {
    sub_10008BEF0(v35, &qword_1001CAAD0);
  }

  sub_1001128F8(v141, (uint64_t)v24, &qword_1001CF970);
  uint64_t v45 = v139;
  ((void (*)(char *, uint64_t, uint64_t))v31[2])(v18, v139, v15);
  if (sub_1000102D4((uint64_t)v24, 1LL, v15) == 1)
  {
    sub_1001145A8((uint64_t)v20, (uint64_t)v18);
    sub_100019E6C((uint64_t)v24, &qword_1001CF970);
  }

  else
  {
    ((uint64_t (**)(char *, uint64_t))v31)[1](v18, v15);
    sub_1001145A8((uint64_t)v20, (uint64_t)v24);
  }

  uint64_t v46 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v47 = v140;
  uint64_t v132 = &v140[v46[6]];
  sub_1001145A8((uint64_t)v132, (uint64_t)v20);
  sub_10011446C(4LL, &v145);
  uint64_t v138 = v46;
  if (v146)
  {
    uint64_t v49 = sub_10000DE08(v48, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v50 = sub_100114434(v49, (uint64_t)&type metadata for Any);
    if ((v50 & 1) != 0)
    {
      uint64_t v51 = (void *)v143._countAndFlagsBits;
      uint64_t v52 = (uint64_t)&v47[v46[8]];
      sub_10008FAC0(v50, "doubleValue");
      Date.init(timeIntervalSinceReferenceDate:)(v53);

      uint64_t v54 = v52;
      uint64_t v46 = v138;
      sub_1001144B8(v54, 0LL);
      Swift::String v55 = v142;
      goto LABEL_25;
    }
  }

  else
  {
    sub_10008BEF0(v48, &qword_1001CAAD0);
  }

  Swift::String v55 = v142;
  sub_10011446C(6LL, &v145);
  if (!v146)
  {
    sub_10008BEF0(v56, &qword_1001CAAD0);
    goto LABEL_23;
  }

  uint64_t v57 = sub_10000DE08(v56, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v58 = sub_100114434(v57, (uint64_t)&type metadata for Any);
  if ((v58 & 1) == 0)
  {
LABEL_23:
    uint64_t v62 = (uint64_t)&v47[v46[8]];
    uint64_t v63 = 1LL;
    goto LABEL_24;
  }

  uint64_t v59 = (void *)v143._countAndFlagsBits;
  uint64_t v60 = (uint64_t)&v47[v46[8]];
  sub_10008FAC0(v58, "doubleValue");
  Date.init(timeIntervalSinceReferenceDate:)(v61);

  Swift::String v55 = v142;
  uint64_t v62 = v60;
  uint64_t v46 = v138;
  uint64_t v63 = 0LL;
LABEL_24:
  sub_1001144B8(v62, v63);
LABEL_25:
  sub_10011446C(8LL, &v145);
  if (!v146)
  {
    sub_10008BEF0(v64, &qword_1001CAAD0);
    goto LABEL_31;
  }

  if ((sub_100010BA4( (uint64_t)&v143,  (uint64_t)&v145,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for String) & 1) == 0)
  {
LABEL_31:
    unint64_t v72 = sub_1001128BC();
    sub_100020C48((uint64_t)&type metadata for ScheduleInfo.ScheduleError, v72);
    *(void *)uint64_t v73 = 0x696669746E656469LL;
    *(void *)(v73 + 8) = 0xEA00000000007265LL;
    sub_10011446C(8LL, (_OWORD *)(v73 + 16));
    sub_10001C258();
    sub_1001145A0();
    sub_100114558();
    int v74 = 0;
    goto LABEL_32;
  }

  object = v143._object;
  unint64_t v66 = (uint64_t *)&v47[v46[11]];
  *unint64_t v66 = v143._countAndFlagsBits;
  v66[1] = (uint64_t)object;
  sub_10000D5C0((uint64_t)v14, 1LL, 1LL, v6);
  sub_10011446C(11LL, &v145);
  if (v146)
  {
    uint64_t v68 = sub_10000DE08(v67, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    if ((sub_100114434(v68, (uint64_t)&type metadata for Any) & 1) != 0)
    {
      uint64_t v69 = (void *)v143._countAndFlagsBits;
      id v70 = [(id)v143._countAndFlagsBits integerValue];
      uint64_t v71 = (uint64_t)v133;
      TimeZone.init(secondsFromGMT:)(v70);

      sub_100019E6C((uint64_t)v14, &qword_1001CA2C0);
      Swift::String v55 = v142;
      sub_100112918(v71, (uint64_t)v14, &qword_1001CA2C0);
    }
  }

  else
  {
    sub_10008BEF0(v67, &qword_1001CAAD0);
  }

  uint64_t v133 = v14;
  uint64_t v76 = (uint64_t)v14;
  uint64_t v77 = v136;
  sub_1001128F8(v76, v136, &qword_1001CA2C0);
  uint64_t v78 = sub_1000102D4(v77, 1LL, v6);
  if ((_DWORD)v78 == 1)
  {
    sub_1000D1264(v78, &qword_1001CA2C0);
    uint64_t v79 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v80 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v81 = *(void *)(v80 + 72);
    uint64_t v82 = *(unsigned __int8 *)(v80 + 80);
    uint64_t v83 = (v82 + 32) & ~v82;
    uint64_t v136 = v81;
    uint64_t v84 = swift_allocObject(v79, v83 + 2 * v81, v82 | 7);
    *(_OWORD *)(v84 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v134 = v84 + v83;
    uint64_t v146 = sub_10000D33C(&qword_1001CE1A8);
    *(void *)&__int128 v145 = v46;
    id v85 = (id)AMSLogKey(v146);
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v88 = v87;

      sub_100020BB4();
      uint64_t v89 = v135;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v90._uint64_t countAndFlagsBits = sub_10011450C();
      LogMessage.StringInterpolation.appendLiteral(_:)(v90);
      uint64_t v91 = v146;
      uint64_t v92 = sub_10000D37C(&v145, v146);
      uint64_t DynamicType = swift_getDynamicType(v92, v91, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v143._uint64_t countAndFlagsBits = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v143);
      sub_100019E6C((uint64_t)&v143, &qword_1001CAAD0);
      v94._uint64_t countAndFlagsBits = 5972026LL;
      v94._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v94);
      uint64_t MetatypeMetadata = &type metadata for String;
      v143._uint64_t countAndFlagsBits = v131;
      v143._object = v88;
      uint64_t v45 = v139;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v143);
      uint64_t v46 = v138;
      sub_100019E6C((uint64_t)&v143, &qword_1001CAAD0);
      v95._uint64_t countAndFlagsBits = 93LL;
      v95._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v95);
      LogMessage.init(stringInterpolation:)(v89);
      uint64_t v47 = v140;
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v99 = v135;
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v100._uint64_t countAndFlagsBits = sub_10011450C();
      LogMessage.StringInterpolation.appendLiteral(_:)(v100);
      uint64_t v101 = v146;
      uint64_t v102 = sub_10000D37C(&v145, v146);
      uint64_t v103 = swift_getDynamicType(v102, v101, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v103);
      v143._uint64_t countAndFlagsBits = v103;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v143);
      sub_100019E6C((uint64_t)&v143, &qword_1001CAAD0);
      v104._uint64_t countAndFlagsBits = 58LL;
      v104._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v104);
      LogMessage.init(stringInterpolation:)(v99);
    }

    sub_10000D3A0(&v145);
    uint64_t v105 = LogMessage.init(stringLiteral:)(0xD000000000000021LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v105 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v106 = static os_log_type_t.error.getter(v105);
    sub_1000BD1B0(v106, v84);
    uint64_t v107 = swift_bridgeObjectRelease();
    static TimeZone.current.getter(v107);
    Swift::String v55 = v142;
  }

  else
  {
    uint64_t v96 = v77;
    uint64_t v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 32);
    uint64_t v98 = v134;
    v97(v134, v96, v6);
    v97((uint64_t)&v47[v46[12]], v98, v6);
  }

  sub_10011446C(10LL, &v145);
  if (v146)
  {
    if (sub_100114434((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any))
    {
      Swift::String v109 = v143;
      goto LABEL_49;
    }
  }

  else
  {
    sub_10008BEF0(v108, &qword_1001CAAD0);
  }

  v109._uint64_t countAndFlagsBits = sub_10011450C();
LABEL_49:
  char v110 = sub_10001CB4C(v109);
  if (v110 != 3)
  {
    v47[v46[13]] = v110;
    sub_10011446C(1LL, &v145);
    if (v146)
    {
      uint64_t v115 = sub_10000DE08(v114, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
      if ((sub_100114434(v115, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        unsigned __int8 v116 = sub_100114530();

        Swift::String v55 = v142;
        goto LABEL_56;
      }
    }

    else
    {
      sub_10008BEF0(v114, &qword_1001CAAD0);
    }

    unsigned __int8 v116 = 1;
LABEL_56:
    v47[1] = v116;
    sub_10011446C(3LL, &v145);
    if (v146)
    {
      if (sub_100114434((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any))
      {
        Swift::String v118 = v143;
        goto LABEL_61;
      }
    }

    else
    {
      sub_10008BEF0(v117, &qword_1001CAAD0);
    }

    v118._uint64_t countAndFlagsBits = sub_10011450C();
LABEL_61:
    char v119 = sub_10015354C(v118);
    if (v119 == 4) {
      char v120 = 0;
    }
    else {
      char v120 = v119;
    }
    v47[v138[7]] = v120;
    sub_10011446C(5LL, &v145);
    if (v146)
    {
      uint64_t v122 = sub_10000DE08(v121, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
      if ((sub_100114434(v122, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        unsigned __int8 v123 = sub_100114530();

        Swift::String v55 = v142;
        goto LABEL_69;
      }
    }

    else
    {
      sub_10008BEF0(v121, &qword_1001CAAD0);
    }

    unsigned __int8 v123 = 0;
LABEL_69:
    uint64_t v124 = v138;
    v47[v138[9]] = v123;
    sub_10011446C(9LL, &v145);
    uint64_t v125 = sub_10001C258();
    if (v146)
    {
      uint64_t v126 = sub_10000DE08(v125, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
      if ((sub_100114434(v126, (uint64_t)&type metadata for Any) & 1) != 0)
      {
        uint64_t v127 = (void *)v143._countAndFlagsBits;
        [(id)v143._countAndFlagsBits doubleValue];
        uint64_t v129 = v128;

LABEL_74:
        uint64_t v130 = v55[1](v45, v15);
        sub_1000D1264(v130, &qword_1001CA2C0);
        sub_100019E6C(v141, &qword_1001CF970);
        *(void *)&v47[v124[10]] = v129;
        return;
      }
    }

    else
    {
      sub_10008BEF0(v125, &qword_1001CAAD0);
    }

    uint64_t v129 = 0LL;
    goto LABEL_74;
  }

  unint64_t v111 = sub_1001128BC();
  sub_100020C48((uint64_t)&type metadata for ScheduleInfo.ScheduleError, v111);
  *(void *)uint64_t v112 = 1701869940LL;
  *(void *)(v112 + 8) = 0xE400000000000000LL;
  sub_10011446C(10LL, (_OWORD *)(v112 + 16));
  sub_10001C258();
  sub_1001145A0();
  uint64_t v113 = sub_100114558();
  sub_1000D1264(v113, &qword_1001CA2C0);
  int v74 = 1;
LABEL_32:
  sub_100019E6C(v141, &qword_1001CF970);
  ((void (*)(_BYTE *, uint64_t))v55)(v132, v15);
  uint64_t v75 = v138;
  sub_100019E6C((uint64_t)&v47[v138[8]], &qword_1001CF970);
  if (v74)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(&v47[v75[12]], v6);
  }

void sub_100110F20()
{
  uint64_t v1 = sub_1000378A0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10001A284();
  v9[2] = v3;
  sub_10001A210();
  __chkstk_darwin(v4);
  v9[0] = (char *)v9 - v5;
  uint64_t v6 = sub_10000D33C(&qword_1001C9A88);
  unint64_t v7 = sub_100036F94();
  v9[11] = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for ScheduleInfo.CodingPropertyKey,  v6,  v7);
  v9[1] = type metadata accessor for ScheduleInfo(0LL);
  v9[3] = v2;
  sub_1000ACBCC();
  __asm { BR              X10 }

uint64_t sub_10011101C()
{
  NSString v2 = sub_1001145B0();
  sub_100009070();
  uint64_t v3 = sub_10000DAA0(0LL, &qword_1001C9520, &OBJC_CLASS___NSString_ptr);
  *(void *)(v1 - 120) = v3;
  *(void *)(v1 - 11sub_10000D3A0(v0 + 2) = &off_1001B0DA8;
  *(void *)(v1 - 15sub_10000D3A0(v0 + 2) = v3;
  *(void *)(v1 - 144) = v2;
  uint64_t v4 = sub_1001144A0();
  sub_1000301F8(v4, 0LL);
  id v5 = [objc_allocWithZone(NSNumber) initWithBool:*(unsigned __int8 *)(v0 + 1)];
  uint64_t v6 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v1 - 120) = v6;
  *(void *)(v1 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v1 - 144) = v5;
  uint64_t v7 = sub_1001144A0();
  sub_1000301F8(v7, 1LL);
  uint64_t v8 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  Date.timeIntervalSinceReferenceDate.getter(v8);
  id v9 = sub_1001144CC(objc_allocWithZone(&OBJC_CLASS___NSNumber));
  *(void *)(v1 - 120) = v6;
  *(void *)(v1 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v1 - 144) = v9;
  uint64_t v10 = sub_1001144A0();
  sub_1000301F8(v10, 2LL);
  return ((uint64_t (*)(uint64_t))((char *)sub_100111158
                                          + 4 * byte_100168634[*(unsigned __int8 *)(v0 + *(int *)(v8 + 28))]))(0x746C7561666564LL);
}

uint64_t sub_100111158()
{
  NSString v6 = sub_1001145B0();
  sub_100009070();
  *(void *)(v5 - 120) = *(void *)(v5 - 152);
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0DA8;
  *(void *)(v5 - 144) = v6;
  uint64_t v7 = sub_1001144A0();
  sub_1000301F8(v7, 3LL);
  sub_1001128F8(v0 + *(int *)(v3 + 32), v4, &qword_1001CF970);
  if (sub_1000102D4(v4, 1LL, v2) == 1)
  {
    sub_100019E6C(v4, &qword_1001CF970);
  }

  else
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v5 - 168) + 32LL))( *(void *)(v5 - 192),  v4,  v2);
    Date.timeIntervalSinceReferenceDate.getter(v8);
    id v9 = sub_1001144C4();
    id v10 = sub_1001144CC(v9);
    *(void *)(v5 - 120) = v1;
    *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
    *(void *)(v5 - 144) = v10;
    uint64_t v11 = sub_1001144A0();
    sub_1000301F8(v11, 4LL);
    sub_100114520();
  }

  id v12 = [sub_1001144C4() initWithBool:*(unsigned __int8 *)(v0 + *(int *)(v3 + 36))];
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v5 - 144) = v12;
  uint64_t v13 = sub_1001144A0();
  sub_1000301F8(v13, 5LL);
  uint64_t v14 = *(void *)(v5 - 176);
  Date.init()(v15);
  TimeZone.secondsFromGMT(for:)(v14);
  sub_100114520();
  id v16 = sub_1001144C4();
  id v17 = sub_1000F03DC(v16, "initWithInteger:");
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v5 - 144) = v17;
  uint64_t v18 = sub_1001144A0();
  sub_1000301F8(v18, 11LL);
  uint64_t v19 = *(void *)(v5 - 160);
  sub_10000D33C(&qword_1001C8E58);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  *(void *)(v5 - 120) = sub_10000DAA0(0LL, &qword_1001CBE40, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0DB8;
  *(void *)(v5 - 144) = isa;
  uint64_t v21 = sub_1001144A0();
  sub_1000301F8(v21, 7LL);
  NSString v22 = String._bridgeToObjectiveC()();
  *(void *)(v5 - 120) = *(void *)(v5 - 152);
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0DA8;
  *(void *)(v5 - 144) = v22;
  sub_1000301F8(v5 - 144, 8LL);
  id v23 = sub_1001144C4();
  id v24 = sub_1001144CC(v23);
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v5 - 144) = v24;
  sub_1000301F8(v5 - 144, 9LL);
  uint64_t v25 = *(void *)(v5 - 184);
  NSString v26 = sub_1001145B0();
  sub_100009070();
  *(void *)(v5 - 120) = *(void *)(v5 - 152);
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0DA8;
  *(void *)(v5 - 144) = v26;
  uint64_t v27 = sub_1001144A0();
  sub_1000301F8(v27, 10LL);
  id v28 = [sub_1001144C4() initWithBool:*(unsigned __int8 *)(v19 + *(int *)(v25 + 24))];
  *(void *)(v5 - 120) = v1;
  *(void *)(v5 - 11sub_10000D3A0(v0 + 2) = &off_1001B0D98;
  *(void *)(v5 - 144) = v28;
  sub_1000301F8(v5 - 144, 12LL);
  uint64_t v29 = sub_10004B0B8(*(void *)(v5 - 104));
  sub_100009020();
  return v29;
}

void sub_100111464()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  int v79 = v5;
  int v80 = v6;
  uint64_t v8 = v7;
  uint64_t v83 = sub_1000378A0();
  uint64_t v78 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  sub_10000DD5C();
  uint64_t v82 = v9;
  id v10 = (int *)sub_100114518();
  sub_10000DC64();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&object - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v14);
  sub_10001A284();
  uint64_t v81 = v15;
  sub_10001A210();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&object - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  NSString v22 = (char *)&object - v21;
  __chkstk_darwin(v20);
  id v24 = (char *)&object - v23;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v25);
  uint64_t v26 = sub_100114474();
  uint64_t v84 = type metadata accessor for ScheduleInfo(v26);
  sub_10000DC64();
  __chkstk_darwin(v27);
  sub_100029170();
  *uint64_t v0 = v4;
  v85._uint64_t countAndFlagsBits = 0x696669746E656469LL;
  v85._object = (void *)0xEA00000000007265LL;
  AnyHashable.init<A>(_:)(&v85);
  sub_10011445C();
  uint64_t v28 = sub_100114498();
  if (MetatypeMetadata)
  {
    if ((sub_100114448((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
    {
      object = v85._object;
      uint64_t countAndFlagsBits = v85._countAndFlagsBits;
      sub_1001144E4((uint64_t)v24, 1LL);
      v85._uint64_t countAndFlagsBits = 1702125924LL;
      v85._object = (void *)0xE400000000000000LL;
      sub_1001144D8();
      sub_10011445C();
      uint64_t v29 = sub_100114498();
      if (MetatypeMetadata)
      {
        if ((sub_100114448((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any) & 1) != 0)
        {
          if (qword_1001C7F68 != -1) {
            swift_once(&qword_1001C7F68, sub_100078850);
          }
          Swift::String v30 = (void *)qword_1001DBAD8;
          NSString v31 = String._bridgeToObjectiveC()();
          sub_100009020();
          id v32 = sub_1000F03DC(v30, "dateFromString:");

          if (v32)
          {
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

            uint64_t v33 = 0LL;
          }

          else
          {
            uint64_t v33 = 1LL;
          }

          sub_100114588();
          sub_1001144E4((uint64_t)v22, v33);
          uint64_t v56 = (uint64_t)v22;
          goto LABEL_24;
        }
      }

      else
      {
        sub_100114490(v29, &qword_1001CAAD0);
      }

      v85._uint64_t countAndFlagsBits = 0x79616C6564LL;
      v85._object = (void *)0xE500000000000000LL;
      sub_1001144D8();
      sub_10011445C();
      uint64_t v55 = sub_100114498();
      if (!MetatypeMetadata)
      {
        sub_100114490(v55, &qword_1001CAAD0);
        goto LABEL_25;
      }

      Date.init(timeIntervalSinceNow:)(*(double *)&v85._countAndFlagsBits);
      sub_100114588();
      sub_1001144E4((uint64_t)v19, 0LL);
      uint64_t v56 = (uint64_t)v19;
LABEL_24:
      sub_100112918(v56, (uint64_t)v24, &qword_1001CF970);
LABEL_25:
      *(void *)&__int128 v88 = 0x79726574746162LL;
      *((void *)&v88 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0xE700000000000000LL;
      sub_1001144AC();
      sub_10011445C();
      uint64_t v57 = sub_100114498();
      if (MetatypeMetadata)
      {
        uint64_t v58 = sub_100114448((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any);
        if ((_DWORD)v58)
        {
          char v59 = v85._countAndFlagsBits;
          goto LABEL_30;
        }
      }

      else
      {
        sub_100114490(v57, &qword_1001CAAD0);
      }

      char v59 = 0;
LABEL_30:
      static Date.now.getter(v58);
      v85._uint64_t countAndFlagsBits = 0x73616C4361746164LL;
      v85._object = (void *)0xE900000000000073LL;
      sub_1001144D8();
      sub_10011445C();
      uint64_t v60 = sub_100114498();
      if (MetatypeMetadata)
      {
        if (sub_100114448((uint64_t)&type metadata for String, (uint64_t)&type metadata for Any))
        {
          uint64_t v61 = v8;
          Swift::String v62 = v85;
          goto LABEL_35;
        }
      }

      else
      {
        sub_100114490(v60, &qword_1001CAAD0);
      }

      uint64_t v61 = v8;
      v62._uint64_t countAndFlagsBits = sub_10011450C();
LABEL_35:
      char v63 = sub_10015354C(v62);
      if (v63 == 4) {
        char v64 = 0;
      }
      else {
        char v64 = v63;
      }
      sub_1001128F8((uint64_t)v24, v81, &qword_1001CF970);
      strcpy((char *)&v88, "dateIsAdaptive");
      HIBYTE(v88) = -18;
      sub_1001144AC();
      sub_10011445C();
      uint64_t v65 = sub_100114498();
      if (MetatypeMetadata)
      {
        if (sub_100114448((uint64_t)&type metadata for Bool, (uint64_t)&type metadata for Any))
        {
          char v66 = v85._countAndFlagsBits;
          goto LABEL_43;
        }
      }

      else
      {
        sub_100114490(v65, &qword_1001CAAD0);
      }

      char v66 = 0;
LABEL_43:
      *(void *)&__int128 v88 = 0x6563617267LL;
      *((void *)&v88 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0xE500000000000000LL;
      sub_1001144AC();
      sub_10011445C();
      uint64_t v67 = sub_100114498();
      if (MetatypeMetadata)
      {
        uint64_t v68 = sub_100114448((uint64_t)&type metadata for Double, (uint64_t)&type metadata for Any);
        if ((_DWORD)v68)
        {
          uint64_t v69 = v85._countAndFlagsBits;
LABEL_48:
          static TimeZone.current.getter(v68);
          *uint64_t v13 = v79;
          v13[1] = v59;
          (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(&v13[v10[6]], v82, v83);
          v13[v10[7]] = v64;
          sub_100112918(v81, (uint64_t)&v13[v10[8]], &qword_1001CF970);
          v13[v10[9]] = v66;
          *(void *)&v13[v10[10]] = v69;
          id v70 = (uint64_t *)&v13[v10[11]];
          uint64_t v71 = (uint64_t)object;
          *id v70 = countAndFlagsBits;
          v70[1] = v71;
          v13[v10[13]] = v80;
          sub_100112810((uint64_t)v13, (uint64_t)v0 + *(int *)(v84 + 20));
          *(void *)&__int128 v88 = 0x746972777265766FLL;
          *((void *)&v88 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0xE900000000000065LL;
          sub_1001144AC();
          sub_10011445C();
          swift_bridgeObjectRelease();
          sub_100114498();
          sub_100019E6C((uint64_t)v24, &qword_1001CF970);
          if (MetatypeMetadata)
          {
            uint64_t v73 = v61;
            else {
              char v74 = 0;
            }
          }

          else
          {
            sub_100114490(v72, &qword_1001CAAD0);
            char v74 = 0;
            uint64_t v73 = v61;
          }

          uint64_t v75 = v84;
          *((_BYTE *)v0 + *(int *)(v84 + swift_release(*(void *)(v0 + 24)) = v74;
          sub_100112854((uint64_t)v0, v73, type metadata accessor for ScheduleInfo);
          sub_10000D5C0(v73, 0LL, 1LL, v75);
          sub_100019EC0((uint64_t)v0, type metadata accessor for ScheduleInfo);
          goto LABEL_54;
        }
      }

      else
      {
        sub_100114490(v67, &qword_1001CAAD0);
      }

      uint64_t v69 = 0x404E000000000000LL;
      goto LABEL_48;
    }

    uint64_t v83 = v8;
  }

  else
  {
    uint64_t v83 = v8;
    sub_100114490(v28, &qword_1001CAAD0);
  }

  uint64_t v34 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v35 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v36 = swift_allocObject( v34,  ((*(unsigned __int8 *)(v35 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
        + 2LL * *(void *)(v35 + 72),
          *(unsigned __int8 *)(v35 + 80) | 7LL);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v87 = sub_10000D33C(&qword_1001CE198);
  v86[0] = v84;
  id v37 = (id)AMSLogKey(v87);
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v41 = v40;

    sub_100020BB4();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v42 = v87;
    uint64_t v43 = sub_10000D37C(v86, v87);
    uint64_t DynamicType = swift_getDynamicType(v43, v42, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v88 = DynamicType;
    sub_1000F0408();
    sub_100114594();
    v45._uint64_t countAndFlagsBits = 5972026LL;
    v45._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v45);
    uint64_t MetatypeMetadata = &type metadata for String;
    *(void *)&__int128 v88 = v39;
    *((void *)&v88 + setenv("JavaScriptCoreUseJIT", "0", 1) = v41;
    sub_1000F0408();
    sub_100114594();
    v46._uint64_t countAndFlagsBits = 93LL;
    v46._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v46);
    sub_100025910();
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v47 = v87;
    uint64_t v48 = sub_10000D37C(v86, v87);
    uint64_t v49 = swift_getDynamicType(v48, v47, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v49);
    *(void *)&__int128 v88 = v49;
    uint64_t v50 = sub_1000F0408();
    sub_100114490(v50, &qword_1001CAAD0);
    v51._uint64_t countAndFlagsBits = 58LL;
    v51._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v51);
    sub_100025910();
  }

  sub_10000D3A0(v86);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(35LL, 1LL);
  v52._object = (void *)0x80000001001769A0LL;
  v52._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v52);
  uint64_t v87 = sub_10000D33C(&qword_1001C8E58);
  v86[0] = v2;
  LogMessage.StringInterpolation.appendInterpolation(sensitive:)(v86);
  sub_100019E6C((uint64_t)v86, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v53 = sub_100025910();
  if (qword_1001C7F80 != -1) {
    uint64_t v53 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v54 = static os_log_type_t.error.getter(v53);
  sub_1000BD1B0(v54, v36);
  sub_100009020();
  swift_bridgeObjectRelease();
  sub_10000D5C0(v83, 1LL, 1LL, v84);
LABEL_54:
  sub_10001A30C();
}

void sub_100111D74()
{
  __asm { BR              X10 }

uint64_t sub_100111DBC()
{
  uint64_t v2 = sub_10001D42C();
  sub_1001145F4(v2);
  uint64_t v3 = sub_10000DE2C();
  sub_100114568(v3, v4, v5, v6, v7, v8, v9, v10, 0xD000000000000019LL, 0x8000000100175160LL);
  sub_100114540(95LL);
  uint64_t v11 = sub_10000DE2C();
  sub_100114568(v11, v12, v13, v14, v15, v16, v17, v18, v21, v23);
  v19._uint64_t countAndFlagsBits = v1;
  v19._object = v0;
  String.append(_:)(v19);
  sub_10000DE2C();
  return v22;
}

uint64_t sub_100111E54()
{
  return sub_100112344();
}

uint64_t sub_100111E80()
{
  uint64_t v2 = sub_1000378A0();
  __chkstk_darwin(v2);
  sub_100029170();
  uint64_t v3 = sub_1001145EC();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = sub_100114474();
  uint64_t result = type metadata accessor for ScheduleInfo.Metadata(v5);
  if (*(_BYTE *)(v0 + *(int *)(result + 36)) == 1)
  {
    uint64_t v7 = static TimeZone.current.getter(result);
    Date.init()(v7);
    uint64_t v8 = TimeZone.secondsFromGMT(for:)(v1);
    sub_1001145E0();
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v0, v3);
    Date.init()(v9);
    uint64_t v10 = TimeZone.secondsFromGMT(for:)(v1);
    uint64_t result = sub_1001145E0();
    if (__OFSUB__(v8, v10)) {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100111F88()
{
  uint64_t v22 = v2;
  uint64_t v23 = v3;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v4);
  uint64_t v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_1000378A0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_100048A80();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = &v21[-v11];
  __chkstk_darwin(v10);
  uint64_t v14 = &v21[-v13];
  uint64_t v15 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  sub_1001128F8(v0 + *(int *)(v15 + 32), (uint64_t)v6, &qword_1001CF970);
  if (sub_1000102D4((uint64_t)v6, 1LL, v7) == 1)
  {
    sub_100019E6C((uint64_t)v6, &qword_1001CF970);
    return 0LL;
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v14, v6, v7);
    if (*(_BYTE *)(v0 + *(int *)(v15 + 36)) == 1)
    {
      sub_100111E80();
      uint64_t v18 = Date.addingTimeInterval(_:)(v17);
    }

    else
    {
      uint64_t v18 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 16))(v12, v14, v7);
    }

    static Date.now.getter(v18);
    double v19 = Date.timeIntervalSince(_:)(v1);
    sub_1001145CC(v1);
    sub_1001145CC((uint64_t)v12);
    sub_1001145CC((uint64_t)v14);
    double v20 = 0.0;
    if (v19 >= 0.0) {
      double v20 = v19;
    }
    return *(void *)&v20;
  }

unint64_t sub_100112138(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A7098, v2);
  sub_100009020();
  if (v3 >= 0xD) {
    return 13LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10011217C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001121A8 + 4 * byte_10016863C[a1]))( 7368801LL,  0xE300000000000000LL);
}

uint64_t sub_1001121A8()
{
  return 0x79726574746162LL;
}

uint64_t sub_1001121C0()
{
  return 0x64657461657263LL;
}

uint64_t sub_1001121D8()
{
  return 0x73616C4361746164LL;
}

uint64_t sub_1001121F8()
{
  return 1702125924LL;
}

uint64_t sub_100112208()
{
  return 0x6441734965746164LL;
}

uint64_t sub_10011222C()
{
  return 0x79616C6564LL;
}

uint64_t sub_100112240()
{
  return 0x73746E657665LL;
}

uint64_t sub_100112254()
{
  return 0x696669746E656469LL;
}

uint64_t sub_100112270()
{
  return 0x6563617267LL;
}

uint64_t sub_100112284()
{
  return 1701869940LL;
}

unint64_t sub_100112294()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1001122B0()
{
  return 0x746972777265766FLL;
}

void sub_1001122CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
}

void sub_1001122D8()
{
}

uint64_t sub_1001122E0(uint64_t a1)
{
  return sub_100006BC4(a1, *v1);
}

void sub_1001122E8(uint64_t a1)
{
}

unint64_t sub_1001122F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100112138(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10011231C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10011217C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100112344()
{
  uint64_t v1 = (_BYTE *)v0;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC64();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_100114474();
  uint64_t v4 = type metadata accessor for Date(v3);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10001A284();
  uint64_t v49 = v6;
  sub_10001A210();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v10 = (int *)sub_100114518();
  sub_1001128F8(v0 + v10[8], v0, &qword_1001CF970);
  int v11 = sub_1000102D4(v0, 1LL, v4);
  uint64_t v48 = v5;
  if (v11 == 1)
  {
    sub_100019E6C(v0, &qword_1001CF970);
    uint64_t v12 = 0LL;
    uint64_t v13 = (void *)0xE000000000000000LL;
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v9, v0, v4);
    if (qword_1001C7F68 != -1) {
      swift_once(&qword_1001C7F68, sub_100078850);
    }
    uint64_t v14 = (void *)qword_1001DBAD8;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v16 = sub_1000F03DC(v14, "stringFromDate:");

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    double v19 = v18;

    uint64_t v51 = 0x3D65746164LL;
    Swift::String v52 = (void *)0xE500000000000000LL;
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    sub_100020BB4();
    sub_100114540(32LL);
    swift_bridgeObjectRelease();
    uint64_t v12 = v51;
    uint64_t v13 = v52;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }

  uint64_t v51 = 0LL;
  Swift::String v52 = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(108LL);
  v21._uint64_t countAndFlagsBits = 0x203A70706128LL;
  v21._object = (void *)0xE600000000000000LL;
  String.append(_:)(v21);
  HIBYTE(v50) = *v1;
  _print_unlocked<A, B>(_:_:)( (char *)&v50 + 7,  &v51,  &unk_1001A8968,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v22._uint64_t countAndFlagsBits = 0x69746E656469202CLL;
  v22._object = (void *)0xEE00203A72656966LL;
  String.append(_:)(v22);
  uint64_t v23 = (uint64_t *)&v1[v10[11]];
  uint64_t v24 = *v23;
  swift_bridgeObjectRetain(v23[1]);
  sub_1001145F4(v24);
  sub_10000DE2C();
  v25._uint64_t countAndFlagsBits = 0x657461657263202CLL;
  v25._object = (void *)0xEA00000000003D64LL;
  String.append(_:)(v25);
  sub_100112880((unint64_t *)&unk_1001CFB30, (uint64_t)&protocol conformance descriptor for Date);
  v61._uint64_t countAndFlagsBits = sub_1001145D4();
  sub_1001145C0(v61);
  sub_10000DE2C();
  sub_100114540(32LL);
  v26._uint64_t countAndFlagsBits = v12;
  v26._object = v13;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  sub_1001145B8(0x3D79616C6564203BLL);
  v27.n128_u64[0] = sub_100111F88();
  if ((v28 & 1) != 0) {
    v27.n128_f64[0] = -1.0;
  }
  Double.write<A>(to:)( &v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v27);
  sub_1001145B8(0x3D7373616C63203BLL);
  HIBYTE(v50) = v1[v10[7]];
  _print_unlocked<A, B>(_:_:)( (char *)&v50 + 7,  &v51,  &unk_1001B3F68,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v29._object = (void *)0xEA00000000003D79LL;
  v29._uint64_t countAndFlagsBits = 0x726574746162203BLL;
  String.append(_:)(v29);
  if (v1[1]) {
    uint64_t v30 = 1702195828LL;
  }
  else {
    uint64_t v30 = 0x65736C6166LL;
  }
  sub_1001145F4(v30);
  sub_10000DE2C();
  sub_1001145B8(0x3D6563617267203BLL);
  v31.n128_u64[0] = *(void *)&v1[v10[10]];
  Double.write<A>(to:)( &v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v31);
  v32._object = (void *)0xEA00000000003D73LL;
  v32._uint64_t countAndFlagsBits = 0x657269707865203BLL;
  String.append(_:)(v32);
  uint64_t v33 = v49;
  sub_10010FE78( v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v47,  v48,  v49,  v50,  v51,  (uint64_t)v52,  v53,  v54,  v55,  v56,  v57,  v58,  v59,  v60);
  v62._uint64_t countAndFlagsBits = sub_1001145D4();
  sub_1001145C0(v62);
  sub_10000DE2C();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v33, v4);
  v42._uint64_t countAndFlagsBits = 0x697470616461203BLL;
  v42._object = (void *)0xEC000000203A6576LL;
  String.append(_:)(v42);
  if (v1[v10[9]]) {
    uint64_t v43 = 1702195828LL;
  }
  else {
    uint64_t v43 = 0x65736C6166LL;
  }
  if (v1[v10[9]]) {
    unint64_t v44 = 0xE400000000000000LL;
  }
  else {
    unint64_t v44 = 0xE500000000000000LL;
  }
  unint64_t v45 = v44;
  String.append(_:)(*(Swift::String *)&v43);
  sub_100009020();
  sub_100114540(41LL);
  return v51;
}

uint64_t type metadata accessor for ScheduleInfo.Metadata(uint64_t a1)
{
  return sub_10008AAFC(a1, (uint64_t *)&unk_1001CE208, (uint64_t)&nominal type descriptor for ScheduleInfo.Metadata);
}

uint64_t type metadata accessor for ScheduleInfo(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CE2C0, (uint64_t)&nominal type descriptor for ScheduleInfo);
}

uint64_t sub_100112810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScheduleInfo.Metadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_100112854(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = a3(0LL);
  sub_1000D1164(v3);
  sub_100009044();
}

void sub_100112880(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    uint64_t v4 = type metadata accessor for Date(255LL);
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  sub_100009044();
}

unint64_t sub_1001128BC()
{
  unint64_t result = qword_1001CE1A0;
  if (!qword_1001CE1A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168890, &type metadata for ScheduleInfo.ScheduleError);
    atomic_store(result, (unint64_t *)&qword_1001CE1A0);
  }

  return result;
}

void sub_1001128F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = sub_100114548(a1, a2, a3);
  sub_1000D1164(v3);
  sub_100009044();
}

void sub_100112918(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100114548(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(v3, v4, v5);
  sub_100009044();
}

uint64_t getEnumTagSinglePayload for ScheduleInfo.CodingPropertyKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ScheduleInfo.CodingPropertyKey( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_100112A20 + 4 * byte_10016864E[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100112A54 + 4 * byte_100168649[v4]))();
}

uint64_t sub_100112A54(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100112A5C(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100112A64LL);
  }
  return result;
}

uint64_t sub_100112A70(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100112A78LL);
  }
  *(_BYTE *)unint64_t result = a2 + 12;
  return result;
}

uint64_t sub_100112A7C(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100112A84(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScheduleInfo.CodingPropertyKey()
{
  return &type metadata for ScheduleInfo.CodingPropertyKey;
}

unint64_t destroy for ScheduleInfo.ScheduleError(void *a1)
{
  unint64_t result = a1[1];
  if (result >= 0xFFFFFFFF)
  {
    unint64_t result = swift_bridgeObjectRelease();
    if (a1[5]) {
      return sub_10000D3A0(a1 + 2);
    }
  }

  return result;
}

uint64_t initializeWithCopy for ScheduleInfo.ScheduleError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = *(_OWORD *)(a2 + 32);
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = (_OWORD *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain(v3);
    if (v5)
    {
      *(void *)(a1 + 40) = v5;
      (**(void (***)(uint64_t, _OWORD *, uint64_t))(v5 - 8))(a1 + 16, v4, v5);
    }

    else
    {
      __int128 v7 = v4[1];
      *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *v4;
      *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = v7;
    }
  }

  return a1;
}

uint64_t assignWithCopy for ScheduleInfo.ScheduleError(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v10 = *((void *)a2 + 1);
      *(void *)(a1 + 8) = v10;
      __int128 v7 = (_OWORD *)(a1 + 16);
      uint64_t v8 = a2 + 1;
      uint64_t v11 = *((void *)a2 + 5);
      __n128 v12 = swift_bridgeObjectRetain(v10);
      if (v11)
      {
        *(void *)(a1 + 40) = v11;
        (**(void (***)(uint64_t, _OWORD *, uint64_t, __n128))(v11 - 8))(a1 + 16, v8, v11, v12);
        return a1;
      }

uint64_t assignWithTake for ScheduleInfo.ScheduleError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_8:
    __int128 v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = *(_OWORD *)(a2 + 32);
    return a1;
  }

  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 40)) {
      sub_10000D3A0((void *)(a1 + 16));
    }
    goto LABEL_8;
  }

  uint64_t v5 = (_OWORD *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40)) {
    sub_10000D3A0((void *)(a1 + 16));
  }
  __int128 v6 = v5[1];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *v5;
  *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScheduleInfo.ScheduleError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000FDD40(v2, v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ScheduleInfo.ScheduleError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(result + 3sub_10000D3A0(v0 + 2) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

uint64_t sub_100112DF8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(vsetenv("JavaScriptCoreUseJIT", "0", 1) = -1;
  }
  return (v1 + 1);
}

double sub_100112E10(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }

  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for ScheduleInfo.ScheduleError()
{
  return &type metadata for ScheduleInfo.ScheduleError;
}

void *sub_100112E50(_WORD *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    __int128 v13 = (char *)v4 + v12;
    __int128 v14 = (char *)a2 + v12;
    if (sub_1000102D4((uint64_t)a2 + v12, 1LL, v10))
    {
      uint64_t v15 = sub_10000D33C(&qword_1001CF970);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      v11(v13, v14, v10);
      sub_10000D5C0((uint64_t)v13, 0LL, 1LL, v10);
    }

    uint64_t v17 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *(void *)((char *)v4 + v17) = *(void *)((char *)a2 + v17);
    uint64_t v18 = a3[11];
    uint64_t v19 = a3[12];
    Swift::String v20 = (void *)((char *)v4 + v18);
    Swift::String v21 = (void *)((char *)a2 + v18);
    uint64_t v22 = v21[1];
    void *v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (char *)v4 + v19;
    uint64_t v24 = (char *)a2 + v19;
    uint64_t v25 = type metadata accessor for TimeZone(0LL);
    Swift::String v26 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v25 - 8) + 16LL);
    __n128 v27 = swift_bridgeObjectRetain(v22);
    v26(v23, v24, v25, v27);
    *((_BYTE *)v4 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  }

  return v4;
}

uint64_t sub_100112FCC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date(0LL);
  __int128 v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[8];
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[12];
  uint64_t v9 = type metadata accessor for TimeZone(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
}

_WORD *sub_10011307C(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  uint64_t v12 = (char *)a1 + v11;
  __int128 v13 = (char *)a2 + v11;
  if (sub_1000102D4((uint64_t)a2 + v11, 1LL, v9))
  {
    uint64_t v14 = sub_10000D33C(&qword_1001CF970);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    sub_10000D5C0((uint64_t)v12, 0LL, 1LL, v9);
  }

  uint64_t v15 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a3[11];
  uint64_t v17 = a3[12];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  void *v18 = *v19;
  v18[1] = v20;
  Swift::String v21 = (char *)a1 + v17;
  uint64_t v22 = (char *)a2 + v17;
  uint64_t v23 = type metadata accessor for TimeZone(0LL);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v23 - 8) + 16LL);
  __n128 v25 = swift_bridgeObjectRetain(v20);
  v24(v21, v22, v23, v25);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_BYTE *sub_1001131CC(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  a1[a3[7]] = a2[a3[7]];
  uint64_t v12 = a3[8];
  __int128 v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = sub_1000102D4((uint64_t)&a1[v12], 1LL, v9);
  int v16 = sub_1000102D4((uint64_t)v14, 1LL, v9);
  if (!v15)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_10000D33C(&qword_1001CF970);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v14, v9);
  sub_10000D5C0((uint64_t)v13, 0LL, 1LL, v9);
LABEL_7:
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *uint64_t v19 = *v20;
  uint64_t v21 = v20[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[12];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v25 - 8) + 24LL))(v23, v24, v25);
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

_WORD *sub_100113388(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  uint64_t v12 = (char *)a1 + v11;
  __int128 v13 = (char *)a2 + v11;
  if (sub_1000102D4((uint64_t)a2 + v11, 1LL, v9))
  {
    uint64_t v14 = sub_10000D33C(&qword_1001CF970);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    v10(v12, v13, v9);
    sub_10000D5C0((uint64_t)v12, 0LL, 1LL, v9);
  }

  uint64_t v15 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v16 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  return a1;
}

_BYTE *sub_1001134C4(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  __int128 v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = sub_1000102D4((uint64_t)&a1[v12], 1LL, v9);
  int v16 = sub_1000102D4((uint64_t)v14, 1LL, v9);
  if (!v15)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }

  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_10000D33C(&qword_1001CF970);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v14, v9);
  sub_10000D5C0((uint64_t)v13, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v18 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  void *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[12];
  uint64_t v25 = &a1[v24];
  Swift::String v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v27 - 8) + 40LL))(v25, v26, v27);
  a1[a3[13]] = a2[a3[13]];
  return a1;
}

uint64_t sub_100113668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100113674);
}

void sub_100113674(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1000378A0();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = a3[6];
  }

  else
  {
    uint64_t v9 = sub_10000D33C(&qword_1001CF970);
    if (*(_DWORD *)(*(void *)(v9 - 8) + 84LL) == (_DWORD)a2)
    {
      uint64_t v7 = v9;
      uint64_t v8 = a3[8];
    }

    else
    {
      if ((_DWORD)a2 == 0x7FFFFFFF)
      {
        sub_10008BFC4(*(void *)(a1 + a3[11] + 8));
        sub_10000DFE8();
        return;
      }

      uint64_t v7 = sub_1001145EC();
      uint64_t v8 = a3[12];
    }
  }

  sub_10008BE48(a1 + v8, a2, v7);
}

uint64_t sub_100113718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100113724);
}

void sub_100113724(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_1000378A0();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84LL) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = a4[6];
  }

  else
  {
    uint64_t v11 = sub_10000D33C(&qword_1001CF970);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84LL) == a3)
    {
      uint64_t v9 = v11;
      uint64_t v10 = a4[8];
    }

    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[11] + 8) = (a2 - 1);
        sub_10000DFE8();
        return;
      }

      uint64_t v9 = sub_1001145EC();
      uint64_t v10 = a4[12];
    }
  }

  sub_10008BE54(a1 + v10, a2, a2, v9);
}

void sub_1001137D0(uint64_t a1)
{
  v8[0] = &unk_100168780;
  v8[1] = &unk_100168798;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    void v8[3] = &unk_100168780;
    sub_1001138AC(319LL);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      v8[5] = &unk_100168798;
      v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[7] = &unk_1001687B0;
      uint64_t v6 = type metadata accessor for TimeZone(319LL);
      if (v7 <= 0x3F)
      {
        v8[8] = *(void *)(v6 - 8) + 64LL;
        v8[9] = &unk_1001687C8;
        swift_initStructMetadata(a1, 256LL, 10LL, v8, a1 + 16);
      }
    }
  }

void sub_1001138AC(uint64_t a1)
{
  if (!qword_1001CE218)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1001CE218);
    }
  }

void *sub_100113900(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(_WORD *)((char *)a1 + v7) = *(_WORD *)((char *)a2 + v7);
    uint64_t v10 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
    uint64_t v11 = v10[6];
    uint64_t v12 = &v8[v11];
    __int128 v13 = &v9[v11];
    uint64_t v14 = type metadata accessor for Date(0LL);
    int v15 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v14 - 8) + 16LL);
    __n128 v16 = swift_bridgeObjectRetain(v4);
    v15(v12, v13, v14, v16);
    v8[v10[7]] = v9[v10[7]];
    uint64_t v17 = v10[8];
    uint64_t v18 = &v8[v17];
    uint64_t v19 = &v9[v17];
    if (sub_1000102D4((uint64_t)&v9[v17], 1LL, v14))
    {
      uint64_t v20 = sub_10000D33C(&qword_1001CF970);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      ((void (*)(char *, char *, uint64_t))v15)(v18, v19, v14);
      sub_10000D5C0((uint64_t)v18, 0LL, 1LL, v14);
    }

    v8[v10[9]] = v9[v10[9]];
    *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
    uint64_t v21 = v10[11];
    uint64_t v22 = &v8[v21];
    uint64_t v23 = &v9[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + setenv("JavaScriptCoreUseJIT", "0", 1) = v24;
    uint64_t v25 = v10[12];
    Swift::String v26 = &v8[v25];
    uint64_t v27 = &v9[v25];
    uint64_t v28 = type metadata accessor for TimeZone(0LL);
    Swift::String v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v28 - 8) + 16LL);
    __n128 v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    v8[v10[13]] = v9[v10[13]];
    *((_BYTE *)v6 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }

  return v6;
}

uint64_t sub_100113ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  unint64_t v5 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v6 = v4 + v5[6];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  uint64_t v9 = v4 + v5[8];
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + v5[12];
  uint64_t v11 = type metadata accessor for TimeZone(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
}

void *sub_100113B98(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
  __n128 v15 = swift_bridgeObjectRetain(v5);
  v14(v11, v12, v13, v15);
  v7[v9[7]] = v8[v9[7]];
  uint64_t v16 = v9[8];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  if (sub_1000102D4((uint64_t)&v8[v16], 1LL, v13))
  {
    uint64_t v19 = sub_10000D33C(&qword_1001CF970);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64LL));
  }

  else
  {
    ((void (*)(char *, char *, uint64_t))v14)(v17, v18, v13);
    sub_10000D5C0((uint64_t)v17, 0LL, 1LL, v13);
  }

  v7[v9[9]] = v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  uint64_t v20 = v9[11];
  uint64_t v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + setenv("JavaScriptCoreUseJIT", "0", 1) = v23;
  uint64_t v24 = v9[12];
  uint64_t v25 = &v7[v24];
  Swift::String v26 = &v8[v24];
  uint64_t v27 = type metadata accessor for TimeZone(0LL);
  uint64_t v28 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v27 - 8) + 16LL);
  __n128 v29 = swift_bridgeObjectRetain(v23);
  v28(v25, v26, v27, v29);
  v7[v9[13]] = v8[v9[13]];
  *((_BYTE *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100113D3C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v32 = a3;
  uint64_t v33 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((_BYTE *)a2 + v7);
  v8[1] = *((_BYTE *)a2 + v7 + 1);
  uint64_t v10 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v11 = v10[6];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(_BYTE *, char *, uint64_t))(v15 + 24);
  v16(v12, v13, v14);
  v8[v10[7]] = v9[v10[7]];
  uint64_t v17 = v10[8];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = sub_1000102D4((uint64_t)&v8[v17], 1LL, v14);
  int v21 = sub_1000102D4((uint64_t)v19, 1LL, v14);
  if (!v20)
  {
    if (!v21)
    {
      v16(v18, v19, v14);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_10000D33C(&qword_1001CF970);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, char *, uint64_t))(v15 + 16))(v18, v19, v14);
  sub_10000D5C0((uint64_t)v18, 0LL, 1LL, v14);
LABEL_7:
  v8[v10[9]] = v9[v10[9]];
  *(void *)&v8[v10[10]] = *(void *)&v9[v10[10]];
  uint64_t v23 = v10[11];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  *uint64_t v24 = *(void *)v25;
  uint64_t v26 = *((void *)v25 + 1);
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = v10[12];
  uint64_t v28 = &v8[v27];
  __n128 v29 = &v9[v27];
  uint64_t v30 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v30 - 8) + 24LL))(v28, v29, v30);
  v8[v10[13]] = v9[v10[13]];
  *((_BYTE *)a1 + *(int *)(v32 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)v33 + *(int *)(v32 + 24));
  return a1;
}

void *sub_100113F44(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32LL);
  v14(v11, v12, v13);
  v7[v9[7]] = v8[v9[7]];
  uint64_t v15 = v9[8];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  if (sub_1000102D4((uint64_t)&v8[v15], 1LL, v13))
  {
    uint64_t v18 = sub_10000D33C(&qword_1001CF970);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    v14(v16, v17, v13);
    sub_10000D5C0((uint64_t)v16, 0LL, 1LL, v13);
  }

  v7[v9[9]] = v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  *(_OWORD *)&v7[v9[11]] = *(_OWORD *)&v8[v9[11]];
  uint64_t v19 = v9[12];
  int v20 = &v7[v19];
  int v21 = &v8[v19];
  uint64_t v22 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
  v7[v9[13]] = v8[v9[13]];
  *((_BYTE *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1001140C0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3;
  uint64_t v33 = a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((_BYTE *)a2 + v6);
  v7[1] = *((_BYTE *)a2 + v6 + 1);
  uint64_t v9 = (int *)type metadata accessor for ScheduleInfo.Metadata(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(_BYTE *, char *, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  v7[v9[7]] = v8[v9[7]];
  uint64_t v16 = v9[8];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = sub_1000102D4((uint64_t)&v7[v16], 1LL, v13);
  int v20 = sub_1000102D4((uint64_t)v18, 1LL, v13);
  if (!v19)
  {
    if (!v20)
    {
      v15(v17, v18, v13);
      goto LABEL_7;
    }

    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
    goto LABEL_6;
  }

  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_10000D33C(&qword_1001CF970);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, char *, uint64_t))(v14 + 32))(v17, v18, v13);
  sub_10000D5C0((uint64_t)v17, 0LL, 1LL, v13);
LABEL_7:
  v7[v9[9]] = v8[v9[9]];
  *(void *)&v7[v9[10]] = *(void *)&v8[v9[10]];
  uint64_t v22 = v9[11];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  void *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = v9[12];
  uint64_t v28 = &v7[v27];
  __n128 v29 = &v8[v27];
  uint64_t v30 = type metadata accessor for TimeZone(0LL);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v30 - 8) + 40LL))(v28, v29, v30);
  v7[v9[13]] = v8[v9[13]];
  *((_BYTE *)a1 + *(int *)(v32 + swift_release(*(void *)(v0 + 24)) = *((_BYTE *)v33 + *(int *)(v32 + 24));
  return a1;
}

uint64_t sub_1001142B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001142BC);
}

void sub_1001142BC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_10008BFC4(*a1);
    sub_10000DFE8();
  }

  else
  {
    uint64_t v6 = sub_100114518();
    sub_10008BE48((uint64_t)a1 + *(int *)(a3 + 20), a2, v6);
  }

uint64_t sub_100114310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011431C);
}

void sub_10011431C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_10000DFE8();
  }

  else
  {
    uint64_t v7 = sub_100114518();
    sub_10008BE54((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

uint64_t sub_100114374(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for ScheduleInfo.Metadata(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = &unk_100168798;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_1001143F8()
{
  unint64_t result = qword_1001CE300;
  if (!qword_1001CE300)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168828, &type metadata for ScheduleInfo.CodingPropertyKey);
    atomic_store(result, (unint64_t *)&qword_1001CE300);
  }

  return result;
}

uint64_t sub_100114434@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return swift_dynamicCast(v2 - 152, v2 - 120, a2 + 8, a1, 6LL);
}

uint64_t sub_100114448@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return swift_dynamicCast(v2 - 192, v2 - 136, a2 + 8, a1, 6LL);
}

void sub_10011445C()
{
}

void sub_10011446C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
}

uint64_t sub_100114474()
{
  return 0LL;
}

void sub_100114490(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100114498()
{
  return sub_10000E854(v0 - 176);
}

uint64_t sub_1001144A0()
{
  return v0 - 144;
}

uint64_t sub_1001144AC()
{
  return AnyHashable.init<A>(_:)(v0 - 136);
}

uint64_t sub_1001144B8(uint64_t a1, uint64_t a2)
{
  return sub_10000D5C0(a1, a2, 1LL, v2);
}

id sub_1001144C4()
{
  return objc_allocWithZone(*(Class *)(v0 + 464));
}

id sub_1001144CC(void *a1)
{
  return objc_msgSend(a1, *(SEL *)(v1 + 1528), v2);
}

uint64_t sub_1001144D8()
{
  return AnyHashable.init<A>(_:)(v0 - 192);
}

uint64_t sub_1001144E4(uint64_t a1, uint64_t a2)
{
  return sub_10000D5C0(a1, a2, 1LL, *(void *)(v2 - 208));
}

  ;
}

uint64_t sub_10011450C()
{
  return 0LL;
}

uint64_t sub_100114518()
{
  return type metadata accessor for ScheduleInfo.Metadata(0LL);
}

uint64_t sub_100114520()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

id sub_100114530()
{
  return [*(id *)(v1 - 152) *(SEL *)(v0 + 1408)];
}

void sub_100114540(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_100114548(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10000D33C(a3);
}

uint64_t sub_100114558()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_100114568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return swift_bridgeObjectRetain(a10);
}

uint64_t sub_100114578()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_100114588()
{
}

void sub_100114594()
{
}

uint64_t sub_1001145A0()
{
  return swift_willThrow();
}

uint64_t sub_1001145A8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

NSString sub_1001145B0()
{
  return String._bridgeToObjectiveC()();
}

void sub_1001145B8(uint64_t a1)
{
  unint64_t v1 = 0xE800000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1001145C0(Swift::String a1)
{
}

uint64_t sub_1001145CC(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1001145D4()
{
  return dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
}

uint64_t sub_1001145E0()
{
  return v2(v1, v0);
}

uint64_t sub_1001145EC()
{
  return type metadata accessor for TimeZone(0LL);
}

void sub_1001145F4(uint64_t a1)
{
  uint64_t v2 = v1;
  String.append(_:)(*(Swift::String *)&a1);
}

id sub_1001145FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = *(void **)(v0 + 40);
  [v3 lock];
  uint64_t v4 = *(void *)(v0 + 8);
  if (!v4) {
    return [v3 unlock];
  }
  swift_errorRetain(*(void *)(v0 + 8));
  if (qword_1001C7F80 != -1) {
    swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v7 = swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
       + 2LL * *(void *)(v6 + 72),
         *(unsigned __int8 *)(v6 + 80) | 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v33 = &type metadata for SentryLog;
  aBlock[0] = swift_allocObject(&unk_1001B0F80, 64LL, 7LL);
  sub_10011503C(aBlock[0]);
  uint64_t v8 = sub_10006FD4C(v0);
  id v9 = (id)AMSLogKey(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v14 = v33;
    uint64_t v15 = sub_10000D37C(aBlock, (uint64_t)v33);
    uint64_t DynamicType = swift_getDynamicType(v15, v14, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    uint64_t v36 = DynamicType;
    sub_10001065C();
    sub_10003AD7C();
    v17._uint64_t countAndFlagsBits = 5972026LL;
    v17._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v36 = v11;
    uint64_t v37 = v13;
    sub_10001065C();
    sub_10003AD7C();
    v18._uint64_t countAndFlagsBits = 93LL;
    v18._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    sub_1000522A8();
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    int v20 = v33;
    uint64_t v21 = sub_10000D37C(aBlock, (uint64_t)v33);
    uint64_t v22 = swift_getDynamicType(v21, v20, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v22);
    uint64_t v36 = v22;
    sub_10001065C();
    sub_10003AD7C();
    v23._uint64_t countAndFlagsBits = 58LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    sub_1000522A8();
  }

  sub_10000D3A0(aBlock);
  uint64_t v24 = LogMessage.init(stringLiteral:)(0xD000000000000015LL);
  uint64_t v25 = static os_log_type_t.debug.getter(v24);
  sub_1000BD1B0(v25, v7);
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsLoggingEvent);
  sub_100011AF8();
  id v27 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  id v28 = [v26 shouldSampleErrorsWithBag:v27];

  uint64_t v29 = swift_allocObject(&unk_1001B0FA8, 72LL, 7LL);
  sub_10011503C(v29);
  *(void *)(v30 + 64) = v4;
  uint64_t v34 = sub_100114D74;
  uint64_t v35 = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100061FB8;
  uint64_t v33 = (ValueMetadata *)&unk_1001B0FC0;
  __n128 v31 = _Block_copy(aBlock);
  swift_errorRetain(v4);
  sub_10006FD4C(v1);
  swift_release();
  [v28 addSuccessBlock:v31];
  _Block_release(v31);

  swift_errorRelease(v4);
  return [v3 unlock];
}

uint64_t sub_100114A08()
{
  swift_errorRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  return swift_deallocObject(v0, 64LL, 7LL);
}

BOOL sub_100114A4C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A7600, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t sub_100114A90()
{
  return 0xD000000000000010LL;
}

BOOL sub_100114AB8@<W0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  BOOL result = sub_100114A4C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100114AEC@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_100114A90();
  *a1 = 0xD000000000000010LL;
  a1[1] = v3;
  return result;
}

void sub_100114B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 40);
  [v4 lock];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)a1);
  uint64_t v7 = v6;
  id v8 = objc_allocWithZone(&OBJC_CLASS___AMSMetricsLoggingEvent);
  swift_errorRetain(a2);
  id v9 = sub_100063C7C(v5, v7, 0xD000000000000010LL, 0x800000010016AD00LL, a2);
  sub_1000549C4(*(void **)(a1 + 32));
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v9 setBreadcrumbs:isa];

  uint64_t v11 = *(void *)(a1 + 24);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = sub_10000D33C(&qword_1001C8F70);
    uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 3sub_10000D3A0(v0 + 2) = v12;
    *(void *)(v14 + 40) = v11;
    swift_bridgeObjectRetain(v11);
    Class v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setEventDestinations:v15];
  }

  [v4 unlock];
  uint64_t v16 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetrics);
  sub_100011AF8();
  id v17 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  id v18 = [v16 internalInstanceUsingBag:v17];

  [v18 enqueueEvent:v9];
}

uint64_t sub_100114D28()
{
  swift_errorRelease(*(void *)(v0 + 24));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  swift_errorRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100114D74()
{
}

uint64_t sub_100114D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100114D90(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void destroy for SentryLog(uint64_t a1)
{
}

void *initializeWithCopy for SentryLog(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  id v6 = v4;
  swift_errorRetain(v5);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  a1[1] = v5;
  a1[2] = v8;
  uint64_t v10 = *(void *)(a2 + 32);
  id v9 = *(void **)(a2 + 40);
  a1[3] = v7;
  a1[4] = v10;
  a1[5] = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  id v11 = v9;
  return a1;
}

uint64_t assignWithCopy for SentryLog(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  swift_errorRetain(v8);
  *(void *)(a1 + 8) = v8;
  swift_errorRelease(v7);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void **)(a2 + 40);
  uint64_t v14 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v13;
  id v15 = v13;

  return a1;
}

uint64_t assignWithTake for SentryLog(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_errorRelease(v4);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

ValueMetadata *type metadata accessor for SentryLog()
{
  return &type metadata for SentryLog;
}

uint64_t storeEnumTagSinglePayload for SentryLog.Category(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100114FA0 + 4 * asc_1001688E0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100114FC0 + 4 * byte_1001688E5[v4]))();
  }
}

_BYTE *sub_100114FA0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100114FC0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100114FC8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100114FD0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100114FD8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100114FE0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SentryLog.Category()
{
  return &type metadata for SentryLog.Category;
}

unint64_t sub_100115000()
{
  unint64_t result = qword_1001CE308;
  if (!qword_1001CE308)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168978, &type metadata for SentryLog.Category);
    atomic_store(result, (unint64_t *)&qword_1001CE308);
  }

  return result;
}

__n128 sub_10011503C(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_100115050(uint64_t a1)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 56;
  sub_100116AC4();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  sub_100116B5C();
  while (1)
  {
    sub_100116B1C(v8);
    sub_100148020(&v11, v1, v2);
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v9 >= v3) {
      goto LABEL_21;
    }
    ++v6;
    if (!*(void *)(v7 + 8 * v9))
    {
      uint64_t v6 = v9 + 1;
      if (v9 + 1 >= v3) {
        goto LABEL_21;
      }
      if (!*(void *)(v7 + 8 * v6))
      {
        uint64_t v6 = v9 + 2;
        if (v9 + 2 >= v3) {
          goto LABEL_21;
        }
        if (!*(void *)(v7 + 8 * v6))
        {
          uint64_t v6 = v9 + 3;
          if (v9 + 3 >= v3) {
            goto LABEL_21;
          }
          if (!*(void *)(v7 + 8 * v6)) {
            break;
          }
        }
      }
    }

uint64_t sub_100115170()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CE310 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_1001151B8()
{
  uint64_t v14 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_1000105F0();
  swift_defaultActor_initialize(v0);
  uint64_t v9 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v10 = sub_10000D33C(&qword_1001C9D48);
  sub_1000EFAA8((unint64_t *)&qword_1001C9D50, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v0 + 11sub_10000D3A0(v0 + 2) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v9, v10, v11);
  *(void *)(v0 + 120) = _swiftEmptyDictionarySingleton;
  ((void (*)(uint64_t))static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:))(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))( v0 + OBJC_IVAR____TtCC14amsengagementd22ServerDataCacheService25BackgroundUpdateCoalescer_debounceDuration,  v1,  v7);
  uint64_t v12 = (void *)(v0 + OBJC_IVAR____TtCC14amsengagementd22ServerDataCacheService25BackgroundUpdateCoalescer_onUpdate);
  *uint64_t v12 = v4;
  v12[1] = v14;
  return v0;
}

void sub_1001152E0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v83 = v4;
  sub_10000D33C((uint64_t *)&unk_1001CD380);
  sub_10000DC8C();
  __chkstk_darwin(v5);
  sub_10000DD5C();
  uint64_t v79 = v6;
  uint64_t v7 = sub_10000D33C(&qword_1001CE438);
  uint64_t v74 = *(void *)(v7 - 8);
  uint64_t v75 = v7;
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DD5C();
  uint64_t v73 = v9;
  uint64_t v10 = sub_10000D33C(&qword_1001CE440);
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  sub_10000DC8C();
  __chkstk_darwin(v11);
  sub_10000DD5C();
  uint64_t v76 = v12;
  uint64_t v13 = sub_10000D33C(&qword_1001CE448);
  uint64_t v81 = *(void *)(v13 - 8);
  uint64_t v82 = v13;
  sub_10000DC8C();
  __chkstk_darwin(v14);
  sub_10000DD5C();
  uint64_t v80 = v15;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v16);
  sub_10000DC74();
  if (qword_1001C80C0 != -1) {
    swift_once(&qword_1001C80C0, sub_100115170);
  }
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = *(void *)(sub_10002C79C() - 8);
  uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
        + 2LL * *(void *)(v18 + 72),
          *(unsigned __int8 *)(v18 + 80) | 7LL);
  *(_OWORD *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  Swift::String v90 = (void *)sub_100116338();
  uint64_t v88 = v0;
  uint64_t v20 = swift_retain(v0);
  id v21 = (id)AMSLogKey(v20);
  if (v21)
  {
    uint64_t v22 = v21;
    Swift::String v23 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v25 = v24;

    swift_bridgeObjectRetain(v25);
    sub_100010564();
    sub_10000DC08();
    uint64_t v26 = v90;
    id v27 = sub_10000D37C(&v88, (uint64_t)v90);
    uint64_t v28 = sub_10000DC54((uint64_t)v27, (uint64_t)v26);
    swift_getMetatypeMetadata(v28);
    sub_10000DF68();
    sub_10001A640();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    id v85 = v23;
    uint64_t v86 = v25;
    sub_10000DF68();
    sub_10001A640();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v29 = v90;
    uint64_t v30 = sub_10000D37C(&v88, (uint64_t)v90);
    __n128 v31 = (void *)sub_10000DC54((uint64_t)v30, (uint64_t)v29);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v31);
    id v85 = v31;
    sub_10000DF68();
    sub_100019E6C((uint64_t)&v85, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v88);
  uint64_t v88 = 0LL;
  unint64_t v89 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  uint64_t v88 = 0x696373656C616F43LL;
  unint64_t v89 = 0xEB0000000020676ELL;
  v32._uint64_t countAndFlagsBits = Set.description.getter(v83, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  sub_100116AEC();
  id v33 = [v3 description];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  v37._uint64_t countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  Swift::String v90 = &type metadata for String;
  static LogMessage.safe(_:)(&v88);
  sub_100019E6C((uint64_t)&v88, &qword_1001CAAD0);
  uint64_t v39 = static os_log_type_t.default.getter(v38);
  sub_1000BD1B0(v39, v19);
  swift_bridgeObjectRelease();
  sub_100020A94(v0 + 112, (uint64_t)&v88);
  unint64_t v40 = *(void *)(v0 + 112);
  id v41 = v3;
  swift_bridgeObjectRetain(v40);
  sub_100030AC8(v41, v40);
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();

  if (v43)
  {
    CurrentValueSubject.value.getter(&v85);
    swift_bridgeObjectRetain(v83);
    sub_100115050(v44);
    unint64_t v45 = v86;
    v84[0] = v85;
    v84[1] = v86;
    id v46 = v85;
    __n128 v47 = swift_bridgeObjectRetain(v45);
    CurrentValueSubject.send(_:)(v84, v47);
    swift_release();

    swift_bridgeObjectRelease_n(v45, 2LL);
  }

  else
  {
    id v85 = v41;
    uint64_t v86 = v83;
    uint64_t v48 = sub_10000D33C(&qword_1001C9D48);
    swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    id v49 = v41;
    swift_bridgeObjectRetain_n(v83, 2LL);
    id v50 = v49;
    uint64_t v51 = (void *)CurrentValueSubject.init(_:)(&v85);
    sub_10000DBFC(v1 + 112, (uint64_t)&v85);
    id v52 = v50;
    uint64_t v53 = swift_retain(v51);
    sub_1000343C0(v53, v52);
    swift_endAccess(&v85);
    uint64_t v72 = v52;

    id v85 = v51;
    uint64_t v71 = v1 + OBJC_IVAR____TtCC14amsengagementd22ServerDataCacheService25BackgroundUpdateCoalescer_debounceDuration;
    if (qword_1001C80A8 != -1) {
      swift_once(&qword_1001C80A8, sub_10010D4CC);
    }
    uint64_t v54 = (void *)qword_1001DBBB8;
    v84[0] = (id)qword_1001DBBB8;
    type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    sub_100116B08();
    uint64_t v55 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    sub_10000D890(&qword_1001CE450, &qword_1001C9D48);
    uint64_t v57 = v56;
    sub_1000EFAA8( (unint64_t *)&qword_1001CACE0,  (unint64_t *)&qword_1001CACD0,  &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v59 = v58;
    id v60 = v54;
    Publisher.debounce<A>(for:scheduler:options:)(v71, v84, v79, v48, v55, v57, v59);
    sub_100019E6C(v79, (uint64_t *)&unk_1001CD380);

    sub_10000D890(&qword_1001CE458, &qword_1001CE438);
    Publisher.filter(_:)(sub_100115A70, 0LL, v75, v61);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
    Swift::String v62 = (void *)qword_1001DBBB8;
    id v85 = (id)qword_1001DBBB8;
    sub_100116B08();
    sub_10000D890(&qword_1001CE460, &qword_1001CE440);
    uint64_t v64 = v63;
    id v65 = v62;
    Publisher.receive<A>(on:options:)(&v85, v79, v78, v55, v64, v59);
    sub_100019E6C(v79, (uint64_t *)&unk_1001CD380);

    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
    uint64_t v66 = swift_allocObject(&unk_1001B11F0, 24LL, 7LL);
    swift_weakInit(v66 + 16, v1);
    sub_10000D890(&qword_1001CE468, &qword_1001CE448);
    uint64_t v68 = Publisher<>.sink(receiveValue:)(sub_1001169FC, v66, v82, v67);
    sub_10001A2D8();
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
    sub_10000DBFC(v1 + 120, (uint64_t)&v85);
    id v69 = v72;
    uint64_t v70 = swift_retain(v68);
    sub_100034324(v70, (uint64_t)v69);
    swift_endAccess(&v85);

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  sub_10000DD84();
}

BOOL sub_100115A70(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 16LL) != 0LL;
}

uint64_t sub_100115A84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C8BD0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  a2 += 16LL;
  swift_beginAccess(a2, v15, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = type metadata accessor for TaskPriority(0LL);
    sub_10000D5C0((uint64_t)v6, 1LL, 1LL, v11);
    uint64_t v12 = (void *)swift_allocObject(&unk_1001B1218, 56LL, 7LL);
    void v12[2] = 0LL;
    v12[3] = 0LL;
    v12[4] = v10;
    v12[5] = v8;
    v12[6] = v7;
    id v13 = v8;
    swift_bridgeObjectRetain(v7);
    sub_100116BA0((uint64_t)v6, (uint64_t)&unk_1001CE478, (uint64_t)v12);
    return swift_release();
  }

  return result;
}

uint64_t sub_100115B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_100115BA0, a4, 0LL);
}

uint64_t sub_100115BA0()
{
  (*(void (**)(void, void))(*(void *)(v0 + 16)
                                         + OBJC_IVAR____TtCC14amsengagementd22ServerDataCacheService25BackgroundUpdateCoalescer_onUpdate))( *(void *)(v0 + 24),  *(void *)(v0 + 32));
  sub_100115EFC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100115C04()
{
  uint64_t v2 = v1;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v3);
  sub_10000DC74();
  if (qword_1001C80C0 != -1) {
    swift_once(&qword_1001C80C0, sub_100115170);
  }
  uint64_t v4 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v5 = *(void *)(sub_10002C79C() - 8);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + 2LL * *(void *)(v5 + 72),
         *(unsigned __int8 *)(v5 + 80) | 7LL);
  *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v30 = (void *)sub_100116338();
  unint64_t v28 = v0;
  uint64_t v7 = swift_retain(v0);
  id v8 = (id)AMSLogKey(v7);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_100010564();
    sub_10000DC08();
    id v13 = v30;
    uint64_t v14 = sub_10000D37C(&v28, (uint64_t)v30);
    uint64_t v15 = sub_10000DC54((uint64_t)v14, (uint64_t)v13);
    swift_getMetatypeMetadata(v15);
    sub_10000DEA4();
    sub_100116B80();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v26[0] = v10;
    v26[1] = v12;
    sub_10000DEA4();
    sub_100116B80();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v16 = v30;
    uint64_t v17 = sub_10000D37C(&v28, (uint64_t)v30);
    uint64_t v18 = sub_10000DC54((uint64_t)v17, (uint64_t)v16);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v18);
    v26[0] = v18;
    sub_10000DEA4();
    sub_100019E6C((uint64_t)v26, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v28);
  unint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  unint64_t v28 = 0xD000000000000019LL;
  unint64_t v29 = 0x8000000100176AF0LL;
  uint64_t v19 = sub_1000105E8((uint64_t)objc_msgSend(v2, "description", v26[0]));
  id v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  sub_10000DE74();
  uint64_t v30 = &type metadata for String;
  static LogMessage.safe(_:)(&v28);
  sub_100019E6C((uint64_t)&v28, &qword_1001CAAD0);
  uint64_t v24 = static os_log_type_t.default.getter(v23);
  sub_1000BD1B0(v24, v6);
  swift_bridgeObjectRelease();
  sub_10000DBFC(v0 + 112, (uint64_t)&v28);
  id v25 = v2;
  sub_100033B74();
  sub_100116B74();

  swift_release();
  sub_10000DBFC(v0 + 120, (uint64_t)&v28);
  sub_1000339C0((uint64_t)v25);
  sub_100116B74();
  if (v0 != -120LL)
  {
    AnyCancellable.cancel()();
    swift_release();
  }

  sub_10000DD84();
}

void sub_100115EFC()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v6);
  sub_1000105F0();
  sub_100020A94((uint64_t)(v0 + 14), (uint64_t)&v47);
  unint64_t v7 = v0[14];
  id v8 = v5;
  swift_bridgeObjectRetain(v7);
  sub_100030AC8(v8, v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();

  if (v10)
  {
    CurrentValueSubject.value.getter(&v45);
    sub_100116894(v3);
    if (*(void *)(v46 + 16))
    {
      if (qword_1001C80C0 != -1) {
        swift_once(&qword_1001C80C0, sub_100115170);
      }
      uint64_t v11 = (void *)sub_10000D33C(&qword_1001C9C70);
      uint64_t v12 = *(void *)(sub_10002C79C() - 8);
      uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
            + 2LL * *(void *)(v12 + 72),
              *(unsigned __int8 *)(v12 + 80) | 7LL);
      *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v44 = (void *)sub_100116338();
      uint64_t v42 = v1;
      uint64_t v14 = swift_retain(v1);
      id v15 = (id)AMSLogKey(v14);
      if (v15)
      {
        uint64_t v40 = sub_1000105E8((uint64_t)v15);
        uint64_t v17 = v16;

        swift_bridgeObjectRetain(v17);
        sub_100010564();
        sub_10000E8C8();
        uint64_t v18 = v44;
        uint64_t v19 = sub_10000D37C(&v42, (uint64_t)v44);
        uint64_t v20 = sub_10000DC54((uint64_t)v19, (uint64_t)v18);
        uint64_t MetatypeMetadata = swift_getMetatypeMetadata(v20);
        sub_100116B30(MetatypeMetadata);
        sub_100019E6C((uint64_t)v41, &qword_1001CAAD0);
        sub_10000DC14();
        v41[3] = &type metadata for String;
        v41[0] = v40;
        v41[1] = v17;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
        sub_100019E6C((uint64_t)v41, &qword_1001CAAD0);
        sub_10000DC4C(93LL);
        sub_100048E88();
        sub_10000DE74();
      }

      else
      {
        sub_10001A1BC();
        sub_10000E8C8();
        Swift::String v22 = v44;
        uint64_t v23 = sub_10000D37C(&v42, (uint64_t)v44);
        uint64_t v24 = sub_10000DC54((uint64_t)v23, (uint64_t)v22);
        uint64_t v25 = swift_getMetatypeMetadata(v24);
        sub_100116B30(v25);
        sub_100019E6C((uint64_t)v41, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_100048E88();
      }

      sub_10000D3A0(&v42);
      uint64_t v42 = 0LL;
      unint64_t v43 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(63LL);
      v26._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v26._object = (void *)0x8000000100176AB0LL;
      String.append(_:)(v26);
      swift_bridgeObjectRetain(v46);
      v28._uint64_t countAndFlagsBits = Set.description.getter( v27,  &type metadata for String,  &protocol witness table for String);
      String.append(_:)(v28);
      sub_10000DE74();
      swift_bridgeObjectRelease();
      sub_100116AEC();
      id v29 = v45;
      uint64_t v30 = sub_1000105E8((uint64_t)[v29 description]);
      Swift::String v32 = v31;

      v33._uint64_t countAndFlagsBits = v30;
      v33._object = v32;
      String.append(_:)(v33);
      swift_bridgeObjectRelease();

      v34._object = (void *)0x8000000100176AD0LL;
      v34._uint64_t countAndFlagsBits = 0xD000000000000014LL;
      String.append(_:)(v34);
      uint64_t v44 = &type metadata for String;
      static LogMessage.safe(_:)(&v42);
      sub_100019E6C((uint64_t)&v42, &qword_1001CAAD0);
      uint64_t v36 = static os_log_type_t.default.getter(v35);
      sub_1000BD1B0(v36, v13);
      sub_10000DE2C();
      unint64_t v37 = v46;
      uint64_t v42 = (unint64_t *)v45;
      unint64_t v43 = v46;
      id v38 = v45;
      __n128 v39 = swift_bridgeObjectRetain(v37);
      CurrentValueSubject.send(_:)(&v42, v39);
      sub_10001A2D8();

      swift_bridgeObjectRelease_n(v37, 2LL);
    }

    else
    {
      sub_100115C04();
      sub_10001A2D8();

      swift_bridgeObjectRelease();
    }
  }

  sub_10000DD84();
}

void sub_1001162C4()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  sub_10001A418(v1);
  swift_release();
  swift_defaultActor_destroy(v0);
  sub_100009044();
}

uint64_t sub_100116320()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100116338()
{
  return _s25BackgroundUpdateCoalescerCMa(0LL);
}

uint64_t _s25BackgroundUpdateCoalescerCMa(uint64_t a1)
{
  uint64_t result = qword_1001CE340;
  if (!qword_1001CE340) {
    return swift_getSingletonMetadata(a1, &_s25BackgroundUpdateCoalescerCMn);
  }
  return result;
}

uint64_t sub_100116378(uint64_t a1)
{
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    v4[4] = (char *)&value witness table for () + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *_s25BackgroundUpdateCoalescerC11UpdateEntryVwCP(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s25BackgroundUpdateCoalescerC11UpdateEntryVwxx(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t _s25BackgroundUpdateCoalescerC11UpdateEntryVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t _s25BackgroundUpdateCoalescerC11UpdateEntryVwta(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s25BackgroundUpdateCoalescerC11UpdateEntryVwet(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t _s25BackgroundUpdateCoalescerC11UpdateEntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s25BackgroundUpdateCoalescerC11UpdateEntryVMa()
{
  return &_s25BackgroundUpdateCoalescerC11UpdateEntryVN;
}

uint64_t sub_100116588(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v23, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v23, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  sub_100116B8C();
  if ((v9 & 1) == 0)
  {
LABEL_18:
    sub_10000DE2C();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  uint64_t v11 = (uint64_t *)(v10 + 16 * v8);
  uint64_t v12 = v11[1];
  BOOL v13 = *v11 == a1 && v12 == a2;
  if (!v13 && (sub_10008416C(*v11, v12) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      sub_100116B8C();
      if ((v18 & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v19 = (uint64_t *)(v10 + 16 * v8);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a1 && v20 == a2;
    }

    while (!v21 && (sub_10008416C(*v19, v20) & 1) == 0);
  }

  sub_10000DE2C();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v15 = *v2;
  v23[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100149DCC();
    uint64_t v15 = v23[0];
  }

  uint64_t v16 = *(void *)(*(void *)(v15 + 48) + 16 * v8);
  sub_1001166DC(v8);
  *uint64_t v2 = v23[0];
  swift_bridgeObjectRelease();
  return v16;
}

unint64_t sub_1001166DC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v24, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        Swift::Int v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v2 >= v14)
          {
LABEL_15:
            uint64_t v17 = *(void *)(v3 + 48);
            char v18 = (_OWORD *)(v17 + 16 * v2);
            uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
            BOOL v20 = v2 != v6 || v18 >= v19 + 1;
            int64_t v2 = v6;
            if (v20)
            {
              _OWORD *v18 = *v19;
              int64_t v2 = v6;
            }
          }
        }

        else if (v14 >= v9 || v2 >= v14)
        {
          goto LABEL_15;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_100116894(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = result + 56;
  sub_100116AC4();
  uint64_t result = swift_bridgeObjectRetain(v8);
  uint64_t v9 = 0LL;
  if (!v5) {
    goto LABEL_4;
  }
LABEL_3:
  sub_100116B5C();
  while (1)
  {
    sub_100116B1C(v10);
    sub_100116588(v2, v3);
    uint64_t v2 = v13;
    sub_10000DE2C();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v4) {
      return swift_release(v6);
    }
    ++v9;
    if (!*(void *)(v7 + 8 * v11))
    {
      uint64_t v9 = v11 + 1;
      if (v11 + 1 >= v4) {
        return swift_release(v6);
      }
      if (!*(void *)(v7 + 8 * v9))
      {
        uint64_t v9 = v11 + 2;
        if (v11 + 2 >= v4) {
          return swift_release(v6);
        }
        if (!*(void *)(v7 + 8 * v9))
        {
          uint64_t v9 = v11 + 3;
          if (v11 + 3 >= v4) {
            return swift_release(v6);
          }
          if (!*(void *)(v7 + 8 * v9)) {
            break;
          }
        }
      }
    }

uint64_t sub_1001169D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001169FC(uint64_t a1)
{
  return sub_100115A84(a1, v1);
}

uint64_t sub_100116A04()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100116A40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_1001CE474);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10000D9D4;
  return sub_100115B84(a1, v4, v5, v6, v7, v8);
}

  ;
}

void sub_100116AEC()
{
  v0._uint64_t countAndFlagsBits = 0x69736420726F6620LL;
  v0._object = (void *)0xEA00000000002064LL;
  String.append(_:)(v0);
}

uint64_t sub_100116B08()
{
  return sub_10000D5C0(v0, 1LL, 1LL, v1);
}

uint64_t sub_100116B1C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(*(void *)(v1 + 48) + 16 * a1 + 8));
}

uint64_t sub_100116B30(uint64_t a1)
{
  *(void *)(v2 - 160) = a1;
  *(void *)(v2 - 184) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 184);
}

  ;
}

  ;
}

uint64_t sub_100116B74()
{
  return swift_endAccess(v0 - 112);
}

void sub_100116B80()
{
}

  ;
}

uint64_t sub_100116BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100123290();
  uint64_t v7 = sub_1000102D4(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_100123554(v7, &qword_1001C8BD0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = sub_10000DDDC((uint64_t)&unk_1001B12A8, 32LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    v19[2] = v13;
    void v19[3] = v15;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001CE4D0, v16);
}

void sub_100116CD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain(*(void *)(a1 + 40));
  id v6 = a3;
  v5(a2, a3);
  sub_100037230();
}

void sub_100116D34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = sub_10012341C(v5);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v49 = qword_1001CE480;
  sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100067688();
  uint64_t v11 = sub_1000BD98C((v10 & ~v9) + 3 * v6, v9);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v66 = &type metadata for String;
  sub_10012332C(0xD000000000000044LL, v36, v40, v44, v46, v49, v51, v54, a4, a5, v63, v64, v65);
  sub_100122F18((uint64_t)&v64);
  sub_10000DE08(v12, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  id v47 = sub_1001234AC();
  sub_1001234B8((uint64_t)v47, v13, v14, v15, v16, v17, v18, v19, v37, v41);
  sub_100122F18((uint64_t)&v64);
  sub_1001231F4();
  swift_bridgeObjectRelease();
  uint64_t v64 = 0x7365636976726573LL;
  uint64_t v65 = 0xEA0000000000203ALL;
  v67._uint64_t countAndFlagsBits = Set.description.getter(a2, &type metadata for String, &protocol witness table for String);
  sub_1001231CC(v67);
  sub_10000DE2C();
  sub_100123138((uint64_t)" networkPolicy: ");
  v68._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_1001231CC(v68);
  sub_10000DE2C();
  uint64_t v66 = &type metadata for String;
  sub_10012332C(v64, v38, v42, v45, (uint64_t)v47, v50, v52, v55, v58, v61, a3, v64, v65);
  sub_100122F18((uint64_t)&v64);
  uint64_t v21 = static os_log_type_t.info.getter(v20);
  sub_1001231C4(v21, v11);
  sub_10001C258();
  if (a3 >= 6)
  {
    sub_100122FB8();
    sub_100122F20( (uint64_t)"Fatal error",  v31,  v32,  v33,  0x8000000100176E00LL,  (uint64_t)"amsengagementd/ServerDataCacheService.swift",  v34,  v35,  v39,  v43);
    __break(1u);
  }

  else
  {
    sub_100122FB0();
    id v22 = v48;
    sub_1000C1178();
    uint64_t v24 = v23;
    sub_1000C324C();
    uint64_t v25 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1B40, 88LL);
    void v25[2] = a3;
    v25[3] = v59;
    v25[4] = v62;
    v25[5] = v56;
    v25[6] = v22;
    v25[7] = a2;
    v25[8] = v24;
    v25[9] = 5 - a3;
    v25[10] = v53;
    Swift::String v26 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1B68, 88LL);
    void v26[2] = a3;
    void v26[3] = v56;
    v26[4] = a2;
    v26[5] = v59;
    v26[6] = v62;
    v26[7] = v22;
    v26[8] = v24;
    v26[9] = 5 - a3;
    v26[10] = v53;
    id v27 = v22;
    sub_1000672B0(v62);
    id v28 = v56;
    sub_1000F0364(a2);
    sub_1000672B0(v24);
    id v29 = v27;
    id v30 = v28;
    sub_100062648(sub_100122C1C, v25, sub_100122C64, v26);
    sub_10002FAF4();
    sub_1000292C4();
    sub_100020AD8();
    sub_1000F0474();
    sub_100123094();
  }

uint64_t sub_10011701C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v4);
  uint64_t v9 = static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12[3] = v8;
  v12[4] = &protocol witness table for OS_dispatch_queue;
  v12[0] = v9;
  Promise.always(on:perform:)(v12, a1, a2);
  return sub_10000D3A0(v12);
}

void sub_100117118()
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v43 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  sub_10000DE7C();
  uint64_t v44 = v9 - v8;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v10);
  sub_10000DC74();
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v41 = qword_1001CE480;
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000F0334();
  uint64_t v40 = v12;
  uint64_t v14 = swift_allocObject(v11, v1 + 2 * v12, v13 | 7);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v49 = (void *)sub_10000D33C(&qword_1001CE4F0);
  uint64_t v42 = v0;
  uint64_t v46 = v0;
  id v15 = (id)AMSLogKey(v49);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v39 = v3;
    uint64_t v18 = v17;
    uint64_t v20 = v19;

    sub_10000DF10();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v21 = v49;
    id v22 = sub_10000D37C(&v46, (uint64_t)v49);
    sub_10000DC54((uint64_t)v22, (uint64_t)v21);
    uint64_t MetatypeMetadata = (void *)sub_10000DDAC();
    v52[0] = v21;
    sub_10001065C();
    sub_10000DD04((uint64_t)v52);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v52[0] = v18;
    v52[1] = v20;
    uint64_t v3 = v39;
    sub_10001065C();
    sub_10000DD04((uint64_t)v52);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE2C();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v23 = v49;
    uint64_t v24 = sub_10000D37C(&v46, (uint64_t)v49);
    uint64_t v25 = sub_10000DC54((uint64_t)v24, (uint64_t)v23);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
    v52[0] = v25;
    sub_10001065C();
    sub_10000DA68((uint64_t)v52, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v46);
  uint64_t v49 = &type metadata for String;
  uint64_t v46 = (void **)0xD00000000000002BLL;
  unint64_t v47 = 0x8000000100177360LL;
  uint64_t v26 = static LogMessage.safe(_:)(&v46);
  sub_10006B9BC(v26, &qword_1001CAAD0);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v14);
  sub_10001C258();
  id v29 = v42;
  if (qword_1001C80A8 != -1) {
    swift_once(&qword_1001C80A8, sub_10010D4CC);
  }
  uint64_t v30 = sub_10000DDDC((uint64_t)&unk_1001B1AA0, 32LL);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(v30 + 24) = v29;
  uint64_t v50 = sub_100122B34;
  uint64_t v51 = v30;
  uint64_t v46 = _NSConcreteStackBlock;
  unint64_t v47 = 1107296256LL;
  uint64_t v48 = sub_100021A3C;
  uint64_t v49 = &unk_1001B1AB8;
  uint64_t v31 = _Block_copy(&v46);
  id v32 = v3;
  uint64_t v33 = v44;
  static DispatchQoS.unspecified.getter(v32);
  v52[0] = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = v34;
  uint64_t v36 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v37 = sub_100010444();
  dispatch thunk of SetAlgebra.init<A>(_:)(v52, v36, v37, v4, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v6, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v4);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v33, v7);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_100117524()
{
  if (qword_1001C7FE0 != -1) {
    swift_once(&qword_1001C7FE0, sub_1000BD714);
  }
  qword_1001CE480 = qword_1001DBB60;
  return swift_retain(qword_1001DBB60);
}

uint64_t sub_10011756C()
{
  uint64_t v1 = OBJC_IVAR____TtC14amsengagementd22ServerDataCacheService____lazy_storage___updateCoalescer;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd22ServerDataCacheService____lazy_storage___updateCoalescer);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14amsengagementd22ServerDataCacheService____lazy_storage___updateCoalescer);
  }

  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = sub_10000DDDC((uint64_t)&unk_1001B1A28, 24LL);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    uint64_t updated = _s25BackgroundUpdateCoalescerCMa(0LL);
    swift_allocObject(updated, *(unsigned int *)(updated + 48), *(unsigned __int16 *)(updated + 52));
    uint64_t v3 = sub_1001151B8();
    *(void *)(v4 + vsetenv("JavaScriptCoreUseJIT", "0", 1) = v3;
    swift_retain(v3);
    sub_100037230();
    uint64_t v2 = 0LL;
  }

  swift_retain(v2);
  return v3;
}

void sub_100117618(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v13, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v9 = swift_allocObject(&unk_1001B1A50, 32LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    aBlock[4] = sub_100122B14;
    void aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100116CD8;
    uint64_t aBlock[3] = &unk_1001B1A68;
    uint64_t v10 = _Block_copy(aBlock);
    id v11 = a1;
    swift_bridgeObjectRetain(a2);
    swift_release();
    [v7 updateCacheForAccountDSID:v11 withCacheTypeIDs:isa completion:v10];
    _Block_release(v10);
  }

uint64_t sub_100117738(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v7 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v8 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 32) & ~v10;
  uint64_t v12 = v10 | 7;
  uint64_t v13 = swift_allocObject(v7, v11 + 5 * v9, v10 | 7);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100164250;
  LogMessage.init(stringLiteral:)(0xD000000000000016LL);
  LogMessage.init(stringLiteral:)(0xD000000000000026LL);
  uint64_t v28 = (void *)sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  v27[0] = a3;
  id v14 = a3;
  static LogMessage.safe(_:)(v27);
  sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
  uint64_t v28 = (void *)sub_10000D33C(&qword_1001CBE58);
  v27[0] = a4;
  swift_bridgeObjectRetain(a4);
  static LogMessage.safe(_:)(v27);
  sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
  uint64_t v15 = 0x64656C696166LL;
  if ((a1 & 1) != 0) {
    uint64_t v15 = 0x73736563637573LL;
  }
  unint64_t v16 = 0xE600000000000000LL;
  if ((a1 & 1) != 0) {
    unint64_t v16 = 0xE700000000000000LL;
  }
  uint64_t v28 = &type metadata for String;
  v27[0] = v15;
  v27[1] = v16;
  static LogMessage.safe(_:)(v27);
  sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  sub_1000BD1B0(v18, v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (a2)
  {
    uint64_t v20 = swift_allocObject(v7, v11 + 2 * v9, v12);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    swift_errorRetain(a2);
    LogMessage.init(stringLiteral:)(0xD000000000000016LL);
    swift_getErrorValue(a2, v26);
    uint64_t v28 = v25;
    uint64_t v21 = sub_10000D63C(v27);
    (*(void (**)(void *))(*(v25 - 1) + 16LL))(v21);
    static LogMessage.safe(_:)(v27);
    sub_10000DA68((uint64_t)v27, &qword_1001CAAD0);
    uint64_t v23 = static os_log_type_t.error.getter(v22);
    sub_1000BD1B0(v23, v20);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a2);
  }

  return result;
}

id sub_100117A18()
{
  *(void *)&v0[OBJC_IVAR____TtC14amsengagementd22ServerDataCacheService____lazy_storage___updateCoalescer] = 0LL;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerDataCacheService();
  return objc_msgSendSuper2(&v2, "init");
}

void sub_100117A74()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for ServerDataCacheService();
  objc_msgSendSuper2(&v1, "dealloc");
  sub_1000676F0();
}

uint64_t type metadata accessor for ServerDataCacheService()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd22ServerDataCacheService);
}

void sub_100117AD0(void *a1, uint64_t a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001C8BD0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = objc_msgSend(a1, "ams_iTunesAccounts");
  uint64_t v7 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001C8C70, &OBJC_CLASS___ACAccount_ptr);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  uint64_t v46 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0) {
      uint64_t v19 = v8;
    }
    else {
      uint64_t v19 = v8 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v8);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (v9) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v8);
  if (!v9) {
    goto LABEL_20;
  }
LABEL_3:
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_45;
  }

  for (uint64_t i = 0LL; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001LL) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
    }
    else {
      id v11 = *(id *)(v8 + 8 * i + 32);
    }
    uint64_t v12 = v11;
    if ([v11 isActive])
    {
      id v13 = objc_msgSend(v12, "ams_DSID");

      if (v13)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
        unint64_t v16 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v15 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v16 >= v15 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1);
        }
        uint64_t v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
        specialized Array._endMutation()(v17);
      }
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v18 = v46;
LABEL_21:
  swift_bridgeObjectRelease();
  if (!((unint64_t)v18 >> 62))
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v20) {
      goto LABEL_23;
    }
LABEL_38:
    swift_bridgeObjectRelease();
    return;
  }

  if (v18 < 0) {
    uint64_t v41 = v18;
  }
  else {
    uint64_t v41 = v18 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter(v41);
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_38;
  }
LABEL_23:
  if (v20 >= 1)
  {
    uint64_t v21 = 0LL;
    unint64_t v43 = v18 & 0xC000000000000001LL;
    uint64_t v42 = (char *)&type metadata for () + 8;
    uint64_t v22 = v18;
    do
    {
      if (v43) {
        id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      }
      else {
        id v23 = *(id *)(v18 + 8 * v21 + 32);
      }
      uint64_t v24 = v23;
      uint64_t v25 = type metadata accessor for TaskPriority(0LL);
      sub_10000D5C0((uint64_t)v5, 1LL, 1LL, v25);
      uint64_t v26 = (void *)swift_allocObject(&unk_1001B1AF0, 48LL, 7LL);
      void v26[2] = 0LL;
      uint64_t v27 = v26 + 2;
      void v26[3] = 0LL;
      v26[4] = v24;
      v26[5] = v44;
      int v28 = sub_1000102D4((uint64_t)v5, 1LL, v25);
      id v29 = v24;
      uint64_t v30 = v29;
      if (v28 == 1)
      {
        sub_10000DA68((uint64_t)v5, &qword_1001C8BD0);
        uint64_t v31 = 0LL;
      }

      else
      {
        unsigned __int8 v32 = TaskPriority.rawValue.getter(v29);
        (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8LL))(v5, v25);
        uint64_t v31 = v32;
      }

      uint64_t v33 = *v27;
      if (*v27)
      {
        uint64_t v34 = v26[3];
        uint64_t ObjectType = swift_getObjectType(v33);
        swift_unknownObjectRetain(v33);
        uint64_t v36 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v34);
        uint64_t v38 = v37;
        swift_unknownObjectRelease(v33);
      }

      else
      {
        uint64_t v36 = 0LL;
        uint64_t v38 = 0LL;
      }

      uint64_t v39 = swift_allocObject(&unk_1001B1B18, 32LL, 7LL);
      *(void *)(v39 + swift_weakDestroy(v0 + 16) = &unk_1001CE560;
      *(void *)(v39 + 24) = v26;
      if (v38 | v36)
      {
        v45[0] = 0LL;
        v45[1] = 0LL;
        uint64_t v40 = v45;
        v45[2] = v36;
        void v45[3] = v38;
      }

      else
      {
        uint64_t v40 = 0LL;
      }

      ++v21;
      swift_task_create(v31 | 0x1C00, v40, v42, &unk_1001CE568, v39);

      swift_release();
      uint64_t v18 = v22;
    }

    while (v20 != v21);
    goto LABEL_38;
  }

uint64_t sub_100117EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[50] = a4;
  v5[51] = a5;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v5[52] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100117F54, 0LL, 0LL);
}

uint64_t sub_100117F54()
{
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  v0[53] = qword_1001DBB90;
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  v0[54] = qword_1001DBB88;
  sub_100122FB0();
  sub_1001232AC();
  sub_1000C1178();
  v0[55] = v1;
  v0[56] = sub_10000DE08(v1, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  v0[57] = sub_1000519E4();
  uint64_t v2 = sub_100123194();
  uint64_t v3 = sub_100122FC8(v2);
  v0[58] = v3;
  swift_defaultActor_initialize(v3);
  uint64_t v4 = sub_1001230C0((uint64_t)&_swiftEmptySetSingleton);
  v0[59] = sub_10000DDDC(v4, 16LL);
  sub_1001234F4();
  return sub_100122ECC(v5, v6, v7);
}

uint64_t sub_10011804C()
{
  uint64_t v1 = *(void **)(v0 + 456);
  sub_10012345C();
  *(void *)(v0 + 480) = sub_100123088( v2,  v3,  v4,  v5,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher,  (uint64_t)&off_1001AF268,  v10,  v11,  v12);

  sub_1000292C4();
  sub_10001A2D8();
  sub_10002FAF4();
  sub_100096178();
  return swift_task_switch(v6, v7, v8);
}

uint64_t sub_1001180DC()
{
  id v1 = sub_1000519E4();
  *(void *)(v0 + 488) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_1001CBFFC);
  *(void *)(v0 + 496) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100118134;
  return sub_1000BFC24((uint64_t)v1);
}

uint64_t sub_100118134()
{
  *(void *)(v0 + 504) = v1;
  swift_task_dealloc(v2);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_100118174()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001CC61C);
  *(void *)(v0 + 51sub_10000D3A0(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001181D8;
  return sub_1000D426C((uint64_t)&_swiftEmptySetSingleton, 1);
}

uint64_t sub_1001181D8()
{
  *(void *)(v1 + 520) = v0;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

#error "1001183E0: call analysis failed (funcsize=145)"
uint64_t sub_10011848C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void v28[2];

  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v2 = *(void *)(v0 + 408);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10002C79C() - 8);
  uint64_t v4 = sub_10001059C( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
       + 3LL * *(void *)(v3 + 72),
         *(unsigned __int8 *)(v3 + 80));
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v27 = v4;
  uint64_t v5 = sub_10000D33C(&qword_1001CE4F0);
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
  uint64_t v6 = (id)AMSLogKey(v5);
  uint64_t v7 = *(void **)(v0 + 416);
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v12 = sub_10000D37C((void *)(v0 + 16), v5);
    sub_10000DC54((uint64_t)v12, v5);
    *(void *)(v0 + 23sub_10000D3A0(v0 + 2) = sub_10000DDAC();
    *(void *)(v0 + 208) = v8;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 208);
    sub_10000DD04(v0 + 208);
    sub_10000DC14();
    *(void *)(v0 + 264) = &type metadata for String;
    *(void *)(v0 + 240) = v9;
    *(void *)(v0 + 248) = v11;
    sub_100096150();
    sub_10000DD04(v0 + 240);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100020AB8();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    id v13 = sub_10000D37C((void *)(v0 + 16), v5);
    sub_10000DC54((uint64_t)v13, v5);
    *(void *)(v0 + 7sub_10000D3A0(v0 + 2) = sub_10000DDAC();
    *(void *)(v0 + 48) = v1;
    uint64_t v14 = sub_100096150();
    sub_1001231D8(v14, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  unint64_t v15 = *(void *)(v0 + 520);
  unint64_t v16 = *(void **)(v0 + 400);
  sub_10012350C();
  sub_1001231E0();
  swift_bridgeObjectRelease();
  v28[0] = 0xD000000000000022LL;
  v28[1] = 0x8000000100177390LL;
  uint64_t v17 = sub_1000105E8((uint64_t)[v16 description]);
  uint64_t v19 = v18;

  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  sub_10000DE74();
  sub_100123150(0xD000000000000022LL);
  sub_1000D6DF0();
  sub_100122F18((uint64_t)v28);
  swift_getErrorValue(v15, v0 + 392);
  uint64_t v21 = *(void *)(v0 + 368);
  uint64_t v22 = *(void *)(v0 + 376);
  *(void *)(v0 + 136) = v22;
  id v23 = sub_10000D63C((void *)(v0 + 112));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v23, v21, v22);
  static LogMessage.safe(_:)(v0 + 112);
  sub_100122F18(v0 + 112);
  uint64_t v25 = static os_log_type_t.error.getter(v24);
  sub_1001231C4(v25, v27);
  swift_release();
  sub_100009020();
  sub_10009DEF0();
  swift_task_dealloc(*(void *)(v0 + 416));
  return sub_100122F50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100118790( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[61] = a7;
  v8[62] = a8;
  v8[59] = a5;
  v8[60] = a6;
  v8[58] = a4;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v8[63] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001187F0, 0LL, 0LL);
}

uint64_t sub_1001187F0()
{
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  v0[64] = qword_1001DBB90;
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  v0[65] = qword_1001DBB88;
  sub_100122FB0();
  sub_1001232AC();
  sub_1000C1178();
  v0[66] = v1;
  sub_10000DE08(v1, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  v0[67] = sub_1000519E4();
  uint64_t v2 = sub_100123194();
  uint64_t v3 = sub_100122FC8(v2);
  v0[68] = v3;
  swift_defaultActor_initialize(v3);
  uint64_t v4 = sub_1001230C0((uint64_t)&_swiftEmptySetSingleton);
  v0[69] = sub_10000DDDC(v4, 16LL);
  sub_1001234F4();
  return sub_100122ECC(v5, v6, v7);
}

uint64_t sub_1001188E4()
{
  uint64_t v1 = (void *)v0[67];
  uint64_t v2 = v0[59];
  sub_10012345C();
  v0[70] = sub_100123088( v3,  v4,  v5,  v6,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher,  (uint64_t)&off_1001AF268,  v9,  v10,  v11);

  sub_1000292C4();
  sub_10001A2D8();
  sub_10002FAF4();
  uint64_t v7 = (void *)swift_task_alloc(dword_1001CC61C);
  v0[71] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100118994;
  return sub_100122FDC(v2, 0);
}

uint64_t sub_100118994()
{
  *(void *)(v1 + 576) = v0;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_1001189E0()
{
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v3 = *(void *)(v0 + 480);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(sub_10002C79C() - 8);
  uint64_t v5 = sub_10001059C( ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + 3LL * *(void *)(v4 + 72),
         *(unsigned __int8 *)(v4 + 80));
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v6 = type metadata accessor for ServerDataCacheService();
  id v7 = sub_1001231B8(v6);
  id v8 = (id)AMSLogKey(v7);
  uint64_t v9 = *(void **)(v0 + 504);
  if (v8)
  {
    uint64_t v10 = v8;
    uint64_t v29 = sub_100123534((uint64_t)v8);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_10000DC34();
    sub_10000DC08();
    id v13 = sub_10000D37C((void *)(v0 + 336), v6);
    sub_10000DC54((uint64_t)v13, v6);
    *(void *)(v0 + 200) = sub_10000DDAC();
    *(void *)(v0 + 176) = v10;
    sub_100096150();
    sub_10000DD04(v3);
    sub_10000DC14();
    *(void *)(v0 + 168) = &type metadata for String;
    *(void *)(v0 + 144) = v29;
    *(void *)(v0 + 15sub_10000D3A0(v0 + 2) = v12;
    sub_100123130();
    sub_10000DD04(v2);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE74();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v14 = sub_10000D37C((void *)(v0 + 336), v6);
    sub_10000DC54((uint64_t)v14, v6);
    *(void *)(v0 + 39sub_10000D3A0(v0 + 2) = sub_10000DDAC();
    *(void *)(v0 + 368) = v1;
    uint64_t v15 = sub_100096150();
    sub_1001231D8(v15, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  int v28 = *(void (**)(uint64_t, void))(v0 + 488);
  uint64_t v16 = *(void *)(v0 + 472);
  sub_10000D3A0((void *)(v0 + 336));
  sub_1001231E0();
  uint64_t v17 = swift_bridgeObjectRelease();
  id v18 = sub_1000F03BC(v17, "description");
  uint64_t v19 = sub_1000105E8((uint64_t)v18);
  uint64_t v21 = v20;

  v22._uint64_t countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  sub_10002C764();
  *(void *)(v0 + 264) = &type metadata for String;
  *(void *)(v0 + 240) = 0xD000000000000022LL;
  *(void *)(v0 + 248) = 0x8000000100177300LL;
  sub_1000D6DF0();
  sub_1000C8B8C(v0 + 240);
  uint64_t v23 = Dictionary.description.getter( v16,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  *(void *)(v0 + 23sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(v0 + 208) = v23;
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v24;
  static LogMessage.safe(_:)(v0 + 208);
  sub_1000C8B8C(v0 + 208);
  uint64_t v26 = static os_log_type_t.info.getter(v25);
  sub_1001231C4(v26, v5);
  sub_1000090CC();
  v28(1LL, 0LL);
  swift_release();
  swift_task_dealloc(*(void *)(v0 + 504));
  return sub_100122F50(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100118CD4()
{
  uint64_t v63 = (void *)(v0 + 16);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10002C79C() - 8);
  uint64_t v4 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                 + 3LL * *(void *)(v3 + 72),
                   *(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = sub_10012334C(v4, (__n128)xmmword_100164240);
  id v6 = sub_100123120(v5);
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    sub_1001230E4((uint64_t)v7);
    sub_1001231AC();
    sub_10000DD9C();
    sub_10000DC34();
    sub_10000DC08();
    id v8 = (void *)(v0 + 16);
    sub_100122EB0(v63);
    uint64_t v9 = sub_1000258E8();
    sub_1001230F4(v9);
    sub_1000C8B8C(v2);
    sub_10000DC14();
    *(void *)(v0 + 328) = &type metadata for String;
    sub_1001232B4();
    sub_1000C8B8C(v1);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DCFC();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    id v8 = (void *)(v0 + 16);
    sub_100122EB0(v63);
    uint64_t v10 = sub_1000258E8();
    uint64_t v11 = sub_1001230CC(v10);
    sub_10012354C(v11, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v62 = *(void *)(v0 + 496);
  uint64_t v64 = *(void *)(v0 + 560);
  uint64_t v60 = *(void *)(v0 + 488);
  sub_10000D3A0(v8);
  _StringGuts.grow(_:)(34LL);
  uint64_t v12 = swift_bridgeObjectRelease();
  v66[0] = 0xD000000000000020LL;
  v66[1] = 0x80000001001772D0LL;
  id v13 = sub_1000F03BC(v12, "description");
  uint64_t v14 = sub_1000105E8((uint64_t)v13);
  uint64_t v16 = v15;

  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  sub_10000DDF8();
  sub_100123150(v66[0]);
  sub_1000D6DF0();
  sub_1000C8B8C((uint64_t)v66);
  sub_10012323C(v18, v19, v20, v21, v22, v23, v24, v25, v0 + 456);
  uint64_t v26 = sub_100123540();
  sub_100123228((uint64_t)v26);
  sub_10009DF28();
  sub_1000C8B8C(v0 + 112);
  uint64_t v28 = static os_log_type_t.error.getter(v27);
  sub_10012339C(v28, v29, v30, v31, v32, v33, v34, v35, v53, v0 + 400, v0 + 448, v60, v62, v64, v65);
  uint64_t v36 = sub_100009020();
  sub_100123528(v36, v37, v38, v39, v40, v41, v42, v43, v54, v56, v58);
  id v44 = sub_10006B9D0(*(void *)(v0 + 408), *(void *)(v0 + 416));
  sub_100123298((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, v55, v57, v59, v61);
  swift_release();

  sub_10009DEF0();
  swift_task_dealloc(*(void *)(v0 + 504));
  return sub_100122F78(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100119068(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

void sub_1001190C0()
{
  uint64_t v4 = v3;
  uint64_t v41 = v5;
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  uint64_t v44 = v8;
  uint64_t v10 = v9;
  uint64_t v40 = v11;
  sub_10000D33C(&qword_1001C8BD0);
  sub_10000DC64();
  __chkstk_darwin(v12);
  uint64_t v13 = sub_100123274();
  type metadata accessor for LogMessage.StringInterpolation(v13);
  sub_10000DC64();
  __chkstk_darwin(v14);
  sub_10000DC74();
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v15 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_1000F0334();
  *(_OWORD *)(sub_1000678EC(v2 + 4 * v15, v16) + swift_weakDestroy(v0 + 16) = xmmword_1001649D0;
  uint64_t v47 = type metadata accessor for ServerDataCacheService();
  v46[0] = v0;
  id v39 = v0;
  id v17 = (id)AMSLogKey(v39);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v4;
    uint64_t v22 = v21;

    swift_bridgeObjectRetain(v22);
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v23 = v47;
    uint64_t v24 = sub_10000D37C(v46, v47);
    sub_10000DC54((uint64_t)v24, v23);
    uint64_t v25 = sub_10003881C();
    sub_10012336C(v25);
    sub_100123500();
    sub_10000DC14();
    void v45[3] = &type metadata for String;
    v45[0] = v19;
    v45[1] = v22;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v45);
    sub_100123500();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v4 = v20;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v26 = v47;
    uint64_t v27 = sub_10000D37C(v46, v47);
    sub_10000DC54((uint64_t)v27, v26);
    uint64_t v28 = sub_10003881C();
    sub_10012336C(v28);
    sub_10000DA68((uint64_t)v45, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v46);
  uint64_t v29 = LogMessage.init(stringLiteral:)(0xD000000000000038LL);
  uint64_t v47 = sub_10000DE08(v29, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  v46[0] = v40;
  id v30 = v40;
  sub_1001234EC((uint64_t)v46);
  sub_100123514();
  uint64_t v47 = sub_10000D33C(v41);
  v46[0] = v10;
  sub_10000DF10();
  static LogMessage.safe(_:)(v46);
  sub_100123514();
  uint64_t v32 = static os_log_type_t.info.getter(v31);
  sub_100123484(v32);
  sub_100020AB8();
  uint64_t v33 = sub_100123290();
  sub_10000DFB0(v1, v34, v35, v33);
  uint64_t v36 = (void *)sub_10000DDDC(v42, 72LL);
  v36[2] = 0LL;
  void v36[3] = 0LL;
  v36[4] = v30;
  id v36[5] = v10;
  v36[6] = v39;
  v36[7] = v43;
  v36[8] = v44;
  id v37 = v39;
  id v38 = v30;
  sub_10000DF10();
  sub_10002588C();
  sub_1001234A4(v1, v4);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_100119394( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[57] = a7;
  v8[58] = a8;
  v8[55] = a5;
  v8[56] = a6;
  v8[54] = a4;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v8[59] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001193F4, 0LL, 0LL);
}

uint64_t sub_1001193F4()
{
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  v0[60] = qword_1001DBB90;
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  v0[61] = qword_1001DBB88;
  sub_100122FB0();
  sub_1001232AC();
  sub_1000C1178();
  v0[62] = v1;
  sub_10000DE08(v1, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  v0[63] = sub_1000519E4();
  uint64_t v2 = sub_100123194();
  uint64_t v3 = sub_100122FC8(v2);
  v0[64] = v3;
  swift_defaultActor_initialize(v3);
  uint64_t v4 = sub_1001230C0((uint64_t)&_swiftEmptySetSingleton);
  v0[65] = sub_10000DDDC(v4, 16LL);
  sub_1001234F4();
  return sub_100122ECC(v5, v6, v7);
}

uint64_t sub_1001194E8()
{
  uint64_t v1 = (void *)v0[63];
  uint64_t v2 = v0[55];
  sub_10012345C();
  v0[66] = sub_100123088( v3,  v4,  v5,  v6,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher,  (uint64_t)&off_1001AF268,  v9,  v10,  v11);

  sub_1000292C4();
  sub_10001A2D8();
  sub_10002FAF4();
  uint64_t v7 = (void *)swift_task_alloc(dword_1001CC61C);
  v0[67] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100119590;
  return sub_100122FDC(v2, 1);
}

uint64_t sub_100119590()
{
  *(void *)(v1 + 544) = v0;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

#error "100119790: call analysis failed (funcsize=148)"
uint64_t sub_10011984C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void (*v21)(void, id);
  uint64_t v22;
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10002C79C() - 8);
  uint64_t v4 = sub_10001059C( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
       + 3LL * *(void *)(v3 + 72),
         *(unsigned __int8 *)(v3 + 80));
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v22 = v4;
  uint64_t v5 = type metadata accessor for ServerDataCacheService();
  uint64_t v6 = sub_100123120(v5);
  uint64_t v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    sub_1001230E4((uint64_t)v7);
    sub_1001231AC();
    sub_10000DD9C();
    sub_10000DC34();
    sub_10000DC08();
    sub_100122EB0((void *)(v0 + 16));
    uint64_t v8 = sub_1000258E8();
    sub_1001230F4(v8);
    sub_1000C8B8C(v2);
    sub_10000DC14();
    *(void *)(v0 + 328) = &type metadata for String;
    sub_1001232B4();
    sub_1000C8B8C(v1);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DCFC();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_100122EB0((void *)(v0 + 16));
    uint64_t v9 = sub_1000258E8();
    uint64_t v10 = sub_1001230CC(v9);
    sub_10012354C(v10, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v11 = *(void *)(v0 + 544);
  uint64_t v21 = *(void (**)(void, id))(v0 + 456);
  uint64_t v12 = *(void *)(v0 + 440);
  sub_10012350C();
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = Set.description.getter(v12, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v13);
  sub_10000DDF8();
  *(void *)(v0 + 104) = &type metadata for String;
  *(void *)(v0 + 80) = 0xD000000000000016LL;
  *(void *)(v0 + 88) = 0x8000000100177250LL;
  static LogMessage.safe(_:)(v0 + 80);
  sub_1000C8B8C(v0 + 80);
  swift_getErrorValue(v11, v0 + 424);
  uint64_t v14 = *(void *)(v0 + 368);
  uint64_t v15 = *(void *)(v0 + 376);
  *(void *)(v0 + 136) = v15;
  uint64_t v16 = sub_10000D63C((void *)(v0 + 112));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v16, v14, v15);
  sub_10009DF28();
  sub_1000C8B8C(v0 + 112);
  uint64_t v18 = static os_log_type_t.error.getter(v17);
  sub_1000BD1B0(v18, v22);
  sub_100009020();
  swift_getErrorValue(v11, v0 + 416);
  uint64_t v19 = sub_100123498();
  v21(0LL, v19);
  swift_release();

  swift_errorRelease(v11);
  swift_task_dealloc(*(void *)(v0 + 472));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100119C28(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType(v6);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v70 = qword_1001CE480;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_1000487C4();
  uint64_t v12 = sub_10001059C(v7 + 4 * v10, v11);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1001649D0;
  uint64_t v108 = &type metadata for String;
  sub_100122F40(0xD00000000000003ALL, v52, v57, v62, v66, v70, a6, ObjectType, v84, a3, a2, a5, v104, v107[0], v107[1]);
  sub_100067788((uint64_t)v107);
  sub_10012330C();
  _StringGuts.grow(_:)(28LL);
  sub_100123454( v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v53,  v58,  v63,  v67,  v71,  v75,  v80,  v85,  v90,  v95,  v100,  v105,  v107[0],  v107[1]);
  v107[0] = 0xD000000000000010LL;
  v107[1] = 0x8000000100177110LL;
  v21._object = v91;
  v21._uint64_t countAndFlagsBits = v96;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0x69736420726F6620LL;
  v22._object = (void *)0xEA00000000003A64LL;
  String.append(_:)(v22);
  uint64_t v108 = &type metadata for String;
  static LogMessage.safe(_:)(v107);
  sub_100067788((uint64_t)v107);
  uint64_t v108 = (void *)sub_10000DE08(v23, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  v107[0] = (uint64_t)a1;
  id v24 = a1;
  sub_1001234EC((uint64_t)v107);
  sub_100067788((uint64_t)v107);
  sub_10012330C();
  _StringGuts.grow(_:)(17LL);
  sub_100123454( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  v54,  v59,  v64,  v68,  v72,  v76,  v81,  v86,  (uint64_t)v91,  v96,  v101,  v106,  v107[0],  v107[1]);
  strcpy((char *)v107, " with policy: ");
  HIBYTE(v107[1]) = -18;
  v33._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v33);
  sub_10000DE2C();
  v34._uint64_t countAndFlagsBits = 32LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  uint64_t v108 = &type metadata for String;
  sub_100122F40(v107[0], v55, v60, v65, v69, v73, v77, v82, v87, v92, v97, v102, a4, v107[0], v107[1]);
  sub_100067788((uint64_t)v107);
  uint64_t v36 = static os_log_type_t.info.getter(v35);
  sub_1001231C4(v36, v12);
  sub_10002C764();
  if (a4 >= 6)
  {
    sub_100122F94();
    sub_100122F20( (uint64_t)"Fatal error",  v47,  v48,  v49,  0x8000000100176E00LL,  (uint64_t)"amsengagementd/ServerDataCacheService.swift",  v50,  v51,  v56,  v61);
    __break(1u);
  }

  else
  {
    sub_100122FB0();
    id v37 = v24;
    sub_1000C1178();
    uint64_t v39 = v38;
    sub_1000C18DC();
    uint64_t v40 = (void *)sub_10000DDDC((uint64_t)&unk_1001B17F8, 96LL);
    void v40[2] = a4;
    v40[3] = v103;
    v40[4] = v78;
    v40[5] = v88;
    v40[6] = v98;
    v40[7] = v93;
    v40[8] = v37;
    v40[9] = v39;
    v40[10] = 5 - a4;
    v40[11] = v83;
    uint64_t v41 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1820, 96LL);
    v41[2] = a4;
    v41[3] = v88;
    void v41[4] = v98;
    v41[5] = v93;
    v41[6] = v103;
    v41[7] = v78;
    v41[8] = v37;
    v41[9] = v39;
    v41[10] = 5 - a4;
    v41[11] = v83;
    id v42 = v37;
    sub_1000672B0(v78);
    id v43 = v88;
    sub_1000F0364(v93);
    sub_1000672B0(v39);
    id v44 = v42;
    id v45 = v43;
    sub_1001232D0((uint64_t)sub_100122774, v46, (uint64_t)sub_1001227D8);
    sub_10002FAF4();
    sub_1000292C4();
    sub_100020AD8();
    swift_release();
    sub_100123104();
  }

uint64_t sub_100119F94( uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HIDWORD(v28) = a2;
  uint64_t v17 = swift_allocObject(&unk_1001B1848, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  uint64_t v18 = (void *)swift_allocObject(&unk_1001B1870, 48LL, 7LL);
  void v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  uint64_t v19 = (void *)swift_allocObject(&unk_1001B1898, 48LL, 7LL);
  v19[2] = a5;
  void v19[3] = a8;
  void v19[4] = a6;
  v19[5] = a7;
  uint64_t v20 = (void *)swift_allocObject(&unk_1001B18C0, 72LL, 7LL);
  void v20[2] = a5;
  uint64_t v20[3] = a6;
  v20[4] = a7;
  void v20[5] = a9;
  v20[6] = a10;
  v20[7] = a3;
  v20[8] = a4;
  id v21 = a5;
  swift_bridgeObjectRetain_n(a7, 3LL);
  id v22 = v21;
  swift_retain_n(a4, 2LL);
  id v23 = a8;
  id v24 = v22;
  id v25 = v23;
  swift_retain(a9);
  sub_10011AE2C( a1,  HIDWORD(v28),  (uint64_t)sub_1000670AC,  v17,  (uint64_t)sub_10012284C,  (uint64_t)v18,  (uint64_t)sub_100122878,  (uint64_t)v19,  (uint64_t)sub_1001228A8,  (uint64_t)v20,  (uint64_t)&qword_1001C8E58,  (uint64_t)&unk_1001B16B8,  (uint64_t)&unk_1001B16E0,  (uint64_t)sub_100122EAC,  (uint64_t)sub_100122E64,  (uint64_t)&unk_1001B1708,  (uint64_t)sub_100122E14,  a9,  a10,  a1,  v28,  a11,  v29,  v30,  v31,  v32,  v33,  v34,  v35);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011A178(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_10000D33C(&qword_1001C8BD0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  sub_10000D5C0((uint64_t)v10, 1LL, 1LL, v11);
  uint64_t v12 = (void *)swift_allocObject(&unk_1001B1960, 64LL, 7LL);
  void v12[2] = 0LL;
  v12[3] = 0LL;
  v12[4] = a1;
  void v12[5] = a2;
  v12[6] = a3;
  v12[7] = a4;
  id v13 = a1;
  swift_bridgeObjectRetain(a3);
  id v14 = a4;
  sub_100116BA0((uint64_t)v10, (uint64_t)&unk_1001CE530, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_10011A254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  _BYTE v7[8] = a4;
  v7[9] = a5;
  return swift_task_switch(sub_10011A270, 0LL, 0LL);
}

uint64_t sub_10011A270()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  v0[12] = sub_10011756C();
  uint64_t v3 = sub_10000D33C(&qword_1001C8EA0);
  uint64_t inited = swift_initStackObject(v3, v0 + 2);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = v2;
  *(void *)(inited + 40) = v1;
  swift_bridgeObjectRetain(v1);
  v0[13] = sub_100121998(inited);
  sub_1000D6DB0();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_10011A2FC()
{
  return sub_1000676E8(*(uint64_t (**)(void))(v0 + 8));
}

void sub_10011A338(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_10000D33C(&qword_1001C8EA0);
  uint64_t inited = swift_initStackObject(v12, v17);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = a5;
  *(void *)(inited + 40) = a6;
  swift_bridgeObjectRetain(a6);
  sub_100121998(inited);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  void v16[4] = a1;
  void v16[5] = a2;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  void v16[2] = sub_100116CD8;
  v16[3] = &unk_1001B1928;
  uint64_t v15 = _Block_copy(v16);
  swift_retain(a2);
  swift_release();
  [a3 updateCacheForAccountDSID:a4 withCacheTypeIDs:isa completion:v15];
  _Block_release(v15);
}

uint64_t sub_10011A45C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v56 = a4;
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v55 = qword_1001CE480;
  uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v54 = v18;
  uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  int v61 = (void *)type metadata accessor for ServerDataCacheService();
  unint64_t v59 = (unint64_t)a1;
  id v21 = a1;
  id v22 = (id)AMSLogKey(v21);
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    id v52 = v21;
    uint64_t v53 = a5;
    id v25 = a3;
    uint64_t v26 = a2;
    uint64_t v27 = a6;
    uint64_t v28 = a7;
    uint64_t v29 = v24;
    uint64_t v31 = v30;

    swift_bridgeObjectRetain(v31);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v32._uint64_t countAndFlagsBits = 0LL;
    v32._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    uint64_t v33 = v61;
    uint64_t v34 = sub_10000D37C(&v59, (uint64_t)v61);
    uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v57[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
    sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
    v36._uint64_t countAndFlagsBits = 5972026LL;
    v36._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    uint64_t MetatypeMetadata = &type metadata for String;
    v57[0] = v29;
    v57[1] = v31;
    a7 = v28;
    a6 = v27;
    a2 = v26;
    a3 = v25;
    a5 = v53;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
    sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
    v37._uint64_t countAndFlagsBits = 93LL;
    v37._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    LogMessage.init(stringInterpolation:)(v15);
    id v21 = v52;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v38._uint64_t countAndFlagsBits = 0LL;
    v38._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v38);
    uint64_t v39 = v61;
    uint64_t v40 = sub_10000D37C(&v59, (uint64_t)v61);
    uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v41);
    v57[0] = v41;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
    sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
    v42._uint64_t countAndFlagsBits = 58LL;
    v42._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v42);
    LogMessage.init(stringInterpolation:)(v15);
  }

  sub_10000D3A0(&v59);
  unint64_t v59 = 0LL;
  unint64_t v60 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease();
  unint64_t v59 = 0xD000000000000014LL;
  unint64_t v60 = 0x8000000100177160LL;
  v43._uint64_t countAndFlagsBits = a2;
  v43._object = a3;
  String.append(_:)(v43);
  int v61 = &type metadata for String;
  static LogMessage.safe(_:)(&v59);
  sub_10000DA68((uint64_t)&v59, &qword_1001CAAD0);
  uint64_t v45 = static os_log_type_t.info.getter(v44);
  sub_1000BD1B0(v45, v20);
  swift_bridgeObjectRelease();
  sub_1000C18DC();
  uint64_t v46 = (void *)swift_allocObject(&unk_1001B18E8, 48LL, 7LL);
  void v46[2] = a5;
  void v46[3] = v21;
  v46[4] = a6;
  v46[5] = a7;
  uint64_t v47 = (void *)swift_allocObject(&unk_1001B1910, 56LL, 7LL);
  v47[2] = v21;
  void v47[3] = a6;
  v47[4] = a7;
  v47[5] = a2;
  v47[6] = a3;
  id v48 = v21;
  swift_retain_n(a7, 2LL);
  id v49 = v48;
  swift_bridgeObjectRetain(a3);
  sub_100062648(sub_1001228D0, v46, sub_100122900, v47);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011A85C( unsigned __int8 *a1, char a2, void *a3, uint64_t (*a4)(void, void), uint64_t a5)
{
  v64[1] = a5;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = *a1;
  if (v12 == 1 && (a2 & 1) == 0LL)
  {
    Swift::String v32 = a4;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v33 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v34 = type metadata accessor for LogMessage(0LL);
    uint64_t v35 = swift_allocObject( v33,  ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v34 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v70 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v68 = (unint64_t)a3;
    id v36 = (id)AMSLogKey(a3);
    if (v36)
    {
      Swift::String v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v40 = v39;

      swift_bridgeObjectRetain(v40);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v41._uint64_t countAndFlagsBits = 0LL;
      v41._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      Swift::String v42 = v70;
      Swift::String v43 = sub_10000D37C(&v68, (uint64_t)v70);
      uint64_t DynamicType = swift_getDynamicType(v43, v42, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v65 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v45._uint64_t countAndFlagsBits = 5972026LL;
      v45._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v65 = v38;
      uint64_t v66 = v40;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v46._uint64_t countAndFlagsBits = 93LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v11);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v56._uint64_t countAndFlagsBits = 0LL;
      v56._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      uint64_t v57 = v70;
      uint64_t v58 = sub_10000D37C(&v68, (uint64_t)v70);
      uint64_t v59 = swift_getDynamicType(v58, v57, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v59);
      uint64_t v65 = v59;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v60._uint64_t countAndFlagsBits = 58LL;
      v60._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v60);
      LogMessage.init(stringInterpolation:)(v11);
    }

    a4 = v32;
    sub_10000D3A0(&v68);
    uint64_t v70 = &type metadata for String;
    unint64_t v68 = 0xD00000000000002FLL;
    unint64_t v69 = 0x80000001001771E0LL;
    static LogMessage.safe(_:)(&v68);
    sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
    uint64_t v62 = static os_log_type_t.info.getter(v61);
    sub_1000BD1B0(v62, v35);
    swift_bridgeObjectRelease();
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = *((void *)a1 + 1);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v17 = *(void *)(v16 + 72);
    uint64_t v18 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)) + 2 * v17,  *(unsigned __int8 *)(v16 + 80) | 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v70 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v68 = (unint64_t)a3;
    id v19 = (id)AMSLogKey(a3);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v64[0] = v17;
      id v22 = a4;
      uint64_t v23 = v21;
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v26._uint64_t countAndFlagsBits = 0LL;
      v26._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t v27 = v70;
      uint64_t v28 = sub_10000D37C(&v68, (uint64_t)v70);
      uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
      uint64_t v65 = v29;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v30._uint64_t countAndFlagsBits = 5972026LL;
      v30._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v65 = v23;
      uint64_t v66 = v25;
      a4 = v22;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v31._uint64_t countAndFlagsBits = 93LL;
      v31._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      LogMessage.init(stringInterpolation:)(v11);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v47._uint64_t countAndFlagsBits = 0LL;
      v47._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      id v48 = v70;
      id v49 = sub_10000D37C(&v68, (uint64_t)v70);
      uint64_t v50 = swift_getDynamicType(v49, v48, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v50);
      uint64_t v65 = v50;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v51._uint64_t countAndFlagsBits = 58LL;
      v51._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      LogMessage.init(stringInterpolation:)(v11);
    }

    sub_10000D3A0(&v68);
    unint64_t v68 = 0LL;
    unint64_t v69 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    v52._object = (void *)0x80000001001771B0LL;
    v52._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v52);
    LOBYTE(v65) = v12;
    uint64_t v66 = v14;
    uint64_t v53 = sub_10000D33C(&qword_1001CE510);
    _print_unlocked<A, B>(_:_:)( &v65,  &v68,  v53,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v70 = &type metadata for String;
    static LogMessage.safe(_:)(&v68);
    sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
    uint64_t v55 = static os_log_type_t.info.getter(v54);
    sub_1000BD1B0(v55, v18);
    swift_bridgeObjectRelease();
  }

  return a4(v14, 0LL);
}

void sub_10011AE2C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  Swift::String v30 = v29;
  Swift::String v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v39);
  sub_10000DC74();
  if (!(_BYTE)v36)
  {
    uint64_t v99 = v34;
    uint64_t v100 = v38;
    uint64_t v54 = qword_1001C80C8;
    sub_10000DEB4();
    if (v54 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v55 = *(void *)(sub_10002C79C() - 8);
    *(_OWORD *)(sub_1000BDC00( ((*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
                + 3LL * *(void *)(v55 + 72),
    uint64_t v56 = sub_10000D33C(&qword_1001CE4F0);
    id v57 = (id)sub_100123208(v56);
    if (v57)
    {
      uint64_t v58 = v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      uint64_t v61 = v60;

      sub_10000DEE0();
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v62 = *((void *)&v105 + 1);
      uint64_t v63 = sub_10000D37C(&v104, *((uint64_t *)&v105 + 1));
      sub_10000DC54((uint64_t)v63, v62);
      uint64_t MetatypeMetadata = (void *)sub_10000DDAC();
      uint64_t v101 = v62;
      sub_100048640();
      sub_10000DD04((uint64_t)&v101);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v101 = v59;
      uint64_t v102 = v61;
      sub_100048640();
      sub_10000DD04((uint64_t)&v101);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_100009020();
      uint64_t v38 = v100;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v81 = *((void *)&v105 + 1);
      sub_100122EB0(&v104);
      uint64_t MetatypeMetadata = (void *)sub_1000258E8();
      uint64_t v101 = v81;
      uint64_t v82 = sub_100048640();
      sub_10006B9BC(v82, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_100048738();
    LogMessage.init(stringLiteral:)(0xD000000000000019LL);
    if (v38)
    {
      *((void *)&v105 + setenv("JavaScriptCoreUseJIT", "0", 1) = sub_10000D33C(a23);
      *(void *)&__int128 v104 = v38;
    }

    else
    {
      __int128 v104 = 0u;
      __int128 v105 = 0u;
    }

    sub_10000DEB4();
    sub_10004885C((uint64_t)&v104);
    sub_10000DA68((uint64_t)&v104, &qword_1001CAAD0);
    uint64_t v97 = static os_log_type_t.default.getter(v96);
    sub_100123484(v97);
    uint64_t v98 = sub_100020AB8();
    v32(v98);
    v99(&v100, 0LL);
    goto LABEL_27;
  }

  if (v36 == 1)
  {
    uint64_t v40 = v34;
    uint64_t v100 = v38;
    uint64_t v41 = qword_1001C80C8;
    sub_10000DEB4();
    if (v41 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100067688();
    uint64_t v44 = sub_1001234D8((v43 & ~v42) + 3 * v36, v42);
    *(_OWORD *)(v44 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v45 = sub_10000D33C(&qword_1001CE4F0);
    id v46 = (id)sub_100123208(v45);
    if (v46)
    {
      Swift::String v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      uint64_t v50 = v49;

      sub_10000DEE0();
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v51 = *((void *)&v105 + 1);
      Swift::String v52 = sub_10000D37C(&v104, *((uint64_t *)&v105 + 1));
      uint64_t v53 = sub_10000DC54((uint64_t)v52, v51);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v53);
      uint64_t v101 = v53;
      sub_100048640();
      sub_100067788((uint64_t)&v101);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v101 = v48;
      uint64_t v102 = v50;
      sub_100048640();
      sub_100067788((uint64_t)&v101);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_100009020();
      uint64_t v38 = v100;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v79 = *((void *)&v105 + 1);
      sub_100122EB0(&v104);
      uint64_t MetatypeMetadata = (void *)sub_1000258E8();
      uint64_t v101 = v79;
      uint64_t v80 = sub_100048640();
      sub_10006B9BC(v80, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_100048738();
    sub_1000105B4(0xD00000000000001DLL);
    if (v38)
    {
      *((void *)&v105 + setenv("JavaScriptCoreUseJIT", "0", 1) = sub_10000D33C(a23);
      *(void *)&__int128 v104 = v38;
    }

    else
    {
      __int128 v104 = 0u;
      __int128 v105 = 0u;
    }

    sub_10000DEB4();
    sub_10004885C((uint64_t)&v104);
    sub_10000DA68((uint64_t)&v104, &qword_1001CAAD0);
    uint64_t v95 = static os_log_type_t.default.getter(v94);
    sub_1000BD1B0(v95, v44);
    sub_100020AB8();
    v40(&v100, 0LL);
LABEL_27:
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  uint64_t v64 = a28;
  uint64_t v65 = a29;
  uint64_t v66 = a27;
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_1000487C4();
  uint64_t v69 = sub_1000678EC((uint64_t)a23 + 2 * v67, v68);
  *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v70 = sub_10000D33C(&qword_1001CE4F0);
  id v71 = (id)sub_100123208(v70);
  if (v71)
  {
    uint64_t v72 = v71;
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    uint64_t v75 = v74;

    sub_10000DEE0();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v76 = *((void *)&v105 + 1);
    uint64_t v77 = sub_10000D37C(&v104, *((uint64_t *)&v105 + 1));
    uint64_t v78 = sub_10000DC54((uint64_t)v77, v76);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v78);
    uint64_t v101 = v78;
    sub_100048640();
    sub_100067788((uint64_t)&v101);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v101 = v73;
    uint64_t v102 = v75;
    uint64_t v65 = a29;
    uint64_t v64 = a28;
    uint64_t v66 = a27;
    sub_100048640();
    sub_100067788((uint64_t)&v101);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_100009020();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v83 = *((void *)&v105 + 1);
    sub_100122EB0(&v104);
    uint64_t MetatypeMetadata = (void *)sub_1000258E8();
    uint64_t v101 = v83;
    uint64_t v84 = sub_100048640();
    sub_10006B9BC(v84, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_100048738();
  uint64_t v85 = sub_1000105B4(0xD000000000000029LL);
  uint64_t v86 = static os_log_type_t.default.getter(v85);
  sub_1000BD1B0(v86, v69);
  sub_1000090CC();
  uint64_t v87 = sub_10000D33C(&qword_1001CA760);
  Promise.__allocating_init()(v87);
  uint64_t v88 = Promise.makeCompletionAdapter()();
  uint64_t v90 = v89;
  uint64_t v91 = sub_10000DDDC(a24, 32LL);
  *(void *)(v91 + swift_weakDestroy(v0 + 16) = v88;
  *(void *)(v91 + 24) = v90;
  uint64_t v92 = sub_10000DDDC(a25, 32LL);
  *(void *)(v92 + swift_weakDestroy(v0 + 16) = a26;
  *(void *)(v92 + 24) = v91;
  v30(v66, v92);
  sub_100037230();
  uint64_t v93 = sub_10000DDDC(v64, 32LL);
  *(void *)(v93 + swift_weakDestroy(v0 + 16) = a21;
  *(void *)(v93 + 24) = a22;
  swift_retain(a22);
  sub_10011701C(v65, v93);
  sub_10001A2D8();
  sub_100037230();
LABEL_28:
  sub_10000DD84();
}

void sub_10011B530( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void, id), uint64_t a7, void *a8, void (*a9)(void, id), uint64_t a10, uint64_t a11)
{
  v52._uint64_t countAndFlagsBits = a11;
  v52._object = a8;
  uint64_t v50 = a9;
  uint64_t v51 = a10;
  uint64_t v18 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_10011B98C(a1, (uint64_t)_swiftEmptyDictionarySingleton, a2);
  if ((_BYTE)v22 == 0xFF)
  {
    v52._uint64_t countAndFlagsBits = a4;
    v52._object = a5;
    uint64_t v51 = a7;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v25 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v26 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v27 = swift_allocObject( v25,  ((*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
          + 2LL * *(void *)(v26 + 72),
            *(unsigned __int8 *)(v26 + 80) | 7LL);
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v59 = (void *)type metadata accessor for ServerDataCacheService();
    v58[0] = a3;
    id v28 = (id)AMSLogKey(a3);
    uint64_t v50 = a6;
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v32 = v31;

      swift_bridgeObjectRetain(v32);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t v34 = v59;
      uint64_t v35 = sub_10000D37C(v58, (uint64_t)v59);
      uint64_t DynamicType = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v56[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
      sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
      v37._uint64_t countAndFlagsBits = 5972026LL;
      v37._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t MetatypeMetadata = &type metadata for String;
      v56[0] = v30;
      v56[1] = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
      sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
      v38._uint64_t countAndFlagsBits = 93LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v20);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v39._uint64_t countAndFlagsBits = 0LL;
      v39._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      uint64_t v40 = v59;
      uint64_t v41 = sub_10000D37C(v58, (uint64_t)v59);
      uint64_t v42 = swift_getDynamicType(v41, v40, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v42);
      v56[0] = v42;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
      sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
      v43._uint64_t countAndFlagsBits = 58LL;
      v43._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      LogMessage.init(stringInterpolation:)(v20);
    }

    sub_10000D3A0(v58);
    v58[0] = 0LL;
    v58[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    v44._object = (void *)0x8000000100177130LL;
    v44._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    String.append(_:)(v44);
    String.append(_:)(v52);
    v45._uint64_t countAndFlagsBits = 8250LL;
    v45._object = (void *)0xE200000000000000LL;
    String.append(_:)(v45);
    v56[0] = a1;
    uint64_t v46 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    _print_unlocked<A, B>(_:_:)( v56,  v58,  v46,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v59 = &type metadata for String;
    static LogMessage.safe(_:)(v58);
    sub_10000DA68((uint64_t)v58, &qword_1001CAAD0);
    uint64_t v48 = static os_log_type_t.error.getter(v47);
    sub_1000BD1B0(v48, v27);
    swift_bridgeObjectRelease();
    swift_getErrorValue(a1, v55);
    id v49 = sub_10006B9D0(v53, v54);
    v50(0LL, v49);
  }

  else
  {
    uint64_t v23 = v21;
    unsigned __int8 v24 = v22;
    sub_100119F94( v21,  v22,  (uint64_t)a6,  a7,  a3,  a4,  (uint64_t)a5,  v52._object,  (uint64_t)v50,  v51,  v52._countAndFlagsBits);
    sub_1001225CC(v23, v24);
  }

uint64_t sub_10011B98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = 5;
  switch(a3)
  {
    case 0LL:
      goto LABEL_7;
    case 1LL:
      char v4 = 4;
      goto LABEL_7;
    case 2LL:
      char v4 = 3;
      goto LABEL_7;
    case 3LL:
      char v4 = 2;
      goto LABEL_7;
    case 4LL:
      char v4 = 1;
      goto LABEL_7;
    case 5LL:
      char v4 = 0;
LABEL_7:
      uint64_t v13 = a1;
      swift_errorRetain(a1);
      uint64_t v5 = sub_10000D33C((uint64_t *)&unk_1001CE740);
      if (!swift_dynamicCast(&v12, &v13, v5, &type metadata for MercuryCacheError, 0LL))
      {
        swift_errorRelease(v13);
        return 0LL;
      }

      int v6 = v12;
      swift_errorRelease(v13);
      if (v6 != 2) {
        return 0LL;
      }
      if ((v4 & 2) != 0) {
        return 0LL;
      }
      if ((v4 & 1) == 0) {
        return 0LL;
      }
      sub_10000DEE0();
      return a2;
    default:
      sub_100122FB8();
      uint64_t result = sub_100122F34( (uint64_t)"Fatal error",  11LL,  2LL,  0xD000000000000011LL,  0x8000000100176E00LL,  (uint64_t)"amsengagementd/ServerDataCacheService.swift",  v8,  v9,  v10,  v11);
      __break(1u);
      return result;
  }

void sub_10011BB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1)
  {
    v5.super.Class isa = 0LL;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0LL;
    goto LABEL_6;
  }

  v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v6 = _convertErrorToNSError(_:)(a2);
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

void sub_10011BBA4(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v55 = sub_10012341C(v6);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v53 = qword_1001CE480;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v11 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_1000487C4();
  uint64_t v13 = sub_1000BD98C(v7 + 3 * v11, v12);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v70 = &type metadata for String;
  sub_10012331C(0xD00000000000004FLL, v41, v45, v49, v51, v53, v55, v58, a6, a5, v67, v68, v69);
  sub_100122F18((uint64_t)&v68);
  sub_10000DE08(v14, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  id v15 = sub_1001234AC();
  sub_1001234B8((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, v42, v46);
  sub_100122F18((uint64_t)&v68);
  sub_1001231F4();
  swift_bridgeObjectRelease();
  uint64_t v68 = 0x4449656C646E7562LL;
  uint64_t v69 = 0xEA0000000000203ALL;
  v23._uint64_t countAndFlagsBits = a2;
  v23._object = a3;
  String.append(_:)(v23);
  sub_100123138((uint64_t)" networkPolicy: ");
  v71._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  sub_1001231CC(v71);
  sub_10000DE2C();
  uint64_t v70 = &type metadata for String;
  sub_10012331C(v68, v43, v47, v50, v52, v54, v56, v59, v62, v65, a4, v68, v69);
  sub_100122F18((uint64_t)&v68);
  uint64_t v25 = static os_log_type_t.info.getter(v24);
  sub_1001231C4(v25, v13);
  sub_10002C764();
  if (a4 >= 6)
  {
    sub_100122F94();
    sub_100122F20( (uint64_t)"Fatal error",  v36,  v37,  v38,  0x8000000100176E00LL,  (uint64_t)"amsengagementd/ServerDataCacheService.swift",  v39,  v40,  v44,  v48);
    __break(1u);
  }

  else
  {
    sub_100122FB0();
    id v26 = sub_1001232AC();
    sub_1000C1178();
    uint64_t v28 = v27;
    sub_1000C2978();
    uint64_t v29 = (void *)sub_10000DDDC((uint64_t)&unk_1001B15C8, 96LL);
    v29[2] = a4;
    v29[3] = v66;
    v29[4] = v63;
    v29[5] = v60;
    v29[6] = v26;
    v29[7] = a2;
    v29[8] = a3;
    v29[9] = v28;
    v29[10] = 5 - a4;
    v29[11] = v57;
    uint64_t v30 = (void *)sub_10000DDDC((uint64_t)&unk_1001B15F0, 96LL);
    v30[2] = a4;
    void v30[3] = v60;
    void v30[4] = a2;
    v30[5] = a3;
    v30[6] = v66;
    v30[7] = v63;
    v30[8] = v26;
    v30[9] = v28;
    v30[10] = 5 - a4;
    v30[11] = v57;
    id v31 = v26;
    sub_1000672B0(v63);
    id v32 = v60;
    sub_1000F0364((uint64_t)a3);
    sub_1000672B0(v28);
    id v33 = v31;
    id v34 = v32;
    sub_1001232D0((uint64_t)sub_1001225B0, v35, (uint64_t)sub_1001225C0);
    sub_10002FAF4();
    sub_1000292C4();
    sub_100020AD8();
    swift_release();
    sub_100123094();
  }

uint64_t sub_10011BE7C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  HIDWORD(v2sub_10000D3A0(v0 + 9) = a2;
  uint64_t v16 = swift_allocObject(&unk_1001B1618, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v17 = swift_allocObject(&unk_1001B1640, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  uint64_t v18 = swift_allocObject(&unk_1001B1668, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  uint64_t v19 = (void *)swift_allocObject(&unk_1001B1690, 80LL, 7LL);
  v19[2] = a5;
  void v19[3] = a6;
  void v19[4] = a7;
  v19[5] = a8;
  v19[6] = a9;
  v19[7] = a10;
  v19[8] = a3;
  v19[9] = a4;
  id v20 = a5;
  id v21 = a6;
  id v22 = v20;
  id v23 = v21;
  swift_retain_n(a4, 2LL);
  id v24 = v22;
  id v25 = v23;
  swift_bridgeObjectRetain(a8);
  swift_retain(a9);
  sub_10011AE2C( a1,  HIDWORD(v29),  (uint64_t)sub_1000668C4,  v16,  (uint64_t)sub_1001225F4,  v17,  (uint64_t)sub_10012261C,  v18,  (uint64_t)sub_100122674,  (uint64_t)v19,  (uint64_t)&qword_1001C8E58,  (uint64_t)&unk_1001B16B8,  (uint64_t)&unk_1001B16E0,  (uint64_t)sub_100122EAC,  (uint64_t)sub_100122E64,  (uint64_t)&unk_1001B1708,  (uint64_t)sub_100122E14,  a10,  a7,  a1,  v29,  a11,  v30,  v31,  v32,  v33,  v34,  v35,  v36);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10011C074, 0LL, 0LL);
}

uint64_t sub_10011C074()
{
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = sub_100123468();
  *(void *)(v0 + 40) = sub_100121998((uint64_t)&off_1001A7638);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_10011C0B8( void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v53 = a5;
  id v51 = a2;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v52 = qword_1001CE480;
  uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v16 = type metadata accessor for LogMessage(0LL);
  uint64_t v17 = swift_allocObject( v15,  ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v16 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v16 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v60 = (void *)type metadata accessor for ServerDataCacheService();
  unint64_t v58 = (unint64_t)a1;
  id v18 = a1;
  id v19 = (id)AMSLogKey(v18);
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v50 = a8;
    uint64_t v23 = v22;

    swift_bridgeObjectRetain(v23);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    id v25 = v60;
    id v26 = sub_10000D37C(&v58, (uint64_t)v60);
    uint64_t DynamicType = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v56[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
    sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
    v28._uint64_t countAndFlagsBits = 5972026LL;
    v28._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t MetatypeMetadata = &type metadata for String;
    v56[0] = v21;
    v56[1] = v23;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
    sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 93LL;
    v29._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    LogMessage.init(stringInterpolation:)(v14);
    a8 = v50;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v30._uint64_t countAndFlagsBits = 0LL;
    v30._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    uint64_t v31 = v60;
    uint64_t v32 = sub_10000D37C(&v58, (uint64_t)v60);
    uint64_t v33 = swift_getDynamicType(v32, v31, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v33);
    v56[0] = v33;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v56);
    sub_10000DA68((uint64_t)v56, &qword_1001CAAD0);
    v34._uint64_t countAndFlagsBits = 58LL;
    v34._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v34);
    LogMessage.init(stringInterpolation:)(v14);
  }

  sub_10000D3A0(&v58);
  unint64_t v58 = 0LL;
  unint64_t v59 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  unint64_t v58 = 0xD000000000000013LL;
  unint64_t v59 = 0x8000000100177040LL;
  id v35 = [v51 description];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v38 = v37;

  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 2108704LL;
  v40._object = (void *)0xE300000000000000LL;
  String.append(_:)(v40);
  v41._uint64_t countAndFlagsBits = a3;
  v41._object = a4;
  String.append(_:)(v41);
  uint64_t v60 = &type metadata for String;
  static LogMessage.safe(_:)(&v58);
  sub_10000DA68((uint64_t)&v58, &qword_1001CAAD0);
  uint64_t v43 = static os_log_type_t.info.getter(v42);
  sub_1000BD1B0(v43, v17);
  swift_bridgeObjectRelease();
  sub_1000C2978();
  uint64_t v44 = (void *)swift_allocObject(&unk_1001B1730, 64LL, 7LL);
  uint64_t v45 = v55;
  void v44[2] = v54;
  v44[3] = v18;
  v44[4] = v45;
  v44[5] = a8;
  v44[6] = a3;
  v44[7] = a4;
  uint64_t v46 = (void *)swift_allocObject(&unk_1001B1758, 56LL, 7LL);
  void v46[2] = v18;
  void v46[3] = v45;
  v46[4] = a8;
  v46[5] = a3;
  v46[6] = a4;
  id v47 = v18;
  swift_retain_n(a8, 2LL);
  swift_bridgeObjectRetain_n(a4, 2LL);
  id v48 = v47;
  sub_100062648(sub_1001226AC, v44, sub_1001226D0, v46);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011C4EC( unsigned __int8 *a1, char a2, void *a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6, void *a7)
{
  v68[1] = a5;
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v16 = *a1;
  if (v16 == 1 && (a2 & 1) == 0LL)
  {
    v68[0] = a4;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v35 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v36 = type metadata accessor for LogMessage(0LL);
    uint64_t v37 = swift_allocObject( v35,  ((*(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v36 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v74 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v72 = (unint64_t)a3;
    id v38 = (id)AMSLogKey(a3);
    if (v38)
    {
      Swift::String v39 = v38;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v42 = v41;

      swift_bridgeObjectRetain(v42);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v43._uint64_t countAndFlagsBits = 0LL;
      v43._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      uint64_t v44 = v74;
      uint64_t v45 = sub_10000D37C(&v72, (uint64_t)v74);
      uint64_t DynamicType = swift_getDynamicType(v45, v44, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v69 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v47._uint64_t countAndFlagsBits = 5972026LL;
      v47._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v69 = v40;
      uint64_t v70 = v42;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v48._uint64_t countAndFlagsBits = 93LL;
      v48._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v58._uint64_t countAndFlagsBits = 0LL;
      v58._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      unint64_t v59 = v74;
      uint64_t v60 = sub_10000D37C(&v72, (uint64_t)v74);
      uint64_t v61 = swift_getDynamicType(v60, v59, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v61);
      uint64_t v69 = v61;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v62._uint64_t countAndFlagsBits = 58LL;
      v62._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v62);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v72);
    unint64_t v72 = 0LL;
    unint64_t v73 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(48LL);
    swift_bridgeObjectRelease();
    unint64_t v72 = 0xD00000000000001ALL;
    unint64_t v73 = 0x80000001001770B0LL;
    v63._uint64_t countAndFlagsBits = a6;
    v63._object = a7;
    String.append(_:)(v63);
    v64._object = (void *)0x8000000100176FA0LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v64);
    uint64_t v74 = &type metadata for String;
    static LogMessage.safe(_:)(&v72);
    sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
    uint64_t v66 = static os_log_type_t.info.getter(v65);
    sub_1000BD1B0(v66, v37);
    swift_bridgeObjectRelease();
    uint64_t v18 = 0LL;
    a4 = (uint64_t (*)(void, void))v68[0];
  }

  else
  {
    uint64_t v18 = *((void *)a1 + 1);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v19 = qword_1001CE480;
    uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v21 = type metadata accessor for LogMessage(0LL);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v21 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v74 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v72 = (unint64_t)a3;
    id v23 = (id)AMSLogKey(a3);
    if (v23)
    {
      Swift::String v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v68[0] = v19;
      id v26 = a4;
      uint64_t v28 = v27;

      swift_bridgeObjectRetain(v28);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v29._uint64_t countAndFlagsBits = 0LL;
      v29._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      Swift::String v30 = v74;
      uint64_t v31 = sub_10000D37C(&v72, (uint64_t)v74);
      uint64_t v32 = swift_getDynamicType(v31, v30, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v32);
      uint64_t v69 = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v33._uint64_t countAndFlagsBits = 5972026LL;
      v33._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v69 = v25;
      uint64_t v70 = v28;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v34._uint64_t countAndFlagsBits = 93LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      LogMessage.init(stringInterpolation:)(v15);
      a4 = v26;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v49._uint64_t countAndFlagsBits = 0LL;
      v49._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      uint64_t v50 = v74;
      id v51 = sub_10000D37C(&v72, (uint64_t)v74);
      uint64_t v52 = swift_getDynamicType(v51, v50, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
      uint64_t v69 = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v69);
      sub_10000DA68((uint64_t)&v69, &qword_1001CAAD0);
      v53._uint64_t countAndFlagsBits = 58LL;
      v53._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v72);
    unint64_t v72 = 0LL;
    unint64_t v73 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    v54._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
    v54._object = (void *)0x8000000100177090LL;
    String.append(_:)(v54);
    LOBYTE(v6sub_10000D3A0(v0 + 9) = v16;
    uint64_t v70 = v18;
    uint64_t v55 = sub_10000D33C(&qword_1001CE510);
    _print_unlocked<A, B>(_:_:)( &v69,  &v72,  v55,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v74 = &type metadata for String;
    static LogMessage.safe(_:)(&v72);
    sub_10000DA68((uint64_t)&v72, &qword_1001CAAD0);
    uint64_t v57 = static os_log_type_t.info.getter(v56);
    sub_1000BD1B0(v57, v22);
    swift_bridgeObjectRelease();
  }

  return a4(v18, 0LL);
}

void sub_10011CB20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  Swift::Int v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  Swift::String v33 = v32;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v34);
  sub_10000DC74();
  uint64_t v86 = v33;
  swift_errorRetain(v33);
  uint64_t v35 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  if (swift_dynamicCast(&v85, &v86, v35, &type metadata for MercuryCacheError, 0LL) && v85 == 2)
  {
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v36 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
    sub_1000487C4();
    uint64_t v38 = sub_1000678EC((uint64_t)v33 + 2 * v36, v37);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v39 = type metadata accessor for ServerDataCacheService();
    id v40 = sub_100123448(v39);
    id v41 = (id)AMSLogKey(v40);
    if (v41)
    {
      uint64_t v42 = v41;
      Swift::String v43 = v31;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      uint64_t v46 = v45;

      sub_10000DEB4();
      sub_10000DC34();
      sub_10000DC08();
      Swift::String v47 = v84;
      Swift::String v48 = sub_10000D37C(&v82, (uint64_t)v84);
      uint64_t v49 = sub_10000DC54((uint64_t)v48, (uint64_t)v47);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v49);
      uint64_t v79 = (void *)v49;
      sub_1000675BC();
      sub_1000819D8((uint64_t)&v79);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v79 = (void *)v44;
      uint64_t v80 = v46;
      uint64_t v31 = v43;
      sub_1000675BC();
      sub_1000819D8((uint64_t)&v79);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DDF8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v70 = v84;
      Swift::String v71 = sub_10000D37C(&v82, (uint64_t)v84);
      sub_10000DC54((uint64_t)v71, (uint64_t)v70);
      uint64_t MetatypeMetadata = (void *)sub_10000DF48();
      uint64_t v79 = v70;
      sub_1000675BC();
      sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(&v82);
    uint64_t v84 = &type metadata for String;
    unint64_t v82 = 0xD000000000000038LL;
    unint64_t v83 = 0x8000000100176F00LL;
    static LogMessage.safe(_:)(&v82);
    sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
    uint64_t v73 = static os_log_type_t.info.getter(v72);
    sub_1000BD1B0(v73, v38);
    sub_1000090CC();
    v31(v25, 0LL);
    swift_errorRelease(v86);
  }

  else
  {
    uint64_t v74 = v35;
    Swift::Int v75 = v23;
    swift_errorRelease(v86);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v50 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_1000F0334();
    uint64_t v53 = swift_allocObject(v50, v25 + 2 * v51, v52 | 7);
    *(_OWORD *)(v53 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v54 = type metadata accessor for ServerDataCacheService();
    id v55 = sub_100123448(v54);
    id v56 = (id)AMSLogKey(v55);
    if (v56)
    {
      uint64_t v57 = v56;
      Swift::String v58 = v31;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      uint64_t v61 = v60;

      sub_10000DEB4();
      sub_10000DC34();
      sub_10000DC08();
      Swift::String v62 = v84;
      sub_100122EB0(&v82);
      uint64_t MetatypeMetadata = (void *)sub_1000258E8();
      uint64_t v79 = v62;
      sub_1000675BC();
      sub_1000C8B8C((uint64_t)&v79);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v79 = (void *)v59;
      uint64_t v80 = v61;
      uint64_t v31 = v58;
      sub_1000675BC();
      sub_1000C8B8C((uint64_t)&v79);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      Swift::String v63 = v84;
      sub_100122EB0(&v82);
      uint64_t MetatypeMetadata = (void *)sub_1000258E8();
      uint64_t v79 = v63;
      sub_1000675BC();
      sub_10000DA68((uint64_t)&v79, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(&v82);
    unint64_t v82 = 0LL;
    unint64_t v83 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(v75);
    v64._uint64_t countAndFlagsBits = a21;
    v64._object = a22;
    String.append(_:)(v64);
    v65._uint64_t countAndFlagsBits = v29;
    v65._object = v27;
    String.append(_:)(v65);
    v66._uint64_t countAndFlagsBits = 8250LL;
    v66._object = (void *)0xE200000000000000LL;
    String.append(_:)(v66);
    uint64_t v79 = v33;
    _print_unlocked<A, B>(_:_:)( &v79,  &v82,  v74,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v84 = &type metadata for String;
    sub_10004885C((uint64_t)&v82);
    sub_10000DA68((uint64_t)&v82, &qword_1001CAAD0);
    uint64_t v68 = static os_log_type_t.error.getter(v67);
    sub_1000BD1B0(v68, v53);
    sub_10002C764();
    swift_getErrorValue(v33, &v78);
    id v69 = sub_10006B9D0(v76, v77);
    v31(0LL, v69);
  }

  sub_10000DD84();
}

uint64_t sub_10011D038( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t, uint64_t))
{
  uint64_t v12 = a12;
  int v13 = *a1;
  uint64_t v14 = *((void *)a1 + 1);
  uint64_t v15 = 1LL;
  switch(a2)
  {
    case 0LL:
      LODWORD(v15) = v13 ^ 1;
      goto LABEL_9;
    case 1LL:
      if ((v13 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v16 = 0LL;
      uint64_t v15 = 0LL;
      goto LABEL_10;
    case 2LL:
    case 3LL:
      if ((v13 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v16 = 0LL;
      uint64_t v15 = 2LL;
      goto LABEL_10;
    case 4LL:
      goto LABEL_9;
    case 5LL:
      if ((v13 & 1) != 0)
      {
        uint64_t v16 = 0LL;
      }

      else
      {
LABEL_9:
        uint64_t v22 = v14;
        swift_bridgeObjectRetain(v14);
        uint64_t v12 = a12;
        uint64_t v15 = v15;
        uint64_t v16 = v22;
      }

void sub_10011D184( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void, id), uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void, id), uint64_t a11)
{
  v51._uint64_t countAndFlagsBits = a8;
  v51._object = a5;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  uint64_t v17 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10011B98C(a1, (uint64_t)_swiftEmptyDictionarySingleton, a2);
  if ((_BYTE)v21 == 0xFF)
  {
    uint64_t v50 = a7;
    v51._uint64_t countAndFlagsBits = a4;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
          + 2LL * *(void *)(v25 + 72),
            *(unsigned __int8 *)(v25 + 80) | 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    Swift::String v58 = (void *)type metadata accessor for ServerDataCacheService();
    v57[0] = a3;
    id v27 = (id)AMSLogKey(a3);
    uint64_t v49 = a6;
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      swift_bridgeObjectRetain(v31);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      Swift::String v33 = v58;
      uint64_t v34 = sub_10000D37C(v57, (uint64_t)v58);
      uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v55[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v36._uint64_t countAndFlagsBits = 5972026LL;
      v36._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t MetatypeMetadata = &type metadata for String;
      v55[0] = v29;
      v55[1] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v37._uint64_t countAndFlagsBits = 93LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v19);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v38._uint64_t countAndFlagsBits = 0LL;
      v38._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v39 = v58;
      id v40 = sub_10000D37C(v57, (uint64_t)v58);
      uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v41);
      v55[0] = v41;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v42._uint64_t countAndFlagsBits = 58LL;
      v42._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      LogMessage.init(stringInterpolation:)(v19);
    }

    sub_10000D3A0(v57);
    v57[0] = 0LL;
    v57[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(41LL);
    v43._object = (void *)0x8000000100177010LL;
    v43._uint64_t countAndFlagsBits = 0xD000000000000023LL;
    String.append(_:)(v43);
    String.append(_:)(v51);
    v44._uint64_t countAndFlagsBits = 8250LL;
    v44._object = (void *)0xE200000000000000LL;
    String.append(_:)(v44);
    v55[0] = a1;
    uint64_t v45 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    _print_unlocked<A, B>(_:_:)( v55,  v57,  v45,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    Swift::String v58 = &type metadata for String;
    static LogMessage.safe(_:)(v57);
    sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
    uint64_t v47 = static os_log_type_t.error.getter(v46);
    sub_1000BD1B0(v47, v26);
    swift_bridgeObjectRelease();
    swift_getErrorValue(a1, v54);
    id v48 = sub_10006B9D0(v52, v53);
    v49(0LL, v48);
  }

  else
  {
    uint64_t v22 = v20;
    unsigned __int8 v23 = v21;
    sub_10011BE7C( v20,  v21,  (uint64_t)a6,  a7,  a3,  (void *)v51._countAndFlagsBits,  a4,  (uint64_t)v51._object,  a9,  (uint64_t)v49,  v50);
    sub_1001225CC(v22, v23);
  }

uint64_t sub_10011D604( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = _Block_copy(v21);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v25 = v24;
  uint64_t v26 = sub_10000DDDC(v12, 24LL);
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = v22;
  id v27 = v18;
  id v28 = v20;
  a9(v27, v23, v25, v14, v10, v26);

  sub_10000DE74();
  return swift_release();
}

void sub_10011D6BC( void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v76 = v8;
  uint64_t ObjectType = swift_getObjectType(v76);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v65 = qword_1001CE480;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v15 = *(void *)(*(void *)(sub_10002C79C() - 8) + 72LL);
  sub_1000F0334();
  uint64_t v17 = sub_1000BD98C(v9 + 3 * v15, v16);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v92 = &type metadata for String;
  sub_100122F40(0xD00000000000004ALL, v46, v50, v54, v57, v60, v65, ObjectType, a7, v76, a5, a8, v88, v90, v91);
  sub_100122F18((uint64_t)&v90);
  uint64_t v92 = (void *)sub_10000DE08(v18, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  uint64_t v90 = (uint64_t)a1;
  id v61 = a1;
  static LogMessage.sensitive(_:)(&v90);
  sub_100122F18((uint64_t)&v90);
  sub_10012330C();
  _StringGuts.grow(_:)(29LL);
  sub_100123454( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v47,  v51,  v55,  v58,  (uint64_t)v61,  v66,  v69,  v73,  v77,  v81,  v85,  v89,  v90,  v91);
  uint64_t v90 = 0x3A65636976726573LL;
  uint64_t v91 = 0xE900000000000020LL;
  v27._uint64_t countAndFlagsBits = a2;
  v27._object = a3;
  String.append(_:)(v27);
  v28._object = (void *)0x8000000100176DA0LL;
  v28._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v28);
  v29._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v29);
  sub_100020AB8();
  uint64_t v92 = &type metadata for String;
  sub_100122F40(v90, v48, v52, v56, v59, v62, v67, v70, v74, v78, v82, v86, a6, v90, v91);
  sub_100122F18((uint64_t)&v90);
  uint64_t v31 = static os_log_type_t.info.getter(v30);
  sub_1000BD1B0(v31, v17);
  sub_10000DE74();
  if (a6 >= 6)
  {
    sub_100122F94();
    sub_100122F20( (uint64_t)"Fatal error",  v41,  v42,  v43,  0x8000000100176E00LL,  (uint64_t)"amsengagementd/ServerDataCacheService.swift",  v44,  v45,  v49,  v53);
    __break(1u);
  }

  else
  {
    sub_100122FB0();
    id v32 = v63;
    sub_1000C1178();
    uint64_t v34 = v33;
    uint64_t v64 = v33;
    sub_1000C3AB8();
    uint64_t v35 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1398, 112LL);
    v35[2] = a6;
    void v35[3] = v75;
    void v35[4] = v87;
    v35[5] = v79;
    v35[6] = v32;
    v35[7] = v34;
    _BYTE v35[8] = a2;
    v35[9] = a3;
    v35[10] = a4;
    v35[11] = v83;
    v35[12] = 5 - a6;
    v35[13] = v71;
    Swift::String v36 = (void *)sub_10000DDDC((uint64_t)&unk_1001B13C0, 112LL);
    v36[2] = a6;
    void v36[3] = v79;
    v36[4] = a2;
    id v36[5] = a3;
    v36[6] = v75;
    v36[7] = v87;
    v36[8] = v32;
    v36[9] = v64;
    v36[10] = a4;
    v36[11] = v83;
    v36[12] = 5 - a6;
    v36[13] = v71;
    id v37 = v32;
    sub_1000672B0(v87);
    id v38 = v79;
    sub_1000672B0(v64);
    sub_1000F0364((uint64_t)a3);
    sub_1000F0364(v83);
    id v39 = v37;
    id v40 = v38;
    sub_100062648(sub_100122378, v35, sub_1001223D0, v36);
    sub_10001A2D8();
    sub_1000292C4();
    sub_100020B68();
    sub_1000F0474();
    sub_100123104();
  }

uint64_t sub_10011DA1C( uint64_t *a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  HIDWORD(v30) = a2;
  uint64_t v28 = swift_allocObject(&unk_1001B13E8, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v28 + 24) = a4;
  uint64_t v18 = swift_allocObject(&unk_1001B1410, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  uint64_t v19 = swift_allocObject(&unk_1001B1438, 32LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  uint64_t v20 = (void *)swift_allocObject(&unk_1001B1460, 88LL, 7LL);
  void v20[2] = a7;
  uint64_t v20[3] = a8;
  v20[4] = a9;
  void v20[5] = a10;
  v20[6] = a11;
  v20[7] = a12;
  v20[8] = a5;
  v20[9] = a3;
  v20[10] = a4;
  id v21 = a5;
  swift_retain_n(a4, 2LL);
  id v22 = a6;
  id v23 = v21;
  id v24 = v22;
  swift_retain(a7);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a11);
  sub_10011AE2C( (uint64_t)a1,  HIDWORD(v30),  (uint64_t)sub_1000670AC,  v28,  (uint64_t)sub_1001223F0,  v18,  (uint64_t)sub_100122418,  v19,  (uint64_t)sub_100122470,  (uint64_t)v20,  (uint64_t)&qword_1001CA898,  (uint64_t)&unk_1001B1488,  (uint64_t)&unk_1001B14B0,  (uint64_t)sub_1001224A0,  (uint64_t)sub_1001224CC,  (uint64_t)&unk_1001B14D8,  (uint64_t)sub_1000667AC,  v26,  a10,  a12,  a8,  v28,  a1,  v30,  a13,  v31,  v32,  v33,  v34);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10011DC20, 0LL, 0LL);
}

uint64_t sub_10011DC20()
{
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = sub_100123468();
  *(void *)(v0 + 40) = sub_100121998((uint64_t)&off_1001A7698);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_10011DC64()
{
  return sub_1000676E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10011DCA0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = (void *)swift_allocObject(&unk_1001B1500, 64LL, 7LL);
  v14[2] = a6;
  v14[3] = a7;
  v14[4] = a8;
  void v14[5] = a9;
  v14[6] = a2;
  v14[7] = a3;
  uint64_t v15 = (void *)swift_allocObject(&unk_1001B1528, 56LL, 7LL);
  v15[2] = a7;
  v15[3] = a8;
  v15[4] = a9;
  v15[5] = a2;
  v15[6] = a3;
  id v16 = a7;
  swift_retain_n(a9, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  id v17 = v16;
  sub_100062648(sub_1001224F0, v14, sub_100122500, v15);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011DDA0( unsigned __int8 *a1, char a2, void *a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6, void *a7)
{
  v69[1] = a5;
  uint64_t v13 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v16 = *a1;
  if (v16 == 1 && (a2 & 1) == 0LL)
  {
    v69[0] = a4;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v35 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v36 = type metadata accessor for LogMessage(0LL);
    uint64_t v37 = swift_allocObject( v35,  ((*(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v36 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v36 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v75 = (void *)type metadata accessor for ServerDataCacheService();
    uint64_t v73 = a3;
    id v38 = (id)AMSLogKey(a3);
    if (v38)
    {
      id v39 = v38;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      uint64_t v42 = v41;

      swift_bridgeObjectRetain(v42);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v43._uint64_t countAndFlagsBits = 0LL;
      v43._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v43);
      uint64_t v44 = v75;
      uint64_t v45 = sub_10000D37C(&v73, (uint64_t)v75);
      uint64_t DynamicType = swift_getDynamicType(v45, v44, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v70 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v47._uint64_t countAndFlagsBits = 5972026LL;
      v47._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v70 = v40;
      uint64_t v71 = v42;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v48._uint64_t countAndFlagsBits = 93LL;
      v48._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v48);
      LogMessage.init(stringInterpolation:)(v15);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v58._uint64_t countAndFlagsBits = 0LL;
      v58._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      uint64_t v59 = v75;
      uint64_t v60 = sub_10000D37C(&v73, (uint64_t)v75);
      uint64_t v61 = swift_getDynamicType(v60, v59, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v61);
      uint64_t v70 = v61;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v62._uint64_t countAndFlagsBits = 58LL;
      v62._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v62);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v73);
    uint64_t v73 = 0LL;
    unint64_t v74 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(62LL);
    v63._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    v63._object = (void *)0x8000000100176F70LL;
    String.append(_:)(v63);
    v64._uint64_t countAndFlagsBits = a6;
    v64._object = a7;
    String.append(_:)(v64);
    v65._object = (void *)0x8000000100176FA0LL;
    v65._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v65);
    uint64_t v75 = &type metadata for String;
    static LogMessage.safe(_:)(&v73);
    sub_10000DA68((uint64_t)&v73, &qword_1001CAAD0);
    uint64_t v67 = static os_log_type_t.info.getter(v66);
    sub_1000BD1B0(v67, v37);
    swift_bridgeObjectRelease();
    uint64_t v18 = 0LL;
    a4 = (uint64_t (*)(void, void))v69[0];
  }

  else
  {
    uint64_t v18 = *((void *)a1 + 1);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v19 = qword_1001CE480;
    uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v21 = type metadata accessor for LogMessage(0LL);
    uint64_t v22 = swift_allocObject( v20,  ((*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v21 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v21 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v75 = (void *)type metadata accessor for ServerDataCacheService();
    uint64_t v73 = a3;
    id v23 = (id)AMSLogKey(a3);
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v69[0] = v19;
      uint64_t v26 = a4;
      uint64_t v28 = v27;

      swift_bridgeObjectRetain(v28);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v29._uint64_t countAndFlagsBits = 0LL;
      v29._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v29);
      uint64_t v30 = v75;
      uint64_t v31 = sub_10000D37C(&v73, (uint64_t)v75);
      uint64_t v32 = swift_getDynamicType(v31, v30, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v32);
      uint64_t v70 = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v33._uint64_t countAndFlagsBits = 5972026LL;
      v33._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v70 = v25;
      uint64_t v71 = v28;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v34._uint64_t countAndFlagsBits = 93LL;
      v34._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      LogMessage.init(stringInterpolation:)(v15);
      a4 = v26;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v49._uint64_t countAndFlagsBits = 0LL;
      v49._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v49);
      uint64_t v50 = v75;
      uint64_t v51 = sub_10000D37C(&v73, (uint64_t)v75);
      uint64_t v52 = swift_getDynamicType(v51, v50, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v52);
      uint64_t v70 = v52;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v70);
      sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
      v53._uint64_t countAndFlagsBits = 58LL;
      v53._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      LogMessage.init(stringInterpolation:)(v15);
    }

    sub_10000D3A0(&v73);
    uint64_t v73 = 0LL;
    unint64_t v74 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(45LL);
    v54._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
    v54._object = (void *)0x8000000100176F40LL;
    String.append(_:)(v54);
    LOBYTE(v70) = v16;
    uint64_t v71 = v18;
    uint64_t v55 = sub_10000D33C(&qword_1001CE4F8);
    _print_unlocked<A, B>(_:_:)( &v70,  &v73,  v55,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v75 = &type metadata for String;
    static LogMessage.safe(_:)(&v73);
    sub_10000DA68((uint64_t)&v73, &qword_1001CAAD0);
    uint64_t v57 = static os_log_type_t.info.getter(v56);
    sub_1000BD1B0(v57, v22);
    swift_bridgeObjectRelease();
  }

  return a4(v18, 0LL);
}

uint64_t sub_10011E3D4( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = a9;
  int v14 = *a1;
  int v15 = 1;
  int v16 = (uint64_t *)*((void *)a1 + 1);
  switch(a2)
  {
    case 0LL:
      int v15 = v14 ^ 1;
      goto LABEL_9;
    case 1LL:
      if ((v14 & 1) == 0) {
        goto LABEL_9;
      }
      id v17 = 0LL;
      int v15 = 0;
      goto LABEL_10;
    case 2LL:
    case 3LL:
      if ((v14 & 1) == 0) {
        goto LABEL_9;
      }
      id v17 = 0LL;
      int v15 = 2;
      goto LABEL_10;
    case 4LL:
      goto LABEL_9;
    case 5LL:
      if ((v14 & 1) != 0)
      {
        id v17 = 0LL;
      }

      else
      {
LABEL_9:
        int v25 = v15;
        uint64_t v18 = a8;
        uint64_t v19 = a7;
        uint64_t v20 = a6;
        uint64_t v26 = v16;
        uint64_t v21 = a5;
        uint64_t v22 = a4;
        uint64_t v23 = a3;
        swift_bridgeObjectRetain(v16);
        a3 = v23;
        a4 = v22;
        int v15 = v25;
        a5 = v21;
        id v17 = v26;
        uint64_t v13 = a9;
        a6 = v20;
        a7 = v19;
        a8 = v18;
      }

void sub_10011E530( void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void, id), uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  Swift::String v58 = a8;
  uint64_t v59 = a4;
  uint64_t v55 = a12;
  uint64_t v56 = a13;
  uint64_t v57 = a9;
  uint64_t v19 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = (uint64_t *)sub_10011B98C((uint64_t)a1, (uint64_t)_swiftEmptyArrayStorage, a2);
  if ((_BYTE)v23 == 0xFF)
  {
    uint64_t v57 = a5;
    Swift::String v58 = a1;
    uint64_t v56 = a7;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v28 = *(void *)(v27 + 72);
    uint64_t v29 = *(unsigned __int8 *)(v27 + 80);
    uint64_t v55 = v28;
    uint64_t v30 = swift_allocObject(v26, ((v29 + 32) & ~v29) + 2 * v28, v29 | 7);
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v66 = (void *)type metadata accessor for ServerDataCacheService();
    v65[0] = a3;
    id v31 = (id)AMSLogKey(a3);
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v35 = v34;

      swift_bridgeObjectRetain(v35);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v36._uint64_t countAndFlagsBits = 0LL;
      v36._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t v37 = v66;
      id v38 = sub_10000D37C(v65, (uint64_t)v66);
      uint64_t DynamicType = swift_getDynamicType(v38, v37, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v63[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_10000DA68((uint64_t)v63, &qword_1001CAAD0);
      v40._uint64_t countAndFlagsBits = 5972026LL;
      v40._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t MetatypeMetadata = &type metadata for String;
      v63[0] = v33;
      v63[1] = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_10000DA68((uint64_t)v63, &qword_1001CAAD0);
      v41._uint64_t countAndFlagsBits = 93LL;
      v41._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      LogMessage.init(stringInterpolation:)(v21);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v42._uint64_t countAndFlagsBits = 0LL;
      v42._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      Swift::String v43 = v66;
      uint64_t v44 = sub_10000D37C(v65, (uint64_t)v66);
      uint64_t v45 = swift_getDynamicType(v44, v43, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v45);
      v63[0] = v45;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v63);
      sub_10000DA68((uint64_t)v63, &qword_1001CAAD0);
      v46._uint64_t countAndFlagsBits = 58LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v21);
    }

    sub_10000D3A0(v65);
    v65[0] = 0LL;
    v65[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(53LL);
    v47._object = (void *)0x8000000100176E20LL;
    v47._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = v59;
    v48._object = v57;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = 8250LL;
    v49._object = (void *)0xE200000000000000LL;
    String.append(_:)(v49);
    uint64_t v50 = v58;
    v63[0] = v58;
    uint64_t v51 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    _print_unlocked<A, B>(_:_:)( v63,  v65,  v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v66 = &type metadata for String;
    static LogMessage.safe(_:)(v65);
    sub_10000DA68((uint64_t)v65, &qword_1001CAAD0);
    uint64_t v53 = static os_log_type_t.error.getter(v52);
    sub_1000BD1B0(v53, v30);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v50, v62);
    id v54 = sub_10006B9D0(v60, v61);
    a6(0LL, v54);
  }

  else
  {
    uint64_t v24 = (uint64_t)v22;
    unsigned __int8 v25 = v23;
    sub_10011DA1C(v22, v23, (uint64_t)a6, a7, a3, v58, (uint64_t)v57, v59, (uint64_t)a5, a10, a11, v55, v56);
    sub_1001225CC(v24, v25);
  }

void sub_10011EA68(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_10000D33C(&qword_1001C8E58);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10011EAF0( uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  HIDWORD(v2sub_10000D3A0(v0 + 9) = a2;
  uint64_t v16 = swift_allocObject(&unk_1001B1B90, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v16 + 24) = a4;
  uint64_t v17 = swift_allocObject(&unk_1001B1BB8, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v17 + 24) = a6;
  uint64_t v18 = swift_allocObject(&unk_1001B1BE0, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  uint64_t v19 = (void *)swift_allocObject(&unk_1001B1C08, 72LL, 7LL);
  v19[2] = a5;
  void v19[3] = a6;
  void v19[4] = a7;
  v19[5] = a8;
  v19[6] = a9;
  v19[7] = a3;
  v19[8] = a4;
  id v20 = a5;
  id v21 = a6;
  id v22 = v20;
  id v23 = v21;
  swift_retain_n(a4, 2LL);
  id v24 = v22;
  id v25 = v23;
  swift_bridgeObjectRetain(a7);
  swift_retain(a8);
  sub_10011AE2C( a1,  HIDWORD(v29),  (uint64_t)sub_1000670AC,  v16,  (uint64_t)sub_100122C9C,  v17,  (uint64_t)sub_100122CC4,  v18,  (uint64_t)sub_100122D14,  (uint64_t)v19,  (uint64_t)&qword_1001C8E58,  (uint64_t)&unk_1001B16B8,  (uint64_t)&unk_1001B16E0,  (uint64_t)sub_100122EAC,  (uint64_t)sub_100122E64,  (uint64_t)&unk_1001B1708,  (uint64_t)sub_100122E14,  v27,  a9,  a1,  v29,  a10,  v30,  v31,  v32,  v33,  v34,  v35,  v36);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011ECC8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = sub_100123274();
  uint64_t v11 = type metadata accessor for TaskPriority(v10);
  sub_10000DFB0(v4, v12, v13, v11);
  int v14 = (void *)sub_10000DDDC(a3, 48LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = a1;
  void v14[5] = a2;
  id v15 = a1;
  id v16 = a2;
  sub_100116BA0(v4, a4, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_10011ED68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_10011ED80, 0LL, 0LL);
}

uint64_t sub_10011ED80()
{
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = sub_100123468();
  *(void *)(v0 + 40) = sub_100121998((uint64_t)&off_1001A76F8);
  sub_1000D6DB0();
  return sub_10000DD48();
}

void sub_10011EDC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  sub_10000DCFC();
  v13[4] = a1;
  v13[5] = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  v13[2] = sub_100116CD8;
  v13[3] = a6;
  uint64_t v12 = _Block_copy(v13);
  swift_retain(a2);
  sub_10002FAF4();
  [a3 updateCacheForAccountDSID:a4 withCacheTypeIDs:isa completion:v12];
  _Block_release(v12);
}

uint64_t sub_10011EEA4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  int v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v15 = qword_1001CE480;
  uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v17 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v59 = v18;
  uint64_t v20 = swift_allocObject(v16, ((v19 + 32) & ~v19) + 2 * v18, v19 | 7);
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v66 = (void *)type metadata accessor for ServerDataCacheService();
  unint64_t v64 = (unint64_t)a1;
  id v21 = a1;
  id v22 = (id)AMSLogKey(v21);
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v57 = a2;
    uint64_t v58 = v15;
    id v25 = v21;
    uint64_t v26 = a7;
    uint64_t v27 = a6;
    uint64_t v28 = v24;
    uint64_t v30 = v29;

    swift_bridgeObjectRetain(v30);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v31._uint64_t countAndFlagsBits = 0LL;
    v31._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t v32 = v66;
    uint64_t v33 = sub_10000D37C(&v64, (uint64_t)v66);
    uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v62[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
    sub_10000DA68((uint64_t)v62, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 5972026LL;
    v35._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    uint64_t MetatypeMetadata = &type metadata for String;
    v62[0] = v28;
    v62[1] = v30;
    a6 = v27;
    a7 = v26;
    id v21 = v25;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
    sub_10000DA68((uint64_t)v62, &qword_1001CAAD0);
    v36._uint64_t countAndFlagsBits = 93LL;
    v36._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v36);
    LogMessage.init(stringInterpolation:)(v14);
    a2 = v57;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v37._uint64_t countAndFlagsBits = 0LL;
    v37._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    id v38 = v66;
    id v39 = sub_10000D37C(&v64, (uint64_t)v66);
    uint64_t v40 = swift_getDynamicType(v39, v38, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v40);
    v62[0] = v40;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v62);
    sub_10000DA68((uint64_t)v62, &qword_1001CAAD0);
    v41._uint64_t countAndFlagsBits = 58LL;
    v41._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    LogMessage.init(stringInterpolation:)(v14);
  }

  sub_10000D3A0(&v64);
  unint64_t v64 = 0LL;
  unint64_t v65 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  swift_bridgeObjectRelease();
  unint64_t v64 = 0xD00000000000001DLL;
  unint64_t v65 = 0x8000000100177470LL;
  id v42 = [a2 description];
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v45 = v44;

  v46._uint64_t countAndFlagsBits = v43;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 2108704LL;
  v47._object = (void *)0xE300000000000000LL;
  String.append(_:)(v47);
  v48._uint64_t countAndFlagsBits = Set.description.getter(a3, &type metadata for String, &protocol witness table for String);
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  uint64_t v66 = &type metadata for String;
  static LogMessage.safe(_:)(&v64);
  sub_10000DA68((uint64_t)&v64, &qword_1001CAAD0);
  uint64_t v50 = static os_log_type_t.info.getter(v49);
  sub_1000BD1B0(v50, v20);
  swift_bridgeObjectRelease();
  sub_1000C324C();
  uint64_t v51 = (void *)swift_allocObject(&unk_1001B1C30, 56LL, 7LL);
  v51[2] = v61;
  v51[3] = v21;
  v51[4] = a6;
  v51[5] = a7;
  v51[6] = a3;
  uint64_t v52 = (void *)swift_allocObject(&unk_1001B1C58, 48LL, 7LL);
  v52[2] = v21;
  void v52[3] = a6;
  v52[4] = a7;
  v52[5] = a3;
  id v53 = v21;
  swift_retain_n(a7, 2LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  id v54 = v53;
  sub_100062648(sub_100122D58, v51, sub_100122D88, v52);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011F304( unsigned __int8 *a1, char a2, void *a3, uint64_t (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  v67[1] = a5;
  uint64_t v11 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v14 = *a1;
  if (v14 == 1 && (a2 & 1) == 0LL)
  {
    v67[0] = a4;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v33 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v34 = type metadata accessor for LogMessage(0LL);
    uint64_t v35 = swift_allocObject( v33,  ((*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v34 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v34 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v73 = (void *)type metadata accessor for ServerDataCacheService();
    uint64_t v71 = a3;
    id v36 = (id)AMSLogKey(a3);
    if (v36)
    {
      Swift::String v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      uint64_t v40 = v39;

      swift_bridgeObjectRetain(v40);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v41._uint64_t countAndFlagsBits = 0LL;
      v41._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      id v42 = v73;
      uint64_t v43 = sub_10000D37C(&v71, (uint64_t)v73);
      uint64_t DynamicType = swift_getDynamicType(v43, v42, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v68 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v45._uint64_t countAndFlagsBits = 5972026LL;
      v45._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v68 = v38;
      uint64_t v69 = v40;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v46._uint64_t countAndFlagsBits = 93LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v13);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v56._uint64_t countAndFlagsBits = 0LL;
      v56._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      uint64_t v57 = v73;
      uint64_t v58 = sub_10000D37C(&v71, (uint64_t)v73);
      uint64_t v59 = swift_getDynamicType(v58, v57, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v59);
      uint64_t v68 = v59;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v60._uint64_t countAndFlagsBits = 58LL;
      v60._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v60);
      LogMessage.init(stringInterpolation:)(v13);
    }

    sub_10000D3A0(&v71);
    uint64_t v71 = 0LL;
    unint64_t v72 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(58LL);
    v61._uint64_t countAndFlagsBits = 0xD000000000000024LL;
    v61._object = (void *)0x80000001001774F0LL;
    String.append(_:)(v61);
    v62._uint64_t countAndFlagsBits = Set.description.getter(a6, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._object = (void *)0x8000000100176FA0LL;
    v63._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v63);
    uint64_t v73 = &type metadata for String;
    static LogMessage.safe(_:)(&v71);
    sub_10000DA68((uint64_t)&v71, &qword_1001CAAD0);
    uint64_t v65 = static os_log_type_t.info.getter(v64);
    sub_1000BD1B0(v65, v35);
    swift_bridgeObjectRelease();
    uint64_t v16 = 0LL;
    a4 = (uint64_t (*)(void, void))v67[0];
  }

  else
  {
    uint64_t v16 = *((void *)a1 + 1);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v17 = qword_1001CE480;
    uint64_t v18 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v19 = type metadata accessor for LogMessage(0LL);
    uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v19 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v19 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v73 = (void *)type metadata accessor for ServerDataCacheService();
    uint64_t v71 = a3;
    id v21 = (id)AMSLogKey(a3);
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v67[0] = v17;
      uint64_t v24 = a4;
      uint64_t v26 = v25;

      swift_bridgeObjectRetain(v26);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v27._uint64_t countAndFlagsBits = 0LL;
      v27._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      uint64_t v28 = v73;
      uint64_t v29 = sub_10000D37C(&v71, (uint64_t)v73);
      uint64_t v30 = swift_getDynamicType(v29, v28, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v30);
      uint64_t v68 = v30;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v31._uint64_t countAndFlagsBits = 5972026LL;
      v31._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v68 = v23;
      uint64_t v69 = v26;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v32._uint64_t countAndFlagsBits = 93LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v13);
      a4 = v24;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v47._uint64_t countAndFlagsBits = 0LL;
      v47._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      Swift::String v48 = v73;
      uint64_t v49 = sub_10000D37C(&v71, (uint64_t)v73);
      uint64_t v50 = swift_getDynamicType(v49, v48, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v50);
      uint64_t v68 = v50;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v68);
      sub_10000DA68((uint64_t)&v68, &qword_1001CAAD0);
      v51._uint64_t countAndFlagsBits = 58LL;
      v51._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v51);
      LogMessage.init(stringInterpolation:)(v13);
    }

    sub_10000D3A0(&v71);
    uint64_t v71 = 0LL;
    unint64_t v72 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(42LL);
    v52._uint64_t countAndFlagsBits = 0xD000000000000028LL;
    v52._object = (void *)0x80000001001774C0LL;
    String.append(_:)(v52);
    LOBYTE(v68) = v14;
    uint64_t v69 = v16;
    uint64_t v53 = sub_10000D33C(&qword_1001CE510);
    _print_unlocked<A, B>(_:_:)( &v68,  &v71,  v53,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v73 = &type metadata for String;
    static LogMessage.safe(_:)(&v71);
    sub_10000DA68((uint64_t)&v71, &qword_1001CAAD0);
    uint64_t v55 = static os_log_type_t.info.getter(v54);
    sub_1000BD1B0(v55, v20);
    swift_bridgeObjectRelease();
  }

  return a4(v16, 0LL);
}

void sub_10011F93C(uint64_t a1, void *a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a4;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = a1;
  swift_errorRetain(a1);
  uint64_t v12 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  if (swift_dynamicCast(&v73, &v74, v12, &type metadata for MercuryCacheError, 0LL) && v73 == 2)
  {
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v14 = type metadata accessor for LogMessage(0LL);
    uint64_t v15 = swift_allocObject( v13,  ((*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v14 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v14 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    unint64_t v72 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v70 = (unint64_t)a2;
    id v16 = (id)AMSLogKey(a2);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = a3;
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(v21);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v22._uint64_t countAndFlagsBits = 0LL;
      v22._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t v23 = v72;
      uint64_t v24 = sub_10000D37C(&v70, (uint64_t)v72);
      uint64_t DynamicType = swift_getDynamicType(v24, v23, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v67 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v26._uint64_t countAndFlagsBits = 5972026LL;
      v26._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v67 = v18;
      uint64_t v68 = v21;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v27._uint64_t countAndFlagsBits = 93LL;
      v27._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      LogMessage.init(stringInterpolation:)(v11);
      a3 = v19;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v53._uint64_t countAndFlagsBits = 0LL;
      v53._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      uint64_t v54 = v72;
      uint64_t v55 = sub_10000D37C(&v70, (uint64_t)v72);
      uint64_t v56 = swift_getDynamicType(v55, v54, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v56);
      uint64_t v67 = v56;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v57._uint64_t countAndFlagsBits = 58LL;
      v57._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      LogMessage.init(stringInterpolation:)(v11);
    }

    sub_10000D3A0(&v70);
    unint64_t v72 = &type metadata for String;
    unint64_t v70 = 0xD000000000000038LL;
    unint64_t v71 = 0x8000000100176F00LL;
    static LogMessage.safe(_:)(&v70);
    sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
    uint64_t v59 = static os_log_type_t.info.getter(v58);
    sub_1000BD1B0(v59, v15);
    swift_bridgeObjectRelease();
    a3(_swiftEmptyDictionarySingleton, 0LL);
    swift_errorRelease(v74);
  }

  else
  {
    uint64_t v61 = a5;
    Swift::String v62 = (void (*)(void, id))a3;
    swift_errorRelease(v74);
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    uint64_t v60 = qword_1001CE480;
    uint64_t v28 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v29 = type metadata accessor for LogMessage(0LL);
    uint64_t v30 = swift_allocObject( v28,  ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v29 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v29 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    unint64_t v72 = (void *)type metadata accessor for ServerDataCacheService();
    unint64_t v70 = (unint64_t)a2;
    id v31 = (id)AMSLogKey(a2);
    if (v31)
    {
      Swift::String v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v35 = v34;

      swift_bridgeObjectRetain(v35);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v36._uint64_t countAndFlagsBits = 0LL;
      v36._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      Swift::String v37 = v72;
      uint64_t v38 = sub_10000D37C(&v70, (uint64_t)v72);
      uint64_t v39 = swift_getDynamicType(v38, v37, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v39);
      uint64_t v67 = v39;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v40._uint64_t countAndFlagsBits = 5972026LL;
      v40._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v67 = v33;
      uint64_t v68 = v35;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v41._uint64_t countAndFlagsBits = 93LL;
      v41._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      LogMessage.init(stringInterpolation:)(v11);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v42._uint64_t countAndFlagsBits = 0LL;
      v42._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      uint64_t v43 = v72;
      uint64_t v44 = sub_10000D37C(&v70, (uint64_t)v72);
      uint64_t v45 = swift_getDynamicType(v44, v43, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v45);
      uint64_t v67 = v45;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v67);
      sub_10000DA68((uint64_t)&v67, &qword_1001CAAD0);
      v46._uint64_t countAndFlagsBits = 58LL;
      v46._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v46);
      LogMessage.init(stringInterpolation:)(v11);
    }

    sub_10000D3A0(&v70);
    unint64_t v70 = 0LL;
    unint64_t v71 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(53LL);
    v47._object = (void *)0x8000000100177490LL;
    v47._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
    String.append(_:)(v47);
    v48._uint64_t countAndFlagsBits = Set.description.getter(v61, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 8250LL;
    v49._object = (void *)0xE200000000000000LL;
    String.append(_:)(v49);
    uint64_t v67 = a1;
    _print_unlocked<A, B>(_:_:)( &v67,  &v70,  v12,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    unint64_t v72 = &type metadata for String;
    static LogMessage.safe(_:)(&v70);
    sub_10000DA68((uint64_t)&v70, &qword_1001CAAD0);
    uint64_t v51 = static os_log_type_t.error.getter(v50);
    sub_1000BD1B0(v51, v30);
    swift_bridgeObjectRelease();
    swift_getErrorValue(a1, v66);
    id v52 = sub_10006B9D0(v64, v65);
    v62(0LL, v52);
  }

uint64_t sub_10011FF98( unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v16 = *a1;
  uint64_t v17 = *((void *)a1 + 1);
  int v18 = 1;
  switch(a2)
  {
    case 0LL:
      int v18 = v16 ^ 1;
      goto LABEL_9;
    case 1LL:
      if ((v16 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v17 = 0LL;
      int v18 = 0;
      goto LABEL_10;
    case 2LL:
    case 3LL:
      if ((v16 & 1) == 0) {
        goto LABEL_9;
      }
      uint64_t v17 = 0LL;
      int v18 = 2;
      goto LABEL_10;
    case 4LL:
      goto LABEL_9;
    case 5LL:
      if ((v16 & 1) != 0) {
        uint64_t v17 = 0LL;
      }
      else {
LABEL_9:
      }
        swift_bridgeObjectRetain(*((void *)a1 + 1));
LABEL_10:
      sub_10011EAF0(v17, v18, a3, a4, a5, a6, a7, a8, a9, a10);
      uint64_t result = sub_1001225E0(v17, v18);
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000011LL,  0x8000000100176E00LL,  "amsengagementd/ServerDataCacheService.swift",  43LL,  2LL,  588LL,  0);
      __break(1u);
      break;
  }

  return result;
}

void sub_1001200D8( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void, id), uint64_t a6, void *a7, void (*a8)(void, id), uint64_t a9, uint64_t a10)
{
  id v52 = a7;
  Swift::String v53 = a8;
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v16);
  int v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10011B98C(a1, (uint64_t)_swiftEmptyDictionarySingleton, a2);
  if ((_BYTE)v20 == 0xFF)
  {
    uint64_t v50 = a6;
    uint64_t v51 = a4;
    Swift::String v53 = a5;
    if (qword_1001C80C8 != -1) {
      swift_once(&qword_1001C80C8, sub_100117524);
    }
    id v52 = (void *)qword_1001CE480;
    uint64_t v23 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v24 = type metadata accessor for LogMessage(0LL);
    uint64_t v25 = swift_allocObject( v23,  ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v24 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v24 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v60 = (void *)type metadata accessor for ServerDataCacheService();
    v59[0] = a3;
    id v26 = (id)AMSLogKey(a3);
    uint64_t v27 = a1;
    if (v26)
    {
      uint64_t v28 = v26;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v31 = v30;

      swift_bridgeObjectRetain(v31);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v32._uint64_t countAndFlagsBits = 0LL;
      v32._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      uint64_t v33 = v60;
      uint64_t v34 = sub_10000D37C(v59, (uint64_t)v60);
      uint64_t DynamicType = swift_getDynamicType(v34, v33, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v57[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
      v36._uint64_t countAndFlagsBits = 5972026LL;
      v36._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      uint64_t MetatypeMetadata = &type metadata for String;
      v57[0] = v29;
      v57[1] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
      v37._uint64_t countAndFlagsBits = 93LL;
      v37._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      LogMessage.init(stringInterpolation:)(v18);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v38._uint64_t countAndFlagsBits = 0LL;
      v38._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t v39 = v60;
      Swift::String v40 = sub_10000D37C(v59, (uint64_t)v60);
      uint64_t v41 = swift_getDynamicType(v40, v39, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v41);
      v57[0] = v41;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v57);
      sub_10000DA68((uint64_t)v57, &qword_1001CAAD0);
      v42._uint64_t countAndFlagsBits = 58LL;
      v42._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v42);
      LogMessage.init(stringInterpolation:)(v18);
    }

    sub_10000D3A0(v59);
    v59[0] = 0LL;
    v59[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(51LL);
    v43._object = (void *)0x8000000100177440LL;
    v43._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v43);
    v44._uint64_t countAndFlagsBits = Set.description.getter(v51, &type metadata for String, &protocol witness table for String);
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._uint64_t countAndFlagsBits = 8250LL;
    v45._object = (void *)0xE200000000000000LL;
    String.append(_:)(v45);
    v57[0] = v27;
    uint64_t v46 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    _print_unlocked<A, B>(_:_:)( v57,  v59,  v46,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v60 = &type metadata for String;
    static LogMessage.safe(_:)(v59);
    sub_10000DA68((uint64_t)v59, &qword_1001CAAD0);
    uint64_t v48 = static os_log_type_t.error.getter(v47);
    sub_1000BD1B0(v48, v25);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v27, v56);
    id v49 = sub_10006B9D0(v54, v55);
    v53(0LL, v49);
  }

  else
  {
    uint64_t v21 = v19;
    unsigned __int8 v22 = v20;
    sub_10011EAF0(v19, v20, (uint64_t)a5, a6, a3, v52, a4, (uint64_t)v53, a9, a10);
    sub_1001225CC(v21, v22);
  }

void sub_10012050C(void **a1, void *a2, void (**a3)(void, void, void))
{
  uint64_t v5 = swift_allocObject(&unk_1001B1320, 24LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = a3;
  _Block_copy(a3);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = type metadata accessor for LogMessage(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v21 = &type metadata for String;
  aBlock = (void **)0xD00000000000001CLL;
  unint64_t v19 = 0x8000000100176CF0LL;
  static LogMessage.safe(_:)(&aBlock);
  sub_10000DA68((uint64_t)&aBlock, &qword_1001CAAD0);
  uint64_t v21 = &type metadata for String;
  aBlock = (void **)0xD00000000000001CLL;
  unint64_t v19 = 0x8000000100176D10LL;
  static LogMessage.safe(_:)(&aBlock);
  sub_10000DA68((uint64_t)&aBlock, &qword_1001CAAD0);
  uint64_t v21 = (void *)sub_10000DAA0(0LL, (unint64_t *)&qword_1001C8C70, &OBJC_CLASS___ACAccount_ptr);
  aBlock = a1;
  uint64_t v9 = a1;
  static LogMessage.sensitive(_:)(&aBlock);
  sub_10000DA68((uint64_t)&aBlock, &qword_1001CAAD0);
  uint64_t v11 = static os_log_type_t.info.getter(v10);
  sub_1000BD1B0(v11, v8);
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v9, "ams_DSID");
  if (v12)
  {
    uint64_t v13 = v12;
    unsigned __int8 v22 = sub_100122E0C;
    uint64_t v23 = v5;
    aBlock = _NSConcreteStackBlock;
    unint64_t v19 = 1107296256LL;
    int v20 = sub_100116CD8;
    uint64_t v21 = &unk_1001B1338;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_retain(v5);
    swift_release();
    [a2 setUpCacheForAccountDSID:v13 completion:v14];
    _Block_release(v14);
    swift_release();
  }

  else
  {
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = (id)AMSError(111LL, v15, 0LL, 0LL);

    uint64_t v13 = (void *)_convertErrorToNSError(_:)(v16);
    ((void (**)(void, void, void *))a3)[2](a3, 0LL, v13);
    swift_release();
  }

  _Block_release(a3);
}

void sub_10012085C()
{
  uint64_t v3 = v0;
  uint64_t v23 = v4;
  uint64_t v24 = v5;
  uint64_t v7 = v6;
  sub_10000D33C(&qword_1001C8BD0);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_100029170();
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_100067688();
  uint64_t v11 = sub_1001234D8((v10 & ~v9) + 3 * v2, v9);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  id v26 = &type metadata for String;
  uint64_t v12 = sub_1001234C4(0xD000000000000027LL);
  static LogMessage.safe(_:)(v12);
  sub_100067788((uint64_t)v25);
  id v26 = &type metadata for String;
  v25[0] = 0xD000000000000019LL;
  v25[1] = 0x8000000100176C60LL;
  static LogMessage.safe(_:)(v25);
  sub_100067788((uint64_t)v25);
  id v26 = (void *)sub_10000DE08(v13, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  v25[0] = v7;
  id v14 = v7;
  static LogMessage.sensitive(_:)(v25);
  sub_100067788((uint64_t)v25);
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  sub_1000BD1B0(v16, v11);
  sub_100020AB8();
  uint64_t v17 = sub_100123290();
  sub_10000DFB0(v1, v18, v19, v17);
  int v20 = (void *)sub_10000DDDC((uint64_t)&unk_1001B12F8, 64LL);
  void v20[2] = 0LL;
  uint64_t v20[3] = 0LL;
  v20[4] = v14;
  void v20[5] = v3;
  v20[6] = v23;
  v20[7] = v24;
  id v21 = v14;
  id v22 = v3;
  sub_10002588C();
  sub_1001234A4(v1, (uint64_t)&unk_1001CE4E8);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_100120A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[56] = a6;
  v7[57] = a7;
  v7[54] = a4;
  v7[55] = a5;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  v7[58] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100120A7C, 0LL, 0LL);
}

uint64_t sub_100120A7C()
{
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  v0[59] = qword_1001DBB90;
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  v0[60] = qword_1001DBB88;
  sub_100122FB0();
  sub_1001232AC();
  sub_1000C1178();
  v0[61] = v1;
  sub_10000DE08(v1, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  v0[62] = sub_1000519E4();
  uint64_t v2 = sub_100123194();
  uint64_t v3 = sub_100122FC8(v2);
  v0[63] = v3;
  swift_defaultActor_initialize(v3);
  uint64_t v4 = sub_1001230C0((uint64_t)&_swiftEmptySetSingleton);
  v0[64] = sub_10000DDDC(v4, 16LL);
  sub_1001234F4();
  return sub_100122ECC(v5, v6, v7);
}

uint64_t sub_100120B70()
{
  uint64_t v1 = (void *)v0[62];
  sub_10012345C();
  v0[65] = sub_100123088( v2,  v3,  v4,  v5,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher,  (uint64_t)&off_1001AF268,  v8,  v9,  v10);

  sub_1000292C4();
  sub_10001A2D8();
  sub_10002FAF4();
  uint64_t v6 = (void *)swift_task_alloc(dword_1001CC61C);
  v0[66] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100120C20;
  return sub_1000D426C(0LL, 2);
}

uint64_t sub_100120C20()
{
  *(void *)(v1 + 536) = v0;
  swift_task_dealloc(v2);
  sub_100096178();
  return sub_10000DD48();
}

#error "100120E18: call analysis failed (funcsize=145)"
uint64_t sub_100120ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void, uint64_t);
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];
  Swift::String v62 = (void *)(v0 + 16);
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10002C79C() - 8);
  uint64_t v4 = (__n128 *)sub_10001059C( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                 + 3LL * *(void *)(v3 + 72),
                   *(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = sub_10012334C(v4, (__n128)xmmword_100164240);
  uint64_t v6 = sub_100123120(v5);
  uint64_t v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    sub_1001230E4((uint64_t)v7);
    sub_1001231AC();
    sub_10000DD9C();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v8 = (void *)(v0 + 16);
    sub_100122EB0(v62);
    uint64_t v9 = sub_1000258E8();
    sub_1001230F4(v9);
    sub_1000C8B8C(v2);
    sub_10000DC14();
    *(void *)(v0 + 328) = &type metadata for String;
    sub_1001232B4();
    sub_1000C8B8C(v1);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DCFC();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v8 = (void *)(v0 + 16);
    sub_100122EB0(v62);
    uint64_t v10 = sub_1000258E8();
    uint64_t v11 = sub_1001230CC(v10);
    sub_10012354C(v11, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  uint64_t v61 = *(void *)(v0 + 456);
  uint64_t v63 = *(void *)(v0 + 520);
  uint64_t v59 = *(void *)(v0 + 448);
  uint64_t v12 = *(void **)(v0 + 432);
  sub_10000D3A0(v8);
  _StringGuts.grow(_:)(27LL);
  swift_bridgeObjectRelease();
  v65[0] = 0xD000000000000019LL;
  v65[1] = 0x8000000100176C80LL;
  uint64_t v13 = sub_1000105E8((uint64_t)[v12 description]);
  uint64_t v15 = v14;

  v16._uint64_t countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  sub_10000DDF8();
  sub_100123150(v65[0]);
  sub_1000D6DF0();
  sub_1000C8B8C((uint64_t)v65);
  sub_10012323C(v17, v18, v19, v20, v21, v22, v23, v24, v0 + 424);
  uint64_t v25 = sub_100123540();
  sub_100123228((uint64_t)v25);
  sub_10009DF28();
  sub_1000C8B8C(v0 + 112);
  uint64_t v27 = static os_log_type_t.error.getter(v26);
  sub_10012339C(v27, v28, v29, v30, v31, v32, v33, v34, v52, v0 + 392, v0 + 416, v59, v61, v63, v64);
  uint64_t v35 = sub_100009020();
  sub_100123528(v35, v36, v37, v38, v39, v40, v41, v42, v53, v55, v57);
  Swift::String v43 = sub_100123498();
  sub_100123298((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, v54, v56, v58, v60);
  swift_release();

  sub_10009DEF0();
  swift_task_dealloc(*(void *)(v0 + 464));
  return sub_100122F78(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1001211F8()
{
  uint64_t v2 = v1;
  uint64_t v19 = v3;
  uint64_t v5 = v4;
  sub_10000D33C(&qword_1001C8BD0);
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_100029170();
  if (qword_1001C80C8 != -1) {
    swift_once(&qword_1001C80C8, sub_100117524);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = *(void *)(sub_10002C79C() - 8);
  uint64_t v8 = sub_1000BDC00( ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       + 3LL * *(void *)(v7 + 72),
         *(unsigned __int8 *)(v7 + 80));
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  id v21 = &type metadata for String;
  uint64_t v9 = sub_1001234C4(0xD000000000000029LL);
  static LogMessage.safe(_:)(v9);
  sub_1000819D8((uint64_t)v20);
  id v21 = &type metadata for String;
  v20[0] = 0xD00000000000001BLL;
  v20[1] = 0x8000000100176C10LL;
  static LogMessage.safe(_:)(v20);
  sub_1000819D8((uint64_t)v20);
  id v21 = (void *)sub_10000DE08(v10, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  v20[0] = v5;
  id v11 = v5;
  static LogMessage.sensitive(_:)(v20);
  sub_1000819D8((uint64_t)v20);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  sub_1000BD1B0(v13, v8);
  sub_10000DCFC();
  uint64_t v14 = sub_100123290();
  sub_10000DFB0(v0, v15, v16, v14);
  uint64_t v17 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1280, 56LL);
  void v17[2] = 0LL;
  uint64_t v17[3] = 0LL;
  v17[4] = v11;
  v17[5] = v19;
  v17[6] = v2;
  id v18 = v11;
  sub_10002588C();
  sub_1001234A4(v0, (uint64_t)&unk_1001CE4C0);
  swift_release();
  sub_10000DD84();
}

uint64_t sub_1001213C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[22] = a5;
  v6[23] = a6;
  v6[21] = a4;
  return swift_task_switch(sub_1001213E0, 0LL, 0LL);
}

uint64_t sub_1001213E0()
{
  if (qword_1001C8058 != -1) {
    swift_once(&qword_1001C8058, sub_1000D6E74);
  }
  if (qword_1001C8038 != -1) {
    swift_once(&qword_1001C8038, sub_1000D13EC);
  }
  uint64_t v1 = (void *)v0[21];
  uint64_t v2 = qword_1001DBB88;
  sub_100007CD0( &qword_1001CE4D8,  (uint64_t (*)(uint64_t))type metadata accessor for MercuryCacheMetadataStore,  (uint64_t)&unk_10016772C);
  uint64_t v4 = v3;
  uint64_t v5 = sub_100122FB0();
  id v6 = v1;
  sub_1000C1178();
  v0[5] = v5;
  v0[6] = &off_1001AEBE0;
  v0[2] = v7;
  sub_10000DE08(v7, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v8 = sub_1000519E4();
  v0[24] = v8;
  uint64_t v9 = sub_100123194();
  uint64_t v10 = sub_100122FC8(v9);
  swift_defaultActor_initialize(v10);
  *(void *)(v10 + 11sub_10000D3A0(v0 + 2) = &_swiftEmptySetSingleton;
  v0[10] = v9;
  v0[11] = &off_1001AF910;
  v0[7] = v10;
  uint64_t v11 = type metadata accessor for DynamicActivityTaskScheduler();
  uint64_t v12 = sub_10000DDDC(v11, 16LL);
  v0[15] = v11;
  v0[16] = &off_1001A9DE8;
  v0[12] = v12;
  uint64_t v13 = (void *)swift_task_alloc(dword_1001CC744);
  v0[25] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1001215A8;
  return sub_1000D6EEC( v0[21],  v2,  v4,  (uint64_t)(v0 + 2),  (uint64_t)v8,  (uint64_t)&type metadata for AMPAccountFinder,  (uint64_t)&off_1001A8360,  (uint64_t)&type metadata for MercuryCacheDataFetcher);
}

uint64_t sub_1001215A8()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void **)(*v1 + 192);
  uint64_t v3 = *(void *)(*v1 + 200);
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);

  sub_10012350C();
  sub_10000D3A0((void *)(v2 + 56));
  if (!v0) {
    sub_10000D3A0((void *)(v2 + 16));
  }
  sub_100096178();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_100121638()
{
  uint64_t v1 = *(void *)(v0 + 208);
  (*(void (**)(BOOL, void))(v0 + 176))(v1 == 0, 0LL);
  swift_errorRelease(0LL);
  swift_errorRelease(v1);
  return sub_1000676E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100121684()
{
  uint64_t v1 = *(void *)(v0 + 208);
  sub_10000D3A0((void *)(v0 + 16));
  swift_getErrorValue(v1, v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  swift_errorRetain(v1);
  id v4 = sub_10006B9D0(v2, v3);
  swift_errorRelease(v1);
  uint64_t v5 = *(void *)(v0 + 208);
  (*(void (**)(BOOL, id))(v0 + 176))(v5 == 0, v4);
  swift_errorRelease(v4);
  swift_errorRelease(v5);
  return sub_1000676E8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001217A4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001217C8(char a1, uint64_t a2)
{
}

uint64_t sub_1001217D0()
{
  uint64_t v0 = sub_100067600();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001217F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = swift_task_alloc(dword_1001CE4BC);
  uint64_t v10 = (void *)sub_100122F6C(v9);
  *uint64_t v10 = v2;
  v10[1] = sub_1000FDB88;
  return sub_1001213C4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10012186C(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000FD58C;
  return v6(a1);
}

uint64_t sub_1001218D0()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE4CC);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100123164(v1);
  return sub_1001230B0(v2, v3, v4, v5);
}

uint64_t sub_100121918()
{
  uint64_t v0 = sub_1001233F4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10012193C()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE4E4);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100123038(v1);
  return sub_100120A20(v2, v3, v4, v5, v6, v7, v8);
}

Swift::Int sub_100121998(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  sub_10000D33C(&qword_1001CFB50);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v27 = *(void *)(a1 + 16);
  if (!v27)
  {
LABEL_25:
    sub_100009020();
    return (Swift::Int)v4;
  }

  unint64_t v5 = 0LL;
  Swift::Int v6 = result + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    uint64_t v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v28, v4[5]);
    sub_10000DF10();
    String.hash(into:)(v28, v9, v8);
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = v4[6];
      uint64_t v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v9 && v17 == v8;
      if (v18 || (Swift::Int result = sub_1001232C0(*v16, v17), (result & 1) != 0))
      {
LABEL_11:
        Swift::Int result = sub_10000DE2C();
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        int v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        if (*v20 != v9 || v21 != v8)
        {
          Swift::Int result = sub_1001232C0(*v20, v21);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v6 + 8 * v1sub_10000D3A0(v0 + 2) = v14 | v13;
    uint64_t v23 = (void *)(v4[6] + 16 * v11);
    void *v23 = v9;
    v23[1] = v8;
    uint64_t v24 = v4[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_27;
    }
    v4[2] = v26;
LABEL_22:
    if (++v5 == v27) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100121B40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11)
{
  uint64_t v87 = v11;
  uint64_t v88 = v12;
  uint64_t v77 = v13;
  uint64_t v78 = v14;
  uint64_t v16 = v15;
  uint64_t v75 = v17;
  uint64_t v76 = v18;
  uint64_t v20 = v19;
  uint64_t v74 = v21;
  uint64_t v23 = v22;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v86[3] = sub_100122FB0();
  v86[4] = &off_1001AEBE0;
  v86[0] = v20;
  v85[3] = sub_100123194();
  v85[4] = &off_1001AF910;
  v85[0] = a9;
  v84[3] = type metadata accessor for DynamicActivityTaskScheduler();
  v84[4] = &off_1001A9DE8;
  v84[0] = a10;
  swift_beginAccess(a11 + 14, &v83, 0LL, 0LL);
  unint64_t v27 = a11[14];
  swift_retain(v20);
  swift_retain(a9);
  swift_retain(a10);
  id v28 = v23;
  swift_bridgeObjectRetain(v27);
  sub_100030984(v28, v27);
  uint64_t v30 = v29;

  sub_10001C258();
  if (!v30)
  {
    void v73[4] = v26;
    sub_100019EEC((uint64_t)v86, (uint64_t)&v81);
    sub_100019EEC((uint64_t)v85, (uint64_t)v80);
    sub_100019EEC((uint64_t)v84, (uint64_t)&v79);
    sub_100123490((uint64_t)&v81);
    v73[3] = v73;
    sub_1001232E0();
    __chkstk_darwin(v31);
    sub_100029170();
    sub_10006B9A0(0LL, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16));
    sub_100123490((uint64_t)v80);
    v73[2] = v73;
    sub_1001232E0();
    __chkstk_darwin(v34);
    sub_10000DE7C();
    Swift::String v37 = (uint64_t *)(v36 - v35);
    sub_10006B9A0(v36 - v35, v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16));
    sub_100123490((uint64_t)&v79);
    v73[1] = v73;
    sub_1001232E0();
    __chkstk_darwin(v40);
    sub_10000DE7C();
    Swift::String v43 = (uint64_t **)(v42 - v41);
    sub_10006B9A0(v42 - v41, v45, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16));
    uint64_t v46 = MEMORY[0];
    uint64_t v47 = *v37;
    uint64_t v48 = *v43;
    id v49 = v28;
    uint64_t v50 = v74;
    swift_retain(v74);
    uint64_t v51 = v75;
    swift_unknownObjectRetain(v75);
    uint64_t v30 = sub_100122000((uint64_t)v49, v50, v46, v51, v76, v77, v16, v78, v47, v48);
    sub_10000D3A0(&v79);
    sub_10000D3A0(v80);
    sub_10000D3A0(&v81);
    swift_beginAccess(a11 + 14, &v81, 33LL, 0LL);
    id v52 = v49;
    uint64_t v53 = swift_retain(v30);
    sub_1000341B0(v53, (uint64_t)v52);
    swift_endAccess(&v81);

    if (qword_1001C8050 != -1) {
      swift_once(&qword_1001C8050, sub_1000D6E2C);
    }
    uint64_t v78 = qword_1001CC710;
    sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100067688();
    uint64_t v56 = sub_10001059C((v55 & ~v54) + 3 * v16, v54);
    *(_OWORD *)(v56 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t updated = type metadata accessor for MercuryCacheUpdateCoordinatorProvider();
    uint64_t v81 = a11;
    uint64_t v57 = swift_retain(a11);
    id v58 = (id)AMSLogKey(v57);
    if (v58)
    {
      uint64_t v59 = v58;
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
      uint64_t v61 = v60;

      sub_10000DEB4();
      sub_10000DC34();
      sub_10000DC08();
      uint64_t v62 = updated;
      uint64_t v63 = sub_10000D37C(&v81, updated);
      sub_10000DC54((uint64_t)v63, v62);
      uint64_t v64 = sub_10003881C();
      sub_100123438(v64);
      sub_100123478();
      sub_10000DC14();
      v80[3] = &type metadata for String;
      v80[0] = v77;
      v80[1] = v61;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v80);
      sub_100123478();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DDF8();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v65 = updated;
      uint64_t v66 = sub_10000D37C(&v81, updated);
      sub_10000DC54((uint64_t)v66, v65);
      uint64_t v67 = sub_10003881C();
      sub_100123438(v67);
      sub_10000DA68((uint64_t)v80, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(&v81);
    uint64_t v68 = LogMessage.init(stringLiteral:)(0xD000000000000023LL);
    uint64_t updated = sub_10000DE08(v68, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v81 = (unint64_t *)v52;
    id v69 = v52;
    sub_1001234EC((uint64_t)&v81);
    sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
    uint64_t v71 = static os_log_type_t.info.getter(v70);
    sub_1000BD1B0(v71, v56);
    sub_10000DE74();
  }

  sub_100048738();
  sub_10000D3A0(v85);
  sub_10000D3A0(v84);
  return v30;
}

void *sub_100122000( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v16 = *a10;
  uint64_t v43 = type metadata accessor for MercuryCacheDatabase();
  uint64_t v44 = &off_1001AEBE0;
  v42[0] = a3;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateStateManager();
  uint64_t v41 = &off_1001AF910;
  v39[0] = a9;
  uint64_t v37 = v16;
  uint64_t v38 = &off_1001A9DE8;
  v36[0] = a10;
  uint64_t v17 = type metadata accessor for MercuryCacheUpdateCoordinator();
  uint64_t v18 = (void *)swift_allocObject(v17, 296LL, 15LL);
  uint64_t v19 = sub_1000665E8((uint64_t)v42, v43);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  uint64_t v23 = sub_1000665E8((uint64_t)v39, updated);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  uint64_t v27 = sub_1000665E8((uint64_t)v36, v37);
  __chkstk_darwin(v27);
  uint64_t v29 = (uint64_t *)((char *)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = sub_100122204(a1, a2, *v21, a4, a5, a6, v34, v35, *v25, *v29, v18);
  sub_10000D3A0(v36);
  sub_10000D3A0(v39);
  sub_10000D3A0(v42);
  return v31;
}

void *sub_100122204( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v18 = v17;
  uint64_t v29 = type metadata accessor for MercuryCacheDatabase();
  uint64_t v30 = &off_1001AEBE0;
  *(void *)&__int128 v28 = a3;
  uint64_t updated = type metadata accessor for MercuryCacheUpdateStateManager();
  uint64_t v27 = &off_1001AF910;
  *(void *)&__int128 v25 = a9;
  uint64_t v23 = type metadata accessor for DynamicActivityTaskScheduler();
  uint64_t v24 = &off_1001A9DE8;
  *(void *)&__int128 v22 = a10;
  swift_defaultActor_initialize(a11);
  a11[19] = a1;
  a11[26] = a2;
  a11[27] = v18;
  sub_100019F60(&v28, (uint64_t)(a11 + 21));
  a11[20] = a4;
  a11[28] = a5;
  a11[29] = a6;
  a11[30] = a7;
  a11[31] = a8;
  sub_100019F60(&v25, (uint64_t)(a11 + 32));
  sub_100019F60(&v22, (uint64_t)(a11 + 14));
  return a11;
}

uint64_t sub_10012231C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10012232C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100122334(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_10012233C()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_100122378()
{
  return sub_10011E3D4(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10, v11, v12, v13);
}

uint64_t sub_100122398()
{
  return swift_deallocObject(v0, 112LL, 7LL);
}

void sub_1001223D0()
{
}

uint64_t sub_1001223F0()
{
  return sub_10011ECC8(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1001B1578, (uint64_t)&unk_1001CE508);
}

void sub_100122418(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100122440()
{
  uint64_t v0 = sub_1001233C4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122470()
{
}

void sub_1001224A0(char a1)
{
  uint64_t v2 = *(void (**)(char *))(v1 + 16);
  char v3 = a1;
  v2(&v3);
  sub_100123470();
}

void sub_1001224CC(char a1)
{
}

uint64_t sub_1001224F0(uint64_t a1)
{
  return sub_1001226B8( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10011DDA0);
}

uint64_t sub_100122500(uint64_t a1)
{
  return sub_100122FD4(a1, (uint64_t)_swiftEmptyArrayStorage, 55LL, 49LL);
}

uint64_t sub_100122528()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE504);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122EF8(v1);
  return sub_10011DC08(v2, v3, v4, v5, v6);
}

void sub_10012257C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100122584()
{
  uint64_t v0 = sub_1001233D4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1001225B0()
{
}

void sub_1001225C0()
{
}

uint64_t sub_1001225CC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return sub_1001225E0(result, a2);
  }
  return result;
}

uint64_t sub_1001225E0(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_1001225F4()
{
  return sub_10011ECC8(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1001B17A8, (uint64_t)&unk_1001CE520);
}

void sub_10012261C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100122644()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100122674()
{
  return sub_10011C0B8( *(void **)(v0 + 16),  *(void **)(v0 + 24),  *(void *)(v0 + 32),  *(void **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72));
}

uint64_t sub_10012268C()
{
  uint64_t v0 = sub_1001233F4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001226AC(uint64_t a1)
{
  return sub_1001226B8( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_10011C4EC);
}

uint64_t sub_1001226B8( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1001226D0(uint64_t a1)
{
  return sub_100122FD4(a1, (uint64_t)_swiftEmptyDictionarySingleton, 43LL, 37LL);
}

uint64_t sub_1001226F8()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE51C);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122EF8(v1);
  return sub_10011C05C(v2, v3, v4, v5, v6);
}

uint64_t sub_10012274C()
{
  uint64_t v0 = sub_1001233D4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122774()
{
}

void sub_100122780()
{
  __n128 v0 = sub_1001233AC();
  sub_10011D038(v1, v9, v3, v4, v5, v6, v7, v8, v0.n128_i64[0], v0.n128_i64[1], v10, v2);
  sub_100123470();
}

uint64_t sub_1001227B0()
{
  uint64_t v0 = sub_1001233D4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_1001227D8()
{
}

void sub_1001227E4()
{
}

uint64_t sub_100122810()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10012282C()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10012284C()
{
  return sub_10011A178(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100122858()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122878(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100122884()
{
  uint64_t v0 = sub_1001233E4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001228A8()
{
  return sub_100122D20((uint64_t (*)(void, void, void, void, void, void, void))sub_10011A45C);
}

uint64_t sub_1001228B4()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1001228D0(unsigned __int8 *a1)
{
  return sub_10011A85C( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(uint64_t (**)(void, void))(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_1001228E0()
{
  uint64_t v0 = sub_100067600();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122900(uint64_t a1)
{
  return sub_100122FD4(a1, (uint64_t)_swiftEmptyDictionarySingleton, 44LL, 38LL);
}

#error "100122950: call analysis failed (funcsize=14)"
uint64_t sub_10012295C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  sub_10012318C();
  sub_100123184();
  sub_10012337C();

  uint64_t v1 = sub_1001233F4();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100122984()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE52C);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100123038(v1);
  return sub_10011A254(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001229E4()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE53C);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122FF4(v1);
  return sub_100119394(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100122A44()
{
  uint64_t v0 = sub_1001233E4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122A6C()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE54C);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122FF4(v1);
  return sub_100118790(v2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_100122AC8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100122AEC(void *a1, uint64_t a2)
{
}

uint64_t sub_100122AF4()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122B14(char a1, uint64_t a2)
{
  return sub_100117738(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100122B1C()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122B34()
{
}

uint64_t sub_100122B3C()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122B58()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE55C);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122EF8(v1);
  return sub_100117EFC(v2, v3, v4, v5, v6);
}

uint64_t sub_100122BAC()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE4CC);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100123164(v1);
  return sub_1001230B0(v2, v3, v4, v5);
}

uint64_t sub_100122BF4()
{
  uint64_t v0 = sub_1001233C4();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122C1C()
{
}

uint64_t sub_100122C38()
{
  sub_100123220();
  uint64_t v1 = sub_1001233C4();
  return swift_deallocObject(v1, v2, v3);
}

void sub_100122C64()
{
}

uint64_t sub_100122C80()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122C9C()
{
  return sub_10011ECC8(*(void **)(v0 + 16), *(void **)(v0 + 24), (uint64_t)&unk_1001B1CA8, (uint64_t)&unk_1001CE578);
}

void sub_100122CC4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100122CEC()
{
  uint64_t v0 = sub_1001233E4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122D14()
{
  return sub_100122D20((uint64_t (*)(void, void, void, void, void, void, void))sub_10011EEA4);
}

uint64_t sub_100122D20(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_100122D38()
{
  uint64_t v0 = sub_100067600();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122D58(unsigned __int8 *a1)
{
  return sub_10011F304( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(uint64_t (**)(void, void))(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_100122D68()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

void sub_100122D88(uint64_t a1)
{
}

uint64_t sub_100122D98()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100122DB8()
{
  uint64_t v0 = swift_task_alloc(dword_1001CE574);
  uint64_t v1 = (void *)sub_100122F6C(v0);
  uint64_t v2 = sub_100122EF8(v1);
  return sub_10011ED68(v2, v3, v4, v5, v6);
}

uint64_t sub_100122EB0(void *a1)
{
  uint64_t v2 = sub_10000D37C(a1, v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_100122ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_100122EDC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100122EF8(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100122F18(uint64_t a1)
{
}

uint64_t sub_100122F20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, a5, a6, 43LL, 2LL, a9, a10);
}

uint64_t sub_100122F34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, a2, a3, a4, a5, a6, 43LL, 2LL, a9, a10);
}

uint64_t sub_100122F40@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a14 = a1;
  a15 = v15;
  return static LogMessage.safe(_:)(&a14);
}

uint64_t sub_100122F50(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100122F6C(uint64_t result)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_100122F78(uint64_t (*a1)(void))
{
  return a1();
}

  ;
}

uint64_t sub_100122FB0()
{
  return type metadata accessor for MercuryCacheDatabase();
}

  ;
}

uint64_t sub_100122FC8(uint64_t a1)
{
  return swift_allocObject(a1, 120LL, 15LL);
}

uint64_t sub_100122FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100122924(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL);
}

uint64_t sub_100122FDC(uint64_t a1, char a2)
{
  return sub_1000D426C(a1, a2);
}

uint64_t sub_100122FF4(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_100123038(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

__n128 sub_100123060()
{
  return *(__n128 *)(v0 + 72);
}

void *sub_100123088( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11)
{
  return sub_100121B40(a1, a2, v12, v11, a5, a6, a7, a8, a9, a10, a11);
}

  ;
}

uint64_t sub_1001230B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_1001230C0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + 11sub_10000D3A0(v0 + 2) = a1;
  return type metadata accessor for DynamicActivityTaskScheduler();
}

uint64_t sub_1001230CC(uint64_t a1)
{
  *(void *)(v2 + 7sub_10000D3A0(v0 + 2) = a1;
  *(void *)(v2 + 48) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v3);
}

void sub_1001230DC()
{
}

uint64_t sub_1001230E4(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_1001230F4(uint64_t a1)
{
  *(void *)(v2 + 296) = a1;
  *(void *)(v2 + 27sub_10000D3A0(v0 + 2) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v3);
}

  ;
}

id sub_100123120(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  return v2;
}

uint64_t sub_100123130()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

void sub_100123138(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
}

void sub_100123150(uint64_t a1@<X8>)
{
  v3[13] = v2;
  v3[10] = a1;
  v3[11] = v1;
}

uint64_t sub_100123164(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void sub_100123184()
{
}

uint64_t sub_10012318C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_100123194()
{
  return type metadata accessor for MercuryCacheUpdateStateManager();
}

  ;
}

void sub_1001231AC()
{
}

id sub_1001231B8(uint64_t a1)
{
  *(void *)(v2 + 360) = a1;
  *(void *)(v2 + 336) = v1;
  return v1;
}

uint64_t sub_1001231C4(uint64_t a1, uint64_t a2)
{
  return sub_1000BD1B0(a1, a2);
}

void sub_1001231CC(Swift::String a1)
{
}

void sub_1001231D8(uint64_t a1, uint64_t *a2)
{
}

void sub_1001231E0()
{
}

void sub_1001231F4()
{
}

uint64_t sub_100123208(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 128) = v1;
  return AMSLogKey();
}

uint64_t sub_100123214(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_100123220()
{
  return swift_release(*(void *)(v0 + 64));
}

uint64_t sub_100123228(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v1, v2);
}

uint64_t sub_10012323C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_getErrorValue(v9, a9, v10);
}

  ;
}

uint64_t sub_10012326C()
{
  return swift_release(*(void *)(v0 + 72));
}

uint64_t sub_100123274()
{
  return 0LL;
}

uint64_t sub_100123290()
{
  return type metadata accessor for TaskPriority(0LL);
}

uint64_t sub_100123298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void, uint64_t))
{
  return a12(0LL, a1);
}

id sub_1001232AC()
{
  return v0;
}

uint64_t sub_1001232B4()
{
  *(void *)(v0 + 304) = v3;
  *(void *)(v0 + 31sub_10000D3A0(v0 + 2) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2);
}

uint64_t sub_1001232C0(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1001232D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100062648(a1, v3, a3, v4);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_10012331C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = a1;
  a13 = v13;
  return static LogMessage.safe(_:)(&a12);
}

uint64_t sub_10012332C@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a12 = a1;
  a13 = v13;
  return static LogMessage.safe(_:)(&a12);
}

  ;
}

uint64_t sub_10012334C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ServerDataCacheService();
}

uint64_t sub_10012335C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ServerDataCacheService();
}

uint64_t sub_10012336C(uint64_t a1)
{
  *(void *)(v2 - 120) = a1;
  *(void *)(v2 - 144) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 144);
}

uint64_t sub_10012337C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 48));
}

void sub_100123384( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  v14._uint64_t countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
}

void sub_100123394()
{
}

uint64_t sub_10012339C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return sub_1000BD1B0(a1, a15);
}

__n128 sub_1001233AC()
{
  return *(__n128 *)(v0 + 72);
}

uint64_t sub_1001233C4()
{
  return v0;
}

uint64_t sub_1001233D4()
{
  return v0;
}

uint64_t sub_1001233E4()
{
  return v0;
}

uint64_t sub_1001233F4()
{
  return v0;
}

  ;
}

uint64_t sub_10012341C@<X0>(uint64_t a1@<X8>)
{
  return swift_getObjectType(a1);
}

void sub_10012342C()
{
  *uint64_t v0 = *v1;
}

uint64_t sub_100123438(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  *(void *)(v1 + 120) = v2;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 120);
}

id sub_100123448(uint64_t a1)
{
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = a1;
  *(void *)(v2 - 136) = v1;
  return v1;
}

uint64_t sub_100123454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  return swift_bridgeObjectRelease(a22);
}

  ;
}

uint64_t sub_100123468()
{
  return sub_10011756C();
}

  ;
}

void sub_100123478()
{
}

uint64_t sub_100123484(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_100123490(uint64_t a1)
{
  return sub_1000665E8(a1, v1);
}

id sub_100123498()
{
  return sub_10006B9D0(*(void *)(v0 + 400), *(void *)(v0 + 408));
}

uint64_t sub_1001234A4(uint64_t a1, uint64_t a2)
{
  return sub_100116BA0(a1, a2, v2);
}

id sub_1001234AC()
{
  return v0;
}

uint64_t sub_1001234B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return static LogMessage.sensitive(_:)(va);
}

uint64_t sub_1001234C4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = a1;
  *(void *)(v2 - 104) = (v1 - 32) | 0x8000000000000000LL;
  return v2 - 112;
}

uint64_t sub_1001234D8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return swift_allocObject(v2, a1, a2 | 7);
}

uint64_t sub_1001234E4()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 56));
}

uint64_t sub_1001234EC(uint64_t a1)
{
  return static LogMessage.sensitive(_:)(a1);
}

  ;
}

void sub_100123500()
{
}

uint64_t sub_10012350C()
{
  return sub_10000D3A0(v0);
}

void sub_100123514()
{
}

uint64_t sub_100123520()
{
  return swift_release(*(void *)(v0 + 48));
}

uint64_t sub_100123528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return swift_getErrorValue(v11, a11, a10);
}

uint64_t sub_100123534(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

void *sub_100123540()
{
  *(void *)(v0 + 136) = v2;
  return sub_10000D63C(v1);
}

void sub_10012354C(uint64_t a1, uint64_t *a2)
{
}

void sub_100123554(uint64_t a1, uint64_t *a2)
{
}

void sub_10012355C()
{
}

  ;
}

uint64_t type metadata accessor for SetupAssistantObserver()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd22SetupAssistantObserver);
}

uint64_t sub_10012359C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v86 = a1;
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  sub_10004895C();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v8 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v8);
  sub_10004895C();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  Swift::String v14 = (char *)v85 - v13;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v87 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_10004895C();
  uint64_t v18 = v16 - v17;
  uint64_t v20 = __chkstk_darwin(v19);
  __int128 v22 = (char *)v85 - v21;
  int v23 = *(unsigned __int8 *)(v1 + 88);
  uint64_t v88 = v20;
  if (v23)
  {
    if (v23 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    unint64_t v24 = 0xEF636E7953746867LL;
    uint64_t v25 = 0x696577746867696CLL;
  }

  else
  {
    unint64_t v24 = 0xE700000000000000LL;
    uint64_t v25 = 0x65756575716E65LL;
  }

  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, 1668184435LL, 0xE400000000000000LL, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v15 = v88;
  if ((v26 & 1) == 0)
  {
    if (qword_1001C7F90 != -1) {
      swift_once(&qword_1001C7F90, sub_1000BD3BC);
    }
    uint64_t v27 = qword_1001DBB10;
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v28 = *(void *)(sub_10000DC98() - 8);
    uint64_t v29 = sub_10000DCF0( ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
          + 2LL * *(void *)(v28 + 72),
            *(unsigned __int8 *)(v28 + 80));
    *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v30 = sub_1001256E8();
    id v31 = (id)AMSLogKey(v30);
    if (v31)
    {
      uint64_t v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      uint64_t v86 = v27;
      uint64_t v35 = v34;

      swift_bridgeObjectRetain(v35);
      sub_10000DC34();
      sub_10000DC08();
      sub_10010A634();
      uint64_t v36 = sub_1000258E8();
      sub_1001256CC(v36);
      sub_1001256DC();
      sub_10000DC14();
      uint64_t v94 = &type metadata for String;
      uint64_t v92 = v33;
      uint64_t v93 = v35;
      sub_10001065C();
      sub_1001256DC();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_10010A634();
      uint64_t v57 = sub_1000258E8();
      uint64_t v58 = sub_1001256CC(v57);
      sub_10008BDD4(v58, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_100010670();
    uint64_t v59 = sub_1000105B4(0xD00000000000001FLL);
    uint64_t v60 = static os_log_type_t.info.getter(v59);
    uint64_t v61 = v29;
LABEL_24:
    sub_1000BD1B0(v60, v61);
    swift_bridgeObjectRelease();
    sub_10000D33C((uint64_t *)&unk_1001CE720);
    uint64_t v65 = v1 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_context;
    uint64_t v66 = type metadata accessor for JSStackContext(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 16))(v18, v65 + *(int *)(v66 + 40), v88);
    return Promise.__allocating_init(value:)(v18);
  }

uint64_t sub_100123E7C(void *__src, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_urlSession) = a3;
  *(void *)(v5 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_process) = a4;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  return v5;
}

CFPropertyListRef sub_100123EF8()
{
  CFPropertyListRef result = sub_100049E28();
  if (result)
  {
    CFPropertyListRef v3 = result;
    if (swift_dynamicCast( &v2,  &v3,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for String,  6LL)) {
      return (CFPropertyListRef)v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100123F7C(char a1)
{
  return 0xD0C0A0Bu >> (8 * a1);
}

uint64_t sub_100123F94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URLRequest(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v7, 0LL, 60.0);
  id v12 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v13 = type metadata accessor for JSStackContext(0LL);
  URL.path.getter(v13, v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v16 = [v12 fileExistsAtPath:v15];

  CFPropertyListRef v17 = sub_100123EF8();
  if (v18)
  {
    if (v16)
    {
      v19._object = (void *)0x800000010016D0C0LL;
      v19._uint64_t countAndFlagsBits = 0xD000000000000011LL;
      URLRequest.addValue(_:forHTTPHeaderField:)(*(Swift::String *)&v17, v19);
    }

    swift_bridgeObjectRelease();
  }

  id v20 = sub_100125174( a1,  *(void *)(v2 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_process),  *(void *)(v2 + 16));
  sub_10000D33C(&qword_1001CE758);
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v22 = [v20 requestByEncodingRequest:isa parameters:0];

  Promise<A>.init(_:)(v22);
  void v27[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v27[4] = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(v27);
  SyncTaskScheduler.init()(v23);
  uint64_t v24 = Promise.map<A>(on:_:)(v27, sub_1001253C4, 0LL, v8);

  swift_release();
  sub_10000D3A0(v27);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v24;
}

void sub_10012420C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URLRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  v5.value._uint64_t countAndFlagsBits = 0x797469746E656469LL;
  v5.value._object = (void *)0xE800000000000000LL;
  v6._uint64_t countAndFlagsBits = 0x452D747065636341LL;
  v6._object = (void *)0xEF676E69646F636ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v5, v6);
}

uint64_t sub_100124298()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_urlSession);
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  id v3 = [v1 dataTaskPromiseWithRequest:isa];

  return Promise<A>.init(_:)(v3);
}

uint64_t sub_100124314(void **a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_context;
  uint64_t v4 = type metadata accessor for JSStackContext(0LL);
  return Promise.resolve(_:)(v3 + *(int *)(v4 + 40));
}

uint64_t sub_10012439C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v102 = type metadata accessor for JetpackOutputWriter(0LL);
  __chkstk_darwin(v102);
  uint64_t v97 = (unint64_t *)((char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v101 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v88 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v109 = a1;
  uint64_t v15 = sub_100125664(a1);
  if (!v15)
  {
    __int128 v107 = 0u;
    __int128 v108 = 0u;
    goto LABEL_6;
  }

  uint64_t v16 = v15;
  strcpy((char *)v104, "Last-Modified");
  v104[7] = -4864;
  AnyHashable.init<A>(_:)(v104);
  sub_10003079C((uint64_t)&v105, v16, &v107);
  swift_bridgeObjectRelease();
  sub_10000E854((uint64_t)&v105);
  if (!*((void *)&v108 + 1))
  {
LABEL_6:
    uint64_t v19 = v4;
    sub_100019E6C((uint64_t)&v107, &qword_1001CAAD0);
    goto LABEL_8;
  }

  if ((swift_dynamicCast(&v105, &v107, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    uint64_t v17 = *((void *)&v105 + 1);
    uint64_t v18 = v105;
    goto LABEL_12;
  }

  uint64_t v19 = v4;
LABEL_8:
  sub_10000DAA0(0LL, &qword_1001CE750, &OBJC_CLASS___NSDateFormatter_ptr);
  id v20 = sub_1000496A8();
  static Date.now.getter(v20);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  id v22 = [v20 stringForObjectValue:isa];

  if (v22)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v17 = v23;
  }

  else
  {

    uint64_t v18 = 0LL;
    uint64_t v17 = 0LL;
  }

  uint64_t v4 = v19;
LABEL_12:
  unsigned __int8 v24 = *((_BYTE *)v2 + 25);
  unsigned __int8 v25 = sub_100123F7C(v24);
  if (v17)
  {
    swift_bridgeObjectRetain(v17);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v26 = 0LL;
  }

  type metadata accessor for Defaults();
  sub_10004A020(v26, v25);
  swift_unknownObjectRelease(v26);
  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v100 = qword_1001DBB10;
  uint64_t v27 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v28 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  unint64_t v29 = *(void *)(v28 + 72);
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  unint64_t v98 = v29;
  uint64_t v31 = swift_allocObject(v27, ((v30 + 32) & ~v30) + 2 * v29, v30 | 7);
  *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v99 = v31;
  *((void *)&v106 + setenv("JavaScriptCoreUseJIT", "0", 1) = v4;
  *(void *)&__int128 v105 = v2;
  uint64_t v32 = swift_retain(v2);
  id v33 = (id)AMSLogKey(v32);
  if (v33)
  {
    uint64_t v34 = v33;
    uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    swift_bridgeObjectRetain(v36);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v37._uint64_t countAndFlagsBits = 0LL;
    v37._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    uint64_t v38 = *((void *)&v106 + 1);
    uint64_t v39 = sub_10000D37C(&v105, *((uint64_t *)&v106 + 1));
    uint64_t DynamicType = swift_getDynamicType(v39, v38, 1LL);
    *((void *)&v108 + setenv("JavaScriptCoreUseJIT", "0", 1) = swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v107 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v107);
    sub_100019E6C((uint64_t)&v107, &qword_1001CAAD0);
    v41._uint64_t countAndFlagsBits = 5972026LL;
    v41._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    *((void *)&v108 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
    *(void *)&__int128 v107 = v96;
    *((void *)&v107 + setenv("JavaScriptCoreUseJIT", "0", 1) = v36;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v107);
    sub_100019E6C((uint64_t)&v107, &qword_1001CAAD0);
    v42._uint64_t countAndFlagsBits = 93LL;
    v42._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v42);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v43._uint64_t countAndFlagsBits = 0LL;
    v43._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v43);
    uint64_t v44 = *((void *)&v106 + 1);
    uint64_t v45 = sub_10000D37C(&v105, *((uint64_t *)&v106 + 1));
    uint64_t v46 = swift_getDynamicType(v45, v44, 1LL);
    *((void *)&v108 + setenv("JavaScriptCoreUseJIT", "0", 1) = swift_getMetatypeMetadata(v46);
    *(void *)&__int128 v107 = v46;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v107);
    sub_100019E6C((uint64_t)&v107, &qword_1001CAAD0);
    v47._uint64_t countAndFlagsBits = 58LL;
    v47._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v47);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&v105);
  uint64_t v48 = v101;
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(15LL, 1LL);
  v49._uint64_t countAndFlagsBits = 0x646F4D2D7473614CLL;
  v49._object = (void *)0xEF203A6465696669LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v49);
  if (v17)
  {
    *((void *)&v106 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
    *(void *)&__int128 v105 = v18;
    *((void *)&v105 + setenv("JavaScriptCoreUseJIT", "0", 1) = v17;
  }

  else
  {
    __int128 v105 = 0u;
    __int128 v106 = 0u;
  }

  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v105);
  sub_100019E6C((uint64_t)&v105, &qword_1001CAAD0);
  v50._uint64_t countAndFlagsBits = 0LL;
  v50._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v50);
  uint64_t v51 = LogMessage.init(stringInterpolation:)(v48);
  uint64_t v52 = static os_log_type_t.debug.getter(v51);
  sub_1000BD1B0(v52, v99);
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_100125664(v109);
  if (!v53)
  {
    __int128 v107 = 0u;
    __int128 v108 = 0u;
    goto LABEL_28;
  }

  uint64_t v54 = v53;
  *(void *)&__int128 v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSHTTPHeaderXAppleVersionNumber);
  *((void *)&v107 + setenv("JavaScriptCoreUseJIT", "0", 1) = v55;
  AnyHashable.init<A>(_:)(&v107);
  sub_10003079C((uint64_t)&v105, v54, &v107);
  swift_bridgeObjectRelease();
  sub_10000E854((uint64_t)&v105);
  if (!*((void *)&v108 + 1))
  {
LABEL_28:
    uint64_t v56 = v97;
    sub_100019E6C((uint64_t)&v107, &qword_1001CAAD0);
    goto LABEL_29;
  }

  uint64_t v56 = v97;
  if (swift_dynamicCast(&v105, &v107, (char *)&type metadata for Any + 8, &type metadata for String, 6LL))
  {
    uint64_t v91 = *((void *)&v105 + 1);
    uint64_t v89 = v105;
    goto LABEL_30;
  }

void sub_100124D80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v45 = a1;
  swift_errorRetain(a1);
  uint64_t v9 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  type metadata accessor for AMSError(0LL);
  uint64_t v11 = v10;
  if ((swift_dynamicCast(v43, &v45, v9, v10, 6LL) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v12 = (void *)v43[0];
  unint64_t v13 = sub_1001255C0();
  uint64_t v14 = _BridgedStoredNSError.userInfo.getter(v11, v13);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorUserInfoKeyStatusCode);
  sub_1000308B8(v15, v16, v14, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v46)
  {

    sub_100019E6C((uint64_t)&v45, &qword_1001CAAD0);
    goto LABEL_11;
  }

  if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0
    || v43[0] != 304LL)
  {

LABEL_11:
    Promise.reject(_:)(a1);
    return;
  }

  if (qword_1001C7F90 != -1) {
    swift_once(&qword_1001C7F90, sub_1000BD3BC);
  }
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  v42[1] = v19;
  uint64_t v21 = swift_allocObject(v17, ((v20 + 32) & ~v20) + 2 * v19, v20 | 7);
  *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v46 = v5;
  *(void *)&__int128 v45 = a3;
  uint64_t v22 = swift_retain(a3);
  id v23 = (id)AMSLogKey(v22);
  if (v23)
  {
    unsigned __int8 v24 = v23;
    v42[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    swift_bridgeObjectRetain(v26);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v27._uint64_t countAndFlagsBits = 0LL;
    v27._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = v46;
    unint64_t v29 = sub_10000D37C(&v45, v46);
    uint64_t DynamicType = swift_getDynamicType(v29, v28, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v43[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
    sub_100019E6C((uint64_t)v43, &qword_1001CAAD0);
    v31._uint64_t countAndFlagsBits = 5972026LL;
    v31._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    uint64_t MetatypeMetadata = &type metadata for String;
    v43[0] = v42[0];
    v43[1] = v26;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
    sub_100019E6C((uint64_t)v43, &qword_1001CAAD0);
    v32._uint64_t countAndFlagsBits = 93LL;
    v32._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v32);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v33._uint64_t countAndFlagsBits = 0LL;
    v33._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    uint64_t v34 = v46;
    uint64_t v35 = sub_10000D37C(&v45, v46);
    uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v36);
    v43[0] = v36;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v43);
    sub_100019E6C((uint64_t)v43, &qword_1001CAAD0);
    v37._uint64_t countAndFlagsBits = 58LL;
    v37._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(&v45);
  uint64_t v38 = LogMessage.init(stringLiteral:)(0xD00000000000003BLL);
  uint64_t v39 = static os_log_type_t.info.getter(v38);
  sub_1000BD1B0(v39, v21);
  swift_bridgeObjectRelease();
  id v40 = (char *)a3 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_context;
  uint64_t v41 = type metadata accessor for JSStackContext(0LL);
  Promise.resolve(_:)(&v40[*(int *)(v41 + 40)]);
}

id sub_100125174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v22[-v11 - 8];
  id v13 = [objc_allocWithZone(AMSURLRequestEncoder) initWithBag:a3];
  [v13 setAnisetteType:0];
  [v13 setMescalType:0];
  [v13 setAccount:0];
  [v13 setRequestEncoding:1];
  [v13 setDialogOptions:1];
  [v13 setClientInfo:a2];
  [v13 setDisableResponseDecoding:1];
  uint64_t v14 = sub_10000D33C((uint64_t *)&unk_1001C9C80);
  uint64_t inited = swift_initStackObject(v14, v22);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164220;
  __dst[0] = 0xD000000000000019LL;
  __dst[1] = 0x8000000100177670LL;
  uint64_t v16 = AnyHashable.init<A>(_:)(__dst);
  static Date.now.getter(v16);
  memcpy(__dst, (const void *)(v3 + 24), sizeof(__dst));
  sub_10001D030();
  double v17 = Date.timeIntervalSince(_:)(v10);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v10, v6);
  v18(v12, v6);
  *(void *)(inited + 96) = &type metadata for Double;
  *(double *)(inited + 7sub_10000D3A0(v0 + 2) = v17;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_100125600( v19,  v13,  (uint64_t)&type metadata for AnyHashable,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&protocol witness table for AnyHashable,  (SEL *)&selRef_setAdditionalMetrics_);
  return v13;
}

uint64_t sub_1001253C4(void *a1)
{
  return static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(*a1);
}

uint64_t sub_1001253EC()
{
  uint64_t v1 = *(void **)(v0 + 32);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_100019EC0(v0 + OBJC_IVAR____TtC14amsengagementd13SourceFetcher_context, type metadata accessor for JSStackContext);

  return v0;
}

uint64_t sub_10012546C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100125490()
{
  return type metadata accessor for SourceFetcher(0LL);
}

uint64_t type metadata accessor for SourceFetcher(uint64_t a1)
{
  uint64_t result = qword_1001CE670;
  if (!qword_1001CE670) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SourceFetcher);
  }
  return result;
}

uint64_t sub_1001254D0(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = &unk_100168AE8;
  uint64_t result = type metadata accessor for JSStackContext(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_100125564()
{
  unint64_t result = qword_1001CE730;
  if (!qword_1001CE730)
  {
    uint64_t v1 = sub_10000D820((uint64_t *)&unk_1001CF2E0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Promise<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001CE730);
  }

  return result;
}

uint64_t sub_1001255AC(void **a1)
{
  return sub_100124314(a1, *(void *)(v1 + 16));
}

void sub_1001255B8(uint64_t a1)
{
}

unint64_t sub_1001255C0()
{
  unint64_t result = qword_1001C87E8;
  if (!qword_1001C87E8)
  {
    type metadata accessor for AMSError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001640E8, v1);
    atomic_store(result, (unint64_t *)&qword_1001C87E8);
  }

  return result;
}

void sub_100125600(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  objc_msgSend(a2, *a6, isa);
}

uint64_t sub_100125664(void *a1)
{
  id v1 = [a1 responseHeaders];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_1001256CC(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 112);
}

void sub_1001256DC()
{
}

uint64_t sub_1001256E8()
{
  *(void *)(v2 - 136) = v1;
  *(void *)(v2 - 160) = v0;
  return swift_retain(v0);
}

void sub_1001256F8()
{
}

uint64_t SQLDatabase.__allocating_init(url:readonly:fileProtection:schemaBlock:corruptionBlock:)( uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    uint64_t v24 = a7;
    uint64_t v14 = a3;
    uint64_t v15 = URL.path.getter();
    uint64_t v23 = a5;
    uint64_t v17 = v16;
    uint64_t v18 = type metadata accessor for SQLDatabase();
    a1 = sub_10000DDDC(v18, 113LL);
    SQLDatabase.init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)(v15, v17, a2 & 1, v14, a4, v23, a6, v24);
  }

  else
  {
    unint64_t v20 = sub_100125820();
    sub_100020C48((uint64_t)&unk_1001B1FE0, v20);
    *uint64_t v21 = 4;
    sub_10008C040();
    sub_10006675C(a6, a7);
    sub_10006675C(a4, a5);
  }

  uint64_t v19 = type metadata accessor for URL(0LL);
  sub_10012AA68(v19);
  return a1;
}

unint64_t sub_100125820()
{
  unint64_t result = qword_1001CE760;
  if (!qword_1001CE760)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168F54, &unk_1001B1FE0);
    atomic_store(result, (unint64_t *)&qword_1001CE760);
  }

  return result;
}

void SQLDatabase.__allocating_init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)( uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t type metadata accessor for SQLDatabase()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd11SQLDatabase);
}

uint64_t sub_1001258F8()
{
  uint64_t v0 = sub_10000D33C(&qword_1001CE9D8);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t result = DispatchSpecificKey.init()();
  qword_1001DBBE0 = result;
  return result;
}

uint64_t sub_100125938()
{
  uint64_t v2 = sub_10012A9F0();
  if (v1 == v2 && v0 == v3)
  {
    uint64_t v5 = 0x400000LL;
LABEL_8:
    swift_bridgeObjectRelease(v0);
    sub_1000090CC();
    return v5;
  }

  sub_10012A9B4(v2, v3, v2);
  sub_10004A228();
  sub_1000090CC();
  if ((v1 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionComplete);
    uint64_t v7 = sub_10012A9F0();
    if (v1 == v7 && v0 == v8)
    {
      uint64_t v5 = 0x100000LL;
    }

    else
    {
      sub_10012A9B4(v7, v8, v7);
      sub_10004A228();
      sub_1000090CC();
      if ((v1 & 1) != 0) {
        return 0x100000LL;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionCompleteUnlessOpen);
      uint64_t v10 = sub_10012A9F0();
      if (v1 == v10 && v0 == v11)
      {
        uint64_t v5 = 0x200000LL;
      }

      else
      {
        sub_10012A9B4(v10, v11, v10);
        sub_10004A228();
        sub_1000090CC();
        if ((v1 & 1) != 0) {
          return 0x200000LL;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(NSFileProtectionCompleteUntilFirstUserAuthentication);
        uint64_t v13 = sub_10012A9F0();
        uint64_t v5 = 3145728LL;
        if (v1 != v13 || v0 != v14)
        {
          if ((sub_10012A9B4(v13, v14, v13) & 1) != 0) {
            uint64_t v5 = 3145728LL;
          }
          else {
            uint64_t v5 = 0LL;
          }
        }
      }
    }

    goto LABEL_8;
  }

  return 0x400000LL;
}

uint64_t SQLDatabase.databasePath.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t SQLDatabase.readonly.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

unint64_t sub_100125AB4()
{
  if (*(_BYTE *)(v0 + 32)) {
    return 0xD00000000000001ALL;
  }
  else {
    return 0xD00000000000001BLL;
  }
}

uint64_t SQLDatabase.__allocating_init(schemaBlock:corruptionBlock:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SQLDatabase();
  uint64_t v9 = sub_10000DDDC(v8, 113LL);
  SQLDatabase.init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)( 0x656D3A3A656C6966LL,  0xED00003A79726F6DLL,  0,  0LL,  a1,  a2,  a3,  a4);
  return v9;
}

void SQLDatabase.init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)( uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC64();
  __chkstk_darwin(v15);
  sub_10000DD5C();
  uint64_t v34 = v16;
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC64();
  __chkstk_darwin(v17);
  sub_10000DD5C();
  uint64_t v33 = v18;
  uint64_t v30 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v19 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_1000292E4();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10000DE8C();
  *(_BYTE *)(v11 + 56) = 0;
  *(void *)(v11 + 64) = 0LL;
  *(_BYTE *)(v11 + 11sub_10000D3A0(v0 + 2) = 0;
  *(void *)(v11 + 40) = a7;
  *(void *)(v11 + 48) = a8;
  *(void *)(v11 + 96) = a6;
  *(void *)(v11 + 104) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v11 + 3sub_10000D3A0(v0 + 2) = a3;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 80) = a4;
  *(void *)(v11 + 88) = a5;
  sub_100049B94();
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))( v9,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v20);
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))( v10,  enum case for DispatchQoS.QoSClass.default(_:),  v30);
  uint64_t v38 = a8;
  sub_100048404(a7, a8);
  sub_100048404(a5, a6);
  id v22 = a4;
  uint64_t v23 = static OS_dispatch_queue.global(qos:)(v10);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v10, v30);
  static DispatchQoS.unspecified.getter(v24);
  Swift::String v42 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v26 = v25;
  uint64_t v27 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_1000253B0((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v27, v28, v35, v26);
  sub_100048BA0();
  *(void *)(v11 + 7sub_10000D3A0(v0 + 2) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000018LL,  v29,  v33,  v34,  v9,  v23);
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  char v41 = 1;
  OS_dispatch_queue.setSpecific<A>(key:value:)(qword_1001DBBE0, &v41);
  sub_10006675C(a7, v38);
  sub_10006675C(a5, a6);

  sub_10000DD84();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLDatabase.execute(sql:parameters:)( Swift::String sql, Swift::OpaquePointer parameters)
{
  Swift::String v5 = sql;
  rawValue = parameters._rawValue;
  uint64_t v3 = sub_100048DB4();
  sub_100128C44(v3, v2, sub_100126034, (uint64_t)&v4);
}

uint64_t sub_100125E70(uint64_t a1, uint64_t a2, uint64_t a3, Swift::OpaquePointer a4)
{
  uint64_t v5 = v4;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  rawValue = a4._rawValue;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  sub_100049B94();
  uint64_t v10 = qword_1001C80D0;
  swift_retain(a1);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4._rawValue);
  if (v10 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  uint64_t v11 = static OS_dispatch_queue.getSpecific<A>(key:)(&v27, qword_1001DBBE0);
  if (v27 != 2 && (v27 & 1) != 0)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    uint64_t v14 = SQLDatabase.prepare(sql:)(a2, a3);
    if (!v5)
    {
      uint64_t v15 = v14;
      SQLStatement.bind(parameters:)(a4);
      if (v16)
      {
        uint64_t v18 = (void *)v15;
      }

      else
      {
        uint64_t v17 = SQLStatement.step()();
        swift_release(v15);
        uint64_t v18 = v17;
      }

      swift_release(v18);
    }

    objc_autoreleasePoolPop(v13);
    swift_bridgeObjectRelease(a4._rawValue);
    swift_bridgeObjectRelease(a3);
    return swift_release(a1);
  }

  else
  {
    __chkstk_darwin(v11);
    v19[2] = sub_10001BBE0;
    void v19[3] = &v20;
    OS_dispatch_queue.sync<A>(execute:)(sub_10012A974, v19, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease(a4._rawValue);
    swift_bridgeObjectRelease(a3);
    return swift_release(a1);
  }

uint64_t sub_100126034()
{
  v1._rawValue = *(void **)(v0 + 40);
  return sub_100125E70(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), v1);
}

uint64_t SQLDatabase.prepare(sql:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v2 + 64);
  if (v5)
  {
    uint64_t v11 = 0LL;
    sub_10002FAA0();
    sub_10000DEE0();
    sub_1001291BC(v4, &v11, v4, v5, a1, a2);
    uint64_t result = v11;
    if (v3)
    {
      return swift_release(v11);
    }

    else if (!v11)
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v9 = sub_100125820();
    sub_100020C48((uint64_t)&unk_1001B1FE0, v9);
    *uint64_t v10 = 0;
    return sub_10008C040();
  }

  return result;
}

void *sub_1001260F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for SQLStatement();
  uint64_t v12 = (void *)swift_allocObject(v11, 72LL, 7LL);
  swift_retain_n(a2, 2LL);
  swift_bridgeObjectRetain_n(a5, 2LL);
  uint64_t result = sub_10012B8C4(a2, a3, a4, a5, v12, a2, a4, a5);
  if (!v5)
  {
    uint64_t v14 = *a1;
    *a1 = (uint64_t)result;
    swift_release(v14);
    uint64_t v15 = sub_10000D33C(&qword_1001C9018);
    uint64_t result = (void *)swift_initStackObject(v15, v21);
    *((_OWORD *)result + setenv("JavaScriptCoreUseJIT", "0", 1) = xmmword_100164220;
    uint64_t v16 = *a1;
    if (*a1)
    {
      uint64_t v17 = result;
      uint64_t v18 = (uint64_t)(result + 4);
      swift_weakInit(v20, 0LL);
      swift_weakAssign(v20, v16);
      sub_10012A850((uint64_t)v20, v18);
      swift_beginAccess(a2 + 104, v20, 33LL, 0LL);
      uint64_t v19 = swift_bridgeObjectRetain(v17);
      sub_1000A1118(v19);
      swift_endAccess(v20);
      swift_setDeallocating(v17);
      return (void *)sub_10012A898();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void sub_100126250(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void SQLDatabase.query(sql:parameters:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[7] = a5;
  sub_100129A28((void (*)(void))sub_10001BBE0, (uint64_t)v5);
}

void static SQLDatabase.removeDatabase(path:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C7F88 != -1) {
    swift_once(&qword_1001C7F88, sub_1000BD368);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = sub_10000DC98();
  uint64_t v8 = sub_10000DCF0( ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL));
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  Swift::String v31 = (void *)sub_10000D33C(&qword_1001CE768);
  id v29 = v0;
  id v9 = (id)AMSLogKey(v31);
  if (v9)
  {
    sub_100048C54((uint64_t)v9);
    sub_10012AA2C();
    sub_100048A30();
    sub_10000DC34();
    sub_10000DC08();
    sub_100122EB0(&v29);
    uint64_t v10 = sub_1000258E8();
    sub_10012AA84(v10);
    sub_1000C8B8C((uint64_t)v28);
    sub_10000DC14();
    void v28[3] = &type metadata for String;
    v28[0] = v1;
    v28[1] = &type metadata for String;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v28);
    sub_1000C8B8C((uint64_t)v28);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease(&type metadata for String);
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_100122EB0(&v29);
    uint64_t v11 = sub_1000258E8();
    sub_10012AA84(v11);
    sub_10000DA68((uint64_t)v28, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v29);
  sub_10001A21C(19LL);
  sub_100048BA0();
  v12._uint64_t countAndFlagsBits = 0xD000000000000013LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v12);
  Swift::String v31 = &type metadata for String;
  id v29 = v5;
  uint64_t v30 = v3;
  sub_10000DF10();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v29);
  sub_10000DA68((uint64_t)&v29, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v13 = sub_10000DC5C();
  uint64_t v14 = static os_log_type_t.debug.getter(v13);
  sub_1000BD1B0(v14, v8);
  sub_100020AB8();
  id v15 = [objc_allocWithZone(NSFileManager) init];
  uint64_t v16 = sub_10000D33C(&qword_1001C8EA0);
  uint64_t inited = swift_initStackObject(v16, &v27);
  uint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = 0LL;
  *(void *)(inited + 40) = 0xE000000000000000LL;
  *(void *)(inited + 48) = 1835561773LL;
  *(void *)(inited + 56) = 0xE400000000000000LL;
  *(void *)(inited + 64) = 1818326829LL;
  *(void *)(inited + 7sub_10000D3A0(v0 + 2) = 0xE400000000000000LL;
  while (1)
  {
    char v20 = *(void **)(inited + v18 + 40);
    id v29 = v5;
    uint64_t v30 = v3;
    sub_10000DF10();
    sub_10000DEE0();
    v21._uint64_t countAndFlagsBits = v19;
    v21._object = v20;
    String.append(_:)(v21);
    sub_100009020();
    NSString v22 = String._bridgeToObjectiveC()();
    sub_100009020();
    id v29 = 0LL;
    LODWORD(v20) = [v15 removeItemAtPath:v22 error:&v29];

    id v23 = v29;
    if (!(_DWORD)v20)
    {
      id v25 = v29;
      sub_100020AB8();
      _convertNSErrorToError(_:)(v23);

      swift_willThrow();
      goto LABEL_12;
    }

    if (v18 == 32) {
      break;
    }
    uint64_t v19 = *(void *)(inited + v18 + 48);
    id v24 = v29;
    v18 += 16LL;
  }

  swift_setDeallocating(inited);
  id v26 = v23;
  sub_10012A58C();

LABEL_12:
  sub_100029188();
}

void static SQLDatabase.truncate(path:)()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C7F88 != -1) {
    swift_once(&qword_1001C7F88, sub_1000BD368);
  }
  sub_10000D33C(&qword_1001C9C70);
  sub_10000DC98();
  sub_10001A5F8();
  uint64_t v10 = sub_10000DCF0((v8 & ~v7) + 2 * v9, v7);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  id v29 = (void *)sub_10000D33C(&qword_1001CE768);
  v28[0] = v0;
  id v11 = (id)AMSLogKey(v29);
  if (v11)
  {
    sub_100048C54((uint64_t)v11);
    sub_10012AA2C();
    sub_100048A30();
    sub_10000DC34();
    sub_10000DC08();
    Swift::String v12 = v29;
    sub_100122EB0(v28);
    uint64_t v27 = (void *)sub_1000258E8();
    v26[0] = v12;
    sub_10000DF68();
    sub_1000C8B8C((uint64_t)v26);
    sub_10000DC14();
    uint64_t v27 = &type metadata for String;
    v26[0] = v1;
    v26[1] = &type metadata for String;
    sub_10000DF68();
    sub_1000C8B8C((uint64_t)v26);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease(&type metadata for String);
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    uint64_t v13 = v29;
    sub_100122EB0(v28);
    uint64_t v27 = (void *)sub_1000258E8();
    v26[0] = v13;
    sub_10000DF68();
    sub_10000DA68((uint64_t)v26, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v28);
  sub_10001A21C(21LL);
  sub_100048BA0();
  v14._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  id v29 = &type metadata for String;
  v28[0] = v5;
  v28[1] = v3;
  sub_10000DF10();
  sub_100029288();
  sub_10000DA68((uint64_t)v28, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v15 = sub_10000DC5C();
  uint64_t v16 = static os_log_type_t.debug.getter(v15);
  sub_1000BD1B0(v16, v10);
  sub_100020AB8();
  v28[0] = 0LL;
  NSString v17 = String._bridgeToObjectiveC()();
  uint64_t v18 = (const char *)[v17 fileSystemRepresentation];
  id v19 = v17;
  int v20 = sqlite3_open_v2(v18, v28, 2, 0LL);
  if (!sub_10012C658(v20))
  {
    LODWORD(v26[0]) = 129;
    Swift::String v21 = v28[0];
    int v22 = sqlite3_file_control(v28[0], 0LL, 101, v26);
    char v23 = sub_10012C658(v22);
    sqlite3_close(v21);
    if (v23)
    {
      unint64_t v24 = sub_100020550();
      sub_100020C48((uint64_t)&type metadata for SQLite3Status, v24);
      _BYTE *v25 = v23;
      sub_10008C040();
    }
  }

  sub_100029188();
}

void SQLDatabase.transaction(_:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v5 = sub_100048DB4();
  sub_100128C44(v5, v2, a1, a2);
}

void sub_100126970(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = *(sqlite3 **)(a1 + 64);
  if (!v3)
  {
    unint64_t v11 = sub_100125820();
    uint64_t v10 = swift_allocError(&unk_1001B1FE0, v11, 0LL, 0LL);
    *Swift::String v12 = 0;
    goto LABEL_18;
  }

  char v5 = *(_BYTE *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
    id v19 = a2;
    *(_BYTE *)(a1 + 11sub_10000D3A0(v0 + 2) = 1;
    if (*(_BYTE *)(a1 + 32)) {
      uint64_t v6 = 0xD00000000000001ALL;
    }
    else {
      uint64_t v6 = 0xD00000000000001BLL;
    }
    if (*(_BYTE *)(a1 + 32)) {
      uint64_t v7 = 0x8000000100177A30LL;
    }
    else {
      uint64_t v7 = 0x8000000100177A10LL;
    }
    uint64_t v8 = String.utf8CString.getter(v6, v7);
    int v9 = sqlite3_exec(v3, (const char *)(v8 + 32), 0LL, 0LL, 0LL);
    swift_release(v8);
    sub_100127164(v9, 0xD000000000000011LL, (void *)0x8000000100177A70LL, v6, v7);
    uint64_t v10 = swift_bridgeObjectRelease(v7);
    if (v2)
    {
      *(_BYTE *)(a1 + 11sub_10000D3A0(v0 + 2) = 0;
LABEL_18:
      swift_willThrow(v10);
      return;
    }

    a2 = v19;
  }

  uint64_t v10 = a2();
  if (v2) {
    uint64_t v13 = v2;
  }
  else {
    uint64_t v13 = 0LL;
  }
  if ((v5 & 1) == 0)
  {
    if (v13) {
      uint64_t v14 = 0x4B4341424C4C4F52LL;
    }
    else {
      uint64_t v14 = 0x3B54494D4D4F43LL;
    }
    if (v13) {
      uint64_t v15 = 0xE90000000000003BLL;
    }
    else {
      uint64_t v15 = 0xE700000000000000LL;
    }
    *(_BYTE *)(a1 + 11sub_10000D3A0(v0 + 2) = 0;
    uint64_t v16 = String.utf8CString.getter(v14, v15);
    int v17 = sqlite3_exec(v3, (const char *)(v16 + 32), 0LL, 0LL, 0LL);
    swift_release(v16);
    sub_100127164(v17, 0x6E61727420646E65LL, (void *)0xEF6E6F6974636173LL, v14, v15);
    swift_bridgeObjectRelease(v15);
    int v18 = sqlite3_exec(v3, "PRAGMA incremental_vacuum(256)", 0LL, 0LL, 0LL);
    sub_100127164(v18, 0xD000000000000010LL, (void *)0x8000000100177AB0LL, 0xD00000000000001ELL, 0x8000000100177A90LL);
  }

  if (v13) {
    goto LABEL_18;
  }
}

uint64_t sub_100126C38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v54 - v9;
  if (*(void *)(a1 + 64))
  {
    unint64_t v60 = *(sqlite3 **)(a1 + 64);
    if (qword_1001C7F88 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    v54[1] = qword_1001DBB08;
    uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v12 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v13 = *(void *)(v12 + 72);
    uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
    v54[0] = v13;
    uint64_t v15 = swift_allocObject(v11, ((v14 + 32) & ~v14) + 2 * v13, v14 | 7);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    unint64_t v59 = (void *)type metadata accessor for SQLDatabase();
    uint64_t v57 = a1;
    uint64_t v16 = swift_retain(a1);
    id v17 = (id)AMSLogKey(v16);
    if (v17)
    {
      int v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(v21);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v22._uint64_t countAndFlagsBits = 0LL;
      v22._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      char v23 = v59;
      unint64_t v24 = sub_10000D37C(&v57, (uint64_t)v59);
      uint64_t DynamicType = swift_getDynamicType(v24, v23, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v55[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v26._uint64_t countAndFlagsBits = 5972026LL;
      v26._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t MetatypeMetadata = &type metadata for String;
      v55[0] = v19;
      v55[1] = v21;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v27._uint64_t countAndFlagsBits = 93LL;
      v27._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      LogMessage.init(stringInterpolation:)(v10);
      swift_bridgeObjectRelease(v21);
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v28._uint64_t countAndFlagsBits = 0LL;
      v28._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      id v29 = v59;
      uint64_t v30 = sub_10000D37C(&v57, (uint64_t)v59);
      uint64_t v31 = swift_getDynamicType(v30, v29, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v55[0] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v55);
      sub_10000DA68((uint64_t)v55, &qword_1001CAAD0);
      v32._uint64_t countAndFlagsBits = 58LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v10);
    }

    sub_10000D3A0(&v57);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 2LL);
    v33._object = (void *)0x80000001001777D0LL;
    v33._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    BOOL v34 = *(_BYTE *)(a1 + 32) == 0;
    uint64_t v35 = 0x6E6F646165722820LL;
    if (!*(_BYTE *)(a1 + 32)) {
      uint64_t v35 = 0LL;
    }
    unint64_t v36 = 0xE000000000000000LL;
    unint64_t v59 = &type metadata for String;
    if (!v34) {
      unint64_t v36 = 0xEB0000000029796CLL;
    }
    uint64_t v57 = v35;
    unint64_t v58 = v36;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v57);
    sub_10000DA68((uint64_t)&v57, &qword_1001CAAD0);
    v37._uint64_t countAndFlagsBits = 8250LL;
    v37._object = (void *)0xE200000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    uint64_t v39 = *(void *)(a1 + 16);
    unint64_t v38 = *(void *)(a1 + 24);
    unint64_t v59 = &type metadata for String;
    uint64_t v57 = v39;
    unint64_t v58 = v38;
    swift_bridgeObjectRetain(v38);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v57);
    sub_10000DA68((uint64_t)&v57, &qword_1001CAAD0);
    v40._uint64_t countAndFlagsBits = 0LL;
    v40._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    uint64_t v41 = LogMessage.init(stringInterpolation:)(v7);
    uint64_t v42 = static os_log_type_t.debug.getter(v41);
    sub_1000BD1B0(v42, v15);
    swift_bridgeObjectRelease(v15);
    swift_beginAccess(a1 + 104, &v57, 1LL, 0LL);
    uint64_t v43 = *(void *)(a1 + 104);
    uint64_t v44 = *(void *)(v43 + 16);
    if (v44)
    {
      uint64_t v45 = v43 + 32;
      swift_bridgeObjectRetain(*(void *)(a1 + 104));
      do
      {
        sub_10012A614(v45, (uint64_t)v55);
        uint64_t Strong = swift_weakLoadStrong(v55);
        if (Strong)
        {
          uint64_t v47 = Strong;
          sub_10012C1A0();
          if (v2)
          {
            swift_release(v47);
            swift_errorRelease(v2);
            sub_10000DA68((uint64_t)v55, &qword_1001C9010);
            uint64_t v2 = 0LL;
          }

          else
          {
            sub_10000DA68((uint64_t)v55, &qword_1001C9010);
            swift_release(v47);
          }
        }

        else
        {
          sub_10000DA68((uint64_t)v55, &qword_1001C9010);
        }

        v45 += 8LL;
        --v44;
      }

      while (v44);
      swift_bridgeObjectRelease(v43);
      uint64_t v43 = *(void *)(a1 + 104);
    }

    *(void *)(a1 + 104) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v43);
    int v48 = sqlite3_close(v60);
    uint64_t result = sub_10012C658(v48);
    *(void *)(a1 + 64) = 0LL;
    if ((_BYTE)result)
    {
      char v49 = result;
      unint64_t v50 = sub_100020550();
      uint64_t v51 = swift_allocError(&type metadata for SQLite3Status, v50, 0LL, 0LL);
      *uint64_t v52 = v49;
      sub_100127304(0xD00000000000001FLL, 0x80000001001777F0LL, 0LL, 0LL, v51);
      swift_errorRelease(v51);
      swift_allocError(&type metadata for SQLite3Status, v50, 0LL, 0LL);
      *uint64_t v53 = v49;
      return swift_willThrow();
    }
  }

  return result;
}

void sub_100127164(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v12 = sub_10012C658(a1);
  int v13 = v12;
  if (v12 > 0x1Bu || ((1 << v12) & 0x8000081) == 0)
  {
    unsigned __int8 v15 = v12;
    _StringGuts.grow(_:)(23LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v16._uint64_t countAndFlagsBits = a2;
    v16._object = a3;
    String.append(_:)(v16);
    char v17 = sub_10012C658(a1);
    unint64_t v21 = sub_100020550();
    uint64_t v18 = sub_100020C48((uint64_t)&type metadata for SQLite3Status, v21);
    *uint64_t v19 = v17;
    sub_100127304(0xD000000000000015LL, 0x80000001001779F0LL, a4, a5, v18);
    swift_errorRelease(v18);
    sub_10001C258();
    if (v13 != 20)
    {
      if (v13 == 14) {
        goto LABEL_13;
      }
      if (v13 != 6) {
        goto LABEL_15;
      }
    }

    if ((*(_BYTE *)(v5 + 56) & 1) != 0)
    {
      sub_100127DC0();
      goto LABEL_14;
    }

    *(_BYTE *)(v5 + 56) = 1;
LABEL_13:
    sub_100127E28();
LABEL_14:
    if (v6) {
      return;
    }
LABEL_15:
    sub_100020C48((uint64_t)&type metadata for SQLite3Status, v21);
    unsigned __int8 *v20 = v15;
    sub_10008C040();
  }

uint64_t sub_100127304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = v5;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_10000DE8C();
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_1000292E4();
  Swift::String v16 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1DA0, 64LL);
  void v16[2] = a1;
  v16[3] = a2;
  void v16[4] = a5;
  void v16[5] = v8;
  void v16[6] = a3;
  v16[7] = a4;
  aBlock[4] = sub_10012A734;
  Swift::String v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  uint64_t aBlock[3] = &unk_1001B1DB8;
  char v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a5);
  swift_bridgeObjectRetain(a4);
  uint64_t v18 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v18);
  Swift::String v26 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = v19;
  uint64_t v21 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v14, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v6, v17);
  _Block_release(v17);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v6, v14);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v7, v24);
  return swift_release(v28);
}

const char *sub_1001274FC(uint64_t countAndFlagsBits, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v83._uint64_t countAndFlagsBits = countAndFlagsBits;
  v83._object = a2;
  if (a3)
  {
    v81._uint64_t countAndFlagsBits = a3;
    swift_errorRetain(a3);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a3);
    uint64_t v15 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    if ((swift_dynamicCast(&v78, &v81, v15, &type metadata for SQLite3Status, 6LL) & 1) == 0)
    {
      v81._uint64_t countAndFlagsBits = 0LL;
      v81._object = (void *)0xE000000000000000LL;
      v39._uint64_t countAndFlagsBits = 0x3A726F7272455B20LL;
      v39._object = (void *)0xE900000000000020LL;
      String.append(_:)(v39);
      uint64_t v78 = a3;
      _print_unlocked<A, B>(_:_:)( &v78,  &v81,  v15,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
LABEL_11:
      object = v81._object;
      String.append(_:)(v81);
      swift_bridgeObjectRelease(object);
      if (a6 && sub_10000635C())
      {
        v81._uint64_t countAndFlagsBits = 2108704LL;
        v81._object = (void *)0xE300000000000000LL;
        v41._uint64_t countAndFlagsBits = a5;
        v41._object = a6;
        String.append(_:)(v41);
        uint64_t v42 = v81._object;
        String.append(_:)(v81);
        swift_bridgeObjectRelease(v42);
      }

      v43._uint64_t countAndFlagsBits = 93LL;
      v43._object = (void *)0xE100000000000000LL;
      String.append(_:)(v43);
      if (qword_1001C7F88 != -1) {
        swift_once(&qword_1001C7F88, sub_1000BD368);
      }
      uint64_t v44 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v45 = type metadata accessor for LogMessage(0LL);
      uint64_t v46 = swift_allocObject( v44,  ((*(unsigned __int8 *)(*(void *)(v45 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v45 - 8) + 80LL))
            + 2LL * *(void *)(*(void *)(v45 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v45 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
      uint64_t v82 = (void *)type metadata accessor for SQLDatabase();
      v81._uint64_t countAndFlagsBits = a4;
      uint64_t v47 = swift_retain(a4);
      id v48 = (id)AMSLogKey(v47);
      if (v48)
      {
        char v49 = v48;
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        uint64_t v52 = v51;

        swift_bridgeObjectRetain(v52);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v53._uint64_t countAndFlagsBits = 0LL;
        v53._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v53);
        uint64_t v54 = v82;
        uint64_t v55 = sub_10000D37C(&v81, (uint64_t)v82);
        uint64_t DynamicType = swift_getDynamicType(v55, v54, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v78 = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
        sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
        v57._uint64_t countAndFlagsBits = 5972026LL;
        v57._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v57);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v78 = v50;
        uint64_t v79 = v52;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
        sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
        v58._uint64_t countAndFlagsBits = 93LL;
        v58._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v58);
        LogMessage.init(stringInterpolation:)(v14);
        swift_bridgeObjectRelease(v52);
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v59._uint64_t countAndFlagsBits = 0LL;
        v59._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v59);
        unint64_t v60 = v82;
        uint64_t v61 = sub_10000D37C(&v81, (uint64_t)v82);
        uint64_t v62 = swift_getDynamicType(v61, v60, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v78 = v62;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
        sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
        v63._uint64_t countAndFlagsBits = 58LL;
        v63._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v63);
        LogMessage.init(stringInterpolation:)(v14);
      }

      sub_10000D3A0(&v81);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(16LL, 1LL);
      v64._object = (void *)0x80000001001779D0LL;
      v64._uint64_t countAndFlagsBits = 0xD000000000000010LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v64);
      uint64_t v82 = &type metadata for String;
      Swift::String v81 = v83;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
      sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
      v65._uint64_t countAndFlagsBits = 0LL;
      v65._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v65);
      uint64_t v66 = LogMessage.init(stringInterpolation:)(v14);
      uint64_t v67 = static os_log_type_t.error.getter(v66);
      sub_1000BD1B0(v67, v46);
      uint64_t v68 = v46;
      goto LABEL_20;
    }

    v81._uint64_t countAndFlagsBits = 0x3A726F7272455B20LL;
    v81._object = (void *)0xE900000000000020LL;
    LODWORD(v78) = dword_100168B9C[(char)v78];
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    char v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = v81._object;
    String.append(_:)(v81);
    swift_bridgeObjectRelease(v18);
    uint64_t v19 = *(sqlite3 **)(a4 + 64);
    if (!v19)
    {
      uint64_t v68 = (uint64_t)v83._object;
LABEL_20:
      swift_bridgeObjectRelease(v68);
      return (const char *)swift_errorRelease(a3);
    }

    uint64_t result = sqlite3_errmsg(v19);
    if (result)
    {
      v21._uint64_t countAndFlagsBits = String.init(cString:)();
      uint64_t v22 = v21._object;
      v81._uint64_t countAndFlagsBits = 2108704LL;
      v81._object = (void *)0xE300000000000000LL;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(v22);
      goto LABEL_11;
    }

    __break(1u);
  }

  else
  {
    uint64_t v23 = qword_1001C7F88;
    swift_bridgeObjectRetain(a2);
    if (v23 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v25 = type metadata accessor for LogMessage(0LL);
    uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v25 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v82 = (void *)type metadata accessor for SQLDatabase();
    v81._uint64_t countAndFlagsBits = a4;
    uint64_t v27 = swift_retain(a4);
    id v28 = (id)AMSLogKey(v27);
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      uint64_t v32 = v31;

      swift_bridgeObjectRetain(v32);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v33._uint64_t countAndFlagsBits = 0LL;
      v33._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v33);
      BOOL v34 = v82;
      uint64_t v35 = sub_10000D37C(&v81, (uint64_t)v82);
      uint64_t v36 = swift_getDynamicType(v35, v34, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v78 = v36;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
      v37._uint64_t countAndFlagsBits = 5972026LL;
      v37._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v78 = v30;
      uint64_t v79 = v32;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
      v38._uint64_t countAndFlagsBits = 93LL;
      v38._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      LogMessage.init(stringInterpolation:)(v14);
      swift_bridgeObjectRelease(v32);
      a2 = v83._object;
      uint64_t countAndFlagsBits = v83._countAndFlagsBits;
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v69._uint64_t countAndFlagsBits = 0LL;
      v69._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v69);
      char v70 = v82;
      unint64_t v71 = sub_10000D37C(&v81, (uint64_t)v82);
      uint64_t v72 = swift_getDynamicType(v71, v70, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v78 = v72;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v78);
      sub_10000DA68((uint64_t)&v78, &qword_1001CAAD0);
      v73._uint64_t countAndFlagsBits = 58LL;
      v73._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v73);
      LogMessage.init(stringInterpolation:)(v14);
    }

    sub_10000D3A0(&v81);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(14LL, 1LL);
    v74._uint64_t countAndFlagsBits = 0x6573616261746144LL;
    v74._object = (void *)0xEE00203A676F6C20LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v74);
    uint64_t v82 = &type metadata for String;
    v81._uint64_t countAndFlagsBits = countAndFlagsBits;
    v81._object = a2;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v81);
    sub_10000DA68((uint64_t)&v81, &qword_1001CAAD0);
    v75._uint64_t countAndFlagsBits = 0LL;
    v75._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v75);
    uint64_t v76 = LogMessage.init(stringInterpolation:)(v14);
    uint64_t v77 = static os_log_type_t.default.getter(v76);
    sub_1000BD1B0(v77, v26);
    return (const char *)swift_bridgeObjectRelease(v26);
  }

  return result;
}

uint64_t sub_100127CAC( uint64_t a1, uint64_t a2, uint64_t a3, Swift::OpaquePointer a4, uint64_t (*a5)(void *), uint64_t a6)
{
  uint64_t result = SQLDatabase.prepare(sql:)(a2, a3);
  if (!v6)
  {
    uint64_t v11 = result;
    SQLStatement.bind(parameters:)(a4);
    if (!v12)
    {
      do
      {
        Swift::String v16 = SQLStatement.step()();
        uint64_t v13 = v16;
        if (!v16) {
          break;
        }
        if (!a5)
        {
          swift_release(v16);
          return swift_release(v11);
        }

        sub_10002FAEC();
        uint64_t v14 = objc_autoreleasePoolPush();
        char v15 = a5(v13);
        objc_autoreleasePoolPop(v14);
        sub_10006675C((uint64_t)a5, a6);
        swift_release(v13);
      }

      while ((v15 & 1) != 0);
    }

    return swift_release(v11);
  }

  return result;
}

void sub_100127DC0()
{
  uint64_t v2 = sub_100048DB4();
  sub_100128B6C(v2, v0);
  if (v1) {
    swift_errorRelease(v1);
  }
  sub_100128474();
  unint64_t v3 = sub_100020550();
  sub_100020C48((uint64_t)&type metadata for SQLite3Status, v3);
  *uint64_t v4 = 6;
  sub_10008C040();
}

uint64_t sub_100127E28()
{
  if (qword_1001C7F88 != -1) {
    swift_once(&qword_1001C7F88, sub_1000BD368);
  }
  uint64_t v1 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v2 = type metadata accessor for LogMessage(0LL);
  uint64_t v3 = swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v2 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v27 = (void *)type metadata accessor for SQLDatabase();
  v26[0] = v0;
  sub_10002FAA0();
  uint64_t v4 = static LogMessage.safe(_:)(v26);
  sub_10012AB08(v4, v5, v6, v7, v8, v9, v10, v11, v26[0]);
  LogMessage.init(stringLiteral:)(0xD000000000000023LL);
  uint64_t v13 = *(void *)(v0 + 16);
  uint64_t v12 = *(void *)(v0 + 24);
  uint64_t v27 = &type metadata for String;
  v26[0] = v13;
  v26[1] = v12;
  swift_bridgeObjectRetain(v12);
  uint64_t v14 = static LogMessage.safe(_:)(v26);
  sub_10012AB08(v14, v15, v16, v17, v18, v19, v20, v21, v26[0]);
  uint64_t v23 = static os_log_type_t.error.getter(v22);
  sub_1000BD1B0(v23, v3);
  swift_bridgeObjectRelease(v3);
  uint64_t v24 = sub_10002FAA0();
  return sub_1001294E4(v24, v0);
}

void sub_100127F84(uint64_t a1)
{
  uint64_t v3 = swift_retain(a1);
  sub_100128B6C(v3, v3);
  if (v1)
  {
    swift_errorRelease(v1);
  }

  else
  {
    uint64_t v4 = swift_retain(a1);
    sub_100128FD0(v4, a1);
    sub_100129D84();
  }

  sub_100127DC0();
}

void sub_100127FE8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v46 - v7;
  if (!*(void *)(a1 + 64))
  {
    if (qword_1001C7F88 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    uint64_t v9 = qword_1001DBB08;
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v12 = *(void *)(v11 + 72);
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = (v13 + 32) & ~v13;
    uint64_t v15 = swift_allocObject(v10, v14 + 2 * v12, v13 | 7);
    *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v52 = v15 + v14;
    uint64_t v51 = (void *)type metadata accessor for SQLDatabase();
    uint64_t v49 = a1;
    uint64_t v16 = swift_retain(a1);
    id v17 = (id)AMSLogKey(v16);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v46[1] = v9;
      uint64_t v21 = v20;

      swift_bridgeObjectRetain(v21);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v22._uint64_t countAndFlagsBits = 0LL;
      v22._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t v23 = v51;
      uint64_t v24 = sub_10000D37C(&v49, (uint64_t)v51);
      uint64_t DynamicType = swift_getDynamicType(v24, v23, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v47[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000DA68((uint64_t)v47, &qword_1001CAAD0);
      v26._uint64_t countAndFlagsBits = 5972026LL;
      v26._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v26);
      uint64_t MetatypeMetadata = &type metadata for String;
      v47[0] = v19;
      v47[1] = v21;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000DA68((uint64_t)v47, &qword_1001CAAD0);
      v27._uint64_t countAndFlagsBits = 93LL;
      v27._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v27);
      LogMessage.init(stringInterpolation:)(v8);
      swift_bridgeObjectRelease(v21);
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v28._uint64_t countAndFlagsBits = 0LL;
      v28._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      id v29 = v51;
      uint64_t v30 = sub_10000D37C(&v49, (uint64_t)v51);
      uint64_t v31 = swift_getDynamicType(v30, v29, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v47[0] = v31;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v47);
      sub_10000DA68((uint64_t)v47, &qword_1001CAAD0);
      v32._uint64_t countAndFlagsBits = 58LL;
      v32._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v32);
      LogMessage.init(stringInterpolation:)(v8);
    }

    sub_10000D3A0(&v49);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 2LL);
    v33._object = (void *)0x80000001001777B0LL;
    v33._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v33);
    BOOL v34 = *(_BYTE *)(a1 + 32) == 0;
    uint64_t v35 = 0x6E6F646165722820LL;
    if (!*(_BYTE *)(a1 + 32)) {
      uint64_t v35 = 0LL;
    }
    unint64_t v36 = 0xE000000000000000LL;
    uint64_t v51 = &type metadata for String;
    if (!v34) {
      unint64_t v36 = 0xEB0000000029796CLL;
    }
    uint64_t v49 = v35;
    unint64_t v50 = v36;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v49);
    sub_10000DA68((uint64_t)&v49, &qword_1001CAAD0);
    v37._uint64_t countAndFlagsBits = 8250LL;
    v37._object = (void *)0xE200000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v37);
    uint64_t v39 = *(void *)(a1 + 16);
    unint64_t v38 = *(void *)(a1 + 24);
    uint64_t v51 = &type metadata for String;
    uint64_t v49 = v39;
    unint64_t v50 = v38;
    swift_bridgeObjectRetain(v38);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v49);
    sub_10000DA68((uint64_t)&v49, &qword_1001CAAD0);
    v40._uint64_t countAndFlagsBits = 0LL;
    v40._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v40);
    uint64_t v41 = LogMessage.init(stringInterpolation:)(v6);
    uint64_t v42 = static os_log_type_t.debug.getter(v41);
    sub_1000BD1B0(v42, v15);
    swift_bridgeObjectRelease(v15);
    sub_10012A200();
    if (!v1) {
      goto LABEL_18;
    }
    uint64_t v49 = v1;
    swift_errorRetain(v1);
    uint64_t v44 = sub_10000D33C((uint64_t *)&unk_1001CE740);
    if ((swift_dynamicCast(v47, &v49, v44, &type metadata for SQLite3Status, 6LL) & 1) != 0
      && LOBYTE(v47[0]) <= 0x14u
      && ((1 << SLOBYTE(v47[0])) & 0x104040) != 0)
    {
      sub_100128474();
      swift_errorRelease(v1);
      sub_10012A200();
LABEL_18:
      *(_BYTE *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = v43;
      return;
    }

    swift_willThrow();
  }

void sub_100128474()
{
  uint64_t v4 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_10000DC74();
  uint64_t v6 = *(void (**)(uint64_t))(v1 + 40);
  uint64_t v7 = qword_1001C7F88;
  if (v6)
  {
    uint64_t v58 = *(void *)(v1 + 48);
    swift_retain(v58);
    if (v7 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    sub_10000D33C(&qword_1001C9C70);
    sub_10000DC98();
    sub_10009DF78();
    uint64_t v10 = sub_10000DCF0((v9 & ~v8) + 3 * v3, v8);
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v11 = type metadata accessor for SQLDatabase();
    uint64_t v12 = sub_10012A9D0(v11);
    id v13 = (id)AMSLogKey(v12);
    if (v13)
    {
      sub_100048C54((uint64_t)v13);
      uint64_t v15 = v14;

      swift_bridgeObjectRetain(v15);
      sub_10000DC34();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v16 = sub_1000258E8();
      sub_1000B8410(v16);
      sub_10012A9A8();
      sub_10000DC14();
      sub_10000DEA4();
      sub_10012A9A8();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v25 = sub_1000258E8();
      uint64_t v26 = sub_1000B8410(v25);
      sub_10006779C(v26, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_1000677AC();
    LogMessage.init(stringLiteral:)(0xD00000000000001BLL);
    uint64_t v28 = *(void *)(v1 + 16);
    uint64_t v27 = *(void *)(v1 + 24);
    Swift::String v57 = &type metadata for String;
    uint64_t v55 = v28;
    uint64_t v56 = v27;
    swift_bridgeObjectRetain(v27);
    uint64_t v29 = sub_10012AA5C();
    sub_1000677A4(v29, &qword_1001CAAD0);
    uint64_t v31 = static os_log_type_t.error.getter(v30);
    sub_1000BD1B0(v31, v10);
    uint64_t v32 = swift_bridgeObjectRelease(v10);
    v6(v32);
    sub_10006675C((uint64_t)v6, v58);
  }

  else if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    if (qword_1001C7F88 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = *(void *)(sub_10000DC98() - 8);
    uint64_t v18 = sub_10000DCF0( ((*(unsigned __int8 *)(v17 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))
          + 3LL * *(void *)(v17 + 72),
            *(unsigned __int8 *)(v17 + 80));
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v19 = type metadata accessor for SQLDatabase();
    uint64_t v20 = sub_10012A9D0(v19);
    id v21 = (id)AMSLogKey(v20);
    if (v21)
    {
      sub_100048C54((uint64_t)v21);
      uint64_t v23 = v22;

      swift_bridgeObjectRetain(v23);
      sub_10000DC34();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v24 = sub_1000258E8();
      sub_1000B8410(v24);
      sub_10012A9A8();
      sub_10000DC14();
      sub_10000DEA4();
      sub_10012A9A8();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease(v23);
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v39 = sub_1000258E8();
      uint64_t v40 = sub_1000B8410(v39);
      sub_10006779C(v40, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_1000677AC();
    sub_1000105B4(0xD000000000000021LL);
    uint64_t v42 = *(void *)(v1 + 16);
    uint64_t v41 = *(void *)(v1 + 24);
    Swift::String v57 = &type metadata for String;
    uint64_t v55 = v42;
    uint64_t v56 = v41;
    swift_bridgeObjectRetain(v41);
    uint64_t v43 = sub_10012AA5C();
    sub_1000677A4(v43, &qword_1001CAAD0);
    uint64_t v45 = static os_log_type_t.error.getter(v44);
    sub_1000BD1B0(v45, v18);
    swift_bridgeObjectRelease(v18);
  }

  else
  {
    if (qword_1001C7F88 != -1) {
      swift_once(&qword_1001C7F88, sub_1000BD368);
    }
    sub_10000D33C(&qword_1001C9C70);
    sub_10000DC98();
    sub_10009DF78();
    uint64_t v35 = sub_10000DCF0((v34 & ~v33) + 3 * v3, v33);
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v59 = type metadata accessor for SQLDatabase();
    uint64_t v36 = sub_10012A9D0(v59);
    id v37 = (id)AMSLogKey(v36);
    if (v37)
    {
      sub_100048C54((uint64_t)v37);
      sub_10012AA2C();
      sub_100048A30();
      sub_10000DC34();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v38 = sub_1000258E8();
      sub_1000B8410(v38);
      sub_10012A9A8();
      sub_10000DC14();
      sub_10000DEA4();
      sub_10012A9A8();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      swift_bridgeObjectRelease(0xD00000000000001BLL);
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      sub_100122EB0(&v55);
      uint64_t v46 = sub_1000258E8();
      uint64_t v47 = sub_1000B8410(v46);
      sub_10006779C(v47, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_1000677AC();
    sub_1000105B4(0xD00000000000002CLL);
    uint64_t v48 = *(void *)(v1 + 16);
    uint64_t v49 = *(void *)(v1 + 24);
    Swift::String v57 = &type metadata for String;
    uint64_t v55 = v48;
    uint64_t v56 = v49;
    sub_100048A30();
    uint64_t v50 = sub_10012AA5C();
    sub_1000677A4(v50, &qword_1001CAAD0);
    uint64_t v52 = static os_log_type_t.error.getter(v51);
    sub_1000BD1B0(v52, v35);
    sub_100020AB8();
    uint64_t v53 = sub_10002FAA0();
    uint64_t v54 = v4;
    sub_100128B6C(v53, v1);
    if (v4)
    {
      swift_errorRelease(v4);
      uint64_t v54 = 0LL;
    }

    static SQLDatabase.truncate(path:)();
    if (!v54) {
      static SQLDatabase.removeDatabase(path:)();
    }
  }

  sub_100029188();
}

uint64_t sub_100128A2C()
{
  uint64_t v2 = sub_10000DDDC((uint64_t)&unk_1001B1D78, 32LL);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(_BYTE *)(v2 + 24) = 1;
  uint64_t v9 = v0;
  unint64_t v10 = 0xD000000000000014LL;
  sub_100048B94();
  uint64_t v11 = v3;
  uint64_t v12 = _swiftEmptyArrayStorage;
  id v13 = sub_10012A6C4;
  uint64_t v14 = v4;
  sub_100129A28((void (*)(void))sub_10001BBE0, (uint64_t)&v8);
  if (v1) {
    return sub_10001A2D8();
  }
  swift_beginAccess(v2 + 16, v15, 0LL, 0LL);
  uint64_t v6 = *(void *)(v2 + 16);
  int v7 = *(unsigned __int8 *)(v2 + 24);
  sub_10001A2D8();
  if (v7) {
    return 0LL;
  }
  else {
    return v6;
  }
}

uint64_t sub_100128AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012AEE4(0LL);
  if (!v2)
  {
    uint64_t v6 = v4;
    char v7 = v5;
    swift_beginAccess(a2 + 16, v9, 1LL, 0LL);
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }

  return 0LL;
}

void sub_100128B6C(uint64_t a1, uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AA7C();
  sub_10012AAA8();
  if (!v4 && (v3 & 1) != 0)
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    sub_100126C38(a2);
    sub_10012AB14();
    sub_10001A2D8();
  }

  else
  {
    sub_10012AA40();
    __chkstk_darwin(v5);
    sub_10012A988();
    *(void *)(v6 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A5FC;
    *(void *)(v6 - 8) = a2;
    sub_10012AA14((uint64_t)sub_10012A974, v7, (uint64_t)&type metadata for ());
    sub_10001A2D8();
  }

  sub_10012AA50();
  sub_10012A998();
}

void sub_100128C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AAA0();
  sub_10012AAF4();
  if (!v7 && (v6 & 1) != 0)
  {
    uint64_t v11 = objc_autoreleasePoolPush();
    sub_100126970(a2, a3);
    sub_10012AB00();
    sub_10001A2D8();
  }

  else
  {
    sub_10012AAE8();
    __chkstk_darwin(v8);
    sub_10012A988();
    *(void *)(v9 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A958;
    *(void *)(v9 - 8) = &v12;
    sub_10012AA14((uint64_t)sub_10012A974, v10, (uint64_t)&type metadata for ());
    sub_10001A2D8();
  }

  sub_10012AA50();
  sub_10012A9E0();
}

void sub_100128D40()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v15[2] = v3;
  v15[3] = v5;
  v15[4] = v6;
  v15[5] = v1;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  static OS_dispatch_queue.getSpecific<A>(key:)(v16, qword_1001DBBE0);
  if (LOBYTE(v16[0]) != 2 && (v16[0] & 1) != 0)
  {
    objc_autoreleasePoolPush();
    sub_10012ACC4();
    uint64_t v10 = *(void *)(v4 + 32);
    if (v10)
    {
      Swift::String v11 = String.lowercased()();
      swift_bridgeObjectRetain(v10);
      uint64_t v12 = sub_100030B5C(v11._countAndFlagsBits, (uint64_t)v11._object, v10);
      char v14 = v13;
      sub_10001C258();
      swift_bridgeObjectRelease();
      if ((v14 & 1) == 0)
      {
        sub_10012B18C(v12, v16);
        if (v0)
        {
          sub_10012AB00();
          sub_10000DE2C();
          sub_10002FAF4();
          goto LABEL_15;
        }

        sub_10001E454((uint64_t)v16, v2);
      }
    }

    sub_10012AB00();
    sub_10002FAF4();
LABEL_14:
    sub_10000DE2C();
    goto LABEL_15;
  }

  sub_10012AAE8();
  __chkstk_darwin(v7);
  sub_10012A988();
  *(void *)(v8 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A7F8;
  *(void *)(v8 - 8) = v15;
  sub_10012AA20((uint64_t)sub_10012A974, v9, (uint64_t)&type metadata for ());
  if (!v0)
  {
    sub_10002FAF4();
    goto LABEL_14;
  }

  sub_10000DE2C();
  sub_10002FAF4();
LABEL_15:
  sub_100029188();
}

void sub_100128ED8(uint64_t a1, sqlite3_stmt *a2, uint64_t a3, _OWORD *a4)
{
  char v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AAA0();
  sub_10012AAF4();
  if (!v8 && (v7 & 1) != 0)
  {
    uint64_t v12 = objc_autoreleasePoolPush();
    sub_10012B25C(a2, a3, a4);
    objc_autoreleasePoolPop(v12);
  }

  else
  {
    sub_10012AAE8();
    __chkstk_darwin(v9);
    sub_10012A988();
    *(void *)(v10 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A814;
    *(void *)(v10 - 8) = &v13;
    sub_10012AA20((uint64_t)sub_10012A974, v11, (uint64_t)&type metadata for ());
  }

  sub_10012AA94();
  sub_10012A9E0();
}

void sub_100128FD0(uint64_t a1, uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AA7C();
  sub_10012AAA8();
  if (!v4 && (v3 & 1) != 0)
  {
    char v8 = objc_autoreleasePoolPush();
    sub_100127FE8(a2);
    sub_10012AB14();
    sub_10001A2D8();
  }

  else
  {
    sub_10012AA40();
    __chkstk_darwin(v5);
    sub_10012A988();
    *(void *)(v6 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A5C8;
    *(void *)(v6 - 8) = a2;
    sub_10012AA14((uint64_t)sub_10012A5E0, v7, (uint64_t)&type metadata for ());
    sub_10001A2D8();
  }

  sub_10012AA50();
  sub_10012A998();
}

void sub_1001290A8(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  uint64_t v13 = a2;
  char v14 = a3;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AA7C();
  sub_10012AAA8();
  if (!v7 && (v6 & 1) != 0)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    sub_10012AAB4();
    *(void *)(a2 + 56) = 0LL;
    uint64_t v11 = sqlite3_finalize(a3);
    (*(void (**)(uint64_t, unint64_t, unint64_t))(a2 + 16))( v11,  0xD000000000000012LL,  0x8000000100177A50LL);
    sub_10012AAD4();
    sub_10001A2D8();
  }

  else
  {
    __chkstk_darwin(v5);
    sub_10012A988();
    *(void *)(v8 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A7E0;
    *(void *)(v8 - 8) = &v12;
    sub_10012AA14((uint64_t)sub_10012A974, v9, (uint64_t)&type metadata for ());
    sub_10001A2D8();
  }

  sub_10012AA50();
  sub_10012A998();
}

uint64_t sub_1001291BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  sub_100049B94();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  char v12 = static OS_dispatch_queue.getSpecific<A>(key:)(&v22, qword_1001DBBE0);
  if (v22 != 2 && (v22 & 1) != 0)
  {
    char v14 = objc_autoreleasePoolPush();
    sub_1001260F8(a2, a3, a4, a5, a6);
    if (v6)
    {
      objc_autoreleasePoolPop(v14);
      swift_bridgeObjectRelease(a6);
      return swift_release(a3);
    }

    objc_autoreleasePoolPop(v14);
    swift_release(a3);
  }

  else
  {
    __chkstk_darwin(v12);
    v15[2] = sub_10012A830;
    v15[3] = &v16;
    OS_dispatch_queue.sync<A>(execute:)(sub_10012A974, v15, (char *)&type metadata for () + 8);
    if (v6)
    {
      swift_bridgeObjectRelease(a6);
      return swift_release(a3);
    }

    swift_release(a3);
  }

  return swift_bridgeObjectRelease(a6);
}

void sub_100129350( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v23;
  a23 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v39 = (void *)sub_10000DDDC((uint64_t)&unk_1001B1DF0, 40LL);
  v39[2] = v30;
  void v39[3] = v28;
  v39[4] = v26;
  v45[2] = v38;
  void v45[3] = v36;
  void v45[4] = v34;
  v45[5] = v32;
  v45[6] = sub_10012A914;
  v45[7] = v39;
  sub_10012A9C8();
  uint64_t v40 = qword_1001C80D0;
  sub_10002FAEC();
  sub_10000DEE0();
  if (v40 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  uint64_t v41 = static OS_dispatch_queue.getSpecific<A>(key:)(&a13, qword_1001DBBE0);
  if (a13 != 2 && (a13 & 1) != 0)
  {
    uint64_t v44 = objc_autoreleasePoolPush();
    sub_10002FAEC();
    sub_10000DEE0();
    sub_10012BA60(v38, v36, v34, v32, v30, v28, v26);
    objc_autoreleasePoolPop(v44);
    sub_10002FAF4();
    swift_release(v39);
    sub_100020AB8();
  }

  else
  {
    __chkstk_darwin(v41);
    sub_10012A988();
    *(void *)(v42 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A938;
    *(void *)(v42 - 8) = v45;
    OS_dispatch_queue.sync<A>(execute:)(sub_10012A974, v43, (char *)&type metadata for () + 8);
    sub_10002FAF4();
    swift_release(v39);
    swift_bridgeObjectRelease(v34);
  }

  sub_100009020();
  sub_100029188();
}

uint64_t sub_1001294E4(uint64_t a1, uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  char v3 = static OS_dispatch_queue.getSpecific<A>(key:)(&v7, qword_1001DBBE0);
  if (v7 != 2 && (v7 & 1) != 0)
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    sub_100127F84(a2);
    objc_autoreleasePoolPop(v5);
    return swift_release(a2);
  }

  else
  {
    __chkstk_darwin(v3);
    v6[2] = sub_10012A6E0;
    v6[3] = a2;
    OS_dispatch_queue.sync<A>(execute:)(sub_10012A974, v6, (char *)&type metadata for () + 8);
    return swift_release(a2);
  }

void sub_1001295FC(uint64_t a1, uint64_t a2, sqlite3_stmt *a3, uint64_t a4)
{
  uint64_t v15 = a2;
  char v16 = a3;
  uint64_t v17 = a4;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AAA0();
  sub_10012AAF4();
  if (!v9 && (v8 & 1) != 0)
  {
    uint64_t v13 = objc_autoreleasePoolPush();
    sub_10012BC90(a2, a3, a4);
    if (v4)
    {
      objc_autoreleasePoolPop(v13);
      sub_100009020();
      sub_100025894();
      goto LABEL_12;
    }

    objc_autoreleasePoolPop(v13);
    sub_100025894();
LABEL_11:
    sub_100009020();
    goto LABEL_12;
  }

  sub_10012AAE8();
  __chkstk_darwin(v10);
  sub_10012A988();
  *(void *)(v11 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A7C4;
  *(void *)(v11 - 8) = &v14;
  OS_dispatch_queue.sync<A>(execute:)(sub_10012A974, v12, (char *)&type metadata for () + 8);
  if (!v4)
  {
    sub_100025894();
    goto LABEL_11;
  }

  sub_100009020();
  sub_100025894();
LABEL_12:
  sub_10012AA50();
  sub_10012A9E0();
}

void sub_100129730(uint64_t a1, uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AA7C();
  sub_10012AAA8();
  if (!v4 && (v3 & 1) != 0)
  {
    char v8 = objc_autoreleasePoolPush();
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    objc_autoreleasePoolPop(v8);
    sub_100025894();
  }

  else
  {
    sub_10012AA40();
    __chkstk_darwin(v5);
    sub_10012A988();
    *(void *)(v6 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A69C;
    *(void *)(v6 - 8) = a2;
    sub_10012AA20((uint64_t)sub_10012A974, v7, (uint64_t)&type metadata for ());
    sub_100025894();
  }

  sub_10012AA94();
  sub_10012A998();
}

void sub_1001297F8(uint64_t a1, uint64_t a2, sqlite3_stmt *a3)
{
  uint64_t v13 = a2;
  char v14 = a3;
  sub_10012A9C8();
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AA7C();
  sub_10012AAA8();
  if (!v7 && (v6 & 1) != 0)
  {
    uint64_t v10 = objc_autoreleasePoolPush();
    sub_10012AAB4();
    uint64_t v11 = sqlite3_reset(a3);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(a2 + 16))( v11,  0x7473207465736572LL,  0xEF746E656D657461LL);
    sub_10012AAD4();
    sub_10001A2D8();
  }

  else
  {
    __chkstk_darwin(v5);
    sub_10012A988();
    *(void *)(v8 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A7AC;
    *(void *)(v8 - 8) = &v12;
    sub_10012AA14((uint64_t)sub_10012A974, v9, (uint64_t)&type metadata for ());
    sub_10001A2D8();
  }

  sub_10012AA50();
  sub_10012A998();
}

void sub_100129910(uint64_t a1, uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  static OS_dispatch_queue.getSpecific<A>(key:)(v9, qword_1001DBBE0);
  if (LOBYTE(v9[0]) != 2 && (v9[0] & 1) != 0)
  {
    char v6 = objc_autoreleasePoolPush();
    swift_beginAccess(a2 + 32, v9, 1LL, 0LL);
    uint64_t v7 = *(void *)(a2 + 32);
    if (v7)
    {
      sub_100048DB4();
      sub_10012AC74();
      swift_release(v7);
      uint64_t v8 = *(void *)(a2 + 32);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    *(void *)(a2 + 3sub_10000D3A0(v0 + 2) = 0LL;
    swift_release(v8);
    sub_10012AB14();
    sub_100025894();
  }

  else
  {
    sub_10012AA40();
    __chkstk_darwin(v3);
    sub_10012A988();
    *(void *)(v4 - swift_unknownObjectWeakDestroy(v0 + 16) = sub_10012A684;
    *(void *)(v4 - 8) = a2;
    sub_10012AA20((uint64_t)sub_10012A974, v5, (uint64_t)&type metadata for ());
    sub_100025894();
  }

  sub_10012AA94();
  sub_10012A998();
}

void sub_100129A28(void (*a1)(void), uint64_t a2)
{
  if (qword_1001C80D0 != -1) {
    swift_once(&qword_1001C80D0, sub_1001258F8);
  }
  sub_10012AAA0();
  sub_10012AAF4();
  if (!v6 && (v5 & 1) != 0)
  {
    uint64_t v9 = objc_autoreleasePoolPush();
    a1();
    sub_10012AAD4();
  }

  else
  {
    __chkstk_darwin(v4);
    sub_10012A988();
    *(void *)(v7 - swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v7 - 8) = a2;
    sub_10012AA20((uint64_t)sub_10012A974, v8, (uint64_t)&type metadata for ());
  }

  sub_10012AA94();
  sub_10012A9E0();
}

void sub_100129B00()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_10000DC74();
  if (qword_1001C7F88 != -1) {
    swift_once(&qword_1001C7F88, sub_1000BD368);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10000DC98() - 8);
  uint64_t v4 = sub_10000DCF0( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
       + 2LL * *(void *)(v3 + 72),
         *(unsigned __int8 *)(v3 + 80));
  *(_OWORD *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v5 = type metadata accessor for SQLDatabase();
  uint64_t v6 = sub_10012A9D0(v5);
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    sub_100048C54((uint64_t)v7);
    sub_10012AA2C();
    sub_100048A30();
    sub_10000DC34();
    sub_10000DC08();
    sub_100122EB0(&v17);
    uint64_t v8 = sub_1000258E8();
    sub_1000B8410(v8);
    sub_10012A9A8();
    sub_10000DC14();
    sub_10000DEA4();
    sub_10012A9A8();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10001C258();
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_100122EB0(&v17);
    uint64_t v9 = sub_1000258E8();
    uint64_t v10 = sub_1000B8410(v9);
    sub_10006779C(v10, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10001A21C(26LL);
  sub_100048BA0();
  LogMessage.StringInterpolation.appendLiteral(_:)(v11);
  uint64_t v18 = &type metadata for Int;
  v17._uint64_t countAndFlagsBits = v1;
  uint64_t v12 = LogMessage.StringInterpolation.appendInterpolation(safe:)(&v17);
  sub_1000677A4(v12, &qword_1001CAAD0);
  sub_10000DC08();
  uint64_t v13 = sub_10000DC5C();
  uint64_t v14 = static os_log_type_t.debug.getter(v13);
  sub_1000BD1B0(v14, v4);
  sub_100020AB8();
  v17._uint64_t countAndFlagsBits = 0LL;
  v17._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease(v17._object);
  sub_100048B94();
  v17._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  v17._object = v15;
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v16);
  sub_100009020();
  SQLDatabase.execute(sql:parameters:)(v17, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
  sub_100009020();
  sub_100029188();
}

void sub_100129D84()
{
  uint64_t v2 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v3);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 88);
  if (v36)
  {
    uint64_t v4 = *(void *)(v0 + 96);
    sub_10002FAA0();
    uint64_t v5 = sub_10012AB28();
    if (!v1)
    {
      uint64_t v6 = v5;
      sub_100048B94();
      uint64_t v35 = v7;
      sub_100048B94();
      uint64_t v33 = v8;
      for (uint64_t i = v4; ; v4 = i)
      {
        uint64_t v9 = v36(v2, v6);
        if (v6 == v9) {
          break;
        }
        uint64_t v46 = v9;
        if (qword_1001C7F88 != -1) {
          swift_once(&qword_1001C7F88, sub_1000BD368);
        }
        uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
        type metadata accessor for LogMessage(0LL);
        sub_10001A5F8();
        uint64_t v13 = v12 & ~v11;
        uint64_t v40 = v14;
        uint64_t v38 = v11 | 7;
        uint64_t v39 = v13 + 2 * v14;
        uint64_t v15 = swift_allocObject(v10, v39, v11 | 7);
        *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
        uint64_t v37 = type metadata accessor for SQLDatabase();
        uint64_t v45 = (void *)v37;
        uint64_t v16 = sub_10012AADC();
        id v17 = (id)AMSLogKey(v16);
        if (v17)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          sub_10012AB1C();
          swift_bridgeObjectRetain(v2);
          sub_100010564();
          sub_100048C84();
          sub_10008E3CC();
          uint64_t v18 = sub_100010530();
          sub_100048980(v18);
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC14();
          uint64_t v43 = &type metadata for String;
          uint64_t v41 = v13;
          uint64_t v42 = v2;
          sub_10000DF68();
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC4C(93LL);
          sub_10012AA38();
          sub_10012AAC8();
        }

        else
        {
          sub_10001A1BC();
          sub_100048C84();
          sub_10008E3CC();
          uint64_t v19 = sub_100010530();
          sub_100048980(v19);
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC4C(58LL);
          sub_10012AA38();
        }

        sub_10000D3A0(v44);
        uint64_t v20 = v15 + v13 + v40;
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 2LL);
        v21._uint64_t countAndFlagsBits = 0xD000000000000023LL;
        v21._object = v35;
        LogMessage.StringInterpolation.appendLiteral(_:)(v21);
        uint64_t v45 = &type metadata for Int;
        v44[0] = v6;
        sub_100029288();
        sub_1000819D8((uint64_t)v44);
        v22._uint64_t countAndFlagsBits = 0x5677656E206F7420LL;
        v22._object = (void *)0xEF206E6F69737265LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v22);
        uint64_t v45 = &type metadata for Int;
        v44[0] = v46;
        sub_100029288();
        sub_1000819D8((uint64_t)v44);
        sub_10000DC08();
        uint64_t v23 = sub_10012AA38();
        uint64_t v24 = static os_log_type_t.debug.getter(v23);
        sub_1000BD1B0(v24, v15);
        swift_bridgeObjectRelease(v15);
        sub_100129B00();
        uint64_t v25 = swift_allocObject(v10, v39, v38);
        *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
        uint64_t v45 = (void *)v37;
        uint64_t v26 = sub_10012AADC();
        id v27 = (id)AMSLogKey(v26);
        if (v27)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
          sub_10012AB1C();
          swift_bridgeObjectRetain(v2);
          sub_100010564();
          sub_100048C84();
          sub_10008E3CC();
          uint64_t v28 = sub_100010530();
          sub_100048980(v28);
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC14();
          uint64_t v43 = &type metadata for String;
          uint64_t v41 = v20;
          uint64_t v42 = v2;
          sub_10000DF68();
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC4C(93LL);
          sub_10012AA38();
          sub_10012AAC8();
        }

        else
        {
          sub_10001A1BC();
          sub_100048C84();
          sub_10008E3CC();
          uint64_t v29 = sub_100010530();
          sub_100048980(v29);
          sub_1000819D8((uint64_t)&v41);
          sub_10000DC4C(58LL);
          sub_10012AA38();
        }

        sub_10000D3A0(v44);
        sub_10001A21C(27LL);
        v30._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
        v30._object = v33;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t v45 = &type metadata for Int;
        v44[0] = v46;
        sub_100029288();
        sub_1000819D8((uint64_t)v44);
        sub_10000DC08();
        uint64_t v31 = sub_10012AA38();
        uint64_t v32 = static os_log_type_t.default.getter(v31);
        sub_1000BD1B0(v32, v25);
        sub_10001C258();
        uint64_t v6 = sub_10012AB28();
      }
    }

    sub_10006675C((uint64_t)v36, v4);
  }

  sub_100029188();
}

void sub_10012A200()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_1000292E4();
  uint64_t v4 = *(void **)(v0 + 72);
  *uint64_t v1 = v4;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v2);
  id v5 = v4;
  LOBYTE(v4) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v1, v2);
  ppDb = 0LL;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    int v6 = 2;
  }

  else
  {
    id v7 = [(id)objc_opt_self(NSFileManager) defaultManager];
    NSString v8 = String._bridgeToObjectiveC()();
    NSString v9 = [v8 stringByDeletingLastPathComponent];

    if (!v9)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v11 = v10;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
    }

    uint64_t v40 = 0LL;
    unsigned int v12 = [v7 createDirectoryAtPath:v9 withIntermediateDirectories:1 attributes:0 error:&v40];

    uint64_t v13 = v40;
    if (v12)
    {
      id v14 = (id)v40;
    }

    else
    {
      id v15 = (id)v40;
      uint64_t v16 = _convertNSErrorToError(_:)(v13);

      swift_willThrow();
      swift_errorRelease(v16);
    }

    int v6 = 6;
  }

  id v17 = *(void **)(v0 + 80);
  if (v17)
  {
    id v18 = v17;
    int v19 = sub_100125938();

    v6 |= v19;
  }

  NSString v20 = String._bridgeToObjectiveC()();
  Swift::String v21 = (const char *)[v20 fileSystemRepresentation];
  id v22 = v20;
  int v23 = sqlite3_open_v2(v21, &ppDb, v6, 0LL);
  char v24 = sub_10012C658(v23);
  if (v24)
  {
    char v25 = v24;
    unint64_t v26 = sub_100020550();
    sub_100020C48((uint64_t)&type metadata for SQLite3Status, v26);
    *id v27 = v25;
  }

  else
  {
    uint64_t v40 = 1LL;
    uint64_t v28 = ppDb;
    int v29 = sqlite3_file_control(ppDb, 0LL, 10, &v40);
    uint64_t v30 = sub_10012C658(v29);
    if ((_BYTE)v30) {
      goto LABEL_19;
    }
    int v31 = sub_10012AA00(v30, "PRAGMA journal_mode=WAL");
    uint64_t v30 = sub_10012C658(v31);
    if ((_BYTE)v30
      || (int v32 = sub_10012AA00(v30, "pragma cache_spill = 0"), v30 = sub_10012C658(v32), (_BYTE)v30)
      || (int v33 = sub_10012AA00(v30, "PRAGMA auto_vacuum = 2"), LOBYTE(v30) = sub_10012C658(v33), (_BYTE)v30)
      || (int busy = sqlite3_busy_timeout(v28, 900000), LOBYTE(v30) = sub_10012C658(busy), (_BYTE)v30))
    {
LABEL_19:
      char v35 = v30;
      unint64_t v36 = sub_100020550();
      sub_100020C48((uint64_t)&type metadata for SQLite3Status, v36);
      *uint64_t v37 = v35;
    }

    else
    {
      if (v28) {
        goto LABEL_21;
      }
      unint64_t v38 = sub_100125820();
      sub_100020C48((uint64_t)&unk_1001B1FE0, v38);
      _BYTE *v39 = 0;
    }
  }

  sub_10008C040();
LABEL_21:
  sub_10012AA94();
}

uint64_t SQLDatabase.deinit()
{
  sub_10006675C(*(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SQLDatabase.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 113LL, 7LL);
}

uint64_t sub_10012A58C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000256DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Weak);
}

void sub_10012A5C8()
{
}

void sub_10012A5E0()
{
}

uint64_t sub_10012A5FC()
{
  return sub_100126C38(v0);
}

uint64_t sub_10012A614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012A65C()
{
  uint64_t v1 = sub_1000673A4();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_10012A684()
{
  return sub_10012C534(v0);
}

uint64_t sub_10012A69C()
{
  return sub_10012ACBC(v0);
}

uint64_t sub_10012A6B4()
{
  uint64_t v0 = sub_1000673A4();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10012A6C4(uint64_t a1)
{
  return sub_100128AFC(a1, v1) & 1;
}

void sub_10012A6E0()
{
}

uint64_t sub_10012A6F8()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

const char *sub_10012A734()
{
  return sub_1001274FC( *(void *)(v0 + 16),  *(void **)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void **)(v0 + 56));
}

uint64_t sub_10012A744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10012A754(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10012A75C()
{
  uint64_t v1 = sub_1000673A4();
  return swift_deallocClassInstance(v1, v2, v3);
}

uint64_t sub_10012A784()
{
  uint64_t v1 = sub_1000673A4();
  return swift_deallocClassInstance(v1, v2, v3);
}

void sub_10012A7AC()
{
}

void sub_10012A7C4()
{
}

void sub_10012A7E0()
{
}

void sub_10012A7F8()
{
}

double sub_10012A814()
{
  return sub_10012B25C(*(sqlite3_stmt **)(v0 + 16), *(void *)(v0 + 24), *(_OWORD **)(v0 + 32));
}

void *sub_10012A830()
{
  return sub_1001260F8( *(uint64_t **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_10012A850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001C9010);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012A898()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_10000D33C(&qword_1001C9010);
  swift_arrayDestroy(v0 + 32, v1, v2);
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_10012A8E8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10012A914(int a1, uint64_t a2, void *a3)
{
}

uint64_t sub_10012A938()
{
  return sub_10012BB1C( *(sqlite3 **)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(sqlite3_stmt ***)(v0 + 40),  *(uint64_t (**)(uint64_t, unint64_t, unint64_t))(v0 + 48));
}

void sub_10012A958()
{
}

void sub_10012A974()
{
}

  ;
}

  ;
}

void sub_10012A9A8()
{
}

uint64_t sub_10012A9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v5, v3, a3, v4, 0LL);
}

unint64_t sub_10012A9C8()
{
  return sub_100049B94();
}

uint64_t sub_10012A9D0(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return swift_retain(v1);
}

  ;
}

uint64_t sub_10012A9F0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_10012AA00(uint64_t a1, const char *a2)
{
  return sqlite3_exec(v2, a2, 0LL, 0LL, 0LL);
}

uint64_t sub_10012AA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OS_dispatch_queue.sync<A>(execute:)(a1, a2, a3 + 8);
}

uint64_t sub_10012AA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OS_dispatch_queue.sync<A>(execute:)(a1, a2, a3 + 8);
}

void sub_10012AA2C()
{
}

uint64_t sub_10012AA38()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

  ;
}

  ;
}

uint64_t sub_10012AA5C()
{
  return static LogMessage.safe(_:)(v0 - 112);
}

uint64_t sub_10012AA68(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_10012AA7C()
{
  return static OS_dispatch_queue.getSpecific<A>(key:)();
}

uint64_t sub_10012AA84(uint64_t a1)
{
  *(void *)(v2 - 136) = a1;
  *(void *)(v2 - 160) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 160);
}

  ;
}

uint64_t sub_10012AAA0()
{
  return static OS_dispatch_queue.getSpecific<A>(key:)();
}

  ;
}

uint64_t sub_10012AAB4()
{
  return sub_10012C4EC();
}

  ;
}

uint64_t sub_10012AAC8()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_10012AAD4()
{
}

uint64_t sub_10012AADC()
{
  *(void *)(v1 - 120) = v0;
  return swift_retain(v0);
}

  ;
}

  ;
}

void sub_10012AB00()
{
}

void sub_10012AB08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10012AB14()
{
}

void sub_10012AB1C()
{
}

uint64_t sub_10012AB28()
{
  return sub_100128A2C();
}

void *sub_10012AB34(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = 0LL;
  v2[2] = a2;
  return v2;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.integer(column:)( Swift::Int column)
{
  Swift::Int v1 = sub_10012AB98(column);
  result.value = v1;
  result.is_nil = v2;
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.integer(name:)( Swift::String name)
{
  Swift::Int v1 = sub_10012ABD4();
  result.value = v1;
  result.is_nil = v2;
  return result;
}

Swift::Double_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.double(column:)( Swift::Int column)
{
  char v1 = sub_10012AB98(column);
  result.value = v2;
  result.is_nil = v1;
  return result;
}

uint64_t sub_10012AB98(uint64_t a1)
{
  uint64_t result = sub_10012AF00(a1);
  if (v1) {
    return v3;
  }
  return result;
}

Swift::Double_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.double(name:)( Swift::String name)
{
  char v1 = sub_10012ABD4();
  result.value = v2;
  result.is_nil = v1;
  return result;
}

uint64_t sub_10012ABD4()
{
  uint64_t result = sub_10012B57C();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t SQLRow.data(column:)(uint64_t a1)
{
  uint64_t result = sub_10012AFB4(a1, &v3);
  if (!v1) {
    return v3;
  }
  return result;
}

uint64_t SQLRow.data(name:)()
{
  uint64_t result = sub_10012B4A8(&v2);
  if (!v0) {
    return v2;
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.string(column:)( Swift::Int column)
{
  uint64_t v1 = sub_10012B0A8(column);
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLRow.string(name:)( Swift::String name)
{
  uint64_t v1 = sub_10012B3C4();
  result.value._object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t sub_10012AC74()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100048DB4();
  uint64_t v2 = swift_retain(v1);
  sub_100129730(v2, v0);
  return swift_release(v1);
}

uint64_t sub_10012ACBC(uint64_t result)
{
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  return result;
}

void sub_10012ACC4()
{
  if (!*(void *)(v0 + 32))
  {
    uint64_t v1 = *(sqlite3_stmt **)(v0 + 16);
    if (v1)
    {
      uint64_t v2 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
      unsigned int v3 = sqlite3_column_count(v1);
      if ((v3 & 0x80000000) == 0)
      {
        if (!v3)
        {
LABEL_19:
          *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = v2;
          swift_bridgeObjectRelease();
          return;
        }

        uint64_t v4 = 0LL;
        uint64_t v5 = v3;
        uint64_t v21 = v3;
        while (v5 != v4)
        {
          if (sqlite3_column_name(v1, v4))
          {
            int v6 = v1;
            String.init(cString:)();
            Swift::String v7 = String.lowercased()();
            swift_bridgeObjectRelease();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
            unint64_t v9 = sub_100030CCC(v7._countAndFlagsBits, (uint64_t)v7._object);
            uint64_t v11 = v2[2];
            BOOL v12 = (v10 & 1) == 0;
            Swift::Int v13 = v11 + v12;
            if (__OFADD__(v11, v12)) {
              goto LABEL_21;
            }
            unint64_t v14 = v9;
            char v15 = v10;
            sub_10000D33C(&qword_1001CEB38);
            if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v13))
            {
              unint64_t v16 = sub_100030CCC(v7._countAndFlagsBits, (uint64_t)v7._object);
              if ((v15 & 1) != (v17 & 1)) {
                goto LABEL_24;
              }
              unint64_t v14 = v16;
            }

            if ((v15 & 1) != 0)
            {
              *(void *)(v2[7] + 8 * vsub_10000D3A0(v0 + 14) = v4;
            }

            else
            {
              v2[(v14 >> 6) + 8] |= 1LL << v14;
              *(Swift::String *)(v2[6] + 16 * vsub_10000D3A0(v0 + 14) = v7;
              *(void *)(v2[7] + 8 * vsub_10000D3A0(v0 + 14) = v4;
              uint64_t v18 = v2[2];
              BOOL v19 = __OFADD__(v18, 1LL);
              uint64_t v20 = v18 + 1;
              if (v19) {
                goto LABEL_22;
              }
              v2[2] = v20;
              swift_bridgeObjectRetain(v7._object);
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v1 = v6;
            uint64_t v5 = v21;
          }

          if (v5 == ++v4) {
            goto LABEL_19;
          }
        }

        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }

      __break(1u);
LABEL_24:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
  }

uint64_t sub_10012AEE4(uint64_t a1)
{
  return sub_10012AF00(a1);
}

uint64_t sub_10012AF00(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt **)(v1 + 16);
  if (v2)
  {
    memset(v32, 0, sizeof(v32));
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t v5 = sub_100048DB4();
    sub_100128ED8(v5, v2, a1, v32);
    swift_release(v4);
    sub_10012B794((uint64_t)v32, v6, v7, v8, v9, v10, v11, v12, v30);
    uint64_t v13 = sub_10000D33C(&qword_1001CAAD0);
    char v21 = sub_10012B77C(v13, v14, v15, v16, v17, v18, v19, v20, v31);
    if ((v21 & 1) == 0) {
      uint64_t v33 = 0LL;
    }
    sub_10012B7B0(v21, v22, v23, v24, v25);
    return v33;
  }

  else
  {
    unint64_t v27 = sub_100125820();
    uint64_t v28 = sub_100020C48((uint64_t)&unk_1001B1FE0, v27);
    return sub_10012B750(v28, v29);
  }

uint64_t sub_10012AFB4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v3 = *(sqlite3_stmt **)(v2 + 16);
  if (v3)
  {
    memset(v13, 0, sizeof(v13));
    uint64_t v6 = swift_retain(*(void *)(v2 + 24));
    sub_100128ED8(v6, v3, a1, v13);
    swift_release();
    sub_10002546C((uint64_t)v13, (uint64_t)v12);
    uint64_t v7 = sub_10000D33C(&qword_1001CAAD0);
    if ((swift_dynamicCast(a2, v12, v7, &type metadata for Data, 6LL) & 1) == 0) {
      *a2 = xmmword_100168C20;
    }
    return sub_10000E888((uint64_t)v13);
  }

  else
  {
    unint64_t v9 = sub_100125820();
    uint64_t v10 = swift_allocError(&unk_1001B1FE0, v9, 0LL, 0LL);
    *uint64_t v11 = 1;
    return swift_willThrow(v10);
  }

uint64_t sub_10012B0A8(uint64_t a1)
{
  uint64_t v2 = *(sqlite3_stmt **)(v1 + 16);
  if (v2)
  {
    memset(v11, 0, sizeof(v11));
    uint64_t v4 = swift_retain(*(void *)(v1 + 24));
    sub_100128ED8(v4, v2, a1, v11);
    swift_release();
    sub_10002546C((uint64_t)v11, (uint64_t)v10);
    uint64_t v5 = sub_10000D33C(&qword_1001CAAD0);
    if ((swift_dynamicCast(v12, v10, v5, &type metadata for String, 6LL) & 1) == 0)
    {
      v12[0] = 0LL;
      v12[1] = 0LL;
    }

    sub_10000E888((uint64_t)v11);
    return v12[0];
  }

  else
  {
    unint64_t v7 = sub_100125820();
    uint64_t v8 = swift_allocError(&unk_1001B1FE0, v7, 0LL, 0LL);
    *unint64_t v9 = 1;
    return swift_willThrow(v8);
  }

uint64_t sub_10012B18C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  unsigned int v3 = *(sqlite3_stmt **)(v2 + 16);
  if (v3)
  {
    memset(v20, 0, sizeof(v20));
    uint64_t v6 = sub_100067860();
    sub_100128ED8(v6, v3, a1, v20);
    sub_100020AD8();
    sub_10012B794((uint64_t)v20, v7, v8, v9, v10, v11, v12, v13, v19[0]);
    uint64_t v14 = sub_10000D33C(&qword_1001CAAD0);
    if ((sub_100010BA4((uint64_t)a2, (uint64_t)v19, v14, (uint64_t)&type metadata for Any + 8) & 1) == 0)
    {
      *a2 = 0u;
      a2[1] = 0u;
    }

    return sub_10000E888((uint64_t)v20);
  }

  else
  {
    unint64_t v16 = sub_100125820();
    uint64_t v17 = sub_100020C48((uint64_t)&unk_1001B1FE0, v16);
    return sub_10012B750(v17, v18);
  }

double sub_10012B25C(sqlite3_stmt *a1, uint64_t iCol, _OWORD *a3)
{
  if (iCol < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_15;
  }

  int v3 = iCol;
  if (iCol > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    JUMPOUT(0x10012B394LL);
  }

  switch(sqlite3_column_type(a1, iCol))
  {
    case 1:
      uint64_t v7 = (sqlite3_stmt *)sub_10003768C();
      char v21 = &type metadata for Int;
      v20[0] = sqlite3_column_int64(v7, v8);
      goto LABEL_11;
    case 2:
      uint64_t v9 = (sqlite3_stmt *)sub_10003768C();
      char v21 = &type metadata for Double;
      v20[0] = sqlite3_column_double(v9, v10);
      goto LABEL_11;
    case 3:
      uint64_t v11 = (sqlite3_stmt *)sub_10003768C();
      if (!sqlite3_column_text(v11, v12)) {
        return result;
      }
      uint64_t v13 = String.init(cString:)();
      uint64_t v15 = &type metadata for String;
      break;
    case 4:
      int v16 = sqlite3_column_bytes(a1, v3);
      uint64_t v17 = (sqlite3_stmt *)sub_10003768C();
      uint64_t v19 = sqlite3_column_blob(v17, v18);
      if (!v19) {
        return result;
      }
      uint64_t v13 = Data.init(bytes:count:)(v19, v16);
      uint64_t v15 = &type metadata for Data;
      break;
    case 5:
      sub_10000E888((uint64_t)a3);
      double result = 0.0;
      *a3 = 0u;
      a3[1] = 0u;
      return result;
    default:
      return result;
  }

  char v21 = v15;
  v20[0] = v13;
  v20[1] = v14;
LABEL_11:
  sub_10001E454((uint64_t)v20, (uint64_t)a3);
  return result;
}

uint64_t sub_10012B3A8()
{
  return sub_10012B57C();
}

uint64_t sub_10012B3C4()
{
  if (*(void *)(v0 + 16))
  {
    memset(v16, 0, sizeof(v16));
    uint64_t v2 = *(void *)(v0 + 24);
    sub_100048DB4();
    sub_10000DEE0();
    swift_retain(v2);
    sub_100128D40();
    swift_release(v2);
    if (v1)
    {
      return sub_10000E888((uint64_t)v16);
    }

    else
    {
      sub_10012B794((uint64_t)v16, v3, v4, v5, v6, v7, v8, v9, v15[0]);
      uint64_t v14 = sub_10000D33C(&qword_1001CAAD0);
      if ((sub_100010BA4((uint64_t)v17, (uint64_t)v15, v14, (uint64_t)&type metadata for String) & 1) == 0)
      {
        v17[0] = 0LL;
        v17[1] = 0LL;
      }

      sub_10000E888((uint64_t)v16);
      return v17[0];
    }
  }

  else
  {
    unint64_t v11 = sub_100125820();
    uint64_t v12 = sub_100020C48((uint64_t)&unk_1001B1FE0, v11);
    return sub_10012B750(v12, v13);
  }

uint64_t sub_10012B4A8@<X0>(_OWORD *a1@<X8>)
{
  if (*(void *)(v1 + 16))
  {
    sub_10012B760();
    sub_10000DEE0();
    sub_100067860();
    sub_10012B79C();
    sub_100020AD8();
    if (!v2)
    {
      sub_10012B794((uint64_t)v17, v4, v5, v6, v7, v8, v9, v10, v16[0]);
      uint64_t v11 = sub_10000D33C(&qword_1001CAAD0);
    }

    return sub_10000E888((uint64_t)v17);
  }

  else
  {
    unint64_t v13 = sub_100125820();
    uint64_t v14 = sub_100020C48((uint64_t)&unk_1001B1FE0, v13);
    return sub_10012B750(v14, v15);
  }

uint64_t sub_10012B560()
{
  return sub_10012B57C();
}

uint64_t sub_10012B57C()
{
  if (*(void *)(v0 + 16))
  {
    sub_10012B760();
    sub_10000DEE0();
    sub_100067860();
    sub_10012B79C();
    sub_100020AD8();
    if (v1)
    {
      return sub_10000E888((uint64_t)v28);
    }

    else
    {
      sub_10012B794((uint64_t)v28, v2, v3, v4, v5, v6, v7, v8, v26);
      uint64_t v13 = sub_10000D33C(&qword_1001CAAD0);
      char v21 = sub_10012B77C(v13, v14, v15, v16, v17, v18, v19, v20, v27);
      if ((v21 & 1) == 0) {
        uint64_t v29 = 0LL;
      }
      sub_10012B7B0(v21, v22, v23, v24, v25);
      return v29;
    }
  }

  else
  {
    unint64_t v10 = sub_100125820();
    uint64_t v11 = sub_100020C48((uint64_t)&unk_1001B1FE0, v10);
    return sub_10012B750(v11, v12);
  }

void sub_10012B624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    Swift::String v8 = String.lowercased()();
    swift_bridgeObjectRetain(v7);
    uint64_t v9 = sub_100030B5C(v8._countAndFlagsBits, (uint64_t)v8._object, v7);
    char v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      sub_10012B18C(v9, v12);
      if (!v4) {
        sub_10001E454((uint64_t)v12, a4);
      }
    }
  }

uint64_t SQLRow.deinit()
{
  return v0;
}

uint64_t SQLRow.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SQLRow()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd6SQLRow);
}

uint64_t sub_10012B750(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_10012B760()
{
  return swift_retain(v0);
}

uint64_t sub_10012B77C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_dynamicCast(v10 - 48, &a9, a1, v9, 6LL);
}

uint64_t sub_10012B794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10002546C(a1, (uint64_t)&a9);
}

void sub_10012B79C()
{
}

uint64_t sub_10012B7B0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  *(_BYTE *)(v5 - 40) = a1 ^ 1;
  return sub_10000E888((uint64_t)va);
}

uint64_t sub_10012B7C0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess(*a1 + 32, v6, 0LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 32);
  *a2 = v4;
  return swift_retain(v4);
}

uint64_t sub_10012B808(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess(*a2 + 32, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 32);
  *(void *)(v3 + 3sub_10000D3A0(v0 + 2) = v2;
  swift_retain(v2);
  return swift_release(v4);
}

uint64_t SQLStatement.currentRow.getter()
{
  return swift_retain(*(void *)(v0 + 32));
}

uint64_t SQLStatement.sql.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

void *sub_10012B8C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)sub_10002581C((uint64_t)&unk_1001B1E28);
  _OWORD v16[2] = a6;
  v16[3] = a7;
  uint64_t v16[4] = a8;
  a5[2] = sub_10012C5CC;
  a5[3] = v16;
  a5[7] = 0LL;
  a5[8] = a1;
  a5[4] = 0LL;
  a5[5] = a3;
  a5[6] = a4;
  swift_bridgeObjectRetain_n(a4, 2LL);
  swift_retain(a6);
  swift_bridgeObjectRetain(a8);
  swift_retain(v16);
  uint64_t v17 = swift_retain_n(a1, 2LL);
  uint64_t v18 = v25;
  sub_100129350( v17,  a2,  a3,  a4,  (uint64_t)v26,  a6,  a7,  a8,  v24,  v25,  SWORD2(v25),  SBYTE6(v25),  SHIBYTE(v25),  0LL,  v26[1],  v26[2],  v26[3],  v26[4],  v26[5],  v26[6],  v26[7],  v26[8],  v26[9]);
  if (v18)
  {
    swift_bridgeObjectRelease(a4);
    sub_100025894();
    swift_release(a5);
    swift_release_n(a1, 2LL);
  }

  else
  {
    sub_1000292C4();
    swift_bridgeObjectRelease(a4);
    uint64_t v19 = v26[0];
    if (v26[0])
    {
      sub_1000292C4();
      sub_100025894();
      a5[7] = v19;
    }

    else
    {
      swift_release(a5);
      unint64_t v20 = sub_100125820();
      uint64_t v21 = sub_100020C48((uint64_t)&unk_1001B1FE0, v20);
      sub_10012C610(v21, v22);
      sub_1000292C4();
      sub_100025894();
    }
  }

  return a5;
}

uint64_t sub_10012BA60( sqlite3 *a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_10012C64C((uint64_t)a1, a2, a3);
  LODWORD(a4) = sqlite3_prepare_v2(a1, (const char *)(v12 + 32), -1, a4, 0LL);
  swift_release(v12);
  sub_100127164((int)a4, 0xD000000000000011LL, (void *)0x8000000100177B60LL, a6, a7);
  swift_bridgeObjectRelease(a7);
  return swift_release(a5);
}

uint64_t sub_10012BB1C( sqlite3 *a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4, uint64_t (*a5)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v8 = sub_10012C64C((uint64_t)a1, a2, a3);
  uint64_t v9 = sqlite3_prepare_v2(a1, (const char *)(v8 + 32), -1, a4, 0LL);
  swift_release(v8);
  return a5(v9, 0xD000000000000011LL, 0x8000000100177B60LL);
}

uint64_t SQLStatement.deinit()
{
  return v0;
}

uint64_t SQLStatement.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLStatement.bind(parameters:)( Swift::OpaquePointer parameters)
{
  uint64_t v2 = *(sqlite3_stmt **)(v1 + 56);
  if (v2)
  {
    sub_100048DB4();
    swift_bridgeObjectRetain(parameters._rawValue);
    uint64_t v4 = sub_10002FAEC();
    sub_1001295FC(v4, v1, v2, (uint64_t)parameters._rawValue);
    sub_10012C5F4();
  }

  else
  {
    unint64_t v5 = sub_100125820();
    uint64_t v6 = sub_100020C48((uint64_t)&unk_1001B1FE0, v5);
    sub_10012C610(v6, v7);
  }

  sub_10010A6CC();
}

void sub_10012BC90(uint64_t a1, sqlite3_stmt *a2, uint64_t a3)
{
  if (!v5)
  {
    sqlite3_clear_bindings(a2);
    if (*(void *)(a3 + 16))
    {
      swift_bridgeObjectRetain(a3);
      __asm { BR              X8 }
    }
  }

void sub_10012C1A0()
{
}

void sub_10012C1BC()
{
  *(void *)(v0 + 56) = 0LL;
  sqlite3_finalize(v1);
  sub_10012C638(*(uint64_t (**)(void))(v0 + 16));
  sub_10012C640();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLStatement.reset()()
{
}

void sub_10012C220(void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    sub_100048DB4();
    uint64_t v4 = sub_10002FAEC();
    a1(v4, v1, v2);
    sub_10012C5F4();
  }

  sub_10010A6CC();
}

void sub_10012C264()
{
}

void *SQLStatement.step()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 56);
  if (!v2)
  {
    unint64_t v9 = sub_100125820();
    uint64_t v7 = sub_100020C48((uint64_t)&unk_1001B1FE0, v9);
    *uint64_t v10 = 2;
LABEL_12:
    swift_willThrow(v7);
    return v2;
  }

  char v18 = 31;
  uint64_t v3 = *(void *)(v1 + 64);
  _OWORD v16[2] = v1;
  v16[3] = v2;
  uint64_t v16[4] = &v18;
  uint64_t v4 = swift_retain_n(v3, 2LL);
  sub_100128C44(v4, v3, sub_10012C4A8, (uint64_t)v16);
  sub_10012C5F4();
  if (!v16)
  {
    char v5 = v18;
    if (v18 == 7)
    {
      return 0LL;
    }

    else
    {
      if (v18 != 27)
      {
        if (v18 == 31)
        {
          unint64_t v6 = sub_100125820();
          uint64_t v7 = sub_100020C48((uint64_t)&unk_1001B1FE0, v6);
          char v5 = 6;
        }

        else
        {
          unint64_t v14 = sub_100020550();
          uint64_t v7 = sub_100020C48((uint64_t)&type metadata for SQLite3Status, v14);
        }

        *uint64_t v8 = v5;
        goto LABEL_12;
      }

      uint64_t v11 = *(void *)(v1 + 64);
      uint64_t v12 = type metadata accessor for SQLRow();
      sub_10002581C(v12);
      uint64_t v2 = sub_10012AB34(v11, (uint64_t)v2);
      sub_10012C620(v1 + 32, (uint64_t)v17);
      uint64_t v13 = *(void *)(v1 + 32);
      *(void *)(v1 + 3sub_10000D3A0(v0 + 2) = v2;
      sub_100048DB4();
      sub_10002FAEC();
      swift_release(v13);
    }
  }

  return v2;
}

uint64_t sub_10012C438(uint64_t a1, sqlite3_stmt *a2, _BYTE *a3)
{
  int v7 = sqlite3_step(a2);
  uint64_t result = (*(uint64_t (**)(void))(a1 + 16))();
  if (!v3)
  {
    uint64_t result = sub_10012C658(v7);
    *a3 = result;
  }

  return result;
}

uint64_t sub_10012C4A8()
{
  return sub_10012C438(*(void *)(v0 + 16), *(sqlite3_stmt **)(v0 + 24), *(_BYTE **)(v0 + 32));
}

uint64_t type metadata accessor for SQLStatement()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd12SQLStatement);
}

uint64_t sub_10012C4EC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_100048DB4();
  uint64_t v2 = swift_retain(v1);
  sub_100129910(v2, v0);
  return swift_release(v1);
}

uint64_t sub_10012C534(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  sub_10012C620(a1 + 32, (uint64_t)v5);
  if (*(void *)(a1 + 32))
  {
    sub_100048DB4();
    sub_10012AC74();
    sub_1000292C4();
    uint64_t v3 = *v2;
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  *uint64_t v2 = 0LL;
  return swift_release(v3);
}

uint64_t sub_10012C5A0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10012C5CC(int a1, uint64_t a2, void *a3)
{
}

uint64_t sub_10012C5E8()
{
  return v0;
}

uint64_t sub_10012C5F4()
{
  return swift_release(v0);
}

uint64_t sub_10012C600()
{
  return sub_10012C4EC();
}

uint64_t sub_10012C610(uint64_t a1, _BYTE *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

uint64_t sub_10012C620(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 1LL, 0LL);
}

uint64_t sub_10012C62C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, unint64_t a17)
{
  return sub_10004934C(v17, a17, a16);
}

uint64_t sub_10012C638@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

  ;
}

uint64_t sub_10012C64C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return String.utf8CString.getter(a2, a3);
}

uint64_t sub_10012C658(int a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      goto LABEL_39;
    case 2:
      uint64_t result = 12LL;
      break;
    case 3:
      uint64_t result = 23LL;
      break;
    case 4:
      uint64_t result = 1LL;
      break;
    case 5:
      uint64_t result = 3LL;
      break;
    case 6:
      uint64_t result = 15LL;
      break;
    case 7:
      uint64_t result = 19LL;
      break;
    case 8:
      uint64_t result = 26LL;
      break;
    case 9:
      uint64_t result = 13LL;
      break;
    case 10:
      uint64_t result = 14LL;
      break;
    case 11:
      uint64_t result = 6LL;
      break;
    case 12:
      uint64_t result = 21LL;
      break;
    case 13:
      uint64_t result = 11LL;
      break;
    case 14:
      uint64_t result = 4LL;
      break;
    case 15:
      uint64_t result = 24LL;
      break;
    case 16:
      uint64_t result = 8LL;
      break;
    case 17:
      uint64_t result = 28LL;
      break;
    case 18:
      uint64_t result = 29LL;
      break;
    case 19:
      uint64_t result = 5LL;
      break;
    case 20:
      uint64_t result = 16LL;
      break;
    case 21:
      uint64_t result = 17LL;
      break;
    case 22:
      uint64_t result = 18LL;
      break;
    case 23:
      uint64_t result = 2LL;
      break;
    case 24:
      uint64_t result = 10LL;
      break;
    case 25:
      uint64_t result = 25LL;
      break;
    case 26:
      uint64_t result = 20LL;
      break;
    case 27:
      uint64_t result = 22LL;
      break;
    case 28:
      uint64_t result = 30LL;
      break;
    default:
      if (a1 == 100)
      {
        uint64_t result = 27LL;
      }

      else if (a1 == 101)
      {
        uint64_t result = 7LL;
      }

      else
      {
        uint64_t v4 = sub_10000D33C(&qword_1001C9C70);
        uint64_t v5 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
        uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
             + 2LL * *(void *)(v5 + 72),
               *(unsigned __int8 *)(v5 + 80) | 7LL);
        *(_OWORD *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
        uint64_t v23 = &type metadata for SQLite3Status;
        LOBYTE(v22[0]) = 9;
        id v7 = (id)AMSLogKey(v6);
        if (v7)
        {
          uint64_t v8 = v7;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
          uint64_t v10 = v9;

          swift_bridgeObjectRetain(v10);
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
          sub_10000DC08();
          uint64_t v11 = v23;
          uint64_t v12 = sub_10000D37C(v22, (uint64_t)v23);
          swift_getDynamicType(v12, v11, 1LL);
          swift_getMetatypeMetadata();
          sub_10000DCE8();
          sub_10000E8FC();
          v13._uint64_t countAndFlagsBits = 5972026LL;
          v13._object = (void *)0xE300000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v13);
          sub_10000DCE8();
          sub_10000E8FC();
          v14._uint64_t countAndFlagsBits = 93LL;
          v14._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v14);
          sub_10010EAC8();
          swift_bridgeObjectRelease(v10);
        }

        else
        {
          LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
          sub_10000DC08();
          uint64_t v15 = v23;
          uint64_t v16 = sub_10000D37C(v22, (uint64_t)v23);
          swift_getDynamicType(v16, v15, 1LL);
          swift_getMetatypeMetadata();
          sub_10000DCE8();
          sub_10000E8FC();
          v17._uint64_t countAndFlagsBits = 58LL;
          v17._object = (void *)0xE100000000000000LL;
          LogMessage.StringInterpolation.appendLiteral(_:)(v17);
          sub_10010EAC8();
        }

        sub_10000D3A0(v22);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(49LL, 1LL);
        v18._object = (void *)0x8000000100177B80LL;
        v18._uint64_t countAndFlagsBits = 0xD000000000000031LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v18);
        uint64_t v23 = (ValueMetadata *)&type metadata for Int32;
        LODWORD(v22[0]) = a1;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v22);
        sub_10000E888((uint64_t)v22);
        sub_10000DC08();
        uint64_t v19 = sub_10010EAC8();
        if (qword_1001C7F80 != -1) {
          uint64_t v19 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
        }
        uint64_t v21 = static os_log_type_t.fault.getter(v19, v20);
        sub_1000BD1B0(v21, v6);
        swift_bridgeObjectRelease(v6);
LABEL_39:
        uint64_t result = 9LL;
      }

      break;
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLite3Status.assertOk()()
{
  if (v0)
  {
    char v1 = v0;
    unint64_t v2 = sub_100020550();
    uint64_t v3 = swift_allocError(&type metadata for SQLite3Status, v2, 0LL, 0LL);
    *uint64_t v4 = v1;
    swift_willThrow(v3);
  }

void sub_10012CAD0()
{
  qword_1001DBBE8 = -1LL;
}

uint64_t sub_10012CAE0(char a1)
{
  char v2 = a1;
  return String.init<A>(describing:)(&v2, &unk_1001B1FE0);
}

uint64_t sub_10012CB0C(uint64_t a1)
{
  unint64_t v2 = sub_10012D22C();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10012CB34(uint64_t a1)
{
  unint64_t v2 = sub_10012D22C();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10012CB60()
{
  return sub_10012CAE0(*v0);
}

void static SQLParameter.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_10012CBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  sub_100049300(v7, v9, 0);
  sub_100049300(v6, v8, 0);
  uint64_t v10 = sub_10012D2A4();
  char v11 = ((uint64_t (*)(uint64_t))static Data.== infix(_:_:))(v10);
  sub_10004934C(v6, v8, 0);
  sub_10004934C(v7, v9, 0);
  return v11 & 1;
}

void sub_10012CCA4(uint64_t a1)
{
  static SQLParameter.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

const char *SQLite3Status.errorDescription.getter(char a1)
{
  uint64_t result = sqlite3_errstr(dword_100168F94[a1]);
  if (result) {
    return (const char *)String.init(cString:)();
  }
  __break(1u);
  return result;
}

uint64_t sub_10012CCF0()
{
  return SQLite3Status.hashValue.getter(*v0);
}

uint64_t sub_10012CCF8(uint64_t a1)
{
  unint64_t v2 = sub_10012D268();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10012CD20(uint64_t a1)
{
  unint64_t v2 = sub_10012D268();
  return Error<>._code.getter(a1, v2);
}

const char *sub_10012CD48()
{
  return SQLite3Status.errorDescription.getter(*v0);
}

unint64_t sub_10012CD54()
{
  unint64_t result = qword_1001CEC70;
  if (!qword_1001CEC70)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SQLite3Status, &type metadata for SQLite3Status);
    atomic_store(result, (unint64_t *)&qword_1001CEC70);
  }

  return result;
}

uint64_t destroy for SQLParameter(uint64_t a1)
{
  return sub_10004934C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s14amsengagementd12SQLParameterOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100049300(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_100049300(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_10004934C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SQLParameter(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_10004934C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLParameter(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 252;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10012CF0C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10012CF24(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)unint64_t result = a2 - 4;
    *(void *)(result + 8) = 0LL;
    LOBYTE(asub_10000D3A0(v0 + 2) = 4;
  }

  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

void type metadata accessor for SQLParameter()
{
}

uint64_t getEnumTagSinglePayload for SQLite3Status(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xE2)
  {
    if (a2 + 30 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 30) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 31;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for SQLite3Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 30 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 30) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE1) {
    return ((uint64_t (*)(void))((char *)&loc_10012D01C + 4 * byte_100168CA6[v4]))();
  }
  *a1 = a2 + 30;
  return ((uint64_t (*)(void))((char *)sub_10012D050 + 4 * byte_100168CA1[v4]))();
}

uint64_t sub_10012D050(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10012D058(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x10012D060LL);
  }
  return result;
}

uint64_t sub_10012D06C(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012D074LL);
  }
  *(_BYTE *)unint64_t result = a2 + 30;
  return result;
}

uint64_t sub_10012D078(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10012D080(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for SQLite3Status()
{
}

uint64_t sub_10012D098(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }

uint64_t sub_10012D120(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10012D16C + 4 * byte_100168CB0[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10012D1A0 + 4 * byte_100168CAB[v4]))();
}

uint64_t sub_10012D1A0(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10012D1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x10012D1B0LL);
  }
  return result;
}

uint64_t sub_10012D1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012D1C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10012D1C8(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10012D1D0(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for SQLError()
{
}

unint64_t sub_10012D1F0()
{
  unint64_t result = qword_1001CEC78;
  if (!qword_1001CEC78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168F2C, &unk_1001B1FE0);
    atomic_store(result, (unint64_t *)&qword_1001CEC78);
  }

  return result;
}

unint64_t sub_10012D22C()
{
  unint64_t result = qword_1001CEC80;
  if (!qword_1001CEC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100168EAC, &unk_1001B1FE0);
    atomic_store(result, (unint64_t *)&qword_1001CEC80);
  }

  return result;
}

unint64_t sub_10012D268()
{
  unint64_t result = qword_1001CEC88;
  if (!qword_1001CEC88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SQLite3Status, &type metadata for SQLite3Status);
    atomic_store(result, (unint64_t *)&qword_1001CEC88);
  }

  return result;
}

uint64_t sub_10012D2A4()
{
  return v0;
}

void sub_10012D2B8(uint64_t a1, void (*a2)(void *, uint64_t, uint64_t *))
{
  uint64_t v4 = v18[0];
  uint64_t v14 = v18[1];
  int64_t v5 = v18[3];
  unint64_t v6 = v18[4];
  int64_t v19 = (unint64_t)(v18[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  while (1)
  {
    Swift::String v13 = *(void **)(*(void *)(v4 + 48) + 8 * v8);
    sub_100092A2C(*(void *)(v4 + 56) + 40 * v8, (uint64_t)&v16, (uint64_t *)&unk_1001C9D20);
    uint64_t v15 = v13;
    a2(v13, v16, &v17);
    sub_10000DA68((uint64_t)&v15, &qword_1001CED98);
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      break;
    }
    if (v9 >= v19) {
      goto LABEL_21;
    }
    unint64_t v10 = *(void *)(v14 + 8 * v9);
    int64_t v11 = v5 + 1;
    if (!v10)
    {
      int64_t v11 = v5 + 2;
      if (v5 + 2 >= v19) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(v14 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v5 + 3;
        if (v5 + 3 >= v19) {
          goto LABEL_21;
        }
        unint64_t v10 = *(void *)(v14 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v5 + 4;
          if (v5 + 4 >= v19) {
            goto LABEL_21;
          }
          unint64_t v10 = *(void *)(v14 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v5 + 5;
            if (v5 + 5 >= v19) {
              goto LABEL_21;
            }
            unint64_t v10 = *(void *)(v14 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v5 + 6;
              while (v12 < v19)
              {
                unint64_t v10 = *(void *)(v14 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10012D48C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = sub_1001302D4(v7, v8);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  int64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (sub_1001302D4(v14, v15) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10012D538(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 5LL; ; ++i)
  {
    uint64_t v5 = i - 3;
    if (__OFADD__(i - 4, 1LL)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v3 = v6;
    BOOL v6 = v6 || v5 == v2;
    if (v6) {
      return v3;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10012D598()
{
  uint64_t v0 = type metadata accessor for SubscriptionsController();
  sub_10000DDDC(v0, 32LL);
  uint64_t result = sub_10012D5CC();
  qword_1001DBBF0 = result;
  return result;
}

uint64_t sub_10012D5CC()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000DAA0(0LL, &qword_1001CEDA0, &OBJC_CLASS___AMSSubscriptionEntitlementsResult_ptr);
  sub_100007CD0( &qword_1001CEDA8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSSubscriptionEntitlementsMediaType,  (uint64_t)&unk_100163040);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v2, v3, v4);
  *(void *)(v0 + 24) = [objc_allocWithZone(NSLock) init];
  sub_10012ECC4();
  return v0;
}

id sub_10012D674()
{
  uint64_t v56 = v1;
  uint64_t v57 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v49 = v6;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DE7C();
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(sub_10002C79C() - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v48 = v8;
  uint64_t v46 = v11 | 7;
  uint64_t v47 = ((v11 + 32) & ~v11) + 2 * v10;
  uint64_t v12 = swift_allocObject(v8, v47, v11 | 7);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v45 = type metadata accessor for SubscriptionsController();
  uint64_t v55 = (void *)v45;
  v54[0] = v3;
  uint64_t v13 = sub_10000DFF4();
  id v14 = (id)AMSLogKey(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    sub_1000489DC();
    sub_100010564();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v18 = sub_100010530();
    sub_10001A0CC(v18);
    sub_10000DA68((uint64_t)&v51, &qword_1001CAAD0);
    sub_10000DC14();
    uint64_t v53 = &type metadata for String;
    uint64_t v51 = v44;
    uint64_t v52 = v17;
    sub_10000DF68();
    sub_10000DA68((uint64_t)&v51, &qword_1001CAAD0);
    sub_10000DC4C(93LL);
    sub_100130270();
    sub_10000DE74();
  }

  else
  {
    sub_10001A1BC();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v19 = sub_100010530();
    uint64_t v20 = sub_10001A0CC(v19);
    sub_1001302FC(v20, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_100130270();
  }

  sub_100048888();
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(45LL, 2LL);
  v21._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v21._object = (void *)0x8000000100177DB0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v21);
  uint64_t v55 = &type metadata for Int;
  v54[0] = v49;
  sub_100029288();
  sub_1000819D8((uint64_t)v54);
  sub_10013024C();
  uint64_t v55 = &type metadata for Int;
  v54[0] = v5;
  sub_100029288();
  sub_1000819D8((uint64_t)v54);
  sub_10000DC4C(41LL);
  uint64_t v22 = sub_100130270();
  uint64_t v23 = static os_log_type_t.info.getter(v22);
  sub_1000BD1B0(v23, v12);
  sub_10000DCFC();
  uint64_t v24 = *(void **)(v3 + 24);
  sub_10000DFF4();
  [v24 lock];
  swift_beginAccess(v3 + 16, &v50, 0LL, 0LL);
  uint64_t v25 = *(void *)(v3 + 16);
  if (*(void *)(v25 + 16) && (unint64_t v26 = sub_100030F88((Swift::UInt)v49), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void **)(*(void *)(v25 + 56) + 8 * v26);
    id v29 = v28;
  }

  else
  {
    uint64_t v28 = 0LL;
  }

  objc_msgSend(v24, "unlock", v44);
  swift_release();
  if (!v28) {
    return sub_10012F4A8(v49, v5);
  }
  uint64_t v30 = swift_allocObject(v48, v47, v46);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v55 = (void *)v45;
  v54[0] = v3;
  uint64_t v31 = sub_10000DFF4();
  id v32 = (id)AMSLogKey(v31);
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    uint64_t v36 = v35;

    swift_bridgeObjectRetain(v36);
    sub_100010564();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v37 = sub_100010530();
    sub_10001A0CC(v37);
    sub_100025958();
    sub_10000DC14();
    uint64_t v53 = &type metadata for String;
    uint64_t v51 = v34;
    uint64_t v52 = v36;
    sub_10000DF68();
    sub_100025958();
    sub_10000DC4C(93LL);
    sub_100130270();
    sub_1000090CC();
  }

  else
  {
    sub_10001A1BC();
    sub_1000104F0();
    sub_10008E3CC();
    uint64_t v39 = sub_100010530();
    uint64_t v40 = sub_10001A0CC(v39);
    sub_1001302FC(v40, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_100130270();
  }

  sub_100048888();
  uint64_t v41 = LogMessage.init(stringLiteral:)(0xD000000000000016LL);
  uint64_t v42 = static os_log_type_t.debug.getter(v41);
  sub_1000BD1B0(v42, v30);
  swift_bridgeObjectRelease();
  id v43 = [(id)objc_opt_self(AMSPromise) promiseWithResult:v28];

  return v43;
}

void sub_10012DAD0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10000DE7C();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v10 = v9 - v8;
  if (qword_1001C80A8 != -1) {
    swift_once(&qword_1001C80A8, sub_10010D4CC);
  }
  v18[4] = sub_100130200;
  void v18[5] = v0;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256LL;
  void v18[2] = sub_100021A3C;
  v18[3] = &unk_1001B2220;
  uint64_t v11 = _Block_copy(v18);
  uint64_t v12 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v17 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = v13;
  uint64_t v15 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v16 = sub_100010444();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5, v11);
  _Block_release(v11);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  swift_release();
  sub_10000DD84();
}

void sub_10012DC80()
{
}

void sub_10012DCA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10012E8A8(a1);
  if ((v8 & 1) != 0)
  {
    if (qword_1001C7FE8 != -1) {
      swift_once(&qword_1001C7FE8, sub_1000BD768);
    }
    uint64_t v26 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v27 = type metadata accessor for LogMessage(0LL);
    uint64_t v28 = swift_allocObject( v26,  ((*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v27 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v27 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v62 = (void *)type metadata accessor for SubscriptionsController();
    aBlock[0] = v2;
    uint64_t v29 = swift_retain(v2);
    id v30 = (id)AMSLogKey(v29);
    if (v30)
    {
      uint64_t v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v34 = v33;

      swift_bridgeObjectRetain(v34);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v35._uint64_t countAndFlagsBits = 0LL;
      v35._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      uint64_t v36 = v62;
      uint64_t v37 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t DynamicType = swift_getDynamicType(v37, v36, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v65 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v39._uint64_t countAndFlagsBits = 5972026LL;
      v39._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v65 = v32;
      uint64_t v66 = v34;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v40._uint64_t countAndFlagsBits = 93LL;
      v40._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v52._uint64_t countAndFlagsBits = 0LL;
      v52._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v52);
      uint64_t v53 = v62;
      uint64_t v54 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t v55 = swift_getDynamicType(v54, v53, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v55);
      uint64_t v65 = v55;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v56._uint64_t countAndFlagsBits = 58LL;
      v56._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(aBlock);
    LogMessage.init(stringLiteral:)(0xD000000000000031LL);
    uint64_t v62 = &type metadata for UInt;
    aBlock[0] = a1;
    static LogMessage.safe(_:)(aBlock);
    sub_10000DA68((uint64_t)aBlock, &qword_1001CAAD0);
    uint64_t v58 = static os_log_type_t.default.getter(v57);
    sub_1000BD1B0(v58, v28);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v9 = (void **)v7;
    if (qword_1001C7FE8 != -1) {
      swift_once(&qword_1001C7FE8, sub_1000BD768);
    }
    uint64_t v10 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v11 = type metadata accessor for LogMessage(0LL);
    uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v11 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v62 = (void *)type metadata accessor for SubscriptionsController();
    aBlock[0] = v2;
    uint64_t v13 = swift_retain(v2);
    id v14 = (id)AMSLogKey(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v60 = a1;
      uint64_t v17 = v16;
      uint64_t v19 = v18;

      swift_bridgeObjectRetain(v19);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v20._uint64_t countAndFlagsBits = 0LL;
      v20._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v20);
      Swift::String v21 = v62;
      uint64_t v22 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t v23 = swift_getDynamicType(v22, v21, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v23);
      uint64_t v65 = v23;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v24._uint64_t countAndFlagsBits = 5972026LL;
      v24._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v65 = v17;
      uint64_t v66 = v19;
      a1 = v60;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v25._uint64_t countAndFlagsBits = 93LL;
      v25._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v25);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v41._uint64_t countAndFlagsBits = 0LL;
      v41._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      uint64_t v42 = v62;
      id v43 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t v44 = swift_getDynamicType(v43, v42, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v44);
      uint64_t v65 = v44;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v65);
      sub_10000DA68((uint64_t)&v65, &qword_1001CAAD0);
      v45._uint64_t countAndFlagsBits = 58LL;
      v45._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v45);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(aBlock);
    LogMessage.init(stringLiteral:)(0xD000000000000029LL);
    uint64_t v62 = &type metadata for UInt;
    aBlock[0] = a1;
    static LogMessage.safe(_:)(aBlock);
    sub_10000DA68((uint64_t)aBlock, &qword_1001CAAD0);
    uint64_t v47 = static os_log_type_t.default.getter(v46);
    sub_1000BD1B0(v47, v12);
    swift_bridgeObjectRelease();
    sub_10012E344();
    id v48 = sub_10012F4A8(v9, 0LL);
    uint64_t v49 = swift_allocObject(&unk_1001B2168, 24LL, 7LL);
    swift_weakInit(v49 + 16, v2);
    uint64_t v50 = swift_allocObject(&unk_1001B21E0, 32LL, 7LL);
    *(void *)(v50 + swift_unknownObjectWeakDestroy(v0 + 16) = v49;
    *(void *)(v50 + 24) = a1;
    Swift::String v63 = sub_1001301F8;
    uint64_t v64 = v50;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1000B1D04;
    uint64_t v62 = &unk_1001B21F8;
    uint64_t v51 = _Block_copy(aBlock);
    swift_release();
    [v48 addSuccessBlock:v51];
    _Block_release(v51);
  }

uint64_t sub_10012E2D4(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  uint64_t v5 = *(void **)(a1 + 24);
  [v5 lock];
  sub_10012E770(a2, a3, &v7);
  [v5 unlock];
  swift_release();
  return v7;
}

void sub_10012E344()
{
  uint64_t v3 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v4);
  sub_10000DC74();
  uint64_t v5 = sub_10012E8A8(v3);
  if ((v6 & 1) != 0)
  {
    if (qword_1001C7FE8 != -1) {
      swift_once(&qword_1001C7FE8, sub_1000BD768);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = sub_10002C79C();
    uint64_t v17 = (__n128 *)sub_1001302A0(v16);
    uint64_t v42 = sub_1001302E4(v17, (__n128)xmmword_100164230);
    v41[0] = v0;
    uint64_t v18 = sub_10000DFF4();
    id v19 = (id)AMSLogKey(v18);
    if (v19)
    {
      Swift::String v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v23 = v22;

      swift_bridgeObjectRetain(v23);
      sub_100010564();
      sub_10000DC08();
      uint64_t v24 = v42;
      Swift::String v25 = sub_10000D37C(v41, v42);
      sub_10000DC54((uint64_t)v25, v24);
      uint64_t MetatypeMetadata = (void *)sub_1000BDBEC();
      uint64_t v38 = v24;
      sub_10000DEA4();
      sub_1000819D8((uint64_t)&v38);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v38 = v21;
      uint64_t v39 = v23;
      sub_10000DEA4();
      sub_1000819D8((uint64_t)&v38);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_1000090CC();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v32 = v42;
      uint64_t v33 = sub_10000D37C(v41, v42);
      uint64_t v34 = sub_10000DC54((uint64_t)v33, v32);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v34);
      uint64_t v38 = v34;
      sub_10000DEA4();
      sub_10000DA68((uint64_t)&v38, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v41);
    sub_10001A21C(44LL);
    sub_100048E08(0xD000000000000024LL, (uint64_t)"Failed to invalid cache for unknown ");
    sub_1001302C4((uint64_t)&type metadata for UInt);
    sub_10000DA68((uint64_t)v41, &qword_1001CAAD0);
    v35._uint64_t countAndFlagsBits = 0x746E656D67657320LL;
    v35._object = (void *)0xE800000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v35);
    uint64_t v36 = sub_10000DC5C();
    uint64_t v37 = static os_log_type_t.debug.getter(v36);
    sub_1000BD1B0(v37, (uint64_t)v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    Swift::UInt v7 = v5;
    if (qword_1001C7FE8 != -1) {
      swift_once(&qword_1001C7FE8, sub_1000BD768);
    }
    uint64_t v8 = qword_1001DBB68;
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v9 = sub_10002C79C();
    uint64_t v10 = (__n128 *)sub_10013027C(v9);
    uint64_t v42 = sub_1001302F0(v10, (__n128)xmmword_100164230);
    v41[0] = v0;
    uint64_t v11 = sub_10000DFF4();
    id v12 = (id)AMSLogKey(v11);
    if (v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      sub_1000C8DA8();
      sub_1000489DC();
      sub_100010564();
      sub_10000DC08();
      uint64_t v13 = v42;
      id v14 = sub_10000D37C(v41, v42);
      uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v15);
      uint64_t v38 = v15;
      sub_10000DEA4();
      sub_1000258CC((uint64_t)&v38);
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v38 = v8;
      uint64_t v39 = v1;
      sub_10000DEA4();
      sub_1000258CC((uint64_t)&v38);
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE74();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v26 = v42;
      uint64_t v27 = sub_10000D37C(v41, v42);
      sub_10000DC54((uint64_t)v27, v26);
      uint64_t MetatypeMetadata = (void *)sub_1000BDBEC();
      uint64_t v38 = v26;
      sub_10000DEA4();
      sub_10000DA68((uint64_t)&v38, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    sub_10000D3A0(v41);
    sub_10001A21C(31LL);
    v28._object = (void *)0x8000000100177D90LL;
    v28._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    sub_1001302C4((uint64_t)&type metadata for UInt);
    sub_10000DA68((uint64_t)v41, &qword_1001CAAD0);
    sub_10000DC08();
    uint64_t v29 = sub_10000DC5C();
    uint64_t v30 = static os_log_type_t.debug.getter(v29);
    sub_10008E510(v30);
    sub_10000DCFC();
    uint64_t v31 = sub_10000DFF4();
  }

  sub_10000DD84();
}

uint64_t sub_10012E770@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 33LL, 0LL);
  unint64_t v6 = sub_100030F88(a2);
  uint64_t v7 = 0LL;
  if ((v8 & 1) != 0)
  {
    unint64_t v9 = v6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    uint64_t v14 = *v5;
    uint64_t v11 = *v5;
    *uint64_t v5 = 0x8000000000000000LL;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10000D33C(&qword_1001C9D08);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    uint64_t v7 = *(void *)(*(void *)(v14 + 56) + 8 * v9);
    type metadata accessor for AMSSubscriptionEntitlementsMediaType(0LL);
    sub_10000DAA0(0LL, &qword_1001CEDA0, &OBJC_CLASS___AMSSubscriptionEntitlementsResult_ptr);
    sub_100007CD0( &qword_1001CEDA8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSSubscriptionEntitlementsMediaType,  (uint64_t)&unk_100163040);
    _NativeDictionary._delete(at:)(v9, v14);
    *uint64_t v5 = v14;
    swift_bridgeObjectRelease();
  }

  *a3 = v7;
  return swift_endAccess(v15);
}

uint64_t sub_10012E8A8(uint64_t a1)
{
  uint64_t result = 0LL;
  switch(a1)
  {
    case 0LL:
      uint64_t result = 3LL;
      break;
    case 1LL:
    case 4LL:
    case 5LL:
    case 6LL:
    case 7LL:
      uint64_t result = a1;
      break;
    case 2LL:
      return result;
    case 3LL:
      uint64_t result = 2LL;
      break;
    default:
      uint64_t result = 0LL;
      break;
  }

  return result;
}

void sub_10012E904()
{
  uint64_t v2 = v1;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v3);
  sub_10000DC74();
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = sub_10002C79C();
  uint64_t v5 = (__n128 *)sub_1001302A0(v4);
  uint64_t v32 = (void *)sub_1001302E4(v5, (__n128)xmmword_100164230);
  v31[0] = v0;
  uint64_t v6 = swift_retain(v0);
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    char v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRetain(v11);
    sub_100010564();
    sub_10000DC08();
    uint64_t v12 = (uint64_t)v32;
    uint64_t v13 = sub_10000D37C(v31, (uint64_t)v32);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    swift_getMetatypeMetadata(v14);
    sub_10000DF68();
    sub_100025958();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v28 = v9;
    uint64_t v29 = v11;
    sub_10000DF68();
    sub_100025958();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v15 = (uint64_t)v32;
    uint64_t v16 = sub_10000D37C(v31, (uint64_t)v32);
    uint64_t v17 = sub_10000DC54((uint64_t)v16, v15);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v17);
    uint64_t v28 = v17;
    uint64_t v18 = sub_10000DF68();
    sub_1001302FC(v18, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_100048888();
  sub_10001A21C(58LL);
  sub_100048E08(0xD000000000000039LL, (uint64_t)"Enqueuing SubscriptionChanged Engagement event (segment: ");
  uint64_t v32 = &type metadata for UInt;
  v31[0] = v2;
  sub_100029288();
  sub_10000DA68((uint64_t)v31, &qword_1001CAAD0);
  sub_10000DC4C(41LL);
  uint64_t v19 = sub_10000DC5C();
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  sub_1000BD1B0(v20, (uint64_t)v5);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v21, &v27);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = 0x6E696769726FLL;
  *(void *)(inited + 40) = 0xE600000000000000LL;
  strcpy((char *)(inited + 48), "amsengagementd");
  *(_BYTE *)(inited + 63) = -18;
  *(void *)(inited + 7sub_10000D3A0(v0 + 2) = &type metadata for String;
  *(void *)(inited + 80) = 0x707954746E657665LL;
  *(void *)(inited + 88) = 0xE900000000000065LL;
  *(void *)(inited + 96) = 0xD000000000000013LL;
  *(void *)(inited + 104) = 0x8000000100177D40LL;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0x746E656D676573LL;
  *(void *)(inited + 168) = &type metadata for UInt;
  *(void *)(inited + 136) = 0xE700000000000000LL;
  *(void *)(inited + 144) = v2;
  uint64_t v23 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v24 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  id v25 = [objc_allocWithZone(AMSEngagement) initWithBag:v24];

  sub_100054044(v23);
  sub_1000090CC();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  sub_10000DD84();
}

void sub_10012ECC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000D33C((uint64_t *)&unk_1001C9D20);
  sub_100007CD0( (unint64_t *)&qword_1001C86C0,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_100163BA4);
  uint64_t v27 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v1, v2, v3);
  id v4 = sub_10013022C(ASDSubscriptionEntitlementsActivityDidChangeNotification);
  sub_10003054C((uint64_t)v25, v4);
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
  id v5 = ASDSubscriptionEntitlementsNewsDidChangeNotification;
  sub_100130240(v5, v6, v7);
  id v8 = sub_10013022C(ASDSubscriptionEntitlementsAppStoreDidChangeNotification);
  sub_100130240(v8, v9, v10);
  id v11 = sub_10013022C(ASDSubscriptionEntitlementsTVDidChangeNotification);
  sub_100130240(v11, v12, v13);
  id v14 = sub_10013022C(ASDSubscriptionEntitlementsiCloudDidChangeNotification);
  sub_100130240(v14, v15, v16);
  id v17 = sub_10013022C(ASDSubscriptionEntitlementsPodcastDidChangeNotification);
  sub_100130240(v17, v18, v19);
  id v20 = sub_10013022C(ASDSubscriptionEntitlementsHWBundleDidChangeNotification);
  sub_100130240(v20, v21, v22);
  uint64_t v23 = v27;
  swift_bridgeObjectRetain(v27);
  sub_10012D2B8(v24, (void (*)(void *, uint64_t, uint64_t *))sub_100130190);
  swift_bridgeObjectRelease_n(v23, 2LL);
}

void sub_10012EE50(uint64_t a1, void **a2, uint64_t a3, void **a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = a2;
  sub_100092A2C(a3, (uint64_t)v61, &qword_1001CAAD0);
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + 2LL * *(void *)(v12 + 72),
          *(unsigned __int8 *)(v12 + 80) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v54 = (void *)type metadata accessor for SubscriptionsController();
  uint64_t v51 = a4;
  aBlock = a4;
  uint64_t v14 = swift_retain(a4);
  id v15 = (id)AMSLogKey(v14);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v50 = a2;
    uint64_t v18 = a1;
    uint64_t v20 = v19;

    swift_bridgeObjectRetain(v20);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v21._uint64_t countAndFlagsBits = 0LL;
    v21._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v21);
    uint64_t v22 = v54;
    uint64_t v23 = sub_10000D37C(&aBlock, (uint64_t)v54);
    uint64_t DynamicType = swift_getDynamicType(v23, v22, 1LL);
    *((void *)&v58 + setenv("JavaScriptCoreUseJIT", "0", 1) = swift_getMetatypeMetadata(DynamicType);
    *(void *)&__int128 v57 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v57);
    sub_10000DA68((uint64_t)&v57, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 5972026LL;
    v25._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    *((void *)&v58 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
    *(void *)&__int128 v57 = v17;
    *((void *)&v57 + setenv("JavaScriptCoreUseJIT", "0", 1) = v20;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v57);
    sub_10000DA68((uint64_t)&v57, &qword_1001CAAD0);
    v26._uint64_t countAndFlagsBits = 93LL;
    v26._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    LogMessage.init(stringInterpolation:)(v10);
    a1 = v18;
    a2 = v50;
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v27._uint64_t countAndFlagsBits = 0LL;
    v27._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    uint64_t v28 = v54;
    uint64_t v29 = sub_10000D37C(&aBlock, (uint64_t)v54);
    uint64_t v30 = swift_getDynamicType(v29, v28, 1LL);
    *((void *)&v58 + setenv("JavaScriptCoreUseJIT", "0", 1) = swift_getMetatypeMetadata(v30);
    *(void *)&__int128 v57 = v30;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v57);
    sub_10000DA68((uint64_t)&v57, &qword_1001CAAD0);
    v31._uint64_t countAndFlagsBits = 58LL;
    v31._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v31);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&aBlock);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 1LL);
  v32._uint64_t countAndFlagsBits = 0x6E6976726573624FLL;
  v32._object = (void *)0xEA00000000002067LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v54 = &type metadata for String;
  aBlock = (void **)v33;
  v53[0] = v34;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&aBlock);
  sub_10000DA68((uint64_t)&aBlock, &qword_1001CAAD0);
  v35._uint64_t countAndFlagsBits = 0x7365676E61686320LL;
  v35._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v35);
  uint64_t v36 = LogMessage.init(stringInterpolation:)(v10);
  uint64_t v37 = static os_log_type_t.info.getter(v36);
  sub_1000BD1B0(v37, v13);
  swift_bridgeObjectRelease();
  id v38 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  aBlock = a2;
  sub_100092A2C((uint64_t)v61, (uint64_t)v53, &qword_1001CAAD0);
  uint64_t v39 = v55;
  if (v55)
  {
    Swift::String v40 = sub_10000D37C(v53, (uint64_t)v55);
    uint64_t v41 = *((void *)v39 - 1);
    __chkstk_darwin(v40);
    id v43 = (char *)&v50 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v41 + 16))(v43);
    uint64_t v44 = _bridgeAnythingToObjectiveC<A>(_:)(v43, v39);
    (*(void (**)(char *, uint64_t (*)(uint64_t)))(v41 + 8))(v43, v39);
    sub_10000D3A0(v53);
  }

  else
  {
    uint64_t v44 = 0LL;
  }

  uint64_t v45 = swift_allocObject(&unk_1001B2168, 24LL, 7LL);
  swift_weakInit(v45 + 16, v51);
  *(void *)&__int128 v57 = a2;
  sub_100092A2C((uint64_t)v61, (uint64_t)&v57 + 8, &qword_1001CAAD0);
  uint64_t v46 = swift_allocObject(&unk_1001B2190, 64LL, 7LL);
  __int128 v47 = v58;
  *(_OWORD *)(v46 + 24) = v57;
  *(void *)(v46 + swift_unknownObjectWeakDestroy(v0 + 16) = v45;
  *(_OWORD *)(v46 + 40) = v47;
  *(void *)(v46 + 56) = v59;
  uint64_t v55 = sub_1001301EC;
  uint64_t v56 = v46;
  aBlock = _NSConcreteStackBlock;
  v53[0] = 1107296256LL;
  v53[1] = sub_10012F404;
  uint64_t v54 = &unk_1001B21A8;
  id v48 = _Block_copy(&aBlock);
  swift_release();
  id v49 = [v38 addObserverForName:a1 object:v44 queue:0 usingBlock:v48];
  _Block_release(v48);
  swift_unknownObjectRelease(v49);

  swift_unknownObjectRelease(v44);
  sub_10000DA68((uint64_t)&v60, (uint64_t *)&unk_1001C9D20);
}

uint64_t sub_10012F3A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    sub_10012DCA4(*a3);
    return swift_release();
  }

  return result;
}

uint64_t sub_10012F404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Notification(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void (**)(char *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_10012F4A8(void **a1, void **a2)
{
  uint64_t v4 = v2;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DC74();
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  uint64_t v8 = qword_1001DBB68;
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = sub_10002C79C();
  uint64_t v10 = (__n128 *)sub_10013027C(v9);
  uint64_t v30 = (void *)sub_1001302F0(v10, (__n128)xmmword_100164230);
  uint64_t v28 = v2;
  uint64_t v11 = sub_10002588C();
  id v12 = (id)AMSLogKey(v11);
  if (v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    sub_1000C8DA8();
    sub_1000489DC();
    sub_100010564();
    sub_10000DC08();
    uint64_t v13 = (uint64_t)v30;
    uint64_t v14 = sub_10000D37C(&v28, (uint64_t)v30);
    uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v15);
    v33[0] = v15;
    sub_10000DCE8();
    sub_1000258CC((uint64_t)v33);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v33[0] = v8;
    v33[1] = v3;
    sub_10000DCE8();
    sub_1000258CC((uint64_t)v33);
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DE74();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v16 = (uint64_t)v30;
    uint64_t v17 = sub_10000D37C(&v28, (uint64_t)v30);
    sub_10000DC54((uint64_t)v17, v16);
    uint64_t MetatypeMetadata = (void *)sub_1000BDBEC();
    v33[0] = v16;
    sub_10000DCE8();
    sub_10000DA68((uint64_t)v33, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(&v28);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(40LL, 2LL);
  v18._object = (void *)0x8000000100177C00LL;
  v18._uint64_t countAndFlagsBits = 0xD000000000000019LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v18);
  uint64_t v30 = &type metadata for Int;
  uint64_t v28 = a1;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v28);
  sub_1000819D8((uint64_t)&v28);
  sub_10013024C();
  uint64_t v30 = &type metadata for Int;
  uint64_t v28 = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v28);
  sub_1000819D8((uint64_t)&v28);
  sub_10000DC4C(41LL);
  uint64_t v19 = sub_10000DC5C();
  uint64_t v20 = static os_log_type_t.debug.getter(v19);
  sub_10008E510(v20);
  sub_10000DCFC();
  id v21 = [objc_allocWithZone(AMSSubscriptionEntitlementsTask) initWithMediaType:a1];
  [v21 setCachePolicy:a2];
  id v22 = [v21 performExternalLookup];
  uint64_t v23 = sub_10000DDDC((uint64_t)&unk_1001B20C8, 32LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v23 + 24) = a1;
  Swift::String v31 = sub_1001300E8;
  Swift::String v32 = (void *)v23;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256LL;
  uint64_t v24 = sub_100051A7C((uint64_t)sub_1000B1D04);
  sub_10002588C();
  swift_release();
  [v22 addSuccessBlock:v24];
  _Block_release(v24);
  Swift::String v25 = (void *)sub_10000DDDC((uint64_t)&unk_1001B2118, 40LL);
  _OWORD v25[2] = v4;
  void v25[3] = a1;
  v25[4] = a2;
  Swift::String v31 = sub_100130128;
  Swift::String v32 = v25;
  uint64_t v28 = _NSConcreteStackBlock;
  uint64_t v29 = 1107296256LL;
  Swift::String v26 = sub_100051A7C((uint64_t)sub_1000B1D04);
  sub_10002588C();
  swift_release();
  [v22 addErrorBlock:v26];
  _Block_release(v26);

  return v22;
}

uint64_t sub_10012F864(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a2 + 24);
  swift_retain(a2);
  id v7 = a1;
  [v6 lock];
  sub_10012F8DC(a2, a3, v7);
  [v6 unlock];

  return swift_release();
}

uint64_t sub_10012F8DC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  v38[1] = qword_1001DBB68;
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = type metadata accessor for LogMessage(0LL);
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v10 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v42 = (void *)type metadata accessor for SubscriptionsController();
  v41[0] = a1;
  uint64_t v12 = swift_retain(a1);
  id v13 = (id)AMSLogKey(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;

    swift_bridgeObjectRetain(v17);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = v42;
    uint64_t v20 = sub_10000D37C(v41, (uint64_t)v42);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v39[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000DA68((uint64_t)v39, &qword_1001CAAD0);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    uint64_t MetatypeMetadata = &type metadata for String;
    v39[0] = v15;
    v39[1] = v17;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000DA68((uint64_t)v39, &qword_1001CAAD0);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    Swift::String v25 = v42;
    Swift::String v26 = sub_10000D37C(v41, (uint64_t)v42);
    uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
    v39[0] = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v39);
    sub_10000DA68((uint64_t)v39, &qword_1001CAAD0);
    v28._uint64_t countAndFlagsBits = 58LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v8);
  }

  sub_10000D3A0(v41);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(27LL, 2LL);
  v29._object = (void *)0x8000000100177C50LL;
  v29._uint64_t countAndFlagsBits = 0xD000000000000012LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  uint64_t v42 = &type metadata for Int;
  v41[0] = a2;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
  sub_10000DA68((uint64_t)v41, &qword_1001CAAD0);
  v30._uint64_t countAndFlagsBits = 0x3A746C7573657220LL;
  v30._object = (void *)0xE900000000000020LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  id v31 = [a3 exportObject];
  uint64_t v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v31,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  uint64_t v42 = (void *)sub_10000D33C(&qword_1001C8E58);
  v41[0] = v32;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
  sub_10000DA68((uint64_t)v41, &qword_1001CAAD0);
  v33._uint64_t countAndFlagsBits = 0LL;
  v33._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v33);
  uint64_t v34 = LogMessage.init(stringInterpolation:)(v8);
  uint64_t v35 = static os_log_type_t.debug.getter(v34);
  sub_1000BD1B0(v35, v11);
  swift_bridgeObjectRelease();
  swift_beginAccess(a1 + 16, v41, 33LL, 0LL);
  id v36 = a3;
  sub_100034430();
  return swift_endAccess(v41);
}

uint64_t sub_10012FC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001C7FE8 != -1) {
    swift_once(&qword_1001C7FE8, sub_1000BD768);
  }
  v41[1] = qword_1001DBB68;
  uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v12 = type metadata accessor for LogMessage(0LL);
  uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
        + 4LL * *(void *)(*(void *)(v12 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1001649D0;
  id v48 = (void *)type metadata accessor for SubscriptionsController();
  uint64_t v46 = a2;
  uint64_t v14 = swift_retain(a2);
  id v15 = (id)AMSLogKey(v14);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    uint64_t v19 = v18;

    swift_bridgeObjectRetain(v19);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v20._uint64_t countAndFlagsBits = 0LL;
    v20._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v20);
    id v21 = v48;
    Swift::String v22 = sub_10000D37C(&v46, (uint64_t)v48);
    uint64_t DynamicType = swift_getDynamicType(v22, v21, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
    v44[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    v24._uint64_t countAndFlagsBits = 5972026LL;
    v24._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t MetatypeMetadata = &type metadata for String;
    v44[0] = v17;
    v44[1] = v19;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    v25._uint64_t countAndFlagsBits = 93LL;
    v25._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v25);
    LogMessage.init(stringInterpolation:)(v10);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = v48;
    Swift::String v28 = sub_10000D37C(&v46, (uint64_t)v48);
    uint64_t v29 = swift_getDynamicType(v28, v27, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v29);
    v44[0] = v29;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
    sub_10000DA68((uint64_t)v44, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 58LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v10);
  }

  sub_10000D3A0(&v46);
  LogMessage.init(stringLiteral:)(0xD000000000000029LL);
  swift_getErrorValue(a1, v43);
  uint64_t v31 = v41[2];
  uint64_t v32 = v42;
  id v48 = v42;
  Swift::String v33 = sub_10000D63C(&v46);
  (*(void (**)(void *, uint64_t, void *))(*(v32 - 1) + 16LL))(v33, v31, v32);
  static LogMessage.safe(_:)(&v46);
  sub_10000DA68((uint64_t)&v46, &qword_1001CAAD0);
  uint64_t v46 = 0LL;
  unint64_t v47 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  swift_bridgeObjectRelease();
  uint64_t v46 = 0x203A6570797428LL;
  unint64_t v47 = 0xE700000000000000LL;
  v44[0] = a3;
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 0x6F50656863616320LL;
  v35._object = (void *)0xEE00203A7963696CLL;
  String.append(_:)(v35);
  v44[0] = a4;
  v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 41LL;
  v37._object = (void *)0xE100000000000000LL;
  String.append(_:)(v37);
  id v48 = &type metadata for String;
  static LogMessage.safe(_:)(&v46);
  sub_10000DA68((uint64_t)&v46, &qword_1001CAAD0);
  uint64_t v39 = static os_log_type_t.error.getter(v38);
  sub_1000BD1B0(v39, v13);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SubscriptionsController()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd23SubscriptionsController);
}

uint64_t sub_1001300C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001300E8(void *a1)
{
  return sub_10012F864(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001300F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100130100(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100130108()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100130128(uint64_t a1)
{
  return sub_10012FC9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100130134(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10012E904();
    return swift_release();
  }

  return result;
}

void sub_100130190(uint64_t a1, void **a2, uint64_t a3)
{
}

uint64_t sub_100130198()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001301BC()
{
  if (*(void *)(v0 + 56)) {
    sub_10000D3A0((void *)(v0 + 32));
  }
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1001301EC(uint64_t a1)
{
  return sub_10012F3A8(a1, *(void *)(v1 + 16), (uint64_t *)(v1 + 24));
}

uint64_t sub_1001301F8(uint64_t a1)
{
  return sub_100130134(a1, *(void *)(v1 + 16));
}

void sub_100130200()
{
}

id sub_10013022C@<X0>(void *a1@<X8>)
{
  return a1;
}

void sub_100130240(void *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_10013024C()
{
  v0._uint64_t countAndFlagsBits = 0x6F50656863616320LL;
  v0._object = (void *)0xEE00203A7963696CLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_100130270()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10013027C(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1001302A0(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1001302C4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 112);
}

uint64_t sub_1001302D4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1001302E4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for SubscriptionsController();
}

uint64_t sub_1001302F0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for SubscriptionsController();
}

void sub_1001302FC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100130304()
{
  uint64_t v1 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = type metadata accessor for LogMessage(0LL);
  uint64_t v4 = swift_allocObject( v2,  ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL))
       + 2LL * *(void *)(*(void *)(v3 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v22 = sub_10000D33C(&qword_1001CEE48);
  v21[0] = v0;
  id v5 = (id)AMSLogKey(v22);
  if (v5)
  {
    uint64_t v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;

    swift_bridgeObjectRetain(v8);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    sub_10000DC08();
    uint64_t v9 = v22;
    uint64_t v10 = sub_10000D37C(v21, v22);
    uint64_t DynamicType = swift_getDynamicType(v10, v9, 1LL);
    swift_getMetatypeMetadata(DynamicType);
    sub_10000DCE8();
    sub_10000E8FC();
    v12._uint64_t countAndFlagsBits = 5972026LL;
    v12._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v12);
    sub_10000DCE8();
    sub_10000E8FC();
    v13._uint64_t countAndFlagsBits = 93LL;
    v13._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v13);
    sub_1000E2D10();
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    sub_10000DC08();
    uint64_t v14 = v22;
    id v15 = sub_10000D37C(v21, v22);
    uint64_t v16 = swift_getDynamicType(v15, v14, 1LL);
    swift_getMetatypeMetadata(v16);
    sub_10000DCE8();
    sub_10000E8FC();
    v17._uint64_t countAndFlagsBits = 58LL;
    v17._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v17);
    sub_1000E2D10();
  }

  sub_10000D3A0(v21);
  uint64_t v18 = LogMessage.init(stringLiteral:)(0xD00000000000004CLL);
  if (qword_1001C7F80 != -1) {
    uint64_t v18 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  sub_1000BD1B0(v19, v4);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SyncAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10SyncAction);
}

uint64_t sub_100130578( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&__int128 v140 = 0x736E6F69746361LL;
  *((void *)&v140 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0xE700000000000000LL;
  uint64_t v8 = sub_100068DA8( a1,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  a4,  a5,  a6,  a7,  a8);
  sub_10008BF08(v8, v9, v10, v11, v12, v13, v14, v15, v130, v134[0], v134[1], v135, v136, v137, v138, v139, v140);
  uint64_t v19 = sub_100068DA0(v16, v17, v18);
  if (v141)
  {
    uint64_t v27 = sub_10000D33C(&qword_1001CA898);
    sub_1001307B4(v27, v28);
    sub_1001307CC();
    if (v31) {
      uint64_t v32 = 0LL;
    }
    else {
      uint64_t v32 = v30;
    }
  }

  else
  {
    uint64_t v29 = sub_100068D8C(v19, v20, v21, v22, v23, v24, v25, v26);
    uint64_t v32 = 0LL;
  }

  strcpy((char *)v134, "allowedEvents");
  HIWORD(v134[1]) = -4864;
  uint64_t v33 = sub_100068D94(v29, &type metadata for String, &protocol witness table for String);
  sub_10008BF08(v33, v34, v35, v36, v37, v38, v39, v40, v131, v134[0], v134[1], v135, v136, v137, v138, v139, v140);
  uint64_t v44 = sub_100068DA0(v41, v42, v43);
  if (!v141)
  {
    uint64_t v54 = sub_100068D8C(v44, v45, v46, v47, v48, v49, v50, v51);
LABEL_10:
    uint64_t v60 = sub_100068D94(v54, &type metadata for String, &protocol witness table for String);
    sub_10008BF08( v60,  v61,  v62,  v63,  v64,  v65,  v66,  v67,  v132,  0xD000000000000011LL,  0x800000010016DEC0LL,  v135,  v136,  v137,  v138,  v139,  v140);
    uint64_t v71 = sub_100068DA0(v68, v69, v70);
    if (v141)
    {
      uint64_t v79 = sub_10000D33C(&qword_1001CA898);
      sub_1001307B4(v79, v80);
      sub_1001307CC();
    }

    else
    {
      uint64_t v54 = sub_100068D8C(v71, v72, v73, v74, v75, v76, v77, v78);
    }

    goto LABEL_13;
  }

  uint64_t v52 = sub_10000D33C(&qword_1001CA898);
  uint64_t v54 = sub_1001307B4(v52, v53);
  if (!(_DWORD)v54) {
    goto LABEL_10;
  }
LABEL_13:
  *(void *)&__int128 v140 = 0x676F6C6B636162LL;
  *((void *)&v140 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0xE700000000000000LL;
  uint64_t v81 = sub_100068DA8( v54,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v55,  v56,  v57,  v58,  v59);
  sub_10008BF08(v81, v82, v83, v84, v85, v86, v87, v88, v132, v134[0], v134[1], v135, v136, v137, v138, v139, v140);
  uint64_t v92 = sub_100068DA0(v89, v90, v91);
  if (v141)
  {
    uint64_t v100 = sub_10000D33C(&qword_1001C8E58);
    sub_1001307B4(v100, v101);
    sub_1001307CC();
  }

  else
  {
    uint64_t v102 = sub_100068D8C(v92, v93, v94, v95, v96, v97, v98, v99);
  }

  *(void *)&__int128 v140 = 0xD000000000000016LL;
  *((void *)&v140 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0x800000010016BF10LL;
  uint64_t v108 = sub_100068DA8( v102,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v103,  v104,  v105,  v106,  v107);
  sub_10008BF08( v108,  v109,  v110,  v111,  v112,  v113,  v114,  v115,  v133,  v134[0],  v134[1],  v135,  v136,  v137,  v138,  v139,  v140);
  uint64_t v116 = swift_bridgeObjectRelease();
  uint64_t v119 = sub_100068DA0(v116, v117, v118);
  if (v141)
  {
    uint64_t v127 = sub_10000D33C(&qword_1001CDF50);
    sub_1001307B4(v127, v128);
    sub_1001307CC();
  }

  else
  {
    sub_100068D8C(v119, v120, v121, v122, v123, v124, v125, v126);
  }

  return v32;
}

uint64_t sub_1001307B4(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v2 + 8, a1, 6LL);
}

  ;
}

uint64_t sub_1001307D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v35 = *v1;
  uint64_t v4 = type metadata accessor for OSSignposter(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v8 = *(void *)(v36 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v36);
  uint64_t v11 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v35 - v12;
  if (qword_1001C7FB8 != -1) {
    swift_once(&qword_1001C7FB8, sub_1000BD55C);
  }
  uint64_t v14 = OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB38 + 16));
  uint64_t v15 = OSSignposter.logHandle.getter(v14);
  swift_unknownObjectRetain(v2);
  OSSignpostID.init(log:object:)(v15, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v16 = sub_10000D33C(&qword_1001C8BC0);
  uint64_t inited = swift_initStackObject(v16, v40);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = 0x747865746E6F63LL;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  uint64_t v18 = sub_100131A28(a1);
  *(void *)(inited + 7sub_10000D3A0(v0 + 2) = sub_10000D33C(&qword_1001C8E58);
  if (!v18) {
    uint64_t v18 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  *(void *)(inited + 48) = v18;
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v41 = v19;
  id v20 = [a1 origin];
  if (v20)
  {
    id v21 = v20;
    type metadata accessor for AMSEngagementSyncRequestOrigin(0LL);
    uint64_t v38 = v22;
    v37[0] = v21;
    sub_100030118((uint64_t)v37, 0x6E696769726FLL, 0xE600000000000000LL);
    uint64_t v19 = v41;
  }

  uint64_t v23 = v2[17];
  uint64_t v24 = v2[18];
  unsigned __int8 v25 = *((_BYTE *)v2 + 152);
  sub_10006B6DC(v23, v24, v25);
  sub_10007CF50(v19);
  sub_10006B6F0(v23, v24, v25);
  sub_10000DE74();
  uint64_t v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v36);
  uint64_t v27 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v28 = (v27 + 24) & ~v27;
  unint64_t v29 = (v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v30 = swift_allocObject(&unk_1001B2270, v29 + 8, v27 | 7);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v30 + v28, v11, v26);
  *(void *)(v30 + v2sub_10000D3A0(v0 + 9) = v35;
  uint64_t v38 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v39 = &protocol witness table for SyncTaskScheduler;
  sub_10000D63C(v37);
  uint64_t v31 = swift_retain(v2);
  SyncTaskScheduler.init()(v31);
  unint64_t v32 = sub_100131B80();
  uint64_t v33 = Promise.map<A>(on:_:)(v37, sub_100131B10, v30, v32);
  sub_1000292C4();
  swift_release(v30);
  sub_10000D3A0(v37);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v26);
  return v33;
}

void sub_100130B44(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v36 = a3;
  uint64_t v37 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OSSignposter(0LL);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100054044(*a1);
  uint64_t v19 = sub_100130578(v11, v12, v13, v14, v15, v16, v17, v18);
  uint64_t v21 = (uint64_t)v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  sub_100131090(v19, v20, v22, v24);
  memcpy(__dst, (const void *)(a2 + 56), sizeof(__dst));
  sub_100130E48(v19, v21, v23, v25, (uint64_t)__dst);
  id v26 = [objc_allocWithZone(AMSEngagementSyncResult) init];
  if (!v19)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v19 + 16))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  if (qword_1001C7FB8 != -1) {
    swift_once(&qword_1001C7FB8, sub_1000BD55C);
  }
  OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB38 + 16));
  swift_bridgeObjectRetain(v19);
  uint64_t v28 = (os_log_s *)OSSignposter.logHandle.getter(v27);
  os_signpost_type_t v29 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v30 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v7, v36, v37);
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v31 = 134217984;
    uint64_t v43 = *(void *)(v19 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v31 + 4, v31 + 12);
    uint64_t v32 = swift_bridgeObjectRelease();
    os_signpost_id_t v33 = OSSignpostID.rawValue.getter(v32);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v28,  v29,  v33,  "ActionRunner",  "Actions running: %ld",  v31,  0xCu);
    swift_slowDealloc(v31, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v30);
  }

  else
  {

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  }

  type metadata accessor for ActionRunner();
  uint64_t v34 = sub_10000E174(v19);
  swift_bridgeObjectRelease();
  sub_10006B848((uint64_t)v34, v26);
LABEL_11:
  *uint64_t v41 = v26;
}

void sub_100130E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v21 = [(id)objc_opt_self(AMSEngagementClientData) loadFromDisk];
  uint64_t v7 = sub_100131BBC(v21);
  uint64_t v9 = v8;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  id v11 = [v10 buildVersion];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  if (!v9)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  if (v7 == v12 && v9 == v14)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v12, v14, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0)
  {
LABEL_9:
    id v17 = [v10 buildVersion];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    sub_100131C1C(v18, v20, v21);
    if (a2) {
      goto LABEL_13;
    }
    [v21 saveToDisk];
    goto LABEL_14;
  }

LABEL_12:
  if (a2)
  {
LABEL_13:
    sub_10000D33C(&qword_1001C8E58);
    Array._bridgeToObjectiveC()();
    __asm { BR              X10 }
  }

  *a5 = 0;
}

uint64_t sub_100131090(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v91 = a3;
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(v6 + 16, v103, 0LL, 0LL);
  uint64_t v12 = sub_10006B5EC(v6 + 16, (uint64_t)&v105);
  if (!v107) {
    return sub_10008E49C(v12, &qword_1001CA748);
  }
  uint64_t v84 = a4;
  sub_100019F60(&v105, (uint64_t)v104);
  int v92 = *(unsigned __int8 *)(v6 + 57);
  uint64_t v13 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v14 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v93 = v15;
  uint64_t v90 = v13;
  uint64_t v88 = v17 + 2 * v15;
  uint64_t v87 = v16 | 7;
  uint64_t v18 = swift_allocObject(v13, v88, v16 | 7);
  __int128 v86 = xmmword_100164230;
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v89 = v17;
  uint64_t v85 = type metadata accessor for SyncRunner();
  uint64_t v107 = (void *)v85;
  uint64_t v19 = sub_100131CD8();
  id v20 = (id)AMSLogKey(v19);
  if (v20)
  {
    sub_100048C54((uint64_t)v20);
    sub_100131CFC();
    swift_bridgeObjectRetain(v5);
    sub_100131CC8();
    sub_10001A224();
    sub_100131C6C();
    uint64_t v21 = sub_1000258E8();
    sub_100131C90(v21);
    sub_100131CA0();
    sub_10000DC14();
    uint64_t v102 = &type metadata for String;
    uint64_t v100 = a2;
    uint64_t v101 = v5;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v100);
    sub_100131CA0();
    sub_10000DC4C(93LL);
    sub_10001A410();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_10001A224();
    sub_100131C6C();
    uint64_t v23 = sub_1000258E8();
    sub_100131C90(v23);
    sub_1000102E0((uint64_t)&v100, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10001A410();
  }

  sub_10000D3A0(&v105);
  sub_10001A21C(26LL);
  v24._object = (void *)0x800000010016DFE0LL;
  v24._uint64_t countAndFlagsBits = 0xD000000000000017LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v24);
  uint64_t v107 = &unk_1001A8968;
  LOBYTE(v105) = v92;
  uint64_t v25 = LogMessage.StringInterpolation.appendInterpolation(safe:)(&v105);
  sub_10008E49C(v25, &qword_1001CAAD0);
  v26._uint64_t countAndFlagsBits = 3026478LL;
  v26._object = (void *)0xE300000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v26);
  uint64_t v27 = sub_10001A410();
  if (qword_1001C7F80 != -1) {
    uint64_t v27 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  sub_1000BD1B0(v28, v18);
  sub_1000090CC();
  id v29 = &type metadata for Any;
  if (a2)
  {
    uint64_t v5 = a2[2];
    uint64_t v30 = _swiftEmptyArrayStorage;
    if (v5)
    {
      v83[0] = v6;
      v83[1] = v11;
      uint64_t v100 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(a2);
      sub_1000170BC();
      uint64_t v31 = v100;
      id v95 = (id)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
      uint64_t v32 = 0LL;
      uint64_t v33 = 0LL;
      uint64_t v94 = (char *)&type metadata for Any + 8;
      while (1)
      {
        uint64_t v34 = v31;
        swift_bridgeObjectRetain(a2[v32 + 4]);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(void *)&__int128 v105 = 0LL;
        id v36 = [v95 dataWithJSONObject:isa options:0 error:&v105];

        id v37 = (id)v105;
        if (!v36)
        {
          id v29 = v37;
          uint64_t v43 = _convertNSErrorToError(_:)(v37);

          swift_willThrow(v51);
          sub_10000DDF8();
          swift_release(v34);
          sub_10000DCFC();
          goto LABEL_21;
        }

        uint64_t v38 = v5;
        uint64_t v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        id v29 = v40;

        uint64_t v41 = type metadata accessor for JSONDecoder(0LL);
        sub_100029350(v41);
        JSONDecoder.init()();
        unint64_t v42 = sub_1000285A0();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(&unk_1001A9078, v39, v29, &unk_1001A9078, v42);
        uint64_t v43 = v33;
        if (v33) {
          break;
        }
        uint64_t v96 = 0LL;
        uint64_t v44 = a2;
        sub_100131CE4();
        sub_10000DCFC();
        sub_1000292C4();
        char v45 = v105;
        uint64_t v46 = *((void *)&v105 + 1);
        char v47 = v106;
        uint64_t v48 = v107;
        uint64_t v31 = v34;
        uint64_t v100 = v34;
        unint64_t v49 = v34[2];
        if (v49 >= v31[3] >> 1)
        {
          sub_1000170BC();
          uint64_t v31 = v100;
        }

        v31[2] = v49 + 1;
        uint64_t v50 = &v31[4 * v49];
        *((_BYTE *)v50 + 3sub_10000D3A0(v0 + 2) = v45;
        ++v32;
        v50[5] = v46;
        *((_BYTE *)v50 + 48) = v47;
        v50[7] = v48;
        uint64_t v5 = v38;
        a2 = v44;
        uint64_t v33 = v96;
        if (v38 == v32)
        {
          uint64_t v30 = v31;
          sub_10000DDF8();
          sub_100131CAC();
          id v29 = &type metadata for Any;
          goto LABEL_22;
        }
      }

      sub_100131CE4();
      sub_10000DDF8();
      swift_release(v34);
      sub_10000DCFC();
      sub_1000292C4();
LABEL_21:
      sub_100131CAC();
      goto LABEL_28;
    }

    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = 0LL;
    uint64_t v30 = _swiftEmptyArrayStorage;
  }

void sub_100131994()
{
  uint64_t v1 = *(void **)(v0 + 64);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10006B6F0(*(void *)(v0 + 136), *(void *)(v0 + 144), *(_BYTE *)(v0 + 152));
  sub_10000DFE8();
}

uint64_t sub_1001319E8()
{
  return swift_deallocClassInstance(v0, 153LL, 7LL);
}

uint64_t type metadata accessor for SyncRunner()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd10SyncRunner);
}

uint64_t sub_100131A28(void *a1)
{
  id v1 = [a1 context];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  return v3;
}

uint64_t sub_100131A90()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100131B10(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OSSignpostID(0LL) - 8) + 80LL);
  sub_100130B44(a1, *(void *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

unint64_t sub_100131B80()
{
  unint64_t result = qword_1001CA720;
  if (!qword_1001CA720)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSEngagementSyncResult);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001CA720);
  }

  return result;
}

uint64_t sub_100131BBC(void *a1)
{
  id v1 = [a1 lastSyncedBuild];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100131C1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setLastSyncedBuild:v5];
}

uint64_t sub_100131C6C()
{
  uint64_t v1 = *(void *)(v0 - 128);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 152), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_100131C90(uint64_t a1)
{
  *(void *)(v2 - 224) = a1;
  *(void *)(v2 - 248) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 248);
}

uint64_t sub_100131CA0()
{
  return sub_1000102E0(v1 - 248, v0);
}

  ;
}

uint64_t sub_100131CC8()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
}

uint64_t sub_100131CD8()
{
  *(void *)(v1 - 15sub_10000D3A0(v0 + 2) = v0;
  return swift_retain(v0);
}

uint64_t sub_100131CE4()
{
  return sub_10001BD84(v1, v0);
}

uint64_t sub_100131CF0()
{
  return sub_10001BD84(v1, v0);
}

void sub_100131CFC()
{
}

uint64_t sub_100131D08(unsigned __int8 a1, void (*a2)(void))
{
  if (qword_1001C80E8 != -1) {
    swift_once(&qword_1001C80E8, sub_100131F04);
  }
  uint64_t v4 = sub_100131DD4(a1);
  uint64_t v6 = v5;
  sub_100132364(v4, v5);
  uint64_t v7 = objc_autoreleasePoolPush();
  a2();
  objc_autoreleasePoolPop(v7);
  sub_100133128(v4, v6);
  return swift_bridgeObjectRelease();
}

void sub_100131DB8(uint64_t a1)
{
}

uint64_t sub_100131DD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100131E10
                                                                     + 4 * asc_1001690C0[a1]))( 0xD000000000000014LL,  0x8000000100177F70LL);
}

uint64_t sub_100131E10()
{
  return 0x74536E6F6D656164LL;
}

unint64_t sub_100131E34()
{
  return 0xD000000000000013LL;
}

uint64_t sub_100131E50()
{
  return 0x696669746E656469LL;
}

uint64_t sub_100131E74()
{
  return 0x4D6B726F7774656ELL;
}

uint64_t sub_100131E98()
{
  return 0x6144726576726573LL;
}

uint64_t sub_100131EBC()
{
  return 0x6F69736E65747865LL;
}

uint64_t sub_100131EE0()
{
  return 0x624F796C696D6166LL;
}

void sub_100131F04()
{
  uint64_t v0 = type metadata accessor for TransactionStore(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_100131F40(5.0);
  qword_1001DBBF8 = v1;
  sub_100009044();
}

uint64_t sub_100131F40(double a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC8C();
  __chkstk_darwin(v6);
  sub_10006725C();
  sub_10000DC8C();
  __chkstk_darwin(v7);
  sub_10000DE7C();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10000DE7C();
  uint64_t v15 = v14 - v13;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v12 + 104))( v15,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v11);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = v17;
  uint64_t v19 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_1000253B0((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v19, v20, v5, v18);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000028LL,  0x8000000100177F40LL,  v10,  v2,  v15,  0LL);
  if (qword_1001C7FF0 != -1) {
    swift_once(&qword_1001C7FF0, sub_1000BD7C4);
  }
  OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB70 + 16));
  uint64_t v21 = OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSet;
  *(void *)(v3 + v2setenv("JavaScriptCoreUseJIT", "0", 1) = [objc_allocWithZone(NSCountedSet) init];
  uint64_t v22 = OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSignpostStateStore;
  uint64_t v23 = type metadata accessor for OSSignpostIntervalState(0LL);
  *(void *)(v3 + v2sub_10000D3A0(v0 + 2) = sub_10013422C(v23, v24, v23);
  uint64_t v25 = OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionStore;
  uint64_t v26 = sub_10000D33C(&qword_1001C9D00);
  uint64_t result = sub_10013422C(v26, v27, v26);
  *(void *)(v3 + v25) = result;
  if ((~*(void *)&a1 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (a1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (a1 < 9.22337204e18)
  {
    uint64_t v29 = v3 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_holdTime;
    *(void *)(v3 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_holdTime) = (uint64_t)a1;
    uint64_t v30 = enum case for DispatchTimeInterval.seconds(_:);
    uint64_t v31 = type metadata accessor for DispatchTimeInterval(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104LL))(v29, v30, v31);
    return v3;
  }

void sub_10013222C()
{
  uint64_t v1 = sub_10000DAA0(0LL, &qword_1001CE180, &OBJC_CLASS___NSCountedSet_ptr);
  OS_dispatch_queue.sync<A>(execute:)(sub_10013420C, v0, v1);
  sub_1000291C4();
}

uint64_t sub_100132288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*(id *)(a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSet) copy];
  _bridgeAnyObjectToAny(_:)(v3);
  swift_unknownObjectRelease(v3);
  uint64_t v4 = sub_10000DAA0(0LL, &qword_1001CE180, &OBJC_CLASS___NSCountedSet_ptr);
  return swift_dynamicCast(a2, &v6, (char *)&type metadata for Any + 8, v4, 7LL);
}

void sub_100132320()
{
}

uint64_t sub_100132364(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = (dispatch_queue_s *)v3[2];
  uint64_t v8 = (void *)sub_10000DDDC((uint64_t)&unk_1001B22E8, 48LL);
  v8[2] = v3;
  void v8[3] = a1;
  v8[4] = a2;
  v8[5] = v6;
  uint64_t v9 = sub_10000DDDC((uint64_t)&unk_1001B2310, 32LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_1001341B0;
  *(void *)(v9 + 24) = v8;
  v13[4] = sub_1000667AC;
  uint64_t v14 = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256LL;
  _OWORD v13[2] = sub_100131DB8;
  v13[3] = &unk_1001B2328;
  uint64_t v10 = _Block_copy(v13);
  uint64_t v11 = v14;
  swift_retain(v3);
  swift_bridgeObjectRetain(a2);
  swift_retain(v9);
  swift_release(v11);
  dispatch_sync(v7, v10);
  _Block_release(v10);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation(v9, "", 109LL, 94LL, 20LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  return result;
}

uint64_t sub_1001324A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v149 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v136 - v13;
  uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSet);
  NSString v16 = String._bridgeToObjectiveC()();
  [v15 addObject:v16];

  uint64_t v17 = a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_signposter;
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v147 = v17;
  uint64_t v19 = OSSignposter.logHandle.getter(v18);
  OSSignpostID.init(log:object:)(v19, v18);
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v15 countForObject:v20];

  uint64_t v148 = v9;
  if (v21 == (id)1)
  {
    uint64_t v143 = (uint64_t)v12;
    if (qword_1001C7FF0 != -1) {
      swift_once(&qword_1001C7FF0, sub_1000BD7C4);
    }
    uint64_t v146 = (uint64_t)v14;
    uint64_t v22 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v23 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v24 = *(void *)(v23 + 72);
    uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
    uint64_t v26 = (v25 + 32) & ~v25;
    uint64_t v144 = v24;
    uint64_t v142 = v22;
    uint64_t v140 = v26 + 2 * v24;
    uint64_t v139 = v25 | 7;
    uint64_t v27 = swift_allocObject(v22, v140, v25 | 7);
    __int128 v138 = xmmword_100164230;
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v141 = v26;
    uint64_t v137 = (void *)type metadata accessor for TransactionStore(0LL);
    uint64_t v156 = v137;
    uint64_t v154 = a1;
    uint64_t v28 = swift_retain(a1);
    id v29 = (id)AMSLogKey(v28);
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;

      swift_bridgeObjectRetain(v33);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v34._uint64_t countAndFlagsBits = 0LL;
      v34._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t v35 = v156;
      id v36 = sub_10000D37C(&v154, (uint64_t)v156);
      uint64_t DynamicType = swift_getDynamicType(v36, v35, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v151 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v38._uint64_t countAndFlagsBits = 5972026LL;
      v38._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v38);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v151 = v31;
      uint64_t v152 = v33;
      uint64_t v9 = v148;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v39._uint64_t countAndFlagsBits = 93LL;
      v39._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v39);
      LogMessage.init(stringInterpolation:)(v8);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v56._uint64_t countAndFlagsBits = 0LL;
      v56._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v56);
      uint64_t v57 = v156;
      char v58 = sub_10000D37C(&v154, (uint64_t)v156);
      uint64_t v59 = swift_getDynamicType(v58, v57, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v151 = v59;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v60._uint64_t countAndFlagsBits = 58LL;
      v60._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v60);
      LogMessage.init(stringInterpolation:)(v8);
    }

    uint64_t v145 = a1;
    sub_10000D3A0(&v154);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(22LL, 1LL);
    v61._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    v61._object = (void *)0x8000000100178030LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v61);
    uint64_t v156 = &type metadata for String;
    uint64_t v154 = a2;
    unint64_t v155 = a3;
    swift_bridgeObjectRetain(a3);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v154);
    sub_10000E888((uint64_t)&v154);
    v62._uint64_t countAndFlagsBits = 0LL;
    v62._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v62);
    uint64_t v63 = LogMessage.init(stringInterpolation:)(v8);
    uint64_t v64 = static os_log_type_t.info.getter(v63);
    sub_1000BD1B0(v64, v27);
    swift_bridgeObjectRelease();
    uint64_t v65 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v66 = (os_log_s *)OSSignposter.logHandle.getter(v65);
    int v67 = static os_signpost_type_t.begin.getter();
    uint64_t v68 = a2;
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16);
      uint64_t v70 = v143;
      uint64_t v71 = v146;
      v69(v143, v146, v9);
      uint64_t v72 = swift_slowAlloc(12LL, -1LL);
      HIDWORD(v136) = v67;
      uint64_t v73 = (uint8_t *)v72;
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      uint64_t v147 = v68;
      uint64_t v75 = v74;
      uint64_t v154 = v74;
      *(_DWORD *)uint64_t v73 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v151 = sub_100064014(v147, a3, &v154);
      uint64_t v9 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, &v152, v73 + 4, v73 + 12);
      uint64_t v76 = swift_bridgeObjectRelease_n(a3, 3LL);
      os_signpost_id_t v77 = OSSignpostID.rawValue.getter(v76);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v66,  BYTE4(v136),  v77,  "Transaction",  "%s",  v73,  0xCu);
      swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v78 = v75;
      uint64_t v68 = v147;
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v70, v9);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);

      uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16);
      uint64_t v71 = v146;
      uint64_t v70 = v143;
    }

    v69(v70, v71, v9);
    uint64_t v79 = type metadata accessor for OSSignpostIntervalState(0LL);
    swift_allocObject(v79, *(unsigned int *)(v79 + 48), *(unsigned __int16 *)(v79 + 52));
    uint64_t v80 = OSSignpostIntervalState.init(id:isOpen:)(v70, 1LL);
    uint64_t v81 = v145;
    uint64_t v82 = (uint64_t *)(v145 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSignpostStateStore);
    swift_beginAccess( v145 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSignpostStateStore,  v150,  0LL,  0LL);
    uint64_t v83 = *v82;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v83);
    sub_100030AC4(v68, a3, v83);
    uint64_t v85 = v84;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v85);
    uint64_t v86 = v68;
    if (v85)
    {
      uint64_t v147 = qword_1001DBB70;
      uint64_t v87 = swift_allocObject(v142, v140, v139);
      *(_OWORD *)(v87 + swift_weakDestroy(v0 + 16) = v138;
      uint64_t v156 = v137;
      uint64_t v154 = v81;
      uint64_t v88 = swift_retain(v81);
      id v89 = (id)AMSLogKey(v88);
      if (v89)
      {
        uint64_t v90 = v89;
        uint64_t v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
        uint64_t v92 = v91;

        swift_bridgeObjectRetain(v92);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v93._uint64_t countAndFlagsBits = 0LL;
        v93._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v93);
        uint64_t v94 = v156;
        id v95 = sub_10000D37C(&v154, (uint64_t)v156);
        uint64_t v96 = swift_getDynamicType(v95, v94, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v151 = v96;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
        sub_10000E888((uint64_t)&v151);
        v97._uint64_t countAndFlagsBits = 5972026LL;
        v97._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v97);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v151 = v143;
        uint64_t v152 = v92;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
        sub_10000E888((uint64_t)&v151);
        v98._uint64_t countAndFlagsBits = 93LL;
        v98._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v98);
        LogMessage.init(stringInterpolation:)(v8);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v113._uint64_t countAndFlagsBits = 0LL;
        v113._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v113);
        uint64_t v114 = v156;
        uint64_t v115 = sub_10000D37C(&v154, (uint64_t)v156);
        uint64_t v116 = swift_getDynamicType(v115, v114, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v151 = v116;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
        sub_10000E888((uint64_t)&v151);
        v117._uint64_t countAndFlagsBits = 58LL;
        v117._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v117);
        LogMessage.init(stringInterpolation:)(v8);
      }

      sub_10000D3A0(&v154);
      uint64_t v118 = LogMessage.init(stringLiteral:)(0xD000000000000059LL);
      uint64_t v120 = static os_log_type_t.fault.getter(v118, v119);
      sub_1000BD1B0(v120, v87);
      swift_bridgeObjectRelease();
      uint64_t v81 = v145;
    }

    uint64_t v121 = String.utf8CString.getter(v86, a3);
    swift_bridgeObjectRetain(a3);
    uint64_t v122 = os_transaction_create(v121 + 32);
    swift_release(v121);
    swift_beginAccess(v81 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionStore, &v154, 33LL, 0LL);
    if (v122)
    {
      sub_1000344F8(v122, v86, a3, v123, v124, v125, v126, v127, v136, (uint64_t)v137);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v128 = sub_100033D24(v86, a3);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease(v128);
    }

    swift_endAccess(&v154);
    swift_beginAccess(v82, &v154, 33LL, 0LL);
    swift_bridgeObjectRetain(a3);
    uint64_t v129 = swift_retain(v80);
    sub_100034498(v129, v86, a3, v130, v131, v132, v133, v134, v136, (uint64_t)v137);
    swift_endAccess(&v154);
    swift_release(v80);
    swift_bridgeObjectRelease();
    uint64_t v14 = (char *)v146;
  }

  else
  {
    if (qword_1001C7FF0 != -1) {
      swift_once(&qword_1001C7FF0, sub_1000BD7C4);
    }
    uint64_t v146 = qword_1001DBB70;
    uint64_t v40 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v41 = type metadata accessor for LogMessage(0LL);
    uint64_t v42 = swift_allocObject( v40,  ((*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v41 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v41 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v156 = (void *)type metadata accessor for TransactionStore(0LL);
    uint64_t v154 = a1;
    uint64_t v43 = swift_retain(a1);
    id v44 = (id)AMSLogKey(v43);
    if (v44)
    {
      char v45 = v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v47 = a2;
      uint64_t v49 = v48;

      swift_bridgeObjectRetain(v49);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v50._uint64_t countAndFlagsBits = 0LL;
      v50._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v50);
      uint64_t v51 = v156;
      uint64_t v52 = sub_10000D37C(&v154, (uint64_t)v156);
      uint64_t v53 = swift_getDynamicType(v52, v51, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v151 = v53;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v54._uint64_t countAndFlagsBits = 5972026LL;
      v54._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v54);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v151 = v46;
      uint64_t v152 = v49;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v55._uint64_t countAndFlagsBits = 93LL;
      v55._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v55);
      LogMessage.init(stringInterpolation:)(v8);
      a2 = v47;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v99._uint64_t countAndFlagsBits = 0LL;
      v99._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v99);
      uint64_t v100 = v156;
      uint64_t v101 = sub_10000D37C(&v154, (uint64_t)v156);
      uint64_t v102 = swift_getDynamicType(v101, v100, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v151 = v102;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v151);
      sub_10000E888((uint64_t)&v151);
      v103._uint64_t countAndFlagsBits = 58LL;
      v103._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v103);
      LogMessage.init(stringInterpolation:)(v8);
    }

    sub_10000D3A0(&v154);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
    v104._object = (void *)0x8000000100178010LL;
    v104._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v104);
    uint64_t v156 = &type metadata for String;
    uint64_t v154 = a2;
    unint64_t v155 = a3;
    swift_bridgeObjectRetain(a3);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v154);
    sub_10000E888((uint64_t)&v154);
    v105._uint64_t countAndFlagsBits = 0LL;
    v105._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v105);
    uint64_t v106 = LogMessage.init(stringInterpolation:)(v8);
    uint64_t v107 = static os_log_type_t.info.getter(v106);
    sub_1000BD1B0(v107, v42);
    uint64_t v108 = swift_bridgeObjectRelease();
    uint64_t v109 = (os_log_s *)OSSignposter.logHandle.getter(v108);
    os_signpost_type_t v110 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v111 = 0;
      os_signpost_id_t v112 = OSSignpostID.rawValue.getter(v111);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v109,  v110,  v112,  "Transaction",  "Transaction joined",  v111,  2u);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    uint64_t v9 = v148;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v149 + 8))(v14, v9);
}

uint64_t sub_100133128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v32[0] = *v4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_10006725C();
  uint64_t v33 = *(void *)(v9 - 8);
  uint64_t v34 = v9;
  sub_10000DC8C();
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for DispatchTime(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  NSString v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)v32 - v20;
  v32[1] = v4[2];
  static DispatchTime.now()(v19);
  + infix(_:_:)(v18, (char *)v4 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_holdTime);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v18, v14);
  uint64_t v23 = (void *)sub_10000DDDC((uint64_t)&unk_1001B2298, 48LL);
  v23[2] = v4;
  v23[3] = a1;
  uint64_t v24 = v32[0];
  v23[4] = a2;
  v23[5] = v24;
  aBlock[4] = sub_10013415C;
  Swift::String v38 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001B22B0;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain(v4);
  uint64_t v26 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v26);
  id v36 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = v27;
  uint64_t v29 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v7, v28);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v21, v13, v3, v25);
  _Block_release(v25);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v13, v34);
  v22(v21, v14);
  return swift_release(v38);
}

uint64_t sub_100133394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v150 = *(void *)(v148 - 8);
  uint64_t v10 = __chkstk_darwin(v148);
  uint64_t v147 = (char *)&v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v135 - v12;
  uint64_t v14 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void **)(a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSet);
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 removeObject:v18];

  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v17 countForObject:v19];

  uint64_t v149 = a2;
  if (v20)
  {
    if (qword_1001C7FF0 != -1) {
      swift_once(&qword_1001C7FF0, sub_1000BD7C4);
    }
    uint64_t v21 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v22 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v23 = swift_allocObject( v21,  ((*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
          + 2LL * *(void *)(v22 + 72),
            *(unsigned __int8 *)(v22 + 80) | 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v157 = (void *)type metadata accessor for TransactionStore(0LL);
    uint64_t v155 = a1;
    uint64_t v24 = swift_retain(a1);
    id v25 = (id)AMSLogKey(v24);
    uint64_t v26 = v150;
    if (v25)
    {
      uint64_t v27 = v25;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      uint64_t v146 = a3;
      uint64_t v30 = v29;

      swift_bridgeObjectRetain(v30);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      uint64_t v32 = v157;
      uint64_t v33 = sub_10000D37C(&v155, (uint64_t)v157);
      uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v152 = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v35._uint64_t countAndFlagsBits = 5972026LL;
      v35._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v152 = v28;
      uint64_t v153 = v30;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v36._uint64_t countAndFlagsBits = 93LL;
      v36._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      LogMessage.init(stringInterpolation:)(v16);
      uint64_t v26 = v150;
      a3 = v146;
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v59._uint64_t countAndFlagsBits = 0LL;
      v59._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v59);
      Swift::String v60 = v157;
      Swift::String v61 = sub_10000D37C(&v155, (uint64_t)v157);
      uint64_t v62 = swift_getDynamicType(v61, v60, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v152 = v62;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v63._uint64_t countAndFlagsBits = 58LL;
      v63._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v63);
      LogMessage.init(stringInterpolation:)(v16);
    }

    sub_10000D3A0(&v155);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(18LL, 1LL);
    v64._object = (void *)0x8000000100177F90LL;
    v64._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v64);
    uint64_t v157 = &type metadata for String;
    uint64_t v155 = v149;
    uint64_t v156 = a3;
    swift_bridgeObjectRetain(a3);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v155);
    sub_10000E888((uint64_t)&v155);
    v65._uint64_t countAndFlagsBits = 0LL;
    v65._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v65);
    uint64_t v66 = LogMessage.init(stringInterpolation:)(v16);
    uint64_t v67 = static os_log_type_t.info.getter(v66);
    sub_1000BD1B0(v67, v23);
    swift_bridgeObjectRelease();
    NSString v68 = String._bridgeToObjectiveC()();
    uint64_t v69 = OSSignposter.logHandle.getter(v68);
    uint64_t v70 = v147;
    uint64_t v71 = OSSignpostID.init(log:object:)(v69, v68);
    uint64_t v72 = (os_log_s *)OSSignposter.logHandle.getter(v71);
    os_signpost_type_t v73 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v74 = 0;
      os_signpost_id_t v75 = OSSignpostID.rawValue.getter(v74);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v72,  v73,  v75,  "Transaction",  "Transaction left",  v74,  2u);
      swift_slowDealloc(v74, -1LL, -1LL);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v70, v148);
  }

  else
  {
    uint64_t v137 = v9;
    uint64_t v139 = v7;
    uint64_t v138 = v6;
    uint64_t v145 = v13;
    if (qword_1001C7FF0 != -1) {
      swift_once(&qword_1001C7FF0, sub_1000BD7C4);
    }
    uint64_t v37 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v38 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    Swift::String v39 = *(char **)(v38 + 72);
    uint64_t v40 = *(unsigned __int8 *)(v38 + 80);
    uint64_t v41 = (v40 + 32) & ~v40;
    uint64_t v146 = v37;
    uint64_t v147 = v39;
    uint64_t v142 = v40 | 7;
    uint64_t v143 = v41 + 2LL * (void)v39;
    uint64_t v42 = swift_allocObject(v37, v143, v40 | 7);
    __int128 v141 = xmmword_100164230;
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v144 = v41;
    uint64_t v140 = (void *)type metadata accessor for TransactionStore(0LL);
    uint64_t v157 = v140;
    uint64_t v155 = a1;
    uint64_t v43 = swift_retain(a1);
    id v44 = (id)AMSLogKey(v43);
    uint64_t v45 = v150;
    if (v44)
    {
      uint64_t v46 = v44;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      uint64_t v136 = a1;
      uint64_t v48 = a3;
      uint64_t v49 = v45;
      uint64_t v50 = v47;
      uint64_t v52 = v51;

      swift_bridgeObjectRetain(v52);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v53._uint64_t countAndFlagsBits = 0LL;
      v53._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v53);
      Swift::String v54 = v157;
      Swift::String v55 = sub_10000D37C(&v155, (uint64_t)v157);
      uint64_t v56 = swift_getDynamicType(v55, v54, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v152 = v56;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v57._uint64_t countAndFlagsBits = 5972026LL;
      v57._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v57);
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v152 = v50;
      uint64_t v153 = v52;
      uint64_t v45 = v49;
      a3 = v48;
      a1 = v136;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v58._uint64_t countAndFlagsBits = 93LL;
      v58._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v58);
      LogMessage.init(stringInterpolation:)(v16);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v77._uint64_t countAndFlagsBits = 0LL;
      v77._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v77);
      uint64_t v78 = v157;
      uint64_t v79 = sub_10000D37C(&v155, (uint64_t)v157);
      uint64_t v80 = swift_getDynamicType(v79, v78, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      uint64_t v152 = v80;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
      sub_10000E888((uint64_t)&v152);
      v81._uint64_t countAndFlagsBits = 58LL;
      v81._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v81);
      LogMessage.init(stringInterpolation:)(v16);
    }

    sub_10000D3A0(&v155);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(19LL, 1LL);
    v82._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v82._object = (void *)0x8000000100177FB0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v82);
    uint64_t v157 = &type metadata for String;
    uint64_t v83 = v149;
    uint64_t v155 = v149;
    uint64_t v156 = a3;
    swift_bridgeObjectRetain(a3);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v155);
    sub_10000E888((uint64_t)&v155);
    v84._uint64_t countAndFlagsBits = 0LL;
    v84._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v84);
    uint64_t v85 = LogMessage.init(stringInterpolation:)(v16);
    uint64_t v86 = static os_log_type_t.info.getter(v85);
    sub_1000BD1B0(v86, v42);
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t *)(a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSignpostStateStore);
    swift_beginAccess( a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSignpostStateStore,  v151,  0LL,  0LL);
    uint64_t v88 = *v87;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v88);
    sub_100030AC4(v83, a3, v88);
    uint64_t v90 = v89;
    swift_bridgeObjectRelease();
    uint64_t v91 = swift_bridgeObjectRelease();
    if (v90)
    {
      uint64_t v92 = (os_log_s *)OSSignposter.logHandle.getter(v91);
      Swift::String v93 = v145;
      uint64_t v94 = OSSignpostIntervalState.signpostID.getter();
      int v95 = static os_signpost_type_t.end.getter(v94);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        LODWORD(v150) = v95;
        uint64_t v146 = a3;
        uint64_t v96 = v45;
        uint64_t v97 = swift_retain(v90);
        Swift::String v98 = v137;
        checkForErrorAndConsumeState(state:)(v97);
        swift_release(v90);
        uint64_t v99 = v139;
        uint64_t v100 = v138;
        if ((*(unsigned int (**)(char *, uint64_t))(v139 + 88))(v98, v138) == enum case for OSSignpostError.doubleEnd(_:))
        {
          uint64_t v101 = "[Error] Interval already ended";
        }

        else
        {
          (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
          uint64_t v101 = "";
        }

        Swift::String v117 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)Swift::String v117 = 0;
        uint64_t v118 = v145;
        os_signpost_id_t v119 = OSSignpostID.rawValue.getter(v117);
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v92,  (os_signpost_type_t)v150,  v119,  "Transaction",  v101,  v117,  2u);
        uint64_t v120 = v117;
        Swift::String v93 = v118;
        swift_slowDealloc(v120, -1LL, -1LL);
        uint64_t v45 = v96;
        a3 = v146;
      }

      (*(void (**)(char *, uint64_t))(v45 + 8))(v93, v148);
      swift_release(v90);
      swift_beginAccess(a1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionStore, &v155, 33LL, 0LL);
      uint64_t v121 = v149;
      uint64_t v122 = sub_100033D24(v149, a3);
      swift_endAccess(&v155);
      swift_unknownObjectRelease(v122);
      swift_beginAccess(v87, &v155, 33LL, 0LL);
      uint64_t v123 = sub_100033D10(v121, a3);
      swift_endAccess(&v155);
      return swift_release(v123);
    }

    else
    {
      uint64_t v102 = swift_allocObject(v146, v143, v142);
      uint64_t v103 = a1;
      uint64_t v104 = v102;
      *(_OWORD *)(v102 + swift_weakDestroy(v0 + 16) = v141;
      uint64_t v157 = v140;
      uint64_t v155 = v103;
      uint64_t v105 = swift_retain(v103);
      id v106 = (id)AMSLogKey(v105);
      if (v106)
      {
        uint64_t v107 = v106;
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v106);
        uint64_t v110 = v109;

        swift_bridgeObjectRetain(v110);
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v111._uint64_t countAndFlagsBits = 0LL;
        v111._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v111);
        os_signpost_id_t v112 = v157;
        Swift::String v113 = sub_10000D37C(&v155, (uint64_t)v157);
        uint64_t v114 = swift_getDynamicType(v113, v112, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v152 = v114;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
        sub_10000E888((uint64_t)&v152);
        v115._uint64_t countAndFlagsBits = 5972026LL;
        v115._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v115);
        uint64_t MetatypeMetadata = &type metadata for String;
        uint64_t v152 = v108;
        uint64_t v153 = v110;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
        sub_10000E888((uint64_t)&v152);
        v116._uint64_t countAndFlagsBits = 93LL;
        v116._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v116);
        LogMessage.init(stringInterpolation:)(v16);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v124._uint64_t countAndFlagsBits = 0LL;
        v124._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v124);
        uint64_t v125 = v157;
        uint64_t v126 = sub_10000D37C(&v155, (uint64_t)v157);
        uint64_t v127 = swift_getDynamicType(v126, v125, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
        uint64_t v152 = v127;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v152);
        sub_10000E888((uint64_t)&v152);
        v128._uint64_t countAndFlagsBits = 58LL;
        v128._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v128);
        LogMessage.init(stringInterpolation:)(v16);
      }

      uint64_t v129 = v149;
      sub_10000D3A0(&v155);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(68LL, 1LL);
      v130._uint64_t countAndFlagsBits = 0xD000000000000038LL;
      v130._object = (void *)0x8000000100177FD0LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v130);
      uint64_t v157 = &type metadata for String;
      uint64_t v155 = v129;
      uint64_t v156 = a3;
      swift_bridgeObjectRetain(a3);
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v155);
      sub_10000E888((uint64_t)&v155);
      v131._uint64_t countAndFlagsBits = 0x6361736E61727420LL;
      v131._object = (void *)0xEC0000006E6F6974LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v131);
      uint64_t v132 = LogMessage.init(stringInterpolation:)(v16);
      uint64_t v134 = static os_log_type_t.fault.getter(v132, v133);
      sub_1000BD1B0(v134, v104);
      return swift_bridgeObjectRelease();
    }
  }

void sub_100133FC8()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval(0LL);
  sub_10001A418(v1);
  uint64_t v2 = type metadata accessor for OSSignposter(0LL);
  sub_10001A418(v2);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100009044();
}

uint64_t sub_100134048()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10013406C()
{
  return type metadata accessor for TransactionStore(0LL);
}

uint64_t type metadata accessor for TransactionStore(uint64_t a1)
{
  uint64_t result = qword_1001CEF80;
  if (!qword_1001CEF80) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TransactionStore);
  }
  return result;
}

uint64_t sub_1001340AC(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for DispatchTimeInterval(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for OSSignposter(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10013415C()
{
  return sub_100133394(v0[2], v0[3], v0[4]);
}

uint64_t sub_100134168(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100134178(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100134184()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001341B0()
{
  return sub_1001324A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001341BC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_1001341CC@<X0>(void *a1@<X8>)
{
  id result = [*(id *)(v1 + OBJC_IVAR____TtC14amsengagementd16TransactionStore_transactionSet) count];
  *a1 = result;
  return result;
}

uint64_t sub_10013420C@<X0>(uint64_t a1@<X8>)
{
  return sub_100132288(v1, a1);
}

uint64_t sub_10013422C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Dictionary.init(dictionaryLiteral:)(v3, v4, a3, v5);
}

void sub_10013423C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  sub_1000090CC();
  id v6 = [(id)swift_getObjCClassFromMetadata(v3) keyWithName:v5 crossDeviceSync:a3 & 1];

  sub_10000DFE8();
}

void sub_100134298()
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 initWithBundleIdentifier:v2];

  sub_10000DFE8();
}

void sub_100134300(char a1)
{
  if ((a1 & 1) == 0)
  {
    NSString v2 = *(void **)(v1 + 16);
    if (v2)
    {
      id v3 = objc_msgSend(v2, "ams_DSID");
      uint64_t v4 = v3;
      if (v3)
      {
        id v5 = [v3 description];

        static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      }
    }
  }

  sub_10000DFE8();
}

void sub_100134388(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v5);
  swift_bridgeObjectRetain();
  sub_100134720(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = sub_10006FF54( &qword_1001CF200,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v4, v8);
  __asm { BR              X10 }

unint64_t sub_100134490()
{
  uint64_t v8 = sub_10006FF54( &qword_1001CF208,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest,  (uint64_t)&protocol conformance descriptor for SHA256Digest);
  uint64_t v9 = ((uint64_t (*)(void, uint64_t))Digest.makeIterator())(*(void *)(v7 - 96), v8);
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v12 = v11 - v10;
  if (v11 == v10)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }

  else
  {
    if (v11 <= v10)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    if (v10 < 0)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }

    if (!v11)
    {
LABEL_20:
      __break(1u);
      JUMPOUT(0x10013470CLL);
    }

    id v20 = (char *)(v10 + v9 + 32);
    uint64_t v13 = _swiftEmptyArrayStorage;
    do
    {
      __int16 v22 = *v20++;
      __int16 v21 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      {
        sub_1001358C4();
        uint64_t v13 = v24;
      }

      unint64_t v23 = v13[2];
      if (v23 >= v13[3] >> 1)
      {
        sub_1001358C4();
        uint64_t v13 = v25;
      }

      _OWORD v13[2] = v23 + 1;
      *((_WORD *)v13 + v23 + swift_weakDestroy(v0 + 16) = v21;
      --v12;
    }

    while (v12);
  }

  sub_1000090CC();
  uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(8LL, &type metadata for Int16);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = 8LL;
  *(void *)(v14 + 3sub_10000D3A0(v0 + 2) = 0LL;
  *(void *)(v14 + 40) = 0LL;
  unint64_t v15 = v13[2];
  if (v15 < 8)
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v16 = 0LL;
  uint64_t v17 = (_WORD *)v13 + v15;
  *(_WORD *)(v14 + 3sub_10000D3A0(v0 + 2) = v17[8];
  *(_WORD *)(v14 + 34) = v17[9];
  *(_WORD *)(v14 + 36) = v17[10];
  *(_WORD *)(v14 + 38) = v17[11];
  *(_WORD *)(v14 + 40) = v17[12];
  *(_WORD *)(v14 + 4sub_10000D3A0(v0 + 2) = v17[13];
  *(_WORD *)(v14 + 44) = v17[14];
  *(_WORD *)(v14 + 46) = v17[15];
  for (uint64_t i = 32LL; i != 48; i += 2LL)
    unint64_t v16 = *(unsigned __int8 *)(v14 + i) | (v16 << 8);
  sub_1001358A0();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(*(void *)(v7 - 104) + 8LL))(v1, *(void *)(v7 - 96));
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_100134720(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + setenv("JavaScriptCoreUseJIT", "0", 1) = a2;
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_10000D33C(&qword_1001CF210);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_1001355E8((uint64_t)v17);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (char *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (void *)v5;
    }

    uint64_t v9 = Data._Representation.init(_:)(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + setenv("JavaScriptCoreUseJIT", "0", 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = Data._Representation.init(count:)(v12);
    *((void *)&v17[0] + setenv("JavaScriptCoreUseJIT", "0", 1) = v13;
    __chkstk_darwin(*(void *)&v17[0]);
    sub_1001352D4();
    __asm { BR              X12 }
  }

  sub_100019F60(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_10000D37C(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_100135574,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease();
  v17[0] = v19;
  sub_10000D3A0(v20);
  return *(void *)&v17[0];
}

uint64_t sub_100134C08(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierStore);
  uint64_t v5 = *(void *)(v2 + 16);
  swift_unknownObjectRetain(v3);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v4 identifierForAccount:v5 bag:v3 bagNamespace:v6 keyName:v7];

  id v17 = 0LL;
  id v9 = [v8 resultWithError:&v17];
  id v10 = v17;
  if (!v9)
  {
    id v14 = v17;
    uint64_t v15 = _convertNSErrorToError(_:)(v10);

    swift_willThrow();
    swift_unknownObjectRelease(v3);

    swift_errorRelease(v15);
    return 0LL;
  }

  unint64_t v11 = v9;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  id v13 = v10;

  swift_unknownObjectRelease(v3);
  return v12;
}

uint64_t sub_100134D94(char a1)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v3 = 0x6449746E65696C63LL;
    uint64_t v4 = 0xE800000000000000LL;
    char v5 = 0;
  }

  else
  {
    uint64_t v3 = 0x644972657375LL;
    uint64_t v4 = 0xE600000000000000LL;
    char v5 = 1;
  }

  sub_10013423C(v3, v4, v5);
  NSString v7 = v6;
  id v8 = [objc_allocWithZone(AMSMetricsIdentifierStore) init];
  [v8 setAccount:*(void *)(v1 + 16)];
  sub_10000DAA0(0LL, &qword_1001CB430, &OBJC_CLASS___AMSProcessInfo_ptr);
  sub_100134298();
  id v10 = v9;
  [v8 setClientInfo:v9];

  [v8 setResetInterval:0.0];
  id v11 = [v8 identifierForKey:v7];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);

  return v12;
}

void sub_100134EF0(void *a1)
{
  if (v2)
  {
    if (a1[4])
    {
      uint64_t v3 = a1[3];
      uint64_t v4 = (void *)a1[4];
    }

    else
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = (void *)0xE000000000000000LL;
    }

    swift_bridgeObjectRetain();
    v5._uint64_t countAndFlagsBits = v3;
    v5._object = v4;
    String.append(_:)(v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1000090CC();
    uint64_t v7 = a1[1];
    NSString v6 = (void *)a1[2];
    swift_bridgeObjectRetain();
    v8._uint64_t countAndFlagsBits = v7;
    v8._object = v6;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
  }

void sub_100134FB0(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (void *)a1[3];
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v2;
  v7._object = v3;
  int v4 = sub_1001358E8(v7);
  if (v4 != 5)
  {
    if (v4 == 4)
    {
      sub_1001358D0();
      char v5 = sub_1001358B8();
      if (v5 != 2) {
        sub_100134D94(v5 & 1);
      }
    }

    else if (v4 == 2)
    {
      sub_100134C08(*a1, a1[1]);
    }

    else
    {
      sub_1001358D0();
      char v6 = sub_1001358B8();
      if (v6 != 2) {
        sub_100134300(v6 & 1);
      }
    }
  }

  sub_10000DFE8();
}

uint64_t sub_100135058()
{
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  return v0;
}

uint64_t sub_10013507C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for TreatmentsCalculator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd20TreatmentsCalculator);
}

uint64_t sub_1001350BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = sub_10006FF54( &qword_1001CF200,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_100135180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  uint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  uint64_t v5 = sub_10006FF54( &qword_1001CF200,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

void *sub_10013528C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_1001356A8( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100135884,  (uint64_t)v5,  a1,  a2);
}

void sub_1001352D4()
{
  __asm { BR              X11 }

void *sub_100135334@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  char v9 = BYTE4(a1);
  char v10 = BYTE5(a1);
  char v11 = BYTE6(a1);
  uint64_t result = sub_1001357B4((uint64_t)&v7, v3, v2, BYTE6(a1));
  BOOL v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *uint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_100135574@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1001355E8(uint64_t a1)
{
  uint64_t v2 = sub_10000D33C(&qword_1001CF218);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100135628(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    uint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1001356A8( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_100135708(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_1001357B4( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void *sub_1001357F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_10013528C(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

void *sub_10013582C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1001357F8(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_100135844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100135628(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_100135884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100135844(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1001358A0()
{
  return sub_10001BD84(v0, v1);
}

uint64_t sub_1001358AC(uint64_t a1, uint64_t a2)
{
  return sub_1001350BC(a1, a2);
}

uint64_t sub_1001358B8()
{
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v0;
  return sub_1001358F4(v3);
}

void sub_1001358C4()
{
}

uint64_t sub_1001358D0()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 40));
}

uint64_t sub_1001358DC()
{
  return sub_10001BDC8(v0, v1);
}

uint64_t sub_1001358E8(Swift::String a1)
{
  v1._rawValue = &off_1001A7758;
  return sub_10013599C(a1, v1);
}

uint64_t sub_1001358F4(Swift::String a1)
{
  v1._rawValue = &off_1001A77F0;
  return sub_100137194(a1, v1);
}

uint64_t sub_100135900(Swift::String a1)
{
  v1._rawValue = &off_1001A7840;
  return sub_10013599C(a1, v1);
}

uint64_t sub_10013591C()
{
  uint64_t v0 = sub_10013A62C();
  return ((uint64_t (*)(uint64_t))((char *)sub_100135940 + 4 * byte_100169130[v1]))(v0);
}

uint64_t sub_10013594C()
{
  return 1684366707LL;
}

uint64_t sub_10013595C()
{
  uint64_t v0 = sub_10013A62C();
  return ((uint64_t (*)(uint64_t))((char *)sub_100135980 + 4 * byte_100169135[v1]))(v0);
}

uint64_t sub_10013598C()
{
  return 1684366707LL;
}

uint64_t sub_10013599C(Swift::String a1, Swift::OpaquePointer a2)
{
  unint64_t v2 = sub_10013A4A8(a1, a2);
  sub_100009020();
  if (v2 >= 5) {
    return 5LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_1001359CC(Swift::String a1)
{
  v1._rawValue = &off_1001A78D8;
  return sub_10013599C(a1, v1);
}

uint64_t sub_1001359E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100135A1C + 4 * byte_10016913A[a1]))( 0x656D6954646E65LL,  0xE700000000000000LL);
}

uint64_t sub_100135A28()
{
  return 0x6E656D7461657274LL;
}

uint64_t sub_100135A44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100135A78 + 4 * byte_10016913F[a1]))( 0x656D6954646E65LL,  0xE700000000000000LL);
}

uint64_t sub_100135A84()
{
  return 0x6E656D7461657274LL;
}

uint64_t sub_100135AA0(Swift::String a1)
{
  v1._rawValue = &off_1001A7970;
  return sub_100137194(a1, v1);
}

uint64_t sub_100135ABC(char a1)
{
  if ((a1 & 1) != 0) {
    return 25705LL;
  }
  else {
    return 0x7374656B637562LL;
  }
}

void sub_100135AE8(char *a1)
{
}

void sub_100135AF4()
{
}

void sub_100135AFC(uint64_t a1)
{
}

void sub_100135B04(uint64_t a1)
{
}

uint64_t sub_100135B0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1001A7840;
  uint64_t result = sub_10013599C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100135B40()
{
  *uint64_t v0 = sub_10013591C();
  v0[1] = v1;
  sub_100009044();
}

uint64_t sub_100135B60()
{
  return sub_10013595C();
}

uint64_t sub_100135B68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100135900(a1);
  *a2 = result;
  return result;
}

void sub_100135B8C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100135B98(uint64_t a1)
{
  unint64_t v2 = sub_100139838();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100135BC0(uint64_t a1)
{
  unint64_t v2 = sub_100139838();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100135BE8(char *a1)
{
}

void sub_100135BF4()
{
}

void sub_100135BFC(uint64_t a1)
{
}

void sub_100135C04(uint64_t a1)
{
}

uint64_t sub_100135C0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1001A78D8;
  uint64_t result = sub_10013599C(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100135C40()
{
  unsigned __int8 v1 = sub_10013A57C();
  *uint64_t v0 = sub_1001359E8(v1);
  v0[1] = v2;
  sub_100009044();
}

uint64_t sub_100135C60()
{
  return sub_100135A44(*v0);
}

uint64_t sub_100135C68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001359CC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100135C8C(uint64_t a1)
{
  unint64_t v2 = sub_100138EB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100135CB4(uint64_t a1)
{
  unint64_t v2 = sub_100138EB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100135CDC(char *a1, unsigned __int8 *a2)
{
}

void sub_100135CE8()
{
}

uint64_t sub_100135CF0(uint64_t a1)
{
  return sub_1000069C8(a1, *v1);
}

void sub_100135CF8(uint64_t a1)
{
}

uint64_t sub_100135D00@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1001A7970;
  uint64_t result = sub_100137194(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100135D34()
{
  char v1 = sub_10013A57C();
  *uint64_t v0 = sub_100135ABC(v1);
  v0[1] = v2;
  sub_100009044();
}

uint64_t sub_100135D54()
{
  return sub_100135ABC(*v0);
}

uint64_t sub_100135D5C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100135AA0(a1);
  *a2 = result;
  return result;
}

void sub_100135D80(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100135D8C(uint64_t a1)
{
  unint64_t v2 = sub_1001399FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100135DB4(uint64_t a1)
{
  unint64_t v2 = sub_1001399FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100135DDC()
{
  unint64_t v6 = sub_1001399FC();
  sub_10013A318((uint64_t)&unk_1001B2930, v7, v6);
  uint64_t v8 = sub_10000D33C(&qword_1001CF550);
  sub_100139A38((uint64_t)&unk_1001CF578);
  uint64_t v9 = sub_10013A618();
  sub_10013A604(v9, v10, v11, v8, v12);
  if (!v0) {
    sub_10013A35C();
  }
  sub_10013A54C();
  sub_100029188();
}

void sub_100135EB0()
{
  unint64_t v4 = sub_1001399FC();
  sub_10013A300((uint64_t)&unk_1001B2930, v5, v4);
  if (v1)
  {
    sub_1000291BC();
  }

  else
  {
    sub_10000D33C(&qword_1001CF550);
    sub_100139A38((uint64_t)&unk_1001CF558);
    sub_10013A420();
    sub_10013A4E4();
    sub_10013A4BC();
    sub_10013A2C0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_1000489DC();
    sub_10000D3A0(v0);
    sub_10000DE74();
    sub_100020AB8();
  }

  sub_10013A598();
  sub_10013A514();
}

uint64_t sub_100135FF0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100137BD0((uint64_t (*)(void))sub_100135EB0, a1);
}

void sub_10013600C()
{
}

void sub_100136028( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  sub_10000D33C(&qword_1001CF468);
  sub_10013A380();
  __chkstk_darwin(v25);
  sub_10013A480();
  unint64_t v26 = sub_100138EB8();
  sub_10013A348((uint64_t)&unk_1001B24E8, v27, v26);
  LOBYTE(a10) = 0;
  type metadata accessor for Date(0LL);
  sub_100139988((uint64_t)&unk_1001CF470);
  sub_10013A2F4();
  if (!v21)
  {
    uint64_t v28 = (int *)type metadata accessor for TreatmentsConfiguration.Area.Experiment(0LL);
    uint64_t v29 = (uint64_t *)(v20 + v28[5]);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    LOBYTE(a10) = 1;
    sub_10013A3F8(v30, v31, (uint64_t)&a10);
    LOBYTE(a10) = 2;
    sub_10013A2F4();
    a10 = *(void *)(v20 + v28[7]);
    sub_1000673F0();
    sub_10013A4A0((uint64_t)&qword_1001C9748);
    uint64_t v32 = sub_10013A4F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v32, v33, v34, v35, v36);
    a10 = *(void *)(v20 + v28[8]);
    sub_1000673F0();
    sub_10013A3F0((uint64_t)&unk_1001CF480);
    sub_10013A618();
    sub_10013A2F4();
  }

  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  sub_100029188();
}

void sub_100136200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  Swift::String v64 = v20;
  uint64_t v25 = v24;
  uint64_t v58 = v26;
  uint64_t v62 = type metadata accessor for Date(0LL);
  uint64_t v60 = *(void *)(v62 - 8);
  uint64_t v27 = __chkstk_darwin(v62);
  uint64_t v29 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  Swift::String v61 = (char *)&v54 - v30;
  uint64_t v59 = sub_10000D33C(&qword_1001CF438);
  __chkstk_darwin(v59);
  uint64_t v32 = (char *)&v54 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for TreatmentsConfiguration.Area.Experiment(0LL);
  __chkstk_darwin(v33);
  sub_1000674E0();
  uint64_t v35 = v25[3];
  uint64_t v34 = v25[4];
  sub_10000D37C(v25, v35);
  unint64_t v36 = sub_100138EB8();
  Swift::String v63 = v32;
  uint64_t v37 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1001B24E8, &unk_1001B24E8, v36, v35, v34);
  if (v37)
  {
    sub_10000D3A0(v25);
  }

  else
  {
    uint64_t v56 = v29;
    Swift::String v57 = (int *)v33;
    uint64_t v38 = v60;
    Swift::String v64 = v25;
    uint64_t v39 = v21;
    LOBYTE(a10) = 0;
    sub_100139988((uint64_t)&unk_1001CF448);
    uint64_t v40 = v59;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v62);
    uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
    uint64_t v42 = v62;
    v41(v39, v61, v62);
    LOBYTE(a10) = 1;
    uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)(&a10, v40);
    Swift::String v55 = v41;
    uint64_t v45 = v56;
    id v44 = v57;
    uint64_t v46 = (uint64_t *)(v39 + v57[5]);
    uint64_t *v46 = v43;
    v46[1] = v47;
    LOBYTE(a10) = 2;
    Swift::String v61 = 0LL;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v42);
    v55(v39 + v44[6], v45, v42);
    sub_1000673F0();
    char v65 = 3;
    sub_10013A4A0((uint64_t)&qword_1001C9710);
    uint64_t v48 = sub_10013A42C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v49, v50, v51, v52);
    *(void *)(v39 + v44[7]) = a10;
    sub_1000673F0();
    char v65 = 4;
    sub_10013A3F0((uint64_t)&unk_1001CF458);
    uint64_t v53 = sub_10013A42C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53);
    sub_10013A2CC();
    *(void *)(v39 + v44[8]) = a10;
    sub_100138F30(v39, v58);
    sub_10000D3A0(v64);
    sub_100138F74(v39);
  }

  sub_100029188();
}

#error "1001365E4: call analysis failed (funcsize=5)"
#error "1001365F8: call analysis failed (funcsize=5)"
uint64_t sub_100136604(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v8;
  char v10;
  if (a1 == 0x73656D614E676162LL && a2 == 0xEC00000065636170LL)
  {
    uint64_t v5 = 0xEC00000065636170LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656D614E676162LL, 0xEC00000065636170LL, a1, a2, 0LL) & 1) != 0)
  {
    uint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E69616D6F64LL && a2 == 0xE600000000000000LL)
  {
    uint64_t v8 = 0xE600000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69616D6F64LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    uint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    uint64_t v10 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100136750(char a1)
{
  if (!a1) {
    return 0x73656D614E676162LL;
  }
  if (a1 == 1) {
    return 0x6E69616D6F64LL;
  }
  return 1701869940LL;
}

void sub_1001367A4()
{
  uint64_t v3 = sub_10000D33C(&qword_1001CF598);
  sub_1000291D4();
  __chkstk_darwin(v4);
  sub_10013A480();
  unint64_t v5 = sub_100139ADC();
  sub_10013A348((uint64_t)&type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys, v6, v5);
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  char v15 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v15, v3);
  if (!v1)
  {
    sub_10013A5F8();
    sub_10013A56C(v9, v10, (uint64_t)&v14);
    uint64_t v11 = v0[4];
    uint64_t v12 = v0[5];
    char v13 = 2;
    sub_10013A56C(v11, v12, (uint64_t)&v13);
  }

  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10013A514();
}

void sub_100136884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v32 = sub_10000D33C(&qword_1001CF588);
  sub_10013A380();
  __chkstk_darwin(v33);
  sub_1000674E0();
  uint64_t v34 = v29[3];
  uint64_t v35 = v29[4];
  sub_100029290();
  unint64_t v36 = sub_100139ADC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys,  &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys,  v36,  v34,  v35);
  if (v24)
  {
    sub_1000291BC();
  }

  else
  {
    a14 = 0;
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&a14, v32);
    uint64_t v39 = v38;
    uint64_t v50 = v37;
    sub_10013A5F8();
    swift_bridgeObjectRetain(v40);
    uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)(&a13, v32);
    uint64_t v43 = v42;
    uint64_t v48 = v41;
    a12 = 2;
    sub_10000DF08();
    uint64_t v49 = v43;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)(&a12, v32);
    uint64_t v46 = v45;
    uint64_t v47 = v44;
    sub_10013A414(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_10000DF08();
    sub_10000D3A0(v29);
    sub_100009070();
    swift_bridgeObjectRelease();
    sub_100020AB8();
    *uint64_t v31 = v50;
    v31[1] = v39;
    v31[2] = v48;
    void v31[3] = v49;
    void v31[4] = v47;
    v31[5] = v46;
  }

  sub_100029188();
}

void sub_100136A2C()
{
  uint64_t v3 = sub_10000D33C(&qword_1001CF510);
  sub_1000291D4();
  __chkstk_darwin(v4);
  sub_10013A480();
  unint64_t v5 = sub_100139838();
  sub_10013A348((uint64_t)&unk_1001B2AE0, v6, v5);
  uint64_t v7 = *v0;
  LOBYTE(v13[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v13, v3);
  if (!v1)
  {
    *(void *)&v13[0] = *((void *)v0 + 1);
    char v14 = 1;
    sub_10000D33C(&qword_1001CF4D0);
    sub_100139874((uint64_t)&unk_1001CF518);
    sub_10013A2F4();
    uint64_t v8 = *((void *)v0 + 2);
    uint64_t v9 = *((void *)v0 + 3);
    LOBYTE(v13[0]) = 2;
    sub_10013A3F8(v8, v9, (uint64_t)v13);
    uint64_t v10 = *((void *)v0 + 4);
    uint64_t v11 = *((void *)v0 + 5);
    LOBYTE(v13[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v10, v11, v13, v3);
    __int128 v12 = *((_OWORD *)v0 + 4);
    v13[0] = *((_OWORD *)v0 + 3);
    v13[1] = v12;
    _OWORD v13[2] = *((_OWORD *)v0 + 5);
    char v14 = 4;
    sub_1001399C0();
    sub_10013A2F4();
  }

  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_10013A514();
}

void sub_100136BC0()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  sub_10000D33C(&qword_1001CF4C0);
  sub_10013A380();
  __chkstk_darwin(v5);
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  sub_10000D37C(v2, v6);
  unint64_t v8 = sub_100139838();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1001B2AE0, &unk_1001B2AE0, v8, v6, v7);
  if (v0)
  {
    sub_10013A650();
  }

  else
  {
    LOBYTE(v25) = 0;
    uint64_t v9 = sub_10013A46C();
    char v11 = KeyedDecodingContainer.decode(_:forKey:)(v9, v10);
    sub_10000D33C(&qword_1001CF4D0);
    sub_100139874((uint64_t)&unk_1001CF4D8);
    sub_10013A658();
    swift_bridgeObjectRetain();
    uint64_t v24 = v25;
    uint64_t v12 = sub_10013A46C();
    uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(v12, v13);
    LOBYTE(v25) = 3;
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v23 = v15;
    uint64_t v16 = sub_10013A46C();
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v16, v17);
    uint64_t v19 = v18;
    unint64_t v20 = sub_1001398D4();
    swift_bridgeObjectRetain();
    sub_10013A658();
    sub_10013A2DC();
    if (v20)
    {
      sub_100009070();
      swift_bridgeObjectRelease();
      sub_10000DDF8();
      sub_10013A650();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10000DDF8();
    }

    else
    {
      sub_10000DF08();
      sub_1000489DC();
      swift_bridgeObjectRetain();
      sub_10013A650();
      swift_bridgeObjectRelease();
      sub_10000DE74();
      sub_100009070();
      sub_10000DDF8();
      swift_bridgeObjectRelease();
      sub_10000DDF8();
      *(_BYTE *)uint64_t v4 = v11 & 1;
      *(void *)(v4 + 8) = v24;
      *(void *)(v4 + swift_weakDestroy(v0 + 16) = v22;
      *(void *)(v4 + 24) = v23;
      *(void *)(v4 + 3sub_10000D3A0(v0 + 2) = v21;
      *(void *)(v4 + 40) = v19;
      *(void *)(v4 + 48) = v25;
      *(void *)(v4 + 56) = v26;
      *(void *)(v4 + 64) = v27;
      *(void *)(v4 + 7sub_10000D3A0(v0 + 2) = v28;
      *(void *)(v4 + 80) = v29;
      *(void *)(v4 + 88) = v30;
    }
  }

  sub_100029188();
}

uint64_t sub_100136EB0(Swift::String a1)
{
  v1._rawValue = &off_1001A79C0;
  return sub_100137194(a1, v1);
}

uint64_t sub_100136ECC(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x73644961657261LL;
  }
  else {
    return 25705LL;
  }
}

void sub_100136EF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v24;
  a23 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = sub_10000D33C(&qword_1001CF530);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_10013A328();
  unint64_t v32 = sub_100139910();
  sub_10013A318((uint64_t)&unk_1001B2A50, v33, v32);
  a13 = 0;
  sub_10013A3F8(v29, v27, (uint64_t)&a13);
  if (!v23)
  {
    sub_10013A5F8();
    sub_1000673F0();
    sub_10013A4A0((uint64_t)&qword_1001C9748);
    sub_10013A2F4();
  }

  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
  sub_100029188();
}

void sub_100137004( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23)
{
  a22 = v26;
  a23 = v27;
  sub_10013A5C4();
  uint64_t v28 = sub_10000D33C(&qword_1001CF4F0);
  sub_10013A380();
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v36 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = v23[3];
  uint64_t v33 = v23[4];
  sub_10000D37C(v23, v32);
  unint64_t v34 = sub_100139910();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&unk_1001B2A50, &unk_1001B2A50, v34, v32, v33);
  if (v24)
  {
    sub_1000291BC();
  }

  else
  {
    a13 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&a13, v28);
    uint64_t v35 = sub_1000673F0();
    sub_10013A5F8();
    sub_10013A4A0((uint64_t)&qword_1001C9710);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v35);
    sub_10013A2EC((uint64_t)v31, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
    sub_1000291BC();
    sub_10000DCFC();
  }

  sub_100029188();
}

uint64_t sub_100137194(Swift::String a1, Swift::OpaquePointer a2)
{
  Swift::Int v2 = sub_10013A4A8(a1, a2);
  sub_100009020();
  if (v2 == 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2) {
    return v3;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1001371CC(Swift::String a1)
{
  v1._rawValue = &off_1001A7A10;
  return sub_100137194(a1, v1);
}

uint64_t sub_1001371E8(char a1)
{
  if ((a1 & 1) != 0) {
    return 25705LL;
  }
  else {
    return 0x73644961657261LL;
  }
}

void sub_100137214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  sub_10013A534(v25, v26, v27, v28);
  sub_10000D33C(&qword_1001CF538);
  sub_10013A5B0();
  __chkstk_darwin(v29);
  sub_10013A328();
  unint64_t v30 = sub_10013994C();
  sub_10013A318((uint64_t)&unk_1001B29C0, v31, v30);
  a10 = v22;
  char v34 = 0;
  uint64_t v32 = sub_1000673F0();
  sub_10013A4A0((uint64_t)&qword_1001C9748);
  sub_10013A604((uint64_t)&a10, (uint64_t)&v34, v20, v32, v33);
  if (!v21) {
    sub_10013A35C();
  }
  sub_10013A54C();
  sub_100029188();
}

void sub_1001372EC()
{
  unint64_t v4 = sub_10013994C();
  sub_10013A300((uint64_t)&unk_1001B29C0, v5, v4);
  if (v1)
  {
    sub_1000291BC();
  }

  else
  {
    sub_1000673F0();
    sub_10013A4A0((uint64_t)&qword_1001C9710);
    sub_10013A420();
    sub_10013A4E4();
    sub_10013A4BC();
    sub_10013A2C0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_1000489DC();
    sub_10000D3A0(v0);
    sub_10000DE74();
    sub_100020AB8();
  }

  sub_10013A598();
  sub_10013A514();
}

uint64_t sub_100137424(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7361657261LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7361657261LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x63617073656D616ELL && a2 == 0xEA00000000007365LL)
  {
    unint64_t v8 = 0xEA00000000007365LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63617073656D616ELL, 0xEA00000000007365LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x736369706F74LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736369706F74LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

void sub_10013756C(unsigned __int8 a1)
{
}

uint64_t sub_1001375AC(char a1)
{
  if (!a1) {
    return 0x7361657261LL;
  }
  if (a1 == 1) {
    return 0x63617073656D616ELL;
  }
  return 0x736369706F74LL;
}

void sub_100137600()
{
  uint64_t v1 = sub_10000D33C(&qword_1001CF400);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_10013A328();
  unint64_t v3 = sub_100138CCC();
  sub_10013A318((uint64_t)&type metadata for TreatmentsConfiguration.CodingKeys, v4, v3);
  sub_1000673F0();
  sub_10013A3F0((uint64_t)&unk_1001CF408);
  uint64_t v5 = sub_10013A4F8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v5, v6, v7, v8, v9);
  if (!v0)
  {
    sub_1000673F0();
    sub_10013A3F0((uint64_t)&unk_1001CF418);
    sub_10013A3D0(v10);
    sub_1000673F0();
    sub_10013A3F0((uint64_t)&unk_1001CF428);
    sub_10013A3D0(v11);
  }

  sub_1000FDBC8(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_100029188();
}

void sub_100137770()
{
  unint64_t v4 = sub_100138CCC();
  sub_10013A300((uint64_t)&type metadata for TreatmentsConfiguration.CodingKeys, v5, v4);
  if (v1)
  {
    sub_1000291BC();
  }

  else
  {
    sub_1000673F0();
    sub_10013A3F0((uint64_t)&unk_1001CF3C0);
    sub_10013A420();
    sub_1000673F0();
    sub_10013A3F0((uint64_t)&unk_1001CF3D8);
    uint64_t v7 = v6;
    swift_bridgeObjectRetain();
    sub_10013A420();
    if (v7)
    {
      sub_10013A2C0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_100020AB8();
      sub_10000D3A0(v0);
    }

    else
    {
      uint64_t v8 = sub_1000673F0();
      sub_10013A3F0((uint64_t)&unk_1001CF3F0);
      sub_1000489DC();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v8);
      sub_10013A2C0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_10000DF08();
      sub_10000D3A0(v0);
      sub_100009070();
      sub_10000DE74();
    }

    sub_100020AB8();
  }

  sub_100029188();
}

uint64_t sub_100137994()
{
  return sub_100136750(*v0);
}

uint64_t sub_10013799C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100136604(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001379C0(uint64_t a1)
{
  unint64_t v2 = sub_100139ADC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001379E8(uint64_t a1)
{
  unint64_t v2 = sub_100139ADC();
  return CodingKey.debugDescription.getter(a1, v2);
}

#error "100137A28: call analysis failed (funcsize=16)"
void sub_100137A50()
{
  sub_1001367A4();
}

void sub_100137A64(void *a1@<X8>)
{
  if (!v1) {
    memcpy(a1, v3, 0x60uLL);
  }
}

void sub_100137AAC()
{
}

void sub_100137AC0(char *a1, unsigned __int8 *a2)
{
}

void sub_100137ACC()
{
}

uint64_t sub_100137AD4(uint64_t a1)
{
  return sub_100006940(a1, *v1);
}

void sub_100137ADC(uint64_t a1)
{
}

uint64_t sub_100137AE4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1001A79C0;
  uint64_t result = sub_100137194(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100137B18()
{
  char v1 = sub_10013A57C();
  *uint64_t v0 = sub_100136ECC(v1);
  v0[1] = v2;
  sub_100009044();
}

uint64_t sub_100137B38()
{
  return sub_100136ECC(*v0);
}

uint64_t sub_100137B40@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100136EB0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100137B64(uint64_t a1)
{
  unint64_t v2 = sub_100139910();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100137B8C(uint64_t a1)
{
  unint64_t v2 = sub_100139910();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100137BB4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100137BD0((uint64_t (*)(void))sub_100137004, a1);
}

uint64_t sub_100137BD0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

#error "100137C0C: call analysis failed (funcsize=7)"
void sub_100137C18(char *a1, unsigned __int8 *a2)
{
  sub_10002123C(*a1, *a2);
}

void sub_100137C24()
{
}

uint64_t sub_100137C2C(uint64_t a1)
{
  return sub_100006984(a1, *v1);
}

void sub_100137C34(uint64_t a1)
{
}

uint64_t sub_100137C3C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1001A7A10;
  uint64_t result = sub_100137194(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100137C70()
{
  char v1 = sub_10013A57C();
  *uint64_t v0 = sub_1001371E8(v1);
  v0[1] = v2;
  sub_100009044();
}

uint64_t sub_100137C90()
{
  return sub_1001371E8(*v0);
}

uint64_t sub_100137C98@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1001371CC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100137CBC(uint64_t a1)
{
  unint64_t v2 = sub_10013994C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100137CE4(uint64_t a1)
{
  unint64_t v2 = sub_10013994C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100137D0C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100137BD0((uint64_t (*)(void))sub_1001372EC, a1);
}

#error "100137D38: call analysis failed (funcsize=7)"
void sub_100137D44()
{
  unsigned __int8 *v0;
  sub_10013756C(*v0);
}

void sub_100137D5C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  Hasher._combine(_:)(v2);
  Hasher._finalize()();
  sub_10013A610();
}

uint64_t sub_100137D98()
{
  return sub_1001375AC(*v0);
}

uint64_t sub_100137DA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100137424(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100137DC4(uint64_t a1)
{
  unint64_t v2 = sub_100138CCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100137DEC(uint64_t a1)
{
  unint64_t v2 = sub_100138CCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100137E14(void *a1@<X8>)
{
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
  }

void sub_100137E40()
{
}

void sub_100137E5C()
{
  uint64_t v1 = v0;
  sub_10000D33C(&qword_1001CB118);
  id v2 = [*(id *)(v1 + 16) URLForKey:*(void *)(v1 + 24)];
  id v3 = [v2 valuePromise];

  uint64_t v4 = Promise<A>.init(_:)(v3);
  uint64_t v5 = type metadata accessor for SyncTaskScheduler(0LL);
  uint64_t v11 = v5;
  uint64_t v12 = &protocol witness table for SyncTaskScheduler;
  sub_10000D63C(v10);
  uint64_t v6 = swift_retain(v0);
  SyncTaskScheduler.init()(v6);
  uint64_t v7 = sub_10000D33C((uint64_t *)&unk_1001CF2E0);
  sub_100125564();
  uint64_t v8 = Promise.flatMap<A>(on:_:)(v10, sub_100138414, v1, v7);
  swift_release(v1);
  sub_10000D3A0(v10);
  uint64_t v11 = v5;
  uint64_t v12 = &protocol witness table for SyncTaskScheduler;
  uint64_t v9 = sub_10000D63C(v10);
  SyncTaskScheduler.init()(v9);
  Promise.map<A>(on:_:)(v10, sub_1001381A8, 0LL, &unk_1001B2448);
  swift_release(v4);
  swift_release(v8);
  sub_10000D3A0(v10);
  sub_10013A610();
}

uint64_t sub_100137FAC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C((uint64_t *)&unk_1001CD650);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URLRequest(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v9, 0LL, 60.0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v6, v13, v10);
  sub_10000D5C0((uint64_t)v6, 0LL, 1LL, v10);
  uint64_t v14 = *(void *)(a2 + 16);
  objc_allocWithZone(&OBJC_CLASS___AMSURLRequest);
  swift_unknownObjectRetain(v14);
  id v15 = sub_1001384E0((uint64_t)v6, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = [*(id *)(a2 + 32) dataTaskPromiseWithRequest:v15];
    sub_10000D33C((uint64_t *)&unk_1001CF2E0);
    uint64_t v18 = Promise<A>.init(_:)(v17);
  }

  else
  {
    sub_10000D33C((uint64_t *)&unk_1001CF2E0);
    unint64_t v19 = sub_10013841C();
    uint64_t v20 = swift_allocError(&unk_1001B23D0, v19, 0LL, 0LL);
    *(void *)uint64_t v21 = 0LL;
    *(_BYTE *)(v21 + 8) = 1;
    uint64_t v18 = Promise.__allocating_init(error:)(v20);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v18;
}

void sub_1001381A8(id *a1)
{
  uint64_t v2 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = *a1;
  id v7 = [*a1 response];
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = v7;
  uint64_t v9 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
  uint64_t v10 = (void *)swift_dynamicCastObjCClass(v8, v9);
  if (!v10)
  {

LABEL_6:
    unint64_t v15 = sub_10013841C();
    swift_allocError(&unk_1001B23D0, v15, 0LL, 0LL);
    *(void *)uint64_t v16 = 1LL;
    *(_BYTE *)(v16 + 8) = 1;
    swift_willThrow();
    return;
  }

  uint64_t v11 = (char *)[v10 statusCode];
  if ((unint64_t)(v11 - 300) >= 0xFFFFFFFFFFFFFF9CLL)
  {
    uint64_t v17 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    uint64_t v18 = JSONDecoder.init()();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for JSONDecoder.DateDecodingStrategy.secondsSince1970(_:),  v2);
    dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v5);
    id v19 = [v6 data];
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    unint64_t v22 = v21;

    unint64_t v23 = sub_100138458();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&unk_1001B2448, v20, v22, &unk_1001B2448, v23);
    sub_10001BD84(v20, v22);

    swift_release(v18);
  }

  else
  {
    uint64_t v12 = v11;
    unint64_t v13 = sub_10013841C();
    swift_allocError(&unk_1001B23D0, v13, 0LL, 0LL);
    *(void *)uint64_t v14 = v12;
    *(_BYTE *)(v14 + 8) = 0;
    swift_willThrow();
  }

uint64_t sub_1001383A8()
{
  return v0;
}

uint64_t sub_1001383D4()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for TreatmentsConfigurationProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd31TreatmentsConfigurationProvider);
}

uint64_t sub_100138414(void *a1)
{
  return sub_100137FAC(a1, v1);
}

unint64_t sub_10013841C()
{
  unint64_t result = qword_1001CF2F0;
  if (!qword_1001CF2F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001692F8, &unk_1001B23D0);
    atomic_store(result, (unint64_t *)&qword_1001CF2F0);
  }

  return result;
}

unint64_t sub_100138458()
{
  unint64_t result = qword_1001CF2F8;
  if (!qword_1001CF2F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001692D0, &unk_1001B2448);
    atomic_store(result, (unint64_t *)&qword_1001CF2F8);
  }

  return result;
}

uint64_t sub_100138494(uint64_t a1, char a2, uint64_t a3, char a4)
{
  BOOL v5 = (a4 & 1) == 0 && a1 == a3;
  unsigned int v6 = a4 & 1;
  if (a3) {
    int v7 = a4 & 1;
  }
  else {
    int v7 = 0;
  }
  if (a3) {
    unsigned int v6 = 0;
  }
  if (a1) {
    unsigned int v6 = v7;
  }
  if ((a2 & 1) != 0) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t sub_1001384C4(uint64_t a1, uint64_t a2)
{
  return sub_100138494(*(void *)a1, *(_BYTE *)(a1 + 8), *(void *)a2, *(_BYTE *)(a2 + 8));
}

id sub_1001384E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URLRequest(0LL);
  Class isa = 0LL;
  if (sub_1000102D4(a1, 1LL, v6) != 1)
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
  }

  id v8 = [v3 initWithRequest:isa bag:a2];

  swift_unknownObjectRelease(a2);
  return v8;
}

void type metadata accessor for TreatmentsConfigurationProviderError()
{
}

uint64_t sub_100138594(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

void sub_1001385C4(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10000DF08();
  swift_bridgeObjectRetain();
  sub_10000DFE8();
}

uint64_t *sub_100138604(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *sub_100138678(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

void type metadata accessor for TreatmentsConfiguration()
{
}

char *sub_1001386D8(char *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *(void *)uint64_t v11 = *v12;
    *((void *)v11 + setenv("JavaScriptCoreUseJIT", "0", 1) = v13;
    uint64_t v14 = &a1[v10];
    unint64_t v15 = (char *)a2 + v10;
    swift_bridgeObjectRetain(v13);
    v8(v14, v15, v7);
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = *(uint64_t *)((char *)a2 + v16);
    *(void *)&a1[v16] = v18;
    uint64_t v19 = *(uint64_t *)((char *)a2 + v17);
    *(void *)&a1[v17] = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t sub_1001387B8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  v5(a1 + a2[6], v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[8]));
}

uint64_t sub_100138834(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a1 + v9;
  uint64_t v14 = a2 + v9;
  swift_bridgeObjectRetain(v12);
  v7(v13, v14, v6);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void *)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  uint64_t v18 = *(void *)(a2 + v16);
  *(void *)(a1 + vswift_weakDestroy(v0 + 16) = v18;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_1001388E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)(a1 + v13);
  uint64_t v15 = *(void *)(a2 + v13);
  *(void *)(a1 + v13) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void *)(a2 + v16);
  uint64_t v18 = *(void *)(a1 + v16);
  *(void *)(a1 + vswift_weakDestroy(v0 + 16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

uint64_t sub_1001389BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  uint64_t v9 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + vsub_10000D3A0(v0 + 9) = *(void *)(a2 + v9);
  return a1;
}

uint64_t sub_100138A48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v9[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v7(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void *)(a1 + v14);
  *(void *)(a1 + vsub_10000D3A0(v0 + 14) = *(void *)(a2 + v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void *)(a1 + v16);
  *(void *)(a1 + vswift_weakDestroy(v0 + 16) = *(void *)(a2 + v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100138AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100138B08);
}

uint64_t sub_100138B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_1000102D4(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_100138B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100138B90);
}

uint64_t sub_100138B90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_10000D5C0(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TreatmentsConfiguration.Area.Experiment(uint64_t a1)
{
  uint64_t result = qword_1001CF360;
  if (!qword_1001CF360) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TreatmentsConfiguration.Area.Experiment);
  }
  return result;
}

uint64_t sub_100138C40(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1001691F8;
    v4[2] = v4[0];
    void v4[3] = &unk_100169210;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_100138CCC()
{
  unint64_t result = qword_1001CF3B0;
  if (!qword_1001CF3B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001696EC, &type metadata for TreatmentsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF3B0);
  }

  return result;
}

unint64_t sub_100138D08()
{
  unint64_t result = qword_1001CF3C8;
  if (!qword_1001CF3C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001696C4, &unk_1001B27F8);
    atomic_store(result, (unint64_t *)&qword_1001CF3C8);
  }

  return result;
}

void sub_100138D44(uint64_t a1)
{
  if (!sub_10013A528(a1))
  {
    uint64_t v5 = sub_10013A588(0LL, v4);
    v3();
    atomic_store(swift_getWitnessTable(v2, v5), v1);
  }

  sub_1000291C4();
}

unint64_t sub_100138D8C()
{
  unint64_t result = qword_1001CF3E0;
  if (!qword_1001CF3E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016969C, &unk_1001B2670);
    atomic_store(result, (unint64_t *)&qword_1001CF3E0);
  }

  return result;
}

unint64_t sub_100138DC8()
{
  unint64_t result = qword_1001CF3F8;
  if (!qword_1001CF3F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169674, &unk_1001B25F0);
    atomic_store(result, (unint64_t *)&qword_1001CF3F8);
  }

  return result;
}

unint64_t sub_100138E04()
{
  unint64_t result = qword_1001CF410;
  if (!qword_1001CF410)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016964C, &unk_1001B27F8);
    atomic_store(result, (unint64_t *)&qword_1001CF410);
  }

  return result;
}

unint64_t sub_100138E40()
{
  unint64_t result = qword_1001CF420;
  if (!qword_1001CF420)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169624, &unk_1001B2670);
    atomic_store(result, (unint64_t *)&qword_1001CF420);
  }

  return result;
}

unint64_t sub_100138E7C()
{
  unint64_t result = qword_1001CF430;
  if (!qword_1001CF430)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001695FC, &unk_1001B25F0);
    atomic_store(result, (unint64_t *)&qword_1001CF430);
  }

  return result;
}

unint64_t sub_100138EB8()
{
  unint64_t result = qword_1001CF440;
  if (!qword_1001CF440)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001695AC, &unk_1001B24E8);
    atomic_store(result, (unint64_t *)&qword_1001CF440);
  }

  return result;
}

unint64_t sub_100138EF4()
{
  unint64_t result = qword_1001CF460;
  if (!qword_1001CF460)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169584, &unk_1001B26F0);
    atomic_store(result, (unint64_t *)&qword_1001CF460);
  }

  return result;
}

uint64_t sub_100138F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TreatmentsConfiguration.Area.Experiment(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100138F74(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TreatmentsConfiguration.Area.Experiment(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100138FB0()
{
  unint64_t result = qword_1001CF488;
  if (!qword_1001CF488)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016955C, &unk_1001B26F0);
    atomic_store(result, (unint64_t *)&qword_1001CF488);
  }

  return result;
}

void type metadata accessor for TreatmentsConfiguration.Area.Experiment.CodingKeys()
{
}

ValueMetadata *type metadata accessor for TreatmentsConfiguration.CodingKeys()
{
  return &type metadata for TreatmentsConfiguration.CodingKeys;
}

void type metadata accessor for TreatmentsConfiguration.Topic()
{
}

void type metadata accessor for TreatmentsConfiguration.Namespace()
{
}

uint64_t sub_10013903C(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

void sub_100139064(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_10000DF08();
  sub_100009044();
}

void sub_100139098(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  sub_100009020();
  sub_10000DFE8();
}

void sub_1001390F0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  sub_100009044();
}

uint64_t sub_100139130(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100139170(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for TreatmentsConfiguration.Area.Experiment.Treatment()
{
}

uint64_t sub_1001391BC(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *sub_1001391EC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *sub_100139240(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *sub_1001392CC(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_100139320(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_10000D3A0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100139360(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for TreatmentsConfiguration.Area.Seed()
{
}

uint64_t sub_1001393B8(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t sub_100139400(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v5;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v7;
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v9;
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = v12;
  *(void *)(a1 + 80) = v11;
  uint64_t v13 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_100139494(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

void *sub_100139580(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_100139588(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = *(void *)(a2 + 88);
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_100139614(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_10000D3A0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100139654(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 7sub_10000D3A0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for TreatmentsConfiguration.Area()
{
}

unint64_t sub_1001396BC()
{
  unint64_t result = qword_1001CF490;
  if (!qword_1001CF490)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169444, &type metadata for TreatmentsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF490);
  }

  return result;
}

unint64_t sub_1001396FC()
{
  unint64_t result = qword_1001CF498;
  if (!qword_1001CF498)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169534, &unk_1001B24E8);
    atomic_store(result, (unint64_t *)&qword_1001CF498);
  }

  return result;
}

unint64_t sub_10013973C()
{
  unint64_t result = qword_1001CF4A0;
  if (!qword_1001CF4A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016946C, &unk_1001B24E8);
    atomic_store(result, (unint64_t *)&qword_1001CF4A0);
  }

  return result;
}

unint64_t sub_10013977C()
{
  unint64_t result = qword_1001CF4A8;
  if (!qword_1001CF4A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169494, &unk_1001B24E8);
    atomic_store(result, (unint64_t *)&qword_1001CF4A8);
  }

  return result;
}

unint64_t sub_1001397BC()
{
  unint64_t result = qword_1001CF4B0;
  if (!qword_1001CF4B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001693B4, &type metadata for TreatmentsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF4B0);
  }

  return result;
}

unint64_t sub_1001397FC()
{
  unint64_t result = qword_1001CF4B8;
  if (!qword_1001CF4B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001693DC, &type metadata for TreatmentsConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF4B8);
  }

  return result;
}

unint64_t sub_100139838()
{
  unint64_t result = qword_1001CF4C8;
  if (!qword_1001CF4C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169CF4, &unk_1001B2AE0);
    atomic_store(result, (unint64_t *)&qword_1001CF4C8);
  }

  return result;
}

void sub_100139874(uint64_t a1)
{
  if (!sub_10013A528(a1))
  {
    uint64_t v3 = v2;
    sub_10000D820(&qword_1001CF4D0);
    sub_100139988(v3);
    atomic_store(sub_10013A4D0(), v1);
  }

  sub_10003734C();
}

unint64_t sub_1001398D4()
{
  unint64_t result = qword_1001CF4E8;
  if (!qword_1001CF4E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016938C, &unk_1001B2770);
    atomic_store(result, (unint64_t *)&qword_1001CF4E8);
  }

  return result;
}

unint64_t sub_100139910()
{
  unint64_t result = qword_1001CF4F8;
  if (!qword_1001CF4F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169CA4, &unk_1001B2A50);
    atomic_store(result, (unint64_t *)&qword_1001CF4F8);
  }

  return result;
}

unint64_t sub_10013994C()
{
  unint64_t result = qword_1001CF508;
  if (!qword_1001CF508)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169C54, &unk_1001B29C0);
    atomic_store(result, (unint64_t *)&qword_1001CF508);
  }

  return result;
}

void sub_100139988(uint64_t a1)
{
  if (!sub_10013A528(a1))
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2(255LL);
    atomic_store(swift_getWitnessTable(v4, v5), v1);
  }

  sub_100009044();
}

unint64_t sub_1001399C0()
{
  unint64_t result = qword_1001CF528;
  if (!qword_1001CF528)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169364, &unk_1001B2770);
    atomic_store(result, (unint64_t *)&qword_1001CF528);
  }

  return result;
}

unint64_t sub_1001399FC()
{
  unint64_t result = qword_1001CF548;
  if (!qword_1001CF548)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169C04, &unk_1001B2930);
    atomic_store(result, (unint64_t *)&qword_1001CF548);
  }

  return result;
}

void sub_100139A38(uint64_t a1)
{
  if (!sub_10013A528(a1))
  {
    uint64_t v3 = v2;
    sub_10000D820(&qword_1001CF550);
    sub_100139A9C(v3);
    atomic_store(sub_10013A4D0(), v1);
  }

  sub_10003734C();
}

void sub_100139A9C(uint64_t a1)
{
  if (!sub_10013A528(a1))
  {
    uint64_t v4 = sub_10013A588(0LL, v3);
    atomic_store(swift_getWitnessTable(v2, v4), v1);
  }

  sub_1000291C4();
}

unint64_t sub_100139ADC()
{
  unint64_t result = qword_1001CF590;
  if (!qword_1001CF590)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169BB4, &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF590);
  }

  return result;
}

uint64_t _s14amsengagementd23TreatmentsConfigurationV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_10013A5F0(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 3);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_10013A5F0((*a1 | (v4 << 8)) - 3);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 3);
    }
  }

uint64_t _s14amsengagementd23TreatmentsConfigurationV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100139BE8 + 4 * byte_100169149[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100139C1C + 4 * byte_100169144[v4]))();
}

uint64_t sub_100139C20(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100139C28LL);
  }
  return result;
}

uint64_t sub_100139C30(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100139C38LL);
  }
  return sub_10013A5E0();
}

ValueMetadata *type metadata accessor for TreatmentsConfiguration.Area.Seed.CodingKeys()
{
  return &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys;
}

void type metadata accessor for TreatmentsConfiguration.Area.Experiment.Treatment.CodingKeys()
{
}

void type metadata accessor for TreatmentsConfiguration.Topic.CodingKeys()
{
}

uint64_t sub_100139C78(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_10013A5F0(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 2);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_10013A5F0((*a1 | (v4 << 8)) - 2);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 2);
    }
  }

uint64_t sub_100139CFC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100139D48 + 4 * byte_100169153[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100139D7C + 4 * byte_10016914E[v4]))();
}

uint64_t sub_100139D80(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100139D88LL);
  }
  return result;
}

uint64_t sub_100139D90(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100139D98LL);
  }
  return sub_10013A5E0();
}

void type metadata accessor for TreatmentsConfiguration.Namespace.CodingKeys()
{
}

uint64_t sub_100139DB4(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_10013A5F0(-1);
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 5);
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_10013A5F0((*a1 | (v4 << 8)) - 5);
    }

    int v4 = a1[1];
    if (a1[1]) {
      return sub_10013A5F0((*a1 | (v4 << 8)) - 5);
    }
  }

uint64_t sub_100139E38(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100139E84 + 4 * byte_10016915D[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100139EB8 + 4 * byte_100169158[v4]))();
}

uint64_t sub_100139EBC(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100139EC4LL);
  }
  return result;
}

uint64_t sub_100139ECC(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100139ED4LL);
  }
  return sub_10013A5E0();
}

void type metadata accessor for TreatmentsConfiguration.Area.CodingKeys()
{
}

unint64_t sub_100139EF4()
{
  unint64_t result = qword_1001CF5A0;
  if (!qword_1001CF5A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169804, &unk_1001B2AE0);
    atomic_store(result, (unint64_t *)&qword_1001CF5A0);
  }

  return result;
}

unint64_t sub_100139F34()
{
  unint64_t result = qword_1001CF5A8;
  if (!qword_1001CF5A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001698F4, &unk_1001B2A50);
    atomic_store(result, (unint64_t *)&qword_1001CF5A8);
  }

  return result;
}

unint64_t sub_100139F74()
{
  unint64_t result = qword_1001CF5B0;
  if (!qword_1001CF5B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001699E4, &unk_1001B29C0);
    atomic_store(result, (unint64_t *)&qword_1001CF5B0);
  }

  return result;
}

unint64_t sub_100139FB4()
{
  unint64_t result = qword_1001CF5B8;
  if (!qword_1001CF5B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169AD4, &unk_1001B2930);
    atomic_store(result, (unint64_t *)&qword_1001CF5B8);
  }

  return result;
}

unint64_t sub_100139FF4()
{
  unint64_t result = qword_1001CF5C0;
  if (!qword_1001CF5C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169B8C, &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF5C0);
  }

  return result;
}

unint64_t sub_10013A034()
{
  unint64_t result = qword_1001CF5C8;
  if (!qword_1001CF5C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169AFC, &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF5C8);
  }

  return result;
}

unint64_t sub_10013A074()
{
  unint64_t result = qword_1001CF5D0;
  if (!qword_1001CF5D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169B24, &type metadata for TreatmentsConfiguration.Area.Seed.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001CF5D0);
  }

  return result;
}

unint64_t sub_10013A0B4()
{
  unint64_t result = qword_1001CF5D8;
  if (!qword_1001CF5D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169A0C, &unk_1001B2930);
    atomic_store(result, (unint64_t *)&qword_1001CF5D8);
  }

  return result;
}

unint64_t sub_10013A0F4()
{
  unint64_t result = qword_1001CF5E0;
  if (!qword_1001CF5E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169A34, &unk_1001B2930);
    atomic_store(result, (unint64_t *)&qword_1001CF5E0);
  }

  return result;
}

unint64_t sub_10013A134()
{
  unint64_t result = qword_1001CF5E8;
  if (!qword_1001CF5E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016991C, &unk_1001B29C0);
    atomic_store(result, (unint64_t *)&qword_1001CF5E8);
  }

  return result;
}

unint64_t sub_10013A174()
{
  unint64_t result = qword_1001CF5F0;
  if (!qword_1001CF5F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169944, &unk_1001B29C0);
    atomic_store(result, (unint64_t *)&qword_1001CF5F0);
  }

  return result;
}

unint64_t sub_10013A1B4()
{
  unint64_t result = qword_1001CF5F8;
  if (!qword_1001CF5F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016982C, &unk_1001B2A50);
    atomic_store(result, (unint64_t *)&qword_1001CF5F8);
  }

  return result;
}

unint64_t sub_10013A1F4()
{
  unint64_t result = qword_1001CF600;
  if (!qword_1001CF600)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169854, &unk_1001B2A50);
    atomic_store(result, (unint64_t *)&qword_1001CF600);
  }

  return result;
}

unint64_t sub_10013A234()
{
  unint64_t result = qword_1001CF608;
  if (!qword_1001CF608)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016973C, &unk_1001B2AE0);
    atomic_store(result, (unint64_t *)&qword_1001CF608);
  }

  return result;
}

unint64_t sub_10013A274()
{
  unint64_t result = qword_1001CF610;
  if (!qword_1001CF610)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169764, &unk_1001B2AE0);
    atomic_store(result, (unint64_t *)&qword_1001CF610);
  }

  return result;
}

uint64_t sub_10013A2C0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10013A2CC()
{
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v2 - 104), v1);
}

uint64_t sub_10013A2DC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10013A2EC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_10013A2F4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10013A300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10013A318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

void *sub_10013A328()
{
  return sub_10000D37C(v0, v0[3]);
}

uint64_t sub_10013A348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)(a1, a1, a3, v3, v4);
}

uint64_t sub_10013A35C()
{
  *(_BYTE *)(v2 - 8sub_10000D3A0(v0 + 2) = 1;
  return KeyedEncodingContainer.encode(_:forKey:)(v1, *(void *)(v2 - 96), v2 - 82, v0);
}

  ;
}

uint64_t sub_10013A390()
{
  return 0x6F726665726F7473LL;
}

uint64_t sub_10013A3B0()
{
  return 0x656D697265707865LL;
}

uint64_t sub_10013A3D0(uint64_t a1)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 72, v3 - 81, v1, v2, a1);
}

void sub_10013A3F0(uint64_t a1)
{
}

uint64_t sub_10013A3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10013A408()
{
  return 25705LL;
}

uint64_t sub_10013A414@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_10013A420()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10013A42C()
{
  return v0;
}

uint64_t sub_10013A450()
{
  return 0x6D69547472617473LL;
}

uint64_t sub_10013A46C()
{
  return v0 - 128;
}

void *sub_10013A480()
{
  return sub_10000D37C(v0, v0[3]);
}

void sub_10013A4A0(uint64_t a1)
{
}

Swift::Int sub_10013A4A8(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  return _findStringSwitchCase(cases:string:)(cases, v3);
}

uint64_t sub_10013A4BC()
{
  return KeyedDecodingContainer.decode(_:forKey:)(v1 - 74, v0);
}

uint64_t sub_10013A4D0()
{
  return swift_getWitnessTable(v0, v1);
}

uint64_t sub_10013A4E4()
{
  uint64_t v1 = *(void *)(v0 - 72);
  *(_BYTE *)(v0 - 74) = 1;
  return swift_bridgeObjectRetain(v1);
}

uint64_t sub_10013A4F8()
{
  return v0 - 72;
}

  ;
}

uint64_t sub_10013A528(uint64_t a1)
{
  return *(void *)a1;
}

void sub_10013A534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 - 96) = a4;
}

uint64_t sub_10013A54C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_10013A55C()
{
  return 1953259891LL;
}

uint64_t sub_10013A56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_10013A57C()
{
  return *v0;
}

uint64_t sub_10013A588(uint64_t a1, uint64_t *a2)
{
  return sub_10000D820(a2);
}

uint64_t sub_10013A598()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_10013A5D0(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10013A5D8(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

_BYTE *sub_10013A5E0@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *unint64_t result = a2;
  return result;
}

uint64_t sub_10013A5E8(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10013A5F0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void sub_10013A5F8()
{
  *(_BYTE *)(v0 - 66) = 1;
}

uint64_t sub_10013A604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

  ;
}

uint64_t sub_10013A618()
{
  return v0 - 72;
}

uint64_t sub_10013A62C()
{
  return 0x6C62616568636163LL;
}

uint64_t sub_10013A650()
{
  return sub_10000D3A0(v0);
}

uint64_t sub_10013A658()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10013A664(uint64_t a1)
{
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_100169D50;
  *(void *)(v1 + 3sub_10000D3A0(v0 + 2) = 0xFFFFFFFFFFFFLL;
  *(void *)(v1 + 40) = a1 & 0xFFFFFFFFFFFFLL ^ 0x5DEECE66DLL;
  return v1;
}

unint64_t sub_10013A694(uint64_t a1)
{
  unint64_t v2 = 0x5DEECE66DLL;
  uint64_t v3 = 0x5DEECE66DLL * *(void *)(v1 + 40);
  BOOL v4 = __OFADD__(v3, 11LL);
  unint64_t v5 = v3 + 11;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }

  v5 &= 0xFFFFFFFFFFFFuLL;
  *(void *)(v1 + 40) = v5;
  unint64_t v2 = 48 - a1;
  if (__OFSUB__(48LL, a1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  if ((v2 & 0x8000000000000000LL) == 0)
  {
    unint64_t v7 = v5 >> v2;
    if (v2 >= 0x40) {
      return 0LL;
    }
    else {
      return v7;
    }
  }

uint64_t sub_10013A708(uint64_t a1)
{
  uint64_t result = sub_10013A694(31LL);
  uint64_t v3 = a1 - 1;
  if (__OFSUB__(a1, 1LL))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v4 = result;
  if ((v3 & a1) != 0)
  {
    if (!a1)
    {
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    if (result == 0x8000000000000000LL && a1 == -1) {
      goto LABEL_30;
    }
    result %= a1;
    BOOL v6 = __OFSUB__(v4, v4 % a1);
    uint64_t v7 = v4 - v4 % a1;
    if (v6) {
      goto LABEL_27;
    }
    BOOL v6 = __OFADD__(v7, v3);
    uint64_t v8 = v7 + v3;
    if (v6)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (v8 < 0)
    {
      while (1)
      {
        uint64_t result = sub_10013A694(31LL);
        if (result == 0x8000000000000000LL && a1 == -1) {
          break;
        }
        uint64_t v10 = result;
        result %= a1;
        BOOL v6 = __OFSUB__(v10, result);
        uint64_t v11 = v10 - result;
        if (v6)
        {
          __break(1u);
LABEL_23:
          __break(1u);
          break;
        }

        BOOL v6 = __OFADD__(v11, v3);
        uint64_t v12 = v11 + v3;
        if (v6) {
          goto LABEL_23;
        }
        if ((v12 & 0x8000000000000000LL) == 0) {
          return result;
        }
      }

      __break(1u);
      goto LABEL_25;
    }
  }

  else
  {
    if ((unsigned __int128)(a1 * (__int128)result) >> 64 != (a1 * result) >> 63)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }

    return (a1 * result) >> 31;
  }

  return result;
}

uint64_t sub_10013A7EC()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for TreatmentsRandomGenerator()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd25TreatmentsRandomGenerator);
}

NSString sub_10013A81C()
{
  uint64_t v0 = sub_100020AF8((uint64_t)&unk_1001B2D60);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v1 = sub_100020AF8((uint64_t)&unk_1001B2D10);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  unint64_t v2 = (uint64_t *)(v1 + 16);
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0LL);
  uint64_t v4 = (void *)sub_10000DDDC((uint64_t)&unk_1001B2D88, 40LL);
  sub_10013E0D4(v4);
  swift_retain(v0);
  unint64_t v5 = v3;
  sub_100052BF8();
  swift_release();
  OS_dispatch_semaphore.wait()();
  sub_100020A94(v0 + 16, (uint64_t)v12);
  NSString v6 = *(NSString *)(v0 + 16);
  if (v6)
  {
    sub_10000DF08();
    sub_10001A2D8();
    sub_100025894();
  }

  else
  {
    sub_100020A94((uint64_t)v2, (uint64_t)&v11);
    uint64_t v7 = *v2;
    if (!*v2)
    {
      NSString v6 = sub_10013DF8C();
      NSString v8 = sub_10013E09C();
      (id)sub_10013E02C((uint64_t)v8);

      uint64_t v7 = 0LL;
    }

    uint64_t v9 = swift_errorRetain(v7);
    swift_willThrow(v9);
    sub_10001A2D8();
    sub_100025894();
  }

  return v6;
}

void sub_10013A978(_OWORD *a1@<X8>)
{
  uint64_t v2 = sub_10000DDDC((uint64_t)&unk_1001B2DB0, 48LL);
  *(_OWORD *)(v2 + 3sub_10000D3A0(v0 + 2) = 0u;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = 0u;
  uint64_t v3 = sub_100020AF8((uint64_t)&unk_1001B2D10);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v4 = (uint64_t *)(v3 + 16);
  dispatch_semaphore_t v5 = dispatch_semaphore_create(0LL);
  NSString v6 = (void *)sub_10000DDDC((uint64_t)&unk_1001B2DD8, 40LL);
  sub_10013E0D4(v6);
  swift_retain(v2);
  uint64_t v7 = v5;
  sub_100053DDC();
  swift_release();
  OS_dispatch_semaphore.wait()();
  sub_100020A94(v2 + 16, (uint64_t)v15);
  sub_100092A2C(v2 + 16, (uint64_t)&v13, &qword_1001CA778);
  if (*((void *)&v14 + 1))
  {

    __int128 v8 = v14;
    *a1 = v13;
    a1[1] = v8;
    sub_10001A2D8();
    sub_100025894();
  }

  else
  {
    sub_100019E6C((uint64_t)&v13, &qword_1001CA778);
    sub_100020A94((uint64_t)v4, (uint64_t)&v13);
    uint64_t v9 = *v4;
    if (!*v4)
    {
      NSString v10 = sub_10013DF8C();
      NSString v11 = sub_10013E09C();
      (id)sub_10013E02C((uint64_t)v11);

      uint64_t v9 = 0LL;
    }

    uint64_t v12 = swift_errorRetain(v9);
    swift_willThrow(v12);
    sub_10001A2D8();
    sub_100025894();
  }

void sub_10013AB14()
{
  uint64_t v0 = swift_allocObject(&unk_1001B2CE8, 17LL, 7LL);
  *(_BYTE *)(v0 + swift_weakDestroy(v0 + 16) = 1;
  uint64_t v1 = swift_allocObject(&unk_1001B2D10, 24LL, 7LL);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v2 = (uint64_t *)(v1 + 16);
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0LL);
  uint64_t v4 = (void *)swift_allocObject(&unk_1001B2D38, 40LL, 7LL);
  v4[2] = v1;
  void v4[3] = v0;
  v4[4] = v3;
  swift_retain(v1);
  swift_retain(v0);
  dispatch_semaphore_t v5 = v3;
  sub_100052E60();
  swift_release(v4);
  OS_dispatch_semaphore.wait()();
  swift_beginAccess(v0 + 16, v11, 0LL, 0LL);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    swift_beginAccess(v2, &v10, 0LL, 0LL);
    uint64_t v6 = *v2;
    if (!*v2)
    {
      NSString v7 = String._bridgeToObjectiveC()();
      NSString v8 = String._bridgeToObjectiveC()();
      (id)AMSError(0LL, v7, v8, 0LL);

      uint64_t v6 = 0LL;
    }

    uint64_t v9 = swift_errorRetain(v6);
    swift_willThrow(v9);
  }

  swift_release(v0);
  swift_release(v1);
}

Swift::Int sub_10013ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4 + 16;
  swift_beginAccess(a3 + 16, v13, 1LL, 0LL);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v9);
  swift_beginAccess(v8, &v12, 1LL, 0LL);
  uint64_t v10 = *(void *)(a4 + 16);
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRelease(v10);
  return OS_dispatch_semaphore.signal()();
}

Swift::Int sub_10013AD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a4 + 16;
  swift_beginAccess(a3 + 16, v11, 1LL, 0LL);
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v8);
  swift_beginAccess(v7, &v10, 1LL, 0LL);
  sub_10013D680(a1, v7);
  return OS_dispatch_semaphore.signal()();
}

Swift::Int sub_10013AE18(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a4 + 16;
  swift_beginAccess(a3 + 16, v12, 1LL, 0LL);
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + swift_weakDestroy(v0 + 16) = a2;
  swift_errorRetain(a2);
  swift_errorRelease(v9);
  swift_beginAccess(v8, &v11, 1LL, 0LL);
  *(_BYTE *)(a4 + swift_weakDestroy(v0 + 16) = a1 & 1;
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10013AEB4()
{
  unint64_t v0 = sub_10004828C();
  return StringProtocol.hash.getter(&type metadata for String, v0);
}

uint64_t sub_10013AF04(uint64_t a1)
{
  dispatch_semaphore_t v3 = (void *)(v1 + *(int *)(type metadata accessor for Treatment(0LL) + 20));
  return String.hash(into:)(a1, *v3, v3[1]);
}

void sub_10013AF38(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0
    && ((uint64_t v4 = type metadata accessor for Treatment(0LL),
         uint64_t v5 = *(int *)(v4 + 20),
         uint64_t v6 = *(void *)(a1 + v5),
         uint64_t v7 = *(void *)(a1 + v5 + 8),
         uint64_t v8 = (void *)(a2 + v5),
         uint64_t v9 = v8[1],
         v6 == *v8)
      ? (BOOL v10 = v7 == v9)
      : (BOOL v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0LL) & 1) != 0))
  {
    static Date.== infix(_:_:)(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24));
  }

  else
  {
    sub_10000DFE8();
  }

Swift::Int sub_10013AFC0(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_10013B00C()
{
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v2 = v0[3];
  }

  else
  {
    sub_10013B06C((uint64_t)v0, *v0);
    uint64_t v2 = v3;
    uint64_t v4 = v0[3];
    v0[3] = v3;
    swift_retain(v3);
    swift_release(v4);
    uint64_t v1 = 0LL;
  }

  swift_retain(v1);
  return v2;
}

void sub_10013B06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = URL.path.getter();
  uint64_t v6 = v5;
  uint64_t v7 = swift_allocObject(&unk_1001B2CC0, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a2;
  uint64_t v8 = type metadata accessor for SQLDatabase();
  swift_allocObject(v8, 113LL, 7LL);
  swift_retain(a1);
  SQLDatabase.init(path:readonly:fileProtection:schemaBlock:corruptionBlock:)( v4,  v6,  0,  0LL,  (uint64_t)sub_10013D578,  v7,  (uint64_t)sub_10013D598,  a1);
}

uint64_t sub_10013B120(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      _StringGuts.grow(_:)(37LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v40._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
      v40._object = (void *)0x80000001001784E0LL;
      SQLDatabase.execute(sql:parameters:)(v40, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
      if (!v41) {
        return 2LL;
      }
    }

    else if (a2)
    {
      unint64_t v42 = sub_10013D328();
      uint64_t v43 = swift_allocError(&unk_1001B2E70, v42, 0LL, 0LL);
      *uint64_t v44 = 0LL;
      v44[1] = 0LL;
      swift_willThrow(v43);
    }

    else
    {
      _StringGuts.grow(_:)(73LL);
      v2._uint64_t countAndFlagsBits = 0x5420455441455243LL;
      v2._object = (void *)0xED000020454C4241LL;
      String.append(_:)(v2);
      v3._uint64_t countAndFlagsBits = 0x7361657261LL;
      v3._object = (void *)0xE500000000000000LL;
      String.append(_:)(v3);
      v4._uint64_t countAndFlagsBits = 10272LL;
      v4._object = (void *)0xE200000000000000LL;
      String.append(_:)(v4);
      v5._uint64_t countAndFlagsBits = 0x696669746E656469LL;
      v5._object = (void *)0xEA00000000007265LL;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = 0xD000000000000013LL;
      v6._object = (void *)0x800000010016C060LL;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 1953259891LL;
      v7._object = (void *)0xE400000000000000LL;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = 0x202C5458455420LL;
      v8._object = (void *)0xE700000000000000LL;
      String.append(_:)(v8);
      v9._object = (void *)0x8000000100178320LL;
      v9._uint64_t countAndFlagsBits = 0xD000000000000010LL;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = 0x202C5458455420LL;
      v10._object = (void *)0xE700000000000000LL;
      String.append(_:)(v10);
      v11._object = (void *)0xEA00000000006E69LL;
      v11._uint64_t countAndFlagsBits = 0x616D6F4464656573LL;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = 0x202C5458455420LL;
      v12._object = (void *)0xE700000000000000LL;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = 0x6570795464656573LL;
      v13._object = (void *)0xE800000000000000LL;
      String.append(_:)(v13);
      v14._uint64_t countAndFlagsBits = 0x295458455420LL;
      v14._object = (void *)0xE600000000000000LL;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = 0LL;
      v15._object = (void *)0xE000000000000000LL;
      SQLDatabase.execute(sql:parameters:)(v15, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      if (!v16)
      {
        _StringGuts.grow(_:)(34LL);
        swift_bridgeObjectRelease(0xE000000000000000LL);
        v17._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
        v17._object = (void *)0x8000000100178510LL;
        SQLDatabase.execute(sql:parameters:)(v17, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
        if (!v18)
        {
          _StringGuts.grow(_:)(34LL);
          swift_bridgeObjectRelease(0xE000000000000000LL);
          v19._uint64_t countAndFlagsBits = 0xD000000000000033LL;
          v19._object = (void *)0x8000000100178550LL;
          SQLDatabase.execute(sql:parameters:)(v19, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
          if (!v20)
          {
            _StringGuts.grow(_:)(85LL);
            v21._uint64_t countAndFlagsBits = 0x5420455441455243LL;
            v21._object = (void *)0xED000020454C4241LL;
            String.append(_:)(v21);
            v22._object = (void *)0xEA00000000007374LL;
            v22._uint64_t countAndFlagsBits = 0x6E656D7461657274LL;
            String.append(_:)(v22);
            v23._uint64_t countAndFlagsBits = 10272LL;
            v23._object = (void *)0xE200000000000000LL;
            String.append(_:)(v23);
            v24._uint64_t countAndFlagsBits = 0x444961657261LL;
            v24._object = (void *)0xE600000000000000LL;
            String.append(_:)(v24);
            v25._uint64_t countAndFlagsBits = 0x202C5458455420LL;
            v25._object = (void *)0xE700000000000000LL;
            String.append(_:)(v25);
            v26._object = (void *)0xE900000000000078LL;
            v26._uint64_t countAndFlagsBits = 0x614D74656B637562LL;
            String.append(_:)(v26);
            v27._uint64_t countAndFlagsBits = 0x52454745544E4920LL;
            v27._object = (void *)0xEA0000000000202CLL;
            String.append(_:)(v27);
            v28._object = (void *)0xE90000000000006ELL;
            v28._uint64_t countAndFlagsBits = 0x694D74656B637562LL;
            String.append(_:)(v28);
            v29._uint64_t countAndFlagsBits = 0x52454745544E4920LL;
            v29._object = (void *)0xEA0000000000202CLL;
            String.append(_:)(v29);
            v30._uint64_t countAndFlagsBits = 0x65746144646E65LL;
            v30._object = (void *)0xE700000000000000LL;
            String.append(_:)(v30);
            v31._uint64_t countAndFlagsBits = 0x202C4C41455220LL;
            v31._object = (void *)0xE700000000000000LL;
            String.append(_:)(v31);
            v32._uint64_t countAndFlagsBits = 0x696669746E656469LL;
            v32._object = (void *)0xEA00000000007265LL;
            String.append(_:)(v32);
            v33._uint64_t countAndFlagsBits = 0x202C5458455420LL;
            v33._object = (void *)0xE700000000000000LL;
            String.append(_:)(v33);
            v34._uint64_t countAndFlagsBits = 0x7461447472617473LL;
            v34._object = (void *)0xE900000000000065LL;
            String.append(_:)(v34);
            v35._uint64_t countAndFlagsBits = 0x202C4C41455220LL;
            v35._object = (void *)0xE700000000000000LL;
            String.append(_:)(v35);
            v36._object = (void *)0xEA0000000000746ELL;
            v36._uint64_t countAndFlagsBits = 0x6F726665726F7473LL;
            String.append(_:)(v36);
            v37._uint64_t countAndFlagsBits = 0x295458455420LL;
            v37._object = (void *)0xE600000000000000LL;
            String.append(_:)(v37);
            v38._uint64_t countAndFlagsBits = 0LL;
            v38._object = (void *)0xE000000000000000LL;
            SQLDatabase.execute(sql:parameters:)(v38, (Swift::OpaquePointer)_swiftEmptyArrayStorage);
            swift_bridgeObjectRelease(0xE000000000000000LL);
            if (!v39) {
              return 1LL;
            }
          }
        }
      }
    }
  }

  return a2;
}

uint64_t sub_10013B68C()
{
  uint64_t v1 = v0;
  sub_10013AB14();
  return swift_release(v1);
}

void sub_10013B6CC()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter();
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  [v0 fileExistsAtPath:v3];

  sub_10000DFE8();
}

void sub_10013B750(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  sub_10000DE7C();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DE7C();
  uint64_t v11 = v10 - v9;
  type metadata accessor for DispatchQoS(0LL);
  sub_10000DC8C();
  __chkstk_darwin(v12);
  sub_10000DE7C();
  uint64_t v15 = v14 - v13;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  uint64_t v16 = qword_1001DBBC0;
  static DispatchQoS.unspecified.getter((id)qword_1001DBBC0);
  Swift::String v26 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CAAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = v17;
  uint64_t v19 = sub_10000D33C((uint64_t *)&unk_1001CD3A0);
  sub_1000253B0((unint64_t *)&qword_1001CAAC0, (uint64_t *)&unk_1001CD3A0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v7, v18);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v24);
  sub_100048BA0();
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  v21,  v15,  v11,  v6,  v16);
  *(void *)(v2 + 24) = 0LL;
  uint64_t v22 = v2 + OBJC_IVAR____TtC14amsengagementd17TreatmentsStorage_storageURL;
  uint64_t v23 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v22, a1, v23);
  sub_10000DD84();
}

uint64_t sub_10013B948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v29[0] = 0LL;
  v29[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(50LL);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t inited = swift_initStackObject(v7, v30);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = a1;
  *(void *)(inited + 40) = a2;
  sub_100020B80(inited);
  uint64_t v9 = sub_10000DDDC((uint64_t)&unk_1001B2C98, 104LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v9 + 3sub_10000D3A0(v0 + 2) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(void *)(v9 + 96) = 0LL;
  sub_1000489DC();
  uint64_t v23 = sub_10013B00C();
  unint64_t v24 = 0xD00000000000006ALL;
  unint64_t v25 = 0x8000000100178450LL;
  uint64_t v26 = inited;
  Swift::String v27 = sub_10013D498;
  uint64_t v28 = v9;
  sub_100129A28((void (*)(void))sub_10001BBE0, (uint64_t)v22);
  if (v3)
  {
    sub_100025894();
    swift_release();
    swift_setDeallocating(inited);
    return sub_10012A65C();
  }

  else
  {
    swift_setDeallocating(inited);
    sub_10012A65C();
    swift_release();
    sub_100020A94(v9 + 16, (uint64_t)v29);
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 24);
    uint64_t v13 = *(void *)(v9 + 32);
    uint64_t v14 = *(void *)(v9 + 40);
    uint64_t v15 = *(void *)(v9 + 48);
    uint64_t v16 = *(void *)(v9 + 56);
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(v9 + 64);
    uint64_t v20 = *(void *)(v9 + 80);
    uint64_t v21 = *(void *)(v9 + 88);
    uint64_t v31 = *(void *)(v9 + 96);
    sub_10013D4B4(v11, v12, v13, v14, v15, v16, v19, v17, v20, v21, v31);
    uint64_t result = sub_100025894();
    *a3 = v11;
    a3[1] = v12;
    a3[2] = v13;
    a3[3] = v14;
    a3[4] = v15;
    a3[5] = v16;
    a3[6] = v19;
    a3[7] = v18;
    a3[8] = v20;
    a3[9] = v21;
    a3[10] = v31;
  }

  return result;
}

uint64_t sub_10013BB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012B3A8();
  if (!v2 && (v5 & 1) == 0)
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_10012B3C4();
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = v7;
      uint64_t v11 = sub_10012B3C4();
      uint64_t v14 = v12;
      if (v12)
      {
        uint64_t v15 = v11;
        uint64_t v16 = sub_10012B3C4();
        uint64_t v18 = v17;
        if (v17)
        {
          uint64_t v38 = v16;
          uint64_t v35 = sub_10012B3C4();
          uint64_t v36 = v19;
          uint64_t v20 = sub_10012B3C4();
          BOOL v34 = v6 != 0;
          uint64_t v22 = v21;
          swift_beginAccess(a2 + 16, v37, 1LL, 0LL);
          uint64_t v23 = *(void *)(a2 + 16);
          uint64_t v24 = *(void *)(a2 + 24);
          uint64_t v25 = *(void *)(a2 + 32);
          uint64_t v26 = *(void *)(a2 + 40);
          uint64_t v27 = *(void *)(a2 + 48);
          uint64_t v28 = *(void *)(a2 + 56);
          uint64_t v29 = *(void *)(a2 + 64);
          uint64_t v30 = *(void *)(a2 + 72);
          __int128 v31 = *(_OWORD *)(a2 + 80);
          uint64_t v32 = *(void *)(a2 + 96);
          *(void *)(a2 + swift_weakDestroy(v0 + 16) = v34;
          *(void *)(a2 + 24) = v10;
          *(void *)(a2 + 3sub_10000D3A0(v0 + 2) = v9;
          *(void *)(a2 + 40) = v35;
          *(void *)(a2 + 48) = v36;
          *(void *)(a2 + 56) = v20;
          *(void *)(a2 + 64) = v22;
          *(void *)(a2 + 7sub_10000D3A0(v0 + 2) = v15;
          uint64_t v33 = v38;
          *(void *)(a2 + 80) = v14;
          *(void *)(a2 + 88) = v33;
          *(void *)(a2 + 96) = v18;
          sub_10013D510(v23, v24, v25, v26, v27, v28, v29, v30, v31, *((uint64_t *)&v31 + 1), v32);
          return 0LL;
        }

        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
    }
  }

  return 0LL;
}

void sub_10013BD54()
{
  uint64_t v3 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t inited = swift_initStackObject(v3, v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = v1;
  *(void *)(inited + 40) = v2;
  sub_100020B80(inited);
  uint64_t v5 = sub_100020AF8((uint64_t)&unk_1001B2C70);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  sub_1000489DC();
  sub_10013B00C();
  sub_10013E0BC((void (*)(void))sub_10001BBE0, v6, v7, v8, v9, v10, v11, v12, v13);
  if (v0)
  {
    sub_10002FAF4();
    sub_100020AD8();
    sub_10013E0CC();
    sub_10013E0E4();
  }

  else
  {
    sub_10013E0CC();
    sub_10013E0E4();
    sub_100020AD8();
    sub_100020A94(v5 + 16, (uint64_t)v14);
    sub_10000DF08();
    sub_10002FAF4();
  }

  sub_10013E044();
}

void sub_10013BE60()
{
  uint64_t v3 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t inited = swift_initStackObject(v3, v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164220;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = v1;
  *(void *)(inited + 40) = v2;
  sub_100020B80(inited);
  uint64_t v5 = sub_100020AF8((uint64_t)&unk_1001B2C70);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  sub_1000489DC();
  sub_10013B00C();
  sub_10013E0BC((void (*)(void))sub_10001BBE0, v6, v7, v8, v9, v10, v11, v12, v13);
  if (v0)
  {
    sub_10002FAF4();
    sub_100020AD8();
    sub_10013E0CC();
    sub_10013E0E4();
  }

  else
  {
    sub_10013E0CC();
    sub_10013E0E4();
    sub_100020AD8();
    sub_100020A94(v5 + 16, (uint64_t)v14);
    sub_10000DF08();
    sub_10002FAF4();
  }

  sub_10013E044();
}

uint64_t sub_10013BF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10012B3C4();
  if (!v2)
  {
    uint64_t v7 = v5;
    if (v5)
    {
      uint64_t v8 = v4;
      swift_beginAccess(a2 + 16, v10, 33LL, 0LL);
      sub_100148020(&v11, v8, v7);
      swift_endAccess(v10);
      swift_bridgeObjectRelease();
      char v6 = 1;
    }

    else
    {
      char v6 = 0;
    }
  }

  return v6 & 1;
}

void sub_10013C008()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v0 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v1);
  sub_10000DE7C();
  uint64_t v4 = v3 - v2;
  uint64_t v20 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10000DE7C();
  uint64_t v8 = v7 - v6;
  sub_10000D33C(&qword_1001CFAE0);
  uint64_t v9 = Promise.__allocating_init()();
  uint64_t v10 = URL.path.getter();
  uint64_t v12 = v11;
  uint64_t v13 = (void *)swift_allocObject(&unk_1001B2C20, 40LL, 7LL);
  _OWORD v13[2] = v10;
  _OWORD v13[3] = v12;
  v13[4] = v9;
  aBlock[4] = sub_10013D410;
  uint64_t v24 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001B2C38;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = swift_retain(v9);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100007CD0( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = v16;
  uint64_t v18 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_1000253B0((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v0, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v14);
  _Block_release(v14);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v4, v0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v20);
  swift_release(v24);
  sub_10000DD84();
}

uint64_t sub_10013C200()
{
  return Promise.resolve(_:)(v0);
}

uint64_t sub_10013C2F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C3B0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10013C310);
}

void sub_10013C310()
{
  uint64_t v0 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t v8 = (__n128 *)sub_10013E110(v0, v1, v2, v3, v4, v5, v6, v7, v10);
  sub_10013DFD0(v8, (__n128)xmmword_100164230);
  sub_10000DD9C();
  sub_100048BA0();
  sub_10013E088(61LL, v9);
  sub_10013E118();
  sub_10012A65C();
  sub_10001A2D8();
  sub_10013E05C();
}

uint64_t sub_10013C394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013C3B0(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10013C454);
}

uint64_t sub_10013C3B0( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    for (uint64_t i = (uint64_t *)(swift_bridgeObjectRetain(result) + 40); ; i += 2)
    {
      uint64_t v11 = *(i - 1);
      uint64_t v12 = *i;
      sub_1000489DC();
      a4(v11, v12, a2, a3);
      if (v5) {
        break;
      }
      swift_bridgeObjectRelease();
      if (!--v6) {
        return sub_10000DE2C();
      }
    }

    swift_bridgeObjectRelease();
    return sub_10000DE2C();
  }

  return result;
}

void sub_10013C454()
{
  uint64_t v0 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t v8 = (__n128 *)sub_10013E110(v0, v1, v2, v3, v4, v5, v6, v7, v10);
  sub_10013DFD0(v8, (__n128)xmmword_100164230);
  sub_10000DD9C();
  sub_100048BA0();
  sub_10013E088(53LL, v9);
  sub_10013E118();
  sub_10012A65C();
  sub_10001A2D8();
  sub_10013E05C();
}

uint64_t sub_10013C4D8(uint64_t a1)
{
  v2._uint64_t countAndFlagsBits = 0x7361657261LL;
  v2._object = (void *)0xE500000000000000LL;
  String.append(_:)(v2);
  sub_10001C318();
  sub_10013E104(0x6C62616568636163LL);
  sub_10001C0E8();
  v3._uint64_t countAndFlagsBits = sub_10013E148();
  String.append(_:)(v3);
  sub_10001C0E8();
  v4._uint64_t countAndFlagsBits = 1953259891LL;
  v4._object = (void *)0xE400000000000000LL;
  String.append(_:)(v4);
  sub_10001C0E8();
  sub_100048BA0();
  sub_10013E140(16LL, v5);
  sub_10001C0E8();
  v6._uint64_t countAndFlagsBits = 0x616D6F4464656573LL;
  v6._object = (void *)0xEA00000000006E69LL;
  String.append(_:)(v6);
  sub_10001C0E8();
  v7._uint64_t countAndFlagsBits = 0x6570795464656573LL;
  v7._object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  sub_100048BA0();
  String.append(_:)(v8);
  sub_10013B00C();
  uint64_t v9 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t v17 = sub_10013E110(v9, v10, v11, v12, v13, v14, v15, v16, v30);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_100166AD0;
  *(void *)(v17 + 3sub_10000D3A0(v0 + 2) = *(_BYTE *)a1 & 1;
  *(void *)(v17 + 40) = 0LL;
  *(_BYTE *)(v17 + 48) = 1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(v17 + 56) = *(void *)(a1 + 8);
  *(void *)(v17 + 64) = v18;
  *(_BYTE *)(v17 + 7sub_10000D3A0(v0 + 2) = 3;
  sub_10009B924(a1 + 24, (uint64_t)v35);
  sub_10009B924((uint64_t)v35, (uint64_t)&v36);
  uint64_t v20 = v36;
  uint64_t v19 = v37;
  if (v37)
  {
    char v21 = 3;
  }

  else
  {
    uint64_t v20 = 0LL;
    char v21 = 4;
  }

  *(void *)(v17 + 80) = v20;
  *(void *)(v17 + 88) = v19;
  *(_BYTE *)(v17 + 96) = v21;
  __int128 v22 = *(_OWORD *)(a1 + 56);
  __int128 v31 = *(_OWORD *)(a1 + 40);
  __int128 v32 = v22;
  __int128 v33 = *(_OWORD *)(a1 + 72);
  sub_10009B924((uint64_t)&v31, (uint64_t)v34);
  sub_10009B924((uint64_t)v34, (uint64_t)&v38);
  uint64_t v24 = v38;
  uint64_t v23 = v39;
  if (v39)
  {
    char v25 = 3;
  }

  else
  {
    uint64_t v24 = 0LL;
    char v25 = 4;
  }

  *(void *)(v17 + 104) = v24;
  *(void *)(v17 + 11sub_10000D3A0(v0 + 2) = v23;
  *(_BYTE *)(v17 + 120) = v25;
  uint64_t v26 = *((void *)&v32 + 1);
  *(void *)(v17 + 128) = v32;
  *(void *)(v17 + 136) = v26;
  *(_BYTE *)(v17 + 144) = 3;
  uint64_t v27 = *((void *)&v33 + 1);
  *(void *)(v17 + 15sub_10000D3A0(v0 + 2) = v33;
  *(void *)(v17 + 160) = v27;
  *(_BYTE *)(v17 + 168) = 3;
  sub_10000DF08();
  sub_1000288A4((uint64_t)v35);
  sub_1000288A4((uint64_t)v34);
  sub_10000DF10();
  swift_bridgeObjectRetain(v27);
  v28._uint64_t countAndFlagsBits = 0LL;
  v28._object = (void *)0xE000000000000000LL;
  SQLDatabase.execute(sql:parameters:)(v28, (Swift::OpaquePointer)v17);
  swift_setDeallocating(v17);
  sub_10012A65C();
  swift_bridgeObjectRelease();
  return sub_10002FAF4();
}

uint64_t sub_10013C784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = 0LL;
  unint64_t v35 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(67LL);
  sub_10013DFB0();
  v11._object = (void *)0xEA00000000007374LL;
  v11._uint64_t countAndFlagsBits = 0x6E656D7461657274LL;
  String.append(_:)(v11);
  sub_10001C318();
  v12._uint64_t countAndFlagsBits = sub_10013E124();
  String.append(_:)(v12);
  sub_10001C0E8();
  v13._object = (void *)0xE900000000000078LL;
  v13._uint64_t countAndFlagsBits = 0x614D74656B637562LL;
  String.append(_:)(v13);
  sub_10001C0E8();
  v14._object = (void *)0xE90000000000006ELL;
  v14._uint64_t countAndFlagsBits = 0x694D74656B637562LL;
  String.append(_:)(v14);
  sub_10001C0E8();
  v15._uint64_t countAndFlagsBits = 0x65746144646E65LL;
  v15._object = (void *)0xE700000000000000LL;
  String.append(_:)(v15);
  sub_10001C0E8();
  v16._uint64_t countAndFlagsBits = sub_10013E148();
  v16._object = (void *)0xEA00000000007265LL;
  String.append(_:)(v16);
  sub_10001C0E8();
  sub_10013E104(0x7461447472617473LL);
  sub_10001C0E8();
  v17._object = (void *)0xEA0000000000746ELL;
  v17._uint64_t countAndFlagsBits = 0x6F726665726F7473LL;
  String.append(_:)(v17);
  sub_100048BA0();
  sub_10013E140(25LL, v18);
  sub_10013E138();
  uint64_t v19 = sub_10000D33C(&qword_1001C8EE8);
  v20._rawValue = (void *)swift_initStackObject(v19, v33);
  *((_OWORD *)v20._rawValue + setenv("JavaScriptCoreUseJIT", "0", 1) = xmmword_100167F00;
  *((void *)v20._rawValue + 4) = a2;
  *((void *)v20._rawValue + 5) = a3;
  *((_BYTE *)v20._rawValue + 48) = 3;
  *((void *)v20._rawValue + 7) = a4;
  *((void *)v20._rawValue + 8) = 0LL;
  *((_BYTE *)v20._rawValue + 7sub_10000D3A0(v0 + 2) = 1;
  *((void *)v20._rawValue + 10) = a5;
  *((void *)v20._rawValue + 1setenv("JavaScriptCoreUseJIT", "0", 1) = 0LL;
  *((_BYTE *)v20._rawValue + 96) = 1;
  uint64_t v21 = swift_bridgeObjectRetain(a3);
  *((double *)v20._rawValue + 13) = Date.timeIntervalSinceReferenceDate.getter(v21);
  *((void *)v20._rawValue + sub_10000D3A0(v0 + 14) = 0LL;
  *((_BYTE *)v20._rawValue + 120) = 2;
  __int128 v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for Treatment(0LL) + 20));
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *((void *)v20._rawValue + swift_weakDestroy(v0 + 16) = v24;
  *((void *)v20._rawValue + 17) = v23;
  *((_BYTE *)v20._rawValue + 144) = 3;
  uint64_t v25 = swift_bridgeObjectRetain(v23);
  *((double *)v20._rawValue + 1sub_10000D3A0(v0 + 9) = Date.timeIntervalSinceReferenceDate.getter(v25);
  *((void *)v20._rawValue + 20) = 0LL;
  *((_BYTE *)v20._rawValue + 168) = 2;
  uint64_t v26 = a6;
  if (a7)
  {
    char v27 = 3;
  }

  else
  {
    uint64_t v26 = 0LL;
    char v27 = 4;
  }

  *((void *)v20._rawValue + 2sub_10000D3A0(v0 + 2) = v26;
  *((void *)v20._rawValue + 23) = a7;
  *((_BYTE *)v20._rawValue + 19sub_10000D3A0(v0 + 2) = v27;
  sub_10000DF10();
  v28._uint64_t countAndFlagsBits = 0LL;
  v28._object = (void *)0xE000000000000000LL;
  SQLDatabase.execute(sql:parameters:)(v28, v20);
  swift_setDeallocating(v20._rawValue);
  sub_10012A65C();
  swift_bridgeObjectRelease();
  return sub_10001A2D8();
}

uint64_t sub_10013C9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v53 = a7;
  v47[0] = a6;
  uint64_t v52 = a5;
  uint64_t v48 = a1;
  sub_10000D33C(&qword_1001CF970);
  sub_10000DC8C();
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::String v13 = (char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  Swift::String v15 = (char *)v47 - v14;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v16 - 8);
  sub_10000DC8C();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v50 = (char *)v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v47 - v20;
  sub_10013E074();
  sub_10013E0EC();
  v54._uint64_t countAndFlagsBits = 0xD000000000000036LL;
  v54._object = (void *)0x80000001001781F0LL;
  sub_10013DFF0(a4);
  if (!v22) {
    sub_10013E140(19LL, 0x80000001001782E0LL);
  }
  sub_10013DFF0(v52);
  if (!v22) {
    sub_10013E0F4(0xD000000000000015LL, (uint64_t)" AND (startDate <= ?)");
  }
  unint64_t v55 = 0LL;
  unint64_t v56 = 0xE000000000000000LL;
  if (v53)
  {
    _StringGuts.grow(_:)(31LL);
    sub_10013E0EC();
    uint64_t v23 = 0xD00000000000002FLL;
    uint64_t v24 = " AND ((storefront IS null) OR (storefront = ?))";
  }

  else
  {
    _StringGuts.grow(_:)(17LL);
    sub_10013E0EC();
    uint64_t v23 = 0xD000000000000019LL;
    uint64_t v24 = " AND (storefront IS null)";
  }

  sub_10013E0F4(v23, (uint64_t)v24);
  sub_10013E074();
  sub_10013E0EC();
  unint64_t v55 = 0xD00000000000003DLL;
  unint64_t v56 = 0x8000000100178250LL;
  String.append(_:)(v54);
  sub_10000DE2C();
  v25._uint64_t countAndFlagsBits = 41LL;
  v25._object = (void *)0xE100000000000000LL;
  String.append(_:)(v25);
  unint64_t v49 = v55;
  v47[1] = v56;
  uint64_t v26 = sub_10000D33C(&qword_1001C8EE8);
  uint64_t inited = swift_initStackObject(v26, v57);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  *(void *)(inited + 3sub_10000D3A0(v0 + 2) = v48;
  *(void *)(inited + 40) = a2;
  uint64_t v28 = sub_100020B80(inited);
  *(void *)(v28 + 56) = a3;
  *(void *)(v28 + 64) = 0LL;
  *(_BYTE *)(v28 + 7sub_10000D3A0(v0 + 2) = 1;
  *(void *)(v28 + 80) = a3;
  *(void *)(v28 + 88) = 0LL;
  *(_BYTE *)(v28 + 96) = 1;
  sub_100092A2C(a4, (uint64_t)v15, &qword_1001CF970);
  sub_10013DFF0((uint64_t)v15);
  if (v22)
  {
    swift_bridgeObjectRetain();
    sub_100019E6C((uint64_t)v15, &qword_1001CF970);
    uint64_t v29 = v51;
  }

  else
  {
    uint64_t v29 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v21, v15, v16);
    swift_bridgeObjectRetain();
    double v31 = Date.timeIntervalSinceReferenceDate.getter(v30);
    sub_10013E0B0();
    uint64_t inited = v32;
    *(void *)(v32 + swift_weakDestroy(v0 + 16) = 4LL;
    *(double *)(v32 + 104) = v31;
    *(void *)(v32 + 11sub_10000D3A0(v0 + 2) = 0LL;
    *(_BYTE *)(v32 + 120) = 2;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v16);
  }

  sub_100092A2C(v52, (uint64_t)v13, &qword_1001CF970);
  sub_10013DFF0((uint64_t)v13);
  if (v22)
  {
    sub_100019E6C((uint64_t)v13, &qword_1001CF970);
    sub_10013E00C();
    if (!v15) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }

  uint64_t v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v50, v13, v16);
  double v34 = Date.timeIntervalSinceReferenceDate.getter(v33);
  unint64_t v35 = *(void *)(inited + 16);
  if (v35 >= *(void *)(inited + 24) >> 1)
  {
    sub_10013E0B0();
    uint64_t inited = v46;
  }

  sub_10013E00C();
  *(void *)(inited + swift_weakDestroy(v0 + 16) = v35 + 1;
  uint64_t v36 = inited + 24 * v35;
  *(double *)(v36 + 3sub_10000D3A0(v0 + 2) = v34;
  *(void *)(v36 + 40) = 0LL;
  *(_BYTE *)(v36 + 48) = 2;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v50, v16);
  if (v15)
  {
LABEL_18:
    unint64_t v38 = *(void *)(inited + 16);
    unint64_t v37 = *(void *)(inited + 24);
    sub_10000DD9C();
    if (v38 >= v37 >> 1)
    {
      sub_10013E0B0();
      uint64_t inited = v45;
    }

    *(void *)(inited + swift_weakDestroy(v0 + 16) = v38 + 1;
    uint64_t v39 = inited + 24 * v38;
    *(void *)(v39 + 3sub_10000D3A0(v0 + 2) = v47[0];
    *(void *)(v39 + 40) = v15;
    *(_BYTE *)(v39 + 48) = 3;
  }

uint64_t sub_10013CF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Treatment(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  Swift::String v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v31[-v9 - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v31[-v11 - 8];
  uint64_t v13 = sub_10012B560();
  if (!v2)
  {
    if ((v14 & 1) != 0)
    {
      unint64_t v21 = sub_10013D328();
      uint64_t v22 = swift_allocError(&unk_1001B2E70, v21, 0LL, 0LL);
      __int128 v24 = xmmword_100169DA0;
    }

    else
    {
      double v15 = *(double *)&v13;
      uint64_t v16 = sub_10012B3C4();
      uint64_t v18 = v17;
      if (v17)
      {
        uint64_t v30 = v16;
        uint64_t v19 = sub_10012B560();
        if ((v20 & 1) == 0)
        {
          double v27 = *(double *)&v19;
          Date.init(timeIntervalSinceReferenceDate:)(v15);
          Date.init(timeIntervalSinceReferenceDate:)(v27);
          uint64_t v28 = (uint64_t *)&v12[*(int *)(v4 + 20)];
          *uint64_t v28 = v30;
          v28[1] = v18;
          sub_10013D364((uint64_t)v12, (uint64_t)v7);
          swift_beginAccess(a2 + 16, v31, 33LL, 0LL);
          sub_100148190();
          swift_endAccess(v31);
          sub_10013D3A8((uint64_t)v10);
          sub_10013D3A8((uint64_t)v12);
          return 1LL;
        }

        swift_bridgeObjectRelease();
        unint64_t v29 = sub_10013D328();
        uint64_t v22 = swift_allocError(&unk_1001B2E70, v29, 0LL, 0LL);
        __int128 v24 = xmmword_100169DB0;
      }

      else
      {
        unint64_t v26 = sub_10013D328();
        uint64_t v22 = swift_allocError(&unk_1001B2E70, v26, 0LL, 0LL);
        __int128 v24 = xmmword_100169DC0;
      }
    }

    __int128 *v23 = v24;
    swift_willThrow(v22);
  }

  return 1LL;
}

void sub_10013D1A4()
{
  swift_release();
  uint64_t v1 = type metadata accessor for URL(0LL);
  sub_10001A418(v1);
  sub_100009044();
}

uint64_t sub_10013D1E4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10013D208()
{
  return type metadata accessor for TreatmentsStorage(0LL);
}

uint64_t type metadata accessor for TreatmentsStorage(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CF730, (uint64_t)&nominal type descriptor for TreatmentsStorage);
}

uint64_t sub_10013D224(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_10013D2A8()
{
}

uint64_t type metadata accessor for Treatment(uint64_t a1)
{
  return sub_10008AAFC(a1, qword_1001CF8B8, (uint64_t)&nominal type descriptor for Treatment);
}

uint64_t sub_10013D2E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10013D30C(uint64_t a1)
{
  return sub_10013CF30(a1, v1) & 1;
}

unint64_t sub_10013D328()
{
  unint64_t result = qword_1001CF858;
  if (!qword_1001CF858)
  {
    unint64_t result = swift_getWitnessTable(&unk_100169EC8, &unk_1001B2E70);
    atomic_store(result, (unint64_t *)&qword_1001CF858);
  }

  return result;
}

uint64_t sub_10013D364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Treatment(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D3A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Treatment(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10013D3E4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10013D410()
{
  return sub_10013C200();
}

uint64_t sub_10013D41C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10013D42C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10013D434(uint64_t a1)
{
  return sub_10013BF6C(a1, v1) & 1;
}

uint64_t sub_10013D450()
{
  uint64_t v1 = v0[4];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[6]);
    swift_bridgeObjectRelease(v0[8]);
    swift_bridgeObjectRelease(v0[10]);
    swift_bridgeObjectRelease(v0[12]);
  }

  return swift_deallocObject(v0, 104LL, 7LL);
}

uint64_t sub_10013D498(uint64_t a1)
{
  return sub_10013BB2C(a1, v1) & 1;
}

uint64_t sub_10013D4B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3)
  {
    swift_bridgeObjectRetain(a7);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a5);
  }

  return result;
}

uint64_t sub_10013D510( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }

  return result;
}

uint64_t sub_10013D56C()
{
  return sub_1000C8C04(v0, 24LL);
}

uint64_t sub_10013D578(uint64_t a1, uint64_t a2)
{
  return sub_10013B120(a1, a2);
}

uint64_t sub_10013D598()
{
  return sub_10013B68C();
}

uint64_t sub_10013D5B0()
{
  return sub_1000C8C04(v0, 17LL);
}

uint64_t sub_10013D5BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

Swift::Int sub_10013D5E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10013ACD8(*a1, a2, a3, a4);
}

Swift::Int sub_10013D5E8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10013AE18(*a1, a2, a3, a4);
}

Swift::Int sub_10013D5F4(char *a1, uint64_t a2)
{
  return sub_10013D5E8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

Swift::Int sub_10013D604(uint64_t *a1, uint64_t a2)
{
  return sub_10013D5E0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10013D610()
{
  if (*(void *)(v0 + 40)) {
    sub_10000D3A0((void *)(v0 + 16));
  }
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10013D640()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

Swift::Int sub_10013D674(uint64_t a1, uint64_t a2)
{
  return sub_10013AD84(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10013D680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CA778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D6C8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(sub_1000FDD40(v2, v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10013D718(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void *sub_10013D76C(void *result, int a2)
{
  if (a2 < 0)
  {
    *uint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

void type metadata accessor for TreatmentsStorageError()
{
}

uint64_t sub_10013D798(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t sub_10013D7D8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_10013D85C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

void *sub_10013D930(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t sub_10013D938(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_10000D3A0(v0 + 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_10013D9B4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(vsub_10000D3A0(v0 + 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_10000D3A0(v0 + 2) = -1;
      }
    }
  }

  else
  {
    LODWORD(vsub_10000D3A0(v0 + 2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_10013D9F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 7sub_10000D3A0(v0 + 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for TreatmentsArea()
{
}

char *sub_10013DA54(char *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    a1 = (char *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, (char *)a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = &a1[v9];
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *(void *)uint64_t v11 = *v12;
    *((void *)v11 + setenv("JavaScriptCoreUseJIT", "0", 1) = v13;
    char v14 = &a1[v10];
    double v15 = (char *)a2 + v10;
    swift_bridgeObjectRetain(v13);
    v8(v14, v15, v7);
  }

  return a1;
}

uint64_t sub_10013DB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20) + 8));
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 24), v4);
}

uint64_t sub_10013DB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v13 = a1 + v9;
  uint64_t v14 = a2 + v9;
  swift_bridgeObjectRetain(v12);
  v7(v13, v14, v6);
  return a1;
}

uint64_t sub_10013DC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t sub_10013DCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v7(a1 + v8, a2 + v8, v6);
  return a1;
}

uint64_t sub_10013DD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = v9[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v7(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), v6);
  return a1;
}

uint64_t sub_10013DDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013DDBC);
}

void sub_10013DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(v4 - 8) + 84LL) == (_DWORD)a2) {
    sub_1000102D4(a1, a2, v4);
  }
  else {
    sub_10000DFE8();
  }
}

uint64_t sub_10013DE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013DE3C);
}

uint64_t sub_10013DE3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_10000D5C0(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10013DEB4(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100169EB0;
    v4[2] = v4[0];
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void type metadata accessor for TreatmentsArea.Seed()
{
}

void sub_10013DF3C()
{
}

void sub_10013DF68()
{
}

NSString sub_10013DF8C()
{
  return String._bridgeToObjectiveC()();
}

void sub_10013DFB0()
{
  v0._uint64_t countAndFlagsBits = 0x4920545245534E49LL;
  v0._object = (void *)0xEC000000204F544ELL;
  String.append(_:)(v0);
}

uint64_t sub_10013DFD0(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = v5;
  a1[2].n128_u64[1] = v4;
  a1[3].n128_u8[0] = 3;
  a1[3].n128_u64[1] = v3;
  a1[4].n128_u64[0] = v2;
  a1[4].n128_u8[8] = 3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10013DFF0(uint64_t a1)
{
  return sub_1000102D4(a1, 1LL, v1);
}

  ;
}

uint64_t sub_10013E02C(uint64_t a1)
{
  return AMSError(0LL, v1, a1, 0LL);
}

  ;
}

  ;
}

void sub_10013E074()
{
  *(void *)(v0 - 224) = 0LL;
  *(void *)(v0 - 2swift_weakDestroy(v0 + 16) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
}

void sub_10013E088(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  SQLDatabase.execute(sql:parameters:)(*(Swift::String *)(&a2 - 1), v2);
}

NSString sub_10013E09C()
{
  return String._bridgeToObjectiveC()();
}

void sub_10013E0B0()
{
}

void sub_10013E0BC( void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10013E0CC()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_10013E0D4(void *a1)
{
  a1[2] = v2;
  a1[3] = v1;
  a1[4] = v3;
  return swift_retain(v2);
}

uint64_t sub_10013E0E4()
{
  return sub_10012A65C();
}

uint64_t sub_10013E0EC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 216));
}

void sub_10013E0F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (a2 - 32) | 0x8000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_10013E104(uint64_t a1)
{
  unint64_t v1 = 0xE900000000000065LL;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t sub_10013E110( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return swift_initStackObject(a1, &a9);
}

uint64_t sub_10013E118()
{
  return swift_setDeallocating(v0);
}

uint64_t sub_10013E124()
{
  return 0x444961657261LL;
}

uint64_t sub_10013E138()
{
  return sub_10013B00C();
}

void sub_10013E140(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000LL;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t sub_10013E148()
{
  return 0x696669746E656469LL;
}

uint64_t sub_10013E15C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for AMSAccountMediaType(0LL);
  uint64_t v4 = v3;
  sub_10000D904(&qword_1001C8230, (uint64_t (*)(uint64_t))type metadata accessor for AMSAccountMediaType);
  uint64_t v6 = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v13 = v6;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      uint64_t v9 = *(void **)(a1 + 8 * i + 32);
      sub_100147DF8(&v12, v9);
    }

    sub_100009020();
    return v13;
  }

  else
  {
    uint64_t v10 = v6;
    sub_100009020();
  }

  return v10;
}

uint64_t sub_10013E21C(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t v8 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 40;
    do
    {
      sub_10000DF10();
      sub_1000E2D1C(&v7);
      swift_bridgeObjectRelease();
      v4 += 16LL;
      --v3;
    }

    while (v3);
    sub_100009020();
    return v8;
  }

  else
  {
    uint64_t v5 = v2;
    sub_100009020();
  }

  return v5;
}

void *sub_10013E2B8(uint64_t a1)
{
  return sub_10013E2C4(a1, sub_1000BE890);
}

void *sub_10013E2C4(uint64_t a1, void *(*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v14 = Set.init(minimumCapacity:)(*(void *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  uint64_t result = a2(v15, a1);
  uint64_t v5 = v15[1];
  int64_t v6 = v15[3];
  uint64_t v7 = v16;
  int64_t v8 = (unint64_t)(v15[2] + 64LL) >> 6;
  if (!v16) {
    goto LABEL_3;
  }
LABEL_2:
  v7 &= v7 - 1;
  while (1)
  {
    sub_10000DF10();
    sub_1000E2D1C(&v13);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v5 + 8 * v9);
    int64_t v11 = v6 + 1;
    if (!v10)
    {
      int64_t v11 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void *)(v5 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_21;
        }
        uint64_t v10 = *(void *)(v5 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_21;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_21;
            }
            uint64_t v10 = *(void *)(v5 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v6 + 6;
              while (v12 < v8)
              {
                uint64_t v10 = *(void *)(v5 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10013E434(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
  unint64_t v5 = sub_10014B2C0();
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v7 = result;
  uint64_t v14 = result;
  if (!v2)
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v8) {
      goto LABEL_5;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return v7;
  }

  if (a1 < 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v11);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_16;
  }
LABEL_5:
  if (v8 >= 1)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else {
        id v10 = *(id *)(a1 + 8 * i + 32);
      }
      sub_1001483E0((Swift::Int *)&v13, v10);
    }

    swift_bridgeObjectRelease();
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_10013E58C(uint64_t a1)
{
  v2[36] = a1;
  v2[37] = v1;
  uint64_t v3 = sub_10000DE00();
  v2[38] = sub_1000C9AD4(v3);
  sub_1000D6DB0();
  return sub_10000DD48();
}

uint64_t sub_10013E5C4(uint64_t a1)
{
  uint64_t v3 = v2;
  id v4 = (id)AMSSetLogKeyIfNeeded(a1);
  uint64_t v5 = sub_1000105E8((uint64_t)v4);
  uint64_t v7 = v6;

  *(void *)(v3 + 31sub_10000D3A0(v0 + 2) = v5;
  *(void *)(v3 + 320) = v7;
  if (qword_1001C7FF8 != -1) {
    swift_once(&qword_1001C7FF8, sub_1000BD81C);
  }
  uint64_t v8 = *(void *)(v3 + 296);
  uint64_t v22 = *(void *)(v3 + 288);
  uint64_t v23 = (uint64_t (*)(void))qword_1001DBB78;
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  *(void *)(v3 + 328) = v9;
  uint64_t v10 = *(void *)(sub_10002C79C() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  *(void *)(v3 + 336) = v11;
  LODWORD(v10) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v3 + 376) = v10;
  uint64_t v12 = swift_allocObject( v9,  ((v10 + 32LL) & ~(unint64_t)v10) + 2 * v11,  v10 | 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v13 = type metadata accessor for TreatmentStoreService();
  *(void *)(v3 + 344) = v13;
  *(void *)(v3 + 40) = v13;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v8;
  sub_1000F0364(v7);
  sub_10002C7D4();
  sub_10000DC34();
  sub_10000DC08();
  uint64_t v14 = sub_10000D37C((void *)(v3 + 16), v13);
  uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
  *(void *)(v3 + 7sub_10000D3A0(v0 + 2) = swift_getMetatypeMetadata();
  *(void *)(v3 + 48) = v15;
  sub_10014BF30();
  sub_10014BF74(v3 + 48);
  sub_10000DC14();
  *(void *)(v3 + 104) = &type metadata for String;
  *(void *)(v3 + 80) = v5;
  *(void *)(v3 + 88) = v7;
  sub_10014BF30();
  sub_10014BF74(v3 + 80);
  sub_10014BCC8();
  sub_10000DC5C();
  sub_100020AB8();
  sub_10000D3A0((void *)(v3 + 16));
  sub_10001A21C(40LL);
  sub_100048BA0();
  sub_1000FDD00(39LL, v16);
  *(void *)(v3 + 136) = &type metadata for Int;
  *(void *)(v3 + 11sub_10000D3A0(v0 + 2) = v22;
  sub_1000C9B38();
  sub_10014BF74(v3 + 112);
  sub_10000DC4C(41LL);
  uint64_t v17 = sub_10000DC5C();
  uint64_t v18 = static os_log_type_t.info.getter(v17);
  sub_1000BD1B0(v18, v12);
  sub_10000DCFC();
  sub_100143E3C(v22);
  *(void *)(v3 + 35sub_10000D3A0(v0 + 2) = v19;
  char v20 = (void *)sub_10014C090((uint64_t)&dword_1001CF990);
  *(void *)(v3 + 360) = v20;
  void *v20 = v3;
  v20[1] = sub_10013E818;
  return v23();
}

uint64_t sub_10013E818()
{
  v0[46] = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = v0[37];
    uint64_t v5 = sub_10013E8B8;
  }

  else
  {
    uint64_t v6 = v0[40];
    uint64_t v7 = v0[37];
    swift_bridgeObjectRelease(v6);
    sub_1000292C4();
    uint64_t v5 = sub_10013E880;
    uint64_t v4 = v7;
  }

  return sub_1000E2BD4((uint64_t)v5, v4, 0LL);
}

uint64_t sub_10013E880()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_10013E8B8()
{
  uint64_t v1 = *(void *)(v0 + 368);
  swift_release(*(void *)(v0 + 352));
  *(void *)(v0 + 27sub_10000D3A0(v0 + 2) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  uint64_t v3 = sub_10000DE08(v2, (unint64_t *)&qword_1001CF9A0, &OBJC_CLASS___NSError_ptr);
  if (sub_10014BF60(v0 + 280, v0 + 272, v2))
  {
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void **)(v0 + 320);
    uint64_t v15 = *(void *)(v0 + 312);
    uint64_t v6 = *(void *)(v0 + 296);
    swift_errorRelease(*(void *)(v0 + 368));
    uint64_t v16 = *(void **)(v0 + 280);
    *(_OWORD *)(sub_10014BE30() + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    *(void *)(v0 + 23sub_10000D3A0(v0 + 2) = v4;
    *(void *)(v0 + 208) = v6;
    swift_bridgeObjectRetain(v5);
    sub_10014C10C();
    sub_10000DC34();
    sub_10000DC08();
    sub_10014BD9C((void *)(v0 + 208));
    uint64_t v7 = sub_1000BDA78();
    sub_10014BE6C(v7);
    sub_10014BDB8();
    sub_10000DC14();
    sub_10014BD44((uint64_t)&type metadata for String, v15);
    sub_10014BDB8();
    sub_10014BCC8();
    sub_10000DC5C();
    sub_10000DCFC();
    sub_10000D3A0((void *)(v0 + 208));
    sub_10001A21C(42LL);
    sub_100048BA0();
    sub_1000FDD00(41LL, v8);
    *(void *)(v0 + 176) = v16;
    *(void *)(v0 + 200) = v3;
    id v9 = v16;
    sub_10014BFB0();
    sub_10014BDE4(v0 + 176);
    sub_10000DC4C(41LL);
    uint64_t v10 = sub_10000DC5C();
    uint64_t v11 = ((uint64_t (*)(uint64_t))static os_log_type_t.error.getter)(v10);
    sub_10014BFA4(v11);
    uint64_t v12 = sub_10000DDF8();
    sub_100070398(v12, "ams_sanitizedForSecureCoding");
    sub_10008C040();
  }

  else
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 320));
  }

  uint64_t v13 = *(void *)(v0 + 304);
  swift_errorRelease(*(void *)(v0 + 272));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_10013EABC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_1001073B4();
  uint64_t v7 = type metadata accessor for TaskPriority(v6);
  sub_10000D5C0(v2, 1LL, 1LL, v7);
  uint64_t v8 = (void *)sub_10000DDDC((uint64_t)&unk_1001B3028, 48LL);
  v8[2] = 0LL;
  void v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  id v9 = (void *)sub_10000DDDC((uint64_t)&unk_1001B3050, 48LL);
  v9[2] = 0LL;
  void v9[3] = 0LL;
  v9[4] = &unk_1001CF948;
  v9[5] = v8;
  uint64_t v10 = sub_100147814(v2, (uint64_t)&unk_1001CF958, (uint64_t)v9);
  swift_release(v10);
  sub_10000DFE8();
}

uint64_t sub_10013EB6C(uint64_t a1)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_1000C0118((uint64_t)sub_10013EB7C);
}

uint64_t sub_10013EB7C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10013EBDC;
  sub_10014BC48();
  return sub_10014BD84();
}

uint64_t sub_10013EBDC()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (!v0) {
    return sub_1000105A8(*(uint64_t (**)(void))(v3 + 8));
  }
  sub_100096178();
  return sub_10000DD48();
}

uint64_t sub_10013EC34()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013EC40()
{
  *(void *)(v1 + 24) = v0;
  return sub_1000C0118((uint64_t)sub_10013EC50);
}

uint64_t sub_10013EC50()
{
  uint64_t v0 = swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  sub_10014C1A4(v0);
  sub_10000D33C(&qword_1001CBE58);
  sub_10014C154((uint64_t)sub_10013ECB4);
  sub_10014BC48();
  return sub_10014BD90();
}

uint64_t sub_10013ECB4()
{
  if (v0)
  {
    sub_100096178();
    return sub_1000E2BD4(v1, v2, v3);
  }

  else
  {
    uint64_t v5 = sub_10014C0EC();
    return sub_100096108(v5, v6);
  }

uint64_t sub_10013ECF0()
{
  *(void *)(v1 + 24) = v0;
  return sub_1000C0118((uint64_t)sub_10013ED00);
}

uint64_t sub_10013ED00()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10013ED64;
  sub_10014BC48();
  return sub_10014BD84();
}

uint64_t sub_10013ED64()
{
  if (!v1) {
    return (*(uint64_t (**)(double))(v2 + 8))(*(double *)(v0 + 16));
  }
  sub_100096178();
  return sub_1000E2BD4(v3, v4, v5);
}

uint64_t sub_10013EDAC()
{
  *(void *)(v1 + 24) = v0;
  return sub_1000C0118((uint64_t)sub_10013EDBC);
}

uint64_t sub_10013EDBC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10013ECB4;
  sub_10014BC48();
  return sub_10014BD84();
}

uint64_t sub_10013EE20()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_10013EE38, 0LL, 0LL);
}

uint64_t sub_10013EE38()
{
  uint64_t v0 = swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  sub_10014C1A4(v0);
  sub_10000D33C(&qword_1001CFAB0);
  sub_10014C154((uint64_t)sub_10013EE9C);
  sub_10014BC48();
  return sub_10014BD90();
}

uint64_t sub_10013EE9C()
{
  if (v0)
  {
    sub_100096178();
    return sub_1000E2BD4(v1, v2, v3);
  }

  else
  {
    uint64_t v5 = sub_10014C0EC();
    return sub_100096108(v5, v6);
  }

uint64_t sub_10013EED8()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_10013EEF0, 0LL, 0LL);
}

uint64_t sub_10013EEF0()
{
  uint64_t v0 = swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  sub_10014C1A4(v0);
  sub_10000D33C(&qword_1001CFA68);
  sub_10014C154((uint64_t)sub_10013ECB4);
  sub_10014BC48();
  return sub_10014BD90();
}

uint64_t sub_10013EF54()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_10013EF6C, 0LL, 0LL);
}

uint64_t sub_10013EF6C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10013EFD0;
  sub_10014BC48();
  return sub_10014BD84();
}

uint64_t sub_10013EFD0()
{
  *(void *)(v0 + 3sub_10000D3A0(v0 + 2) = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    return (*(uint64_t (**)(void))(v2 + 8))(*(unsigned __int8 *)(v0 + 40));
  }
  sub_100096178();
  return sub_1000E2BD4(v5, v6, v7);
}

uint64_t sub_10013F028()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10013F038()
{
  *(void *)(v1 + 24) = v0;
  return swift_task_switch(sub_10013F050, 0LL, 0LL);
}

uint64_t sub_10013F050()
{
  uint64_t v0 = swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  sub_10014C1A4(v0);
  sub_10000D33C(&qword_1001CF9B8);
  sub_10014C154((uint64_t)sub_10013ECB4);
  sub_10014BC48();
  return sub_10014BD90();
}

uint64_t sub_10013F0B4(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFA10);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B3208, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B3230, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014B3C8, v15, sub_10014B404, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F210(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C((uint64_t *)&unk_1001CFB80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B3960, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B3988, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014BABC, v15, sub_10014BB48, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F36C(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFB60);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B38C0, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B38E8, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014BA3C, v15, sub_10014BA5C, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F4C8(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFB70);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B3910, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B3938, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014BA7C, v15, sub_10014BA9C, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F624(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFAB8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B3488, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B34B0, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014B618, v15, sub_10014B638, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F780(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFA70);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B32F8, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B3320, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014B50C, v15, sub_10014B52C, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013F8DC(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CF9C0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B30C8, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B30F0, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014B1C0, v15, sub_10014B1E0, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013FA38(uint64_t a1, uint64_t a2)
{
  v19[1] = a2;
  uint64_t v3 = sub_10000D33C(&qword_1001CFA08);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  id v9 = (char *)v19 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v10((char *)v19 - v8, a1, v3);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = v12 + v5;
  uint64_t v14 = v11 | 7;
  uint64_t v15 = swift_allocObject(&unk_1001B31B8, v13, v11 | 7);
  uint64_t v16 = *(void (**)(uint64_t, char *, uint64_t))(v4 + 32);
  v16(v15 + v12, v9, v3);
  v10(v7, a1, v3);
  uint64_t v17 = swift_allocObject(&unk_1001B31E0, v13, v14);
  v16(v17 + v12, v7, v3);
  sub_100062648(sub_10014B32C, v15, sub_10014B364, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_10013FB94()
{
  uint64_t v0 = sub_10000D33C(&qword_1001CFA10);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_10013FBC4(double a1)
{
  double v3 = a1;
  uint64_t v1 = sub_10000D33C(&qword_1001CFB60);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

uint64_t sub_10013FC04(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = sub_10000D33C(&qword_1001CFB70);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

void sub_10013FC44(uint64_t a1)
{
  uint64_t v2 = a1;
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_1000F04B4();
  CheckedContinuation.resume(returning:)(&v2, v1);
  sub_1000378A8();
}

uint64_t sub_10013FC7C(char a1)
{
  char v3 = a1;
  uint64_t v1 = sub_10000D33C(&qword_1001CFA08);
  return CheckedContinuation.resume(returning:)(&v3, v1);
}

void sub_10013FCBC(uint64_t a1)
{
  uint64_t v2 = a1;
  swift_errorRetain(a1);
  uint64_t v1 = sub_1000F04B4();
  CheckedContinuation.resume(throwing:)(&v2, v1);
  sub_1000378A8();
}

void sub_10013FCF4()
{
  uint64_t v28 = v3;
  uint64_t v29 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v27 = v15;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v17 = sub_1001073B4();
  uint64_t v18 = type metadata accessor for DispatchQoS(v17);
  uint64_t v30 = *(void *)(v18 - 8);
  uint64_t v31 = v18;
  __chkstk_darwin(v18);
  sub_1000292E4();
  sub_10000D33C(v8);
  uint64_t v19 = Promise.__allocating_init()();
  char v20 = (void *)sub_10000DDDC(v6, 64LL);
  _OWORD v20[2] = v0;
  void v20[3] = v19;
  v20[4] = v27;
  void v20[5] = v14;
  v20[6] = v12;
  v20[7] = v10;
  v34[4] = v28;
  unint64_t v35 = v20;
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 1107296256LL;
  v34[2] = sub_100021A3C;
  void v34[3] = v29;
  unint64_t v21 = _Block_copy(v34);
  sub_10002C7D4();
  swift_retain(v19);
  swift_retain(v14);
  uint64_t v22 = sub_100048404(v12, v10);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v33 = _swiftEmptyArrayStorage;
  sub_10000D904( (unint64_t *)&qword_1001CD3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v24 = v23;
  uint64_t v25 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
  sub_10000D890((unint64_t *)&qword_1001CD3F0, (uint64_t *)&unk_1001CAB00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v16, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v2, v1, v21);
  _Block_release(v21);
  sub_10001D454(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v2, v31);
  swift_release(v35);
  sub_10000DD84();
}

uint64_t sub_10013FEE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = sub_10013B00C();
  uint64_t v6 = swift_retain(v5);
  sub_100128FD0(v6, v6);
  sub_100129D84();
  swift_release(v5);
  uint64_t v7 = a3(a1);
  Promise.resolve(_:)(v7);
  uint64_t v8 = sub_10013B00C();
  uint64_t v9 = swift_retain(v8);
  sub_100128B6C(v9, v9);
  return swift_release(v8);
}

uint64_t sub_1001401D0(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t))
{
  uint64_t v5 = sub_10013B00C();
  uint64_t v6 = swift_retain(v5);
  sub_100128FD0(v6, v6);
  sub_100129D84();
  swift_release();
  a3(v10, a1);
  Promise.resolve(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10013B00C();
  uint64_t v8 = swift_retain(v7);
  sub_100128B6C(v8, v8);
  return swift_release();
}

uint64_t sub_1001404B4(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t))
{
  uint64_t v5 = sub_10013B00C();
  uint64_t v6 = swift_retain(v5);
  sub_100128FD0(v6, v6);
  sub_100129D84();
  swift_release();
  a3(v10, a1);
  Promise.resolve(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10013B00C();
  uint64_t v8 = swift_retain(v7);
  sub_100128B6C(v8, v8);
  return swift_release();
}

uint64_t sub_100140798(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, uint64_t))
{
  uint64_t v5 = sub_10013B00C();
  uint64_t v6 = swift_retain(v5);
  sub_100128FD0(v6, v6);
  sub_100129D84();
  swift_release();
  a3(v10, a1);
  Promise.resolve(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_10013B00C();
  uint64_t v8 = swift_retain(v7);
  sub_100128B6C(v8, v8);
  return swift_release();
}

void sub_100140A7C()
{
}

void sub_100140ACC()
{
}

void sub_100140B1C()
{
}

void sub_100140B6C()
{
}

id sub_100140BBC()
{
  id result = sub_100140BD8();
  qword_1001DBC00 = (uint64_t)result;
  return result;
}

id sub_100140BD8()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000D33C(&qword_1001CB180);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v34 - v14;
  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  id v16 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  sub_10014F588();
  if (sub_1000102D4((uint64_t)v6, 1LL, v7) == 1)
  {
    sub_10014F220();
    sub_10014BB54((uint64_t)v6, &qword_1001CB180);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v15, v6, v7);
  }

  v36[0] = 0x6E656D7461657274LL;
  v36[1] = 0xEA00000000007374LL;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for URL.DirectoryHint.inferFromPath(_:),  v0);
  unint64_t v17 = sub_10004828C();
  URL.appending<A>(path:directoryHint:)(v36, v3, &type metadata for String, v17);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___AMSURLSession);
  id v19 = v16;
  id v20 = [v18 defaultSession];
  NSString v21 = String._bridgeToObjectiveC()();
  uint64_t v22 = type metadata accessor for TreatmentsConfigurationProvider();
  uint64_t v23 = (void *)swift_allocObject(v22, 40LL, 7LL);
  v23[2] = v19;
  v23[3] = v21;
  v23[4] = v20;
  uint64_t v24 = v35;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v10, v13, v7);
  uint64_t v25 = type metadata accessor for TreatmentsStorage(0LL);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  sub_10013B750((uint64_t)v10);
  uint64_t v27 = v26;
  uint64_t v28 = type metadata accessor for DeviceDetails(0LL);
  uint64_t v29 = type metadata accessor for TreatmentStoreService();
  uint64_t v30 = (void *)swift_allocObject(v29, 160LL, 15LL);
  id v31 = sub_10014BB78((uint64_t)v19, (uint64_t)v23, v27, v28, (uint64_t)&protocol witness table for DeviceDetails, v30);
  uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v13, v7);
  v32(v15, v7);
  return v31;
}

uint64_t sub_100140F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v1 + 15sub_10000D3A0(v0 + 2) = a1;
  return swift_release(v2);
}

uint64_t sub_100140F38()
{
  uint64_t v1 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((dispatch thunk of static DeviceInformation.deviceIsRunningInternalBuild()() & 1) != 0)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    sub_10000D33C(&qword_1001CFB40);
    id v6 = [*(id *)(v0 + 112) BOOLForKey:v5];
    id v7 = [v6 valuePromise];

    Promise<A>.init(_:)(v7);
    _OWORD v13[3] = sub_1000AEE3C();
    v13[4] = &protocol witness table for SyncTaskScheduler;
    sub_1000663D0(v13);
    SyncTaskScheduler.init()(v8);
    Promise.map<A>(on:_:)(v13, sub_100141110, 0LL, &type metadata for Bool);
    sub_1000292C4();
    uint64_t v9 = sub_10000D3A0(v13);
    sub_10000DE08(v9, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    sub_1000FDC88( (uint64_t)v4,  enum case for DispatchQoS.QoSClass.default(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
    uint64_t v10 = (void *)static OS_dispatch_queue.global(qos:)(v4);
    sub_10001D454(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    sub_10014AEC8((uint64_t)sub_100141148, 0LL, v10);
    sub_10008E4EC();

    sub_10002FAF4();
  }

  else
  {
    sub_10000D33C(&qword_1001CA760);
    LOBYTE(v13[0]) = 0;
    return Promise.__allocating_init(value:)(v13);
  }

  return v1;
}

id sub_100141110@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result = [*a1 BOOLValue];
  *a2 = (_BYTE)result;
  return result;
}

void sub_100141148(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_100141150()
{
  uint64_t ObjectType = swift_getObjectType(v1);
  type metadata accessor for DispatchQoS.QoSClass(0LL);
  sub_10013A5B0();
  __chkstk_darwin(v5);
  sub_1000292E4();
  sub_100048BA0();
  NSString v17 = String._bridgeToObjectiveC()();
  id v6 = (id)AMSSetLogKeyIfNeeded(v17);
  uint64_t v7 = sub_1000105E8((uint64_t)v6);
  uint64_t v9 = v8;

  sub_10000D33C((uint64_t *)&unk_1001CFB20);
  id v10 = [v1[14] stringForKey:v17];
  id v11 = [v10 valuePromise];

  Promise<A>.init(_:)(v11);
  uint64_t v12 = (void *)sub_10000DDDC((uint64_t)&unk_1001B3848, 48LL);
  _OWORD v12[2] = v1;
  v12[3] = v7;
  v12[4] = v9;
  void v12[5] = ObjectType;
  v18[3] = sub_1000AEE3C();
  v18[4] = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(v18);
  sub_10000DFF4();
  uint64_t v13 = swift_bridgeObjectRetain(v9);
  SyncTaskScheduler.init()(v13);
  uint64_t v14 = Promise.map<A>(on:_:)(v18, sub_10014B98C, v12, &type metadata for Bool);
  sub_1000292C4();
  swift_release(v12);
  sub_10000D3A0(v18);
  uint64_t v15 = (void *)sub_10000DDDC((uint64_t)&unk_1001B3870, 48LL);
  v15[2] = v1;
  v15[3] = v7;
  void v15[4] = v9;
  v15[5] = ObjectType;
  sub_10000DE08((uint64_t)v15, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  sub_1000FDC88( v3,  enum case for DispatchQoS.QoSClass.default(_:),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  sub_10000DFF4();
  id v16 = (void *)static OS_dispatch_queue.global(qos:)(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  sub_10014AEC8((uint64_t)sub_10014B9B4, (uint64_t)v15, v16);
  sub_10008E4EC();

  swift_release(v14);
  swift_release(v15);
  sub_10000DD84();
}

void sub_100141358( uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v87 = a3;
  uint64_t v88 = a4;
  unint64_t v86 = a2;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  id v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000D33C(&qword_1001CF970);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v69 - v14;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  Swift::String v84 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v69 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v69 - v23;
  uint64_t v25 = *a1;
  id v95 = [objc_allocWithZone(NSISO8601DateFormatter) init];
  id v26 = [v95 dateFromString:v25];
  if (!v26)
  {
    sub_10000D5C0((uint64_t)v15, 1LL, 1LL, v16);
    goto LABEL_10;
  }

  uint64_t v27 = v26;
  ((void (*)(void))static Date._unconditionallyBridgeFromObjectiveC(_:))();

  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v28(v15, v22, v16);
  sub_10000D5C0((uint64_t)v15, 0LL, 1LL, v16);
  if (sub_1000102D4((uint64_t)v15, 1LL, v16) == 1)
  {
LABEL_10:

    sub_10014BB54((uint64_t)v15, &qword_1001CF970);
    char v68 = 0;
    goto LABEL_11;
  }

  uint64_t v78 = (void (*)(char *, uint64_t, uint64_t))v28;
  uint64_t v79 = v17;
  Swift::String v82 = a5;
  uint64_t v83 = v5;
  Swift::String v81 = v24;
  v28(v24, v15, v16);
  if (qword_1001C7FF8 != -1) {
    swift_once(&qword_1001C7FF8, sub_1000BD81C);
  }
  uint64_t v80 = qword_1001DBB78;
  uint64_t v29 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v30 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v31 = *(void *)(v30 + 72);
  uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v33 = (v32 + 32) & ~v32;
  uint64_t v75 = v29;
  uint64_t v73 = v33 + 2 * v31;
  uint64_t v72 = v32 | 7;
  uint64_t v34 = swift_allocObject(v29, v73, v32 | 7);
  __int128 v71 = xmmword_100164230;
  *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v74 = v33;
  uint64_t v35 = type metadata accessor for TreatmentStoreService();
  uint64_t v94 = (void *)v35;
  unint64_t v92 = v86;
  swift_retain(v86);
  uint64_t v36 = v88;
  swift_bridgeObjectRetain(v88);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
  v37._uint64_t countAndFlagsBits = 0LL;
  v37._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v37);
  unint64_t v38 = sub_10000D37C(&v92, v35);
  uint64_t v76 = (void *)v35;
  uint64_t DynamicType = swift_getDynamicType(v38, v35, 1LL);
  uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
  uint64_t v89 = DynamicType;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v89);
  sub_10014BB54((uint64_t)&v89, &qword_1001CAAD0);
  v40._uint64_t countAndFlagsBits = 5972026LL;
  v40._object = (void *)0xE300000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v40);
  uint64_t MetatypeMetadata = &type metadata for String;
  uint64_t v89 = v87;
  uint64_t v90 = v36;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v89);
  sub_10014BB54((uint64_t)&v89, &qword_1001CAAD0);
  v41._uint64_t countAndFlagsBits = 93LL;
  v41._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v41);
  LogMessage.init(stringInterpolation:)(v10);
  sub_10000D3A0(&v92);
  uint64_t v77 = v31;
  unint64_t v92 = 0LL;
  unint64_t v93 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  unint64_t v92 = 0xD000000000000017LL;
  unint64_t v93 = 0x8000000100178970LL;
  sub_10000D904((unint64_t *)&unk_1001CFB30, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v42 = v81;
  uint64_t v70 = v43;
  v44._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v43);
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  uint64_t v94 = &type metadata for String;
  static LogMessage.safe(_:)(&v92);
  sub_10014BB54((uint64_t)&v92, &qword_1001CAAD0);
  uint64_t v46 = static os_log_type_t.debug.getter(v45);
  sub_1000BD1B0(v46, v34);
  swift_bridgeObjectRelease();
  id v47 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 stringForKey:v48];

  id v50 = v95;
  if (!v49)
  {

    (*(void (**)(char *, uint64_t))(v79 + 8))(v42, v16);
    char v68 = 1;
    a5 = v82;
    goto LABEL_11;
  }

  id v51 = [v95 dateFromString:v49];

  a5 = v82;
  if (!v51)
  {
    uint64_t v52 = (uint64_t)v85;
    sub_10000D5C0((uint64_t)v85, 1LL, 1LL, v16);
    goto LABEL_14;
  }

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

  uint64_t v52 = (uint64_t)v85;
  uint64_t v53 = v78;
  v78(v85, (uint64_t)v22, v16);
  sub_10000D5C0(v52, 0LL, 1LL, v16);
  if (sub_1000102D4(v52, 1LL, v16) == 1)
  {
LABEL_14:

    (*(void (**)(char *, uint64_t))(v79 + 8))(v42, v16);
    sub_10014BB54(v52, &qword_1001CF970);
    char v68 = 1;
    goto LABEL_11;
  }

  Swift::String v54 = v84;
  v53(v84, v52, v16);
  uint64_t v85 = (char *)qword_1001DBB78;
  uint64_t v55 = swift_allocObject(v75, v73, v72);
  *(_OWORD *)(v55 + swift_weakDestroy(v0 + 16) = v71;
  uint64_t v56 = (uint64_t)v76;
  uint64_t v94 = v76;
  unint64_t v92 = v86;
  swift_retain(v86);
  uint64_t v57 = v88;
  swift_bridgeObjectRetain(v88);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
  v58._uint64_t countAndFlagsBits = 0LL;
  v58._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v58);
  uint64_t v59 = sub_10000D37C(&v92, v56);
  uint64_t v60 = swift_getDynamicType(v59, v56, 1LL);
  uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
  uint64_t v89 = v60;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v89);
  sub_10014BB54((uint64_t)&v89, &qword_1001CAAD0);
  v61._uint64_t countAndFlagsBits = 5972026LL;
  v61._object = (void *)0xE300000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v61);
  uint64_t MetatypeMetadata = &type metadata for String;
  uint64_t v89 = v87;
  uint64_t v90 = v57;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v89);
  sub_10014BB54((uint64_t)&v89, &qword_1001CAAD0);
  v62._uint64_t countAndFlagsBits = 93LL;
  v62._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v62);
  LogMessage.init(stringInterpolation:)(v10);
  sub_10000D3A0(&v92);
  unint64_t v92 = 0LL;
  unint64_t v93 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(29LL);
  swift_bridgeObjectRelease();
  unint64_t v92 = 0xD00000000000001BLL;
  unint64_t v93 = 0x8000000100178990LL;
  v63._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v70);
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  uint64_t v94 = &type metadata for String;
  static LogMessage.safe(_:)(&v92);
  sub_10014BB54((uint64_t)&v92, &qword_1001CAAD0);
  uint64_t v65 = static os_log_type_t.debug.getter(v64);
  sub_1000BD1B0(v65, v55);
  a5 = v82;
  swift_bridgeObjectRelease();
  char v66 = static Date.> infix(_:_:)(v42, v54);

  uint64_t v67 = *(void (**)(char *, uint64_t))(v79 + 8);
  v67(v54, v16);
  v67(v42, v16);
  char v68 = v66 & 1;
LABEL_11:
  *a5 = v68;
}

void sub_100141B80( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v10 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)_convertErrorToNSError(_:)(a1);
  if ([v13 code] != (id)204) {
    goto LABEL_8;
  }
  id v14 = [v13 domain];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
  if (v15 == v18 && v17 == v19)
  {

    swift_bridgeObjectRelease_n(v17, 2LL);
    goto LABEL_12;
  }

  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
  }

  else
  {
LABEL_8:
    uint64_t v39 = a5;
    uint64_t v40 = v5;
    if (qword_1001C7FF8 != -1) {
      swift_once(&qword_1001C7FF8, sub_1000BD81C);
    }
    v38[1] = qword_1001DBB78;
    uint64_t v22 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v23 = type metadata accessor for LogMessage(0LL);
    uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v23 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v25 = type metadata accessor for TreatmentStoreService();
    uint64_t v45 = (void *)v25;
    unint64_t v43 = a2;
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = sub_10000D37C(&v43, v25);
    uint64_t DynamicType = swift_getDynamicType(v27, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    v41[0] = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
    sub_10014BB54((uint64_t)v41, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t MetatypeMetadata = &type metadata for String;
    v41[0] = v46;
    v41[1] = a4;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v41);
    sub_10014BB54((uint64_t)v41, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v12);
    sub_10000D3A0(&v43);
    unint64_t v43 = 0LL;
    unint64_t v44 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD000000000000043LL;
    unint64_t v44 = 0x8000000100178920LL;
    id v31 = [v13 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v34 = v33;

    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    uint64_t v45 = &type metadata for String;
    static LogMessage.safe(_:)(&v43);
    sub_10014BB54((uint64_t)&v43, &qword_1001CAAD0);
    uint64_t v37 = static os_log_type_t.error.getter(v36);
    sub_1000BD1B0(v37, v24);
    swift_bridgeObjectRelease();

    a5 = v39;
  }

void sub_100141EF0()
{
  uint64_t v1 = (void *)type metadata accessor for Date(0LL);
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  sub_10000DE7C();
  uint64_t v5 = v4 - v3;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v17 = sub_1000F0520();
  uint64_t v18 = __chkstk_darwin(v17);
  __chkstk_darwin(v18);
  uint64_t v24 = (char *)&v80 - v23;
  uint64_t v25 = *(void *)(v0 + 152);
  if (!v25)
  {
    uint64_t v84 = v5;
    id v86 = v1;
    unint64_t v88 = v19;
    uint64_t v90 = v22;
    uint64_t v94 = v21;
    uint64_t v95 = v20;
    if (qword_1001C7FF8 != -1) {
      swift_once(&qword_1001C7FF8, sub_1000BD81C);
    }
    uint64_t v85 = v2;
    uint64_t v91 = v0;
    uint64_t v26 = OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB78 + 16));
    uint64_t v27 = OSSignposter.logHandle.getter(v26);
    uint64_t v28 = OSSignpostID.init(log:)(v27);
    unint64_t v93 = v24;
    Swift::String v29 = (os_log_s *)OSSignposter.logHandle.getter(v28);
    os_signpost_type_t v30 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      id v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v31 = 0;
      os_signpost_id_t v32 = OSSignpostID.rawValue.getter(v31);
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  v30,  v32,  "TreatmentStoreService",  "Synchronizing treatments",  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    uint64_t v33 = type metadata accessor for OSSignpostIntervalState(0LL);
    uint64_t v34 = (void *)swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    uint64_t v89 = OSSignpostIntervalState.init(id:isOpen:)(v14, 1LL);
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    id v36 = (id)AMSSetLogKeyIfNeeded(v35);
    uint64_t v37 = sub_1000105E8((uint64_t)v36);
    uint64_t v39 = v38;

    uint64_t v83 = qword_1001DBB78;
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v40 = sub_10002C79C();
    uint64_t v41 = sub_10001059C( ((*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v40 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v40 - 8) + 80LL));
    *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v42 = type metadata accessor for TreatmentStoreService();
    uint64_t v97 = v42;
    uint64_t v43 = v91;
    v96[0] = v91;
    sub_1000F0364(v39);
    sub_10002588C();
    sub_100010564();
    v44._uint64_t countAndFlagsBits = 0LL;
    v44._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v44);
    uint64_t v45 = sub_10000D37C(v96, v42);
    uint64_t v46 = sub_10000DC54((uint64_t)v45, v42);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    v99[0] = v46;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v99);
    sub_10014C17C();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v92 = v37;
    v99[0] = v37;
    v99[1] = v39;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v99);
    sub_10014C17C();
    sub_10014BCC8();
    LogMessage.init(stringInterpolation:)(v9);
    uint64_t v87 = v39;
    swift_bridgeObjectRelease();
    sub_10000D3A0(v96);
    uint64_t v47 = LogMessage.init(stringLiteral:)(0xD000000000000018LL);
    uint64_t v48 = static os_log_type_t.default.getter(v47);
    sub_1000BD1B0(v48, v41);
    sub_10000DDF8();
    id v49 = [objc_allocWithZone(NSISO8601DateFormatter) init];
    uint64_t v50 = v84;
    static Date.now.getter();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, id))(v85 + 8))(v50, v86);
    id v86 = v49;
    NSString v52 = [v49 stringFromDate:isa];

    if (!v52)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      NSString v52 = String._bridgeToObjectiveC()();
      sub_1000090CC();
    }

    id v53 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    sub_100048BA0();
    NSString v54 = String._bridgeToObjectiveC()();
    [v53 setObject:v52 forKey:v54];

    uint64_t v55 = *(void *)(v43 + 144);
    sub_100137E5C();
    uint64_t v97 = sub_1000AEE3C();
    Swift::String v98 = &protocol witness table for SyncTaskScheduler;
    sub_1000663D0(v96);
    sub_10000DFF4();
    sub_10014C0B0();
    uint64_t v56 = sub_10014C114();
    sub_10014C0E4(&qword_1001CFAE8);
    uint64_t v57 = Promise.flatMap<A>(on:_:)(v96, sub_10014B7A8, v55, v56);
    sub_1000292C4();
    sub_100037230();
    sub_10000D3A0(v96);
    uint64_t v58 = v94;
    uint64_t v85 = *(void *)(v94 + 16);
    uint64_t v59 = v90;
    uint64_t v60 = v95;
    ((void (*)(uint64_t, char *, uint64_t))v85)(v90, v93, v95);
    uint64_t v61 = *(unsigned __int8 *)(v58 + 80);
    uint64_t v62 = (v61 + 16) & ~v61;
    uint64_t v84 = v61 | 7;
    unint64_t v63 = (v88 + v62 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v83 = v63;
    unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v82 = v64;
    unint64_t v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v88 = v65 + 16;
    uint64_t v66 = swift_allocObject(&unk_1001B3668, v65 + 16, v61 | 7);
    Swift::String v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32);
    v81(v66 + v62, v59, v60);
    uint64_t v67 = v89;
    *(void *)(v66 + v63) = v89;
    *(void *)(v66 + v64) = v43;
    char v68 = (uint64_t *)(v66 + v65);
    uint64_t v69 = v87;
    uint64_t *v68 = v92;
    v68[1] = v69;
    uint64_t v70 = sub_10000DDDC((uint64_t)&unk_1001B3690, 32LL);
    *(void *)(v70 + swift_weakDestroy(v0 + 16) = sub_10014B7B4;
    *(void *)(v70 + 24) = v66;
    sub_10000DF9C();
    sub_10002588C();
    sub_10002C7D4();
    swift_retain(v66);
    sub_100062648(j_nullsub_1, 0LL, sub_100066260, v70);
    sub_100025894();
    swift_release(v70);
    sub_10002588C();
    sub_100052E60();
    sub_10001A2D8();
    __int128 v71 = v93;
    uint64_t v72 = v95;
    ((void (*)(uint64_t, char *, uint64_t))v85)(v59, v93, v95);
    uint64_t v73 = swift_allocObject(&unk_1001B36B8, v88, v84);
    uint64_t v74 = v59;
    uint64_t v75 = v72;
    v81(v73 + v62, v74, v72);
    *(void *)(v73 + v83) = v67;
    *(void *)(v73 + v8sub_10000D3A0(v0 + 2) = v43;
    uint64_t v76 = (uint64_t *)(v73 + v65);
    *uint64_t v76 = v92;
    v76[1] = v69;
    uint64_t v77 = sub_10000DDDC((uint64_t)&unk_1001B36E0, 32LL);
    *(void *)(v77 + swift_weakDestroy(v0 + 16) = sub_10014B870;
    *(void *)(v77 + 24) = v73;
    uint64_t v78 = sub_10000DDDC((uint64_t)&unk_1001B3708, 32LL);
    *(void *)(v78 + swift_weakDestroy(v0 + 16) = sub_100066260;
    *(void *)(v78 + 24) = v77;
    sub_10002588C();
    sub_10002C7D4();
    sub_10000DFF4();
    sub_100062648(sub_10002885C, v78, nullsub_1, 0LL);
    sub_100037230();
    sub_100025894();
    uint64_t v79 = swift_retain(v57);
    sub_100140F28(v79);
    swift_release(v67);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v71, v75);
    uint64_t v25 = 0LL;
  }

  swift_retain(v25);
  sub_10000DD84();
}

uint64_t sub_10014268C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  sub_10013C008();
  uint64_t v7 = v6;
  uint64_t v8 = (void *)swift_allocObject(&unk_1001B3730, 48LL, 7LL);
  v8[2] = a2;
  void v8[3] = v4;
  v8[4] = v3;
  v8[5] = v5;
  uint64_t v9 = swift_allocObject(&unk_1001B3758, 32LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_10014B8C8;
  *(void *)(v9 + 24) = v8;
  v14[3] = type metadata accessor for SyncTaskScheduler(0LL);
  v14[4] = &protocol witness table for SyncTaskScheduler;
  sub_1000663D0(v14);
  swift_retain(a2);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  uint64_t v10 = swift_bridgeObjectRetain(v5);
  SyncTaskScheduler.init()(v10);
  uint64_t v11 = sub_10000D33C(&qword_1001CFAE0);
  sub_10000D890(&qword_1001CFAE8, &qword_1001CFAE0);
  uint64_t v12 = Promise.flatMap<A>(on:_:)(v14, sub_100122E14, v9, v11);
  swift_release(v7);
  swift_release(v9);
  sub_10000D3A0(v14);
  return v12;
}

uint64_t sub_1001427D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)swift_allocObject(&unk_1001B3780, 40LL, 7LL);
  void v7[2] = a2;
  v7[3] = a3;
  v7[4] = a4;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  sub_10013FCF4();
  uint64_t v9 = v8;
  swift_release(v7);
  return v9;
}

uint64_t sub_10014288C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v124 = a2;
  uint64_t v143 = a1;
  uint64_t v136 = type metadata accessor for Treatment(0LL);
  __chkstk_darwin(v136);
  uint64_t v144 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v139 = type metadata accessor for Date(0LL);
  uint64_t v125 = *(void *)(v139 - 8);
  uint64_t v9 = __chkstk_darwin(v139);
  uint64_t v138 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v137 = (char *)&v105 - v11;
  uint64_t v122 = type metadata accessor for TreatmentsConfiguration.Area.Experiment(0LL);
  uint64_t v123 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v126 = (uint64_t)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain(a3);
    id v14 = (uint64_t *)(a3 + 48);
    while (1)
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      uint64_t v17 = *(v14 - 2);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v16);
      sub_10013C2F4(v17, v15, v16);
      if (v5) {
        goto LABEL_66;
      }
      v14 += 3;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  uint64_t v18 = *(void *)(a4 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain(a4);
    unint64_t v19 = (uint64_t *)(a4 + 48);
    while (1)
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      uint64_t v22 = *(v19 - 2);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v21);
      sub_10013C394(v22, v20, v21);
      if (v5) {
        break;
      }
      v19 += 3;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }

LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

LABEL_59:
      unint64_t v100 = v111 + 1;
      sub_100019EC0(v126, type metadata accessor for TreatmentsConfiguration.Area.Experiment);
      uint64_t v101 = *(void (**)(char *, uint64_t))(v125 + 8);
      uint64_t v102 = v139;
      v101(v138, v139);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v101)(v137, v102);
      unint64_t v39 = v100;
      uint64_t v29 = v116;
      uint64_t v38 = v108;
      if (v100 == v110)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(v29, 2LL);
        goto LABEL_62;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100143584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a5;
  uint64_t v60 = a6;
  uint64_t v58 = a4;
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = (const char *)type metadata accessor for OSSignpostError(0LL);
  uint64_t v11 = *((void *)v55 - 1);
  __chkstk_darwin(v55);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v57 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v19 = (char *)&v52 - v18;
  swift_errorRetain(a1);
  uint64_t v20 = swift_errorRetain(a1);
  uint64_t v21 = (os_log_s *)OSSignposter.logHandle.getter(v20);
  uint64_t v22 = OSSignpostIntervalState.signpostID.getter();
  int v56 = static os_signpost_type_t.end.getter(v22);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    os_log_t v54 = v21;
    uint64_t v23 = swift_retain(a3);
    checkForErrorAndConsumeState(state:)(v23);
    swift_release(a3);
    uint64_t v24 = v55;
    if ((*(unsigned int (**)(char *, const char *))(v11 + 88))(v13, v55) == enum case for OSSignpostError.doubleEnd(_:))
    {
      char v25 = 0;
      char v26 = 0;
      uint64_t v55 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(char *, const char *))(v11 + 8))(v13, v24);
      uint64_t v55 = "Failed to synchronize treatments (error: %@)";
      char v26 = 2;
      char v25 = 1;
    }

    uint64_t v52 = v19;
    uint64_t v53 = v15;
    uint64_t v27 = v57;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v57, v19, v14);
    uint64_t v28 = swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_BYTE *)uint64_t v28 = v26;
    *(_BYTE *)(v28 + setenv("JavaScriptCoreUseJIT", "0", 1) = v25;
    *(_WORD *)(v28 + sub_10000D3A0(v0 + 2) = 2112;
    swift_errorRetain(a1);
    uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v66 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v28 + 4, v28 + 12);
    uint64_t *v29 = v30;
    swift_errorRelease(a1);
    uint64_t v31 = swift_errorRelease(a1);
    os_signpost_id_t v32 = OSSignpostID.rawValue.getter(v31);
    os_log_t v33 = v54;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v54,  (os_signpost_type_t)v56,  v32,  "TreatmentStoreService",  v55,  (uint8_t *)v28,  0xCu);
    uint64_t v34 = sub_10000D33C(&qword_1001CFB08);
    swift_arrayDestroy(v29, 1LL, v34);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    __int128 v35 = *(void (**)(char *, uint64_t))(v53 + 8);
    v35(v52, v14);
    v35(v27, v14);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  }

  if (qword_1001C7FF8 != -1) {
    swift_once(&qword_1001C7FF8, sub_1000BD81C);
  }
  uint64_t v36 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v37 = type metadata accessor for LogMessage(0LL);
  uint64_t v38 = swift_allocObject( v36,  ((*(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v37 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v37 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v39 = type metadata accessor for TreatmentStoreService();
  uint64_t v68 = v39;
  uint64_t v66 = v58;
  swift_retain(v58);
  uint64_t v40 = v60;
  swift_bridgeObjectRetain(v60);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
  v41._uint64_t countAndFlagsBits = 0LL;
  v41._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v41);
  uint64_t v42 = sub_10000D37C(&v66, v39);
  uint64_t DynamicType = swift_getDynamicType(v42, v39, 1LL);
  uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
  v64[0] = DynamicType;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v64);
  sub_10014BB54((uint64_t)v64, &qword_1001CAAD0);
  v44._uint64_t countAndFlagsBits = 5972026LL;
  v44._object = (void *)0xE300000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v44);
  uint64_t MetatypeMetadata = &type metadata for String;
  v64[0] = v59;
  v64[1] = v40;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v64);
  sub_10014BB54((uint64_t)v64, &qword_1001CAAD0);
  v45._uint64_t countAndFlagsBits = 93LL;
  v45._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v45);
  LogMessage.init(stringInterpolation:)(v10);
  sub_10000D3A0(&v66);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(42LL, 1LL);
  v46._object = (void *)0x8000000100178760LL;
  v46._uint64_t countAndFlagsBits = 0xD000000000000029LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v46);
  swift_getErrorValue(a1, v63, &v61);
  uint64_t v47 = v62;
  uint64_t v68 = v62;
  sub_1000663D0(&v66);
  (*(void (**)(void))(*(void *)(v47 - 8) + 16LL))();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(&v66);
  sub_10014BB54((uint64_t)&v66, &qword_1001CAAD0);
  v48._uint64_t countAndFlagsBits = 41LL;
  v48._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v48);
  uint64_t v49 = LogMessage.init(stringInterpolation:)(v10);
  uint64_t v50 = static os_log_type_t.error.getter(v49);
  sub_1000BD1B0(v50, v38);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100143AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v39 = a3;
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = (os_log_s *)OSSignposter.logHandle.getter(v15);
  uint64_t v19 = OSSignpostIntervalState.signpostID.getter();
  int v38 = static os_signpost_type_t.end.getter(v19);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    uint64_t v20 = swift_retain(a2);
    checkForErrorAndConsumeState(state:)(v20);
    swift_release(a2);
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v10 + 88))(v12, v9) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v21 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v21 = "Synchronized treatments successfully";
    }

    uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v22 = 0;
    os_signpost_id_t v23 = OSSignpostID.rawValue.getter(v22);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  (os_signpost_type_t)v38,  v23,  "TreatmentStoreService",  v21,  v22,  2u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v13);
  if (qword_1001C7FF8 != -1) {
    swift_once(&qword_1001C7FF8, sub_1000BD81C);
  }
  uint64_t v24 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v25 = type metadata accessor for LogMessage(0LL);
  uint64_t v26 = swift_allocObject( v24,  ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v25 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v25 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v27 = type metadata accessor for TreatmentStoreService();
  void v44[3] = v27;
  v44[0] = v39;
  swift_retain(v39);
  uint64_t v28 = v41;
  swift_bridgeObjectRetain(v41);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
  v29._uint64_t countAndFlagsBits = 0LL;
  v29._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  uint64_t v30 = sub_10000D37C(v44, v27);
  uint64_t DynamicType = swift_getDynamicType(v30, v27, 1LL);
  uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
  v42[0] = DynamicType;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
  sub_10014BB54((uint64_t)v42, &qword_1001CAAD0);
  v32._uint64_t countAndFlagsBits = 5972026LL;
  v32._object = (void *)0xE300000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v32);
  uint64_t MetatypeMetadata = &type metadata for String;
  v42[0] = v40;
  v42[1] = v28;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v42);
  sub_10014BB54((uint64_t)v42, &qword_1001CAAD0);
  v33._uint64_t countAndFlagsBits = 93LL;
  v33._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v33);
  LogMessage.init(stringInterpolation:)(v8);
  sub_10000D3A0(v44);
  uint64_t v34 = LogMessage.init(stringLiteral:)(0xD000000000000024LL);
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  sub_1000BD1B0(v35, v26);
  return swift_bridgeObjectRelease();
}

void sub_100143E3C(uint64_t a1)
{
  uint64_t v4 = sub_1001073B4();
  uint64_t v5 = type metadata accessor for CocoaError(v4);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  if (a1)
  {
    if (a1 == 1)
    {
      sub_100143FD4();
    }

    else if (a1 == 2)
    {
      sub_100141EF0();
    }

    else
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "amsengagementd/TreatmentStoreService.swift",  42LL,  2LL,  169LL,  0);
      __break(1u);
    }
  }

  else
  {
    sub_10013B6CC();
    char v11 = v10;
    sub_10000D33C(&qword_1001CFAE0);
    if ((v11 & 1) != 0)
    {
      static CocoaError.Code.fileReadNoSuchFile.getter();
      unint64_t v12 = sub_100147B1C((uint64_t)_swiftEmptyArrayStorage);
      sub_10000D904( (unint64_t *)&unk_1001CFAF0,  (uint64_t (*)(uint64_t))&type metadata accessor for CocoaError);
      uint64_t v14 = _BridgedStoredNSError.init(_:userInfo:)(v1, v12, v5, v13);
      uint64_t v15 = CocoaError._nsError.getter(v14);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
      Promise.__allocating_init(error:)(v15);
    }

    else
    {
      Promise.__allocating_init(value:)();
    }

    sub_10001A094();
  }

void sub_100143FD4()
{
  uint64_t v26 = v2;
  uint64_t v27 = v3;
  uint64_t v4 = v0;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v5);
  sub_1000292E4();
  uint64_t v6 = *(void **)(v0 + 144);
  sub_10013B6CC();
  if ((v7 & 1) != 0)
  {
    sub_100141EF0();
  }

  else
  {
    id v8 = (id)AMSSetLogKeyIfNeeded(v7);
    uint64_t v9 = sub_1000105E8((uint64_t)v8);
    uint64_t v11 = v10;

    if (qword_1001C7FF8 != -1) {
      swift_once(&qword_1001C7FF8, sub_1000BD81C);
    }
    sub_10000D33C(&qword_1001C9C70);
    uint64_t v12 = *(void *)(sub_10002C79C() - 8);
    uint64_t v13 = sub_10001059C( ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + 2LL * *(void *)(v12 + 72),
            *(unsigned __int8 *)(v12 + 80));
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v22 = type metadata accessor for TreatmentStoreService();
    v21[0] = v4;
    sub_1000F0364(v11);
    sub_10002588C();
    sub_100010564();
    v14._uint64_t countAndFlagsBits = 0LL;
    v14._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v14);
    uint64_t v15 = sub_10014BD9C(v21);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    v24[0] = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v24);
    sub_10014BDE4((uint64_t)v24);
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    v24[0] = v9;
    v24[1] = v11;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v24);
    sub_10014BDE4((uint64_t)v24);
    sub_10014BCC8();
    LogMessage.init(stringInterpolation:)(v1);
    swift_bridgeObjectRelease();
    sub_10000D3A0(v21);
    uint64_t v16 = LogMessage.init(stringLiteral:)(0xD000000000000026LL);
    uint64_t v17 = static os_log_type_t.info.getter(v16);
    sub_1000BD1B0(v17, v13);
    sub_100020AB8();
    sub_100141150();
    uint64_t v18 = (void *)sub_10000DDDC((uint64_t)&unk_1001B3640, 40LL);
    void v18[2] = v4;
    v18[3] = v9;
    v18[4] = v11;
    uint64_t v22 = sub_1000AEE3C();
    os_signpost_id_t v23 = &protocol witness table for SyncTaskScheduler;
    sub_1000663D0(v21);
    uint64_t v19 = sub_10002588C();
    SyncTaskScheduler.init()(v19);
    uint64_t v20 = sub_1000F04B4();
    sub_10000D890(&qword_1001CFAE8, &qword_1001CFAE0);
    Promise.flatMap<A>(on:_:)(v21, sub_10014B79C, v18, v20);
    sub_1000292C4();
    sub_10002FAF4();
    sub_10000D3A0(v21);
    sub_10000DD84();
  }

void sub_10014425C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*a1 == 1)
  {
    if (qword_1001C7FF8 != -1) {
      swift_once(&qword_1001C7FF8, sub_1000BD81C);
    }
    uint64_t v11 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v12 = type metadata accessor for LogMessage(0LL);
    uint64_t v13 = swift_allocObject( v11,  ((*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v12 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v12 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v14 = type metadata accessor for TreatmentStoreService();
    uint64_t v37 = v14;
    v36[0] = a2;
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v15._uint64_t countAndFlagsBits = 0LL;
    v15._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v15);
    uint64_t v16 = sub_10000D37C(v36, v14);
    uint64_t DynamicType = swift_getDynamicType(v16, v14, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    uint64_t v33 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v33);
    sub_10014BB54((uint64_t)&v33, &qword_1001CAAD0);
    v18._uint64_t countAndFlagsBits = 5972026LL;
    v18._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v33);
    sub_10014BB54((uint64_t)&v33, &qword_1001CAAD0);
    v19._uint64_t countAndFlagsBits = 93LL;
    v19._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v19);
    LogMessage.init(stringInterpolation:)(v10);
    sub_10000D3A0(v36);
    uint64_t v20 = LogMessage.init(stringLiteral:)(0xD00000000000001ALL);
    uint64_t v21 = static os_log_type_t.info.getter(v20);
    sub_1000BD1B0(v21, v13);
    swift_bridgeObjectRelease();
    sub_100141EF0();
  }

  else
  {
    if (qword_1001C7FF8 != -1) {
      swift_once(&qword_1001C7FF8, sub_1000BD81C);
    }
    uint64_t v22 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v23 = type metadata accessor for LogMessage(0LL);
    uint64_t v24 = swift_allocObject( v22,  ((*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL))
          + 2LL * *(void *)(*(void *)(v23 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v23 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v25 = type metadata accessor for TreatmentStoreService();
    uint64_t v37 = v25;
    v36[0] = a2;
    swift_retain(a2);
    swift_bridgeObjectRetain(a4);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v26._uint64_t countAndFlagsBits = 0LL;
    v26._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v26);
    uint64_t v27 = sub_10000D37C(v36, v25);
    uint64_t v28 = swift_getDynamicType(v27, v25, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    uint64_t v33 = v28;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v33);
    sub_10014BB54((uint64_t)&v33, &qword_1001CAAD0);
    v29._uint64_t countAndFlagsBits = 5972026LL;
    v29._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v33 = a3;
    uint64_t v34 = a4;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v33);
    sub_10014BB54((uint64_t)&v33, &qword_1001CAAD0);
    v30._uint64_t countAndFlagsBits = 93LL;
    v30._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v30);
    LogMessage.init(stringInterpolation:)(v10);
    sub_10000D3A0(v36);
    uint64_t v31 = LogMessage.init(stringLiteral:)(0xD00000000000001FLL);
    uint64_t v32 = static os_log_type_t.info.getter(v31);
    sub_1000BD1B0(v32, v24);
    swift_bridgeObjectRelease();
    sub_10000D33C(&qword_1001CFAE0);
    Promise.__allocating_init(value:)();
  }

void sub_100144620()
{
}

void *sub_100144668()
{
  return v0;
}

uint64_t sub_1001446A4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for TreatmentStoreService()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd21TreatmentStoreService);
}

uint64_t sub_1001446DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10014BFDC(a1, a2);
  *(void *)(v2 + 35sub_10000D3A0(v0 + 2) = sub_1000C9AD4(v3);
  sub_1000D6DB0();
  return sub_10000DD48();
}

#error "1001447E0: call analysis failed (funcsize=122)"
uint64_t sub_100144930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  sub_10014BD60();
  if (v0) {
    return sub_100122ECC((uint64_t)sub_100144980, *(void *)(v1 + 344), 0LL);
  }
  sub_10014BFBC();
  sub_1000292C4();
  sub_1000E2CFC();
  uint64_t v3 = sub_10014C02C();
  return sub_10014BE40(v3, v4);
}

uint64_t sub_100144980()
{
  uint64_t v1 = *(void *)(v0 + 416);
  swift_release();
  *(void *)(v0 + 320) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_10000D33C((uint64_t *)&unk_1001CE740);
  uint64_t v3 = sub_10000DE08(v2, (unint64_t *)&qword_1001CF9A0, &OBJC_CLASS___NSError_ptr);
  if (sub_10014BF60(v0 + 312, v0 + 320, v2))
  {
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v6 = *(void *)(v0 + 344);
    swift_errorRelease(*(void *)(v0 + 416));
    uint64_t v16 = *(void **)(v0 + 312);
    uint64_t v7 = sub_10014BE30();
    *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    *(void *)(v0 + 27sub_10000D3A0(v0 + 2) = v4;
    *(void *)(v0 + 248) = v6;
    swift_bridgeObjectRetain();
    sub_10002588C();
    sub_10000DC34();
    sub_10000DC08();
    uint64_t v8 = sub_10000D37C((void *)(v0 + 248), v4);
    sub_10000DC54((uint64_t)v8, v4);
    *(void *)(v0 + 304) = sub_1000258E8();
    *(void *)(v0 + 280) = v6;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 280);
    sub_10014C174(v0 + 280);
    sub_10000DC14();
    *(void *)(v0 + 240) = &type metadata for String;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v15;
    *(void *)(v0 + 224) = v5;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 216);
    sub_10014C174(v0 + 216);
    sub_10014BCC8();
    sub_10000DC5C();
    sub_10000DCFC();
    sub_10000D3A0((void *)(v0 + 248));
    sub_10001A21C(31LL);
    sub_100038838((uint64_t)"Failed to fetch areas (error: ");
    *(void *)(v0 + 184) = v16;
    *(void *)(v0 + 208) = v3;
    id v9 = v16;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v0 + 184);
    sub_10014C174(v0 + 184);
    sub_10000DC4C(41LL);
    uint64_t v10 = sub_10000DC5C();
    uint64_t v11 = static os_log_type_t.error.getter(v10);
    sub_1000BD1B0(v11, v7);
    uint64_t v12 = sub_10000DDF8();
    sub_100070398(v12, "ams_sanitizedForSecureCoding");
    sub_10008C040();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v13 = *(void *)(v0 + 352);
  swift_errorRelease(*(void *)(v0 + 320));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100144BEC(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  &protocol witness table for String);
  v4[4] = v8;
  uint64_t v9 = dword_1001CFADC;
  swift_retain(a4);
  uint64_t v10 = (void *)swift_task_alloc(v9);
  void v4[5] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_100144C88;
  return sub_1001446DC(v8, a2);
}

uint64_t sub_100144C88()
{
  if (v0)
  {
    uint64_t v2 = sub_10014C188();
    sub_100067974();
    uint64_t v3 = (void *)v2;
  }

  else
  {
    sub_10000D33C(&qword_1001CBE58);
    sub_10014C19C();
    sub_1000A8F80();
    uint64_t v3 = 0LL;
  }

  sub_10014BF38();

  sub_100051B08();
  return sub_1000D6D0C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100144D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10014BFDC(a1, a2);
  *(void *)(v2 + 35sub_10000D3A0(v0 + 2) = sub_1000C9AD4(v3);
  sub_1000D6DB0();
  return sub_10000DD48();
}

#error "100144E18: call analysis failed (funcsize=121)"
uint64_t sub_100144F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(void);
  sub_10014BD60();
  if (v0) {
    return sub_100122ECC((uint64_t)sub_10014BC30, *(void *)(v1 + 344), 0LL);
  }
  sub_10014BFBC();
  sub_1000292C4();
  sub_1000E2CFC();
  uint64_t v3 = sub_10014C02C();
  return sub_10014BE40(v3, v4);
}

void sub_100144FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(sub_10000DDDC(a3, 24LL) + swift_weakDestroy(v0 + 16) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a1);
  sub_10013FCF4();
  swift_release();
  sub_100025894();
  sub_10001A094();
}

uint64_t sub_100145050@<X0>( uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t)@<X2>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v37 = a1 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v38 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v9 = _swiftEmptyDictionarySingleton;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v7));
  uint64_t v11 = (v7 - 1) & v7;
  for (unint64_t i = v10 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v8 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    sub_10000DF9C();
    uint64_t v19 = a2(v17, v18);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }

    uint64_t v20 = v19;
    unint64_t v41 = v11;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    uint64_t v42 = v9;
    unint64_t v22 = sub_100030CCC(v17, v18);
    uint64_t v24 = v9[2];
    BOOL v25 = (v23 & 1) == 0;
    Swift::Int v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }

    unint64_t v27 = v22;
    char v28 = v23;
    sub_10000D33C(&qword_1001CFAC0);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
    {
      unint64_t v29 = sub_100030CCC(v17, v18);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_37;
      }
      unint64_t v27 = v29;
    }

    uint64_t v9 = v42;
    if ((v28 & 1) != 0)
    {
      uint64_t v31 = v42[7];
      swift_bridgeObjectRelease();
      *(void *)(v31 + 8 * v27) = v20;
    }

    else
    {
      v42[(v27 >> 6) + 8] |= 1LL << v27;
      uint64_t v32 = (uint64_t *)(v42[6] + 16 * v27);
      *uint64_t v32 = v17;
      v32[1] = v18;
      *(void *)(v42[7] + 8 * v27) = v20;
      uint64_t v33 = v42[2];
      BOOL v13 = __OFADD__(v33, 1LL);
      uint64_t v34 = v33 + 1;
      if (v13) {
        goto LABEL_34;
      }
      void v42[2] = v34;
      sub_10000DF9C();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = 0LL;
    unint64_t v7 = v41;
    if (v41) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v8++, 1LL);
    if (v13) {
      goto LABEL_35;
    }
    if (v8 >= v38) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v37 + 8 * v8);
    if (!v14) {
      break;
    }
LABEL_15:
    uint64_t v11 = (v14 - 1) & v14;
  }

  int64_t v15 = v8 + 1;
  if (v8 + 1 >= v38) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v37 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v8 + 2;
  if (v8 + 2 >= v38) {
    goto LABEL_32;
  }
  unint64_t v14 = *(void *)(v37 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v8 + 3;
  if (v8 + 3 >= v38)
  {
LABEL_32:
    uint64_t result = swift_release();
    *a3 = v9;
    return result;
  }

  unint64_t v14 = *(void *)(v37 + 8 * v15);
  if (v14)
  {
LABEL_14:
    int64_t v8 = v15;
    goto LABEL_15;
  }

  while (1)
  {
    int64_t v8 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v8 >= v38) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v37 + 8 * v8);
    ++v15;
    if (v14) {
      goto LABEL_15;
    }
  }

uint64_t sub_100145360(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  &protocol witness table for String);
  v4[4] = v8;
  uint64_t v9 = dword_1001CFA94;
  swift_retain(a4);
  unint64_t v10 = (void *)swift_task_alloc(v9);
  void v4[5] = v10;
  *unint64_t v10 = v4;
  v10[1] = sub_10014BC20;
  return sub_100144D14(v8, a2);
}

uint64_t sub_1001453FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10014BFDC(a1, a2);
  *(void *)(v2 + 35sub_10000D3A0(v0 + 2) = sub_1000C9AD4(v3);
  sub_1000D6DB0();
  return sub_10000DD48();
}

#error "100145500: call analysis failed (funcsize=121)"
uint64_t sub_10014564C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  *(void *)(swift_allocObject(&unk_1001B3348, 24LL, 7LL) + swift_weakDestroy(v0 + 16) = a2;
  swift_bridgeObjectRetain();
  swift_retain(a1);
  sub_10013FCF4();
  uint64_t v4 = v3;
  swift_release();
  swift_release();
  return v4;
}

uint64_t sub_1001456F8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1 + 56;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v38 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v8 = 0LL;
  uint64_t v9 = _swiftEmptyDictionarySingleton;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v8 << 6);
LABEL_17:
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    swift_bridgeObjectRetain();
    sub_10013B948(v17, v16, v40);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }

    sub_100112918((uint64_t)v40, (uint64_t)v41, (uint64_t *)&unk_1001CF9E0);
    if (v42)
    {
      unsigned __int8 v43 = v41[0];
      sub_10000DAA0(0LL, &qword_1001CFA48, &OBJC_CLASS___AMSTreatmentArea_ptr);
      swift_bridgeObjectRetain();
      id v18 = sub_100145A88(v17, v16);
      [v18 setCacheable:v43];
      sub_10014B22C(v40);
      id v34 = v18;
      char isUnique = swift_isUniquelyReferenced_nonNull_native(v9);
      uint64_t v39 = v9;
      unint64_t v19 = sub_100030CCC(v17, v16);
      uint64_t v20 = v9[2];
      int v44 = v21;
      BOOL v22 = (v21 & 1) == 0;
      Swift::Int v23 = v20 + v22;
      if (__OFADD__(v20, v22)) {
        goto LABEL_36;
      }
      unint64_t v36 = v19;
      sub_10000D33C(&qword_1001CFA78);
      Swift::Bool v24 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v23);
      char v25 = v44;
      if (v24)
      {
        unint64_t v36 = sub_100030CCC(v17, v16);
        if ((v25 & 1) != (v26 & 1)) {
          goto LABEL_38;
        }
      }

      if ((v25 & 1) != 0)
      {
        uint64_t v9 = v39;
        uint64_t v27 = v39[7];

        char v28 = v34;
        *(void *)(v27 + 8 * v36) = v34;
      }

      else
      {
        v39[(v36 >> 6) + 8] |= 1LL << v36;
        unint64_t v29 = (uint64_t *)(v39[6] + 16 * v36);
        uint64_t *v29 = v17;
        v29[1] = v16;
        char v28 = v34;
        *(void *)(v39[7] + 8 * v36) = v34;
        uint64_t v30 = v39[2];
        BOOL v12 = __OFADD__(v30, 1LL);
        uint64_t v31 = v30 + 1;
        if (v12) {
          goto LABEL_37;
        }
        uint64_t v9 = v39;
        v39[2] = v31;
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
    }
  }

  BOOL v12 = __OFADD__(v8++, 1LL);
  if (v12)
  {
    __break(1u);
    goto LABEL_35;
  }

  if (v8 >= v38) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v37 + 8 * v8);
  if (v13)
  {
LABEL_16:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_17;
  }

  int64_t v14 = v8 + 1;
  if (v8 + 1 >= v38) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v37 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v8 + 2;
  if (v8 + 2 >= v38) {
    goto LABEL_33;
  }
  unint64_t v13 = *(void *)(v37 + 8 * v14);
  if (v13) {
    goto LABEL_15;
  }
  int64_t v14 = v8 + 3;
  if (v8 + 3 >= v38)
  {
LABEL_33:
    uint64_t result = swift_release();
    *a2 = v9;
    return result;
  }

  unint64_t v13 = *(void *)(v37 + 8 * v14);
  if (v13)
  {
LABEL_15:
    int64_t v8 = v14;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v8 >= v38) {
      goto LABEL_33;
    }
    unint64_t v13 = *(void *)(v37 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_16;
    }
  }

id sub_100145A88(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithIdentifier:v5];

  return v6;
}

void sub_100145B0C(uint64_t a1, int a2, void *a3, uint64_t a4, void *aBlock, uint64_t a6, uint64_t a7)
{
  BOOL v12 = _Block_copy(aBlock);
  unint64_t v13 = (void *)sub_10000DDDC(a6, 48LL);
  _OWORD v13[2] = a3;
  _OWORD v13[3] = a4;
  v13[4] = v12;
  void v13[5] = a1;
  id v14 = a3;
  sub_10002FAEC();
  sub_10013EABC(a7, (uint64_t)v13);
}

uint64_t sub_100145B7C(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  &protocol witness table for String);
  v4[4] = v8;
  uint64_t v9 = dword_1001CFA44;
  swift_retain(a4);
  unint64_t v10 = (void *)swift_task_alloc(v9);
  void v4[5] = v10;
  *unint64_t v10 = v4;
  v10[1] = sub_100145C18;
  return sub_1001453FC(v8, a2);
}

uint64_t sub_100145C18()
{
  uint64_t v2 = sub_1000090CC();
  if (v0)
  {
    uint64_t v3 = sub_10014C188();
    sub_100067974();
    id v4 = (void *)v3;
  }

  else
  {
    sub_10000DE08(v2, &qword_1001CFA48, &OBJC_CLASS___AMSTreatmentArea_ptr);
    sub_10014C19C();
    sub_1000A8F80();
    id v4 = 0LL;
  }

  sub_10014BF38();

  sub_100051B08();
  return sub_1000D6D0C(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_100145D14(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_1001CFA2C;
  swift_retain(a3);
  unint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  *unint64_t v7 = v3;
  v7[1] = sub_100145D88;
  return sub_10013E58C(a1);
}

uint64_t sub_100145D88(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v8 = v4;
  sub_10014BFEC(*(void *)(v4 + 32), &v8);
  sub_100037230();
  uint64_t v5 = *(void *)(v4 + 24);
  if (v1)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    sub_1000FDC88(v5, 0LL, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  }

  else
  {
    (*(void (**)(void, void, void))(v5 + 16))(*(void *)(v4 + 24), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return sub_1000676E8((uint64_t (*)(void))v2[1]);
}

uint64_t sub_100145E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[39] = a4;
  v5[40] = v4;
  v5[37] = a2;
  v5[38] = a3;
  v5[36] = a1;
  v5[41] = swift_getObjectType(v4);
  uint64_t v6 = *(void *)(sub_10000D33C(&qword_1001CF970) - 8);
  v5[42] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v5[43] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[44] = swift_task_alloc(v8);
  v5[45] = swift_task_alloc(v8);
  uint64_t v9 = sub_10000DE00();
  v5[46] = sub_1000C9AD4(v9);
  sub_1000D6DB0();
  return sub_1000E2BD4(v10, v11, v12);
}

uint64_t sub_100145EAC()
{
  uint64_t v2 = v1;
  id v4 = (id)AMSSetLogKeyIfNeeded(v3);
  uint64_t v5 = sub_1000105E8((uint64_t)v4);
  uint64_t v7 = v6;

  uint64_t v21 = v5;
  *(void *)(v2 + 376) = v5;
  *(void *)(v2 + 384) = v7;
  if (qword_1001C7FF8 != -1) {
    swift_once(&qword_1001C7FF8, sub_1000BD81C);
  }
  uint64_t v8 = *(void *)(v2 + 320);
  uint64_t v22 = *(void *)(v2 + 288);
  Swift::Int v23 = *(uint64_t (**)(void))(v2 + 296);
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  *(void *)(v2 + 39sub_10000D3A0(v0 + 2) = v9;
  uint64_t v10 = *(void *)(sub_10002C79C() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  *(void *)(v2 + 400) = v11;
  LODWORD(v10) = *(_DWORD *)(v10 + 80);
  *(_DWORD *)(v2 + 488) = v10;
  uint64_t v12 = swift_allocObject( v9,  ((v10 + 32LL) & ~(unint64_t)v10) + 2 * v11,  v10 | 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v13 = type metadata accessor for TreatmentStoreService();
  *(void *)(v2 + 408) = v13;
  *(void *)(v2 + 40) = v13;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  sub_1000F0364(v7);
  swift_retain(v8);
  sub_10000DC34();
  sub_10000DC08();
  id v14 = sub_10000D37C((void *)(v2 + 16), v13);
  uint64_t v15 = sub_10000DC54((uint64_t)v14, v13);
  *(void *)(v2 + 7sub_10000D3A0(v0 + 2) = swift_getMetatypeMetadata(v15);
  *(void *)(v2 + 48) = v15;
  sub_10014BF30();
  sub_10014BF74(v2 + 48);
  sub_10000DC14();
  *(void *)(v2 + 104) = &type metadata for String;
  *(void *)(v2 + 80) = v21;
  *(void *)(v2 + 88) = v7;
  sub_10014BF30();
  sub_10014BF74(v2 + 80);
  sub_10014BCC8();
  sub_10000DC5C();
  sub_10000DE74();
  sub_10000D3A0((void *)(v2 + 16));
  sub_10001A21C(29LL);
  sub_1000FDD00(28LL, 0x80000001001786F0LL);
  *(void *)(v2 + 136) = sub_10000D33C(&qword_1001CBE58);
  *(void *)(v2 + 11sub_10000D3A0(v0 + 2) = v22;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 + 112);
  sub_10014BF74(v2 + 112);
  sub_10000DC4C(41LL);
  uint64_t v16 = sub_10000DC5C();
  uint64_t v17 = static os_log_type_t.info.getter(v16);
  sub_1000BD1B0(v17, v12);
  sub_10000DCFC();
  sub_100143E3C((uint64_t)v23);
  *(void *)(v2 + 4swift_weakDestroy(v0 + 16) = v18;
  unint64_t v19 = (void *)sub_10014BE9C((uint64_t)&dword_1001CF990);
  *(void *)(v2 + 424) = v19;
  *unint64_t v19 = v2;
  v19[1] = sub_100146114;
  return v23();
}

uint64_t sub_100146114()
{
  *(void *)(v0 + 43sub_10000D3A0(v0 + 2) = v1;
  swift_task_dealloc(v3);
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 320);
    uint64_t v5 = (uint64_t (*)())sub_100146480;
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 320);
    swift_release();
    uint64_t v5 = sub_100146174;
    uint64_t v4 = v6;
  }

  return sub_1000E2BD4((uint64_t)v5, v4, 0LL);
}

uint64_t sub_100146174()
{
  *(void *)(v0 + 440) = sub_100140F38();
  uint64_t v3 = (uint64_t (*)(void))((char *)&dword_1001CF9A8 + dword_1001CF9A8);
  uint64_t v1 = (void *)swift_task_alloc(unk_1001CF9AC);
  *(void *)(v0 + 448) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001461D4;
  return sub_1000105A8(v3);
}

uint64_t sub_1001461D4(char a1)
{
  uint64_t v10 = *v2;
  uint64_t v4 = v10;
  sub_10014C124(&v10);
  *(void *)(v4 + 456) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 320);
    uint64_t v7 = (uint64_t (*)())sub_1001465D4;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 320);
    swift_release();
    *(_BYTE *)(v4 + 49sub_10000D3A0(v0 + 2) = a1 & 1;
    uint64_t v7 = sub_10014624C;
    uint64_t v6 = v8;
  }

  return sub_100122ECC((uint64_t)v7, v6, 0LL);
}

uint64_t sub_10014624C()
{
  char v16 = *(_BYTE *)(v0 + 492);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v17 = *(uint64_t (**)(void))(*(void *)(v0 + 320) + 144LL);
  sub_1001128F8(*(void *)(v0 + 304), v1, &qword_1001CF970);
  sub_1001128F8(v5, v2, &qword_1001CF970);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = (v4 + v7 + v8) & ~v7;
  uint64_t v10 = v9 + v4;
  uint64_t v11 = swift_allocObject(&unk_1001B30A0, (v10 & 0xFFFFFFFFFFFFFFF8LL) + 16, v7 | 7);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v6;
  sub_100112918(v1, v11 + v8, &qword_1001CF970);
  sub_100112918(v2, v11 + v9, &qword_1001CF970);
  *(_BYTE *)(v11 + v10) = v16;
  *(void *)((v10 & 0xFFFFFFFFFFFFFFF8LL) + v11 + 8) = v15;
  sub_10002588C();
  swift_bridgeObjectRetain();
  sub_10013FCF4();
  *(void *)(v0 + 464) = v12;
  sub_10001A2D8();
  swift_release();
  uint64_t v13 = (void *)sub_10014C090((uint64_t)&unk_1001CF9B0);
  *(void *)(v0 + 47sub_10000D3A0(v0 + 2) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1001463D8;
  return v17();
}

uint64_t sub_1001463D8()
{
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  uint64_t v10 = v1;
  uint64_t v10 = (void *)*v1;
  uint64_t v4 = v10;
  sub_10014C124(&v10);
  v4[60] = v0;
  swift_task_dealloc(v5);
  if (v0) {
    return swift_task_switch(sub_100146728, v4[40], 0LL);
  }
  uint64_t v7 = v4[44];
  swift_bridgeObjectRelease();
  sub_1000292C4();
  sub_1000E2CFC();
  sub_1000E2C54();
  swift_task_dealloc(v7);
  uint64_t v8 = sub_10014C02C();
  return v9(v8);
}

#error "100146538: call analysis failed (funcsize=80)"
#error "10014668C: call analysis failed (funcsize=80)"
#error "1001467E0: call analysis failed (funcsize=80)"
void sub_10014687C( uint64_t a1@<X0>,  uint64_t a2@<X1>,  uint64_t a3@<X2>,  uint64_t a4@<X3>,  int a5@<W4>,  void *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t i;
  BOOL v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  char v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141[11];
  void v142[11];
  void __dst[12];
  void *v144;
  uint64_t v7 = v6;
  uint64_t v127 = a5;
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  uint64_t v109 = a1;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v123 = *(void *)(v10 - 8);
  uint64_t v124 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v122 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v121 = (char *)&v103 - v13;
  uint64_t v128 = type metadata accessor for Treatment(0LL);
  uint64_t v126 = *(void *)(v128 - 8);
  id v14 = __chkstk_darwin(v128);
  char v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v125 = (uint64_t)&v103 - v17;
  uint64_t v18 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  unint64_t v19 = objc_msgSend(v18, "ams_activeiTunesAccount");

  sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD670, &OBJC_CLASS___AMSBag_ptr);
  uint64_t v20 = v19;
  uint64_t v21 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  uint64_t v22 = type metadata accessor for TreatmentsCalculator();
  uint64_t inited = swift_initStackObject(v22, &v140);
  *(void *)(inited + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(inited + 24) = v21;
  uint64_t v108 = v20;
  if (v20)
  {
    uint64_t v105 = sub_10014AE48(v20);
    uint64_t v110 = v24;
  }

  else
  {
    uint64_t v105 = 0LL;
    uint64_t v110 = 0LL;
  }

  char v25 = *(void *)(a2 + 56);
  uint64_t v132 = a2 + 56;
  char v26 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v27 = -1LL;
  if (v26 < 64) {
    uint64_t v27 = ~(-1LL << v26);
  }
  char v28 = v27 & v25;
  uint64_t v133 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  unint64_t v29 = 0LL;
  unint64_t v111 = _swiftEmptyDictionarySingleton;
  uint64_t v115 = xmmword_100164220;
  uint64_t v120 = inited;
  uint64_t v134 = v16;
  if (!v28) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v136 = (v28 - 1) & v28;
  uint64_t v137 = v29;
  for (unint64_t i = __clz(__rbit64(v28)) | (v29 << 6); ; unint64_t i = __clz(__rbit64(v33)) + (v32 << 6))
  {
    uint64_t v35 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    unint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    swift_bridgeObjectRetain();
    uint64_t v135 = v36;
    sub_10013B948(v36, v37, v141);
    if (v7)
    {
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    sub_100112918((uint64_t)v141, (uint64_t)v142, (uint64_t *)&unk_1001CF9E0);
    if (!v142[2]) {
      goto LABEL_23;
    }
    memcpy(__dst, v142, 0x58uLL);
    sub_100134EF0(__dst);
    if (!v39)
    {
      sub_10014B22C(v141);
LABEL_23:
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }

    uint64_t v104 = a6;
    uint64_t v113 = v38;
    uint64_t v114 = v39;
    sub_100134388(v38, v39);
    unint64_t v41 = v40;
    uint64_t v42 = type metadata accessor for TreatmentsRandomGenerator();
    swift_initStackObject(v42, &v139);
    sub_10013A664(v41);
    unsigned __int8 v43 = sub_10013A708(10000LL);
    swift_release();
    uint64_t v112 = v43;
    int v44 = sub_10013C9F0(v135, v37, v43, v106, v107, v105, v110);
    Swift::String v45 = *(void *)(v44 + 16);
    if (v45) {
      break;
    }
    sub_10014B22C(v141);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v99 = _swiftEmptyArrayStorage;
LABEL_48:
    a6 = v104;
    sub_10013E434((uint64_t)v99);
    unint64_t v100 = v111;
    swift_isUniquelyReferenced_nonNull_native(v111);
    uint64_t v144 = v100;
    sub_100035864();
    unint64_t v111 = v144;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_24:
    char v28 = v136;
    unint64_t v29 = v137;
    if (v136) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v31 = __OFADD__(v29, 1LL);
    uint64_t v32 = v29 + 1;
    if (v31)
    {
      __break(1u);
      goto LABEL_52;
    }

    if (v32 >= v133) {
      goto LABEL_50;
    }
    uint64_t v33 = *(void *)(v132 + 8 * v32);
    if (!v33)
    {
      id v34 = v32 + 1;
      if (v32 + 1 >= v133) {
        goto LABEL_50;
      }
      uint64_t v33 = *(void *)(v132 + 8 * v34);
      if (!v33)
      {
        id v34 = v32 + 2;
        if (v32 + 2 >= v133) {
          goto LABEL_50;
        }
        uint64_t v33 = *(void *)(v132 + 8 * v34);
        if (!v33)
        {
          id v34 = v32 + 3;
          if (v32 + 3 >= v133)
          {
LABEL_50:

            swift_release();
            uint64_t v101 = v111;
            swift_bridgeObjectRelease();
            swift_setDeallocating(inited);
            uint64_t v102 = sub_100135058();
            swift_deallocClassInstance(v102, 32LL, 7LL);
            *a6 = v101;
            return;
          }

          uint64_t v33 = *(void *)(v132 + 8 * v34);
          if (!v33)
          {
            while (1)
            {
              uint64_t v32 = v34 + 1;
              if (__OFADD__(v34, 1LL)) {
                goto LABEL_55;
              }
              if (v32 >= v133) {
                goto LABEL_50;
              }
              uint64_t v33 = *(void *)(v132 + 8 * v32);
              ++v34;
              if (v33) {
                goto LABEL_18;
              }
            }
          }
        }
      }

      uint64_t v32 = v34;
    }

uint64_t sub_100147294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6)
{
  void v6[2] = a6;
  unint64_t v13 = (*(void *)(*(void *)(sub_10000D33C(&qword_1001CF970) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v14 = swift_task_alloc(v13);
  v6[3] = v14;
  uint64_t v15 = swift_task_alloc(v13);
  void v6[4] = v15;
  void v6[5] = _Block_copy(a5);
  uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)( a1,  &type metadata for String,  &protocol witness table for String);
  void v6[6] = v16;
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(a3);
    uint64_t v17 = 0LL;
  }

  else
  {
    uint64_t v17 = 1LL;
  }

  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = 1LL;
  sub_10000D5C0(v15, v17, 1LL, v18);
  if (a4)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(a4);
    uint64_t v19 = 0LL;
  }

  sub_10000D5C0(v14, v19, 1LL, v18);
  uint64_t v20 = dword_1001CF97C;
  swift_retain(a6);
  uint64_t v21 = (void *)swift_task_alloc(v20);
  v6[7] = v21;
  *uint64_t v21 = v6;
  v21[1] = sub_100147400;
  return sub_100145E24(v16, a2, v15, v14);
}

uint64_t sub_100147400()
{
  uint64_t v2 = *(uint64_t **)v1;
  uint64_t v8 = v2;
  sub_10014BFEC(v2[7], &v8);
  sub_1000090CC();
  sub_10002FAF4();
  uint64_t v3 = v2[4];
  sub_10014BF74(v2[3]);
  sub_10014BF74(v3);
  if (v0)
  {
    uint64_t v4 = sub_10014C188();
    sub_100067974();
    uint64_t v5 = (void *)v4;
  }

  else
  {
    sub_10000D33C((uint64_t *)&unk_1001CF980);
    sub_10014C19C();
    sub_1000A8F80();
    uint64_t v5 = 0LL;
  }

  uint64_t v6 = v2[3];
  sub_10014BF38();

  sub_100051B08();
  sub_1000E2C54();
  swift_task_dealloc(v6);
  return sub_1000676E8(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t sub_1001474E0()
{
  _Block_release(*(const void **)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100147524()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = (const void *)v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc(dword_1001CF92C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_1000102A8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t))((char *)&dword_1001CF928
                                                                                            + dword_1001CF928))( v2,  v3,  v4,  v5,  v7,  v6);
}

id sub_1001475B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  Class v11 = Date._bridgeToObjectiveC()().super.isa;
  id v12 = [v5 initWithEndDate:isa identifier:v10 startDate:v11];

  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
  v14(a4, v13);
  v14(a1, v13);
  return v12;
}

uint64_t sub_100147680(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000FDB88;
  return v6();
}

uint64_t sub_1001476D8()
{
  uint64_t v1 = (void *)sub_10014C11C();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000FDB88);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

uint64_t sub_100147718(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000FDB88;
  return v7();
}

uint64_t sub_100147770()
{
  uint64_t v1 = sub_100067610();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_100147790(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001CF954);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000FDB88;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001CF950 + dword_1001CF950))( a1,  v4,  v5,  v6);
}

uint64_t sub_100147814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  if (sub_1000102D4(a1, 1LL, v6) == 1)
  {
    sub_10014BB54(a1, &qword_1001C8BD0);
    uint64_t v7 = 7168LL;
  }

  else
  {
    unsigned __int8 v8 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v7 = v8 | 0x1C00LL;
  }

  uint64_t v9 = *(void *)(a3 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v9);
    uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
    uint64_t v14 = v13;
    swift_unknownObjectRelease(v9);
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v14 = 0LL;
  }

  uint64_t v15 = swift_allocObject(&unk_1001B3078, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v18[0] = 0LL;
    v18[1] = 0LL;
    uint64_t v16 = v18;
    void v18[2] = v12;
    v18[3] = v14;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return swift_task_create(v7, v16, (char *)&type metadata for () + 8, &unk_1001CF968, v15);
}

uint64_t sub_100147958()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10014797C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001CF964);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100010230;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001CF960 + dword_1001CF960))(a1, v4);
}

uint64_t sub_1001479EC()
{
  uint64_t v1 = *(void *)(sub_10000D33C(&qword_1001CF970) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  sub_1000AAE48();
  uint64_t v4 = type metadata accessor for Date(0LL);
  return sub_100051AA4(v0, ((((v3 + v2 + ((v2 + 24) & ~v2)) & ~v2) + v3) & 0xFFFFFFFFFFFFFFF8LL) + 16, v2 | 7);
}

void sub_100147A88(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_10000D33C(&qword_1001CF970) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10014687C( a1,  *(void *)(v2 + 16),  v2 + ((v6 + 24) & ~v6),  v2 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6),  *(unsigned __int8 *)(v2 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6) + *(void *)(v5 + 64)),  a2);
}

uint64_t sub_100147B14(uint64_t a1)
{
  return sub_10013F8DC(a1, v1);
}

unint64_t sub_100147B1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000D33C(&qword_1001C9DC8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1001128F8(v7, (uint64_t)&v16, &qword_1001CFB00);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100147C50(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10000DA58(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100147C50(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100147CB4(a1, a2, v5);
}

unint64_t sub_100147CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_100147DF8(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 40LL);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v10 = v9;
  Hasher.init(_seed:)(v36, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v36, v8, v10);
  Swift::Int v11 = Hasher._finalize()();
  swift_bridgeObjectRelease(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v31 = a2;
    sub_1001494A0(v31, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v32 = *v3;
    *uint64_t v3 = v36[0];
    swift_bridgeObjectRelease(v32);
    *a1 = v31;
    return 1LL;
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v6 + 48) + 8 * v13));
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2LL);
  }

  else
  {
    uint64_t v20 = v18;
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0LL);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      uint64_t v22 = ~v12;
      do
      {
        unint64_t v13 = (v13 + 1) & v22;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v6 + 48) + 8 * v13));
        uint64_t v16 = v24;
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v23 == v25 && v16 == v26) {
          goto LABEL_16;
        }
        uint64_t v28 = v26;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v16, v25, v26, 0LL);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v28);
      }

      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  id v34 = *(void **)(*(void *)(*v3 + 48LL) + 8 * v13);
  *a1 = v34;
  id v35 = v34;
  return 0LL;
}

uint64_t sub_100148020(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v25, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v25, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_1000F7978();
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    unint64_t v13 = (uint64_t *)(v12 + 16 * v10);
    uint64_t v14 = v13[1];
    BOOL v15 = *v13 == a2 && v14 == a3;
    if (v15 || (sub_1001232C0(*v13, v14) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      sub_100020AB8();
      uint64_t v16 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v17 = v16[1];
      *a1 = *v16;
      a1[1] = v17;
      swift_bridgeObjectRetain(v17);
      return 0LL;
    }

    uint64_t v19 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v19;
      sub_1000F7978();
      if ((v20 & 1) == 0) {
        break;
      }
      char v21 = (uint64_t *)(v12 + 16 * v10);
      uint64_t v22 = v21[1];
      BOOL v23 = *v21 == a2 && v22 == a3;
      if (v23 || (sub_1001232C0(*v21, v22) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  sub_100020AB8();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v25[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_10000DF10();
  sub_1001496CC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v25[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100148190()
{
  uint64_t v37 = v3;
  uint64_t v38 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  type metadata accessor for Treatment(0LL);
  sub_10013A5B0();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v33 = (uint64_t)&v31 - v13;
  id v34 = v1;
  uint64_t v14 = *v1;
  Hasher.init(_seed:)(v36, *(void *)(*v1 + 40LL));
  uint64_t v35 = v0;
  BOOL v15 = (void *)(v6 + *(int *)(v0 + 20));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain();
  String.hash(into:)(v36, v16, v17);
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1LL << *(_BYTE *)(v14 + 32);
  unint64_t v20 = v18 & ~v19;
  if (((*(void *)(v14 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) != 0)
  {
    uint64_t v32 = v8;
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(v2 + 72);
    while (1)
    {
      sub_100112854(*(void *)(v14 + 48) + v22 * v20, (uint64_t)v12, type metadata accessor for Treatment);
      if ((static Date.== infix(_:_:)(v12, v6) & 1) != 0)
      {
        BOOL v23 = &v12[*(int *)(v35 + 20)];
        uint64_t v24 = *((void *)v23 + 1);
        uint64_t v25 = v15[1];
        BOOL v26 = *(void *)v23 == *v15 && v24 == v25;
        if ((v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v23, v24, *v15, v25, 0LL) & 1) != 0)
          && (static Date.== infix(_:_:)(&v12[*(int *)(v35 + 24)], v6 + *(int *)(v35 + 24)) & 1) != 0)
        {
          break;
        }
      }

      sub_10014C148();
      unint64_t v20 = (v20 + 1) & v21;
      if (((*(void *)(v14 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v20) & 1) == 0)
      {
        sub_10000DE74();
        uint64_t v8 = v32;
        goto LABEL_13;
      }
    }

    sub_10014C148();
    sub_10000DE74();
    sub_100019EC0(v6, type metadata accessor for Treatment);
    sub_100112854(*(void *)(*v34 + 48LL) + v22 * v20, v32, type metadata accessor for Treatment);
    return 0LL;
  }

  else
  {
    sub_10000DE74();
LABEL_13:
    uint64_t v27 = v34;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
    uint64_t v29 = v33;
    sub_100112854(v6, v33, type metadata accessor for Treatment);
    v36[0] = *v27;
    *uint64_t v27 = 0x8000000000000000LL;
    sub_100149864(v29, v20, isUniquelyReferenced_nonNull_native);
    *uint64_t v27 = v36[0];
    swift_bridgeObjectRelease();
    sub_10014B27C(v6, v8);
    return 1LL;
  }

uint64_t sub_1001483E0(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      uint64_t v30 = v9;
      uint64_t v10 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_100148678(v7, result + 1);
    Swift::Int v31 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v28 = v24 + 1;
      id v29 = v8;
      sub_100149188(v28);
      uint64_t v25 = v31;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_100149420((uint64_t)v8, v25);
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
    {
      sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)(v15, a2);

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = (Swift::Int)v20;
        id v21 = v20;
        return 0LL;
      }

      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)(v18, a2);

        if ((v19 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v31 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_100149A84((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }

  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1LL;
}

Swift::Int sub_100148678(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  sub_10000D33C(&qword_1001CFA00);
  uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
  uint64_t v22 = v4;
  __CocoaSet.makeIterator()(a1);
  uint64_t v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_16:
    swift_release();
    return v4;
  }

  uint64_t v6 = v5;
  uint64_t v7 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
  while (1)
  {
    uint64_t v20 = v6;
    swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
    uint64_t v4 = v22;
    unint64_t v8 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v8)
    {
      sub_100149188(v8 + 1);
      uint64_t v4 = v22;
    }

    uint64_t v9 = v21;
    Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
    uint64_t v11 = v4 + 56;
    uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v13 = result & ~v12;
    unint64_t v14 = v13 >> 6;
    if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) == 0) {
      break;
    }
    unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_15:
    *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
    ++*(void *)(v4 + 16);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (!v6) {
      goto LABEL_16;
    }
  }

  char v16 = 0;
  unint64_t v17 = (unint64_t)(63 - v12) >> 6;
  while (++v14 != v17 || (v16 & 1) == 0)
  {
    BOOL v18 = v14 == v17;
    if (v14 == v17) {
      unint64_t v14 = 0LL;
    }
    v16 |= v18;
    uint64_t v19 = *(void *)(v11 + 8 * v14);
    if (v19 != -1)
    {
      unint64_t v15 = __clz(__rbit64(~v19)) + (v14 << 6);
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10014885C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C((uint64_t *)&unk_1001CFB90);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v33 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v35 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v34 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain(v3);
    int64_t v12 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
    {
      uint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      uint64_t v19 = *(void *)(v6 + 40);
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v22 = v21;
      Hasher.init(_seed:)(v36, v19);
      String.hash(into:)(v36, v20, v22);
      Swift::Int v23 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease(v22);
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v25 = v23 & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6))) == 0)
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          BOOL v30 = v26 == v29;
          if (v26 == v29) {
            unint64_t v26 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v10 + 8 * v26);
          if (v31 != -1)
          {
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v27 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v10 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
      *(void *)(*(void *)(v6 + 48) + 8 * v27) = v18;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v15 = v12 + 1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_41;
      }
      if (v15 >= v34) {
        goto LABEL_35;
      }
      unint64_t v16 = v35[v15];
      ++v12;
      if (!v16)
      {
        int64_t v12 = v15 + 1;
        if (v15 + 1 >= v34) {
          goto LABEL_35;
        }
        unint64_t v16 = v35[v12];
        if (!v16)
        {
          int64_t v12 = v15 + 2;
          if (v15 + 2 >= v34) {
            goto LABEL_35;
          }
          unint64_t v16 = v35[v12];
          if (!v16)
          {
            int64_t v17 = v15 + 3;
            if (v17 >= v34)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v33;
              uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
              if (v32 > 63) {
                sub_100149C08(0LL, (unint64_t)(v32 + 63) >> 6, v35);
              }
              else {
                void *v35 = -1LL << v32;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v16 = v35[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v12 = v17 + 1;
                if (__OFADD__(v17, 1LL)) {
                  goto LABEL_42;
                }
                if (v12 >= v34) {
                  goto LABEL_35;
                }
                unint64_t v16 = v35[v12];
                ++v17;
                if (v16) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v12 = v17;
          }
        }
      }

Swift::Int sub_100148B68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C(&qword_1001CFB50);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v14 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v20, v21);
      Swift::Int result = Hasher._finalize()();
      uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v22) >> 6;
        while (++v24 != v27 || (v26 & 1) == 0)
        {
          BOOL v28 = v24 == v27;
          if (v24 == v27) {
            unint64_t v24 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v11 + 8 * v24);
          if (v29 != -1)
          {
            unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
      BOOL v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
      void *v30 = v20;
      v30[1] = v21;
      ++*(void *)(v6 + 16);
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1LL)) {
        goto LABEL_41;
      }
      if (v16 >= v10) {
        goto LABEL_35;
      }
      unint64_t v17 = v33[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v10) {
          goto LABEL_35;
        }
        unint64_t v17 = v33[v13];
        if (!v17)
        {
          int64_t v13 = v16 + 2;
          if (v16 + 2 >= v10) {
            goto LABEL_35;
          }
          unint64_t v17 = v33[v13];
          if (!v17)
          {
            int64_t v18 = v16 + 3;
            if (v18 >= v10)
            {
LABEL_35:
              swift_release(v3);
              uint64_t v2 = v32;
              uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
              if (v31 > 63) {
                sub_100149C08(0LL, (unint64_t)(v31 + 63) >> 6, v33);
              }
              else {
                *uint64_t v33 = -1LL << v31;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v17 = v33[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_42;
                }
                if (v13 >= v10) {
                  goto LABEL_35;
                }
                unint64_t v17 = v33[v13];
                ++v18;
                if (v17) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v18;
          }
        }
      }

Swift::Int sub_100148E40(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Treatment(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D33C(&qword_1001CFB48);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_38;
  }
  uint64_t v33 = v2;
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v35 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  Swift::Int result = swift_retain(v7);
  int64_t v16 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = *(void *)(v36 + 72);
    sub_10014B27C(*(void *)(v7 + 48) + v22 * i, (uint64_t)v6);
    Hasher.init(_seed:)(v37, *(void *)(v9 + 40));
    String.hash(into:)(v37, *(void *)&v6[*(int *)(v4 + 20)], *(void *)&v6[*(int *)(v4 + 20) + 8]);
    Swift::Int result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    Swift::Int result = sub_10014B27C((uint64_t)v6, *(void *)(v9 + 48) + v26 * v22);
    ++*(void *)(v9 + 16);
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      goto LABEL_40;
    }
    if (v19 >= v34) {
      goto LABEL_34;
    }
    unint64_t v20 = v35[v19];
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = v35[v16];
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v34) {
          goto LABEL_34;
        }
        unint64_t v20 = v35[v16];
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_100149188(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C(&qword_1001CFA00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_10;
    }
LABEL_9:
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
    {
      uint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * i);
      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v21 = -1LL << *(_BYTE *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) == 0)
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v21) >> 6;
        while (++v23 != v26 || (v25 & 1) == 0)
        {
          BOOL v27 = v23 == v26;
          if (v23 == v26) {
            unint64_t v23 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v23);
          if (v28 != -1)
          {
            unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
            goto LABEL_33;
          }
        }

        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        return result;
      }

      unint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
      *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
      *(void *)(*(void *)(v6 + 48) + 8 * v24) = v20;
      ++*(void *)(v6 + 16);
      if (v10) {
        goto LABEL_9;
      }
LABEL_10:
      int64_t v17 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        goto LABEL_41;
      }
      if (v17 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = v8[v17];
      ++v14;
      if (!v18)
      {
        int64_t v14 = v17 + 1;
        if (v17 + 1 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = v8[v14];
        if (!v18)
        {
          int64_t v14 = v17 + 2;
          if (v17 + 2 >= v11) {
            goto LABEL_35;
          }
          unint64_t v18 = v8[v14];
          if (!v18)
          {
            int64_t v19 = v17 + 3;
            if (v19 >= v11)
            {
LABEL_35:
              swift_release();
              uint64_t v2 = v30;
              uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
              if (v29 > 63) {
                sub_100149C08(0LL, (unint64_t)(v29 + 63) >> 6, (void *)(v3 + 56));
              }
              else {
                *uint64_t v8 = -1LL << v29;
              }
              *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v14 = v19 + 1;
                if (__OFADD__(v19, 1LL)) {
                  goto LABEL_42;
                }
                if (v14 >= v11) {
                  goto LABEL_35;
                }
                unint64_t v18 = v8[v14];
                ++v19;
                if (v18) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v14 = v19;
          }
        }
      }

unint64_t sub_100149420(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

id sub_1001494A0(id result, unint64_t a2, char a3)
{
  Swift::Int v4 = (uint64_t *)v3;
  id v6 = result;
  unint64_t v7 = *(void *)(*(void *)v3 + 16LL);
  unint64_t v8 = *(void *)(*(void *)v3 + 24LL);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10014885C(v9);
  }

  else
  {
    if (v8 > v7)
    {
      unint64_t result = sub_100149C24();
LABEL_22:
      uint64_t v31 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
      *(void *)(*(void *)(v31 + 48) + 8 * asub_10000D3A0(v0 + 2) = v6;
      uint64_t v32 = *(void *)(v31 + 16);
      BOOL v33 = __OFADD__(v32, 1LL);
      uint64_t v34 = v32 + 1;
      if (!v33)
      {
        *(void *)(v31 + swift_weakDestroy(v0 + 16) = v34;
        return result;
      }

      __break(1u);
      goto LABEL_25;
    }

    sub_10014A340(v9);
  }

  uint64_t v10 = *(void *)v3;
  uint64_t v11 = *(void *)(*(void *)v3 + 40LL);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v14 = v13;
  Hasher.init(_seed:)(v35, v11);
  String.hash(into:)(v35, v12, v14);
  Swift::Int v3 = Hasher._finalize()();
  unint64_t result = (id)swift_bridgeObjectRelease(v14);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v10 + 48) + 8 * a2));
  Swift::Int v3 = v17;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2LL);
    goto LABEL_26;
  }

  uint64_t v21 = v19;
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0LL);
  swift_bridgeObjectRelease(v3);
  unint64_t result = (id)swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    uint64_t v23 = ~v15;
    do
    {
      a2 = (a2 + 1) & v23;
      if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v10 + 48) + 8 * a2));
      Swift::Int v3 = v25;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      if (v24 == v26 && v3 == v27) {
        goto LABEL_25;
      }
      uint64_t v29 = v27;
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v3, v26, v27, 0LL);
      swift_bridgeObjectRelease(v3);
      unint64_t result = (id)swift_bridgeObjectRelease(v29);
    }

    while ((v30 & 1) == 0);
  }

uint64_t sub_1001496CC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100148B68(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_100149DCC();
      goto LABEL_22;
    }

    sub_10014A618(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_100149864(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for Treatment(0LL);
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100148E40(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100149F78();
      goto LABEL_18;
    }

    sub_10014A8C0(v12);
  }

  uint64_t v13 = *v3;
  Hasher.init(_seed:)(v31, *(void *)(*v3 + 40));
  uint64_t v14 = (void *)(a1 + *(int *)(v7 + 20));
  String.hash(into:)(v31, *v14, v14[1]);
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v15 & ~v16;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v17 = ~v16;
    uint64_t v18 = *(void *)(v30 + 72);
    do
    {
      sub_100112854(*(void *)(v13 + 48) + v18 * a2, (uint64_t)v9, type metadata accessor for Treatment);
      if ((static Date.== infix(_:_:)(v9, a1) & 1) != 0)
      {
        uint64_t v19 = &v9[*(int *)(v7 + 20)];
        uint64_t v20 = *((void *)v19 + 1);
        uint64_t v21 = v14[1];
        BOOL v22 = *(void *)v19 == *v14 && v20 == v21;
        if ((v22 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v19, v20, *v14, v21, 0LL) & 1) != 0)
          && (static Date.== infix(_:_:)(&v9[*(int *)(v7 + 24)], a1 + *(int *)(v7 + 24)) & 1) != 0)
        {
          goto LABEL_21;
        }
      }

      sub_100019EC0((uint64_t)v9, type metadata accessor for Treatment);
      a2 = (a2 + 1) & v17;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_100149A84(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100149188(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_10014A198();
      goto LABEL_14;
    }

    sub_10014ABD4(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10000DAA0(0LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_100149C08(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }

  return result;
}

id sub_100149C24()
{
  uint64_t v1 = v0;
  sub_10000D33C((uint64_t *)&unk_1001CFB90);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void *sub_100149DCC()
{
  uint64_t v1 = v0;
  sub_10000D33C(&qword_1001CFB50);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)sub_100037230();
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *uint64_t v22 = *v20;
    v22[1] = v21;
    id result = (void *)swift_bridgeObjectRetain(v21);
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

void *sub_100149F78()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Treatment(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000D33C(&qword_1001CFB48);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v1 = v8;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  if (!v16) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v18 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v18 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    unint64_t v23 = *(void *)(v3 + 72) * i;
    sub_100112854(*(void *)(v6 + 48) + v23, (uint64_t)v5, type metadata accessor for Treatment);
    id result = (void *)sub_10014B27C((uint64_t)v5, *(void *)(v8 + 48) + v23);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v20 >= v17) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v13;
    if (!v21)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v13);
      if (!v21)
      {
        int64_t v13 = v20 + 2;
        if (v20 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v13);
        if (!v21) {
          break;
        }
      }
    }

id sub_10014A198()
{
  uint64_t v1 = v0;
  sub_10000D33C(&qword_1001CFA00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1LL;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    int64_t v20 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    *(void *)(*(void *)(v4 + 48) + 8 * i) = v20;
    id result = v20;
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_10014A340(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C((uint64_t *)&unk_1001CFB90);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  BOOL v33 = v2;
  uint64_t v34 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v35 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain(v3);
  int64_t v12 = 0LL;
  if (!v9) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + 8 * i);
    uint64_t v19 = *(void *)(v6 + 40);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v22 = v21;
    Hasher.init(_seed:)(v36, v19);
    id v23 = v18;
    String.hash(into:)(v36, v20, v22);
    Swift::Int v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease(v22);
    uint64_t v25 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v10 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v28 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v10 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v28;
    *(void *)(*(void *)(v6 + 48) + 8 * v28) = v23;
    ++*(void *)(v6 + 16);
    if (v9) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= v35) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v34 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v35) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v34 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v35) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v34 + 8 * v12);
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_10014A618(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C(&qword_1001CFB50);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  BOOL v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v21);
    String.hash(into:)(v33, v20, v21);
    Swift::Int result = Hasher._finalize()();
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    unint64_t v30 = (void *)(*(void *)(v6 + 48) + 16 * v25);
    void *v30 = v20;
    v30[1] = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= v32) {
      goto LABEL_35;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_35;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_35;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_10014A8C0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Treatment(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_10000D33C(&qword_1001CFB48);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_36:
    *uint64_t v2 = v9;
    return result;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  int64_t v32 = v2;
  uint64_t v33 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  if (!v13) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v17 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = *(void *)(v35 + 72);
    sub_100112854(*(void *)(v7 + 48) + v22 * i, (uint64_t)v6, type metadata accessor for Treatment);
    Hasher.init(_seed:)(v36, *(void *)(v9 + 40));
    String.hash(into:)(v36, *(void *)&v6[*(int *)(v4 + 20)], *(void *)&v6[*(int *)(v4 + 20) + 8]);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1LL << *(_BYTE *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) == 0)
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
        if (v30 != -1)
        {
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_32;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_32:
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    uint64_t result = sub_10014B27C((uint64_t)v6, *(void *)(v9 + 48) + v26 * v22);
    ++*(void *)(v9 + 16);
    if (v13) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      goto LABEL_38;
    }
    if (v19 >= v34) {
      goto LABEL_34;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v34) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v34) {
          goto LABEL_34;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_10014ABD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_10000D33C(&qword_1001CFA00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain(v3);
  int64_t v14 = 0LL;
  if (!v10) {
    goto LABEL_10;
  }
LABEL_9:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    Swift::Int v20 = *(void *)(v6 + 40);
    id v21 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    uint64_t result = NSObject._rawHashValue(seed:)(v20);
    uint64_t v22 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_33;
        }
      }

      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_33:
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    *(void *)(*(void *)(v6 + 48) + 8 * v25) = v21;
    ++*(void *)(v6 + 16);
    if (v10) {
      goto LABEL_9;
    }
LABEL_10:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_39;
    }
    if (v17 >= v11) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v11) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v11) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_10014AE48(void *a1)
{
  id v2 = objc_msgSend(a1, "ams_storefront");
  sub_10008E4EC();
  if (!v1) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_10014AEB0(uint64_t a1, void (*a2)(void))
{
}

void sub_10014AEC0(char *a1)
{
}

uint64_t sub_10014AEC8(uint64_t a1, uint64_t a2, void *a3)
{
  void v9[3] = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CACD0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  v9[4] = &protocol witness table for OS_dispatch_queue;
  v9[0] = a3;
  uint64_t v6 = Promise.__allocating_init()(a3);
  uint64_t v7 = (void *)swift_allocObject(&unk_1001B3898, 40LL, 7LL);
  void v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  swift_retain_n(v6, 2LL);
  swift_retain(a2);
  Promise.then(perform:orCatchError:on:)(sub_10014B9D0, v6, sub_10014BA1C, v7, v9);
  swift_release(v6);
  swift_release(v7);
  sub_10000D3A0(v9);
  return v6;
}

int64_t sub_10014AFB8(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    unint64_t v10 = *(void *)(v6 + 8 * v9);
    if (v10) {
      return __clz(__rbit64(v10)) + (v9 << 6);
    }
    unint64_t v11 = (unint64_t)(result + 63) >> 6;
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      unint64_t v10 = *(void *)(v6 + 8 * v9);
      if (v10) {
        return __clz(__rbit64(v10)) + (v9 << 6);
      }
      while (v5 + 3 < v11)
      {
        unint64_t v10 = *(void *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t sub_10014B0A0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  uint64_t v2 = 64LL;
  for (uint64_t i = 9LL; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64LL;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_10014B120(uint64_t *a1)
{
}

uint64_t sub_10014B140(double *a1)
{
  return sub_10013FBC4(*a1);
}

uint64_t sub_10014B14C(uint64_t *a1)
{
  return sub_10013FC04(*a1);
}

void sub_10014B154(uint64_t *a1)
{
}

void sub_10014B174(uint64_t *a1)
{
}

void sub_10014B194(uint64_t *a1)
{
}

uint64_t sub_10014B1B4()
{
  return sub_10014BB10(&qword_1001CF9C0);
}

uint64_t sub_10014B1C0(uint64_t a1)
{
  return sub_10014BAD0(a1, &qword_1001CF9C0, (uint64_t (*)(uint64_t))sub_10014B194);
}

uint64_t sub_10014B1D4()
{
  return sub_10014BB10(&qword_1001CF9C0);
}

void sub_10014B1E0(uint64_t a1)
{
}

uint64_t sub_10014B1F0()
{
  return sub_10014B560((uint64_t (*)(void, void, void, void, void, void))sub_100140798);
}

uint64_t sub_10014B1FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014B20C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10014B214()
{
  return sub_10014BD3C((void (*)(void))&_swift_release);
}

void sub_10014B220()
{
}

uint64_t *sub_10014B22C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10014B27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Treatment(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10014B2C0()
{
  unint64_t result = qword_1001CF9F8;
  if (!qword_1001CF9F8)
  {
    uint64_t v1 = sub_10000DAA0(255LL, &qword_1001CF9F0, &OBJC_CLASS___AMSTreatment_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001CF9F8);
  }

  return result;
}

uint64_t sub_10014B310(uint64_t a1)
{
  return sub_10013FA38(a1, v1);
}

uint64_t sub_10014B318(char *a1)
{
  return sub_10013FC7C(*a1);
}

uint64_t sub_10014B320()
{
  return sub_10014BB10(&qword_1001CFA08);
}

uint64_t sub_10014B32C()
{
  uint64_t v0 = (char *)sub_100092CFC();
  return sub_10014B318(v0);
}

uint64_t sub_10014B358()
{
  return sub_10014BB10(&qword_1001CFA08);
}

void sub_10014B364(uint64_t a1)
{
}

void sub_10014B370(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_10014B3B4(uint64_t a1)
{
  return sub_10013F0B4(a1, v1);
}

uint64_t sub_10014B3BC()
{
  return sub_10014BB10(&qword_1001CFA10);
}

uint64_t sub_10014B3C8()
{
  return sub_10013FB94();
}

uint64_t sub_10014B3F8()
{
  return sub_10014BB10(&qword_1001CFA10);
}

void sub_10014B404(uint64_t a1)
{
}

uint64_t sub_10014B410()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10014B43C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  char v5 = (void *)swift_task_alloc(dword_1001CFA1C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *char v5 = v1;
  v5[1] = sub_1000FDB88;
  return ((uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1001CFA18 + dword_1001CFA18))(v2, v3, v4);
}

uint64_t sub_10014B4AC()
{
  uint64_t v1 = (void *)sub_10014C11C();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000FDB88);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

uint64_t sub_10014B4F0()
{
  return sub_10014564C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10014B4F8(uint64_t a1)
{
  return sub_10013F780(a1, v1);
}

uint64_t sub_10014B500()
{
  return sub_10014BB10(&qword_1001CFA70);
}

uint64_t sub_10014B50C(uint64_t a1)
{
  return sub_10014BAD0(a1, &qword_1001CFA70, (uint64_t (*)(uint64_t))sub_10014B174);
}

uint64_t sub_10014B520()
{
  return sub_10014BB10(&qword_1001CFA70);
}

void sub_10014B52C(uint64_t a1)
{
}

uint64_t sub_10014B538@<X0>(void *a1@<X8>)
{
  return sub_1001456F8(*(void *)(v1 + 16), a1);
}

uint64_t sub_10014B554()
{
  return sub_10014B560((uint64_t (*)(void, void, void, void, void, void))sub_1001404B4);
}

uint64_t sub_10014B560(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_10014B574()
{
  return sub_10014BD3C((void (*)(void))&_swift_release);
}

void sub_10014B580()
{
}

uint64_t sub_10014B590()
{
  uint64_t v1 = (void *)sub_10014C11C();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000FDB88);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

void sub_10014B5D4()
{
}

uint64_t sub_10014B604(uint64_t a1)
{
  return sub_10013F624(a1, v1);
}

uint64_t sub_10014B60C()
{
  return sub_10014BB10(&qword_1001CFAB8);
}

uint64_t sub_10014B618(uint64_t a1)
{
  return sub_10014BAD0(a1, &qword_1001CFAB8, (uint64_t (*)(uint64_t))sub_10014B154);
}

uint64_t sub_10014B62C()
{
  return sub_10014BB10(&qword_1001CFAB8);
}

void sub_10014B638(uint64_t a1)
{
}

uint64_t sub_10014B644()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10014B664@<X0>(void *a1@<X8>)
{
  return sub_100145050(*(void *)(v1 + 16), (uint64_t (*)(uint64_t, uint64_t))sub_10013BE60, a1);
}

uint64_t sub_10014B688()
{
  return sub_10014B560((uint64_t (*)(void, void, void, void, void, void))sub_1001401D0);
}

uint64_t sub_10014B694()
{
  return sub_10014BD3C((void (*)(void))&_swift_release);
}

void sub_10014B6A0()
{
}

uint64_t sub_10014B6B0()
{
  _Block_release(*(const void **)(v0 + 32));
  sub_1000679A8();
  uint64_t v1 = sub_100067610();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10014B6D8()
{
  uint64_t v1 = (void *)sub_10014C11C();
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000FDB88);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

uint64_t sub_10014B71C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10014B740()
{
}

uint64_t sub_10014B770@<X0>(void *a1@<X8>)
{
  return sub_100145050(*(void *)(v1 + 16), (uint64_t (*)(uint64_t, uint64_t))sub_10013BD54, a1);
}

uint64_t sub_10014B790()
{
  return sub_10014BD3C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10014B79C(_BYTE *a1)
{
}

uint64_t sub_10014B7A8(uint64_t *a1)
{
  return sub_10014268C(a1, v1);
}

uint64_t sub_10014B7B4(uint64_t a1)
{
  return sub_100143584( a1,  v1 + v4,  *(void *)(v1 + v3),  *(void *)(v1 + v5),  *(void *)(v1 + v6),  *(void *)(v1 + v6 + 8));
}

uint64_t sub_10014B7F0()
{
  return sub_100140F28(0LL);
}

uint64_t sub_10014B7FC()
{
  uint64_t v2 = v1 | 7;
  unint64_t v5 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10014C160(v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_100051AA4(v0, v5 + 16, v2);
}

uint64_t sub_10014B870()
{
  return sub_100143AB4( v0 + v1,  *(void *)(v0 + v2),  *(void *)(v0 + v3),  *(void *)(v0 + v4),  *(void *)(v0 + v4 + 8));
}

uint64_t sub_10014B89C()
{
  uint64_t v0 = sub_100067610();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10014B8C8()
{
  return sub_1001427D0(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10014B8D4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10014B900(uint64_t a1)
{
  return sub_10014288C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10014B920()
{
  if (*(void *)(v0 + 48)) {
    swift_release();
  }
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10014B95C()
{
  return sub_10014B560((uint64_t (*)(void, void, void, void, void, void))sub_10013FEE4);
}

uint64_t sub_10014B968()
{
  return sub_10014BD3C((void (*)(void))&_swift_release);
}

void sub_10014B974()
{
}

uint64_t sub_10014B980()
{
  return sub_10014C06C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10014B98C(uint64_t *a1@<X0>, char *a2@<X8>)
{
}

uint64_t sub_10014B9A8()
{
  return sub_10014C06C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_10014B9B4(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
}

void sub_10014B9D0(char *a1)
{
}

uint64_t sub_10014B9D8()
{
  return sub_10014BD3C((void (*)(void))&_swift_release);
}

uint64_t sub_10014B9E4(void (*a1)(void), uint64_t a2)
{
  return sub_100051AC0(v2, a2, 7LL);
}

void sub_10014BA1C(uint64_t a1)
{
  sub_100063034(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *__return_ptr))(v1 + 24));
}

uint64_t sub_10014BA28(uint64_t a1)
{
  return sub_10013F36C(a1, v1);
}

uint64_t sub_10014BA30()
{
  return sub_10014BB10(&qword_1001CFB60);
}

uint64_t sub_10014BA3C(uint64_t a1)
{
  return sub_10014BAD0(a1, &qword_1001CFB60, (uint64_t (*)(uint64_t))sub_10014B140);
}

uint64_t sub_10014BA50()
{
  return sub_10014BB10(&qword_1001CFB60);
}

void sub_10014BA5C(uint64_t a1)
{
}

uint64_t sub_10014BA68(uint64_t a1)
{
  return sub_10013F4C8(a1, v1);
}

uint64_t sub_10014BA70()
{
  return sub_10014BB10(&qword_1001CFB70);
}

uint64_t sub_10014BA7C(uint64_t a1)
{
  return sub_10014BAD0(a1, &qword_1001CFB70, (uint64_t (*)(uint64_t))sub_10014B14C);
}

uint64_t sub_10014BA90()
{
  return sub_10014BB10(&qword_1001CFB70);
}

void sub_10014BA9C(uint64_t a1)
{
}

uint64_t sub_10014BAA8(uint64_t a1)
{
  return sub_10013F210(a1, v1);
}

uint64_t sub_10014BAB0()
{
  return sub_10014BB10((uint64_t *)&unk_1001CFB80);
}

uint64_t sub_10014BABC(uint64_t a1)
{
  return sub_10014BAD0(a1, (uint64_t *)&unk_1001CFB80, (uint64_t (*)(uint64_t))sub_10014B120);
}

uint64_t sub_10014BAD0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3 = sub_100092CFC();
  return a3(v3);
}

uint64_t sub_10014BB04()
{
  return sub_10014BB10((uint64_t *)&unk_1001CFB80);
}

uint64_t sub_10014BB10(uint64_t *a1)
{
  uint64_t v4 = v2 + v3;
  uint64_t v6 = v5 | 7;
  sub_10014C160(v7);
  return sub_100051AC0(v1, v4, v6);
}

void sub_10014BB48(uint64_t a1)
{
}

void sub_10014BB54(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1000FDD40(a1, a2);
  sub_10001A418(v2);
  sub_100009044();
}

id sub_10014BB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[14] = a1;
  a6[15] = a2;
  a6[16] = a4;
  a6[17] = a5;
  a6[18] = a3;
  a6[19] = 0LL;
  v13.receiver = a6;
  v13.super_class = (Class)type metadata accessor for TreatmentStoreService();
  return objc_msgSendSuper2(&v13, "init");
}

  ;
}

uint64_t sub_10014BC74()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 32);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 40) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10014BC94()
{
  return swift_errorRelease(v0);
}

void sub_10014BCC8()
{
  v0._uint64_t countAndFlagsBits = 93LL;
  v0._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t sub_10014BCD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  *(void *)(v2 + 384) = v4;
  LODWORD(sub_1000FDD40(v2, v3) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v2 + 424) = v3;
  return swift_allocObject( v1,  ((v3 + 32LL) & ~(unint64_t)v3) + 2 * v4,  v3 | 7LL);
}

uint64_t sub_10014BD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_10014BD18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t sub_10014BD3C(void (*a1)(void))
{
  return sub_10014B9E4(a1, 40LL);
}

uint64_t sub_10014BD44@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  v2[21] = a1;
  v2[18] = a2;
  v2[19] = v3;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 + 18);
}

uint64_t sub_10014BD60()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 408);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 4swift_weakDestroy(v0 + 16) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_10014BD84()
{
  return ((uint64_t (*)(void))withCheckedThrowingContinuation<A>(isolation:function:_:))();
}

uint64_t sub_10014BD90()
{
  return ((uint64_t (*)(void))withCheckedThrowingContinuation<A>(isolation:function:_:))();
}

uint64_t sub_10014BD9C(void *a1)
{
  uint64_t v2 = sub_10000D37C(a1, v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

void sub_10014BDB8()
{
}

uint64_t sub_10014BDC4(uint64_t a1)
{
  v2[49] = a1;
  v2[22] = a1;
  v2[19] = v1;
  return swift_bridgeObjectRetain_n(v3, 2LL);
}

void sub_10014BDE4(uint64_t a1)
{
}

uint64_t sub_10014BDEC()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(31LL, 1LL);
}

uint64_t sub_10014BE14(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  *(void *)(v2 + 23sub_10000D3A0(v0 + 2) = v4;
  *(void *)(v2 + 208) = v5;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_10014BE30()
{
  return swift_allocObject(v0, v1, v2);
}

uint64_t sub_10014BE40(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_10014BE50@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  v2[14] = a1;
  v2[11] = a2;
  v2[12] = v3;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 + 11);
}

uint64_t sub_10014BE6C(uint64_t a1)
{
  *(void *)(v1 + 264) = a1;
  *(void *)(v1 + 240) = v2;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 + 240);
}

uint64_t sub_10014BE80(uint64_t a1)
{
  return swift_dynamicCast(v2, v1, v3, a1, 0LL);
}

uint64_t sub_10014BE9C@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_10014BEB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 144) = a1;
  *(void *)(v10 + 120) = a10;
  return swift_bridgeObjectRetain(a10);
}

  ;
}

void sub_10014BEFC()
{
}

uint64_t sub_10014BF08()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (uint64_t *)(v1 - 8);
  *uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(v2 + 40);
  *uint64_t v3 = *v0;
  return swift_task_dealloc(v4);
}

uint64_t sub_10014BF30()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

uint64_t sub_10014BF38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v0, v1);
}

id sub_10014BF4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v12 + 176) = v11;
  *(void *)(v12 + 200) = a11;
  return v11;
}

uint64_t sub_10014BF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_dynamicCast(a1, a2, a3, v3, 0LL);
}

void sub_10014BF6C(uint64_t a1)
{
}

void sub_10014BF74(uint64_t a1)
{
}

  ;
}

uint64_t sub_10014BF94()
{
  return swift_errorRelease(*(void *)(v0 + 272));
}

uint64_t sub_10014BFA4(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_10014BFB0()
{
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v0);
}

uint64_t sub_10014BFBC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 368));
}

void sub_10014BFCC( uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  *(void *)(v7 + 40) = a1;
  *(void *)(v7 + 48) = a2;
  sub_1000663D0(a7);
}

uint64_t sub_10014BFDC(uint64_t a1, uint64_t a2)
{
  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  return type metadata accessor for LogMessage.StringInterpolation(0LL);
}

uint64_t sub_10014BFEC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *v2;
  return swift_task_dealloc(a1);
}

uint64_t sub_10014BFF8(uint64_t a1)
{
  *(void *)(v2 + 400) = a1;
  return swift_release(v1);
}

uint64_t sub_10014C008(uint64_t a1, uint64_t a2)
{
  return Promise.flatMap<A>(on:_:)(v4, a2, v2, v3);
}

uint64_t sub_10014C018@<X0>( void *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *a1 = v7;
  a1[1] = a2;
  return a7;
}

uint64_t sub_10014C02C()
{
  return v0;
}

uint64_t sub_10014C03C()
{
  *(void *)(v1 + 27sub_10000D3A0(v0 + 2) = v0;
  return swift_errorRetain(v0);
}

uint64_t sub_10014C048(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for TreatmentStoreService();
}

void sub_10014C054()
{
}

void sub_10014C060( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_10014C06C(void (*a1)(void))
{
  return sub_10014B9E4(a1, 48LL);
}

  ;
}

uint64_t sub_10014C090@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

uint64_t sub_10014C0A4(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_10014C0B0()
{
  return SyncTaskScheduler.init()();
}

uint64_t sub_10014C0B8()
{
  return sub_10000D3A0(v0);
}

uint64_t sub_10014C0D4()
{
  return sub_1000102D4(v1, 1LL, v0);
}

void sub_10014C0E4(unint64_t *a1)
{
}

uint64_t sub_10014C0EC()
{
  return *(void *)(v0 + 16);
}

  ;
}

uint64_t sub_10014C10C()
{
  return swift_retain(v0);
}

uint64_t sub_10014C114()
{
  return sub_10000D33C(v0);
}

uint64_t sub_10014C11C()
{
  return swift_task_alloc(*(unsigned int *)(v0 + 4));
}

void sub_10014C124(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_10014C130()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_10014C140()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 384));
}

void sub_10014C148()
{
}

void sub_10014C154(uint64_t a1@<X8>)
{
  *uint64_t v1 = v2;
  v1[1] = a1;
}

uint64_t sub_10014C160@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v2 + v1);
}

uint64_t sub_10014C16C()
{
  return AMSSetLogKeyIfNeeded();
}

void sub_10014C174(uint64_t a1)
{
}

void sub_10014C17C()
{
}

uint64_t sub_10014C188()
{
  return _convertErrorToNSError(_:)(v0);
}

  ;
}

NSDictionary sub_10014C19C()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10014C1A4(uint64_t result)
{
  *(void *)(v1 + 3sub_10000D3A0(v0 + 2) = result;
  return result;
}

uint64_t sub_10014C1B0()
{
  return sub_10000D3A0(v0);
}

id sub_10014C1B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = v18[0];
  uint64_t v7 = v18[1];
  int64_t v8 = v18[3];
  unint64_t v9 = v18[4];
  int64_t v10 = (unint64_t)(v18[2] + 64LL) >> 6;
  id result = (id)swift_bridgeObjectRetain(a1);
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v13 = v12 | (v8 << 6);
  while (1)
  {
    id result = [a2 addObserver:a3 selector:"storeDidChangeExternallyWithNotification:" name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:*(void *)(*(void *)(v6 + 56) + 8 * v13)];
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v14 >= v10) {
      goto LABEL_21;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    int64_t v16 = v8 + 1;
    if (!v15)
    {
      int64_t v16 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_21;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v8 + 3;
        if (v8 + 3 >= v10) {
          goto LABEL_21;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v8 + 4;
          if (v8 + 4 >= v10) {
            goto LABEL_21;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v16);
          if (!v15)
          {
            int64_t v16 = v8 + 5;
            if (v8 + 5 >= v10) {
              goto LABEL_21;
            }
            unint64_t v15 = *(void *)(v7 + 8 * v16);
            if (!v15)
            {
              int64_t v17 = v8 + 6;
              while (v17 < v10)
              {
                unint64_t v15 = *(void *)(v7 + 8 * v17++);
                if (v15)
                {
                  int64_t v16 = v17 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_10014C338(uint64_t a1, void *a2)
{
  uint64_t v5 = v17[0];
  uint64_t v4 = v17[1];
  int64_t v6 = v17[3];
  unint64_t v7 = v17[4];
  int64_t v8 = (unint64_t)(v17[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_20;
    }

    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          goto LABEL_22;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            goto LABEL_22;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              goto LABEL_22;
            }
            unint64_t v13 = *(void *)(v4 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v4 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_10014C4A4(char a1)
{
  char v2 = a1;
  return String.init<A>(describing:)(&v2, &type metadata for UbiquitousKeyValueStoreError);
}

void sub_10014C4D0(uint64_t *a1@<X8>)
{
  *a1 = sub_1000106A8(*v1);
  sub_100009044();
}

uint64_t sub_10014C4F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10014F038();
  unint64_t v5 = sub_100008AB8();
  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_10014C538()
{
  return sub_10014C4A4(*v0);
}

uint64_t sub_10014C540(uint64_t a1)
{
  unint64_t v2 = sub_10014EFFC();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10014C568(uint64_t a1)
{
  unint64_t v2 = sub_10014EFFC();
  unint64_t v3 = sub_10014F038();
  unint64_t v4 = sub_100008AB8();
  return Error<>._code.getter(a1, v2, v3, v4);
}

void sub_10014C5B0()
{
  uint64_t v0 = type metadata accessor for UbiquitousKeyValueStoreController();
  uint64_t v1 = swift_allocObject(v0, 25LL, 7LL);
  sub_10014C5E4(v1);
  qword_1001DBC08 = v1;
  sub_100009044();
}

uint64_t sub_10014C5E4(uint64_t a1)
{
  uint64_t v2 = sub_10000DE08(a1, &qword_1001C9CD8, &OBJC_CLASS___NSUbiquitousKeyValueStore_ptr);
  unint64_t v3 = sub_100036EA0();
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, &unk_1001A8968, v2, v3);
  *(_BYTE *)(v1 + 24) = 0;
  sub_10014C678(0LL, 0LL);
  sub_10014CC88();
  return v1;
}

uint64_t sub_10014C650()
{
  return swift_deallocClassInstance(v0, 25LL, 7LL);
}

void sub_10014C678(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1001C8070 != -1) {
    swift_once(&qword_1001C8070, sub_1000E4144);
  }
  int64_t v6 = (void *)sub_1000E41C8();
  id v7 = [v6 queryDeviceToDeviceEncryptionAvailability];
  swift_unknownObjectRelease(v6);
  int64_t v8 = (void *)sub_10002581C((uint64_t)&unk_1001B3A60);
  v8[2] = v3;
  void v8[3] = a1;
  v8[4] = a2;
  void v11[4] = sub_10014EEB0;
  int64_t v12 = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  _OWORD v11[2] = sub_100011198;
  v11[3] = &unk_1001B3A78;
  unint64_t v9 = _Block_copy(v11);
  unint64_t v10 = v12;
  swift_retain(v3);
  sub_100048404(a1, a2);
  swift_release(v10);
  [v7 addFinishBlock:v9];
  _Block_release(v9);
}

uint64_t sub_10014C7A4(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(BOOL), uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v59 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  int64_t v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  uint64_t result = __chkstk_darwin(v16);
  int64_t v19 = (char *)v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v55 = v13;
    uint64_t v56 = v10;
    uint64_t v57 = a5;
    uint64_t v58 = a4;
    LOBYTE(v60) = [a1 integerValue] & 3;
    uint64_t v60 = v60;
    uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v21 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v22 = *(void *)(v21 + 72);
    uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
    v54[1] = v22;
    uint64_t v24 = swift_allocObject(v20, ((v23 + 32) & ~v23) + 2 * v22, v23 | 7);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v62 = (void *)type metadata accessor for UbiquitousKeyValueStoreController();
    aBlock[0] = a3;
    uint64_t v25 = swift_retain(a3);
    id v26 = (id)AMSLogKey(v25);
    if (v26)
    {
      unint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v30 = v29;

      swift_bridgeObjectRetain(v30);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v31._uint64_t countAndFlagsBits = 0LL;
      v31._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v31);
      int64_t v32 = v62;
      uint64_t v33 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t DynamicType = swift_getDynamicType(v33, v32, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v65[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
      sub_10000E888((uint64_t)v65);
      v35._uint64_t countAndFlagsBits = 5972026LL;
      v35._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      uint64_t MetatypeMetadata = &type metadata for String;
      v65[0] = v28;
      v65[1] = v30;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
      sub_10000E888((uint64_t)v65);
      v36._uint64_t countAndFlagsBits = 93LL;
      v36._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      LogMessage.init(stringInterpolation:)(v19);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v37._uint64_t countAndFlagsBits = 0LL;
      v37._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v37);
      uint64_t v38 = v62;
      uint64_t v39 = sub_10000D37C(aBlock, (uint64_t)v62);
      uint64_t v40 = swift_getDynamicType(v39, v38, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v40);
      v65[0] = v40;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v65);
      sub_10000E888((uint64_t)v65);
      v41._uint64_t countAndFlagsBits = 58LL;
      v41._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v41);
      LogMessage.init(stringInterpolation:)(v19);
    }

    BOOL v42 = v60 == 3;
    sub_10000D3A0(aBlock);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
    v43._object = (void *)0x8000000100178D00LL;
    v43._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v43);
    uint64_t v62 = &type metadata for Bool;
    LOBYTE(aBlock[0]) = v42;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(aBlock);
    sub_10000E888((uint64_t)aBlock);
    v44._uint64_t countAndFlagsBits = 0LL;
    v44._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v44);
    uint64_t v45 = LogMessage.init(stringInterpolation:)(v19);
    if (qword_1001C7F80 != -1) {
      uint64_t v45 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v46 = static os_log_type_t.debug.getter(v45);
    sub_1000BD1B0(v46, v24);
    swift_bridgeObjectRelease();
    uint64_t v47 = v55;
    if (qword_1001C80B0 != -1) {
      swift_once(&qword_1001C80B0, sub_10010D4EC);
    }
    uint64_t v48 = swift_allocObject(&unk_1001B3AB0, 25LL, 7LL);
    *(void *)(v48 + swift_weakDestroy(v0 + 16) = a3;
    *(_BYTE *)(v48 + 24) = v42;
    unint64_t v63 = sub_10014EEDC;
    uint64_t v64 = v48;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100021A3C;
    uint64_t v62 = &unk_1001B3AC8;
    uint64_t v49 = _Block_copy(aBlock);
    uint64_t v50 = swift_retain(a3);
    static DispatchQoS.unspecified.getter(v50);
    v65[0] = _swiftEmptyArrayStorage;
    unint64_t v51 = sub_100010404();
    uint64_t v52 = sub_10000D33C((uint64_t *)&unk_1001CAB00);
    unint64_t v53 = sub_100010444();
    dispatch thunk of SetAlgebra.init<A>(_:)(v65, v52, v53, v9, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v49);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v47);
    uint64_t result = swift_release(v64);
    if (v58) {
      return v58(v60 == 3);
    }
  }

  return result;
}

void sub_10014CC88()
{
  uint64_t v1 = sub_10001C8FC();
  uint64_t v2 = (char *)v1[2];
  if (v2)
  {
    uint64_t v3 = (char *)(v1 + 4);
    do
    {
      char v4 = *v3++;
      LOBYTE(v24[0]) = v4;
      sub_10014CF38((uint64_t)v24);
      --v2;
    }

    while (v2);
  }

  sub_10000DDF8();
  sub_10014D3B4();
  char v5 = sub_100006368();
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  sub_10002C79C();
  sub_10014F164();
  *(_OWORD *)(swift_allocObject(v6, v7, v8) + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = type metadata accessor for UbiquitousKeyValueStoreController();
    uint64_t v10 = sub_10014F1A8(v9);
    id v11 = (id)AMSLogKey(v10);
    if (v11)
    {
      sub_1000105E8((uint64_t)v11);
      sub_1000D12F8();
      sub_10000DEB4();
      sub_10008E3F8();
      sub_1000104F0();
      uint64_t v12 = v25;
      sub_1000104C0(v24);
      uint64_t v23 = sub_100010530();
      v22[0] = v12;
      sub_10008E3F0((uint64_t)v22);
      sub_1000857E8();
      sub_10000DC14();
      sub_10014F1B8((uint64_t)&type metadata for String);
      sub_1000857E8();
      sub_10000DC4C(93LL);
      sub_10014F0C4();
      sub_10000DDF8();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      uint64_t v17 = v25;
      sub_1000104C0(v24);
      uint64_t v23 = sub_100010530();
      v22[0] = v17;
      sub_10008E3F0((uint64_t)v22);
      sub_1000857E8();
      sub_10000DC4C(58LL);
      sub_10014F0C4();
    }

    sub_10000D3A0(v24);
    sub_10000E008();
    unint64_t v18 = 0xD000000000000016LL;
  }

  else
  {
    uint64_t v13 = type metadata accessor for UbiquitousKeyValueStoreController();
    uint64_t v14 = sub_10014F1A8(v13);
    id v15 = (id)AMSLogKey(v14);
    if (v15)
    {
      sub_1000105E8((uint64_t)v15);
      sub_1000D12F8();
      sub_10000DEB4();
      sub_10008E3F8();
      sub_1000104F0();
      uint64_t v16 = v25;
      sub_1000104C0(v24);
      uint64_t v23 = sub_100010530();
      v22[0] = v16;
      sub_10008E3F0((uint64_t)v22);
      sub_1000857E8();
      sub_10000DC14();
      sub_10014F1B8((uint64_t)&type metadata for String);
      sub_1000857E8();
      sub_10000DC4C(93LL);
      sub_10014F0C4();
      sub_10000DDF8();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      uint64_t v19 = v25;
      sub_1000104C0(v24);
      uint64_t v23 = sub_100010530();
      v22[0] = v19;
      sub_10008E3F0((uint64_t)v22);
      sub_1000857E8();
      sub_10000DC4C(58LL);
      sub_10014F0C4();
    }

    sub_10000D3A0(v24);
    sub_10000E008();
  }

  uint64_t v20 = LogMessage.init(stringLiteral:)(v18);
  if (qword_1001C7F80 != -1) {
    uint64_t v20 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v21 = static os_log_type_t.info.getter(v20);
  sub_10006B93C(v21);
  sub_1000090CC();
  sub_10000DE10();
}

void sub_10014CF38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v2);
  __asm { BR              X9 }

uint64_t sub_10014CFCC()
{
  v4._uint64_t countAndFlagsBits = 0x6C616E7265746E69LL;
  *(void *)(v3 - 11sub_10000D3A0(v0 + 2) = 0xD000000000000019LL;
  *(void *)(v3 - 104) = 0x8000000100174E10LL;
  v4._object = (void *)0xE800000000000000LL;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 - 104);
  *(void *)(v3 - 7sub_10000D3A0(v0 + 2) = *(void *)(v3 - 112);
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  *(void *)(v3 - 15sub_10000D3A0(v0 + 2) = v8;
  uint64_t v10 = swift_allocObject(v6, ((v9 + 32) & ~v9) + 2 * v8, v9 | 7);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  *(void *)(v3 - 88) = type metadata accessor for UbiquitousKeyValueStoreController();
  *(void *)(v3 - 11sub_10000D3A0(v0 + 2) = v2;
  uint64_t v11 = swift_retain(v2);
  id v12 = (id)AMSLogKey(v11);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    *(void *)(v3 - 160) = v2;
    uint64_t v15 = v14;
    uint64_t v17 = v16;

    swift_bridgeObjectRetain();
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v18._uint64_t countAndFlagsBits = 0LL;
    v18._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v18);
    uint64_t v19 = *(void *)(v3 - 88);
    uint64_t v20 = sub_10000D37C((void *)(v3 - 112), v19);
    uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
    *(void *)(v3 - 120) = swift_getMetatypeMetadata(DynamicType);
    *(void *)(v3 - 144) = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 144);
    sub_10000E888(v3 - 144);
    v22._uint64_t countAndFlagsBits = 5972026LL;
    v22._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v22);
    *(void *)(v3 - 120) = &type metadata for String;
    *(void *)(v3 - 144) = v15;
    *(void *)(v3 - 136) = v17;
    uint64_t v2 = *(void *)(v3 - 160);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 144);
    sub_10000E888(v3 - 144);
    v23._uint64_t countAndFlagsBits = 93LL;
    v23._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v23);
    LogMessage.init(stringInterpolation:)(v1);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v24._uint64_t countAndFlagsBits = 0LL;
    v24._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v24);
    uint64_t v25 = *(void *)(v3 - 88);
    id v26 = sub_10000D37C((void *)(v3 - 112), v25);
    uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
    *(void *)(v3 - 120) = swift_getMetatypeMetadata(v27);
    *(void *)(v3 - 144) = v27;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 144);
    sub_10000E888(v3 - 144);
    v28._uint64_t countAndFlagsBits = 58LL;
    v28._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    LogMessage.init(stringInterpolation:)(v1);
  }

  sub_10000D3A0((void *)(v3 - 112));
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(34LL, 1LL);
  v29._uint64_t countAndFlagsBits = 0xD000000000000021LL;
  v29._object = (void *)0x8000000100178CD0LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v29);
  *(void *)(v3 - 88) = &type metadata for String;
  *(void *)(v3 - 11sub_10000D3A0(v0 + 2) = *(void *)(v3 - 72);
  *(void *)(v3 - 104) = v5;
  swift_bridgeObjectRetain();
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 112);
  sub_10000E888(v3 - 112);
  v30._uint64_t countAndFlagsBits = 32LL;
  v30._object = (void *)0xE100000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v30);
  uint64_t v31 = LogMessage.init(stringInterpolation:)(v1);
  if (qword_1001C7F80 != -1) {
    uint64_t v31 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v32 = static os_log_type_t.info.getter(v31);
  sub_1000BD1B0(v32, v10);
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)objc_opt_self(&OBJC_CLASS___NSUbiquitousKeyValueStore);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v35 = objc_msgSend(v33, "ams_encryptedAllPlatformsStoreWithIdentifier:", v34);

  swift_beginAccess(v2 + 16, v3 - 112, 33LL, 0LL);
  if (v35) {
    sub_100034558();
  }
  else {

  }
  return swift_endAccess(v3 - 112);
}

void sub_10014D3B4()
{
  uint64_t v1 = v0;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v2);
  sub_10000DC74();
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = sub_10002C79C();
  uint64_t v5 = (__n128 *)swift_allocObject( v3,  ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL))
                 + 2LL * *(void *)(*(void *)(v4 - 8) + 72LL),
                   *(unsigned __int8 *)(*(void *)(v4 - 8) + 80LL) | 7LL);
  uint64_t v21 = sub_10014F1C8(v5, (__n128)xmmword_100164230);
  v20[0] = v0;
  uint64_t v6 = swift_retain(v0);
  id v7 = (id)AMSLogKey(v6);
  if (v7)
  {
    uint64_t v8 = v7;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

    sub_10000DEB4();
    sub_100010564();
    sub_10000DC08();
    uint64_t v9 = v21;
    uint64_t v10 = sub_10000D37C(v20, v21);
    uint64_t v11 = sub_10000DC54((uint64_t)v10, v9);
    swift_getMetatypeMetadata(v11);
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC14();
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    sub_10000DDF8();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v12 = v21;
    uint64_t v13 = sub_10000D37C(v20, v21);
    uint64_t v14 = sub_10000DC54((uint64_t)v13, v12);
    swift_getMetatypeMetadata(v14);
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_10000D3A0(v20);
  sub_10000E008();
  uint64_t v15 = LogMessage.init(stringLiteral:)(0xD000000000000014LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v15 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v16 = static os_log_type_t.info.getter(v15);
  sub_10006B93C(v16);
  sub_1000090CC();
  id v17 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  sub_100020A94(v1 + 16, (uint64_t)v20);
  swift_retain(v1);
  id v18 = v17;
  uint64_t v19 = sub_10000DF10();
  sub_10014C1B8(v19, v18, v1);

  sub_10000DE2C();
  sub_10000DE10();
}

void sub_10014D5F8()
{
  id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  [v1 removeObserver:v0];
}

uint64_t sub_10014D648(uint64_t a1)
{
  if (*(_BYTE *)(v1 + 24) != 1)
  {
    unint64_t v9 = sub_10014EE44();
    uint64_t v6 = sub_100020C48((uint64_t)&type metadata for UbiquitousKeyValueStoreError, v9);
    char v8 = 1;
    goto LABEL_7;
  }

  if (!sub_100006368())
  {
    unint64_t v10 = sub_10014EE44();
    uint64_t v6 = sub_100020C48((uint64_t)&type metadata for UbiquitousKeyValueStoreError, v10);
    char v8 = 0;
    goto LABEL_7;
  }

  swift_beginAccess(v1 + 16, v12, 0LL, 0LL);
  uint64_t v3 = *(void *)(v1 + 16);
  sub_10000DEB4();
  sub_100030A18(a1, v3);
  uint64_t v1 = v4;
  swift_bridgeObjectRelease();
  if (!v1)
  {
    unint64_t v5 = sub_10014EE44();
    uint64_t v6 = sub_100020C48((uint64_t)&type metadata for UbiquitousKeyValueStoreError, v5);
    char v8 = 2;
LABEL_7:
    *id v7 = v8;
    swift_willThrow(v6);
  }

  return v1;
}

void sub_10014D734(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10000DE00();
  sub_10000DC8C();
  __chkstk_darwin(v4);
  sub_100048C04();
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (id *)((char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  uint64_t v9 = qword_1001DBBC0;
  *char v8 = qword_1001DBBC0;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = (id)v9;
  LOBYTE(vsub_10000D3A0(v0 + 9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_61:
    uint64_t v39 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
LABEL_15:
    uint64_t v40 = static os_log_type_t.debug.getter(v39);
    sub_10006B93C(v40);
    goto LABEL_16;
  }

  uint64_t v12 = Notification.object.getter(v111, v11);
  if (!v112)
  {
    sub_10002FB24();
    goto LABEL_11;
  }

  uint64_t v13 = sub_10000DE08((uint64_t)v12, &qword_1001C9CD8, &OBJC_CLASS___NSUbiquitousKeyValueStore_ptr);
  uint64_t v14 = (void *)v114;
  sub_100020A94(v2 + 16, (uint64_t)v113);
  id v15 = v14;
  uint64_t v16 = sub_10000DF10();
  uint64_t v108 = sub_10014C338(v16, v15);
  id v18 = v17;
  sub_10000DE2C();
  if (!v18)
  {

LABEL_11:
    uint64_t v31 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_10014F164();
    NSString v34 = (__n128 *)swift_allocObject(v31, v32, v33);
    uint64_t v112 = (void *)sub_10014F1C8(v34, (__n128)xmmword_100164230);
    uint64_t v35 = sub_10014F120();
    id v36 = (id)AMSLogKey(v35);
    if (v36)
    {
      sub_1000105E8((uint64_t)v36);
      sub_1000D12F8();
      sub_10000DEB4();
      sub_10008E3F8();
      sub_1000104F0();
      sub_10014F08C();
      uint64_t v37 = sub_100010530();
      sub_10014F0B0(v37);
      sub_10000E8FC();
      sub_10000DC14();
      *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
      *(void *)&__int128 v114 = a1;
      *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v2;
      sub_10000DCE8();
      sub_10000E8FC();
      sub_10000DC4C(93LL);
      sub_10014F0C4();
      sub_10000DDF8();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10014F08C();
      uint64_t v38 = sub_100010530();
      sub_10014F0B0(v38);
      sub_10000E8FC();
      sub_10000DC4C(58LL);
      sub_10014F0C4();
    }

    sub_10000D3A0(v111);
    uint64_t v39 = sub_1000105B4(0xD000000000000035LL);
    if (qword_1001C7F80 == -1) {
      goto LABEL_15;
    }
    goto LABEL_61;
  }

  id v102 = v15;

  uint64_t v19 = (void *)sub_10000D33C(&qword_1001C9C70);
  uint64_t v20 = *(void *)(sub_10002C79C() - 8);
  uint64_t v21 = *(void *)(v20 + 72);
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v109 = v21;
  uint64_t v105 = v19;
  uint64_t v103 = v23 + 2 * v21;
  uint64_t v104 = v22 | 7;
  uint64_t v24 = swift_allocObject(v19, v103, v22 | 7);
  __int128 v106 = xmmword_100164230;
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v107 = type metadata accessor for UbiquitousKeyValueStoreController();
  uint64_t v112 = (void *)v107;
  uint64_t v25 = sub_10014F120();
  id v26 = (id)AMSLogKey(v25);
  if (v26)
  {
    uint64_t v27 = sub_1000105E8((uint64_t)v26);
    uint64_t v29 = v28;

    swift_bridgeObjectRetain();
    sub_10008E3F8();
    sub_1000104F0();
    sub_10014F08C();
    uint64_t v30 = sub_100010530();
    sub_10014F0B0(v30);
    sub_10000E8FC();
    sub_10000DC14();
    *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
    *(void *)&__int128 v114 = v27;
    *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v29;
    sub_10000DCE8();
    sub_10000E8FC();
    sub_10000DC4C(93LL);
    sub_10014F0C4();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001058C();
    sub_1000104F0();
    sub_10014F08C();
    uint64_t v41 = sub_100010530();
    sub_10014F0B0(v41);
    sub_10000E8FC();
    sub_10000DC4C(58LL);
    sub_10014F0C4();
  }

  sub_10014F12C();
  sub_10001A21C(43LL);
  v116._uint64_t countAndFlagsBits = 0xD000000000000027LL;
  v116._object = (void *)0x8000000100178B30LL;
  sub_10001A2AC(v116);
  sub_10014F184();
  sub_10002FB24();
  v42._uint64_t countAndFlagsBits = 1886413088LL;
  v42._object = (void *)0xE400000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v42);
  uint64_t v43 = sub_10014F0C4();
  if (qword_1001C7F80 != -1) {
    uint64_t v43 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  sub_10006B93C(v44);
  uint64_t v45 = sub_1000090CC();
  uint64_t v46 = Notification.userInfo.getter(v45);
  if (!v46)
  {
    __int128 v114 = 0u;
    __int128 v115 = 0u;
    goto LABEL_28;
  }

  uint64_t v47 = (void *)v46;
  v110[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangeReasonKey);
  v110[1] = v48;
  AnyHashable.init<A>(_:)(v110);
  sub_10003079C((uint64_t)v111, (uint64_t)v47, &v114);
  swift_bridgeObjectRelease();
  sub_10000E854((uint64_t)v111);
  if (!*((void *)&v115 + 1))
  {
LABEL_28:
    sub_10000E8FC();
    goto LABEL_29;
  }

  if ((sub_100010BA4( (uint64_t)v111,  (uint64_t)&v114,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int) & 1) == 0)
  {
LABEL_29:
    uint64_t v54 = sub_10014F0D0();
    uint64_t v55 = sub_10014F0EC(v54);
    id v56 = (id)AMSLogKey(v55);
    if (v56)
    {
      sub_1000105E8((uint64_t)v56);
      sub_1000D12F8();
      sub_10000DEB4();
      sub_10008E3F8();
      sub_1000104F0();
      sub_10014F08C();
      uint64_t v57 = sub_100010530();
      sub_10014F0B0(v57);
      sub_10000E8FC();
      sub_10000DC14();
      *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
      *(void *)&__int128 v114 = a1;
      *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v2;
      sub_10000DCE8();
      sub_10000E8FC();
      sub_10000DC4C(93LL);
      sub_10014F0C4();
      sub_10000DDF8();
    }

    else
    {
      sub_10001058C();
      sub_1000104F0();
      sub_10014F08C();
      uint64_t v58 = sub_100010530();
      sub_10014F0B0(v58);
      sub_10000E8FC();
      sub_10000DC4C(58LL);
      sub_10014F0C4();
    }

    id v59 = v102;
    sub_10000D3A0(v111);
    uint64_t v60 = sub_1000105B4(0xD000000000000032LL);
    uint64_t v61 = static os_log_type_t.debug.getter(v60);
    sub_10006B93C(v61);

    goto LABEL_16;
  }

  uint64_t v49 = v111[0];
  switch(v111[0])
  {
    case 0LL:
      uint64_t v50 = sub_10014F0D0();
      *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = v106;
      uint64_t v51 = sub_10014F10C();
      id v52 = (id)AMSLogKey(v51);
      if (v52)
      {
        sub_1000105E8((uint64_t)v52);
        sub_10014F198();
        sub_10000DF10();
        sub_10008E3F8();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v53 = sub_100010530();
        sub_10014F0B0(v53);
        sub_10000E8FC();
        sub_10000DC14();
        *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &unk_1001A8968;
        *(void *)&__int128 v114 = v23;
        *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
        sub_10000DCE8();
        sub_10000E8FC();
        sub_10000DC4C(93LL);
        sub_10001A298();
        sub_10000DE2C();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v83 = sub_100010530();
        sub_10014F0B0(v83);
        sub_10000E8FC();
        sub_10000DC4C(58LL);
        sub_10001A298();
      }

      sub_10014F1D4();
      sub_10000E008();
      unint64_t v84 = 0xD00000000000001BLL;
      goto LABEL_47;
    case 1LL:
      uint64_t v50 = sub_10014F0D0();
      *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = v106;
      uint64_t v69 = sub_10014F10C();
      id v70 = (id)AMSLogKey(v69);
      if (v70)
      {
        sub_1000105E8((uint64_t)v70);
        sub_10014F198();
        sub_10000DF10();
        sub_10008E3F8();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v71 = sub_100010530();
        sub_10014F0B0(v71);
        sub_10000E8FC();
        sub_10000DC14();
        *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &unk_1001A8968;
        *(void *)&__int128 v114 = v23;
        *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
        sub_10000DCE8();
        sub_10000E8FC();
        sub_10000DC4C(93LL);
        sub_10001A298();
        sub_10000DE2C();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v87 = sub_100010530();
        sub_10014F0B0(v87);
        sub_10000E8FC();
        sub_10000DC4C(58LL);
        sub_10001A298();
      }

      sub_10014F1D4();
      sub_10000E008();
LABEL_47:
      LogMessage.init(stringLiteral:)(v84);
      uint64_t v88 = sub_10014F1F8();
      sub_1000BD1B0(v88, v50);
      uint64_t v89 = swift_bridgeObjectRelease();
      uint64_t v90 = Notification.userInfo.getter(v89);
      if (!v90)
      {
        __int128 v114 = 0u;
        __int128 v115 = 0u;
        goto LABEL_53;
      }

      uint64_t v91 = v90;
      *(void *)&__int128 v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
      *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v92;
      AnyHashable.init<A>(_:)(&v114);
      sub_10003079C((uint64_t)v111, v91, &v114);
      swift_bridgeObjectRelease();
      sub_10000E854((uint64_t)v111);
      if (!*((void *)&v115 + 1))
      {
LABEL_53:
        sub_10000E8FC();
        uint64_t v94 = 0LL;
        goto LABEL_54;
      }

      uint64_t v93 = sub_10000D33C(&qword_1001CDF50);
      else {
        uint64_t v94 = 0LL;
      }
LABEL_54:
      sub_10014E298(v108, v94);

LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      sub_10000DD84();
      return;
    case 2LL:
      uint64_t v72 = sub_10014F0D0();
      uint64_t v73 = sub_10014F0EC(v72);
      id v74 = (id)AMSLogKey(v73);
      if (v74)
      {
        sub_1000105E8((uint64_t)v74);
        sub_1000D12F8();
        sub_10000DEB4();
        sub_10008E3F8();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v75 = sub_100010530();
        sub_10014F0B0(v75);
        sub_10000E8FC();
        sub_10000DC14();
        *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
        *(void *)&__int128 v114 = a1;
        *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v2;
        sub_10000DCE8();
        sub_10000E8FC();
        sub_10000DC4C(93LL);
        sub_10014F0C4();
        sub_10000DDF8();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v95 = sub_100010530();
        sub_10014F0B0(v95);
        sub_10000E8FC();
        sub_10000DC4C(58LL);
        sub_10014F0C4();
      }

      id v96 = v102;
      sub_10014F12C();
      sub_10001A21C(33LL);
      v118._object = (void *)0x8000000100178BE0LL;
      v118._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      sub_10001A2AC(v118);
      sub_10014F184();
      sub_10002FB24();
      v97._uint64_t countAndFlagsBits = 0x65726F747320LL;
      v97._object = (void *)0xE600000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v97);
      uint64_t v98 = sub_10014F0C4();
      uint64_t v99 = static os_log_type_t.error.getter(v98);
      sub_10006B93C(v99);
      sub_1000090CC();

      goto LABEL_17;
    case 3LL:
      uint64_t v76 = sub_10014F0D0();
      uint64_t v77 = sub_10014F0EC(v76);
      id v78 = (id)AMSLogKey(v77);
      if (v78)
      {
        uint64_t v79 = sub_1000105E8((uint64_t)v78);
        uint64_t v81 = v80;

        swift_bridgeObjectRetain();
        sub_10008E3F8();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v82 = sub_100010530();
        sub_10014F0B0(v82);
        sub_10000E8FC();
        sub_10000DC14();
        *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
        *(void *)&__int128 v114 = v79;
        *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v81;
        sub_10000DCE8();
        sub_10000E8FC();
        sub_10000DC4C(93LL);
        sub_10014F0C4();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v100 = sub_100010530();
        sub_10014F0B0(v100);
        sub_10000E8FC();
        sub_10000DC4C(58LL);
        sub_10014F0C4();
      }

      sub_10000D3A0(v111);
      LogMessage.init(stringLiteral:)(0x20746E756F636341LL);
      uint64_t v101 = sub_10014F1F8();
      sub_10006B93C(v101);
      sub_1000090CC();
      *(_BYTE *)(v2 + 24) = 0;
      sub_10014C678(0LL, 0LL);
      goto LABEL_59;
    default:
      uint64_t v62 = sub_10014F0D0();
      uint64_t v63 = sub_10014F0EC(v62);
      id v64 = (id)AMSLogKey(v63);
      if (v64)
      {
        uint64_t v65 = sub_1000105E8((uint64_t)v64);
        uint64_t v67 = v66;

        sub_10000DEB4();
        sub_10008E3F8();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v68 = sub_100010530();
        sub_10014F0B0(v68);
        sub_10000E8FC();
        sub_10000DC14();
        *((void *)&v115 + setenv("JavaScriptCoreUseJIT", "0", 1) = &type metadata for String;
        *(void *)&__int128 v114 = v65;
        *((void *)&v114 + setenv("JavaScriptCoreUseJIT", "0", 1) = v67;
        sub_10000DCE8();
        sub_10000E8FC();
        sub_10000DC4C(93LL);
        sub_10014F0C4();
        sub_10000DDF8();
      }

      else
      {
        sub_10001058C();
        sub_1000104F0();
        sub_10014F08C();
        uint64_t v85 = sub_100010530();
        sub_10014F0B0(v85);
        sub_10000E8FC();
        sub_10000DC4C(58LL);
        sub_10014F0C4();
      }

      sub_10014F12C();
      sub_10001A21C(45LL);
      v117._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
      v117._object = (void *)0x8000000100178BA0LL;
      sub_10001A2AC(v117);
      uint64_t v112 = &type metadata for Int;
      v111[0] = v49;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v111);
      sub_10002FB24();
      sub_100048E08(0xD000000000000013LL, (uint64_t)" received; ignoring");
      sub_10014F0C4();
      uint64_t v86 = sub_10014F1F8();
      sub_1000BD1B0(v86, v62);
      swift_bridgeObjectRelease();
LABEL_59:

      goto LABEL_17;
  }

void sub_10014E298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v42 = sub_10006725C();
  uint64_t v41 = *(void *)(v42 - 8);
  sub_10000DC8C();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_100123274();
  type metadata accessor for LogMessage.StringInterpolation(v7);
  sub_10000DC8C();
  __chkstk_darwin(v8);
  sub_10000DC74();
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  uint64_t v13 = qword_1001DBBC0;
  *uint64_t v12 = qword_1001DBBC0;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    uint64_t v37 = v5;
    uint64_t v38 = v4;
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v16 = *(void *)(sub_10002C79C() - 8);
    uint64_t v4 = swift_allocObject( v15,  ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
         + 2LL * *(void *)(v16 + 72),
           *(unsigned __int8 *)(v16 + 80) | 7LL);
    __int128 v36 = xmmword_100164230;
    *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v44 = (void *)type metadata accessor for UbiquitousKeyValueStoreController();
    aBlock[0] = v2;
    uint64_t v17 = swift_retain(v2);
    id v18 = (id)AMSLogKey(v17);
    uint64_t v3 = &type metadata for String;
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v22 = v21;

      sub_10000DF10();
      sub_100010564();
      sub_10000DC08();
      uint64_t v23 = (uint64_t)v44;
      uint64_t v24 = sub_10000D37C(aBlock, (uint64_t)v44);
      uint64_t v25 = sub_10000DC54((uint64_t)v24, v23);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v25);
      uint64_t v46 = v25;
      sub_100029288();
      sub_10001C304();
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v46 = v20;
      uint64_t v47 = v22;
      sub_100029288();
      sub_10001C304();
      sub_10000DC4C(93LL);
      sub_10000DC5C();
      sub_10000DE2C();
    }

    else
    {
      sub_10001A1BC();
      sub_10000DC08();
      uint64_t v26 = (uint64_t)v44;
      uint64_t v27 = sub_10000D37C(aBlock, (uint64_t)v44);
      uint64_t v28 = sub_10000DC54((uint64_t)v27, v26);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v28);
      uint64_t v46 = v28;
      sub_100029288();
      sub_10001C304();
      sub_10000DC4C(58LL);
      sub_10000DC5C();
    }

    uint64_t v12 = (void *)0xD000000000000014LL;
    sub_10000D3A0(aBlock);
    sub_10001A21C(47LL);
    sub_100048E08(0xD00000000000001BLL, (uint64_t)"Enqueuing notification for ");
    uint64_t v44 = &unk_1001A8968;
    LOBYTE(v5) = v40;
    LOBYTE(aBlock[0]) = v40;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(aBlock);
    sub_10000E888((uint64_t)aBlock);
    v29._object = (void *)0x8000000100178AB0LL;
    v29._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v29);
    uint64_t v30 = sub_10000DC5C();
    if (qword_1001C7F80 == -1)
    {
LABEL_8:
      uint64_t v31 = static os_log_type_t.default.getter(v30);
      sub_1000BD1B0(v31, v4);
      swift_bridgeObjectRelease();
      uint64_t v32 = sub_10000D33C(&qword_1001C8BC0);
      uint64_t inited = swift_initStackObject(v32, v45);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v36;
      *(void *)(inited + 3sub_10000D3A0(v0 + 2) = 0x656372756F73LL;
      *(void *)(inited + 40) = 0xE600000000000000LL;
      strcpy((char *)(inited + 48), "amsengagementd");
      *(_BYTE *)(inited + 63) = -18;
      *(void *)(inited + 7sub_10000D3A0(v0 + 2) = v3;
      *(void *)(inited + 80) = 0x707954746E657665LL;
      *(void *)(inited + 120) = v3;
      *(void *)(inited + 88) = 0xE900000000000065LL;
      *(void *)(inited + 96) = (char *)v12 + 2;
      *(void *)(inited + 104) = 0x8000000100178AD0LL;
      uint64_t v46 = Dictionary.init(dictionaryLiteral:)( inited,  v3,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      uint64_t v34 = v39;
      if (v39)
      {
        uint64_t v44 = (void *)sub_10000D33C(&qword_1001CDF50);
        aBlock[0] = v34;
        swift_bridgeObjectRetain();
        sub_100030118((uint64_t)aBlock, 0x4B6465676E616863LL, 0xEB00000000737965LL);
      }

      [objc_allocWithZone(AMSEngagementEnqueueRequest) init];
      uint64_t v35 = sub_10000D33C(&qword_1001CD430);
      *(_OWORD *)(sub_10002581C(v35) + swift_weakDestroy(v0 + 16) = xmmword_100165690;
      __asm { BR              X10 }
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t v30 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  goto LABEL_8;
}

void sub_10014E9E4(uint64_t a1)
{
  id v2 = sub_100067AF4(0x6761676E45534D41LL, 0xED0000746E656D65LL, (void *)0x31);
  id v3 = [objc_allocWithZone(AMSEngagement) initWithBag:v2];
}

void sub_10014EA9C(uint64_t a1)
{
  uint64_t v22 = *(void *)(type metadata accessor for DispatchWorkItemFlags(0LL) - 8);
  sub_10000DC8C();
  __chkstk_darwin(v5);
  uint64_t v6 = sub_10006725C();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  sub_10000DC8C();
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100123274();
  uint64_t v9 = type metadata accessor for Notification(v8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  if (qword_1001C80B0 != -1) {
    swift_once(&qword_1001C80B0, sub_10010D4EC);
  }
  v19[1] = qword_1001DBBC0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1001B39C0, v13 + v11, v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  aBlock[4] = sub_10014EDC4;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100021A3C;
  void aBlock[3] = &unk_1001B39D8;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100010404();
  sub_10000D33C((uint64_t *)&unk_1001CAB00);
  unint64_t v17 = sub_100010444();
  sub_10014F14C((uint64_t)&v23, v18, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v3, v2, v15);
  _Block_release(v15);
  sub_1000292FC(v2, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v3, v21);
  swift_release();
  sub_10000DD84();
}

uint64_t type metadata accessor for UbiquitousKeyValueStoreController()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd33UbiquitousKeyValueStoreController);
}

uint64_t sub_10014ED58()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  sub_1000675F8();
  sub_1000292FC(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v5);
}

void sub_10014EDC4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Notification(0LL) - 8) + 80LL);
  sub_10014D734(v0 + ((v1 + 24) & ~v1));
  sub_100009044();
}

uint64_t sub_10014EE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10014EE10(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10014EE18()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10014EE3C()
{
}

unint64_t sub_10014EE44()
{
  unint64_t result = qword_1001CFCB8;
  if (!qword_1001CFCB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A138, &type metadata for UbiquitousKeyValueStoreError);
    atomic_store(result, (unint64_t *)&qword_1001CFCB8);
  }

  return result;
}

uint64_t sub_10014EE80()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10014EEB0(void *a1, uint64_t a2)
{
  return sub_10014C7A4(a1, a2, *(void *)(v2 + 16), *(uint64_t (**)(BOOL))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10014EEBC()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

void sub_10014EEDC()
{
  *(_BYTE *)(*(void *)(v0 + 16) + 24LL) = *(_BYTE *)(v0 + 24);
}

uint64_t storeEnumTagSinglePayload for UbiquitousKeyValueStoreError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10014EF38 + 4 * byte_100169FA5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014EF6C + 4 * byte_100169FA0[v4]))();
}

uint64_t sub_10014EF6C(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10014EF74(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x10014EF7CLL);
  }
  return result;
}

uint64_t sub_10014EF88(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x10014EF90LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10014EF94(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10014EF9C(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UbiquitousKeyValueStoreError()
{
  return &type metadata for UbiquitousKeyValueStoreError;
}

unint64_t sub_10014EFC0()
{
  unint64_t result = qword_1001CFCC0;
  if (!qword_1001CFCC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A110, &type metadata for UbiquitousKeyValueStoreError);
    atomic_store(result, (unint64_t *)&qword_1001CFCC0);
  }

  return result;
}

unint64_t sub_10014EFFC()
{
  unint64_t result = qword_1001CFCC8;
  if (!qword_1001CFCC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A058, &type metadata for UbiquitousKeyValueStoreError);
    atomic_store(result, (unint64_t *)&qword_1001CFCC8);
  }

  return result;
}

unint64_t sub_10014F038()
{
  unint64_t result = qword_1001CFCD0;
  if (!qword_1001CFCD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A098, &type metadata for UbiquitousKeyValueStoreError);
    atomic_store(result, (unint64_t *)&qword_1001CFCD0);
  }

  return result;
}

uint64_t sub_10014F08C()
{
  uint64_t v1 = *(void *)(v0 - 176);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 200), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_10014F0B0(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 128) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 128);
}

uint64_t sub_10014F0C4()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_10014F0D0()
{
  return swift_allocObject(*(void *)(v0 - 264), *(void *)(v0 - 280), *(void *)(v0 - 272));
}

uint64_t sub_10014F0EC(uint64_t a1)
{
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v2 - 256);
  *(void *)(v2 - 176) = *(void *)(v2 - 240);
  *(void *)(v2 - 200) = v1;
  return swift_retain(v1);
}

uint64_t sub_10014F10C()
{
  *(void *)(v1 - 176) = *(void *)(v1 - 240);
  *(void *)(v1 - 200) = v0;
  return swift_retain(v0);
}

uint64_t sub_10014F120()
{
  *(void *)(v1 - 200) = v0;
  return swift_retain(v0);
}

uint64_t sub_10014F12C()
{
  return sub_10000D3A0((void *)(v0 - 200));
}

uint64_t sub_10014F14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, v4, a3, v3, v5);
}

  ;
}

uint64_t sub_10014F184()
{
  *(void *)(v1 - 176) = v0;
  *(_BYTE *)(v1 - 200) = *(void *)(v1 - 232);
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v1 - 200);
}

void sub_10014F198()
{
}

uint64_t sub_10014F1A8(uint64_t a1)
{
  *(void *)(v2 - 80) = a1;
  *(void *)(v2 - 104) = v1;
  return swift_retain(v1);
}

uint64_t sub_10014F1B8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 11sub_10000D3A0(v0 + 2) = a1;
  *(void *)(v3 - 136) = v2;
  *(void *)(v3 - 128) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v3 - 136);
}

uint64_t sub_10014F1C8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for UbiquitousKeyValueStoreController();
}

uint64_t sub_10014F1D4()
{
  return sub_10000D3A0((void *)(v0 - 200));
}

uint64_t sub_10014F1F8()
{
  return static os_log_type_t.debug.getter();
}

uint64_t type metadata accessor for UniversalLinksUpdater()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd21UniversalLinksUpdater);
}

void sub_10014F220()
{
  uint64_t v6 = v5;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DC74();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_100048A80();
  __chkstk_darwin(v9);
  sub_100150D70();
  sub_1000F04EC();
  __chkstk_darwin(v10);
  sub_100048A9C();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v36 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v36 - v15;
  id v17 = objc_msgSend((id)objc_opt_self(NSURL), "ams_engagementDirectory");
  if (v17)
  {
    uint64_t v18 = v17;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

    sub_100150E18(v3, (uint64_t)v14);
    sub_10000D5C0(v3, 0LL, 1LL, v1);
    uint64_t v19 = sub_100150D54(v3);
    if (!v20)
    {
      sub_100150E18((uint64_t)v16, v3);
      id v21 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_100150DAC();

      sub_100150E18(v2, (uint64_t)v16);
      sub_100150D54(v0);
      if (v20)
      {
        uint64_t v22 = sub_100150E18(v6, v2);
        sub_100150E20(v22, &qword_1001CB180);
      }

      else
      {
        sub_100150DE0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
        sub_100150E18(v6, v0);
      }

      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v19 = sub_100150DB8();
  }

  sub_100150E28(v19, &qword_1001CB180);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v23 = sub_10002C79C();
  uint64_t v24 = (_OWORD *)sub_100150D30(v23);
  v24[1] = xmmword_100164230;
  uint64_t v25 = sub_10000D33C(&qword_1001CFD70);
  id v26 = (id)sub_100150DEC(v25);
  if (v26)
  {
    sub_100150E30((uint64_t)v26);
    sub_100072CD4();
    sub_10000DF10();
    sub_100010564();
    sub_10000DC08();
    uint64_t v27 = v39;
    uint64_t v28 = sub_10000D37C(v38, v39);
    sub_10000DC54((uint64_t)v28, v27);
    uint64_t v37 = (void *)sub_1000BDA54();
    v36[0] = v27;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC14();
    uint64_t v37 = &type metadata for String;
    v36[0] = v3;
    v36[1] = v1;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC4C(93LL);
    sub_10010D368();
    sub_10000DE2C();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v29 = v39;
    uint64_t v30 = sub_10000D37C(v38, v39);
    sub_10000DC54((uint64_t)v30, v29);
    uint64_t v37 = (void *)sub_100048E80();
    v36[0] = v29;
    uint64_t v31 = sub_10000DEA4();
    sub_1000B8494(v31, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10010D368();
  }

  sub_10000D3A0(v38);
  sub_10000E008();
  uint64_t v32 = sub_10000DD38(64LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v32 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v34 = static os_log_type_t.fault.getter(v32, v33);
  sub_10006B93C(v34);
  sub_1000090CC();
  id v35 =  objc_msgSend( objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager"),  "temporaryDirectory");
  sub_100150E50();
  sub_100150DF8();

LABEL_13:
  sub_10000DD84();
}

void sub_10014F588()
{
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_100029170();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_100150D90();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = sub_100150D70();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  sub_1000292E4();
  id v14 = objc_msgSend((id)objc_opt_self(NSURL), "ams_dataVaultDirectory");
  if (v14)
  {
    sub_100150E0C((uint64_t)v14);

    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  sub_1000ACBE0((uint64_t)v2, v15);
  sub_1000AEAC8((uint64_t)v2, (uint64_t)v11);
  if (sub_1000102D4((uint64_t)v11, 1LL, v12) == 1)
  {
    sub_1000102E0((uint64_t)v11, &qword_1001CB180);
    uint64_t v16 = sub_1000ACBE0(v1, 1LL);
  }

  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0x656D656761676E45LL, 0xEA0000000000746ELL, 1LL);
    uint64_t v2 = *(void (**)(char *, uint64_t))(v13 + 8);
    v2(v11, v12);
    sub_1000ACBE0(v1, 0LL);
    uint64_t v16 = sub_1000102D4(v1, 1LL, v12);
    if ((_DWORD)v16 != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v0, v1, v12);
      id v28 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_100150DAC();

      v2(v0, v12);
      goto LABEL_14;
    }
  }

  sub_100150E28(v16, &qword_1001CB180);
  uint64_t v17 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v18 = *(void *)(sub_10002C79C() - 8);
  uint64_t v19 = swift_allocObject( v17,  ((*(unsigned __int8 *)(v18 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))
        + 2LL * *(void *)(v18 + 72),
          *(unsigned __int8 *)(v18 + 80) | 7LL);
  *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v32 = sub_10000D33C(&qword_1001CFD70);
  v31[0] = v12;
  id v20 = (id)AMSLogKey(v32);
  if (v20)
  {
    uint64_t v21 = sub_1000105E8((uint64_t)v20);
    sub_10004877C();
    sub_100020BB4();
    sub_100010564();
    sub_100010608();
    uint64_t v22 = v32;
    sub_1000104C0(v31);
    uint64_t v30 = (void *)sub_100010530();
    v29[0] = v22;
    sub_10006B8EC((uint64_t)v29);
    sub_100051B5C();
    sub_10000DC14();
    uint64_t v30 = &type metadata for String;
    v29[0] = v21;
    v29[1] = v2;
    sub_10000DEA4();
    sub_100051B5C();
    sub_10000DC4C(93LL);
    sub_1000291E4();
    sub_100020AB8();
  }

  else
  {
    sub_10001A1BC();
    sub_100010608();
    uint64_t v23 = v32;
    sub_1000104C0(v31);
    uint64_t v30 = (void *)sub_100010530();
    v29[0] = v23;
    uint64_t v24 = sub_10006B8EC((uint64_t)v29);
    sub_1000B8494(v24, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_1000291E4();
  }

  sub_10000D3A0(v31);
  sub_10000E008();
  uint64_t v25 = sub_10000DD38(87LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v25 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v27 = static os_log_type_t.fault.getter(v25, v26);
  sub_1000BD1B0(v27, v19);
  swift_bridgeObjectRelease();
  sub_1000ACBE0(v5, 1LL);
LABEL_14:
  sub_10000DD84();
}

void sub_10014F918()
{
  uint64_t v68 = v1;
  uint64_t v69 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v12);
  sub_100029170();
  URL.path.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v0 fileExistsAtPath:v13];
  swift_bridgeObjectRelease();

  if (v14)
  {
    uint64_t v15 = sub_100029328();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v11, v9, v15);
    sub_10000D5C0(v11, 0LL, 1LL, v15);
  }

  else
  {
    uint64_t v58 = v11;
    uint64_t v16 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v17 = *(void *)(sub_10002C79C() - 8);
    uint64_t v18 = *(void *)(v17 + 72);
    uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
    id v20 = (char *)((v19 + 32) & ~v19);
    uint64_t v56 = v19 | 7;
    uint64_t v57 = &v20[2 * v18];
    uint64_t v21 = swift_allocObject(v16, v57, v19 | 7);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    unint64_t v55 = sub_100150434();
    unint64_t v67 = v55;
    v66[0] = v3;
    id v53 = v3;
    id v22 = (id)AMSLogKey(v53);
    if (v22)
    {
      uint64_t v23 = sub_1000105E8((uint64_t)v22);
      uint64_t v25 = v24;

      swift_bridgeObjectRetain(v25);
      sub_100010564();
      sub_100010608();
      sub_1000104C0(v66);
      uint64_t v26 = sub_100010530();
      sub_1000717D4(v26);
      sub_100150E44();
      sub_10000DC14();
      uint64_t v65 = &type metadata for String;
      uint64_t v63 = v23;
      id v64 = v25;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v63);
      sub_100150E44();
      sub_10000DC4C(93LL);
      sub_1000291E4();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001A1BC();
      sub_100010608();
      sub_1000104C0(v66);
      uint64_t v27 = sub_100010530();
      sub_1000717D4(v27);
      sub_1000102E0((uint64_t)&v63, &qword_1001CAAD0);
      sub_10000DC4C(58LL);
      sub_1000291E4();
    }

    sub_10000D3A0(v66);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(20LL, 1LL);
    sub_100048BA0();
    v28._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v28);
    uint64_t v29 = sub_100029328();
    unint64_t v67 = v29;
    uint64_t v30 = sub_10000D63C(v66);
    sub_100150E38((uint64_t)v30);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v66);
    sub_1000102E0((uint64_t)v66, &qword_1001CAAD0);
    sub_10000DC08();
    uint64_t v31 = sub_1000291E4();
    if (qword_1001C7F80 != -1) {
      uint64_t v31 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v32 = static os_log_type_t.debug.getter(v31);
    sub_1000BD1B0(v32, v21);
    swift_bridgeObjectRelease();
    id v33 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v34);
    __int128 v36 = v35;
    if (v5)
    {
      type metadata accessor for FileAttributeKey(0LL);
      sub_100071768();
      v37.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }

    else
    {
      v37.super.Class isa = 0LL;
    }

    v66[0] = 0LL;
    unsigned int v38 = objc_msgSend( v33,  "createDirectoryAtURL:withIntermediateDirectories:attributes:error:",  v36,  v7 & 1,  v37.super.isa,  v66,  v53);

    id v59 = v66[0];
    if (v38)
    {
      sub_100150E38(v58);
      sub_10000D5C0(v58, 0LL, 1LL, v29);
      id v39 = v59;
    }

    else
    {
      id v40 = v66[0];
      uint64_t v41 = _convertNSErrorToError(_:)(v59);

      swift_willThrow(v42);
      *(_OWORD *)(swift_allocObject(v16, v57, v56) + swift_weakDestroy(v0 + 16) = xmmword_100164230;
      unint64_t v67 = v55;
      v66[0] = v54;
      id v43 = (id)AMSLogKey(v54);
      if (v43)
      {
        uint64_t v44 = sub_1000105E8((uint64_t)v43);
        sub_10004877C();
        sub_100020BB4();
        sub_100010564();
        sub_100010608();
        sub_1000104C0(v66);
        uint64_t v45 = sub_100010530();
        sub_1000717D4(v45);
        sub_100150E04((uint64_t)&v63);
        sub_10000DC14();
        uint64_t v65 = &type metadata for String;
        uint64_t v63 = v44;
        id v64 = v33;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(&v63);
        sub_100150E04((uint64_t)&v63);
        sub_10000DC4C(93LL);
        sub_1000291E4();
        sub_100020AB8();
      }

      else
      {
        sub_10001A1BC();
        sub_100010608();
        sub_1000104C0(v66);
        uint64_t v46 = sub_100010530();
        sub_1000717D4(v46);
        sub_1000102E0((uint64_t)&v63, &qword_1001CAAD0);
        sub_10000DC4C(58LL);
        sub_1000291E4();
      }

      sub_10000D3A0(v66);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(28LL, 1LL);
      sub_100048BA0();
      LogMessage.StringInterpolation.appendLiteral(_:)(v47);
      swift_getErrorValue(v41, &v62, &v60);
      uint64_t v48 = v60;
      unint64_t v49 = v61;
      unint64_t v67 = v61;
      uint64_t v50 = sub_10000D63C(v66);
      (*(void (**)(void *, uint64_t, unint64_t))(*(void *)(v49 - 8) + 16LL))(v50, v48, v49);
      sub_10006B8EC((uint64_t)v66);
      sub_1000102E0((uint64_t)v66, &qword_1001CAAD0);
      sub_10000DC08();
      uint64_t v51 = sub_1000291E4();
      uint64_t v52 = static os_log_type_t.error.getter(v51);
      sub_10006B93C(v52);
      swift_errorRelease(v41);
      sub_1000090CC();
      sub_10000D5C0(v58, 1LL, 1LL, v29);
      sub_10000DD84();
    }
  }

id sub_10014FF64()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 fileExistsAtPath:v1];

  return v2;
}

void sub_10014FFA4()
{
  uint64_t v16 = v1;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v2);
  sub_10000DE7C();
  uint64_t v3 = sub_100029328();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000292E4();
  sub_100048BA0();
  URL.init(fileURLWithPath:isDirectory:)();
  uint64_t v5 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v6 = *(void *)(sub_10002C79C() - 8);
  *(_OWORD *)(swift_allocObject( v5,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
              + 3LL * *(void *)(v6 + 72),
  uint64_t v19 = sub_10000D33C(&qword_1001CFD70);
  v18[0] = v3;
  id v7 = (id)AMSLogKey(v19);
  if (v7)
  {
    uint64_t v15 = v0;
    uint64_t v8 = v4;
    uint64_t v9 = sub_1000105E8((uint64_t)v7);
    sub_10004877C();
    sub_100020BB4();
    sub_100010564();
    sub_10000E8C8();
    sub_1000104C0(v18);
    uint64_t v10 = sub_100010530();
    sub_10004896C(v10);
    sub_100150E04((uint64_t)v17);
    sub_10000DC14();
    uint64_t v17[3] = &type metadata for String;
    v17[0] = v9;
    v17[1] = 0xD00000000000002FLL;
    uint64_t v4 = v8;
    uint64_t v0 = v15;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v17);
    sub_100150E04((uint64_t)v17);
    sub_10000DC4C(93LL);
    sub_100150DD4();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A1BC();
    sub_10000E8C8();
    sub_1000104C0(v18);
    uint64_t v11 = sub_100010530();
    sub_10004896C(v11);
    sub_1000102E0((uint64_t)v17, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_100150DD4();
  }

  sub_10000D3A0(v18);
  sub_1000105B4(0xD000000000000035LL);
  uint64_t v19 = v3;
  uint64_t v12 = sub_10000D63C(v18);
  sub_100150E58((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  sub_1000487EC();
  uint64_t v13 = sub_1000102E0((uint64_t)v18, &qword_1001CAAD0);
  if (qword_1001C7F80 != -1) {
    uint64_t v13 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v14 = static os_log_type_t.debug.getter(v13);
  sub_10006B93C(v14);
  sub_1000090CC();
  static ClassicDataVaultUtilities.createDataVault(at:for:)(v0, 0x6761676E65736D61LL, 0xEE0064746E656D65LL);
  sub_100150E58(v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
  sub_10000D5C0(v16, 0LL, 1LL, v3);
  sub_10000DD84();
}

unint64_t sub_100150434()
{
  unint64_t result = qword_1001C8E50;
  if (!qword_1001C8E50)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSFileManager);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001C8E50);
  }

  return result;
}

void sub_100150470()
{
  uint64_t v7 = v6;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v8);
  sub_10000DC74();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v9);
  sub_100048A80();
  __chkstk_darwin(v10);
  sub_100150D70();
  sub_1000F04EC();
  __chkstk_darwin(v11);
  sub_100150D90();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v35 - v13;
  id v15 = objc_msgSend((id)objc_opt_self(NSURL), "ams_cachesDirectory");
  if (v15)
  {
    sub_100150E0C((uint64_t)v15);

    sub_100150DCC(v2, v3);
    sub_10000D5C0(v2, 0LL, 1LL, v1);
    uint64_t v16 = sub_100150D54(v2);
    if (!v17)
    {
      sub_100150DCC((uint64_t)v14, v2);
      v18._uint64_t countAndFlagsBits = 0x7363697274654DLL;
      v18._object = (void *)0xE700000000000000LL;
      URL.appendPathComponent(_:)(v18);
      sub_100048BA0();
      v19._uint64_t countAndFlagsBits = 0xD000000000000013LL;
      URL.appendPathComponent(_:)(v19);
      id v20 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_100150DAC();

      sub_100150D54(v0);
      if (v17)
      {
        uint64_t v21 = sub_100150DCC(v7, (uint64_t)v14);
        sub_100150E20(v21, &qword_1001CB180);
      }

      else
      {
        sub_100150DE0(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
        sub_100150DCC(v7, v0);
      }

      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v16 = sub_100150DB8();
  }

  sub_100150E28(v16, &qword_1001CB180);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v22 = sub_10002C79C();
  uint64_t v23 = (_OWORD *)sub_100150D30(v22);
  v23[1] = xmmword_100164230;
  uint64_t v24 = sub_10000D33C(&qword_1001CFD70);
  id v25 = (id)sub_100150DEC(v24);
  if (v25)
  {
    sub_100150E30((uint64_t)v25);
    sub_100072CD4();
    sub_10000DF10();
    sub_100010564();
    sub_10000DC08();
    uint64_t v26 = v38;
    uint64_t v27 = sub_10000D37C(v37, v38);
    sub_10000DC54((uint64_t)v27, v26);
    __int128 v36 = (void *)sub_1000BDA54();
    v35[0] = v26;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC14();
    __int128 v36 = &type metadata for String;
    v35[0] = v2;
    v35[1] = v1;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC4C(93LL);
    sub_10010D368();
    sub_10000DE2C();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v28 = v38;
    uint64_t v29 = sub_10000D37C(v37, v38);
    sub_10000DC54((uint64_t)v29, v28);
    __int128 v36 = (void *)sub_100048E80();
    v35[0] = v28;
    uint64_t v30 = sub_10000DEA4();
    sub_1000B8494(v30, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10010D368();
  }

  sub_10000D3A0(v37);
  uint64_t v31 = sub_1000105B4(0xD00000000000003CLL);
  if (qword_1001C7F80 != -1) {
    uint64_t v31 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v33 = static os_log_type_t.fault.getter(v31, v32);
  sub_10006B93C(v33);
  sub_1000090CC();
  id v34 =  objc_msgSend( objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager"),  "temporaryDirectory");
  sub_100150E50();
  sub_100150DF8();

LABEL_13:
  sub_10000DD84();
}

void sub_1001507E0()
{
  uint64_t v5 = v4;
  sub_10000DE00();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_100048A80();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_100150D70();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100150D90();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v33 - v12;
  id v14 = objc_msgSend((id)objc_opt_self(NSURL), "ams_engagementDirectory");
  if (v14)
  {
    sub_100150E0C((uint64_t)v14);

    sub_100150DCC(v1, v2);
    sub_10000D5C0(v1, 0LL, 1LL, v9);
    uint64_t v15 = sub_100150D54(v1);
    if (!v16)
    {
      sub_100150DCC((uint64_t)v13, v1);
      v17._uint64_t countAndFlagsBits = 0x6144726576726553LL;
      v17._object = (void *)0xEF65686361436174LL;
      URL.appendPathComponent(_:)(v17);
      id v18 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_100150DAC();

      sub_100150D54(v0);
      if (v16)
      {
        uint64_t v19 = sub_100150DCC(v5, (uint64_t)v13);
        sub_100150E20(v19, &qword_1001CB180);
      }

      else
      {
        sub_100150DE0(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
        sub_100150DCC(v5, v0);
      }

      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v15 = sub_100150DB8();
  }

  sub_100150E28(v15, &qword_1001CB180);
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v20 = sub_10002C79C();
  uint64_t v21 = (_OWORD *)sub_100150D30(v20);
  v21[1] = xmmword_100164230;
  uint64_t v22 = sub_10000D33C(&qword_1001CFD70);
  id v23 = (id)sub_100150DEC(v22);
  if (v23)
  {
    sub_100150E30((uint64_t)v23);
    sub_100072CD4();
    sub_10000DF10();
    sub_100010564();
    sub_10000DC08();
    uint64_t v24 = v36;
    id v25 = sub_10000D37C(v35, v36);
    sub_10000DC54((uint64_t)v25, v24);
    id v34 = (void *)sub_1000BDA54();
    v33[0] = v24;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC14();
    id v34 = &type metadata for String;
    v33[0] = v1;
    v33[1] = v9;
    sub_10000DEA4();
    sub_100150D84();
    sub_10000DC4C(93LL);
    sub_10010D368();
    sub_10000DE2C();
  }

  else
  {
    sub_10001A1BC();
    sub_10000DC08();
    uint64_t v26 = v36;
    uint64_t v27 = sub_10000D37C(v35, v36);
    sub_10000DC54((uint64_t)v27, v26);
    id v34 = (void *)sub_100048E80();
    v33[0] = v26;
    uint64_t v28 = sub_10000DEA4();
    sub_1000B8494(v28, &qword_1001CAAD0);
    sub_10000DC4C(58LL);
    sub_10010D368();
  }

  sub_10000D3A0(v35);
  sub_10000E008();
  uint64_t v29 = sub_10000DD38(60LL);
  if (qword_1001C7F80 != -1) {
    uint64_t v29 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v31 = static os_log_type_t.fault.getter(v29, v30);
  sub_10006B93C(v31);
  sub_1000090CC();
  id v32 =  objc_msgSend( objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager"),  "temporaryDirectory");
  sub_100150E50();
  sub_100150DF8();

LABEL_13:
  sub_10000DD84();
}

void sub_100150B4C()
{
  uint64_t v4 = v3;
  uint64_t v29 = v5;
  sub_10000D33C(&qword_1001CB180);
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DE7C();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_10000DE7C();
  uint64_t v14 = v13 - v12;
  sub_100029328();
  sub_1000F04EC();
  __chkstk_darwin(v15);
  sub_100048A9C();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v28 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v28 - v20;
  sub_1001507E0();
  v30[0] = v4;
  v30[0] = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  v30[1] = v22;
  (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v14,  enum case for URL.DirectoryHint.inferFromPath(_:),  v10);
  unint64_t v23 = sub_10004828C();
  URL.appending<A>(path:directoryHint:)(v30, v14, &type metadata for String, v23);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v2 + 8);
  v24(v19, v0);
  id v25 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_100150DAC();

  sub_100150E64(v1, (uint64_t)v21);
  sub_100150D54(v9);
  if (v26)
  {
    uint64_t v27 = sub_100150E64(v29, v1);
    sub_100150E20(v27, &qword_1001CB180);
  }

  else
  {
    v24((char *)v1, v0);
    sub_100150E64(v29, v9);
  }

  sub_10000DD84();
}

uint64_t sub_100150D30(uint64_t a1)
{
  return swift_allocObject( v1,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + 2LL * *(void *)(*(void *)(a1 - 8) + 72LL),
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_100150D54(uint64_t a1)
{
  return sub_1000102D4(a1, 1LL, v1);
}

uint64_t sub_100150D70()
{
  return type metadata accessor for URL(0LL);
}

uint64_t sub_100150D84()
{
  return sub_1000102E0(v1 - 144, v0);
}

  ;
}

void sub_100150DAC()
{
}

uint64_t sub_100150DB8()
{
  return sub_10000D5C0(v1, 1LL, 1LL, v0);
}

uint64_t sub_100150DCC(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100150DD4()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

uint64_t sub_100150DE0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100150DEC(uint64_t a1)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  return AMSLogKey();
}

uint64_t sub_100150DF8()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

uint64_t sub_100150E04(uint64_t a1)
{
  return sub_1000102E0(a1, v1);
}

uint64_t sub_100150E0C(uint64_t a1)
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100150E18(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_100150E20(uint64_t a1, uint64_t *a2)
{
  return sub_1000102E0(v2, a2);
}

uint64_t sub_100150E28(uint64_t a1, uint64_t *a2)
{
  return sub_1000102E0(v2, a2);
}

uint64_t sub_100150E30(uint64_t a1)
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
}

uint64_t sub_100150E38(uint64_t a1)
{
  return v3(a1, v1, v2);
}

uint64_t sub_100150E44()
{
  return sub_1000102E0(v1 - 160, v0);
}

void sub_100150E50()
{
}

uint64_t sub_100150E58@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_100150E64(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

void sub_100150E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v5);
  uint64_t v58 = 0x4449656C646E7562LL;
  unint64_t v59 = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(&v58);
  sub_10015168C();
  sub_10000E854((uint64_t)&v60);
  if (!MetatypeMetadata)
  {
    sub_10001C304();
    goto LABEL_8;
  }

  if ((swift_dynamicCast(&v58, &v63, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_8:
    uint64_t v15 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100067688();
    uint64_t v18 = swift_allocObject(v15, (v17 & ~v16) + 2 * v3, v16 | 7);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v62 = sub_10000D33C(&qword_1001CFE10);
    uint64_t v60 = v2;
    uint64_t v19 = *(void *)(a2 + 32);
    if (v19)
    {
      uint64_t v20 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      sub_10000DC34();
      sub_10000DC08();
      sub_10015164C();
      uint64_t v21 = sub_1000BDA54();
      sub_100151670(v21);
      sub_10001C304();
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v63 = v20;
      uint64_t v64 = v19;
      sub_100029288();
      sub_10001C304();
      uint64_t v22 = 93LL;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v23 = v62;
      uint64_t v24 = sub_10000D37C(&v60, v62);
      uint64_t DynamicType = swift_getDynamicType(v24, v23, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      uint64_t v63 = DynamicType;
      sub_100029288();
      sub_10001C304();
      uint64_t v22 = 58LL;
    }

    sub_10000DC4C(v22);
    sub_10000DC5C();
    sub_100010670();
    uint64_t v26 = sub_1000105B4(0xD000000000000034LL);
    if (qword_1001C7F80 != -1) {
      uint64_t v26 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v27 = static os_log_type_t.error.getter(v26);
    sub_1000BD1B0(v27, v18);
    goto LABEL_22;
  }

  uint64_t v7 = v58;
  unint64_t v6 = v59;
  uint64_t v58 = 1635017060LL;
  unint64_t v59 = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)(&v58);
  sub_10015168C();
  sub_10000E854((uint64_t)&v60);
  if (!MetatypeMetadata)
  {
    sub_10000DE2C();
    sub_10001C304();
LABEL_16:
    uint64_t v28 = sub_10000D33C(&qword_1001C9C70);
    sub_10002C79C();
    sub_100067688();
    uint64_t v31 = swift_allocObject(v28, (v30 & ~v29) + 2 * v3, v29 | 7);
    *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v62 = sub_10000D33C(&qword_1001CFE10);
    uint64_t v60 = v2;
    uint64_t v32 = *(void *)(a2 + 32);
    if (v32)
    {
      uint64_t v33 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      sub_10000DC34();
      sub_10000DC08();
      sub_10015164C();
      uint64_t v34 = sub_1000BDA54();
      sub_100151670(v34);
      sub_10001C304();
      sub_10000DC14();
      uint64_t MetatypeMetadata = &type metadata for String;
      uint64_t v63 = v33;
      uint64_t v64 = v32;
      sub_100029288();
      sub_10001C304();
      uint64_t v35 = 93LL;
    }

    else
    {
      sub_10000DC24();
      sub_10000DC08();
      uint64_t v36 = v62;
      NSDictionary v37 = sub_10000D37C(&v60, v62);
      uint64_t v38 = swift_getDynamicType(v37, v36, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v38);
      uint64_t v63 = v38;
      sub_100029288();
      sub_10001C304();
      uint64_t v35 = 58LL;
    }

    sub_10000DC4C(v35);
    sub_10000DC5C();
    sub_100010670();
    uint64_t v39 = sub_1000105B4(0xD00000000000003ALL);
    if (qword_1001C7F80 != -1) {
      uint64_t v39 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v40 = static os_log_type_t.error.getter(v39);
    sub_1000BD1B0(v40, v31);
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v8 = sub_10000D33C(&qword_1001C8E58);
  if ((swift_dynamicCast(&v58, &v63, (char *)&type metadata for Any + 8, v8, 6LL) & 1) == 0)
  {
    sub_10000DE2C();
    goto LABEL_16;
  }

  uint64_t v56 = v58;
  uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v10 = sub_10002C79C();
  uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
        + 2LL * *(void *)(*(void *)(v10 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v62 = sub_10000D33C(&qword_1001CFE10);
  uint64_t v60 = v2;
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12)
  {
    uint64_t v55 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    sub_10000DC34();
    sub_10000DC08();
    sub_10015164C();
    uint64_t v13 = sub_1000BDA54();
    sub_100151670(v13);
    sub_10001C304();
    sub_10000DC14();
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v63 = v55;
    uint64_t v64 = v12;
    sub_100029288();
    sub_10001C304();
    uint64_t v14 = 93LL;
  }

  else
  {
    sub_10000DC24();
    sub_10000DC08();
    sub_10015164C();
    uint64_t v41 = sub_1000BDA54();
    sub_100151670(v41);
    sub_10001C304();
    uint64_t v14 = 58LL;
  }

  sub_10000DC4C(v14);
  sub_10000DC5C();
  sub_100010670();
  uint64_t v42 = LogMessage.init(stringLiteral:)(0xD00000000000001ELL);
  if (qword_1001C7F80 != -1) {
    uint64_t v42 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
  }
  uint64_t v43 = static os_log_type_t.default.getter(v42);
  sub_1000BD1B0(v43, v11);
  swift_bridgeObjectRelease();
  uint64_t v44 = sub_10000D33C((uint64_t *)&unk_1001C9C80);
  uint64_t inited = swift_initStackObject(v44, &v57);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  uint64_t v60 = 49LL;
  unint64_t v61 = 0xE100000000000000LL;
  sub_100151680((uint64_t)&v60);
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 7sub_10000D3A0(v0 + 2) = 22LL;
  uint64_t v60 = 50LL;
  unint64_t v61 = 0xE100000000000000LL;
  sub_100151680((uint64_t)&v60);
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 15sub_10000D3A0(v0 + 2) = v6;
  uint64_t v60 = 7565409LL;
  unint64_t v61 = 0xE300000000000000LL;
  swift_bridgeObjectRetain();
  sub_100151680((uint64_t)&v60);
  *(void *)(inited + 240) = v8;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = v56;
  Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  if (qword_1001C7F10 != -1) {
    swift_once(&qword_1001C7F10, sub_10001CF94);
  }
  uint64_t v46 = qword_1001C90F0;
  sub_10000DAA0(0LL, (unint64_t *)&unk_1001C9C90, &OBJC_CLASS___AMSPushPayload_ptr);
  swift_unknownObjectRetain(v46);
  id v47 = sub_100030C28();
  id v48 = [objc_allocWithZone(AMSPushConfiguration) init];
  sub_10000DAA0(0LL, (unint64_t *)&unk_1001CFE18, &OBJC_CLASS___AMSUserNotification_ptr);
  id v49 = v47;
  id v50 = v48;
  id v51 = sub_1001515D0(v49, v48);
  uint64_t v52 = (void *)objc_opt_self(&OBJC_CLASS___AMSUserNotificationCenter);
  NSString v53 = String._bridgeToObjectiveC()();
  sub_10000DE2C();
  id v54 = [v52 postNotification:v51 bag:v46 centerBundleId:v53];
  swift_unknownObjectRelease(v46);
}

id sub_1001515D0(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithPayload:a1 andConfig:a2];

  return v5;
}

uint64_t type metadata accessor for UserNotificationAction()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd22UserNotificationAction);
}

uint64_t sub_10015164C()
{
  uint64_t v1 = *(void *)(v0 - 136);
  uint64_t v2 = sub_10000D37C((void *)(v0 - 160), v1);
  return swift_getDynamicType(v2, v1, 1LL);
}

uint64_t sub_100151670(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  *(void *)(v2 - 120) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 120);
}

uint64_t sub_100151680(uint64_t a1)
{
  return AnyHashable.init<A>(_:)(a1);
}

void sub_10015168C()
{
}

void sub_10015169C()
{
  if (qword_1001C8000 != -1) {
    swift_once(&qword_1001C8000, sub_1000BD86C);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v3 = *(void *)(sub_10002C79C() - 8);
  uint64_t v4 = sub_1000BD98C( ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
       + 2LL * *(void *)(v3 + 72),
         *(unsigned __int8 *)(v3 + 80));
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v5 = sub_10000D33C((uint64_t *)&unk_1001CFE28);
  id v6 = (id)sub_1001534C8(v5, (uint64_t)&unk_1001B3E08);
  if (v6)
  {
    uint64_t v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    swift_bridgeObjectRetain(v9);
    sub_100010564();
    sub_10000DC08();
    uint64_t v10 = v19;
    uint64_t v11 = sub_10000D37C(v18, (uint64_t)v19);
    sub_10000DC54((uint64_t)v11, (uint64_t)v10);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_10000DC08();
    uint64_t v12 = v19;
    uint64_t v13 = sub_10000D37C(v18, (uint64_t)v19);
    sub_10000DC54((uint64_t)v13, (uint64_t)v12);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10001A21C(32LL);
  v14._object = (void *)0x80000001001790E0LL;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v14);
  uint64_t v19 = &type metadata for String;
  sub_1001534A8();
  sub_10001065C();
  sub_10003AD7C();
  sub_10000DC4C(41LL);
  uint64_t v15 = sub_10000DC5C();
  uint64_t v16 = static os_log_type_t.default.getter(v15);
  sub_1000BD1B0(v16, v4);
  swift_bridgeObjectRelease();
  uint64_t v17 = String.utf8CString.getter(v1, v0);
  xpc_activity_unregister((const char *)(v17 + 32));
  swift_release(v17);
  sub_10000DD84();
}

BOOL sub_100151904()
{
  uint64_t v1 = v0;
  type metadata accessor for LogMessage.StringInterpolation(0LL);
  sub_10000DC64();
  __chkstk_darwin(v2);
  if (qword_1001C8000 != -1) {
    swift_once(&qword_1001C8000, sub_1000BD86C);
  }
  uint64_t v3 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v4 = *(void *)(sub_10002C79C() - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v33 = v3;
  uint64_t v31 = v6 | 7;
  uint64_t v32 = ((v6 + 32) & ~v6) + 2 * v5;
  uint64_t v7 = swift_allocObject(v3, v32, v6 | 7);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  sub_1001534E8((uint64_t)&unk_1001B3E08);
  uint64_t v8 = sub_10000DED8();
  id v9 = (id)AMSLogKey(v8);
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v12 = v11;

    swift_bridgeObjectRetain(v12);
    sub_100010564();
    sub_1000104F0();
    sub_100037DAC();
    uint64_t v13 = sub_100010530();
    sub_100067388(v13);
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10001A298();
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_1000104F0();
    sub_100037DAC();
    uint64_t v14 = sub_100010530();
    sub_100067388(v14);
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10001A298();
  }

  sub_1000677AC();
  sub_10001A21C(31LL);
  v15._object = (void *)0x8000000100179090LL;
  v15._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v15);
  sub_10000DED8();
  sub_10001065C();
  sub_10003AD7C();
  sub_10000DC4C(41LL);
  uint64_t v16 = sub_10001A298();
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  sub_1000BD1B0(v17, v7);
  swift_bridgeObjectRelease();
  BOOL v18 = xpc_activity_set_state(v1, 5LL);
  if (!v18)
  {
    uint64_t v19 = swift_allocObject(v33, v32, v31);
    *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    sub_1001534E8((uint64_t)&unk_1001B3E08);
    uint64_t v20 = sub_10000DED8();
    id v21 = (id)AMSLogKey(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      uint64_t v24 = v23;

      swift_bridgeObjectRetain(v24);
      sub_100010564();
      sub_1000104F0();
      sub_100037DAC();
      uint64_t v25 = sub_100010530();
      sub_100067388(v25);
      sub_100037DE0();
      sub_10000DC14();
      sub_10000DEA4();
      sub_100037DE0();
      sub_10000DC4C(93LL);
      sub_10001A298();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001A21C(1LL);
      sub_1000104F0();
      sub_100037DAC();
      uint64_t v26 = sub_100010530();
      sub_100067388(v26);
      sub_100037DE0();
      sub_10000DC4C(58LL);
      sub_10001A298();
    }

    sub_1000677AC();
    sub_10001A21C(47LL);
    v27._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v27._object = (void *)0x80000001001790B0LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v27);
    sub_10000DED8();
    sub_10001065C();
    sub_10003AD7C();
    sub_10000DC4C(41LL);
    uint64_t v28 = sub_10001A298();
    uint64_t v29 = static os_log_type_t.error.getter(v28);
    sub_1000BD1B0(v29, v19);
    swift_bridgeObjectRelease();
  }

  return v18;
}

uint64_t sub_100151CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100151D28(_xpc_activity_s *a1)
{
  unint64_t state = xpc_activity_get_state(a1);
  if (state >= 6) {
    return 0LL;
  }
  else {
    return (0x40203050601uLL >> (8 * state));
  }
}

void sub_100151D58()
{
  uint64_t v3 = v2;
  uint64_t v25 = v4;
  uint64_t v6 = v5;
  sub_1000BD94C();
  sub_10000DC64();
  __chkstk_darwin(v7);
  sub_10000DC74();
  if (qword_1001C8000 != -1) {
    swift_once(&qword_1001C8000, sub_1000BD86C);
  }
  uint64_t v8 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v9 = *(void *)(sub_10002C79C() - 8);
  *(_OWORD *)(swift_allocObject( v8,  ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
              + 2LL * *(void *)(v9 + 72),
  uint64_t v10 = sub_10000D33C((uint64_t *)&unk_1001CFE28);
  id v11 = (id)sub_1001534C8(v10, (uint64_t)&unk_1001B3E08);
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v24 = v1;
    uint64_t v13 = v3;
    uint64_t v15 = v14;

    swift_bridgeObjectRetain(v15);
    sub_100010564();
    sub_10000DC08();
    uint64_t v16 = v27;
    uint64_t v17 = sub_10000D37C(v26, (uint64_t)v27);
    sub_10000DC54((uint64_t)v17, (uint64_t)v16);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v3 = v13;
    uint64_t v1 = v24;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_10000DC08();
    BOOL v18 = v27;
    uint64_t v19 = sub_10000D37C(v26, (uint64_t)v27);
    sub_10000DC54((uint64_t)v19, (uint64_t)v18);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10001A21C(22LL);
  sub_1001534B4((uint64_t)"Checking in activity: ");
  Swift::String v27 = &type metadata for String;
  sub_1001534A8();
  sub_10001065C();
  sub_10003AD7C();
  sub_10000DC08();
  uint64_t v20 = sub_10000DC5C();
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  sub_1001534DC(v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_allocObject(&unk_1001B3C80, 108LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v22 + 24) = v0;
  *(void *)(v22 + 3sub_10000D3A0(v0 + 2) = v25;
  *(void *)(v22 + 40) = v3;
  __int128 v23 = v6[1];
  *(_OWORD *)(v22 + 48) = *v6;
  *(_OWORD *)(v22 + 64) = v23;
  *(_OWORD *)(v22 + 80) = v6[2];
  *(_OWORD *)(v22 + 9sub_10000D3A0(v0 + 2) = *(_OWORD *)((char *)v6 + 44);
  swift_bridgeObjectRetain(v0);
  swift_retain(v3);
  sub_100152F84(v1, v0, XPC_ACTIVITY_CHECK_IN, (uint64_t)sub_100152F74, v22);
  swift_release(v22);
  sub_10000DD84();
}

void sub_100152004()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_1000BD94C();
  sub_10000DC64();
  __chkstk_darwin(v6);
  sub_10000DC74();
  if (qword_1001C8000 != -1) {
    swift_once(&qword_1001C8000, sub_1000BD86C);
  }
  sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = *(void *)(sub_10002C79C() - 8);
  *(_OWORD *)(sub_1000BD98C( ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
              + 2LL * *(void *)(v7 + 72),
  uint64_t v8 = sub_10000D33C((uint64_t *)&unk_1001CFE28);
  id v9 = (id)sub_1001534C8(v8, (uint64_t)&unk_1001B3E08);
  if (v9)
  {
    uint64_t v10 = v9;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v23 = v3;
    uint64_t v11 = v5;
    uint64_t v13 = v12;

    swift_bridgeObjectRetain(v13);
    sub_100010564();
    sub_10000DC08();
    uint64_t v14 = v25;
    uint64_t v15 = sub_10000D37C(v24, (uint64_t)v25);
    sub_10000DC54((uint64_t)v15, (uint64_t)v14);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC14();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(93LL);
    sub_10000DC5C();
    uint64_t v5 = v11;
    uint64_t v3 = v23;
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_10001A21C(1LL);
    sub_10000DC08();
    uint64_t v16 = v25;
    uint64_t v17 = sub_10000D37C(v24, (uint64_t)v25);
    sub_10000DC54((uint64_t)v17, (uint64_t)v16);
    swift_getMetatypeMetadata();
    sub_10000DEA4();
    sub_100037DE0();
    sub_10000DC4C(58LL);
    sub_10000DC5C();
  }

  sub_1000677AC();
  sub_10001A21C(22LL);
  sub_1001534B4((uint64_t)"Registering activity: ");
  uint64_t v25 = &type metadata for String;
  sub_1001534A8();
  sub_10001065C();
  sub_10003AD7C();
  sub_10000DC08();
  uint64_t v18 = sub_10000DC5C();
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  sub_1001534DC(v19);
  swift_bridgeObjectRelease();
  sub_100153594();
  uint64_t v21 = v20;
  uint64_t v22 = (void *)swift_allocObject(&unk_1001B3CF8, 48LL, 7LL);
  v22[2] = v1;
  void v22[3] = v0;
  v22[4] = v5;
  v22[5] = v3;
  swift_bridgeObjectRetain(v0);
  swift_retain(v3);
  sub_100152F84(v1, v0, v21, (uint64_t)sub_100153170, (uint64_t)v22);
  swift_unknownObjectRelease(v21);
  swift_release(v22);
  sub_10000DD84();
}

uint64_t sub_100152294( _xpc_activity_s *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_xpc_activity_s *, uint64_t, unint64_t, BOOL), uint64_t a7)
{
  uint64_t v102 = a7;
  uint64_t v103 = a6;
  uint64_t v105 = a4;
  uint64_t v106 = a5;
  __int128 v115 = a1;
  uint64_t v116 = a2;
  uint64_t v100 = type metadata accessor for OSSignpostError(0LL);
  uint64_t v108 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v107 = &v97[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v97[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v117 = type metadata accessor for OSSignposter(0LL);
  uint64_t v12 = *(void *)(v117 - 8);
  uint64_t v13 = __chkstk_darwin(v117);
  uint64_t v15 = &v97[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v97[-v17];
  __chkstk_darwin(v16);
  uint64_t v20 = &v97[-v19];
  uint64_t v21 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v110 = &v97[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v111 = &v97[-v26];
  __chkstk_darwin(v25);
  uint64_t v28 = &v97[-v27];
  if (qword_1001C8000 != -1) {
    swift_once(&qword_1001C8000, sub_1000BD86C);
  }
  uint64_t v109 = v15;
  OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB80 + 16));
  NSString v29 = String._bridgeToObjectiveC()();
  uint64_t v30 = OSSignposter.logHandle.getter(v29);
  OSSignpostID.init(log:object:)(v30, v29);
  __int128 v114 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v114(v20, v117);
  OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB80 + 16));
  uint64_t v31 = v115;
  swift_unknownObjectRetain_n(v115, 4LL);
  uint64_t v32 = swift_bridgeObjectRetain_n(a3, 4LL);
  uint64_t v33 = (os_log_s *)OSSignposter.logHandle.getter(v32);
  int v34 = static os_signpost_type_t.begin.getter();
  char v35 = OS_os_log.signpostsEnabled.getter();
  uint64_t v112 = v22;
  uint64_t v113 = v21;
  uint64_t v36 = v31;
  NSDictionary v37 = v18;
  unint64_t v101 = a3;
  if ((v35 & 1) != 0)
  {
    uint64_t v99 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16);
    uint64_t v38 = v111;
    v99(v111, v28, v21);
    uint64_t v39 = swift_slowAlloc(22LL, -1LL);
    uint64_t v104 = (uint64_t)v37;
    uint64_t v40 = v39;
    uint64_t v41 = swift_slowAlloc(64LL, -1LL);
    int v98 = v34;
    uint64_t v42 = v41;
    v121[0] = v41;
    *(_DWORD *)uint64_t v40 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v118 = sub_100064014(v116, a3, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v40 + 4, v40 + 12);
    swift_unknownObjectRelease_n(v36, 2LL);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v40 + 1sub_10000D3A0(v0 + 2) = 2080;
    LOBYTE(v118) = sub_100151D28(v36);
    uint64_t v43 = String.init<A>(describing:)(&v118, &unk_1001B3D90);
    uint64_t v118 = sub_100064014(v43, v44, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_unknownObjectRelease_n(v36, 2LL);
    uint64_t v21 = v113;
    uint64_t v45 = swift_bridgeObjectRelease();
    os_signpost_id_t v46 = OSSignpostID.rawValue.getter(v45);
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  (os_signpost_type_t)v98,  v46,  "Activity",  "%s beginning with %s state",  (uint8_t *)v40,  0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v47 = v40;
    NSDictionary v37 = (_BYTE *)v104;
    swift_slowDealloc(v47, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v112 + 8))(v38, v21);
    id v48 = v99;
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 4LL);
    swift_unknownObjectRelease_n(v36, 4LL);

    id v48 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v22 + 16);
    uint64_t v38 = v111;
  }

  unint64_t v111 = v28;
  v48(v38, v28, v21);
  uint64_t v49 = type metadata accessor for OSSignpostIntervalState(0LL);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  uint64_t v50 = OSSignpostIntervalState.init(id:isOpen:)(v38, 1LL);
  v114(v37, v117);
  uint64_t v104 = qword_1001DBB80;
  uint64_t v51 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v52 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
  uint64_t v53 = swift_allocObject( v51,  ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
        + 2LL * *(void *)(v52 + 72),
          *(unsigned __int8 *)(v52 + 80) | 7LL);
  *(_OWORD *)(v53 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
  uint64_t v122 = (void *)sub_10000D33C((uint64_t *)&unk_1001CFE28);
  v121[0] = (uint64_t)&unk_1001B3E08;
  id v54 = (id)AMSLogKey(v122);
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    uint64_t v58 = v57;

    swift_bridgeObjectRetain(v58);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
    v59._uint64_t countAndFlagsBits = 0LL;
    v59._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v59);
    uint64_t v60 = v122;
    unint64_t v61 = sub_10000D37C(v121, (uint64_t)v122);
    uint64_t DynamicType = swift_getDynamicType(v61, v60, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    uint64_t v118 = DynamicType;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v118);
    sub_10000E888((uint64_t)&v118);
    v63._uint64_t countAndFlagsBits = 5972026LL;
    v63._object = (void *)0xE300000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v63);
    uint64_t MetatypeMetadata = &type metadata for String;
    uint64_t v118 = v56;
    v119[0] = v58;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v118);
    sub_10000E888((uint64_t)&v118);
    v64._uint64_t countAndFlagsBits = 93LL;
    v64._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v64);
    LogMessage.init(stringInterpolation:)(v11);
    swift_bridgeObjectRelease();
  }

  else
  {
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
    v65._uint64_t countAndFlagsBits = 0LL;
    v65._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v65);
    uint64_t v66 = v122;
    unint64_t v67 = sub_10000D37C(v121, (uint64_t)v122);
    uint64_t v68 = swift_getDynamicType(v67, v66, 1LL);
    uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
    uint64_t v118 = v68;
    LogMessage.StringInterpolation.appendInterpolation(safe:)(&v118);
    sub_10000E888((uint64_t)&v118);
    v69._uint64_t countAndFlagsBits = 58LL;
    v69._object = (void *)0xE100000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v69);
    LogMessage.init(stringInterpolation:)(v11);
  }

  uint64_t v70 = v108;
  uint64_t v71 = v109;
  uint64_t v72 = v116;
  sub_10000D3A0(v121);
  LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(24LL, 2LL);
  v73._object = (void *)0x8000000100179050LL;
  v73._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v73);
  uint64_t v122 = &type metadata for String;
  v121[0] = v105;
  v121[1] = v106;
  swift_bridgeObjectRetain(v106);
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v121);
  sub_10000E888((uint64_t)v121);
  v74._uint64_t countAndFlagsBits = 0x203A657461747320LL;
  v74._object = (void *)0xE800000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v74);
  uint64_t v75 = v115;
  char v76 = sub_100151D28(v115);
  uint64_t v122 = &unk_1001B3D90;
  LOBYTE(v121[0]) = v76;
  LogMessage.StringInterpolation.appendInterpolation(safe:)(v121);
  sub_10000E888((uint64_t)v121);
  v77._uint64_t countAndFlagsBits = 0LL;
  v77._object = (void *)0xE000000000000000LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v77);
  uint64_t v78 = LogMessage.init(stringInterpolation:)(v11);
  uint64_t v79 = static os_log_type_t.default.getter(v78);
  sub_1000BD1B0(v79, v53);
  swift_bridgeObjectRelease();
  if (sub_100151D28(v75) == 5 || sub_100151D28(v75) == 4)
  {
    BOOL v80 = sub_100151D28(v75) == 5;
    v103(v75, v72, v101, v80);
  }

  uint64_t v81 = OSSignposter.init(logHandle:)(*(id *)(qword_1001DBB80 + 16));
  uint64_t v82 = (os_log_s *)OSSignposter.logHandle.getter(v81);
  uint64_t v83 = v110;
  uint64_t v84 = OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v85 = static os_signpost_type_t.end.getter(v84);
  char v86 = OS_os_log.signpostsEnabled.getter();
  uint64_t v87 = v113;
  uint64_t v88 = v107;
  uint64_t v89 = v111;
  if ((v86 & 1) != 0)
  {
    uint64_t v90 = swift_retain(v50);
    checkForErrorAndConsumeState(state:)(v90);
    swift_release(v50);
    uint64_t v91 = v100;
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v70 + 88))(v88, v100) == enum case for OSSignpostError.doubleEnd(_:))
    {
      uint64_t v92 = "[Error] Interval already ended";
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v88, v91);
      uint64_t v92 = "";
    }

    uint64_t v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v93 = 0;
    uint64_t v83 = v110;
    os_signpost_id_t v94 = OSSignpostID.rawValue.getter(v93);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v82, v85, v94, "Activity", v92, v93, 2u);
    swift_slowDealloc(v93, -1LL, -1LL);
    uint64_t v89 = v111;
  }

  uint64_t v95 = *(void (**)(_BYTE *, uint64_t))(v112 + 8);
  v95(v83, v87);
  v114(v71, v117);
  swift_release(v50);
  return ((uint64_t (*)(_BYTE *, uint64_t))v95)(v89, v87);
}

void sub_100152BD0( _xpc_activity_s *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_xpc_activity_s *, uint64_t, unint64_t, BOOL), uint64_t a7, uint64_t a8)
{
  uint64_t v16 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  xpc_object_t v19 = xpc_activity_copy_criteria(a1);
  if (v19)
  {
    swift_unknownObjectRelease(v19);
    sub_100152294(a1, a2, a3, a4, a5, a6, a7);
  }

  else
  {
    if (qword_1001C8000 != -1) {
      swift_once(&qword_1001C8000, sub_1000BD86C);
    }
    void v45[3] = qword_1001DBB80;
    uint64_t v20 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v21 = *(void *)(type metadata accessor for LogMessage(0LL) - 8);
    uint64_t v22 = *(void *)(v21 + 72);
    uint64_t v23 = *(unsigned __int8 *)(v21 + 80);
    v45[2] = v22;
    uint64_t v24 = swift_allocObject(v20, ((v23 + 32) & ~v23) + 2 * v22, v23 | 7);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_100164230;
    uint64_t v49 = (void *)sub_10000D33C((uint64_t *)&unk_1001CFE28);
    v48[0] = &unk_1001B3E08;
    id v25 = (id)AMSLogKey(v49);
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v45[1] = a8;
      uint64_t v29 = v28;

      swift_bridgeObjectRetain(v29);
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v30._uint64_t countAndFlagsBits = 0LL;
      v30._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v30);
      uint64_t v31 = v49;
      uint64_t v32 = sub_10000D37C(v48, (uint64_t)v49);
      uint64_t DynamicType = swift_getDynamicType(v32, v31, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v46[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v34._uint64_t countAndFlagsBits = 5972026LL;
      v34._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v34);
      uint64_t MetatypeMetadata = &type metadata for String;
      v46[0] = v27;
      v46[1] = v29;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v35._uint64_t countAndFlagsBits = 93LL;
      v35._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v35);
      LogMessage.init(stringInterpolation:)(v18);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v36._uint64_t countAndFlagsBits = 0LL;
      v36._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v36);
      NSDictionary v37 = v49;
      uint64_t v38 = sub_10000D37C(v48, (uint64_t)v49);
      uint64_t v39 = swift_getDynamicType(v38, v37, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata();
      v46[0] = v39;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v46);
      sub_10000E888((uint64_t)v46);
      v40._uint64_t countAndFlagsBits = 58LL;
      v40._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v40);
      LogMessage.init(stringInterpolation:)(v18);
    }

    sub_10000D3A0(v48);
    LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(50LL, 1LL);
    v41._object = (void *)0x8000000100179010LL;
    v41._uint64_t countAndFlagsBits = 0xD000000000000032LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v41);
    uint64_t v49 = &type metadata for String;
    v48[0] = a4;
    v48[1] = a5;
    swift_bridgeObjectRetain(a5);
    LogMessage.StringInterpolation.appendInterpolation(safe:)(v48);
    sub_10000E888((uint64_t)v48);
    v42._uint64_t countAndFlagsBits = 0LL;
    v42._object = (void *)0xE000000000000000LL;
    LogMessage.StringInterpolation.appendLiteral(_:)(v42);
    uint64_t v43 = LogMessage.init(stringInterpolation:)(v18);
    uint64_t v44 = static os_log_type_t.debug.getter(v43);
    sub_1000BD1B0(v44, v24);
    swift_bridgeObjectRelease();
    sub_100152004();
  }

uint64_t sub_100152F5C()
{
  return sub_100153128( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release,  108LL);
}

void sub_100152F74(_xpc_activity_s *a1, uint64_t a2, unint64_t a3)
{
}

void sub_100152F84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_1001B3CA8, 48LL, 7LL);
  v10[2] = a4;
  void v10[3] = a5;
  v10[4] = a1;
  v10[5] = a2;
  v14[4] = sub_1001530F0;
  uint64_t v15 = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_100151CE0;
  v14[3] = &unk_1001B3CC0;
  uint64_t v11 = _Block_copy(v14);
  uint64_t v12 = v15;
  swift_retain(a5);
  swift_bridgeObjectRetain(a2);
  swift_release(v12);
  uint64_t v13 = String.utf8CString.getter(a1, a2);
  xpc_activity_register((const char *)(v13 + 32), a3, v11);
  swift_release(v13);
  _Block_release(v11);
}

uint64_t sub_100153074( uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1001530DC()
{
  return sub_1001534D4( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001530F0(uint64_t a1)
{
  return sub_100153074( a1,  *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_1001530FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015310C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100153114()
{
  return sub_1001534D4( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_100153128(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  return swift_deallocObject(v3, a3, 7LL);
}

uint64_t sub_100153170(_xpc_activity_s *a1, uint64_t a2, unint64_t a3)
{
  return sub_100152294( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void (**)(_xpc_activity_s *, uint64_t, unint64_t, BOOL))(v3 + 32),  *(void *)(v3 + 40));
}

uint64_t sub_10015317C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1001531C8 + 4 * byte_10016A1D5[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001531FC + 4 * byte_10016A1D0[v4]))();
}

uint64_t sub_1001531FC(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153204(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x10015320CLL);
  }
  return result;
}

uint64_t sub_100153218(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100153220LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100153224(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_10015322C(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for XPCActivity.State()
{
}

uint64_t sub_100153248(void *a1)
{
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *sub_100153270(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  a1[2] = v5;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *sub_1001532AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *sub_100153310(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

void type metadata accessor for XPCActivity()
{
}

uint64_t sub_100153360(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1001533AC + 4 * byte_10016A1DF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001533E0 + 4 * byte_10016A1DA[v4]))();
}

uint64_t sub_1001533E0(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_1001533E8(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x1001533F0LL);
  }
  return result;
}

uint64_t sub_1001533FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100153404LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100153408(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153410(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for XPCActivity.RegistrationType()
{
}

unint64_t sub_10015342C()
{
  unint64_t result = qword_1001CFE38;
  if (!qword_1001CFE38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A270, &unk_1001B3EA0);
    atomic_store(result, (unint64_t *)&qword_1001CFE38);
  }

  return result;
}

unint64_t sub_10015346C()
{
  unint64_t result = qword_1001CFE40;
  if (!qword_1001CFE40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A2D8, &unk_1001B3D90);
    atomic_store(result, (unint64_t *)&qword_1001CFE40);
  }

  return result;
}

uint64_t sub_1001534A8()
{
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = v1;
  *(void *)(v2 - 104) = v0;
  return swift_bridgeObjectRetain(v0);
}

void sub_1001534B4(uint64_t a1@<X8>)
{
  v1._object = (void *)((a1 - 32) | 0x8000000000000000LL);
  v1._uint64_t countAndFlagsBits = 0xD000000000000016LL;
  LogMessage.StringInterpolation.appendLiteral(_:)(v1);
}

uint64_t sub_1001534C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 - 88) = a1;
  *(void *)(v2 - 11sub_10000D3A0(v0 + 2) = a2;
  return AMSLogKey();
}

uint64_t sub_1001534D4(void (*a1)(void), void (*a2)(void))
{
  return sub_100153128(a1, a2, 48LL);
}

uint64_t sub_1001534DC(uint64_t a1)
{
  return sub_1000BD1B0(a1, v1);
}

uint64_t sub_1001534E8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v3 - 96) = v1;
  *(void *)(v3 - 88) = a1;
  return swift_unknownObjectRetain(v2);
}

uint64_t sub_1001534F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100153528 + 4 * byte_10016A300[a1]))( 0x746C7561666564LL,  0xE700000000000000LL);
}

uint64_t sub_100153528()
{
  return 65LL;
}

uint64_t sub_100153534()
{
  return 66LL;
}

uint64_t sub_100153540()
{
  return 67LL;
}

unint64_t sub_10015354C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001A6D00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

void sub_100153594()
{
  xpc_object_t v1 = xpc_dictionary_create(0LL, 0LL, 0LL);
  Swift::String v2 = v1;
  if (*(_BYTE *)(v0 + 58)) {
    unint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  }
  else {
    unint64_t v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  }
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  if (*(_BYTE *)(v0 + 57))
  {
    if (*(_BYTE *)(v0 + 57) != 1) {
      goto LABEL_12;
    }
    if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
    {
      sub_100153D20(v4, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
      uint64_t v5 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
      if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
      {
        BOOL v6 = 0;
LABEL_11:
        xpc_dictionary_set_BOOL(v2, v5, v6);
LABEL_12:
        __asm { BR              X10 }
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else if (XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    BOOL v6 = 1;
    sub_100153D20(v4, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
    uint64_t v5 = (const char *)XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
    if (XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY) {
      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    JUMPOUT(0x100153864LL);
  }

  __break(1u);
  goto LABEL_16;
}

void sub_100153878(char *a1)
{
}

void sub_100153884()
{
}

void sub_10015388C(uint64_t a1)
{
}

void sub_100153894(uint64_t a1)
{
}

unint64_t sub_10015389C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10015354C(*a1);
  *a2 = result;
  return result;
}

void sub_1001538C8(uint64_t *a1@<X8>)
{
  *a1 = sub_1001534F4(*v1);
  a1[1] = v3;
  sub_100009044();
}

uint64_t sub_1001538EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001CFE50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100153934(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100153980 + 4 * byte_10016A309[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001539B4 + 4 * byte_10016A304[v4]))();
}

uint64_t sub_1001539B4(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_1001539BC(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x1001539C4LL);
  }
  return result;
}

uint64_t sub_1001539D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001539D8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001539DC(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_1001539E4(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for DataClass()
{
}

unint64_t sub_100153A00()
{
  unint64_t result = qword_1001CFE58;
  if (!qword_1001CFE58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A3CC, &unk_1001B3F68);
    atomic_store(result, (unint64_t *)&qword_1001CFE58);
  }

  return result;
}

uint64_t sub_100153A3C(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100153A88 + 4 * byte_10016A313[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100153ABC + 4 * byte_10016A30E[v4]))();
}

uint64_t sub_100153ABC(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153AC4(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100153ACCLL);
  }
  return result;
}

uint64_t sub_100153AD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100153AE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100153AE4(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153AEC(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for XPCActivityCriteria.Priority()
{
}

__n128 sub_100153B04(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 3sub_10000D3A0(v0 + 2) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100153B20(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && a1[60])
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *a1;
      BOOL v4 = v3 >= 2;
      int v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4) {
        int v2 = -1;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t sub_100153B6C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 60) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 60) = 0;
    }
    if (a2) {
      *(_BYTE *)__n128 result = a2 + 1;
    }
  }

  return result;
}

void type metadata accessor for XPCActivityCriteria()
{
}

uint64_t sub_100153BCC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = 1;
  }
  else {
    LODWORD(sub_10013A534(v1, v2, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100153C18 + 4 * byte_10016A31D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100153C4C + 4 * byte_10016A318[v4]))();
}

uint64_t sub_100153C4C(uint64_t result)
{
  *(_BYTE *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153C54(uint64_t result, int a2)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (a2) {
    JUMPOUT(0x100153C5CLL);
  }
  return result;
}

uint64_t sub_100153C68(uint64_t result, int a2)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = 0;
  if (!a2) {
    JUMPOUT(0x100153C70LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_100153C74(uint64_t result)
{
  *(_DWORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

uint64_t sub_100153C7C(uint64_t result)
{
  *(_WORD *)(result + setenv("JavaScriptCoreUseJIT", "0", 1) = v1;
  return result;
}

void type metadata accessor for XPCActivityCriteria.NetworkRequirement()
{
}

unint64_t sub_100153C98()
{
  unint64_t result = qword_1001CFE60;
  if (!qword_1001CFE60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A454, &unk_1001B4128);
    atomic_store(result, (unint64_t *)&qword_1001CFE60);
  }

  return result;
}

unint64_t sub_100153CD8()
{
  unint64_t result = qword_1001CFE68;
  if (!qword_1001CFE68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016A4BC, &unk_1001B3FF8);
    atomic_store(result, (unint64_t *)&qword_1001CFE68);
  }

  return result;
}

void sub_100153D14(double a1, uint64_t a2, const char *a3)
{
}

void sub_100153D20(uint64_t a1, const char *a2)
{
}

  ;
}

uint64_t sub_100153D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  type metadata accessor for Worker();
  uint64_t v4 = *(void *)(a2 + 32);
  swift_retain(v4);
  char v5 = sub_100103CB4();
  swift_release(v4);
  uint64_t v6 = 0LL;
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = v2 - 1;
    while (v7 != v6)
    {
      uint64_t v8 = *(void *)(a2 + 40 + 8 * v6);
      swift_retain(v8);
      char v9 = sub_100103CB4();
      swift_release(v8);
      ++v6;
      if ((v9 & 1) != 0) {
        return v6;
      }
    }

    return 0LL;
  }

  return v6;
}

unint64_t sub_100153E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    return 0LL;
  }
  while (1)
  {
    sub_100063D14(0LL, (a2 & 0xC000000000000001LL) == 0);
    id v5 = (a2 & 0xC000000000000001LL) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2)
       : *(id *)(a2 + 32);
    uint64_t v6 = v5;
    sub_10000DAA0(0LL, &qword_1001CFF30, &OBJC_CLASS___NSXPCConnection_ptr);
    char v7 = static NSObject.== infix(_:_:)(v6, a1);

    if ((v7 & 1) != 0) {
      return 0LL;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      unint64_t v8 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if (v8 == v4) {
        return 0LL;
      }
      if ((a2 & 0xC000000000000001LL) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }

      else
      {
        if ((v8 & 0x8000000000000000LL) != 0) {
          goto LABEL_19;
        }
        if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_20;
        }
        id v10 = *(id *)(a2 + 32 + 8 * v8);
      }

      uint64_t v11 = v10;
      char v12 = static NSObject.== infix(_:_:)(v10, a1);

      if ((v12 & 1) != 0) {
        return v8;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (!v4) {
      return 0LL;
    }
  }

void sub_100153FA8(uint64_t a1)
{
}

void sub_100153FB4(uint64_t a1)
{
}

char *sub_100153FC0(uint64_t a1, uint64_t a2)
{
  *(void *)&v2[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connections] = _swiftEmptyArrayStorage;
  uint64_t v5 = OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connectionsLock;
  id v6 = objc_allocWithZone(&OBJC_CLASS___NSLock);
  char v7 = v2;
  *(void *)&v2[v5] = [v6 init];
  *(void *)&v7[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_exportedInterface] = 0LL;
  unint64_t v8 = &v7[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_exportedObject];
  *(_OWORD *)unint64_t v8 = 0u;
  *((_OWORD *)v8 + setenv("JavaScriptCoreUseJIT", "0", 1) = 0u;
  *(void *)&v7[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_remoteObjectInterface] = 0LL;
  sub_10000DAA0(0LL, &qword_1001CFF28, &OBJC_CLASS___NSXPCListener_ptr);
  *(void *)&v7[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_listener] = sub_1001540E0(a1, a2);

  v11.receiver = v7;
  v11.super_class = (Class)type metadata accessor for XPCServiceProvider();
  char v9 = (char *)objc_msgSendSuper2(&v11, "init");
  [*(id *)&v9[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_listener] setDelegate:v9];
  return v9;
}

id sub_1001540E0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v6 = [v4 initWithMachServiceName:v5];

  return v6;
}

id sub_100154150()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for XPCServiceProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100154228()
{
}

uint64_t type metadata accessor for XPCServiceProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC14amsengagementd18XPCServiceProvider);
}

uint64_t sub_100154280(uint64_t a1, void *a2)
{
  int v3 = (void *)(a1 + OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connections);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connections, v8, 33LL, 0LL);
  id v4 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v5 = *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100063FE4(v5);
  uint64_t v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v4);
  specialized Array._endMutation()(v6);
  return swift_endAccess(v8);
}

void sub_100154304(uint64_t a1, uint64_t a2)
{
  int v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connections);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connections, v10, 0LL, 0LL);
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100153E10(a2, v4);
  char v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
    swift_beginAccess(v3, v9, 33LL, 0LL);
    unint64_t v8 = (void *)sub_1001543A8(v5);
    swift_endAccess(v9);
  }

uint64_t sub_1001543A8(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *__int16 v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_100155260(v3);
    uint64_t v3 = result;
    *__int16 v1 = result;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    objc_super v11 = sub_100016160((char *)(v9 + 40), v8, (char *)(v9 + 32));
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
    specialized Array._endMutation()(v11);
    return v10;
  }

  return result;
}

id sub_100154430(void *a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [a1 valueForEntitlement:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_100076F44((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    sub_10000E888((uint64_t)v10);
    return 0LL;
  }

  uint64_t v4 = sub_10000DAA0(0LL, (unint64_t *)&qword_1001CD450, &OBJC_CLASS___NSNumber_ptr);
  id v5 = v8;
  id v6 = [v8 BOOLValue];

  return v6;
}

uint64_t sub_10015453C(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v3);
  unsigned int v4 = [a2 processIdentifier];
  unsigned __int8 v5 = sub_100154430(a2);
  uint64_t v6 = sub_10000D33C(&qword_1001C9C70);
  uint64_t v7 = type metadata accessor for LogMessage(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
  if ((v5 & 1) != 0)
  {
    unsigned __int8 v50 = v5;
    uint64_t v9 = type metadata accessor for XPCServiceProvider();
    uint64_t v10 = (char *)sub_100155340(v9);
    id v11 = (id)AMSLogKey(v10);
    if (v11)
    {
      char v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      swift_bridgeObjectRetain();
      sub_100155324();
      sub_100048C74();
      sub_100051A10();
      uint64_t v16 = sub_100010530();
      sub_1001552D4(v16);
      sub_10000E8FC();
      sub_10000DC14();
      uint64_t v57 = &type metadata for String;
      *(void *)&__int128 v56 = v13;
      *((void *)&v56 + setenv("JavaScriptCoreUseJIT", "0", 1) = v15;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v56);
      sub_10000E8FC();
      sub_10000DC4C(93LL);
      sub_1001552E8();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100155314();
      sub_100048C74();
      sub_100051A10();
      uint64_t v25 = sub_100010530();
      sub_1001552D4(v25);
      sub_10000E8FC();
      sub_10000DC4C(58LL);
      sub_1001552E8();
    }

    sub_10000D3A0(&v52);
    LogMessage.init(stringLiteral:)(0xD000000000000022LL);
    sub_100155300();
    uint64_t v26 = sub_10000E888((uint64_t)&v52);
    if (qword_1001C7F80 != -1) {
      uint64_t v26 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v27 = static os_log_type_t.default.getter(v26);
    sub_1000BD1B0(v27, v8);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void **)&v10[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_exportedInterface];
    unsigned __int8 v5 = v50;
    if (v28)
    {
      uint64_t v29 = (uint64_t)&v10[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_exportedObject];
      swift_beginAccess(&v10[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_exportedObject], v51, 0LL, 0LL);
      sub_10002546C(v29, (uint64_t)&v56);
      if (v57)
      {
        sub_10000DA58(&v56, &v52);
        id v30 = v28;
        sub_100155358((uint64_t)v30, "setExportedInterface:");
        uint64_t v31 = v53;
        uint64_t v32 = sub_10000D37C(&v52, v53);
        uint64_t v33 = _bridgeAnythingToObjectiveC<A>(_:)(v32, v31);
        sub_100155364(v33, "setExportedObject:");
        swift_unknownObjectRelease(v33);

        sub_10000D3A0(&v52);
      }

      else
      {
        sub_10000E8FC();
      }
    }

    uint64_t v37 = sub_10000DDDC((uint64_t)&unk_1001B41A0, 24LL);
    sub_10015534C(v37);
    uint64_t v38 = sub_10000DDDC((uint64_t)&unk_1001B41C8, 28LL);
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v37;
    *(_DWORD *)(v38 + 24) = v4;
    id v54 = sub_1001551F0;
    uint64_t v55 = v38;
    *(void *)&__int128 v52 = _NSConcreteStackBlock;
    *((void *)&v52 + setenv("JavaScriptCoreUseJIT", "0", 1) = 1107296256LL;
    uint64_t v39 = sub_100155334((uint64_t)&unk_1001B41E0);
    uint64_t v40 = swift_release();
    sub_100155364(v40, "setInterruptionHandler:");
    _Block_release(v39);
    uint64_t v41 = sub_10000DDDC((uint64_t)&unk_1001B41A0, 24LL);
    sub_10015534C(v41);
    uint64_t v42 = sub_10000DDDC((uint64_t)&unk_1001B4218, 24LL);
    swift_unknownObjectWeakInit(v42 + 16, a2);
    uint64_t v43 = sub_10000DDDC((uint64_t)&unk_1001B4240, 36LL);
    *(void *)(v43 + swift_weakDestroy(v0 + 16) = v41;
    *(void *)(v43 + 24) = v42;
    *(_DWORD *)(v43 + 3sub_10000D3A0(v0 + 2) = v4;
    id v54 = sub_100155240;
    uint64_t v55 = v43;
    *(void *)&__int128 v52 = _NSConcreteStackBlock;
    *((void *)&v52 + setenv("JavaScriptCoreUseJIT", "0", 1) = 1107296256LL;
    uint64_t v44 = sub_100155334((uint64_t)&unk_1001B4258);
    uint64_t v45 = swift_release();
    sub_100155358(v45, "setInvalidationHandler:");
    _Block_release(v44);
    if (*(void *)&v10[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_remoteObjectInterface]) {
      objc_msgSend(a2, "setRemoteObjectInterface:");
    }
    os_signpost_id_t v46 = *(void **)&v10[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connectionsLock];
    uint64_t v47 = v10;
    id v48 = a2;
    [v46 lock];
    sub_100154280((uint64_t)v47, v48);
    [v46 unlock];

    [v48 resume];
  }

  else
  {
    uint64_t v17 = type metadata accessor for XPCServiceProvider();
    id v18 = sub_100155340(v17);
    id v19 = (id)AMSLogKey(v18);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v23 = v22;

      swift_bridgeObjectRetain();
      sub_100155324();
      sub_100048C74();
      sub_100051A10();
      uint64_t v24 = sub_100010530();
      sub_1001552D4(v24);
      sub_10000E8FC();
      sub_10000DC14();
      uint64_t v57 = &type metadata for String;
      *(void *)&__int128 v56 = v21;
      *((void *)&v56 + setenv("JavaScriptCoreUseJIT", "0", 1) = v23;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(&v56);
      sub_10000E8FC();
      sub_10000DC4C(93LL);
      sub_1001552E8();
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100155314();
      sub_100048C74();
      sub_100051A10();
      uint64_t v34 = sub_100010530();
      sub_1001552D4(v34);
      sub_10000E8FC();
      sub_10000DC4C(58LL);
      sub_1001552E8();
    }

    sub_10000D3A0(&v52);
    LogMessage.init(stringLiteral:)(0xD000000000000021LL);
    sub_100155300();
    uint64_t v35 = sub_10000E888((uint64_t)&v52);
    if (qword_1001C7F80 != -1) {
      uint64_t v35 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v36 = static os_log_type_t.error.getter(v35);
    sub_1000BD1B0(v36, v8);
    swift_bridgeObjectRelease();
  }

  return v5 & 1;
}

uint64_t sub_100154AE4(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v36, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = sub_10000D33C(&qword_1001C9C70);
    uint64_t v10 = type metadata accessor for LogMessage(0LL);
    uint64_t v11 = swift_allocObject( v9,  ((*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL))
          + 3LL * *(void *)(*(void *)(v10 - 8) + 72LL),
            *(unsigned __int8 *)(*(void *)(v10 - 8) + 80LL) | 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
    uint64_t v35 = (void *)type metadata accessor for XPCServiceProvider();
    v34[0] = v8;
    id v12 = v8;
    id v13 = (id)AMSLogKey(v12);
    if (v13)
    {
      uint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v17 = v16;

      swift_bridgeObjectRetain();
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
      v18._uint64_t countAndFlagsBits = 0LL;
      v18._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v18);
      id v19 = v35;
      uint64_t v20 = sub_10000D37C(v34, (uint64_t)v35);
      uint64_t DynamicType = swift_getDynamicType(v20, v19, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
      v32[0] = DynamicType;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
      sub_10000E888((uint64_t)v32);
      v22._uint64_t countAndFlagsBits = 5972026LL;
      v22._object = (void *)0xE300000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v22);
      uint64_t MetatypeMetadata = &type metadata for String;
      v32[0] = v15;
      v32[1] = v17;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
      sub_10000E888((uint64_t)v32);
      v23._uint64_t countAndFlagsBits = 93LL;
      v23._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v23);
      LogMessage.init(stringInterpolation:)(v6);
      swift_bridgeObjectRelease();
    }

    else
    {
      LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
      v24._uint64_t countAndFlagsBits = 0LL;
      v24._object = (void *)0xE000000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v24);
      uint64_t v25 = v35;
      uint64_t v26 = sub_10000D37C(v34, (uint64_t)v35);
      uint64_t v27 = swift_getDynamicType(v26, v25, 1LL);
      uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v27);
      v32[0] = v27;
      LogMessage.StringInterpolation.appendInterpolation(safe:)(v32);
      sub_10000E888((uint64_t)v32);
      v28._uint64_t countAndFlagsBits = 58LL;
      v28._object = (void *)0xE100000000000000LL;
      LogMessage.StringInterpolation.appendLiteral(_:)(v28);
      LogMessage.init(stringInterpolation:)(v6);
    }

    sub_10000D3A0(v34);
    LogMessage.init(stringLiteral:)(0xD000000000000020LL);
    uint64_t v35 = &type metadata for Int32;
    LODWORD(v34[0]) = a2;
    static LogMessage.safe(_:)(v34);
    uint64_t v29 = sub_10000E888((uint64_t)v34);
    if (qword_1001C7F80 != -1) {
      uint64_t v29 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
    }
    uint64_t v30 = static os_log_type_t.error.getter(v29);
    sub_1000BD1B0(v30, v11);

    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_100154DCC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = type metadata accessor for LogMessage.StringInterpolation(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v49, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    uint64_t v11 = a2 + 16;
    swift_beginAccess(v11, v48, 0LL, 0LL);
    uint64_t v12 = swift_unknownObjectWeakLoadStrong(v11);
    if (v12)
    {
      id v13 = (void *)v12;
      uint64_t v14 = sub_10000D33C(&qword_1001C9C70);
      uint64_t v15 = type metadata accessor for LogMessage(0LL);
      uint64_t v16 = swift_allocObject( v14,  ((*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL))
            + 3LL * *(void *)(*(void *)(v15 - 8) + 72LL),
              *(unsigned __int8 *)(*(void *)(v15 - 8) + 80LL) | 7LL);
      *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_100164240;
      uint64_t v47 = (void *)type metadata accessor for XPCServiceProvider();
      v46[0] = v10;
      uint64_t v17 = v10;
      id v18 = (id)AMSLogKey(v17);
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v43 = v13;
        uint64_t v21 = v17;
        int v22 = a3;
        uint64_t v23 = v20;
        uint64_t v25 = v24;

        swift_bridgeObjectRetain();
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
        v26._uint64_t countAndFlagsBits = 0LL;
        v26._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v26);
        uint64_t v27 = v47;
        Swift::String v28 = sub_10000D37C(v46, (uint64_t)v47);
        uint64_t DynamicType = swift_getDynamicType(v28, v27, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(DynamicType);
        v44[0] = DynamicType;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
        sub_10000E888((uint64_t)v44);
        v30._uint64_t countAndFlagsBits = 5972026LL;
        v30._object = (void *)0xE300000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v30);
        uint64_t MetatypeMetadata = &type metadata for String;
        v44[0] = v23;
        v44[1] = v25;
        a3 = v22;
        uint64_t v17 = v21;
        id v13 = v43;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
        sub_10000E888((uint64_t)v44);
        v31._uint64_t countAndFlagsBits = 93LL;
        v31._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v31);
        LogMessage.init(stringInterpolation:)(v8);
        swift_bridgeObjectRelease();
      }

      else
      {
        LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
        v32._uint64_t countAndFlagsBits = 0LL;
        v32._object = (void *)0xE000000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v32);
        uint64_t v33 = v47;
        uint64_t v34 = sub_10000D37C(v46, (uint64_t)v47);
        uint64_t v35 = swift_getDynamicType(v34, v33, 1LL);
        uint64_t MetatypeMetadata = (void *)swift_getMetatypeMetadata(v35);
        v44[0] = v35;
        LogMessage.StringInterpolation.appendInterpolation(safe:)(v44);
        sub_10000E888((uint64_t)v44);
        v36._uint64_t countAndFlagsBits = 58LL;
        v36._object = (void *)0xE100000000000000LL;
        LogMessage.StringInterpolation.appendLiteral(_:)(v36);
        LogMessage.init(stringInterpolation:)(v8);
      }

      sub_10000D3A0(v46);
      LogMessage.init(stringLiteral:)(0xD000000000000020LL);
      uint64_t v47 = &type metadata for Int32;
      LODWORD(v46[0]) = a3;
      static LogMessage.safe(_:)(v46);
      uint64_t v37 = sub_10000E888((uint64_t)v46);
      if (qword_1001C7F80 != -1) {
        uint64_t v37 = swift_once(&qword_1001C7F80, sub_1000BB1B0);
      }
      uint64_t v38 = static os_log_type_t.default.getter(v37);
      sub_1000BD1B0(v38, v16);
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void **)&v17[OBJC_IVAR____TtC14amsengagementd18XPCServiceProvider_connectionsLock];
      uint64_t v40 = v17;
      id v41 = v13;
      [v39 lock];
      sub_100154304((uint64_t)v40, (uint64_t)v41);
      [v39 unlock];
    }
  }

uint64_t sub_1001551A8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001551CC()
{
  return swift_deallocObject(v0, 28LL, 7LL);
}

uint64_t sub_1001551F0()
{
  return sub_100154AE4(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t sub_1001551FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10000D3A0(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10015520C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100155214()
{
  return swift_deallocObject(v0, 36LL, 7LL);
}

void sub_100155240()
{
}

void sub_10015524C()
{
}

uint64_t sub_100155260(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_1001552D4(uint64_t a1)
{
  *(void *)(v2 - 104) = a1;
  *(void *)(v2 - 128) = v1;
  return LogMessage.StringInterpolation.appendInterpolation(safe:)(v2 - 128);
}

uint64_t sub_1001552E8()
{
  return LogMessage.init(stringInterpolation:)(v0);
}

void sub_1001552F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(v2 + a2);
  *(void *)(v2 + asub_10000D3A0(v0 + 2) = a1;
}

uint64_t sub_100155300()
{
  *(void *)(v2 - 15sub_10000D3A0(v0 + 2) = v0;
  *(_DWORD *)(v2 - 176) = v1;
  return static LogMessage.safe(_:)(v2 - 176);
}

uint64_t sub_100155314()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(1LL, 1LL);
}

uint64_t sub_100155324()
{
  return LogMessage.StringInterpolation.init(literalCapacity:interpolationCount:)(4LL, 2LL);
}

void *sub_100155334@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 160) = v1;
  *(void *)(v2 - 15sub_10000D3A0(v0 + 2) = a1;
  return _Block_copy((const void *)(v2 - 176));
}

id sub_100155340(uint64_t a1)
{
  *(void *)(v2 - 15sub_10000D3A0(v0 + 2) = a1;
  *(void *)(v2 - 176) = v1;
  return v1;
}

uint64_t sub_10015534C(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1 + 16, v1);
}

id sub_100155358(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

id sub_100155364(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

id AMSDTranslateCloudKitError(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    if (objc_msgSend(v1, "amsd_isCKChangeTokenExpiredError"))
    {
      uint64_t v3 = 2LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKManateeUnavailable"))
    {
      uint64_t v3 = 9LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKMissingManateeIdentity"))
    {
      uint64_t v3 = 1LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKPartialFailureError"))
    {
      uint64_t v3 = 4LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKServerRecordChangedError"))
    {
      uint64_t v3 = 5LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKThrottledError"))
    {
      uint64_t v3 = 6LL;
    }

    else if (objc_msgSend(v2, "amsd_isCKUnknownItemError"))
    {
      uint64_t v3 = 7LL;
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
      id v9 = v7;
    }
    else {
      id v9 = 0LL;
    }

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_mapWithTransform:", &stru_1001B42A0));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v10,  @"AMSCloudDataPartialFailureErrorsKey");
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:CKErrorRetryAfterKey]);

    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0) {
      id v14 = v12;
    }
    else {
      id v14 = 0LL;
    }

    if (v14) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v14,  @"AMSCloudDataRetryAfterKey");
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_title"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_message"));
    uint64_t v17 = AMSCustomError(@"AMSCloudDataErrorDomain", v3, v15, v16, v5, v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v17);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

AMSPair *__cdecl sub_100155A80(id a1, id a2, NSError *a3)
{
  uint64_t v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___AMSPair);
  id v7 = AMSDTranslateCloudKitError(v4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  id v9 = -[AMSPair initWithFirst:second:](v6, "initWithFirst:second:", v5, v8);
  return v9;
}

id sub_1001570D4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _acceptShareWithShareMetadata:a2];
}

id sub_100157160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) finishWithResult:a2 error:a3];
}

void sub_1001571F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [a2 deviceToDeviceEncryptionAvailability]));
  [v4 finishWithResult:v6 error:v5];
}

id sub_100157388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

id sub_100157570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  if (a3) {
    return objc_msgSend(v4, "finishWithResult:");
  }
  else {
    return [v4 finishWithError:a4];
  }
}

void sub_10015783C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = AMSDTranslateCloudKitError(a4);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = v9;
  if (v9 && !objc_msgSend(v9, "ams_hasDomain:code:", @"AMSCloudDataErrorDomain", 4))
  {
    [*(id *)(a1 + 32) finishWithError:v10];
  }

  else
  {
    uint64_t v11 = -[AMSCloudDataSavedRecordsResult initWithSavedRecords:deletedRecords:error:]( objc_alloc(&OBJC_CLASS___AMSCloudDataSavedRecordsResult),  "initWithSavedRecords:deletedRecords:error:",  v12,  v7,  v10);
    [*(id *)(a1 + 32) finishWithResult:v11];
  }
}

AMSPromise *__cdecl sub_1001578FC(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100157C10(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v6 = a4;
  id v7 = [v11 count];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_100157CD0(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100157E3C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  id v6 = a4;
  id v7 = [v11 count];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    [v8 finishWithResult:v11];
  }

  else if (v6)
  {
    [v8 finishWithError:v6];
  }

  else
  {
    uint64_t v9 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v8 finishWithError:v10];
  }
}

AMSPromise *__cdecl sub_100157EEC(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

id sub_100157FE4(id a1, AMSCloudDataRecordZoneIdentifier *a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___CKRecordZoneID);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_100158040(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_opt_class(v3);
  id v6 = [*(id *)(a1 + 32) scope];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneName]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 _fetchChangeTokenWithDatabaseScope:v6 recordZoneName:v7]);
  return v8;
}

id sub_100158188(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "amsd_isCKChangeTokenExpiredError"))
  {
    [*(id *)(a1 + 32) persistChangedRecordZonesChangeToken:0];
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchChangedRecordZonesWithServerChangeToken:0]);
  }

  else
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));
  }

  id v5 = (void *)v4;

  return v5;
}

AMSPromise *__cdecl sub_1001581F4(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100158480(uint64_t a1, void *a2, void *a3)
{
  id v17 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (v5)
  {
    [*(id *)(a1 + 40) finishWithResult:v5];
  }

  else
  {
    id v6 = v17;
    if (objc_msgSend(v6, "amsd_isCKPartialFailureError"))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:CKPartialErrorsByItemIDKey]);

      uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
        id v10 = v8;
      }
      else {
        id v10 = 0LL;
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:*(void *)(a1 + 32)]);
      uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSError);
      if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0) {
        id v13 = v11;
      }
      else {
        id v13 = 0LL;
      }

      id v6 = v13;
    }

    id v14 = *(void **)(a1 + 40);
    if (v6)
    {
      [v14 finishWithError:v6];
    }

    else
    {
      uint64_t v15 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      [v14 finishWithError:v16];
    }
  }
}

AMSPromise *__cdecl sub_100158600(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100158740(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = AMSDTranslateCloudKitError(a3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (v6 && !objc_msgSend(v6, "ams_hasDomain:code:", @"AMSCloudDataErrorDomain", 4))
  {
    [*(id *)(a1 + 32) finishWithError:v7];
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"AMSCloudDataPartialFailureErrorsKey"]);

    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0) {
      id v11 = v9;
    }
    else {
      id v11 = 0LL;
    }

    uint64_t v12 = objc_alloc(&OBJC_CLASS___AMSCloudDataFetchResult);
    if (v15) {
      id v13 = v15;
    }
    else {
      id v13 = &__NSDictionary0__struct;
    }
    id v14 = -[AMSCloudDataFetchResult initWithResults:failures:](v12, "initWithResults:failures:", v13, v11);
    [*(id *)(a1 + 32) finishWithResult:v14];
  }
}

void sub_10015885C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 failures]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001588D0;
  void v4[3] = &unk_1001B4570;
  v4[4] = *(void *)(a1 + 32);
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
}

id sub_1001588D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[AMSCloudDataManager handleRecordZoneFetchFailed:inDatabase:withError:]( &OBJC_CLASS___AMSCloudDataManager,  "handleRecordZoneFetchFailed:inDatabase:withError:",  a2,  *(void *)(a1 + 32),  a3);
}

void sub_100158B90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v4) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = objc_opt_class(*(void *)(a1 + 32));
      uint64_t v7 = AMSLogKey(v6);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = AMSHashIfNeeded(*(void *)(a1 + 32));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = AMSHashIfNeeded(v3);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      int v13 = 138544130;
      uint64_t v14 = v6;
      __int16 v15 = 2114;
      uint64_t v16 = v8;
      __int16 v17 = 2114;
      id v18 = v10;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to save a database change token. database = %{public}@ | error = %{public}@",  (uint8_t *)&v13,  0x2Au);
    }
  }
}

void sub_1001590B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
    if (!v4) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 OSLogObject]);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = objc_opt_class(*(void *)(a1 + 32));
      uint64_t v7 = AMSLogKey(v6);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      id v9 = [*(id *)(a1 + 32) scope];
      uint64_t v10 = AMSHashIfNeeded(*(void *)(a1 + 40));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      uint64_t v12 = AMSHashIfNeeded(v3);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      int v14 = 138544386;
      uint64_t v15 = v6;
      __int16 v16 = 2114;
      __int16 v17 = v8;
      __int16 v18 = 2048;
      id v19 = v9;
      __int16 v20 = 2114;
      uint64_t v21 = v11;
      __int16 v22 = 2114;
      uint64_t v23 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to save a record zone change token. databaseScope = %ld | zoneName = %{public}@ | error = %{public}@",  (uint8_t *)&v14,  0x34u);
    }
  }
}

void sub_10015939C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_10015945C(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100159620(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *__cdecl sub_1001596E0(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

void sub_100159ACC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [v11 count];
  id v8 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    [v8 finishWithResult:v9];
  }

  else
  {
    if (v6)
    {
      [v8 finishWithError:v6];
      goto LABEL_6;
    }

    uint64_t v10 = AMSError(0LL, @"CloudKit Error", @"An unknown CloudKit error occurred.", 0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v8 finishWithError:v9];
  }

LABEL_6:
}

AMSPromise *sub_100159B8C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedAccountsDaemonConfig](&OBJC_CLASS___AMSLogConfig, "sharedAccountsDaemonConfig"));
  id v7 = (void *)v6;
  if (a2)
  {
    if (!v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = objc_opt_class(*(void *)(a1 + 32));
      uint64_t v10 = AMSLogKey(v9);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)buf = 138543618;
      uint64_t v49 = v9;
      __int16 v50 = 2114;
      uint64_t v51 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Successfully setup the database subscription.",  buf,  0x16u);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56) + 1LL));
    int v13 = (AMSPromise *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v12));
  }

  else
  {
    if (!v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
    }
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7 OSLogObject]);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = objc_opt_class(*(void *)(a1 + 32));
      uint64_t v16 = AMSLogKey(v15);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      uint64_t v18 = AMSLogableError(v5);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      *(_DWORD *)buf = 138543874;
      uint64_t v49 = v15;
      __int16 v50 = 2114;
      uint64_t v51 = v17;
      __int16 v52 = 2114;
      double v53 = *(double *)&v19;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Failed to setup the database subscription. error = %{public}@",  buf,  0x20u);
    }

    unint64_t v20 = *(void *)(a1 + 56);
    if (v20 > 9)
    {
      Swift::String v36 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v36) {
        Swift::String v36 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue([v36 OSLogObject]);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = objc_opt_class(*(void *)(a1 + 32));
        uint64_t v39 = AMSLogKey(v38);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        *(_DWORD *)buf = 138543618;
        uint64_t v49 = v38;
        __int16 v50 = 2114;
        uint64_t v51 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Attempted to setup the database subscription too many times. Refusing to try again.",  buf,  0x16u);
      }

      int v13 = (AMSPromise *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v5));
    }

    else
    {
      unint64_t v21 = v20 + 1;
      double v22 = exp2((double)(v20 + 1));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v23) {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v23 OSLogObject]);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = objc_opt_class(*(void *)(a1 + 32));
        uint64_t v26 = AMSLogKey(v25);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        *(_DWORD *)buf = 138543874;
        uint64_t v49 = v25;
        __int16 v50 = 2114;
        uint64_t v51 = v27;
        __int16 v52 = 2048;
        double v53 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%{public}@: [%{public}@] Scheduling another attempt to setup the database subscription. timeInterval = %f",  buf,  0x20u);
      }

      Swift::String v28 = objc_alloc_init(&OBJC_CLASS___AMSPromise);
      dispatch_time_t v29 = dispatch_time(0LL, (uint64_t)(v22 * 1000000000.0));
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      Swift::String v31 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10015A000;
      block[3] = &unk_1001B4650;
      Swift::String v32 = v28;
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void **)(a1 + 40);
      uint64_t v43 = v32;
      uint64_t v44 = v33;
      id v45 = v34;
      id v46 = *(id *)(a1 + 48);
      unint64_t v47 = v21;
      dispatch_after(v29, v31, block);

      uint64_t v35 = v46;
      int v13 = v32;
    }
  }

  return v13;
}

void sub_10015A000(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _subscribeWithIdentifier:*(void *)(a1 + 48) recordZoneIdentifier:*(void *)(a1 + 56) attempt:*(void *)(a1 + 64)]);
  [v1 finishWithPromise:v2];
}

id sub_10015A260(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_10015A26C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10015A278(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  if (a4)
  {
    [*(id *)(a1 + 32) finishWithError:a4];
  }

  else
  {
    uint64_t v6 = -[AMSCloudDataChangedRecordZonesResult initWithChangedRecordZones:deletedRecordZones:changeToken:]( objc_alloc(&OBJC_CLASS___AMSCloudDataChangedRecordZonesResult),  "initWithChangedRecordZones:deletedRecordZones:changeToken:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v7);
    [*(id *)(a1 + 32) finishWithResult:v6];
  }
}

void sub_10015A62C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

CKFetchRecordZoneChangesConfiguration *sub_10015A64C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___CKFetchRecordZoneChangesConfiguration);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v3]);

  -[CKFetchRecordZoneChangesConfiguration setPreviousServerChangeToken:](v4, "setPreviousServerChangeToken:", v5);
  return v4;
}

void sub_10015A6B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v11 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 recordID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
  id v7 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v6]);

  if (!v7)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 recordID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
    [v8 setObject:v7 forKeyedSubscript:v10];
  }

  -[NSMutableArray addObject:](v7, "addObject:", v11);
}

void sub_10015A784(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v9 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);
  uint64_t v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  if (!v6)
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = *(void **)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);
    [v7 setObject:v6 forKeyedSubscript:v8];
  }

  -[NSMutableArray addObject:](v6, "addObject:", v9);
}

void sub_10015A830(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v15 = a6;
  if (v15)
  {
    id v9 = *(void **)(a1 + 40);
    id v10 = a2;
    [v9 setObject:0 forKeyedSubscript:v10];
    [*(id *)(a1 + 48) setObject:0 forKeyedSubscript:v10];
    id v11 = *(void **)(a1 + 56);
    id v12 = v15;
    id v13 = v10;
  }

  else
  {
    int v14 = *(void **)(a1 + 32);
    id v13 = a2;
    id v11 = v14;
    id v12 = a3;
  }

  [v11 setObject:v12 forKeyedSubscript:v13];
}

void sub_10015A8CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id)AMSSetLogKey(*(void *)(a1 + 32));
  if ([*(id *)(a1 + 40) count]
    || [*(id *)(a1 + 48) count]
    || [*(id *)(a1 + 56) count]
    || (id v16 = [*(id *)(a1 + 64) count], !v3)
    || v16)
  {
    if (v3)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSLogConfig sharedAccountsDaemonConfig]( &OBJC_CLASS___AMSLogConfig,  "sharedAccountsDaemonConfig"));
      if (!v5) {
        id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSLogConfig sharedConfig](&OBJC_CLASS___AMSLogConfig, "sharedConfig"));
      }
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 OSLogObject]);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
        uint64_t v8 = objc_opt_class(WeakRetained);
        uint64_t v9 = AMSLogKey(v8);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        uint64_t v11 = AMSHashIfNeeded(v3);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        int v17 = 138543874;
        uint64_t v18 = v8;
        __int16 v19 = 2114;
        unint64_t v20 = v10;
        __int16 v21 = 2114;
        double v22 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}@: [%{public}@] Received both valid data and an error when fetching record zone changes. error = %{public}@",  (uint8_t *)&v17,  0x20u);
      }

      id v13 = objc_loadWeakRetained((id *)(a1 + 80));
      [v13 _handleError:v3 andErrors:*(void *)(a1 + 56)];
    }

    int v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ams_mapWithTransform:", &stru_1001B4780));
    id v15 = -[AMSCloudDataChangedRecordsResult initWithChangedRecords:deletedRecords:errors:changeTokens:]( objc_alloc(&OBJC_CLASS___AMSCloudDataChangedRecordsResult),  "initWithChangedRecords:deletedRecords:errors:changeTokens:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v14,  *(void *)(a1 + 64));
    [*(id *)(a1 + 72) finishWithResult:v15];
  }

  else
  {
    [*(id *)(a1 + 72) finishWithError:v3];
  }
}

AMSPair *__cdecl sub_10015AAD0(id a1, CKRecordZoneID *a2, NSError *a3)
{
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = objc_alloc(&OBJC_CLASS___AMSPair);
  id v7 = AMSDTranslateCloudKitError(v4);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  uint64_t v9 = -[AMSPair initWithFirst:second:](v6, "initWithFirst:second:", v5, v8);
  return v9;
}

AMSPromise *__cdecl sub_10015AB4C(id a1, NSError *a2)
{
  id v2 = AMSDTranslateCloudKitError(a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithError:](&OBJC_CLASS___AMSPromise, "promiseWithError:", v3));

  return (AMSPromise *)v4;
}

BOOL sub_10015B15C(id a1, id a2, id a3)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___CKRecordZoneID);
  char isKindOfClass = objc_opt_isKindOfClass(v3, v4);

  return isKindOfClass & 1;
}

void sub_10015B830(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = AMSHashIfNeeded(v4);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) encryptedValuesByKey]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v4]);

  uint64_t v8 = AMSHashIfNeeded(v7);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  [v3 appendFormat:@"\n  %@ = %@,", v10, v9];
}

uint64_t sub_10015BDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = sub_100029328();
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[8] = swift_task_alloc(v6);
  void v3[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10015BE90, 0LL, 0LL);
}

uint64_t sub_10015BE90()
{
  uint64_t v1 = *(void *)(v0 + 24);
  id v2 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  id v3 = [v2 dataWithPropertyList:v1 format:100 options:0 error:v0 + 16];
  id v4 = *(id *)(v0 + 16);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 64);
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v13 = v12;

    sub_10015C030(v6);
    URL.appendingPathComponent(_:)(v10, v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    Data.write(to:options:)(v5, 1LL, v11, v13);
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v18 = *(void *)(v0 + 64);
    sub_10015D328();
    sub_10015D31C();
    swift_task_dealloc(v14);
    swift_task_dealloc(v18);
  }

  else
  {
    id v15 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v16);
    uint64_t v17 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 72));
    swift_task_dealloc(v17);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10015C030(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000D33C(&qword_1001D04B0);
  __chkstk_darwin(v2);
  sub_10004895C();
  uint64_t v5 = v3 - v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = sub_100029328();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10004895C();
  uint64_t v13 = v11 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v24 - v15;
  id v17 = objc_msgSend((id)objc_opt_self(NSURL), "ams_cachesDirectory");
  if (!v17)
  {
    sub_1000D1200((uint64_t)v8, 1LL);
    goto LABEL_6;
  }

  uint64_t v18 = v17;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

  sub_10015D2F4((uint64_t)v8, v13);
  sub_1000D1200((uint64_t)v8, 0LL);
  if (sub_1000102D4((uint64_t)v8, 1LL, v9) == 1)
  {
LABEL_6:
    sub_10000DA68((uint64_t)v8, &qword_1001D04B0);
    id v22 = [(id)objc_opt_self(NSFileManager) defaultManager];
    id v23 = [v22 temporaryDirectory];

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);
    return;
  }

  sub_10015D2F4((uint64_t)v16, (uint64_t)v8);
  v19._uint64_t countAndFlagsBits = 0x7363697274654DLL;
  v19._object = (void *)0xE700000000000000LL;
  URL.appendPathComponent(_:)(v19);
  v20._object = (void *)0x8000000100179940LL;
  v20._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  URL.appendPathComponent(_:)(v20);
  id v21 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_10015C858((uint64_t)v16, 1LL, 0LL, v5);

  if (sub_1000102D4(v5, 1LL, v9) == 1)
  {
    sub_10015D2F4(a1, (uint64_t)v16);
    sub_10000DA68(v5, &qword_1001D04B0);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    sub_10015D2F4(a1, v5);
  }

uint64_t sub_10015C320(void *a1, uint64_t a2, void *aBlock, void *a4)
{
  v4[2] = a1;
  void v4[3] = a4;
  v4[4] = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v10 = v9;
  void v4[5] = v9;
  uint64_t v11 = dword_1001D04A4;
  id v12 = a1;
  id v13 = a4;
  uint64_t v14 = (void *)swift_task_alloc(v11);
  v4[6] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_10015C3C0;
  return sub_10015BDF4((uint64_t)v12, v8, v10);
}

uint64_t sub_10015C3C0()
{
  uint64_t v3 = *(void *)(*v1 + 40);
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v4 = *(void **)(*v1 + 24);
  uint64_t v6 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  uint64_t v7 = *(void *)(v6 + 32);
  if (v0)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }

  else
  {
    (*(void (**)(void, void))(v7 + 16))(*(void *)(v6 + 32), 0LL);
  }

  _Block_release(*(const void **)(v6 + 32));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10015C474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000D33C(&qword_1001D04D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  sub_10000D5C0((uint64_t)v6, 1LL, 1LL, v7);
  uint64_t v8 = (void *)swift_allocObject(&unk_1001B4928, 48LL, 7LL);
  v8[2] = 0LL;
  void v8[3] = 0LL;
  v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject(&unk_1001B4950, 48LL, 7LL);
  _OWORD v9[2] = 0LL;
  void v9[3] = 0LL;
  v9[4] = &unk_1001D0520;
  void v9[5] = v8;
  sub_10015D058((uint64_t)v6, (uint64_t)&unk_1001D0528, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_10015C54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100029328();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_10004895C();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - v10;
  sub_10015C030(v8);
  URL.appendingPathComponent(_:)(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  Data.init(contentsOf:options:)(v11, 0LL);
  id v12 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v23[0] = 0LL;
  id v14 = [v12 propertyListWithData:isa options:0 format:0 error:v23];

  id v15 = *(id *)&v23[0];
  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v14);
    sub_10015D310();
    swift_unknownObjectRelease(v14);
    sub_1001145E0();
    sub_10000DA58(&v24, v23);
    unint64_t v16 = sub_10015CD8C();
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v18 = v15;
    uint64_t v19 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v20);
    sub_10015D310();
    sub_1001145E0();
    swift_errorRelease(v19);
    return 0LL;
  }

id TokenStorage.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

id TokenStorage.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TokenStorage();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TokenStorage()
{
  return objc_opt_self(&OBJC_CLASS___AMSTokenStorage);
}

id TokenStorage.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TokenStorage();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10015C858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Class isa@<X2>, uint64_t a4@<X8>)
{
  char v6 = a2;
  URL.path.getter(a1, a2);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v9 = [v4 fileExistsAtPath:v8];

  if (v9)
  {
    uint64_t v10 = sub_100029328();
    sub_10015D2D8(v10);
    uint64_t v11 = sub_10015D2FC();
    return (id)sub_10000D5C0(v11, v12, v13, v14);
  }

  else
  {
    id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v17);
    uint64_t v19 = v18;
    if (isa)
    {
      _s3__C16FileAttributeKeyVMa_0();
      sub_10015D29C(&qword_1001D04B8, (uint64_t)&unk_10016A738);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }

    id v31 = 0LL;
    unsigned int v20 = [v16 createDirectoryAtURL:v19 withIntermediateDirectories:v6 & 1 attributes:isa error:&v31];

    id v30 = v31;
    if (v20)
    {
      uint64_t v21 = sub_100029328();
      sub_10015D2D8(v21);
      uint64_t v22 = sub_10015D2FC();
      sub_10000D5C0(v22, v23, v24, v25);
      return v30;
    }

    else
    {
      id v26 = v31;
      uint64_t v27 = _convertNSErrorToError(_:)(v30);

      swift_willThrow(v28);
      swift_errorRelease(v27);
      uint64_t v29 = sub_100029328();
      return (id)sub_10000D5C0(a4, 1LL, 1LL, v29);
    }
  }

void sub_10015CA84()
{
}

uint64_t sub_10015CAA8(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10015CB20(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

NSString sub_10015CB9C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  NSString result = sub_10015CBC0(a1);
  *a2 = result;
  return result;
}

NSString sub_10015CBC0(uint64_t a1)
{
  uint64_t v2 = v1;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  return v3;
}

void sub_10015CBF4()
{
}

void sub_10015CC14(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  a2(v3);
  swift_bridgeObjectRelease();
  sub_100009044();
}

uint64_t sub_10015CC48(uint64_t a1)
{
  return sub_10015CC50(a1, *v1);
}

uint64_t sub_10015CC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10015CC90(uint64_t a1)
{
  return sub_10015CC98(a1, *v1);
}

Swift::Int sub_10015CC98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10015CD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_10015CD8C()
{
  unint64_t result = qword_1001D04A8;
  if (!qword_1001D04A8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D04A8);
  }

  return result;
}

void _s3__C16FileAttributeKeyVMa_0()
{
  if (!qword_1001D04F8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1001B49A0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1001D04F8);
    }
  }

uint64_t sub_10015CE10()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10015CE4C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D04C4);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000102A8);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

uint64_t sub_10015CE98(uint64_t *a1, uint64_t *a2)
{
  return sub_10015CD08(*a1, *a2);
}

uint64_t sub_10015CEA4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10015CEE8(uint64_t a1)
{
  uint64_t v3 = v2;
  sub_10015D29C(&qword_1001D0518, (uint64_t)&unk_10016A68C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v3, v4, &protocol witness table for String);
}

uint64_t sub_10015CF58()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D04DC);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_10014BD18(v1, (uint64_t)sub_1000FDB88);
  return sub_10014BD04(v2, v3, v4, v5, v6);
}

uint64_t sub_10015CFA8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10015CFD4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1001D04E4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000FDB88;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1001D04E0 + dword_1001D04E0))( a1,  v4,  v5,  v6);
}

uint64_t sub_10015D058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = sub_1000102D4(a1, 1LL, v6);
  if ((_DWORD)v7 == 1)
  {
    sub_10000DA68(a1, &qword_1001D04D0);
    uint64_t v8 = 7168LL;
  }

  else
  {
    unsigned __int8 v9 = TaskPriority.rawValue.getter(v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    uint64_t v8 = v9 | 0x1C00LL;
  }

  uint64_t v10 = *(void *)(a3 + 16);
  if (v10)
  {
    uint64_t v11 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v10);
    uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
    uint64_t v15 = v14;
    swift_unknownObjectRelease(v10);
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = swift_allocObject(&unk_1001B4978, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v15 | v13)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    id v17 = v19;
    void v19[2] = v13;
    void v19[3] = v15;
  }

  else
  {
    id v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1001D04F0, v16);
}

uint64_t sub_10015D19C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10015D1C0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1001D04EC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100010230;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1001D04E8 + dword_1001D04E8))(a1, v4);
}

void sub_10015D230()
{
}

void sub_10015D254()
{
}

void sub_10015D278()
{
}

void sub_10015D29C(unint64_t *a1, uint64_t a2)
{
  if (!*a1)
  {
    _s3__C16FileAttributeKeyVMa_0();
    atomic_store(swift_getWitnessTable(a2, v4), a1);
  }

  sub_100009044();
}

uint64_t sub_10015D2D8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(v1, v2, a1);
}

uint64_t sub_10015D2F4(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

uint64_t sub_10015D2FC()
{
  return v0;
}

uint64_t sub_10015D310()
{
  return sub_10001BD84(v1, v0);
}

uint64_t sub_10015D31C()
{
  return sub_10001BD84(v1, v0);
}

uint64_t sub_10015D328()
{
  return v2(v0, *(void *)(v1 + 48));
}

id objc_msgSend_OSLogObject(void *a1, const char *a2, ...)
{
  return _[a1 OSLogObject];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend__changeTokenKeyForDatabaseScope_recordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeTokenKeyForDatabaseScope:recordZoneName:");
}

id objc_msgSend__fetchChangeTokenWithDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangeTokenWithDatabaseScope:");
}

id objc_msgSend__fetchChangeTokenWithDatabaseScope_recordZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangeTokenWithDatabaseScope:recordZoneName:");
}

id objc_msgSend__fetchChangedRecordZonesWithServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangedRecordZonesWithServerChangeToken:");
}

id objc_msgSend__fetchChangedRecordsInRecordZonesWithWithRecordZoneIDs_changeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchChangedRecordsInRecordZonesWithWithRecordZoneIDs:changeTokens:");
}

id objc_msgSend__fetchShareMetadataForURL_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchShareMetadataForURL:withToken:");
}

id objc_msgSend__handleError_andErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleError:andErrors:");
}

id objc_msgSend__stringForDatabaseScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForDatabaseScope:");
}

id objc_msgSend__subscribeWithIdentifier_recordZoneIdentifier_attempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subscribeWithIdentifier:recordZoneIdentifier:attempt:");
}

id objc_msgSend__zoneIdentifiersWithExpiredTokensFrom_andErrors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_zoneIdentifiersWithExpiredTokensFrom:andErrors:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _[a1 acceptanceStatus];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_addBagKey_valueType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBagKey:valueType:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addSuccessBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessBlock:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_ams_filterUsingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_filterUsingTest:");
}

id objc_msgSend_ams_hasDomain_code_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_hasDomain:code:");
}

id objc_msgSend_ams_invertedDictionaryUsingTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_invertedDictionaryUsingTransform:");
}

id objc_msgSend_ams_invertedDictionaryUsingTransformIgnoresNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_invertedDictionaryUsingTransformIgnoresNil:");
}

id objc_msgSend_ams_mapWithTransform_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mapWithTransform:");
}

id objc_msgSend_ams_mapWithTransformIgnoresNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_mapWithTransformIgnoresNil:");
}

id objc_msgSend_ams_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_message");
}

id objc_msgSend_ams_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_title");
}

id objc_msgSend_amsd_isCKChangeTokenExpiredError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKChangeTokenExpiredError");
}

id objc_msgSend_amsd_isCKManateeUnavailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKManateeUnavailable");
}

id objc_msgSend_amsd_isCKMissingManateeIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKMissingManateeIdentity");
}

id objc_msgSend_amsd_isCKPartialFailureError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKPartialFailureError");
}

id objc_msgSend_amsd_isCKServerRecordChangedError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKServerRecordChangedError");
}

id objc_msgSend_amsd_isCKThrottledError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKThrottledError");
}

id objc_msgSend_amsd_isCKUnknownItemError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsd_isCKUnknownItemError");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_bagForProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:");
}

id objc_msgSend_bagKeySet(void *a1, const char *a2, ...)
{
  return _[a1 bagKeySet];
}

id objc_msgSend_binaryPromiseAdapter(void *a1, const char *a2, ...)
{
  return _[a1 binaryPromiseAdapter];
}

id objc_msgSend_catchWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catchWithBlock:");
}

id objc_msgSend_changeToken(void *a1, const char *a2, ...)
{
  return _[a1 changeToken];
}

id objc_msgSend_changeTokens(void *a1, const char *a2, ...)
{
  return _[a1 changeTokens];
}

id objc_msgSend_changedRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 changedRecordZones];
}

id objc_msgSend_changedRecords(void *a1, const char *a2, ...)
{
  return _[a1 changedRecords];
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_containerWithContainerIdentifier_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithContainerIdentifier:options:");
}

id objc_msgSend_containers(void *a1, const char *a2, ...)
{
  return _[a1 containers];
}

id objc_msgSend_continueWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueWithBlock:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _[a1 dataSource];
}

id objc_msgSend_dataSourceAccountDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceAccountDidChange:");
}

id objc_msgSend_dataSourceDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceDidChange:");
}

id objc_msgSend_databaseScope(void *a1, const char *a2, ...)
{
  return _[a1 databaseScope];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultRecordZone(void *a1, const char *a2, ...)
{
  return _[a1 defaultRecordZone];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteRecordWithRecordIdentifier_missingEncryptionIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordWithRecordIdentifier:missingEncryptionIdentity:");
}

id objc_msgSend_deleteRecordZonesWithRecordZoneIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordZonesWithRecordZoneIdentifiers:");
}

id objc_msgSend_deletedRecordZones(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecordZones];
}

id objc_msgSend_deletedRecords(void *a1, const char *a2, ...)
{
  return _[a1 deletedRecords];
}

id objc_msgSend_deviceToDeviceEncryptionAvailability(void *a1, const char *a2, ...)
{
  return _[a1 deviceToDeviceEncryptionAvailability];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_encryptedValuesByKey(void *a1, const char *a2, ...)
{
  return _[a1 encryptedValuesByKey];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _[a1 errors];
}

id objc_msgSend_failures(void *a1, const char *a2, ...)
{
  return _[a1 failures];
}

id objc_msgSend_familyName(void *a1, const char *a2, ...)
{
  return _[a1 familyName];
}

id objc_msgSend_fetchAllRecordZonesOperation(void *a1, const char *a2, ...)
{
  return _[a1 fetchAllRecordZonesOperation];
}

id objc_msgSend_fetchRecordWithRecordIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordWithRecordIdentifier:");
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDWithCompletionHandler:");
}

id objc_msgSend_finishWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithError:");
}

id objc_msgSend_finishWithPromise_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithPromise:");
}

id objc_msgSend_finishWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:");
}

id objc_msgSend_finishWithResult_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithResult:error:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_givenName(void *a1, const char *a2, ...)
{
  return _[a1 givenName];
}

id objc_msgSend_handlePushNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePushNotification:");
}

id objc_msgSend_hashedDescription(void *a1, const char *a2, ...)
{
  return _[a1 hashedDescription];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_initWithChangedRecordZones_deletedRecordZones_changeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangedRecordZones:deletedRecordZones:changeToken:");
}

id objc_msgSend_initWithChangedRecords_deletedRecords_errors_changeTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChangedRecords:deletedRecords:errors:changeTokens:");
}

id objc_msgSend_initWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:");
}

id objc_msgSend_initWithContainerID_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:options:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreviousServerChangeToken:");
}

id objc_msgSend_initWithPushNotificationTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushNotificationTopic:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneID:");
}

id objc_msgSend_initWithRecordZoneIDs_configurationsByRecordZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZoneIDs:configurationsByRecordZoneID:");
}

id objc_msgSend_initWithRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_initWithRecordsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordsToSave:recordIDsToDelete:");
}

id objc_msgSend_initWithResults_failures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResults:failures:");
}

id objc_msgSend_initWithSavedRecords_deletedRecords_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSavedRecords:deletedRecords:error:");
}

id objc_msgSend_initWithShareMetadatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareMetadatas:");
}

id objc_msgSend_initWithShareURLs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:");
}

id objc_msgSend_initWithShareURLs_invitationTokensByShareURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithShareURLs:invitationTokensByShareURL:");
}

id objc_msgSend_initWithStoreIdentifier_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreIdentifier:type:");
}

id objc_msgSend_initWithSubscriptionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionID:");
}

id objc_msgSend_initWithSubscriptionsToSave_subscriptionIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscriptionsToSave:subscriptionIDsToDelete:");
}

id objc_msgSend_initWithZoneID_subscriptionID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:subscriptionID:");
}

id objc_msgSend_initWithZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isPrivateDatabase(void *a1, const char *a2, ...)
{
  return _[a1 isPrivateDatabase];
}

id objc_msgSend_isSharedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 isSharedDatabase];
}

id objc_msgSend_loadWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadWithName:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_nameComponents(void *a1, const char *a2, ...)
{
  return _[a1 nameComponents];
}

id objc_msgSend_notificationFromRemoteNotificationDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationFromRemoteNotificationDictionary:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_ownerName(void *a1, const char *a2, ...)
{
  return _[a1 ownerName];
}

id objc_msgSend_participantRole(void *a1, const char *a2, ...)
{
  return _[a1 participantRole];
}

id objc_msgSend_participantStatus(void *a1, const char *a2, ...)
{
  return _[a1 participantStatus];
}

id objc_msgSend_persistChangedRecordZonesChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistChangedRecordZonesChangeToken:");
}

id objc_msgSend_persistChangedRecordsChangeToken_forRecordZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistChangedRecordsChangeToken:forRecordZoneIdentifier:");
}

id objc_msgSend_promiseWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithError:");
}

id objc_msgSend_promiseWithResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promiseWithResult:");
}

id objc_msgSend_pushNotificationTopic(void *a1, const char *a2, ...)
{
  return _[a1 pushNotificationTopic];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _[a1 queryItems];
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _[a1 recordID];
}

id objc_msgSend_recordZoneEncryption(void *a1, const char *a2, ...)
{
  return _[a1 recordZoneEncryption];
}

id objc_msgSend_registerBagKeySet_forProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerBagKeySet:forProfile:profileVersion:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_resultWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultWithError:");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_runUntilIdleExit(void *a1, const char *a2, ...)
{
  return _[a1 runUntilIdleExit];
}

id objc_msgSend_save_name_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "save:name:completionHandler:");
}

id objc_msgSend_savedRecords(void *a1, const char *a2, ...)
{
  return _[a1 savedRecords];
}

id objc_msgSend_scope(void *a1, const char *a2, ...)
{
  return _[a1 scope];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAtomic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAtomic:");
}

id objc_msgSend_setFetchDatabaseChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchDatabaseChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZoneChangesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZoneChangesCompletionBlock:");
}

id objc_msgSend_setFetchRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordZonesCompletionBlock:");
}

id objc_msgSend_setFetchRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchRecordsCompletionBlock:");
}

id objc_msgSend_setMarkAsParticipantNeedsNewInvitationToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkAsParticipantNeedsNewInvitationToken:");
}

id objc_msgSend_setModifyRecordZonesCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordZonesCompletionBlock:");
}

id objc_msgSend_setModifyRecordsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifyRecordsCompletionBlock:");
}

id objc_msgSend_setModifySubscriptionsCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModifySubscriptionsCompletionBlock:");
}

id objc_msgSend_setNotificationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationInfo:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPerShareCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareCompletionBlock:");
}

id objc_msgSend_setPerShareMetadataBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerShareMetadataBlock:");
}

id objc_msgSend_setPreviousServerChangeToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousServerChangeToken:");
}

id objc_msgSend_setPushNotificationTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushNotificationTopic:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setRecordChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordChangedBlock:");
}

id objc_msgSend_setRecordWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordWithIDWasDeletedBlock:");
}

id objc_msgSend_setRecordZoneFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneFetchCompletionBlock:");
}

id objc_msgSend_setRecordZoneWithIDChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDChangedBlock:");
}

id objc_msgSend_setRecordZoneWithIDWasDeletedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordZoneWithIDWasDeletedBlock:");
}

id objc_msgSend_setSavePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavePolicy:");
}

id objc_msgSend_setShouldSendContentAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendContentAvailable:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_shareForRecordZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareForRecordZoneIdentifier:");
}

id objc_msgSend_sharedAccountsDaemonConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsDaemonConfig];
}

id objc_msgSend_sharedAccountsMultiUserConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedAccountsMultiUserConfig];
}

id objc_msgSend_sharedConfig(void *a1, const char *a2, ...)
{
  return _[a1 sharedConfig];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _[a1 supportsDeviceToDeviceEncryption];
}

id objc_msgSend_thenWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenWithBlock:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_unionBagKeySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionBagKeySet:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_useSandboxEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 useSandboxEnvironment];
}

id objc_msgSend_userIdentity(void *a1, const char *a2, ...)
{
  return _[a1 userIdentity];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _[a1 zoneID];
}

id objc_msgSend_zoneIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 zoneIdentifier];
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _[a1 zoneName];
}