}

uint64_t *sub_100003154(uint64_t *result)
{
  if (!result
    || (result & 7) != 0
    || (result = sub_100008AFC(result)) == 0LL
    || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  return result;
}

LABEL_12:
      closedir(v4);
    }

    result = objc_alloc_init(&OBJC_CLASS___EAManager);
    qword_10011BAB8 = (uint64_t)result;
  }

  return result;
}

      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 200LL))(v5, 1LL);
      (*(void (**)(uint64_t, const char *))(*(void *)v5 + 224LL))( v5,  -[NSString UTF8String](v6, "UTF8String"));
LABEL_14:

      return;
    }

  __break(0x5516u);
  return result;
}

  sub_100020CB0(a1, " ", 1u, a4);
  return 1LL;
}

    __break(0x5516u);
    goto LABEL_13;
  }

  if (a4 <= 0xF)
  {
    sub_100020EC4((uint64_t)a3, a4, a5);
    return 1LL;
  }

      return (NSAutoreleasePool *)v6;
    }
  }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
}

    return;
  }

    __break(0x5516u);
    return;
  }

  if (kCTCallAlternateStatusChangeNotification == a3)
  {
    if (a2 && (a2 & 7) == 0)
    {
      sub_10004E89C(a2, Status);
      return;
    }

    goto LABEL_12;
  }

  __break(0x5510u);
}

      __break(0x5516u);
LABEL_13:
      __break(0x5507u);
LABEL_14:
      __break(0x5513u);
      return result;
    }

    *a2 = 0;
  }

  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5500u);
  return __src;
}

  __break(0x5500u);
  return __src;
}

  __break(0x5500u);
  return __src;
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_13;
  }

  return result;
}

  __break(0x550Au);
  return result;
}

          v7 = 0LL;
LABEL_13:
          pthread_mutex_unlock(v4);
          return v7;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

    v5 = (_DWORD *)*a1;
    if (!*a1)
    {
LABEL_15:
      *a1 = 0LL;
      return;
    }

    if ((v5 & 7) == 0)
    {
      operator delete(v5);
      goto LABEL_15;
    }

    goto LABEL_21;
  }

  __break(0x550Au);
  return result;
}

  __break(0x5510u);
}

  *(void *)(a1 + 80) = a2;
  v16 = (v8 & 7) != 0 || v8 == 0;
  v61 = v16;
  if (!a4 && !(_DWORD)v9)
  {
    v10 = a3;
LABEL_130:
    v11 = a5;
    goto LABEL_131;
  }

  v17 = 0LL;
  v18 = 0;
  v60 = v8;
  v19 = a4;
  v10 = a3;
  while (2)
  {
    if ((v9 & 1) != 0)
    {
      v10 = a3;
      v19 = a4;
      if (v17)
      {
        v19 = a4 - (v17 - a3);
        if (a4 < v17 - a3) {
          goto LABEL_134;
        }
        v10 = v17;
      }

      sub_1000AC534(a1);
      v17 = 0LL;
      LOBYTE(v9) = 0;
      *(_WORD *)(a1 + 122) = 0;
      *(_DWORD *)(a1 + 64) = 15;
      *(_WORD *)(a1 + 126) = 0;
      *(_BYTE *)(a1 + 130) = 1;
      goto LABEL_121;
    }

    if (!v10) {
      goto LABEL_135;
    }
    if (v10 == (_BYTE *)-1LL) {
      goto LABEL_133;
    }
    v13 = v19-- != 0;
    if (!v13) {
      goto LABEL_134;
    }
    v20 = v10 + 1;
    v21 = *v10;
    switch(*(_BYTE *)(a1 + 130))
    {
      case 1:
        if (v21 == 85)
        {
          LOBYTE(v9) = 0;
          *(_WORD *)(a1 + 130) = 2;
          ++v10;
          v17 = v20;
          goto LABEL_121;
        }

        LOBYTE(v9) = 0;
        goto LABEL_120;
      case 2:
        if (v21 >= 2)
        {
          *(void *)(a1 + 24) = 0LL;
          sub_1000AC214(a1, v21, 0xFFFFFFFFLL, 0, 1);
          v22 = *(void *)(a1 + 96);
          if (v22)
          {
            LOBYTE(v9) = 0;
            *(_BYTE *)(a1 + 130) = 5;
            *(_WORD *)(a1 + 122) = v21;
            *(_BYTE *)(a1 + 131) += v21;
LABEL_44:
            *(void *)(a1 + 104) = v22;
          }

          else
          {
LABEL_119:
            LOBYTE(v9) = 0;
            *(_BYTE *)(a1 + 130) = 1;
            v18 = 12;
          }

          goto LABEL_120;
        }

        if (*v10) {
          goto LABEL_113;
        }
        LOBYTE(v9) = 0;
        v23 = 3;
        goto LABEL_38;
      case 3:
        LOBYTE(v9) = 0;
        *(_BYTE *)(a1 + 131) += v21;
        *(_WORD *)(a1 + 122) = (_WORD)v21 << 8;
        v23 = 4;
        goto LABEL_38;
      case 4:
        *(void *)(a1 + 24) = 0LL;
        *(_BYTE *)(a1 + 131) += v21;
        v24 = *(unsigned __int16 *)(a1 + 122) + v21;
        if (v24 >= 0x10000) {
          goto LABEL_136;
        }
        v25 = (unsigned __int16)(*(_WORD *)(a1 + 122) + v21);
        *(_WORD *)(a1 + 122) = v24;
        sub_1000AC214(a1, v25, 0xFFFFFFFFLL, 0, 1);
        v22 = *(void *)(a1 + 96);
        if (!v22) {
          goto LABEL_119;
        }
        LOBYTE(v9) = 0;
        *(_BYTE *)(a1 + 130) = 5;
        goto LABEL_44;
      case 5:
        if (v21 > 0xE) {
          goto LABEL_113;
        }
        *(_BYTE *)(a1 + 131) += v21;
        v26 = *(_BYTE **)(a1 + 104);
        if (!v26) {
          goto LABEL_135;
        }
        *v26 = v21;
        v27 = *(void *)(a1 + 104);
        if (v27 == -1) {
          goto LABEL_133;
        }
        *(void *)(a1 + 104) = v27 + 1;
        *(_DWORD *)(a1 + 64) = v21;
        *(_WORD *)(a1 + 126) = 0;
        v28 = *(unsigned __int16 *)(a1 + 122);
        *(_WORD *)(a1 + 128) = v28 - 2;
        *(_WORD *)(a1 + 122) = v28 - 1;
        if (v21 != 4)
        {
          LOBYTE(v9) = 0;
          v23 = 7;
          goto LABEL_38;
        }

        if ((((_WORD)v28 - 1) & 0xFFFE) == 0) {
          goto LABEL_113;
        }
        *(_BYTE *)(a1 + 130) = 6;
        v29 = v28 - 3;
        LODWORD(v9) = (v28 - 3) >> 16;
        if ((_DWORD)v9) {
          goto LABEL_136;
        }
        *(_WORD *)(a1 + 128) = v29;
        goto LABEL_120;
      case 6:
        *(_WORD *)(a1 + 126) = (_WORD)v21 << 8;
        *(_BYTE *)(a1 + 131) += v21;
        v30 = *(_BYTE **)(a1 + 104);
        if (!v30) {
          goto LABEL_135;
        }
        *v30 = v21;
        v31 = *(void *)(a1 + 104);
        if (v31 == -1) {
          goto LABEL_133;
        }
        *(void *)(a1 + 104) = v31 + 1;
        *(_BYTE *)(a1 + 130) = 7;
        goto LABEL_68;
      case 7:
        *(_WORD *)(a1 + 126) |= v21;
        *(_BYTE *)(a1 + 131) += v21;
        v32 = *(_BYTE **)(a1 + 104);
        if (!v32) {
          goto LABEL_135;
        }
        *v32 = v21;
        v33 = *(void *)(a1 + 104);
        if (v33 == -1) {
          goto LABEL_133;
        }
        *(void *)(a1 + 104) = v33 + 1;
        v34 = *(unsigned __int16 *)(a1 + 122) - 1;
        if (HIWORD(v34)) {
          goto LABEL_136;
        }
        *(_WORD *)(a1 + 122) = v34;
        if (v61) {
          goto LABEL_135;
        }
        v35 = *(_DWORD *)(a1 + 64);
        sub_10008E074(v60, *(void *)(a1 + 8), v35, *(unsigned __int16 *)(a1 + 126));
        if (sub_10008E10C(v60, *(void *)(a1 + 8)))
        {
          if (*(unsigned __int16 *)(a1 + 122) < 2u)
          {
LABEL_113:
            LOBYTE(v9) = 1;
          }

          else
          {
            *(_DWORD *)(a1 + 68) = 0;
            v36 = *(unsigned __int16 *)(a1 + 128) - 2;
            LODWORD(v9) = HIWORD(v36);
            if (HIWORD(v36)) {
              goto LABEL_136;
            }
            *(_WORD *)(a1 + 128) = v36;
            v23 = 8;
LABEL_38:
            *(_BYTE *)(a1 + 130) = v23;
          }
        }

        else
        {
          *(_DWORD *)(a1 + 68) = -1;
          LOWORD(v9) = *(_WORD *)(a1 + 128);
          if ((_WORD)v9)
          {
            LOBYTE(v9) = 0;
            *(_BYTE *)(a1 + 130) = 10;
            v41 = *(void *)(a1 + 104);
LABEL_116:
            *(void *)(a1 + 24) = v41;
          }

          else
          {
LABEL_117:
            *(_BYTE *)(a1 + 130) = 11;
            *(void *)(a1 + 24) = 0LL;
          }
        }

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
LABEL_13:
    sub_1000D2500();
  }

  return v2;
}

LABEL_18:
  v23 = objc_alloc(&OBJC_CLASS___IAPEAClient);
  v24 = *(_OWORD *)&a4->var0[4];
  v59[0] = *(_OWORD *)a4->var0;
  v59[1] = v24;
  v25 = a3;
  v26 = -[IAPEAClient initWithCapabilities:auditToken:xpcConnection:eaProtocols:andBundleId:]( v23,  "initWithCapabilities:auditToken:xpcConnection:eaProtocols:andBundleId:",  a3,  v59,  a6,  a7,  a9);
  v27 = (NSMutableDictionary *)*p_clients;
  if (!*p_clients)
  {
    v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    *p_clients = v27;
  }

  v22 = (id)v49;
  v28 = -[NSMutableDictionary objectForKey:]( v27,  "objectForKey:",  +[EAManager stringForClientID:](&OBJC_CLASS___EAManager, "stringForClientID:", v49));
  if (!v49 || v28) {
    v22 = objc_msgSend(+[EAManager sharedManager](EAManager, "sharedManager"), "generateClientID");
  }
  -[IAPEAClient setClientID:](v26, "setClientID:", v22);
  objc_msgSend( *p_clients,  "setObject:forKey:",  v26,  +[EAManager stringForClientID:]( EAManager,  "stringForClientID:",  -[IAPEAClient clientID](v26, "clientID")));
  if (v46)
  {
    v29 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    if (((unint64_t)&v47->_connectedAccessoriesLock & 7) == 0)
    {
      v30 = v29;
      -[NSLock lock](v47->_connectedAccessoriesLock, "lock");
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      p_connectedAccessories = (id *)&v47->_connectedAccessories;
      if (((unint64_t)&v47->_connectedAccessories & 7) == 0)
      {
        v50 = (int)v22;
        v45 = p_clientLock;
        v32 = *p_connectedAccessories;
        v33 = [*p_connectedAccessories countByEnumeratingWithState:&v55 objects:v65 count:16];
        if (v33)
        {
          v34 = v33;
          v35 = *(void *)v56;
          do
          {
            for (j = 0LL; j != v34; j = (char *)j + 1)
            {
              if (*(void *)v56 != v35) {
                objc_enumerationMutation(v32);
              }
              v37 = +[EAManager newPlistForAccessory:]( EAManager,  "newPlistForAccessory:",  +[NSMutableDictionary dictionaryWithDictionary:]( NSMutableDictionary,  "dictionaryWithDictionary:",  [*p_connectedAccessories objectForKey:*(void *)(*((void *)&v55 + 1) + 8 * (void)j)]));
              -[NSMutableArray addObject:](v30, "addObject:", v37);
            }

            v34 = [v32 countByEnumeratingWithState:&v55 objects:v65 count:16];
          }

          while (v34);
        }

        -[NSLock unlock](v47->_connectedAccessoriesLock, "unlock");
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v30,  "countByEnumeratingWithState:objects:count:",  &v51,  v64,  16LL);
        v25 = a3;
        if (v38)
        {
          v39 = v38;
          v40 = *(void *)v52;
          do
          {
            for (k = 0LL; k != v39; k = (char *)k + 1)
            {
              if (*(void *)v52 != v40) {
                objc_enumerationMutation(v30);
              }
              -[EAManager notifyEAClient:ofAccessoryEvent:accessory:]( v47,  "notifyEAClient:ofAccessoryEvent:accessory:",  v26,  "EAProtocolAccessoryConnected",  *(void *)(*((void *)&v51 + 1) + 8LL * (void)k));
            }

            v39 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v30,  "countByEnumeratingWithState:objects:count:",  &v51,  v64,  16LL);
          }

          while (v39);
        }

        p_clientLock = v45;
        LODWORD(v22) = v50;
        goto LABEL_41;
      }
    }
}

  __break(0x5516u);
}

  v7 = 0;
LABEL_19:
  if (-[NSMutableData length](*p_sessionDataFromAcc, "length")) {
    -[NSCondition signal](*p_sessionDataFromAccCondition, "signal");
  }
  -[NSCondition unlock](*p_sessionDataFromAccCondition, "unlock");
  v12 = v7 ^ 1;
  if (v5 < 0x40000) {
    v12 = 1;
  }
  if ((v12 & 1) == 0)
  {
    v13 = sub_1000472A8();
    if (v13
      && (v13 & 7) == 0
      && ((unint64_t)&self->super._connectionID & 3) == 0
      && (((_DWORD)self + 30) & 1) == 0)
    {
      sub_10004780C(v13, self->super._connectionID, self->super._sessionID);
      return;
    }

    goto LABEL_30;
  }

  __break(0x5516u);
  return self;
}

  __break(0x5516u);
  return self;
}

    __break(0x5516u);
LABEL_19:
    __break(0x5500u);
  }

  __break(0x5516u);
}

    __break(0x5516u);
    return result;
  }

  result = [*(id *)(a1 + 32) isEqualToString:MPMediaItemPropertyComposer];
  if ((_DWORD)result)
  {
    v10 = (void **)(*(void *)(a1 + 40) + 8LL);
    v4 = *v10;
    v6 = MPMediaItemPropertyArtist;
    goto LABEL_6;
  }

  result = [*(id *)(a1 + 32) isEqualToString:MPMediaItemPropertyAlbumTitle];
  if ((_DWORD)result)
  {
LABEL_8:
    v8 = (id *)(*(void *)(a1 + 40) + 8LL);
    goto LABEL_18;
  }

  return result;
}

  __break(0x550Au);
}

  __break(0x550Au);
}

        v3 = bswap32(*v8);
        v13 = bswap32(*(_DWORD *)a3);
        if ((_DWORD)v3 == v13)
        {
          v3 = bswap32(*(unsigned __int16 *)(a1 + 32)) >> 16;
          v14 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if ((_DWORD)v3 == HIWORD(v14)) {
            goto LABEL_31;
          }
          v13 = HIWORD(v14);
        }

        else {
          v15 = 1;
        }
        if ((v15 & 0x80000000) == 0)
        {
LABEL_31:
          *v4 = a1;
          if ((v7 & 7) == 0) {
            return v7;
          }
          goto LABEL_32;
        }

        v3 = a1 + 8;
        if (((a1 + 8) & 7) != 0) {
          goto LABEL_32;
        }
        v12 = *(void *)v3;
        if (!*(void *)v3) {
          goto LABEL_33;
        }
        a1 += 8LL;
LABEL_28:
        if ((v12 & 7) != 0) {
          goto LABEL_32;
        }
        v7 = a1;
        a1 = v12;
      }
    }

    goto LABEL_32;
  }

  a1 = v5 + 8;
LABEL_34:
  *v4 = v7;
  return a1;
}

  __break(0x5516u);
}

  __break(0x550Au);
  return result;
}

        __break(0x550Au);
        return result;
      }
    }

    goto LABEL_17;
  }

  return result;
}

  pthread_mutex_unlock(v4);
  return 0xFFFFFFFFLL;
}

  v9 = 0xFFFFFFFFLL;
LABEL_19:
  pthread_mutex_unlock(v4);
  return v9;
}

  __break(0x5516u);
LABEL_19:
  __break(0x5500u);
}

  __break(0x5507u);
  return result;
}

      __break(0x550Au);
LABEL_19:
      __break(0x5512u);
      goto LABEL_20;
    }

    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

            sub_1000578E8(v2, 0);
            return v1;
          }
        }
      }
    }
  }

  __break(0x5515u);
  return result;
}

        v3 = bswap32(*v8);
        v13 = bswap32(*(_DWORD *)a3);
        if ((_DWORD)v3 == v13)
        {
          v3 = bswap32(*(unsigned __int16 *)(a1 + 36)) >> 16;
          v14 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if ((_DWORD)v3 == HIWORD(v14)) {
            goto LABEL_31;
          }
          v13 = HIWORD(v14);
        }

        else {
          v15 = 1;
        }
        if ((v15 & 0x80000000) == 0)
        {
LABEL_31:
          *v4 = a1;
          if ((v7 & 7) == 0) {
            return v7;
          }
          goto LABEL_32;
        }

        v3 = a1 + 8;
        if (((a1 + 8) & 7) != 0) {
          goto LABEL_32;
        }
        v12 = *(void *)v3;
        if (!*(void *)v3) {
          goto LABEL_33;
        }
        a1 += 8LL;
LABEL_28:
        if ((v12 & 7) != 0) {
          goto LABEL_32;
        }
        v7 = a1;
        a1 = v12;
      }
    }

    goto LABEL_32;
  }

  a1 = v5 + 8;
LABEL_34:
  *v4 = v7;
  return a1;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    return result;
  }

  if (!v4) {
    goto LABEL_18;
  }
  v5 = bswap32(*v4);
  if (v5 >> 15) {
    return 4LL;
  }
LABEL_14:
  v6 = *(_DWORD *)(result + 1380);
  if (v5 == v6) {
    return 0LL;
  }
  *(_DWORD *)(result + 1380) = v5;
  v7 = v5 & ~v6;
  *(_DWORD *)(result + 1344) |= v7;
  sub_10009325C(result, 0);
  result = 0LL;
  *(_DWORD *)(v2 + 1344) |= v7;
  return result;
}

    __break(0x5516u);
  }

    __break(0x5518u);
  }

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

LABEL_46:
    __break(0x5516u);
  }

        __break(0x5516u);
      }

      sub_1000CEA98(2u, @"HeadsetEventHandler::SendISLPropertyChange() state is good pluggin in the device");
      v10 = a1 + 12;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 5, v10));
      if (v11 >= 2147483643)
      {
LABEL_47:
        __break(0x5500u);
        return;
      }

      v6 = *(void (**)(unsigned int *))(*(void *)a1 + 80LL);
LABEL_22:
      v6(a1);
      return;
    case 655374:
      v12 = sub_1000C2140();
      if (!v12 || (v12 & 7) != 0) {
        goto LABEL_46;
      }
      (*(void (**)(uint64_t, void))(*(void *)v12 + 184LL))(v12, 0LL);
      sub_1000CEA98(2u, @"HeadsetEventHandler::SendISLPropertyChange() Got name requesting address at 0");
      *((_BYTE *)a1 + 34) = 1;
      return;
    case 655375:
      *((_BYTE *)a1 + 36) = 1;
      v13 = sub_1000C2140();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_46;
      }
      v14 = *(void (**)(uint64_t))(*(void *)v13 + 128LL);
      goto LABEL_35;
    case 655376:
      v13 = sub_1000C2140();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_46;
      }
      v14 = *(void (**)(uint64_t))(*(void *)v13 + 280LL);
      goto LABEL_35;
    case 655377:
      v13 = sub_1000C2140();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_46;
      }
      v14 = *(void (**)(uint64_t))(*(void *)v13 + 296LL);
LABEL_35:
      v14(v13);
      return;
    default:
      return;
  }

    __break(0x5507u);
  }

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    goto LABEL_47;
  }

  if (*(void *)(a1 + 1192) != a4)
  {
    sub_1000CEAEC(0, 4, "%s:%d devPort(%hhx) != m_pDevPortObj(%hhx)\n");
    return;
  }

  *(void *)(a1 + 1192) = 0LL;
  if (!qword_10011C0E0) {
    goto LABEL_46;
  }
  if ((qword_10011C0E0 & 7) != 0) {
    goto LABEL_46;
  }
  pthread_mutex_lock((pthread_mutex_t *)(qword_10011C0E0 + 1200));
  *(_BYTE *)(a1 + 1271) = 0;
  if (!qword_10011C0E0 || (qword_10011C0E0 & 7) != 0) {
    goto LABEL_46;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(qword_10011C0E0 + 1200));
  do
  {
    v14 = -1;
    v13 = 0LL;
  }

  while (!sub_100062E78(a1, -1, &v14, &v13, 0xFFFFu));
}

  __break(0x550Au);
}

LABEL_41:
  if ((v25 & 4) != 0)
  {
    v42 = sub_1000C7788();
    if (!v42 || (v42 & 7) != 0) {
      goto LABEL_46;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 160LL))(v42, 1LL);
  }

  __break(0x5516u);
LABEL_42:
  __break(0x550Au);
}

  LODWORD(v10) = 0;
LABEL_42:
  v8 = (id)v56;
  if (v56) {
    sub_10002F3F8(MPMediaPlaylistPropertyPersistentID, v56);
  }
  objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
  a2 = (__CFString *)cf;
  v9 = v58;
LABEL_45:
  if (v8) {
    v35 = 1;
  }
  else {
    v35 = dword_1001197C8 == 0;
  }
  v36 = v35 || v10 >= a3;
  if (v36) {
    goto LABEL_110;
  }
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  v37 = [(id)qword_10011BCE0 stationCount];
  v38 = v37;
  if (v9 >= (int)a2)
  {
    LODWORD(v40) = 0;
  }

  else
  {
    v39 = __OFSUB__((_DWORD)a2, v9);
    LODWORD(v40) = (_DWORD)a2 - v9;
    if (v39) {
      goto LABEL_84;
    }
  }

  if (v37 < 1)
  {
    a2 = 0LL;
    goto LABEL_81;
  }

  v41 = sub_10002CD78();
  if (!v41 || (v41 & 7) != 0)
  {
LABEL_114:
    __break(0x5516u);
    goto LABEL_115;
  }

  v42 = sub_10002D200((__CFString *)v41, (uint64_t)@"IAP_RADIO");
  if ((int)v40 >= v38)
  {
    a2 = 0LL;
  }

  else
  {
    v40 = (int)v40;
    do
    {
      if (qword_10011BCD8 != -1) {
        dispatch_once(&qword_10011BCD8, &stru_100104448);
      }
      v43 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@: %@",  v42,  [(id)qword_10011BCE0 stationNameForIndex:v40]);
      if (v43) {
        a2 = (__CFString *)v43;
      }
      else {
        a2 = &stru_10010A828;
      }
      sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](a2, "UTF8String"));
      v44 = a4->__r_.__value_.__l.__size_;
      if (v44 >= a4->__r_.__value_.__l.__cap_)
      {
        v45 = sub_100024640(a4, &__p);
      }

      else
      {
        sub_1000245B0(a4, &__p);
        if (v44 >= 0xFFFFFFFFFFFFFFE8LL) {
          goto LABEL_113;
        }
        v45 = (std::string *)(v44 + 24);
      }

      a4->__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      LODWORD(v10) = (_DWORD)v10 + 1;
      ++v40;
    }

    while (v40 < v38 && v10 < a3);
  }

  CFRelease(v42);
LABEL_81:
  v46 = v40 - v38;
  if ((int)v40 <= v38)
  {
LABEL_85:
    v46 = 0;
    goto LABEL_86;
  }

  if (__OFSUB__((_DWORD)v40, v38))
  {
LABEL_84:
    __break(0x5515u);
    goto LABEL_85;
  }

  __break(0x5513u);
}

      v8 = 0LL;
      v32 = 0;
      goto LABEL_42;
    }
  }

  v8 = 2LL;
  sub_1000ABE78(a2, v6, 0, 0LL, 2, *(_DWORD *)(a2 + 68), 4, 0x18u, 0, 255, 0LL, 0, 0, 0);
LABEL_43:
  result = sub_1000AB4C4(*(void *)(v2 + 8), a2, 0, 1u);
  if (v32 <= 0x1F)
  {
    if (v32)
    {
      if (v4 == 5) {
        return sub_10007304C(v2, v6);
      }
      return v8;
    }

    result = sub_10006FED0(v2, v6, 6);
    if (!v6 || (v6 & 7) != 0) {
      goto LABEL_97;
    }
    result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 272LL))(v6);
    *(_BYTE *)(v2 + 2215) = result;
    v16 = *(unsigned __int8 *)(v2 + 2214);
    if (v16 <= 1)
    {
      v17 = v16 == 0;
      v18 = result ^ 1;
      if (!v17) {
        v18 = 1;
      }
      if ((v18 & 1) != 0) {
        goto LABEL_66;
      }
      v19 = sub_100061274();
      v20 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 216LL))(v6);
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_97;
      }
      result = sub_100057B7C(result);
      if (v20 <= 7)
      {
        if (v20) {
          goto LABEL_66;
        }
        if ((_DWORD)result == (char)result)
        {
          if ((_DWORD)result == 13)
          {
            if (!v19 || (v19 & 7) != 0) {
              goto LABEL_97;
            }
            v21 = sub_10008D184(v19, v6);
            v22 = sub_10008C710(v19, v6);
            if (v21 == 56 && (v22 & 0x440) == 0 && (*(_BYTE *)(v2 + 1272) & 1) != 0)
            {
              v24 = sub_1000710B8(v2, v23, 1);
              if (v24) {
                sub_1000CEAEC( 0,  4,  "%s SetLineOutState failed _ackStatus:%02X\n",  "HandleRetDevAuthenticationSignature",  v24);
              }
            }
          }

    __break(0x5516u);
    goto LABEL_42;
  }

  v21 = operator new[](3uLL);
  *v21 = bswap32(v28[0]) >> 16;
  if ((unint64_t)v21 >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_54:
    __break(0x5513u);
LABEL_55:
    __break(0x5507u);
    return;
  }

  v22 = v21;
  *((_BYTE *)v21 + 2) = v27;
  if (a4 == -1)
  {
    if ((v9 & 7) == 0)
    {
      a4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 16LL))(v9, 1LL);
      goto LABEL_45;
    }

    __break(0x5513u);
    return;
  }

  v9 = *(_DWORD *)(a2 + 68);
LABEL_23:
  if (v7 && v8 && (v6 & 0x80) == 0)
  {
    v14 = 0LL;
    switch(v6)
    {
      case 0u:
        if (v8 >= 2)
        {
          v12 = *((unsigned __int8 *)v7 + 1);
          goto LABEL_35;
        }

        return;
      case 2u:
        v12 = 1;
        goto LABEL_35;
      case 4u:
        v12 = 3;
        goto LABEL_35;
      case 7u:
        v12 = 6;
        goto LABEL_35;
      case 9u:
        v12 = 9;
LABEL_35:
        v15 = v12;
        v13 = sub_100062E78(a1, v9, &v15, &v14, 0xFFFFu);
        if (v6 == 9 || !v13) {
          sub_10008A288(a1, a2, v14);
        }
        break;
      default:
        return;
    }
  }

  __break(0x5513u);
  return result;
}

    __break(0x550Au);
    goto LABEL_42;
  }

          v7 = 2LL;
          goto LABEL_11;
        }

        if (v12 != 2) {
          goto LABEL_41;
        }
        BYTE4(v43[0]) = *(_BYTE *)v10;
        if (v10 != (unsigned __int16 *)-1LL)
        {
          BYTE5(v43[0]) = *((_BYTE *)v10 + 1);
          v42 = 1;
LABEL_106:
          v41.__r_.__value_.__r.__words[0] = 0LL;
          v34 = *(_DWORD *)(a2 + 68);
          if (!v34)
          {
            sub_1000CEAEC( 0,  4,  "%s:%d CIapLingoSports::ProcessCmd packet transID = 0!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoSports.cpp",  379);
            v34 = *(_DWORD *)(a2 + 68);
          }

          if (sub_100062E78(a1, v34, &v42, &v41, 0xFFFFu)) {
            sub_1000CEAEC( 0,  4,  "%s:%d CIapLingoSports::ProcessCmd timeoutStatus != 0!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoSports.cpp",  386);
          }
LABEL_110:
          v35 = *(void *)(a1 + 8);
          if (v35 && (v35 & 7) == 0)
          {
            sub_100057A4C(v35, 9u, 0LL, (uint64_t)v43, 2048);
            v7 = 0LL;
            goto LABEL_11;
          }

          goto LABEL_147;
        }
      }

  __break(0x5516u);
  return result;
}

LABEL_45:
  -[NSLock unlock](*p_clientLock, "unlock");
  return v22;
}

  __break(0x5516u);
LABEL_46:
  __break(0x550Au);
}

        __break(0x5513u);
LABEL_46:
        __break(0x5507u);
        goto LABEL_47;
      }
    }

  v23 = sub_1000ABB10(v9, 0, 0LL, 63, a4, v22, 3u);
  if (!v23)
  {
LABEL_51:
    __break(0x5518u);
    goto LABEL_52;
  }

  v24 = v23;
  if ((v23 & 7) != 0) {
    goto LABEL_52;
  }
  sub_100062D14((void *)a1, *(_DWORD *)(v23 + 68), 117, (uint64_t)v22, 500);
  sub_1000AB4C4(*(void *)(a1 + 8), v24, 0, 1u);
  if (v13)
  {
    if ((v13 & 7) == 0)
    {
      v25 = v13[1].__r_.__value_.__s.__data_[9];
      if (v25 != 255)
      {
        v13[1].__r_.__value_.__s.__data_[9] = v25 + 1;
        return;
      }

      goto LABEL_55;
    }

    goto LABEL_52;
  }

LABEL_38:
    __break(0x5516u);
  }

    __break(0x5516u);
LABEL_39:
    __break(0x5513u);
  }

  __break(0x5503u);
  return result;
}

    v41 = (NSData *)operator new(0x40uLL);
    v43 = (char)v41;
    sub_100029F78(v41, (uint64_t)v27, v9, v10, 0.0, 0.0, (double)v9, (double)v10, v42, a2);
    free(v27);
    CGContextRelease(v22);
    free((void *)v25);
    goto LABEL_48;
  }

          if (v29 == ++v26) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_41;
    }

          __break(0x5516u);
          goto LABEL_39;
        }

    __break(0x550Au);
    return;
  }

  ServiceWithPrimaryPort = IOAccessoryManagerGetServiceWithPrimaryPort(2LL);
  if ((_DWORD)ServiceWithPrimaryPort) {
    goto LABEL_9;
  }
LABEL_19:
  v6 = 1;
LABEL_26:
  if (connect) {
    IOServiceClose(connect);
  }
  if ((v6 & 1) == 0) {
    IOObjectRelease(ServiceWithPrimaryPort);
  }
}

      __break(0x5516u);
      goto LABEL_39;
    }

    return v5;
  }

  __break(0x550Au);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x550Au);
  return result;
}

  *(_BYTE *)a2 = 0;
  if (a2 != -1)
  {
    *(void *)(a2 + 1) = bswap64(v11);
    return 0LL;
  }

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
    goto LABEL_39;
  }

  if (*(_DWORD *)a2 != 6)
  {
    if ((a3 & 7) == 0) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }

  if ((a3 & 7) != 0 || ((a3 + 4) & 3) != 0) {
    goto LABEL_38;
  }
  v5 = *(_DWORD *)(a3 + 4);
  if (v5 > 0x1FF) {
    goto LABEL_39;
  }
  if (v5 != 6) {
    goto LABEL_33;
  }
  if (((a3 + 8) & 7) != 0) {
    goto LABEL_38;
  }
  v6 = *(_DWORD *)(a3 + 8);
  if (v6 > 0xF)
  {
LABEL_39:
    __break(0x550Au);
    return;
  }

  if (v6 == 6) {
    goto LABEL_33;
  }
  v7 = *(_DWORD *)(a1 + 192) & 0xFFFFFEFE;
  *(_DWORD *)(a1 + 192) = v7 | 0x100;
  if (((a2 + 20) & 3) != 0) {
    goto LABEL_38;
  }
  if (!v6 && (*(_DWORD *)(a2 + 20) & 2) != 0)
  {
    v8 = v7 | 0x180;
LABEL_31:
    *(_DWORD *)(a1 + 192) = v8;
  }

      v4 = 2LL;
      goto LABEL_11;
    }

    if (v7 != 4) {
      goto LABEL_38;
    }
    result = sub_100061274();
    if (result && (result & 7) == 0)
    {
      v9 = sub_10008D0AC(result, *(void *)(v2 + 1192));
      v12 = 7;
      v10 = bswap32(*(_DWORD *)v6);
      HIDWORD(v14) = v10;
      goto LABEL_34;
    }

    goto LABEL_40;
  }

  if (v7 != 2) {
    goto LABEL_38;
  }
  v12 = 9;
  BYTE4(v14) = *(_BYTE *)v6;
  if (v6 != -1)
  {
    BYTE5(v14) = *(_BYTE *)(v6 + 1);
    goto LABEL_34;
  }

        __break(0x5516u);
      }

  __break(0x550Au);
  return result;
}

  __break(0x5500u);
  return result;
}

LABEL_19:
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  p_connectedAccessories = (id *)&self->_connectedAccessories;
  v24 = &self->_clients;
  obj = *p_connectedAccessories;
  v15 = [*p_connectedAccessories countByEnumeratingWithState:&v32 objects:v41 count:16];
  if (v15)
  {
    v16 = v15;
    v26 = *(void *)v33;
    do
    {
      for (i = 0LL; i != v16; i = (char *)i + 1)
      {
        if (*(void *)v33 != v26) {
          objc_enumerationMutation(obj);
        }
        v18 = p_connectedAccessories;
        v19 = objc_msgSend( objc_msgSend( objc_msgSend( *p_connectedAccessories,  "objectForKey:",  *(void *)(*((void *)&v32 + 1) + 8 * (void)i)),  "objectForKey:",  @"EAManagerAccessorySessions"),  "sessionsForClientID:",  v27);
        v28 = 0u;
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v20 = [v19 countByEnumeratingWithState:&v28 objects:v40 count:16];
        if (v20)
        {
          v21 = v20;
          v22 = *(void *)v29;
          do
          {
            for (j = 0LL; j != v21; j = (char *)j + 1)
            {
              if (*(void *)v29 != v22) {
                objc_enumerationMutation(v19);
              }
              -[EAManager closeSessionForConnectionID:sessionID:notifyApp:]( self,  "closeSessionForConnectionID:sessionID:notifyApp:",  [*(id *)(*((void *)&v28 + 1) + 8 * (void)j) connectionID],  objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * (void)j), "sessionID"),  0);
            }

            v21 = [v19 countByEnumeratingWithState:&v28 objects:v40 count:16];
          }

          while (v21);
        }

        p_connectedAccessories = v18;
      }

      v16 = [obj countByEnumeratingWithState:&v32 objects:v41 count:16];
    }

    while (v16);
  }

  -[NSMutableDictionary removeObjectForKey:]( *v24,  "removeObjectForKey:",  +[EAManager stringForClientID:](&OBJC_CLASS___EAManager, "stringForClientID:", v27));
  if (!-[NSMutableDictionary count](*v24, "count"))
  {

    *v24 = 0LL;
  }

    __break(0x5516u);
  }

        sub_1000CEA98( 3u,  @"%s:%s No session found for client ID %d and protocol %d, opening new one",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/EAManager.mm",  "-[EAManager openSessionForClientID:connetionID:protocolID:sessionID:]",  v9,  v7);
        if (((unint64_t)&self->_clients & 7) == 0)
        {
          v21 = -[NSMutableDictionary objectForKey:]( self->_clients,  "objectForKey:",  +[EAManager stringForClientID:](&OBJC_CLASS___EAManager, "stringForClientID:", v9));
          v22 = -[NSNumber initWithUnsignedInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInt:", v7);
          v11 = -[IAPSessionBasic initWithClient:connectionID:protocolID:sessionID:]( objc_alloc(&OBJC_CLASS___IAPSessionBasic),  "initWithClient:connectionID:protocolID:sessionID:",  v21,  v8,  v7,  a6);
          v23 = v11;
          if (!v11)
          {
LABEL_24:

            LOBYTE(v11) = v23 != 0LL;
            return (char)v11;
          }

          if (a6 && (a6 & 1) == 0)
          {
            [v14 addSession:v11 withSessionID:*a6];

            goto LABEL_24;
          }
        }

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
    goto LABEL_20;
  }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_20;
  }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_20;
  }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_20;
  }

  __break(0x5513u);
  return result;
}

  if (!v5 || (v5 & 7) != 0)
  {
LABEL_23:
    __break(0x5516u);
  }

  else
  {
    sub_100020CB0(v5, "Stats cleared", 1u, 1);
    return (uint64_t *)1;
  }

  return result;
}

  __break(0x5516u);
  return self;
}

  __break(0x5516u);
  return [(id)v6 currentNowPlayingInfoChapter];
}

    __break(0x5510u);
    goto LABEL_20;
  }

  __break(0x5516u);
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

    if (a2 != 12) {
      return v6;
    }
    result = sub_1000573E0(v2, 0xCu);
    if (!result) {
      return v6;
    }
    if ((result & 7) == 0)
    {
      if (!result) {
        return v6;
      }
      if ((result & 7) == 0)
      {
        v9 = !sub_1000A7CD8(result);
        v10 = 10;
        goto LABEL_27;
      }
    }

    goto LABEL_31;
  }

  __break(0x5516u);
LABEL_20:
  __break(0x5513u);
  return result;
}

    if (a2)
    {
      v11 = *a2;
      v12 = ~(unint64_t)(a2 + 1);
      if (v12 >= v11)
      {
        a2[v11 + 1] = v7;
        if ((_DWORD)v11 == 255)
        {
LABEL_27:
          __break(0x5507u);
          goto LABEL_28;
        }

        v13 = v11 + 1;
        v14 = (v11 + 1);
        *a2 = v13;
        if (v14 <= v12)
        {
          a2[v14 + 1] = v6;
          if (v13 != 255)
          {
            *a2 = v13 + 1;
            return result;
          }

          goto LABEL_27;
        }
      }

    v9 = 4LL;
    goto LABEL_20;
  }

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

          v5 = 0LL;
LABEL_20:
          pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
          return v5;
        }
      }
    }

    goto LABEL_22;
  }

    __break(0x5516u);
    return result;
  }

  __break(0x550Au);
  return result;
}

    __break(0x5518u);
  }

  __break(0x5516u);
  return result;
}

    __break(0x550Au);
    goto LABEL_20;
  }

  v9 = 0LL;
  if (a3 < 0x100) {
    goto LABEL_15;
  }
LABEL_21:
  __break(0x5507u);
  return result;
}

      __break(0x5518u);
      goto LABEL_20;
    case 524301:
      if (!a4 || !a5) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 128LL))(result, 4LL);
      }
      goto LABEL_19;
    case 524310:
      if (!a4 || !a5) {
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 128LL))(result, 4LL);
      }
      goto LABEL_19;
  }

  return result;
}

  __break(0x550Au);
}

LABEL_37:
  -[NSLock unlock](*p_clientLock, "unlock");
}

        break;
      default:
        goto LABEL_37;
    }
  }

    __break(0x5516u);
    goto LABEL_38;
  }

      __break(0x5513u);
LABEL_38:
      __break(0x5516u);
    }
  }

  v23 = 0LL;
LABEL_36:

  return v23;
}

  __break(0x550Au);
}

            CFRelease(v11);
            goto LABEL_67;
          }

          goto LABEL_81;
        }

  pthread_mutex_unlock(&self->_nowPlayingInfoLock);
  LODWORD(v3) = v15;
  return (int)v3;
}

  __break(0x5512u);
}

    __break(0x5516u);
    return result;
  }

  v17 = 0LL;
LABEL_34:
  objc_autoreleasePoolPop(v12);
  if (v7) {
    CFRelease(v7);
  }
  return v17;
}

      __break(0x5516u);
      goto LABEL_38;
    default:
      return 0LL;
  }

  if (!a4) {
    return result;
  }
  v10 = 4;
LABEL_35:
  *a4 = v10;
  return result;
}

          __break(0x5507u);
          goto LABEL_38;
        }
      }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_38;
  }

  if (!a3) {
    return;
  }
LABEL_30:
  if (!*(_BYTE *)(a1 + 2748))
  {
    *(_BYTE *)(a1 + 2748) = 1;
    sub_1000612C4(*(void *)(a1 + 8));
    if (v15)
    {
      sub_1000612C4(*(void *)(a1 + 8));
      if (v16 && (v16 & 7) == 0)
      {
        sub_10005EA88(v16, *(_DWORD *)(a1 + 2744));
        return;
      }

      goto LABEL_37;
    }
  }

    __break(0x5516u);
    goto LABEL_38;
  }

  sub_100064D0C(&v9);
  return 2LL;
}

  __break(0x5507u);
  return result;
}

    __break(0x5513u);
  }

  v18 = 0;
  v12 = __b;
LABEL_28:
  if (v8 > 0x7F)
  {
LABEL_35:
    __break(0x5518u);
LABEL_36:
    __break(0x5516u);
    goto LABEL_37;
  }

  v23[1] = v18;
  v23[2] = v9;
  memcpy(v24, v12, v7);
  v19 = v7 + 4;
LABEL_33:
  sub_1000AC324(a2, v5, 0, 0LL, 27, *(_DWORD *)(a2 + 68), &v22, v19);
  return 0LL;
}

  __break(0x550Au);
  return result;
}

    __break(0x5518u);
    goto LABEL_38;
  }

  v12 = 0;
  LODWORD(v13) = -1;
  do
  {
    if (((v11 >> v12) & 1) != 0) {
      v13 = v12;
    }
    else {
      v13 = v13;
    }
    ++v12;
  }

  while (v12 != 15);
  v14 = sub_1000642A4(v13);
  sub_1000870E8(1LL, v5, v14);
LABEL_33:
  result = v2 + 1992;
  if (((v2 + 1992) & 7) == 0)
  {
    sub_10006EC68(result);
    sub_10006E9E8(v2);
    sub_10006E778(v2, 1);
    *(void *)(v2 + 1272) = 0LL;
    result = *(void *)(v2 + 8);
    if (result)
    {
      if ((result & 7) == 0) {
        return sub_100057B04(result);
      }
    }
  }

  __break(0x5500u);
  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x5500u);
  return result;
}

    sub_1000578E8(v3, 2u);
    return (unsigned __int8 *)v4;
  }

  else {
    v4 = 5LL;
  }
  if (result[4437] > 1u) {
    goto LABEL_40;
  }
  if (!result[4437])
  {
LABEL_25:
    v4 = sub_1000A26C8(a2) == 9;
    goto LABEL_37;
  }

  if ((((_DWORD)result + 4438) & 1) != 0)
  {
LABEL_39:
    __break(0x5516u);
    goto LABEL_40;
  }

  if (result[4438] > 1u) {
    goto LABEL_40;
  }
  if (!result[4438]) {
    goto LABEL_25;
  }
  if (result[4439] <= 1u)
  {
    if (result[4439] && HIBYTE(a2) != result[4432])
    {
      v4 = 2LL;
      goto LABEL_37;
    }

    goto LABEL_25;
  }

  __break(0x5515u);
LABEL_38:
  __break(0x550Au);
LABEL_39:
  __break(0x5507u);
}

  __break(0x5510u);
}

  __break(0x550Au);
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

void sub_10000421C(uint64_t a1)
{
  v1 = (id *)(*(void *)(a1 + 32) + 64LL);
  [*v1 lock];
  v3 = (id *)(*(void *)(a1 + 32) + 56LL);
  objc_msgSend( *v3,  "removeObjectForKey:",  +[EAManager stringForClientID:](EAManager, "stringForClientID:", *(unsigned int *)(a1 + 40)));
  v4 = (id *)(*(void *)(a1 + 32) + 56LL);
  if (![*v4 count])
  {
    v5 = (id *)(*(void *)(a1 + 32) + 56LL);

    uint64_t v6 = *(void *)(a1 + 32) + 56LL;
    if ((v6 & 7) != 0) {
      goto LABEL_10;
    }
    *(void *)uint64_t v6 = 0LL;
  }

  v7 = (id *)(*(void *)(a1 + 32) + 64LL);
  if ((v7 & 7) == 0)
  {
    [*v7 unlock];
    return;
  }

LABEL_10:
  __break(0x5516u);
}

  __break(0x5510u);
}

        NSLog(@"Unable to get entitlement '%@', error: %@", @"com.apple.iapd.debugconsole", v9);
        v8 = 0LL;
        v9 = error;
        goto LABEL_11;
      }

      CFRelease(v5);
    }

    v9 = error;
    if (!error)
    {
      v8 = 0LL;
      goto LABEL_13;
    }

    goto LABEL_10;
  }

  NSLog(@"Unable to create security task from audit token.");
  return 0LL;
}

  if (sub_10003D168() < 1)
  {
    v8 = sub_100062E0C();
    return !((sub_100063BF0(*(_DWORD *)(v4 + 96), v8, 1) < 0x3E9) & ~a4 & a2);
  }

  else
  {
    *(void *)(v4 + 112) = a3;
    result = 0LL;
    if (a2) {
      *(_BYTE *)(v4 + 102) = 1;
    }
    else {
      *(_BYTE *)(v4 + 101) = 1;
    }
  }

  return result;
}

    __break(0x5516u);
LABEL_11:
    __break(0x550Au);
    return result;
  }

  NSLog( @"ERROR - %s:%s - %d couldn't find transport for accID %hhx",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "IsVolumeControlSupported",  230LL,  0LL);
  return 0LL;
}

  v4 = 0;
LABEL_11:
  v5 = dword_100119908;
  if (dword_100119908 == -1)
  {
    v5 = CFPreferencesGetAppBooleanValue(@"LogPowerSourceEvents", @"com.apple.iapd", 0LL) != 0;
    dword_100119908 = v5;
  }

  if (v5)
  {
    if (dword_10011BDA4 >= 0x4000)
    {
      if (dword_10011BDA4 == 0x8000)
      {
        uint64_t v6 = @"fw";
        goto LABEL_24;
      }

      if (dword_10011BDA4 == 0x4000)
      {
        uint64_t v6 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"usb charging (%d mA)",  objc_msgSend(-[__CFDictionary objectForKey:](properties, "objectForKey:", @"Amperage"), "intValue"));
        goto LABEL_24;
      }
    }

    else
    {
      if (dword_10011BDA4 == -536870201)
      {
        uint64_t v6 = @"unsupported";
        goto LABEL_24;
      }

      if (!dword_10011BDA4)
      {
        uint64_t v6 = @"battery";
LABEL_24:
        NSLog(@"power=%@ AC(last)=%d(%d)", v6, byte_10011BDA1 & 1, byte_10011BDB6 & 1);
        goto LABEL_25;
      }
    }

    uint64_t v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"unknown (%d)",  dword_10011BDA4);
    goto LABEL_24;
  }

    __break(0x5516u);
  }

  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    goto LABEL_11;
  }

  return result;
}

  __break(0x550Au);
  return result;
}

  if (((v2 | v3) & 1) == 0) {
    return 0LL;
  }
  result = 1LL;
  if (v4 && (byte_10011BEC9 & 1) == 0)
  {
    if ((v4 & 3) == 0)
    {
      sub_1000CEAEC(0, 4, "Detected Blacklisted HeadUnit ('%s' / '%s'), skip sending Database Changed Notification");
      return 0LL;
    }

    goto LABEL_20;
  }

  return result;
}

  v16 = calloc(a4 + 1, 1uLL);
  if (v16)
  {
    v17 = (unint64_t)v16;
    *v16 = a2;
    v18 = 2;
    switch(a2)
    {
      case 0u:
      case 0xEu:
        if (a4 < 4) {
          goto LABEL_48;
        }
        if (!a3) {
          goto LABEL_66;
        }
        v19 = v16 + 1;
        if (v16 == (_BYTE *)-1LL) {
          goto LABEL_74;
        }
        v20 = *a3;
        goto LABEL_29;
      case 1u:
        if (a4 < 8) {
          goto LABEL_48;
        }
        if (!a3) {
          goto LABEL_66;
        }
        if (v16 == (_BYTE *)-1LL) {
          goto LABEL_74;
        }
        *(_DWORD *)(v16 + 1) = bswap32(*a3);
        v19 = v16 + 5;
        v20 = a3[4];
LABEL_29:
        *v19 = bswap32(v20);
        goto LABEL_43;
      case 2u:
        if (a4 >= 6)
        {
          if (!a3) {
            goto LABEL_66;
          }
          if (v16 == (_BYTE *)-1LL) {
            goto LABEL_74;
          }
          *(_DWORD *)(v16 + 1) = bswap32(*a3);
          v21 = a3[4];
          if ((v21 & 0xFFFF0000) == 0)
          {
            *(_WORD *)(v16 + 5) = bswap32(v21) >> 16;
LABEL_43:
            if (a6)
            {
              if ((a6 & 7) != 0) {
                goto LABEL_66;
              }
              goto LABEL_45;
            }

            v23 = a7;
LABEL_52:
            if (v23 == -1)
            {
              if ((v14 & 7) != 0) {
                goto LABEL_66;
              }
              v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)v14 + 16LL))(v14, 0LL);
            }

            if (a4 == 0xFFFF) {
              goto LABEL_72;
            }
            a6 = sub_1000ABB10(v14, 0, 0LL, 74, v23, (const void *)v17, (unsigned __int16)(a4 + 1));
            if (!a6)
            {
              __break(0x5518u);
              goto LABEL_71;
            }

            goto LABEL_57;
          }

          goto LABEL_72;
        }

        free(v16);
        v24 = (char *)calloc(7uLL, 1uLL);
        if (!v24) {
          return;
        }
        v17 = (unint64_t)v24;
        *v24 = a2;
        if (v24 != (char *)-1LL)
        {
          *(_DWORD *)(v24 + 1) = 1677721600;
          v23 = a7;
          if (!a6)
          {
            syslog(3, "%s:%d No pRxdPacket!\n", "SendiPodNotificationForHandle", 12012);
            if (v17 >= 0xFFFFFFFFFFFFFFFBLL) {
              goto LABEL_74;
            }
            *(_WORD *)(v17 + 5) = 0;
            goto LABEL_52;
          }

          if ((a6 & 7) != 0) {
            goto LABEL_66;
          }
          if ((unint64_t)v24 < 0xFFFFFFFFFFFFFFFBLL)
          {
            *(_WORD *)(v24 + 5) = bswap32(*(unsigned __int16 *)(a6 + 68)) >> 16;
LABEL_45:
            if ((v14 & 7) != 0) {
              goto LABEL_66;
            }
            v22 = (*(uint64_t (**)(uint64_t, void))(*(void *)v14 + 16LL))(v14, 0LL);
            if (a4 == 0xFFFF) {
              goto LABEL_72;
            }
            sub_1000AC324(a6, v14, 0, 0LL, 74, v22, (const void *)v17, (unsigned __int16)(a4 + 1));
LABEL_57:
            if (a5 > 3) {
              goto LABEL_71;
            }
            sub_1000AB4C4(a1, a6, 0, a5);
LABEL_59:
            free((void *)v17);
            return;
          }
        }

        break;
      case 3u:
      case 7u:
      case 0xCu:
      case 0xFu:
      case 0x14u:
        if (!a4) {
          goto LABEL_48;
        }
        if (!a3) {
          goto LABEL_66;
        }
        if (v16 == (_BYTE *)-1LL) {
          goto LABEL_73;
        }
        v16[1] = *a3;
        goto LABEL_43;
      case 5u:
      case 0xAu:
      case 0xDu:
      case 0x10u:
      case 0x11u:
      case 0x13u:
        if (v16 == (_BYTE *)-1LL) {
          goto LABEL_73;
        }
        memcpy(v16 + 1, a3, a4);
        goto LABEL_43;
      case 9u:
        if (!a4) {
          goto LABEL_43;
        }
        sub_1000CEAEC( 0,  4,  "%s:%d incorrect dataLen!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  12080);
LABEL_48:
        v18 = 22;
LABEL_49:
        if (a5 > 3) {
          goto LABEL_71;
        }
        syslog( 3,  "%s:%d error encountered %x, for notificationType %d, dataLen %d, msgPriority %d, transID 0x%x",  "SendiPodNotificationForHandle",  12225,  v18,  a2,  a4,  a5,  a7);
        goto LABEL_59;
      case 0xBu:
        if (a4 < 2) {
          goto LABEL_48;
        }
        if (!a3) {
          goto LABEL_66;
        }
        if (v16 == (_BYTE *)-1LL) {
          goto LABEL_74;
        }
        *(_WORD *)(v16 + 1) = bswap32(*a3) >> 16;
        goto LABEL_43;
      default:
        goto LABEL_49;
    }

    goto LABEL_74;
  }

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  sub_1000CEAEC( 0,  4,  "%s:%d NULL devPort.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  675);
}

  __break(0x5516u);
  return result;
}

  sub_1000CEAEC( 0,  4,  "%s:%d NULL devPort.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  984);
}

  __break(0x5516u);
  return result;
}

  if (a2) {
    return sub_10009042C(v2, a2, 0);
  }
  return 89LL;
}

  if (*(unsigned __int8 *)(a2 + 60) >= 2u)
  {
LABEL_32:
    __break(0x550Au);
    return;
  }

  if (!v5 || *(_BYTE *)(a2 + 60)) {
    return;
  }
  if ((v5 & 7) != 0) {
    goto LABEL_31;
  }
  sub_10009703C(a1, v5, 0, 1u);
}

        NSLog(@"Unable to get entitlement '%@', error: %@", a1, v11);
        v10 = 0LL;
        v11 = *(const void **)token.val;
        goto LABEL_11;
      }

      CFRelease(v7);
    }

    v11 = *(const void **)token.val;
    if (!*(void *)token.val)
    {
      v10 = 0LL;
      goto LABEL_13;
    }

    goto LABEL_10;
  }

  NSLog(@"Unable to create security task from audit token.");
  return 0LL;
}

    __break(0x5516u);
    return;
  }

  if (v5) {
    goto LABEL_10;
  }
  if (!*p_bksProcessAssertion) {
    return;
  }
  [*p_bksProcessAssertion invalidate];

  *p_bksProcessAssertion = 0LL;
  v7 = @"Removing BKSProcessAssertion for pid %d";
LABEL_8:
  NSLog(&v7->isa, -[IAPEAClient _getProcessId](self, "_getProcessId"));
}

  __break(0x5513u);
LABEL_11:
  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  *(void *)(v1 + 64) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + 48) = 0LL;
  v3 = *(void **)(v1 + 56);
  if (v3) {
    operator delete[](v3);
  }
  *(void *)(v1 + 56) = 0LL;
  return v1;
}

        operator delete[]((void *)(v8 - 16));
        id *v7 = 0LL;
      }

      if (v6 > v4) {
        break;
      }
      v11 = &a1[v2 + 169];
      v12 = *v11;
      if (*v11)
      {
        if ((v12 & 7) != 0) {
          goto LABEL_25;
        }
        sub_1000180FC(v12);
        v13 = (void *)*v11;
        if (*v11)
        {
          sub_1000180FC(*v11);
          operator delete(v13);
        }

        *v11 = 0LL;
      }

      if (v6 > v5) {
        break;
      }
      v14 = (pthread_mutex_t **)&a1[v2 + 183];
      if (*v14)
      {
        pthread_mutex_destroy(*v14);
        free(*v14);
        *v14 = 0LL;
      }

      if (++v2 == 14)
      {
        for (i = 157LL; i != -11; i -= 12LL)
          sub_1000B6568((uint64_t)&a1[i]);
        return;
      }
    }
  }

  __break(0x5513u);
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
    return;
  }

LABEL_193:
      __break(0x5513u);
    }

    if (v53) {
LABEL_109:
    }
      operator delete[]((void *)v53);
    [v50 setObject:v54 forKey:kCFAccessoryPortPropertySupportedSampleRatesInHz];
    v59 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL);
    [v50 setObject:v59 forKey:kCFAccessoryPortPropertyCurrentSampleRate];
    [v40 setObject:v50 forKey:kCFAccessoryPortUSBOut];
  }

  if ((*(unsigned int (**)(void *))(*(void *)a4 + 216LL))(a4)
    && (*(unsigned int (**)(void *))(*(void *)a4 + 216LL))(a4) != 1)
  {
    goto LABEL_121;
  }

  v60 = +[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary");
  v61 = sub_100019370();
  if (!v61 || (v61 & 7) != 0) {
    goto LABEL_192;
  }
  v62 = *(unsigned __int8 *)(v61 + 8);
  if (v62 >= 2)
  {
LABEL_194:
    __break(0x550Au);
    return;
  }

  v63 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v62 != 0);
  [v60 setObject:v63 forKey:kCFAccessoryPortPropertyIsConnected];
  v64 = sub_1000C60C4();
  if (!v64) {
    goto LABEL_192;
  }
  if ((v64 & 7) != 0) {
    goto LABEL_192;
  }
  objc_msgSend( v60,  "setObject:forKey:",  +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  (*(uint64_t (**)(uint64_t, void *))(*(void *)v64 + 168))(v64, a4)),  kCFAccessoryPortPropertyFullDuplexIsSupported);
  v65 = sub_1000C60C4();
  if (!v65 || (v65 & 7) != 0) {
    goto LABEL_192;
  }
  objc_msgSend( v60,  "setObject:forKey:",  +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  (*(uint64_t (**)(uint64_t, void *))(*(void *)v65 + 176))(v65, a4)),  kCFAccessoryPortPropertyIsVoiceSignalProcessingSupported);
  v66 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL);
  [v60 setObject:v66 forKey:kCFAccessoryPortPropertyIsActive];
  [v40 setObject:v60 forKey:kCFAccessoryPortLineIn];
LABEL_121:
  if ([v40 count]) {
    [v38 setObject:v40, +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%X", (*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 5))(a3)) forKey];
  }
  if ([v38 count]) {
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v38, IAPAppAccessoryPortsKey);
  }
  v67 = (unsigned __int8 *)(*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 13))(a3);
  if (v67)
  {
    (*(void (**)(void *, unsigned __int8 *))(*(void *)a4 + 336LL))(a4, v67);
    v68 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v67);
    v69 = v68 ? (__CFString *)v68 : &stru_10010A828;
    v111 = IAPAppAccessoryNameKey;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v69);
    v70 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v67 + 104);
    v71 = v70 ? (__CFString *)v70 : &stru_10010A828;
    v109 = IAPAppAccessoryManufacturerKey;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v71);
    v72 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v67 + 168);
    v73 = v72 ? (__CFString *)v72 : &stru_10010A828;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v73, IAPAppAccessoryModelNumberKey);
    v74 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v67 + 232);
    v75 = v74 ? (__CFString *)v74 : &stru_10010A828;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v75, IAPAppAccessorySerialNumberKey);
    if (v67[64] != 255 || v67[65] != 255) {
      goto LABEL_144;
    }
    if ((((_DWORD)v67 + 66) & 1) != 0) {
      goto LABEL_192;
    }
    if (v67[66] == 255)
    {
      -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  &stru_10010A828,  IAPAppAccessoryFirmwareRevisionKey);
    }

    else
    {
LABEL_144:
      v76 = objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "dpFirmwareVersion");
      v77 = v67[64];
      v78 = v67 + 66;
      v79 = v67[65];
      if (v76)
      {
        v80 = *v78;
        if (objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "dpFirmwareVersion")) {
          v81 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @" (%@)",  objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "dpFirmwareVersion"));
        }
        else {
          v81 = &stru_10010A828;
        }
        v84 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d.%d.%d%@",  v77,  v79,  v80,  v81);
        if (v84) {
          v85 = (const __CFString *)v84;
        }
        else {
          v85 = &stru_10010A828;
        }
      }

      else
      {
        v82 = v67[66];
        if (v67[296]) {
          v83 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @" (%s)", v67 + 296);
        }
        else {
          v83 = &stru_10010A828;
        }
        v86 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d.%d.%d%@",  v77,  v79,  v82,  v83);
        if (v86) {
          v85 = (const __CFString *)v86;
        }
        else {
          v85 = &stru_10010A828;
        }
      }

      -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v85, IAPAppAccessoryFirmwareRevisionKey);
    }

    v87 = v67[67];
    if ((_DWORD)v87 != 255) {
      goto LABEL_166;
    }
    if (v67[68] == 255 && v67[69] == 255)
    {
      v89 = &stru_10010A828;
    }

    else
    {
LABEL_166:
      if ((((_BYTE)v67 + 68) & 3) != 0) {
        goto LABEL_192;
      }
      v88 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d.%d.%d",  v87,  v67[68],  v67[69]);
      if (v88) {
        v89 = (const __CFString *)v88;
      }
      else {
        v89 = &stru_10010A828;
      }
    }

    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v89, IAPAppAccessoryHardwareRevisionKey);
  }

  else
  {
    v111 = IAPAppAccessoryNameKey;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", &stru_10010A828);
    v109 = IAPAppAccessoryManufacturerKey;
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", &stru_10010A828);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", &stru_10010A828, IAPAppAccessoryModelNumberKey);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", &stru_10010A828, IAPAppAccessorySerialNumberKey);
    -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  &stru_10010A828,  IAPAppAccessoryFirmwareRevisionKey);
    -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  &stru_10010A828,  IAPAppAccessoryHardwareRevisionKey);
  }

  if ((*((unsigned int (**)(const IPodAccessoryDetails *))a3->var0 + 4))(a3) == 15)
  {
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", @"iPod Hi-Fi", v111);
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", @"Apple", v109);
  }

  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v119, IAPAppConnectionIDKey);
  -[NSMutableDictionary setObject:forKey:]( v25,  "setObject:forKey:",  objc_alloc_init(&OBJC_CLASS___IAPSessionList),  @"EAManagerAccessorySessions");
  v90 = (*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 7))(a3);
  if (v90)
  {
    v91 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v90);
    if (v91) {
      v92 = (const __CFString *)v91;
    }
    else {
      v92 = &stru_10010A828;
    }
    -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v92, IAPAppAccessoryPreferredAppKey);
  }

  v93 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v113);
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v93, IAPAppAccessoryCapabilitiesKey);
  WORD2(v122) = -21846;
  LODWORD(v122) = -1431655766;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a4 + 192LL))(&v122);
  v94 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02X:%02X:%02X:%02X:%02X:%02X",  v122,  BYTE1(v122),  BYTE2(v122),  BYTE3(v122),  BYTE4(v122),  BYTE5(v122));
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v94, IAPAppAccessoryMacAddressKey);
  -[NSLock lock](*p_connectedAccessoriesLock, "lock");
  p_connectionIDMap = &self->_connectionIDMap;
  if (((unint64_t)&self->_connectionIDMap & 7) != 0
    || (LODWORD(v121.tv_sec) = (*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 5))(a3),
        v96 = (EAManager *)sub_100008C50((uint64_t)p_connectionIDMap, &v121),
        ((unint64_t)&self->_connectionIDMap.__tree_.__pair1_ & 7) != 0))
  {
LABEL_192:
    __break(0x5516u);
    goto LABEL_193;
  }

  if (&self->_connectionIDMap.__tree_.__pair1_ == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, NSNumber *>, void *> > > *)v96)
  {
    v97 = v119;
    LODWORD(v121.tv_sec) = (*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 5))(a3);
    sub_100005ABC((uint64_t)p_connectionIDMap, (unsigned int *)&v121);
    *v98 = v97;
  }

  -[NSMutableDictionary setObject:forKey:](*p_connectedAccessories, "setObject:forKey:", v25, v119);
  -[NSLock unlock](*p_connectedAccessoriesLock, "unlock");
  -[EAManager _takeClientAssertionsForAccessoryConnection](self, "_takeClientAssertionsForAccessoryConnection");
  v99 = +[EAManager newPlistForAccessory:](&OBJC_CLASS___EAManager, "newPlistForAccessory:", v25);
  -[EAManager notifyEAClientsOfAccessoryConnection:](self, "notifyEAClientsOfAccessoryConnection:", v99);
  sub_1000CEA98( 3u,  @"EA new accessory (%lu total) %@",  -[NSMutableDictionary count](*p_connectedAccessories, "count"),  v25);
  v121.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v121.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v121, 0LL);
  v100 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v121.tv_sec);
  -[NSMutableDictionary setObject:forKey:](v25, "setObject:forKey:", v100, IAPAppAccessoryConnectionTimeInSecKey);
  if (v25 && ((*((uint64_t (**)(const IPodAccessoryDetails *))a3->var0 + 6))(a3) & 0x200) == 0)
  {
  }

  v121.tv_sec = (__darwin_time_t)&i;
  sub_100008D84((uint64_t **)&v121);
}

void sub_100005A18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
}

void sub_100005ABC(uint64_t a1, unsigned int *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (uint64_t *)sub_100008E54(a1, &v8, a2);
  v5 = (void *)*v4;
  if (*v4)
  {
  }

  else
  {
    uint64_t v6 = v4;
    memset(v7, 170, sizeof(v7));
    sub_100008F50((void *)a1, a2, v7);
    sub_100008FEC(a1, v8, v6, (void *)v7[0]);
    v5 = v7[0];
    v7[0] = 0LL;
    sub_100009500(v7, 0LL);
    if (!v5) {
      goto LABEL_11;
    }
  }

  if ((v5 & 7) != 0 || (((_BYTE)v5 + 32) & 7) != 0) {
LABEL_11:
  }
    __break(0x5516u);
}

uint64_t *sub_100005B9C(uint64_t *result)
{
  if (!result || (v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    v2 = result;
    sub_100008D84(&v2);
    return v1;
  }

  return result;
}

void sub_100005BE0(void *a1)
{
}

LABEL_42:
  __break(0x5516u);
}

      __break(0x5513u);
LABEL_43:
      __break(0x550Au);
    }
  }

  __break(0x5516u);
  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x5507u);
  return result;
}

    v18 = 22LL;
    goto LABEL_43;
  }

  if (a3 != 128) {
    goto LABEL_42;
  }
  if (!a4) {
    a4 = "";
  }
  result = strlen(a4);
  v19 = result + 1;
  if (result == -1) {
    goto LABEL_55;
  }
  if (v19 <= 0xFF)
  {
    v15 = 129;
    goto LABEL_30;
  }

        if (v11 < 9) {
          goto LABEL_176;
        }
        v18 = 0;
        v19 = 0;
        v88 = *(void *)((char *)v7 + 1);
        *((void *)&v92 + 1) = bswap64(v88);
LABEL_45:
        a3 = (uint64_t)&v89;
        goto LABEL_170;
      case 7:
        goto LABEL_53;
      case 9:
        if (v11 < 2) {
          goto LABEL_145;
        }
        v21 = *(void *)(a1 + 1200);
        if (!v21) {
          goto LABEL_53;
        }
        v87 = 0;
        if ((v21 & 7) != 0) {
          goto LABEL_244;
        }
        v22 = *((unsigned __int8 *)v7 + 1);
        if (!(*(unsigned int (**)(uint64_t, char *, __int16 *))(*(void *)v21 + 152LL))( v21,  (char *)&v87 + 1,  &v87)) {
          goto LABEL_107;
        }
        if (HIBYTE(v87) > 1u) {
          goto LABEL_246;
        }
        if (HIBYTE(v87)) {
          goto LABEL_53;
        }
        if (v13 > 3) {
          goto LABEL_246;
        }
        if (v13 != 2 || v22 != 2 && v22 != 5)
        {
LABEL_107:
          v85 = -1431655766;
          v41 = *(void *)(a2 + 8);
          if ((v9 & 1) != 0)
          {
            v42 = 0;
            goto LABEL_111;
          }

          if (!HIWORD(v10))
          {
            LOWORD(v85) = bswap32(v10) >> 16;
            v42 = 2;
LABEL_111:
            v43 = v42 | (unint64_t)&v85;
            *(_BYTE *)v43 = 2;
            *(_BYTE *)(v43 | 1) = 9;
            v44 = sub_1000ABB10(v41, 0, 14LL, 128, v10, &v85, v42 + 2);
            if (v44) {
              v45 = sub_1000AB4C4(*(void *)(a1 + 8), v44, 0, 1u);
            }
            else {
              v45 = 12;
            }
            v18 = 0;
            v19 = 0;
            if (v45) {
              goto LABEL_176;
            }
            goto LABEL_170;
          }

      __break(0x5507u);
LABEL_43:
      __break(0x5513u);
      goto LABEL_44;
    }

    __break(0x5513u);
  }

  __break(0x550Au);
  return result;
}

        pthread_mutex_unlock(v18);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 48LL))(a1, v15, *a4);
        v17 = 0;
        goto LABEL_43;
      }

      v18 = (pthread_mutex_t *)(a1 + 160);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 160));
      v39 = 2;
      sub_1000C64F0(a1 + 128, &v39);
      v29 = *(_DWORD *)(v28 + 28);
      if (v29 <= 0xFF)
      {
        v38 = 2;
        sub_1000C64F0(a1 + 128, &v38);
        *(_DWORD *)(v30 + 20) = v29;
        goto LABEL_42;
      }

      goto LABEL_45;
    }

    goto LABEL_44;
  }

LABEL_55:
    __break(0x5516u);
    goto LABEL_56;
  }

  if ([v5 compare:kCFAccessoryPortPropertyVolumeScalar options:1]
    || [v4 compare:kCFAccessoryPortLineOut options:1])
  {
    goto LABEL_54;
  }

  [v6 floatValue];
  uint64_t v8 = 1.0;
  if (v7 <= 1.0)
  {
    uint64_t v8 = v7;
    if (v7 < 0.0) {
      uint64_t v8 = 0.0;
    }
  }

  v9 = sub_10002645C();
  if (!v9) {
    goto LABEL_54;
  }
  v10 = (uint64_t)v9;
  v11 = sub_100042AC4();
  if (!v11 || (v11 & 7) != 0) {
    goto LABEL_55;
  }
  v12 = v8 * 255.0;
  if ((float)(v8 * 255.0) > -1.0 && v12 < 4295000000.0)
  {
    sub_100042CBC(v11, v10, v12, 0);
LABEL_54:

    return;
  }

  __break(0x5513u);
  return result;
}

  return (const char *)v19;
}

  __break(0x5516u);
}

LABEL_56:
  __break(0x5505u);
}

  __break(0x5500u);
}

          objc_msgSend((id)qword_10011BCB8, "setItemNames:forRange:forProperty:", v31, a2, v21, a1);
        }

      v44 = sub_100044B38( v60,  (uint64_t)[v31 objectForKey:@"productTypeMatch"],  (uint64_t)objc_msgSend(v31, "objectForKey:", @"productTypeContain"),  (unint64_t)objc_msgSend(v31, "objectForKey:", @"productTypeEqualLesser"),  (unint64_t)objc_msgSend(v31, "objectForKey:", @"productTypeLesser"),  (unint64_t)objc_msgSend(v31, "objectForKey:", @"productTypeEqualGreater"),  (unint64_t)objc_msgSend(v31, "objectForKey:", @"productTypeGreater"));
      if (v34 && v38 && v42 && v44)
      {
        v29 = objc_msgSend(objc_msgSend(v31, "objectForKey:", @"overrideCurrentLimit"), "intValue");
        v18 = v54;
        v28 = a9;
        goto LABEL_63;
      }
    }

    v59 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v65,  v69,  16LL);
    if (v59) {
      continue;
    }
    break;
  }

  v18 = v54;
  v28 = a9;
  v29 = (id)v56;
LABEL_63:
  v22 = v53;
LABEL_64:
  sub_1000CEA98( 0,  @"RequiresChargingCurrentLimit: isApple=%d deviceType=%d chargingCurrentLimit=%d inLimit=%d battery=%d threshold=%d",  a5,  a6,  v29,  a7,  v22,  v55);
  else {
    v46 = a5;
  }
  v25 = v60;
  if ((v46 & 1) != 0
    || (a7 > 0x5DC ? (v47 = (_DWORD)v29 == 0) : (v47 = 0),
        !v47 ? (v48 = 0) : (v48 = 1),
        (v49 = 1500, (int)v29 <= 1500) && (v48 & 1) == 0))
  {
    v49 = (int)v29;
    if (!(_DWORD)v29)
    {
LABEL_102:
      v27 = 0;
      v51 = v28 != 0LL;
      if (!v25) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
  }

  v27 = v49 < (int)a7;
  v50 = v49;
LABEL_81:
  v51 = v28 != 0LL;
  if (!v28 || !v27)
  {
LABEL_86:
    if (!v25)
    {
LABEL_88:
      if (v51)
      {
        v52 = (unsigned __int16)*v28;
      }

      else
      {
        v52 = 0xFFFFFFFFLL;
      }

      NSLog( @"RequiresChargingCurrentLimit: isApple=%d deviceType=%d batt=%d(%d) %d->%d, return %d",  a5,  a6,  v18,  v22,  a7,  v52,  v27);
      return;
    }

    if (v6 > 0x1F40)
    {
      if (v6 > 0x2B11)
      {
        if (v6 > 0x2EE0)
        {
          if (v6 > 0x3E80)
          {
            if (v6 > 0x5622)
            {
              if (v6 > 0x5DC0)
              {
                if (v6 >= 0x7D01)
                {
                  else {
                    uint64_t v6 = 48000LL;
                  }
                }

                else
                {
                  uint64_t v6 = 32000LL;
                }

                goto LABEL_54;
              }

  __break(0x5507u);
  return result;
}

    __break(0x5516u);
    return result;
  }

  result = *(void *)(v2 + 1200);
  if (!result) {
    goto LABEL_56;
  }
  if ((result & 7) != 0) {
    goto LABEL_56;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)result + 672LL))(result, v7);
  result = *(void *)(v2 + 1200);
  if (!result || (result & 7) != 0) {
    goto LABEL_56;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))(*(void *)result + 304LL))( result,  v7,  0LL,  0LL,  0LL,  *(void *)(a2 + 8),  0xFFFFFFFFLL,  1LL))
  {
    return 0LL;
  }

  else
  {
    return 2LL;
  }

      __break(0x5516u);
      return result;
    }
  }

  v7 = 0LL;
LABEL_20:
  switch(a2)
  {
    case 0:
    case 3:
    case 8:
    case 9:
      goto LABEL_52;
    case 1:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      if ((sub_1000AFBA4(result, 0LL, 9u) & 1) != 0) {
        goto LABEL_40;
      }
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      uint64_t v8 = 8;
      goto LABEL_50;
    case 2:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      if ((sub_1000AFBA4(result, 0LL, 2u) & 1) != 0) {
        goto LABEL_40;
      }
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      uint64_t v8 = 3;
      goto LABEL_50;
    case 4:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      if ((sub_1000AFBA4(result, 0LL, 4u) & 1) != 0) {
        goto LABEL_40;
      }
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      if ((sub_1000AFBA4(result, 0LL, 5u) & 1) != 0)
      {
LABEL_40:
        v9 = 1;
      }

      else
      {
        result = *(void *)(v2 + 8);
        if (!result || (result & 7) != 0) {
          goto LABEL_56;
        }
        uint64_t v8 = 6;
LABEL_50:
        v9 = sub_1000AFBA4(result, 0LL, v8);
      }

      v7 = v7 & v9;
LABEL_52:
      result = v7;
      break;
    case 5:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      uint64_t v8 = 7;
      goto LABEL_50;
    case 6:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      uint64_t v8 = 10;
      goto LABEL_50;
    case 7:
      result = *(void *)(v2 + 8);
      if (!result || (result & 7) != 0) {
        goto LABEL_56;
      }
      uint64_t v8 = 11;
      goto LABEL_50;
    default:
      sub_1000CEAEC( 0,  4,  "%s:%d Unknown id(%d)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapPrefsMgr.cpp",  2306,  a2);
      v7 = 0LL;
      goto LABEL_52;
  }

  return result;
}

LABEL_31:
        __break(0x5516u);
      }
    }
  }

  return (char)v11;
}

            __break(0x5516u);
            goto LABEL_32;
          }

          goto LABEL_29;
        }

  v12 = (unint64_t *)(a2 + 8);
  if (((a2 + 8) & 7) != 0) {
    goto LABEL_51;
  }
  if (!*v12 || (*v12 & 7) != 0) {
    goto LABEL_51;
  }
  sub_10005822C(*v12, a2);
  if ((a3 & 1) == 0)
  {
    v14 = *v12;
    if (!*v12 || (v14 & 7) != 0) {
      goto LABEL_51;
    }
    sub_100058458(v14, 0);
  }

  v15 = *(dispatch_queue_s **)(a1 + 88);
  if (!v15) {
    goto LABEL_53;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10005BC04;
  block[3] = &unk_100105AE0;
  block[4] = a2;
  dispatch_async(v15, block);
}

    if (v7 > 0x11) {
      break;
    }
    ++v7;
    v6 += 24LL;
  }

  while (!(_DWORD)result);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
  }

        pthread_mutex_lock(&stru_10011B6D8);
        dword_10011B6D0 |= v6;
        *(_DWORD *)(a1 + 1344) |= v6;
        pthread_mutex_unlock(&stru_10011B6D8);
        if (*(_BYTE *)(a1 + 1384) || !*(_DWORD *)(a1 + 1344) && !*(_DWORD *)(a1 + 1380)) {
          return;
        }
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v12) {
          return;
        }
        *(_BYTE *)(a1 + 1384) = 1;
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v13 || (v13 & 7) != 0) {
          goto LABEL_40;
        }
        sub_10005EA88(v13, *(_DWORD *)(a1 + 1376));
        break;
      default:
        goto LABEL_31;
    }
  }

  __break(0x550Au);
  return result;
}

      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 120));
      return v9;
    }

    __break(0x5516u);
    return result;
  }

  uint64_t v8 = v7;
  sub_1000CEAEC( 0,  4,  "%s:%d: workoutDataXMLrootTagParseCntx::CompleteParseProc sigData->AccumulateC14N() failed",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/iSL/Source/XMLSignature/workoutDataXMLGenericTagParseCntx.cpp",  219);
LABEL_25:
  *(_BYTE *)(v2 + 56) &= ~1u;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  return v8;
}

LABEL_13:
    NSLog( @"trying to set filtering on an location accessory (%hhx) that either doesn't exist or doesn't support filtering",  v4,  v13);
    goto LABEL_14;
  }

  __break(0x5516u);
  return self;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
LABEL_14:
    __break(0x5500u);
  }

  __break(0x5510u);
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
}

    Length = CFStringGetLength(v11);
    if (Length >= 0x100)
    {
LABEL_41:
      __break(0x5507u);
      return;
    }

    v13 = Length + 1;
    v14 = (char *)operator new[](Length + 1);
    if (((a2 + 48) & 7) == 0)
    {
      *(void *)(a2 + 48) = v14;
      if (!CFStringGetCString(v11, v14, v13, 0x8000100u)) {
        *(_DWORD *)a2 = 3;
      }
      CFRelease(v11);
LABEL_18:
      goto LABEL_20;
    }

    goto LABEL_40;
  }

    __break(0x5516u);
    goto LABEL_14;
  }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
  }

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    return;
  }

  if (a4)
  {
    v13 = sub_10006D798(v5, v11, 0);
    sub_10006D06C(v5, 4u, a5, v12, v13);
  }

  else
  {
    sub_10006D144(v5, 4u);
  }

  if ((a2 != 0) != v12) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 112LL))(v10, a5);
  }
  if (!a2)
  {
    sub_1000679F8(v5);
    v14 = sub_10006D840(v5, a3, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 96LL))(v10, a5, v14);
  }

  return 0LL;
}

  if (a5)
  {
    v15 = sub_10006D798(v6, v13, 0);
    sub_10006D06C(v6, 0x10u, a6, v14, v15);
  }

  else
  {
    sub_10006D144(v6, 0x10u);
  }

  if ((a2 != 0) != v14) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 112LL))(v12, a6);
  }
  if (!a2)
  {
    if (a3)
    {
      v16 = a3;
      v17 = 0;
    }

    else
    {
      v16 = a4;
      v17 = 1;
    }

    v18 = sub_10006D840(v6, v16, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 96LL))(v12, a6, v18);
  }

  return 0LL;
}

      __break(0x5516u);
    }
  }

  result = sub_100076174(v5);
  if (!(_DWORD)result)
  {
    v19 = 0;
    v18 = 7LL;
    goto LABEL_90;
  }

  if (!v6 || !v5)
  {
    __break(0x5518u);
    goto LABEL_100;
  }

  v12 = v9 + 2;
  if (v9 + 2 >= v7)
  {
LABEL_89:
    v19 = 0;
    v18 = 4LL;
    goto LABEL_90;
  }

  *(void *)&v34 = v5;
  WORD4(v34) = 44;
  v13 = ~v6;
  if (~v6 < v9) {
    goto LABEL_101;
  }
  v14 = *(unsigned __int8 *)(v6 + v9);
  LODWORD(v35) = v14;
  v15 = v9 | 1LL;
  if (v13 < v15) {
    goto LABEL_101;
  }
  v16 = *(unsigned __int8 *)(v6 + v15);
  DWORD1(v35) = v16;
  if (v13 < v12) {
    goto LABEL_101;
  }
  if (v7 >= v12)
  {
    if ((v7 - v12) >> 16) {
      goto LABEL_104;
    }
    if (v14 <= 1)
    {
      if (v14)
      {
        v31 = 1LL;
        v30 = 5996LL;
        v17 = "%s:%d CIapLingoGeneral::HandleTxdTunnelDataToiPod: Invalid tunnel class: %d\n";
LABEL_25:
        v18 = 4LL;
        sub_1000CEAEC( 0,  4,  v17,  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  v30,  v31);
        v19 = 0;
        goto LABEL_90;
      }

      if (v16 <= 0x1F)
      {
        v20 = (_BYTE *)(v6 + v12);
        v21 = (unsigned __int16)(v7 - v12);
        switch((int)v16)
        {
          case 0:
            if ((_DWORD)v21 != 2) {
              goto LABEL_89;
            }
            LOBYTE(v36) = *v20;
            if (v20 == (_BYTE *)-1LL) {
              goto LABEL_101;
            }
            v18 = 0LL;
            v23 = v20[1];
            goto LABEL_54;
          case 3:
            if ((_DWORD)v21 != 2) {
              goto LABEL_89;
            }
            BYTE12(v35) = *v20;
            if (v20 == (_BYTE *)-1LL) {
              goto LABEL_101;
            }
            v18 = 0LL;
            v24 = v20[1];
LABEL_38:
            BYTE13(v35) = v24;
            goto LABEL_55;
          case 4:
            if ((_DWORD)v21 != 2) {
              goto LABEL_89;
            }
            v18 = 0LL;
            v25 = *(unsigned __int16 *)v20;
LABEL_41:
            WORD6(v35) = bswap32(v25) >> 16;
            goto LABEL_55;
          case 6:
            if ((_WORD)v7 == (_WORD)v12) {
              goto LABEL_89;
            }
            v26 = *v20;
            DWORD2(v35) = v26;
            switch((int)v26)
            {
              case 0:
                if ((_DWORD)v21 != 3) {
                  goto LABEL_89;
                }
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_105;
                }
                v18 = 0LL;
                v25 = *(unsigned __int16 *)(v20 + 1);
                goto LABEL_41;
              case 1:
                if ((_DWORD)v21 != 3) {
                  goto LABEL_89;
                }
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                BYTE12(v35) = v20[1];
                v18 = 0LL;
                v24 = v20[2];
                goto LABEL_38;
              case 2:
                if ((_DWORD)v21 != 3) {
                  goto LABEL_89;
                }
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                HIDWORD(v35) = v20[1];
                v18 = 0LL;
                LOBYTE(v36) = v20[2];
                goto LABEL_55;
              case 3:
                if ((_DWORD)v21 != 2) {
                  goto LABEL_89;
                }
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                v18 = 0LL;
                BYTE12(v35) = v20[1];
                goto LABEL_55;
              case 4:
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                memcpy((char *)&v35 + 12, v20 + 1, (v21 - 1));
                v27 = 5816LL;
                break;
              case 5:
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                memcpy((char *)&v35 + 12, v20 + 1, (v21 - 1));
                v27 = 5843LL;
                break;
              case 6:
                if (v20 == (_BYTE *)-1LL) {
                  goto LABEL_101;
                }
                memcpy((char *)&v35 + 12, v20 + 1, (v21 - 1));
                v27 = 5870LL;
                break;
              default:
                v31 = v26;
                v30 = 5880LL;
                v17 = "%s:%d CIapLingoGeneral::HandleTxdTunnelDataToiPod: Invalid tunnel dev info type: 0x%02X\n";
                goto LABEL_25;
            }

            goto LABEL_64;
          case 8:
            if ((_DWORD)v21 != 7) {
              goto LABEL_89;
            }
            BYTE3(v36) = *v20;
            if (v20 == (_BYTE *)-1LL) {
              goto LABEL_105;
            }
            LOWORD(v36) = bswap32(*(unsigned __int16 *)(v20 + 1)) >> 16;
            BYTE2(v36) = v20[3];
            v18 = 0LL;
            v22 = *(_DWORD *)(v20 + 3) & 0xFFFFFF00;
LABEL_53:
            v23 = bswap32(v22);
LABEL_54:
            HIDWORD(v35) = v23;
            goto LABEL_55;
          case 11:
          case 17:
            if ((_DWORD)v21 != 4) {
              goto LABEL_89;
            }
            v18 = 0LL;
            v22 = *(_DWORD *)v20;
            goto LABEL_53;
          case 15:
            memcpy((char *)&v35 + 12, v20, v21);
            if ((sub_100063878((unint64_t)&v35 + 12, 0x20u) & 1) == 0)
            {
              v27 = 5943LL;
LABEL_64:
              v30 = v27;
              v17 = "%s:%d CIapLingoGeneral::HandleTxdTunnelDataToiPod: 0 length buffer provided\n";
              goto LABEL_25;
            }

  __break(0x5513u);
  return result;
}

      __break(0x5500u);
      return result;
    }

  __break(0x550Au);
  return result;
}

                sub_1000CEAEC( 0,  4,  "%s:%d LingoMicrophone:DeviceHandle devValid=%d handle=%hhx pMicLingo=%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoMicrophone.cpp",  1084,  0,  v1,  v2);
                v4 = 0LL;
                goto LABEL_14;
              }
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

  v5 = 0LL;
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
  return v5;
}

  sub_1000CEAEC( 0,  4,  "%s:%d Invalid handle(%hhx)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  3006,  a2);
  return 0LL;
}

  __break(0x550Au);
  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x550Au);
  return result;
}

  v10 = sub_100019C6C();
  if (!v10) {
    goto LABEL_22;
  }
  if ((v10 & 7) != 0) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16LL))(v10, a1);
  *(_BYTE *)(a1 + 4437) = 0;
  *(_BYTE *)(a1 + 4439) = 0;
  *(_BYTE *)(a1 + 4433) = 0;
  if ((((_DWORD)a1 + 4434) & 1) != 0) {
    goto LABEL_22;
  }
  *(_BYTE *)(a1 + 4434) = 0;
  if ((((_DWORD)a1 + 4438) & 1) != 0) {
    goto LABEL_22;
  }
  *(_BYTE *)(a1 + 4438) = 0;
  uint64_t *v4 = 0;
  *(_BYTE *)(a1 + 4435) = 0;
  if (a1 != -4436)
  {
    *(_BYTE *)(a1 + 4436) = 0;
    *(_WORD *)(a1 + 4440) = 0;
    *(_BYTE *)(a1 + 4442) = 0;
    *(_BYTE *)(a1 + 4504) = 0;
    *(_WORD *)(a1 + 4456) = 0;
    if ((((_BYTE)a1 - 80) & 7) == 0)
    {
      *(void *)(a1 + 4528) = 0LL;
      *(_OWORD *)(a1 + 4464) = 0u;
      *(_OWORD *)(a1 + 4480) = 0u;
      *(void *)(a1 + 4496) = 0LL;
      return;
    }

    goto LABEL_22;
  }

  __break(0x550Au);
  return result;
}

      __break(0x5516u);
      return result;
    }
  }

  return (uint64_t *)pthread_mutex_unlock(&stru_10011B828);
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x550Au);
    goto LABEL_14;
  }

  if (a3) {
    return 0LL;
  }
  result = (uint64_t)operator new(0xB8uLL);
  if ((result & 0xF) == 0)
  {
    if (a2 <= 7)
    {
      if ((result & 7) == 0) {
        return sub_1000BC670(result, v6, a2, a4);
      }
      goto LABEL_14;
    }

    goto LABEL_13;
  }

        xmlTextWriterEndElement(v4);
        xmlTextWriterEndElement(v4);
        xmlTextWriterEndDocument(v4);
        xmlFreeTextWriter(v4);
        RootElement = (xmlOutputBuffer *)xmlDocGetRootElement(v3);
        sub_1000C0EFC(RootElement, (uint64_t)&v9);
        xmlFreeDoc(v3);
LABEL_14:
        return v3 != 0LL;
      }
    }
  }

  return v3;
}

  __break(0x5516u);
  return result;
}

LABEL_17:
  __break(0x5516u);
}

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
LABEL_18:
    __break(0x5500u);
    goto LABEL_19;
  }

  if (a2 == 655363)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 37) = 0;
    *(_DWORD *)(a1 + 33) = 0;
    v3 = sub_1000C2140();
    if (v3)
    {
      if ((v3 & 7) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 88LL))(v3);
        v4 = sub_1000C2140();
        if (v4)
        {
          if ((v4 & 7) == 0)
          {
            (*(void (**)(uint64_t))(*(void *)v4 + 240LL))(v4);
            sub_1000CEA98(2u, @"HeadsetEventHandler::SendISLNotification() Headset is present");
            *(_BYTE *)(a1 + 32) = 1;
            return;
          }
        }
      }
    }

    goto LABEL_17;
  }

  sub_100020CB0(a1, " ", 1u, a4);
  return 1LL;
}

    __break(0x550Au);
  }

  __break(0x5510u);
}

    __break(0x5516u);
  }

  if (v6)
  {
    CFRelease(v6);
    uint64_t v8 = v12;
  }

  NSLog(@"SystemStatus::GetMobileGestaltKeyValue() MG error: 0x%08x retrieving key:(%@)", v8, a2);
  if (!a3) {
    goto LABEL_17;
  }
  v10 = "N/A";
  return sub_1000255A4(a3, v10);
}

      __break(0x5513u);
      return result;
    }

  __break(0x550Au);
  return result;
}

        if (++v4 == 15) {
          return result;
        }
      }

      v10 = *(void *)(v2 + 24 * v4) & 7LL;
      while (v9 && !v10)
      {
        result = *v9;
        if (!*v9 || (*v9 & 7) != 0) {
          break;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16LL))(result, a2);
        if (++v9 == *v7) {
          goto LABEL_17;
        }
      }
    }
  }

  __break(0x5516u);
LABEL_20:
  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  bzero((void *)(a1 + 24), 0x440uLL);
  if (((a1 + 56) & 7) != 0) {
    goto LABEL_34;
  }
  v11 = 0LL;
  LOWORD(v12) = 0;
  v13 = (void *)(a1 + 88);
  do
  {
    *v13 = v11;
    *(void *)(a1 + 56) = v13;
    v11 = v13;
    v13 += 4;
    v12 = (unsigned __int16)(v12 + 1);
  }

  while (v12 < 0x20);
  sub_1000612C4(*(void *)(a1 + 8));
  if (v14)
  {
    v15 = v14;
    if ((v14 & 7) == 0)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
      v17 = sub_10005E878(v15, 1, a2, v16);
      *(_DWORD *)(a1 + 1176) = v17;
      if (v17 != -1)
      {
        sub_10005EB3C(v15, v17);
        return;
      }

      __break(0x5518u);
LABEL_31:
      sub_1000D2500();
    }

    goto LABEL_34;
  }

  __break(0x5516u);
}

    dword_10011BEC0 = a2;
    return;
  }

  if (a2 == 22050) {
    goto LABEL_31;
  }
  if (a2 == 24000)
  {
    a2 = dword_10011BEC0 + 32;
    goto LABEL_17;
  }

    __break(0x5516u);
    goto LABEL_18;
  }

      sub_1000D27F4(result);
    }

    goto LABEL_18;
  }

  return sub_1000578E8(v7, 0);
}

    __break(0x5516u);
    return result;
  }

  v10 = 0;
  v9 = 1;
  if (!v7) {
    goto LABEL_17;
  }
LABEL_11:
  if (v10) {
    goto LABEL_17;
  }
  sub_10008CB5C(v7, a2, 0);
  sub_10008D224(v7, a2);
  sub_10008CC64(v7, a2, 0, 0);
  v11 = *(void *)v7;
  if ((v9 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v7, a2, 1LL);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32LL);
    v13 = v7;
    v14 = a2;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 144))(v7, a1, 1LL);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 160LL);
    v13 = v7;
    v14 = a1;
  }

  return v12(v13, v14, 1LL);
}

  *(_BYTE *)(v2 + 2200) = 0;
  result = sub_1000ABB10(v8, 0, 0LL, 60, v7, &v25, 1u);
  if (!result || (result & 7) != 0) {
    goto LABEL_113;
  }
  *(_BYTE *)(result + 132) |= 2u;
  result = sub_1000AB4C4(*(void *)(v2 + 8), result, 0, 1u);
  if (v25 > 0xF) {
    goto LABEL_114;
  }
  if (v25 - 5 < 2) {
    return 0LL;
  }
  if (v25 == 4) {
    goto LABEL_48;
  }
  if (v25)
  {
    if (!sub_100063558(v2, 116))
    {
      v14 = v2;
      v15 = 1;
      goto LABEL_49;
    }

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
LABEL_18:
    __break(0x550Au);
  }

  return result;
}

  __break(0x5516u);
  return result;
}

  v7 = 0LL;
LABEL_18:
  pthread_mutex_unlock(v4);
  return v7;
}

    __break(0x5516u);
LABEL_18:
    __break(0x5500u);
    return result;
  }

  return 4LL;
}

  __break(0x5516u);
}

    __break(0x5516u);
  }

    __break(0x5513u);
    return;
  }

  v9 = sub_10009EDE8(a5, &__str);
LABEL_13:
  a5->__r_.__value_.__l.__size_ = (std::string::size_type)v9;
}

      __break(0x5516u);
    }
  }

  else if ((_DWORD)result == 256 || (_DWORD)result == 128 || (_DWORD)result == 8)
  {
    goto LABEL_12;
  }

  return result;
}

  __break(0x5516u);
LABEL_18:
  __break(0x5513u);
  return result;
}

      __break(0x550Au);
      return result;
    }

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
  }

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    return;
  }

LABEL_25:
  -[NSLock unlock](*p_clientLock, "unlock");
}

          __break(0x5510u);
        }

        else
        {
          p_sock = &self->super._sock;
          while (((unint64_t)&self->super._sock & 3) == 0)
          {
            v10 = *p_sock;
            if ((_DWORD)v10 == -1) {
              goto LABEL_22;
            }
            memset(&v13, 0, sizeof(v13));
            if (__darwin_check_fd_set_overflow(v10, &v13, 0))
            {
              v13.fds_bits[v10 >> 5] |= 1 << v10;
            }

            if (__OFADD__(*p_sock, 1)) {
              goto LABEL_27;
            }
            v11 = select(*p_sock + 1, 0LL, &v13, 0LL, 0LL);
            if (v11)
            {
              if (v11 == -1)
              {
                syslog( 4,  "ERROR - %s:%s - %d select failed\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPSession.mm",  "-[IAPSessionBasic _writeSessionDataFromAccThread]",  876);
                if (v6) {
                  goto LABEL_23;
                }
                goto LABEL_25;
              }

              -[NSCondition lock](*p_sessionDataFromAccCondition, "lock");
              if (-[NSMutableData length](self->_sessionDataFromAcc, "length"))
              {
                if (!v6) {
                  goto LABEL_25;
                }
                block[0] = _NSConcreteStackBlock;
                block[1] = 3221225472LL;
                block[2] = sub_100013260;
                block[3] = &unk_100101C70;
                block[4] = self;
                dispatch_async(v6, block);
              }

              if (!-[NSThread isCancelled](*p_sessionDataFromAccThread, "isCancelled")) {
                -[NSCondition wait](*p_sessionDataFromAccCondition, "wait");
              }
              -[NSCondition unlock](*p_sessionDataFromAccCondition, "unlock");
            }

            if (-[NSThread isCancelled](*p_sessionDataFromAccThread, "isCancelled")) {
              goto LABEL_22;
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_27:
  __break(0x5500u);
LABEL_28:
  __break(0x5513u);
}

  __break(0x5516u);
}

      __break(0x5516u);
    }
  }

  __break(0x5513u);
  return result;
}

      __break(0x5516u);
    }
  }

  __break(0x5513u);
  return result;
}

      __break(0x5516u);
    }
  }

  __break(0x5513u);
  return result;
}
}

  __break(0x5515u);
}

  __break(0x5510u);
}

  if (byte_10011BDA0 != 1
    || ((byte_10011BDB6 ^ byte_10011BDA1) & 1) == 0
    && ((v4 ^ ((byte_10011BDB5 & 1) == 0)) & 1) != 0)
  {
    goto LABEL_41;
  }

  if (v4 || (byte_10011BDA1 & 1) != 0)
  {
    if (qword_10011BD98 != -1) {
      dispatch_once(&qword_10011BD98, &stru_100104DF8);
    }
    v7 = (void *)qword_10011BD90;
    if (qword_10011BD90 && (qword_10011BD90 & 7) == 0)
    {
      uint64_t v8 = 22LL;
      goto LABEL_40;
    }
  }

  else
  {
    if (qword_10011BD98 != -1) {
      dispatch_once(&qword_10011BD98, &stru_100104DF8);
    }
    v7 = (void *)qword_10011BD90;
    if (qword_10011BD90 && (qword_10011BD90 & 7) == 0)
    {
      uint64_t v8 = 23LL;
LABEL_40:
      (*(void (**)(void))(*v7 + 8 * v8))();
      byte_10011BDB5 = v4;
      byte_10011BDB6 = byte_10011BDA1 & 1;
LABEL_41:
      dispatch_async(&_dispatch_main_q, &stru_100104FE8);
      CFRelease(properties);
LABEL_42:

      return;
    }
  }

  __break(0x5516u);
}

  __break(0x5513u);
LABEL_26:
  __break(0x5507u);
  return result;
}

              *(_DWORD *)v5 = a3;
              return 0LL;
            }
          }
        }
      }
    }

  __break(0x5510u);
  return result;
}

    __break(0x550Au);
    goto LABEL_26;
  }

    __break(0x5516u);
    goto LABEL_26;
  }

  if (a2) {
    return 0xFFFFFFFFLL;
  }
  result = bswap64(*(void *)a3);
  if (a4)
  {
    if ((a4 & 3) == 0)
    {
      uint64_t v6 = 8;
LABEL_19:
      *a4 = v6;
      return result;
    }

    goto LABEL_25;
  }

  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5507u);
  return result;
}

    __break(0x5516u);
    goto LABEL_26;
  }

  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v5 + 232))(v3);
  result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 240LL))(v3);
  if (v8 > result)
  {
    LOBYTE(v6) = 0;
    v7 = 1;
    result = 2LL;
    goto LABEL_19;
  }

  v9 = 255LL * v8;
  if ((v9 & 0xFFFFFFFF00000000LL) != 0)
  {
LABEL_29:
    __break(0x550Cu);
    goto LABEL_30;
  }

  result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 240LL))(v3);
  if ((_DWORD)result)
  {
    v10 = result;
    result = 0LL;
    uint64_t v6 = v9 / v10;
    v7 = (v6 & 0xFC) > 0x4B;
    goto LABEL_19;
  }

      result = *(void *)(v5 + 8);
      if (result && (result & 7) == 0) {
        return sub_100057A4C(result, a2, a3, a4, a5);
      }
      goto LABEL_28;
    }
  }

    __break(0x550Au);
    return;
  }

  if (v7 > 0x3F) {
    goto LABEL_25;
  }
  uint64_t v8 = (int *)(v4 + 32);
  if ((v8 & 7) != 0)
  {
LABEL_24:
    __break(0x5516u);
    goto LABEL_25;
  }

  if (a3 >= 0) {
    v11 = ~(1 << a3);
  }
  else {
    v11 = -1;
  }
  v10 = *v8 & v11;
LABEL_21:
  *uint64_t v8 = v10;
  if (v10) {
    void *v5 = v6 | 1;
  }
  sub_10008C904(a1, a2);
}

  __break(0x550Au);
  return result;
}

      __break(0x5516u);
LABEL_26:
      __break(0x5500u);
    }
  }

  __break(0x5513u);
  return result;
}

    __break(0x550Au);
    return result;
  }

  result = 1LL;
  switch(*(_DWORD *)(v2 + 1404))
  {
    case 0:
    case 4:
      return result;
    case 2:
      v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 392LL);
      goto LABEL_23;
    case 3:
      v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 432LL);
      goto LABEL_23;
    case 5:
      v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 440LL);
LABEL_23:
      result = v5(a2);
      break;
    default:
      return sub_10009D398(v2, a2);
  }

  return result;
}

    __break(0x550Au);
    return result;
  }

  v5 = *(_DWORD *)(v2 + 1404);
  if (v5 > 5) {
    return sub_10009D450(v2, a2);
  }
  if (v5 == 2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400LL))(a2);
  }
  else {
    return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 352LL))(a2) != 0;
  }
}

  __break(0x550Au);
  return result;
}

        if (++v13 == 27) {
          goto LABEL_32;
        }
      }

      sub_1000A0104(*(void *)(a1 + 8), v13, 0);
      goto LABEL_25;
    }

    if (a2 == 8)
    {
      if (!v8)
      {
LABEL_32:
        v14 = *(void *)(a1 + 8);
        if (v14) {
          v15 = (*(void *)(a1 + 8) & 7LL) == 0;
        }
        else {
          v15 = 0;
        }
        if (!v15)
        {
LABEL_67:
          __break(0x5516u);
LABEL_68:
          __break(0x5513u);
LABEL_69:
          sub_1000D251C();
        }

        if (sub_100057B4C(v14))
        {
          v16 = sub_100025BE8();
          if (!v16 || (v16 & 7) != 0) {
            goto LABEL_67;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 104LL))(v16, v9);
        }

        return 0LL;
      }

      goto LABEL_17;
    }
  }

  return 0LL;
}

    __break(0x5516u);
    goto LABEL_26;
  }

              __break(0x5510u);
              goto LABEL_26;
            }
          }
        }
      }

      else if ((((_BYTE)v2 + 8) & 3) == 0)
      {
        NSLog( @"creating process assertion - %s:%s - %d clientID=%d pid=%d",  "/Library/Caches/com.apple.xbs/Sources/iapd/common/IAPEAClient.m",  "-[IAPEAClient takeProcessAssertion:]_block_invoke",  207,  *(unsigned int *)(v2 + 8),  [(id)v2 _getProcessId]);
        v9 = SBSProcessAssertionCreateForPID( kCFAllocatorDefault,  [*(id *)(a1 + 32) _getProcessId],  1,  3,  *(void *)(a1 + 40));
        v10 = *(void *)(a1 + 32) + 88LL;
        if ((v10 & 7) == 0)
        {
          *(void *)v10 = v9;
          goto LABEL_17;
        }
      }
    }

      v11 = 2LL;
      goto LABEL_26;
    }
  }

  if ((unint64_t)(v21 - v19) >= 0x10000)
  {
LABEL_36:
    __break(0x5507u);
    return;
  }

  sub_1000ABBD4(a1, a2, a3, a4, a5, a6, v19, (unsigned __int16)((_WORD)v21 - (_WORD)v19));
  operator delete[](v19);
  v22 = *(void *)(a1 + 136);
  if (v22)
  {
    if ((v22 & 7) == 0)
    {
      v23 = *(void *)(v22 + 48);
      if (v23)
      {
        if ((v23 & 7) == 0)
        {
          sub_10005BE44(v23, a1);
          return;
        }
      }
    }

    goto LABEL_34;
  }

                      *v10 = v11;
LABEL_26:
                      if (!__CFADD__(v11, 16LL * a3))
                      {
                        v14 = v11 + 16LL * a3;
                        pthread_mutex_unlock(&stru_10011B828);
                        return v14;
                      }

                      goto LABEL_30;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

      __break(0x5516u);
    }
  }

    sub_10000D048(&v13);
LABEL_26:
    uint64_t v6 = v13;
  }

  if (((a1 + 288) & 7) != 0)
  {
LABEL_32:
    __break(0x5516u);
    return;
  }

  if (!*(void *)(a1 + 288))
  {
    v12 = *(dispatch_source_s **)(a1 + 296);
    if (v12) {
      dispatch_source_set_timer(v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    }
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 208));
}

        if (v11) {
          goto LABEL_31;
        }
      }
    }

    sub_1000CEAEC(0, 4, "iMAXMLParseCtlr::ParseLoopEx: Failed to create xmltextreader object\n");
  }

    __break(0x5516u);
    return result;
  }

  this->__r_.__value_.__s.__data_[0] = 0;
  this->__r_.__value_.__s.__size_ = 0;
LABEL_9:
  v4 = a2 - 1;
  do
  {
    v5 = *(unsigned __int8 *)(v4 + 1);
    if (v5 <= 0x3B)
    {
      if (v5 == 38)
      {
        uint64_t v6 = this;
        v7 = "&amp;";
        goto LABEL_17;
      }

      if (!*(_BYTE *)(v4 + 1)) {
        goto LABEL_22;
      }
    }

    else
    {
      if (v5 == 60)
      {
        uint64_t v6 = this;
        v7 = "&lt;";
        goto LABEL_17;
      }

      if (v5 == 62)
      {
        uint64_t v6 = this;
        v7 = "&gt;";
LABEL_17:
        std::string::append(v6, v7);
        goto LABEL_20;
      }
    }

    std::string::push_back(this, v5);
LABEL_20:
    ++v4;
  }

  while (v4 != -1);
  __break(0x5513u);
LABEL_22:
  size = this->__r_.__value_.__s.__size_;
  if ((size & 0x80u) != 0LL) {
    size = this->__r_.__value_.__l.__size_;
  }
  return size != 0;
}

LABEL_48:
          if ((_DWORD)v12 != 8 && (_DWORD)v12 != 4) {
            goto LABEL_23;
          }
          goto LABEL_50;
        }

        if ((_DWORD)v12 != 4)
        {
          if ((_DWORD)v12 == 1) {
            goto LABEL_29;
          }
          goto LABEL_48;
        }

    __break(0x5516u);
    goto LABEL_49;
  }

  if (*(_BYTE *)(result + 2757)) {
    *(_DWORD *)(result + 2772) = -1;
  }
  v5 = *(unsigned int *)(result + 2764);
  v24 = 0xAAAAAAAAAAAAAAAALL;
  result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_48;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 400LL))(result, v5);
  v24 = result;
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_48;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result))
  {
LABEL_24:
    v7 = 0;
    uint64_t v8 = -1;
    *(_DWORD *)(v2 + 2772) = -1;
    *(_DWORD *)(v2 + 1748) = -1;
LABEL_36:
    result = (uint64_t)sub_100064D0C(&v24);
    goto LABEL_37;
  }

  v7 = *(_DWORD *)(v2 + 2772);
  if (v7 == -1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 368LL))(v6);
    if (v7) {
      goto LABEL_15;
    }
LABEL_27:
    uint64_t v8 = -1;
LABEL_35:
    *(_DWORD *)(v2 + 2772) = v7;
    goto LABEL_36;
  }

  if (!v7) {
    goto LABEL_27;
  }
LABEL_15:
  result = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 392LL))(v6, *(unsigned int *)(v2 + 2768));
  uint64_t v8 = result;
  v9 = *(_DWORD *)(v2 + 1748);
  if ((_DWORD)result == v9 || v9 == -1)
  {
LABEL_33:
    if (v8 == -1) {
      uint64_t v8 = 0;
    }
    goto LABEL_35;
  }

  if (*(unsigned __int8 *)(v2 + 1756) <= 1u)
  {
    if (*(_BYTE *)(v2 + 1756))
    {
      v23[0] = 0xAAAAAAAAAAAAAAAALL;
      v23[1] = 0xAAAAAAAAAAAAAAAALL;
      sub_1000CE91C((uint64_t)v23, 0);
      v22[1] = 0xAAAAAAAAAAAAAAAALL;
      v23[0] = off_100105F38;
      v22[0] = 0xAAAAAAAAAAAAAAAALL;
      v21 = xmmword_1000DEA00;
      result = sub_1000CE9E8((uint64_t)v23, v22);
      if (((v2 + 1760) & 7) != 0) {
        goto LABEL_48;
      }
      v25 = *(_OWORD *)(v2 + 1760);
      v20 = *(_OWORD *)sub_10006E228(&v25, &v21);
      if ((sub_10006E1B0((uint64_t)v22, &v20) & 1) != 0)
      {
        uint64_t v8 = *(_DWORD *)(v2 + 1748);
        LODWORD(v5) = *(_DWORD *)(v2 + 1744);
        v7 = *(_DWORD *)(v2 + 1752);
      }

      else
      {
        *(_BYTE *)(v2 + 1756) = 0;
        *(_OWORD *)(v2 + 1760) = 0u;
        *(_DWORD *)(v2 + 1744) = v5;
        *(_DWORD *)(v2 + 1748) = v8;
        *(_DWORD *)(v2 + 1752) = v7;
      }

      v23[0] = off_100105F38;
      v11 = (__int128 *)v23;
    }

    else
    {
      *(void *)&v25 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
      result = sub_1000CE91C((uint64_t)&v25, 0);
      *(void *)&v25 = off_100105F38;
      if (((v2 + 1760) & 7) != 0) {
        goto LABEL_48;
      }
      sub_1000CE9E8((uint64_t)&v25, (__darwin_time_t *)(v2 + 1760));
      *(_BYTE *)(v2 + 1756) = 1;
      uint64_t v8 = *(_DWORD *)(v2 + 1748);
      LODWORD(v5) = *(_DWORD *)(v2 + 1744);
      v7 = *(_DWORD *)(v2 + 1752);
      *(void *)&v25 = off_100105F38;
      v11 = &v25;
    }

    sub_1000CE94C(v11);
    goto LABEL_33;
  }

    v14 = v2;
    v15 = 0;
LABEL_49:
    sub_1000807C0(v14, v15);
    return 0LL;
  }

  v24 = 116;
  result = sub_100062E78(v2, -1, &v24, 0LL, 0xFFFFu);
  if ((((_BYTE)v2 + 8) & 7) == 0)
  {
    *(void *)(v2 + 1272) = *(void *)(v2 + 2056);
    sub_100085294((void *)v2);
    result = *(void *)(v2 + 8);
    v11 = (result & 7) == 0 && result != 0;
    if ((*(_BYTE *)(v2 + 1273) & 6) != 0)
    {
      if (!v11) {
        goto LABEL_113;
      }
      sub_100057A9C(result, 0LL, 1u);
    }

    else
    {
      if (!v11) {
        goto LABEL_113;
      }
      sub_100057AD0(result, 0LL, 1u);
    }

    if ((*(_BYTE *)(v2 + 1272) & 4) != 0 && sub_1000763AC(v2))
    {
      result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      result = sub_1000579D4(result);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      sub_1000775F4(result, 4LL, 1LL);
      result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      result = sub_1000579D4(result);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      sub_10007F8B0(result, 1LL);
      result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      result = sub_1000579D4(result);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      sub_100077544(result, 0, 1LL);
      result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      result = sub_1000579D4(result);
      if (!result || (result & 7) != 0) {
        goto LABEL_113;
      }
      sub_100077544(result, 2u, 1LL);
    }

    result = *(void *)(v2 + 8);
    v17 = (result & 7) == 0 && result != 0;
    if ((*(_BYTE *)(v2 + 1273) & 0x10) != 0)
    {
      if (!v17) {
        goto LABEL_113;
      }
      sub_100057A9C(result, 0LL, 3u);
    }

    else
    {
      if (!v17) {
        goto LABEL_113;
      }
      sub_100057AD0(result, 0LL, 3u);
    }

    v18 = *(void *)(v2 + 1272);
    if ((v18 & 0x100000) != 0)
    {
      v19 = sub_1000785F0(v2);
      sub_10007CF80(v2, v19 | 0x800);
      v18 = *(void *)(v2 + 1272);
    }

    if ((v18 & 0x800) != 0)
    {
      result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_113;
      }
      if ((result & 7) != 0) {
        goto LABEL_113;
      }
      result = sub_1000579D4(result);
      if (!result || (result & 7) != 0) {
        goto LABEL_113;
      }
      sub_10007EE14(result, 1LL);
    }

    result = *(void *)(v2 + 8);
    if (result && (result & 7) == 0)
    {
      result = sub_100057B7C(result);
      if ((((_BYTE)v2 - 52) & 3) == 0)
      {
        v20 = (_DWORD)result == -1 ? 16 : result;
        *(_DWORD *)(v2 + 1228) = v20;
        sub_10007158C(v2, 0, 0LL, v2 + 1224, 48);
        result = sub_1000BE638();
        if (result)
        {
          v21 = result;
          if ((result & 7) == 0)
          {
            v22 = sub_1000C0034(*(void *)(v2 + 8));
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 128LL))(v21, v22);
            if ((((_BYTE)v2 - 56) & 7) == 0)
            {
              if ((*(_DWORD *)(v2 + 2188) & 0x101) == 1)
              {
                sub_10007304C(v2, v8);
                return 0LL;
              }

              if ((((_BYTE)v2 - 96) & 7) == 0)
              {
                *(_WORD *)(v2 + 1440) = 0;
                sub_10006FED0(v2, v8, 0);
                sub_10006FED0(v2, v8, 3);
                sub_10006FED0(v2, v8, 4);
                sub_100062D14((void *)v2, -1, 120, 0LL, 500);
                return 0LL;
              }
            }
          }
        }
      }
    }
  }

  v21 = sub_1000B6CE0();
  if (!v21 || (v21 & 7) != 0) {
    goto LABEL_53;
  }
  sub_1000BC0A4(v21);
}

          std::string::~string(&__str);
        }

        *(_BYTE *)(a1 + 8) = v21;
        *(_BYTE *)(a1 + 9) = v20;
        xmlFreeDoc(v1);
        v18 = 1LL;
        goto LABEL_45;
      }

LABEL_50:
        if ([v20 clientRequiresAccReset])
        {
          v30 = v20;
          v31 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          sub_1000CEA98( 3u,  @"%s:%s-%d reconnecting accessory for running process %@\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/EAManager.mm",  "-[EAManager applicationStateChanged:]",  1729LL,  v6);
          v32 = v30;
          [v30 setClientRequiresAccReset:0];
          -[NSLock lock](*p_connectedAccessoriesLock, "lock");
          v33 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
          v63 = 0u;
          v64 = 0u;
          v65 = 0u;
          v66 = 0u;
          if (v52) {
            goto LABEL_70;
          }
          v34 = v33;
          v55 = v19;
          v35 = *p_connectedAccessories;
          v36 = [*p_connectedAccessories countByEnumeratingWithState:&v63 objects:v80 count:16];
          if (v36)
          {
            v37 = v36;
            v38 = *(void *)v64;
            do
            {
              for (k = 0LL; k != v37; k = (char *)k + 1)
              {
                if (*(void *)v64 != v38) {
                  objc_enumerationMutation(v35);
                }
                v40 = +[EAManager newPlistForAccessory:]( EAManager,  "newPlistForAccessory:",  +[NSMutableDictionary dictionaryWithDictionary:]( NSMutableDictionary,  "dictionaryWithDictionary:",  [*p_connectedAccessories objectForKey:*(void *)(*((void *)&v63 + 1) + 8 * (void)k)]));
                -[NSMutableArray addObject:](v31, "addObject:", v40);
              }

              v37 = [v35 countByEnumeratingWithState:&v63 objects:v80 count:16];
            }

            while (v37);
          }

          -[NSLock unlock](*p_connectedAccessoriesLock, "unlock");
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v41 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v59,  v79,  16LL);
          v17 = v53;
          v18 = v48;
          if (v41)
          {
            v42 = v41;
            v43 = *(void *)v60;
            do
            {
              for (m = 0LL; m != v42; m = (char *)m + 1)
              {
                if (*(void *)v60 != v43) {
                  objc_enumerationMutation(v31);
                }
                -[EAManager notifyEAClient:ofAccessoryEvent:accessory:]( self,  "notifyEAClient:ofAccessoryEvent:accessory:",  v32,  "EAProtocolAccessoryReconnected",  *(void *)(*((void *)&v59 + 1) + 8LL * (void)m));
              }

              v42 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v59,  v79,  16LL);
            }

            while (v42);
          }

          p_clients = (id *)&self->_clients;
          uint64_t v8 = v50;
          v15 = v49;
          v19 = v55;
          v12 = v51;
        }

  __break(0x5516u);
  return result;
}

      __break(0x5513u);
      goto LABEL_51;
    }

    goto LABEL_49;
  }

  if (*(_BYTE *)(a1 + 40)) {
    v24 = 3;
  }
  else {
    v24 = 1;
  }
  *(_BYTE *)(a1 + 40) = v24;
  if (!a4) {
    goto LABEL_49;
  }
  *a4 = v24;
  strlcpy(a4 + 1, v21, a5 - 1);
  v25 = *(unsigned __int16 *)(a1 + 42);
  v15 = __CFADD__(v25, a5 - 1);
  v26 = v25 + a5 - 1;
  if (!v15)
  {
    if (!HIWORD(v26))
    {
      *(_WORD *)(a1 + 42) = v26;
      v14 = 1;
      goto LABEL_18;
    }

    goto LABEL_51;
  }

    __break(0x550Au);
    goto LABEL_51;
  }

          __break(0x5507u);
          goto LABEL_51;
        }
      }
    }

  if (!v10) {
    return 0LL;
  }
  return 2LL;
}

    __break(0x5516u);
    goto LABEL_51;
  }

        __break(0x550Au);
        return;
      }
    }

    __break(0x5513u);
LABEL_51:
    __break(0x5516u);
    goto LABEL_52;
  }

  if (a2 == 1)
  {
    if (a3 > 8 || ((1LL << a3) & 0x1A0) == 0) {
      return;
    }
    v15 = 0;
    for (i = (void *)(a1 + 1208); ; i += 10)
    {
      if (*i) {
        sub_1000CEAEC( 0,  4,  "%s:%d NotifyEvent: handle: %03d, pCurFile: %hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoStorage.cpp",  530,  v15,  (_DWORD)i);
      }
      v15 = (v15 + 1);
      if (v15 >= 0x10) {
        return;
      }
    }

    goto LABEL_50;
  }

  if (a2 == 4)
  {
    *(void *)(a1 + 1192) = a4;
    v7 = *(void *)(a1 + 8);
    if (v7)
    {
      if ((v7 & 7) == 0)
      {
        sub_10005758C(v7, 0xCu, 0);
        uint64_t v8 = *(void *)(a1 + 8);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            sub_100057538(v8, 0xCu, 0);
            return;
          }
        }
      }
    }

    goto LABEL_51;
  }

          sub_1000AB4C4(*(void *)(v2 + 8), a2, 0, 1u);
          a2 = 0LL;
          goto LABEL_22;
        }
      }
    }

    uint64_t v8 = 2LL;
LABEL_49:
    v10 = 4;
    goto LABEL_50;
  }

  if (v5)
  {
    if (v5 == 2)
    {
      uint64_t v8 = 2LL;
      if (v6 != 1 || !*(_BYTE *)(v2 + 1265)) {
        goto LABEL_22;
      }
      v14 = 1;
      if (v4)
      {
        BYTE4(v13) = *v4;
LABEL_54:
        result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v14, 0LL, 0xFFFFu);
        if ((_DWORD)result)
        {
          uint64_t v8 = result;
          goto LABEL_22;
        }

        if (!*(_BYTE *)(v2 + 1265)) {
          goto LABEL_63;
        }
        if (*(unsigned __int8 *)(v2 + 1266) <= 1u)
        {
          if (*(_BYTE *)(v2 + 1266))
          {
            pthread_mutex_lock((pthread_mutex_t *)(v2 + 1192));
            result = *(void *)(v2 + 8);
            if (result && (result & 7) == 0)
            {
              sub_100057A4C(result, 6u, 0LL, (uint64_t)&v13, 8);
              pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1192));
              goto LABEL_63;
            }

            goto LABEL_65;
          }

LABEL_23:
        v19 = (char *)v19 + 1;
      }

      while (v19 != v17);
      v45 = [v15 countByEnumeratingWithState:&v75 objects:v83 count:16];
      v17 = v45;
    }

    while (v45);
  }

  -[NSLock unlock](self->_clientLock, "unlock");
}

  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

  if (!a6)
  {
LABEL_40:

    return;
  }

          if ((_DWORD)a2 == -1)
          {
            if (!v16 || !v19) {
              goto LABEL_51;
            }
            v26 = (NSString *)MPMediaPlaylistPropertyParentPersistentID;
            v25 = v16;
          }

          else
          {
            [v12[406] setGroupingType:6];
            objc_msgSend( v12[406],  "addFilterPredicate:",  objc_msgSend( v11[361],  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsGeniusMix));
            objc_msgSend( v12[406],  "addFilterPredicate:",  objc_msgSend( v11[361],  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsHidden));
            v21 = [v12[406] collections];
            if (!v21) {
              goto LABEL_51;
            }
            v22 = v21;
            v23 = [v21 count];
            v24 = sub_10002F4C4(v22, a2);
            if (v24 >= v23) {
              goto LABEL_51;
            }
            v25 = [v22 objectAtIndex:v24];
            v26 = MPMediaPlaylistPropertyPersistentID;
          }

          v27 = [v25 valueForProperty:v26];
          v28 = (uint64_t)v27;
          if (v27)
          {
            if ([v27 intValue])
            {
              v29 = +[MPMediaQuery playlistsQuery](&OBJC_CLASS___MPMediaQuery, "playlistsQuery");
              -[MPMediaQuery addFilterPredicate:]( v29,  "addFilterPredicate:",  [v11[361] predicateWithValue:v28 forProperty:MPMediaItemPropertyPersistentID]);
              v30 = -[MPMediaQuery collections](v29, "collections");
              if ((id)-[NSArray count](v30, "count") == (id)1)
              {
                v31 = -[NSArray objectAtIndex:](v30, "objectAtIndex:", 0LL);
                if (v31)
                {
                  if (objc_msgSend( objc_msgSend(v31, "valueForProperty:", MPMediaPlaylistPropertyIsFolder),  "BOOLValue")) {
                    sub_10002F3F8(MPMediaPlaylistPropertyParentPersistentID, v28);
                  }
                  else {
                    sub_10002FABC(MPMediaPlaylistPropertyParentPersistentID, 0LL, 1);
                  }
                  if (!dword_1001197D4) {
                    [(id)qword_10011BCB8 reset];
                  }
                  v10 = (id)v28;
                }
              }

              goto LABEL_51;
            }

            sub_10002EC3C();
            sub_10002F3F8(MPMediaItemPropertyMediaType, (uint64_t)v9);
            v34 = sub_100036FF0();
            if (v34 && (v34 & 7) == 0)
            {
              goto LABEL_52;
            }

    __break(0x5516u);
    goto LABEL_24;
  }

    __break(0x5516u);
    goto LABEL_24;
  }

  result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (result)
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10003D3BC;
    v20[3] = &unk_100103288;
    v20[4] = v6;
    v21 = a2;
    dispatch_sync((dispatch_queue_t)result, v20);
    v11 = 0LL;
LABEL_22:

    return (id *)v11;
  }

  __break(0x5515u);
  return result;
}

  if (v5)
  {
    v13 = *(unsigned __int16 *)a2;
    if (v13 == 0xFFFF)
    {
LABEL_36:
      __break(0x5507u);
      return result;
    }

    v14 = v13 + 1;
    *(_WORD *)a2 = v14;
    if ((((_DWORD)a2 + 2) & 1) == 0)
    {
      if (((a2 + 8) & 7) == 0)
      {
        v15 = *(void *)(a2 + 8);
        if (__CFADD__(v15, 4 * v4))
        {
LABEL_35:
          __break(0x5513u);
          goto LABEL_36;
        }

        if (v15)
        {
          v16 = (unsigned int *)(v15 + 4 * v4);
          if ((v16 & 3) == 0)
          {
            *v16 = v3;
            return result;
          }
        }
      }
    }

  __break(0x5513u);
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    goto LABEL_24;
  }

  if (!v3) {
    goto LABEL_23;
  }
  uint64_t v6 = *(_DWORD *)(v1 + 104);
  if (v6 > 3) {
    goto LABEL_24;
  }
  v4 = sub_100061DD8( result,  *(void *)(v1 + 32),  v6,  *(void *)(v1 + 112),  *(unsigned int *)(v1 + 120),  *(unsigned int *)(v1 + 124));
  v5 = 2 * (v4 == 6);
  if (!v4) {
    return v5;
  }
LABEL_16:
  if (v4 == 6) {
    return v5;
  }
  result = *(void *)(v1 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_23;
  }
  result = sub_10001864C(result);
  v7 = *(unsigned int *)(v1 + 16);
  if ((v7 + 32) <= 0x3F)
  {
    uint64_t v8 = sub_1000ABD94( result,  0,  v7,  (_DWORD)v7 != 3,  *(_DWORD *)(v1 + 24),  v4,  *(unsigned __int16 *)(v1 + 20),  0,  0,  0);
    if (v8) {
      sub_1000AB4C4(*(void *)(v1 + 8), v8, 0, 1u);
    }
    return v5;
  }

                  if (!*a1)
                  {
LABEL_24:
                    operator delete[]((void *)v5);
                    v5 = 0LL;
                  }

                  sub_1000578E8(v8, 0xAu);
                  return v5;
                }
              }
            }
          }
        }
      }
    }
  }

      __break(0x5507u);
      return;
    case 8:
      *(_BYTE *)(a1 + 1400) = 0;
      if (*(void *)(a1 + 1392) != a4) {
        return;
      }
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1328));
      *(_BYTE *)(a1 + 1401) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1328));
      v9[0] = 2LL;
      v5 = *(void *)(a1 + 1392);
      v9[1] = 0LL;
      v9[2] = v5;
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6 && (v6 & 7) == 0)
      {
        sub_100057A4C(v6, 0xAu, 0LL, (uint64_t)v9, 24);
        sub_100064F90(a1);
        return;
      }

      goto LABEL_22;
    case 4:
      *(void *)(a1 + 1392) = a4;
      if (!a4) {
        sub_1000D2500();
      }
      *(_DWORD *)(a1 + 1404) = 0;
      *(_BYTE *)(a1 + 1400) = 1;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1328));
      *(_BYTE *)(a1 + 1401) = 1;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1328));
      break;
  }

        __break(0x5507u);
        goto LABEL_24;
      }
    }
  }

  __break(0x5507u);
  return result;
}

    sub_1000CEAEC( 0,  4,  "%s:%d Invalid command!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoLocation.cpp",  1002);
    goto LABEL_9;
  }

  v11 = 0;
  HIDWORD(v19) = 0;
  if (!a4) {
    goto LABEL_21;
  }
LABEL_16:
  v12 = sub_100061274();
  if (!v12 || (v12 & 7) != 0) {
    goto LABEL_31;
  }
  v13 = sub_10008E168(v12, *(void *)(a1 + 8));
  v18 = -1431655766;
  if ((sub_100063C84(a1, *(void *)(a1 + 8)) & 1) != 0)
  {
    v14 = 0;
    goto LABEL_26;
  }

  if (!HIWORD(a2))
  {
    LOWORD(v18) = bswap32(a2) >> 16;
    v14 = 2;
LABEL_26:
    v15 = v14 | (unint64_t)&v18;
    *(_BYTE *)v15 = 2;
    *(_BYTE *)(v15 | 1) = v6;
    v16 = sub_1000ABB10(v13, 0, 14LL, 128, a2, &v18, v14 + 2);
    if (v16) {
      v17 = sub_1000AB4C4(*(void *)(a1 + 8), v16, 0, 1u);
    }
    else {
      v17 = 12;
    }
    *a5 = v17;
    if ((v11 & 1) == 0)
    {
LABEL_30:
      uint64_t v8 = *(void *)(a1 + 8);
      if (!v8) {
        goto LABEL_31;
      }
      goto LABEL_7;
    }

  v7 = *(void **)(a2 + 141);
  if (v7)
  {
    operator delete[](v7);
    *(void *)(a2 + 141) = 0LL;
  }

  __break(0x550Au);
  return result;
}

          __break(0x5507u);
          return result;
        }
      }
    }

  __break(0x5516u);
LABEL_24:
  __break(0x5500u);
  return result;
}

  __break(0x5513u);
}

    __break(0x5518u);
    goto LABEL_24;
  }

    v15 = 5LL;
    v14 = sub_1000A2FAC;
    if (!a3) {
      return result;
    }
    goto LABEL_63;
  }

  if ((_DWORD)a2 != 1245185) {
    return result;
  }
  if (!a4) {
    goto LABEL_23;
  }
  result = (uint64_t)operator new(0x20uLL);
  if (result & 0xF | v5 & 7) {
    goto LABEL_70;
  }
  uint64_t v8 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 > 7u) {
    goto LABEL_72;
  }
  v9 = result;
  if ((result & 7) != 0) {
    goto LABEL_70;
  }
  *(_DWORD *)result = v8;
  if (v8 < 3)
  {
    v10 = (const void **)(v5 + 8);
    if (((v5 + 8) & 7) != 0) {
      goto LABEL_70;
    }
    v11 = *v10;
    if (*v10)
    {
      v12 = (size_t *)(v5 + 16);
      if (((v5 + 16) & 7) != 0) {
        goto LABEL_70;
      }
      v13 = *v12;
      if (*v12)
      {
        result = (uint64_t)operator new[](*v12);
        if (((v9 + 8) & 7) == 0)
        {
          *(void *)(v9 + 8) = result;
          result = (uint64_t)memcpy((void *)result, v11, v13);
LABEL_55:
          if ((((_BYTE)v5 + 16) & 7) != 0) {
            goto LABEL_70;
          }
          if (((v9 + 16) & 7) != 0) {
            goto LABEL_70;
          }
          *(void *)(v9 + 16) = *(void *)(v5 + 16);
          if ((((_BYTE)v5 + 24) & 7) != 0) {
            goto LABEL_70;
          }
          if (((v9 + 24) & 7) != 0) {
            goto LABEL_70;
          }
          *(_DWORD *)(v9 + 24) = *(_DWORD *)(v5 + 24);
          if (((v5 + 28) & 3) != 0) {
            goto LABEL_70;
          }
          v29 = *(unsigned __int8 *)(v5 + 28);
          if (v29 > 1) {
            goto LABEL_72;
          }
          if ((((_BYTE)v9 + 28) & 3) != 0) {
            goto LABEL_70;
          }
          *(_BYTE *)(v9 + 28) = v29;
          v15 = 5LL;
          v14 = sub_1000A2FAC;
          v5 = v9;
          if (!a3) {
            return result;
          }
          goto LABEL_63;
        }

        goto LABEL_70;
      }

  __break(0x5510u);
}

  __break(0x5516u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

      __break(0x5516u);
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t *sub_100008A4C(uint64_t *result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v1 = *result;
      if (*result)
      {
        if ((v1 & 7) == 0)
        {
          v2 = (void **)(v1 + 8);
          if (((v1 + 8) & 7) == 0)
          {
            v3 = *v2;
            if (*v2)
            {
              while ((v3 & 7) == 0)
              {
                v4 = v3;
                v3 = (void *)*v3;
                if (!v3) {
                  goto LABEL_9;
                }
              }
            }

            else if ((v1 & 7) == 0)
            {
              do
              {
                if (((v1 + 16) & 7) != 0) {
                  break;
                }
                v4 = *(void **)(v1 + 16);
                if (!v4 || (*(void *)(v1 + 16) & 7LL) != 0) {
                  break;
                }
                if (*v4 == v1)
                {
LABEL_9:
                  *result = (uint64_t)v4;
                  return result;
                }

                uint64_t v1 = *(void *)(v1 + 16);
              }

              while ((v4 & 7) == 0);
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100008ADC(uint64_t result)
{
  if (!result || (result & 7) != 0 || (result = *(void *)(result + 16), (result & 7) != 0)) {
    __break(0x5516u);
  }
  return result;
}

uint64_t *sub_100008AFC(uint64_t *result)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v1 = *result) == 0
    || (v1 & 7) != 0
    || (result = (uint64_t *)(v1 + 32), ((v1 + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  return result;
}

void sub_100008B2C(uint64_t a1)
{
  if (!a1
    || (a1 & 7) != 0
    || (v2 = (void *)sub_100008C24(a1), sub_100008B8C(a1, v2), (((_BYTE)a1 + 16) & 7) != 0)
    || (*(void *)(a1 + 16) = 0LL, ((a1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)a1 = a1 + 8;
    *(void *)(a1 + 8) = 0LL;
  }

void sub_100008B8C(uint64_t a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    return;
  }

  if (a2)
  {
    if ((a2 & 7) == 0 && (*a2 & 7LL) == 0)
    {
      sub_100008B8C(a1);
      if (((unint64_t)(a2 + 1) & 7) == 0 && (a2[1] & 7LL) == 0)
      {
        sub_100008B8C(a1);
        if ((((_BYTE)a1 + 8) & 7) == 0 && (((_BYTE)a2 + 32) & 7) == 0)
        {
          operator delete(a2);
          return;
        }
      }
    }

    goto LABEL_12;
  }

uint64_t sub_100008C24(uint64_t result)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v1 = (uint64_t *)(result + 8), ((result + 8) & 7) != 0)
    || (result = *v1, (*v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100008C50(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
      result = sub_100008C24(result);
      uint64_t v4 = v2 + 8;
      if (((v2 + 8) & 7) == 0)
      {
        result = sub_100008CF8(v2, a2, result, v2 + 8);
        uint64_t v5 = result;
        if (v4 == result) {
          return v4;
        }
        if ((((_BYTE)v2 + 16) & 7) == 0)
        {
          if (*a2 >= *(_DWORD *)sub_100008AFC(&v5)) {
            return v5;
          }
          return v4;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100008CF8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (!a3) {
      return a4;
    }
    if ((((_BYTE)a1 + 16) & 7) == 0 && (a3 & 7) == 0)
    {
      while (((a3 + 32) & 7) == 0)
      {
        if (*(_DWORD *)(a3 + 32) >= *a2)
        {
          uint64_t v4 = *(void *)a3;
          if (!*(void *)a3) {
            return a3;
          }
        }

        else
        {
          if (((a3 + 8) & 7) != 0) {
            break;
          }
          uint64_t v4 = *(void *)(a3 + 8);
          if (!v4) {
            return a4;
          }
          a3 = a4;
        }

        if ((v4 & 7) != 0) {
          break;
        }
        a4 = a3;
        a3 = v4;
      }
    }
  }

  __break(0x5516u);
  return a3;
}

void sub_100008D84(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100008E0C((uint64_t)v2, *v2);
    uint64_t v4 = *a1;
    if (*a1 && (v4 & 7) == 0 && (((_BYTE)v4 + 16) & 7) == 0)
    {
      if (v4[2] - *v4 >= 0)
      {
        operator delete((void *)*v4);
        return;
      }

      goto LABEL_16;
    }

LABEL_15:
    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

    __break(0x5516u);
    goto LABEL_16;
  }

  a4 = 0;
LABEL_14:
  LODWORD(self) = a4;
  return self;
}

    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

  __break(0x5516u);
LABEL_16:
  __break(0x5513u);
  return result;
}

          uint64_t v8 = *(unsigned int *)(a1 + 128);
          if (v8 <= 3 && *(unsigned __int8 *)(a1 + 392) <= 1u)
          {
            v9 = *(unsigned __int8 *)(a1 + 393);
            if (v9 <= 1)
            {
              NSLog( @"MR: %s:%d EXIT _expectedPlayState=%d _expectedPlayStateTimestamp=%u _nowPlayingInfoReceived=%u _nowPlay ingAppIsPlayingReceived=%u",  "ResetExpectedPlayStateInfo",  4705LL,  v8,  *(unsigned int *)(a1 + 132),  *(unsigned __int8 *)(a1 + 392),  v9);
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
              return;
            }
          }
        }
      }
    }
  }

  __break(0x550Au);
LABEL_20:
  __break(0x5516u);
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
}

  __break(0x550Au);
}

  __break(0x550Au);
}

    __break(0x5516u);
    return;
  }

  NSLog( @"ERROR - %s:%s-%d BTAccessoryManagerPlugInDevice failed (with %d result)!",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothPluginDevice",  2458LL,  v9);
LABEL_11:
  if (BTDeviceConnect(a3)) {
    NSLog( @"ERROR - %s:%s-%d BTDeviceConnect failed!",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothPluginDevice",  2470LL);
  }
}

  __break(0x5513u);
  return result;
}

  if (__CFADD__(*v3, 4 * v6)) {
    goto LABEL_25;
  }
  if (((a2 + 12) & 3) != 0) {
    goto LABEL_24;
  }
  v9 = *(unsigned __int16 *)(a2 + 12);
  if (v6 >= v9)
  {
LABEL_23:
    uint64_t *v2 = v9;
    sub_100053850(v2);
    return sub_100053A38(1LL, (uint64_t)v2);
  }

  v10 = (_DWORD *)(*v3 + 4 * v6);
  v11 = *v3 & 3LL;
  while ((unint64_t)v10 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (!v10 || v11) {
      goto LABEL_24;
    }
    *v10++ = -1;
    LODWORD(v6) = v6 + 1;
  }

    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

    __break(0x5516u);
  }

  __break(0x550Au);
}

  __break(0x5507u);
  return result;
}

  __break(0x5507u);
  return result;
}

    __break(0x5516u);
    goto LABEL_16;
  }

  return result;
}

      sub_1000CEAEC( 0,  4,  "%s:%d DevACK for cmdID %X not handled\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  12711,  v7);
      return sub_1000AD43C(a2);
    }

    __p = 0LL;
    v19 = 93;
    result = (uint64_t)__p;
    if (!__p) {
      return sub_1000AD43C(a2);
    }
    if ((__p & 7) == 0)
    {
      operator delete(__p);
      return sub_1000AD43C(a2);
    }

    goto LABEL_60;
  }

  __p = 0LL;
  v19 = 118;
  uint64_t v8 = sub_100062E78(result, v5, &v19, &__p, 0xFFFFu);
  v9 = __p;
  if (v8 || !__p)
  {
LABEL_31:
    if (v9) {
      operator delete[](v9);
    }
    return sub_1000AD43C(a2);
  }

  v17 = bswap32(*(unsigned __int16 *)__p) >> 16;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  result = v2 + 1200;
  if (((v2 + 1200) & 7) != 0) {
    goto LABEL_60;
  }
  result = sub_100013C90(result, &v17);
  v16 = result;
  if (((v2 + 1208) & 7) != 0) {
    goto LABEL_60;
  }
  if (v2 + 1208 == result)
  {
LABEL_28:
    if (!v6) {
      sub_100080D38(v2, v17, 0xFFFFFFFF);
    }
    v9 = __p;
    goto LABEL_31;
  }

  result = (uint64_t)sub_100003154(&v16);
  if (!result
    || (result & 7) != 0
    || (v10 = (uint64_t *)(result + 8), ((result + 8) & 7) != 0)
    || (result = *v10) == 0
    || (result & 7) != 0)
  {
LABEL_60:
    __break(0x5516u);
    goto LABEL_61;
  }

  if (!HIWORD(v5))
  {
    sub_100082194(result, (unsigned __int16)v5);
    goto LABEL_28;
  }

  __break(0x5516u);
  return result;
}

          __break(0x5507u);
LABEL_16:
          __break(0x5515u);
          return result;
        }
      }
    }

    __break(0x5513u);
LABEL_14:
    __break(0x5516u);
    goto LABEL_15;
  }

  return result;
}

        __break(0x5513u);
        goto LABEL_16;
      }
    }

          __break(0x5510u);
          return;
        }
      }

    __break(0x5516u);
LABEL_16:
    __break(0x550Cu);
  }

  IOServiceClose(connect);
}

uint64_t sub_100008E0C(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    unint64_t v2 = *(void *)(result + 8);
    if (v2 == a2)
    {
LABEL_7:
      *(void *)(result + 8) = a2;
      return result;
    }

    if ((((_BYTE)result + 16) & 7) == 0)
    {
      while (v2 > 7)
      {
        v2 -= 8LL;
        if (v2 == a2) {
          goto LABEL_7;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100008E54(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  if (!a1 || (v5 = a1, (a1 & 7) != 0) || (uint64_t v4 = a2, a1 = sub_100008C24(a1), v7 = v5 + 8, ((v5 + 8) & 7) != 0))
  {
LABEL_20:
    __break(0x5516u);
LABEL_21:
    uint64_t v7 = a1;
    a1 = (uint64_t)v3;
    goto LABEL_22;
  }

  if (a1)
  {
    if ((((_BYTE)v5 + 16) & 7) == 0 && (a1 & 7) == 0)
    {
      unsigned int v8 = *a3;
      while (((a1 + 32) & 7) == 0)
      {
        unsigned int v9 = *(_DWORD *)(a1 + 32);
        if (v8 >= v9)
        {
          if (v9 >= v8)
          {
            uint64_t *v4 = a1;
            if ((v7 & 7) == 0) {
              return v7;
            }
            goto LABEL_20;
          }

          v3 = (uint64_t *)(a1 + 8);
          if (((a1 + 8) & 7) != 0) {
            goto LABEL_20;
          }
          uint64_t v10 = *v3;
          if (!*v3) {
            goto LABEL_21;
          }
          a1 += 8LL;
        }

        else
        {
          uint64_t v10 = *(void *)a1;
          if (!*(void *)a1)
          {
            uint64_t v7 = a1;
            goto LABEL_22;
          }
        }

        if ((v10 & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v7 = a1;
        a1 = v10;
      }
    }

    goto LABEL_20;
  }

  a1 = v5 + 8;
LABEL_22:
  uint64_t *v4 = v7;
  return a1;
}

void *sub_100008F50@<X0>(void *result@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v4 = (char *)(result + 1), ((unint64_t)(result + 1) & 7) != 0)
    || (memset(a3, 170, 24), result = operator new(0x30uLL),
                             *a3 = result,
                             a3[1] = v4,
                             (result & 7) != 0)
    || ((unint64_t)(result + 4) & 7) != 0
    || (((_BYTE)result + 32) & 3) != 0
    || (*((_DWORD *)result + 8) = *a2, *((_BYTE *)a3 + 16) = 1, ((unint64_t)(result + 5) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[5] = 0LL;
    *((_BYTE *)a3 + 17) = 1;
  }

  return result;
}

uint64_t sub_100008FEC(uint64_t result, uint64_t a2, uint64_t *a3, void *a4)
{
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_16;
  }
  if (!a4) {
    goto LABEL_16;
  }
  *a4 = 0LL;
  if ((((_BYTE)a4 + 8) & 7) != 0) {
    goto LABEL_16;
  }
  a4[1] = 0LL;
  if ((((_BYTE)a4 + 16) & 7) != 0) {
    goto LABEL_16;
  }
  a4[2] = a2;
  *a3 = (uint64_t)a4;
  uint64_t v5 = *(uint64_t **)result;
  uint64_t v6 = *v5;
  if (v6)
  {
    if ((v6 & 7) != 0)
    {
LABEL_16:
      __break(0x5516u);
      goto LABEL_17;
    }

    *(void *)result = v6;
  }

  if ((((_BYTE)result + 8) & 7) != 0) {
    goto LABEL_16;
  }
  result = sub_1000090A8(*(void *)(result + 8), *a3);
  uint64_t v7 = (void *)(v4 + 16);
  if (((v4 + 16) & 7) != 0) {
    goto LABEL_16;
  }
  if (*v7 != -1LL)
  {
    ++*v7;
    return result;
  }

uint64_t sub_1000090A8(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    if ((a2 & 7) == 0 && (((_BYTE)a2 + 24) & 7) == 0)
    {
      uint64_t v3 = result;
      *(_BYTE *)(a2 + 24) = a2 == result;
      if (a2 == result) {
        return result;
      }
      while ((v2 & 7) == 0)
      {
        result = sub_100008ADC(v2);
        if (!result || (result & 7) != 0 || ((result + 24) & 7) != 0) {
          break;
        }
        if (*(_BYTE *)(result + 24)) {
          return result;
        }
        result = sub_100008ADC(v2);
        if (!result) {
          break;
        }
        uint64_t v4 = result;
        if ((result & 7) != 0) {
          break;
        }
        if (((result + 16) & 7) != 0) {
          break;
        }
        uint64_t v5 = *(uint64_t **)(result + 16);
        uint64_t v6 = *v5;
        result = sub_100008ADC(v2);
        BOOL v8 = (result & 7) == 0 && result != 0;
        if (v6 == v4)
        {
          if (!v8) {
            break;
          }
          uint64_t v12 = *(void *)(result + 16);
          if (!v12) {
            break;
          }
          if ((v12 & 7) != 0) {
            break;
          }
          v13 = (uint64_t *)(v12 + 8);
          uint64_t v14 = *v13;
          if (!v14) {
            goto LABEL_76;
          }
          if ((v14 & 7) != 0) {
            break;
          }
          v11 = (_BYTE *)(v14 + 24);
          if (((v14 + 24) & 7) != 0) {
            break;
          }
          if (*v11)
          {
LABEL_76:
            if (((v2 + 16) & 7) == 0)
            {
              v17 = *(void **)(v2 + 16);
              if (v17)
              {
                if ((v17 & 7) == 0)
                {
                  if (*v17 != v2)
                  {
                    uint64_t v2 = sub_100008ADC(v2);
                    result = sub_1000093C0(v2);
                  }

                  if (v2)
                  {
                    if ((v2 & 7) == 0)
                    {
                      uint64_t v18 = *(void *)(v2 + 16);
                      if (v18)
                      {
                        if ((v18 & 7) == 0 && (((_BYTE)v18 + 24) & 7) == 0)
                        {
                          *(_BYTE *)(v18 + 24) = 1;
                          result = *(void *)(v18 + 16);
                          if (result)
                          {
                            if ((result & 7) == 0 && (((_BYTE)result + 24) & 7) == 0)
                            {
                              *(_BYTE *)(result + 24) = 0;
                              return (uint64_t)sub_100009460((uint64_t *)result);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            break;
          }
        }

        else
        {
          if (!v8) {
            break;
          }
          if (((result + 16) & 7) != 0) {
            break;
          }
          unsigned int v9 = *(uint64_t **)(result + 16);
          uint64_t v10 = *v9;
          if (!v10) {
            goto LABEL_62;
          }
          if ((v10 & 7) != 0) {
            break;
          }
          v11 = (_BYTE *)(v10 + 24);
          if (((v10 + 24) & 7) != 0) {
            break;
          }
          if (*v11)
          {
LABEL_62:
            if (((v2 + 16) & 7) == 0)
            {
              v15 = *(void **)(v2 + 16);
              if (v15)
              {
                if ((v15 & 7) == 0)
                {
                  if (*v15 == v2)
                  {
                    uint64_t v2 = sub_100008ADC(v2);
                    result = (uint64_t)sub_100009460((uint64_t *)v2);
                  }

                  if (v2)
                  {
                    if ((v2 & 7) == 0)
                    {
                      uint64_t v16 = *(void *)(v2 + 16);
                      if (v16)
                      {
                        if ((v16 & 7) == 0 && (((_BYTE)v16 + 24) & 7) == 0)
                        {
                          *(_BYTE *)(v16 + 24) = 1;
                          result = *(void *)(v16 + 16);
                          if (result)
                          {
                            if ((result & 7) == 0 && (((_BYTE)result + 24) & 7) == 0)
                            {
                              *(_BYTE *)(result + 24) = 0;
                              return sub_1000093C0(result);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }

            break;
          }
        }

        result = sub_100008ADC(v2);
        if (!result) {
          break;
        }
        if ((result & 7) != 0) {
          break;
        }
        if ((((_BYTE)result + 24) & 7) != 0) {
          break;
        }
        *(_BYTE *)(result + 24) = 1;
        uint64_t v2 = *(void *)(result + 16);
        if (!v2 || (v2 & 7) != 0 || (((_BYTE)v2 + 24) & 7) != 0) {
          break;
        }
        *(_BYTE *)(v2 + 24) = v2 == v3;
        _BYTE *v11 = 1;
        if (v2 == v3) {
          return result;
        }
      }
    }
  }

  __break(0x5516u);
LABEL_79:
  __break(0x550Au);
  return result;
}

uint64_t sub_1000093C0(uint64_t result)
{
  if (!result) {
    goto LABEL_19;
  }
  if ((result & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t v1 = (void **)(result + 8);
  if (((result + 8) & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t v2 = *v1;
  uint64_t v4 = (void *)*v2;
  uint64_t *v1 = (void *)*v2;
  if (v4)
  {
    v4[2] = result;
  }

  uint64_t v5 = (void *)(result + 16);
  if (((result + 16) & 7) == 0 && ((unint64_t)(v2 + 2) & 7) == 0)
  {
    v2[2] = *v5;
    uint64_t v6 = (void *)*v5;
    if (v6)
    {
      if ((v6 & 7) == 0)
      {
        if (*v6 == result || (++v6, (v6 & 7) == 0))
        {
          *uint64_t v6 = v2;
          void *v2 = result;
          *(void *)(result + 16) = v2;
          return result;
        }
      }
    }
  }

uint64_t *sub_100009460(uint64_t *result)
{
  uint64_t v1 = (uint64_t *)*result;
  BOOL v2 = *result && (*result & 7) == 0;
  uint64_t v4 = v1[1];
  *result = v4;
  if (v4)
  {
    if ((v4 & 7) != 0) {
      goto LABEL_21;
    }
    *(void *)(v4 + 16) = result;
  }

  uint64_t v5 = (uint64_t ***)(result + 2);
  if (((unint64_t)(result + 2) & 7) == 0 && ((unint64_t)(v1 + 2) & 7) == 0)
  {
    v1[2] = (uint64_t)*v5;
    uint64_t v6 = *v5;
    if (v6)
    {
      if ((v6 & 7) == 0)
      {
        if (*v6 == result || (++v6, (v6 & 7) == 0))
        {
          *uint64_t v6 = v1;
          v1[1] = (uint64_t)result;
          result[2] = (uint64_t)v1;
          return result;
        }
      }
    }
  }

LABEL_21:
  __break(0x5516u);
  return result;
}

  if (*a5)
  {
    CFUserNotificationCancel((CFUserNotificationRef)*a5);
    CFRelease(*a5);
    *a5 = 0LL;
  }

  v23 = CFUserNotificationCreate(kCFAllocatorDefault, a7, 3uLL, &error, v22);
  *a5 = v23;
  if (v23)
  {
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v23, a6, 0LL);
    if (RunLoopSource)
    {
      v25 = RunLoopSource;
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, v25, kCFRunLoopCommonModes);
      CFRelease(v25);
    }

    else
    {
      CFRelease(*a5);
      *a5 = 0LL;
    }
  }

  CFRelease(v15);
  CFRelease(a2);
  CFRelease(v19);
  CFRelease(v21);
  CFRelease(@"DismissOnLock");
}

  __break(0x5516u);
}

    v17 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
    uint64_t v18 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL);
    if ((v9 & 7) == 0)
    {
      [v17 updateValueFromIap:v18 forPort:kCFAccessoryPortUSBOut andPortPorperty:kCFAccessoryPortPropertyCurrentSampleRate forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9)];
      v19 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      [v19 updateValueFromIap:v12 forPort:kCFAccessoryPortUSBOut andPortPorperty:kCFAccessoryPortPropertySupportedSampleRatesInHz forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9)];
      v20 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      v21 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 1LL);
      [v20 updateValueFromIap:v21 forPort:kCFAccessoryPortUSBOut andPortPorperty:kCFAccessoryPortPropertyIsConnected forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9)];
LABEL_23:
      if (v11) {
        operator delete[]((void *)v11);
      }
      goto LABEL_30;
    }
  }

  __break(0x5507u);
LABEL_22:
  __break(0x5513u);
LABEL_23:
  __break(0x5515u);
}

    return (uint64_t)v9;
  }

  __break(0x5516u);
  return result;
}

    return;
  }

  __break(0x5510u);
}

    __break(0x550Au);
LABEL_22:
    __break(0x5516u);
LABEL_23:
    sub_1000D25AC(v2);
  }

  unsigned int v9 = *(unsigned __int8 *)(a1 + 392);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 393);
  if (v10 > 1) {
    goto LABEL_21;
  }
LABEL_20:
  NSLog( @"MR: %s:%d EXIT _expectedPlayState=%d _expectedPlayStateTimestamp=%u _nowPlayingInfoReceived=%u _nowPlayingAppIsPlayingReceived=%u",  "SetExpectedPlayStateInfo",  4674LL,  v6,  v7,  v9,  v10);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 136));
}

    __break(0x550Au);
    return result;
  }

  NSLog( @"ERROR - %s:%s - %d usb connection query failed 0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "GetUSBMode",  1333LL,  result);
  return 0LL;
}

  __break(0x550Au);
LABEL_22:
  __break(0x5505u);
  return result;
}

    __break(0x5516u);
    return result;
  }

  if (a3 == 512) {
    return (unsigned __int16 *)&off_100119998;
  }
  result = (unsigned __int16 *)&off_1001199F8;
  uint64_t v4 = 295LL;
  while (result[4] != a3)
  {
    result += 12;
    if (!--v4) {
      return 0LL;
    }
  }

  return result;
}

  __break(0x5516u);
}

  __break(0x5513u);
  return result;
}

  __break(0x5510u);
}

  __break(0x5507u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

                      sub_10006472C(v2);
                      return 0LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(0x5516u);
    return result;
  }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

                uint64_t v12 = 1LL;
                goto LABEL_22;
              }
            }
          }
        }
      }

      goto LABEL_70;
    }
  }

  __break(0x5516u);
LABEL_22:
  __break(0x550Au);
  return result;
}

              result = (uint64_t)sub_100064D0C(&v13);
              goto LABEL_23;
            }
          }
        }
      }
    }

    __break(0x5516u);
  }

  __break(0x550Au);
}

      __break(0x5516u);
      goto LABEL_22;
    }

  __break(0x5516u);
LABEL_22:
  __break(0x5513u);
LABEL_23:
  __break(0x5515u);
LABEL_24:
  __break(0x5507u);
}

  result = (*(uint64_t (**)(void *, uint64_t))(*v2 + 120LL))(v2, a2);
  v13 = v2[7];
  uint64_t v14 = ~v13;
  if (v12 > ~v13) {
    goto LABEL_36;
  }
  if (!v13) {
    goto LABEL_35;
  }
  v17 = v13 + 24LL * v7;
  if ((v17 & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t v18 = v13 + 24LL * v7 + 16;
  if ((v18 & 7) != 0) {
    goto LABEL_35;
  }
  *(_DWORD *)uint64_t v18 = result;
  v19 = (_BYTE *)(v17 + 10);
  if (*v19 <= 1u)
  {
    if (!*v19) {
      *v19 = 1;
    }
LABEL_29:
    if (v12 <= v14)
    {
      if (v13)
      {
        if ((v13 & 7) == 0)
        {
          v20 = v13 + 24LL * v7 + 16;
          if ((v20 & 7) == 0) {
            return *(_DWORD *)v20 != 0;
          }
        }
      }

      goto LABEL_35;
    }

  result = (*(uint64_t (**)(void *, uint64_t))(*v2 + 120LL))(v2, a2);
  v13 = v2[7];
  uint64_t v14 = ~v13;
  if (v12 > ~v13) {
    goto LABEL_36;
  }
  if (!v13) {
    goto LABEL_35;
  }
  v17 = v13 + 24LL * v7;
  if ((v17 & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t v18 = v13 + 24LL * v7 + 16;
  if ((v18 & 7) != 0) {
    goto LABEL_35;
  }
  *(_DWORD *)uint64_t v18 = result;
  v19 = (_BYTE *)(v17 + 10);
  if (*v19 <= 1u)
  {
    if (!*v19) {
      *v19 = 1;
    }
LABEL_29:
    if (v12 <= v14)
    {
      if (v13)
      {
        if ((v13 & 7) == 0)
        {
          v20 = v13 + 24LL * v7 + 16;
          if ((v20 & 7) == 0) {
            return *(unsigned int *)v20;
          }
        }
      }

      goto LABEL_35;
    }

void sub_100009500(void **a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    if ((v4 & 7) == 0)
    {
      sub_100009534(v4, v3);
      return;
    }

    goto LABEL_7;
  }

void sub_100009534(uint64_t a1, void *__p)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(a1 + 8) > 1u)
  {
LABEL_20:
    __break(0x550Au);
    return;
  }

  if (*(_BYTE *)(a1 + 8))
  {
  }

  else
  {
    if (!__p) {
      return;
    }
    if (*(void *)a1)
    {
LABEL_15:
      operator delete(__p);
      return;
    }
  }

uint64_t *sub_1000095C0(uint64_t *result, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!result
    || (char v2 = (char)result, (result & 7) != 0)
    || (a2 & 7) != 0
    || (result = sub_10000963C(result, a2), ((v2 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v4 = result;
    sub_100008AFC(&v5);
    operator delete((void *)a2);
    return v4;
  }

  return result;
}

uint64_t *sub_10000963C(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    char v2 = result;
    if ((result & 7) == 0 && (a2 & 7) == 0)
    {
      uint64_t v7 = a2;
      result = sub_100008A4C(&v7);
      if (*v2 == a2) {
        void *v2 = v7;
      }
      if (((unint64_t)(v2 + 2) & 7) == 0)
      {
        uint64_t v4 = v2[2];
        BOOL v5 = v4 != 0;
        uint64_t v6 = v4 - 1;
        if (!v5) {
          goto LABEL_13;
        }
        v2[2] = v6;
        if (((unint64_t)(v2 + 1) & 7) == 0 && (a2 & 7) == 0)
        {
          sub_1000096E8(v2[1], a2);
          return (uint64_t *)v7;
        }
      }
    }
  }

  __break(0x5516u);
LABEL_13:
  __break(0x5515u);
  return result;
}

uint64_t sub_1000096E8(uint64_t result, uint64_t a2)
{
  if (!a2 || (a2 & 7) != 0) {
    goto LABEL_187;
  }
  uint64_t v3 = result;
  if (!*(void *)a2) {
    goto LABEL_7;
  }
  if ((((_BYTE)a2 + 8) & 7) != 0) {
    goto LABEL_187;
  }
  if (*(void *)(a2 + 8)) {
    result = (uint64_t)sub_100009DE4((void *)a2);
  }
  else {
LABEL_7:
  }
    result = a2;
  if (!result || (result & 7) != 0) {
    goto LABEL_187;
  }
  uint64_t v4 = *(void *)result;
  if (*(void *)result) {
    goto LABEL_15;
  }
  if (((result + 8) & 7) != 0) {
    goto LABEL_187;
  }
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
LABEL_15:
    if (((result + 16) & 7) != 0 || (v4 & 7) != 0 || ((v4 + 16) & 7) != 0) {
      goto LABEL_187;
    }
    int v5 = 0;
    *(void *)(v4 + 16) = *(void *)(result + 16);
  }

  else
  {
    int v5 = 1;
  }

  uint64_t v6 = (uint64_t **)(result + 16);
  if (((result + 16) & 7) != 0) {
    goto LABEL_187;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = *v7;
  if (*v7 == result)
  {
    uint64_t *v7 = v4;
    if (result == v3)
    {
      uint64_t v8 = 0LL;
      uint64_t v3 = v4;
    }

    else
    {
      uint64_t v10 = v7 + 1;
      uint64_t v8 = *v10;
    }
  }

  else
  {
    unsigned int v9 = v7 + 1;
    *unsigned int v9 = v4;
  }

  if (((result + 24) & 7) != 0) {
    goto LABEL_187;
  }
  unsigned int v11 = *(unsigned __int8 *)(result + 24);
  if (v11 >= 2) {
    goto LABEL_188;
  }
  if (result == a2) {
    goto LABEL_52;
  }
  uint64_t v12 = (uint64_t **)(a2 + 16);
  if (((a2 + 16) & 7) != 0) {
    goto LABEL_187;
  }
  v13 = *v12;
  *uint64_t v6 = *v12;
  uint64_t v14 = *v12;
  if (*v14 == a2)
  {
  }

  else
  {
    if (!v13) {
      goto LABEL_187;
    }
  }

  uint64_t *v13 = result;
  uint64_t v15 = *(void *)a2;
  *(void *)result = *(void *)a2;
  if (!v15) {
    goto LABEL_187;
  }
  if ((v15 & 7) != 0) {
    goto LABEL_187;
  }
  *(void *)(v15 + 16) = result;
  if (((a2 + 8) & 7) != 0 || ((result + 8) & 7) != 0) {
    goto LABEL_187;
  }
  uint64_t v16 = *(void *)(a2 + 8);
  *(void *)(result + 8) = v16;
  if (v16)
  {
    if ((v16 & 7) != 0) {
      goto LABEL_187;
    }
    *(void *)(v16 + 16) = result;
  }

  if (((a2 + 24) & 7) != 0) {
    goto LABEL_187;
  }
  unsigned int v17 = *(unsigned __int8 *)(a2 + 24);
  if (v17 > 1)
  {
LABEL_188:
    __break(0x550Au);
    return result;
  }

  *(_BYTE *)(result + 24) = v17;
  if (v3 == a2) {
    uint64_t v3 = result;
  }
LABEL_52:
  if (v11 && v3)
  {
    if (v5)
    {
      if (v8 && (v8 & 7) == 0)
      {
        while (1)
        {
          uint64_t v18 = (uint64_t *)(v8 + 16);
          if (((v8 + 16) & 7) != 0) {
            break;
          }
          result = *v18;
          uint64_t v19 = *v18 & 7;
          if (!result || v19 != 0) {
            break;
          }
          v21 = (_BYTE *)(v8 + 24);
          uint64_t v22 = (v8 + 24) & 7;
          if (*(void *)result == v8)
          {
            if (v22) {
              goto LABEL_187;
            }
            if (!*v21)
            {
              _BYTE *v21 = 1;
              if ((((_BYTE)result + 24) & 7) != 0) {
                goto LABEL_187;
              }
              *(_BYTE *)(result + 24) = 0;
              result = (uint64_t)sub_100009460((uint64_t *)result);
              if (((v8 + 8) & 7) != 0) {
                goto LABEL_187;
              }
              v30 = *(uint64_t **)(v8 + 8);
              uint64_t v8 = *v30;
            }

            if (!v8 || (v8 & 7) != 0) {
              goto LABEL_187;
            }
            uint64_t v31 = *(void *)v8;
            if (*(void *)v8)
            {
              if ((v31 & 7) != 0 || ((v31 + 24) & 7) != 0) {
                goto LABEL_187;
              }
              if (!*(_BYTE *)(v31 + 24)) {
                goto LABEL_167;
              }
            }

            if (((v8 + 8) & 7) != 0) {
              goto LABEL_187;
            }
            uint64_t v32 = *(void *)(v8 + 8);
            if (v32)
            {
              if ((v32 & 7) != 0) {
                goto LABEL_187;
              }
              v33 = (unsigned __int8 *)(v32 + 24);
              unsigned int v34 = *v33;
              if (v34 > 1) {
                goto LABEL_188;
              }
              if (!v34)
              {
                if (!v31) {
                  goto LABEL_176;
                }
                if ((v31 & 7) != 0) {
                  goto LABEL_187;
                }
LABEL_167:
                v45 = (unsigned __int8 *)(v31 + 24);
                unsigned int v46 = *v45;
                if (v46 > 1) {
                  goto LABEL_188;
                }
                if (v46)
                {
LABEL_176:
                  if (((v8 + 8) & 7) != 0) {
                    goto LABEL_187;
                  }
                  uint64_t v47 = *(void *)(v8 + 8);
                  if (!v47) {
                    goto LABEL_187;
                  }
                  if ((v47 & 7) != 0) {
                    goto LABEL_187;
                  }
                  v48 = (_BYTE *)(v47 + 24);
                  _BYTE *v48 = 1;
                  if ((((_BYTE)v8 + 24) & 7) != 0) {
                    goto LABEL_187;
                  }
                  *(_BYTE *)(v8 + 24) = 0;
                  result = sub_1000093C0(v8);
                  uint64_t v8 = *(void *)(v8 + 16);
                  if (!v8 || (v8 & 7) != 0) {
                    goto LABEL_187;
                  }
                }

                if ((v8 & 7) == 0)
                {
                  result = *(void *)(v8 + 16);
                  if (result)
                  {
                    if ((result & 7) == 0)
                    {
                      v49 = (_BYTE *)(result + 24);
                      if (((result + 24) & 7) == 0)
                      {
                        unsigned int v50 = *v49;
                        if (v50 > 1) {
                          goto LABEL_188;
                        }
                        if ((((_BYTE)v8 + 24) & 7) == 0)
                        {
                          *(_BYTE *)(v8 + 24) = v50;
                          _BYTE *v49 = 1;
                          uint64_t v51 = *(void *)v8;
                          if (*(void *)v8)
                          {
                            if ((v51 & 7) == 0)
                            {
                              v52 = (_BYTE *)(v51 + 24);
                              if ((v52 & 7) == 0)
                              {
                                _BYTE *v52 = 1;
                                return (uint64_t)sub_100009460((uint64_t *)result);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                goto LABEL_187;
              }
            }

            if ((((_BYTE)v8 + 24) & 7) != 0) {
              goto LABEL_187;
            }
            *(_BYTE *)(v8 + 24) = 0;
            uint64_t v29 = *(void *)(v8 + 16);
            if (!v29) {
              goto LABEL_187;
            }
            if ((v29 & 7) != 0) {
              goto LABEL_187;
            }
            uint64_t v35 = v29 + 24;
            if (((v29 + 24) & 7) != 0) {
              goto LABEL_187;
            }
            if (!*(_BYTE *)v35 || v29 == v3) {
              goto LABEL_163;
            }
          }

          else
          {
            if (v22) {
              goto LABEL_187;
            }
            if (!*v21)
            {
              _BYTE *v21 = 1;
              if ((((_BYTE)result + 24) & 7) != 0) {
                goto LABEL_187;
              }
              *(_BYTE *)(result + 24) = 0;
              result = sub_1000093C0(result);
              uint64_t v23 = *(void *)v8;
              if (v3 == *(void *)v8) {
                uint64_t v3 = v8;
              }
              if (!v23) {
                goto LABEL_187;
              }
              if ((v23 & 7) != 0) {
                goto LABEL_187;
              }
              v24 = (uint64_t *)(v23 + 8);
              uint64_t v8 = *v24;
            }

            if (!v8 || (v8 & 7) != 0) {
              goto LABEL_187;
            }
            uint64_t v25 = *(void *)v8;
            if (*(void *)v8)
            {
              if ((v25 & 7) != 0 || ((v25 + 24) & 7) != 0) {
                goto LABEL_187;
              }
              if (!*(_BYTE *)(v25 + 24)) {
                goto LABEL_136;
              }
            }

            if (((v8 + 8) & 7) != 0) {
              goto LABEL_187;
            }
            uint64_t v26 = *(void *)(v8 + 8);
            if (v26)
            {
              if ((v26 & 7) != 0) {
                goto LABEL_187;
              }
              v27 = (unsigned __int8 *)(v26 + 24);
              unsigned int v28 = *v27;
              if (v28 > 1) {
                goto LABEL_188;
              }
              if (!v28)
              {
LABEL_136:
                if (((v8 + 8) & 7) != 0) {
                  goto LABEL_187;
                }
                uint64_t v37 = *(void *)(v8 + 8);
                if (!v37) {
                  goto LABEL_147;
                }
                if ((v37 & 7) != 0) {
                  goto LABEL_187;
                }
                v38 = (unsigned __int8 *)(v37 + 24);
                unsigned int v39 = *v38;
                if (v39 > 1) {
                  goto LABEL_188;
                }
                if (v39)
                {
LABEL_147:
                  if (!v25) {
                    goto LABEL_187;
                  }
                  if ((v25 & 7) != 0) {
                    goto LABEL_187;
                  }
                  v40 = (_BYTE *)(v25 + 24);
                  _BYTE *v40 = 1;
                  if ((((_BYTE)v8 + 24) & 7) != 0) {
                    goto LABEL_187;
                  }
                  *(_BYTE *)(v8 + 24) = 0;
                  result = (uint64_t)sub_100009460((uint64_t *)v8);
                  uint64_t v8 = *(void *)(v8 + 16);
                  if (!v8 || (v8 & 7) != 0) {
                    goto LABEL_187;
                  }
                }

                if ((v8 & 7) == 0)
                {
                  result = *(void *)(v8 + 16);
                  if (result)
                  {
                    if ((result & 7) == 0)
                    {
                      v41 = (_BYTE *)(result + 24);
                      if (((result + 24) & 7) == 0)
                      {
                        unsigned int v42 = *v41;
                        if (v42 > 1) {
                          goto LABEL_188;
                        }
                        if ((((_BYTE)v8 + 24) & 7) == 0)
                        {
                          *(_BYTE *)(v8 + 24) = v42;
                          _BYTE *v41 = 1;
                          if (((v8 + 8) & 7) == 0)
                          {
                            uint64_t v43 = *(void *)(v8 + 8);
                            if (v43)
                            {
                              if ((v43 & 7) == 0)
                              {
                                v44 = (_BYTE *)(v43 + 24);
                                if ((v44 & 7) == 0)
                                {
                                  _BYTE *v44 = 1;
                                  return sub_1000093C0(result);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }

                goto LABEL_187;
              }
            }

            if ((((_BYTE)v8 + 24) & 7) != 0) {
              goto LABEL_187;
            }
            *(_BYTE *)(v8 + 24) = 0;
            uint64_t v29 = *(void *)(v8 + 16);
            if ((v29 & 7) != 0) {
              goto LABEL_187;
            }
            if (v29 == v3) {
              goto LABEL_159;
            }
            if (!v29 || (v29 & 7) != 0 || ((v29 + 24) & 7) != 0) {
              goto LABEL_187;
            }
            if (!*(_BYTE *)(v29 + 24))
            {
              uint64_t v3 = *(void *)(v8 + 16);
LABEL_159:
              if (v3 && (v3 & 7) == 0)
              {
                uint64_t v35 = v3 + 24;
                goto LABEL_162;
              }

              goto LABEL_187;
            }
          }

          if (((v29 + 16) & 7) == 0)
          {
            v36 = *(uint64_t **)(v29 + 16);
            if (v36)
            {
              if ((v36 & 7) == 0)
              {
                if (*v36 != v29 || (++v36, (v36 & 7) == 0))
                {
                  uint64_t v8 = *v36;
                  if (*v36)
                  {
                    if ((v8 & 7) == 0) {
                      continue;
                    }
                  }
                }
              }
            }
          }

          goto LABEL_187;
        }
      }

      goto LABEL_187;
    }

    if ((v4 & 7) == 0)
    {
      uint64_t v35 = v4 + 24;
LABEL_162:
      if ((v35 & 7) == 0)
      {
LABEL_163:
        *(_BYTE *)uint64_t v35 = 1;
        return result;
      }
    }

LABEL_187:
    __break(0x5516u);
    goto LABEL_188;
  }

  return result;
}

void *sub_100009DE4(void *result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v1 = (void **)(result + 1);
      if (((unint64_t)(result + 1) & 7) == 0)
      {
        char v2 = *v1;
        if (*v1)
        {
          while ((v2 & 7) == 0)
          {
            uint64_t v3 = v2;
            char v2 = (void *)*v2;
            if (!v2) {
              return v3;
            }
          }
        }

        else if ((result & 7) == 0)
        {
          do
          {
            uint64_t v3 = (void *)result[2];
            if (!v3 || (result[2] & 7LL) != 0) {
              break;
            }
            if ((void *)*v3 == result) {
              return v3;
            }
            result = (void *)result[2];
          }

          while ((v3 & 7) == 0);
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_100009E64(void *result)
{
  if (!result
    || (result & 7) != 0
    || ((unint64_t)(result + 1) & 7) != 0
    || (result[1] = 0LL, (((_BYTE)result + 16) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[2] = 0LL;
    *result = result + 1;
  }

  return result;
}

uint64_t sub_100009E9C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    char v2 = (void *)sub_100008C24(result);
    sub_100008B8C(v1, v2);
    return v1;
  }

  return result;
}

LABEL_26:
  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

  uint64_t v16 = "Unknown";
LABEL_14:
  unsigned int v17 = v15;
  uint64_t v18 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %s; Comment; %s",
          v17,
          v16,
          __b);
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || sub_1000CEA70(0LL)) {
    NSLog(@"%@", v18);
  }
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 114)) {
    [*(id *)(a1 + 184) log:v18];
  }
  if ((dword_10011C820 & 8) != 0)
  {
    memset(__p, 170, 24);
    sub_1000255A4((uint64_t)__p, (char *)-[NSString UTF8String](v18, "UTF8String"));
    sub_100020EC4((uint64_t)__p, 8u, 1);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }

          __break(0x5507u);
LABEL_27:
          __break(0x5513u);
LABEL_28:
          sub_1000D2614();
        }

        v12 -= 8;
        v8 += 8;
        if (v12 == -1) {
          goto LABEL_16;
        }
      }

      __break(0x5514u);
    }
  }

  else if (a2 && (a2 & 7) == 0)
  {
    *a2 = 0;
    return result;
  }

  while (1)
  {
    __break(0x550Au);
LABEL_27:
    if (!v8) {
      break;
    }
    if (v4) {
      goto LABEL_51;
    }
    if (*v3 <= 1u)
    {
      if (!*v3)
      {
        if (v8 != 2) {
          return;
        }
        sub_10005B2A0((dispatch_once_t *)2);
        if (((a2 + 48) & 7) == 0)
        {
          if (v16 == *(void *)(a2 + 48)) {
            sub_1000D2500();
          }
          uint64_t *v7 = 1;
          sub_10005B2A0((dispatch_once_t *)2);
          if (v17)
          {
            if ((v17 & 7) == 0)
            {
              sub_10005BC28();
              return;
            }
          }
        }

        goto LABEL_51;
      }

      break;
    }
  }

      __break(0x5513u);
      goto LABEL_27;
    }

  __break(0x5500u);
  return result;
}

  if ((v4 - 2) >= 2)
  {
    if (v4 == 1)
    {
      sub_100090D74(*(void *)(v2 + 8), 1);
      goto LABEL_36;
    }
  }

  else
  {
    result = sub_100061274();
    if (!result || (result & 7) != 0) {
      goto LABEL_52;
    }
    result = sub_10008C2EC(result, *(void *)(v2 + 8), 0xDu);
    if (result)
    {
      if ((result & 7) == 0)
      {
        uint64_t v10 = sub_10008F408(result);
        goto LABEL_36;
      }

    __break(0x5516u);
    goto LABEL_27;
  }

  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x5515u);
}

  __break(0x5516u);
  return result;
}

  __break(0x5510u);
}

    uint64_t v16 = !((a3 != (void *)100) & (a2 >> 7));
    if ((a2 & 0x104) != 0) {
      uint64_t v16 = 0;
    }
    if (v16) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }

  if ((a4 & 7) != 0) {
    goto LABEL_76;
  }
  if (*(void *)(a4 + 32)) {
    sub_10008D480(a1, (void *)a4, a5);
  }
LABEL_33:
LABEL_34:
  unsigned int v17 = a2 & 0xC;
  uint64_t v18 = a2 & 0x35CC;
  if ((a2 & 8) != 0)
  {
    sub_100057DA0(a5, 1);
    if (a4)
    {
      if ((a4 & 7) != 0) {
        goto LABEL_76;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 216LL))(a4) == 1)
      {
        uint64_t v19 = sub_1000C8320(a4);
        uint64_t v18 = v19 ? a2 & 0x35CC : (unsigned __int16)a2 & 0x35C4u;
        if (!v19) {
          unsigned int v17 = a2 & 4;
        }
      }
    }
  }

  if (v17) {
    sub_1000550B8(a1, v18, (uint64_t)a3, (void *)a4);
  }
  if ((a2 & 0x180) != 0 || a4)
  {
    v20 = sub_10008C710(a1, a4) | ((v18 & 0x18C) != 0);
    if (v20)
    {
      if ((v18 & 4) != 0)
      {
        v21 = sub_10008C710(a1, a4);
      }

      else if ((v18 & 8) != 0)
      {
        v20 = sub_10008C7E4(a1, a4) | 1;
        v21 = v20;
      }

      else
      {
        v21 = 0;
      }

      for (i = 0; i != 15; ++i)
        sub_1000BA1B0(a5, i, v18, (uint64_t)a3, a4, v20, v21);
    }

    if ((a2 & 8) != 0 && a4)
    {
      if (!a3) {
        sub_10006E308(a4);
      }
      if ((a4 & 7) == 0)
      {
        sub_1000C8308(a4, 0);
        sub_10008C82C(a1, a4);
        uint64_t v23 = *(void *)(a4 + 32);
        if (!v23) {
          goto LABEL_64;
        }
        if ((v23 & 7) == 0)
        {
          v24 = (_BYTE *)(v23 + 58);
          if ((v24 & 1) == 0)
          {
            uint64_t *v24 = 0;
LABEL_64:
            sub_10008DDC8(a1, a5);
            uint64_t v25 = sub_100036FF0();
            if (v25 && (v25 & 7) == 0)
            {
              (*(void (**)(uint64_t))(*(void *)v25 + 640LL))(v25);
              goto LABEL_68;
            }

            goto LABEL_76;
          }
        }
      }

      goto LABEL_76;
    }
  }

uint64_t sub_10000AB8C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1) {
    [a1 handleOutReport:a4 withLength:a5];
  }
  return 0LL;
}

uint64_t sub_10000B0DC()
{
  if (qword_10011BAD8 != -1) {
    dispatch_once(&qword_10011BAD8, &stru_100101B58);
  }
  return qword_10011BAD0;
}

void sub_10000B11C(uint64_t a1, char a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_9;
  }

  if ((a2 & 1) != 0) {
    return;
  }
  if (*(unsigned __int8 *)(a1 + 8) > 1u)
  {
LABEL_9:
    __break(0x550Au);
    return;
  }

  if (*(_BYTE *)(a1 + 8)) {
    sub_10000B4C8(a1);
  }
}

void sub_10000B14C(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x18uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10000B51C(v1);
    qword_10011BAD0 = v2;
  }

void sub_10000B194(_Unwind_Exception *a1)
{
}

void sub_10000B1A8(uint64_t a1, int a2, uint64_t a3, unsigned __int16 a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_38:
    __break(0x5516u);
LABEL_39:
    __break(0x5515u);
  }

  else
  {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (!*(void *)(a1 + 16)) {
      *(void *)(a1 + 16) = objc_alloc_init(&OBJC_CLASS___iPodOutHelper);
    }
    switch(a2)
    {
      case 196609:
        uint64_t v8 = sub_10004783C();
        if (!v8 || (v8 & 7) != 0) {
          goto LABEL_38;
        }
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v8 + 768LL))(v8, 0LL, 1LL);
        *(_BYTE *)(a1 + 8) = 1;
        byte_10011C7FC = 1;
        id v9 = [(id)qword_10011BAC8 applicationInfoForBundleIDSync:@"com.apple.iphoneos.iPodOut"];
        goto LABEL_37;
      case 196610:
        uint64_t v15 = sub_10004783C();
        if (!v15 || (v15 & 7) != 0) {
          goto LABEL_38;
        }
        (*(void (**)(uint64_t, void, void))(*(void *)v15 + 768LL))(v15, 0LL, 0LL);
        *(_BYTE *)(a1 + 8) = 0;
        byte_10011C7FC = 0;
        id v16 = [(id)qword_10011BAC8 applicationInfoForBundleIDSync:@"com.apple.iphoneos.iPodOut"];
        unsigned int v17 = objc_msgSend( objc_msgSend(v16, "valueForKey:", BKSApplicationStateKey),  "unsignedIntegerValue");
        dispatch_time_t v18 = dispatch_time(0LL, 0LL);
        if (v18 < qword_10011C800) {
          goto LABEL_39;
        }
        if (v18 - qword_10011C800 < 0x77359400)
        {
LABEL_28:
          dispatch_time_t v20 = dispatch_time(0LL, 2000000000LL);
          dispatch_after(v20, &_dispatch_main_q, &stru_100101B78);
        }

        goto LABEL_37;
      case 196611:
        float v10 = (float)a4 / 1000.0;
        if ((float)(v10 + 0.00000011921) <= 0.0 || (float)(v10 + -0.00000011921) >= 2.0)
        {
          NSLog( @"ERROR - %s:%s - %d gain out of range %f",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPPushUIEventHandler.mm",  "SendISLNotification",  155LL,  v10);
          goto LABEL_37;
        }

        CFTypeRef cf = 0LL;
        uint64_t SecondaryDisplay = IOMobileFramebufferGetSecondaryDisplay(&cf);
        CFTypeRef v13 = cf;
        if (!cf || (_DWORD)SecondaryDisplay)
        {
          uint64_t v24 = SecondaryDisplay;
          uint64_t v23 = 152LL;
          goto LABEL_36;
        }

        uint64_t v22 = IOMobileFramebufferSetVideoDACGain((float)a4 / 1000.0);
        if ((_DWORD)v22) {
          NSLog( @"ERROR - %s:%s - %d could not set gain (error=0x%x)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPPushUIEventHandler.mm",  "SendISLNotification",  148LL,  v22);
        }
        goto LABEL_33;
      case 196612:
        CFTypeRef cf = 0LL;
        uint64_t v12 = IOMobileFramebufferGetSecondaryDisplay(&cf);
        CFTypeRef v13 = cf;
        if (!cf || (_DWORD)v12)
        {
          uint64_t v24 = v12;
          uint64_t v23 = 173LL;
LABEL_36:
          NSLog( @"ERROR - %s:%s - %d could not get secondary framebuffer (%hhx, error=0x%x)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPPushUIEventHandler.mm",  "SendISLNotification",  v23,  v13,  v24);
        }

        else
        {
          uint64_t v14 = IOMobileFramebufferSetLine21Data();
          if ((_DWORD)v14) {
            NSLog( @"ERROR - %s:%s - %d could not set line (error=0x%x)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPPushUIEventHandler.mm",  "SendISLNotification",  167LL,  v14);
          }
LABEL_33:
          CFRelease(cf);
        }

void sub_10000B4C8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    dispatch_async(&_dispatch_main_q, &stru_100101BD8);
  }

void sub_10000B4F0(id a1)
{
}

uint64_t sub_10000B508(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10000B51C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)result = &off_100101BA8;
    *(_BYTE *)(result + 8) = 0;
    *(void *)(result + 16) = 0LL;
    qword_10011BAC8 = objc_alloc_init(&OBJC_CLASS___IAPApplicationStateMonitor);
    return v1;
  }

  return result;
}

void *sub_10000B574(void *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *result = &off_100101BA8;
    uint64_t v2 = (void *)result[2];
    if (v2) {

    }
    *((_BYTE *)v1 + 8) = 0;
    return v1;
  }

  return result;
}

void *sub_10000B5CC(void *result)
{
  return result;
}

void sub_10000B5E0(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10000B574(a1);
    operator delete(a1);
  }

void sub_10000B618(_Unwind_Exception *a1)
{
}

void sub_10000B62C(id a1)
{
  qword_10011C800 = dispatch_time(0LL, 0LL);
  SBSLaunchApplicationWithIdentifier(@"com.apple.iphoneos.iPodOut", 1LL);
}

uint64_t sub_10000B65C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 16LL))(result, a2, a3, a4);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10000B67C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 32LL))(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10000BC70(_Unwind_Exception *a1)
{
}

void sub_10000BC84()
{
}

void sub_10000BCA0(id a1)
{
}

id sub_10000BCC0()
{
  return objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "stopServer:", 1);
}

id sub_10000BCE0()
{
  return objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "updateTransportListStates");
}

uint64_t sub_10000BCFC()
{
  if (qword_10011BAF0)
  {

    qword_10011BAF0 = 0LL;
  }

  uint64_t result = os_transaction_create("com.apple.iapd.transportListTransaction");
  qword_10011BAF0 = result;
  return result;
}

void sub_10000BD38()
{
  if (qword_10011BAF0)
  {

    qword_10011BAF0 = 0LL;
  }

void sub_10000C19C(uint64_t a1)
{
  uint64_t v1 = (xpc_connection_t *)(*(void *)(a1 + 32) + 136LL);
  if (((*(_BYTE *)(a1 + 32) - 120) & 7) != 0) {
    goto LABEL_9;
  }
  if (!*v1) {
    goto LABEL_10;
  }
  xpc_connection_set_event_handler(*v1, &stru_100101C48);
  uint64_t v3 = (xpc_connection_t *)(*(void *)(a1 + 32) + 136LL);
  if (((*(_BYTE *)(a1 + 32) - 120) & 7) != 0) {
    goto LABEL_9;
  }
  if (!*v3) {
    goto LABEL_10;
  }
  xpc_connection_cancel(*v3);
  uint64_t v4 = (xpc_object_t *)(*(void *)(a1 + 32) + 136LL);
  if (((*(_BYTE *)(a1 + 32) - 120) & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  if (*v4)
  {
    xpc_release(*v4);
    if (((*(_BYTE *)(a1 + 32) - 120) & 7) == 0)
    {
      *(void *)(*(void *)(a1 + 32) + 136LL) = 0LL;
      return;
    }

    goto LABEL_9;
  }

void sub_10000C4C0(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  switch(a3)
  {
    case -536870288:
      uint64_t v7 = sub_1000451B0();
      if (!v7 || (v7 & 7) != 0)
      {
LABEL_16:
        __break(0x5516u);
        return;
      }

      int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104LL))(v7);
      io_connect_t v6 = dword_10011BAE8;
      if (v8) {
        goto LABEL_10;
      }
      IOCancelPowerChange(dword_10011BAE8, a4);
      break;
    case -536870144:
      uint64_t v9 = sub_1000451B0();
      if (v9 && (v9 & 7) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 136LL))(v9);
        return;
      }

      goto LABEL_16;
    case -536870272:
      uint64_t v5 = sub_1000451B0();
      if (v5 && (v5 & 7) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 112LL))(v5);
        io_connect_t v6 = dword_10011BAE8;
LABEL_10:
        IOAllowPowerChange(v6, a4);
        return;
      }

      goto LABEL_16;
  }

void sub_10000C5A8(uint64_t a1)
{
  if (((*(_BYTE *)(a1 + 32) - 104) & 7) != 0) {
    goto LABEL_11;
  }
  xpc_connection_t mach_service = xpc_connection_create_mach_service( (const char *)&kIAPDXPCServiceName,  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 152LL),  1uLL);
  if (((*(_BYTE *)(a1 + 32) - 120) & 7) != 0) {
    goto LABEL_11;
  }
  *(void *)(*(void *)(a1 + 32) + 136LL) = mach_service;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (_xpc_connection_s **)(v3 + 136);
  if (((v3 + 136) & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v5 = *v4;
  if (*v4)
  {
    v9[0] = 0LL;
    v9[1] = v9;
    v9[2] = 0x3052000000LL;
    v9[3] = sub_10000C6F0;
    v9[4] = sub_10000C700;
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    io_connect_t v6 = (unint64_t *)(v3 + 152);
    if ((v6 & 7) == 0)
    {
      unint64_t v10 = *v6;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10000C70C;
      handler[3] = &unk_100101C98;
      handler[4] = v9;
      xpc_connection_set_event_handler(v5, handler);
      uint64_t v7 = (xpc_connection_t *)(*(void *)(a1 + 32) + 136LL);
      if (((*(_BYTE *)(a1 + 32) - 120) & 7) == 0)
      {
        if (*v7)
        {
          xpc_connection_resume(*v7);
          _Block_object_dispose(v9, 8);
          return;
        }

        goto LABEL_12;
      }
    }

LABEL_11:
    __break(0x5516u);
LABEL_12:
    __break(0x5510u);
    return;
  }

  NSLog(@"IAPServer::init _listener is not valid!\n");
}

    __break(0x5516u);
    return (char)self;
  }

  uint64_t v5 = 0;
LABEL_10:
  LOBYTE(self) = v5;
  return (char)self;
}

  __break(0x5510u);
}

      (*((void (**)(id *))*v6 + 85))(v6);
      uint64_t v15 = (void *)sub_100035344();
      [v15 setGroupingType:0];
      id v16 = [v15 items];
      if (v16 && (unsigned int v17 = v16, [v16 count]))
      {
        if (a2 == -1)
        {
          uint64_t v19 = 0LL;
        }

        else
        {
          else {
            dispatch_time_t v18 = (int)a2;
          }
          uint64_t v19 = [v17 objectAtIndex:v18];
        }

        (*((void (**)(id *))*v6 + 82))(v6);
        unsigned int v11 = (uint64_t)[v6[15] prepareForPlaybackWithQuery:v15 andFirstItem:v19];
      }

      else
      {
        unsigned int v11 = 2LL;
      }

      goto LABEL_21;
    }

  __break(0x5510u);
}

  __break(0x5510u);
}

  __break(0x5513u);
  return result;
}

    __break(0x5516u);
  }

  return result;
}

  __break(0x5513u);
LABEL_12:
  __break(0x5507u);
  return result;
}

  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
  uint64_t result = *(void *)(v2 + 1448);
  if (result)
  {
    if ((result & 7) == 0) {
      return sub_1000AEC90(result);
    }
    goto LABEL_16;
  }

  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5507u);
  return result;
}

    sub_1000CEAEC( 0,  4,  "%s:%d No VPort for DETACH Id=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  18682,  a2);
    return 4LL;
  }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
LABEL_12:
  __break(0x550Au);
  return result;
}

    if (v5 != v4)
    {
      sub_1000CEAEC( 0,  4,  "%s:%d RemoteUI Object does not match, cannot handle EnterRemoteUIMode! %hhx != %hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoRemoteUI.cpp",  685,  v5,  v4);
      uint64_t v4 = qword_10011C980;
    }

    if (!v4) {
      goto LABEL_84;
    }
    goto LABEL_14;
  }

  if ((v3 & 7) != 0) {
    goto LABEL_87;
  }
  uint64_t v5 = qword_10011C980;
  if (qword_10011C980) {
    goto LABEL_11;
  }
  qword_10011C980 = v3;
LABEL_14:
  if ((v4 & 7) != 0 || ((v4 + 8) & 7) != 0) {
    goto LABEL_87;
  }
  if (*(void *)(v4 + 8) != a1) {
    goto LABEL_84;
  }
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1224));
  io_connect_t v6 = qword_10011C980;
  if (!qword_10011C980 || (qword_10011C980 & 7) != 0 || ((qword_10011C980 + 1192) & 7) != 0) {
    goto LABEL_87;
  }
  if (!*(void *)(qword_10011C980 + 1192))
  {
LABEL_81:
    if (qword_10011C980 && (qword_10011C980 & 7) == 0)
    {
      pthread_mutex_unlock((pthread_mutex_t *)(qword_10011C980 + 1224));
LABEL_84:
      sub_1000578E8(a1, 4u);
      return;
    }

    goto LABEL_87;
  }

  if ((((_BYTE)qword_10011C980 - 72) & 7) != 0) {
    goto LABEL_87;
  }
  if (!*(void *)(qword_10011C980 + 1208))
  {
    uint64_t v7 = sub_100061274();
    if (!v7) {
      goto LABEL_87;
    }
    if ((v7 & 7) != 0) {
      goto LABEL_87;
    }
    int v8 = sub_10008C468((uint64_t *)v7, 4);
    io_connect_t v6 = qword_10011C980;
    if (!qword_10011C980 || (qword_10011C980 & 7) != 0 || (((_BYTE)qword_10011C980 - 72) & 7) != 0) {
      goto LABEL_87;
    }
    *(void *)(qword_10011C980 + 1208) = v8;
    if (!v8) {
LABEL_86:
    }
      sub_1000D276C();
  }

  if ((v6 & 7) != 0) {
    goto LABEL_87;
  }
  uint64_t v9 = (uint64_t *)(v6 + 1192);
  unint64_t v10 = *v9;
  if (!*v9 || (v10 & 7) != 0) {
    goto LABEL_87;
  }
  if (!qword_10011C980 || (qword_10011C980 & 7) != 0 || ((qword_10011C980 + 1380) & 3) != 0) {
    goto LABEL_87;
  }
  *(_DWORD *)(qword_10011C980 + 1380) = 0;
  sub_1000612C4(a1);
  if (v11)
  {
    sub_1000612C4(a1);
    if (!v12) {
      goto LABEL_87;
    }
    if ((v12 & 7) != 0) {
      goto LABEL_87;
    }
    if (!qword_10011C980) {
      goto LABEL_87;
    }
    if ((qword_10011C980 & 7) != 0) {
      goto LABEL_87;
    }
    if (((qword_10011C980 + 1376) & 7) != 0) {
      goto LABEL_87;
    }
    sub_10005EB3C(v12, *(_DWORD *)(qword_10011C980 + 1376));
    if (!qword_10011C980 || (qword_10011C980 & 7) != 0 || ((qword_10011C980 + 1384) & 7) != 0) {
      goto LABEL_87;
    }
    *(_BYTE *)(qword_10011C980 + 1384) = 0;
  }

  CFTypeRef v13 = sub_100062E0C();
  if (qword_10011C980)
  {
    if ((qword_10011C980 & 7) == 0 && ((qword_10011C980 + 1388) & 3) == 0)
    {
      *(_DWORD *)(qword_10011C980 + 1388) = v13;
      sub_10005758C(a1, 4u, 0);
      sub_100057538(a1, 4u, 0);
      if (qword_10011C980)
      {
        if ((qword_10011C980 & 7) == 0 && ((qword_10011C980 + 1416) & 7) == 0)
        {
          sub_100091470(qword_10011C980 + 1416, 0LL);
          if (qword_10011C980)
          {
            if ((qword_10011C980 & 7) == 0 && ((qword_10011C980 + 1220) & 3) == 0)
            {
              *(_BYTE *)(qword_10011C980 + 1220) = 1;
              uint64_t v14 = sub_100036FF0();
              if (v14)
              {
                if ((v14 & 7) == 0)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 632LL))(v14, 1LL);
                  if (qword_10011C980)
                  {
                    if ((qword_10011C980 & 7) == 0)
                    {
                      uint64_t v15 = (uint64_t *)(qword_10011C980 + 1192);
                      if (((qword_10011C980 + 1192) & 7) == 0)
                      {
                        id v16 = *v15;
                        if (*v15)
                        {
                          if ((v16 & 7) == 0)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 88LL))(v16, 1LL);
                            sub_1000914C8(1, a1, 1);
                            if (qword_10011C980)
                            {
                              if ((qword_10011C980 & 7) == 0)
                              {
                                *(_BYTE *)(qword_10011C980 + 1221) = 1;
                                unsigned int v17 = sub_1000438B8();
                                if (v17)
                                {
                                  if ((v17 & 7) == 0)
                                  {
                                    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 80LL))(v17))
                                    {
                                      dispatch_time_t v18 = sub_100061274();
                                      if (!v18
                                        || (v18 & 7) != 0
                                        || !qword_10011C980
                                        || (qword_10011C980 & 7) != 0
                                        || ((qword_10011C980 + 1208) & 7) != 0)
                                      {
                                        goto LABEL_87;
                                      }

                                      if (sub_10008D184(v18, *(void *)(qword_10011C980 + 1208)) != 56)
                                      {
                                        uint64_t v19 = sub_1000579D4(a1);
                                        if (!v19 || (v19 & 7) != 0) {
                                          goto LABEL_87;
                                        }
                                        if (sub_100091824(v19))
                                        {
                                          dispatch_time_t v20 = sub_1000579D4(a1);
                                          if (!v20 || (v20 & 7) != 0) {
                                            goto LABEL_87;
                                          }
                                          sub_100091844(v20);
                                        }
                                      }
                                    }

                                    goto LABEL_81;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  __break(0x550Au);
  return result;
}

  CFTypeRef v13 = v6 & 0x20;
  uint64_t v14 = v7 & 0x8000;
  uint64_t v15 = 1;
  id v16 = v5 & 0x10;
  if (!v16 && v14)
  {
    unsigned int v17 = v9 > 4;
    if (v8 == 4 || v13 == 0) {
      unsigned int v17 = v13 != 0;
    }
    uint64_t v15 = v9 > 4 || v17;
  }

  uint64_t v19 = v9 > 4;
  dispatch_time_t v20 = v8 == 4;
  entitlementForAllAccessories = self->_entitlementForAllAccessories;
  sub_1000CEA98( 3u,  @"bundleID %@ supportsEAWhenSuspended = %d, supportsEAInBackground = %d, clientAppStateInBackground = %d, clientAppSt ateInForeground = %d, clientLinksUIApplication = %d, _entitlementForAllAccessories = %d, anyProtocolFound = % d, self.applicationState = 0x%X, canSendConnectionEvent = %d",  self->_bundleId,  v16 >> 4,  v13 >> 5,  v20,  v19,  v14 >> 15,  entitlementForAllAccessories,  v12,  -[IAPEAClient applicationState](self, "applicationState"),  v15);
LABEL_24:
  _Block_object_dispose(&v24, 8);
  LOBYTE(v10) = v15;
  return (char)v10;
}

  __break(0x5516u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

  uint64_t result = *v3;
  if (!*v3 || !(_DWORD)v5) {
    return v5;
  }
  if ((result & 7) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 24LL))(result, a2, v5);
    return v7;
  }

            __break(0x5516u);
          }
        }
      }
    }
  }

  return result;
}

  __break(0x550Au);
LABEL_12:
  __break(0x5516u);
LABEL_13:
  __break(0x5513u);
  return result;
}

void sub_10000C6D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10000C6F0(uint64_t a1, uint64_t a2)
{
}

void sub_10000C700(uint64_t a1)
{
}

void sub_10000C70C(uint64_t a1, xpc_object_t object)
{
  if (!object) {
    goto LABEL_9;
  }
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    xpc_connection_set_target_queue((xpc_connection_t)object, v3);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10000D0D0;
    handler[3] = &unk_100101D00;
    handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_resume((xpc_connection_t)object);
    return;
  }

  if (type != (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v5 = xpc_copy_description(object);
    NSLog(@"_xpc_iapd_handle_incoming_request unexpected event: %s\n", v5);
    free(v5);
    return;
  }

  if (_xpc_error_key_description)
  {
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    NSLog(@"_xpc_iapd_handle_incoming_request connection error: %s\n", string);
  }

  else
  {
LABEL_9:
    __break(0x5510u);
  }

LABEL_24:
    __break(0x5516u);
LABEL_25:
    __break(0x550Au);
  }

  __break(0x5500u);
}

            __break(0x5500u);
LABEL_25:
            uint64_t v25 = EAAccessoryAccessibilityPointYKey;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", EAAccessoryAccessibilityPointYKey), "floatValue");
            v27 = v26 * 65535.0;
            unsigned int v28 = EAAccessoryAccessibilityPointXKey;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", EAAccessoryAccessibilityPointXKey), "floatValue");
            v30 = v29;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", v25), "floatValue");
            uint64_t v32 = v31;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", EAAccessoryAccessibilityHeightKey), "floatValue");
            unsigned int v34 = v33;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", v28), "floatValue");
            v36 = v35;
            objc_msgSend(objc_msgSend(v8, "objectForKey:", EAAccessoryAccessibilityWidthKey), "floatValue");
            v38 = 0.0;
            if (v27 > 0.0) {
              unsigned int v39 = v27;
            }
            else {
              unsigned int v39 = 0.0;
            }
            if (v27 >= 65535.0) {
              v40 = 65535.0;
            }
            else {
              v40 = v39;
            }
            if (v40 > -1.0 && v40 < 4295000000.0)
            {
              LODWORD(v8_Block_object_dispose(va, 8) = v40;
              if (v38 > -1.0 && v38 < 4295000000.0)
              {
                uint64_t v43 = (float)(v32 + v34) * 65535.0;
                HIDWORD(v8_Block_object_dispose(va, 8) = v38;
                v44 = 0.0;
                if (v43 > 0.0) {
                  v45 = (float)(v32 + v34) * 65535.0;
                }
                else {
                  v45 = 0.0;
                }
                if (v43 >= 65535.0) {
                  v45 = 65535.0;
                }
                if (v45 > -1.0 && v45 < 4295000000.0)
                {
                  uint64_t v47 = (float)(v36 + v37) * 65535.0;
                  LODWORD(v89) = v45;
                  if (v47 > 0.0) {
                    v44 = v47;
                  }
                  v48 = v47 >= 65535.0 ? 65535.0 : v44;
                  if (v48 > -1.0 && v48 < 4295000000.0)
                  {
                    v21 = 0LL;
                    HIDWORD(v89) = v48;
                    LODWORD(v90) = 3;
                    *((void *)&v90 + 1) = &v88;
                    *(void *)&v91 = 16LL;
LABEL_102:
                    v66 = [a3 objectForKey:EAAccessoryAccessibilityContextKey];
                    if (v66)
                    {
                      DWORD2(v91) = [v66 unsignedIntValue];
                      BYTE12(v91) = 1;
                      (*(void (**)(uint64_t, uint64_t, void, __int128 *))(*(void *)a1 + 32LL))( a1,  1245185LL,  a2,  &v90);
                      if (v21) {
                        operator delete[](v21);
                      }
                    }

                    return;
                  }
                }
              }
            }

      __break(0x5513u);
      return 1LL;
    }
  }

  __break(0x5512u);
  return result;
}

  if (!*(_BYTE *)(a1 + 112)) {
    goto LABEL_40;
  }
  if (!v13[400]) {
    v13[400] = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  if (a5) {
    uint64_t v25 = -1;
  }
  else {
    uint64_t v25 = 0;
  }
  if (a5 == 1) {
    uint64_t v26 = 1LL;
  }
  else {
    uint64_t v26 = v25;
  }
  if ((a6 & 7) != 0) {
    goto LABEL_43;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 216LL))(a6);
  v45 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  if ((a2 + 32) <= 0x3F)
  {
    unsigned int v28 = v13;
    if (v27 < 3) {
      uint64_t v29 = v27 + 1;
    }
    else {
      uint64_t v29 = 0LL;
    }
    v44 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
    uint64_t v43 = IAPAppPacketLingoKey;
    unsigned int v42 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3);
    v41 = IAPAppPacketCommandIDKey;
    v48 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4);
    v30 = IAPAppPacketTransactionIDKey;
    uint64_t v31 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v26);
    uint64_t v32 = IAPAppPacketDirectionKey;
    v33 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v29);
    unsigned int v34 = IAPAppPacketTransportKey;
    uint64_t v35 = IAPAppPacketTimestampKey;
    -[NSDate timeIntervalSinceDate:](v45, "timeIntervalSinceDate:", v28[400]);
    *(float *)&v36 = v36;
    uint64_t v37 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v36);
    v38 = IAPAppPacketTimeInSecondsKey;
    unsigned int v39 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a7, a8);
    v40 = +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v44,  v43,  v42,  v41,  v48,  v30,  v31,  v32,  v33,  v34,  v45,  v35,  v37,  v38,  v39,  IAPAppPacketPayloadKey,  0LL);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
    [*(id *)(a1 + 104) addObject:v40];
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 120));
    goto LABEL_40;
  }

    __break(0x5516u);
  }

  id v16 = "Unknown";
LABEL_13:
  unsigned int v17 = v15;
  dispatch_time_t v18 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %s; Comment2; %s",
          v17,
          v16,
          __b);
  if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || sub_1000CEA70(0LL)) {
    NSLog(@"%@", v18);
  }
  if (*(_BYTE *)(a1 + 114)) {
    [*(id *)(a1 + 184) log:v18];
  }
  if ((dword_10011C820 & 8) != 0)
  {
    memset(__p, 170, 24);
    sub_1000255A4((uint64_t)__p, (char *)-[NSString UTF8String](v18, "UTF8String"));
    sub_100020EC4((uint64_t)__p, 8u, 1);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

  __break(0x5510u);
  return result;
}

      dispatch_time_t v18 = 0LL;
LABEL_29:

      return (NSAutoreleasePool *)v18;
    }

    __break(0x5516u);
    goto LABEL_25;
  }

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!(*((unsigned int (**)(id *))*a1 + 52))(a1))
  {

    return;
  }

  unsigned int v11 = 0LL;
  uint64_t v12 = &v11;
  CFTypeRef v13 = 0x3052000000LL;
  uint64_t v14 = sub_10003FCF8;
  uint64_t v15 = sub_10003FD08;
  id v16 = 0LL;
  if (((*((uint64_t (**)(id *))*a1 + 75))(a1) & 1) != 0
    || (*((unsigned int (**)(id *))*a1 + 76))(a1))
  {
    uint64_t v5 = sub_100031C08((uint64_t)[a1[15] currentNowPlayingInfoPID]);
LABEL_10:
    v12[5] = (uint64_t)v5;
LABEL_11:
    io_connect_t v6 = (uint64_t)operator new(0x38uLL);
    uint64_t v7 = v6;
    if ((v6 & 0xF) == 0)
    {
      sub_10004EA40(v6);
      if ((v7 & 7) == 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 400LL))(v7, v12[5]);
        *(_BYTE *)(v7 + 32) = 1;
        *(_DWORD *)(v7 + 36) = (*((uint64_t (**)(id *))*a1 + 47))(a1);
        _Block_object_dispose(&v11, 8);

        goto LABEL_14;
      }
    }

    goto LABEL_24;
  }

  if (!(_DWORD)a2)
  {
    uint64_t v5 = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "nowPlayingItem");
    goto LABEL_10;
  }

  int v8 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v8)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003FD2C;
    block[3] = &unk_1001049B0;
    block[4] = &v11;
    dispatch_sync(v8, block);
    goto LABEL_11;
  }

    __break(0x550Au);
  }

  __break(0x5510u);
}

    __break(0x5516u);
    goto LABEL_25;
  }

    __break(0x5507u);
    goto LABEL_25;
  }

  __break(0x5507u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

        __break(0x5516u);
      }
    }
  }

  return result;
}

                      __break(0x5513u);
                      goto LABEL_25;
                    }
                  }
                }
              }
            }
          }
        }

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    return result;
  }

    sub_10007E6B4(a1, a2, 0xAu, a3);
  }

    __break(0x5516u);
    goto LABEL_25;
  }

  if (!v4) {
    goto LABEL_24;
  }
  io_connect_t v6 = *v4;
  uint64_t result = *(void *)(result + 1200);
  if (!result || (result & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 200LL))(result);
  *(_WORD *)(v2 + 1393) = 0;
  if (result < 0x100)
  {
    if ((_DWORD)result == v6) {
      return 0LL;
    }
    uint64_t result = *(void *)(v2 + 1200);
    if (result && (result & 7) == 0)
    {
      uint64_t v5 = *(void (**)(void))(*(void *)result + 192LL);
      goto LABEL_21;
    }

    goto LABEL_24;
  }

  __break(0x5507u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    goto LABEL_25;
  }

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

      else {
        CFTypeRef v13 = *(const char **)a2;
      }
      syslog(4, "Nuking %s\n", v13);
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v14 = &v25;
      }
      else {
        uint64_t v14 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      syslog(4, "Nuking %s\n", (const char *)v14);
      else {
        uint64_t v15 = *(const char **)a2;
      }
      unlink(v15);
      if ((v25.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        id v16 = &v25;
      }
      else {
        id v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      unlink((const char *)v16);
      goto LABEL_37;
    }

id sub_10000CBCC()
{
  return objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "preventIdleSleep:",  0);
}

uint64_t sub_10000CEF8()
{
  uint64_t result = qword_10011D0D8;
  if (qword_10011D0D8) {
    BOOL v1 = (qword_10011D0D8 & 7) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (!v1) {
    __break(0x5516u);
  }
  return result;
}

uint64_t *sub_10000D014(uint64_t *result)
{
  if (!result
    || (result & 7) != 0
    || ((uint64_t v1 = *result) != 0 ? (v2 = (*result & 7) == 0) : (v2 = 0),
        !v2 || (uint64_t result = (uint64_t *)(v1 + 16), ((v1 + 16) & 7) != 0)))
  {
    __break(0x5516u);
  }

  return result;
}

void *sub_10000D048(void *result)
{
  if (result
    && (result & 7) == 0
    && (*result ? (BOOL v1 = (*result & 7LL) == 0) : (BOOL v1 = 0), (v2 = *result + 8LL, v1) ? (v3 = (v2 & 7) == 0) : (v3 = 0), v3))
  {
    *uint64_t result = *(void *)v2;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

void sub_10000D0D0(uint64_t a1, xpc_object_t object)
{
  if (!object) {
    goto LABEL_566;
  }
  uint64_t v2 = (uint64_t)object;
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string((xpc_object_t)v2, "requestType");
    if (!string)
    {
      NSLog(@"RequestType not specified in xpc message!");
      string = "<nil>";
    }

    if (!strcmp(string, "transportLeft"))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000100C0;
      block[3] = &unk_100101CB8;
      block[4] = xpc_dictionary_get_uint64((xpc_object_t)v2, "portID");
      dispatch_async(&_dispatch_main_q, block);
      return;
    }

    if (!strcmp(string, "resistorArrived"))
    {
      qword_10011BAF8 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portNumber");
      qword_10011BB00 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portManagerNumber");
      qword_10011BB08 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portType");
      qword_10011BB10 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portID");
      qword_10011BB18 = xpc_dictionary_get_uint64((xpc_object_t)v2, "resistorID");
      dispatch_async(&_dispatch_main_q, &stru_100101CD8);
      return;
    }

    if (strcmp(string, "dataArrived"))
    {
      if (!strcmp(string, "hasAdaptor"))
      {
        int uint64 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portManagerNumber");
        char v20 = xpc_dictionary_get_BOOL((xpc_object_t)v2, "enable");
        v21 = objc_autoreleasePoolPush();
        sub_1000280DC(uint64, v20);
        objc_autoreleasePoolPop(v21);
        return;
      }

      if (!strcmp(string, "OwnsPhysicalConnector"))
      {
        xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v2);
        if (!reply)
        {
          NSLog(@"ERROR: Client sent kXPCOwnsPhysicalConnectorStr xpc message without a reply context");
          return;
        }

        uint64_t v23 = reply;
        BOOL v24 = sub_10002645C() != 0LL;
        uint64_t v25 = "result";
LABEL_73:
        xpc_object_t v26 = v23;
LABEL_74:
        xpc_dictionary_set_BOOL(v26, v25, v24);
LABEL_75:
        v27 = *(_xpc_connection_s **)(a1 + 32);
        if (!v27) {
          goto LABEL_566;
        }
        xpc_connection_send_message(v27, v23);
        unsigned int v28 = v23;
LABEL_194:
        xpc_release(v28);
        return;
      }

      if (!strcmp(string, "IAPAudioCopyDeviceStates"))
      {
        xpc_object_t v30 = xpc_dictionary_create_reply((xpc_object_t)v2);
        if (!v30)
        {
          NSLog(@"ERROR: Client sent kXPCAudioCopyDeviceStatesStr xpc message without a reply context");
          return;
        }

        uint64_t v31 = v30;
        uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        v33 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        unsigned int v34 = sub_10002645C();
        if (v34)
        {
          uint64_t v35 = v34;
          v315 = v33;
          uint64_t v36 = sub_1000C06AC();
          if (!v36) {
            goto LABEL_493;
          }
          uint64_t v37 = v36;
          if ((v36 & 7) != 0) {
            goto LABEL_493;
          }
          uint64_t v38 = sub_100018224();
          if (!v38) {
            goto LABEL_493;
          }
          if ((v38 & 7) != 0) {
            goto LABEL_493;
          }
          uint64_t v39 = sub_10001864C(v38);
          int v313 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 136LL))(v37, v39);
          uint64_t v40 = sub_100019370();
          if (!v40 || (v40 & 7) != 0) {
            goto LABEL_493;
          }
          unsigned int v41 = *(unsigned __int8 *)(v40 + 8);
          if (v41 >= 2) {
            goto LABEL_448;
          }
          uint64_t v42 = sub_1000C60C4();
          if (!v42) {
            goto LABEL_493;
          }
          if ((v42 & 7) != 0) {
            goto LABEL_493;
          }
          int v43 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v42 + 168LL))(v42, v35);
          uint64_t v44 = sub_1000C60C4();
          if (!v44) {
            goto LABEL_493;
          }
          if ((v44 & 7) != 0) {
            goto LABEL_493;
          }
          int v45 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v44 + 176LL))(v44, v35);
          v312 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1LL);
          uint64_t v46 = sub_100042AC4();
          if (!v46 || (v46 & 7) != 0) {
            goto LABEL_493;
          }
          uint64_t v311 = IAPAudioTransportNameKey;
          if (v41) {
            int v47 = 2;
          }
          else {
            int v47 = 4;
          }
          if (v43) {
            int v48 = 8;
          }
          else {
            int v48 = 0;
          }
          int v49 = v48 | v47;
          if (v45) {
            int v50 = 16;
          }
          else {
            int v50 = 0;
          }
          uint64_t v51 = v49 | v50;
          else {
            uint64_t v52 = 4LL;
          }
          v53 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v52);
          uint64_t v54 = IAPAudioTransportLineoutStateKey;
          v55 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v51);
          uint64_t v56 = IAPAudioTransportLineinStateKey;
          if (v313) {
            uint64_t v57 = 2LL;
          }
          else {
            uint64_t v57 = 4LL;
          }
          v58 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v57);
          -[NSMutableArray addObject:]( v32,  "addObject:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v312,  v311,  v53,  v54,  v55,  v56,  v58,  IAPAudioTransportUSBAudioStateKey,  0LL));
          v33 = v315;
        }

        if (-[NSMutableArray count](v32, "count"))
        {
          *(void *)v329 = 0LL;
          v59 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v32,  100LL,  0LL,  v329);
          if (!v59) {
            NSLog( @"ERROR - %s:%s - %d unable to convert accessories array to plist: %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  552,  [*(id *)v329 description]);
          }
        }

        else
        {
          v59 = 0LL;
        }

        NSLog(@"IAPAudioCopyDeviceStates audioDeviceStates = %@, data = %@", v32, v59);

        xpc_dictionary_set_BOOL(v31, "result", 1);
        if (v59)
        {
          id v84 = -[NSData bytes](v59, "bytes");
          if (!v84) {
            goto LABEL_566;
          }
          xpc_dictionary_set_data(v31, "deviceStates", v84, -[NSData length](v59, "length"));
        }

        v85 = *(_xpc_connection_s **)(a1 + 32);
        if (!v85) {
          goto LABEL_566;
        }
        goto LABEL_378;
      }

      if (!strcmp(string, "IAPAccessoryEQSelectEqualizerAtIndex"))
      {
        xpc_object_t v65 = xpc_dictionary_create_reply((xpc_object_t)v2);
        if (!v65)
        {
          NSLog(@"ERROR: Client sent kXPCIAPAccessoryEQSelectEqualizerAtIndexStr xpc message without a reply context");
          return;
        }

        v66 = v65;
        uint64_t v67 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "updateSpeakerEqIndex:eqIndex:",  v67,  xpc_dictionary_get_uint64((xpc_object_t)v2, "eqIndex"));
        goto LABEL_131;
      }

      if (!strcmp(string, "IAPAudioSetVolumeForTransport"))
      {
        a1 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
        double v71 = xpc_dictionary_get_double((xpc_object_t)v2, "volume");
        if (a1 <= 3)
        {
          if ((_DWORD)a1 != 1) {
            return;
          }
          float v72 = v71;
          float v73 = 1.0;
          if (v72 <= 1.0)
          {
            float v73 = v72;
            if (v72 < 0.0) {
              float v73 = 0.0;
            }
          }

          double v74 = floor(v73 * 255.0 + 0.5);
          if (v74 > -1.0 && v74 < 4294967300.0)
          {
            v75 = sub_10002645C();
            if (!v75)
            {
              NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  615LL);
              return;
            }

            uint64_t v76 = (uint64_t)v75;
            uint64_t v77 = sub_100042AC4();
            if (v77 && (v77 & 7) == 0)
            {
              sub_100042CBC(v77, v76, v74, 0);
              return;
            }

            goto LABEL_493;
          }

          goto LABEL_452;
        }

        goto LABEL_448;
      }

      if (!strcmp(string, "IAPAudioGetVolumeForTransport"))
      {
        xpc_object_t v78 = xpc_dictionary_create_reply((xpc_object_t)v2);
        if (!v78)
        {
          NSLog(@"ERROR: Client sent kXPCAudioGetVolumeForTransportStr xpc message without a reply context");
          return;
        }

        v66 = v78;
        unsigned int v79 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
        if (v79 <= 3)
        {
          double v80 = 0.0;
          if (v79 == 1)
          {
            v81 = sub_10002645C();
            if (v81)
            {
              v82 = v81;
              uint64_t v83 = sub_100042AC4();
              if (!v83 || (v83 & 7) != 0) {
                goto LABEL_493;
              }
              double v80 = (float)((float)(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v83 + 104LL))( v83,  v82)
                          / 255.0);
            }

            else
            {
              NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  635LL);
            }
          }

          xpc_dictionary_set_BOOL(v66, "result", 1);
          xpc_dictionary_set_double(v66, "volume", v80);
          goto LABEL_192;
        }

        goto LABEL_448;
      }

      if (!strcmp(string, "IAPAudioShouldPauseAudioOnHeadsetDisconnect"))
      {
        xpc_object_t v86 = xpc_dictionary_create_reply((xpc_object_t)v2);
        if (!v86)
        {
          NSLog(@"ERROR: Client sent kXPCAudioShouldPauseAudioOnHeadsetDisconnectStr xpc message without a reply context");
          return;
        }

        uint64_t v23 = v86;
        uint64_t v87 = sub_1000256D8();
        if (!v87 || (v87 & 7) != 0) {
          goto LABEL_493;
        }
        int v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 96LL))(v87) ^ 1;
        xpc_dictionary_set_BOOL(v23, "result", 1);
        uint64_t v25 = "shouldPause";
        xpc_object_t v26 = v23;
        BOOL v24 = v88;
        goto LABEL_74;
      }

      if (strcmp(string, "IAPAudioIsVolumeControlSupportedForTransport"))
      {
        if (!strcmp(string, "IAPAudioStartPlaybackForTransport"))
        {
          unsigned int v96 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
          if (v96 > 3) {
            goto LABEL_448;
          }
          if (v96 != 1) {
            return;
          }
          if (!sub_10002645C())
          {
            NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  716LL);
            return;
          }

          uint64_t v97 = sub_1000C60C4();
          if (!v97 || (v97 & 7) != 0) {
            goto LABEL_493;
          }
          v98 = *(void (**)(void))(*(void *)v97 + 200LL);
        }

        else
        {
          if (strcmp(string, "IAPAudioStopPlaybackForTransport"))
          {
            if (!strcmp(string, "IAPAudioStartRecordingForTransport"))
            {
              xpc_object_t v102 = xpc_dictionary_create_reply((xpc_object_t)v2);
              if (!v102)
              {
                NSLog(@"ERROR: Client sent kXPCAudioStartRecordingForTransportStr xpc message without a reply context");
                return;
              }

              v66 = v102;
              unsigned int v103 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
              if (v103 <= 3)
              {
                if (v103 != 1) {
                  goto LABEL_131;
                }
                if (!sub_10002645C())
                {
                  NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  751LL);
                  goto LABEL_131;
                }

                uint64_t v104 = sub_1000C60C4();
                if (!v104 || (v104 & 7) != 0) {
                  goto LABEL_493;
                }
                v105 = *(void (**)(void))(*(void *)v104 + 184LL);
LABEL_209:
                v105();
                goto LABEL_131;
              }
            }

            else
            {
              if (strcmp(string, "IAPAudioStopRecordingForTransport"))
              {
                if (!strcmp(string, "IAPDigitalAudioCopySupportSampleRates"))
                {
                  xpc_object_t v109 = xpc_dictionary_create_reply((xpc_object_t)v2);
                  if (!v109)
                  {
                    NSLog(@"ERROR: Client sent kXPCDigitalAudioCopySupportSampleRatesStr xpc message without a reply context");
                    return;
                  }

                  uint64_t v31 = v109;
                  uint64_t v110 = sub_100018224();
                  if (!v110) {
                    goto LABEL_493;
                  }
                  if ((v110 & 7) != 0) {
                    goto LABEL_493;
                  }
                  uint64_t v111 = sub_10001864C(v110);
                  uint64_t v112 = sub_1000C06AC();
                  if (!v112 || (v112 & 7) != 0) {
                    goto LABEL_493;
                  }
                  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v112 + 136LL))(v112, v111))
                  {
                    *(_DWORD *)v329 = 0;
                    uint64_t v113 = sub_1000C06AC();
                    if (!v113 || (v113 & 7) != 0) {
                      goto LABEL_493;
                    }
                    v114 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(void *)v113 + 120LL))( v113,  v111,  v329);
                    if (v114) {
                      BOOL v115 = *(unsigned int *)v329 == 0LL;
                    }
                    else {
                      BOOL v115 = 1;
                    }
                    BOOL v116 = !v115;
                    if (v115)
                    {
                      v117 = 0LL;
                    }

                    else
                    {
                      v117 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v114,  4LL * *(unsigned int *)v329);
                      operator delete[](v114);
                    }
                  }

                  else
                  {
                    v117 = 0LL;
                    BOOL v116 = 0;
                  }

                  if (v111)
                  {
                    if ((v111 & 7) != 0) {
                      goto LABEL_493;
                    }
                    uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)v111 + 56LL))(v111);
                    uint64_t v143 = (*(uint64_t (**)(uint64_t))(*(void *)v111 + 64LL))(v111);
                  }

                  else
                  {
                    uint64_t v142 = 0xFFFFFFFFLL;
                    uint64_t v143 = 0xFFFFFFFFLL;
                  }

                  NSLog( @"IAPDigitalAudioCopySupportSampleRates transport(%d/%d) retVal=%d data=%@",  v142,  v143,  v116,  v117);
                  xpc_dictionary_set_BOOL(v31, "result", v116);
                  if (v117)
                  {
                    id v144 = -[NSData bytes](v117, "bytes");
                    if (!v144) {
                      goto LABEL_566;
                    }
                    xpc_dictionary_set_data(v31, "sampleRates", v144, -[NSData length](v117, "length"));
                  }

                  v85 = *(_xpc_connection_s **)(a1 + 32);
                  if (!v85) {
                    goto LABEL_566;
                  }
                  goto LABEL_378;
                }

                if (strcmp(string, "IAPDigitalAudioCurrentSampleRate"))
                {
                  if (!strcmp(string, "IAPDigitalAudioSetSampleRate"))
                  {
                    xpc_object_t v125 = xpc_dictionary_create_reply((xpc_object_t)v2);
                    if (!v125)
                    {
                      NSLog(@"ERROR: Client sent kXPCDigitalAudioSetSampleRateStr xpc message without a reply context");
                      return;
                    }

                    v66 = v125;
                    uint64_t v126 = xpc_dictionary_get_uint64((xpc_object_t)v2, "inputRate");
                    uint64_t v127 = sub_100018224();
                    if (!v127 || (v127 & 7) != 0) {
                      goto LABEL_493;
                    }
                    uint64_t v128 = sub_10001864C(v127);
                    uint64_t v129 = v128;
                    if (v128)
                    {
                      if ((v128 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v130 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 56LL))(v128);
                      uint64_t v131 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 64LL))(v129);
                    }

                    else
                    {
                      uint64_t v130 = 0xFFFFFFFFLL;
                      uint64_t v131 = 0xFFFFFFFFLL;
                    }

                    NSLog(@"IAPDigitalAudioSetSampleRate transport(%d/%d) inputRate=%u", v130, v131, v126);
                    uint64_t v162 = sub_1000C06AC();
                    if (!v162 || (v162 & 7) != 0) {
                      goto LABEL_493;
                    }
                    unsigned int v163 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v162 + 136LL))(v162, v129);
                    if (v163)
                    {
                      uint64_t v164 = sub_1000C06AC();
                      if (!v164 || (v164 & 7) != 0) {
                        goto LABEL_493;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v164 + 88LL))(v164, v129, v126);
                    }

                    if (v129)
                    {
                      if ((v129 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v165 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 56LL))(v129);
                      uint64_t v166 = (*(uint64_t (**)(uint64_t))(*(void *)v129 + 64LL))(v129);
                    }

                    else
                    {
                      uint64_t v165 = 0xFFFFFFFFLL;
                      uint64_t v166 = 0xFFFFFFFFLL;
                    }

                    NSLog( @"IAPDigitalAudioSetSampleRate transport(%d/%d) retVal=%d inputRate=%u",  v165,  v166,  v163,  v126);
                  }

                  else
                  {
                    if (!strcmp(string, "IAPDigitalAudioSupportedSampleRate"))
                    {
                      xpc_object_t v132 = xpc_dictionary_create_reply((xpc_object_t)v2);
                      if (!v132)
                      {
                        NSLog(@"ERROR: Client sent kXPCDigitalAudioSupportedSampleRateStr xpc message without a reply context");
                        return;
                      }

                      v66 = v132;
                      uint64_t v133 = xpc_dictionary_get_uint64((xpc_object_t)v2, "inputRate");
                      uint64_t v134 = sub_100018224();
                      if (!v134) {
                        goto LABEL_493;
                      }
                      if ((v134 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v135 = sub_10001864C(v134);
                      uint64_t v136 = sub_1000C06AC();
                      if (!v136 || (v136 & 7) != 0) {
                        goto LABEL_493;
                      }
                      unsigned int v137 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v136 + 136LL))(v136, v135);
                      if (v137)
                      {
                        uint64_t v138 = sub_1000C06AC();
                        if (!v138 || (v138 & 7) != 0) {
                          goto LABEL_493;
                        }
                        uint64_t v139 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v138 + 112LL))( v138,  v135,  v133);
                      }

                      else
                      {
                        uint64_t v139 = 0LL;
                      }

                      if (v135)
                      {
                        if ((v135 & 7) != 0) {
                          goto LABEL_493;
                        }
                        uint64_t v167 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 56LL))(v135);
                        uint64_t v168 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 64LL))(v135);
                      }

                      else
                      {
                        uint64_t v167 = 0xFFFFFFFFLL;
                        uint64_t v168 = 0xFFFFFFFFLL;
                      }

                      NSLog( @"IAPDigitalAudioSupportedSampleRate transport(%d/%d) retVal=%d inputRate=%u outputRate=%u",  v167,  v168,  v137,  v133,  v139);
                      xpc_dictionary_set_BOOL(v66, "result", v137);
                      xpc_dictionary_set_uint64(v66, "outputRate", v139);
                      goto LABEL_192;
                    }

                    if (strcmp(string, "IAPDigitalAudioSetVolumeOffset"))
                    {
                      if (strcmp(string, "IAPDigitalAudioGetVideoDelay"))
                      {
                        if (!strcmp(string, "OwnsConnectionID"))
                        {
                          xpc_object_t v169 = xpc_dictionary_create_reply((xpc_object_t)v2);
                          if (!v169)
                          {
                            NSLog(@"ERROR: Client sent kXPCOwnsConnectionIDStr xpc message without a reply context");
                            return;
                          }

                          v66 = v169;
                          uint64_t v170 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                          uint64_t v171 = sub_1000BE638();
                          if (!v171 || (v171 & 7) != 0) {
                            goto LABEL_493;
                          }
                          uint64_t v172 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v171 + 96LL))(v171, v170);
                          if (!v172) {
                            goto LABEL_348;
                          }
                          uint64_t v173 = v172;
                          sub_1000BE638();
                          if ((v173 & 7) != 0) {
                            goto LABEL_493;
                          }
                          int v174 = (*(uint64_t (**)(uint64_t))(*(void *)v173 + 40LL))(v173);
                          uint64_t v175 = sub_1000BF55C(v174);
                          if (v175) {
                            char v70 = sub_100056728(v175);
                          }
                          else {
LABEL_348:
                          }
                            char v70 = 0;
                          v68 = "result";
                          v69 = v66;
                          goto LABEL_132;
                        }

                        if (!strcmp(string, "IAPLocationActivate"))
                        {
                          objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "setFakedLocationDeviceEnabled:forClientID:",  1,  xpc_dictionary_get_uint64((xpc_object_t)v2, "clientID"));
                          return;
                        }

                        if (strcmp(string, "IAPLocationDeactivate"))
                        {
                          if (strcmp(string, "IAPLocationIsNMEADataAvailable"))
                          {
                            if (!strcmp(string, "IAPLocationCopyNMEAData"))
                            {
                              xpc_object_t v185 = xpc_dictionary_create_reply((xpc_object_t)v2);
                              if (!v185)
                              {
                                NSLog(@"ERROR: Client sent kXPCLocationCopyNMEADataStr xpc message without a reply context");
                                return;
                              }

                              uint64_t v31 = v185;
                              memset(&v329[1], 170, 0x3FFuLL);
                              v329[0] = 0;
                              uint64_t v186 = sub_10001439C();
                              if (!v186 || (v186 & 7) != 0) {
                                goto LABEL_493;
                              }
                              v187 = (const __CFString *)sub_100014C68((NSString *)v186);
                              if (v187)
                              {
                                v188 = (__CFString *)v187;
                                CFStringGetCString(v187, v329, 1024LL, 0x8000100u);
                              }

                              xpc_dictionary_set_BOOL(v31, "result", 1);
                              xpc_dictionary_set_string(v31, "sentence", v329);
                              v85 = *(_xpc_connection_s **)(a1 + 32);
                              if (!v85) {
                                goto LABEL_566;
                              }
                            }

                            else
                            {
                              if (!strcmp(string, "IAPLocationSendEphemeris"))
                              {
                                xpc_object_t v189 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                if (!v189)
                                {
                                  NSLog(@"ERROR: Client sent kXPCLocationSendEphemerisStr xpc message without a reply context");
                                  return;
                                }

                                v190 = v189;
                                size_t length = 0LL;
                                uint64_t v191 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                data = xpc_dictionary_get_data((xpc_object_t)v2, "ephemerisData", &length);
                                uint64_t v193 = sub_1000C3B18(v191, 0LL);
                                if (v193)
                                {
                                  if (data && length)
                                  {
                                    v194 = objc_alloc(&OBJC_CLASS___NSData);
                                    v195 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( v194,  "initWithBytesNoCopy:length:freeWhenDone:",  data,  length,  0LL);
                                    id v196 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v195,  0LL,  0LL,  0LL);
                                    *(void *)v329 = 0xAAAAAAAAAAAAAAAALL;
                                    *(void *)&v329[8] = [v196 bytes];
                                    *(_DWORD *)v329 = [v196 length];
                                    if ((v193 & 7) != 0) {
                                      goto LABEL_493;
                                    }
                                    (*(void (**)(uint64_t, _BYTE *))(*(void *)v193 + 368LL))(v193, v329);
                                  }

                                  else
                                  {
                                    NSLog( @"ERROR - %s:%s - %d no ephemeris data",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1125LL);
                                  }
                                }

                                else
                                {
                                  NSLog( @"ERROR - %s:%s - %d couldn't find location accessory for connectionID %du",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1128LL,  v191);
                                }

                                xpc_dictionary_set_BOOL(v190, "result", 1);
                                v206 = *(_xpc_connection_s **)(a1 + 32);
                                if (v206)
                                {
                                  xpc_connection_send_message(v206, v190);
                                  xpc_release(v190);
                                  return;
                                }

                                goto LABEL_566;
                              }

                              if (strcmp(string, "IAPLocationCopyEphemerisURL"))
                              {
                                if (!strcmp(string, "IAPLocationGetEphemerisMaxInterval"))
                                {
                                  xpc_object_t v201 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                  if (!v201)
                                  {
                                    NSLog(&CFSTR("ERROR: Client sent kXPCLocationGetEphemerisMaxIntervalStr xpc message without"
                                                 " a reply context").isa);
                                    return;
                                  }

                                  uint64_t v23 = v201;
                                  uint64_t v202 = sub_10001439C();
                                  if (!v202 || (v202 & 7) != 0) {
                                    goto LABEL_493;
                                  }
                                  uint64_t v203 = *(unsigned int *)(v202 + 64);
                                  xpc_dictionary_set_BOOL(v23, "result", 1);
                                  v153 = "maxInterval";
                                }

                                else
                                {
                                  if (strcmp(string, "IAPLocationGetEphemerisRecommendedRefreshInterval"))
                                  {
                                    if (strcmp(string, "IAPLocationIsNMEAFilteringSupported"))
                                    {
                                      if (strcmp(string, "IAPLocationSendGPSTime"))
                                      {
                                        if (strcmp(string, "IAPLocationSendEphemerisPointData"))
                                        {
                                          if (strcmp(string, "IAPLocationSetAccessoryNMEAFilter"))
                                          {
                                            if (strcmp(string, "IAPCheckIn"))
                                            {
                                              if (strcmp(string, "IAPAppProcessIDIsUsingAccessory"))
                                              {
                                                if (strcmp(string, "IAPBluetoothDeviceMode"))
                                                {
                                                  if (!strcmp(string, "IAPDigitalIDState"))
                                                  {
                                                    *(void *)v329 = 0LL;
                                                    xpc_dictionary_get_data( (xpc_object_t)v2,  "IAPDigitalIDData",  (size_t *)v329);
                                                    return;
                                                  }

                                                  if (strcmp(string, "IAPAppAccessibilityResponse"))
                                                  {
                                                    if (strcmp(string, "IAPAppAuthCertForConnectionIDStr"))
                                                    {
                                                      if (strcmp(string, "kXPCIAPAppSendDisplayPortStatus"))
                                                      {
                                                        if (!strcmp(string, "IAPAppRegisterClient"))
                                                        {
                                                          xpc_object_t v262 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                          if (!v262)
                                                          {
                                                            NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppRegisterClientStr xpc me"
                                                                         "ssage without a reply context").isa);
                                                            return;
                                                          }

                                                          v263 = v262;
                                                          v264 = objc_autoreleasePoolPush();
                                                          v265 = xpc_dictionary_get_string( (xpc_object_t)v2,  "eaClientBundleID");
                                                          if (v265 && *v265) {
                                                            v266 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v265);
                                                          }
                                                          else {
                                                            v266 = 0LL;
                                                          }
                                                          uint64_t v279 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaClientCapabilities");
                                                          uint64_t v280 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaClientID");
                                                          size_t length = 0LL;
                                                          v281 = xpc_dictionary_get_data( (xpc_object_t)v2,  "eaClientSupportedProtocols",  &length);
                                                          BOOL v282 = xpc_dictionary_get_BOOL( (xpc_object_t)v2,  "eaClientHasCheckedForConnectedAccessories");
                                                          id v283 = 0LL;
                                                          if (v281 && length)
                                                          {
                                                            v284 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v281);
                                                            if (v284)
                                                            {
                                                              *(void *)v329 = 0LL;
                                                              id v283 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v284,  0LL,  0LL,  v329);
                                                            }

                                                            else
                                                            {
                                                              id v283 = 0LL;
                                                            }
                                                          }

                                                          *(void *)&__int128 v291 = 0xAAAAAAAAAAAAAAAALL;
                                                          *((void *)&v291 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                          *(_OWORD *)v329 = v291;
                                                          *(_OWORD *)&v329[16] = v291;
                                                          xpc_dictionary_get_audit_token(v2, v329);
                                                          id v292 = +[EAManager sharedManager]( &OBJC_CLASS___EAManager,  "sharedManager");
                                                          v323[0] = *(_OWORD *)v329;
                                                          v323[1] = *(_OWORD *)&v329[16];
                                                          xpc_dictionary_set_uint64( v263,  "eaClientID",  [v292 addClient:v279 withAuditToken:v323 currentClientID:v280 xpc Connection:*(void *)(a1 + 32) eaProtocols:v283 notifyOfAlreadyConnec tedAccessories:v282 andBundleId:v266]);
                                                          v293 = *(_xpc_connection_s **)(a1 + 32);
                                                          if (v293)
                                                          {
                                                            xpc_connection_send_message(v293, v263);
                                                            xpc_release(v263);
                                                            objc_autoreleasePoolPop(v264);
                                                            return;
                                                          }

                                                          goto LABEL_566;
                                                        }

                                                        if (!strcmp(string, "IAPAppOpenSessionFromAppToAccessory"))
                                                        {
                                                          xpc_object_t v268 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                          if (!v268)
                                                          {
                                                            NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppOpenSessionFromAppToAcce"
                                                                         "ssoryStr xpc message without a reply context").isa);
                                                            return;
                                                          }

                                                          id v16 = v268;
                                                          v314 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                                          uint64_t v13 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "connectionID");
                                                          uint64_t v2 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaSessionID");
                                                          id v269 = +[EAManager sharedManager]( &OBJC_CLASS___EAManager,  "sharedManager");
                                                          if (!WORD1(v2))
                                                          {
                                                            id v270 = [v269 sessionForAccessoryWithConnectionID:v13 andSessionID:(unsigned __int16)v2];
                                                            if (!v270)
                                                            {
LABEL_529:
                                                              NSLog( @"ERROR - %s:%s - %d couldn't create session for connecti onID=0x%x and sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1607LL,  v13,  v2);
LABEL_553:
                                                              unsigned __int8 v271 = 0;
                                                              goto LABEL_554;
                                                            }

                                                            unsigned __int8 v271 = [v270 openPipeFromApp];
LABEL_554:
                                                            v290 = "openWasSuccessful";
LABEL_555:
                                                            xpc_dictionary_set_BOOL(v16, v290, v271);
                                                            v309 = *(_xpc_connection_s **)(a1 + 32);
                                                            if (v309)
                                                            {
                                                              xpc_connection_send_message(v309, v16);
                                                              xpc_release(v16);

                                                              return;
                                                            }

                                                            goto LABEL_566;
                                                          }
                                                        }

                                                        else
                                                        {
                                                          if (!strcmp(string, "IAPAppCreateSessionForAccessory"))
                                                          {
                                                            xpc_object_t v272 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                            if (!v272)
                                                            {
                                                              NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppCreateSessionForAccess"
                                                                           "oryStr xpc message without a reply context").isa);
                                                              return;
                                                            }

                                                            v273 = v272;
                                                            v274 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                                            uint64_t v275 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "connectionID");
                                                            unsigned __int8 v276 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaProtocolID");
                                                            uint64_t v277 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaClientID");
                                                            if (objc_msgSend( +[EAManager sharedManager]( EAManager,  "sharedManager"),  "accessoryForConnectionID:",  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  v275)))
                                                            {
                                                              *(_WORD *)v329 = 0;
                                                              if (objc_msgSend( +[EAManager sharedManager]( EAManager,  "sharedManager"),  "openSessionForClientID:connetionID:pr otocolID:sessionID:",  v277,  v275,  v276,  v329)) {
                                                                uint64_t v278 = *(unsigned __int16 *)v329;
                                                              }
                                                              else {
                                                                uint64_t v278 = 0x10000LL;
                                                              }
                                                            }

                                                            else
                                                            {
                                                              NSLog( @"ERROR - %s:%s - %d can't find accessory with connectionID=%d.",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1642LL,  v275);
                                                              uint64_t v278 = 0x10000LL;
                                                            }

                                                            xpc_dictionary_set_uint64(v273, "eaSessionID", v278);
                                                            v308 = *(_xpc_connection_s **)(a1 + 32);
                                                            if (v308)
                                                            {
                                                              xpc_connection_send_message(v308, v273);
                                                              xpc_release(v273);

                                                              return;
                                                            }

                                                            goto LABEL_566;
                                                          }

                                                          if (strcmp(string, "IAPAppOpenSessionFromAccessoryToApp"))
                                                          {
                                                            if (strcmp(string, "IAPAppCloseSessionToAccessory"))
                                                            {
                                                              if (!strcmp(string, "IAPAppConnectedAccessories"))
                                                              {
                                                                xpc_object_t v294 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                                if (!v294)
                                                                {
                                                                  NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppConnectedAccessori"
                                                                               "esStr xpc message without a reply context").isa);
                                                                  return;
                                                                }

                                                                v295 = v294;
                                                                v296 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                                                id v297 = objc_msgSend( +[EAManager sharedManager]( EAManager,  "sharedManager"),  "connectedAccessoriesForEAClient:",  xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaClientID"));
                                                                if (v297)
                                                                {
                                                                  v298 = v297;
                                                                  if ([v297 count])
                                                                  {
                                                                    v299 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                                                                    __int128 v319 = 0u;
                                                                    __int128 v320 = 0u;
                                                                    __int128 v321 = 0u;
                                                                    __int128 v322 = 0u;
                                                                    id v300 = [v298 countByEnumeratingWithState:&v319 objects:v328 count:16];
                                                                    if (v300)
                                                                    {
                                                                      uint64_t v301 = *(void *)v320;
                                                                      do
                                                                      {
                                                                        for (i = 0LL; i != v300; i = (char *)i + 1)
                                                                        {
                                                                          if (*(void *)v320 != v301) {
                                                                            objc_enumerationMutation(v298);
                                                                          }
                                                                          id v303 = +[EAManager newPlistForAccessory:]( &OBJC_CLASS___EAManager,  "newPlistForAccessory:",  *(void *)(*((void *)&v319 + 1)
                                                                                             + 8LL * (void)i));
                                                                          -[NSMutableArray addObject:]( v299,  "addObject:",  v303);
                                                                        }

                                                                        id v300 = [v298 countByEnumeratingWithState:&v319 objects:v328 count:16];
                                                                      }

                                                                      while (v300);
                                                                    }

                                                                    *(void *)v329 = 0LL;
                                                                    v304 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v299,  100LL,  0LL,  v329);
                                                                    v305 = v304;
                                                                    if (v304)
                                                                    {
                                                                      id v306 = -[NSData bytes](v304, "bytes");
                                                                      size_t v307 = -[NSData length]( v305,  "length");
                                                                    }

                                                                    else
                                                                    {
                                                                      NSLog( @"ERROR - %s:%s - %d unable to convert accessorie s array to plist: %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1746,  [*(id *)v329 description]);
                                                                      id v306 = 0LL;
                                                                      size_t v307 = 0LL;
                                                                    }

                                                                    if (v299) {

                                                                    }
                                                                    if (v306) {
                                                                      xpc_dictionary_set_data( v295,  "plistData",  v306,  v307);
                                                                    }
                                                                  }
                                                                }

                                                                v310 = *(_xpc_connection_s **)(a1 + 32);
                                                                if (v310)
                                                                {
                                                                  xpc_connection_send_message(v310, v295);
                                                                  xpc_release(v295);

                                                                  return;
                                                                }

                                                                goto LABEL_566;
                                                              }

                                                              if (!strcmp(string, "kXPCIAPAppSendDebugCommand"))
                                                              {
                                                                xpc_object_t v7 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                                if (!v7)
                                                                {
                                                                  NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppSendDebugCommand x"
                                                                               "pc message that has no reply context").isa);
                                                                  return;
                                                                }

                                                                int v8 = v7;
                                                                int v9 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "kXPCIAPAppDebugCommandType");
                                                                size_t length = 0LL;
                                                                unint64_t v10 = xpc_dictionary_get_data( (xpc_object_t)v2,  "kXPCIAPAppDebugCommandData",  &length);
                                                                size_t v317 = 0LL;
                                                                bytes = 0LL;
                                                                *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
                                                                *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                                *(_OWORD *)v329 = v11;
                                                                *(_OWORD *)&v329[16] = v11;
                                                                xpc_dictionary_get_audit_token(v2, v329);
                                                                v316[0] = *(_OWORD *)v329;
                                                                v316[1] = *(_OWORD *)&v329[16];
                                                                if (sub_100010698(v316))
                                                                {
                                                                  sub_10001079C(v9, (uint64_t)v10, length, &bytes, &v317);
                                                                  if (bytes)
                                                                  {
                                                                    xpc_dictionary_set_data( v8,  "kXPCIAPAppDebugCommandData",  bytes,  v317);
                                                                    uint64_t v12 = *(_xpc_connection_s **)(a1 + 32);
                                                                    if (v12)
                                                                    {
                                                                      xpc_connection_send_message(v12, v8);
                                                                      xpc_release(v8);
                                                                      return;
                                                                    }
                                                                  }
                                                                }

                                                                goto LABEL_566;
                                                              }

                                                              return;
                                                            }

                                                            xpc_object_t v288 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                            if (!v288)
                                                            {
                                                              NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppCloseSessionToAccessor"
                                                                           "yStr xpc message without a reply context").isa);
                                                              return;
                                                            }

                                                            id v16 = v288;
                                                            v314 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                                            uint64_t v13 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "connectionID");
                                                            uint64_t v2 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaSessionID");
                                                            id v289 = +[EAManager sharedManager]( &OBJC_CLASS___EAManager,  "sharedManager");
                                                            if ((v2 & 0xFFFF0000) == 0)
                                                            {
                                                              unsigned __int8 v271 = [v289 closeSessionForConnectionID:v13 sess ionID:(unsigned __int16)v2 notifyApp:0];
                                                              v290 = "closeWasSuccessful";
                                                              goto LABEL_555;
                                                            }

                                                            goto LABEL_528;
                                                          }

                                                          xpc_object_t v285 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                          if (!v285)
                                                          {
                                                            NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppOpenSessionFromAccessory"
                                                                         "ToAppStr xpc message without a reply context").isa);
                                                            return;
                                                          }

                                                          id v16 = v285;
                                                          v314 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                                          uint64_t v13 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "connectionID");
                                                          uint64_t v2 = xpc_dictionary_get_uint64( (xpc_object_t)v2,  "eaSessionID");
                                                          id v286 = +[EAManager sharedManager]( &OBJC_CLASS___EAManager,  "sharedManager");
                                                          if (!WORD1(v2))
                                                          {
                                                            id v287 = [v286 sessionForAccessoryWithConnectionID:v13 andSessionID:(unsigned __int16)v2];
                                                            if (!v287)
                                                            {
                                                              NSLog( @"ERROR - %s:%s - %d couldn't find session for connection ID=0x%x and sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1678LL,  v13,  v2);
                                                              goto LABEL_553;
                                                            }

                                                            if (([v287 openPipeToApp] & 1) == 0)
                                                            {
                                                              NSLog(@"Error");
                                                              goto LABEL_553;
                                                            }

                                                            unsigned __int8 v271 = 1;
                                                            goto LABEL_554;
                                                          }
                                                        }

LABEL_528:
                                                        __break(0x5507u);
                                                        goto LABEL_529;
                                                      }

                                                      char v252 = xpc_dictionary_get_BOOL( (xpc_object_t)v2,  "kXPCDisplayPortStatus");
                                                      uint64_t v253 = sub_10000CEF8();
                                                      pthread_mutex_lock(&stru_10011B978);
                                                      uint64_t v254 = *(void *)(v253 + 8);
                                                      *(void *)v329 = v254;
                                                      while (v254 != v253)
                                                      {
                                                        uint64_t v255 = *sub_10000D014((uint64_t *)v329);
                                                        if (v255) {
                                                          BOOL v256 = (v255 & 7) == 0;
                                                        }
                                                        else {
                                                          BOOL v256 = 0;
                                                        }
                                                        if (!v256) {
                                                          goto LABEL_493;
                                                        }
                                                        if (sub_100010620(v255))
                                                        {
                                                          uint64_t v257 = *sub_10000D014((uint64_t *)v329);
                                                          if (!v257 || (v257 & 7) != 0) {
                                                            goto LABEL_493;
                                                          }
                                                          uint64_t v258 = *(void *)(v257 + 32);
                                                          BOOL v259 = v258 && (v258 & 7) == 0;
                                                          v260 = (uint64_t *)(v258 + 40);
                                                          if (*v260) {
                                                            sub_100077764(*v260, v252);
                                                          }
                                                        }

                                                        sub_10000D048(v329);
                                                        uint64_t v254 = *(void *)v329;
                                                      }

LABEL_494:
                                                      pthread_mutex_unlock(&stru_10011B978);
                                                      return;
                                                    }

                                                    xpc_object_t v247 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                    if (!v247)
                                                    {
                                                      NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppAuthCertForConnectionIDStr xpc"
                                                                   " message without a reply context").isa);
                                                      return;
                                                    }

                                                    id v16 = v247;
                                                    uint64_t v248 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                                    uint64_t v249 = sub_1000BE638();
                                                    if (v249 && (v249 & 7) == 0)
                                                    {
                                                      uint64_t v250 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v249 + 96LL))( v249,  v248);
                                                      *(void *)v329 = 0LL;
                                                      if (!v250) {
                                                        goto LABEL_566;
                                                      }
                                                      if ((v250 & 7) == 0)
                                                      {
                                                        v251 = (const void *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v250 + 144LL))( v250,  v329);
                                                        if (v251)
                                                        {
                                                          xpc_dictionary_set_data( v16,  "kXPCIAPAppAuthCertDataStr",  v251,  *(size_t *)v329);
                                                          v227 = *(_xpc_connection_s **)(a1 + 32);
                                                          if (v227) {
                                                            goto LABEL_471;
                                                          }
                                                        }

LABEL_566:
                                                        __break(0x5510u);
                                                        goto LABEL_567;
                                                      }
                                                    }

LABEL_493:
                                                    __break(0x5516u);
                                                    goto LABEL_494;
                                                  }

LABEL_453:
                                                  xpc_object_t v239 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                  if (!v239)
                                                  {
                                                    NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppAccessibilityResponseStr xpc mes"
                                                                 "sage without a reply context").isa);
                                                    return;
                                                  }

                                                  v240 = v239;
                                                  v241 = objc_autoreleasePoolPush();
                                                  uint64_t v242 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                                  *(void *)v329 = 0xAAAAAAAAAAAAAAAALL;
                                                  v243 = xpc_dictionary_get_data( (xpc_object_t)v2,  "userInfo",  (size_t *)v329);
                                                  size_t length = 0LL;
                                                  id v244 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v243,  *(void *)v329),  0LL,  0LL,  &length);
                                                  if (v244)
                                                  {
                                                    uint64_t v245 = sub_100019C6C();
                                                    if (!v245 || (v245 & 7) != 0) {
                                                      goto LABEL_493;
                                                    }
                                                    sub_10001A7CC(v245, v242, v244);
                                                  }

                                                  else
                                                  {
                                                    NSLog( @"ERROR - received bogus userInfo from server with the following error: %@",  [(id)length description]);
                                                  }

                                                  xpc_dictionary_set_BOOL(v240, "sendWasSuccessful", v244 != 0LL);
                                                  v267 = *(_xpc_connection_s **)(a1 + 32);
                                                  if (v267)
                                                  {
                                                    xpc_connection_send_message(v267, v240);
                                                    xpc_release(v240);
                                                    objc_autoreleasePoolPop(v241);
                                                    return;
                                                  }

                                                  goto LABEL_566;
                                                }

                                                xpc_object_t v231 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                                if (!v231)
                                                {
                                                  NSLog(&CFSTR("ERROR: Client sent kXPCIAPBluetoothDeviceModeStr xpc message wi"
                                                               "thout a reply context").isa);
                                                  return;
                                                }

                                                v232 = v231;
                                                NSLog( @"%s:%s-%d IAPBluetoothDeviceMode\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1408LL);
                                                v233 = objc_autoreleasePoolPush();
                                                *(void *)v329 = 0xAAAAAAAAAAAAAAAALL;
                                                v234 = xpc_dictionary_get_data( (xpc_object_t)v2,  "MACAddress",  (size_t *)v329);
                                                if (v234 && *(void *)v329 == 6LL)
                                                {
                                                  v235 = -[NSData bytes]( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v234,  6LL),  "bytes");
                                                  uint64_t v236 = sub_10004783C();
                                                  if (!v236 || (v236 & 7) != 0) {
                                                    goto LABEL_493;
                                                  }
                                                  int v237 = *(_DWORD *)v235;
                                                  __int16 v325 = v235[2];
                                                  int v324 = v237;
                                                  unsigned int v238 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v236 + 696LL))( v236,  &v324);
                                                  if (v238 > 3) {
                                                    goto LABEL_448;
                                                  }
                                                }

                                                else
                                                {
                                                  NSLog(@"ERROR - error handling bluetooth device mode response");
                                                  unsigned int v238 = 0;
                                                }

                                                xpc_dictionary_set_uint64(v232, "result", v238);
                                                v246 = *(_xpc_connection_s **)(a1 + 32);
                                                if (v246)
                                                {
                                                  xpc_connection_send_message(v246, v232);
                                                  xpc_release(v232);
                                                  objc_autoreleasePoolPop(v233);
                                                  return;
                                                }

                                                goto LABEL_566;
                                              }

                                              xpc_object_t v228 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                              if (!v228)
                                              {
                                                NSLog(&CFSTR("ERROR: Client sent kXPCIAPAppProcessIDIsUsingAccessoryStr xpc mes"
                                                             "sage without a reply context").isa);
                                                return;
                                              }

                                              v66 = v228;
                                              v229 = xpc_dictionary_get_string((xpc_object_t)v2, "displayIdentifier");
                                              if (v229)
                                              {
                                                v230 = v229;
                                                LODWORD(v92) = objc_msgSend( +[EAManager sharedManager]( EAManager,  "sharedManager"),  "sessionsOpenForDisplayIdentifer:",  v229);
                                                NSLog( @"%s:%s-%d appApproved for %s = %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1391LL,  v230,  v92);
                                              }

                                              else
                                              {
                                                LOBYTE(v92) = 0;
                                              }

                                              v68 = "processAllowedByIAPD";
                                              goto LABEL_214;
                                            }

                                            xpc_object_t v26 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                            if (!v26)
                                            {
LABEL_449:
                                              NSLog(@"ERROR: Client sent kXPCIAPCheckInStr xpc message without a reply context");
                                              return;
                                            }

                                            uint64_t v23 = v26;
                                            uint64_t v25 = "result";
                                            BOOL v24 = 1;
                                            goto LABEL_74;
                                          }

                                          xpc_object_t v220 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                          if (!v220)
                                          {
                                            NSLog(&CFSTR("ERROR: Client sent kXPCLocationSetAccessoryNMEAFilterStr xpc message "
                                                         "without a reply context").isa);
                                            return;
                                          }

                                          id v16 = v220;
                                          *(void *)v329 = 0LL;
                                          uint64_t v221 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                          v222 = (NSData *)xpc_dictionary_get_data( (xpc_object_t)v2,  "nmeaFilter",  (size_t *)v329);
                                          v223 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
                                          v225 = +[NSMutableArray arrayWithObject:]( &OBJC_CLASS___NSMutableArray,  "arrayWithObject:",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  v221));
                                          if (v222)
                                          {
                                            v226 = objc_alloc(&OBJC_CLASS___NSData);
                                            v222 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( v226,  "initWithBytesNoCopy:length:freeWhenDone:",  v222,  *(void *)v329,  0LL);
                                            if (v222)
                                            {
                                              id v224 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v222,  0LL,  0LL,  0LL);
                                              if (v224) {
                                                -[NSMutableArray addObjectsFromArray:]( v225,  "addObjectsFromArray:",  v224);
                                              }
                                            }
                                          }

                                          objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager", v224),  "performSelectorOnMainThread:withObject:waitUntilDone:",  "fakedLocationDeviceSetFilter:",  v225,  0);

                                          xpc_dictionary_set_BOOL(v16, "result", 1);
                                          v227 = *(_xpc_connection_s **)(a1 + 32);
                                          if (!v227) {
                                            goto LABEL_566;
                                          }
LABEL_471:
                                          xpc_connection_send_message(v227, v16);
                                          xpc_release(v16);
                                          return;
                                        }

                                        xpc_object_t v213 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                        if (!v213)
                                        {
                                          NSLog(&CFSTR("ERROR: Client sent kXPCLocationSendEphemerisPointDataStr xpc message wi"
                                                       "thout a reply context").isa);
                                          return;
                                        }

                                        id v16 = v213;
                                        uint64_t v214 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                        uint64_t v13 = xpc_dictionary_get_uint64((xpc_object_t)v2, "gpsWeek");
                                        double v215 = xpc_dictionary_get_double((xpc_object_t)v2, "gpsTOWInSeconds");
                                        double v216 = xpc_dictionary_get_double((xpc_object_t)v2, "latitude");
                                        double v217 = xpc_dictionary_get_double((xpc_object_t)v2, "longitude");
                                        uint64_t v218 = xpc_dictionary_get_uint64((xpc_object_t)v2, "accuracyInMeters");
                                        if (v218 >> 16) {
                                          goto LABEL_528;
                                        }
                                        uint64_t v2 = v218;
                                        uint64_t v219 = sub_1000C3B18(v214, 0LL);
                                        if (!v219)
                                        {
                                          NSLog( @"ERROR - %s:%s - %d couldn't find location accessory for connectionID %du",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1309LL,  v214);
LABEL_440:
                                          xpc_dictionary_set_BOOL(v16, "result", 1);
                                          v227 = *(_xpc_connection_s **)(a1 + 32);
                                          if (!v227) {
                                            goto LABEL_566;
                                          }
                                          goto LABEL_471;
                                        }

                                        *(_OWORD *)v329 = xmmword_1000DA9A8;
                                        *(_OWORD *)&v329[16] = unk_1000DA9B8;
                                        if ((v13 & 0xFFFF0000) != 0) {
                                          goto LABEL_528;
                                        }
                                        if (v215 > -2147483650.0 && v215 < 2147483650.0)
                                        {
                                          if (1000LL * (int)v215 == 1000 * (int)v215)
                                          {
                                            *(void *)v329 = (unsigned __int16)v13 | (unint64_t)(0x3E800000000LL * (int)v215) | 0xAAAA0000;
                                            *(double *)&v329[8] = v216;
                                            *(double *)&v329[16] = v217;
                                            *(_WORD *)&v329[24] = v2;
                                            if ((v219 & 7) != 0) {
                                              goto LABEL_493;
                                            }
                                            (*(void (**)(uint64_t, _BYTE *))(*(void *)v219 + 344LL))( v219,  v329);
                                            goto LABEL_440;
                                          }

LABEL_567:
                                          __break(0x550Cu);
                                          return;
                                        }

LABEL_452:
                                        __break(0x5505u);
                                        goto LABEL_453;
                                      }

                                      xpc_object_t v209 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                      if (!v209)
                                      {
                                        NSLog(@"ERROR: Client sent kXPCLocationSendGPSTimeStr xpc message without a reply context");
                                        return;
                                      }

                                      id v16 = v209;
                                      uint64_t v210 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                      uint64_t v13 = xpc_dictionary_get_uint64((xpc_object_t)v2, "gpsWeek");
                                      double v211 = xpc_dictionary_get_double((xpc_object_t)v2, "gpsTOWInSeconds");
                                      uint64_t v212 = sub_1000C3B18(v210, 0LL);
                                      if (v212)
                                      {
                                        *(void *)v329 = 0xAAAAAAAAAAAAAAAALL;
                                        if ((v13 & 0xFFFF0000) != 0) {
                                          goto LABEL_528;
                                        }
                                        *(_WORD *)v329 = v13;
                                        if (v211 <= -2147483650.0 || v211 >= 2147483650.0) {
                                          goto LABEL_452;
                                        }
                                        *(_DWORD *)&v329[4] = 1000 * (int)v211;
                                        if ((v212 & 7) != 0) {
                                          goto LABEL_493;
                                        }
                                        (*(void (**)(uint64_t, _BYTE *))(*(void *)v212 + 448LL))(v212, v329);
                                      }

                                      else
                                      {
                                        NSLog( @"ERROR - %s:%s - %d couldn't find location accessory for connectionID %du",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  1268LL,  v210);
                                      }

                                      xpc_dictionary_set_BOOL(v16, "result", 1);
                                      v227 = *(_xpc_connection_s **)(a1 + 32);
                                      if (!v227) {
                                        goto LABEL_566;
                                      }
                                      goto LABEL_471;
                                    }

                                    xpc_object_t v207 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                    if (!v207)
                                    {
                                      NSLog(&CFSTR("ERROR: Client sent kXPCLocationIsNMEAFilteringSupportedStr xpc message with"
                                                   "out a reply context").isa);
                                      return;
                                    }

                                    v66 = v207;
                                    uint64_t v92 = xpc_dictionary_get_uint64((xpc_object_t)v2, "connectionID");
                                    uint64_t v208 = sub_1000C3B18(v92, 0LL);
                                    if (v208)
                                    {
                                      if ((v208 & 7) != 0) {
                                        goto LABEL_493;
                                      }
                                      LOBYTE(v92) = (*(uint64_t (**)(uint64_t))(*(void *)v208 + 176LL))(v208);
                                    }

                                    else
                                    {
                                      NSLog(@"location accessory with connectionID %du not found", v92);
                                      LOBYTE(v92) = 0;
                                    }

                                    xpc_dictionary_set_BOOL(v66, "result", 1);
                                    v68 = "isNMEAFilteringSupported";
LABEL_214:
                                    v69 = v66;
                                    char v70 = v92;
                                    goto LABEL_132;
                                  }

                                  xpc_object_t v204 = xpc_dictionary_create_reply((xpc_object_t)v2);
                                  if (!v204)
                                  {
                                    NSLog(&CFSTR("ERROR: Client sent kXPCLocationGetEphemerisRecommendedRefreshIntervalStr xpc "
                                                 "message without a reply context").isa);
                                    return;
                                  }

                                  uint64_t v23 = v204;
                                  uint64_t v205 = sub_10001439C();
                                  if (!v205 || (v205 & 7) != 0) {
                                    goto LABEL_493;
                                  }
                                  uint64_t v203 = *(unsigned int *)(v205 + 68);
                                  xpc_dictionary_set_BOOL(v23, "result", 1);
                                  v153 = "refreshInterval";
                                }

                                v154 = v23;
                                uint64_t v152 = v203;
LABEL_290:
                                xpc_dictionary_set_uint64(v154, v153, v152);
                                goto LABEL_75;
                              }

                              xpc_object_t v197 = xpc_dictionary_create_reply((xpc_object_t)v2);
                              if (!v197)
                              {
                                NSLog(@"ERROR: Client sent kXPCLocationCopyEphemerisURLStr xpc message without a reply context");
                                return;
                              }

                              uint64_t v31 = v197;
                              memset(&v329[1], 170, 0x3FFuLL);
                              v329[0] = 0;
                              uint64_t v198 = sub_10001439C();
                              if (!v198 || (v198 & 7) != 0) {
                                goto LABEL_493;
                              }
                              v199 = (const __CFString *)sub_100014CE8((id *)v198);
                              if (v199)
                              {
                                v200 = (__CFString *)v199;
                                CFStringGetCString(v199, v329, 1024LL, 0x8000100u);
                              }

                              xpc_dictionary_set_BOOL(v31, "result", 1);
                              xpc_dictionary_set_string(v31, "urlString", v329);
                              v85 = *(_xpc_connection_s **)(a1 + 32);
                              if (!v85) {
                                goto LABEL_566;
                              }
                            }

LABEL_378:
                            xpc_connection_send_message(v85, v31);
                            xpc_release(v31);
                            return;
                          }

                          xpc_object_t v183 = xpc_dictionary_create_reply((xpc_object_t)v2);
                          if (!v183)
                          {
                            NSLog(@"ERROR: Client sent kXPCLocationIsNMEADataAvailableStr xpc message without a reply context");
                            return;
                          }

                          uint64_t v23 = v183;
                          xpc_dictionary_set_BOOL(v183, "result", 1);
                          uint64_t v184 = sub_10001439C();
                          if (!v184 || (v184 & 7) != 0) {
                            goto LABEL_493;
                          }
                          BOOL v24 = sub_100014C18(v184);
                          uint64_t v25 = "isAvailable";
                          goto LABEL_73;
                        }

                        xpc_object_t v182 = xpc_dictionary_create_reply((xpc_object_t)v2);
                        if (!v182)
                        {
                          NSLog(@"ERROR: Client sent kXPCLocationDeactivateStr xpc message without a reply context");
                          return;
                        }

                        v66 = v182;
                        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "setFakedLocationDeviceEnabled:forClientID:",  0,  xpc_dictionary_get_uint64((xpc_object_t)v2, "clientID"));
LABEL_131:
                        v68 = "result";
                        v69 = v66;
                        char v70 = 1;
LABEL_132:
                        xpc_dictionary_set_BOOL(v69, v68, v70);
LABEL_192:
                        v101 = *(_xpc_connection_s **)(a1 + 32);
                        if (!v101) {
                          goto LABEL_566;
                        }
                        xpc_connection_send_message(v101, v66);
                        unsigned int v28 = v66;
                        goto LABEL_194;
                      }

                      xpc_object_t v155 = xpc_dictionary_create_reply((xpc_object_t)v2);
                      if (!v155)
                      {
                        NSLog(@"ERROR: Client sent kXPCDigitalAudioGetVideoDelayStr xpc message without a reply context");
                        return;
                      }

                      uint64_t v23 = v155;
                      uint64_t v156 = sub_100018224();
                      if (!v156) {
                        goto LABEL_493;
                      }
                      if ((v156 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v157 = sub_10001864C(v156);
                      uint64_t v158 = sub_1000C06AC();
                      if (!v158 || (v158 & 7) != 0) {
                        goto LABEL_493;
                      }
                      unsigned int v159 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v158 + 136LL))(v158, v157);
                      if (v159)
                      {
                        uint64_t v160 = sub_1000C06AC();
                        if (!v160 || (v160 & 7) != 0) {
                          goto LABEL_493;
                        }
                        uint64_t v161 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v160 + 144LL))(v160, v157);
                      }

                      else
                      {
                        uint64_t v161 = 0LL;
                      }

                      if (v157)
                      {
                        if ((v157 & 7) != 0) {
                          goto LABEL_493;
                        }
                        uint64_t v180 = (*(uint64_t (**)(uint64_t))(*(void *)v157 + 56LL))(v157);
                        uint64_t v181 = (*(uint64_t (**)(uint64_t))(*(void *)v157 + 64LL))(v157);
                      }

                      else
                      {
                        uint64_t v180 = 0xFFFFFFFFLL;
                        uint64_t v181 = 0xFFFFFFFFLL;
                      }

                      NSLog( @"IAPDigitalAudioGetVideoDelay transport(%d/%d) retVal=%d videoDelay=%u",  v180,  v181,  v159,  v161);
                      xpc_dictionary_set_BOOL(v23, "result", v159);
                      uint64_t v152 = v161;
                      v153 = "videoDelay";
LABEL_289:
                      v154 = v23;
                      goto LABEL_290;
                    }

                    xpc_object_t v145 = xpc_dictionary_create_reply((xpc_object_t)v2);
                    if (!v145)
                    {
                      NSLog(@"ERROR: Client sent kXPCDigitalAudioSetVolumeOffsetStr xpc message without a reply context");
                      return;
                    }

                    v66 = v145;
                    uint64_t v146 = xpc_dictionary_get_uint64((xpc_object_t)v2, "offset");
                    uint64_t v147 = sub_100018224();
                    if (!v147 || (v147 & 7) != 0) {
                      goto LABEL_493;
                    }
                    uint64_t v148 = sub_10001864C(v147);
                    uint64_t v149 = v148;
                    if (v148)
                    {
                      if ((v148 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v148 + 56LL))(v148);
                      uint64_t v151 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 64LL))(v149);
                    }

                    else
                    {
                      uint64_t v150 = 0xFFFFFFFFLL;
                      uint64_t v151 = 0xFFFFFFFFLL;
                    }

                    NSLog( @"IAPDigitalAudioSetVolumeOffset transport(%d/%d) offset=%u",  v150,  v151,  0LL,  v146);
                    uint64_t v176 = sub_1000C06AC();
                    if (!v176 || (v176 & 7) != 0) {
                      goto LABEL_493;
                    }
                    unsigned int v163 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v176 + 136LL))(v176, v149);
                    if (v163)
                    {
                      uint64_t v177 = sub_1000C06AC();
                      if (!v177 || (v177 & 7) != 0) {
                        goto LABEL_493;
                      }
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v177 + 104LL))(v177, v149, v146);
                    }

                    if (v149)
                    {
                      if ((v149 & 7) != 0) {
                        goto LABEL_493;
                      }
                      uint64_t v178 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 56LL))(v149);
                      uint64_t v179 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 64LL))(v149);
                    }

                    else
                    {
                      uint64_t v178 = 0xFFFFFFFFLL;
                      uint64_t v179 = 0xFFFFFFFFLL;
                    }

                    NSLog( @"IAPDigitalAudioSetVolumeOffset transport(%d/%d) retVal=%d offset=%u",  v178,  v179,  v163,  v146);
                  }

                  v68 = "result";
                  v69 = v66;
                  char v70 = v163;
                  goto LABEL_132;
                }

                xpc_object_t v118 = xpc_dictionary_create_reply((xpc_object_t)v2);
                if (!v118)
                {
                  NSLog(@"ERROR: Client sent kXPCDigitalAudioCurrentSampleRateStr xpc message without a reply context");
                  return;
                }

                uint64_t v23 = v118;
                uint64_t v119 = sub_100018224();
                if (!v119) {
                  goto LABEL_493;
                }
                if ((v119 & 7) != 0) {
                  goto LABEL_493;
                }
                uint64_t v120 = sub_10001864C(v119);
                uint64_t v121 = sub_1000C06AC();
                if (!v121 || (v121 & 7) != 0) {
                  goto LABEL_493;
                }
                unsigned int v122 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v121 + 136LL))(v121, v120);
                if (v122)
                {
                  uint64_t v123 = sub_1000C06AC();
                  if (!v123 || (v123 & 7) != 0) {
                    goto LABEL_493;
                  }
                  uint64_t v124 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v123 + 128LL))(v123, v120);
                }

                else
                {
                  uint64_t v124 = 0LL;
                }

                if (v120)
                {
                  if ((v120 & 7) != 0) {
                    goto LABEL_493;
                  }
                  uint64_t v140 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 56LL))(v120);
                  uint64_t v141 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 64LL))(v120);
                }

                else
                {
                  uint64_t v140 = 0xFFFFFFFFLL;
                  uint64_t v141 = 0xFFFFFFFFLL;
                }

                NSLog( @"IAPDigitalAudioCurrentSampleRate transport(%d/%d) retVal=%d sampleRate=%u",  v140,  v141,  v122,  v124);
                xpc_dictionary_set_BOOL(v23, "result", v122);
                uint64_t v152 = v124;
                v153 = "sampleRate";
                goto LABEL_289;
              }

              xpc_object_t v106 = xpc_dictionary_create_reply((xpc_object_t)v2);
              if (!v106)
              {
                NSLog(@"ERROR: Client sent kXPCAudioStopRecordingForTransportStr xpc message without a reply context");
                return;
              }

              v66 = v106;
              unsigned int v107 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
              if (v107 <= 3)
              {
                if (v107 != 1) {
                  goto LABEL_131;
                }
                if (!sub_10002645C())
                {
                  NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  779LL);
                  goto LABEL_131;
                }

                uint64_t v108 = sub_1000C60C4();
                if (!v108 || (v108 & 7) != 0) {
                  goto LABEL_493;
                }
                v105 = *(void (**)(void))(*(void *)v108 + 192LL);
                goto LABEL_209;
              }
            }

LABEL_448:
            __break(0x550Au);
            goto LABEL_449;
          }

          unsigned int v99 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
          if (v99 > 3) {
            goto LABEL_448;
          }
          if (v99 != 1) {
            return;
          }
          if (!sub_10002645C())
          {
            NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  732LL);
            return;
          }

          uint64_t v100 = sub_1000C60C4();
          if (!v100 || (v100 & 7) != 0) {
            goto LABEL_493;
          }
          v98 = *(void (**)(void))(*(void *)v100 + 208LL);
        }

        v98();
        return;
      }

      xpc_object_t v89 = xpc_dictionary_create_reply((xpc_object_t)v2);
      if (!v89)
      {
        NSLog(@"ERROR: Client sent kXPCAudioIsVolumeControlSupportedForTransportStr xpc message without a reply context");
        return;
      }

      v66 = v89;
      unsigned int v90 = xpc_dictionary_get_uint64((xpc_object_t)v2, "transport");
      if (v90 > 3) {
        goto LABEL_448;
      }
      if (v90 == 1)
      {
        uint64_t v91 = sub_100042AC4();
        if ((v91 & 7) != 0) {
          goto LABEL_493;
        }
        uint64_t v92 = v91;
        v93 = sub_10002645C();
        if (v93)
        {
          v94 = v93;
          uint64_t v95 = sub_100042AC4();
          if (!v95 || (v95 & 7) != 0) {
            goto LABEL_493;
          }
          if (((*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v95 + 152LL))(v95, v94, 0LL) & 1) != 0)
          {
            LOBYTE(v92) = 1;
          }

          else
          {
            if (!v92 || (v92 & 7) != 0) {
              goto LABEL_493;
            }
            LOBYTE(v92) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v92 + 168LL))(v92, v94);
          }

          goto LABEL_213;
        }

        NSLog( @"ERROR - %s:%s - %d couldn't find port for transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "_xpc_iapd_handle_incoming_request_block_invoke",  689LL);
      }

      LOBYTE(v92) = 0;
LABEL_213:
      xpc_dictionary_set_BOOL(v66, "result", 1);
      v68 = "isSupported";
      goto LABEL_214;
    }

    *(void *)v329 = 0LL;
    size_t length = 0LL;
    uint64_t v13 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portNumber");
    int v14 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portManagerNumber");
    uint64_t v15 = xpc_dictionary_get_uint64((xpc_object_t)v2, "portType");
    id v16 = (void *)xpc_dictionary_get_uint64((xpc_object_t)v2, "portID");
    a1 = (uint64_t)xpc_dictionary_get_data((xpc_object_t)v2, "data", (size_t *)v329);
    if (v15 == 1)
    {
      uint64_t v29 = xpc_dictionary_get_uint64((xpc_object_t)v2, "usbDevID");
      dispatch_time_t v18 = 0LL;
      goto LABEL_114;
    }

    if (v15 == 2)
    {
      unsigned int v17 = (int *)xpc_dictionary_get_data((xpc_object_t)v2, "macAddr", &length);
      if (length > 5)
      {
        dispatch_time_t v18 = v17;
        goto LABEL_113;
      }

      NSLog(@"ERROR: Client sent kXPCDataArrivedStr xpc message with invalid macAddr");
    }

    dispatch_time_t v18 = 0LL;
LABEL_113:
    uint64_t v29 = 0LL;
LABEL_114:
    if (!v16) {
      return;
    }
    pthread_mutex_lock(&stru_100119770);
    uint64_t v2 = sub_100010134((uint64_t)v16);
    if (!v2)
    {
      uint64_t v60 = (uint64_t)operator new(0x90uLL);
      uint64_t v61 = v60;
      if ((v60 & 0xF) != 0) {
        goto LABEL_493;
      }
      sub_100026AAC(v60, v13, v14, v15, (uint64_t)v16, v18, v29);
      objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "addNewTransport:", v61);
      uint64_t v62 = sub_1000438B8();
      if (!v62) {
        goto LABEL_493;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 32LL))(v62, v61);
      uint64_t v63 = sub_1000B6CE0();
      if (!v63) {
        goto LABEL_493;
      }
      if ((v63 & 7) != 0) {
        goto LABEL_493;
      }
      sub_10008D42C(v63, v61, (uint64_t)sub_100010484);
      uint64_t v64 = sub_1000B6CE0();
      if (!v64 || (v64 & 7) != 0) {
        goto LABEL_493;
      }
      sub_10008C904(v64, v61);
      uint64_t v2 = sub_100010134((uint64_t)v16);
    }

    pthread_mutex_unlock(&stru_100119770);
    if (!v2 || !*(void *)v329) {
      return;
    }
    if ((v2 & 7) == 0)
    {
      if (*(void *)v329 < 0x10000uLL)
      {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v2 + 312LL))(v2, a1, *(unsigned __int16 *)v329);
        return;
      }

      goto LABEL_528;
    }

    goto LABEL_493;
  }

  if (xpc_get_type((xpc_object_t)v2) == (xpc_type_t)&_xpc_type_error)
  {
    if (_xpc_error_key_description)
    {
      uint64_t v4 = xpc_dictionary_get_string((xpc_object_t)v2, _xpc_error_key_description);
      NSLog(@"_xpc_iapd_handle_incoming_request event error: %s\n", v4);
      objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "removeClientForXPCConnection:",  *(void *)(a1 + 32));
      uint64_t v5 = *(_xpc_connection_s **)(a1 + 32);
      if (v5)
      {
        xpc_connection_cancel(v5);
        return;
      }
    }

    goto LABEL_566;
  }

void sub_1000100A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000100C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t result = sub_100010134(result);
    if (result)
    {
      uint64_t v2 = result;
      if ((result & 7) != 0 || (*(_BYTE *)(result + 72) = 1, (uint64_t result = sub_1000B6CE0()) == 0) || (result & 7) != 0) {
        __break(0x5516u);
      }
      else {
        return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)result + 48LL))( result,  8LL,  0LL,  v2,  0LL);
      }
    }
  }

  return result;
}

uint64_t sub_100010134(uint64_t a1)
{
  uint64_t v2 = sub_10000CEF8();
  uint64_t v7 = *(void *)(v2 + 8);
  if (v7 == v2)
  {
LABEL_10:
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v3 = v2;
    while (1)
    {
      uint64_t result = *sub_10000D014(&v7);
      if (result) {
        BOOL v5 = (result & 7) == 0;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5)
      {
        __break(0x5516u);
        return result;
      }

      sub_10000D048(&v7);
      if (v7 == v3) {
        goto LABEL_10;
      }
    }

    uint64_t v6 = *sub_10000D014(&v7);
  }

  pthread_mutex_unlock(&stru_10011B978);
  return v6;
}

void sub_1000101EC(id a1)
{
}

void sub_1000101F8(uint64_t a1)
{
  if (!a1) {
    return;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_32;
  }
  uint64_t v2 = (uint64_t *)(a1 + 24);
  if (((a1 + 24) & 7) != 0) {
    goto LABEL_32;
  }
  if (!*v2) {
    return;
  }
  pthread_mutex_lock(&stru_100119770);
  uint64_t v3 = sub_100010134(*v2);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)v3;
    pthread_mutex_unlock(&stru_100119770);
  }

  else
  {
    if (((a1 + 32) & 7) != 0) {
      goto LABEL_32;
    }
    if (*(void *)(a1 + 32) == 100LL)
    {
      pthread_mutex_unlock(&stru_100119770);
      return;
    }

    uint64_t v8 = (uint64_t)operator new(0x90uLL);
    if ((v8 & 0xF) != 0) {
      goto LABEL_32;
    }
    if (((a1 + 8) & 7) != 0) {
      goto LABEL_32;
    }
    if (((a1 + 16) & 7) != 0) {
      goto LABEL_32;
    }
    uint64_t v9 = v8;
    sub_100026AAC(v8, *(_DWORD *)a1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *v2, 0LL, 0LL);
    objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "addNewTransport:", v9);
    uint64_t v10 = sub_1000438B8();
    if (!v10) {
      goto LABEL_32;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32LL))(v10, v9);
    uint64_t v11 = sub_1000B6CE0();
    if (!v11) {
      goto LABEL_32;
    }
    if ((v11 & 7) != 0) {
      goto LABEL_32;
    }
    sub_10008D42C(v11, v9, (uint64_t)sub_100010484);
    uint64_t v12 = sub_1000B6CE0();
    if (!v12 || (v12 & 7) != 0) {
      goto LABEL_32;
    }
    sub_10008C904(v12, v9);
    uint64_t v4 = (unsigned __int8 *)sub_100010134(*v2);
    pthread_mutex_unlock(&stru_100119770);
    if (!v4) {
      return;
    }
  }

  if (v4[72] >= 2u)
  {
LABEL_33:
    __break(0x550Au);
    return;
  }

  if (v4[72])
  {
    dispatch_time_t v5 = dispatch_time(0LL, 100000000LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100010B68;
    block[3] = &unk_100101CB8;
    block[4] = a1;
    dispatch_after(v5, &_dispatch_main_q, block);
    return;
  }

  uint64_t v6 = (void *)(a1 + 32);
  if ((v6 & 7) != 0)
  {
LABEL_32:
    __break(0x5516u);
    goto LABEL_33;
  }

  if ((*v6 < 0x10uLL || *v6 == 100LL)
    && (*(unsigned int (**)(unsigned __int8 *))(*(void *)v4 + 296LL))(v4) != *(_DWORD *)v6)
  {
    (*(void (**)(unsigned __int8 *))(*(void *)v4 + 304LL))(v4);
    uint64_t v7 = sub_1000B6CE0();
    if (v7 && (v7 & 7) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, void, unsigned __int8 *, void))(*(void *)v7 + 48LL))( v7,  128LL,  *(unsigned int *)v6,  v4,  0LL);
      return;
    }

    goto LABEL_32;
  }

void sub_100010470(_Unwind_Exception *a1)
{
}

uint64_t sub_100010484(uint64_t result)
{
  uint64_t v11 = 0LL;
  if (!result) {
    return result;
  }
  BOOL v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  uint64_t result = *(void *)result;
  if (!*v1) {
    return result;
  }
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)result + 216LL))(result);
  uint64_t result = *v1;
  if (v2) {
    goto LABEL_12;
  }
  if (!result) {
    goto LABEL_34;
  }
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  uint64_t v3 = *(void *)(result + 32);
  if (!v3) {
    goto LABEL_34;
  }
  if ((v3 & 7) != 0) {
    goto LABEL_34;
  }
  uint64_t v4 = (void *)(v3 + 40);
  if (*v4)
  {
LABEL_12:
    int v5 = 1;
    if (!result) {
      goto LABEL_34;
    }
  }

  else
  {
    int v5 = sub_100027D08(result) ^ 1;
    uint64_t result = *v1;
    if (!*v1) {
      goto LABEL_34;
    }
  }

  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 216LL))(result);
  if ((_DWORD)result == 1)
  {
    uint64_t result = sub_100027E64(*v1);
    uint64_t v6 = result;
    uint64_t v11 = result;
    BOOL v7 = result != 0;
    if (!v5) {
      goto LABEL_28;
    }
    goto LABEL_18;
  }

  uint64_t v6 = 0LL;
  BOOL v7 = 0;
  if (v5)
  {
LABEL_18:
    uint64_t result = sub_1000B6CE0();
    if (!result || (result & 7) != 0) {
      goto LABEL_34;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 104LL))(result, *v1);
    id v8 = +[IAPServer sharedIAPServer](&OBJC_CLASS___IAPServer, "sharedIAPServer");
    uint64_t result = *v1;
    if (*v1)
    {
      if ((result & 7) != 0) {
        goto LABEL_34;
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    [v8 removeTransport:v9];
    uint64_t result = *v1;
    if (!*v1)
    {
LABEL_27:
      uint64_t *v1 = 0LL;
      goto LABEL_28;
    }

    if ((result & 7) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      goto LABEL_27;
    }

LABEL_34:
    __break(0x5516u);
    return result;
  }

        NSLog( @"%s:%s-%d ERROR - uint64_t result = %d",  a2,  a3,  v7,  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPServer.mm",  "HandleDebugCommand",  209LL,  0LL);
      }

      return;
    default:
      goto LABEL_34;
  }

        NSLog(@"%s:%d Unknown Port type!", "commandHandleSendReplayPacket", 1993LL);
        if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
          goto LABEL_128;
        }
        if (!*(_BYTE *)(a1 + 96))
        {
          strcpy((char *)__b, "ERROR: Unknown Port type!");
          sub_100020CB0(a1, (const std::string::value_type *)__b, 1u, 1);
        }

        return;
      }

      if (*(_WORD *)v7 != 29557 || *(_BYTE *)(v6 + 74) != 98) {
        goto LABEL_34;
      }
      goto LABEL_43;
    }
  }

  if (*(_WORD *)v7 != 29794) {
    goto LABEL_34;
  }
  uint64_t v11 = 2;
LABEL_44:
  uint64_t v51 = -1431655766;
  if (v6 >= 0xFFFFFFFFFFFFFFA0LL) {
    goto LABEL_127;
  }
  uint64_t v12 = (const char *)(v6 + 96);
  if (((v6 + 96) & 7) != 0)
  {
LABEL_128:
    __break(0x5516u);
    goto LABEL_129;
  }

  sscanf(v12, "%X", &v51);
  int v50 = -1431655766;
  uint64_t v13 = *a2;
  if (*a2 >= 0xFFFFFFFFFFFFFF88LL) {
    goto LABEL_127;
  }
  if (!v13) {
    goto LABEL_128;
  }
  int v14 = (const char *)(v13 + 120);
  if (((v13 + 120) & 7) != 0) {
    goto LABEL_128;
  }
  sscanf(v14, "%X", &v50);
  int v49 = -1431655766;
  uint64_t v15 = *a2;
  if (*a2 >= 0xFFFFFFFFFFFFFF70LL) {
    goto LABEL_127;
  }
  if (!v15) {
    goto LABEL_128;
  }
  id v16 = (const char *)(v15 + 144);
  if (((v15 + 144) & 7) != 0) {
    goto LABEL_128;
  }
  sscanf(v16, "%X", &v49);
  if (v49 == -1)
  {
    int v49 = -1;
    goto LABEL_93;
  }

  memset(&v48, 170, sizeof(v48));
  unsigned int v17 = (const std::string *)*a2;
  if (*a2 >= 0xFFFFFFFFFFFFFF70LL)
  {
LABEL_127:
    __break(0x5513u);
    goto LABEL_128;
  }

  std::string::basic_string(&v48, v17 + 6);
  memset(v47, 170, sizeof(v47));
  sub_1000255A4((uint64_t)v47, "none");
  size = v48.__r_.__value_.__s.__size_;
  uint64_t v19 = v48.__r_.__value_.__l.__size_;
  if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v19 = v48.__r_.__value_.__s.__size_;
  }
  if (v19)
  {
    char v20 = 0LL;
    do
    {
      v21 = (char *)sub_1000232F8((uint64_t)&v48, v20);
      uint64_t v22 = __tolower(*v21);
      *(_BYTE *)sub_1000232F8((uint64_t)&v48, v20) = v22;
      uint64_t v23 = __CFADD__((_DWORD)v20, 1);
      char v20 = (v20 + 1);
      if (v23) {
        goto LABEL_130;
      }
      size = v48.__r_.__value_.__s.__size_;
      if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        BOOL v24 = v48.__r_.__value_.__s.__size_;
      }
      else {
        BOOL v24 = v48.__r_.__value_.__l.__size_;
      }
    }

    while (v24 > v20);
    uint64_t v25 = (char)v48.__r_.__value_.__s.__size_ >> 31;
  }

  else
  {
    BOOL v24 = 0LL;
    uint64_t v25 = (char)v48.__r_.__value_.__s.__size_ >> 31;
  }

  xpc_object_t v26 = SHIBYTE(v47[2]);
  v27 = (void *)v47[0];
  if (v47[2] >= 0) {
    unsigned int v28 = v47;
  }
  else {
    unsigned int v28 = (void *)v47[0];
  }
  if (v47[2] >= 0) {
    uint64_t v29 = HIBYTE(v47[2]);
  }
  else {
    uint64_t v29 = v47[1];
  }
  if (v25) {
    xpc_object_t v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  else {
    xpc_object_t v30 = &v48;
  }
  if (v29 >= v24) {
    uint64_t v31 = v24;
  }
  else {
    uint64_t v31 = v29;
  }
  if (memcmp(v30, v28, v31) || v29 != v24)
  {
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_92;
    }
LABEL_125:
    operator delete(v27);
    if ((v48.__r_.__value_.__s.__size_ & 0x80) == 0) {
      goto LABEL_93;
    }
    goto LABEL_126;
  }

  int v49 = -1;
  if (v26 < 0) {
    goto LABEL_125;
  }
LABEL_92:
  if ((size & 0x80) == 0) {
    goto LABEL_93;
  }
LABEL_126:
  operator delete(v48.__r_.__value_.__l.__data_);
LABEL_93:
  v33 = a3 - 7;
  if ((a3 - 7) >> 16) {
    goto LABEL_129;
  }
  unsigned int v34 = (unsigned __int16)(a3 - 7);
  if ((_WORD)a3 != 7)
  {
    uint64_t v35 = (unint64_t)operator new[]((unsigned __int16)(a3 - 7));
    uint64_t v36 = 0LL;
    uint64_t v37 = 168LL;
    while (1)
    {
      uint64_t v38 = *a2;
      if (__CFADD__(*a2, v37)) {
        goto LABEL_127;
      }
      if (v38) {
        uint64_t v39 = (((_BYTE)v37 + (_BYTE)v38) & 7) == 0LL;
      }
      else {
        uint64_t v39 = 0;
      }
      if (!v39) {
        goto LABEL_128;
      }
      uint64_t v40 = (const char *)(v38 + v37);
      unsigned int v41 = strtoul(v40, 0LL, 16);
      if (v36 > ~v35) {
        goto LABEL_127;
      }
      *(_BYTE *)(v35 + v36++) = v41;
      v37 += 24LL;
      if (v34 == v36) {
        goto LABEL_108;
      }
    }
  }

  uint64_t v35 = 0LL;
LABEL_108:
  uint64_t v42 = sub_1000B6CE0();
  if (!v42 || (v42 & 7) != 0) {
    goto LABEL_128;
  }
  int v43 = sub_10008E880(v42, v11);
  uint64_t v44 = v43;
  if (v43)
  {
    if (!HIWORD(v50))
    {
      int v45 = sub_1000ABB10(v43, 0, v51, v50, v49, (const void *)v35, v33);
      uint64_t v46 = sub_1000B6CE0();
      if (!v46 || (v46 & 7) != 0) {
        goto LABEL_128;
      }
      sub_1000B743C((unsigned int *)v46, v45);
      goto LABEL_115;
    }

    __break(0x5516u);
    goto LABEL_35;
  }

  return result;
}

      __break(0x5513u);
      return result;
    }

    goto LABEL_33;
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
}

    __break(0x5516u);
    goto LABEL_35;
  }

  uint64_t v22 = v8 - result;
  v21 = v22 == 0;
  if (v22 >= 0)
  {
    uint64_t v23 = (unint64_t)v22 >> 2;
    if (v21) {
      BOOL v24 = 1LL;
    }
    else {
      BOOL v24 = v23;
    }
    uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&uint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = v25;
    uint64_t v31 = v25;
    sub_1000251DC((uint64_t)&v30, v24, (v24 + 3) >> 2, (uint64_t)v7);
    uint64_t result = sub_10005A8AC((uint64_t)&v30, v2[1], (uint64_t)(v2[2] - v2[1]) >> 3);
    xpc_object_t v26 = *v2;
    uint64_t *v2 = v30;
    *(void *)&xpc_object_t v30 = v26;
    v27 = *v4;
    void *v4 = *((void *)&v30 + 1);
    *((void *)&v30 + 1) = v27;
    unsigned int v28 = *(_OWORD *)v6;
    *(_OWORD *)uint64_t v6 = v31;
    uint64_t v31 = v28;
    uint64_t result = sub_1000253A0((uint64_t)&v30);
    goto LABEL_29;
  }

    __break(0x5516u);
LABEL_35:
    __break(0x5513u);
    goto LABEL_36;
  }

  if (v9 - v4 >= 0)
  {
    uint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    xpc_object_t v30 = v22;
    uint64_t v31 = v22;
    uint64_t v23 = sub_100024960(result);
    if (v9 == v4) {
      BOOL v24 = 1LL;
    }
    else {
      BOOL v24 = (unint64_t)(v9 - v4) >> 2;
    }
    sub_1000251DC((uint64_t)&v30, v24, (v24 + 3) >> 2, v23);
    uint64_t result = sub_10005A8AC((uint64_t)&v30, v2[1], (v2[2] - v2[1]) >> 3);
    uint64_t v25 = *v2;
    uint64_t *v2 = v30;
    *(void *)&xpc_object_t v30 = v25;
    xpc_object_t v26 = *v5;
    _xpc_connection_s *v5 = *((void *)&v30 + 1);
    *((void *)&v30 + 1) = v26;
    v27 = *(_OWORD *)v7;
    *(_OWORD *)BOOL v7 = v31;
    uint64_t v31 = v27;
    sub_1000253A0((uint64_t)&v30);
    goto LABEL_29;
  }

      __break(0x5516u);
    }

      __break(0x5513u);
      goto LABEL_35;
    }

    __break(0x5516u);
    goto LABEL_35;
  }

  uint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if ((_DWORD)result) {
    uint64_t v11 = 19;
  }
  else {
    uint64_t v11 = 20;
  }
  v13[0] = v11;
  if (((v4 + 52) & 3) != 0) {
    goto LABEL_34;
  }
  uint64_t v12 = *(_DWORD *)(v4 + 52);
  if (v12 != (char)v12)
  {
LABEL_35:
    __break(0x550Au);
    return result;
  }

  if (v12 == -1) {
    uint64_t result = 16LL;
  }
  else {
    uint64_t result = v12;
  }
LABEL_28:
  v13[1] = result;
  int v14 = a2;
  if (((v4 + 36) & 3) != 0) {
    goto LABEL_34;
  }
  uint64_t v15 = *(_DWORD *)(v4 + 36);
  id v16 = 0;
  unsigned int v17 = 0LL;
  dispatch_time_t v18 = a3;
  if (v9)
  {
    if ((v9 & 7) == 0)
    {
      sub_100057A4C(v9, 0, 0LL, (uint64_t)v13, 48);
      return sub_100057D5C(v9, v8);
    }

    goto LABEL_34;
  }

  return sub_10005BEC8(0, 0LL, (uint64_t)v13, 48, 0LL);
}

  __break(0x5500u);
  return result;
}

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    return;
  }

  char v10 = v9;
  if (v9 != a2)
  {
    if ((v9 & 7) != 0) {
      goto LABEL_34;
    }
    uint64_t v11 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 208LL))(v9);
    if (!a2)
    {
      uint64_t v12 = "Unknown";
LABEL_18:
      sub_1000CEAEC( 0,  4,  "%s:%d Port do not match! handle=%hhx port:%hhx(%s) != %hhx(%s)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  1358,  v7,  v10,  v11,  a2,  v12);
      return;
    }

    goto LABEL_16;
  }

  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_34;
    }
    uint64_t v13 = *(void *)(a2 + 32);
    if (v13)
    {
      if ((v13 & 7) != 0) {
        goto LABEL_34;
      }
      int v14 = (void *)(v13 + 40);
      *int v14 = 0LL;
      uint64_t v15 = v8 ^ 1;
      if ((v7 & 7) != 0) {
        uint64_t v15 = 1;
      }
      if ((v15 & 1) != 0) {
        goto LABEL_34;
      }
      sub_100056BC4(v7);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 280LL))(a2))
      {
        (*(void (**)(void *, void))(*(void *)v16 + 392LL))(v16, 0LL);
      }

      sub_10008C82C(a1, a2);
    }
  }

    __break(0x550Au);
    return result;
  }

  switch((int)a3)
  {
    case -1:
      return sub_10009A710((uint64_t)v3, a2, v3[352]);
    case 0:
      (*(void (**)(uint64_t))(*(void *)a2 + 216LL))(a2);
      uint64_t result = 0LL;
      v3[351] = 0;
      return result;
    case 1:
      (*(void (**)(uint64_t))(*(void *)a2 + 256LL))(a2);
      uint64_t result = 0LL;
      char v10 = 1;
      goto LABEL_30;
    case 2:
      (*(void (**)(uint64_t))(*(void *)a2 + 232LL))(a2);
      uint64_t result = 0LL;
      char v10 = 2;
      goto LABEL_30;
    case 3:
      (*(void (**)(uint64_t))(*(void *)a2 + 240LL))(a2);
      uint64_t result = 0LL;
      char v10 = 3;
      goto LABEL_30;
    case 4:
      (*(void (**)(uint64_t))(*(void *)a2 + 224LL))(a2);
      uint64_t result = 0LL;
      char v10 = 4;
      goto LABEL_30;
    case 5:
      uint64_t result = sub_1000438B8();
      if (!result || (result & 7) != 0) {
        goto LABEL_33;
      }
      (*(void (**)(uint64_t))(*(void *)a2 + 248LL))(a2);
      uint64_t result = 0LL;
      char v10 = 5;
LABEL_30:
      v3[351] = v10;
      break;
    default:
      return 22LL;
  }

  return result;
}

    __break(0x5516u);
    goto LABEL_35;
  }

  if (a4 >= 1)
  {
    char v10 = 0;
    while (!__OFADD__(a3, v10))
    {
      if (!(a3 + v10))
      {
        uint64_t v11 = sub_10004783C();
        if (!v11 || (v11 & 7) != 0) {
          goto LABEL_34;
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v11 + 88LL))(&__p);
        uint64_t v12 = a5->__r_.__value_.__l.__size_;
        if (v12 >= a5->__r_.__value_.__l.__cap_)
        {
          uint64_t v13 = sub_100024640(a5, &__p);
        }

        else
        {
          sub_1000245B0(a5, &__p);
          if (v12 >= 0xFFFFFFFFFFFFFFE8LL) {
            goto LABEL_36;
          }
          uint64_t v13 = (std::string *)(v12 + 24);
        }

        a5->__r_.__value_.__l.__size_ = (std::string::size_type)v13;
      }

      if (a4 == ++v10) {
        return;
      }
    }

    __break(0x5500u);
    goto LABEL_34;
  }

        BOOL v7 = v8;
        break;
    }
  }

  if (*(unsigned __int8 *)(a2 + 60) >= 2u)
  {
LABEL_36:
    __break(0x550Au);
    return;
  }

  if (!v5 || *(_BYTE *)(a2 + 60)) {
    return;
  }
  if ((v5 & 7) != 0) {
    goto LABEL_35;
  }
  sub_10009703C(a1, v5, 0, 1u);
}

        __break(0x5516u);
        goto LABEL_35;
      }

  __break(0x5513u);
  return result;
}

  if ((v10 & 7) == 0)
  {
    if (!sub_1000568BC(v10) || a4 && sub_1000569D8(v10) != a4) {
      sub_10008EFA8(v4, v10, 1, a4);
    }
    goto LABEL_39;
  }

    __break(0x5513u);
    goto LABEL_35;
  }

          __break(0x550Au);
          goto LABEL_35;
        }

  __break(0x5516u);
  return result;
}

LABEL_28:
  char v10 = !v7;
  if (!v6) {
    char v10 = 1;
  }
  if ((v10 & 1) == 0) {
    return sub_100010484(&v11);
  }
  return result;
}

  sscanf(v8, "%X", &v63);
  uint64_t v13 = 0;
  BOOL v7 = *a2;
  int v14 = 5;
LABEL_33:
  uint64_t v62 = -1431655766;
  if (v7 >= 0xFFFFFFFFFFFFFFB8LL) {
    goto LABEL_145;
  }
  if (!v7) {
    goto LABEL_146;
  }
  uint64_t v15 = (const char *)(v7 + 72);
  if (((v7 + 72) & 7) != 0) {
    goto LABEL_146;
  }
  sscanf(v15, "%X", &v62);
  if (v62 < 0xF)
  {
    uint64_t v61 = -1431655766;
    id v16 = *a2;
    if (*a2 >= 0xFFFFFFFFFFFFFFA0LL) {
      goto LABEL_145;
    }
    if (!v16) {
      goto LABEL_146;
    }
    unsigned int v17 = (const char *)(v16 + 96);
    if (((v16 + 96) & 7) != 0) {
      goto LABEL_146;
    }
    sscanf(v17, "%X", &v61);
    uint64_t v60 = -1431655766;
    dispatch_time_t v18 = *a2;
    if (*a2 >= 0xFFFFFFFFFFFFFF88LL) {
      goto LABEL_145;
    }
    if (!v18) {
      goto LABEL_146;
    }
    uint64_t v19 = (const char *)(v18 + 120);
    if (((v18 + 120) & 7) != 0) {
      goto LABEL_146;
    }
    sscanf(v19, "%X", &v60);
    if (v60 == -1)
    {
      uint64_t v29 = 0;
      uint64_t v60 = -1;
    }

    else
    {
      memset(&v59, 170, sizeof(v59));
      char v20 = (const std::string *)*a2;
      if (*a2 >= 0xFFFFFFFFFFFFFF88LL) {
        goto LABEL_145;
      }
      std::string::basic_string(&v59, v20 + 5);
      memset(__p, 170, sizeof(__p));
      sub_1000255A4((uint64_t)__p, "none");
      memset(v57, 170, sizeof(v57));
      sub_1000255A4((uint64_t)v57, "gen");
      v21 = (v59.__r_.__value_.__s.__size_ & 0x80u) != 0;
      size = v59.__r_.__value_.__s.__size_;
      if ((v59.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        size = v59.__r_.__value_.__l.__size_;
      }
      uint64_t v56 = v6;
      if (size)
      {
        uint64_t v23 = 0LL;
        do
        {
          BOOL v24 = (char *)sub_1000232F8((uint64_t)&v59, v23);
          uint64_t v25 = __tolower(*v24);
          *(_BYTE *)sub_1000232F8((uint64_t)&v59, v23) = v25;
          xpc_object_t v26 = __CFADD__((_DWORD)v23, 1);
          uint64_t v23 = (v23 + 1);
          if (v26) {
            goto LABEL_148;
          }
          v21 = (v59.__r_.__value_.__s.__size_ & 0x80u) != 0;
          if ((v59.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v27 = v59.__r_.__value_.__s.__size_;
          }
          else {
            v27 = v59.__r_.__value_.__l.__size_;
          }
        }

        while (v27 > v23);
        unsigned int v28 = v13;
      }

      else
      {
        unsigned int v28 = v13;
        v27 = 0LL;
      }

      xpc_object_t v30 = v14;
      uint64_t v31 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) >= 0) {
        uint64_t v32 = __p;
      }
      else {
        uint64_t v32 = (void **)__p[0];
      }
      if (SHIBYTE(__p[2]) >= 0) {
        v33 = (void *)HIBYTE(__p[2]);
      }
      else {
        v33 = __p[1];
      }
      if (v21) {
        unsigned int v34 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      else {
        unsigned int v34 = &v59;
      }
      else {
        uint64_t v35 = (size_t)v33;
      }
      uint64_t v37 = SHIBYTE(v57[2]);
      uint64_t v38 = (void *)v57[0];
      if (v57[2] >= 0) {
        uint64_t v39 = v57;
      }
      else {
        uint64_t v39 = (void *)v57[0];
      }
      if (v57[2] >= 0) {
        uint64_t v40 = HIBYTE(v57[2]);
      }
      else {
        uint64_t v40 = v57[1];
      }
      if (v40 >= v27) {
        unsigned int v41 = v27;
      }
      else {
        unsigned int v41 = v40;
      }
      uint64_t v42 = memcmp(v34, v39, v41) == 0;
      uint64_t v29 = v40 == v27 && v42;
      if (v37 < 0)
      {
        operator delete(v38);
        uint64_t v31 = HIBYTE(__p[2]);
      }

      if (v31 < 0) {
        operator delete(__p[0]);
      }
      int v14 = v30;
      uint64_t v13 = v28;
      uint64_t v6 = v56;
    }

    if (v6 > 0xFF) {
      goto LABEL_147;
    }
    if (v63 >= (unint64_t)((qword_10011BBF0 - qword_10011BBE8) >> 3))
    {
      if (!v13) {
        goto LABEL_131;
      }
      int v45 = sub_1000B6CE0();
      if (!v45 || (v45 & 7) != 0) {
        goto LABEL_146;
      }
      uint64_t v44 = sub_10008E880(v45, v14);
      if (!v44)
      {
LABEL_131:
        char v10 = 0LL;
        strcpy( (char *)__b,  "Invalid transport ID! Use 'get port' command to see transports or specify uart, usb, or bt!");
        goto LABEL_142;
      }

      goto LABEL_115;
    }

    if (!__CFADD__(qword_10011BBE8, 8LL * v63))
    {
      if (!qword_10011BBE8) {
        goto LABEL_146;
      }
      int v43 = (uint64_t *)(qword_10011BBE8 + 8LL * v63);
      uint64_t v44 = *v43;
      if (!*v43) {
        goto LABEL_131;
      }
LABEL_115:
      if (v29)
      {
        if ((v44 & 7) != 0) {
          goto LABEL_146;
        }
        uint64_t v60 = (*(uint64_t (**)(uint64_t, void))(*(void *)v44 + 16LL))(v44, 0LL);
      }

      if ((_BYTE)v6)
      {
        uint64_t v46 = (unint64_t)operator new[](v6);
        int v47 = 0LL;
        int v48 = 144LL;
        while (1)
        {
          int v49 = *a2;
          if (__CFADD__(*a2, v48)) {
            goto LABEL_145;
          }
          if (v49) {
            int v50 = (((_BYTE)v48 + (_BYTE)v49) & 7) == 0LL;
          }
          else {
            int v50 = 0;
          }
          if (!v50) {
            goto LABEL_146;
          }
          uint64_t v51 = (const char *)(v49 + v48);
          uint64_t v52 = strtoul(v51, 0LL, 16);
          if (v47 > ~v46) {
            goto LABEL_145;
          }
          *(_BYTE *)(v46 + v47++) = v52;
          v48 += 24LL;
        }
      }

      uint64_t v46 = 0LL;
LABEL_133:
      v53 = sub_10002ACC4();
      if (!v53 || (v53 & 7) != 0) {
        goto LABEL_146;
      }
      if (!HIWORD(v61))
      {
        char v10 = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t, unint64_t, void))(*(void *)v53 + 352LL))( v53,  v62,  (unsigned __int16)v61,  v60,  v44,  v46,  v6);
        if (v46) {
          operator delete[]((void *)v46);
        }
        if (!(_DWORD)v10)
        {
          strcpy((char *)__b, "Packet transmission failed!");
          goto LABEL_142;
        }

        if ((v44 & 7) == 0)
        {
          uint64_t v54 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v44 + 208LL))(v44);
          snprintf((char *)__b, 0x400uLL, "Packet sent successfully to transport %s", v54);
          char v10 = 1LL;
          goto LABEL_142;
        }

  __break(0x5515u);
}

        sub_100038804();
        (*((void (**)(id *))*p_isa + 85))(p_isa);
        (*((void (**)(id *))*p_isa + 82))(p_isa);
        uint64_t v19 = -[MPMediaQuery initWithEntities:entityType:]( objc_alloc(&OBJC_CLASS___MPMediaQuery),  "initWithEntities:entityType:",  v11,  0LL);
        dispatch_time_t v18 = [p_isa[15] prepareForPlaybackWithQuery:v19 andFirstItem:v13] == 0;

        goto LABEL_29;
      }

          __break(0x550Au);
          goto LABEL_29;
        }
      }
    }
  }

    uint64_t v13 = (uint64_t)operator new(0x38uLL);
    int v14 = (_DWORD *)v13;
    if ((v13 & 0xF) != 0) {
      goto LABEL_58;
    }
    sub_10004EA40(v13);
    v32[3] = (uint64_t)v14;
    v14[9] = a2;
    if (v25[5]) {
      (*(void (**)(_DWORD *))(*(void *)v14 + 400LL))(v14);
    }
    if (v5 == a2)
    {
      uint64_t v15 = v32[3];
      if (!v15 || (v15 & 7) != 0) {
        goto LABEL_58;
      }
      *(_BYTE *)(v15 + 32) = 1;
    }

    -[IAPStackshot endTimer:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "endTimer:",  v11);
    _Block_object_dispose(&v24, 8);
    goto LABEL_37;
  }

  uint64_t v6 = (uint64_t)operator new(0x38uLL);
  BOOL v7 = v6;
  if ((v6 & 0xF) != 0) {
    goto LABEL_58;
  }
  sub_10004EA40(v6);
  v32[3] = v7;
  if ((v7 & 7) != 0) {
    goto LABEL_58;
  }
  *(_DWORD *)(v7 + 36) = a2;
  if (v5 != a2) {
    goto LABEL_15;
  }
  id v8 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v8)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004041C;
    block[3] = &unk_1001049B0;
    block[4] = &v31;
    dispatch_sync(v8, block);
LABEL_15:
    if (((_DWORD)a1[50] & 0x80000000) == 0)
    {
      uint64_t v9 = v32[3];
      if (!v9 || (v9 & 7) != 0) {
        goto LABEL_58;
      }
      *(_DWORD *)(v9 + 40) = a2;
      *(_BYTE *)(v9 + 33) = 1;
    }

    if ((*((_DWORD *)a1 + 99) & 0x80000000) != 0)
    {
LABEL_37:

      goto LABEL_38;
    }

    char v10 = v32[3];
    if (v10 && (v10 & 7) == 0)
    {
      *(_DWORD *)(v10 + 44) = a2;
      *(_BYTE *)(v10 + 33) = 1;
      goto LABEL_37;
    }

    dispatch_time_t v18 = v17 & 0xFFFFFFFFFFFFLL | 0x4C000000000000LL;
    goto LABEL_29;
  }

    __break(0x550Au);
    goto LABEL_29;
  }

  __break(0x5512u);
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
  }

  __break(0x5500u);
  return result;
}

  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }

          __break(0x5516u);
          goto LABEL_29;
        }
      }

    uint64_t result = pthread_mutex_unlock(&stru_10011B978);
    uint64_t v12 = v19;
    goto LABEL_51;
  }

  dispatch_time_t v18 = *(void *)(v4 + 8);
  if (v18 != v4)
  {
    int v14 = (a2 & 7) == 0 && a2 != 0;
    do
    {
      uint64_t result = (uint64_t)sub_10000D014(&v18);
      if (!*(void *)result || (*(void *)result & 7LL) != 0) {
        goto LABEL_52;
      }
      if (*(void *)(*(void *)result + 32LL))
      {
        if (!v14) {
          goto LABEL_52;
        }
        id v16 = sub_10000D014(&v18);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 104LL))(a2, *v16))
        {
          unsigned int v17 = sub_10000D014(&v18);
          sub_10008D224(v2, *v17);
        }
      }

      sub_10000D048(&v18);
    }

    while (v18 != v4);
  }

  pthread_mutex_unlock(&stru_10011B978);
  uint64_t result = sub_1000451B0();
  if (result && (result & 7) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 200LL))(result, a2);
    if ((result & 1) != 0) {
      return result;
    }
    uint64_t v12 = v19;
LABEL_51:
    __break(0x550Au);
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 360LL))(a3);
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 280LL))(a3);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v8 | 0x2000;
  if (!v9) {
    uint64_t v11 = v8;
  }
  if (v10) {
    return v11 | 0x4000;
  }
  else {
    return v11;
  }
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
    goto LABEL_29;
  }

    __break(0x5516u);
    goto LABEL_29;
  }

  uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(size - v5) >> 3);
  uint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&uint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v13;
  v21[1] = v13;
  int v14 = __CFADD__(v12, 1LL);
  uint64_t v15 = v12 + 1;
  if (v14)
  {
LABEL_30:
    __break(0x5500u);
LABEL_31:
    sub_100024868((uint64_t)v3);
  }

  if (v15 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_31;
  }
  id v16 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  unsigned int v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v5) >> 3);
  dispatch_time_t v18 = 0x5555555555555556LL * ((uint64_t)(v11 - v5) >> 3);
  if (v18 <= v15) {
    dispatch_time_t v18 = v15;
  }
  if (v17 >= 0x555555555555555LL) {
    uint64_t v19 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    uint64_t v19 = v18;
  }
  sub_100024884((uint64_t)v21, v19, v16, (uint64_t)p_cap);
  sub_10009F028((unint64_t)v21, __str);
  uint64_t v4 = sub_10009F218(v3, (uint64_t)v21, v4);
  sub_100024AB0((uint64_t)v21);
  return v4;
}

uint64_t sub_100010620(uint64_t result)
{
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t result = *(void *)(result + 40);
  if (!result) {
    return result;
  }
  if ((result & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    return result;
  }

  if ((*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result))
  {
    uint64_t result = *(void *)(v1 + 40);
    if (result && (result & 7) == 0) {
      return (*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result) == 1;
    }
    goto LABEL_11;
  }

  return 1LL;
}

BOOL sub_100010698(_OWORD *a1)
{
  __int128 v1 = a1[1];
  *(_OWORD *)token.val = *a1;
  *(_OWORD *)&token.val[4] = v1;
  int v2 = SecTaskCreateWithAuditToken(0LL, &token);
  if (v2)
  {
    uint64_t v3 = v2;
    CFErrorRef error = 0LL;
    uint64_t v4 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v2, @"com.apple.iapd.debugconsole", &error);
    if (v4)
    {
      int v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFBooleanGetTypeID())
      {
        int Value = CFBooleanGetValue(v5);
        BOOL v8 = Value != 0;
        CFRelease(v5);
        CFErrorRef v9 = error;
        if (!error)
        {
LABEL_13:
          CFRelease(v3);
          return v8;
        }

        if (Value)
        {
          BOOL v8 = 1LL;
LABEL_11:
          CFRelease(v9);
          goto LABEL_13;
        }

void sub_10001079C(int a1, uint64_t a2, uint64_t a3, void *a4, NSUInteger *a5)
{
  uint64_t v7 = a3;
  switch(a1)
  {
    case 0:
      uint64_t v8 = sub_10002ACC4();
      if (!v8 || (v8 & 7) != 0) {
        goto LABEL_36;
      }
      CFErrorRef v9 = sub_10002C030((NSData *)v8);
      if (!v9) {
        goto LABEL_34;
      }
      goto LABEL_29;
    case 1:
      uint64_t v10 = sub_10002ACC4();
      if (!v10 || (v10 & 7) != 0) {
        goto LABEL_36;
      }
      sub_10002C14C(v10);
      goto LABEL_34;
    case 2:
      uint64_t v11 = sub_10002ACC4();
      if (!v11 || (v11 & 7) != 0) {
        goto LABEL_36;
      }
      sub_10002C0BC(v11);
      goto LABEL_34;
    case 3:
      id v12 = objc_msgSend( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, a3),  0,  0,  0),  "unsignedIntValue");
      uint64_t v13 = sub_10002ACC4();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_36;
      }
      goto LABEL_34;
    case 4:
      id v14 = objc_msgSend( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, a3),  0,  0,  0),  "unsignedIntValue");
      uint64_t v15 = sub_10002ACC4();
      if (!v15 || (v15 & 7) != 0) {
        goto LABEL_36;
      }
      goto LABEL_34;
    case 5:
      id v16 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2, a3),  0LL,  0LL,  0LL);
      id v17 = objc_msgSend(objc_msgSend(v16, "objectForKey:", IAPDebugSessionIDKey), "unsignedIntValue");
      id v18 = [v16 objectForKey:IAPDebugCommandKey];
      uint64_t v19 = sub_10002ACC4();
      if (!v19 || (v19 & 7) != 0) {
        goto LABEL_36;
      }
      if (((*(uint64_t (**)(uint64_t, id, id))(*(void *)v19 + 440))( v19,  v17,  [v18 UTF8String]) & 1) == 0) {
        return;
      }
      goto LABEL_34;
    case 6:
      id v20 = +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a2, a3),  0LL,  0LL,  0LL);
      id v21 = [v20 unsignedIntValue];
      unsigned int v34 = 0;
      unsigned __int8 v33 = 0;
      memset(__b, 170, sizeof(__b));
      uint64_t v22 = sub_10002ACC4();
      if (!v22 || (v22 & 7) != 0) {
        goto LABEL_36;
      }
      if (!(*(unsigned int (**)(uint64_t, id, unsigned int *, unsigned __int8 *, _BYTE *, uint64_t))(*(void *)v22 + 448LL))( v22,  v21,  &v34,  &v33,  __b,  1024LL)) {
        return;
      }
      uint64_t v23 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v34);
      BOOL v24 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", __b);
      if (v33 >= 2u)
      {
        __break(0x550Au);
      }

      else
      {
        uint64_t v25 = v24;
        uint64_t v26 = IAPDebugSessionIDKey;
        uint64_t v27 = IAPDebugResultTypeKey;
        uint64_t v28 = IAPDebugResultKey;
        uint64_t v29 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:");
        CFErrorRef v9 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v20,  v26,  v23,  v27,  v25,  v28,  v29,  IAPDebugResultMoreKey,  0LL),  200LL,  0LL,  0LL);
        if (v9)
        {
LABEL_29:
          xpc_object_t v30 = v9;
          id v31 = -[NSData bytes](v9, "bytes");
          if (!a4
            || (a4 & 7) != 0
            || (*a4 = v31, NSUInteger v32 = -[NSData length](v30, "length"), !a5)
            || (a5 & 7) != 0)
          {
LABEL_36:
            __break(0x5516u);
          }

          *a5 = v32;
        }

uint64_t sub_100010B68(uint64_t a1)
{
  return sub_1000101F8(*(void *)(a1 + 32));
}

void *sub_100010B70()
{
  v3.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(void *)v3.__opaque = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init(&stru_10011B978, &v3);
  v0 = operator new(0x18uLL);
  uint64_t v1 = (uint64_t)v0;
  uint64_t result = sub_100010C30(v0);
  qword_10011D0D8 = v1;
  return result;
}

void sub_100010C14(_Unwind_Exception *a1)
{
}

void *sub_100010C30(void *result)
{
  if (!result
    || (result & 7) != 0
    || (*uint64_t result = result, result[1] = result, (((_BYTE)result + 16) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[2] = 0LL;
  }

  return result;
}

id sub_1000115F8(id result, uint64_t a2, uint64_t a3, unsigned int *a4, void *a5)
{
  id v5 = result;
  switch(a2)
  {
    case 1LL:
      return objc_msgSend(a5, "_readSocketCB:", result, a4);
    case 8LL:
      return objc_msgSend(a5, "_writeSocketCB:", result, a4);
    case 2LL:
      if (!a4 || (a4 & 3) != 0)
      {
        __break(0x5516u);
      }

      else
      {
        a4 = (unsigned int *)*a4;
        uint64_t result = a5;
      }

      return [result _acceptSocketCB:v5 acceptedSock:a4];
  }

  return result;
}

void sub_100011BC8(_Unwind_Exception *a1)
{
}

LABEL_39:
  __break(0x5500u);
  return self;
}

    __break(0x550Au);
    return (int)v3;
  }

  __break(0x550Au);
}

  if (v17) {
    sub_1000AD43C(v17);
  }
}

  __break(0x5515u);
  return result;
}

    __break(0x5516u);
    goto LABEL_40;
  }

  __break(0x5516u);
LABEL_40:
  __break(0x550Au);
LABEL_41:
  __break(0x5513u);
  return result;
}

      __break(0x550Au);
      goto LABEL_40;
    }

    return 4LL;
  }

  __break(0x5510u);
LABEL_40:
  __break(0x550Au);
  return result;
}

LABEL_33:
  __break(0x5500u);
  return self;
}

  if (sub_1000357C4())
  {
    CFErrorRef v9 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (!v9)
    {
      __break(0x5510u);
      return (int)v9;
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003857C;
    block[3] = &unk_100104618;
    block[4] = a3;
    void block[5] = a4;
    block[6] = &v28;
    dispatch_sync(v9, block);
    if (v7) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }

  NSLog(@"prepareForPlaybackWithQuery:andFirstItem: no systemMusicPlayer!");
LABEL_5:
  if (v7) {
LABEL_6:
  }
    MRSystemAppPlaybackQueueDestroy(v7);
LABEL_7:
  uint64_t v8 = *((_DWORD *)v29 + 6);
  _Block_object_dispose(&v28, 8);
  LODWORD(v9) = v8;
  return (int)v9;
}

  cachedPlaybackStateResult = self->_cachedPlaybackStateResult;
  if ((_DWORD)cachedPlaybackStateResult != (_DWORD)v15)
  {
    id v18 = self->_explicitControlOccurred;
    if (v18 <= 1)
    {
      NSLog( @"MP: nowPlayingAppPlaybackState: playbackState=%d->%d, _nowPlayingAppIsPlaying(%d) pbRateChangeTimeExpired(%d), _explicitControlOccurred=%d curTime(%u) _lastTimeNowPlayingPBRateChangeToPauseOrStop(%u) playbackRateObj= %@ isLoadingRadioStation=%d",  cachedPlaybackStateResult,  v15,  self->_nowPlayingAppIsPlaying,  v6,  v18,  v5,  self->_lastTimeNowPlayingPBRateChangeToPauseOrStop,  v11,  -[MediaPlayerHelper isLoadingRadioStation](self, "isLoadingRadioStation"));
      self->_cachedPlaybackStateResult = v15;
      goto LABEL_37;
    }

  NSLog( @"MR: %s:%d\n%@\n.... changed to ....\n%@",  "-[MediaPlayerHelper _handleNowPlayingInfo:]",  1832LL,  -[MediaPlayerHelper _nowPlayingInfoDesc:](self, "_nowPlayingInfoDesc:", v10),  -[MediaPlayerHelper _nowPlayingInfoDesc:](self, "_nowPlayingInfoDesc:", v14));
  NSLog( @"MR: %s:%d isTrackChanged=%d isPBContentChanged=%d isPBRateChanged=%d tmpNowPlayingInfo=%hhx oldNowPlayingInfo=%hhx",  "-[MediaPlayerHelper _handleNowPlayingInfo:]",  1836LL,  v21,  v11,  v19,  v14,  v10);
  if (self->_nowPlayingAppChanged)
  {
    self->_nowPlayingAppChanged = 0;
    uint64_t v11 = 1;
  }

  pthread_mutex_lock(&self->_nowPlayingInfoLock);
  self->_nowPlayingInfo = v14;
  self->_nowPlayingInfoEverReceived = 1;
  pthread_mutex_unlock(&self->_nowPlayingInfoLock);
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
    goto LABEL_220;
  }
  sub_10003AE40(qword_10011BD38, 1);
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
    goto LABEL_220;
  }
  sub_10003AF78(qword_10011BD38);
  if (v82)
  {
    self->_nowPlayingAppIsIPod = v78;
    self->_nowPlayingAppIsIPodIsValid = 1;
  }

  nowPlayingAppIsIPodRadio = self->_nowPlayingAppIsIPodRadio;
  self->_nowPlayingAppIsIPodRadio = 0;
  nowPlayingAppIsIPod = self->_nowPlayingAppIsIPod;
  if (self->_nowPlayingAppIsIPod)
  {
    nowPlayingAppIsIPod = v84;
    self->_nowPlayingAppIsIPodRadio = v84;
  }

  if (nowPlayingAppIsIPod == (nowPlayingAppIsIPodRadio != 0)) {
    BOOL v24 = v11;
  }
  else {
    BOOL v24 = 1;
  }
  pthread_once(&stru_10011B908, sub_1000BC260);
  if (dword_10011B904)
  {
    uint64_t v25 = sub_1000BC5A4();
    if (!qword_10011BD30 || (qword_10011BD30 & 7) != 0) {
      goto LABEL_220;
    }
    if (v25 >= v85)
    {
      uint64_t v26 = *(unsigned int *)(qword_10011BD30 + 76);
      if (v26 < 4)
      {
        if (~(unint64_t)dword_10011B8F8 >= 4 * v26)
        {
          if (dword_10011B8F8[v26]) {
            (*(void (**)(void))(*(void *)qword_10011BD30 + 104LL))();
          }
          goto LABEL_60;
        }

        if (qword_10011BD40 != -1) {
          dispatch_once(&qword_10011BD40, &stru_1001046A0);
        }
        if (qword_10011BD38 && (qword_10011BD38 & 7) == 0)
        {
          sub_10003AF78(qword_10011BD38);

          return;
        }

        goto LABEL_38;
      }
    }
  }

  __break(0x5515u);
  return result;
}

    __break(0x5516u);
LABEL_34:
    __break(0x5513u);
  }

  __break(0x550Cu);
  return result;
}

    __break(0x5516u);
LABEL_34:
    __break(0x5513u);
  }

  __break(0x550Cu);
  return result;
}

            sub_1000D27A0(v5);
          }

    __break(0x5516u);
    goto LABEL_34;
  }

  __break(0x550Au);
  return result;
}

  if (((a3 + 8) & 7) != 0) {
    goto LABEL_38;
  }
  uint64_t v11 = *(_DWORD *)(a3 + 8);
  if (v11 > 0xF) {
    goto LABEL_39;
  }
  if (!v11) {
    sub_1000855D0((uint64_t *)a1, a2);
  }
  sub_1000857FC(a1, (unsigned __int8 *)a3);
}

      uint64_t v22 = (unsigned int *)(a2 + 34);
      if (((((_DWORD)a2 + 26) | ((_DWORD)a2 + 34)) & 1) != 0) {
        goto LABEL_139;
      }
      id v20 = *(void *)(a2 + 26);
    }

    uint64_t v13 = *v22;
    id v21 = v13;
    if (!v13) {
      return;
    }
LABEL_38:
    uint64_t v15 = v13 + v11;
    if (!__CFADD__(v13, v11))
    {
      v75 = v3;
      if (v15 <= v7)
      {
        uint64_t v25 = 0;
LABEL_47:
        *(_WORD *)(a2 + 113) = 0;
        *(_WORD *)(a2 + 115) = v25;
        *(_DWORD *)(a2 + 137) = v15;
        *(void *)(a2 + 117) = v20;
        *(_DWORD *)(a2 + 125) = 0;
        *(_DWORD *)(a2 + 129) = v21;
        *(_DWORD *)(a2 + 133) = v13;
        uint64_t v26 = v21;
        pthread_mutexattr_t v3 = v25;
        uint64_t v27 = operator new[](v15);
        id v14 = v3;
        id v18 = v26;
        id v16 = v20;
        id v17 = 0;
        *(void *)(a2 + 141) = v27;
        LOBYTE(v3) = v75;
        goto LABEL_48;
      }

      if (v13 < 0xFFFFFFFC)
      {
        uint64_t v23 = v7 >= v12;
        BOOL v24 = v7 - v12;
        if (!v23) {
          goto LABEL_143;
        }
        if (!v24)
        {
LABEL_145:
          __break(0x5503u);
          return;
        }

        uint64_t v25 = (v13 + 4) / v24;
        if (HIWORD(v25)) {
          goto LABEL_142;
        }
        uint64_t v15 = v7;
        goto LABEL_47;
      }
    }

  __break(0x550Cu);
  return result;
}

    __break(0x5513u);
LABEL_34:
    __break(0x5516u);
    goto LABEL_35;
  }

    __break(0x5516u);
    goto LABEL_34;
  }

  return result;
}

    __break(0x5516u);
    goto LABEL_34;
  }

    __break(0x5516u);
    goto LABEL_34;
  }

        __break(0x5516u);
        goto LABEL_34;
      }

      sub_1000CEAEC( 0,  4,  "%s:%d (%hhx) connection ID mismatch (0x%08x != 0x%08x)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/iSL/Source/IAP/TAccessoryMgr.cpp",  311,  a6,  *(_DWORD *)(v15 + 8),  a2);
LABEL_32:
      pthread_mutex_unlock(v14);
      return;
    }
  }

  sub_1000BEC98(a1);
  uint64_t v23 = (uint64_t)operator new(0x80uLL);
  if ((v23 & 0xF) != 0) {
    goto LABEL_33;
  }
  BOOL v24 = v23;
  if ((v23 & 7) != 0) {
    goto LABEL_33;
  }
  sub_1000BDE94(v23, a2, a3, a4, a5, a6, a7);
  if (((a1 + 248) & 7) != 0) {
    goto LABEL_33;
  }
  sub_1000BED28(a1 + 248, (unsigned int *)&v29);
  *uint64_t v25 = v24;
  uint64_t v26 = *(_DWORD *)(a1 + 240);
  uint64_t v27 = __CFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(_DWORD *)(a1 + 240) = v28;
    goto LABEL_32;
  }

        __break(0x5516u);
        [(id)v6 setSendReserveCurrentNotification:v7];
        break;
    }
  }

  else
  {
    NSLog( @"ERROR - %s:%s - %d service is NULL",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAPPortManager.mm",  "__accessoryPortManagerInterest",  40LL);
  }

LABEL_103:
            -[NSCondition unlock](*p_sessionPacketsFromAppCondition, "unlock");
          }

          else if (v9 == -1)
          {
            if (*p_sock != -1)
            {
              uint64_t v10 = __error();
              syslog(4, "ERROR - %s:%s - %d error waiting for read data, errno = %d");
            }
          }

          else
          {
            syslog(3, "ERROR - %s:%s - %d unknown error waiting for read data, %d");
          }
        }

        objc_autoreleasePoolPop(v6);
        if (-[NSThread isCancelled](*p_sessionPacketsFromAppThread, "isCancelled")) {
          return;
        }
      }
    }
  }

LABEL_106:
  __break(0x5516u);
LABEL_107:
  __break(0x5500u);
LABEL_108:
  __break(0x5513u);
LABEL_109:
  __break(0x5507u);
LABEL_110:
  __break(0x5515u);
LABEL_111:
  __break(0x550Au);
}

id sub_100013260(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sessionBufferToAppHasSpaceAvailable];
}

LABEL_30:
    __break(0x5516u);
    return;
  }

  if (v6 >= 1)
  {
    -[NSMutableData replaceBytesInRange:withBytes:length:]( *p_sessionDataFromAcc,  "replaceBytesInRange:withBytes:length:",  0LL,  v6,  0LL,  0LL);
    uint64_t v7 = 1;
    goto LABEL_19;
  }

    __break(0x550Au);
  }

  return result;
}

    __break(0x5516u);
LABEL_31:
    __break(0x5513u);
  }

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
LABEL_31:
    __break(0x5505u);
    goto LABEL_32;
  }

  uint64_t v15 = 0LL;
  id v16 = &v15;
  id v17 = 0x2020000000LL;
  id v18 = 0;
  if (!a2)
  {
    uint64_t result = (id *)objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer]( MediaPlayerHelper,  "sharedSystemMusicPlayer"),  "currentPlaybackTime");
    id v12 = v11 * 1000.0;
    if (v12 <= -1.0 || v12 >= 4294967300.0) {
      goto LABEL_31;
    }
    uint64_t v10 = v12;
    *((_DWORD *)v16 + 6) = v10;
    goto LABEL_28;
  }

  uint64_t result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004055C;
    block[3] = &unk_1001049B0;
    block[4] = &v15;
    dispatch_sync((dispatch_queue_t)result, block);
    uint64_t v10 = *((unsigned int *)v16 + 6);
LABEL_28:
    sub_1000CEA98(6u, @"MP: iPod is Now Playing App, timeElapsed=%d", v10);
    _Block_object_dispose(&v15, 8);
    goto LABEL_29;
  }

  if (!a2) {
    goto LABEL_32;
  }
  return sub_1000255A4(a2, (char *)&v21);
}

  CFBooleanRef v4 = a1;
  if ((v7 & 7) != 0)
  {
LABEL_31:
    __break(0x5516u);
LABEL_32:
    uint64_t v7 = a1;
    a1 = (uint64_t)v3;
LABEL_33:
    CFBooleanRef v4 = v7;
    return a1;
  }

  return v7;
}

  __break(0x5516u);
  return result;
}

        __break(0x5507u);
        goto LABEL_31;
      }
    }

  __break(0x5512u);
  return result;
}

    __break(0x550Au);
  }

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5503u);
  return result;
}

    __break(0x5500u);
    goto LABEL_31;
  }

      __break(0x5516u);
      goto LABEL_31;
    }

  if (((a2 + 24) & 7) != 0) {
    goto LABEL_78;
  }
  if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    if (((a2 + 8) & 7) != 0) {
      goto LABEL_78;
    }
    id v18 = a1[1];
    if (!v18) {
      goto LABEL_78;
    }
    if ((v18 & 7) != 0) {
      goto LABEL_78;
    }
    uint64_t v19 = *(unsigned __int8 *)(a2 + 8);
    id v20 = sub_10001864C(v18);
    if (!v20) {
      goto LABEL_78;
    }
    if ((v20 & 7) != 0) {
      goto LABEL_78;
    }
    id v21 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 208LL))(v20);
    sub_1000CEAEC( 0,  4,  "%s:%d Load fault %s for VPort ID %d on port %s\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  18738,  "cleared",  v19,  v21);
    uint64_t v22 = (void *)*v8;
    if ((*v8 & 7) != 0) {
      goto LABEL_78;
    }
    uint64_t v23 = a1[1];
    if (!v23 || (v23 & 7) != 0) {
      goto LABEL_78;
    }
    BOOL v24 = sub_10001864C(v23);
    sub_100087270(24LL, v11, v22, v24);
  }

  uint64_t v25 = *v8;
  if (!*v8) {
    goto LABEL_78;
  }
  if ((v25 & 7) != 0) {
    goto LABEL_78;
  }
  *(_BYTE *)(v25 + 190) = 1;
  sub_10005B598(a1 + 279, &v32);
  if (!v12)
  {
    uint64_t v28 = sub_1000B6CE0();
    if (!v28) {
      goto LABEL_78;
    }
    if ((v28 & 7) != 0) {
      goto LABEL_78;
    }
    if (!v32) {
      goto LABEL_78;
    }
    if ((v32[2] & 7LL) != 0) {
      goto LABEL_78;
    }
    (*(void (**)(uint64_t))(*(void *)v28 + 104LL))(v28);
    uint64_t v29 = v32;
    xpc_object_t v30 = v32[2];
    if (v30)
    {
      if ((v30 & 7) != 0) {
        goto LABEL_78;
      }
      (*(void (**)(void))(*(void *)v30 + 8LL))(v32[2]);
      uint64_t v29 = v32;
    }

    if (v29 && (v29 & 7) == 0 && (((_BYTE)v29 + 16) & 7) == 0)
    {
      v29[2] = 0LL;
      (*(void (**)(void *))(*v29 + 8LL))(v29);
      goto LABEL_72;
    }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

        uint64_t result = *(void *)(v2 + 1200);
        if (result && (result & 7) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 112LL))(result, 0LL);
          goto LABEL_33;
        }

    __break(0x5516u);
LABEL_31:
    __break(0x5513u);
LABEL_32:
    sub_1000D251C();
  }

  return v8;
}

          __break(0x5500u);
        }
      }

          __break(0x5513u);
          goto LABEL_31;
        }
      }

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

void sub_100013654(uint64_t a1, unsigned __int16 *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (uint64_t *)sub_100013DC4(a1, &v8, a2);
  id v5 = (void *)*v4;
  if (*v4)
  {
  }

  else
  {
    CFTypeID v6 = v4;
    memset(v7, 170, sizeof(v7));
    sub_100013EC0((void *)a1, a2, v7);
    sub_100008FEC(a1, v8, v6, (void *)v7[0]);
    id v5 = v7[0];
    v7[0] = 0LL;
    sub_100009500(v7, 0LL);
    if (!v5) {
      goto LABEL_11;
    }
  }

  if ((v5 & 7) != 0 || (((_BYTE)v5 + 32) & 7) != 0) {
LABEL_11:
  }
    __break(0x5516u);
}

uint64_t sub_100013C90(uint64_t result, unsigned __int16 *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t result = sub_100008C24(result);
      uint64_t v4 = v2 + 8;
      if (((v2 + 8) & 7) == 0)
      {
        uint64_t result = sub_100013D38(v2, a2, result, v2 + 8);
        uint64_t v5 = result;
        if (v4 == result) {
          return v4;
        }
        if ((((_BYTE)v2 + 16) & 7) == 0)
        {
          return v4;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100013D38(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (!a3) {
      return a4;
    }
    if ((((_BYTE)a1 + 16) & 7) == 0 && (a3 & 7) == 0)
    {
      while (((a3 + 32) & 7) == 0)
      {
        if (*(unsigned __int16 *)(a3 + 32) >= *a2)
        {
          uint64_t v4 = *(void *)a3;
          if (!*(void *)a3) {
            return a3;
          }
        }

        else
        {
          if (((a3 + 8) & 7) != 0) {
            break;
          }
          uint64_t v4 = *(void *)(a3 + 8);
          if (!v4) {
            return a4;
          }
          a3 = a4;
        }

        if ((v4 & 7) != 0) {
          break;
        }
        a4 = a3;
        a3 = v4;
      }
    }
  }

  __break(0x5516u);
  return a3;
}

uint64_t sub_100013DC4(uint64_t a1, uint64_t *a2, unsigned __int16 *a3)
{
  if (!a1 || (v5 = a1, (a1 & 7) != 0) || (uint64_t v4 = a2, a1 = sub_100008C24(a1), v7 = v5 + 8, ((v5 + 8) & 7) != 0))
  {
LABEL_20:
    __break(0x5516u);
LABEL_21:
    uint64_t v7 = a1;
    a1 = (uint64_t)v3;
    goto LABEL_22;
  }

  if (a1)
  {
    if ((((_BYTE)v5 + 16) & 7) == 0 && (a1 & 7) == 0)
    {
      unsigned int v8 = *a3;
      while (((a1 + 32) & 7) == 0)
      {
        unsigned int v9 = *(unsigned __int16 *)(a1 + 32);
        if (v8 >= v9)
        {
          if (v9 >= v8)
          {
            uint64_t *v4 = a1;
            if ((v7 & 7) == 0) {
              return v7;
            }
            goto LABEL_20;
          }

          pthread_mutexattr_t v3 = (uint64_t *)(a1 + 8);
          if (((a1 + 8) & 7) != 0) {
            goto LABEL_20;
          }
          uint64_t v10 = *v3;
          if (!*v3) {
            goto LABEL_21;
          }
          a1 += 8LL;
        }

        else
        {
          uint64_t v10 = *(void *)a1;
          if (!*(void *)a1)
          {
            uint64_t v7 = a1;
            goto LABEL_22;
          }
        }

        if ((v10 & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v7 = a1;
        a1 = v10;
      }
    }

    goto LABEL_20;
  }

  a1 = v5 + 8;
LABEL_22:
  uint64_t *v4 = v7;
  return a1;
}

void *sub_100013EC0@<X0>(void *result@<X0>, _WORD *a2@<X1>, void *a3@<X8>)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v4 = (char *)(result + 1), ((unint64_t)(result + 1) & 7) != 0)
    || (memset(a3, 170, 24), uint64_t result = operator new(0x30uLL),
                             *a3 = result,
                             a3[1] = v4,
                             (result & 7) != 0)
    || ((unint64_t)(result + 4) & 7) != 0
    || (((_BYTE)result + 32) & 1) != 0
    || (*((_WORD *)result + 16) = *a2, *((_BYTE *)a3 + 16) = 1, ((unint64_t)(result + 5) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[5] = 0LL;
    *((_BYTE *)a3 + 17) = 1;
  }

  return result;
}

void sub_100013F58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
  if (a2) {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
  }
  else {
    unsigned int v9 = 0LL;
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100014044;
  v11[3] = &unk_100101D28;
  id v12 = v7;
  id v10 = v7;
  +[ACCAuthorizationManager requestAuthorizationForCertSerial:withName:providesPower:completionHandler:]( &OBJC_CLASS___ACCAuthorizationManager,  "requestAuthorizationForCertSerial:withName:providesPower:completionHandler:",  v8,  v9,  a3,  v11);
  if (a2) {
}
  }

void sub_100014044(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v3, a2);
  }
  NSLog(@"Authorization status: %d", v2);
}

void sub_1000140D0(id a1)
{
  if (CFPreferencesGetAppBooleanValue(@"StackshotOnDelay", @"com.apple.iapd", 0LL))
  {
    NSLog(@"stackshots enabled");
    qword_10011BB30 = objc_alloc_init(&OBJC_CLASS___IAPStackshot);
  }

uint64_t sub_10001439C()
{
  if (qword_10011BB48 != -1) {
    dispatch_once(&qword_10011BB48, &stru_100101D68);
  }
  return qword_10011BB40;
}

void sub_1000143DC(id a1)
{
  uint64_t v1 = operator new(0x48uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = (uint64_t)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100014438(v1);
    qword_10011BB40 = v2;
  }

void sub_100014424(_Unwind_Exception *a1)
{
}

void *sub_100014438(void *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100101D98;
    result[1] = objc_alloc_init(&OBJC_CLASS___NSLock);
    v1[6] = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v1[7] = 0LL;
    v1[8] = 0LL;
    return v1;
  }

  return result;
}

uint64_t sub_100014498(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100101D98;

    return v1;
  }

  return result;
}

uint64_t sub_1000144EC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100014498(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100014500(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100014498(a1);
    operator delete((void *)a1);
  }

void sub_100014538(_Unwind_Exception *a1)
{
}

uint64_t sub_10001454C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = sub_1000C3B18(a2, 0LL);
      if (result)
      {
        if ((result & 7) == 0) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16LL))(result, v2);
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10001459C(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0) || (result = sub_1000C3B18(a2, 0LL)) == 0 || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 24LL))(result, v2);
    [*(id *)(v2 + 8) lock];

    *(void *)(v2 + 56) = 0LL;
    [*(id *)(v2 + 48) removeAllObjects];
    *(void *)(v2 + 64) = 0LL;
    return (uint64_t)[*(id *)(v2 + 8) unlock];
  }

  return result;
}

void sub_100014614(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
LABEL_53:
  }
    __break(0x5516u);
  CFTypeID v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  switch(a2)
  {
    case 983041:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDeviceReady");
      uint64_t v7 = sub_1000C3B18(a3, 0LL);
      if (!v7) {
        goto LABEL_48;
      }
      uint64_t v8 = v7;
      if ((v7 & 7) != 0) {
        goto LABEL_53;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 128LL))(v7))
      {
        id v9 = objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "isFakedLocationDeviceEnabled");
        if ((_DWORD)v9) {
          uint64_t v10 = 3LL;
        }
        else {
          uint64_t v10 = 0LL;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112LL))(v8, v10);
        (*(void (**)(uint64_t, id, void))(*(void *)v8 + 160LL))(v8, v9, 0LL);
      }

      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 176LL))(v8))
      {
        LOBYTE(__b[0]) = 0;
        (*(void (**)(uint64_t, void))(*(void *)v8 + 200LL))(v8, 0LL);
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v8 + 224LL))(v8, __b);
      }

      uint64_t v11 = sub_1000BE638();
      if (!v11 || (v11 & 7) != 0) {
        goto LABEL_53;
      }
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 96LL))(v11, a3)) {
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "updateLocationSupport:isReady:",  a3,  1);
      }
      else {
        NSLog(@"ERROR - no accDetails for location accessory with connectionID = %hhx", a3);
      }
      goto LABEL_49;
    case 983046:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_NMEAFiltering");
      uint64_t v12 = sub_1000C3B18(a3, 0LL);
      if (!v12) {
        goto LABEL_48;
      }
      LOBYTE(__b[0]) = 0;
      if ((v12 & 7) != 0) {
        goto LABEL_53;
      }
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v12 + 192LL))(v12, __b);
      id v13 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      if (LOBYTE(__b[0]) >= 2u)
      {
        __break(0x550Au);
      }

      else
      {
        [v13 setFakedLocationDeviceFilteringSupport:LOBYTE(__b[0]) != 0];
LABEL_49:
      }

      return;
    case 983048:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_NMEASentence");
      if (!objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "isFakedLocationDeviceEnabled")) {
        goto LABEL_49;
      }
      memset(__b, 170, sizeof(__b));
      uint64_t v14 = sub_1000C3B18(a3, 0LL);
      if (!v14) {
        goto LABEL_48;
      }
      if ((v14 & 7) != 0) {
        goto LABEL_53;
      }
      if ((*(unsigned int (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v14 + 240LL))(v14, __b, 1024LL))
      {
        uint64_t v15 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", __b);
        if (v15)
        {
          id v16 = v15;
          [*(id *)(a1 + 8) lock];
          [*(id *)(a1 + 48) addObject:v16];
          [*(id *)(a1 + 8) unlock];
          objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationDeviceNMEAAvailable");
        }

        else
        {
          NSLog(@"ERROR - string returned from GetNMEASentence was invalid.", v22);
        }
      }

      else
      {
        NSLog(@"ERROR - GetNMEASentence returned NULL", v22);
      }

      goto LABEL_49;
    case 983049:
      id v17 = @"evLocDataAvail_LocationAsyncNotifications";
      goto LABEL_35;
    case 983050:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_LocationPointData");
      if (objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "isFakedLocationDeviceEnabled")) {
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationDevicePointDataAvailable");
      }
      goto LABEL_49;
    case 983051:
      id v17 = @"evLocDataAvail_SatelliteEphemeris";
LABEL_35:
      sub_1000CEA98(5u, @"Location Event: %@", v17);
      goto LABEL_49;
    case 983052:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_SatelliteEphemerisURL");
      uint64_t v18 = sub_1000C3B18(a3, 0LL);
      if (!v18) {
        goto LABEL_48;
      }
      uint64_t v19 = v18;
      memset(__b, 170, sizeof(__b));
      if ((v19 & 7) != 0) {
        goto LABEL_53;
      }
      (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v19 + 384LL))(v19, __b, 1024LL);
      [*(id *)(a1 + 8) lock];

      *(void *)(a1 + 56) = -[NSString initWithUTF8String:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithUTF8String:",  __b);
      objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationDeviceEphemerisURLAvailable");
      goto LABEL_45;
    case 983053:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_SatelliteEphemerisMaxInterval");
      uint64_t v20 = sub_1000C3B18(a3, 0LL);
      if (!v20) {
        goto LABEL_48;
      }
      __b[0] = -1431655766;
      if ((v20 & 7) != 0) {
        goto LABEL_53;
      }
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v20 + 408LL))(v20, __b);
      [*(id *)(a1 + 8) lock];
      *(_DWORD *)(a1 + 64) = 3600 * LOWORD(__b[0]) + 60 * BYTE2(__b[0]) + HIBYTE(__b[0]);
      objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationDeviceEphemerisMaxIntervalAvailable");
      goto LABEL_45;
    case 983054:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_SatelliteEphemerisRecInterval");
      uint64_t v21 = sub_1000C3B18(a3, 0LL);
      if (!v21) {
        goto LABEL_48;
      }
      __b[0] = -1431655766;
      if ((v21 & 7) != 0) {
        goto LABEL_53;
      }
      (*(void (**)(uint64_t, _DWORD *))(*(void *)v21 + 432LL))(v21, __b);
      [*(id *)(a1 + 8) lock];
      *(_DWORD *)(a1 + 6_Block_object_dispose(va, 8) = 3600 * LOWORD(__b[0]) + 60 * BYTE2(__b[0]) + HIBYTE(__b[0]);
      objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationDeviceEphemerisRefreshIntervalAvailable");
LABEL_45:
      [*(id *)(a1 + 8) unlock];
      goto LABEL_49;
    case 983055:
      sub_1000CEA98(5u, @"Location Event: %@", @"evLocDataAvail_GPSTimeRequest");
      if (sub_1000C3B18(a3, 0LL)) {
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "fakedLocationRequestGPSTime");
      }
      else {
LABEL_48:
      }
        NSLog(@"device not found for connectionID=0x%x", a3);
      goto LABEL_49;
    default:
      goto LABEL_49;
  }

void sub_100014BEC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
}
  }

BOOL sub_100014C18(BOOL result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [*(id *)(result + 8) lock];
    id v2 = [*(id *)(v1 + 48) count];
    [*(id *)(v1 + 8) unlock];
    return v2 != 0LL;
  }

  return result;
}

NSString *sub_100014C68(NSString *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [result[1] lock];
    if ([v1[6] count])
    {
      id v2 = (NSString *)objc_msgSend(objc_msgSend(v1[6], "objectAtIndex:", 0), "copy");
      [v1[6] removeObjectAtIndex:0];
    }

    else
    {
      id v2 = objc_alloc_init(&OBJC_CLASS___NSString);
    }

    [v1[1] unlock];
    return v2;
  }

  return result;
}

id *sub_100014CE8(id *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      CFPropertyListRef v2 = CFPreferencesCopyAppValue(@"useTestEphemerisURL", @"com.apple.iapd");
      id v3 = (id)v2;
      if (v1[7] && v2)
      {
        CFTypeID v4 = CFGetTypeID(v2);
        if (v4 == CFStringGetTypeID())
        {
          NSLog(@"using fake ephemeris file: %@", v3);
          return (id *)v3;
        }
      }

      else if (!v2)
      {
LABEL_9:
        [v1[1] lock];
        id v5 = v1[7];
        if (v5) {
          id v3 = [v5 copy];
        }
        else {
          id v3 = 0LL;
        }
        [v1[1] unlock];
        return (id *)v3;
      }

      CFRelease(v3);
      goto LABEL_9;
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_100014DAC(void *result)
{
  else {
    *uint64_t result = off_100101DF0;
  }
  return result;
}

uint64_t sub_100014DCC(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100014DE0(void *__p)
{
  else {
    operator delete(__p);
  }
}

void sub_100014DF4(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_25;
  }
  id v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 != 262145) {
    goto LABEL_24;
  }
  uint64_t v6 = sub_1000BD830();
  if (!v6) {
    goto LABEL_25;
  }
  uint64_t v7 = v6;
  if ((v6 & 7) != 0) {
    goto LABEL_25;
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 96LL))(v7);
  if (!v8) {
    goto LABEL_24;
  }
  int v9 = v8;
  uint64_t v10 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v8);
  if (v9 >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 104LL))(__p, v7, v11);
      if (v22 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      id v13 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v12);
      if (v13) {
        uint64_t v14 = (const __CFString *)v13;
      }
      else {
        uint64_t v14 = &stru_10010A828;
      }
      -[NSMutableArray addObject:](v10, "addObject:", v14);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = (v11 + 1);
    }

    while (v9 != (_DWORD)v11);
  }

  uint64_t v15 = sub_1000BE638();
  if (!v15 || (v15 & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 104LL))(v15, a3);
  if (!v16)
  {
LABEL_24:

    return;
  }

  uint64_t v17 = v16;
  id v18 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  if ((v17 & 7) == 0)
  {
    uint64_t v19 = v18;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40LL))(v17);
    [v19 updateSpeakerMenu:v20 withEqNames:v10 andSelection:(*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7)];
    goto LABEL_24;
  }

void sub_100014FB8( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100014FD0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100015744()
{
  if (qword_10011BB58 != -1) {
    dispatch_once(&qword_10011BB58, &stru_100101E38);
  }
  return qword_10011BB50;
}

void sub_100015784(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0xB8uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000157E0(v1);
    qword_10011BB50 = v2;
  }

void sub_1000157CC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000157E0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100101E68;
    *(_WORD *)(result + _Block_object_dispose(va, 8) = 0;
    *(_BYTE *)(result + 10) = 0;
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(va, 8) = 0u;
    qword_10011BB60 = objc_alloc_init(&OBJC_CLASS___IAPApplicationStateMonitor);
    [(id)qword_10011BB60 startObserving];
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = CFPreferencesGetAppBooleanValue(@"LogAttachEvents", @"com.apple.iapd", 0LL) != 0;
    byte_10011BB68 = MGGetBoolAnswer(@"wapi");
    return v1;
  }

  return result;
}

CFTypeRef *sub_1000158B0(CFTypeRef *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100101E68;
    if (qword_10011BB70)
    {
      operator delete[]((void *)qword_10011BB70);
      qword_10011BB70 = 0LL;
    }

    [(id)qword_10011BB60 stopObserving];

    qword_10011BB60 = 0LL;
    sub_1000159A8(v1 + 5);
    sub_1000159A8(v1 + 6);
    sub_1000159A8(v1 + 7);
    sub_1000159A8(v1 + 8);
    sub_1000159A8(v1 + 9);
    sub_1000159A8(v1 + 10);
    sub_1000159A8(v1 + 11);
    sub_1000159A8(v1 + 16);
    sub_1000159A8(v1 + 17);
    sub_1000159A8(v1 + 18);
    sub_1000159A8(v1 + 19);
    sub_1000159A8(v1 + 12);
    sub_1000159A8(v1 + 13);
    sub_1000159A8(v1 + 14);
    sub_1000159A8(v1 + 20);
    sub_1000159A8(v1 + 15);
    sub_1000159A8(v1 + 21);
    sub_1000159A8(v1 + 22);
    return v1;
  }

  return result;
}

void sub_1000159A8(CFTypeRef *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (__CFUserNotification *)*a1;
    if (*a1)
    {
      CFUserNotificationCancel(v2);
      CFRelease(*a1);
      *a1 = 0LL;
    }
  }

CFTypeRef *sub_1000159EC(CFTypeRef *result)
{
  return result;
}

void sub_100015A00(CFTypeRef *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000158B0(a1);
    operator delete(a1);
  }

void sub_100015A38(_Unwind_Exception *a1)
{
}

void sub_100015A4C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    goto LABEL_184;
  }
  uint64_t v6 = a1;
  uint64_t v11 = sub_1000BE638();
  if (!v11) {
    goto LABEL_184;
  }
  uint64_t v12 = v11;
  if ((v11 & 7) != 0) {
    goto LABEL_184;
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 96LL))(v11, a3);
  if (!v13)
  {
    NSLog(@"AccessoryManagerEventHandler::SendISLNotification() got called and can't get accessory Details ignoring");
    return;
  }

  uint64_t v7 = v13;
  if ((v13 & 7) != 0
    || (uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104LL))(v13),
        CFTypeID v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool),
        sub_1000BE638(),
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7),
        uint64_t v5 = sub_1000BF55C(v15),
        (uint64_t v16 = sub_1000B6CE0()) == 0)
    || (v16 & 7) != 0)
  {
LABEL_184:
    __break(0x5516u);
  }

  else
  {
    uint64_t v17 = sub_10008E168(v16, v5);
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56LL))(v6, a2, a3, a4);
    switch((int)a2)
    {
      case 65537:
      case 65538:
      case 65542:
        sub_100019370();
        if ((_DWORD)a2 == 65537)
        {
          uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
          uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 152LL))(v12, v39);
          if ((v40 & 0xF) != 0)
          {
            uint64_t v41 = v40;
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 144LL))(v12, v42, v41);
          }

          if (v6[9] > 1u) {
            break;
          }
          if (v6[9]) {
            objc_msgSend(+[EAManager sharedManager](EAManager, "sharedManager"), "reset");
          }
          if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v7))
          {
            uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v7);
            if (!v43 || (v43 & 7) != 0) {
              goto LABEL_184;
            }
            if (sub_100010620(v43) && sub_1000167D0(v14))
            {
              uint64_t v44 = sub_1000438B8();
              if (!v44 || (v44 & 7) != 0) {
                goto LABEL_184;
              }
              io_registry_entry_t v45 = sub_100043814(v44);
              if (v45)
              {
                io_object_t v46 = v45;
                IORegistryEntrySetCFProperty(v45, @"VirtualMode", kCFBooleanTrue);
                IOObjectRelease(v46);
              }
            }
          }

          (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)v6 + 48LL))(v6, a3);
        }

        else if ((_DWORD)a2 == 65538)
        {
          if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7) & 0x4000) != 0)
          {
            objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "updateLocationSupport:isReady:",  a3,  0);
            uint64_t v18 = sub_10001439C();
            if (!v18) {
              goto LABEL_184;
            }
            uint64_t v19 = v18;
            if ((v18 & 7) != 0) {
              goto LABEL_184;
            }
            uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
            sub_10001459C(v19, v20);
          }

          v6[9] = 0;
          uint64_t v21 = sub_10004783C();
          if (v21 && (v21 & 7) == 0)
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 264LL))(v21, v17))
            {
              uint64_t v22 = sub_10004783C();
              if (!v22 || (v22 & 7) != 0) {
                goto LABEL_184;
              }
              (*(void (**)(uint64_t, uint64_t, void))(*(void *)v22 + 256LL))(v22, v17, 0LL);
            }

            uint64_t v23 = sub_10004783C();
            if (v23 && (v23 & 7) == 0)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v23 + 592LL))(v23, v17))
              {
                uint64_t v24 = sub_10004783C();
                if (!v24 || (v24 & 7) != 0) {
                  goto LABEL_184;
                }
                (*(void (**)(uint64_t, uint64_t, void))(*(void *)v24 + 584LL))(v24, v17, 0LL);
              }

              uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v7);
              if (v25 && (v25 & 7) == 0)
              {
                if (sub_100010620(v25))
                {
                  uint64_t v26 = sub_1000438B8();
                  if (!v26 || (v26 & 7) != 0) {
                    goto LABEL_184;
                  }
                  io_registry_entry_t v27 = sub_100043814(v26);
                  if (v27)
                  {
                    io_registry_entry_t v28 = v27;
                    CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty( v27,  @"VirtualMode",  kCFAllocatorDefault,  0);
                    if (CFProperty)
                    {
                      xpc_object_t v30 = CFProperty;
                      if (kCFBooleanTrue == CFProperty) {
                        IORegistryEntrySetCFProperty(v28, @"VirtualMode", kCFBooleanFalse);
                      }
                      CFRelease(v30);
                    }

                    IOObjectRelease(v28);
                  }
                }

                id v31 = sub_10002645C();
                if (v31)
                {
                  NSUInteger v32 = v31;
                  uint64_t v33 = sub_100042AC4();
                  if (!v33 || (v33 & 7) != 0) {
                    goto LABEL_184;
                  }
                  if (((*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v33 + 152LL))(v33, v32, 0LL) & 1) == 0)
                  {
                    uint64_t v34 = sub_100042AC4();
                    if (!v34 || (v34 & 7) != 0) {
                      goto LABEL_184;
                    }
                    if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v34 + 168LL))(v34, v32) & 1) == 0)
                    {
                      uint64_t v35 = sub_100042AC4();
                      if (!v35 || (v35 & 7) != 0) {
                        goto LABEL_184;
                      }
                      sub_100043770(v35);
                    }
                  }
                }

                sub_100016728((uint64_t)v6);
                sub_1000159A8((CFTypeRef *)v6 + 8);
                uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160LL))(v7);
                if (v36 && (v36 & 7) == 0)
                {
                  if (sub_100010620(v36))
                  {
                    sub_1000159A8((CFTypeRef *)v6 + 7);
                    sub_1000159A8((CFTypeRef *)v6 + 6);
                  }

                  objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "preventIdleSleep:",  0);
                  uint64_t v37 = sub_100018664();
                  if (v37)
                  {
                    if ((v37 & 7) == 0)
                    {
                      uint64_t v38 = sub_100018664();
                      if (v38)
                      {
                        if ((v38 & 7) == 0)
                        {
                          (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v38 + 16LL))( v38,  655364LL,  0LL,  0LL);
                          goto LABEL_84;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

          goto LABEL_184;
        }

        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 32LL))(v7) == 16
          && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 24LL))(v7) == 13)
        {
          uint64_t v47 = sub_10004783C();
          if (!v47 || (v47 & 7) != 0) {
            goto LABEL_184;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47 + 584LL))(v47, v17, 2LL);
        }

        switch((int)a2)
        {
          case 65537:
            objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "attachAccessory:forTransport:",  v7,  v17);
            break;
          case 65538:
          case 65541:
            goto LABEL_84;
          case 65540:
            goto LABEL_91;
          case 65542:
            objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "updateAccessoryInfo:",  v7);
            if (!v17 || (v17 & 7) != 0) {
              goto LABEL_184;
            }
            uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104LL))(v7);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 336LL))(v17, v67);
            break;
          default:
            goto LABEL_181;
        }

        goto LABEL_181;
      case 65539:
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7) & 0x4000) != 0)
        {
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
          sub_1000C3B18(v5, 0LL);
          uint64_t v62 = sub_10001439C();
          if (!v62 || (v62 & 7) != 0) {
            goto LABEL_184;
          }
          sub_10001454C(v62, v5);
        }

        goto LABEL_181;
      case 65540:
LABEL_91:
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "updateAccessoryProtocols:",  v7);
        memset(v71, 170, sizeof(v71));
        if (v5) {
          BOOL v50 = (v5 & 7) == 0;
        }
        else {
          BOOL v50 = 0;
        }
        if (!v50) {
          goto LABEL_184;
        }
        uint64_t v6 = (unsigned __int8 *)v71;
        sub_1000588D8((void *)v5, v71);
        uint64_t v51 = (void *)v71[1];
        char v70 = (void *)v71[1];
        while (v51 != v71)
        {
          uint64_t v7 = *sub_10000D014((uint64_t *)&v70);
          if (v7) {
            BOOL v52 = (v7 & 7) == 0;
          }
          else {
            BOOL v52 = 0;
          }
          if (!v52 || ((v7 + 16) & 7) != 0) {
            goto LABEL_184;
          }
          if (*(_BYTE *)(v7 + 16))
          {
            uint64_t v54 = sub_10004783C();
            if (!v54 || (v54 & 7) != 0 || (((_BYTE)v7 + 8) & 7) != 0) {
              goto LABEL_184;
            }
            (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)v54 + 680LL))( v54,  *(void *)v7,  *(void *)(v7 + 8),  0LL,  v5);
            char v55 = 1;
          }

          else
          {
            uint64_t v56 = sub_10004783C();
            if (!v56 || (v56 & 7) != 0 || (((_BYTE)v7 + 8) & 7) != 0) {
              goto LABEL_184;
            }
            (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v56 + 688LL))( v56,  *(void *)v7,  *(void *)(v7 + 8),  1LL);
            char v55 = 0;
          }

          *(_BYTE *)(v7 + 17) = v55;
          sub_10000D048(&v70);
          uint64_t v51 = v70;
        }

        sub_1000180FC((uint64_t)v71);
        goto LABEL_181;
      case 65541:
LABEL_84:
        objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "detachAccessory:",  (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7));
        if (*((void *)v6 + 10)) {
          sub_1000159A8((CFTypeRef *)v6 + 10);
        }
        if ((_DWORD)a2 == 65538)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88LL))(v7) == 12)
          {
            memset(v71, 170, sizeof(v71));
            if (!v5 || (v5 & 7) != 0) {
              goto LABEL_184;
            }
            uint64_t v6 = (unsigned __int8 *)v71;
            sub_1000588D8((void *)v5, v71);
            uint64_t v63 = (void *)v71[1];
            char v70 = (void *)v71[1];
            while (v63 != v71)
            {
              uint64_t v7 = *sub_10000D014((uint64_t *)&v70);
              if (v7) {
                BOOL v64 = (v7 & 7) == 0;
              }
              else {
                BOOL v64 = 0;
              }
              if (!v64) {
                goto LABEL_184;
              }
              if (*(_BYTE *)(v7 + 17))
              {
                uint64_t v65 = sub_10004783C();
                if (!v65 || (v65 & 7) != 0 || (((_BYTE)v7 + 8) & 7) != 0) {
                  goto LABEL_184;
                }
                (*(void (**)(uint64_t, void, void, void))(*(void *)v65 + 688LL))( v65,  *(void *)v7,  *(void *)(v7 + 8),  0LL);
                *(_BYTE *)(v7 + 17) = 0;
              }

              sub_10000D048(&v70);
              uint64_t v63 = v70;
            }

            sub_1000180FC((uint64_t)v71);
            BOOL v66 = 1;
          }

          else
          {
            BOOL v66 = (v5 & 7) == 0;
          }

          if (!v5 || !v66) {
            goto LABEL_184;
          }
          sub_1000588B8(v5);
        }

        else if ((_DWORD)a2 == 65541)
        {
          unsigned __int8 v48 = atomic_load((unsigned __int8 *)&qword_10011BB80);
          uint64_t v5 = (uint64_t)&off_10011B000;
          if ((v48 & 1) == 0) {
            goto LABEL_186;
          }
          goto LABEL_89;
        }

        goto LABEL_181;
      case 65543:
        MGGetBoolAnswer(@"telephony");
        goto LABEL_181;
      case 65546:
        objc_msgSend( +[IAPGroupedCommandManager sharedManager](IAPGroupedCommandManager, "sharedManager"),  "startGrouping:",  v17);
        goto LABEL_181;
      case 65547:
        objc_msgSend( +[IAPGroupedCommandManager sharedManager](IAPGroupedCommandManager, "sharedManager"),  "applyAndCancelGrouping:",  v17);
        goto LABEL_181;
      case 65548:
        objc_msgSend( +[IAPGroupedCommandManager sharedManager](IAPGroupedCommandManager, "sharedManager"),  "cancelGrouping:",  v17);
        goto LABEL_181;
      case 65549:
        sub_100016624((uint64_t)v6);
        goto LABEL_181;
      case 65551:
        sub_1000159A8((CFTypeRef *)v6 + 11);
        uint64_t v61 = (CFTypeRef *)(v6 + 72);
        goto LABEL_145;
      case 65552:
        if ((a4 & 3) != 0) {
          goto LABEL_184;
        }
        if (!a4) {
          goto LABEL_184;
        }
        uint64_t v5 = a4 + 4;
        if (((a4 + 4) & 3) != 0) {
          goto LABEL_184;
        }
        uint64_t v57 = *(unsigned int *)v5;
        NSLog(@"accessory status changed: connectionID=%lu, infoType=%d", a3, v57);
        int v58 = *(_DWORD *)v5;
        if (*(_DWORD *)v5 > 7u) {
          break;
        }
        switch(v58)
        {
          case 1:
            LODWORD(v71[0]) = a3;
            uint64_t v69 = sub_10004783C();
            if (v69 && (v69 & 7) == 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v69 + 672LL))(v69, v71, a4);
              goto LABEL_181;
            }

            goto LABEL_184;
          case 3:
            if (((a4 + 8) & 3) != 0) {
              goto LABEL_184;
            }
            unsigned int v68 = *(_DWORD *)(a4 + 8);
            if (v68 <= 1)
            {
              if (v68 != 1)
              {
                uint64_t v61 = (CFTypeRef *)(v6 + 176);
LABEL_145:
                sub_1000159A8(v61);
                goto LABEL_181;
              }

              sub_1000165B0((uint64_t)v6);
              goto LABEL_181;
            }

            break;
          case 2:
            if (((a4 + 8) & 3) != 0) {
              goto LABEL_184;
            }
            unsigned int v59 = *(_DWORD *)(a4 + 8);
            if (v59 > 3) {
              goto LABEL_185;
            }
            if (v59 != 1)
            {
LABEL_183:
              uint64_t v61 = (CFTypeRef *)(v6 + 144);
              goto LABEL_145;
            }

            if (((a4 + 12) & 3) != 0) {
              goto LABEL_184;
            }
            unsigned int v60 = *(_DWORD *)(a4 + 12);
            if (v60 <= 3)
            {
              if (v60 == 2)
              {
                sub_10001656C((uint64_t)v6);
                goto LABEL_181;
              }

              goto LABEL_183;
            }

            break;
          default:
            goto LABEL_181;
        }

        break;
      case 65553:
        sub_100016668((uint64_t)v6);
        goto LABEL_181;
      case 65554:
        uint64_t v61 = (CFTypeRef *)(v6 + 128);
        goto LABEL_145;
      case 65557:
        sub_1000166E4((uint64_t)v6);
        goto LABEL_181;
      case 65558:
        uint64_t v61 = (CFTypeRef *)(v6 + 136);
        goto LABEL_145;
      default:
        goto LABEL_181;
    }
  }

LABEL_185:
  __break(0x550Au);
LABEL_186:
  if (__cxa_guard_acquire(&qword_10011BB80))
  {
    *(_BYTE *)(v5 + 2936) = CFPreferencesGetAppBooleanValue(@"NotifyAuthFailState", @"com.apple.iapd", 0LL) != 0;
    __cxa_guard_release(&qword_10011BB80);
  }

LABEL_89:
  if ((*(_BYTE *)(v5 + 2936) & 1) != 0)
  {
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40LL))(v7);
    sub_100016850((uint64_t)v6, v49);
  }

          __break(0x550Au);
          goto LABEL_90;
        }

        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 216LL))(v4);
        uint64_t result = qword_10011C630[result];
        if (!result || (result & 7) != 0) {
          goto LABEL_86;
        }
        if (v9 >= *v11)
        {
          uint64_t v12 = *(unsigned int *)(result + 76);
          if (dword_10011B8F8[v12]) {
            (*(void (**)(uint64_t, void, void, void))(*(void *)result + 104LL))( result,  v9 - *v11,  0LL,  0LL);
          }
          goto LABEL_62;
        }

LABEL_181:
}

void sub_100016540(_Unwind_Exception *a1)
{
}

void sub_10001656C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100016AB8( (uint64_t)@"ACCESSORY_LOAD_FAULT_TITLE",  @"ACCESSORY_LOAD_FAULT_MSG",  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 144),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }
}

void sub_1000165B0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    CFStringRef v2 = sub_1000169E0((uint64_t)@"ACCESSORY_UNRELIABLE");
    sub_100016AB8( (uint64_t)v2,  0LL,  (uint64_t)@"DISMISS_STRING",  0LL,  (CFTypeRef *)(a1 + 176),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v2) {
      CFRelease(v2);
    }
  }

void sub_100016624(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100016AB8( (uint64_t)@"TOO_MANY_ACCESSORIES_TITLE",  @"TOO_MANY_ACCESSORIES_MSG",  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 72),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }
}

void sub_100016668(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    CFStringRef v2 = sub_1000169E0((uint64_t)@"INVALID_VPORT_ACCESSORY_MSG");
    sub_100016AB8( (uint64_t)@"INVALID_VPORT_ACCESSORY_TITLE",  v2,  (uint64_t)@"DISMISS_STRING",  0LL,  (CFTypeRef *)(a1 + 128),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v2) {
      CFRelease(v2);
    }
  }

void sub_1000166E4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100016AB8( (uint64_t)@"ACCESSORY_LOAD_FAULT_TITLE",  @"ACCESSORY_THROUGH_VPORT_LOAD_FAULT_MSG",  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 136),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }
}

void sub_100016728(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(a1 + 10) = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    sub_1000159A8((CFTypeRef *)(a1 + 40));
  }

void sub_100016754(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    CFStringRef v2 = sub_1000169E0((uint64_t)@"NO_RECEIVER_REQUIRED_MSG_FOR_DEVICE");
    sub_100016AB8( (uint64_t)@"NO_RECEIVER_REQUIRED_TITLE",  v2,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 64),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v2) {
      CFRelease(v2);
    }
  }

BOOL sub_1000167D0(BOOL result)
{
  if (result)
  {
    uint64_t v1 = (const char *)result;
    if (result & 3) {
      __break(0x5516u);
    }
    else {
      return !strncmp((const char *)(result + 104), "Apple", 6uLL)
    }
          && !strncmp(v1, "DP Dummy Load", 0xEuLL)
          && strncmp(v1 + 168, "DUMMY", 6uLL) == 0;
  }

  return result;
}

void sub_100016850(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_24;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_24;
  }
  int v15 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v4 = sub_1000BE638();
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 96LL))(v4, a2);
  uint64_t v6 = (NSString *)v5;
  if (v5)
  {
    if ((v5 & 7) != 0) {
      goto LABEL_24;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104LL))(v5);
    if (!v7 || (v7 & 3) != 0) {
      goto LABEL_24;
    }
    int v9 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7);
    uint64_t v10 = (*((uint64_t (**)(NSString *))*v6 + 20))(v6);
    if (!v10 || (v10 & 7) != 0) {
      goto LABEL_24;
    }
    uint64_t v6 = +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  (*(uint64_t (**)(uint64_t))(*(void *)v10 + 208LL))(v10),  1LL);
  }

  else
  {
    int v9 = 0LL;
  }

  uint64_t v12 = sub_10002CD78();
  if (!v12 || (v12 & 7) != 0)
  {
LABEL_24:
    __break(0x5516u);
    return;
  }

  uint64_t v13 = sub_10002D200((__CFString *)v12, (uint64_t)@"ACC_AUTH_LOCKOUT_DESCRIPTION");
  StringWithValidatedFormat = CFStringCreateStringWithValidatedFormat( kCFAllocatorDefault,  0LL,  @"%@%@",  v13,  0LL,  v9,  v6);
  CFRelease(v13);
  sub_100016AB8( (uint64_t)@"INVALID_VPORT_ACCESSORY_TITLE",  StringWithValidatedFormat,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 168),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  if (StringWithValidatedFormat) {
    CFRelease(StringWithValidatedFormat);
  }
}

CFStringRef sub_1000169E0(uint64_t a1)
{
  CFStringRef v2 = (const __CFString *)objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "deviceClass");
  if (CFStringCompare(v2, @"iPhone", 0LL))
  {
    if (CFStringCompare(v2, @"iPad", 0LL))
    {
      if (CFStringCompare(v2, @"AppleTV", 0LL)) {
        id v3 = @"IPOD";
      }
      else {
        id v3 = @"APPLETV";
      }
    }

    else
    {
      id v3 = @"IPAD";
    }
  }

  else
  {
    id v3 = @"IPHONE";
  }

  CFStringRef v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@_%@", a1, v3);
  CFRelease(v3);
  return v4;
}

void sub_100016AB8( uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, CFTypeRef *a5, void (__cdecl *a6)(CFUserNotificationRef, CFOptionFlags), CFTimeInterval a7)
{
  SInt32 error = 0;
  if (!a1)
  {
    int v15 = &stru_10010A828;
    if (a2) {
      goto LABEL_5;
    }
LABEL_18:
    a2 = &stru_10010A828;
    if (a3) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v19 = &stru_10010A828;
    if (a4) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }

  uint64_t v14 = sub_10002CD78();
  if (!v14 || (v14 & 7) != 0) {
    goto LABEL_29;
  }
  int v15 = sub_10002D200((__CFString *)v14, a1);
  if (!a2) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v16 = sub_10002CD78();
  if (!v16 || (v16 & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v17 = sub_10002D200((__CFString *)v16, (uint64_t)a2);
  if (CFStringCompare(v17, &stru_10010A828, 0LL)) {
    a2 = v17;
  }
  if (!a3) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v18 = sub_10002CD78();
  if (!v18 || (v18 & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v19 = sub_10002D200((__CFString *)v18, a3);
  if (a4)
  {
LABEL_13:
    uint64_t v20 = sub_10002CD78();
    if (!v20) {
      goto LABEL_29;
    }
    if ((v20 & 7) != 0) {
      goto LABEL_29;
    }
    uint64_t v21 = sub_10002D200((__CFString *)v20, a4);
    uint64_t v22 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v15,  kCFUserNotificationAlertHeaderKey,  a2,  kCFUserNotificationAlertMessageKey,  v19,  kCFUserNotificationDefaultButtonTitleKey,  v21,  kCFUserNotificationAlternateButtonTitleKey,  kCFBooleanTrue,  kCFUserNotificationAlertTopMostKey,  kCFBooleanTrue,  @"DismissOnLock",  0LL);
    if (!a5) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }

LABEL_20:
  uint64_t v22 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v15,  kCFUserNotificationAlertHeaderKey,  a2,  kCFUserNotificationAlertMessageKey,  v19,  kCFUserNotificationDefaultButtonTitleKey,  kCFBooleanTrue,  kCFUserNotificationAlertTopMostKey,  kCFBooleanTrue,  @"DismissOnLock",  0LL);
  uint64_t v21 = &stru_10010A828;
  if (!a5)
  {
LABEL_29:
    __break(0x5516u);
    return;
  }

  __break(0x5516u);
  return result;
}

    __break(0x550Au);
    return;
  }

  if (a3 > 3) {
    goto LABEL_20;
  }
  if (!a2 || a3 < 2) {
    return;
  }
LABEL_12:
  int v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  int v9 = (std::string *)operator new(0x18uLL);
  if ((v9 & 0xF) != 0
    || (uint64_t v10 = v9, (v9 & 7) != 0)
    || (sub_100024DAC(v9, 1uLL, v6), uint64_t v12 = (unint64_t)v10, std::string::append(v10, a2), ((a1 + 16) & 7) != 0))
  {
LABEL_19:
    __break(0x5516u);
    goto LABEL_20;
  }

  sub_100020DF4(a1 + 16, &v12);
  if (a4)
  {
    uint64_t v11 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 8));
    +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v11,  IAPDebugSessionIDKey,  0LL);
  }
}

      return;
    }
  }

  __break(0x550Au);
}

    __break(0x5516u);
  }

  __break(0x550Au);
}

    __break(0x5516u);
  }

  __break(0x550Au);
}

    __break(0x5516u);
  }

  __break(0x550Au);
}

    __break(0x5516u);
  }

  __break(0x550Au);
}

  if (!(v5 >> 59))
  {
    id v3 = v10 + 32 * v5;
    if (!(v3 >> 16)) {
      return (unsigned __int16)v3;
    }
    goto LABEL_24;
  }

  uint64_t v10 = v8 + 1;
  if (v8 + 1 < 0x10000)
  {
LABEL_21:
    *uint64_t result = v10;
    return result;
  }

    __break(0x5516u);
  }

  return 22LL;
}

      uint64_t v11 = *v1;
      const char *v1 = v18;
      *(void *)&uint64_t v18 = v11;
      if ((v5 & 7) == 0)
      {
        uint64_t v12 = *((void *)&v18 + 1);
        NSAutoreleasePool *v5 = *((void *)&v18 + 1);
        *((void *)&v18 + 1) = v9;
        if ((v4 & 7) == 0)
        {
          uint64_t v13 = v19;
          uint64_t v14 = *(_OWORD *)v4;
          *(_OWORD *)CFStringRef v4 = v19;
          uint64_t v19 = v14;
          if (v13 != v12)
          {
            sub_10005AAD8(v17, 0LL);
            return sub_1000253A0((uint64_t)&v18);
          }

          goto LABEL_30;
        }
      }
    }

    goto LABEL_28;
  }

  if (sub_10005A298((uint64_t)v1))
  {
    *(void *)&uint64_t v18 = operator new(0x1000uLL);
    uint64_t result = sub_10005A0C0((unint64_t)v1, &v18);
    goto LABEL_26;
  }

  *(void *)&uint64_t v18 = operator new(0x1000uLL);
  sub_10005A2C4((uint64_t)v1, &v18);
  uint64_t result = sub_10005A098((uint64_t)v1);
  *(void *)&uint64_t v18 = *(void *)result;
  int v15 = v1[1];
  if (v15 >= 0xFFFFFFFFFFFFFFF8LL)
  {
LABEL_29:
    __break(0x5513u);
    goto LABEL_30;
  }

  v1[1] = v15 + 8;
  uint64_t result = sub_10005A0C0((unint64_t)v1, &v18);
LABEL_26:
  if (*v4 == *v5)
  {
LABEL_30:
    __break(0x5515u);
    goto LABEL_31;
  }

  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

                      sub_10006472C(v2);
                      return 0LL;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

        __break(0x5513u);
        goto LABEL_21;
      }
    }
  }

  return result;
}

    __break(0x550Au);
LABEL_21:
    __break(0x5516u);
    return;
  }

  int v15 = sub_1000438B8();
  if (!v15 || (v15 & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 80LL))(v15);
  uint64_t v20 = *(_DWORD *)(a1 + 1404);
  if (v16)
  {
    switch(v20)
    {
      case 0:
      case 4:
        goto LABEL_14;
      case 2:
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)a2 + 528LL);
        goto LABEL_17;
      case 3:
        sub_10009C88C(a1, a2, a3, a4, (uint64_t)a5);
        return;
      case 5:
        sub_10009C958(a1, a2, a3, a4, (uint64_t)a5);
        return;
      default:
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(void *)a2 + 496LL);
LABEL_17:
        v21(a2, a3, a4, a5);
        break;
    }
  }

  else if ((v20 | 4) == 4)
  {
LABEL_14:
    sub_10009C7BC(a1, v17, v18, v19, a5);
  }

  __break(0x5516u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

      __break(0x5516u);
      goto LABEL_21;
    }

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
LABEL_21:
  __break(0x5516u);
}

void sub_100016DB0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_21;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v4 = sub_10004783C();
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 168LL))(v4))
  {
    *(_BYTE *)(a1 + 10) = 1;
    *(_DWORD *)(a1 + 12) = a2;
    return;
  }

  sub_100016728(a1);
  *(_DWORD *)(a1 + 16) = a2;
  uint64_t v5 = sub_1000BE638();
  if (!v5 || (v5 & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 96LL))(v5, a2);
  if (v6)
  {
    if ((v6 & 7) != 0) {
      goto LABEL_21;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104LL))(v6);
    if (!v7 || (v7 & 3) != 0) {
      goto LABEL_21;
    }
    int v9 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7);
  }

  else
  {
    int v9 = 0LL;
  }

  uint64_t v10 = sub_10002CD78();
  if (v10 && (v10 & 7) == 0)
  {
    uint64_t v11 = sub_10002D200((__CFString *)v10, (uint64_t)@"FIND_APP_FOR_ACCESSORY_MSG");
    StringWithValidatedFormat = CFStringCreateStringWithValidatedFormat( kCFAllocatorDefault,  0LL,  @"%@",  v11,  0LL,  v9);
    CFRelease(v11);
    sub_100016AB8( (uint64_t)@"FIND_APP_FOR_ACCESSORY_TITLE",  StringWithValidatedFormat,  (uint64_t)@"IGNORE_STRING",  (uint64_t)@"APP_STORE_STRING",  (CFTypeRef *)(a1 + 40),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))sub_100016F20,  0.0);
    return;
  }

void sub_100016F20(uint64_t a1, uint64_t a2)
{
  id v3 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  id v4 = [v3 connectedAccessories];
  if (qword_10011BB58 != -1) {
    dispatch_once(&qword_10011BB58, &stru_100101E38);
  }
  if (!qword_10011BB50 || (qword_10011BB50 & 7) != 0 || ((qword_10011BB50 + 16) & 7) != 0) {
    goto LABEL_28;
  }
  id v5 = objc_msgSend( v4,  "filteredArrayUsingPredicate:",  +[NSPredicate predicateWithFormat:]( NSPredicate,  "predicateWithFormat:",  @"%K = %d",  IAPAppConnectionIDKey,  *(unsigned int *)(qword_10011BB50 + 16)));
  id v6 = [v5 lastObject];
  if (qword_10011BB58 != -1) {
    dispatch_once(&qword_10011BB58, &stru_100101E38);
  }
  if (!qword_10011BB50 || (qword_10011BB50 & 7) != 0 || ((qword_10011BB50 + 16) & 7) != 0) {
LABEL_28:
  }
    __break(0x5516u);
  *(_DWORD *)(qword_10011BB50 + 16) = 0;
  if ([v5 count] != (id)1) {
    NSLog( @"ERROR: EA | %lu accessories found, expected 1. Matched Accessories: %@",  [v5 count],  v5);
  }
  if (!v6) {
    return;
  }
  [v3 updatePlistWithProtocolsForAccessory:v6];
  if (a2 != 1) {
    return;
  }
  id v7 = [v6 objectForKey:IAPAppAccessoryProtocolsKey];
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (!v8) {
    goto LABEL_24;
  }
  id v9 = v8;
  uint64_t v10 = *(void *)v25;
  uint64_t v11 = &stru_10010A828;
  uint64_t v12 = 1LL;
  do
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = v12;
    uint64_t v15 = v12 ^ 0xFFFFFFFFLL;
    do
    {
      if (*(void *)v25 != v10) {
        objc_enumerationMutation(v7);
      }
      if ((void *)v15 == v13)
      {
        __break(0x5500u);
        goto LABEL_28;
      }

      uint64_t v11 = (__CFString *)-[__CFString stringByAppendingString:]( v11,  "stringByAppendingString:",  -[NSString stringByAddingPercentEscapesUsingEncoding:]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"&id%d=%@",  (char *)v13 + v14,  *(void *)(*((void *)&v24 + 1) + 8LL * (void)v13)),  "stringByAddingPercentEscapesUsingEncoding:",  4LL));
      uint64_t v13 = (char *)v13 + 1;
    }

    while (v9 != v13);
    id v9 = [v7 countByEnumeratingWithState:&v24 objects:v28 count:16];
    uint64_t v12 = (v14 + (_DWORD)v13);
  }

  while (v9);
  if ((_DWORD)v14 + (_DWORD)v13 == 1) {
LABEL_24:
  }
    uint64_t v11 = &stru_10010A828;
  id v16 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryPreferredAppKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  id v17 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryNameKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  id v18 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryManufacturerKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  id v19 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryModelNumberKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  id v20 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryFirmwareRevisionKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  id v21 = objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessoryHardwareRevisionKey),  "stringByAddingPercentEscapesUsingEncoding:",  4);
  uint64_t v22 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"itms-apps://?action=accessory-lookup%@&bid=%@&accessoryName=%@&manufacturer=%@&modelNumber=%@&firmwareVersion=%@&hardwareVersion=%@&serialNumber=%@",  v11,  v16,  v17,  v18,  v19,  v20,  v21,  objc_msgSend( objc_msgSend(v6, "objectForKey:", IAPAppAccessorySerialNumberKey),  "stringByAddingPercentEscapesUsingEncoding:",  4));
  uint64_t v23 = +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v22);
  sub_1000CEA98(3u, @"opening app store URL = %@ (%@)", v23, v22);
  objc_msgSend( +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"),  "openSensitiveURL:withOptions:",  v23,  0);
}

void sub_100017318(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100016AB8( (uint64_t)@"ACCESSORY_UNSUPPORTED",  0LL,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 48),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }
}

void sub_100017358(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    CFStringRef v2 = sub_1000169E0((uint64_t)@"ACCESSORY_UNSUPPORTED_BY");
    sub_100016AB8( (uint64_t)v2,  0LL,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 56),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v2) {
      CFRelease(v2);
    }
  }

void sub_1000173CC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    CFStringRef v2 = sub_1000169E0((uint64_t)@"ACCESSORY_UNSUPPORTED_BY");
    sub_100016AB8( (uint64_t)v2,  0LL,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 56),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  10.0);
    if (v2) {
      CFRelease(v2);
    }
  }

void sub_100017440(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  if (*(unsigned __int8 *)(a1 + 10) >= 2u)
  {
LABEL_8:
    __break(0x550Au);
    return;
  }

  if (*(_BYTE *)(a1 + 10)) {
    sub_100016DB0(a1, *(unsigned int *)(a1 + 12));
  }
}

void sub_100017470(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100016AB8( (uint64_t)@"DEMO_MODE_ACTIVATED_TITLE",  @"DEMO_MODE_ACTIVATED_MSG",  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 152),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }
}

size_t sub_1000174B4(uint64_t a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    goto LABEL_36;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_36;
  }
  SInt32 error = -1431655766;
  keys[0] = (void *)kCFUserNotificationAlertHeaderKey;
  keys[1] = (void *)kCFUserNotificationAlertMessageKey;
  keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
  keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
  keys[4] = (void *)kCFUserNotificationAlertTopMostKey;
  keys[5] = @"DismissOnLock";
  keys[6] = (void *)SBUserNotificationDefaultResponseLaunchBundleID;
  keys[7] = (void *)SBUserNotificationButtonTagForUnlockActionKey;
  values = &stru_10010A828;
  CFTypeRef cf = &stru_10010A828;
  CFTypeRef v40 = &stru_10010A828;
  v41[0] = &stru_10010A828;
  v41[1] = kCFBooleanTrue;
  v41[2] = kCFBooleanFalse;
  uint64_t v42 = &stru_10010A828;
  uint64_t v43 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
  uint64_t v6 = sub_1000BE638();
  if (!v6 || (v6 & 7) != 0) {
    goto LABEL_36;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 96LL))(v6, a3);
  id v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v10 = *(void *)(a1 + 80);
  id v9 = (CFTypeRef *)(a1 + 80);
  if (v10) {
    sub_1000159A8(v9);
  }
  uint64_t v11 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_100017920;
  v36[3] = &unk_100101EB0;
  v36[4] = v11;
  id v12 = objc_msgSend( objc_msgSend(objc_msgSend((id)qword_10011BB60, "foregroundAppBundleIDs"), "objectsPassingTest:", v36),  "count");
  id v13 = objc_msgSend( +[LSApplicationProxy applicationProxyForIdentifier:]( LSApplicationProxy,  "applicationProxyForIdentifier:",  v11),  "localizedNameForContext:",  0);
  BOOL v14 = 0;
  if (v12) {
    goto LABEL_32;
  }
  id v15 = v13;
  if (!v13) {
    goto LABEL_32;
  }
  if (!v7)
  {
    id v18 = 0LL;
    id v19 = 0LL;
    goto LABEL_15;
  }

  if ((v7 & 7) != 0
    || (uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 104LL))(v7)) == 0
    || (uint64_t v17 = v16, (v16 & 3) != 0))
  {
LABEL_36:
    __break(0x5516u);
    goto LABEL_37;
  }

  id v18 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16 + 104);
  id v19 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v17);
LABEL_15:
  id v20 = +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v15);
  values = v20;
  uint64_t v21 = sub_10002CD78();
  if (!v21 || (v21 & 7) != 0) {
    goto LABEL_36;
  }
  uint64_t v22 = sub_10002D200((__CFString *)v21, (uint64_t)@"ACC_LAUNCH_APP_DESCRIPTION");
  CFStringRef StringWithValidatedFormat = CFStringCreateStringWithValidatedFormat( kCFAllocatorDefault,  0LL,  @"%@%@%@",  v22,  0LL,  v20,  v18,  v19);
  CFTypeRef cf = StringWithValidatedFormat;
  CFRelease(v22);
  uint64_t v24 = sub_10002CD78();
  if (!v24 || (v24 & 7) != 0) {
    goto LABEL_36;
  }
  __int128 v25 = sub_10002D200((__CFString *)v24, (uint64_t)@"IGNORE_STRING");
  CFTypeRef v40 = v25;
  uint64_t v26 = sub_10002CD78();
  if (!v26 || (v26 & 7) != 0) {
    goto LABEL_36;
  }
  __int128 v27 = sub_10002D200((__CFString *)v26, (uint64_t)@"ALLOW_STRING");
  if ((CFTypeRef *)((char *)v41 + 1) != 0LL && (unint64_t)&values >= 0xFFFFFFFFFFFFFFE7LL
    || (v41[0] = v27, (unint64_t)&values > 0xFFFFFFFFFFFFFFCFLL))
  {
LABEL_37:
    __break(0x5513u);
  }

  uint64_t v42 = (const __CFString *)v11;
  CFDictionaryRef v28 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)&values,  8LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFShow(v28);
  uint64_t v29 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 3uLL, &error, v28);
  *id v9 = v29;
  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v29,  (CFUserNotificationCallBack)sub_100017968,  0LL);
  sub_1000CEA98(3u, @"Launch Application with Alert (iAP1), launching application %@", v20);
  BOOL v14 = RunLoopSource != 0LL;
  if (RunLoopSource)
  {
    if (qword_10011BB70)
    {
      operator delete[]((void *)qword_10011BB70);
      qword_10011BB70 = 0LL;
    }

    size_t result = strlen(a2);
    size_t v32 = result + 1;
    if (result == -1LL)
    {
      __break(0x5500u);
      return result;
    }

    qword_10011BB70 = (uint64_t)operator new[](result + 1);
    memcpy((void *)qword_10011BB70, a2, v32);
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
    CFRelease(RunLoopSource);
  }

  else
  {
    CFRelease(*v9);
    *id v9 = 0LL;
  }

  CFRelease(v28);
  CFRelease(cf);
  CFRelease(v40);
  CFRelease(v41[0]);
LABEL_32:
  if (v12) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = 1LL;
  }

  return v34;
}

uint64_t sub_100017920(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) caseInsensitiveCompare:a2];
  if (result) {
    return 0LL;
  }
  if (a3)
  {
    uint64_t result = 1LL;
    *a3 = 1;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

void sub_100017968(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v3 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", qword_10011BB70);
  if (a2 != 1 || !v3)
  {
    if (a2 || !v3) {
      goto LABEL_9;
    }
    NSLog( @"%s:%s-%d launching application %@\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/AccessoryManagerEventHandler.mm",  "LaunchAppFromAccNotificationResponseHandler",  1009LL,  v3);
  }

  if (qword_10011BB70) {
    operator delete[]((void *)qword_10011BB70);
  }
  qword_10011BB70 = 0LL;
LABEL_9:
  if (qword_10011BB58 != -1) {
    dispatch_once(&qword_10011BB58, &stru_100101E38);
  }
  if (!qword_10011BB50 || (qword_10011BB50 & 7) != 0 || ((qword_10011BB50 + 80) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(qword_10011BB50 + 80) = 0LL;
  }

void sub_100017A50(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if ((byte_10011BB68 & 1) != 0) {
      CFStringRef v2 = @"WLAN";
    }
    else {
      CFStringRef v2 = @"WIFI";
    }
    id v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_NO_%@_MSG",  v2,  v2);
    id v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_NO_%@_TITLE",  v2,  v2);
    id v5 = sub_1000169E0((uint64_t)v3);
    sub_100016AB8( (uint64_t)v4,  v5,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 112),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v5) {
      CFRelease(v5);
    }
  }

void sub_100017B30(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if ((byte_10011BB68 & 1) != 0) {
      CFStringRef v2 = @"WLAN";
    }
    else {
      CFStringRef v2 = @"WIFI";
    }
    id v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_UNLOCK_MSG",  v2);
    CFStringRef v4 = sub_1000169E0((uint64_t)@"WIFI_CONNECTION_INFO_UNLOCK_TITLE");
    id v5 = sub_1000169E0((uint64_t)v3);
    sub_100016AB8( (uint64_t)v4,  v5,  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 104),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
    if (v5) {
      CFRelease(v5);
    }
    if (v4) {
      CFRelease(v4);
    }
  }

void sub_100017C14(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if ((byte_10011BB68 & 1) != 0) {
      uint64_t v1 = @"WLAN";
    }
    else {
      uint64_t v1 = @"WIFI";
    }
    sub_100016AB8( (uint64_t)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_ASK_TITLE",  v1),  (const __CFString *)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_ASK_MSG",  v1),  (uint64_t)@"ALLOW_STRING",  (uint64_t)@"IGNORE_STRING",  (CFTypeRef *)(a1 + 96),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))sub_100017CC8,  0.0);
  }

uint64_t sub_100017CC8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10004783C();
  if (result && (result & 7) == 0) {
    return sub_10004B968(result, (a2 & 0xFFFFFFFFFFFFFFFDLL) != 1);
  }
  __break(0x5516u);
  return result;
}

void sub_100017D04(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if ((byte_10011BB68 & 1) != 0) {
      uint64_t v1 = @"WLAN";
    }
    else {
      uint64_t v1 = @"WIFI";
    }
    sub_100016AB8( (uint64_t)+[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_CONNECTION_INFO_UNABLE_TO_SHARE_TITLE",  v1),  @"WIFI_CONNECTION_INFO_UNABLE_TO_SHARE_MSG",  (uint64_t)@"OKAY_STRING",  0LL,  (CFTypeRef *)(a1 + 160),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))nullsub_7,  0.0);
  }

void sub_100017D94(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (uint64_t v2 = sub_10004783C()) == 0 || (v2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    else {
      id v3 = @"SETTINGS_STRING";
    }
    sub_100016AB8( (uint64_t)@"GYM_WORKOUT_COMPLETED_TITLE",  @"GYM_WORKOUT_COMPLETED_MSG",  (uint64_t)@"OKAY_STRING",  (uint64_t)v3,  (CFTypeRef *)(a1 + 120),  (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))sub_100017E14,  0.0);
  }

void sub_100017E14(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    objc_msgSend( +[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"),  "openSensitiveURL:withOptions:",  +[NSURL URLWithString:](NSURL, "URLWithString:", @"prefs:root=victoria"),  0);
  }
}

uint64_t sub_100017E64(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100017E78(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_35;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t v4 = sub_1000BE638();
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 96LL))(v4, a2);
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  if ((v5 & 7) != 0)
  {
LABEL_35:
    __break(0x5516u);
    goto LABEL_36;
  }

  unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 72LL))(v5);
  if (v7 >= 0x20)
  {
LABEL_36:
    __break(0x550Au);
    return;
  }

  if (v7 - 2 < 5)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 160LL))(v6))
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 160LL))(v6);
      if (v8) {
        BOOL v9 = (v8 & 7) == 0;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_35;
      }
      if (sub_100010620(v8))
      {
        sub_100017358(a1);
        return;
      }
    }

    sub_1000173CC(a1);
    return;
  }

  if (v7 == 1)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104LL))(v6);
    if (v10) {
      BOOL v11 = (v10 & 3) == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11) {
      goto LABEL_35;
    }
    if (!strncmp((const char *)(v10 + 104), "Apple", 6uLL))
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104LL))(v6);
      if (v12) {
        BOOL v13 = (v12 & 3) == 0;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13) {
        goto LABEL_35;
      }
      if (!strncmp((const char *)(v12 + 168), "A1388", 6uLL)
        && sub_100043D18()
        && sub_1000440B8())
      {
        sub_100017318(a1);
      }
    }
  }

void sub_100017FF4(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_15;
  }
  if (*(unsigned __int8 *)(a1 + 8) >= 2u)
  {
LABEL_16:
    __break(0x550Au);
    return;
  }

  if (!*(_BYTE *)(a1 + 8)) {
    return;
  }
  uint64_t v5 = sub_1000BE638();
  if (!v5 || (v5 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 96LL))(v5, a3);
  uint64_t v7 = v6;
  if ((a2 - 65537) <= 0xE)
  {
    uint64_t v8 = *(&off_100101EE8 + a2 - 65537);
    if (v6) {
      goto LABEL_9;
    }
LABEL_12:
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    goto LABEL_13;
  }

  uint64_t v8 = @"unknown";
  if (!v6) {
    goto LABEL_12;
  }
LABEL_9:
  if ((v6 & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24LL))(v7);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(v7);
LABEL_13:
  NSLog( @"IAP::SendISLNotification(%@) deviceid 0x%x accessoryid 0x%x supported lingos 0x%x",  v8,  v9,  v10,  v11);
}

void sub_1000180FC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || ((a1 + 16) & 7) != 0) {
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if ((((_BYTE)a1 + 8) & 7) != 0
    || (uint64_t v2 = *(void *)a1) == 0
    || (v2 & 7) != 0
    || (id v3 = (void *)(v2 + 8), (v3 & 7) != 0)
    || (uint64_t v4 = *(uint64_t **)(a1 + 8)) == 0LL
    || (v4 & 7) != 0
    || (uint64_t v5 = *v4) == 0
    || (v5 & 7) != 0
    || ((v5 + 8) & 7) != 0
    || (*(void *)(v5 + 8) = *v3, (uint64_t v6 = (void *)*v3) == 0LL)
    || (v6 & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    return;
  }

  *uint64_t v6 = v5;
  *(void *)(a1 + 16) = 0LL;
  if (v4 != (uint64_t *)a1)
  {
    while (v4 && (v4 & 7) == 0 && (((_BYTE)v4 + 8) & 7) == 0)
    {
      uint64_t v7 = (uint64_t *)v4[1];
      sub_1000181E8(a1, v4);
      uint64_t v4 = v7;
    }

    goto LABEL_22;
  }

void sub_1000181E8(uint64_t a1, void *__p)
{
  if (!a1
    || (a1 & 7) != 0
    || (((_BYTE)a1 + 16) & 7) != 0
    || !__p
    || (__p & 7) != 0
    || (((_BYTE)__p + 16) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    operator delete(__p);
  }

uint64_t sub_100018224()
{
  if (qword_10011BB90 != -1) {
    dispatch_once(&qword_10011BB90, &stru_100101F60);
  }
  return qword_10011BB88;
}

void sub_100018264(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x10uLL);
  if ((v1 & 0xF) != 0 || (v1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t v1 = off_100101F90;
    *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
    qword_10011BB88 = v1;
  }

uint64_t sub_1000182A4(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_1000182B8(void *__p)
{
  else {
    operator delete(__p);
  }
}

void sub_1000182CC(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_32;
  }
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 == 786434)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    uint64_t v22 = sub_1000BE638();
    if (!v22 || (v22 & 7) != 0) {
      goto LABEL_32;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 104LL))(v22, a3);
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      uint64_t v26 = +[NSArray array](&OBJC_CLASS___NSArray, "array");
      if ((v24 & 7) != 0) {
        goto LABEL_32;
      }
      [v25 updateValueFromIap:v26 forPort:kCFAccessoryPortUSBOut andPortPorperty:kCFAccessoryPortPropertySupportedSampleRatesInHz forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24)];
      id v27 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      CFDictionaryRef v28 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL);
      [v27 updateValueFromIap:v28 forPort:kCFAccessoryPortUSBOut andPortPorperty:kCFAccessoryPortPropertyIsConnected forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24)];
    }

    goto LABEL_30;
  }

  if (a2 != 786433)
  {
LABEL_31:

    return;
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = a3;
  uint64_t v7 = sub_1000BE638();
  if (!v7 || (v7 & 7) != 0) {
    goto LABEL_32;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 104LL))(v7, a3);
  if (!v8)
  {
LABEL_30:
    +[IAPServer sendAudioStateChangedNotification](&OBJC_CLASS___IAPServer, "sendAudioStateChangedNotification");
    goto LABEL_31;
  }

  uint64_t v9 = v8;
  unsigned int v29 = 0;
  uint64_t v10 = sub_1000C06AC();
  if (v10 && (v10 & 7) == 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v10 + 120LL))(v10, a3, &v29);
    if (!v29) {
      goto LABEL_23;
    }
    id v12 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    if (v29)
    {
      unint64_t v13 = 0LL;
      unint64_t v14 = 0LL;
      BOOL v16 = (v11 & 3) == 0 && v11 != 0;
      while (v13 <= ~v11)
      {
        if (!v16) {
          goto LABEL_32;
        }
        objc_msgSend( v12,  "addObject:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v11 + v13)));
        ++v14;
        v13 += 4LL;
        if (v14 >= v29) {
          goto LABEL_21;
        }
      }

      goto LABEL_33;
    }

LABEL_32:
  __break(0x5516u);
LABEL_33:
  __break(0x5513u);
}

  __break(0x5500u);
}

            if (v54 == ++v17) {
              goto LABEL_48;
            }
          }
        }

        uint64_t v4 = 0;
LABEL_48:
        uint64_t v9 = v51;
        uint64_t v11 = &off_10011B000;
        if (!dword_1001197D4) {
          objc_msgSend( (id)qword_10011BCB8,  "setItemNamesNoQ:forRange:forProperty:",  v50,  v12,  a3,  MPMediaPlaylistPropertyName);
        }
      }
    }

    goto LABEL_54;
  }

  uint64_t v4 = 0;
LABEL_55:
  if (!dword_1001197C8 || v4 >= a3) {
    goto LABEL_115;
  }
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  size_t v32 = [(id)qword_10011BCE0 stationCount];
  uint64_t v33 = v32;
  if (v9 >= (int)a2)
  {
    LODWORD(v34) = 0;
  }

  else
  {
    LODWORD(v34) = (_DWORD)a2 - v9;
    if (__OFSUB__((_DWORD)a2, v9)) {
      goto LABEL_89;
    }
  }

  if (v32 < 1)
  {
    a2 = 0LL;
    goto LABEL_86;
  }

  uint64_t v35 = sub_10002CD78();
  if (!v35 || (v35 & 7) != 0)
  {
LABEL_119:
    __break(0x5516u);
    goto LABEL_120;
  }

  uint64_t v36 = sub_10002D200((__CFString *)v35, (uint64_t)@"IAP_RADIO");
  if ((int)v34 >= v33)
  {
    a2 = 0LL;
  }

  else
  {
    uint64_t v34 = (int)v34;
    do
    {
      if (qword_10011BCD8 != -1) {
        dispatch_once(&qword_10011BCD8, &stru_100104448);
      }
      uint64_t v37 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@: %@",  v36,  [(id)qword_10011BCE0 stationNameForIndex:v34]);
      if (v37) {
        a2 = (__CFString *)v37;
      }
      else {
        a2 = &stru_10010A828;
      }
      sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](a2, "UTF8String"));
      uint64_t v38 = a4->__r_.__value_.__l.__size_;
      if (v38 >= a4->__r_.__value_.__l.__cap_)
      {
        uint64_t v39 = sub_100024640(a4, &__p);
      }

      else
      {
        sub_1000245B0(a4, &__p);
        if (v38 >= 0xFFFFFFFFFFFFFFE8LL) {
          goto LABEL_118;
        }
        uint64_t v39 = (std::string *)(v38 + 24);
      }

      a4->__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      ++v4;
      ++v34;
    }

    while (v34 < v33 && v4 < a3);
  }

  CFRelease(v36);
LABEL_86:
  CFTypeRef v40 = v34 - v33;
  if ((int)v34 <= v33)
  {
LABEL_90:
    CFTypeRef v40 = 0;
    goto LABEL_91;
  }

  if (__OFSUB__((_DWORD)v34, v33))
  {
LABEL_89:
    __break(0x5515u);
    goto LABEL_90;
  }

  __break(0x5510u);
  return result;
}

  __break(0x5516u);
LABEL_33:
  __break(0x5513u);
  return result;
}

          __break(0x5513u);
          goto LABEL_33;
        }

  if ((a2 & 7) != 0) {
    goto LABEL_39;
  }
  unint64_t v13 = *(unsigned int *)(a2 + 64);
  if (HIWORD(v7))
  {
LABEL_41:
    __break(0x5507u);
LABEL_42:
    __break(0x550Au);
LABEL_43:
    __break(0x5500u);
    goto LABEL_44;
  }

  if ((_DWORD)v13 == 4) {
    unint64_t v14 = 15;
  }
  else {
    unint64_t v14 = 23;
  }
  sub_1000AC324(a2, *(void *)(a2 + 8), 0, v13, v14, *(_DWORD *)(a2 + 68), v5, (unsigned __int16)v7);
  operator delete[](v5);
  return 0LL;
}

          free(v11);
          return v3;
        }
      }

  if (!a3 || (a3 & 7) != 0) {
    goto LABEL_55;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 136LL))(a3, 2LL);
  unint64_t v14 = (unsigned __int16)result;
  id v15 = (char *)operator new[](v14);
  BOOL v16 = v15;
  id v17 = v14 - 1;
  id v18 = (__str.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__str : (std::string *)__str.__r_.__value_.__r.__words[0];
  uint64_t result = strlcpy(v15, (const char *)v18, v14);
  id v19 = result >= v17 ? v17 : result;
  if (v19 >> 16 || v19 == 0xFFFF)
  {
LABEL_57:
    __break(0x5507u);
    return result;
  }

  uint64_t v21 = (unsigned __int16)(v19 + 1);
  sub_1000616D4(v3, (uint64_t)v16, v21);
  sub_100081790(*(void *)(v3 + 8), 0xAu, v16, v21, 1u, 0LL, -1);
  operator delete[](v16);
  uint64_t v22 = (const char *)(v3 + 2320);
  uint64_t v23 = &__str;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  sub_1000CEAEC( 0,  4,  "%s:%d NEW NOTIFICATION: notification %d m_LastAppFocus was %s and audioFocusAppBundleID = %s\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  6326,  10,  v22,  (const char *)v23);
  std::string::operator=((std::string *)(v3 + 2320), &__str);
LABEL_52:
  return 2LL;
}

  if (!a3 || (a3 & 7) != 0) {
    goto LABEL_55;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 136LL))(a3, 2LL);
  unint64_t v14 = (unsigned __int16)result;
  id v15 = (char *)operator new[](v14);
  BOOL v16 = v15;
  id v17 = v14 - 1;
  id v18 = (__str.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__str : (std::string *)__str.__r_.__value_.__r.__words[0];
  uint64_t result = strlcpy(v15, (const char *)v18, v14);
  id v19 = result >= v17 ? v17 : result;
  if (v19 >> 16 || v19 == 0xFFFF)
  {
LABEL_57:
    __break(0x5507u);
    return result;
  }

  uint64_t v21 = (unsigned __int16)(v19 + 1);
  sub_1000616D4(v3, (uint64_t)v16, v21);
  sub_100081790(*(void *)(v3 + 8), 0x13u, v16, v21, 1u, 0LL, -1);
  uint64_t v8 = v22;
  operator delete[](v16);
  uint64_t v23 = (const char *)(v3 + 2344);
  uint64_t v24 = &__str;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    uint64_t v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  sub_1000CEAEC( 0,  4,  "%s:%d NEW NOTIFICATION: notification %d m_LastAppFocusAppName was %s and audioFocusAppName = %s\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  6432,  19,  v23,  (const char *)v24);
  std::string::operator=((std::string *)(v3 + 2344), &__str);
LABEL_50:
  return v8;
}

    __break(0x5516u);
    goto LABEL_33;
  }

  if (!v8 || (v8 & 7) != 0 || ((v8 + 52) & 3) != 0) {
    goto LABEL_32;
  }
  uint64_t v9 = *(_DWORD *)(v8 + 52);
  if (v9 != (char)v9)
  {
LABEL_33:
    __break(0x550Au);
    return result;
  }

  if (v9 == -1) {
    uint64_t result = 16LL;
  }
  else {
    uint64_t result = v9;
  }
LABEL_22:
  v10[1] = result;
  uint64_t v11 = a3;
  if (!v8 || (v8 & 7) != 0 || ((v8 + 36) & 3) != 0) {
    goto LABEL_32;
  }
  id v12 = *(_DWORD *)(v8 + 36);
  unint64_t v13 = 0;
  unint64_t v14 = a2;
  BOOL v16 = a4;
  if (a2)
  {
    if ((a2 & 7) == 0) {
      return sub_100057A4C(a2, 0, 0LL, (uint64_t)v10, 48);
    }
    goto LABEL_32;
  }

  return sub_10005BEC8(0, 0LL, (uint64_t)v10, 48, 0LL);
}

  uint64_t result = (uint64_t)operator new(0x98uLL);
  if (result & 0xF | v10 & 7) {
    goto LABEL_50;
  }
  unint64_t v14 = result;
  uint64_t result = sub_100063C84(v10, v9);
  *(_OWORD *)unint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 12_Block_object_dispose(va, 8) = 0u;
  *(void *)(v14 + 144) = 0LL;
  if ((v14 & 7) != 0) {
    goto LABEL_50;
  }
  *(void *)unint64_t v14 = v9;
  if (((v14 + 12) & 3) != 0) {
    goto LABEL_50;
  }
  *(_DWORD *)(v14 + 12) = 8;
  if ((result & 1) != 0)
  {
    uint64_t result = sub_100061274();
    if (result)
    {
      if ((result & 7) == 0)
      {
        uint64_t result = sub_10008E168(result, v9);
        if (result)
        {
          if ((result & 7) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 16LL))(result, 0LL);
            if (((v14 + 8) & 7) == 0)
            {
              *(_DWORD *)(v14 + _Block_object_dispose(va, 8) = result;
LABEL_45:
              if ((((_BYTE)v14 + 16) & 7) == 0 && (((_DWORD)v14 + 18) & 1) == 0)
              {
                *(_DWORD *)(v14 + 1_Block_object_dispose(va, 8) = a2;
                if ((((_DWORD)v14 + 22) & 1) == 0)
                {
                  *(_DWORD *)(v14 + 22) = a3;
                  *(_OWORD *)(v14 + 5_Block_object_dispose(va, 8) = *(_OWORD *)(a4 + 42);
                  *(_OWORD *)(v14 + 74) = *(_OWORD *)(a4 + 58);
                  *(_OWORD *)(v14 + 90) = *(_OWORD *)(a4 + 74);
                  *(void *)(v14 + 105) = *(void *)(a4 + 89);
                  *(_OWORD *)(v14 + 26) = *(_OWORD *)(a4 + 10);
                  *(_OWORD *)(v14 + 42) = *(_OWORD *)(a4 + 26);
                  sub_10008983C(v10, v14);
                  id v12 = v18;
                  if ((_DWORD)v18) {
                    operator delete((void *)v14);
                  }
                  goto LABEL_30;
                }
              }

              goto LABEL_50;
            }
          }
        }
      }
    }

    goto LABEL_50;
  }

  id v15 = *(_DWORD *)(v10 + 1208);
  BOOL v16 = __CFADD__(v15, 1);
  id v17 = v15 + 1;
  if (!v16)
  {
    *(_DWORD *)(v10 + 120_Block_object_dispose(va, 8) = v17;
    if (((v14 + 8) & 7) == 0)
    {
      *(_DWORD *)(v14 + _Block_object_dispose(va, 8) = v17;
      goto LABEL_45;
    }

  __break(0x5507u);
}

    __break(0x5516u);
    goto LABEL_33;
  }

  return result;
}

  __break(0x5512u);
  return result;
}

    __break(0x5513u);
    goto LABEL_33;
  }

  if (v3 - v7 >= 0)
  {
    xpc_object_t v30 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&id v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    CFDictionaryRef v28 = v20;
    unsigned int v29 = v20;
    uint64_t v21 = sub_100024960(v2);
    if (v3 == v7) {
      uint64_t v22 = 1LL;
    }
    else {
      uint64_t v22 = ((v3 - v7) / 0xCuLL) & 0x1FFFFFFFFFFFFFFELL;
    }
    sub_100024884((uint64_t)&v28, v22, v22 >> 2, v21);
    uint64_t result = sub_10009F528( (uint64_t)&v28,  *(std::string **)(v2 + 8),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3));
    uint64_t v23 = *(void *)v2;
    *(void *)uint64_t v2 = v28;
    *(void *)&CFDictionaryRef v28 = v23;
    if ((v6 & 7) == 0)
    {
      uint64_t v24 = *v6;
      *uint64_t v6 = *((void *)&v28 + 1);
      *((void *)&v28 + 1) = v24;
      if ((v4 & 7) == 0)
      {
        id v25 = *(_OWORD *)v4;
        *(_OWORD *)uint64_t v4 = v29;
        unsigned int v29 = v25;
        sub_100024AB0((uint64_t)&v28);
LABEL_29:
        uint64_t v26 = sub_100024960(v2);
        uint64_t result = (unint64_t)sub_100024778(v26, *(std::string **)(v2 + 16), a2);
        id v27 = *(void *)(v2 + 16);
        if (v27 <= 0xFFFFFFFFFFFFFFE7LL)
        {
          uint64_t *v4 = v27 + 24;
          return result;
        }

        goto LABEL_32;
      }
    }

    goto LABEL_31;
  }

  __break(0x5516u);
  return result;
}

    uint64_t v10 = 4;
    sub_1000CEAEC( 0,  4,  "%s:%d CIapLingoUsbHostControl::ProcessCmd bad cmd: 0x%02X\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoUsbHostControl.cpp",  450,  v5);
    uint64_t v8 = 2LL;
    if ((v5 & 0x80) != 0) {
      goto LABEL_50;
    }
LABEL_22:
    sub_1000AD43C(a2);
    return v8;
  }

  if (v6 != 2)
  {
    uint64_t v8 = 2LL;
    goto LABEL_22;
  }

  if (v4 != (unsigned __int8 *)-1LL)
  {
    uint64_t v11 = v4[1];
    unint64_t v14 = v4[1];
    if (v4)
    {
      BYTE5(v13) = *v4;
      BYTE4(v13) = v11;
      if (!*(_BYTE *)(v2 + 1265) || v11 != 3)
      {
        if (v11 > 4) {
          goto LABEL_63;
        }
        goto LABEL_54;
      }

      if (!*(_BYTE *)(v2 + 1264)) {
        goto LABEL_54;
      }
      if (result && (result & 7) == 0)
      {
        sub_10008CC64(result, v7, 6, 0);
        *(_BYTE *)(v2 + 1264) = 0;
        goto LABEL_54;
      }
    }

    __break(0x5516u);
LABEL_33:
    __break(0x5513u);
    goto LABEL_34;
  }

uint64_t sub_100018638(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10001864C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100018664()
{
  if (qword_10011BBA0 != -1) {
    dispatch_once(&qword_10011BBA0, &stru_100101FD8);
  }
  return qword_10011BB98;
}

void sub_1000186A4(id a1)
{
  uint64_t v1 = operator new(0x38uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = (uint64_t)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100018700(v1);
    qword_10011BB98 = v2;
  }

void sub_1000186EC(_Unwind_Exception *a1)
{
}

_BYTE *sub_100018700(_BYTE *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *((_DWORD *)result + 12) = 0;
    *(void *)uint64_t result = off_100102008;
    *((void *)result + 1) = 0LL;
    *((void *)result + 2) = 0LL;
    *((void *)result + 3) = 0LL;
    *(void *)(result + 30) = 0LL;
    *((void *)result + 5) = dispatch_queue_create("iapd headset event queue", 0LL);
    (*(void (**)(_BYTE *))(*(void *)v1 + 48LL))(v1);
    v1[32] = 0;
    return v1;
  }

  return result;
}

void *sub_100018770(void *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100102008;
    uint64_t v2 = (void *)result[3];
    if (v2) {
      free(v2);
    }
    id v3 = (dispatch_object_s *)v1[5];
    if (v3)
    {
      dispatch_release(v3);
      v1[5] = 0LL;
    }

    return v1;
  }

  return result;
}

void *sub_1000187C8(void *result)
{
  return result;
}

void sub_1000187DC(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = sub_100018770(a1);
    operator delete(v1);
  }

void sub_100018800(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = sub_10001888C;
    if (BTSessionAttachWithQueue("iapd headsetevent handler", &v2, a1, a1[5]))
    {
      NSLog( @"ERROR - %s:%s - %d failed attaching to BT server",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/HeadsetEventHandler.mm",  "AttachToBTServer",  118LL);
      a1[2] = 0LL;
    }

    a1[3] = 0LL;
  }

void sub_10001888C(uint64_t a1, unsigned int a2, uint64_t a3, void *a4)
{
  if ((_DWORD)a3)
  {
    NSLog( @"ERROR - %s:%s - %d called with a BTResult of %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/HeadsetEventHandler.mm",  "callbackSessionEvent",  72LL,  a3);
    return;
  }

  if (a2 >= 4)
  {
    __break(0x550Au);
    goto LABEL_19;
  }

  if (!a2)
  {
    if (!a1)
    {
      NSLog( @"ERROR - %s:%s - %d called with a NULL BTSession",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/HeadsetEventHandler.mm",  "callbackSessionEvent",  66LL,  0LL);
      return;
    }

    if (a4 && (a4 & 7) == 0 && (((int)a4 + 8) & 7LL) == 0)
    {
      a4[1] = a1;
      BTAccessoryManagerGetDefault();
      return;
    }

    goto LABEL_19;
  }

  if (a2 != 2) {
    return;
  }
  if (!a4 || (a4 & 7) != 0 || ((unint64_t)(a4 + 1) & 7) != 0)
  {
LABEL_19:
    __break(0x5516u);
    return;
  }

  a4[1] = 0LL;
  if ((objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "isShuttingDown") & 1) == 0) {
    (*(void (**)(void *))(*a4 + 48LL))(a4);
  }
}

BOOL sub_1000189A0(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 32);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

void sub_1000189CC(uint64_t a1)
{
  if (!a1) {
    goto LABEL_22;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_22;
  }
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[14] = v2;
  v17[15] = v2;
  v17[12] = v2;
  v17[13] = v2;
  v17[10] = v2;
  v17[11] = v2;
  v17[8] = v2;
  v17[9] = v2;
  v17[6] = v2;
  v17[7] = v2;
  v17[4] = v2;
  v17[5] = v2;
  v17[2] = v2;
  v17[3] = v2;
  v17[0] = v2;
  v17[1] = v2;
  __int16 v16 = -21846;
  char v15 = -86;
  int v14 = -1431655766;
  __int16 v12 = -21846;
  int v11 = -1431655766;
  uint64_t v3 = sub_1000C2140();
  if (!v3) {
    goto LABEL_22;
  }
  if ((v3 & 7) != 0) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t, uint64_t, int *, __int16 *, char *))(*(void *)v3 + 192LL))( v3,  a1 + 37,  &v14,  &v16,  &v15);
  uint64_t v4 = sub_1000C2140();
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_22;
  }
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 248LL))(v4, v17);
  LOBYTE(v11) = HIBYTE(v16);
  if (&v10 == (uint64_t *)-17LL
    || (BYTE1(v11) = v16, (unint64_t)&v11 > 0xFFFFFFFFFFFFFFFDLL)
    || (BYTE2(v11) = v15, &v12 != 0LL && (unint64_t)&v11 >= 0xFFFFFFFFFFFFFFFCLL)
    || (HIBYTE(v11) = BYTE2(v14), (unint64_t)&v11 > 0xFFFFFFFFFFFFFFFBLL)
    || (LOBYTE(v12) = BYTE1(v14), &v13 != 0LL && (unint64_t)&v11 >= 0xFFFFFFFFFFFFFFFALL))
  {
    __break(0x5513u);
    goto LABEL_22;
  }

  HIBYTE(v12) = v14;
  sub_1000CEA98(2u, @"HeadsetEventHandler::GotAddress() About to register the device name is '%s'\n", v17);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    int v6 = BTAccessoryManagerRegisterDevice(v5, &v11, v17, 2098180LL, "0000", a1 + 24);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = sub_1000C2140();
      if (v8 && (v8 & 7) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 144LL))(v8);
        syslog(4, "BTAccessoryManagerRegisterDevice failed with error %d\n", v7);
        return;
      }

LABEL_22:
      __break(0x5516u);
    }

    sub_1000CEA98( 2u,  @"HeadsetEventHandler::GotAddress() Here just registered the device, requesting the state");
    uint64_t v9 = sub_1000C2140();
    if (!v9 || (v9 & 7) != 0) {
      goto LABEL_22;
    }
    (*(void (**)(uint64_t))(*(void *)v9 + 208LL))(v9);
  }

  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

  if (!v6 || (v6 & 7) != 0)
  {
LABEL_26:
    __break(0x5516u);
  }

  else
  {
    sub_100020CB0(v6, "Stats cleared", 1u, 1);
    return (uint64_t *)1;
  }

  return result;
}

        id v19 = 0LL;
        goto LABEL_23;
      }
    }

    else
    {
      sub_10002EC3C();
      sub_10002F3F8(MPMediaItemPropertyMediaType, (uint64_t)v9);
      sub_10002F3F8( MPMediaPlaylistPropertyParentPersistentID,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL));
      id v20 = sub_100036FF0();
      if (!v20 || (v20 & 7) != 0) {
        goto LABEL_54;
      }
      sub_10002F3F8(MPMediaPlaylistPropertyIsGeniusMix, (uint64_t)&__kCFBooleanFalse);
      sub_10002F3F8(MPMediaPlaylistPropertyIsHidden, (uint64_t)&__kCFBooleanFalse);
    }

    __int16 v16 = 0LL;
    goto LABEL_22;
  }

  if (!dword_1001197C8)
  {
LABEL_53:

    return;
  }

  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  int v6 = [(id)qword_10011BCE0 stationCount];
  int v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 632LL))(a1);
  uint64_t v8 = a2 - v5;
  if (v8 < v6)
  {
    a1[24] = -1;
    a1[25] = v8;
    goto LABEL_53;
  }

  if (!__CFADD__(v6, v7))
  {
    if (v8 >= v6 + v7) {
      goto LABEL_53;
    }
    size_t v32 = v8 >= v6;
    uint64_t v33 = v8 - v6;
    if (v32)
    {
      a1[24] = v33;
      a1[25] = -1;
      goto LABEL_53;
    }

    goto LABEL_55;
  }

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
}

  __break(0x550Au);
  return result;
}

    __break(0x5513u);
LABEL_23:
    __break(0x5516u);
    goto LABEL_24;
  }

  __break(0x5516u);
LABEL_23:
  __break(0x5500u);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

        __break(0x5516u);
      }
    }
  }

  return result;
}

        __break(0x5516u);
      }
    }
  }

  return result;
}

        __break(0x5516u);
      }
    }
  }

  return result;
}

      int v7 = 0LL;
      goto LABEL_23;
    }
  }

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
    goto LABEL_23;
  }

  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_22;
  }
  if ((v10 & 7) != 0) {
    goto LABEL_22;
  }
  int v11 = (_DWORD *)(v10 + 16);
  *v11 &= ~2u;
  if (!*(_BYTE *)(v3 + 168)) {
    return result;
  }
  uint64_t v9 = *(_BYTE *)(v3 + 168) - 1;
LABEL_19:
  *(_BYTE *)(v3 + 16_Block_object_dispose(va, 8) = v9;
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

  uint64_t result = 0xFFFFFFFFLL;
LABEL_18:
  int v11 = *(void *)(a2 + 8);
  int v14 = -1431655766;
  __int16 v13 = bswap32(result);
  if ((unint64_t)&v13 < 0xFFFFFFFFFFFFFFFCLL)
  {
    int v14 = bswap32(v8);
    sub_1000AC324(a2, v11, 0, 4LL, 3, *(_DWORD *)(a2 + 68), &v13, 8u);
    uint64_t v4 = 0LL;
    goto LABEL_20;
  }

  __break(0x5500u);
  return result;
}

    __int16 v12 = v13 != 0;
    int v11 = 16 * v12;
    goto LABEL_26;
  }

  if (v5 == 2)
  {
    __int16 v13 = *(unsigned __int8 *)(result + 1392);
    if (v13 >= 2) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

  if (v5 != 1)
  {
LABEL_25:
    __int16 v12 = 0;
    int v11 = 0;
    goto LABEL_26;
  }

  int v11 = 2;
  __int16 v12 = 1;
LABEL_26:
  id v19 = -1431655766;
  id v20 = -1431655766;
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_40;
  }
  (*(void (**)(uint64_t, int *, int *))(*(void *)result + 104LL))(result, &v20, &v19);
  if (v6) {
    int v14 = v12;
  }
  else {
    int v14 = 0;
  }
  uint64_t result = 4LL;
  if (v7)
  {
    if (v14)
    {
      char v15 = __rev16(v6);
      if (v20 >= v15)
      {
        __int16 v16 = __rev16(v7);
        if (v19 >= (int)v16)
        {
          id v17 = bswap32(v10);
          if (v17 == (((v11 * v15 + 31) >> 3) & 0x7FFFC))
          {
            *(_DWORD *)(v2 + 136_Block_object_dispose(va, 8) = 0;
            id v18 = v17 * (unint64_t)v16;
            if ((v18 & 0xFFFFFFFF00000000LL) == 0)
            {
              *(_DWORD *)(v2 + 1372) = v18;
              if (v3 < 0xC) {
                return 0LL;
              }
              else {
                return sub_1000986E0(v2, v3 - 11);
              }
            }

    __break(0x5516u);
    goto LABEL_23;
  }

  *(_BYTE *)a2 = 2;
  if (a2 != -1)
  {
    *(void *)(a2 + 1) = bswap64(v6);
    return 0LL;
  }

  __break(0x5507u);
  return result;
}

  int v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_41;
  }
  if ((v14 & 7) != 0) {
    goto LABEL_41;
  }
  char v15 = sub_1000579D4(v14);
  if (!v15) {
    goto LABEL_41;
  }
  if ((v15 & 7) != 0) {
    goto LABEL_41;
  }
  __int16 v16 = (const void *)(v15 + 432);
  if (v11 != (char)v11)
  {
LABEL_42:
    __break(0x550Au);
    return;
  }

  if (v11 == 14)
  {
LABEL_34:
    id v18 = a1;
    if ((a2 & 1) == 0)
    {
      sub_1000B161C(a1, v5, 0);
      return;
    }

    id v19 = 1;
    goto LABEL_40;
  }

  if ((a2 & 1) == 0)
  {
    id v18 = a1;
    id v19 = 0;
LABEL_40:
    sub_1000B14EC(v18, v19, 0LL, 1);
  }

    __break(0x5516u);
    goto LABEL_23;
  }

uint64_t sub_100018BCC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      sub_1000CEA98(2u, @"HeadsetEventHandler::PlugInDevice() plugin the device");
      uint64_t v2 = BTAccessoryManagerPlugInDevice(*(void *)(v1 + 16), *(void *)(v1 + 24));
      if ((_DWORD)v2) {
        sub_1000CEA98( 2u,  @"HeadsetEventHandler::PlugInDevice() BTAccessoryManagerPlugInDevice failed with error %d\n",  v2);
      }
      uint64_t result = sub_1000C2140();
      if (result)
      {
        if ((result & 7) == 0) {
          return (*(uint64_t (**)(uint64_t))(*(void *)result + 144LL))(result);
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100018C48(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (*(void *)(result + 16))
  {
    if (*(void *)(result + 24)) {
      return BTAccessoryManagerUnplugDevice(*(void *)(result + 16));
    }
  }

  return result;
}

uint64_t sub_100018C74(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100018C88(uint64_t a1, int a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_17;
  }
  if (a2 == 655364)
  {
    uint64_t v5 = (unsigned int *)(a1 + 48);
    if (((a1 + 48) & 3) == 0)
    {
      do
        int v6 = __ldxr(v5);
      while (__stxr(v6 + 5, v5));
      if (v6 >= 2147483643) {
        goto LABEL_18;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 72LL))(a1);
      sub_1000CEA98(2u, @"HeadsetEventHandler::SendISLNotification() Headset is not present");
      if (*(unsigned __int8 *)(a1 + 32) >= 2u)
      {
LABEL_19:
        __break(0x550Au);
        return;
      }

      if (*(_BYTE *)(a1 + 32)) {
        *(_BYTE *)(a1 + 32) = 0;
      }
      return;
    }

void sub_100018D9C(unsigned int *a1, int a2)
{
  switch(a2)
  {
    case 655367:
      LOBYTE(v19.__sig) = 0;
      LOBYTE(v1_Block_object_dispose(va, 8) = 0;
      *((_BYTE *)a1 + 35) = 1;
      uint64_t v3 = sub_1000C2140();
      if (!v3 || (v3 & 7) != 0) {
        goto LABEL_46;
      }
      (*(void (**)(uint64_t, pthread_attr_t *, pthread_t *))(*(void *)v3 + 96LL))(v3, &v19, &v18);
      if (LOBYTE(v19.__sig) > 1u || LOBYTE(v19.__sig) == 1 && (_BYTE)v18)
      {
        uint64_t v4 = sub_1000C2140();
        if (v4 && (v4 & 7) == 0)
        {
          uint64_t v5 = 33LL;
LABEL_44:
          (*(void (**)(void))(*(void *)v4 + 8 * v5))();
          return;
        }
      }

      else
      {
        uint64_t v4 = sub_1000C2140();
        if (v4 && (v4 & 7) == 0)
        {
          uint64_t v5 = 37LL;
          goto LABEL_44;
        }
      }

      goto LABEL_46;
    case 655372:
      *((_BYTE *)a1 + 33) = 1;
      int v6 = *(void (**)(unsigned int *))(*(void *)a1 + 64LL);
      goto LABEL_22;
    case 655373:
      uint64_t v7 = sub_1000C2140();
      if (!v7) {
        goto LABEL_46;
      }
      if ((v7 & 7) != 0) {
        goto LABEL_46;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 216LL))(v7);
      sub_1000CEA98(2u, @"HeadsetEventHandler::SendISLPropertyChange() Got state state is %d\n", v8);
      uint64_t v9 = sub_1000C2140();
      if (!v9 || (v9 & 7) != 0) {
        goto LABEL_46;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 216LL))(v9))
      {
        char v15 = a1 + 12;
        sub_1000CEA98( 2u,  @"HeadsetEventHandler::SendISLPropertyChange() got the state and it zero and waitCount is %d\n",  a1[12]);
        if (a1[12]) {
          return;
        }
        pthread_t v18 = (pthread_t)0xAAAAAAAAAAAAAAAALL;
        *(void *)&__int128 v16 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v19.__opaque[24] = v16;
        *(_OWORD *)&v19.__opaque[40] = v16;
        *(_OWORD *)&v19.__sig = v16;
        *(_OWORD *)&v19.__opaque[8] = v16;
        sub_1000CEA98(2u, @"Spawing the waiting thread");
        if ((v15 & 3) == 0)
        {
          do
            unsigned int v17 = __ldxr(v15);
          while (__stxr(v17 + 1, v15));
          if (v17 != 0x7FFFFFFF)
          {
            pthread_attr_init(&v19);
            pthread_attr_setscope(&v19, 1);
            pthread_attr_setdetachstate(&v19, 2);
            pthread_create(&v18, &v19, (void *(__cdecl *)(void *))sub_1000190E0, a1);
            pthread_attr_destroy(&v19);
            return;
          }

          goto LABEL_47;
        }

uint64_t sub_1000190E0(uint64_t result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v1 = (unsigned int *)(result + 48);
      if (((result + 48) & 3) == 0)
      {
        do
          unsigned int v2 = __ldxr(v1);
        while (__stxr(v2 + 1, v1));
        if (v2 == 0x7FFFFFFF)
        {
          do
          {
LABEL_16:
            __break(0x5500u);
            do
LABEL_17:
              int v4 = __ldxr(v1);
            while (__stxr(v4 + 5, v1));
          }

          while (v4 >= 2147483643);
          return 0LL;
        }

        if ((v1 & 7) == 0)
        {
          while ((int)*v1 <= 4)
          {
            sleep(1u);
            uint64_t result = sub_1000C2140();
            if (!result || (result & 7) != 0) {
              goto LABEL_20;
            }
            uint64_t result = sub_1000C2140();
            if (!result || (result & 7) != 0) {
              goto LABEL_20;
            }
            (*(void (**)(uint64_t))(*(void *)result + 208LL))(result);
            do
              unsigned int v3 = __ldxr(v1);
            while (__stxr(v3 + 1, v1));
            if (v3 == 0x7FFFFFFF) {
              goto LABEL_16;
            }
          }

          return 0LL;
        }
      }
    }
  }

void sub_10001920C(id a1)
{
  qword_10011BBA8 = objc_alloc_init(&OBJC_CLASS___IAPMicrophoneEventHandlerHelper);
}

uint64_t sub_100019370()
{
  if (qword_10011BBC0 != -1) {
    dispatch_once(&qword_10011BBC0, &stru_1001020A0);
  }
  return qword_10011BBB8;
}

void sub_1000193B0(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x18uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001940C(v1);
    qword_10011BBB8 = v2;
  }

void sub_1000193F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10001940C(uint64_t result)
{
  if (!result {
    || (uint64_t v1 = result, (result & 7) != 0)
  }
    || (*(void *)uint64_t result = off_1001020D0,
        *(_WORD *)(result + _Block_object_dispose(va, 8) = 0,
        *(_BYTE *)(result + 10) = 0,
        *(void *)(result + 16) = 0LL,
        (uint64_t result = sub_1000C60C4()) == 0)
    || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16LL))(result, v1);
    return v1;
  }

  return result;
}

uint64_t sub_100019474(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_1001020D0, (uint64_t result = sub_1000C60C4()) == 0)
    || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 24LL))(result, v1);
    return v1;
  }

  return result;
}

uint64_t sub_1000194D0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100019474(result);
  }
  __break(0x5516u);
  return result;
}

void sub_1000194E4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100019474(a1);
    operator delete((void *)a1);
  }

void sub_10001951C(_Unwind_Exception *a1)
{
}

void sub_100019530(uint64_t a1, int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_15;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 >= 2) {
    goto LABEL_16;
  }
  if ((((v4 == 0) ^ a2) & 1) != 0) {
    return;
  }
  __int128 v16 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = a2;
  uint64_t v7 = a2 ? a3 : 0LL;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = sub_1000BE638();
  if (!v8 || (v8 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 104LL))(v8, a3);
  if (!v9)
  {
LABEL_14:
    -[IAPMicrophoneEventHandlerHelper sendMicrophoneStateChangedNotification]( +[IAPMicrophoneEventHandlerHelper sharedInstance](&OBJC_CLASS___IAPMicrophoneEventHandlerHelper, "sharedInstance"),  "sendMicrophoneStateChangedNotification");

    return;
  }

  uint64_t v10 = v9;
  id v11 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
  {
    uint64_t v12 = v11;
    uint64_t v13 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:");
    if ((v10 & 7) == 0)
    {
      [v12 updateValueFromIap:v13 forPort:kCFAccessoryPortLineIn andPortPorperty:kCFAccessoryPortPropertyIsConnected forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10)];
      id v14 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
      char v15 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL);
      [v14 updateValueFromIap:v15 forPort:kCFAccessoryPortLineIn andPortPorperty:kCFAccessoryPortPropertyIsActive forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10)];
      goto LABEL_14;
    }

    goto LABEL_15;
  }

LABEL_16:
  __break(0x550Au);
}

  __break(0x5510u);
  return result;
}
}

    __break(0x550Au);
LABEL_17:
    __break(0x5516u);
  }

  __break(0x5510u);
  return result;
}

    __break(0x550Au);
LABEL_17:
    __break(0x5516u);
  }

  __break(0x5510u);
  return result;
}

  __break(0x5510u);
}

        size = __str.__r_.__value_.__s.__size_;
        if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          size = __str.__r_.__value_.__l.__size_;
        }
        if (size) {
          goto LABEL_32;
        }
        sub_1000CEAEC(0, 4, "Empty audioFocusAppBundleID, set to mobileipod\n");
        goto LABEL_20;
      }

      if (a3 && !(a3 & 7))
      {
        if (!sub_100057DFC(a3)) {
          goto LABEL_16;
        }
        goto LABEL_14;
      }
    }

  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
  uint64_t result = *(void *)(v2 + 1448);
  if (result)
  {
    if ((result & 7) == 0) {
      return sub_1000AEC90(result);
    }
    goto LABEL_20;
  }

  return result;
}

      __break(0x5516u);
      goto LABEL_17;
    }
  }

    __break(0x5516u);
    goto LABEL_17;
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
}

  __break(0x5512u);
  return result;
}

          __break(0x5518u);
        }
      }
    }
  }

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

      __break(0x550Au);
      return result;
    }

    __break(0x5516u);
LABEL_17:
    if (__cxa_guard_acquire(&qword_10011BEF0))
    {
      qword_10011BEE8 = 0LL;
      qword_10011BEE0 = 0LL;
      qword_10011BED8 = (uint64_t)&qword_10011BEE0;
      __cxa_atexit((void (*)(void *))sub_100082D58, &qword_10011BED8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10011BEF0);
    }
  }

  sub_1000578E8(a1, 0);
  return v6;
}

    __break(0x5516u);
    return result;
  }

      sub_1000578E8(a1, 2u);
      v7[0] = off_100103838;
      sub_1000CE94C(v7);
      return v3;
    }

    goto LABEL_19;
  }

  if (v8 && sub_100063F38(v8))
  {
  }

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
    goto LABEL_17;
  }

  __break(0x550Au);
LABEL_17:
  __break(0x5516u);
}

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

  __break(0x5513u);
  return result;
}

NSNumber *sub_1000196E4(NSNumber *result, int a2, uint64_t a3)
{
  if (!result) {
    goto LABEL_12;
  }
  unsigned int v3 = result;
  unsigned int v4 = BYTE1(result[1].super.super.isa);
  if (v4 >= 2) {
    goto LABEL_13;
  }
  if ((((v4 == 0) ^ a2) & 1) != 0) {
    return result;
  }
  BYTE1(result[1].super.super.isa) = a2;
  int v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t result = (NSNumber *)sub_1000BE638();
  if (!result || (result & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    goto LABEL_13;
  }

  uint64_t v7 = ((uint64_t (*)(NSNumber *, uint64_t))result->super.super.isa[13].isa)(result, a3);
  if (!v7)
  {
LABEL_11:

    return (NSNumber *)-[IAPMicrophoneEventHandlerHelper sendMicrophoneStateChangedNotification]( +[IAPMicrophoneEventHandlerHelper sharedInstance]( &OBJC_CLASS___IAPMicrophoneEventHandlerHelper,  "sharedInstance"),  "sendMicrophoneStateChangedNotification");
  }

  uint64_t v8 = v7;
  uint64_t result = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  if (BYTE1(v3[1].super.super.isa) <= 1u)
  {
    uint64_t v9 = result;
    uint64_t result = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:");
    if ((v8 & 7) == 0)
    {
      [v9 updateValueFromIap:result forPort:kCFAccessoryPortLineIn andPortPorperty:kCFAccessoryPortPropertyFullDuplexIsSupported forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8)];
      goto LABEL_11;
    }

    goto LABEL_12;
  }

_BYTE *sub_100019818(_BYTE *result, int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    result[10] = a2;
    if (byte_1001197C0 != a2)
    {
      byte_1001197C0 = a2;
      return -[IAPMicrophoneEventHandlerHelper sendMicrophoneStateChangedNotification]( +[IAPMicrophoneEventHandlerHelper sharedInstance]( &OBJC_CLASS___IAPMicrophoneEventHandlerHelper,  "sharedInstance"),  "sendMicrophoneStateChangedNotification");
    }
  }

  return result;
}

void sub_100019864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    char v15 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    switch((int)a2)
    {
      case 720897:
        sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  "evMicrophoneArrived");
        uint64_t v8 = a1;
        int v9 = 0;
        uint64_t v10 = a4;
        goto LABEL_9;
      case 720898:
        id v11 = "evMicrophoneAuthStarted";
        goto LABEL_8;
      case 720899:
        id v11 = "evMicrophoneAuthenticated";
LABEL_8:
        sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  v11);
        uint64_t v8 = a1;
        int v9 = 1;
        uint64_t v10 = a3;
LABEL_9:
        sub_100019530(v8, v9, v10);
        break;
      case 720900:
        sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  "evMicrophoneAuthFailed");
        sub_100019530(a1, 0, a3);
        uint64_t v12 = (NSNumber *)a1;
        uint64_t v13 = a3;
        goto LABEL_12;
      case 720901:
        sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  "evMicrophoneLeft");
        sub_100019530(a1, 0, a4);
        uint64_t v12 = (NSNumber *)a1;
        uint64_t v13 = a4;
LABEL_12:
        sub_1000196E4(v12, 0, v13);
        break;
      case 720902:
        id v14 = "evAudioInputRouteChanged";
        goto LABEL_22;
      case 720903:
        id v14 = "evMicrophoneCommandSuccess";
        goto LABEL_22;
      case 720904:
        id v14 = "evMicrophoneCommandFailure";
        goto LABEL_22;
      case 720905:
        id v14 = "evRecordingStarted";
        goto LABEL_22;
      case 720906:
        id v14 = "evRecordingPaused";
        goto LABEL_22;
      case 720907:
        id v14 = "evRecordingStopped";
        goto LABEL_22;
      case 720908:
        id v14 = "evRecordingCancelled";
        goto LABEL_22;
      case 720909:
        id v14 = "evDiskFull";
        goto LABEL_22;
      case 720910:
        id v14 = "evMaxFileSizeReached";
LABEL_22:
        sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  v14);
        break;
      default:
        sub_1000CEA98( 0xDu,  @"%s:%s %s %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLNotification",  "unknown event",  a2);
        break;
    }
  }

void sub_100019AD8(NSNumber *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_18:
    __break(0x5516u);
  }

  else
  {
    int v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a3)
    {
      uint64_t v12 = v6;
      switch((int)a2)
      {
        case 720911:
          sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLPropertyChange",  "prCapabilities");
          uint64_t v7 = sub_1000C60C4();
          if (!v7 || (v7 & 7) != 0) {
            goto LABEL_18;
          }
          int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 168LL))(v7, a3);
          sub_1000196E4(a1, v8, a3);
          break;
        case 720912:
          int v9 = "prRecordMode";
          goto LABEL_15;
        case 720913:
          int v9 = "prRecordLevel";
          goto LABEL_15;
        case 720914:
          int v9 = "prRecordLevelLimit";
          goto LABEL_15;
        case 720915:
          uint64_t v10 = sub_1000C60C4();
          if (!v10 || (v10 & 7) != 0) {
            goto LABEL_18;
          }
          int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 176LL))(v10, a3);
          sub_100019818(a1, v11);
          int v9 = "prVoiceSignalProcessing";
LABEL_15:
          sub_1000CEA98( 0xDu,  @"%s:%s %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLPropertyChange",  v9);
          break;
        default:
          sub_1000CEA98( 0xDu,  @"%s:%s %s %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/IAPMicrophoneEventHandler.mm",  "SendISLPropertyChange",  "unknown property",  a2);
          break;
      }

      int v6 = v12;
    }
  }

uint64_t sub_100019C6C()
{
  if (qword_10011BBD0 != -1) {
    dispatch_once(&qword_10011BBD0, &stru_100102118);
  }
  return qword_10011BBC8;
}

void sub_100019CAC(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x60uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = (void *)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(v1);
    void *v2 = off_100102148;
    qword_10011BBC8 = (uint64_t)v2;
  }

void sub_100019D00(_Unwind_Exception *a1)
{
}

uint64_t sub_100019D14(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_100019D84(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100019D14(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100019D98(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100019D14(a1);
    operator delete((void *)a1);
  }

void sub_100019DD0(_Unwind_Exception *a1)
{
}

void sub_100019DE4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_52;
  }
  int v8 = objc_autoreleasePoolPush();
  int v9 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v10 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v9,  IAPAppConnectionIDKey,  0LL);
  if (a3 >= 0x20)
  {
LABEL_51:
    __break(0x550Au);
LABEL_52:
    __break(0x5516u);
    return;
  }

  int v11 = v10;
  switch(a3)
  {
    case 0u:
      uint64_t v12 = 1LL;
      goto LABEL_31;
    case 1u:
      uint64_t v14 = 2LL;
      goto LABEL_46;
    case 2u:
      uint64_t v14 = 3LL;
      goto LABEL_46;
    case 3u:
      uint64_t v14 = 4LL;
      goto LABEL_46;
    case 4u:
      uint64_t v14 = 5LL;
      goto LABEL_46;
    case 5u:
      uint64_t v14 = 6LL;
      goto LABEL_46;
    case 6u:
      uint64_t v14 = 7LL;
      goto LABEL_46;
    case 7u:
      uint64_t v14 = 8LL;
      goto LABEL_46;
    case 8u:
      uint64_t v14 = 9LL;
      goto LABEL_46;
    case 9u:
      uint64_t v12 = 10LL;
      goto LABEL_31;
    case 0xAu:
      uint64_t v15 = 11LL;
      goto LABEL_40;
    case 0xBu:
      uint64_t v14 = 12LL;
      goto LABEL_46;
    case 0xCu:
      uint64_t v14 = 13LL;
      goto LABEL_46;
    case 0xDu:
      uint64_t v14 = 14LL;
      goto LABEL_46;
    case 0xEu:
      uint64_t v14 = 15LL;
      goto LABEL_46;
    case 0xFu:
      __int128 v16 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 16LL);
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v16, EAAccessoryAccessibilityActionKey);
      if ((a5 & 3) != 0) {
        goto LABEL_52;
      }
      if (!a5) {
        goto LABEL_52;
      }
      *(float *)&double v17 = (float)*(unsigned int *)a5;
      pthread_t v18 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v18, EAAccessoryAccessibilityPointXKey);
      *(float *)&double v19 = (float)*(unsigned int *)(a5 + 4);
      id v20 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v19);
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v20, EAAccessoryAccessibilityPointYKey);
      if (((a5 + 8) & 3) != 0) {
        goto LABEL_52;
      }
      uint64_t v22 = *(int *)(a5 + 8);
      LODWORD(v21) = 5.0;
      uint64_t v23 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v21);
      uint64_t v24 = (uint64_t *)&EAAccessoryAccessibilityTouchPhaseKey;
      goto LABEL_44;
    case 0x10u:
      id v25 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 17LL);
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v25, EAAccessoryAccessibilityActionKey);
      *(float *)&double v26 = (float)((float)((float)(unsigned __int16)a5 / 65535.0) * 99.0) + 1.0;
      uint64_t v23 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26);
      uint64_t v24 = (uint64_t *)&EAAccessoryAccessibilityScaleFactorKey;
      goto LABEL_44;
    case 0x11u:
      uint64_t v12 = 18LL;
LABEL_31:
      id v27 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v12);
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v27, EAAccessoryAccessibilityActionKey);
      if ((a5 & 3) != 0) {
        goto LABEL_52;
      }
      if (!a5) {
        goto LABEL_52;
      }
      unsigned int v30 = *(_DWORD *)a5;
      unsigned int v29 = (unsigned int *)(a5 + 4);
      *(float *)&double v28 = (float)v30;
      id v31 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v28);
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v31, EAAccessoryAccessibilityPointXKey);
      *(float *)&double v32 = (float)*v29;
      uint64_t v23 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v32);
      uint64_t v24 = (uint64_t *)&EAAccessoryAccessibilityPointYKey;
LABEL_44:
      uint64_t v35 = *v24;
      uint64_t v36 = v11;
      goto LABEL_47;
    case 0x12u:
      uint64_t v14 = 19LL;
      goto LABEL_46;
    case 0x13u:
      uint64_t v14 = 20LL;
      goto LABEL_46;
    case 0x14u:
      uint64_t v14 = 21LL;
      goto LABEL_46;
    case 0x15u:
      uint64_t v14 = 22LL;
      goto LABEL_46;
    case 0x16u:
      uint64_t v15 = 23LL;
LABEL_40:
      uint64_t v33 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v15);
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v33, EAAccessoryAccessibilityActionKey);
      uint64_t v34 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a5);
      if (v34) {
        uint64_t v23 = (NSNumber *)v34;
      }
      else {
        uint64_t v23 = (NSNumber *)&stru_10010A828;
      }
      uint64_t v24 = (uint64_t *)&EAAccessoryAccessibilityTextKey;
      goto LABEL_44;
    case 0x17u:
      uint64_t v14 = 24LL;
LABEL_46:
      uint64_t v23 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v14);
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      uint64_t v36 = v11;
      uint64_t v35 = EAAccessoryAccessibilityActionKey;
LABEL_47:
      -[NSMutableDictionary setObject:forKey:](v36, "setObject:forKey:", v23, v35);
      break;
    default:
      uint64_t v13 = EAAccessoryAccessibilityActionKey;
      break;
  }

  if (-[NSMutableDictionary objectForKey:](v11, "objectForKey:", v13)) {
    sub_1000D21B0("Action", (uint64_t)v11, 0);
  }
  objc_autoreleasePoolPop(v8);
}

void sub_10001A200(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_19;
  }

  uint64_t v5 = objc_autoreleasePoolPush();
  int v6 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v7 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v6,  IAPAppConnectionIDKey,  0LL);
  if (a3 >= 8)
  {
LABEL_19:
    __break(0x550Au);
    return;
  }

  int v8 = v7;
  switch(a3)
  {
    case 0u:
      uint64_t v9 = 1LL;
      goto LABEL_14;
    case 1u:
      uint64_t v9 = 2LL;
      goto LABEL_14;
    case 2u:
      uint64_t v9 = 3LL;
      goto LABEL_14;
    case 3u:
      uint64_t v9 = 4LL;
      goto LABEL_14;
    case 4u:
      uint64_t v9 = 5LL;
      goto LABEL_14;
    case 5u:
      uint64_t v9 = 6LL;
      goto LABEL_14;
    case 6u:
      uint64_t v9 = 7LL;
      goto LABEL_14;
    case 7u:
      uint64_t v9 = 8LL;
LABEL_14:
      int v11 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v9);
      uint64_t v10 = EAAccessoryAccessibilityContextKey;
      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v11, EAAccessoryAccessibilityContextKey);
      break;
    default:
      uint64_t v10 = EAAccessoryAccessibilityContextKey;
      break;
  }

  if (-[NSMutableDictionary objectForKey:](v8, "objectForKey:", v10)) {
    sub_1000D21B0("ContextChange", (uint64_t)v8, 0);
  }
  objc_autoreleasePoolPop(v5);
}

NSMutableDictionary *sub_10001A36C(NSMutableDictionary *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_17;
  }

  uint64_t v7 = objc_autoreleasePoolPush();
  int v8 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v9 = IAPAppConnectionIDKey;
  uint64_t v10 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4);
  uint64_t result = +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v8,  v9,  v10,  EAAccessoryAccessibilityContextKey,  0LL);
  if (a3 >= 8)
  {
LABEL_17:
    __break(0x550Au);
    return result;
  }

  int v11 = result;
  switch(a3)
  {
    case 0u:
      uint64_t v12 = 1LL;
      goto LABEL_11;
    case 1u:
      uint64_t v12 = 2LL;
      goto LABEL_11;
    case 2u:
      uint64_t v12 = 3LL;
      goto LABEL_11;
    case 3u:
      uint64_t v12 = 4LL;
      goto LABEL_11;
    case 4u:
      uint64_t v12 = 5LL;
LABEL_11:
      uint64_t v14 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v12);
      uint64_t v13 = EAAccessoryAccessibilityItemPropertyKey;
      [v11 setObject:v14 forKey:EAAccessoryAccessibilityItemPropertyKey];
      break;
    default:
      uint64_t v13 = EAAccessoryAccessibilityItemPropertyKey;
      break;
  }

  if ([v11 objectForKey:v13])
  {
    sub_1000D21B0("ItemPropertyRequest", (uint64_t)v11, 0);
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  objc_autoreleasePoolPop(v7);
  return (NSMutableDictionary *)v16;
}

void sub_10001A4F4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_11;
  }

  uint64_t v7 = objc_autoreleasePoolPush();
  int v8 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v9 = +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v8,  IAPAppConnectionIDKey,  0LL);
  if (a3 >= 2)
  {
LABEL_11:
    __break(0x550Au);
    return;
  }

  uint64_t v10 = v9;
  if (a3)
  {
    int v11 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 3LL);
    uint64_t v12 = EAAccessoryAccessibilitySystemPropertyKey;
    -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v11, EAAccessoryAccessibilitySystemPropertyKey);
    *(float *)&double v13 = (float)a4 / 255.0;
    uint64_t v14 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v13);
    uint64_t v15 = &EAAccessoryAccessibilitySystemPropertySpeakingRateKey;
  }

  else
  {
    uint64_t v16 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2LL);
    uint64_t v12 = EAAccessoryAccessibilitySystemPropertyKey;
    -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v16, EAAccessoryAccessibilitySystemPropertyKey);
    *(float *)&double v17 = (float)a4 / 255.0;
    uint64_t v14 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
    uint64_t v15 = &EAAccessoryAccessibilitySystemPropertyVoiceOverVolumeKey;
  }

  -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v14, *v15);
  if (-[NSMutableDictionary objectForKey:](v10, "objectForKey:", v12)) {
    sub_1000D21B0("SystemPropertyChange", (uint64_t)v10, 0);
  }
  objc_autoreleasePoolPop(v7);
}

NSMutableDictionary *sub_10001A680(NSMutableDictionary *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_12;
  }

  uint64_t v7 = objc_autoreleasePoolPush();
  int v8 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
  uint64_t v9 = IAPAppConnectionIDKey;
  uint64_t v10 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a4);
  uint64_t result = +[NSMutableDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithObjectsAndKeys:",  v8,  v9,  v10,  EAAccessoryAccessibilityContextKey,  0LL);
  if (a3 >= 2)
  {
LABEL_12:
    __break(0x550Au);
    return result;
  }

  int v11 = result;
  if (a3) {
    uint64_t v12 = 3LL;
  }
  else {
    uint64_t v12 = 2LL;
  }
  double v13 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v12);
  uint64_t v14 = EAAccessoryAccessibilitySystemPropertyKey;
  [v11 setObject:v13 forKey:EAAccessoryAccessibilitySystemPropertyKey];
  if ([v11 objectForKey:v14])
  {
    sub_1000D21B0("SystemPropertyRequest", (uint64_t)v11, 0);
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  objc_autoreleasePoolPop(v7);
  return (NSMutableDictionary *)v16;
}

void sub_10001A7CC(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_107;
  }
  uint64_t v6 = EAAccessoryAccessibilityItemPropertyKey;
  if ([a3 objectForKey:EAAccessoryAccessibilityItemPropertyKey])
  {
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v90 = v7;
    __int128 v91 = v7;
    unint64_t v89 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v88 = 0xAAAAAAAAAAAAAAAALL;
    BYTE12(v91) = 0;
    id v8 = [a3 objectForKey:EAAccessoryAccessibilityResponseKey];
    switch(objc_msgSend(objc_msgSend(a3, "objectForKey:", v6), "unsignedIntValue"))
    {
      case 1u:
        LODWORD(v90) = 0;
        goto LABEL_22;
      case 2u:
        goto LABEL_18;
      case 3u:
        LODWORD(v90) = 2;
LABEL_22:
        uint64_t v22 = (const char *)[v8 UTF8String];
        *((void *)&v90 + 1) = v22;
        if (v22)
        {
          size_t v23 = strlen(v22);
          uint64_t v24 = v23 + 1;
          if (v23 == -1LL) {
            goto LABEL_24;
          }
        }

        else
        {
          uint64_t v24 = 1LL;
        }

        double v21 = 0LL;
        *(void *)&__int128 v91 = v24;
        goto LABEL_102;
      case 4u:
        goto LABEL_25;
      case 5u:
        uint64_t v12 = (uint64_t)[v8 count];
        if (v12)
        {
          uint64_t v13 = v12;
          uint64_t v14 = 2 * v12;
          if (v12 < 0) {
            size_t v15 = -1LL;
          }
          else {
            size_t v15 = 2 * v12;
          }
          uint64_t v16 = operator new[](v15);
          unint64_t v17 = (unint64_t)v16;
          *((void *)&v90 + 1) = v16;
          LODWORD(v90) = 4;
          if (v13 < 0)
          {
            __break(0x550Cu);
LABEL_18:
            uint64_t v18 = 1LL;
            LODWORD(v90) = 1;
            double v19 = (const char *)[v8 UTF8String];
            *((void *)&v90 + 1) = v19;
            if (!v19 || (v20 = strlen(v19), uint64_t v18 = v20 + 1, v20 != -1LL))
            {
              double v21 = 0LL;
              *(void *)&__int128 v91 = v18;
              goto LABEL_102;
            }

LABEL_109:
            __break(0x5505u);
            return;
          }
        }

        else
        {
          uint64_t v14 = 0LL;
          unint64_t v17 = 0LL;
          *((void *)&v90 + 1) = 0LL;
          LODWORD(v90) = 4;
        }

        *(void *)&__int128 v91 = v14;
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        __int128 v87 = 0u;
        id v57 = [v8 countByEnumeratingWithState:&v84 objects:v92 count:16];
        if (!v57) {
          goto LABEL_101;
        }
        uint64_t v58 = *(void *)v85;
        uint64_t v83 = EAAccessoryAccessibilityTraitButton;
        uint64_t v82 = EAAccessoryAccessibilityTraitLink;
        uint64_t v81 = EAAccessoryAccessibilityTraitSearchField;
        uint64_t v80 = EAAccessoryAccessibilityTraitImage;
        uint64_t v79 = EAAccessoryAccessibilityTraitSelected;
        uint64_t v78 = EAAccessoryAccessibilityTraitSound;
        uint64_t v77 = EAAccessoryAccessibilityTraitKeyboardKey;
        uint64_t v76 = EAAccessoryAccessibilityTraitStaticText;
        uint64_t v75 = EAAccessoryAccessibilityTraitSummaryElement;
        uint64_t v74 = EAAccessoryAccessibilityTraitNotEnabled;
        uint64_t v73 = EAAccessoryAccessibilityTraitUpdatesFrequently;
        uint64_t v72 = EAAccessoryAccessibilityTraitStartsMediaSession;
        uint64_t v71 = EAAccessoryAccessibilityTraitAdjustable;
        uint64_t v70 = EAAccessoryAccessibilityTraitBackButton;
        uint64_t v69 = EAAccessoryAccessibilityTraitMap;
        uint64_t v68 = EAAccessoryAccessibilityTraitDeleteKey;
        while (1)
        {
          unsigned int v59 = 0LL;
          do
          {
            if (*(void *)v85 != v58) {
              objc_enumerationMutation(v8);
            }
            uint64_t v60 = *(void *)(*((void *)&v84 + 1) + 8LL * (void)v59);
            unsigned __int8 v61 = atomic_load((unsigned __int8 *)&qword_10011BBE0);
            if ((v61 & 1) == 0)
            {
              uint64_t v67 = *(void *)(*((void *)&v84 + 1) + 8LL * (void)v59);
              int v64 = __cxa_guard_acquire(&qword_10011BBE0);
              uint64_t v60 = v67;
              if (v64)
              {
                qword_10011BBD8 = objc_retain( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  0LL),  v83,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  1LL),  v82,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  2LL),  v81,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  3LL),  v80,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  4LL),  v79,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  5LL),  v78,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  6LL),  v77,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  7LL),  v76,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  8LL),  v75,  +[NSNumber numberWithUnsignedInt:](
                                        &OBJC_CLASS___NSNumber,
                                        "numberWithUnsignedInt:",
                                        9LL),
                                      v74,
                                      +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  10LL),  v73,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  11LL),  v72,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  12LL),  v71,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  13LL),  v70,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  14LL),  v69,  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  15LL),  v68,  0LL));
                __cxa_guard_release(&qword_10011BBE0);
                uint64_t v60 = v67;
              }
            }

            id v62 = [(id)qword_10011BBD8 objectForKey:v60];
            if (v62)
            {
              if (!v17)
              {
                __break(0x5518u);
LABEL_107:
                __break(0x5516u);
LABEL_108:
                __break(0x5513u);
              }

              unsigned __int16 v63 = (unsigned __int16)[v62 unsignedIntValue];
              if (v17 >= 0xFFFFFFFFFFFFFFFELL) {
                goto LABEL_108;
              }
              if ((v17 & 1) != 0) {
                goto LABEL_107;
              }
              *(_WORD *)unint64_t v17 = v63;
              v17 += 2LL;
            }

            unsigned int v59 = (char *)v59 + 1;
          }

          while (v57 != v59);
          id v65 = [v8 countByEnumeratingWithState:&v84 objects:v92 count:16];
          id v57 = v65;
          if (!v65)
          {
LABEL_101:
            double v21 = (void *)*((void *)&v90 + 1);
            goto LABEL_102;
          }
        }

      default:
        NSLog( @"ERROR - %s:%s - %d unknown accessibility item property response returned %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/Accessibility.mm",  "HandleAccessibilityResponse",  484,  [a3 objectForKey:v6]);
        return;
    }
  }

  uint64_t v9 = EAAccessoryAccessibilitySystemPropertyKey;
  if (![a3 objectForKey:EAAccessoryAccessibilitySystemPropertyKey])
  {
    NSLog( @"ERROR - %s:%s - %d unknown accessibility response for %du returned %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/Accessibility.mm",  "HandleAccessibilityResponse",  545LL,  a2,  a3);
    return;
  }

  *((void *)&v90 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v90 = 0xAAAAAAAAAAAAAAAALL;
  id v10 = [a3 objectForKey:EAAccessoryAccessibilityResponseKey];
  unsigned int v11 = objc_msgSend(objc_msgSend(a3, "objectForKey:", v9), "unsignedIntValue");
  if (v11 == 3)
  {
    LODWORD(v90) = 1;
  }

  else
  {
    if (v11 != 2) {
      return;
    }
    LODWORD(v90) = 0;
  }

  [v10 floatValue];
  float v51 = v50 * 255.0;
  float v52 = 0.0;
  if (v51 > 0.0) {
    float v52 = v51;
  }
  if (v51 >= 255.0) {
    float v53 = 255.0;
  }
  else {
    float v53 = v52;
  }
  if (v53 <= -1.0 || v53 >= 256.0) {
    goto LABEL_109;
  }
  BYTE4(v90) = (int)v53;
  id v55 = [a3 objectForKey:EAAccessoryAccessibilityContextKey];
  if (v55) {
    unsigned int v56 = [v55 unsignedIntValue];
  }
  else {
    unsigned int v56 = -1;
  }
  DWORD2(v90) = v56;
  BYTE12(v90) = 1;
  (*(void (**)(uint64_t, uint64_t, void, __int128 *))(*(void *)a1 + 32LL))( a1,  1245186LL,  a2,  &v90);
}

  if (!v43)
  {
LABEL_112:
    unsigned int v11 = 1;
    goto LABEL_113;
  }

        if (!v11 || (v11 & 7) != 0) {
          goto LABEL_256;
        }
        sub_10007F8B0(v11, 1LL);
        if (v43 == 16) {
          sub_100077544(v11, 1u, 1LL);
        }
LABEL_113:
        if ((*(_BYTE *)(a1 + 1273) & 0x10) != 0)
        {
          if (!v11 || (v11 & 7) != 0) {
            goto LABEL_256;
          }
          io_object_t v46 = *(void *)(a1 + 8);
          float v47 = sub_100076340(v11);
          sub_100077764(v46, v47);
        }

void sub_10001B14C(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B16C(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (pthread_mutex_lock((pthread_mutex_t *)(result + 32)), uint64_t result = v2 + 8, ((v2 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B8DC(result, &v3);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
    return 1LL;
  }

  return result;
}

uint64_t sub_10001B1D0(uint64_t result, uint64_t a2)
{
  uint64_t v7 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (unint64_t v3 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        unsigned int v4 = (uint64_t *)(v2 + 8),
        ((v2 + 8) & 7) != 0)
    || (result = sub_10001BBF8(v2 + 8, &v7), uint64_t v5 = v2 + 16, (v5 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v6 = result;
    if (v5 != result) {
      sub_1000095C0(v4, result);
    }
    pthread_mutex_unlock(v3);
    return v5 != v6;
  }

  return result;
}

uint64_t sub_10001B26C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (uint64_t v4 = result, (result & 7) != 0)
    || (id v8 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        uint64_t v11 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v4 + 8) & 7) != 0)
    || (v11 = *(void *)(v4 + 8), uint64_t v9 = v4 + 16, (v9 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v11 != v9)
    {
      uint64_t result = *sub_100008AFC(&v11);
      if (result) {
        BOOL v10 = (result & 7) == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 16LL))(result, a2, a3, a4);
      sub_100008A4C(&v11);
    }

    return pthread_mutex_unlock(v8);
  }

  return result;
}

uint64_t sub_10001B344(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (uint64_t v4 = result, (result & 7) != 0)
    || (id v8 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        uint64_t v11 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v4 + 8) & 7) != 0)
    || (v11 = *(void *)(v4 + 8), uint64_t v9 = v4 + 16, (v9 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v11 != v9)
    {
      uint64_t result = *sub_100008AFC(&v11);
      if (result) {
        BOOL v10 = (result & 7) == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 24LL))(result, a2, a3, a4);
      sub_100008A4C(&v11);
    }

    return pthread_mutex_unlock(v8);
  }

  return result;
}

uint64_t sub_10001B41C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result
    || (uint64_t v3 = result, (result & 7) != 0)
    || (uint64_t v6 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        uint64_t v9 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v3 + 8) & 7) != 0)
    || (v9 = *(void *)(v3 + 8), uint64_t v7 = v3 + 16, (v7 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v9 != v7)
    {
      uint64_t result = *sub_100008AFC(&v9);
      if (result) {
        BOOL v8 = (result & 7) == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (!v8) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 32LL))(result, a2, a3);
      sub_100008A4C(&v9);
    }

    return pthread_mutex_unlock(v6);
  }

  return result;
}

uint64_t sub_10001B4E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!result
    || (uint64_t v5 = result, (result & 7) != 0)
    || (BOOL v10 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        uint64_t v13 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v5 + 8) & 7) != 0)
    || (v13 = *(void *)(v5 + 8), uint64_t v11 = v5 + 16, (v11 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v13 != v11)
    {
      uint64_t result = *sub_100008AFC(&v13);
      if (result) {
        BOOL v12 = (result & 7) == 0;
      }
      else {
        BOOL v12 = 0;
      }
      if (!v12) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 40LL))( result,  a2,  a3,  a4,  a5);
      sub_100008A4C(&v13);
    }

    return pthread_mutex_unlock(v10);
  }

  return result;
}

uint64_t sub_10001B5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  v6[0] = a4;
  v6[1] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(void *)a1 + 56LL))( a1,  a2,  a3,  v6,  16LL);
}

size_t sub_10001B630(size_t result, uint64_t a2, uint64_t a3, char *__s)
{
  if (!result || (uint64_t v4 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = strlen(__s);
    if (result != -1LL) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, size_t))(*(void *)v4 + 56LL))( v4,  a2,  a3,  __s,  result + 1);
    }
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_10001B69C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
LABEL_10:
    __break(0x5500u);
    return result;
  }

  uint64_t v4 = *((unsigned __int8 *)a4 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = a4[1];
  }
  if (v4 == -1) {
    goto LABEL_10;
  }
  if (v5 < 0) {
    a4 = (uint64_t *)*a4;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)result + 56LL))( result,  a2,  a3,  a4,  v4 + 1);
}

uint64_t sub_10001B6E4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (*(void *)a1 = off_100102218, ((a1 + 8) & 7) != 0)) {
    __break(0x5516u);
  }
  sub_100009E64((void *)(a1 + 8));
  v9.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(void *)v9.__opaque = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutexattr_init(&v9);
  int v2 = pthread_mutexattr_settype(&v9, 2);
  if (v2)
  {
    uint64_t v5 = _os_assert_log(v2);
    uint64_t v6 = _os_crash(v5);
    sub_1000D2518(v6);
  }

  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 32), &v9);
  if (v3)
  {
    uint64_t v7 = _os_assert_log(v3);
    uint64_t v8 = _os_crash(v7);
    sub_1000D2518(v8);
  }

  pthread_mutexattr_destroy(&v9);
  return a1;
}

void sub_10001B7CC(_Unwind_Exception *a1)
{
}

uint64_t sub_10001B7F4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

void sub_10001B864(void *a1)
{
  if (!a1
    || (a1 & 7) != 0
    || (*a1 = off_100102218, pthread_mutex_destroy((pthread_mutex_t *)(a1 + 4)), ((unint64_t)(a1 + 1) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C((uint64_t)(a1 + 1));
    operator delete(a1);
  }

void sub_10001B8DC(uint64_t a1, unint64_t *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  sub_10001B914(a1, a2, a2);
  if ((v2 & 0xFE) != 0) {
LABEL_6:
  }
    __break(0x550Au);
}

void sub_10001B914(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (uint64_t *)sub_10001B9EC(a1, &v9, a2);
  uint64_t v6 = (void *)*v5;
  if (*v5)
  {
LABEL_10:
    __break(0x5516u);
    return;
  }

  uint64_t v7 = v5;
  memset(v8, 170, sizeof(v8));
  sub_10001BAE8((void *)a1, a3, v8);
  sub_100008FEC(a1, v9, v7, (void *)v8[0]);
  uint64_t v6 = v8[0];
  v8[0] = 0LL;
  sub_10001BB68(v8, 0LL);
  if (!v6) {
    return;
  }
LABEL_8:
}

uint64_t sub_10001B9EC(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  if (!a1 || (v5 = a1, (a1 & 7) != 0) || (uint64_t v4 = a2, a1 = sub_100008C24(a1), v7 = v5 + 8, ((v5 + 8) & 7) != 0))
  {
LABEL_20:
    __break(0x5516u);
LABEL_21:
    uint64_t v7 = a1;
    a1 = (uint64_t)v3;
    goto LABEL_22;
  }

  if (a1)
  {
    if ((((_BYTE)v5 + 16) & 7) == 0 && (a1 & 7) == 0)
    {
      unint64_t v8 = *a3;
      while (((a1 + 32) & 7) == 0)
      {
        unint64_t v9 = *(void *)(a1 + 32);
        if (v8 >= v9)
        {
          if (v9 >= v8)
          {
            uint64_t *v4 = a1;
            if ((v7 & 7) == 0) {
              return v7;
            }
            goto LABEL_20;
          }

          int v3 = (uint64_t *)(a1 + 8);
          if (((a1 + 8) & 7) != 0) {
            goto LABEL_20;
          }
          uint64_t v10 = *v3;
          if (!*v3) {
            goto LABEL_21;
          }
          a1 += 8LL;
        }

        else
        {
          uint64_t v10 = *(void *)a1;
          if (!*(void *)a1)
          {
            uint64_t v7 = a1;
            goto LABEL_22;
          }
        }

        if ((v10 & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v7 = a1;
        a1 = v10;
      }
    }

    goto LABEL_20;
  }

  a1 = v5 + 8;
LABEL_22:
  uint64_t *v4 = v7;
  return a1;
}

void *sub_10001BAE8@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v4 = (char *)(result + 1), ((unint64_t)(result + 1) & 7) != 0)
    || (memset(a3, 170, 24), uint64_t result = operator new(0x28uLL),
                             *a3 = result,
                             a3[1] = v4,
                             (result & 7) != 0)
    || ((unint64_t)(result + 4) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    result[4] = *a2;
    *((_BYTE *)a3 + 16) = 1;
  }

  return result;
}

void sub_10001BB68(void **a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    if ((v4 & 7) == 0)
    {
      sub_10001BB9C(v4, v3);
      return;
    }

    goto LABEL_7;
  }

void sub_10001BB9C(uint64_t a1, void *__p)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (*(unsigned __int8 *)(a1 + 8) >= 2u)
    {
      __break(0x550Au);
      return;
    }

    if (*(_BYTE *)(a1 + 8))
    {
    }

    else
    {
      if (!__p) {
        return;
      }
      if (*(void *)a1)
      {
LABEL_9:
        operator delete(__p);
        return;
      }
    }
  }

  __break(0x5516u);
}

uint64_t sub_10001BBF8(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t v5 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t result = sub_100008C24(result);
      uint64_t v4 = v2 + 8;
      if (((v2 + 8) & 7) == 0)
      {
        uint64_t result = (uint64_t)sub_10001BCA0(v2, a2, (void *)result, (void *)(v2 + 8));
        uint64_t v5 = result;
        if (v4 == result) {
          return v4;
        }
        if ((((_BYTE)v2 + 16) & 7) == 0)
        {
          return v4;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_10001BCA0(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (!a3) {
      return a4;
    }
    if ((((_BYTE)a1 + 16) & 7) == 0 && (a3 & 7) == 0)
    {
      while (((unint64_t)(a3 + 4) & 7) == 0)
      {
        if (a3[4] >= *a2)
        {
          uint64_t v4 = (void *)*a3;
          if (!*a3) {
            return a3;
          }
        }

        else
        {
          uint64_t v4 = (void *)a3[1];
          if (!v4) {
            return a4;
          }
          a3 = a4;
        }

        a4 = a3;
        a3 = v4;
      }
    }
  }

  __break(0x5516u);
  return a3;
}

uint64_t sub_10001C608()
{
  uint64_t result = (uint64_t)operator new(0x60uLL);
  if ((result & 0xF) != 0 || (uint64_t v1 = (void *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    void *v1 = off_100102280;
    return (uint64_t)v1;
  }

  return result;
}

void sub_10001C658(_Unwind_Exception *a1)
{
}

uint64_t sub_10001C66C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10001C6DC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10001C66C(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10001C6F0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001C66C(a1);
    operator delete((void *)a1);
  }

void sub_10001C728(_Unwind_Exception *a1)
{
}

uint64_t sub_10001C73C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 5LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10001C754(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (a2 >= 5) {
      NSLog( @"ERROR - %s:%s - %d unavailable artwork format index %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/ArtworkLibrary.mm",  "GetIndFormatID",  39LL,  a2);
    }
    return a2;
  }

  return result;
}

void sub_10001C7BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)a3 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = 0xAAAAAAAAAAAAAAAALL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)(a3 + 24) = 2863311530LL;
    *(_WORD *)(a3 + 12) = 0;
    if (a2 > 4)
    {
      NSLog( @"ERROR - %s:%s - %d unavailable artwork format %d (0x%x)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/ArtworkLibrary.mm",  "GetFormat",  60LL,  a2,  a2);
      int v6 = 0;
      *(void *)a3 = 0LL;
      goto LABEL_8;
    }

    if (~(unint64_t)&unk_1000DAB6C >= 8 * (unint64_t)a2)
    {
      uint64_t v4 = (_DWORD *)((char *)&unk_1000DAB6C + 8 * a2);
      *(_DWORD *)(a3 + 4) = *v4;
      if (v4 != (_DWORD *)-4LL)
      {
        int v5 = v4[1];
        *(_DWORD *)a3 = v5;
        int v6 = 2 * v5;
LABEL_8:
        *(_DWORD *)(a3 + _Block_object_dispose(va, 8) = v6;
        return;
      }
    }
  }

  __break(0x5513u);
}

void *sub_10001C884(void *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t result = operator new(0x10uLL), (result & 0xF) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    int v3 = result;
    sub_100029750(result, a2);
    return v3;
  }

  return result;
}

void sub_10001C8D0(_Unwind_Exception *a1)
{
}

void sub_10001C8E4(std::string *__str, std::string *a2, std::string::size_type a3)
{
  uint64_t v4 = a2;
  std::string::size_type size = __str->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    uint64_t v7 = __str;
  }
  else {
    uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) == 0LL) {
    std::string::size_type v8 = __str->__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v8 = __str->__r_.__value_.__l.__size_;
  }
  uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  std::string::size_type v10 = (char)v9;
  uint64_t v41 = (void *)a3;
  if ((v10 & 0x80000000) == 0LL) {
    uint64_t v11 = (void *)a3;
  }
  else {
    uint64_t v11 = *(void **)a3;
  }
  if ((v10 & 0x80000000) == 0LL) {
    size_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v12 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    if (!__CFADD__(v7, v8))
    {
      uint64_t v4 = v7;
      uint64_t v14 = v7;
      while (1)
      {
        if (!v14) {
          goto LABEL_58;
        }
        if (!v12) {
          break;
        }
        if (!memchr(v11, v14->__r_.__value_.__s.__data_[0], v12)) {
          goto LABEL_24;
        }
        if (v14 == (std::string *)-1LL) {
          goto LABEL_59;
        }
        uint64_t v14 = (std::string *)((char *)v14 + 1);
        uint64_t v4 = (std::string *)((char *)v4 + 1);
        if (!--v8)
        {
          a3 = -1LL;
          goto LABEL_25;
        }
      }

      uint64_t v4 = v7;
LABEL_24:
      a3 = (char *)v4 - (char *)v7;
LABEL_25:
      uint64_t v4 = a2;
      goto LABEL_26;
    }
  }

  else
  {
    a3 = -1LL;
LABEL_26:
    uint64_t v11 = v41;
    if ((size & 0x80u) == 0LL) {
      std::string::size_type v10 = (std::string::size_type)__str;
    }
    else {
      std::string::size_type v10 = __str->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) == 0LL) {
      std::string::size_type v3 = size;
    }
    else {
      std::string::size_type v3 = __str->__r_.__value_.__l.__size_;
    }
    if ((v9 & 0x80u) == 0LL) {
      size_t v15 = (unsigned __int8 *)v41;
    }
    else {
      size_t v15 = (unsigned __int8 *)*v41;
    }
    if ((v9 & 0x80u) == 0LL) {
      uint64_t v16 = v9;
    }
    else {
      uint64_t v16 = v41[1];
    }
    if (v3 <= a3 || v16 == 0) {
      goto LABEL_57;
    }
    if (a3 <= ~v10)
    {
      BOOL v18 = __CFADD__(v15, v16);
      if (v3 <= ~v10 && !v18)
      {
        double v19 = (unsigned __int8 *)(v10 + a3);
        v3 += v10;
LABEL_49:
        uint64_t v20 = v16;
        double v21 = v15;
        if (v19)
        {
          while (v21)
          {
            if (*v19 == *v21) {
              goto LABEL_61;
            }
            ++v21;
            if (!--v20)
            {
              goto LABEL_60;
            }
          }
        }

LABEL_58:
        __break(0x5516u);
      }
    }
  }

    __break(0x5516u);
  }

    __break(0x5516u);
    return result;
  }

  uint64_t result = *(void *)(v2 + 1192);
  if (!result) {
    goto LABEL_58;
  }
  if ((result & 7) != 0) {
    goto LABEL_58;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 672LL))(result, a2);
  uint64_t v9 = *(void *)(v2 + 1192);
  if (!v9) {
    goto LABEL_58;
  }
  if ((v9 & 7) != 0) {
    goto LABEL_58;
  }
  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_58;
  }
  std::string::size_type v10 = sub_10008E168(result, *(void *)(v2 + 8));
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 304LL))( v9,  a2,  0LL,  0LL,  0LL,  v10,  0xFFFFFFFFLL,  1LL))
  {
    return 0LL;
  }

  else
  {
    return 2LL;
  }

            BOOL v18 = 0LL;
LABEL_55:
            double v19 = 1;
            break;
          case 19:
            if ((_WORD)v7 == (_WORD)v12) {
              goto LABEL_89;
            }
            double v19 = 0;
            BOOL v18 = 4LL;
            if ((_DWORD)v21 != 1 || *v20) {
              break;
            }
            BOOL v18 = 0LL;
            HIDWORD(v35) = 0;
            goto LABEL_55;
          default:
            size_t v31 = v16;
            size_t v30 = 5984LL;
            unint64_t v17 = "%s:%d CIapLingoGeneral::HandleTxdTunnelDataToiPod: Invalid tunnel cmdID: 0x%02X\n";
            goto LABEL_25;
        }

      *a4 = v9;
      break;
    default:
      sub_1000CEAEC( 0,  4,  "%s:%d Unrecognized/unsupported iTP headset command !\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  10133);
      return;
  }

LABEL_59:
  __break(0x5513u);
LABEL_60:
  double v19 = (unsigned __int8 *)v3;
LABEL_61:
  size_t v23 = &v19[-v10];
  else {
    unint64_t v22 = (unint64_t)v23;
  }
  while ((a3 & v22) != 0xFFFFFFFFFFFFFFFFLL)
  {
    if (v22 < a3)
    {
      __break(0x5515u);
      return;
    }

    std::string::basic_string(&__stra, __str, a3, v22 - a3, (std::allocator<char> *)&v43);
    unint64_t v24 = v4->__r_.__value_.__l.__size_;
    if (v24 >= v4->__r_.__value_.__l.__cap_)
    {
      uint64_t v25 = sub_100024640(v4, &__stra);
    }

    else
    {
      sub_1000245B0(v4, &__stra);
      if (v24 >= 0xFFFFFFFFFFFFFFE8LL) {
        goto LABEL_59;
      }
      uint64_t v25 = (std::string *)(v24 + 24);
    }

    float v26 = v4;
    v4->__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    std::string::size_type v27 = __str->__r_.__value_.__s.__size_;
    if ((v27 & 0x80u) == 0LL) {
      std::string::size_type v28 = (std::string::size_type)__str;
    }
    else {
      std::string::size_type v28 = __str->__r_.__value_.__r.__words[0];
    }
    if ((v27 & 0x80u) == 0LL) {
      std::string::size_type v10 = __str->__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v10 = __str->__r_.__value_.__l.__size_;
    }
    uint64_t v29 = *((unsigned __int8 *)v11 + 23);
    size_t v30 = v11[1];
    if ((v29 & 0x80u) == 0LL)
    {
      size_t v31 = *((unsigned __int8 *)v11 + 23);
    }

    else
    {
      uint64_t v11 = (void *)*v11;
      size_t v31 = v30;
    }

    uint64_t v4 = (std::string *)(v10 - v22);
    if (v10 > v22)
    {
      if (v10 > ~v28 || v22 > ~v28) {
        goto LABEL_59;
      }
      float v33 = (char *)(v28 + v22);
      float v34 = (char *)(v28 + v22);
      while (v34)
      {
        if (!v31) {
          goto LABEL_94;
        }
        if (!memchr(v11, *v34, v31))
        {
          float v33 = v34;
LABEL_94:
          a3 = (std::string::size_type)&v33[-v28];
          goto LABEL_95;
        }

        ++v34;
        uint64_t v4 = (std::string *)((char *)v4 - 1);
        if (!v4) {
          goto LABEL_92;
        }
      }

      goto LABEL_58;
    }

  __break(0x5510u);
}

  __break(0x550Au);
  return result;
}

  size_t v31 = (_DWORD *)v10 + 1;
  size_t v30 = *((unsigned int *)v10 + 1);
  if ((_DWORD)v30 == -1)
  {
LABEL_91:
    __break(0x5500u);
LABEL_92:
    __break(0x5513u);
LABEL_93:
    sub_1000D251C();
  }

  float v32 = v10[2];
  *((_DWORD *)v10 + 1) = v30 + 1;
  float v33 = *((_DWORD *)v10 + 3);
  if (v33) {
    float v34 = v30 + 1;
  }
  else {
    float v34 = v30;
  }
  int v5 = 4LL;
  if (v32 && (v32 & 0xE0000000) == 0 && v34 <= v9 && v33)
  {
    do
    {
      float v40 = 0xAAAAAAAAAAAAAAAALL;
      float v35 = *(void *)(a1 + 1200);
      if (v35) {
        uint64_t v36 = (*(void *)(a1 + 1200) & 7LL) == 0;
      }
      else {
        uint64_t v36 = 0;
      }
      if (!v36) {
        goto LABEL_90;
      }
      float v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 400LL))(v35, v30);
      float v40 = v37;
      if (!v37) {
        goto LABEL_79;
      }
      if ((v37 & 7) != 0) {
        goto LABEL_90;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 16LL))(v37))
      {
        sub_100098CCC(a1, v40, 0x43u, v30, v32, *(unsigned __int16 *)(a2 + 68), a3);
        int v5 = v38;
      }

      else
      {
LABEL_79:
        int v5 = 2LL;
      }

      sub_100064D0C(&v40);
      if ((_DWORD)v5) {
        break;
      }
      size_t v30 = (v30 + 1);
    }

    while (v30 < v34);
    if (!(_DWORD)v5)
    {
      if ((v31 & 3) == 0 && ((unint64_t)(v10 + 1) & 7) == 0)
      {
        if (*v31 >= *((_DWORD *)v10 + 2)) {
          return 0LL;
        }
        else {
          return 6LL;
        }
      }

      goto LABEL_90;
    }
  }

  return v5;
}

LABEL_92:
    a3 = -1LL;
LABEL_95:
    uint64_t v4 = v26;
    uint64_t v11 = v41;
    if ((v27 & 0x80u) == 0LL) {
      std::string::size_type v10 = (std::string::size_type)__str;
    }
    else {
      std::string::size_type v10 = __str->__r_.__value_.__r.__words[0];
    }
    if ((v27 & 0x80u) == 0LL) {
      std::string::size_type v3 = v27;
    }
    else {
      std::string::size_type v3 = __str->__r_.__value_.__l.__size_;
    }
    if ((v29 & 0x80u) == 0LL) {
      float v35 = (unsigned __int8 *)v41;
    }
    else {
      float v35 = (unsigned __int8 *)*v41;
    }
    if ((v29 & 0x80u) == 0LL) {
      uint64_t v36 = v29;
    }
    else {
      uint64_t v36 = v41[1];
    }
    if (v3 > a3 && v36 != 0)
    {
      if (a3 > ~v10) {
        goto LABEL_59;
      }
      BOOL v38 = __CFADD__(v35, v36);
      if (v3 > ~v10 || v38) {
        goto LABEL_59;
      }
      double v19 = (unsigned __int8 *)(v10 + a3);
      v3 += v10;
LABEL_118:
      uint64_t v39 = v36;
      float v40 = v35;
      if (v19)
      {
        while (v40)
        {
          if (*v19 == *v40) {
            goto LABEL_61;
          }
          ++v40;
          if (!--v39)
          {
            goto LABEL_60;
          }
        }
      }

      goto LABEL_58;
    }

LABEL_57:
    unint64_t v22 = -1LL;
  }

        return;
      }
    }

void sub_10001CC48( _Unwind_Exception *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t sub_10001CC60(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100009E9C(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10001CC74(uint64_t result, void *a2, unsigned int a3, int a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022D34(result, a2, a3, a4, (unint64_t)&off_100102688);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CCA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000226C4(result, a2, a3, 0);
    sub_100021238(v3, 0xFFFFFFFFLL, 3, 0);
    sub_1000210A8(v3, 0xFFFFFFFFLL, 5, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CD08(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022860(result, a2, a3, 0);
    sub_1000229E8(v3, 0xFFFFFFFFLL, -1, 0);
    sub_100022A94(v3, 0xFFFFFFFFLL, -1, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CD6C(uint64_t result, void *a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 + 1;
  if (a4 == -1)
  {
    __break(0x5500u);
LABEL_11:
    __break(0x5513u);
    goto LABEL_12;
  }

  if (v4 >= a3) {
    return v4 < a3;
  }
  unsigned int v11 = 0;
  uint64_t v6 = *a2;
  if (__CFADD__(*a2, 24LL * v4)) {
    goto LABEL_11;
  }
  if (v6)
  {
    uint64_t v7 = result;
    uint64_t result = v6 + 24LL * v4;
    if ((result & 7) == 0)
    {
      sscanf((const char *)result, "%d", &v11);
      dispatch_time_t v8 = dispatch_time(0LL, 1000000LL * v11);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100023370;
      block[3] = &unk_100103288;
      block[4] = v7;
      unsigned int v10 = v11;
      dispatch_after(v8, &_dispatch_main_q, block);
      return v4 < a3;
    }
  }

uint64_t sub_10001CE68(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000226C4(result, a2, a3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CE94(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100021238(result, 0xFFFFFFFFLL, 3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CEC8(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000210A8(result, 0xFFFFFFFFLL, 5, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001CEFC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (((_BYTE)a1 + 56) & 7) != 0) {
    __break(0x5516u);
  }
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Notify log mask=0x%x (global=0x%x)", *(_DWORD *)(a1 + 56), dword_10011C820);
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001CFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001CFEC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (sub_100020CB0(a1, __str, 1u, 0), (((_BYTE)a1 + 64) & 7) != 0)) {
    __break(0x5516u);
  }
  id v2 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoUniqueIdentifier];
  snprintf(__str, 0x400uLL, "  UID: (%hhx) %qx", (_DWORD)v2, [v2 unsignedLongLongValue]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v3 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoTitle];
  snprintf(__str, 0x400uLL, "  Title: (%hhx) %s", (_DWORD)v3, (const char *)[v3 UTF8String]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v4 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoArtist];
  snprintf(__str, 0x400uLL, "  Artist: (%hhx) %s", (_DWORD)v4, (const char *)[v4 UTF8String]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v5 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoAlbum];
  snprintf(__str, 0x400uLL, "  Album: (%hhx) %s", (_DWORD)v5, (const char *)[v5 UTF8String]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v6 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoGenre];
  snprintf(__str, 0x400uLL, "  Genre: (%hhx) %s", (_DWORD)v6, (const char *)[v6 UTF8String]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v7 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoComposer];
  snprintf(__str, 0x400uLL, "  Composer: (%hhx) %s", (_DWORD)v7, (const char *)[v7 UTF8String]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v8 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoQueueIndex];
  snprintf(__str, 0x400uLL, "  Index: (%hhx) %lu", (_DWORD)v8, [v8 unsignedLongValue]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v9 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoTotalQueueCount];
  snprintf(__str, 0x400uLL, "  Count: (%hhx) %lu", (_DWORD)v9, [v9 unsignedLongValue]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v10 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoShuffleMode];
  snprintf(__str, 0x400uLL, "  Shuffle: (%hhx) %ld", (_DWORD)v10, [v10 longValue]);
  sub_100020CB0(a1, __str, 1u, 0);
  uint64_t v11 = kMRMediaRemoteNowPlayingInfoPlaybackRate;
  id v12 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoPlaybackRate];
  snprintf(__str, 0x400uLL, "  Repeat: (%hhx) %ld", (_DWORD)v12, [v12 longValue]);
  sub_100020CB0(a1, __str, 1u, 0);
  id v13 = [*(id *)(a1 + 64) objectForKey:v11];
  LODWORD(v11) = (_DWORD)v13;
  [v13 floatValue];
  snprintf(__str, 0x400uLL, "  Rate: (%hhx) %f", v11, v14);
  sub_100020CB0(a1, __str, 1u, 0);
  id v15 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoElapsedTime];
  LODWORD(v11) = (_DWORD)v15;
  [v15 floatValue];
  snprintf(__str, 0x400uLL, "  Elapsed: (%hhx) %f", v11, v16);
  sub_100020CB0(a1, __str, 1u, 0);
  id v17 = [*(id *)(a1 + 64) objectForKey:kMRMediaRemoteNowPlayingInfoDuration];
  [v17 floatValue];
  snprintf(__str, 0x400uLL, "  Duration: (%hhx) %f", (_DWORD)v17, v18);
  sub_100020CB0(a1, __str, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001D474(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 + 1;
  if (a4 == -1) {
LABEL_31:
  }
    __break(0x5500u);
  if (v4 >= a3)
  {
    CC_LONG v12 = 0;
    std::string::size_type v13 = 0LL;
    CC_LONG size = 0;
  }

  else
  {
    uint64_t v7 = 24LL * v4;
    unsigned int v8 = ~a4 + a3;
    do
    {
      uint64_t v9 = *a2;
      if (__CFADD__(*a2, v7)) {
        goto LABEL_29;
      }
      if (v9) {
        BOOL v10 = (((_BYTE)v7 + (_BYTE)v9) & 7) == 0LL;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10) {
        goto LABEL_30;
      }
      sub_1000237C4(&__p, (const std::string::value_type *)(v9 + v7));
      v7 += 24LL;
      --v8;
    }

    while (v8);
    CC_LONG size = __p.__r_.__value_.__s.__size_;
    std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
    CC_LONG v12 = __p.__r_.__value_.__r.__words[1];
  }

  if ((size & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v13;
  }
  if ((size & 0x80u) == 0) {
    CC_LONG v15 = size;
  }
  else {
    CC_LONG v15 = v12;
  }
  CC_SHA1(p_p, v15, md);
  memset(__b, 170, sizeof(__b));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    float v16 = &__p;
  }
  else {
    float v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (&vars0 == (uint64_t *)79 || (unint64_t)md > 0xFFFFFFFFFFFFFFECLL)
  {
LABEL_29:
    __break(0x5513u);
LABEL_30:
    __break(0x5516u);
    goto LABEL_31;
  }

  snprintf( __b,  0x400uLL,  "Hash for %s: { 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02 x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x }",  (const char *)v16,  md[0],  md[1],  md[2],  md[3],  md[4],  md[5],  md[6],  md[7],  md[8],  md[9],  md[10],  md[11],  md[12],  md[13],  md[14],  md[15],  md[16],  md[17],  md[18],  md[19]);
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_30;
  }
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

void sub_10001D728( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, std::string *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

uint64_t sub_10001D758(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100021238(result, 0xFFFFFFFFLL, 1, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D78C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100021238(result, 0xFFFFFFFFLL, 2, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D7C0(uint64_t result, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = 0xFFFFFFFFLL;
  uint64_t v4 = *a2;
  if (!__CFADD__(*a2, 24LL * a4))
  {
    uint64_t v5 = result;
    uint64_t result = v4 + 24LL * a4;
    if (v4) {
      BOOL v6 = (result & 7) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t result = sscanf((const char *)result, "%hhx", &v7);
      if (v5)
      {
        if ((v5 & 7) == 0)
        {
          sub_100021238(v5, v7, 3, 1);
          return 1LL;
        }
      }
    }

    __break(0x5516u);
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_10001D860(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000210A8(result, 0xFFFFFFFFLL, 0, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D894(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000210A8(result, 0xFFFFFFFFLL, 1, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D8C8(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000210A8(result, 0xFFFFFFFFLL, 2, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D8FC(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000210A8(result, 0xFFFFFFFFLL, 3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001D930(uint64_t result, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7 = 0xFFFFFFFFLL;
  uint64_t v4 = *a2;
  if (!__CFADD__(*a2, 24LL * a4))
  {
    uint64_t v5 = result;
    uint64_t result = v4 + 24LL * a4;
    if (v4) {
      BOOL v6 = (result & 7) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      uint64_t result = sscanf((const char *)result, "%hhx", &v7);
      if (v5)
      {
        if ((v5 & 7) == 0)
        {
          sub_1000210A8(v5, v7, 5, 1);
          return 1LL;
        }
      }
    }

    __break(0x5516u);
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_10001D9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001D9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DA30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DA8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_10001DAE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022860(result, a2, a3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DB0C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000229E8(result, 0xFFFFFFFFLL, 3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DB40(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022A94(result, 0xFFFFFFFFLL, 5, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DB74(uint64_t a1)
{
  snprintf(__b, 0x400uLL, "Events: count=%d", 16);
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  sub_100020CB0(a1, __b, 1u, 0);
  for (uint64_t i = 0LL; i != 384; i += 24LL)
  {
    snprintf( __b,  0x400uLL,  "%2d: 0x%08x %s",  *(_DWORD *)((char *)&unk_1001032A8 + i),  *(_DWORD *)((char *)&unk_1001032A8 + i + 16),  *(const char **)((char *)&unk_1001032A8 + i + 8));
    sub_100020CB0(a1, __b, 1u, 0);
  }

  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001DC9C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000229E8(result, 0xFFFFFFFFLL, 1, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DCD0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000229E8(result, 0xFFFFFFFFLL, 2, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DD04(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022A94(result, 0xFFFFFFFFLL, 0, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DD38(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022A94(result, 0xFFFFFFFFLL, 1, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DD6C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022A94(result, 0xFFFFFFFFLL, 2, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DDA0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100022A94(result, 0xFFFFFFFFLL, 3, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_10001DDD4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (id v2 = (int *)(a1 + 56), ((a1 + 56) & 7) != 0)) {
LABEL_21:
  }
    __break(0x5516u);
  int v3 = 15;
  int *v2 = 15;
  uint64_t v11 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 == &qword_10011C810)
  {
    int v4 = 0;
  }

  else
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = sub_100003154((uint64_t *)&v11);
      uint64_t v6 = v5[1];
      BOOL v7 = v6 && (v5[1] & 7) == 0;
      unsigned int v8 = (_DWORD *)(v6 + 56);
      v4 |= *v8;
      sub_100008A4C((uint64_t *)&v11);
    }

    while (v11 != &qword_10011C810);
    int v3 = *v2;
  }

  dword_10011C820 = v4;
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Set Notify log mask=0x%x (global=0x%x)", v3, v4);
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001DF44(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (id v2 = (int *)(a1 + 56), ((a1 + 56) & 7) != 0)) {
LABEL_21:
  }
    __break(0x5516u);
  int *v2 = 0;
  uint64_t v11 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 == &qword_10011C810)
  {
    int v9 = 0;
    int v3 = 0;
  }

  else
  {
    int v3 = 0;
    do
    {
      int v4 = sub_100003154((uint64_t *)&v11);
      uint64_t v5 = v4[1];
      BOOL v6 = v5 && (v4[1] & 7) == 0;
      BOOL v7 = (_DWORD *)(v5 + 56);
      v3 |= *v7;
      sub_100008A4C((uint64_t *)&v11);
    }

    while (v11 != &qword_10011C810);
    int v9 = *v2;
  }

  dword_10011C820 = v3;
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Set Notify log mask=0x%x (global=0x%x)", v9, v3);
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001E0B4(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  int v18 = 0;
  uint64_t v4 = *a2;
  if (__CFADD__(*a2, 24LL * a4)) {
LABEL_30:
  }
    __break(0x5513u);
  uint64_t v6 = v4 + 24LL * a4;
  if (v4) {
    BOOL v7 = (v6 & 7) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_29;
  }
  sscanf((const char *)v6, "%x", &v18);
  if (!a1 || (a1 & 7) != 0 || (unsigned int v8 = (int *)(a1 + 56), ((a1 + 56) & 7) != 0))
  {
LABEL_29:
    __break(0x5516u);
    goto LABEL_30;
  }

  int v9 = *v8 | v18;
  *unsigned int v8 = v9;
  id v17 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 == &qword_10011C810)
  {
    int v10 = 0;
  }

  else
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_100003154((uint64_t *)&v17);
      uint64_t v12 = v11[1];
      BOOL v13 = v12 && (v11[1] & 7) == 0;
      float v14 = (_DWORD *)(v12 + 56);
      v10 |= *v14;
      sub_100008A4C((uint64_t *)&v17);
    }

    while (v17 != &qword_10011C810);
    int v9 = *v8;
  }

  dword_10011C820 = v10;
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Set Notify log mask=0x%x (global=0x%x)", v9, v10);
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001E27C(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  int v18 = 0;
  uint64_t v4 = *a2;
  if (__CFADD__(*a2, 24LL * a4)) {
LABEL_30:
  }
    __break(0x5513u);
  uint64_t v6 = v4 + 24LL * a4;
  if (v4) {
    BOOL v7 = (v6 & 7) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_29;
  }
  sscanf((const char *)v6, "%x", &v18);
  if (!a1 || (a1 & 7) != 0 || (unsigned int v8 = (int *)(a1 + 56), ((a1 + 56) & 7) != 0))
  {
LABEL_29:
    __break(0x5516u);
    goto LABEL_30;
  }

  int v9 = *v8 & ~v18;
  *unsigned int v8 = v9;
  id v17 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 == &qword_10011C810)
  {
    int v10 = 0;
  }

  else
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_100003154((uint64_t *)&v17);
      uint64_t v12 = v11[1];
      BOOL v13 = v12 && (v11[1] & 7) == 0;
      float v14 = (_DWORD *)(v12 + 56);
      v10 |= *v14;
      sub_100008A4C((uint64_t *)&v17);
    }

    while (v17 != &qword_10011C810);
    int v9 = *v8;
  }

  dword_10011C820 = v10;
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Set Notify log mask=0x%x (global=0x%x)", v9, v10);
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001E448(uint64_t result, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = result;
  unsigned int v11 = 0;
  if (a3 == 3)
  {
    uint64_t v5 = 0LL;
    do
    {
      sub_1000BC4CC(v5, 1);
      uint64_t v5 = (v5 + 1);
    }

    while ((_DWORD)v5 != 4);
    unsigned int v11 = 4;
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_5;
  }

  if (a3 <= 3)
  {
    BOOL v7 = (result & 7) == 0;
    if (!result) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }

  unsigned int v8 = a4 + 1;
  if (a4 == -1)
  {
    __break(0x5500u);
  }

  else
  {
    uint64_t v9 = *a2;
    if (!__CFADD__(*a2, 24LL * v8))
    {
      if (!v9) {
        goto LABEL_25;
      }
      uint64_t v10 = v9 + 24LL * v8;
      if ((v10 & 7) != 0) {
        goto LABEL_25;
      }
      sscanf((const char *)v10, "%u", &v11);
      if (v11 > 3)
      {
        memset(__b, 170, sizeof(__b));
        snprintf(__b, 0x400uLL, "Unknown category! %u", v11);
        if (!v4 || (v4 & 7) != 0) {
          goto LABEL_25;
        }
        BOOL v7 = 1;
        uint64_t v6 = __b;
        goto LABEL_7;
      }

      sub_1000BC4CC(v11, 1);
      if (!v4) {
        goto LABEL_25;
      }
LABEL_5:
      if ((v4 & 7) != 0) {
        goto LABEL_25;
      }
      uint64_t v6 = "Set Stat Collection to on";
      BOOL v7 = 1;
LABEL_7:
      sub_100020CB0(v4, v6, 1u, 0);
LABEL_20:
      if (v7)
      {
        sub_100020CB0(v4, " ", 1u, 1);
        return 1LL;
      }

uint64_t sub_10001E5E8(uint64_t result, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = result;
  unsigned int v11 = 0;
  if (a3 == 3)
  {
    uint64_t v5 = 0LL;
    do
    {
      sub_1000BC4CC(v5, 0);
      uint64_t v5 = (v5 + 1);
    }

    while ((_DWORD)v5 != 4);
    unsigned int v11 = 4;
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_5;
  }

  if (a3 <= 3)
  {
    BOOL v7 = (result & 7) == 0;
    if (!result) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }

  unsigned int v8 = a4 + 1;
  if (a4 == -1)
  {
    __break(0x5500u);
  }

  else
  {
    uint64_t v9 = *a2;
    if (!__CFADD__(*a2, 24LL * v8))
    {
      if (!v9) {
        goto LABEL_25;
      }
      uint64_t v10 = v9 + 24LL * v8;
      if ((v10 & 7) != 0) {
        goto LABEL_25;
      }
      sscanf((const char *)v10, "%u", &v11);
      if (v11 > 3)
      {
        memset(__b, 170, sizeof(__b));
        snprintf(__b, 0x400uLL, "Unknown category! %u", v11);
        if (!v4 || (v4 & 7) != 0) {
          goto LABEL_25;
        }
        BOOL v7 = 1;
        uint64_t v6 = __b;
        goto LABEL_7;
      }

      sub_1000BC4CC(v11, 0);
      if (!v4) {
        goto LABEL_25;
      }
LABEL_5:
      if ((v4 & 7) != 0) {
        goto LABEL_25;
      }
      uint64_t v6 = "Set Stat Collection to off";
      BOOL v7 = 1;
LABEL_7:
      sub_100020CB0(v4, v6, 1u, 0);
LABEL_20:
      if (v7)
      {
        sub_100020CB0(v4, " ", 1u, 1);
        return 1LL;
      }

uint64_t sub_10001E788(uint64_t result, void *a2, unsigned int a3, int a4)
{
  uint64_t v4 = result;
  unsigned int v11 = 0;
  if (a3 == 3)
  {
    uint64_t v5 = 0LL;
    do
    {
      sub_1000BC4CC(v5, -1);
      uint64_t v5 = (v5 + 1);
    }

    while ((_DWORD)v5 != 4);
    unsigned int v11 = 4;
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_5;
  }

  if (a3 <= 3)
  {
    BOOL v7 = (result & 7) == 0;
    if (!result) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }

  unsigned int v8 = a4 + 1;
  if (a4 == -1)
  {
    __break(0x5500u);
  }

  else
  {
    uint64_t v9 = *a2;
    if (!__CFADD__(*a2, 24LL * v8))
    {
      if (!v9) {
        goto LABEL_25;
      }
      uint64_t v10 = v9 + 24LL * v8;
      if ((v10 & 7) != 0) {
        goto LABEL_25;
      }
      sscanf((const char *)v10, "%u", &v11);
      if (v11 > 3)
      {
        memset(__b, 170, sizeof(__b));
        snprintf(__b, 0x400uLL, "Unknown category! %u", v11);
        if (!v4 || (v4 & 7) != 0) {
          goto LABEL_25;
        }
        BOOL v7 = 1;
        uint64_t v6 = __b;
        goto LABEL_7;
      }

      sub_1000BC4CC(v11, -1);
      if (!v4) {
        goto LABEL_25;
      }
LABEL_5:
      if ((v4 & 7) != 0) {
        goto LABEL_25;
      }
      uint64_t v6 = "Set Stat Collection to default";
      BOOL v7 = 1;
LABEL_7:
      sub_100020CB0(v4, v6, 1u, 0);
LABEL_20:
      if (v7)
      {
        sub_100020CB0(v4, " ", 1u, 1);
        return 1LL;
      }

uint64_t sub_10001E928(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  sub_100020CB0(a1, v3, 1u, 1);
  return 1LL;
}

uint64_t sub_10001E9D4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  sub_100020CB0(a1, v3, 1u, 1);
  return 1LL;
}

uint64_t sub_10001EA80(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (id v2 = (id *)(a1 + 64), ((a1 + 64) & 7) != 0)) {
    __break(0x5516u);
  }
  if (*v2) {
    [*v2 removeAllObjects];
  }
  memset(&v4[37], 170, 0x3DBuLL);
  strcpy(v4, "Set NowPlaying data to cleared state");
  sub_100020CB0(a1, v4, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

uint64_t sub_10001EB54(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EB7C(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EBA4(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EBCC(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EBF4(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EC1C(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EC44(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EC68(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EC8C(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ECB0(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ECD4(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ECF8(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ED20(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ED48(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ED70(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001ED98(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EDC0(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EDE8(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EE10(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  return 1LL;
}

uint64_t sub_10001EE38(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  unsigned int v6 = a3 - 6;
  if (a3 < 6)
  {
    uint64_t v10 = 0LL;
    strcpy((char *)__b, "Not enough parameters!");
    goto LABEL_142;
  }

  unsigned int v63 = -1;
  unint64_t v7 = *a2;
  if (*a2 > 0xFFFFFFFFFFFFFFCFLL) {
    goto LABEL_145;
  }
  if (!v7) {
    goto LABEL_146;
  }
  unsigned int v8 = (const char *)(v7 + 48);
  if (((v7 + 48) & 7) != 0) {
    goto LABEL_146;
  }
  if (*(char *)(v7 + 71) < 0)
  {
    if (*(void *)(v7 + 56) == 4LL && **(_DWORD **)v8 == 1953653109) {
      goto LABEL_29;
    }
    if (*(void *)(v7 + 56) == 3LL && **(_WORD **)v8 == 29557 && *(_BYTE *)(*(void *)v8 + 2LL) == 98) {
      goto LABEL_32;
    }
    unsigned int v8 = *(const char **)(v7 + 48);
    if (*(void *)(v7 + 56) != 2LL) {
      goto LABEL_28;
    }
LABEL_27:
    if (*(_WORD *)v8 == 29794)
    {
      unsigned int v14 = 2;
      goto LABEL_31;
    }

    goto LABEL_28;
  }

  int v9 = *(unsigned __int8 *)(v7 + 71);
  if (v9 == 2) {
    goto LABEL_27;
  }
  if (v9 == 3)
  {
    if (*(_WORD *)v8 != 29557 || *(_BYTE *)(v7 + 50) != 98) {
      goto LABEL_28;
    }
LABEL_32:
    int v13 = 1;
    unsigned int v14 = 1;
    goto LABEL_33;
  }

  if (v9 == 4 && *(_DWORD *)v8 == 1953653109)
  {
LABEL_29:
    unsigned int v14 = 0;
LABEL_31:
    int v13 = 1;
    goto LABEL_33;
  }

LABEL_146:
        __break(0x5516u);
      }

        float v51 = 4;
        goto LABEL_147;
      default:
        sub_1000CEAEC(0, 4, "%s:%d Unsupported cmdID!\n");
        goto LABEL_176;
    }
  }

LABEL_147:
      __break(0x5507u);
LABEL_148:
      __break(0x5500u);
    }

LABEL_145:
    __break(0x5513u);
    goto LABEL_146;
  }

  uint64_t v10 = 0LL;
  strcpy((char *)__b, "Invalid lingo!");
LABEL_142:
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_146;
  }
  sub_100020CB0(a1, (const std::string::value_type *)__b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return v10;
}

void sub_10001F518( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, std::string *a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_10001F568(uint64_t a1)
{
  if (!a1) {
    goto LABEL_9;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_9;
  }
  id v2 = (void **)(a1 + 64);
  if (((a1 + 64) & 7) != 0) {
    goto LABEL_9;
  }
  int v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
    [v3 setObject:v4 forKey:kMRMediaRemoteNowPlayingInfoTimestamp];
    uint64_t v5 = sub_100036FF0();
    if (v5 && (v5 & 7) == 0)
    {
      sub_100041B64(v5, *v2);
      goto LABEL_8;
    }

LABEL_9:
    __break(0x5516u);
  }

  __break(0x5510u);
}

  NSLog( @"MR: %s:%d EXIT _expectedFFRewStateTimestamp=%u _expectedFFRewState=%d",  "SetExpectedFFRewStateInfo",  4767LL,  v6,  v5);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 328));
}

    __break(0x5516u);
LABEL_10:
    __break(0x550Au);
    return result;
  }

  NSLog( @"ERROR - %s:%s - %d need a port",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "GetLegacyVolumeSupport",  188LL);
  return 0LL;
}

    __break(0x5516u);
LABEL_10:
    __break(0x550Au);
    return result;
  }

  NSLog( @"ERROR - %s:%s - %d need a port",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "GetLineoutEnabled",  277LL);
  return 0LL;
}

  a1[5] = 0LL;
  unint64_t v7 = (void **)a1[1];
  unsigned int v8 = a1[2] - (void)v7;
  if (v8 >= 0x11)
  {
    while (v7 && (v7 & 7) == 0)
    {
      operator delete(*v7);
      int v9 = a1[1];
      if (v9 >= 0xFFFFFFFFFFFFFFF8LL) {
        goto LABEL_21;
      }
      unint64_t v7 = (void **)(v9 + 8);
      a1[1] = v7;
      unsigned int v8 = a1[2] - (void)v7;
      if (v8 <= 0x10) {
        goto LABEL_14;
      }
    }

    goto LABEL_20;
  }

  if (*(unsigned __int8 *)(v2 + 1203) >= 4u)
  {
    sub_10005FB7C(v2, 0, 0);
    sub_1000605A8(v2, 0x10u);
  }

  return v7;
}

    if (!a4)
    {
LABEL_12:
      *a5 = 0;
      return;
    }

    sub_10008B264(a1, a4);
    if ((a4 & 7) == 0)
    {
      operator delete((void *)a4);
      goto LABEL_12;
    }

  sub_1000CEAEC( 0,  4,  "%s:%d NULL devPort.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  706);
  return 0LL;
}

  sub_1000CEAEC( 0,  4,  "%s:%d devPort=NULL, index=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoPortMap.cpp",  2296,  a3);
  return 0LL;
}

    if ((((int)self + 16) & 7LL) == 0)
    {
      sub_1000CEA98( 3u,  @"creating process assertion - %s:%s - %d appId=%@ pid=%d",  "/Library/Caches/com.apple.xbs/Sources/iapd/common/IAPEAClient.m",  "-[IAPEAUnregisteredClient takeProcessAssertion:]",  438LL,  self->_bundleId,  -[IAPEAUnregisteredClient _getProcessIdForUnregisteredClient](self, "_getProcessIdForUnregisteredClient"));
      self->_processAssertion = (SBSProcessAssertion *)SBSProcessAssertionCreateForPID( kCFAllocatorDefault,  -[IAPEAUnregisteredClient _getProcessIdForUnregisteredClient]( self,  "_getProcessIdForUnregisteredClient"),  1LL,  3LL,  a3);
      uint64_t v10 = time(0LL);
      if (((unint64_t)&self->_processAssertionStartTime & 7) == 0)
      {
        self->_processAssertionStartTime = v10;
        return;
      }
    }

    goto LABEL_13;
  }

    __break(0x5516u);
    return (int)self;
  }

  uint64_t result = *(void *)(result + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_28;
  }
  uint64_t result = sub_10001864C(result);
  if (!result) {
    sub_1000D2500();
  }
  unsigned int v8 = result;
  if ((result & 7) != 0) {
    goto LABEL_28;
  }
  if (!v7) {
    return result;
  }
  if (v7 == *(void *)(result + 40))
  {
    if (a2 != 327705) {
      return result;
    }
    goto LABEL_19;
  }

  if (a2 == 327705 && v7 == result)
  {
LABEL_19:
    uint64_t v12 = sub_1000A9A40(v5);
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 16LL))(v8, 0LL);
    uint64_t result = sub_1000ABB10(v8, 0, 6LL, 4, v9, &v12, 1u);
    if (!result) {
      return result;
    }
    uint64_t result = sub_100062BF8(v5, result, 500, 0, 0LL);
    if ((_DWORD)result) {
      return result;
    }
    uint64_t result = *(void *)(v5 + 8);
    if (result)
    {
      if ((result & 7) == 0)
      {
        uint64_t result = sub_10005758C(result, 6u, 1);
        uint64_t v10 = *(void *)(v5 + 8);
        if (v10)
        {
          if ((v10 & 7) == 0)
          {
            unsigned int v11 = sub_100062E0C();
            return sub_100057538(v10, 6u, v11);
          }
        }
      }
    }

    goto LABEL_28;
  }

  return result;
}

  __break(0x550Au);
  return result;
}

    uint64_t result = (char *)[*(id *)(a1 + 48) _log:@">\n"];
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
    unsigned int v11 = *(unsigned __int8 *)(v10 + 24);
    if (v11 <= 1)
    {
      *(_BYTE *)(v10 + 24) = v11 | result;
      return result;
    }
  }

    __break(0x5516u);
LABEL_10:
    __break(0x5510u);
  }

LABEL_8:
  memset(&v7[33], 170, 0x3DFuLL);
  strcpy(v7, "Sent fake NowPlayingInfo to iapd");
  sub_100020CB0(a1, v7, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

  __break(0x5513u);
  return result;
}

  if (a4 == 3)
  {
    NSLog( @"%s:%d VPort port type(%d) but not VPort instance(%d) !  Set portType %d->%d",  "IapTransport",  152LL,  3LL,  0LL,  3LL,  0LL);
    *(_DWORD *)(a1 + 92) = 0;
  }

  *(void *)(a1 + 1memset(md, 170, 20) = a7;
  *(void *)&unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  float v32 = v16;
  float v33 = v16;
  unsigned int v30 = v16;
  char v31 = v16;
  int v28 = v16;
  BOOL v29 = v16;
  BOOL v26 = v16;
  unint64_t v27 = v16;
  unint64_t v24 = v16;
  __darwin_ct_rune_t v25 = v16;
  unint64_t v22 = v16;
  uint64_t v23 = v16;
  uint64_t v20 = v16;
  BOOL v21 = v16;
  *(_OWORD *)__str = v16;
  double v19 = v16;
  snprintf(__str, 0x100uLL, "com.apple.iapd.InQ.%llu.queue", *(void *)(a1 + 96));
  *(void *)(a1 + 136) = dispatch_queue_create(__str, 0LL);
  return a1;
}

  __break(0x550Au);
}

    __break(0x5516u);
LABEL_9:
    __break(0x550Au);
  }

  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  if (*(_DWORD *)(a1 + 1436) != -1)
  {
    sub_1000612C4(*(void *)(a1 + 8));
    if (v4 && (v4 & 7) == 0)
    {
      sub_10005EB3C(v4, *(_DWORD *)(a1 + 1436));
      return;
    }

    goto LABEL_13;
  }

        __break(0x5516u);
      }
    }
  }

  return result;
}

        __break(0x5516u);
      }
    }
  }

  return result;
}

    __break(0x5516u);
  }

  return result;
}

    __break(0x5516u);
  }

  return result;
}

  __break(0x5513u);
  return result;
}

  LODWORD(self) = v3;
  return (int)self;
}

  unint64_t v7 = 2;
LABEL_10:
  if (v6) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = 1;
  }
  if (a2 == 4) {
    int v9 = 252;
  }
  else {
    int v9 = 253;
  }
  uint64_t v10 = v7 + a3;
  if (a2 == 4) {
    unsigned int v11 = 3;
  }
  else {
    unsigned int v11 = 2;
  }
  uint64_t v12 = v11 + v7 + v8;
  if (v10 <= v9) {
    return (v12 + 1);
  }
  else {
    return (v12 + 3);
  }
}

  __break(0x5513u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

BOOL sub_10001F678(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 + 1;
  if (a4 == -1) {
    goto LABEL_20;
  }
  if (v4 < a3)
  {
    unsigned int v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v9 = *a2;
    if (__CFADD__(*a2, 24LL * v4)) {
      goto LABEL_21;
    }
    if (v9)
    {
      uint64_t v10 = v9 + 24LL * v4;
      if ((v10 & 7) == 0)
      {
        unsigned int v11 = v8;
        uint64_t v12 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10);
        uint64_t v13 = sub_100036FF0();
        if (v13)
        {
          if ((v13 & 7) == 0)
          {
            sub_100041C40(v13, v12);
            memset(__b, 170, sizeof(__b));
            uint64_t v14 = *a2;
            if (__CFADD__(*a2, 24LL * v4)) {
              goto LABEL_21;
            }
            if (v14)
            {
              uint64_t v15 = v14 + 24LL * v4;
              if ((v15 & 7) == 0)
              {
                snprintf(__b, 0x400uLL, "Sent fake NowPlaying APP is '%s' to iapd", (const char *)v15);
                if (a1)
                {
                  if ((a1 & 7) == 0)
                  {
                    sub_100020CB0(a1, __b, 1u, 0);
                    sub_100020CB0(a1, " ", 1u, 1);

                    return v4 < a3;
                  }
                }
              }
            }
          }
        }
      }
    }

    __break(0x5516u);
LABEL_20:
    __break(0x5500u);
LABEL_21:
    __break(0x5513u);
  }

  return v4 < a3;
}

BOOL sub_10001F808(BOOL result, void *a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 + 1;
  if (a4 == -1) {
    goto LABEL_13;
  }
  if (v4 >= a3) {
    return v4 < a3;
  }
  uint64_t v6 = *a2;
  if (!__CFADD__(*a2, 24LL * v4))
  {
    if (v6)
    {
      uint64_t v7 = result;
      unsigned int v8 = (const std::string *)(v6 + 24LL * v4);
      if ((v8 & 7) == 0)
      {
        int v9 = std::string::compare(v8, "play");
        uint64_t v10 = sub_100036FF0();
        if (v10)
        {
          if ((v10 & 7) == 0)
          {
            BOOL v11 = v9 == 0;
            sub_100041CF0(v10, v11);
            memset(__b, 170, sizeof(__b));
            snprintf(__b, 0x400uLL, "Sent fake NowPlayingInfo playing state (%d) to iapd", v11);
            if (v7)
            {
              if ((v7 & 7) == 0)
              {
                sub_100020CB0(v7, __b, 1u, 0);
                sub_100020CB0(v7, " ", 1u, 1);
                return v4 < a3;
              }
            }
          }
        }
      }
    }

    __break(0x5516u);
LABEL_13:
    __break(0x5500u);
  }

  __break(0x5513u);
  return result;
}

void sub_10001F944(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  if (a3 <= 6)
  {
    NSLog(@"%s:%d Not enough parameters!", "commandHandleSendReplayPacket", 2076LL);
    if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
      goto LABEL_128;
    }
    if (!*(_BYTE *)(a1 + 96))
    {
      strcpy((char *)__b, "ERROR: Not enough parameters!");
      sub_100020CB0(a1, (const std::string::value_type *)__b, 1u, 1);
    }

    return;
  }

  unint64_t v6 = *a2;
  if (*a2 >= 0xFFFFFFFFFFFFFFB8LL) {
    goto LABEL_127;
  }
  if (!v6) {
    goto LABEL_128;
  }
  unint64_t v7 = v6 + 72;
  if (((v6 + 72) & 7) != 0) {
    goto LABEL_128;
  }
  if (*(char *)(v6 + 95) < 0)
  {
    if (*(void *)(v6 + 80) == 4LL && **(_DWORD **)v7 == 1953653109) {
      goto LABEL_41;
    }
    if (*(void *)(v6 + 80) == 3LL && **(_WORD **)v7 == 29557 && *(_BYTE *)(*(void *)v7 + 2LL) == 98)
    {
LABEL_43:
      unsigned int v11 = 1;
      goto LABEL_44;
    }

    if (*(void *)(v6 + 80) != 2LL) {
      goto LABEL_34;
    }
    unint64_t v7 = *(void *)v7;
  }

  else
  {
    int v8 = *(unsigned __int8 *)(v6 + 95);
    if (v8 != 2)
    {
      if (v8 != 3)
      {
        if (v8 == 4 && *(_DWORD *)v7 == 1953653109)
        {
LABEL_41:
          unsigned int v11 = 0;
          goto LABEL_44;
        }

LABEL_129:
    __break(0x5507u);
LABEL_130:
    __break(0x5500u);
  }

        if (v13 <= 15 && v13 != -1 && (v13 & 0x80000000) == 0 && ((1 << v13) & 0xE400) != 0)
        {
          if (!*(_BYTE *)(a1 + 2212))
          {
            if (!v10) {
              goto LABEL_138;
            }
            if ((v10 & 7) != 0) {
              goto LABEL_170;
            }
            if (((*(uint64_t (**)(uint64_t))(*(void *)v10 + 232LL))(v10) & 1) == 0) {
LABEL_138:
            }
              sub_1000710B8(a1, v17, 1);
          }
        }

        *(_DWORD *)(a1 + 152_Block_object_dispose(va, 8) = 4;
        if ((((_BYTE)a1 - 4) & 3) != 0) {
          goto LABEL_170;
        }
        *(_BYTE *)(a1 + 1532) = 1;
LABEL_159:
        __darwin_ct_rune_t v22 = &v48;
        BOOL v23 = a1;
        unint64_t v24 = 0LL;
        unsigned int v25 = 48;
LABEL_160:
        sub_10007158C(v23, 0, v24, (uint64_t)v22, v25);
        return;
      case 'r':
        if (!*(_BYTE *)(a1 + 2201)) {
          goto LABEL_83;
        }
        if (((a1 + 1528) & 7) != 0) {
          goto LABEL_170;
        }
        unint64_t v36 = *(_DWORD *)(a1 + 1528);
        if (v36 > 7) {
          goto LABEL_171;
        }
        if (v36 > 3) {
          goto LABEL_83;
        }
        *(_DWORD *)(a1 + 152_Block_object_dispose(va, 8) = 4;
        if ((((_BYTE)a1 - 4) & 3) != 0) {
          goto LABEL_170;
        }
        *(_BYTE *)(a1 + 1532) = 1;
        sub_10007158C(a1, 0, 0LL, (uint64_t)&v48, 48);
LABEL_83:
        *(_BYTE *)(a1 + 2201) = 0;
        return;
      case 's':
        if (!v10) {
          sub_1000CEAEC( 0,  4,  "%s:%d NULL pPortObj!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  10688);
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1280));
        if ((v10 & 7) != 0) {
          goto LABEL_170;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 264LL))(v10))
        {
          if (((a1 + 1536) & 7) != 0) {
            goto LABEL_170;
          }
          *(_DWORD *)(a1 + 1536) = 4;
          uint64_t v37 = *(void *)(a1 + 8);
          if (!v37) {
            goto LABEL_170;
          }
          if ((v37 & 7) != 0) {
            goto LABEL_170;
          }
          sub_100057CD4(v37, 1);
          unint64_t v38 = *(void *)(a1 + 8);
          if (!v38 || (v38 & 7) != 0) {
            goto LABEL_170;
          }
          if (!sub_100057D30(v38) && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 280LL))(v10))
          {
            size_t v40 = *(void *)(a1 + 8);
            char v41 = (*(uint64_t (**)(void *))(*(void *)v39 + 384LL))(v39);
            sub_100070E84(1LL, v40, (void *)v10, v41);
          }

          sub_10007158C(a1, 0, 0LL, a1 + 1536, 48);
          sub_10006EBD4(a1, v10);
          sub_100070F1C(*(void *)(a1 + 8), v10, 0);
          sub_10006E778(a1, 1);
          *(void *)(a1 + 1272) = 0LL;
        }

        else
        {
          sub_10006EBD4(a1, v10);
        }

    __break(0x5500u);
LABEL_130:
    __break(0x5512u);
    goto LABEL_131;
  }

  if (v13 != 1)
  {
    sub_1000CEAEC( 0,  4,  "%s:%d CIapLingoStorage::OpeniPodFeatureFile invalid feature type: %d !",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoStorage.cpp",  936,  v13);
    goto LABEL_111;
  }

  if (a4 != 1) {
    goto LABEL_111;
  }
  memset(&v50, 170, 24);
  sub_1000A612C();
  sub_1000A7BAC("/Tags", (char **)&qword_10011C5E8, (char *)&v50);
  memset(__str, 170, 24);
  sub_1000BD67C((char *)&v50);
  unint64_t v24 = v23;
  unsigned int v25 = sub_100062E0C();
  snprintf(__str, 0x18uLL, "%lu.plist", v25);
  sub_1000A7BAC("/", (char **)&v50, (char *)&__p);
  sub_1000A7BAC(__str, &__p.__r_.__value_.__l.__data_, (char *)&v52);
  if ((v24 & 7) != 0) {
    goto LABEL_126;
  }
  int v26 = a1 + 80LL * v45;
  unint64_t v27 = (std::string *)(v26 + 1240);
  if (((v26 + 1240) & 7) != 0) {
    goto LABEL_126;
  }
  std::string::operator=((std::string *)(v26 + 1240), &v52);
  if (sub_1000BD758((const char *)v27))
  {
    while (1)
    {
      int v28 = v25 + 1;
      if (v25 == -1) {
        goto LABEL_129;
      }
      snprintf(__str, 0x18uLL, "%lu.plist", v25 + 1);
      sub_1000A7BAC("/", (char **)&v50, (char *)&__p);
      sub_1000A7BAC(__str, &__p.__r_.__value_.__l.__data_, (char *)&v52);
      std::string::operator=(v27, &v52);
      ++v25;
    }
  }

  int v28 = v25;
LABEL_95:
  BOOL v23 = (char)v44;
  unint64_t v38 = fopen((const char *)v27, "w+");
  _BYTE *v44 = v38;
  if (v38)
  {
    inited = InitSigningContext(1LL);
    if ((((_BYTE)a1 + 80 * (_BYTE)v45 - 48) & 7) != 0) {
      goto LABEL_126;
    }
    *(void *)(a1 + 80LL * v45 + 1232) = inited;
    if (inited)
    {
      snprintf(__str, 0x18uLL, "%lu.p7", v28);
      sub_1000A7BAC("/", (char **)&v50, (char *)&__p);
      sub_1000A7BAC(__str, &__p.__r_.__value_.__l.__data_, (char *)&v52);
      if ((((_BYTE)a1 + 80 * (_BYTE)v45 - 16) & 7) != 0) {
        goto LABEL_126;
      }
      std::string::operator=((std::string *)(a1 + 80LL * v45 + 1264), &v52);
      BOOL v23 = (char)v44;
      uint64_t v12 = 0;
      uint64_t v46 = 16;
    }

    else
    {
      uint64_t v12 = 3;
      BOOL v23 = (char)v44;
    }
  }

  else
  {
    uint64_t v12 = 3;
  }

  if (SHIBYTE(v50.tm_year) < 0) {
    operator delete(*(void **)&v50.tm_sec);
  }
LABEL_110:
  if (v12)
  {
LABEL_111:
    if ((v23 & 7) == 0)
    {
      size_t v40 = (void *)(a1 + 80LL * v45 + 1232);
      if ((((_BYTE)a1 + 80 * (_BYTE)v45 - 48) & 7) == 0)
      {
        if (*v40)
        {
          EraseSigningContext();
          const char *v40 = 0LL;
        }

        if (*v44)
        {
          fclose(*v44);
          _BYTE *v44 = 0LL;
        }

        char v41 = a1 + 80LL * v45 + 1216;
        if ((v41 & 7) == 0)
        {
          uint64_t v42 = *(void *)v41;
          if (!*(void *)v41) {
            goto LABEL_41;
          }
          if ((v42 & 7) == 0)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 8LL))(v42);
            *(void *)char v41 = 0LL;
            goto LABEL_41;
          }
        }
      }
    }

    goto LABEL_126;
  }

  if ((v23 & 7) != 0 || (((_BYTE)a1 + 80 * (_BYTE)v45 - 56) & 7) != 0) {
    goto LABEL_126;
  }
  *(_DWORD *)(a1 + 80LL * v45 + 1224) = v13;
  *uint64_t v20 = v46;
  uint64_t v43 = *v21;
  if (v43 != 255)
  {
    uint64_t v12 = 0;
    char *v21 = v43 + 1;
    __darwin_ct_rune_t v22 = *a5;
    goto LABEL_42;
  }

LABEL_115:
  if (v35) {
    operator delete[]((void *)v35);
  }
  if (!v44)
  {
    NSLog(@"%s:%d Packet transmission failed!", "commandHandleSendReplayPacket", 2065LL);
    if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
      goto LABEL_128;
    }
    if (*(unsigned __int8 *)(a1 + 96) <= 1u)
    {
      if (!*(_BYTE *)(a1 + 96))
      {
        strcpy((char *)__b, "ERROR: Packet transmission failed!");
        sub_100020CB0(a1, (const std::string::value_type *)__b, 1u, 1);
      }

      return;
    }
}

    __break(0x5500u);
    return;
  }

      __break(0x550Au);
LABEL_116:
      sub_1000D2868();
    }

    if (!qword_10011C980 || (qword_10011C980 & 7) != 0) {
      goto LABEL_113;
    }
    pthread_mutex_lock((pthread_mutex_t *)(qword_10011C980 + 1224));
    if (*(void *)(a1 + 1208))
    {
      int v26 = sub_100061274();
      if (!v26 || (v26 & 7) != 0) {
        goto LABEL_113;
      }
      unint64_t v27 = sub_100054A7C(v26, *(void *)(a1 + 1208));
      if (v27 + 8 >= 0x10) {
        goto LABEL_115;
      }
      int v28 = v27;
      if (v27 >= 0xFFFFFFFE)
      {
        size_t v29 = sub_100061274();
        if (!v29 || (v29 & 7) != 0) {
          goto LABEL_113;
        }
        if ((sub_10008CBE4(v29, *(void *)(a1 + 1208)) & 3) != 0) {
          sub_100091864(*(void *)(a1 + 8), 0);
        }
      }

      unsigned int v30 = sub_1000438B8();
      if (!v30 || (v30 & 7) != 0) {
        goto LABEL_113;
      }
      size_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 80LL))(v30);
      if (v28 >= 4 && v31)
      {
        float v32 = *(void *)(a1 + 1192);
        if (!v32 || (v32 & 7) != 0) {
          goto LABEL_113;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 96LL))(v32))
        {
          unsigned __int16 v33 = sub_100061274();
          if (!v33
            || (v33 & 7) != 0
            || !qword_10011C980
            || (qword_10011C980 & 7) != 0
            || ((qword_10011C980 + 1208) & 7) != 0)
          {
            goto LABEL_113;
          }

          if (sub_10008D184(v33, *(void *)(qword_10011C980 + 1208)) != 56)
          {
            uint64_t v34 = *(void *)(a1 + 8);
            if (!v34) {
              goto LABEL_113;
            }
            if ((v34 & 7) != 0) {
              goto LABEL_113;
            }
            unint64_t v35 = sub_1000579D4(v34);
            if (!v35) {
              goto LABEL_113;
            }
            unint64_t v36 = v35;
            if ((v35 & 7) != 0) {
              goto LABEL_113;
            }
            uint64_t v37 = sub_100076200(v35);
            if (sub_100091824(v36))
            {
              if (v37 > 3) {
                goto LABEL_115;
              }
              if (!v37) {
                sub_100091844(v36);
              }
            }
          }
        }
      }
    }

    unint64_t v18 = qword_10011C980;
    if (!qword_10011C980) {
      goto LABEL_113;
    }
    goto LABEL_100;
  }

  if (a2 == 1)
  {
    if ((unint64_t)(a3 - 7) >= 2)
    {
      if (a3 == 6)
      {
        if (qword_10011C980)
        {
          if ((qword_10011C980 & 7) == 0)
          {
            pthread_mutex_lock((pthread_mutex_t *)(qword_10011C980 + 1224));
            unint64_t v38 = *(void *)(a1 + 1192);
            if (v38)
            {
              if ((v38 & 7) == 0)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 96LL))(v38))
                {
                  uint64_t v12 = sub_100092154(a1, 0);
                  *(_DWORD *)(a1 + 138_Block_object_dispose(va, 8) = sub_100062E0C();
                }

                else
                {
                  uint64_t v12 = 0LL;
                }

                unsigned int v11 = qword_10011C980;
                if (qword_10011C980)
                {
                  if ((qword_10011C980 & 7) == 0) {
                    goto LABEL_20;
                  }
                }
              }
            }
          }
        }

        goto LABEL_113;
      }

      if (a3 != 5) {
        return 0LL;
      }
    }

    if (!qword_10011C980) {
      goto LABEL_113;
    }
    if ((qword_10011C980 & 7) != 0) {
      goto LABEL_113;
    }
    pthread_mutex_lock((pthread_mutex_t *)(qword_10011C980 + 1224));
    unint64_t v15 = *(void *)(a1 + 1192);
    if (!v15 || (v15 & 7) != 0) {
      goto LABEL_113;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 96LL))(v15))
    {
      sub_1000612C4(*(void *)(a1 + 8));
      if (v16)
      {
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v17 || (v17 & 7) != 0) {
          goto LABEL_113;
        }
        sub_10005EB3C(v17, *(_DWORD *)(a1 + 1376));
        *(_BYTE *)(a1 + 1384) = 0;
      }

      *(_DWORD *)(a1 + 138_Block_object_dispose(va, 8) = 0;
    }

    goto LABEL_49;
  }

  if (a2 == 4)
  {
    if (!qword_10011C980 || (qword_10011C980 & 7) != 0) {
      goto LABEL_113;
    }
    pthread_mutex_lock((pthread_mutex_t *)(qword_10011C980 + 1224));
    *(_DWORD *)(a1 + 1380) = 0;
    sub_1000612C4(*(void *)(a1 + 8));
    if (v20)
    {
      sub_1000612C4(*(void *)(a1 + 8));
      if (!v21 || (v21 & 7) != 0) {
        goto LABEL_113;
      }
      sub_10005EB3C(v21, *(_DWORD *)(a1 + 1376));
      *(_BYTE *)(a1 + 1384) = 0;
    }

    __darwin_ct_rune_t v22 = *(void *)(a1 + 8);
    if (!v22) {
      goto LABEL_113;
    }
    if ((v22 & 7) != 0) {
      goto LABEL_113;
    }
    sub_10005758C(v22, 4u, 0);
    BOOL v23 = *(void *)(a1 + 8);
    if (!v23) {
      goto LABEL_113;
    }
    if ((v23 & 7) != 0) {
      goto LABEL_113;
    }
    sub_100057538(v23, 4u, 0);
    *(_BYTE *)(a1 + 1412) = 0;
    *(_DWORD *)(a1 + 1216) = 1;
    *(void *)(a1 + 120_Block_object_dispose(va, 8) = a4;
    if (!qword_10011C980) {
      goto LABEL_113;
    }
    if ((qword_10011C980 & 7) != 0) {
      goto LABEL_113;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(qword_10011C980 + 1224));
    unint64_t v24 = sub_1000451B0();
    if (!v24 || (v24 & 7) != 0) {
      goto LABEL_113;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 160LL))(v24, 3600000LL);
    return 0LL;
  }

  if (a2 != 8) {
    goto LABEL_116;
  }
  if (!qword_10011C980 || (qword_10011C980 & 7) != 0) {
    goto LABEL_113;
  }
  pthread_mutex_lock((pthread_mutex_t *)(qword_10011C980 + 1224));
  *(_DWORD *)(a1 + 1380) = 0;
  sub_1000612C4(*(void *)(a1 + 8));
  if (v6)
  {
    sub_1000612C4(*(void *)(a1 + 8));
    if (!v7 || (v7 & 7) != 0) {
      goto LABEL_113;
    }
    sub_10005EB3C(v7, *(_DWORD *)(a1 + 1376));
    *(_BYTE *)(a1 + 1384) = 0;
  }

  *(_DWORD *)(a1 + 138_Block_object_dispose(va, 8) = 0;
  int v8 = *(void *)(a1 + 8);
  if (!v8) {
    goto LABEL_113;
  }
  if ((v8 & 7) != 0) {
    goto LABEL_113;
  }
  sub_10005758C(v8, 4u, 0);
  int v9 = *(void *)(a1 + 8);
  if (!v9 {
    || (v9 & 7) != 0
  }
    || (sub_100057538(v9, 4u, 0),
        *(_BYTE *)(a1 + 1412) = 0,
        sub_100090CC0(a1),
        sub_100091864(*(void *)(a1 + 8), 0),
        *(void *)(a1 + 120_Block_object_dispose(va, 8) = 0LL,
        (unsigned int v11 = qword_10011C980) == 0)
    || (qword_10011C980 & 7) != 0)
  {
LABEL_113:
    __break(0x5516u);
    goto LABEL_114;
  }

  uint64_t v12 = v10;
LABEL_20:
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 1224));
  return v12;
}

LABEL_131:
    __break(0x550Au);
  }

              unint64_t v16 = 0LL;
LABEL_132:
              if (a3 && (a3 & 7) == 0 && (((_BYTE)a3 + 12) & 3) == 0)
              {
                *(_BYTE *)(a3 + 12) = 1;
                *(_BYTE *)(a3 + 13) = v8;
                if ((_DWORD)v16) {
                  return v16;
                }
                if ((((_BYTE)v3 - 72) & 7) == 0)
                {
                  *(_BYTE *)(v3 + 1976) = 1;
                  if (((v3 + 2184) & 7) == 0)
                  {
                    *(_DWORD *)(v3 + 2184) |= v15;
                    return v16;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  __break(0x5507u);
}

void sub_10001FF78( _Unwind_Exception *a1, uint64_t a2, std::string *a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_10001FFB8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (a3 <= 5)
  {
    NSLog(@"%s:%d Not enough parameters!", "commandHandleSendReplayEvent", 2142LL);
    if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
      goto LABEL_73;
    }
    if (!*(_BYTE *)(a1 + 96))
    {
      strcpy(__b, "ERROR: Not enough parameters!");
LABEL_49:
      sub_100020CB0(a1, __b, 1u, 1);
    }

    return 0LL;
  }

  unint64_t v6 = *a2;
  if (*a2 >= 0xFFFFFFFFFFFFFFB8LL)
  {
LABEL_74:
    __break(0x5513u);
LABEL_75:
    __break(0x550Au);
    goto LABEL_76;
  }

  if (!v6) {
    goto LABEL_73;
  }
  a3 = v6 + 72;
  if (((v6 + 72) & 7) != 0) {
    goto LABEL_73;
  }
  int v7 = *(unsigned __int8 *)(v6 + 95);
  if (*(char *)(v6 + 95) < 0)
  {
    if (*(void *)(v6 + 80) == 4LL && **(_DWORD **)a3 == 1953653109) {
      goto LABEL_51;
    }
    if (*(void *)(v6 + 80) == 3LL && **(_WORD **)a3 == 29557 && *(_BYTE *)(*(void *)a3 + 2LL) == 98) {
      goto LABEL_55;
    }
    if (*(void *)(v6 + 80) != 2LL)
    {
      size_t v11 = strlen("Unknown");
      goto LABEL_39;
    }

    int v8 = *(_WORD **)a3;
LABEL_33:
    if (*v8 == 29794)
    {
      unsigned int v13 = 2;
      goto LABEL_53;
    }

    size_t v11 = strlen("Unknown");
    if ((v7 & 0x80) == 0) {
      goto LABEL_35;
    }
LABEL_39:
    if (v11 != *(void *)(v6 + 80)) {
      goto LABEL_43;
    }
    if (v11 == -1LL) {
      goto LABEL_76;
    }
    a3 = *(void *)a3;
    goto LABEL_42;
  }

  int v8 = (_WORD *)(v6 + 72);
  if (v7 == 2) {
    goto LABEL_33;
  }
  if (v7 == 3)
  {
    if (*(_WORD *)a3 != 29557 || *(_BYTE *)(v6 + 74) != 98) {
      goto LABEL_30;
    }
LABEL_55:
    a3 = 1LL;
    unsigned int v13 = 1;
    goto LABEL_56;
  }

  if (v7 != 4 || *(_DWORD *)a3 != 1953653109)
  {
LABEL_30:
    size_t v11 = strlen("Unknown");
LABEL_35:
    if (v11 == -1LL) {
LABEL_76:
    }
      sub_100024588(a3);
LABEL_42:
    if (!memcmp((const void *)a3, "Unknown", v11))
    {
      a3 = 0LL;
      unsigned int v13 = 5;
      goto LABEL_56;
    }

LABEL_43:
    NSLog(@"%s:%d Unknown Port type!", "commandHandleSendReplayEvent", 2115LL);
    if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
      goto LABEL_73;
    }
    if (!*(_BYTE *)(a1 + 96))
    {
      strcpy(__b, "ERROR: Unknown Port type!");
      goto LABEL_49;
    }

    return 0LL;
  }

  uint64_t result = sub_100082BD8(v9, (unsigned __int16)a3);
  unint64_t v15 = v18;
  if (!v18 || (v18 & 7) != 0) {
    goto LABEL_51;
  }
  unint64_t v16 = *(unsigned __int8 *)(v18 + 134);
  if (v16 != 255)
  {
    *(_BYTE *)(v18 + 134) = v16 + 1;
    sub_100062D14(v3, a3, 118, (uint64_t)v12, 500);
    sub_1000AB4C4(v3[1], v15, 0, 1u);
    return 0LL;
  }

        __break(0x5500u);
        return result;
      }
    }
  }

  LOWORD(v9) = -1;
LABEL_23:
  if ((v6 & 7) != 0) {
    goto LABEL_41;
  }
  uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 384LL))(v6);
  if ((sub_100063E8C((uint64_t)v10) & 1) == 0 && (sub_100063DFC((uint64_t)v10) & 1) == 0)
  {
    LOWORD(v7) = v7 & 0xFFFE;
    LOWORD(v_Block_object_dispose(va, 8) = v8 & 0xFFFE;
  }

  size_t v11 = sub_1000641B0((uint64_t)v10);
  uint64_t result = 0LL;
  uint64_t v12 = v11 == 0;
  unsigned int v13 = v7 & 0xFFBF;
  if (!v12) {
    unsigned int v13 = v7;
  }
  *(_WORD *)(v6 + 184) = v8;
  *(_WORD *)(v6 + 186) = v13;
  *(_WORD *)(v6 + 18_Block_object_dispose(va, 8) = v9;
  uint64_t v14 = v13 & 2;
  if ((v13 & 0x40) != 0) {
    unint64_t v15 = 32765;
  }
  else {
    unint64_t v15 = 31677;
  }
  *(_DWORD *)(v6 + 204) = v15 | v14;
  return result;
}

            __break(0x550Cu);
          }
        }
      }
    }
  }

  return result;
}

  xmlFreeDoc(v1);
LABEL_44:
  uint64_t v18 = 0LL;
LABEL_45:
  return (std::string *)v18;
}

LABEL_51:
  unsigned int v13 = 0;
LABEL_53:
  a3 = 1LL;
LABEL_56:
  unsigned int v21 = -1431655766;
  if (v6 >= 0xFFFFFFFFFFFFFFA0LL) {
    goto LABEL_74;
  }
  uint64_t v14 = (const char *)(v6 + 96);
  if (((v6 + 96) & 7) != 0) {
    goto LABEL_73;
  }
  sscanf(v14, "%X", &v21);
  unsigned int v20 = -1431655766;
  unint64_t v15 = *a2;
  if (*a2 >= 0xFFFFFFFFFFFFFF88LL) {
    goto LABEL_74;
  }
  if (!v15) {
    goto LABEL_73;
  }
  unint64_t v16 = (const char *)(v15 + 120);
  if (((v15 + 120) & 7) != 0) {
    goto LABEL_73;
  }
  sscanf(v16, "%X", &v20);
  if (!(_DWORD)a3)
  {
    uint64_t v18 = 0LL;
    goto LABEL_70;
  }

  uint64_t v17 = sub_1000B6CE0();
  if (!v17 || (v17 & 7) != 0) {
LABEL_73:
  }
    __break(0x5516u);
  uint64_t v18 = sub_10008E880(v17, v13);
LABEL_70:
  uint64_t v19 = sub_1000B6CE0();
  if (!v19 || (v19 & 7) != 0) {
    goto LABEL_73;
  }
  (*(void (**)(uint64_t, void, void, uint64_t, void))(*(void *)v19 + 48LL))(v19, v21, v20, v18, 0LL);
  return 1LL;
}

          sub_10002F3F8(MPMediaPlaylistPropertyPersistentID, (uint64_t)v10);
          sub_10002FABC(MPMediaPlaylistPropertyParentPersistentID, 0LL, 1);
LABEL_52:
          objc_msgSend( v12[406],  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
          goto LABEL_53;
        }

    __break(0x5516u);
LABEL_52:
    __break(0x5500u);
LABEL_53:
    __break(0x5510u);
    return;
  }

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    goto LABEL_52;
  }

  if ((v9 & 7) != 0) {
    goto LABEL_51;
  }
  if (HIWORD(a3)) {
    goto LABEL_53;
  }
  if (!sub_100082B6C(v9, (unsigned __int16)a3, &v18, &v17))
  {
LABEL_47:
    operator delete[](v12);
    return 0LL;
  }

  if (v17 == 10)
  {
    sub_100082194(v9, (unsigned __int16)a3);
    goto LABEL_47;
  }

      __break(0x550Au);
      goto LABEL_52;
    }

          __break(0x5507u);
          goto LABEL_52;
        case 2:
          if (!v6 || (v6 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v13 = *(uint64_t (**)(void))(*(void *)v6 + 592LL);
          goto LABEL_31;
        case 3:
          if (!v6 || (v6 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v13 = *(uint64_t (**)(void))(*(void *)v6 + 600LL);
          goto LABEL_31;
        case 4:
          if (!v6 || (v6 & 7) != 0) {
            goto LABEL_49;
          }
          unsigned int v13 = *(uint64_t (**)(void))(*(void *)v6 + 408LL);
LABEL_31:
          *(_DWORD *)((char *)&v16 + 1) = bswap32(v13());
LABEL_34:
          int v7 = 5;
          goto LABEL_35;
        case 5:
          *(_DWORD *)((char *)&v16 + 1) = 0;
          goto LABEL_34;
        default:
          sub_1000CEAEC(0, 4, "%s:%d ERROR: Cmd0x003C_GetDBiTunesInfo Unknown DB info type: 0x%02X\n");
          return (tm *)v5;
      }
    }
  }

  else
  {
    uint64_t v5 = 4LL;
    sub_1000CEAEC(0, 4, "%s:%d No data!\n");
  }

  return (tm *)v5;
}

            int v28 = __str.__r_.__value_.__s.__size_;
            size_t v29 = __str.__r_.__value_.__s.__size_;
            if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              int v28 = __str.__r_.__value_.__l.__size_;
            }
            if (!v28) {
              goto LABEL_59;
            }
            unsigned int v30 = a5->__r_.__value_.__l.__size_;
            if (v30 >= a5->__r_.__value_.__l.__cap_)
            {
              size_t v31 = sub_10009EDE8(a5, &__str);
            }

            else
            {
              sub_10009ED7C((uint64_t)a5, &__str);
              if (v30 >= 0xFFFFFFFFFFFFFFE8LL) {
                goto LABEL_65;
              }
              size_t v31 = (std::string *)(v30 + 24);
            }

            a5->__r_.__value_.__l.__size_ = (std::string::size_type)v31;
            size_t v29 = __str.__r_.__value_.__s.__size_;
LABEL_59:
            if ((v29 & 0x80) != 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((_DWORD)a4 == ++v17) {
              return;
            }
            continue;
          default:
            goto LABEL_51;
        }
      }

      goto LABEL_64;
    }
  }

uint64_t sub_1000203A0(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v4 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  if ((unint64_t)qword_10011C818 >= 2)
  {
    do
    {
      unsigned int v4 = (uint64_t *)qword_10011C808;
      uint64_t result = (uint64_t)sub_100003154((uint64_t *)&v4);
      if (!result) {
        goto LABEL_19;
      }
      if ((result & 7) != 0) {
        goto LABEL_19;
      }
      id v2 = (uint64_t *)(result + 8);
      if (((result + 8) & 7) != 0) {
        goto LABEL_19;
      }
      uint64_t result = *v2;
      if (*v2 == v1)
      {
        uint64_t result = (uint64_t)sub_100008A4C((uint64_t *)&v4);
        if (v4 != &qword_10011C810)
        {
          uint64_t result = (uint64_t)sub_100003154((uint64_t *)&v4);
          if (!result) {
            goto LABEL_19;
          }
          if ((result & 7) != 0) {
            goto LABEL_19;
          }
          int v3 = (uint64_t *)(result + 8);
          if (((result + 8) & 7) != 0) {
            goto LABEL_19;
          }
          uint64_t result = *v3;
          if (*v3)
          {
LABEL_13:
            if ((result & 7) != 0) {
              goto LABEL_19;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
          }
        }
      }

      else if (result)
      {
        goto LABEL_13;
      }
    }

    while ((unint64_t)qword_10011C818 > 1);
  }

  if (!v1 || (v1 & 7) != 0)
  {
LABEL_19:
    __break(0x5516u);
  }

  else
  {
    sub_100020CB0(v1, "Sessions except current cleared", 1u, 1);
    return 1LL;
  }

  return result;
}

uint64_t sub_1000204B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_1000204D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_1000204F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_100020514(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_100020534(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_100020554(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_100020574(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_100020590(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_1000205AC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t sub_1000205C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1LL;
}

uint64_t *sub_1000205E4(int a1)
{
  int v3 = a1;
  id v2 = (uint64_t *)sub_100008C50((uint64_t)&qword_10011C808, &v3);
  if (v2 == &qword_10011C810) {
    return 0LL;
  }
  uint64_t result = sub_100003154((uint64_t *)&v2);
  __break(0x5516u);
  return result;
}

void *sub_10002065C(void *result, unsigned int a2)
{
  if (!result) {
    goto LABEL_5;
  }
  id v2 = result;
  if ((result & 7) != 0
    || (*uint64_t result = off_100103278,
        *((_DWORD *)result + 2) = a2,
        uint64_t result = sub_100010C30(result + 2),
        *((_BYTE *)v2 + 40) = 0,
        *((_WORD *)v2 + 21) = 0,
        *((_DWORD *)v2 + 14) = 0,
        v2[8] = 0LL,
        ((unint64_t)(v2 + 9) & 7) != 0))
  {
LABEL_5:
    __break(0x5516u);
  }

  else
  {
    v2[9] = 0LL;
    v2[10] = 0LL;
    v2[11] = 0LL;
    unsigned int v4 = a2;
    uint64_t v5 = v2;
    sub_10002072C((uint64_t)&qword_10011C808, &v4);
    v2[6] = sub_10002ACC4();
    return v2;
  }

  return result;
}

void sub_10002072C(uint64_t a1, unsigned int *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  sub_100024BF4(a1, a2, a2);
  if ((v2 & 0xFE) != 0) {
LABEL_6:
  }
    __break(0x550Au);
}

void *sub_100020764(void *result, unsigned int a2)
{
  return result;
}

void sub_100020778(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_33:
    __break(0x5516u);
    return;
  }

  *(void *)a1 = off_100103278;
  *(_DWORD *)(a1 + 56) = 0;
  uint64_t v12 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 != &qword_10011C810)
  {
    int v2 = 0;
    while (1)
    {
      int v3 = sub_100003154((uint64_t *)&v12);
      uint64_t v4 = v3[1];
      BOOL v5 = v4 && (v3[1] & 7) == 0;
      unint64_t v6 = (_DWORD *)(v4 + 56);
      v2 |= *v6;
      sub_100008A4C((uint64_t *)&v12);
      if (v12 == &qword_10011C810) {
        goto LABEL_19;
      }
    }
  }

  int v2 = 0;
LABEL_19:
  dword_10011C820 = v2;
  size_t v11 = 0LL;
  int v8 = (uint64_t *)(a1 + 16);
  if (((a1 + 16) & 7) != 0 || ((a1 + 24) & 7) != 0) {
    goto LABEL_33;
  }
  size_t v11 = *(uint64_t **)(a1 + 24);
  if (v11 != v8)
  {
    do
    {
      uint64_t v9 = *sub_10000D014((uint64_t *)&v11);
      uint64_t v10 = (uint64_t *)sub_100020944(a1 + 16, v11);
      size_t v11 = v10;
      if (v9)
      {
        if ((v9 & 7) != 0) {
          goto LABEL_33;
        }
        operator delete((void *)v9);
        uint64_t v10 = v11;
      }
    }

    while (v10 != v8);
  }

  if (((a1 + 8) & 3) != 0) {
    goto LABEL_33;
  }
  sub_100024D4C((uint64_t)&qword_10011C808, (_DWORD *)(a1 + 8));

  if (((a1 + 72) & 7) != 0) {
    goto LABEL_33;
  }
  sub_1000180FC(a1 + 16);
}

uint64_t sub_100020944(uint64_t result, uint64_t *a2)
{
  if (!result
    || (result & 7) != 0
    || (a2 & 7) != 0
    || !a2
    || ((unint64_t)(a2 + 1) & 7) != 0
    || (uint64_t v2 = *a2) == 0
    || (v2 & 7) != 0
    || ((v2 + 8) & 7) != 0
    || (v3 = a2[1], *(void *)(v2 + 8) = v3, (uint64_t v4 = (void *)a2[1]) == 0LL)
    || (v4 & 7) != 0
    || (void *v4 = v2, ((result + 16) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v5 = *(void *)(result + 16);
    BOOL v6 = v5 != 0;
    uint64_t v7 = v5 - 1;
    if (v6)
    {
      *(void *)(result + 16) = v7;
      sub_1000181E8(result, a2);
      return v3;
    }
  }

  __break(0x5515u);
  return result;
}

void sub_1000209E4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100020778(a1);
  }
}

void sub_1000209F8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100020778(a1);
    operator delete((void *)a1);
  }

void sub_100020A30(_Unwind_Exception *a1)
{
}

void sub_100020A44(uint64_t a1, _DWORD *a2, BOOL *a3, char *a4, unsigned int a5)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_49;
  }
  if (a5)
  {
    if (!a4) {
      goto LABEL_49;
    }
    *a4 = 0;
  }

  *a2 = 0;
  if (!a5) {
    goto LABEL_17;
  }
  if (((a1 + 16) & 7) != 0) {
    goto LABEL_49;
  }
  uint64_t v10 = (void *)(a1 + 32);
  if (((a1 + 32) & 7) != 0) {
    goto LABEL_49;
  }
  if (!*v10)
  {
LABEL_17:
    BOOL v14 = 0;
    goto LABEL_18;
  }

  if (((a1 + 24) & 7) != 0) {
    goto LABEL_49;
  }
  unint64_t v27 = *(uint64_t **)(a1 + 24);
  size_t v11 = sub_10000D014((uint64_t *)&v27);
  uint64_t v12 = *v11;
  if (!*v11)
  {
    sub_100020944(a1 + 16, v27);
    BOOL v14 = *v10 != 0LL;
    goto LABEL_18;
  }

  if ((v12 & 7) != 0)
  {
LABEL_49:
    __break(0x5516u);
    goto LABEL_50;
  }

  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  BOOL v15 = v13 != 0;
  unint64_t v16 = v13 - 1;
  if (!v15) {
    goto LABEL_52;
  }
  if (v16 >> 16)
  {
LABEL_51:
    __break(0x5507u);
LABEL_52:
    __break(0x5515u);
    goto LABEL_53;
  }

  uint64_t v17 = (char *)*v11;
  if ((*(_BYTE *)(v12 + 23) & 0x80) != 0) {
    uint64_t v17 = *(char **)v12;
  }
  if (!v17) {
    goto LABEL_49;
  }
  *a2 = *v17;
  uint64_t v18 = (char *)v12;
  uint64_t v19 = *(unsigned __int16 *)(a1 + 42);
  if (__CFADD__(v18, v19)) {
    goto LABEL_50;
  }
  unsigned int v20 = &v18[v19];
  unsigned int v21 = v20 + 1;
  if ((unsigned __int16)v16 - v19 < a5)
  {
    if (!*(_BYTE *)(a1 + 40))
    {
      size_t v23 = a5;
      __darwin_ct_rune_t v22 = a4;
      goto LABEL_46;
    }

    if (a4)
    {
      *a4 = 2;
      if (a4 != (char *)-1LL)
      {
        __darwin_ct_rune_t v22 = a4 + 1;
        size_t v23 = a5 - 1;
LABEL_46:
        strlcpy(v22, v21, v23);
        sub_100020944(a1 + 16, v27);
        BOOL v14 = *v10 != 0LL;
        operator delete((void *)v12);
        *(_WORD *)(a1 + 42) = 0;
        *(_BYTE *)(a1 + 40) = 0;
LABEL_18:
        if (a3)
        {
          *a3 = v14;
          return;
        }

        goto LABEL_49;
      }

LABEL_53:
  __break(0x5500u);
}

  __break(0x550Cu);
LABEL_54:
  __break(0x5507u);
}

  if ((_DWORD)v7)
  {
    if (!v5 || (v5 & 3) != 0) {
      goto LABEL_62;
    }
    *(_DWORD *)uint64_t v5 = 1;
    if (v3 == 0xFFFF)
    {
LABEL_63:
      __break(0x5507u);
      return result;
    }

    ++v3;
  }

  *a2 = v3;
  __darwin_ct_rune_t v22 = a2 + 1;
  if ((v22 & 1) != 0)
  {
LABEL_62:
    __break(0x5516u);
    goto LABEL_63;
  }

  if (v3 > *v22) {
    sub_1000D2714();
  }
  return result;
}

            __break(0x5513u);
            goto LABEL_54;
          }

          uint64_t v17 = 0LL;
LABEL_39:
          ++v13;
          __darwin_ct_rune_t v22 = result & 3;
          while (!v22)
          {
            if (result > 0xFFFFFFFFFFFFFFFBLL) {
              goto LABEL_53;
            }
            size_t v23 = *(unsigned int *)result + (unint64_t)v17;
            *(_DWORD *)uint64_t result = v23;
            result += 4LL;
            uint64_t v17 = HIDWORD(v23) + HIDWORD(v17);
            if (!v17)
            {
              uint64_t result = (unsigned __int16)v14;
              goto LABEL_44;
            }
          }

          goto LABEL_54;
        }

    __break(0x550Au);
    return result;
  }

    __break(0x550Au);
    goto LABEL_54;
  }

  size_t v11 = sub_100003154(&v26);
  if (!v11) {
    goto LABEL_52;
  }
  uint64_t v12 = (std::string **)(v11 + 1);
  uint64_t v13 = *v12;
  if (v13[1].__r_.__value_.__s.__data_[8] || a4 == -1 || v13[1].__r_.__value_.__s.__data_[9] == 10)
  {
    if (v13[1].__r_.__value_.__s.__data_[9] == 10) {
      v13[1].__r_.__value_.__s.__data_[9] = 0;
    }
    return;
  }

  __break(0x5507u);
  return result;
}

    __break(0x550Au);
    goto LABEL_54;
  }

  if (a3 > 0xFF) {
    goto LABEL_53;
  }
  if (!a3)
  {
    LOBYTE(v19) = 0;
    BOOL v15 = 1;
LABEL_30:
    if (v15 > a3)
    {
      unsigned int v20 = sub_100061274();
      if (v20)
      {
        if ((v20 & 7) == 0)
        {
          unsigned int v21 = sub_10008E168(v20, v10);
          if (v21)
          {
            __darwin_ct_rune_t v22 = v21;
            if ((v21 & 7) == 0)
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v21 + 16LL))(v21, 0LL);
              *(_DWORD *)&v34[15] = -1431655766;
              *(void *)&size_t v23 = 0xAAAAAAAAAAAAAAAALL;
              *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
              v33[3] = v23;
              *(_OWORD *)uint64_t v34 = v23;
              v33[1] = v23;
              v33[2] = v23;
              v33[0] = v23;
              if ((v14 & 1) != 0)
              {
                char v24 = result;
                int v25 = 0;
              }

              else
              {
                unsigned int v26 = *(_DWORD *)(v12 + 1208);
                unint64_t v27 = __CFADD__(v26, 1);
                int v28 = v26 + 1;
                if (v27)
                {
LABEL_55:
                  __break(0x5500u);
                  goto LABEL_56;
                }

                char v24 = (unsigned __int16)v28;
                *(_DWORD *)(v12 + 120_Block_object_dispose(va, 8) = (unsigned __int16)v28;
                LOWORD(v33[0]) = bswap32(v28) >> 16;
                int v25 = 2;
              }

              size_t v29 = ~(unint64_t)v33;
              if (~(unint64_t)v33 >= v25)
              {
                *(_BYTE *)((unint64_t)v33 | v25) = a2;
                unsigned int v30 = v25 | 1LL;
                if (v29 >= v30)
                {
                  *(_BYTE *)((unint64_t)v33 | v30) = a3;
                  size_t v31 = v25 + 2;
                  if (!a4)
                  {
LABEL_48:
                    float v32 = sub_1000ABB10(v22, 0, 14LL, 6, v24, v33, v31);
                    if (v32) {
                      uint64_t v18 = sub_100062BF8(v12, v32, 500, 0, 0LL);
                    }
                    else {
                      uint64_t v18 = 12LL;
                    }
                    goto LABEL_43;
                  }

                  if (v29 >= v31)
                  {
                    memcpy((void *)((unint64_t)v33 | v31), a4, v19);
                    LOBYTE(v31) = v31 + v19;
                    goto LABEL_48;
                  }
                }
              }

        size_t v23 = v11 - 6;
        if (v11 < 6) {
          goto LABEL_145;
        }
        if (v13 > 3) {
          goto LABEL_246;
        }
        *(_DWORD *)((char *)&v92 + 2) = v13;
        char v24 = *((unsigned __int8 *)v7 + 1);
        int v25 = v7[1];
        unsigned int v26 = v7[2];
        uint64_t v18 = __rev16(v25);
        __int128 v84 = __rev16(v26);
        if (v18 > v84) {
          goto LABEL_146;
        }
        unint64_t v27 = v7 + 3;
        if (v7[1])
        {
          if (a3)
          {
            uint64_t v83 = v7[2];
            if ((a3 & 7) != 0 || ((a3 + 12) & 3) != 0) {
              goto LABEL_244;
            }
            int v28 = *(_DWORD *)(a3 + 12);
            if (v28 > 0xFF) {
              goto LABEL_246;
            }
            if (v28 != v6) {
              goto LABEL_146;
            }
            if (((a3 + 8) & 7) != 0) {
              goto LABEL_244;
            }
            if (v10 != *(_DWORD *)(a3 + 8)) {
              goto LABEL_146;
            }
            if ((((_BYTE)a3 + 16) & 7) != 0 || (((_DWORD)a3 + 18) & 1) != 0) {
              goto LABEL_244;
            }
            size_t v29 = *(_DWORD *)(a3 + 18);
            if (v29 > 3) {
              goto LABEL_246;
            }
            if (v29 != v13) {
              goto LABEL_146;
            }
            if ((((_DWORD)a3 + 22) & 1) != 0) {
              goto LABEL_244;
            }
            unsigned int v30 = *(_DWORD *)(a3 + 22);
            if (v30 > 0xFF)
            {
LABEL_246:
              __break(0x550Au);
              goto LABEL_247;
            }

            if (v30 == v24 && v18 == *(unsigned __int16 *)(a3 + 113))
            {
              size_t v31 = v84;
              if (v84 == *(unsigned __int16 *)(a3 + 115))
              {
                float v32 = *(_DWORD *)(a3 + 133);
LABEL_125:
                if (v13 == 2)
                {
                  switch(v24)
                  {
                    case 0:
                      unsigned int v51 = 4;
                      if (v31 | v18 || v23 < 0x10 || v32 < 0x10) {
                        goto LABEL_147;
                      }
                      *(_WORD *)(a3 + 26) = bswap32(*v27) >> 16;
                      if ((((_DWORD)a3 + 28) & 1) != 0) {
                        goto LABEL_244;
                      }
                      *(_DWORD *)(a3 + 2_Block_object_dispose(va, 8) = bswap32(*(_DWORD *)(v27 + 1));
                      if ((((_DWORD)a3 + 32) & 1) != 0) {
                        goto LABEL_244;
                      }
                      *(_DWORD *)(a3 + 32) = bswap32(*(_DWORD *)(v27 + 3));
                      if ((((_DWORD)a3 + 36) & 1) != 0) {
                        goto LABEL_244;
                      }
                      *(_DWORD *)(a3 + 36) = bswap32(*(_DWORD *)(v27 + 5));
                      if ((((_DWORD)a3 + 40) & 1) != 0) {
                        goto LABEL_244;
                      }
                      char v52 = 0LL;
                      *(_WORD *)(a3 + 40) = __rev16(v27[7]);
                      break;
                    case 1:
                      unsigned int v50 = a3 & 7;
                      if (v25 || !v32) {
                        goto LABEL_224;
                      }
                      id v65 = 2097153;
                      goto LABEL_217;
                    case 2:
                      unsigned int v50 = a3 & 7;
                      if (v25 || !v32) {
                        goto LABEL_224;
                      }
                      id v65 = 131073;
LABEL_217:
                      if (v32 >= v65) {
                        goto LABEL_224;
                      }
                      if (v50 | ((_BYTE)a3 + 16) & 7) {
                        goto LABEL_244;
                      }
                      id v66 = (void **)(a3 + 26);
                      if ((((_DWORD)a3 + 26) & 1) != 0) {
                        goto LABEL_244;
                      }
                      uint64_t v67 = v32;
                      __srca = v27;
                      uint64_t v68 = v23;
                      uint64_t v69 = v25;
                      if (*v66) {
                        operator delete[](*v66);
                      }
                      *(void *)(a3 + 26) = operator new[](v67);
                      unint64_t v27 = __srca;
                      if ((((_DWORD)a3 + 34) & 1) != 0) {
                        goto LABEL_244;
                      }
                      int v25 = v69;
                      size_t v23 = v68;
                      unsigned int v50 = 0LL;
                      *(_DWORD *)(a3 + 34) = v67;
                      *(_DWORD *)(a3 + 129) = v67;
                      goto LABEL_224;
                    case 3:
                    case 4:
                      unsigned int v51 = 4;
                      if (v31 | v18 || v23 < 4 || v32 < 4) {
                        goto LABEL_147;
                      }
                      char v52 = 0LL;
                      *(_DWORD *)(a3 + 26) = bswap32(*(_DWORD *)v27);
                      goto LABEL_227;
                    case 5:
                      if (v6 != 9) {
                        goto LABEL_146;
                      }
                      if ((((_DWORD)a3 + 26) & 1) != 0) {
                        goto LABEL_244;
                      }
                      *(_WORD *)(a3 + 26) = 0;
                      if ((((_DWORD)a3 + 28) & 1) != 0) {
                        goto LABEL_244;
                      }
                      char v52 = 0LL;
                      *(_DWORD *)(a3 + 2_Block_object_dispose(va, 8) = 0;
                      goto LABEL_227;
                    default:
                      int v64 = 1682LL;
                      goto LABEL_195;
                  }

                  goto LABEL_227;
                }

                if (v13 == 1)
                {
                  if (v24 == 128)
                  {
                    unsigned int v63 = a3 & 7;
                    if (!v25 && v32 && v32 <= 0x53)
                    {
                      if ((a3 & 7) != 0 || (((_BYTE)a3 + 16) & 7) != 0 || (((_DWORD)a3 + 26) & 1) != 0) {
                        goto LABEL_244;
                      }
                      unsigned int v63 = 0LL;
                      *(_DWORD *)(a3 + 109) = v32;
                      *(_DWORD *)(a3 + 129) = v32;
                    }

                    if (!v63 && (((_BYTE)a3 + 16) & 7) == 0)
                    {
                      char v52 = a3 + 26;
                      if ((((_DWORD)a3 + 26) & 1) == 0) {
                        goto LABEL_227;
                      }
                    }

                    goto LABEL_244;
                  }

                  if (!v24)
                  {
                    if (v25 || !v32 || v32 >= 0x10001)
                    {
                      unsigned int v50 = a3 & 7;
                    }

                    else
                    {
                      uint64_t v46 = v23;
                      unint64_t v47 = v27;
                      std::string v48 = v32;
                      int v49 = operator new[](v32);
                      int v25 = 0;
                      if ((((_DWORD)a3 + 26) & 1) != 0) {
                        goto LABEL_244;
                      }
                      *(void *)(a3 + 26) = v49;
                      if ((((_DWORD)a3 + 34) & 1) != 0) {
                        goto LABEL_244;
                      }
                      unint64_t v27 = v47;
                      size_t v23 = v46;
                      unsigned int v50 = 0LL;
                      *(_DWORD *)(a3 + 34) = v48;
                      *(_DWORD *)(a3 + 129) = v48;
                    }

  __break(0x550Au);
}

        uint64_t v12 = 0;
        goto LABEL_54;
      case 9:
        if (!v6) {
          goto LABEL_51;
        }
        if ((v6 & 7) != 0) {
          goto LABEL_81;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 16LL))(v6)
          || !(*(unsigned int (**)(uint64_t))(*(void *)v6 + 368LL))(v6))
        {
          goto LABEL_51;
        }

        uint64_t result = *(void *)(v2 + 1200);
        if (!result || (result & 7) != 0) {
          goto LABEL_81;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)result + 208LL))(result))
        {
LABEL_50:
          sub_100064620(v2, 0xCu, 1);
          uint64_t v10 = v2;
          size_t v11 = 12;
        }

        else
        {
LABEL_51:
          sub_100064620(v2, 4u, 1);
          uint64_t v10 = v2;
          size_t v11 = 4;
        }

        goto LABEL_53;
      case 0xA:
        uint64_t result = *(void *)(v2 + 1200);
        if (!result || (result & 7) != 0) {
          goto LABEL_81;
        }
        uint64_t v9 = 0LL;
        if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)result + 296LL))( result,  0LL,  *(void *)(a2 + 8),  0LL)) {
          goto LABEL_56;
        }
        sub_100064620(v2, 8u, 1);
        uint64_t v10 = v2;
        size_t v11 = 8;
        goto LABEL_53;
      case 0xB:
        sub_100064620(v2, 9u, 1);
        uint64_t v10 = v2;
        size_t v11 = 9;
        goto LABEL_53;
      case 0xC:
        goto LABEL_41;
      case 0xD:
        goto LABEL_50;
      case 0xE:
        uint64_t result = *(void *)(v2 + 1200);
        if (!result || (result & 7) != 0) {
          goto LABEL_81;
        }
        uint64_t v9 = 0LL;
        if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)result + 296LL))( result,  0LL,  *(void *)(a2 + 8),  0LL)) {
          goto LABEL_56;
        }
        memset(&v17, 0, sizeof(v17));
        uint64_t result = sub_10004783C();
        if (!result || (result & 7) != 0) {
          goto LABEL_81;
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)result + 304LL))(result, &v17);
        if (!std::string::compare(&v17, "com.apple.podcasts") || !std::string::compare(&v17, "com.apple.iBooks"))
        {
          sub_100064620(v2, 8u, 1);
          sub_100064620(v2, 8u, 0);
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
          if (!result) {
            goto LABEL_81;
          }
          BOOL v14 = result;
          if ((result & 7) != 0) {
            goto LABEL_81;
          }
          sub_100057DE4(result, 1);
          uint64_t result = sub_1000614B8(0LL, v14);
          if (!result) {
            goto LABEL_81;
          }
          BOOL v15 = result;
          if ((result & 7) != 0) {
            goto LABEL_81;
          }
          unint64_t v16 = sub_10001864C(v14);
          sub_100078268(v15, 1, v16);
        }

        else
        {
          uint64_t result = *(void *)(v2 + 1200);
          if (!result || (result & 7) != 0) {
            goto LABEL_81;
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)result + 584LL))(result))
          {
            uint64_t result = *(void *)(v2 + 1200);
            if (!result || (result & 7) != 0) {
              goto LABEL_81;
            }
            (*(void (**)(uint64_t))(*(void *)result + 560LL))(result);
          }

          else
          {
            sub_100098558(v2, 0xFFFFFFFFLL);
          }
        }

        std::string::~string(&v17);
LABEL_55:
        uint64_t v9 = 0LL;
LABEL_56:
        *(_BYTE *)(v2 + 1412) = v8;
        break;
      default:
        uint64_t v9 = 4LL;
        sub_1000CEAEC( 0,  4,  "%s:%d ERROR: Cmd0x0029_PlayControl invalid play control: 0x%02X\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoRemoteUI.cpp",  3520,  v8);
        goto LABEL_56;
    }

    goto LABEL_57;
  }

    if (((result + 8) & 7) == 0)
    {
      *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
      goto LABEL_55;
    }
  }

  sub_1000B7EB4(a2);
  if (((v16 | v15 | v11 & v17) & 1) != 0 || v22) {
    goto LABEL_61;
  }
  if (*(_BYTE *)(a1 + 200))
  {
    if ((a2 & 0x100) != 0) {
      *(_DWORD *)(a1 + 204) = (_DWORD)a3;
    }
    unsigned int v26 = *(void *)a1;
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t, void, uint64_t *))(v26 + 176))( a1,  a2,  a3,  a4,  0LL,  v6);
    }
    else {
      (*(void (**)(uint64_t, uint64_t, void *, uint64_t *))(v26 + 192))(a1, a2, a3, v6);
    }
    return;
  }

          __break(0x5516u);
          goto LABEL_54;
        }
      }
    }
  }

  int v8 = 0LL;
LABEL_21:
  return v8;
}

  __break(0x5516u);
  return result;
}

void sub_100020C80(uint64_t a1, const std::string::value_type *a2, unsigned int a3, int a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  if (a3 >= 4)
  {
LABEL_8:
    __break(0x550Au);
    return;
  }

  if (a2[23] < 0) {
    a2 = *(const std::string::value_type **)a2;
  }
  sub_100020CB0(a1, a2, a3, a4);
}

void sub_100020CB0(uint64_t a1, const std::string::value_type *a2, unsigned int a3, int a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_19;
  }
  char v6 = a3;
  if (!*(_BYTE *)(a1 + 96))
  {
    if (!a2) {
      return;
    }
    if (a3 <= 3)
    {
      if (!a3) {
        return;
      }
      goto LABEL_12;
    }

void sub_100020DE0(_Unwind_Exception *a1)
{
}

uint64_t sub_100020DF4(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v2 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t result = sub_100024E74(result, 0LL, 0LL, a2);
  if (!result
    || (result & 7) != 0
    || (((_BYTE)result + 8) & 7) != 0
    || (uint64_t v3 = *v2, *(void *)result = *v2, *(void *)(result + 8) = v2, !v3)
    || (v3 & 7) != 0
    || (uint64_t v4 = (uint64_t *)(v3 + 8), (v4 & 7) != 0)
    || (uint64_t *v4 = result, *v2 = result, v5 = v2 + 2, (v5 & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
  }

  else if (*v5 != -1LL)
  {
    ++*v5;
    return result;
  }

  __break(0x5500u);
  return result;
}

void sub_100020E90(uint64_t a1, const std::string::value_type *a2, unsigned int a3, int a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  if (a3 >= 0x10)
  {
LABEL_8:
    __break(0x550Au);
    return;
  }

  if ((*(_DWORD *)(a1 + 56) & a3) != 0) {
    sub_100020C80(a1, a2, 2u, a4);
  }
}

uint64_t sub_100020EC4(uint64_t result, unsigned int a2, int a3)
{
  if (a2 >= 0x10)
  {
    __break(0x550Au);
  }

  else
  {
    return sub_100020EE4(result, a2, a3);
  }

  return result;
}

uint64_t sub_100020EE4(uint64_t result, unsigned int a2, int a3)
{
  if (a2 >= 0x10)
  {
LABEL_21:
    __break(0x550Au);
    return result;
  }

  if ((dword_10011C820 & a2) != 0)
  {
    uint64_t v10 = (uint64_t *)qword_10011C808;
    if ((uint64_t *)qword_10011C808 != &qword_10011C810)
    {
      uint64_t v5 = (const std::string::value_type *)result;
      while (1)
      {
        uint64_t result = (uint64_t)sub_100003154((uint64_t *)&v10);
        if (!result) {
          break;
        }
        if ((result & 7) != 0) {
          break;
        }
        char v6 = (uint64_t *)(result + 8);
        if (((result + 8) & 7) != 0) {
          break;
        }
        uint64_t result = *v6;
        uint64_t v7 = *v6 & 7;
        BOOL v8 = result && v7 == 0;
        if (!v8 || ((result + 56) & 7) != 0) {
          break;
        }
        if ((*(_DWORD *)(result + 56) & a2) != 0) {
          sub_100020CB0(result, v5, 2u, a3);
        }
        uint64_t result = (uint64_t)sub_100008A4C((uint64_t *)&v10);
        if (v10 == &qword_10011C810) {
          return result;
        }
      }

      __break(0x5516u);
      goto LABEL_21;
    }
  }

  return result;
}

uint64_t sub_100020FC8(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x10)
  {
LABEL_21:
    __break(0x550Au);
    return result;
  }

  if ((dword_10011C820 & a2) != 0)
  {
    BOOL v8 = (uint64_t *)qword_10011C808;
    if ((uint64_t *)qword_10011C808 != &qword_10011C810)
    {
      uint64_t v3 = result;
      while (1)
      {
        uint64_t result = (uint64_t)sub_100003154((uint64_t *)&v8);
        if (!result) {
          break;
        }
        if ((result & 7) != 0) {
          break;
        }
        uint64_t v4 = (uint64_t *)(result + 8);
        if (((result + 8) & 7) != 0) {
          break;
        }
        uint64_t result = *v4;
        uint64_t v5 = *v4 & 7;
        BOOL v6 = result && v5 == 0;
        if (!v6 || ((result + 56) & 7) != 0) {
          break;
        }
        if ((*(_DWORD *)(result + 56) & a2) != 0) {
          sub_1000210A8(result, v3, -1, 1);
        }
        uint64_t result = (uint64_t)sub_100008A4C((uint64_t *)&v8);
        if (v8 == &qword_10011C810) {
          return result;
        }
      }

      __break(0x5516u);
      goto LABEL_21;
    }
  }

  return result;
}

uint64_t sub_1000210A8(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0
    || (v6[0] = result,
        v6[1] = 4LL,
        void v6[2] = a2,
        int v8 = -1431655766,
        int v7 = a3,
        sub_100020CB0(result, "Port Info:", 1u, 0),
        (uint64_t result = sub_1000B6CE0()) == 0)
    || (result & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    sub_1000B8464(result, sub_100021D70, (uint64_t)v6, 0LL, 0);
    sub_100020CB0(v4, " ", 1u, a4);
    return 1LL;
  }

  return result;
}

uint64_t sub_100021158(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x10)
  {
LABEL_21:
    __break(0x550Au);
    return result;
  }

  if ((dword_10011C820 & a2) != 0)
  {
    int v8 = (uint64_t *)qword_10011C808;
    if ((uint64_t *)qword_10011C808 != &qword_10011C810)
    {
      uint64_t v3 = result;
      while (1)
      {
        uint64_t result = (uint64_t)sub_100003154((uint64_t *)&v8);
        if (!result) {
          break;
        }
        if ((result & 7) != 0) {
          break;
        }
        uint64_t v4 = (uint64_t *)(result + 8);
        if (((result + 8) & 7) != 0) {
          break;
        }
        uint64_t result = *v4;
        uint64_t v5 = *v4 & 7;
        BOOL v6 = result && v5 == 0;
        if (!v6 || ((result + 56) & 7) != 0) {
          break;
        }
        if ((*(_DWORD *)(result + 56) & a2) != 0) {
          sub_100021238(result, v3, -1, 1);
        }
        uint64_t result = (uint64_t)sub_100008A4C((uint64_t *)&v8);
        if (v8 == &qword_10011C810) {
          return result;
        }
      }

      __break(0x5516u);
      goto LABEL_21;
    }
  }

  return result;
}

uint64_t sub_100021238(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0
    || (v6[0] = result,
        v6[1] = 3LL,
        void v6[2] = a2,
        int v8 = -1431655766,
        int v7 = a3,
        sub_100020CB0(result, "Connection Info:", 1u, 0),
        (uint64_t result = sub_1000B6CE0()) == 0)
    || (result & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    sub_10008E450(result, (void (*)(uint64_t, uint64_t))sub_1000213D8, (uint64_t)v6, 0LL);
    sub_100020CB0(v4, " ", 1u, a4);
    return 1LL;
  }

  return result;
}

uint64_t *sub_1000212E4(uint64_t *result)
{
  if (result >= 0x10)
  {
LABEL_20:
    __break(0x550Au);
    return result;
  }

  int v1 = (int)result;
  if ((dword_10011C820 & result) != 0)
  {
    int v7 = (uint64_t *)qword_10011C808;
    if ((uint64_t *)qword_10011C808 != &qword_10011C810)
    {
      while (1)
      {
        uint64_t result = sub_100003154((uint64_t *)&v7);
        if (!result) {
          break;
        }
        uint64_t v2 = result + 1;
        uint64_t v3 = *v2;
        uint64_t v4 = *v2 & 7;
        BOOL v5 = v3 && v4 == 0;
        if (!v5 || ((v3 + 56) & 7) != 0) {
          break;
        }
        if ((*(_DWORD *)(v3 + 56) & v1) != 0)
        {
          sub_100021238(v3, 0xFFFFFFFFLL, -1, 0);
          sub_1000210A8(v3, 0xFFFFFFFFLL, -1, 1);
        }

        uint64_t result = sub_100008A4C((uint64_t *)&v7);
        if (v7 == &qword_10011C810) {
          return result;
        }
      }

      __break(0x5516u);
      goto LABEL_20;
    }
  }

  return result;
}

void sub_1000213D8(uint64_t a1, uint64_t *a2)
{
  unsigned int v60 = a2;
  uint64_t v62 = *a2;
  if (!*a2) {
    goto LABEL_93;
  }
  uint64_t v3 = a2[2];
  if (v3 != 0xFFFFFFFFLL && v3 != a1) {
    goto LABEL_93;
  }
  uint64_t v4 = (int *)(a2 + 3);
  int v5 = *v4;
  if (*v4 == -1) {
    goto LABEL_20;
  }
  if (v5 == 1)
  {
    if (!a1 || (a1 & 7) != 0) {
      goto LABEL_95;
    }
    if (!sub_100057A20(a1)) {
      goto LABEL_20;
    }
    int v5 = *v4;
  }

  else if (v5 == 3)
  {
    goto LABEL_20;
  }

  if (v5 != 2) {
    goto LABEL_93;
  }
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_95;
  }
  if (!sub_100057A20(a1)) {
    goto LABEL_93;
  }
LABEL_20:
  unsigned int v6 = *((_DWORD *)v60 + 2);
  if (v6 > 7) {
    goto LABEL_97;
  }
  int v7 = (int *)v60 + 3;
  uint64_t v8 = ((unint64_t)v60 + 12) & 3;
  if (v6 != 3)
  {
    if (!v8 && a1 && (a1 & 7) == 0)
    {
      int v15 = *v7;
      BOOL v16 = sub_100057A20(a1);
      uint64_t v17 = "";
      if (v16) {
        uint64_t v17 = "(Virtual)";
      }
      snprintf(__b, 0x400uLL, "[%d]    %hhx %s", v15, a1, v17);
      if ((v62 & 7) == 0)
      {
        sub_100020CB0(v62, __b, 1u, 0);
        goto LABEL_93;
      }
    }

    goto LABEL_95;
  }

  if (v8 || !a1 || (a1 & 7) != 0) {
    goto LABEL_95;
  }
  int v9 = *v7;
  uint64_t v10 = a1;
  if (sub_100057A20(a1)) {
    size_t v11 = "(Virtual)";
  }
  else {
    size_t v11 = "";
  }
  int v12 = sub_10001864C(a1);
  if (sub_10001864C(a1))
  {
    uint64_t v13 = sub_10001864C(a1);
    if (!v13 || (v13 & 7) != 0) {
      goto LABEL_95;
    }
    BOOL v14 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 208LL))(v13);
    uint64_t v10 = a1;
  }

  else
  {
    BOOL v14 = "Unknown";
  }

  int v18 = sub_1000569D8(v10);
  if (sub_1000569D8(v10))
  {
    uint64_t v19 = sub_1000569D8(v10);
    if (!v19 || (v19 & 7) != 0) {
      goto LABEL_95;
    }
    unsigned int v20 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 208LL))(v19);
    uint64_t v10 = a1;
  }

  else
  {
    unsigned int v20 = "Unknown";
  }

  int v21 = sub_100056CF8(v10);
  if (sub_100056CF8(v10))
  {
    uint64_t v22 = sub_100056CF8(v10);
    if (!v22 || (v22 & 7) != 0) {
      goto LABEL_95;
    }
    size_t v23 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 208LL))(v22);
    LODWORD(v10) = a1;
  }

  else
  {
    size_t v23 = "Unknown";
  }

  snprintf( __b,  0x400uLL,  "[%d]    %hhx: %s port=%hhx(%s) connRef=%hhx(%s) vport=%hhx(%s)",  v9,  v10,  v11,  v12,  v14,  v18,  v20,  v21,  v23);
  if ((v62 & 7) != 0) {
    goto LABEL_95;
  }
  sub_100020CB0(v62, __b, 1u, 0);
  BOOL v24 = sub_1000568BC(a1);
  int v25 = sub_10005684C(a1);
  int v26 = sub_1000569F0(a1);
  BOOL v27 = sub_100056A48(a1);
  int v28 = sub_100056FF0(a1);
  BOOL v29 = sub_100057CEC(a1);
  snprintf( __b,  0x400uLL,  "                30pin=%d inList=%d shutDown=%d SDA=%d ctaHandle=%hhx typeIV=%d",  v24,  v25,  v26,  v27,  v28,  v29);
  sub_100020CB0(v62, __b, 1u, 0);
  int v30 = sub_100057B7C(a1);
  int v31 = sub_100057BA0(a1);
  int v32 = sub_100057BC4(a1);
  int v33 = sub_100057B64(a1);
  snprintf(__b, 0x400uLL, "                resID=0x%x(prev=0x%x) devID=0x%x featureMask=0x%x", v30, v31, v32, v33);
  sub_100020CB0(v62, __b, 1u, 0);
  uint64_t v34 = sub_100057C70(a1);
  BOOL v35 = sub_100057D30(a1);
  BOOL v36 = sub_100057DB8(a1);
  BOOL v37 = sub_100057D74(a1);
  snprintf( __b,  0x400uLL,  "                accCaps=0x%llx InvalidVPort=%d DetachOrHibernate=%d MaxConnection=%d",  v34,  v35,  v36,  v37);
  sub_100020CB0(v62, __b, 1u, 0);
  int v38 = sub_10005794C(a1);
  int v39 = sub_10005799C(a1);
  snprintf(__b, 0x400uLL, "                IncomingProcess=%hhx OutgoingProcess=%hhx", v38, v39);
  sub_100020CB0(v62, __b, 1u, 0);
  size_t v40 = (const char *)sub_100057CA0(a1);
  char v41 = v40;
  if (!v40) {
    goto LABEL_69;
  }
  snprintf(__b, 0x400uLL, "            [AccInfo] name='%s'  manufacturer='%s'", v40, v40 + 104);
  sub_100020CB0(v62, __b, 1u, 0);
  snprintf(__b, 0x400uLL, "                      model='%s'  serial='%s'", v41 + 168, v41 + 232);
  sub_100020CB0(v62, __b, 1u, 0);
  if ((((_BYTE)v41 + 64) & 3) != 0
    || (((_DWORD)v41 + 66) & 1) != 0
    || (((_BYTE)v41 + 68) & 3) != 0
    || (((_BYTE)v41 + 104) & 3) != 0
    || (((_BYTE)v41 + 108) & 3) != 0
    || ((unint64_t)(v41 + 372) & 3) != 0)
  {
    goto LABEL_95;
  }

  uint64_t v42 = v41[372] ? 84LL : 70LL;
  if (((unint64_t)(v41 + 368) & 3) != 0)
  {
LABEL_95:
    __break(0x5516u);
    goto LABEL_96;
  }

  if (*((unsigned __int8 *)v41 + 373) <= 1u)
  {
    uint64_t v43 = 84LL;
    if (!v41[373]) {
      uint64_t v43 = 70LL;
    }
    snprintf( __b,  0x400uLL,  "                      FW %d.%d.%d  HW %d.%d.%d  accStatSupport=0x%x  OTA=%d/%c waver=%d/%c",  *((unsigned __int8 *)v41 + 64),  *((unsigned __int8 *)v41 + 65),  *((unsigned __int8 *)v41 + 66),  *((unsigned __int8 *)v41 + 67),  *((unsigned __int8 *)v41 + 68),  *((unsigned __int8 *)v41 + 69),  *((_DWORD *)v41 + 90),  *((_DWORD *)v41 + 91),  v42,  *((_DWORD *)v41 + 92),  v43);
    sub_100020CB0(v62, __b, 1u, 0);
LABEL_69:
    int v44 = sub_100057BDC(a1);
    snprintf(__b, 0x400uLL, "            [Lingoes]: mask=0x%x", v44);
    sub_100020CB0(v62, __b, 1u, 0);
    for (unsigned int i = 0; i != 15; ++i)
    {
      memset(__str, 170, 24);
      sub_1000572A4(a1, i, (uint64_t)__str);
      if (*(void *)&__str[8])
      {
        snprintf( __b,  0x400uLL,  "                lingo 0x%x (%hhx): eventMask=0x%x persist=0x%x",  i,  *(_DWORD *)&__str[8],  *(_DWORD *)__str,  *(_DWORD *)&__str[16]);
        sub_100020CB0(v62, __b, 1u, 0);
      }
    }

    int v46 = sub_1000579D4(a1);
    snprintf(__b, 0x400uLL, "            [PrefsMgr]: %hhx", v46);
    sub_100020CB0(v62, __b, 1u, 0);
    for (unsigned int j = 0; j != 14; ++j)
    {
      uint64_t v48 = sub_1000579EC(a1, j);
      uint64_t v49 = v48;
      if (v48)
      {
        snprintf(__b, 0x400uLL, "                prefs %02d: %hhx", j, v48);
        sub_100020CB0(v62, __b, 1u, 0);
        if ((v49 & 7) != 0) {
          goto LABEL_95;
        }
        int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 56LL))(v49);
        memset(&v63, 0, sizeof(v63));
        int v69 = -1431655766;
        *(void *)&__int128 v51 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v67 = v51;
        __int128 v68 = v51;
        __int128 v65 = v51;
        __int128 v66 = v51;
        *(_OWORD *)__str = v51;
        *(_OWORD *)&__str[16] = v51;
        if (v50)
        {
          uint64_t v52 = 0LL;
          do
          {
            if ((v52 & 7) == 0)
            {
              if ((_DWORD)v52) {
                sub_100020C80(v62, (const std::string::value_type *)&v63, 1u, 0);
              }
              std::string::assign(&v63, "                    ");
            }

            int v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 64LL))(v49, v52);
            uint64_t v54 = *(void *)v49;
            if (v53 == 1)
            {
              (*(void (**)(uint64_t, uint64_t))(v54 + 96))(v49, v52);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 120LL))(v49, v52);
              snprintf(__str, 0x64uLL, "%d:%d(%d) ");
            }

            else
            {
              (*(void (**)(uint64_t, uint64_t))(v54 + 80))(v49, v52);
              (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v49 + 112LL))(v49, v52);
              snprintf(__str, 0x64uLL, "%d:%c(%c) ");
            }

            std::string::append(&v63, __str);
            uint64_t v52 = (v52 + 1);
          }

          while (v50 != (_DWORD)v52);
          unsigned __int8 size = v63.__r_.__value_.__s.__size_;
          std::string::size_type v56 = v63.__r_.__value_.__s.__size_;
          if ((v63.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type v56 = v63.__r_.__value_.__l.__size_;
          }
          if (v56)
          {
            sub_100020C80(v62, (const std::string::value_type *)&v63, 1u, 0);
            unsigned __int8 size = v63.__r_.__value_.__s.__size_;
          }

          if ((size & 0x80) != 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
        }
      }
    }

LABEL_93:
    int v57 = *((_DWORD *)v60 + 3);
    BOOL v58 = __CFADD__(v57, 1);
    int v59 = v57 + 1;
    if (!v58)
    {
      *((_DWORD *)v60 + 3) = v59;
      return;
    }

      __break(0x5516u);
      goto LABEL_94;
  }

LABEL_96:
    __break(0x5500u);
  }

  int v28 = (int *)(a1 + 1968);
  if (((a1 + 1968) & 7) != 0) {
    goto LABEL_241;
  }
  if (!*v28 || !v15) {
    return;
  }
  if (v15 != 8)
  {
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_245;
  }

  BOOL v29 = sub_100061274();
  if (!v29) {
    goto LABEL_241;
  }
  if ((v29 & 7) != 0) {
    goto LABEL_241;
  }
  int v30 = sub_10008C710(v29, v4);
  if (((a1 + 1972) & 3) != 0) {
    goto LABEL_241;
  }
  if (v30 != *(_DWORD *)(a1 + 1972)) {
    goto LABEL_104;
  }
LABEL_113:
  while (2)
  {
    if (v15 >> 14)
    {
      if (v15 != 0x4000) {
        return;
      }
      sub_1000612C4(*(void *)(a1 + 8));
      if (v40)
      {
        if ((v40 & 7) != 0 || ((a1 + 1980) & 3) != 0) {
          goto LABEL_241;
        }
        sub_10005EB3C(v40, *(_DWORD *)(a1 + 1980));
      }

      uint64_t v42 = *v28;
      if ((*v28 & 8) != 0)
      {
        uint64_t v45 = 0LL;
        int v46 = 0LL;
        while (1)
        {
          unint64_t v47 = sub_100061274();
          if (!v47 || (v47 & 7) != 0) {
            goto LABEL_241;
          }
          if (((sub_10008C710(v47, v4) >> v46) & 1) != 0)
          {
            if ((v8 & 7) != 0) {
              goto LABEL_241;
            }
            if (v45 > ~(a1 + 1666)) {
              goto LABEL_242;
            }
            if ((a1 & 1) != 0) {
              goto LABEL_241;
            }
          }

          ++v46;
          v45 += 2LL;
          if (v46 == 15)
          {
            uint64_t v43 = 1;
            goto LABEL_166;
          }
        }

        uint64_t v43 = 0;
LABEL_166:
        uint64_t v42 = *v28;
      }

      else
      {
        uint64_t v43 = 1;
      }

      if ((v42 & 4) == 0) {
        goto LABEL_175;
      }
      if ((v8 & 7) != 0 || (((_DWORD)a1 + 1662) & 1) != 0) {
        goto LABEL_241;
      }
      uint64_t v49 = *(unsigned __int8 *)(a1 + 1662);
      if (v49 == 255) {
        goto LABEL_175;
      }
      int v50 = *(unsigned __int8 *)(a1 + 1663);
      if (v50 == 255) {
        goto LABEL_175;
      }
      if (((a1 + 1664) & 7) != 0) {
        goto LABEL_241;
      }
      __int128 v51 = *(unsigned __int8 *)(a1 + 1664);
      if (v51 == 255) {
LABEL_175:
      }
        uint64_t v52 = 1;
      else {
        uint64_t v52 = sub_1000759FC(a1, v49, v50, v51);
      }
      int v53 = *(void *)(a1 + 8);
      if (!v53 || (v53 & 7) != 0) {
        goto LABEL_241;
      }
      uint64_t v54 = sub_100057B7C(v53);
      if ((v52 & 1) != 0)
      {
        if ((v43 & 1) != 0)
        {
          const std::string::value_type *v5 = 1;
          if (v54 == (char)v54)
          {
            if (v54 == -1) {
              id v55 = 16;
            }
            else {
              id v55 = v54;
            }
            std::string::size_type v56 = a1;
            int v57 = v4;
            BOOL v58 = 7;
LABEL_195:
            sub_100061730(v56, v57, v58, v55);
            return;
          }
        }

        else if (v54 == (char)v54)
        {
          if (v54 == -1) {
            id v55 = 16;
          }
          else {
            id v55 = v54;
          }
          std::string::size_type v56 = a1;
          int v57 = v4;
          BOOL v58 = 4;
          goto LABEL_195;
        }
      }

      else if (v54 == (char)v54)
      {
        if (v54 == -1) {
          id v55 = 16;
        }
        else {
          id v55 = v54;
        }
        std::string::size_type v56 = a1;
        int v57 = v4;
        BOOL v58 = 2;
        goto LABEL_195;
      }

      goto LABEL_244;
    }

    int v38 = 2 * v15;
    int v26 = (*v28 & (2 * v15)) == 0;
    v15 *= 2;
    if (v26) {
      continue;
    }
    break;
  }

  if (v38 > 127)
  {
    if (v38 <= 1023)
    {
      switch(v38)
      {
        case 128:
          int v39 = 7;
          break;
        case 256:
          int v39 = 8;
          break;
        case 512:
          int v39 = 9;
          break;
        default:
          return;
      }
    }

    else if (v38 > 4095)
    {
      if (v38 == 4096)
      {
        int v39 = 12;
      }

      else
      {
        if (v38 != 0x2000) {
          return;
        }
        int v39 = 13;
      }
    }

    else if (v38 == 1024)
    {
      int v39 = 10;
    }

    else
    {
      if (v38 != 2048) {
        return;
      }
      int v39 = 11;
    }

LABEL_97:
  __break(0x550Au);
}

          __break(0x5516u);
        }
      }
    }
  }

  if ((a2 & 0x400) != 0) {
    sub_1000B8024(__p);
  }
}

void sub_100021CF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::string *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
}

uint64_t *sub_100021D2C(uint64_t *result)
{
  if (!result || (int v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = result;
    sub_100008D84(&v2);
    return v1;
  }

  return result;
}

void sub_100021D70(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a1;
  memset(__b, 170, sizeof(__b));
  if (!a2) {
    goto LABEL_160;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_160;
  }
  int v5 = (int *)(a2 + 24);
  uint64_t v4 = *(void *)a2;
  if (((a2 + 24) & 7) != 0) {
    goto LABEL_160;
  }
  int v6 = *v5;
  if (*v5 != 5) {
    goto LABEL_7;
  }
  if (((a2 + 12) & 3) != 0) {
    goto LABEL_160;
  }
  if (!*(_DWORD *)(a2 + 12))
  {
    for (unint64_t i = qword_10011BBF0; i != qword_10011BBE8; i -= 8LL)
    {
      if (i <= 7) {
        goto LABEL_161;
      }
    }

    qword_10011BBF0 = qword_10011BBE8;
    if (!v4)
    {
LABEL_158:
      int v51 = *(_DWORD *)(a2 + 12);
      BOOL v52 = __CFADD__(v51, 1);
      int v53 = v51 + 1;
      if (!v52)
      {
        *(_DWORD *)(a2 + 12) = v53;
        return;
      }

LABEL_162:
      __break(0x5500u);
    }
  }

  else
  {
LABEL_7:
    if (!v4) {
      goto LABEL_158;
    }
  }

  if (((a2 + 16) & 7) != 0) {
    goto LABEL_160;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7 != 0xFFFFFFFFLL && v7 != a1) {
    goto LABEL_158;
  }
  if (v6 != -1 && v6 != 5)
  {
    if (!a1 || (a1 & 7) != 0) {
      goto LABEL_160;
    }
  }

  if (((a2 + 8) & 7) != 0) {
    goto LABEL_160;
  }
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v9 > 7) {
    goto LABEL_163;
  }
  if (v9 != 4)
  {
    if (((a2 + 12) & 3) != 0 || !a1 || (a1 & 7) != 0) {
      goto LABEL_160;
    }
    int v13 = *(_DWORD *)(a2 + 12);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 216LL))(a1))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 216LL))(a1) == 1)
      {
        BOOL v14 = "USB";
      }

      else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 216LL))(a1) == 2)
      {
        BOOL v14 = "Bluetooth";
      }

      else
      {
        int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 216LL))(a1);
        BOOL v14 = "Unknown";
        if (v18 == 3) {
          BOOL v14 = "VPort";
        }
      }
    }

    else
    {
      BOOL v14 = "UART";
    }

    snprintf(__b, 0x400uLL, "[%d]    %hhx: (%s)", v13, a1, v14);
    if ((v4 & 7) != 0) {
      goto LABEL_160;
    }
    goto LABEL_157;
  }

  if (*v5 == 5)
  {
    unint64_t v10 = qword_10011BBF0;
    if ((unint64_t)qword_10011BBF0 >= unk_10011BBF8)
    {
      uint64_t v11 = sub_10002500C(&qword_10011BBE8, &v55);
    }

    else
    {
      sub_100024F94(&qword_10011BBE8, &v55);
      if (v10 >= 0xFFFFFFFFFFFFFFF8LL)
      {
LABEL_161:
        __break(0x5513u);
        goto LABEL_162;
      }

      uint64_t v11 = v10 + 8;
    }

    qword_10011BBF0 = v11;
  }

  if (((a2 + 12) & 3) != 0) {
    goto LABEL_160;
  }
  int v15 = v55;
  if (!v55 || (v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v16 = *(_DWORD *)(a2 + 12);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v55 + 216LL))(v55))
  {
    if (!v55 || (v55 & 7) != 0) {
      goto LABEL_160;
    }
    if ((*(unsigned int (**)(void))(*(void *)v55 + 216LL))() == 1)
    {
      uint64_t v17 = "USB";
    }

    else
    {
      if (!v55 || (v55 & 7) != 0) {
        goto LABEL_160;
      }
      if ((*(unsigned int (**)(void))(*(void *)v55 + 216LL))() == 2)
      {
        uint64_t v17 = "Bluetooth";
      }

      else
      {
        if (!v55 || (v55 & 7) != 0) {
          goto LABEL_160;
        }
        else {
          uint64_t v17 = "Unknown";
        }
      }
    }
  }

  else
  {
    uint64_t v17 = "UART";
  }

  if (sub_1000C8254(v55)) {
    uint64_t v19 = 84LL;
  }
  else {
    uint64_t v19 = 70LL;
  }
  uint64_t v20 = v55;
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  uint64_t v21 = *(void *)(v55 + 32);
  if (!v21) {
    goto LABEL_160;
  }
  if ((v21 & 7) != 0) {
    goto LABEL_160;
  }
  uint64_t v22 = (uint64_t *)(v21 + 40);
  uint64_t v23 = *v22;
  uint64_t v24 = *(void *)(v55 + 40);
  if (v24)
  {
    if ((v24 & 7) != 0) {
      goto LABEL_160;
    }
    int v25 = (const char *)(*(uint64_t (**)(void))(*(void *)v24 + 208LL))(*(void *)(v55 + 40));
    uint64_t v20 = v55;
    if (!v55) {
      goto LABEL_160;
    }
  }

  else
  {
    int v25 = "Unknown";
  }

  if ((v20 & 7) != 0) {
    goto LABEL_160;
  }
  int v26 = sub_100010620(v20);
  uint64_t v27 = 70LL;
  if (v26) {
    uint64_t v27 = 84LL;
  }
  snprintf( __b,  0x400uLL,  "[%d]    %hhx: (%s) valid=%c handle=%hhx connRef=%hhx(%s) 30pin=%c",  v16,  v15,  v17,  v19,  v23,  v24,  v25,  v27);
  if ((v4 & 7) != 0) {
    goto LABEL_160;
  }
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v28 = (*(uint64_t (**)(void))(*(void *)v55 + 64LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v29 = (*(uint64_t (**)(void))(*(void *)v55 + 56LL))();
  snprintf(__b, 0x400uLL, "                PortMgr=%d PortNumber=%d", v28, v29);
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v55 || (v55 & 7) != 0) {
    goto LABEL_160;
  }
  uint64_t v30 = (*(unsigned int (**)(void))(*(void *)v55 + 240LL))() ? 84LL : 70LL;
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v31 = (*(uint64_t (**)(void))(*(void *)v55 + 248LL))();
  if (!v55 || (v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v32 = (*(uint64_t (**)(void))(*(void *)v55 + 256LL))();
  uint64_t v33 = 70LL;
  if (v32) {
    uint64_t v34 = 84LL;
  }
  else {
    uint64_t v34 = 70LL;
  }
  if (v31) {
    uint64_t v33 = 84LL;
  }
  snprintf(__b, 0x400uLL, "                Supports: AccPower=%c USBAudioIn=%c USBAudioOut=%c", v30, v33, v34);
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  BOOL v35 = sub_1000C8320(v55);
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v36 = (*(uint64_t (**)(void))(*(void *)v55 + 128LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v37 = (*(uint64_t (**)(void))(*(void *)v55 + 136LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v38 = (*(uint64_t (**)(void))(*(void *)v55 + 136LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v39 = (*(uint64_t (**)(void))(*(void *)v55 + 144LL))();
  snprintf( __b,  0x400uLL,  "                packetRcvd=%d MaxPckSz=%d MaxPayloadSz=%d/%d MaxPckLen=%d",  v35,  v36,  v37,  v38,  v39);
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v40 = (*(uint64_t (**)(void))(*(void *)v55 + 160LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v41 = (*(uint64_t (**)(void))(*(void *)v55 + 168LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v42 = (*(uint64_t (**)(void))(*(void *)v55 + 184LL))();
  if (!v55) {
    goto LABEL_160;
  }
  if ((v55 & 7) != 0) {
    goto LABEL_160;
  }
  int v43 = (*(uint64_t (**)(void))(*(void *)v55 + 184LL))();
  snprintf(__b, 0x400uLL, "                iPodMaxBuffSz=%d iPodMaxPckSz=%d iPodMaxPayloadSz=%d/%d", v40, v41, v42, v43);
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v55 || (v55 & 7) != 0) {
    goto LABEL_160;
  }
  uint64_t v44 = *(void *)(v55 + 32);
  snprintf(__b, 0x400uLL, "            [PortInfo]: %hhx", v44);
  sub_100020CB0(v4, __b, 1u, 0);
  if (!v44) {
    goto LABEL_158;
  }
  if ((v44 & 7) != 0 || ((v44 + 52) & 3) != 0) {
    goto LABEL_160;
  }
  int v45 = *(_DWORD *)(v44 + 52);
  if ((((_BYTE)v44 + 8) & 7) != 0
    || (((_BYTE)v44 + 12) & 3) != 0
    || (((_BYTE)v44 + 28) & 3) != 0
    || (((_BYTE)v44 + 24) & 7) != 0
    || (snprintf( __b,  0x400uLL,  "                ResID=0x%x Lingo(Mask=0x%x Allowed=0x%x) IdentifyCmd=0x%x(prev=0x%x)",  v45,  *(_DWORD *)(v44 + 8),  *(_DWORD *)(v44 + 12),  *(_DWORD *)(v44 + 28),  *(_DWORD *)(v44 + 24)),  sub_100020CB0(v4, __b, 1u, 0),  (((_BYTE)v44 + 16) & 7) != 0)
    || (((_BYTE)v44 + 20) & 3) != 0
    || (((_BYTE)v44 + 32) & 7) != 0
    || (((_BYTE)v44 + 36) & 3) != 0
    || (snprintf( __b,  0x400uLL,  "                Port(Control=0x%x Option=0x%x Power=0x%x DevIDControl=0x%x)",  *(_DWORD *)(v44 + 16),  *(_DWORD *)(v44 + 20),  *(_DWORD *)(v44 + 32),  *(_DWORD *)(v44 + 36)),  sub_100020CB0(v4, __b, 1u, 0),  ((v44 + 48) & 7) != 0))
  {
LABEL_160:
    __break(0x5516u);
    goto LABEL_161;
  }

  if (*(unsigned __int8 *)(v44 + 48) <= 1u)
  {
    if (*(_BYTE *)(v44 + 48)) {
      uint64_t v46 = 84LL;
    }
    else {
      uint64_t v46 = 70LL;
    }
    if (((v44 + 56) & 7) != 0) {
      goto LABEL_160;
    }
    if (*(unsigned __int8 *)(v44 + 56) <= 1u)
    {
      uint64_t v47 = *(_BYTE *)(v44 + 56) ? 84LL : 70LL;
      if (*(unsigned __int8 *)(v44 + 57) <= 1u)
      {
        if (*(_BYTE *)(v44 + 57)) {
          uint64_t v48 = 84LL;
        }
        else {
          uint64_t v48 = 70LL;
        }
        if ((((_DWORD)v44 + 58) & 1) != 0) {
          goto LABEL_160;
        }
        if (*(unsigned __int8 *)(v44 + 58) <= 1u && *(unsigned __int8 *)(v44 + 59) <= 1u)
        {
          uint64_t v54 = v46;
          uint64_t v49 = 84LL;
          if (*(_BYTE *)(v44 + 59)) {
            uint64_t v50 = 84LL;
          }
          else {
            uint64_t v50 = 70LL;
          }
          if (!*(_BYTE *)(v44 + 58)) {
            uint64_t v49 = 70LL;
          }
          snprintf( __b,  0x400uLL,  "                TransIDReqd=%c IgnorePck=%c Attached=%c ReqIdentifySent=%c NeedDelete=%c",  v54,  v47,  v48,  v49,  v50);
          sub_100020CB0(v4, __b, 1u, 0);
          if (((v44 + 64) & 7) != 0 || ((v44 + 80) & 7) != 0) {
            goto LABEL_160;
          }
          snprintf( __b,  0x400uLL,  "                DeleteCallback=%hhx LastTimeKickAccDetect=%d",  *(void *)(v44 + 64),  *(_DWORD *)(v44 + 80));
LABEL_157:
          sub_100020CB0(v4, __b, 1u, 0);
          goto LABEL_158;
        }
      }
    }
  }

          sub_1000D276C();
        }

LABEL_163:
  __break(0x550Au);
}

uint64_t sub_1000226C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_18;
  }
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "DBG Sessions: %d", qword_10011C818);
  sub_100020CB0(a1, __b, 1u, 0);
  int v12 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 != &qword_10011C810)
  {
    int v6 = 0;
    while (1)
    {
      uint64_t v7 = sub_100003154((uint64_t *)&v12);
      uint64_t v8 = v7[1];
      if (!v8 || (v7[1] & 7) != 0) {
        break;
      }
      if (v8 == a1) {
        unint64_t v10 = " (current)";
      }
      else {
        unint64_t v10 = "";
      }
      snprintf(__b, 0x400uLL, "[%d]    %hhx:%s pendingMsgs=%d", v6, v8, v10, *(void *)(v8 + 32));
      sub_100020CB0(a1, __b, 1u, 0);
      sub_100008A4C((uint64_t *)&v12);
      if (v6 == -1) {
        goto LABEL_19;
      }
      ++v6;
      if (v12 == &qword_10011C810) {
        goto LABEL_17;
      }
    }

uint64_t sub_100022860(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_13;
  }
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "DBG Sessions: %d", qword_10011C818);
  sub_100020CB0(a1, __b, 1u, 0);
  unint64_t v10 = (uint64_t *)qword_10011C808;
  if ((uint64_t *)qword_10011C808 != &qword_10011C810)
  {
    int v6 = 0;
    while (1)
    {
      uint64_t v7 = sub_100003154((uint64_t *)&v10);
      if (v7[1] == a1) {
        uint64_t v8 = "(current)";
      }
      else {
        uint64_t v8 = "";
      }
      snprintf(__b, 0x400uLL, "[%d]    %hhx %s", v6, v7[1], v8);
      sub_100020CB0(a1, __b, 1u, 0);
      sub_100008A4C((uint64_t *)&v10);
      if (v6 == -1) {
        goto LABEL_14;
      }
      ++v6;
      if (v10 == &qword_10011C810) {
        goto LABEL_12;
      }
    }

uint64_t sub_1000229E8(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0
    || (v6[0] = result,
        v6[1] = 1LL,
        void v6[2] = a2,
        int v8 = -1431655766,
        int v7 = a3,
        sub_100020CB0(result, "Connection List:", 1u, 0),
        (uint64_t result = sub_1000B6CE0()) == 0)
    || (result & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    sub_10008E450(result, (void (*)(uint64_t, uint64_t))sub_1000213D8, (uint64_t)v6, 0LL);
    sub_100020CB0(v4, " ", 1u, a4);
    return 1LL;
  }

  return result;
}

uint64_t sub_100022A94(uint64_t result, uint64_t a2, int a3, int a4)
{
  if (!result) {
    goto LABEL_6;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0
    || (v6[0] = result,
        v6[1] = 2LL,
        void v6[2] = a2,
        int v8 = -1431655766,
        int v7 = a3,
        sub_100020CB0(result, "Port List:", 1u, 0),
        (uint64_t result = sub_1000B6CE0()) == 0)
    || (result & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    sub_1000B8464(result, sub_100021D70, (uint64_t)v6, 0LL, 0);
    sub_100020CB0(v4, " ", 1u, a4);
    return 1LL;
  }

  return result;
}

uint64_t sub_100022B44(uint64_t a1, unint64_t a2, int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_26:
    __break(0x5516u);
LABEL_27:
    __break(0x5500u);
  }

  uint64_t v4 = (a3 + 1);
  if (__OFADD__(a3, 1)) {
    goto LABEL_27;
  }
  if (a3 > 4) {
    return 1LL;
  }
  memset(v14, 170, 21);
  uint64_t result = (uint64_t)memset(__b, 170, sizeof(__b));
  if ((v4 + 0x20000000) >> 30)
  {
    __break(0x550Cu);
  }

  else
  {
    size_t v7 = 4LL * (int)v4;
    uint64_t result = (uint64_t)memset(v14, 32, v7);
    if (v7 < 0x15)
    {
      if (!__CFADD__(v14, v7))
      {
        *((_BYTE *)v14 + 4 * (int)v4) = 0;
        if (a2)
        {
          uint64_t v8 = 0LL;
          unsigned int v9 = (void *)a2;
          while ((v9 & 7) == 0)
          {
            if (!*v9)
            {
              if ((a2 & 7) != 0) {
                goto LABEL_26;
              }
              unint64_t v10 = (void *)(a2 + 32 * v8);
              if (!v10[1] && !v10[2] && !*(void *)(a2 + 32 * v8 + 24)) {
                return 1LL;
              }
            }

            if ((a2 & 7) != 0) {
              goto LABEL_26;
            }
            if (*(void *)(a2 + 32 * v8 + 24)) {
              snprintf(__b, 0x400uLL, "%s%s - %s");
            }
            else {
              snprintf(__b, 0x400uLL, "%s%s");
            }
            sub_100020CB0(a1, __b, 1u, 0);
            uint64_t v11 = *(void *)(a2 + 32 * v8 + 8);
            if (v11) {
              sub_100022B44(a1, v11, v4);
            }
            int v12 = v8 + 1;
            if (__OFADD__((_DWORD)v8, 1)) {
              goto LABEL_27;
            }
            uint64_t v8 = v12;
            unsigned int v9 = (void *)(a2 + 32LL * v12);
            if (32LL * v12 > ~a2) {
              goto LABEL_24;
            }
          }
        }

        goto LABEL_26;
      }

void sub_100022D34(uint64_t a1, void *a2, unsigned int a3, int a4, unint64_t a5)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_21;
  }
  sub_100020CB0(a1, "Commands: (use # at beginning of line to mark as a comment to be ignored)", 1u, 0);
  if (!a2 || a3 < 2 || !a4)
  {
LABEL_20:
    sub_100022B44(a1, a5, a4);
    sub_100020CB0(a1, " ", 1u, 1);
    return;
  }

  memset(&v15, 0, sizeof(v15));
  if ((a2 & 7) != 0)
  {
LABEL_21:
    __break(0x5516u);
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = 24LL * a3;
    while (1)
    {
      uint64_t v12 = *a2;
      if (__CFADD__(*a2, v10)) {
        break;
      }
      if (v12) {
        BOOL v13 = (((_BYTE)v10 + (_BYTE)v12) & 7) == 0LL;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13) {
        goto LABEL_21;
      }
      sub_100022E90(&v15, (const std::string::value_type *)(v12 + v10));
      std::string::push_back(&v15, 32);
      v10 += 24LL;
      if (v11 == v10)
      {
        if ((v15.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          BOOL v14 = &v15;
        }
        else {
          BOOL v14 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        sub_100020CB0(a1, (const std::string::value_type *)v14, 1u, 0);
        goto LABEL_20;
      }
    }
  }

  __break(0x5513u);
}

void sub_100022E74( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *sub_100022E90(std::string *result, const std::string::value_type *a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    std::string::size_type v2 = *((void *)a2 + 1);
    if (a2[23] >= 0)
    {
      std::string::size_type v3 = *((unsigned __int8 *)a2 + 23);
    }

    else
    {
      a2 = *(const std::string::value_type **)a2;
      std::string::size_type v3 = v2;
    }

    return std::string::append(result, a2, v3);
  }

  return result;
}

uint64_t sub_100022EBC(uint64_t result, std::string *this, const std::string::value_type **a3)
{
  if (result && (result & 7) == 0)
  {
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    uint64_t v6 = 0xFFFFFFFFLL;
    if (!a3 || !size) {
      return v6;
    }
    uint64_t v6 = 0LL;
    unint64_t v7 = ~(unint64_t)a3;
    uint64_t v8 = a3;
    while ((v8 & 7) == 0)
    {
      if (!*v8) {
        goto LABEL_14;
      }
      uint64_t result = std::string::compare(this, *v8);
      if (!(_DWORD)result) {
        return v6;
      }
      int v9 = v6 + 1;
      if (__OFADD__((_DWORD)v6, 1)) {
        goto LABEL_23;
      }
      uint64_t v6 = v9;
      uint64_t v8 = &a3[4 * v9];
      if (32LL * v9 > v7)
      {
        __break(0x5513u);
LABEL_14:
        uint64_t v10 = (uint64_t)&a3[4 * v6 + 1];
        if ((v10 & 7) != 0) {
          break;
        }
        if (!*(void *)v10)
        {
          uint64_t v11 = (uint64_t)&a3[4 * v6 + 2];
          if ((v11 & 7) != 0) {
            break;
          }
          if (!*(void *)v11)
          {
            uint64_t v12 = (uint64_t)&a3[4 * v6 + 3];
            if ((v12 & 7) != 0) {
              break;
            }
            if (!*(void *)v12) {
              return 0xFFFFFFFFLL;
            }
          }
        }

        return v6;
      }
    }
  }

  __break(0x5516u);
LABEL_23:
  __break(0x5500u);
  return result;
}

std::string::size_type sub_100022FB0(std::string::size_type result, std::string::value_type *__s)
{
  if (!result) {
    goto LABEL_54;
  }
  std::string::size_type v2 = (std::string *)result;
  if ((result & 7) != 0 || !__s) {
    goto LABEL_54;
  }
  if (*__s > 31)
  {
    result += 72LL;
    if (((unint64_t)&v2[3] & 7) == 0)
    {
      uint64_t result = (std::string::size_type)std::string::assign((std::string *)result, __s);
      char v5 = 0;
LABEL_20:
      v2[4].__r_.__value_.__s.__data_[0] = v5;
      memset(&v21, 0, sizeof(v21));
      if (((unint64_t)&v2[3] & 7) == 0)
      {
        sub_1000255A4((uint64_t)__p, " ");
        sub_10001C8E4(v2 + 3, &v21, (std::string::size_type)__p);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = v21.__r_.__value_.__r.__words[0];
        if (v21.__r_.__value_.__r.__words[0])
        {
          if ((v21.__r_.__value_.__s.__data_[0] & 7) == 0)
          {
            uint64_t result = sub_1000232F8((uint64_t)v21.__r_.__value_.__l.__data_, 0LL);
            if (*(_BYTE *)result == 35)
            {
              sub_100020CB0((uint64_t)v2, __s, 1u, 1);
LABEL_52:
              __p[0] = &v21;
              sub_100025484((uint64_t **)__p);
              return 1LL;
            }

            uint64_t v6 = -1431655765 * ((v21.__r_.__value_.__l.__size_ - v21.__r_.__value_.__r.__words[0]) >> 3);
            if (!(_DWORD)v6)
            {
              LODWORD(v11) = 0;
              unint64_t v12 = (unint64_t)&off_100102688;
              goto LABEL_48;
            }

            uint64_t v7 = 0LL;
            uint64_t v8 = 0LL;
            int v9 = (const std::string::value_type **)&off_100102688;
            do
            {
              if (__CFADD__(v21.__r_.__value_.__r.__words[0], v7)) {
                goto LABEL_55;
              }
              if (v21.__r_.__value_.__r.__words[0]) {
                BOOL v10 = (((_BYTE)v7 + v21.__r_.__value_.__s.__data_[0]) & 7) == 0LL;
              }
              else {
                BOOL v10 = 0;
              }
              if (!v10) {
                goto LABEL_54;
              }
              uint64_t v11 = v8;
              unint64_t v12 = (unint64_t)v9;
              uint64_t result = sub_100022EBC((uint64_t)v2, (std::string *)(v21.__r_.__value_.__r.__words[0] + v7), v9);
              if ((_DWORD)result == -1) {
                goto LABEL_51;
              }
              unint64_t v13 = 32LL * result;
              unint64_t v14 = ~v12;
              if (v13 > v14) {
                goto LABEL_55;
              }
              if ((v12 & 7) != 0) {
                goto LABEL_54;
              }
              std::string v15 = (const std::string::value_type ***)(v12 + 32LL * result + 8);
              int v9 = *v15;
              v7 += 24LL;
              uint64_t v8 = (v11 + 1);
            }

            while (v9);
            if (v13 > v14) {
              goto LABEL_55;
            }
            if ((v12 & 7) == 0)
            {
              uint64_t v16 = v12 + 32LL * result + 16;
              if ((v16 & 7) == 0)
              {
                uint64_t v17 = *(uint64_t (**)(std::string *, std::string *, uint64_t, uint64_t))v16;
                if (v17)
                {
                  if ((v17(v2, &v21, v6, v11) & 1) != 0) {
                    goto LABEL_52;
                  }
LABEL_51:
                  sub_100022D34((uint64_t)v2, &v21, v6, v11, v12);
                  goto LABEL_52;
                }

                uint64_t v18 = v12 + 32LL * result + 8;
                if ((v18 & 7) != 0) {
                  goto LABEL_54;
                }
                if (*(void *)v18) {
                  goto LABEL_51;
                }
LABEL_48:
                sub_100020CB0((uint64_t)v2, "COMMAND FAILED!", 1u, 0);
                sub_100020CB0((uint64_t)v2, " ", 1u, 0);
                sub_100022D34((uint64_t)v2, &v21, v6, v11, v12);
                goto LABEL_52;
              }
            }
          }
        }
      }

      goto LABEL_54;
    }

    goto LABEL_54;
  }

  int v4 = *__s;
  if ((v4 - 2) >= 2)
  {
    if (v4 == 1)
    {
      if (__s != (std::string::value_type *)-1LL)
      {
        result += 72LL;
        if (((unint64_t)&v2[3] & 7) == 0)
        {
          std::string::assign((std::string *)result, __s + 1);
          return 1LL;
        }

        goto LABEL_54;
      }
    }

    else if (__s != (std::string::value_type *)-1LL)
    {
      result += 72LL;
      if (((unint64_t)&v2[3] & 7) == 0)
      {
        uint64_t result = (std::string::size_type)std::string::assign((std::string *)result, __s + 1);
LABEL_19:
        char v5 = 1;
        goto LABEL_20;
      }

LABEL_54:
      __break(0x5516u);
    }
  }

  else if (__s != (std::string::value_type *)-1LL)
  {
    result += 72LL;
    if (((unint64_t)&v2[3] & 7) == 0)
    {
      uint64_t result = (std::string::size_type)std::string::append((std::string *)result, __s + 1);
      if (*__s == 3) {
        return 1LL;
      }
      goto LABEL_19;
    }

    goto LABEL_54;
  }

            __break(0x5516u);
LABEL_55:
            __break(0x5515u);
            goto LABEL_56;
          }

    __break(0x5516u);
LABEL_55:
    __break(0x5507u);
  }

  __break(0x5500u);
  return result;
}

          uint64_t result = sub_10005C778(v6 + 368);
          if (a2 || a5 != 48) {
            return 1LL;
          }
          if (a4 && (a4 & 7) == 0)
          {
            BOOL v35 = *(_DWORD *)a4;
            if (*(_DWORD *)a4 <= 0x1Fu)
            {
              if (v35 <= 0xD && ((1 << v35) & 0x3AFE) != 0) {
                sub_10005C790(v6, a4);
              }
              return 1LL;
            }

    sub_1000AC324(a2, *(void *)(a2 + 8), 0, v17, v20, *(_DWORD *)(a2 + 68), v26, (unsigned __int16)v24);
    operator delete[](v26);
    int v37 = v35;
    sub_100064D58(&v37);
    std::string v21 = 0LL;
LABEL_26:
    sub_100064D0C(&v36);
    return v21;
  }

  if (v32 <= 3)
  {
    *int v26 = v32;
    int v28 = v26 + 1;
    if (v26 != (_BYTE *)-1LL)
    {
      if (v32)
      {
        *int v28 = bswap32(a4);
        if ((unint64_t)v28 <= 0xFFFFFFFFFFFFFFFBLL)
        {
          uint64_t v27 = v26 + 5;
          goto LABEL_46;
        }
      }

      else
      {
        *(void *)int v28 = bswap64(a4);
        if ((unint64_t)v28 <= 0xFFFFFFFFFFFFFFF7LL)
        {
          uint64_t v27 = v26 + 9;
          goto LABEL_46;
        }
      }
    }

    goto LABEL_57;
  }

  __break(0x5516u);
LABEL_55:
  __break(0x5500u);
LABEL_56:
  __break(0x5513u);
}

              __break(0x5513u);
              goto LABEL_55;
            }
          }
        }
      }

      goto LABEL_52;
    }

void sub_1000232C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1000232F8(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    if (__CFADD__(result, a2)) {
      goto LABEL_9;
    }
    if (result)
    {
      result += a2;
      return result;
    }
  }

  __break(0x5516u);
LABEL_9:
  __break(0x5513u);
  return result;
}

uint64_t *sub_10002332C(uint64_t *result)
{
  if (!result || (int v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    std::string::size_type v2 = result;
    sub_100025484(&v2);
    return v1;
  }

  return result;
}

void sub_100023370(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "Paused %d milliseconds", v2);
  if (v1) {
    BOOL v3 = (v1 & 7) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3) {
    __break(0x5516u);
  }
  sub_100020CB0(v1, __b, 1u, 1);
}

uint64_t sub_10002341C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v9 = qword_10011D0B0;
  unsigned int v10 = sub_100062E0C();
  snprintf(__b, 0x400uLL, "Stats info: total list std::string::size_type size = %lu, curTime=%ums", v9, v10);
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_26;
  }
  sub_100020CB0(a1, __b, 1u, 0);
  for (unsigned int i = 0; i != 4; ++i)
  {
    else {
      unint64_t v12 = "off";
    }
    snprintf(__b, 0x400uLL, "    Category %d: status=%s", i, v12);
    sub_100020CB0(a1, __b, 1u, 0);
  }

  uint64_t v19 = (uint64_t *)qword_10011D0A8;
  if ((uint64_t *)qword_10011D0A8 != &qword_10011D0A0)
  {
    int v13 = 0;
    if (a5 != 5) {
      a6 = 1;
    }
    while (1)
    {
      unint64_t v14 = sub_10000D014((uint64_t *)&v19);
      if (a5 >= 8) {
        break;
      }
      uint64_t v15 = *v14;
      if (!a6) {
        goto LABEL_20;
      }
      if (v15) {
        BOOL v16 = (*v14 & 7) == 0;
      }
      else {
        BOOL v16 = 0;
      }
      if (!v16) {
        goto LABEL_26;
      }
      unsigned int v17 = *(_DWORD *)(v15 + 8);
      if (v17 >= 8) {
        break;
      }
      if (v17 == a5) {
LABEL_20:
      }
        sub_10002430C(a1, v13, v15);
      sub_10000D048(&v19);
      if (__OFADD__(v13, 1)) {
        goto LABEL_25;
      }
      ++v13;
      if (v19 == &qword_10011D0A0) {
        goto LABEL_23;
      }
    }

    __break(0x550Au);
LABEL_25:
    __break(0x5500u);
LABEL_26:
    __break(0x5516u);
  }

uint64_t sub_1000235F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7 = qword_10011D0B0;
  unsigned int v8 = sub_100062E0C();
  snprintf(__b, 0x400uLL, "Stats info: total list std::string::size_type size = %lu, curTime=%ums", v7, v8);
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_25;
  }
  sub_100020CB0(a1, __b, 1u, 0);
  for (unsigned int i = 0; i != 4; ++i)
  {
    else {
      unsigned int v10 = "off";
    }
    snprintf(__b, 0x400uLL, "    Category %d: status=%s", i, v10);
    sub_100020CB0(a1, __b, 1u, 0);
  }

  unsigned int v17 = (uint64_t *)qword_10011D0A8;
  if ((uint64_t *)qword_10011D0A8 != &qword_10011D0A0)
  {
    int v11 = 0;
    while (1)
    {
      unint64_t v12 = sub_10000D014((uint64_t *)&v17);
      if (a5 >= 8) {
        break;
      }
      uint64_t v13 = *v12;
      if (a5 == 4) {
        goto LABEL_19;
      }
      if (v13) {
        BOOL v14 = (*v12 & 7) == 0;
      }
      else {
        BOOL v14 = 0;
      }
      if (!v14) {
        goto LABEL_25;
      }
      unsigned int v15 = *(_DWORD *)(v13 + 76);
      if (v15 >= 8) {
        break;
      }
      if (v15 == a5) {
LABEL_19:
      }
        sub_10002430C(a1, v11, v13);
      sub_10000D048(&v17);
      if (__OFADD__(v11, 1)) {
        goto LABEL_24;
      }
      ++v11;
      if (v17 == &qword_10011D0A0) {
        goto LABEL_22;
      }
    }

    __break(0x550Au);
LABEL_24:
    __break(0x5500u);
LABEL_25:
    __break(0x5516u);
  }

std::string *sub_1000237C4(std::string *result, const std::string::value_type *a2)
{
  return result;
}

uint64_t sub_1000237D8(uint64_t result, void *a2, unsigned int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v15 = a6;
  unsigned int v6 = a4 + 1;
  if (a4 == -1) {
LABEL_20:
  }
    __break(0x5500u);
  uint64_t v8 = result;
  if (v6 >= a3)
  {
    if (result && (result & 7) == 0 && ((result + 64) & 7) == 0)
    {
      [*(id *)(result + 64) removeObjectForKey:a5];
LABEL_18:
      memset(__b, 170, sizeof(__b));
      BOOL v14 = (const char *)[a5 UTF8String];
      snprintf(__b, 0x400uLL, "Set NowPlaying data %s=0x%qx", v14, v15);
      sub_100020CB0(v8, __b, 1u, 0);
      sub_100020CB0(v8, " ", 1u, 1);
      return 1LL;
    }

    goto LABEL_19;
  }

  uint64_t v9 = *a2;
  if (!__CFADD__(*a2, 24LL * v6))
  {
    if (v9)
    {
      uint64_t v10 = v9 + 24LL * v6;
      if ((v10 & 7) == 0)
      {
        sscanf((const char *)v10, "%qx", &v15);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            int v11 = (id *)(v8 + 64);
            if (((v8 + 64) & 7) == 0)
            {
              if (!*v11)
              {
                unint64_t v12 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  13LL);
                id *v11 = v12;
                uint64_t v13 = v12;
              }

              objc_msgSend( *v11,  "setValue:forKey:",  +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v15),  a5);
              goto LABEL_18;
            }
          }
        }
      }
    }

uint64_t sub_10002397C(uint64_t a1, void *a2, unsigned int a3, int a4, void *a5)
{
  unsigned int v5 = a4 + 1;
  if (a4 == -1) {
    goto LABEL_28;
  }
  if (v5 >= a3)
  {
    if (a1 && (a1 & 7) == 0 && ((a1 + 64) & 7) == 0)
    {
      [*(id *)(a1 + 64) removeObjectForKey:a5];
      uint64_t v18 = 0LL;
      goto LABEL_25;
    }

    goto LABEL_26;
  }

  memset(__b, 170, 24);
  sub_1000255A4((uint64_t)__b, "");
  uint64_t v11 = 24LL * v5;
  unsigned int v12 = ~a4 + a3;
  do
  {
    uint64_t v13 = *a2;
    if (__CFADD__(*a2, v11)) {
      goto LABEL_27;
    }
    if (v13) {
      BOOL v14 = (((_BYTE)v11 + (_BYTE)v13) & 7) == 0LL;
    }
    else {
      BOOL v14 = 0;
    }
    if (!v14) {
      goto LABEL_26;
    }
    sub_100022E90((std::string *)__b, (const std::string::value_type *)(v13 + v11));
    std::string::append((std::string *)__b, " ");
    v11 += 24LL;
    --v12;
  }

  while (v12);
  if (__b[23] >= 0) {
    uint64_t v15 = __b;
  }
  else {
    uint64_t v15 = *(_BYTE **)__b;
  }
  BOOL v16 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v15);
  if (!a1 || (a1 & 7) != 0 || (unsigned int v17 = (void **)(a1 + 64), ((a1 + 64) & 7) != 0))
  {
LABEL_26:
    __break(0x5516u);
LABEL_27:
    __break(0x5513u);
LABEL_28:
    __break(0x5500u);
  }

  uint64_t v18 = v16;
  uint64_t v19 = *v17;
  if (!*v17)
  {
    char v20 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  13LL);
    uint64_t *v17 = v20;
    std::string v21 = v20;
    uint64_t v19 = *v17;
  }

  [v19 setValue:v18 forKey:a5];
  if ((__b[23] & 0x80000000) != 0) {
    operator delete(*(void **)__b);
  }
LABEL_25:
  memset(__b, 170, sizeof(__b));
  snprintf( __b,  0x400uLL,  "Set NowPlaying data %s=%s",  (const char *)[a5 UTF8String],  -[NSString UTF8String](v18, "UTF8String"));
  sub_100020CB0(a1, __b, 1u, 0);
  sub_100020CB0(a1, " ", 1u, 1);
  return 1LL;
}

void sub_100023B9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_100023BD0(uint64_t result, void *a2, unsigned int a3, int a4, void *a5, unsigned int a6)
{
  unsigned int v15 = a6;
  unsigned int v6 = a4 + 1;
  if (a4 == -1) {
LABEL_20:
  }
    __break(0x5500u);
  uint64_t v8 = result;
  if (v6 >= a3)
  {
    if (result && (result & 7) == 0 && ((result + 64) & 7) == 0)
    {
      [*(id *)(result + 64) removeObjectForKey:a5];
LABEL_18:
      memset(__b, 170, sizeof(__b));
      BOOL v14 = (const char *)[a5 UTF8String];
      snprintf(__b, 0x400uLL, "Set NowPlaying data %s=%u", v14, v15);
      sub_100020CB0(v8, __b, 1u, 0);
      sub_100020CB0(v8, " ", 1u, 1);
      return 1LL;
    }

    goto LABEL_19;
  }

  uint64_t v9 = *a2;
  if (!__CFADD__(*a2, 24LL * v6))
  {
    if (v9)
    {
      uint64_t v10 = v9 + 24LL * v6;
      if ((v10 & 7) == 0)
      {
        sscanf((const char *)v10, "%u", &v15);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            uint64_t v11 = (id *)(v8 + 64);
            if (((v8 + 64) & 7) == 0)
            {
              if (!*v11)
              {
                unsigned int v12 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  13LL);
                id *v11 = v12;
                uint64_t v13 = v12;
              }

              objc_msgSend( *v11,  "setValue:forKey:",  +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v15),  a5);
              goto LABEL_18;
            }
          }
        }
      }
    }

uint64_t sub_100023D74(uint64_t result, void *a2, unsigned int a3, int a4, void *a5, int a6)
{
  int v15 = a6;
  unsigned int v6 = a4 + 1;
  if (a4 == -1) {
LABEL_20:
  }
    __break(0x5500u);
  uint64_t v8 = result;
  if (v6 >= a3)
  {
    if (result && (result & 7) == 0 && ((result + 64) & 7) == 0)
    {
      [*(id *)(result + 64) removeObjectForKey:a5];
LABEL_18:
      memset(__b, 170, sizeof(__b));
      BOOL v14 = (const char *)[a5 UTF8String];
      snprintf(__b, 0x400uLL, "Set NowPlaying data %s=%d", v14, v15);
      sub_100020CB0(v8, __b, 1u, 0);
      sub_100020CB0(v8, " ", 1u, 1);
      return 1LL;
    }

    goto LABEL_19;
  }

  uint64_t v9 = *a2;
  if (!__CFADD__(*a2, 24LL * v6))
  {
    if (v9)
    {
      uint64_t v10 = v9 + 24LL * v6;
      if ((v10 & 7) == 0)
      {
        sscanf((const char *)v10, "%d", &v15);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            uint64_t v11 = (id *)(v8 + 64);
            if (((v8 + 64) & 7) == 0)
            {
              if (!*v11)
              {
                unsigned int v12 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  13LL);
                id *v11 = v12;
                uint64_t v13 = v12;
              }

              objc_msgSend( *v11,  "setValue:forKey:",  +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v15),  a5);
              goto LABEL_18;
            }
          }
        }
      }
    }

uint64_t sub_100023F18(uint64_t result, void *a2, unsigned int a3, int a4, void *a5, float a6)
{
  float v16 = a6;
  unsigned int v6 = a4 + 1;
  if (a4 == -1) {
LABEL_20:
  }
    __break(0x5500u);
  uint64_t v8 = result;
  if (v6 >= a3)
  {
    if (result && (result & 7) == 0 && ((result + 64) & 7) == 0)
    {
      [*(id *)(result + 64) removeObjectForKey:a5];
LABEL_18:
      memset(__b, 170, sizeof(__b));
      int v15 = (const char *)[a5 UTF8String];
      snprintf(__b, 0x400uLL, "Set NowPlaying data %s=%f", v15, v16);
      sub_100020CB0(v8, __b, 1u, 0);
      sub_100020CB0(v8, " ", 1u, 1);
      return 1LL;
    }

    goto LABEL_19;
  }

  uint64_t v9 = *a2;
  if (!__CFADD__(*a2, 24LL * v6))
  {
    if (v9)
    {
      uint64_t v10 = v9 + 24LL * v6;
      if ((v10 & 7) == 0)
      {
        sscanf((const char *)v10, "%f", &v16);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            unsigned int v12 = (id *)(v8 + 64);
            if (((v8 + 64) & 7) == 0)
            {
              if (!*v12)
              {
                uint64_t v13 = +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  13LL);
                *unsigned int v12 = v13;
                BOOL v14 = v13;
              }

              *(float *)&double v11 = v16;
              objc_msgSend( *v12,  "setValue:forKey:",  +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11),  a5);
              goto LABEL_18;
            }
          }
        }
      }
    }

uint64_t *sub_1000240C4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6)
{
  uint64_t v6 = (uint64_t)result;
  uint64_t v13 = (uint64_t *)qword_10011D0A8;
  if ((uint64_t *)qword_10011D0A8 != &qword_10011D0A0)
  {
    if (a5 != 5) {
      a6 = 1;
    }
    while (1)
    {
      uint64_t result = sub_10000D014((uint64_t *)&v13);
      if (a5 >= 8)
      {
LABEL_25:
        __break(0x550Au);
        goto LABEL_26;
      }

      uint64_t result = (uint64_t *)*result;
      uint64_t v9 = result & 7;
      if ((a6 & 1) == 0) {
        goto LABEL_15;
      }
      if (result) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (!v10) {
        goto LABEL_26;
      }
      unsigned int v11 = *((_DWORD *)result + 2);
      if (v11 >= 8) {
        goto LABEL_25;
      }
      if (v11 == a5) {
        break;
      }
LABEL_21:
      uint64_t result = sub_10000D048(&v13);
      if (v13 == &qword_10011D0A0) {
        goto LABEL_22;
      }
    }

    uint64_t v9 = 0LL;
LABEL_15:
    if (result) {
      BOOL v12 = v9 == 0;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      goto LABEL_26;
    }
    (*(void (**)(uint64_t *))(*result + 96))(result);
    goto LABEL_21;
  }

uint64_t *sub_1000241B0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = (uint64_t)result;
  unsigned int v11 = (uint64_t *)qword_10011D0A8;
  if ((uint64_t *)qword_10011D0A8 != &qword_10011D0A0)
  {
    while (1)
    {
      uint64_t result = sub_10000D014((uint64_t *)&v11);
      if (a5 >= 8)
      {
LABEL_22:
        __break(0x550Au);
        goto LABEL_23;
      }

      uint64_t result = (uint64_t *)*result;
      uint64_t v7 = result & 7;
      if (a5 == 4) {
        goto LABEL_12;
      }
      if (result) {
        BOOL v8 = v7 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (!v8) {
        goto LABEL_23;
      }
      unsigned int v9 = *((_DWORD *)result + 19);
      if (v9 >= 8) {
        goto LABEL_22;
      }
      if (v9 == a5) {
        break;
      }
LABEL_18:
      uint64_t result = sub_10000D048(&v11);
      if (v11 == &qword_10011D0A0) {
        goto LABEL_19;
      }
    }

    uint64_t v7 = 0LL;
LABEL_12:
    if (result) {
      BOOL v10 = v7 == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (!v10) {
      goto LABEL_23;
    }
    (*(void (**)(uint64_t *))(*result + 96))(result);
    goto LABEL_18;
  }

uint64_t sub_100024298(unsigned int a1)
{
  uint64_t result = pthread_once(&stru_10011B908, sub_1000BC260);
  if (a1 >= 8)
  {
    __break(0x550Au);
  }

  else
  {
    if (a1 > 3) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_10002430C(uint64_t a1, int a2, uint64_t a3)
{
  if (!a3 || (a3 & 7) != 0) {
    goto LABEL_17;
  }
  unsigned int v4 = *(_DWORD *)(a3 + 76);
  if (v4 >= 8) {
    goto LABEL_18;
  }
  memset(__b, 170, sizeof(__b));
  snprintf(__b, 0x400uLL, "  %3d: %s - (%hhx) cat=%d", a2, (const char *)(a3 + 12), a3, v4);
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
LABEL_18:
    __break(0x550Au);
  }

  sub_100020CB0(a1, __b, 1u, 0);
  unsigned int v7 = *(_DWORD *)(a3 + 80);
  if (v7 >= 4) {
    goto LABEL_18;
  }
  if (v7 == 1)
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
    snprintf(__b, 0x400uLL, "        cnt=%u:", v11);
    sub_100020CB0(a1, __b, 1u, 0);
    if (v11)
    {
      uint64_t v12 = 0LL;
      do
      {
        uint64_t v16 = 0LL;
        unint64_t v17 = 0LL;
        uint64_t v14 = 0LL;
        (*(void (**)(uint64_t, uint64_t, char *, uint64_t *, unint64_t *, uint64_t *))(*(void *)a3 + 88LL))( a3,  v12,  (char *)&v16 + 4,  &v16,  &v17,  &v14);
        snprintf(__b, 0x400uLL, "            %2u: %08x %08lx %08lx (time=%ums)", v12, v16, v17, v14, HIDWORD(v16));
        sub_100020CB0(a1, __b, 1u, 0);
        uint64_t v12 = (v12 + 1);
      }

      while (v11 != (_DWORD)v12);
    }
  }

  else
  {
    if (v7)
    {
      snprintf(__b, 0x400uLL, "        Unknown stat info type %d");
    }

    else
    {
      uint64_t v16 = 0LL;
      unint64_t v17 = 0LL;
      LODWORD(v14) = 0;
      uint64_t v15 = 0LL;
      (*(void (**)(uint64_t, unint64_t *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(*(void *)a3 + 80LL))( a3,  &v17,  &v14,  (char *)&v16 + 4,  &v16,  (char *)&v15 + 4,  &v15);
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 16LL))(a3);
      uint64_t v9 = v17;
      unint64_t v10 = HIDWORD(v17);
      (*(void (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
      snprintf( __b,  0x400uLL,  "        last=%u tot=0x%x%08x(%u:%u) cnt=%u min=%u(ts=%ums) max=%u(ts=%ums) avg=%u",  v8,  v10,  v9);
    }

    sub_100020CB0(a1, __b, 1u, 0);
  }

  return 1LL;
}

void sub_100024588(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    sub_1000D251C();
  }
  __break(0x5516u);
}

std::string *sub_1000245B0(std::string *result, std::string *__str)
{
  std::string::size_type size = (std::string *)result->__r_.__value_.__l.__size_;
  unsigned int v4 = result;
  unint64_t v5 = (unint64_t)size;
  uint64_t v6 = size + 1;
  uint64_t result = (std::string *)((char *)result + 16);
  if ((result & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    goto LABEL_8;
  }

  uint64_t result = sub_100024778((int)result, size, __str);
  if (v5 < 0xFFFFFFFFFFFFFFE8LL)
  {
    v5 += 24LL;
    return (std::string *)sub_100024794(&v4);
  }

void sub_10002462C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_100024640(std::string *a1, std::string *a2)
{
  if (!a1 || (int v2 = a1, (a1 & 7) != 0) || ((unint64_t)&a1->__r_.__value_.__l.__cap_ & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_14;
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v10 = v3;
  *(_OWORD *)int v11 = v3;
  uint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
LABEL_14:
    __break(0x5500u);
LABEL_15:
    sub_100024868((uint64_t)v2);
  }

  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_15;
  }
  else {
    int64_t v7 = v5;
  }
  sub_100024884((uint64_t)&v10, v7, v4, (uint64_t)&a1->__r_.__value_.__l.__cap_);
  uint64_t result = sub_100024778((int)v2 + 16, v11[0], a2);
  if (v11[0] >= (std::string *)0xFFFFFFFFFFFFFFE8LL)
  {
    __break(0x5513u);
  }

  else
  {
    ++v11[0];
    sub_1000247C0(v2, &v10);
    std::string::size_type size = v2->__r_.__value_.__l.__size_;
    sub_100024AB0((uint64_t)&v10);
    return (std::string *)size;
  }

  return result;
}

void sub_100024760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_100024778(int a1, std::string *this, std::string *__str)
{
  return result;
}

void *sub_100024794(void *result)
{
  else {
    *(void *)uint64_t v1 = result[1];
  }
  return result;
}

std::string *sub_1000247C0(std::string *result, void *a2)
{
  if (!result) {
    goto LABEL_6;
  }
  int v2 = (std::string::__raw *)result;
  if ((result & 7) != 0
    || (p_cap = &result->__r_.__value_.__l.__cap_, ((unint64_t)&result->__r_.__value_.__l.__cap_ & 7) != 0)
    || (p_std::string::size_type size = &result->__r_.__value_.__l.__size_,
        result = sub_1000249DC( (int)result + 16,  result->__r_.__value_.__l.__size_,  result->__r_.__value_.__l.__size_,  result->__r_.__value_.__r.__words[0],  result->__r_.__value_.__r.__words[0],  a2[1],  a2[1]),  a2[1] = v6,  std::string::size_type v7 = v2->__words[0],  v2->__words[0] = v6,  a2[1] = v7,  (p_size & 7) != 0))
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    std::string::size_type v8 = *p_size;
    *p_std::string::size_type size = a2[2];
    a2[2] = v8;
    std::string::size_type v9 = *p_cap;
    std::string::size_type *p_cap = a2[3];
    a2[3] = v9;
    *a2 = a2[1];
  }

  return result;
}

void sub_100024868(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    sub_1000D252C();
  }
  __break(0x5516u);
}

uint64_t sub_100024884(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (uint64_t v4 = (void *)result, (result & 7) != 0)
    || (((_BYTE)result + 24) & 7) != 0
    || (*(void *)(result + 24) = 0LL, ((result + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 32) = a4;
    if (a2)
    {
      uint64_t v7 = sub_100024960(result);
      uint64_t result = (uint64_t)sub_100024980(v7, a2);
    }

    else
    {
      uint64_t result = 0LL;
    }

    void *v4 = result;
    if ((unsigned __int128)(a3 * (__int128)24LL) >> 64 == (24 * a3) >> 63 && 24 * a3 <= (unint64_t)~result)
    {
      uint64_t v8 = result + 24 * a3;
      v4[1] = v8;
      v4[2] = v8;
      if ((unsigned __int128)(a2 * (__int128)24LL) >> 64 == (24 * a2) >> 63 && 24 * a2 <= (unint64_t)~result)
      {
        v4[3] = result + 24 * a2;
        return (uint64_t)v4;
      }
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_100024960(uint64_t result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      result += 24LL;
      if ((result & 7) == 0) {
        return sub_1000249B4(result);
      }
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_100024980(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D2544();
  }

  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    goto LABEL_5;
  }
  return operator new(24 * a2);
}

uint64_t sub_1000249B4(uint64_t result)
{
  return result;
}

std::string *sub_1000249DC( int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v15 = a2;
  unint64_t v16 = a3;
  uint64_t v13 = a6;
  unint64_t v14 = a7;
  if (a3 == a5) {
    return (std::string *)a6;
  }
  while (1)
  {
    std::string::size_type v9 = (std::string *)sub_100024A80((unint64_t)&v13);
    __int128 v10 = (std::string *)sub_100024A80((unint64_t)&v15);
    uint64_t result = sub_100024778(a1, v9, v10);
    if (v16 <= 0x17) {
      break;
    }
    unint64_t v12 = v16 - 24;
    v16 -= 24LL;
    if (v14 <= 0x17) {
      break;
    }
    v14 -= 24LL;
    if (v12 == a5) {
      return (std::string *)v13;
    }
  }

  __break(0x5513u);
  return result;
}

unint64_t sub_100024A80(unint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_5:
    __break(0x5516u);
    goto LABEL_6;
  }

  unint64_t v1 = *(void *)(result + 8);
  if (v1 > 0x17)
  {
    uint64_t result = v1 - 24;
    if (((v1 - 24) & 7) == 0) {
      return result;
    }
    goto LABEL_5;
  }

LABEL_6:
  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

  if (v1) {
    int v2 = dword_100119840 == 0;
  }
  else {
    int v2 = 0;
  }
  __int128 v3 = !v2;
  sub_1000CEA98(7u, @"MR: cloud tracks hidden = %d", v3);
  return v3;
}

  __break(0x5513u);
  return result;
}

    if ((((_BYTE)v2 + 88) & 7) == 0)
    {
      if (*(void *)(v2 + 88))
      {
        if ((((_BYTE)v2 + 8) & 3) == 0)
        {
          NSLog( @"renewing process assertion - %s:%s - %d clientID=%d pid=%d",  "/Library/Caches/com.apple.xbs/Sources/iapd/common/IAPEAClient.m",  "-[IAPEAClient takeProcessAssertion:]_block_invoke",  212,  *(unsigned int *)(v2 + 8),  [(id)v2 _getProcessId]);
          uint64_t v7 = (dispatch_source_t *)(*(void *)(a1 + 32) + 112LL);
          if ((v7 & 7) == 0)
          {
            if (!*v7) {
              goto LABEL_25;
            }
            dispatch_source_set_timer(*v7, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0LL);
            uint64_t v8 = *(void *)(a1 + 32) + 104LL;
            if ((v8 & 7) == 0)
            {
              *(void *)uint64_t v8 = 0LL;
LABEL_17:
              int v11 = *(dispatch_source_s ***)(a1 + 32);
              if (!v11[11])
              {
                NSLog( @"ERROR - %s:%s - %d couldn't create assertion for process ID %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/common/IAPEAClient.m",  "-[IAPEAClient takeProcessAssertion:]_block_invoke",  223,  [v11 _getProcessId]);
                return;
              }

              unint64_t v12 = v11 + 14;
              uint64_t v13 = *v12;
              if (*v12)
              {
                unint64_t v14 = dispatch_time(0LL, 10000000000LL);
                dispatch_source_set_timer(v13, v14, 0xFFFFFFFFFFFFFFFFLL, 0LL);
                uint64_t v15 = time(0LL);
                unint64_t v16 = *(void *)(a1 + 32) + 104LL;
                if ((v16 & 7) == 0)
                {
                  *(void *)unint64_t v16 = v15;
                  return;
                }

                goto LABEL_24;
              }

  __break(0x5513u);
  return result;
}

  if (((a1 + 232) & 7) != 0) {
    goto LABEL_10;
  }
  if ((v2 & 7) != 0) {
    goto LABEL_10;
  }
}

uint64_t sub_100024AB0(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_100024B3C(result);
  if (!*v1) {
    return (uint64_t)v1;
  }
  sub_100024960((uint64_t)v1);
  uint64_t result = *v1;
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (0xAAAAAAAAAAAAAAABLL * ((v1[3] - result) >> 3) < 0xAAAAAAAAAAAAAABLL)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

void sub_100024B3C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100024B54(a1, *(void ***)(a1 + 8));
  }
}

void sub_100024B54(uint64_t a1, void **a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
  }

  else
  {
LABEL_3:
    uint64_t v4 = *(void ***)(a1 + 16);
    while (v4 != a2)
    {
      sub_100024960(a1);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 <= 0x17)
      {
        __break(0x5513u);
        goto LABEL_11;
      }

      uint64_t v4 = (void **)(v5 - 24);
      *(void *)(a1 + 16) = v5 - 24;
      if (((v5 - 24) & 7) != 0) {
        goto LABEL_11;
      }
      if (*(char *)(v5 - 1) < 0)
      {
        operator delete(*v4);
        goto LABEL_3;
      }
    }
  }

void sub_100024BCC(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && (a2 & 7) == 0)
  {
  }

  else
  {
    __break(0x5516u);
  }

void sub_100024BF4(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = (uint64_t *)sub_100008E54(a1, &v9, a2);
  std::string::size_type v6 = (void *)*v5;
  if (*v5)
  {
LABEL_10:
    __break(0x5516u);
    return;
  }

  uint64_t v7 = v5;
  memset(v8, 170, sizeof(v8));
  sub_100024CCC((_OWORD *)a1, a3, v8);
  sub_100008FEC(a1, v9, v7, (void *)v8[0]);
  std::string::size_type v6 = v8[0];
  v8[0] = 0LL;
  sub_10001BB68(v8, 0LL);
  if (!v6) {
    return;
  }
LABEL_8:
}

_OWORD *sub_100024CCC@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v4 = (char *)result + 8, (((unint64_t)result + 8) & 7) != 0)
    || (memset(a3, 170, 24), uint64_t result = operator new(0x30uLL),
                             *a3 = result,
                             a3[1] = v4,
                             (result & 7) != 0)
    || ((unint64_t)(result + 2) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    result[2] = *a2;
    *((_BYTE *)a3 + 16) = 1;
  }

  return result;
}

uint64_t sub_100024D4C(uint64_t result, _DWORD *a2)
{
  if (!result
    || (int v2 = (uint64_t *)result, (result & 7) != 0)
    || (uint64_t result = sub_100008C50(result, a2), ((unint64_t)(v2 + 1) & 7) != 0))
  {
    __break(0x5516u);
  }

  else if (v2 + 1 == (uint64_t *)result)
  {
    return 0LL;
  }

  else
  {
    sub_1000095C0(v2, result);
    return 1LL;
  }

  return result;
}

void *sub_100024DAC(void *a1, unint64_t a2, char a3)
{
  if (!a1) {
    goto LABEL_17;
  }
  __int128 v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8LL) {
    goto LABEL_18;
  }
  if (a2 >= 0x17)
  {
    if ((a2 | 7) == 0x17) {
      size_t v6 = 25LL;
    }
    else {
      size_t v6 = (a2 | 7) + 1;
    }
    a1 = operator new(v6);
    v3[1] = a2;
    v3[2] = v6 | 0x8000000000000000LL;
    void *v3 = a1;
LABEL_11:
    uint64_t v7 = 0LL;
    while (1)
    {
      *((_BYTE *)a1 + v7) = a3;
      if (a2 == ++v7) {
        goto LABEL_14;
      }
    }
  }

  *((_BYTE *)a1 + 23) = a2;
  if (a2) {
    goto LABEL_11;
  }
LABEL_14:
  if (__CFADD__(a1, a2))
  {
LABEL_16:
    __break(0x5513u);
LABEL_17:
    __break(0x5516u);
LABEL_18:
    sub_100024588((uint64_t)v3);
  }

  *((_BYTE *)a1 + a2) = 0;
  return v3;
}

uint64_t sub_100024E74(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result
    || (result & 7) != 0
    || (((_BYTE)result + 16) & 7) != 0
    || (memset(v10, 170, sizeof(v10)), result = sub_100024F14((uint64_t)v10, 1uLL), (uint64_t v7 = v10[2]) == 0)
    || (v10[2] & 7) != 0
    || (*(void *)v10[2] = a2, *(void *)(v7 + 8) = a3, uint64_t v8 = (void *)(v7 + 16), (v8 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t v8 = *a4;
    uint64_t v9 = v10[2];
    v10[2] = 0LL;
    sub_100024F54((uint64_t)v10);
    return v9;
  }

  return result;
}

uint64_t sub_100024F14(uint64_t result, unint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + _Block_object_dispose(va, 8) = a2;
    *(void *)(result + 16) = sub_100024980(result, a2);
    return v2;
  }

  return result;
}

void sub_100024F54(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_8:
    __break(0x550Cu);
    return;
  }

  if (*(void *)(a1 + 16))
  {
    if (*(void *)(a1 + 8) < 0xAAAAAAAAAAAAAABuLL)
    {
      operator delete(*(void **)(a1 + 16));
      return;
    }

    goto LABEL_8;
  }

void *sub_100024F94(void *result, void *a2)
{
  v3[0] = result;
  unint64_t v2 = result[1];
  if (v2 >= 0xFFFFFFFFFFFFFFF8LL)
  {
LABEL_10:
    __break(0x5513u);
    return result;
  }

  v3[2] = v2 + 8;
  if ((((_BYTE)result + 16) & 7) != 0 || !v2 || (v2 & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  *(void *)unint64_t v2 = *a2;
  v3[1] = v2 + 8;
  return sub_100024794(v3);
}

uint64_t sub_10002500C(uint64_t *a1, void *a2)
{
  if (!a1) {
    goto LABEL_15;
  }
  unint64_t v2 = a1;
  __int128 v3 = a1 + 2;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v12 = v4;
  __int128 v13 = v4;
  uint64_t v5 = (a1[1] - *a1) >> 3;
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
LABEL_16:
    __break(0x5500u);
LABEL_17:
    sub_100024868((uint64_t)v2);
  }

  if (v6 >> 61) {
    goto LABEL_17;
  }
  unint64_t v8 = *v3 - *a1;
  if (v8 >> 2 > v6) {
    unint64_t v6 = v8 >> 2;
  }
  unint64_t v9 = v8 >= 0x7FFFFFFFFFFFFFF8LL ? 0x1FFFFFFFFFFFFFFFLL : v6;
  uint64_t result = sub_1000251DC((uint64_t)&v12, v9, v5, (uint64_t)v3);
  if (!(void)v13 || (v13 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *(void *)__int128 v13 = *a2;
  if ((unint64_t)v13 >= 0xFFFFFFFFFFFFFFF8LL)
  {
    __break(0x5513u);
  }

  else
  {
    *(void *)&__int128 v13 = v13 + 8;
    sub_10002511C(v2, &v12);
    uint64_t v11 = v2[1];
    sub_1000253A0((uint64_t)&v12);
    return v11;
  }

  return result;
}

void sub_100025104( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10002511C(uint64_t *result, void *a2)
{
  if (!result) {
    goto LABEL_6;
  }
  unint64_t v2 = result;
  __int128 v3 = result + 2;
  unint64_t v6 = result + 1;
  uint64_t v5 = result[1];
  uint64_t v7 = *result;
  uint64_t v8 = a2[1];
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v9;
  __int128 v16 = v9;
  uint64_t result = sub_100025300(&v14, v5, v5, v7, v8, v8, &v15);
  uint64_t v10 = *((void *)&v16 + 1);
  a2[1] = *((void *)&v16 + 1);
  uint64_t v11 = *v2;
  uint64_t *v2 = v10;
  a2[1] = v11;
  if ((v6 & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    uint64_t v12 = *v6;
    *unint64_t v6 = a2[2];
    a2[2] = v12;
    uint64_t v13 = *v3;
    uint64_t *v3 = a2[3];
    a2[3] = v13;
    *a2 = a2[1];
  }

  return result;
}

uint64_t sub_1000251DC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (__int128 v4 = (void *)result, (result & 7) != 0)
    || (((_BYTE)result + 24) & 7) != 0
    || (*(void *)(result + 24) = 0LL, ((result + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 32) = a4;
    if (a2)
    {
      uint64_t v7 = sub_100024960(result);
      uint64_t result = (uint64_t)sub_1000252AC(v7, a2);
    }

    else
    {
      uint64_t result = 0LL;
    }

    void *v4 = result;
    if (!((unint64_t)(a3 + 0x1000000000000000LL) >> 61) && 8 * a3 <= (unint64_t)~result)
    {
      uint64_t v8 = result + 8 * a3;
      v4[1] = v8;
      v4[2] = v8;
      if (!((a2 + 0x1000000000000000LL) >> 61) && 8 * a2 <= ~result)
      {
        v4[3] = result + 8 * a2;
        return (uint64_t)v4;
      }
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_1000252AC(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D2544();
  }

  if (a2 >> 61) {
    goto LABEL_5;
  }
  return operator new(8 * a2);
}

unint64_t sub_1000252D0(unint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_5:
    __break(0x5516u);
    goto LABEL_6;
  }

  unint64_t v1 = *(void *)(result + 8);
  if (v1 > 7)
  {
    uint64_t result = v1 - 8;
    if (((v1 - 8) & 7) == 0) {
      return result;
    }
    goto LABEL_5;
  }

void *sub_100025300@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&__int128 v13 = a2;
  *((void *)&v13 + 1) = a3;
  *(void *)&__int128 v12 = a5;
  *((void *)&v12 + 1) = a6;
  if (result)
  {
    if (a3 == a4)
    {
LABEL_6:
      if (a7)
      {
        __int128 v11 = v12;
        *a7 = v13;
        a7[1] = v11;
        return result;
      }
    }

    else
    {
      while (1)
      {
        uint64_t v9 = *(void *)sub_1000252D0((unint64_t)&v13);
        uint64_t result = (void *)sub_1000252D0((unint64_t)&v12);
        *uint64_t result = v9;
        if (*((void *)&v13 + 1) <= 7uLL) {
          break;
        }
        uint64_t v10 = *((void *)&v13 + 1) - 8LL;
        *((void *)&v13 + 1) -= 8LL;
        if (*((void *)&v12 + 1) <= 7uLL) {
          break;
        }
        *((void *)&v12 + 1) -= 8LL;
        if (v10 == a4) {
          goto LABEL_6;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_1000253A0(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_10002540C(result);
  if (!*v1) {
    return (uint64_t)v1;
  }
  sub_100024960((uint64_t)v1);
  uint64_t result = *v1;
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (v1[3] - result >= 0)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t sub_10002540C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100025424(result, *(void *)(result + 8));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100025424(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    for (unint64_t i = *(void *)(result + 16); i != a2; *(void *)(v2 + 16) = i)
    {
      uint64_t result = sub_100024960(v2);
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 <= 7)
      {
        __break(0x5513u);
        goto LABEL_9;
      }

      unint64_t i = v5 - 8;
    }
  }

  return result;
}

void sub_100025484(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10002552C((uint64_t)v2, *v2);
    __int128 v4 = *a1;
    if (*a1 && (v4 & 7) == 0 && (((_BYTE)v4 + 16) & 7) == 0)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v4[2] - *v4) >> 3) < 0xAAAAAAAAAAAAAABLL)
      {
        operator delete((void *)*v4);
        return;
      }

      goto LABEL_16;
    }

void sub_10002552C(uint64_t a1, uint64_t a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 == a2)
    {
LABEL_7:
      *(void *)(a1 + _Block_object_dispose(va, 8) = a2;
      return;
    }

    if (((a1 + 16) & 7) == 0)
    {
      while (v4 > 0x17)
      {
        v4 -= 24LL;
        sub_100024BCC(a1 + 16, v4);
        if (v4 == a2) {
          goto LABEL_7;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
}

uint64_t sub_1000255A4(uint64_t a1, char *__s)
{
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v2 = a1;
  if ((a1 & 7) != 0) {
    goto LABEL_16;
  }
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    goto LABEL_17;
  }
  size_t v5 = v4;
  if (v4 > 0x16)
  {
    if ((v4 | 7) == 0x17) {
      size_t v7 = 25LL;
    }
    else {
      size_t v7 = (v4 | 7) + 1;
    }
    unint64_t v6 = operator new(v7);
    *(void *)(v2 + _Block_object_dispose(va, 8) = v5;
    *(void *)(v2 + 16) = v7 | 0x8000000000000000LL;
    *(void *)uint64_t v2 = v6;
  }

  else
  {
    *(_BYTE *)(v2 + 23) = v4;
    unint64_t v6 = (void *)v2;
  }

  if (__CFADD__(__s, v5)) {
    goto LABEL_15;
  }
  if (v5) {
    memmove(v6, __s, v5);
  }
  if (__CFADD__(v6, v5))
  {
LABEL_15:
    __break(0x5513u);
LABEL_16:
    __break(0x5516u);
LABEL_17:
    sub_100024588(v2);
  }

  *((_BYTE *)v6 + v5) = 0;
  return v2;
}

uint64_t sub_100025674()
{
  qword_10011C818 = 0LL;
  qword_10011C810 = 0LL;
  qword_10011C808 = (uint64_t)&qword_10011C810;
  __cxa_atexit((void (*)(void *))sub_10001CC60, &qword_10011C808, (void *)&_mh_execute_header);
  qword_10011BBF0 = 0LL;
  unk_10011BBF8 = 0LL;
  qword_10011BBE8 = 0LL;
  return __cxa_atexit((void (*)(void *))sub_100021D2C, &qword_10011BBE8, (void *)&_mh_execute_header);
}

uint64_t sub_1000256D8()
{
  if (qword_10011BC08 != -1) {
    dispatch_once(&qword_10011BC08, &stru_100103438);
  }
  return qword_10011BC00;
}

void sub_100025718(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x68uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100025774(v1);
    qword_10011BC00 = v2;
  }

void sub_100025760(_Unwind_Exception *a1)
{
}

uint64_t sub_100025774(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    *(void *)uint64_t v1 = off_100103468;
    *(_BYTE *)(v1 + 96) = 0;
    if (dword_1001197C4 == -1) {
      dword_1001197C4 = CFPreferencesGetAppBooleanValue( @"allowUserQueueModifications",  @"com.apple.iapd",  0LL) != 0;
    }
    notify_cancel(dword_10011BC10);
    return v1;
  }

  return result;
}

void sub_1000257FC(_Unwind_Exception *a1)
{
}

uint64_t sub_100025814(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

void sub_100025884(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  size_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned int v5 = *(unsigned __int8 *)(a1 + 96);
  if (v5 >= 2)
  {
LABEL_18:
    __break(0x550Au);
    goto LABEL_19;
  }

  uint64_t v10 = v4;
  if (!sub_1000357C4())
  {
    sub_1000CEA98( 0,  @"%s:%s:%d not calling setUserQueueModificationsDisabled, no system music player",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/ExtendedModeMgr.mm",  "SetExtendedModeActive",  67LL);
    if ((a2 & 1) != 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v7 = sub_100036FF0();
    if (v7 && (v7 & 7) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 648LL))(v7);
      goto LABEL_13;
    }

    goto LABEL_17;
  }

  sub_1000CEA98( 0,  @"%s:%d setUserQueueModificationsDisabled:%d",  "virtual void ISL::ExtendedModeMgr::SetExtendedModeActive(BOOL)",  60LL,  a2);
  unint64_t v6 = (dispatch_queue_s *)sub_100041B3C();
  if (!v6)
  {
LABEL_19:
    __break(0x5510u);
    return;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100025A3C;
  block[3] = &unk_1001034E8;
  char v12 = a2;
  dispatch_sync(v6, block);
  if ((a2 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_13:
  *(_BYTE *)(a1 + 96) = a2;
  if ((byte_10011BC14 & 1) != 0
    || (uint32_t v8 = notify_register_check("com.apple.iapd.notify.extendedMode", &dword_10011BC10), byte_10011BC14 = v8 == 0,
                                                                                            !v8))
  {
    notify_set_state(dword_10011BC10, a2);
    notify_post("com.apple.iapd.notify.extendedMode");
  }

  sub_1000CEA98( 0,  @"%s - sending IAPAudioShouldPauseOnHeadphoneDisconnectChangedNotification",  "SetExtendedModeActive");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification( DarwinNotifyCenter,  IAPAudioShouldPauseOnHeadphoneDisconnectChangedNotification,  0LL,  0LL,  0);
}

id sub_100025A3C(uint64_t a1)
{
  id v2 = sub_100041B30();
  if (dword_1001197C4) {
    return [v2 setUserQueueModificationsDisabled:0];
  }
  unsigned int v5 = *(unsigned __int8 *)(a1 + 32);
  if (v5 < 2) {
    return [v2 setUserQueueModificationsDisabled:v5 != 0];
  }
  __break(0x550Au);
  return [v2 setUserQueueModificationsDisabled:v3];
}

BOOL sub_100025A88(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 96);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

CFComparisonResult sub_100025AB4(CFComparisonResult result, int *a2, int *a3)
{
  if (result == kCFCompareEqualTo || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = qword_10011C8A0;
    if (!qword_10011C8A0
      || (uint64_t result = CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL)) != kCFCompareEqualTo
      && (uint64_t result = CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL)) != kCFCompareEqualTo
      && (uint64_t result = CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL)) != kCFCompareEqualTo)
    {
      int v5 = 76;
      int v6 = 166;
    }

    else
    {
      int v5 = 168;
      int v6 = 310;
    }

    *a2 = v6;
    *a3 = v5;
  }

  return result;
}

uint64_t sub_100025B5C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 3LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100025B74(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100025B88(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100025814(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100025B9C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100025814(a1);
    operator delete((void *)a1);
  }

void sub_100025BD4(_Unwind_Exception *a1)
{
}

uint64_t sub_100025BE8()
{
  if (qword_10011BC20 != -1) {
    dispatch_once(&qword_10011BC20, &stru_100103538);
  }
  return qword_10011BC18;
}

void sub_100025C28(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x70uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100025C84(v1);
    qword_10011BC18 = v2;
  }

void sub_100025C70(_Unwind_Exception *a1)
{
}

uint64_t sub_100025C84(uint64_t result)
{
  if (!result || (uint64_t v1 = (void *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    void *v1 = off_100103568;
    v1[12] = 0LL;
    v1[13] = objc_alloc_init(&OBJC_CLASS___NSLock);
    return (uint64_t)v1;
  }

  return result;
}

void sub_100025CDC(_Unwind_Exception *a1)
{
}

uint64_t sub_100025CF4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_100025D64(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100103568;
    [*(id *)(result + 104) lock];
    uint64_t v2 = *(void **)(v1 + 96);
    if (v2)
    {

      *(void *)(v1 + 96) = 0LL;
    }

    [*(id *)(v1 + 104) unlock];

    *(void *)(v1 + 104) = 0LL;
    return sub_100025CF4(v1);
  }

  return result;
}

void sub_100025DCC(_Unwind_Exception *a1)
{
}

uint64_t sub_100025DE4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100025D64(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100025DF8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100025D64(a1);
    operator delete((void *)a1);
  }

void sub_100025E30(_Unwind_Exception *a1)
{
}

uint64_t sub_100025E44(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100025E5C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, _DWORD *a9)
{
  if (result && (uint64_t v9 = result, (result & 7) == 0) && (a9 ? (v10 = (a9 & 3) == 0LL) : (v10 = 0), v10))
  {
    *a9 = 0;
    __int128 v16 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    [*(id *)(v9 + 104) lock];
    unint64_t v17 = (NSMutableDictionary *)objc_msgSend( *(id *)(v9 + 96),  "objectForKey:",  +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  a2));
    if (v17
      && -[NSMutableDictionary objectForKey:]( v17,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3)))
    {
      uint64_t v18 = 0LL;
      *a9 = 1;
    }

    else
    {
      uint64_t v19 = -[IapHIDDescriptor initWithReportIndex:andVID:andPID:andCountryCode:andTransport:andHIDDescriptor:]( objc_alloc(&OBJC_CLASS___IapHIDDescriptor),  "initWithReportIndex:andVID:andPID:andCountryCode:andTransport:andHIDDescriptor:",  a3,  a4,  a5,  a6,  a2,  +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a7, a8));
      if (v19)
      {
        char v20 = v19;
        if (!*(void *)(v9 + 96)) {
          *(void *)(v9 + 96) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        }
        if (!v17)
        {
          unint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          objc_msgSend( *(id *)(v9 + 96),  "setObject:forKey:",  v17,  +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
        }

        -[NSMutableDictionary setObject:forKey:]( v17,  "setObject:forKey:",  v20,  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a3));

        uint64_t v18 = 1LL;
      }

      else
      {
        uint64_t v18 = 0LL;
      }
    }

    [*(id *)(v9 + 104) unlock];

    return v18;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

BOOL sub_100026024(BOOL result, uint64_t a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [*(id *)(result + 104) lock];
    int v6 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
    uint64_t v7 = -[NSNumber initWithUnsignedInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInt:", a3);
    id v8 = [*(id *)(v3 + 96) objectForKey:v6];
    id v9 = [v8 objectForKey:v7];
    if (v9) {
      [v8 removeObjectForKey:v7];
    }

    [*(id *)(v3 + 104) unlock];
    return v9 != 0LL;
  }

  return result;
}

BOOL sub_1000260E4(BOOL result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [*(id *)(result + 104) lock];
    size_t v4 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
    id v5 = [*(id *)(v2 + 96) objectForKey:v4];
    if (v5) {
      [*(id *)(v2 + 96) removeObjectForKey:v4];
    }

    [*(id *)(v2 + 104) unlock];
    return v5 != 0LL;
  }

  return result;
}

id *sub_100026174(id *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!result || (int v6 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [result[13] lock];
    __int128 v11 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
    char v12 = -[NSNumber initWithUnsignedInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInt:", a3);
    id v13 = objc_msgSend( objc_msgSend(objc_msgSend(v6[12], "objectForKey:", v11), "objectForKey:", v12),  "handleInReport:withLength:",  a5,  a6);

    [v6[13] unlock];
    return (id *)v13;
  }

  return result;
}

id sub_10002622C(id *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 areOutReportsAvailable];
  }

  else
  {
    [a1[13] lock];
    int v6 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
    uint64_t v7 = -[NSNumber initWithUnsignedInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInt:", a3);
    id v8 = objc_msgSend(objc_msgSend(a1[12], "objectForKey:", v6), "objectForKey:", v7);

    [a1[13] unlock];
    return [v8 areOutReportsAvailable];
  }

id *sub_1000262D0(id *result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  if (result)
  {
    int v6 = result;
    if ((result & 7) == 0)
    {
      [result[13] lock];
      char v12 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
      id v13 = -[NSNumber initWithUnsignedInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInt:", a3);
      id v14 = objc_msgSend(objc_msgSend(v6[12], "objectForKey:", v12), "objectForKey:", v13);

      [v6[13] unlock];
      __int128 v15 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      uint64_t result = (id *)[v14 dequeueOutReport];
      if (result && (__int128 v16 = result, result = (id *)[result length], (unint64_t)result <= 0x200))
      {
        if (a4)
        {
          if ((a4 & 3) == 0)
          {
            *a4 = 1;
            uint64_t result = (id *)[v16 length];
            if (a6)
            {
              if ((a6 & 3) == 0)
              {
                *a6 = (_DWORD)result;
                [v16 getBytes:a5 length:result];
                uint64_t v17 = 1LL;
LABEL_15:

                return (id *)v17;
              }
            }
          }
        }
      }

      else if (a4)
      {
        if ((a4 & 3) == 0)
        {
          *a4 = -1;
          if (a6)
          {
            if ((a6 & 3) == 0)
            {
              uint64_t v17 = 0LL;
              *a6 = 0;
              goto LABEL_15;
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10002642C(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 32LL))( result,  1179649LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t *sub_10002645C()
{
  uint64_t v0 = sub_10000CEF8();
  pthread_mutex_lock(&stru_10011B978);
  uint64_t v12 = *(void *)(v0 + 8);
  if (v12 == v0)
  {
    pthread_mutex_unlock(&stru_10011B978);
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
LABEL_36:
    BOOL v11 = v3 == 0;
LABEL_37:
    if (!v11) {
      return (uint64_t *)v3;
    }
  }

  else
  {
    unsigned int v1 = 0;
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t result = sub_10000D014(&v12);
      uint64_t v6 = *result;
      if (*result) {
        BOOL v7 = (*result & 7) == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (!v7) {
        goto LABEL_40;
      }
      if (!(*(unsigned int (**)(void))(*(void *)v6 + 216LL))(*result)
        || (*(unsigned int (**)(uint64_t))(*(void *)v6 + 216LL))(v6) == 1)
      {
        uint64_t result = sub_10000D014(&v12);
        if (*result) {
          BOOL v8 = (*result & 7) == 0;
        }
        else {
          BOOL v8 = 0;
        }
        if (!v8) {
          goto LABEL_40;
        }
        uint64_t v9 = *(void *)(*result + 32);
        if (v9)
        {
          if ((v9 & 7) != 0) {
            goto LABEL_40;
          }
          if (*(_BYTE *)(v9 + 57))
          {
            if (__CFADD__(v1++, 1)) {
              goto LABEL_42;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 216LL))(v6))
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 216LL))(v6) == 1)
              {
                uint64_t v3 = v6;
                uint64_t v2 = v9;
              }
            }

            else
            {
              uint64_t v4 = v6;
            }
          }
        }
      }

      sub_10000D048(&v12);
    }

    while (v12 != v0);
    uint64_t result = (uint64_t *)pthread_mutex_unlock(&stru_10011B978);
    if (v1 <= 1) {
      goto LABEL_36;
    }
    if (v4 && v3)
    {
      if ((v3 & 7) != 0)
      {
LABEL_40:
        __break(0x5516u);
LABEL_41:
        __break(0x550Au);
LABEL_42:
        __break(0x5500u);
        return result;
      }

      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 104LL))(v3, v4);
      if ((_DWORD)result && v2)
      {
        if ((v2 & 7) == 0 && ((v2 + 8) & 7) == 0)
        {
          BOOL v11 = *(_DWORD *)(v2 + 8) == 0;
          goto LABEL_37;
        }

        goto LABEL_40;
      }
    }
  }

  return (uint64_t *)v4;
}

uint64_t *sub_10002662C(int a1)
{
  uint64_t v2 = sub_10000CEF8();
  pthread_mutex_lock(&stru_10011B978);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v8 = v3;
  while (v3 != v2)
  {
    uint64_t result = sub_10000D014(&v8);
    uint64_t v5 = *result;
    if (*result) {
      BOOL v6 = (*result & 7) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6 || ((v5 + 80) & 7) != 0)
    {
      __break(0x5516u);
      return result;
    }

    if (*(_DWORD *)(v5 + 80) == a1) {
      goto LABEL_14;
    }
    sub_10000D048(&v8);
    uint64_t v3 = v8;
  }

  uint64_t v5 = 0LL;
LABEL_14:
  pthread_mutex_unlock(&stru_10011B978);
  return (uint64_t *)v5;
}

uint64_t *sub_1000266D8(int a1)
{
  uint64_t v2 = sub_10000CEF8();
  pthread_mutex_lock(&stru_10011B978);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v8 = v3;
  while (v3 != v2)
  {
    uint64_t result = sub_10000D014(&v8);
    uint64_t v5 = *result;
    if (*result) {
      BOOL v6 = (*result & 7) == 0;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6 || ((v5 + 84) & 3) != 0)
    {
      __break(0x5516u);
      return result;
    }

    if (*(_DWORD *)(v5 + 84) == a1) {
      goto LABEL_14;
    }
    sub_10000D048(&v8);
    uint64_t v3 = v8;
  }

  uint64_t v5 = 0LL;
LABEL_14:
  pthread_mutex_unlock(&stru_10011B978);
  return (uint64_t *)v5;
}

uint64_t sub_100026784(uint64_t result)
{
  if (result)
  {
    if ((result & 7) != 0 || ((result + 84) & 3) != 0) {
      __break(0x5516u);
    }
    else {
      return *(unsigned int *)(result + 84);
    }
  }

  return result;
}

uint64_t sub_1000267A8(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, int *a6, uint64_t a7)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  sub_10002695C(a1);
  *(void *)a1 = &off_100103638;
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = a2;
  *(_DWORD *)(a1 + 84) = a3;
  *(_WORD *)(a1 + 8_Block_object_dispose(va, 8) = 0;
  if (a4 >= 8) {
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0;
  *(_DWORD *)(a1 + 92) = a4;
  *(void *)(a1 + 96) = a5;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)(a1 + 112) = 0LL;
  *(_WORD *)(a1 + 132) = 0;
  uint64_t v14 = (a1 + 128) & 7;
  if (a6)
  {
    if (!v14)
    {
      int v15 = *a6;
      *(_WORD *)(a1 + 132) = *((_WORD *)a6 + 2);
      *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v15;
      goto LABEL_8;
    }

    goto LABEL_11;
  }

  if (v14)
  {
LABEL_11:
    __break(0x5516u);
LABEL_12:
    __break(0x550Au);
  }

void sub_100026934(_Unwind_Exception *a1)
{
}

uint64_t sub_10002695C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100109A68,
        *(_BYTE *)(result + 16) = 0,
        *(void *)(result + 24) = 0LL,
        *(void *)(result + 32) = 0LL,
        *(void *)(result + 40) = result,
        ((result + 48) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E64((void *)(result + 48));
    *(_BYTE *)(v1 + 72) = 0;
    sub_10000CEF8();
    *(_DWORD *)(v1 + 12) = 0;
    return v1;
  }

  return result;
}

void sub_1000269D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000269E8(uint64_t result)
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v1 = (void *)result;
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  *(void *)uint64_t result = off_100109A68;
  sub_10000CEF8();
  pthread_mutex_lock(&stru_10011B978);
  uint64_t result = qword_10011D0D8;
  BOOL v2 = qword_10011D0D8 && (qword_10011D0D8 & 7) == 0;
  if (!v2
    || (uint64_t v3 = v1,
        sub_100028960((void *)qword_10011D0D8, &v3),
        pthread_mutex_unlock(&stru_10011B978),
        v1[3] = 0LL,
        v1[4] = 0LL,
        v1[5] = 0LL,
        uint64_t result = (uint64_t)(v1 + 6),
        ((unint64_t)(v1 + 6) & 7) != 0))
  {
LABEL_10:
    __break(0x5516u);
  }

  else
  {
    sub_100028890(result);
    return (uint64_t)v1;
  }

  return result;
}

uint64_t sub_100026AAC(uint64_t a1, int a2, int a3, unsigned int a4, uint64_t a5, int *a6, uint64_t a7)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a4 < 8)
  {
    return sub_1000267A8(a1, a2, a3, a4, a5, a6, a7);
  }

  __break(0x550Au);
  return a1;
}

uint64_t sub_100026ACC(uint64_t result)
{
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_9;
  }
  *(void *)uint64_t result = &off_100103638;
  uint64_t result = *(void *)(result + 136);
  if (!result || (dispatch_sync((dispatch_queue_t)result, &stru_100103798), (uint64_t result = *(void *)(v1 + 136)) == 0))
  {
    __break(0x5510u);
LABEL_9:
    __break(0x5516u);
    return result;
  }

  dispatch_release((dispatch_object_t)result);
  uint64_t v2 = *(void *)(v1 + 112);
  if (v2)
  {
    sub_1000AD43C(v2);
    *(void *)(v1 + 112) = 0LL;
  }

  return sub_1000269E8(v1);
}

void sub_100026B3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100026B58(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100026ACC(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100026B6C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100026ACC(a1);
    operator delete((void *)a1);
  }

void sub_100026BA4(_Unwind_Exception *a1)
{
}

uint64_t sub_100026BB8(uint64_t result, int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 == (char)a2)
  {
    *(_DWORD *)(result + 104) = a2;
    return result;
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100026BDC(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 104);
  if ((_DWORD)result != (char)result) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

void sub_100026C00(uint64_t a1, const void *a2, BOOL a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_8;
  }
  v12[0] = 0LL;
  v12[1] = v12;
  v12[2] = 0x2020000000LL;
  int v13 = 0;
  xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
  xpc_dictionary_set_uint64(v6, "portID", v7);
  if (!a2 || (a2 & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t v8 = (const void *)(*(uint64_t (**)(const void *))(*(void *)a2 + 16LL))(a2);
  if (v8)
  {
    unsigned int v9 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24LL))(a2);
    xpc_dictionary_set_data(v6, "data", v8, v9);
    xpc_dictionary_set_string(v6, "requestType", "transmitData");
    xpc_dictionary_set_BOOL(v6, "waitSendDone", a3);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100026DBC;
    v11[3] = &unk_100101C98;
    void v11[4] = v12;
    objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iaptransportd_connection"),  "sendSynchronousMessage:withReply:",  v6,  v11);
    xpc_release(v6);
    sub_1000AD43C((uint64_t)v10);
    _Block_object_dispose(v12, 8);
    return;
  }

void sub_100026DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100026DBC(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_type_t type = xpc_get_type(object);
    if (object == &_xpc_error_connection_invalid && type == (xpc_type_t)&_xpc_type_error)
    {
      NSLog( @"%s:%s-%d received an XPC_ERROR_CONNECTION_INVALID error.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "PortTransmitPacket_block_invoke",  207LL);
    }

    else if (object == &_xpc_error_connection_interrupted && type == (xpc_type_t)&_xpc_type_error)
    {
      NSLog( @"%s:%s-%d received an XPC_ERROR_CONNECTION_INTERRUPTED error.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "PortTransmitPacket_block_invoke",  211LL);
    }

    else if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_dictionary_get_int64(object, "result");
    }
  }

void sub_100026EA0(unsigned __int8 *a1, const void *a2, unsigned int a3, BOOL a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_10;
  }

  v11[0] = 0LL;
  v11[1] = v11;
  v11[2] = 0x2020000000LL;
  int v12 = 0;
  if (a1[72] >= 2u)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  if (a1[72])
  {
LABEL_8:
    _Block_object_dispose(v11, 8);
    return;
  }

  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  if (v8)
  {
    uint64_t v9 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 224LL))(a1);
    xpc_dictionary_set_uint64(v8, "portID", v9);
    if (a2)
    {
      xpc_dictionary_set_data(v8, "data", a2, a3);
      xpc_dictionary_set_string(v8, "requestType", "transmitData");
      xpc_dictionary_set_BOOL(v8, "waitSendDone", a4);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_100027034;
      void v10[3] = &unk_100101C98;
      v10[4] = v11;
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendSynchronousMessage:withReply:",  v8,  v10);
      xpc_release(v8);
      goto LABEL_8;
    }
  }

void sub_10002701C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100027034(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_type_t type = xpc_get_type(object);
    if (object == &_xpc_error_connection_invalid && type == (xpc_type_t)&_xpc_type_error)
    {
      NSLog( @"%s:%s-%d received an XPC_ERROR_CONNECTION_INVALID error.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "PortTransmitData_block_invoke",  247LL);
    }

    else if (object == &_xpc_error_connection_interrupted && type == (xpc_type_t)&_xpc_type_error)
    {
      NSLog( @"%s:%s-%d received an XPC_ERROR_CONNECTION_INTERRUPTED error.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "PortTransmitData_block_invoke",  251LL);
    }

    else if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_dictionary_get_int64(object, "result");
    }
  }

uint64_t sub_100027118(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100027130(uint64_t a1, const void *a2, const void *a3, size_t a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_13;
  }
  xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v9 = v8;
  if (!a2) {
    goto LABEL_6;
  }
  if (v8)
  {
    xpc_dictionary_set_data(v8, "authenticationCertCaps", a2, 0x20uLL);
LABEL_6:
    if (a3 && a4)
    {
      if (v9)
      {
        xpc_dictionary_set_data(v9, "certData", a3, a4);
LABEL_11:
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
        xpc_dictionary_set_uint64(v9, "portID", v10);
        xpc_dictionary_set_string(v9, "requestType", "handleAuthenticationPassed");
        objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendSynchronousMessage:withReply:",  v9,  0);
        xpc_release(v9);
        return;
      }
    }

    else if (v9)
    {
      goto LABEL_11;
    }
  }

  __break(0x5510u);
LABEL_13:
  __break(0x5516u);
}

void sub_100027238(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 224LL))(a1);
      xpc_dictionary_set_uint64(v3, "portID", v4);
      xpc_dictionary_set_string(v3, "requestType", "handleAuthenticationFailed");
      xpc_dictionary_set_uint64(v3, "daemonMakingRequest", 0LL);
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendMessage:",  v3);
      xpc_release(v3);
      return;
    }
  }

  __break(0x5510u);
}

void sub_1000272EC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    xpc_object_t v2 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v2)
    {
      uint64_t v3 = v2;
      xpc_dictionary_set_uint64(v2, "portID", *(void *)(a1 + 96));
      xpc_dictionary_set_string(v3, "requestType", "setPortLockout");
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendMessage:",  v3);
      xpc_release(v3);
      return;
    }
  }

  __break(0x5510u);
}

xpc_object_t sub_100027378(xpc_object_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = &v6;
    uint64_t v8 = 0x2020000000LL;
    char v9 = 0;
    if (!objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection")) {
      goto LABEL_7;
    }
    uint64_t result = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_object_t v2 = result;
    if (result)
    {
      xpc_dictionary_set_uint64(result, "portID", v1[12]);
      xpc_dictionary_set_string(v2, "requestType", "getPortLockout");
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      v5[2] = sub_1000274C4;
      v5[3] = &unk_100101C98;
      v5[4] = &v6;
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendSynchronousMessage:withReply:",  v2,  v5);
      xpc_release(v2);
      unsigned int v3 = *((unsigned __int8 *)v7 + 24);
      if (v3 < 2)
      {
LABEL_8:
        BOOL v4 = v3 != 0;
        _Block_object_dispose(&v6, 8);
        return (xpc_object_t)v4;
      }

      __break(0x550Au);
LABEL_7:
      unsigned int v3 = 0;
      goto LABEL_8;
    }
  }

  __break(0x5510u);
  return result;
}

void sub_1000274AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000274C4(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(object, "result");
      if (uint64) {
        NSLog( @"%s:%s-%d received an invalid status:%02llX\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsLockedOut_block_invoke",  344LL,  uint64);
      }
      else {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_dictionary_get_BOOL(object, "bAuthLockout");
      }
    }

    else
    {
      NSLog( @"%s:%s-%d received an invalid XPC type:%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsLockedOut_block_invoke",  349LL,  type);
    }
  }

  else
  {
    NSLog( @"%s:%s-%d received nil reply ptr:%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsLockedOut_block_invoke",  354LL,  0LL);
  }

uint64_t sub_1000275B4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0xFFFFLL;
  }
  __break(0x5516u);
  return result;
}

const char *sub_1000275CC(const char *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_15;
  }

  unsigned int v2 = *((_DWORD *)result + 23);
  if (v2 >= 8)
  {
LABEL_15:
    __break(0x550Au);
    return result;
  }

  uint64_t result = "USB";
  switch(v2)
  {
    case 0u:
      int v3 = *((_DWORD *)v1 + 21);
      BOOL v4 = "Unknown Port";
      if (v3 == 6) {
        BOOL v4 = "UART-6";
      }
      if (v3 == 1) {
        uint64_t result = "UART-1";
      }
      else {
        uint64_t result = v4;
      }
      break;
    case 1u:
      return result;
    case 2u:
      uint64_t result = "Bluetooth";
      break;
    case 3u:
      uint64_t result = "VPort";
      break;
    case 4u:
      uint64_t result = "MikeyBus";
      break;
    default:
      uint64_t result = "Unknown Port";
      break;
  }

  return result;
}

uint64_t sub_100027678(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 92);
  if (result >= 8) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_10002769C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 96);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000276B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result && (result & 7) == 0 && a2)
  {
    *(_DWORD *)a2 = *(_DWORD *)(result + 128);
    *(_WORD *)(a2 + 4) = *(_WORD *)(result + 132);
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_1000276DC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 120);
  }
  __break(0x5516u);
  return result;
}

BOOL sub_1000276F4(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(_DWORD *)(result + 92);
    if (v1 < 8) {
      return v1 == 2;
    }
  }

  __break(0x550Au);
  return result;
}

BOOL sub_100027720(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(_DWORD *)(result + 92);
    if (v1 < 8) {
      return v1 != 2;
    }
  }

  __break(0x550Au);
  return result;
}

BOOL sub_10002774C(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(_DWORD *)(result + 92);
    if (v1 < 8) {
      return v1 != 2;
    }
  }

  __break(0x550Au);
  return result;
}

BOOL sub_100027778(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(_DWORD *)(result + 92);
    if (v1 < 8) {
      return v1 != 2;
    }
  }

  __break(0x550Au);
  return result;
}

void sub_1000277A4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  char v9 = 0;
  if (!objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection")) {
    goto LABEL_9;
  }
  uint64_t v2 = sub_1000438B8();
  if (!v2 || (v2 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
LABEL_12:
    __break(0x550Au);
    goto LABEL_13;
  }

  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 160LL))(v2))
  {
LABEL_9:
    if (*((unsigned __int8 *)v7 + 24) < 2u)
    {
      _Block_object_dispose(&v6, 8);
      return;
    }

    goto LABEL_12;
  }

  xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
  BOOL v4 = v3;
  if (v3)
  {
    xpc_dictionary_set_uint64(v3, "portID", *(void *)(a1 + 96));
    xpc_dictionary_set_string(v4, "requestType", "getHasE75To30PinAdapter");
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100027910;
    v5[3] = &unk_100101C98;
    v5[4] = &v6;
    objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iaptransportd_connection"),  "sendSynchronousMessage:withReply:",  v4,  v5);
    xpc_release(v4);
    goto LABEL_9;
  }

void sub_1000278F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100027910(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      uint64_t uint64 = xpc_dictionary_get_uint64(object, "result");
      if (uint64) {
        NSLog( @"%s:%s-%d received an invalid status:%02llX\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsE75To30PinAdapter_block_invoke",  489LL,  uint64);
      }
      else {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = xpc_dictionary_get_BOOL( object,  "bHasE75To30PinAdapter");
      }
    }

    else
    {
      NSLog( @"%s:%s-%d received an invalid XPC type:%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsE75To30PinAdapter_block_invoke",  494LL,  type);
    }
  }

  else
  {
    NSLog( @"%s:%s-%d received nil reply ptr:%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "IsE75To30PinAdapter_block_invoke",  499LL,  0LL);
  }

uint64_t sub_100027A00(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100027A18(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_10:
    __break(0x5510u);
    return;
  }

  if (a2 && a3)
  {
    BOOL v4 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", a2, a3);
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 136);
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100027AF8;
      block[3] = &unk_1001037D0;
      void block[4] = v4;
      void block[5] = a1;
      dispatch_async(v5, block);
      return;
    }

    goto LABEL_10;
  }

  NSLog( @"%s:%s-%d bad params: pData: %hhx, dataLen: %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "ReceiveData",  579LL,  a2,  a3);
}

void sub_100027AF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  memset(v11, 170, sizeof(v11));
  sub_1000CE91C((uint64_t)v11, 1u);
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = off_100103838;
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) length];
  if (v3 < 0x10000)
  {
    BOOL v4 = [*(id *)(a1 + 32) bytes];
    sub_1000CE9E8((uint64_t)v11, v10);
    uint64_t v5 = sub_100027C8C(v10);
    while (1)
    {
      v11[2] = 0LL;
      uint64_t v6 = *(void *)(v2 + 112);
      if (!v6)
      {
        if ((v2 & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v6 = sub_1000AC084(v2, 3000);
        *(void *)(v2 + 112) = v6;
        if (!v6) {
          break;
        }
      }

      if ((v6 & 7) != 0) {
        goto LABEL_20;
      }
      sub_1000ACC20(v6, (unint64_t)v5, v4, v3, &v11[2]);
      if (v7 == 102)
      {
        sub_1000AD43C(*(void *)(v2 + 112));
        *(void *)(v2 + 112) = 0LL;
        v11[2] = 0LL;
      }

      else if (!v7)
      {
        uint64_t v8 = sub_1000B6CE0();
        if (!v8 || (v8 & 7) != 0) {
          goto LABEL_20;
        }
        sub_1000B743C((unsigned int *)v8, *(void *)(v2 + 112));
        *(void *)(v2 + 112) = 0LL;
      }

      if (__CFADD__(v4, v11[2])) {
        goto LABEL_22;
      }
      BOOL v9 = v3 >= v11[2];
      v3 -= v11[2];
      if (!v9) {
        goto LABEL_23;
      }
      if (v3 >> 16) {
        goto LABEL_21;
      }
      v4 += v11[2];
      if (!v3)
      {

        v11[0] = off_100103838;
        sub_1000CE94C(v11);
        return;
      }
    }

    __break(0x5518u);
LABEL_20:
    __break(0x5516u);
  }

void sub_100027C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t *sub_100027C8C(uint64_t *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_7;
  }

  uint64_t v1 = 1000 * *result;
  if ((unsigned __int128)(*result * (__int128)1000LL) >> 64 != v1 >> 63)
  {
LABEL_7:
    __break(0x550Cu);
    goto LABEL_8;
  }

  uint64_t v2 = result[1] / 1000000;
  uint64_t result = (uint64_t *)(v1 + v2);
  if (__OFADD__(v1, v2)) {
LABEL_8:
  }
    __break(0x5500u);
  return result;
}

void *sub_100027CE8(void *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100103838;
    return sub_1000CE94C(result);
  }

  return result;
}

uint64_t sub_100027D08(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_33:
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = sub_10000CEF8();
    pthread_mutex_lock(&stru_10011B978);
    uint64_t v4 = *(void *)(v3 + 8);
    for (i = v4; ; uint64_t v4 = i)
    {
      if (v4 == v3)
      {
        uint64_t v2 = 0LL;
        goto LABEL_30;
      }

      uint64_t result = *sub_10000D014(&i);
      if (result) {
        BOOL v5 = (result & 7) == 0;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5) {
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result) == 1)
      {
        uint64_t result = *sub_10000D014(&i);
        if (result) {
          BOOL v6 = (result & 7) == 0;
        }
        else {
          BOOL v6 = 0;
        }
        if (!v6) {
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)result + 104LL))(result, v1))
        {
          uint64_t result = (uint64_t)sub_10000D014(&i);
          uint64_t v7 = *(void *)result;
          if (!*(void *)result || (v7 & 7) != 0) {
            goto LABEL_33;
          }
          if (*(void *)(v7 + 32))
          {
            uint64_t result = (uint64_t)sub_10000D014(&i);
            uint64_t v8 = *(void *)result;
            if (!*(void *)result) {
              goto LABEL_33;
            }
            if ((v8 & 7) != 0) {
              goto LABEL_33;
            }
            uint64_t v9 = *(void *)(v8 + 32);
            if (!v9) {
              goto LABEL_33;
            }
            if ((v9 & 7) != 0) {
              goto LABEL_33;
            }
            uint64_t v10 = (void *)(v9 + 40);
            if (*v10) {
              break;
            }
          }
        }
      }

      sub_10000D048(&i);
    }

    uint64_t v2 = 1LL;
LABEL_30:
    pthread_mutex_unlock(&stru_10011B978);
    return v2;
  }

  return result;
}

uint64_t sub_100027E64(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_33:
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = sub_10000CEF8();
    pthread_mutex_lock(&stru_10011B978);
    uint64_t v3 = *(void *)(v2 + 8);
    for (i = v3; ; uint64_t v3 = i)
    {
      if (v3 == v2)
      {
        uint64_t v10 = 0LL;
        goto LABEL_30;
      }

      uint64_t result = *sub_10000D014(&i);
      if (result) {
        BOOL v4 = (result & 7) == 0;
      }
      else {
        BOOL v4 = 0;
      }
      if (!v4) {
        goto LABEL_33;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result))
      {
        uint64_t result = *sub_10000D014(&i);
        if (result) {
          BOOL v5 = (result & 7) == 0;
        }
        else {
          BOOL v5 = 0;
        }
        if (!v5) {
          goto LABEL_33;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)result + 104LL))(result, v1))
        {
          uint64_t result = (uint64_t)sub_10000D014(&i);
          uint64_t v6 = *(void *)result;
          if (!*(void *)result || (v6 & 7) != 0) {
            goto LABEL_33;
          }
          if (*(void *)(v6 + 32))
          {
            uint64_t result = (uint64_t)sub_10000D014(&i);
            uint64_t v7 = *(void *)result;
            if (!*(void *)result) {
              goto LABEL_33;
            }
            if ((v7 & 7) != 0) {
              goto LABEL_33;
            }
            uint64_t v8 = *(void *)(v7 + 32);
            if (!v8) {
              goto LABEL_33;
            }
            if ((v8 & 7) != 0) {
              goto LABEL_33;
            }
            uint64_t v9 = (void *)(v8 + 40);
            if (!*v9) {
              break;
            }
          }
        }
      }

      sub_10000D048(&i);
    }

    uint64_t v10 = *sub_10000D014(&i);
LABEL_30:
    pthread_mutex_unlock(&stru_10011B978);
    return v10;
  }

  return result;
}

uint64_t sub_100027FC8(uint64_t result)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 84) != 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 272LL))(v1);
  }
  uint64_t result = sub_1000438B8();
  if (!result || (result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t result = sub_1000438B8();
  if (!result || (result & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    return result;
  }

  return 1LL;
}

void sub_10002805C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = -[NSNumber initWithInt:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithInt:", *(unsigned int *)(a1 + 84));
    id v2 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v1);

    if (v2) {
      IOServiceRequestProbe((io_service_t)[v2 service], 0);
    }
  }

void sub_1000280DC(int a1, char a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1000281C4;
  v2[3] = &unk_1001037F0;
  char v4 = a2;
  int v3 = a1;
  sub_100028130((uint64_t)v2);
}

void sub_100028130(uint64_t a1)
{
  if (qword_10011BC38 != -1) {
    dispatch_once(&qword_10011BC38, &stru_100103880);
  }
  if (qword_10011BC30)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100028CC0;
    block[3] = &unk_1001038A8;
    void block[4] = a1;
    dispatch_sync((dispatch_queue_t)qword_10011BC30, block);
  }

  else
  {
    __break(0x5510u);
  }

unsigned __int8 *sub_1000281C4(unsigned __int8 *result, void *a2)
{
  unsigned int v2 = result[36];
  if (v2 >= 2)
  {
    __break(0x550Au);
  }

  else
  {
    char v4 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", *((int *)result + 8));
    if (v2) {
      return (unsigned __int8 *)[a2 addObject:v4];
    }
    else {
      return (unsigned __int8 *)[a2 removeObject:v4];
    }
  }

  return result;
}

void sub_10002821C(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v3 = a2;
    NSLog( @"%s:%s-%d supportedLingoes: 0x%x\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "NotifyLingoesSupported",  728LL,  a2);
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v4)
    {
      BOOL v5 = v4;
      xpc_dictionary_set_uint64(v4, "portID", *(void *)(a1 + 96));
      xpc_dictionary_set_uint64(v5, "lingoesSupported", v3);
      xpc_dictionary_set_string(v5, "requestType", "iAP1LingoesSupported");
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendMessage:",  v5);
      xpc_release(v5);
      return;
    }
  }

  __break(0x5510u);
}

void sub_1000282F8(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    NSLog( @"%s:%s-%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "AvailableCurrentNegotiated",  740LL);
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v4)
    {
      BOOL v5 = v4;
      xpc_dictionary_set_uint64(v4, "portID", *(void *)(a1 + 96));
      xpc_dictionary_set_uint64(v5, "availableCurrent", a2);
      xpc_dictionary_set_string(v5, "requestType", "availableCurrentNegotiated");
      objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendMessage:",  v5);
      xpc_release(v5);
      return;
    }
  }

  __break(0x5510u);
}

void sub_1000283D4(uint64_t a1, unsigned __int8 *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_47;
  }
  NSLog( @"%s:%s-%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/IapTransport.mm",  "NotifyAccInfoReady",  752LL);
  if (!a2) {
    return;
  }
  xpc_object_t v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2);
  BOOL v5 = v4 ? (__CFString *)v4 : &stru_10010A828;
  uint64_t v6 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 104);
  uint64_t v7 = v6 ? (__CFString *)v6 : &stru_10010A828;
  uint64_t v8 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 168);
  uint64_t v9 = v8 ? (__CFString *)v8 : &stru_10010A828;
  uint64_t v10 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2 + 232);
  BOOL v11 = v10 ? (__CFString *)v10 : &stru_10010A828;
  uint64_t v12 = a2[67];
  if ((_DWORD)v12 != 255) {
    goto LABEL_51;
  }
  if (a2[68] == 255 && a2[69] == 255)
  {
    uint64_t v14 = &stru_10010A828;
  }

  else
  {
LABEL_51:
    if ((((_BYTE)a2 + 68) & 3) != 0) {
      goto LABEL_47;
    }
    int v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d.%d.%d",  v12,  a2[68],  a2[69]);
    uint64_t v14 = v13 ? (__CFString *)v13 : &stru_10010A828;
  }

  uint64_t v15 = a2[64];
  if (__PAIR64__(a2[65], v15) != 0xFF000000FFLL) {
    goto LABEL_29;
  }
  if ((((_DWORD)a2 + 66) & 1) != 0)
  {
LABEL_47:
    __break(0x5516u);
LABEL_48:
    __break(0x5510u);
    return;
  }

  if (a2[66] == 255)
  {
    uint64_t v17 = &stru_10010A828;
    goto LABEL_33;
  }

LABEL_29:
  if ((((_DWORD)a2 + 66) & 1) != 0) {
    goto LABEL_47;
  }
  __int128 v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d.%d.%d",  v15,  a2[65],  a2[66]);
  if (v16) {
    uint64_t v17 = (__CFString *)v16;
  }
  else {
    uint64_t v17 = &stru_10010A828;
  }
LABEL_33:
  if (-[__CFString compare:](v5, "compare:", &stru_10010A828)
    && -[__CFString compare:](v7, "compare:", &stru_10010A828)
    && -[__CFString compare:](v9, "compare:", &stru_10010A828))
  {
    xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v18)
    {
      __int128 v19 = v18;
      xpc_dictionary_set_uint64(v18, "portID", *(void *)(a1 + 96));
      __int128 v20 = (const char *)-[__CFString cStringUsingEncoding:](v5, "cStringUsingEncoding:", 4LL);
      if (v20)
      {
        xpc_dictionary_set_string(v19, "accName", v20);
        __int128 v21 = (const char *)-[__CFString cStringUsingEncoding:](v7, "cStringUsingEncoding:", 4LL);
        if (v21)
        {
          xpc_dictionary_set_string(v19, "accManufacturer", v21);
          __int128 v22 = (const char *)-[__CFString cStringUsingEncoding:](v9, "cStringUsingEncoding:", 4LL);
          if (v22)
          {
            xpc_dictionary_set_string(v19, "accModel", v22);
            __int128 v23 = (const char *)-[__CFString cStringUsingEncoding:](v11, "cStringUsingEncoding:", 4LL);
            if (v23)
            {
              xpc_dictionary_set_string(v19, "accSerialNumber", v23);
              __int128 v24 = (const char *)-[__CFString cStringUsingEncoding:](v14, "cStringUsingEncoding:", 4LL);
              if (v24)
              {
                xpc_dictionary_set_string(v19, "accHardwareVersion", v24);
                __int128 v25 = (const char *)-[__CFString cStringUsingEncoding:](v17, "cStringUsingEncoding:", 4LL);
                if (v25)
                {
                  xpc_dictionary_set_string(v19, "accFirmwareVersionActive", v25);
                  xpc_dictionary_set_string(v19, "requestType", "accInfo");
                  objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iaptransportd_connection"),  "sendMessage:",  v19);
                  xpc_release(v19);
                  return;
                }
              }
            }
          }
        }
      }
    }

    goto LABEL_48;
  }

    if (!v15 && (v13 & 1) == 0 && (v14 & 1) == 0)
    {
      uint64_t v7 = 0LL;
      goto LABEL_33;
    }
  }

  else
  {
    uint64_t v15 = 1;
    int v13 = 1;
    LOBYTE(v14) = 1;
  }

  __int128 v20 = +[NSKeyedArchiver archivedDataWithRootObject:](&OBJC_CLASS___NSKeyedArchiver, "archivedDataWithRootObject:", a3);
  uint64_t v7 = MRSystemAppPlaybackQueueCreate(kCFAllocatorDefault, 1LL);
  MRSystemAppPlaybackQueueSetLocalQueryData(v7, v20);
  if (v15)
  {
    NSLog( @"prepareForPlaybackWithQuery:andFirstItem: allPodcast, query=%@ count=%lu firstItem(%llu)=%@",  a3,  objc_msgSend(objc_msgSend(a3, "items"), "count"),  objc_msgSend(a4, "persistentID"),  a4);
    self->podcastAppSelected = 1;
    if (a4) {
      MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID(v7, [a4 persistentID]);
    }
    __int128 v21 = @"com.apple.podcasts";
    MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.podcasts");
LABEL_44:
    MRMediaRemoteSetAppPlaybackQueue(v21, v7, 0LL, 0LL, 0LL);
    usleep(0x493E0u);
    goto LABEL_5;
  }

  if (v13)
  {
LABEL_2:
    NSLog( @"prepareForPlaybackWithQuery:andFirstItem: allAudioBooks, query=%@ count=%lu firstItem(%llu)=%@",  a3,  objc_msgSend(objc_msgSend(a3, "items"), "count"),  objc_msgSend(a4, "persistentID"),  a4);
    self->iBooksAppSelected = 1;
    if (a4) {
      MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID(v7, [a4 persistentID]);
    }
    MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.iBooks");
    MRMediaRemoteSetAppPlaybackQueue(@"com.apple.iBooks", v7, 0LL, 0LL, 0LL);
    usleep(0x493E0u);
    goto LABEL_5;
  }

  if ((v14 & 1) != 0)
  {
    NSLog( @"prepareForPlaybackWithQuery:andFirstItem: alliTunesU, query=%@ count=%lu firstItem(%llu)=%@",  a3,  objc_msgSend(objc_msgSend(a3, "items"), "count"),  objc_msgSend(a4, "persistentID"),  a4);
    self->iTunesUAppSelected = 1;
    if (a4) {
      MRSystemAppPlaybackQueueSetLocalQueryFirstItemPID(v7, [a4 persistentID]);
    }
    __int128 v21 = @"com.apple.itunesu";
    MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.itunesu");
    goto LABEL_44;
  }

            __break(0x5516u);
LABEL_30:
            __break(0x5500u);
            return;
          }

    __break(0x5513u);
    goto LABEL_30;
  }

  uint64_t v6 = "feePublicKey: key blob (1)";
LABEL_27:
  puts(v6);
  return 11LL;
}

    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

        __break(0x5513u);
        goto LABEL_30;
      }

      goto LABEL_27;
    }

      __break(0x5516u);
    }

  __break(0x5515u);
  return result;
}

        __break(0x5516u);
        goto LABEL_30;
      default:
        return 0LL;
    }

    return v5(result, a3);
  }

    __break(0x5518u);
    goto LABEL_30;
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1112));
  sub_1000612C4(v2);
  if (v10)
  {
    sub_1000612C4(v2);
    if (v11)
    {
      if ((v11 & 7) == 0)
      {
        sub_10005E9CC(v11, *(_DWORD *)(a1 + 1176), v9);
        sub_1000612C4(v2);
        if (v12)
        {
          if ((v12 & 7) == 0)
          {
            sub_10005EA88(v12, *(_DWORD *)(a1 + 1176));
            return;
          }
        }
      }
    }

    goto LABEL_30;
  }

        __break(0x5516u);
      }
    }

  if (a2)
  {
LABEL_30:
    uint64_t v14 = 0LL;
    uint64_t v15 = 0;
    __int128 v32 = v6;
    __int128 v33 = 0;
    uint64_t v34 = v6 & 0x20002;
    memset(v38, 170, 21);
    __int128 v16 = 2304LL;
    while (1)
    {
      if (((1 << v15) & a2) == 0 && (v14 != 24 || (a2 & 0x20000) == 0)) {
        goto LABEL_65;
      }
      uint64_t v17 = *(uint64_t (**)(void *, _BYTE *))(a1 + v16 - 8);
      xpc_object_t v18 = *(void *)(a1 + v16);
      v38[1] = v15;
      v38[0] = 1;
      if (v14 != 216) {
        break;
      }
      HIDWORD(v19) = -1775253149 * *(_DWORD *)(a1 + 1204);
      LODWORD(v19) = HIDWORD(v19);
      if (!*(_BYTE *)(a1 + 1200)) {
        break;
      }
LABEL_69:
      ++v15;
      v14 += 24LL;
      v16 += 16LL;
      if (v14 == 456) {
        goto LABEL_73;
      }
    }

    __int128 v21 = (void *)(a1 + (v18 >> 1));
    if ((v18 & 1) != 0) {
      uint64_t v17 = *(uint64_t (**)(void *, _BYTE *))(*v21 + v17);
    }
    __int128 v22 = v17(v21, v38);
    if (v22 > 0x1F) {
      goto LABEL_79;
    }
    if (v22)
    {
LABEL_65:
      if (v14 == 24)
      {
        __int128 v29 = *(unsigned __int8 *)(a1 + 2757);
        if (v29 > 1) {
          goto LABEL_79;
        }
        if (!(v29 | v34)) {
          a2 &= ~0x20000u;
        }
      }

      goto LABEL_69;
    }

    if (v14 > ~(a1 + 1280)) {
      goto LABEL_80;
    }
    __int128 v23 = a1 + v14;
    __int128 v24 = *(unsigned __int8 *)(a1 + v14 + 1296);
    if (v38[0] - 1 != (_DWORD)v24)
    {
      __break(0x5518u);
      goto LABEL_79;
    }

    if ((v33 & (v14 == 408)) != 0)
    {
      if (&v38[1] == (_BYTE *)-1LL) {
        goto LABEL_80;
      }
    }

    else
    {
      if (&v38[1] == (_BYTE *)-1LL) {
        goto LABEL_80;
      }
      if (!memcmp(*(const void **)(v23 + 1288), &v38[2], *(unsigned __int8 *)(a1 + v14 + 1296)))
      {
        __int128 v26 = v36;
LABEL_58:
        if (((1 << v15) & v32) == 0 || v14 == 72) {
          __int128 v28 = 0;
        }
        else {
          __int128 v28 = 1 << v15;
        }
        int v36 = v26 | v28;
        goto LABEL_65;
      }

      v33 |= v14 == 24;
    }

    memcpy(*(void **)(v23 + 1288), &v38[2], v24);
    if (((1 << v15) & a2) != 0) {
      __int128 v25 = 1 << v15;
    }
    else {
      __int128 v25 = 0;
    }
    __int128 v26 = v25 | v36;
    goto LABEL_58;
  }

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x5518u);
    goto LABEL_30;
  }

  uint64_t result = (uint64_t)sub_100003154(&v14);
  if (!result) {
    goto LABEL_30;
  }
  if ((result & 7) != 0) {
    goto LABEL_30;
  }
  uint64_t v7 = (uint64_t *)(result + 8);
  if (((result + 8) & 7) != 0) {
    goto LABEL_30;
  }
  uint64_t result = *v7;
  if (!*v7 || (result & 7) != 0) {
    goto LABEL_30;
  }
  uint64_t v8 = *(unsigned __int8 *)(result + 56);
  if (v8 < 2)
  {
    uint64_t v9 = v8 != 0;
    uint64_t v10 = (void *)sub_10008305C(result);
    operator delete(v10);
    sub_1000095C0((uint64_t *)(v3 + 1200), v14);
    BOOL v11 = 0LL;
    goto LABEL_20;
  }

    uint64_t v12 = 22LL;
    goto LABEL_30;
  }

  if (a3 > 0xFF) {
    goto LABEL_51;
  }
  if (a3 && a3 != 5)
  {
    if (a3 != 1) {
      goto LABEL_29;
    }
    *(void *)&int v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v19 = v13;
    __int128 v20 = v13;
    LOWORD(vmemset(md, 170, 20) = 8;
    HIDWORD(v19) = -1;
    if ((result & 7) != 0 || (((_BYTE)result - 68) & 3) != 0) {
      goto LABEL_50;
    }
    *(_BYTE *)(result + 1212) = 0;
    uint64_t result = sub_1000635F4(result, (uint64_t)&v19, (unsigned int (*)(void *, __int128 *))sub_100089794, 0LL);
    if (*(_BYTE *)(v10 + 1212))
    {
      sub_1000578E8(v9, 0xEu);
      return 0LL;
    }
  }

      __break(0x5516u);
      goto LABEL_30;
    }
  }

  return result;
}

    __break(0x550Au);
  }

  __break(0x5513u);
  return result;
}

      __break(0x5512u);
      goto LABEL_30;
    }

    __break(0x5516u);
    goto LABEL_30;
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_100028734(uint64_t result)
{
  if (result && (result & 7) == 0 && ((result + 80) & 7) == 0) {
    return *(unsigned int *)(result + 80);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100028758(uint64_t result)
{
  if (result && (result & 7) == 0 && ((result + 84) & 3) == 0) {
    return *(unsigned int *)(result + 84);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002877C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100028790(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_1000287A4(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_17;
  }
  uint64_t v2 = result;
  uint64_t result = *(void *)(result + 40);
  if (result == a2[5]) {
    return 1LL;
  }
  if (!result || (result & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t result = *(void *)(v2 + 40);
  if (!result || (result & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
  }

  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result) == 1)
    {
LABEL_13:
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100028878(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100028890(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (void *)sub_100008C24(result);
    sub_1000288D4(v1, v2);
    return v1;
  }

  return result;
}

void sub_1000288D4(uint64_t a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    return;
  }

  if (a2)
  {
    if ((a2 & 7) == 0 && (*a2 & 7LL) == 0)
    {
      sub_1000288D4(a1);
      if (((unint64_t)(a2 + 1) & 7) == 0 && (a2[1] & 7LL) == 0)
      {
        sub_1000288D4(a1);
        if ((((_BYTE)a1 + 8) & 7) == 0)
        {
          operator delete(a2);
          return;
        }
      }
    }

    goto LABEL_11;
  }

void sub_100028960(void *a1, void *a2)
{
  if (!a1
    || (a1 & 7) != 0
    || (memset(v8, 170, sizeof(v8)), (((_BYTE)a1 + 16) & 7) != 0)
    || (sub_100010C30(v8), (((_BYTE)a1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v7 = (void *)a1[1];
    while (v7 != a1)
    {
      if (*sub_10000D014((uint64_t *)&v7) == *a2)
      {
        uint64_t i = (void *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v9 = v7;
        sub_10000D048(&v9);
        xpc_object_t v4 = v9;
        for (i = v9; ; xpc_object_t v4 = i)
        {
          if (v4 == a1)
          {
            BOOL v5 = a1;
            goto LABEL_13;
          }

          sub_10000D048(&i);
        }

        BOOL v5 = i;
LABEL_13:
        sub_100028AA8(v8, v8, a1, v7, v5);
        uint64_t v7 = i;
        if (i == a1) {
          continue;
        }
      }

      sub_10000D048(&v7);
    }

    sub_1000180FC((uint64_t)v8);
  }

void sub_100028A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_100028AA8(void *result, uint64_t *a2, void *a3, void *a4, void *a5)
{
  if (!result) {
    goto LABEL_37;
  }
  BOOL v5 = result;
  if (a4 != a5)
  {
    uint64_t v9 = (void *)*a5;
    if (result != a3)
    {
      __int128 v22 = a4;
      if (v9 != a4)
      {
        uint64_t v10 = 0LL;
        while (1)
        {
          uint64_t v11 = v10 + 1;
          if (__OFADD__(v10, 1LL)) {
            goto LABEL_36;
          }
          uint64_t result = sub_10000D048(&v22);
          ++v10;
          if (v22 == v9) {
            goto LABEL_13;
          }
        }
      }

      uint64_t v11 = 0LL;
LABEL_13:
      unint64_t v12 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_36;
      }
      unint64_t v13 = a3[2];
      BOOL v14 = v13 >= v12;
      unint64_t v15 = v13 - v12;
      if (!v14) {
        goto LABEL_38;
      }
      a3[2] = v15;
      __int128 v16 = v5 + 2;
      if (((unint64_t)(v5 + 2) & 7) != 0)
      {
LABEL_37:
        __break(0x5516u);
LABEL_38:
        __break(0x5515u);
        return result;
      }

      BOOL v14 = __CFADD__(*v16, v12);
      unint64_t v17 = *v16 + v12;
      if (v14)
      {
LABEL_36:
        __break(0x5500u);
        goto LABEL_37;
      }

      *__int128 v16 = v17;
    }

    if (!v9) {
      goto LABEL_37;
    }
    xpc_object_t v18 = v9 + 1;
    if (!a4) {
      goto LABEL_37;
    }
    uint64_t v19 = *a4;
    if (!*a4) {
      goto LABEL_37;
    }
    if ((v19 & 7) != 0) {
      goto LABEL_37;
    }
    if (((v19 + 8) & 7) != 0) {
      goto LABEL_37;
    }
    *(void *)(v19 + _Block_object_dispose(va, 8) = *v18;
    __int128 v20 = (void *)*v18;
    if (!v20) {
      goto LABEL_37;
    }
    *__int128 v20 = v19;
    if (!a2) {
      goto LABEL_37;
    }
    uint64_t v21 = *a2;
    if (!*a2 || (v21 & 7) != 0 || (((_BYTE)v21 + 8) & 7) != 0) {
      goto LABEL_37;
    }
    *(void *)(v21 + _Block_object_dispose(va, 8) = a4;
    *a4 = v21;
    *a2 = (uint64_t)v9;
    v9[1] = a2;
  }

  return result;
}

void sub_100028C28(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *a1 = off_100103838;
    sub_1000CE94C(a1);
    operator delete(a1);
  }

void sub_100028C6C(_Unwind_Exception *a1)
{
}

void sub_100028C80(id a1)
{
  qword_10011BC28 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  qword_10011BC30 = (uint64_t)dispatch_queue_create("IAPConnectorHas30PinAdaptorList", 0LL);
}

uint64_t sub_100028CC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100028CD4(id a1)
{
  byte_10011BC40 = MGGetBoolAnswer(@"InternalBuild");
}

id sub_100028CF8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSBundle bundleWithIdentifier:]( &OBJC_CLASS___NSBundle,  "bundleWithIdentifier:",  @"com.apple.IAP"));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localizedStringForKey:v1 value:&stru_10010A828 table:@"Framework"]);

  return v3;
}

void sub_100028EFC(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_10011BC50;
  qword_10011BC50 = (uint64_t)v1;
}

id sub_1000290F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = *(unsigned __int8 *)(a1 + 56);
  if (v6 < 2) {
    return +[ACCAuthorizationManager forceRequestAuthorizationForCertSerial:withName:providesPower:completionHandler:]( &OBJC_CLASS___ACCAuthorizationManager,  "forceRequestAuthorizationForCertSerial:withName:providesPower:completionHandler:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v6 != 0,  *(void *)(a1 + 48));
  }
  __break(0x550Au);
  return [(id)a1 forceRequestAuthorizationForCertSerial:a3 withName:a4 providesPower:a5 completionHandler:a6];
}

void *sub_1000296E8(void *a1)
{
  id v1 = [a1 valueForProperty:MPMediaItemPropertyArtwork];
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 bounds];
    if (v3 < 0.00000011920929) {
      return 0LL;
    }
    [v2 bounds];
    if (v4 < 0.00000011920929) {
      return 0LL;
    }
  }

  return v2;
}

void *sub_100029750(void *result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100103920;
    result[1] = a2;
  }

  return result;
}

uint64_t sub_100029770(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100029784(void *__p)
{
  else {
    operator delete(__p);
  }
}

BOOL sub_100029798(BOOL result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8) != 0LL;
  }
  __break(0x5516u);
  return result;
}

void *sub_1000297B8(void *result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      double v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      if (a2 >= 5)
      {
        id v8 = 0LL;
        goto LABEL_14;
      }

      uint64_t result = (void *)v2[1];
      if (result && (result & 7) == 0)
      {
        BOOL v5 = (void *)(*(uint64_t (**)(void *))(*result + 408LL))(result);
        if (v5)
        {
          id v6 = [v5 valueForProperty:MPMediaItemPropertyChapterArtworkTimes];
          if (v6)
          {
            uint64_t v7 = v6;
            if ([v6 count])
            {
              id v8 = [v7 count];
LABEL_14:

              return v8;
            }
          }
        }

        uint64_t result = (void *)v2[1];
        if (result && (result & 7) == 0)
        {
          id v8 = (id)(*(uint64_t (**)(void *))(*result + 232LL))(result);
          goto LABEL_14;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100029894(uint64_t a1, int a2, uint64_t *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_38;
  }
  id v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 < 5)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (!v7 || (v7 & 7) != 0) {
      goto LABEL_38;
    }
    id v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 408LL))(v7);
    if (v8)
    {
      id v9 = [v8 valueForProperty:MPMediaItemPropertyChapterArtworkTimes];
      if (v9)
      {
        uint64_t v10 = v9;
        if ([v9 count])
        {
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          id v11 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
          if (!v11) {
            goto LABEL_35;
          }
          id v12 = v11;
          uint64_t v13 = *(void *)v27;
          while (1)
          {
            for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v27 != v13) {
                objc_enumerationMutation(v10);
              }
              [*(id *)(*((void *)&v26 + 1) + 8 * (void)i) doubleValue];
              double v16 = v15 * 1000.0;
              if (v16 <= -1.0 || v16 >= 4294967300.0)
              {
                __break(0x5505u);
                goto LABEL_37;
              }

              unsigned int v25 = v16;
              unint64_t v18 = a3[1];
              if (v18 >= a3[2])
              {
                uint64_t v19 = sub_10002A2B8(a3, &v25);
              }

              else
              {
                sub_10002A240(a3, &v25);
                if (v18 >= 0xFFFFFFFFFFFFFFFCLL) {
                  goto LABEL_37;
                }
                uint64_t v19 = v18 + 4;
              }

              a3[1] = v19;
            }

            id v12 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
            if (!v12)
            {
LABEL_35:
              uint64_t v23 = 1LL;
              goto LABEL_36;
            }
          }
        }
      }
    }

    uint64_t v20 = *(void *)(a1 + 8);
    if (!v20 || (v20 & 7) != 0) {
      goto LABEL_38;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 232LL))(v20))
    {
      unsigned int v25 = 0;
      unint64_t v21 = a3[1];
      if (v21 >= a3[2])
      {
        uint64_t v22 = sub_10002A2B8(a3, &v25);
        goto LABEL_34;
      }

      sub_10002A240(a3, &v25);
      if (v21 < 0xFFFFFFFFFFFFFFFCLL)
      {
        uint64_t v22 = v21 + 4;
LABEL_34:
        a3[1] = v22;
        goto LABEL_35;
      }

void sub_100029AD8(uint64_t a1, int a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_52;
  }
  id v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 < 0 || a2 >= 5) {
    goto LABEL_45;
  }
  if (~(unint64_t)&unk_1000DAB6C < 8 * (unint64_t)a2
    || (uint64_t v7 = (unsigned int *)((char *)&unk_1000DAB6C + 8 * a2), v7 == (unsigned int *)-4LL))
  {
LABEL_51:
    __break(0x5513u);
    goto LABEL_52;
  }

  id v8 = *(NSAutoreleasePool **)(a1 + 8);
  size_t v9 = *v7;
  unint64_t v10 = v7[1];
  id v11 = sub_1000500D4(v8, *v7, v7[1], a3);
  if (!v11)
  {
LABEL_45:
    uint64_t v44 = (char *)operator new(0x40uLL);
    if ((v44 & 0xF) == 0)
    {
      char v43 = (char)v44;
      if ((v44 & 7) == 0)
      {
        *((void *)v44 + 1) = 0LL;
        *((void *)v44 + 2) = 0LL;
        *(void *)uint64_t v44 = off_100103960;
        *(_OWORD *)(v44 + 2_Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v44 + 44) = 0u;
        *((_DWORD *)v44 + 15) = 0;
LABEL_48:

        if ((v43 & 7) == 0) {
          return;
        }
      }
    }

LABEL_52:
    __break(0x5516u);
    goto LABEL_53;
  }

  id v12 = v11;
  uint64_t v13 = v11;
  [v12 scale];
  if (v14 != 1.0) {
    id v12 = (void *)sub_100029E78(v12, (double)v9, (double)v10);
  }
  double v15 = (CGImage *)[v12 CGImage];
  if (!is_mul_ok(4 * v9, v10)) {
    goto LABEL_53;
  }
  double v16 = v15;
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  if (!DeviceRGB)
  {
    syslog(4, "Error allocating color space\n");
    goto LABEL_45;
  }

  unint64_t v18 = DeviceRGB;
  uint64_t v19 = malloc(4 * v9 * v10);
  if (!v19)
  {
    syslog(4, "Memory not allocated!");
LABEL_44:
    CGColorSpaceRelease(v18);
    goto LABEL_45;
  }

  uint64_t v20 = v19;
  CGContextRef v21 = CGBitmapContextCreate(v19, v9, v10, 8uLL, 4 * v9, v18, 2u);
  if (!v21)
  {
    free(v20);
    syslog(4, "Context not created!");
    goto LABEL_44;
  }

  uint64_t v22 = v21;
  CGColorSpaceRelease(v18);
  v45.origin.x = 0.0;
  v45.origin.y = 0.0;
  v45.size.width = (double)v9;
  v45.size.height = (double)v10;
  CGContextDrawImage(v22, v45, v16);
  Data = CGBitmapContextGetData(v22);
  if (!Data)
  {
    CGContextRelease(v22);
    goto LABEL_45;
  }

  unint64_t v24 = v9 * (unint64_t)v10;
  if ((v24 & 0xFFFFFFFF00000000LL) == 0 && (v24 & 0x80000000) == 0)
  {
    unint64_t v25 = (unint64_t)Data;
    unint64_t v26 = (unint64_t)malloc((2 * v24));
    __int128 v27 = (void *)v26;
    if ((_DWORD)v24)
    {
      unint64_t v28 = 0LL;
      unint64_t v29 = ~v25;
      unint64_t v30 = ~v26;
      unsigned int v31 = 3;
      while ((v28 & 0x80000000) == 0)
      {
        unint64_t v32 = v31 - 2;
        if (v29 < v32) {
          goto LABEL_51;
        }
        unint64_t v33 = v31 - 1;
        if (v29 < v33 || v29 < v31) {
          goto LABEL_51;
        }
        unsigned int v34 = *(unsigned __int8 *)(v25 + v32);
        unsigned int v35 = *(unsigned __int8 *)(v25 + v33);
        unsigned int v36 = (*(unsigned __int8 *)(v25 + v31) + 7) >> 3;
        if (v36 >= 0x1F) {
          LOBYTE(v36) = 31;
        }
        if (v34 >= 0xF9) {
          unsigned int v37 = 63488;
        }
        else {
          unsigned int v37 = ((v34 << 8) + 1792) & 0x1F800;
        }
        if (v35 >= 0xFD) {
          __int16 v38 = 2016;
        }
        else {
          __int16 v38 = (8 * v35 + 24) & 0xFE0;
        }
        if (HIWORD(v37)) {
          goto LABEL_54;
        }
        if (v28 > v30) {
          goto LABEL_51;
        }
        if (!v26) {
          goto LABEL_52;
        }
        __int16 v39 = v38 | v37;
        *(_BYTE *)(v26 + v2_Block_object_dispose(va, 8) = v36 | v39;
        unint64_t v40 = v28 + 1;
        if (v28 + 1 > v30) {
          goto LABEL_51;
        }
        *(_BYTE *)(v26 + v28 + 1) = HIBYTE(v39);
        v31 += 4;
        v28 += 2LL;
      }

      goto LABEL_53;
    }

      __break(0x5516u);
      goto LABEL_53;
    }

    sub_1000CEAEC( 0,  4,  "%s:%d NULL pLingoPushUI\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  19671);
  }

  unint64_t v10 = 22;
LABEL_36:
  if (a2 - 2 >= 2)
  {
    if (!a2) {
      return 0LL;
    }
    if (a2 == 1 && (v7 & 0x10) != 0) {
      sub_100091044(*(void *)(v2 + 8));
    }
    goto LABEL_50;
  }

  if ((v7 & 0x2000) != 0)
  {
    uint64_t result = sub_100061274();
    if (result)
    {
      if ((result & 7) == 0)
      {
        uint64_t result = sub_10008C2EC(result, *(void *)(v2 + 8), 0xDu);
        if (result)
        {
          if ((result & 7) == 0)
          {
            if (a2 == 3) {
              id v11 = 2;
            }
            else {
              id v11 = 1;
            }
            sub_10008F574(result, v11);
            goto LABEL_50;
          }
        }
      }
    }

    goto LABEL_52;
  }

    __break(0x5516u);
    goto LABEL_53;
  }

  __break(0x5500u);
  return result;
}

  __break(0x5516u);
  return result;
}

void sub_100029E64(_Unwind_Exception *a1)
{
}

uint64_t sub_100029E78(void *a1, CGFloat a2, CGFloat a3)
{
  id v6 = (void (*)(double, double))sub_1000CFE28("UIGraphicsBeginImageContext", 0LL);
  v6(a2, a3);
  uint64_t v7 = (uint64_t (*)(void))sub_1000CFE28("UIGraphicsGetCurrentContext", 0LL);
  id v8 = (CGContext *)v7();
  CGContextTranslateCTM(v8, 0.0, a3);
  CGContextScaleCTM(v8, 1.0, -1.0);
  size_t v9 = (CGImage *)[a1 CGImage];
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = a2;
  v14.size.height = a3;
  CGContextDrawImage(v8, v14, v9);
  unint64_t v10 = (uint64_t (*)(void))sub_1000CFE28("UIGraphicsGetImageFromCurrentImageContext", 0LL);
  uint64_t v11 = v10();
  id v12 = (void (*)(void))sub_1000CFE28("UIGraphicsEndImageContext", 0LL);
  v12();
  return v11;
}

NSData *sub_100029F78( NSData *result, uint64_t a2, unsigned int a3, unsigned int a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10)
{
  if (result)
  {
    unint64_t v10 = result;
    if ((result & 7) == 0)
    {
      result->super.isa = (Class)off_100103960;
      result[1].super.isa = 0LL;
      LODWORD(result[2].super.isa) = a3;
      HIDWORD(result[2].super.isa) = a4;
      HIDWORD(result[3].super.isa) = a10;
      *(double *)&result[4].super.isa = a5;
      *(double *)&result[5].super.isa = a6;
      *(double *)&result[6].super.isa = a7;
      *(double *)&result[7].super.isa = a8;
      if (!a2) {
        return v10;
      }
      uint64_t result = objc_alloc(&OBJC_CLASS___NSData);
      unint64_t v14 = a3 * (unint64_t)a4;
      if ((v14 & 0xFFFFFFFF00000000LL) == 0 && (v14 & 0x80000000) == 0)
      {
        v10[1].super.isa = (Class)-[NSData initWithBytes:length:]( result,  "initWithBytes:length:",  a2,  (2 * v14));
        return v10;
      }

      __break(0x550Cu);
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_10002A00C(void *result)
{
  if (!result || (id v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = off_100103960;
    uint64_t v2 = (void *)result[1];
    if (v2)
    {

      v1[1] = 0LL;
    }

    return v1;
  }

  return result;
}

void *sub_10002A058(void *result)
{
  return result;
}

void sub_10002A06C(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002A00C(a1);
    operator delete(a1);
  }

void sub_10002A0A4(_Unwind_Exception *a1)
{
}

uint64_t sub_10002A0B8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 28);
  }
  __break(0x5516u);
  return result;
}

int32x2_t *sub_10002A0D0@<X0>(int32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(a2 + memset(md, 170, 20) = 0xAAAAAAAAAAAAAAAALL;
    *(void *)(a2 + 12) = 0xAAAAAAAAAAAAAAAALL;
    int32x2_t v2 = result[2];
    *(int32x2_t *)a2 = vrev64_s32(v2);
    if ((v2.i32[0] & 0x80000000) == 0)
    {
      *(_DWORD *)(a2 + _Block_object_dispose(va, 8) = 2 * v2.i32[0];
      *(_WORD *)(a2 + 12) = 0;
      *(void *)(a2 + 16) = 0LL;
      *(_DWORD *)(a2 + 2_Block_object_dispose(va, 8) = 0;
      return result;
    }
  }

  __break(0x550Cu);
  return result;
}

double *sub_10002A11C@<X0>(double *result@<X0>, _DWORD *a2@<X8>)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      int32x2_t v2 = result + 4;
      if (((unint64_t)(result + 4) & 7) == 0)
      {
        double v3 = *v2;
        if (*v2 <= -1.0 || v3 >= 4294967300.0) {
          goto LABEL_30;
        }
        BOOL v5 = result + 5;
        if (((unint64_t)(result + 5) & 7) == 0)
        {
          double v6 = *v5;
          if (*v5 <= -1.0 || v6 >= 4294967300.0) {
            goto LABEL_30;
          }
          if (((unint64_t)(result + 6) & 7) == 0 && ((unint64_t)(result + 7) & 7) == 0)
          {
            double v8 = v3 + result[7];
            if (v8 <= -1.0 || v8 >= 4294967300.0) {
              goto LABEL_30;
            }
            double v10 = v6 + result[6];
            if (v10 <= -1.0 || v10 >= 4294967300.0) {
              goto LABEL_30;
            }
            if (a2)
            {
              *a2 = v3;
              a2[1] = v6;
              a2[2] = v8;
              a2[3] = v10;
              return result;
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_30:
  __break(0x5505u);
  return result;
}

void *sub_10002A1F4(void *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (void *)result[1];
    if (result) {
      return [result bytes];
    }
  }

  return result;
}

void *sub_10002A214(void *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (void *)result[1];
    if (result) {
      return [result length];
    }
  }

  return result;
}

void *sub_10002A240(void *result, _DWORD *a2)
{
  v3[0] = result;
  unint64_t v2 = result[1];
  if (v2 >= 0xFFFFFFFFFFFFFFFCLL)
  {
LABEL_10:
    __break(0x5513u);
    return result;
  }

  v3[2] = v2 + 4;
  if ((((_BYTE)result + 16) & 7) != 0 || !v2 || (v2 & 3) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  *(_DWORD *)unint64_t v2 = *a2;
  v3[1] = v2 + 4;
  return sub_100024794(v3);
}

uint64_t sub_10002A2B8(uint64_t *a1, _DWORD *a2)
{
  if (!a1) {
    goto LABEL_15;
  }
  unint64_t v2 = a1;
  double v3 = a1 + 2;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v13 = v4;
  __int128 v14 = v4;
  uint64_t v5 = (a1[1] - *a1) >> 2;
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
LABEL_16:
    __break(0x5500u);
LABEL_17:
    sub_10002A484((uint64_t)v2);
  }

  if (v6 >> 62) {
    goto LABEL_17;
  }
  unint64_t v8 = *v3 - *a1;
  if (v8 >> 1 > v6) {
    unint64_t v6 = v8 >> 1;
  }
  unint64_t v9 = v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v6;
  uint64_t result = sub_10002A4AC((uint64_t)&v13, v9, v5, (uint64_t)v3);
  unint64_t v11 = v14;
  if (!(void)v14 || (v14 & 3) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *(_DWORD *)__int128 v14 = *a2;
  if (v11 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    __break(0x5513u);
  }

  else
  {
    *(void *)&__int128 v14 = v11 + 4;
    sub_10002A3C4(v2, &v13);
    uint64_t v12 = v2[1];
    sub_10002A674((uint64_t)&v13);
    return v12;
  }

  return result;
}

void sub_10002A3AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_10002A3C4(uint64_t *result, void *a2)
{
  if (!result) {
    goto LABEL_6;
  }
  unint64_t v2 = result;
  double v3 = result + 2;
  unint64_t v6 = result + 1;
  uint64_t v5 = result[1];
  uint64_t v7 = *result;
  uint64_t v8 = a2[1];
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v9;
  __int128 v16 = v9;
  uint64_t result = (uint64_t *)sub_10002A5D4(&v14, v5, v5, v7, v8, v8, &v15);
  uint64_t v10 = *((void *)&v16 + 1);
  a2[1] = *((void *)&v16 + 1);
  uint64_t v11 = *v2;
  uint64_t *v2 = v10;
  a2[1] = v11;
  if ((v6 & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    uint64_t v12 = *v6;
    *unint64_t v6 = a2[2];
    a2[2] = v12;
    uint64_t v13 = *v3;
    uint64_t *v3 = a2[3];
    a2[3] = v13;
    *a2 = a2[1];
  }

  return result;
}

void sub_10002A484(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    sub_1000D251C();
  }
  __break(0x5516u);
}

uint64_t sub_10002A4AC(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (__int128 v4 = (void *)result, (result & 7) != 0)
    || (((_BYTE)result + 24) & 7) != 0
    || (*(void *)(result + 24) = 0LL, ((result + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 32) = a4;
    if (a2)
    {
      uint64_t v7 = sub_100024960(result);
      uint64_t result = (uint64_t)sub_10002A57C(v7, a2);
    }

    else
    {
      uint64_t result = 0LL;
    }

    void *v4 = result;
    if (!((unint64_t)(a3 + 0x2000000000000000LL) >> 62) && 4 * a3 <= (unint64_t)~result)
    {
      uint64_t v8 = result + 4 * a3;
      v4[1] = v8;
      v4[2] = v8;
      if (!((a2 + 0x2000000000000000LL) >> 62) && 4 * a2 <= ~result)
      {
        v4[3] = result + 4 * a2;
        return (uint64_t)v4;
      }
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_10002A57C(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D251C();
  }

  if (a2 >> 62) {
    goto LABEL_5;
  }
  return operator new(4 * a2);
}

unint64_t sub_10002A5A4(unint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_5:
    __break(0x5516u);
    goto LABEL_6;
  }

  unint64_t v1 = *(void *)(result + 8);
  if (v1 > 3)
  {
    uint64_t result = v1 - 4;
    if (((v1 - 4) & 3) == 0) {
      return result;
    }
    goto LABEL_5;
  }

_DWORD *sub_10002A5D4@<X0>( _DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&__int128 v13 = a2;
  *((void *)&v13 + 1) = a3;
  *(void *)&__int128 v12 = a5;
  *((void *)&v12 + 1) = a6;
  if (result)
  {
    if (a3 == a4)
    {
LABEL_6:
      if (a7)
      {
        __int128 v11 = v12;
        *a7 = v13;
        a7[1] = v11;
        return result;
      }
    }

    else
    {
      while (1)
      {
        int v9 = *(_DWORD *)sub_10002A5A4((unint64_t)&v13);
        uint64_t result = (_DWORD *)sub_10002A5A4((unint64_t)&v12);
        *uint64_t result = v9;
        if (*((void *)&v13 + 1) <= 3uLL) {
          break;
        }
        uint64_t v10 = *((void *)&v13 + 1) - 4LL;
        *((void *)&v13 + 1) -= 4LL;
        if (*((void *)&v12 + 1) <= 3uLL) {
          break;
        }
        *((void *)&v12 + 1) -= 4LL;
        if (v10 == a4) {
          goto LABEL_6;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10002A674(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_10002A6E0(result);
  if (!*v1) {
    return (uint64_t)v1;
  }
  sub_100024960((uint64_t)v1);
  uint64_t result = *v1;
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (v1[3] - result >= 0)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t sub_10002A6E0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10002A6F8(result, *(void *)(result + 8));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002A6F8(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    for (unint64_t i = *(void *)(result + 16); i != a2; *(void *)(v2 + 16) = i)
    {
      uint64_t result = sub_100024960(v2);
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 <= 3)
      {
        __break(0x5513u);
        goto LABEL_9;
      }

      unint64_t i = v5 - 4;
    }
  }

  return result;
}

void sub_10002A79C(id a1)
{
  byte_10011BC60 = CFPreferencesGetAppBooleanValue(@"IAPLogging", @"com.apple.Preferences", 0LL) != 0;
}

uint64_t sub_10002ACC4()
{
  if (qword_10011BC78 != -1) {
    dispatch_once(&qword_10011BC78, &stru_100103A08);
  }
  uint64_t result = qword_10011BC70;
  if ((qword_10011BC70 & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_10002AD10(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0xC0uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002AD6C(v1);
    qword_10011BC70 = v2;
  }

void sub_10002AD58(_Unwind_Exception *a1)
{
}

uint64_t sub_10002AD6C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    *(void *)uint64_t v1 = off_100103A38;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)v1,  (CFNotificationCallback)sub_10002AE34,  @"com.apple.iapd.LoggingPreferencesChangedNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    (*(void (**)(uint64_t))(*(void *)v1 + 496LL))(v1);
    *(void *)(v1 + 184) = -[LogFileWriter initFor:]( objc_alloc(&OBJC_CLASS___LogFileWriter),  "initFor:",  @"iapd");
    *(void *)(v1 + 104) = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 120), 0LL);
    return v1;
  }

  return result;
}

void sub_10002AE1C(_Unwind_Exception *a1)
{
}

void sub_10002AE34(uint64_t a1, uint64_t a2)
{
  if (!a2 || (a2 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    (*(void (**)(uint64_t))(*(void *)a2 + 496LL))(a2);
  }
}

uint64_t sub_10002AE78(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10002AEE8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100103A38;

    return sub_10002AE78(v1);
  }

  return result;
}

void sub_10002AF34(_Unwind_Exception *a1)
{
}

uint64_t sub_10002AF4C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10002AEE8(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10002AF60(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002AEE8(a1);
    operator delete((void *)a1);
  }

void sub_10002AF98(_Unwind_Exception *a1)
{
}

uint64_t sub_10002AFAC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return reboot(0);
  }
  __break(0x5516u);
  return result;
}

_BYTE *sub_10002AFC4(_BYTE *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    NSLog(@"Loading logging preferences... (InternalTesting)");
    v1[112] = CFPreferencesGetAppBooleanValue(@"LogIapPackets", @"com.apple.iapd", 0LL);
    v1[113] = CFPreferencesGetAppBooleanValue(@"PrintIapPackets", @"com.apple.iapd", 0LL);
    v1[115] = CFPreferencesGetAppBooleanValue(@"LogIapDebug", @"com.apple.iapd", 0LL);
    uint64_t result = (_BYTE *)CFPreferencesGetAppBooleanValue(@"PrintIapDebug", @"com.apple.iapd", 0LL);
    v1[114] = (_BYTE)result;
  }

  return result;
}

BOOL sub_10002B064(BOOL result)
{
  if (result && !(result & 7)) {
    return CFPreferencesGetAppBooleanValue(@"EnableA13Support", @"com.apple.iapd", 0LL) != 0;
  }
  __break(0x5516u);
  return result;
}

NSMutableString *sub_10002B0A4(NSMutableString *result, void *a2)
{
  if (result && (result & 7) == 0)
  {
    double v3 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    __int128 v4 = (unsigned __int8 *)[a2 bytes];
    unint64_t v5 = (char *)[a2 length];
    uint64_t result = (NSMutableString *)-[NSMutableString appendFormat:](v3, "appendFormat:", @"<");
    if (!v5)
    {
LABEL_7:
      -[NSMutableString appendFormat:](v3, "appendFormat:", @">");
      return v3;
    }

    while (v4)
    {
      uint64_t result = (NSMutableString *)-[NSMutableString appendFormat:](v3, "appendFormat:", @"%02x ", *v4);
      ++v4;
      if (!--v5) {
        goto LABEL_7;
      }
    }
  }

  __break(0x5516u);
LABEL_9:
  __break(0x5513u);
  return result;
}

void sub_10002B168( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_43;
  }
  uint64_t v46 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  __int128 v13 = &off_10011B000;
  if (!*(_BYTE *)(a1 + 113) && !sub_1000CEA70(0LL) && (dword_10011C820 & 2) == 0) {
    goto LABEL_23;
  }
  if (!qword_10011BC80) {
    qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  char v14 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  __int128 v15 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a7, a8);
  -[NSDate timeIntervalSinceDate:](v14, "timeIntervalSinceDate:", qword_10011BC80);
  double v17 = v16;
  if (!a6)
  {
    unint64_t v18 = "Unknown";
    __int128 v13 = &off_10011B000;
    goto LABEL_12;
  }

  __int128 v13 = &off_10011B000;
  if ((a6 & 7) != 0)
  {
LABEL_43:
    __break(0x5516u);
    goto LABEL_44;
  }

  unint64_t v18 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a6 + 208LL))(a6);
LABEL_12:
  float v19 = v17;
  double v20 = v19;
  CGContextRef v21 = "Acc";
  if (!a5) {
    CGContextRef v21 = "iPod";
  }
  uint64_t v22 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; transport_ptr %hhx; %s; %s; lingo=0x%02x; cmdID=0x%04x; transID=0x%08x; payload(%d)=",
          *(void *)&v20,
          a6,
          v18,
          v21,
          a2,
          a3,
          a4,
          a8);
  if (*(_BYTE *)(a1 + 113) || sub_1000CEA70(0LL))
  {
    uint64_t v23 = sub_10002B0A4((NSMutableString *)a1, v15);
    NSLog(@"%@%@", v22, v23);
  }

  if (*(_BYTE *)(a1 + 113)) {
    [*(id *)(a1 + 184) log:v22 data:v15];
  }
  if ((dword_10011C820 & 2) != 0)
  {
    memset(v51, 170, 24);
    uint64_t v24 = sub_1000255A4((uint64_t)v51, (char *)-[NSString UTF8String](v22, "UTF8String"));
    sub_100020EC4(v24, 2u, 1);
    if (SHIBYTE(v51[2]) < 0)
    {
      operator delete(v51[0]);
      if (!a6) {
        goto LABEL_40;
      }
      goto LABEL_24;
    }
  }

LABEL_44:
  __break(0x550Au);
}

      double v36 = (unint64_t)[v31 objectForKey:@"modelMatch"];
      unsigned int v37 = (unint64_t)[v31 objectForKey:@"modelContain"];
      uint64_t v38 = (v36 | v37) == 0;
      if (!v63) {
        goto LABEL_50;
      }
      if (v36)
      {
        __int16 v39 = -[NSString isEqualToString:](v63, "isEqualToString:", v36);
      }

      else
      {
        if (!v37) {
          goto LABEL_50;
        }
        __int16 v39 = -[NSString containsString:](v63, "containsString:", v37);
      }

      uint64_t v38 = v39;
LABEL_50:
      unint64_t v40 = (unint64_t)[v31 objectForKey:@"manufacturerMatch"];
      uint64_t v41 = (unint64_t)[v31 objectForKey:@"manufacturerContain"];
      uint64_t v42 = (v40 | v41) == 0;
      if (v62)
      {
        if (v40)
        {
          uint64_t v43 = -[NSString isEqualToString:](v62, "isEqualToString:", v40);
LABEL_55:
          uint64_t v42 = v43;
          goto LABEL_56;
        }

        if (v41)
        {
          uint64_t v43 = -[NSString containsString:](v62, "containsString:", v41);
          goto LABEL_55;
        }
      }

        std::string::assign(a2, (const std::string::value_type *)-[__CFString UTF8String](v10, "UTF8String"));

        goto LABEL_45;
      }
    }

    else
    {
      int v9 = sub_10002CD78();
      if (!v9 || (v9 & 7) != 0) {
        goto LABEL_49;
      }
      uint64_t v10 = sub_10002D200((__CFString *)v9, (uint64_t)@"IAP_ITUNES_RADIO");
      if (*(unsigned __int8 *)(a1 + 33) <= 1u)
      {
        __int128 v11 = v10;
        if (!*(_BYTE *)(a1 + 33))
        {
          __int128 v12 = *(_DWORD *)(a1 + 40);
LABEL_42:
          char v14 = __OFADD__(v12, 1);
          __int128 v15 = (v12 + 1);
          if (v14)
          {
LABEL_51:
            __break(0x5500u);
            return;
          }

          uint64_t v10 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%d", v11, v15);
          goto LABEL_44;
        }

        goto LABEL_44;
      }
    }

        if ((v2 & 0x8000) != 0) {
          goto LABEL_55;
        }
        uint64_t v24 = 2 * v2;
        unsigned int v25 = (_DWORD *)(v7 + 4LL * (v24 - 1));
        if (!*v25) {
          LOWORD(v24) = v24 - 1;
        }
LABEL_52:
        *(_WORD *)a2 = v24;
        return result;
      }
    }

    else if (v4)
    {
      LOWORD(v24) = 0;
      goto LABEL_52;
    }

    __break(0x5516u);
LABEL_45:
    __break(0x550Au);
    return;
  }

  __break(0x5507u);
  return result;
}

  __break(0x5507u);
  return result;
}

  __break(0x5516u);
LABEL_45:
  __break(0x5507u);
  return result;
}

    __break(0x5516u);
    goto LABEL_45;
  }

  if (!v4) {
    goto LABEL_44;
  }
  sub_10009DA34(v2, a1);
LABEL_14:
  if (v5 == 6)
  {
    unint64_t v6 = *(_DWORD **)(a1 + 104);
    if (!v6) {
      return;
    }
    if ((v6 & 7) == 0
      && ((unint64_t)(v6 + 2) & 7) == 0
      && ((unint64_t)(v6 + 3) & 3) == 0)
    {
      if (__CFADD__(v6[2], v6[3])) {
        goto LABEL_46;
      }
      uint64_t v7 = v6 + 4;
      if (((unint64_t)(v6 + 4) & 7) == 0)
      {
        uint64_t v8 = v6 + 5;
        if ((v8 & 3) == 0)
        {
          if (!__CFADD__(*v7, *v8)) {
            return;
          }
          goto LABEL_46;
        }
      }
    }

    goto LABEL_44;
  }

  pthread_once(&stru_10011B908, sub_1000BC260);
  if ((unint64_t)dword_10011B8F8 >= 0xFFFFFFFFFFFFFFF8LL)
  {
LABEL_45:
    __break(0x5513u);
LABEL_46:
    __break(0x5500u);
LABEL_47:
    __break(0x5515u);
LABEL_48:
    __break(0x550Au);
LABEL_49:
    __break(0x5512u);
    return;
  }

  if (dword_10011B900)
  {
    pthread_once(&stru_10011B718, (void (*)(void))sub_10009E628);
    int v9 = sub_1000BC5A4();
    uint64_t v10 = *(_DWORD *)(a1 + 112);
    if (v10)
    {
      switch(*(_WORD *)(a1 + 20))
      {
        case 0x16:
          __int128 v11 = qword_10011C098;
          if (!qword_10011C098) {
            goto LABEL_44;
          }
          goto LABEL_36;
        case 0x17:
          __int128 v11 = qword_10011C0A0;
          if (!qword_10011C0A0) {
            goto LABEL_44;
          }
          goto LABEL_36;
        case 0x18:
          __int128 v11 = qword_10011C0A8;
          if (!qword_10011C0A8) {
            goto LABEL_44;
          }
          goto LABEL_36;
        case 0x1A:
          __int128 v11 = qword_10011C0B0;
          if (!qword_10011C0B0) {
            goto LABEL_44;
          }
LABEL_36:
          if ((v11 & 7) != 0) {
            goto LABEL_44;
          }
          __int128 v12 = v9 - v10;
          if (v9 < v10) {
            goto LABEL_47;
          }
          __int128 v13 = *(unsigned int *)(v11 + 76);
          if (dword_10011B8F8[v13]) {
            (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v11 + 104LL))(v11, v12, 0LL, 0LL);
          }
          break;
        default:
          return;
      }
    }
  }

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    goto LABEL_45;
  }

void sub_10002B5A0(_Unwind_Exception *a1)
{
}

void sub_10002B5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_36;
  }
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!*(_BYTE *)(a1 + 113)
    && !*(_BYTE *)(a1 + 114)
    && !*(_BYTE *)(a1 + 115)
    && !sub_1000CEA70(0LL)
    && (dword_10011C820 & 1) == 0)
  {
    goto LABEL_25;
  }

  if (!qword_10011BC80) {
    qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  int v9 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  -[NSDate timeIntervalSinceDate:](v9, "timeIntervalSinceDate:", qword_10011BC80);
  double v11 = v10;
  if (a4)
  {
    if ((a4 & 7) != 0)
    {
LABEL_36:
      __break(0x5516u);
      goto LABEL_37;
    }

    __int128 v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 208LL))(a4);
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_37;
    }
  }

  else
  {
    __int128 v12 = "Unknown";
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_37;
    }
  }

  float v13 = v11;
  char v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %s; Event; class=0x%02x; type=0x%02lx",
          v13,
          v12,
          a2,
          a3);
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || sub_1000CEA70(0LL)) {
    NSLog(@"%@", v14);
  }
  if (*(_BYTE *)(a1 + 113) || *(_BYTE *)(a1 + 114)) {
    [*(id *)(a1 + 184) log:v14];
  }
  if ((dword_10011C820 & 1) != 0
    && (memset(__p, 170, sizeof(__p)),
        sub_1000255A4((uint64_t)__p, (char *)-[NSString UTF8String](v14, "UTF8String")),
        sub_100020EC4((uint64_t)__p, 1u, 1),
        SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    if (!a4) {
      goto LABEL_33;
    }
  }

  else
  {
LABEL_25:
    if (!a4)
    {
LABEL_33:

      return;
    }
  }

  if (!*(_BYTE *)(a1 + 112)) {
    goto LABEL_33;
  }
  if ((a4 & 7) != 0) {
    goto LABEL_36;
  }
  unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 216LL))(a4);
  double v16 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  if ((a2 & 0x80000000) == 0)
  {
    double v17 = v16;
    if (v15 < 3) {
      uint64_t v18 = v15 + 1;
    }
    else {
      uint64_t v18 = 0LL;
    }
    float v19 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2);
    uint64_t v20 = IAPAppPacketEventClassKey;
    CGContextRef v21 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a3);
    uint64_t v22 = v8;
    uint64_t v23 = IAPAppPacketEventTypeKey;
    uint64_t v24 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v18);
    uint64_t v25 = IAPAppPacketTransportKey;
    -[NSDate timeIntervalSinceDate:](v17, "timeIntervalSinceDate:", qword_10011BC80);
    *(float *)&double v26 = v26;
    unsigned int v27 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26);
    uint64_t v29 = v23;
    uint64_t v8 = v22;
    unint64_t v28 = +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v19,  v20,  v21,  v29,  v24,  v25,  v27,  IAPAppPacketTimeInSecondsKey,  v17,  IAPAppPacketTimestampKey,  0LL);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
    [*(id *)(a1 + 104) addObject:v28];
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 120));
    goto LABEL_33;
  }

void sub_10002B8C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::string *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void sub_10002B8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 114) && !*(_BYTE *)(a1 + 115) && !sub_1000CEA70(0LL) && (dword_10011C820 & 1) == 0) {
    return;
  }
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!qword_10011BC80) {
    qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  int v9 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  -[NSDate timeIntervalSinceDate:](v9, "timeIntervalSinceDate:", qword_10011BC80);
  double v11 = v10;
  if (a4)
  {
    if ((a4 & 7) != 0)
    {
LABEL_25:
      __break(0x5516u);
      return;
    }

    __int128 v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 208LL))(a4);
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    __break(0x550Au);
    goto LABEL_25;
  }

  __int128 v12 = "Unknown";
  if ((a2 & 0x80000000) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  float v13 = v11;
  char v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"LOG; %.6f; %s; Event2; class=0x%02x; type=0x%02lx",
          v13,
          v12,
          a2,
          a3);
  if (*(_BYTE *)(a1 + 114) || *(_BYTE *)(a1 + 115) || sub_1000CEA70(0LL)) {
    NSLog(@"%@", v14);
  }
  if (*(_BYTE *)(a1 + 114)) {
    [*(id *)(a1 + 184) log:v14];
  }
  if ((dword_10011C820 & 8) != 0)
  {
    memset(__p, 170, sizeof(__p));
    sub_1000255A4((uint64_t)__p, (char *)-[NSString UTF8String](v14, "UTF8String"));
    sub_100020EC4((uint64_t)__p, 1u, 1);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10002BA94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_10002BAAC( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_26;
  }
  memset(__b, 170, sizeof(__b));
  __p[3] = &a9;
  vsnprintf(__b, 0x400uLL, a3, &a9);
  __int128 v12 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!*(_BYTE *)(a1 + 113)
    && !*(_BYTE *)(a1 + 114)
    && !*(_BYTE *)(a1 + 115)
    && !sub_1000CEA70(0LL)
    && (dword_10011C820 & 8) == 0)
  {
    goto LABEL_25;
  }

  if (!qword_10011BC80) {
    qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  float v13 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  -[NSDate timeIntervalSinceDate:](v13, "timeIntervalSinceDate:", qword_10011BC80);
  double v15 = v14;
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      double v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
      goto LABEL_14;
    }

void sub_10002BCC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_10002BCF4( uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_24;
  }
  if (!*(_BYTE *)(a1 + 114) && !*(_BYTE *)(a1 + 115) && !sub_1000CEA70(0LL) && (dword_10011C820 & 8) == 0) {
    return;
  }
  memset(__b, 170, sizeof(__b));
  __p[3] = &a9;
  vsnprintf(__b, 0x400uLL, a3, &a9);
  __int128 v12 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!qword_10011BC80) {
    qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
  }
  float v13 = +[NSDate date](&OBJC_CLASS___NSDate, "date");
  -[NSDate timeIntervalSinceDate:](v13, "timeIntervalSinceDate:", qword_10011BC80);
  double v15 = v14;
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      double v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
      goto LABEL_13;
    }

void sub_10002BEF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_10002BF24(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0) {
    return sub_100020FC8(a2, 8u);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002BF40(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0) {
    return sub_100021158(a2, 8u);
  }
  __break(0x5516u);
  return result;
}

uint64_t *sub_10002BF5C(uint64_t *result)
{
  return result;
}

uint64_t sub_10002BF74( uint64_t result, uint64_t a2, __int16 a3, int a4, uint64_t a5, const void *a6, unsigned int a7)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_14;
  }
  if ((a2 + 32) < 0x40)
  {
    uint64_t result = sub_1000ABB10(a5, 0, a2, a3, a4, a6, a7);
    if (a4 == -1)
    {
LABEL_8:
      if (a5)
      {
        if ((a5 & 7) == 0)
        {
          uint64_t v9 = *(void *)(a5 + 32);
          if (v9)
          {
            if ((v9 & 7) == 0)
            {
              double v10 = (uint64_t *)(v9 + 40);
            }
          }
        }
      }

      goto LABEL_14;
    }

    if (result && (result & 7) == 0)
    {
      *(_BYTE *)(result + 132) |= 2u;
      goto LABEL_8;
    }

LABEL_14:
    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
LABEL_15:
  __break(0x5516u);
}

LABEL_15:
      pthread_mutex_unlock(&self->_nowPlayingInfoLock);
      return v19;
    }
  }

  __break(0x5516u);
  return result;
}

        double v14 = v6 + 1;
        if (__OFADD__((_DWORD)v6, 1))
        {
          __break(0x5500u);
          goto LABEL_33;
        }

        unint64_t v6 = v14;
        if (v5 <= v14) {
          goto LABEL_18;
        }
      }
    }
  }

  uint64_t v8 = 0LL;
  uint64_t v7 = 0LL;
LABEL_18:
  repeatModeCache = self->repeatModeCache;
  if ((_DWORD)v7 != repeatModeCache || repeatModeCache == 0)
  {
    float v17 = (const void *)((uint64_t (*)(void))MRMediaRemoteCopyShuffleModeDescription)();
    uint64_t v18 = (const void *)MRMediaRemoteCopyShuffleModeDescription(v7);
    NSLog(@"MR: repeatMode %@->%@", v17, v18);
    CFRelease(v17);
    CFRelease(v18);
    self->repeatModeCache = v7;
    self->expectedRepeatModeTimestamp = 0;
    -[MediaPlayerHelper _repeatModeChanged:](self, "_repeatModeChanged:", 0LL);
  }

  if (((unint64_t)&self->shuffleModeCache & 3) != 0)
  {
LABEL_33:
    __break(0x5516u);
  }

  else
  {
    shuffleModeCache = self->shuffleModeCache;
    if ((_DWORD)v8 != (_DWORD)shuffleModeCache || !(_DWORD)shuffleModeCache)
    {
      uint64_t v20 = (const void *)MRMediaRemoteCopyShuffleModeDescription(shuffleModeCache);
      CGContextRef v21 = (const void *)MRMediaRemoteCopyShuffleModeDescription(v8);
      NSLog(@"MR: shuffleMode %@->%@", v20, v21);
      CFRelease(v20);
      CFRelease(v21);
      self->shuffleModeCache = v8;
      self->expectedShuffleModeTimestamp = 0;
      -[MediaPlayerHelper _shuffleModeChanged:](self, "_shuffleModeChanged:", 0LL);
    }
  }

  __break(0x550Au);
}

    double v11 = 4LL;
    switch((int)a4)
    {
      case 0:
        goto LABEL_15;
      case 3:
        goto LABEL_37;
      case 4:
        goto LABEL_18;
      case 5:
        goto LABEL_24;
      case 6:
        goto LABEL_25;
      case 7:
        goto LABEL_19;
      case 8:
        goto LABEL_20;
      case 9:
        goto LABEL_21;
      case 11:
        goto LABEL_22;
      case 12:
        goto LABEL_23;
      case 13:
        goto LABEL_26;
      case 14:
        goto LABEL_27;
      case 15:
        goto LABEL_28;
      case 16:
        goto LABEL_29;
      case 20:
        goto LABEL_30;
      case 21:
        goto LABEL_31;
      case 22:
        double v11 = 111LL;
        goto LABEL_37;
      case 23:
        double v11 = 112LL;
        goto LABEL_37;
      case 24:
        double v11 = 113LL;
        goto LABEL_37;
      case 25:
        double v11 = 114LL;
        goto LABEL_37;
      case 26:
        double v11 = 115LL;
        goto LABEL_37;
      default:
        goto LABEL_9;
    }
  }

  float v13 = (const __CFString **)&kMRMediaRemoteMediaTypeAudio;
  double v11 = 4LL;
  switch((int)a4)
  {
    case 0:
LABEL_15:
      double v15 = sub_100036FF0();
      if (!v15 || (v15 & 7) != 0) {
        goto LABEL_79;
      }
      LODWORD(a4) = 0;
      double v11 = (*(unsigned int (**)(uint64_t))(*(void *)v15 + 416LL))(v15) == 1;
LABEL_37:
      double v16 = &stru_10010A828;
      float v13 = (const __CFString **)&kMRMediaRemoteMediaTypeAudio;
      double v14 = a4;
      switch(a3)
      {
        case 0:
          goto LABEL_41;
        case 1:
          goto LABEL_38;
        case 2:
          goto LABEL_39;
        case 3:
          goto LABEL_40;
        default:
          goto LABEL_47;
      }

    case 1:
    case 2:
    case 10:
LABEL_9:
      double v11 = 0xFFFFFFFFLL;
      goto LABEL_37;
    case 3:
LABEL_40:
      double v16 = *v13;
      if (*v13)
      {
LABEL_41:
        if (!a2 || (a2 & 7) != 0) {
          goto LABEL_79;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 216LL))(a2) == 2)
        {
          WORD2(keys[0]) = -21846;
          LODWORD(keys[0]) = -1431655766;
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 192LL))(keys, a2);
          if (keys == (void **)-1LL || (unint64_t)keys + 5 <= 3)
          {
            __break(0x5513u);
            return;
          }

          float v17 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02X:%02X:%02X:%02X:%02X:%02X",  LOBYTE(keys[0]),  BYTE1(keys[0]),  BYTE2(keys[0]),  BYTE3(keys[0]),  BYTE4(keys[0]),  BYTE5(keys[0]));
        }

        else
        {
          float v17 = 0LL;
        }

        keys[0] = (void *)kMRMediaRemoteOptionMediaType;
        keys[1] = (void *)kMRMediaRemoteOptionSourceID;
        float v19 = &stru_10010A828;
        if (v17) {
          float v19 = (const __CFString *)v17;
        }
        values[0] = (void *)v16;
        values[1] = (void *)v19;
        uint64_t v18 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      }

      else
      {
LABEL_47:
        uint64_t v18 = 0LL;
      }

      if (a5 == 131073)
      {
        if ((_DWORD)a4 == 21)
        {
          double v11 = 11LL;
          goto LABEL_61;
        }

        if ((_DWORD)a4 == 20)
        {
          double v11 = 9LL;
LABEL_61:
          sub_100050E4C(v11);
LABEL_67:
          MRMediaRemoteSendCommand(v11, v18);
          if (((1 << v11) & 0xB) != 0)
          {
            CGContextRef v21 = sub_100036FF0();
            if (v21 && (v21 & 7) == 0)
            {
              sub_100041EC0(v21, v11);
              goto LABEL_76;
            }

            goto LABEL_79;
          }

          if (((1 << v11) & 0xA00) == 0) {
            goto LABEL_76;
          }
          goto LABEL_73;
        }

        sub_100050E4C(v11);
        uint64_t v20 = sub_100036FF0();
        if (v20 && (v20 & 7) == 0)
        {
          (*(void (**)(uint64_t))(*(void *)v20 + 688LL))(v20);
          goto LABEL_67;
        }

        __break(0x5507u);
        goto LABEL_15;
      }

      return 0;
    }

  __break(0x5507u);
  return result;
}

  __break(0x5513u);
  return result;
}

  if (v8 >> 3 == 1)
  {
    double v10 = 256LL;
  }

  else
  {
    if (v8 >> 3 != 2) {
      return;
    }
    double v10 = 512LL;
  }

  a1[4] = v10;
}

  __break(0x5500u);
}

    __break(0x5513u);
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  uint64_t result = dispatch_get_global_queue(0LL, 0LL);
  *((void *)v2 + 10) = result;
  if (a2 <= 2)
  {
    unint64_t v5 = a2;
    unint64_t v6 = 8LL * a2;
    goto LABEL_11;
  }

  __break(0x5513u);
}

  __break(0x5507u);
  return result;
}

  __break(0x5500u);
  return result;
}

    uint64_t result = (uint64_t)operator new[](v9);
    if (v7 > 0xFF) {
      goto LABEL_83;
    }
    float v13 = (void *)result;
    *(_BYTE *)uint64_t result = v7;
    if (v8 >= 0x10000) {
      goto LABEL_83;
    }
    if (v8 < v6)
    {
      double v14 = ~result;
      double v15 = (void *)(v3 + 2016);
      double v16 = 1;
      float v17 = v8;
      while (1)
      {
        uint64_t result = sub_100084EB8(v4, v17);
        uint64_t v18 = (unsigned __int16)(v16 + 1);
        if ((_DWORD)v18 != v16 + 1) {
          break;
        }
        if (v14 < v16) {
          goto LABEL_82;
        }
        *((_BYTE *)v13 + v16) = result;
        float v19 = *v15;
        if (__CFADD__(*v15, 8LL * v8)) {
          goto LABEL_82;
        }
        if (!v19) {
          goto LABEL_81;
        }
        uint64_t v20 = (uint64_t *)(v19 + 8LL * v8);
        CGContextRef v21 = *v20 && (*v20 & 7) == 0;
        uint64_t v22 = *v20 + 4;
        if (!v21 || (v22 & 3) != 0) {
          goto LABEL_81;
        }
        uint64_t v24 = *(_DWORD *)v22;
        if (v24 >= 0x200) {
          goto LABEL_84;
        }
        if ((_DWORD)v18 == 0xFFFF) {
          break;
        }
        *((_BYTE *)v13 + v1_Block_object_dispose(va, 8) = BYTE1(v24);
        uint64_t v25 = *v20;
        if (!*v20) {
          goto LABEL_81;
        }
        if ((v25 & 7) != 0) {
          goto LABEL_81;
        }
        double v26 = (unsigned int *)(v25 + 4);
        unsigned int v27 = *v26;
        if (v27 > 0x1FF) {
          goto LABEL_84;
        }
        unint64_t v28 = (unsigned __int16)(v16 + 2);
        if ((_DWORD)v28 == 0xFFFF) {
          break;
        }
        if (v14 < v28) {
          goto LABEL_82;
        }
        *((_BYTE *)v13 + v2_Block_object_dispose(va, 8) = v27;
        uint64_t v29 = *v20;
        if (!*v20) {
          goto LABEL_81;
        }
        if ((v29 & 7) != 0) {
          goto LABEL_81;
        }
        uint64_t v30 = (int *)(v29 + 8);
        unsigned int v31 = *v30;
        uint64_t v32 = (unsigned __int16)(v16 + 3);
        if (v14 < v32) {
          goto LABEL_82;
        }
        *((_BYTE *)v13 + v32) = v31;
        unint64_t v33 = *v20;
        if (!*v20 || (v33 & 7) != 0 || ((v33 + 12) & 3) != 0) {
          goto LABEL_81;
        }
        uint64_t v34 = v16 + 4;
        if (*(_BYTE *)(v33 + 12))
        {
          uint64_t v35 = (unsigned __int16)(v16 + 4);
          if (v14 < v35) {
            goto LABEL_82;
          }
          uint64_t v34 = v16 + 5;
          *((_BYTE *)v13 + v35) = *(_BYTE *)(v33 + 13);
          unint64_t v33 = *v20;
          if (!*v20) {
            goto LABEL_81;
          }
        }

        else if (!v33)
        {
          goto LABEL_81;
        }

        if ((v33 & 7) != 0 || ((v33 + 8) & 7) != 0) {
          goto LABEL_81;
        }
        double v36 = *(_DWORD *)(v33 + 8);
        if (v36 > 0xF) {
          goto LABEL_84;
        }
        if (v36 == 4)
        {
          unsigned int v37 = 0LL;
          while (((v33 + 24) & 7) == 0)
          {
            uint64_t v38 = *(void *)(v33 + 16);
            if (__CFADD__(v38, v37)) {
              goto LABEL_82;
            }
            if (!v38) {
              goto LABEL_81;
            }
            if (((v34 + 1) & 0x10000) != 0) {
              goto LABEL_83;
            }
            if (v14 < v34) {
              goto LABEL_82;
            }
            *((_BYTE *)v13 + v34) = *(_BYTE *)(v38 + v37);
            unint64_t v33 = *v20;
            if (*v20)
            {
              ++v37;
              ++v34;
              if ((v33 & 7) == 0) {
                continue;
              }
            }

            goto LABEL_81;
          }

          goto LABEL_81;
        }

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5515u);
}

  __break(0x550Au);
  return result;
}

      __break(0x5516u);
LABEL_15:
      __break(0x550Au);
    }
  }

  return result;
}

  __break(0x5513u);
  return result;
}

    __break(0x5512u);
    goto LABEL_15;
  }

      __break(0x5516u);
      goto LABEL_15;
    }
  }

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x550Au);
}

    __break(0x5516u);
    goto LABEL_15;
  }

  __break(0x5500u);
  return result;
}

NSData *sub_10002C030(NSData *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    id v4 = 0LL;
    uint64_t v2 = (pthread_mutex_t *)&result[15];
    pthread_mutex_lock((pthread_mutex_t *)&result[15]);
    double v3 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v1[13].super.isa,  200LL,  0LL,  &v4);
    if (!v3) {
      NSLog(@"ERROR - can't create plist for iap data: %@", [v4 description]);
    }
    pthread_mutex_unlock(v2);
    return v3;
  }

  return result;
}

void sub_10002C0BC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (*(_BYTE *)(a1 + 112))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
    if (qword_10011BC80)
    {

      qword_10011BC80 = objc_alloc_init(&OBJC_CLASS___NSDate);
    }

    [*(id *)(a1 + 104) removeAllObjects];
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 120));
  }

  else
  {
    NSLog(@"ERROR - can't clear logged iap packets because the feature is disabled");
  }

void sub_10002C14C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_20:
    __break(0x5505u);
    return;
  }

  if (!*(_BYTE *)(a1 + 112))
  {
    NSLog(@"ERROR - can't save logged iap packets because the feature is disabled");
    return;
  }

  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 120));
  double v3 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  *(void *)(a1 + 104),  200LL,  0LL,  0LL);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 120));
  if (v3)
  {
    uint64_t v9 = 0LL;
    id v4 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", qword_10011C888);
    if ((CPFileBuildDirectoriesToPath(v4, 511LL) & 1) == 0) {
      NSLog(@"ERROR - can't create directory to save log file %@", v4);
    }
    -[NSDate timeIntervalSince1970](+[NSDate date](&OBJC_CLASS___NSDate, "date"), "timeIntervalSince1970");
    double v6 = v5 * 1000.0;
    if (v6 <= -9.22337204e18 || v6 >= 9.22337204e18) {
      goto LABEL_20;
    }
    uint64_t v8 = -[NSString stringByAppendingPathComponent:]( v4,  "stringByAppendingPathComponent:",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"iap_log_%lld.plist",  (uint64_t)v6));
    if (-[NSData writeToURL:options:error:]( v3,  "writeToURL:options:error:",  +[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v8),  0LL,  &v9))
    {
      NSLog(@"iap packet log file saved to: %@", v8);
      sub_10002C300(a1, v8);
    }

    else
    {
      NSLog(@"ERROR - can't save iap log file to %@:%@", v8, v9);
    }
  }

  else
  {
    NSLog(@"ERROR - could not serialize iap logged packets");
  }
}

void sub_10002C300(uint64_t a1, void *a2)
{
  if (!a1) {
    goto LABEL_10;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_10;
  }
  HIDWORD(v10) = -1431655766;
  keys[0] = (void *)kCFUserNotificationAlertHeaderKey;
  keys[1] = (void *)kCFUserNotificationDefaultButtonTitleKey;
  keys[2] = (void *)kCFUserNotificationAlertTopMostKey;
  keys[3] = @"DismissOnLock";
  CFTypeRef cf = &stru_10010A828;
  CFBooleanRef v13 = kCFBooleanTrue;
  CFBooleanRef v14 = kCFBooleanTrue;
  values = a2;
  uint64_t v3 = sub_10002CD78();
  if (!v3 || (v3 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
LABEL_11:
    __break(0x5513u);
  }

  id v4 = sub_10002D200((__CFString *)v3, (uint64_t)@"DISMISS_STRING");
  CFTypeRef cf = v4;
  double v5 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)&values,  4LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  double v6 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 3uLL, (SInt32 *)&v10 + 1, v5);
  *(void *)(a1 + 96) = v6;
  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource( kCFAllocatorDefault,  v6,  (CFUserNotificationCallBack)nullsub_8,  0LL);
  if (RunLoopSource)
  {
    uint64_t v8 = RunLoopSource;
    Main = CFRunLoopGetMain();
    CFRunLoopAddSource(Main, v8, kCFRunLoopCommonModes);
    CFRelease(v8);
  }

  else
  {
    sub_10002C4B0(a1);
  }

  CFRelease(v5);
  CFRelease(values);
  CFRelease(cf);
}

void sub_10002C4B0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = *(const void **)(a1 + 96);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 96) = 0LL;
    }
  }

uint64_t sub_10002C4EC(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    uint64_t v3 = sub_1000205E4(a2);
    if (v3)
    {
      NSLog( @"%s:%s:%d ERROR: Already registered sessionID=0x%x pDbgCmd=%hhx",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGRegisterDebugSession",  545LL,  a2,  v3);
      return 1LL;
    }

    uint64_t result = (uint64_t)operator new(0x68uLL);
    if ((result & 0xF) == 0)
    {
      uint64_t v4 = result;
      sub_100020764((void *)result, a2);
      NSLog(@"%s:%d sessionID=0x%x pDbgCmd=%hhx", "DBGRegisterDebugSession", 541LL, a2, v4);
      return 1LL;
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10002C598(_Unwind_Exception *a1)
{
}

void sub_10002C5AC(uint64_t a1, uint64_t a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    uint64_t v3 = sub_1000205E4(a2);
    if (!v3)
    {
      NSLog( @"%s:%s:%d ERROR: Invalid sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGUnregisterDebugSession",  561LL,  a2);
      return;
    }

    uint64_t v4 = v3;
    NSLog(@"%s:%d sessionID=0x%x pDbgCmd=%hhx", "DBGUnregisterDebugSession", 556LL, a2, v3);
    if ((v4 & 7) == 0)
    {
      (*(void (**)(uint64_t *))(*v4 + 8))(v4);
      return;
    }
  }

  __break(0x5516u);
}

std::string::size_type sub_10002C658(std::string::size_type result, uint64_t a2, std::string::value_type *a3)
{
  if (result && (result & 7) == 0)
  {
    uint64_t result = (std::string::size_type)sub_1000205E4(a2);
    if (!result)
    {
      NSLog( @"%s:%s:%d ERROR: Invalid sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGHandleCommand",  578LL,  a2);
      return 0LL;
    }

    if ((result & 7) == 0) {
      return sub_100022FB0(result, a3);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10002C6E4(uint64_t result, uint64_t a2, _DWORD *a3, BOOL *a4, char *a5, unsigned int a6)
{
  if (result && (result & 7) == 0)
  {
    if (!a6)
    {
      NSLog( @"%s:%s:%d sessionID=0x%x ERROR: strSize=0",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGGetResponse",  605LL,  a2);
      return 1LL;
    }

    uint64_t result = (uint64_t)sub_1000205E4(a2);
    if (a4)
    {
      *a4 = 0;
      if (a5)
      {
        *a5 = 0;
        if (!result)
        {
          NSLog( @"%s:%s:%d ERROR: Invalid sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGGetResponse",  600LL,  a2);
          return 1LL;
        }

        if ((result & 7) == 0)
        {
          sub_100020A44(result, a3, a4, a5, a6);
          return 1LL;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10002C7CC(uint64_t result, uint64_t a2, const std::string::value_type *a3, int a4)
{
  if (result && (result & 7) == 0)
  {
    uint64_t result = (uint64_t)sub_1000205E4(a2);
    if (!result)
    {
      NSLog( @"%s:%s:%d ERROR: Invalid sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGSendResponse",  621LL,  a2);
      return 1LL;
    }

    if ((result & 7) == 0)
    {
      sub_100020C80(result, a3, 1u, a4);
      return 1LL;
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10002C864( uint64_t result, uint64_t a2, const std::string::value_type *a3, unsigned int a4, int a5)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_12;
  }
  if ((_DWORD)a2)
  {
    uint64_t result = (uint64_t)sub_1000205E4(a2);
    if (!result)
    {
      NSLog( @"%s:%s:%d ERROR: Invalid sessionID=0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/InternalTesting.mm",  "DBGSendNotification",  639LL,  a2);
      return 1LL;
    }

    if ((result & 7) == 0)
    {
      if (a4 < 0x10)
      {
        sub_100020E90(result, a3, a4, a5);
        return 1LL;
      }

      goto LABEL_13;
    }

BOOL sub_10002C92C(BOOL result, const char *a2)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v4 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
    Boolean keyExistsAndHasValidFormat = -86;
    AppBooleanint Value = CFPreferencesGetAppBooleanValue(v4, @"com.apple.iapd", &keyExistsAndHasValidFormat);
    if (v4) {
      CFRelease(v4);
    }

    return AppBooleanValue != 0;
  }

  return result;
}

BOOL sub_10002C9CC(BOOL result, void *a2)
{
  if (result && !(result & 7)) {
    return sub_10002C9EC(result, @"AdapterID", a2);
  }
  __break(0x5516u);
  return result;
}

BOOL sub_10002C9EC(BOOL result, const void *a2, void *a3)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    double v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    double v6 = IOPSCopyExternalPowerAdapterDetails();
    if (v6)
    {
      uint64_t v7 = v6;
      if (CFDictionaryContainsKey(v6, a2))
      {
        int Value = CFDictionaryGetValue(v7, a2);
        CFShow(Value);
        uint64_t v9 = (const __CFNumber *)CFDictionaryGetValue(v7, a2);
        BOOL v10 = CFNumberGetValue(v9, kCFNumberShortType, a3) != 0;
      }

      else
      {
        BOOL v10 = 0LL;
      }

      CFRelease(v7);
    }

    else
    {
      BOOL v10 = 0LL;
    }

    return v10;
  }

  return result;
}

BOOL sub_10002CA9C(BOOL result, void *a2)
{
  if (result && !(result & 7)) {
    return sub_10002C9EC(result, @"Current", a2);
  }
  __break(0x5516u);
  return result;
}

BOOL sub_10002CABC(BOOL result, void *a2)
{
  if (result && !(result & 7)) {
    return sub_10002C9EC(result, @"PMUConfiguration", a2);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CADC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CAF4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CB0C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CB24(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB38(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB4C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB60(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB74(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB88(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CB9C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CBB0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CBC4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CBDC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CBF4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CC0C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CC20(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CC34(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CC48(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CC5C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10002CC70(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CC88(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CCA0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CCB8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CCD0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CCE8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD00(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD18(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD30(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD48(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD60(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002CD78()
{
  if (qword_10011BC90 != -1) {
    dispatch_once(&qword_10011BC90, &stru_100103C60);
  }
  return qword_10011BC88;
}

void sub_10002CDB8(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x490uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002CE14(v1);
    qword_10011BC88 = v2;
  }

void sub_10002CE00(_Unwind_Exception *a1)
{
}

uint64_t sub_10002CE14(uint64_t result)
{
  if (!result || (uint64_t v1 = (void *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    void *v1 = off_100103C90;
    v1[12] = 0LL;
    v1[13] = 0LL;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  v1,  (CFNotificationCallback)sub_10002CE98,  @"com.apple.language.changed",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    return (uint64_t)v1;
  }

  return result;
}

void sub_10002CE80(_Unwind_Exception *a1)
{
}

void sub_10002CE98(uint64_t a1, CFTypeRef *a2)
{
  if (!a2 || (a2 & 7) != 0 || (uint64_t v3 = a2 + 13, ((unint64_t)(a2 + 13) & 7) != 0))
  {
    __break(0x5516u);
LABEL_18:
    __break(0x5500u);
    goto LABEL_19;
  }

  if (*v3)
  {
    CFRelease(*v3);
    CFTypeRef *v3 = 0LL;
  }

  std::string __p = 0LL;
  unint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  (*((void (**)(CFTypeRef *, void, void **))*a2 + 12))(a2, 0LL, &__p);
  unint64_t v4 = HIBYTE(v11);
  int v5 = SHIBYTE(v11);
  if (v11 < 0) {
    unint64_t v4 = v10;
  }
  unint64_t v6 = v4 + 2;
  if (v4 >= 0xFFFFFFFFFFFFFFFELL) {
    goto LABEL_18;
  }
  uint64_t v7 = (char *)operator new[](v4 + 2);
  char *v7 = 0;
  if (v7 == (char *)-1LL)
  {
LABEL_19:
    __break(0x5513u);
    goto LABEL_20;
  }

  if (!v6)
  {
LABEL_20:
    __break(0x5515u);
    return;
  }

  if (v5 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  strlcpy(v7 + 1, p_p, v6 - 1);
  (*((void (**)(CFTypeRef *, uint64_t, void, char *, unint64_t))*a2 + 8))(a2, 1376277LL, 0LL, v7, v6);
  operator delete[](v7);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
}

void sub_10002CFA8( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_10002CFC4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10002D034(uint64_t result)
{
  if (!result || (uint64_t v1 = (const void *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100103C90;
    uint64_t v2 = *(const void **)(result + 104);
    if (v2) {
      CFRelease(v2);
    }
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, v1, @"com.apple.language.changed", 0LL);
    return sub_10002CFC4((uint64_t)v1);
  }

  return result;
}

void sub_10002D094(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D0AC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10002D034(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10002D0C0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002D034(a1);
    operator delete((void *)a1);
  }

void sub_10002D0F8(_Unwind_Exception *a1)
{
}

void sub_10002D10C(__CFString *a1, uint64_t a2, std::string *a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    int v5 = a2 - 1376257;
    if ((a2 - 1376257) < 0x14 && ((0xFFFBFu >> v5) & 1) != 0)
    {
      unint64_t v6 = sub_10002D200(a1, (uint64_t)*(&off_100103D28 + v5));
      if (v6)
      {
        uint64_t v7 = v6;
        p_data = (char *)&a1[3].data;
        int CString = CFStringGetCString(v6, p_data, 1024LL, 0x8000100u);
        CFRelease(v7);
        if (CString)
        {
          std::string::assign(a3, p_data);
          return;
        }
      }
    }

    else
    {
      NSLog(@"unknown loc string %d", a2);
    }

    if (((char)a3->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3->__r_.__value_.__s.__size_ = 0;
      return;
    }

    if (a3->__r_.__value_.__r.__words[0])
    {
      *a3->__r_.__value_.__l.__data_ = 0;
      a3->__r_.__value_.__l.__size_ = 0LL;
      return;
    }
  }

  __break(0x5516u);
}

__CFString *sub_10002D200(__CFString *result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    unint64_t v4 = +[NSBundle bundleWithIdentifier:](&OBJC_CLASS___NSBundle, "bundleWithIdentifier:", kIAPFrameworkBundleID);
    if (a2)
    {
      if (v4)
      {
        int v5 =  -[NSBundle localizedStringForKey:value:table:]( v4,  "localizedStringForKey:value:table:",  a2,  &stru_10010A828,  @"Framework");
        if (v5)
        {
          unint64_t v6 = v5;
          if (!-[__CFString isEqualToString:](v5, "isEqualToString:", a2))
          {
LABEL_9:

            return v6;
          }
        }
      }
    }

    unint64_t v6 = &stru_10010A828;
    goto LABEL_9;
  }

  __break(0x5516u);
  return result;
}

void sub_10002D2B0(uint64_t a1, unsigned int a2, std::string *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_15;
  }
  if (((char)a3->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3->__r_.__value_.__s.__size_ = 0;
    goto LABEL_7;
  }

  if (!a3->__r_.__value_.__r.__words[0])
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *a3->__r_.__value_.__l.__data_ = 0;
  a3->__r_.__value_.__l.__size_ = 0LL;
LABEL_7:
  if (a2 >= 2)
  {
LABEL_16:
    __break(0x550Au);
    return;
  }

  if (a2 == 1)
  {
    uint64_t v7 = CFLocaleCopyCurrent();
    Identifier = CFLocaleGetIdentifier(v7);
    CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString( kCFAllocatorDefault,  Identifier);
    __int128 v12 = (std::string::value_type *)(a1 + 1152);
    if (CFStringGetCString(CanonicalLocaleIdentifierFromString, v12, 16LL, 0x8000100u)) {
      std::string::assign(a3, v12);
    }
  }

  else
  {
    BundleWithIdentifier = CFBundleGetBundleWithIdentifier(@"com.apple.UIKit");
    unint64_t v6 = CFBundleCopyBundleLocalizations(BundleWithIdentifier);
    uint64_t v7 = CFBundleCopyLocalizationsForPreferences(v6, 0LL);
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, 0LL);
    CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString( kCFAllocatorDefault,  ValueAtIndex);
    unint64_t v10 = (std::string::value_type *)(a1 + 1136);
    if (CFStringGetCString(CanonicalLocaleIdentifierFromString, v10, 16LL, 0x8000100u)) {
      std::string::assign(a3, v10);
    }
    CFRelease(v6);
  }

  CFRelease(v7);
  CFRelease(CanonicalLocaleIdentifierFromString);
}

uint64_t sub_10002D40C()
{
  if (qword_10011BCA0 != -1) {
    dispatch_once(&qword_10011BCA0, &stru_100103DC8);
  }
  return qword_10011BC98;
}

void sub_10002D44C(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x60uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = (void *)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(v1);
    void *v2 = off_100103DF8;
    qword_10011BC98 = (uint64_t)v2;
  }

void sub_10002D4A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D4B4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10002D524(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10002D4B4(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10002D538(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002D4B4(a1);
    operator delete((void *)a1);
  }

void sub_10002D570(_Unwind_Exception *a1)
{
}

uint64_t sub_10002D584(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D59C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D5B4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D5CC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D5E4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D5FC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D614(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D62C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D644(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D65C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D674(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D68C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D6A4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D6BC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D6D4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D6EC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D704(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D71C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D734(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D74C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D764(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D77C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D794(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D7AC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D7C4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D7DC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D7F4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D80C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D824(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D83C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D854(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D86C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D884(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D89C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D8B4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D8CC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D8E4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D8FC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D914(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D92C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D944(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D95C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D974(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D98C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D9A4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10002D9BC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_10002DF30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

id sub_10002DF5C(uint64_t a1)
{
  id v2 = +[MPRadioLibrary defaultRadioLibrary](&OBJC_CLASS___MPRadioLibrary, "defaultRadioLibrary");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10002DFD0;
  v4[3] = &unk_100103FF8;
  uint64_t v6 = *(void *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 32);
  return [v2 getRecentStationGroupsWithCompletionHandler:v4];
}

void sub_10002DFD0(void *a1, void *a2, uint64_t a3)
{
  NSLog( @"%s:%d recentStationsGroups=%@ error=%@",  "-[iAPMediaLibraryHelper _updateRadioLibraryList]_block_invoke_2",  629LL,  a2,  a3);
  uint64_t v6 = a1[4];
  if (a3)
  {
    *(_BYTE *)(v6 + 12) = 1;
LABEL_10:
    __int128 v12 = (dispatch_semaphore_s *)a1[5];
    if (v12)
    {
      dispatch_semaphore_signal(v12);
      CFBooleanRef v13 = (dispatch_object_s *)a1[5];
      if (v13)
      {
        dispatch_release(v13);
        return;
      }
    }

    __break(0x5510u);
    goto LABEL_14;
  }

  *(_BYTE *)(v6 + 12) = 0;
  if (*(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL) < 2u)
  {
    if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL))
    {
      uint64_t v7 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
      -[NSNotificationCenter postNotificationName:object:]( v7,  "postNotificationName:object:",  MPRadioLibraryStationsDidChangeNotification,  0LL);
    }

    else
    {
      uint64_t v8 = (void **)(a1[4] + 24LL);
      uint64_t v9 = *v8;
      id v10 = a2;
      uint64_t v11 = a1[4] + 24LL;
      if ((v11 & 7) != 0) {
        goto LABEL_15;
      }
      *(void *)uint64_t v11 = v10;
      if (v9) {
    }
      }

    goto LABEL_10;
  }

void sub_10002E484( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002E49C(uint64_t a1, uint64_t a2)
{
}

void sub_10002E4AC(uint64_t a1)
{
}

BOOL sub_10002E4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7 == a2)
  {
    sub_1000CEA98( 6u,  @"%s:%d curIndex=%d station=%@",  "-[iAPMediaLibraryHelper stationForIndex:]_block_invoke",  778LL,  a2,  a6);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = a6;
  }

  return v7 == v6;
}

void sub_10002E5CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002E5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  id result = [a6 localizedName];
  if ((_DWORD)a2 != -1)
  {
    if (dword_1001197D0 >= 100) {
      __int128 v12 = @"%03u %@ - %@";
    }
    else {
      __int128 v12 = @"%02u %@ - %@";
    }
    CFBooleanRef v13 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  v12,  (a2 + 1),  result,  [a5 localizedTitle]);
    sub_1000CEA98( 6u,  @"%s:%d count=%d station=%@ name=%@",  "-[iAPMediaLibraryHelper stationNameForIndex:]_block_invoke",  814LL,  a2,  a6,  v13);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = v13;
    return (id)(v7 == a2);
  }

  __break(0x5500u);
  return result;
}

id sub_10002E770()
{
  dword_1001197D8 = -1;
  dword_1001197DC = -1;
  if (!dword_1001197D4) {
    return [(id)qword_10011BCB8 reset];
  }
  return result;
}

uint64_t sub_10002E834()
{
  uint64_t result = (uint64_t)operator new(0x68uLL);
  if ((result & 0xF) != 0 || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002E88C(result);
    return v1;
  }

  return result;
}

void sub_10002E878(_Unwind_Exception *a1)
{
}

uint64_t sub_10002E88C(uint64_t result)
{
  if (!result || (uint64_t v1 = (void *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    void *v1 = off_100104078;
    v1[12] = -1LL;
    id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (dword_1001197D4 == -1) {
      dword_1001197D4 = CFPreferencesGetAppBooleanValue(@"DontUseMLCache", @"com.apple.iapd", 0LL) != 0;
    }
    if (dword_1001197C8 == -1)
    {
      AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"doNotFakeTiltPlaylist", @"com.apple.iapd", 0LL);
      dword_1001197C8 = AppBooleanValue == 0;
      sub_1000CEA98( 0,  @"MediaLibrary::%s:%d __fakeTiltPlaylist=%d",  "MediaLibrary",  883LL,  AppBooleanValue == 0);
    }

    if (dword_1001197CC == -1)
    {
      AppIntegerint Value = CFPreferencesGetAppIntegerValue(@"FakeNumTiltTracks", @"com.apple.iapd", 0LL);
      if (AppIntegerValue) {
        uint64_t v5 = AppIntegerValue;
      }
      else {
        uint64_t v5 = 2LL;
      }
      dword_1001197CC = v5;
      sub_1000CEA98(0, @"MediaLibrary::%s:%d __fakeNumTiltTracks=%d", "MediaLibrary", 892LL, v5);
    }

    if (dword_1001197D0 == 25)
    {
      int v6 = CFPreferencesGetAppIntegerValue(@"MaxTiltStations", @"com.apple.iapd", 0LL);
      if (v6 >= 1) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 25LL;
      }
      dword_1001197D0 = v7;
      sub_1000CEA98(0, @"MediaLibrary::%s:%d __MaxTiltStations=%d", "MediaLibrary", 902LL, v7);
    }

    if (!qword_10011BCA8) {
      qword_10011BCA8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    if (!qword_10011BCB0)
    {
      +[MPMediaLibrary setLibraryServerDisabled:](&OBJC_CLASS___MPMediaLibrary, "setLibraryServerDisabled:", 1LL);
      +[MPMediaQuery setFilteringDisabled:](&OBJC_CLASS___MPMediaQuery, "setFilteringDisabled:", 1LL);
      qword_10011BCB0 = objc_alloc_init(&OBJC_CLASS___MPMediaQuery);
      (*(void (**)(void *, uint64_t, void))(*v1 + 208LL))(v1, 2097485LL, 0LL);
    }

    if (!qword_10011BCB8) {
      qword_10011BCB8 = objc_alloc_init(&OBJC_CLASS___MediaLibraryCache);
    }

    return (uint64_t)v1;
  }

  return result;
}

void sub_10002EACC(_Unwind_Exception *a1)
{
}

uint64_t sub_10002EAE4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10002EB54(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100104078;
    id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (qword_10011BCC0 != -1) {
      dispatch_once(&qword_10011BCC0, &stru_100104340);
    }
    if ((objc_opt_respondsToSelector(qword_10011BCB0, qword_10011BCC8) & 1) != 0) {
      [(id)qword_10011BCB0 performSelector:qword_10011BCC8];
    }
    sub_10002EC3C();
    sub_10002EC84();

    return sub_10002EAE4(v1);
  }

  return result;
}

void sub_10002EC00(_Unwind_Exception *a1)
{
}

void sub_10002EC18(id a1)
{
  qword_10011BCC8 = (uint64_t)sel_registerName("flushLog");
}

id sub_10002EC3C()
{
  id result = [(id)qword_10011BCB0 setFilterPredicates:0];
  if (!dword_1001197D4) {
    return [(id)qword_10011BCB8 reset];
  }
  return result;
}

void sub_10002EC84()
{
  uint64_t v0 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", sub_100031104(0LL));
  sub_10002F3F8(MPMediaItemPropertyMediaType, (uint64_t)v0);
  uint64_t v1 = sub_100036FF0();
  if (!v1 || (v1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 624LL))(v1))
  {
    sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
  }

uint64_t sub_10002ED14(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10002EB54(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10002ED28(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10002EB54(a1);
    operator delete((void *)a1);
  }

void sub_10002ED60(_Unwind_Exception *a1)
{
}

id sub_10002ED74(id result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    return [(id)qword_10011BCE0 stationCount];
  }

  return result;
}

id sub_10002EDC4(void *a1, unsigned int a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 stationForIndex:a3];
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    return [(id)qword_10011BCE0 stationForIndex:a2];
  }

id sub_10002EE24(id result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v2 = -[MPMediaLibrary uniqueIdentifier]( +[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary"),  "uniqueIdentifier");
    if (v2) {
      id v3 = [v2 hash];
    }
    else {
      id v3 = 0LL;
    }

    return v3;
  }

  return result;
}

id sub_10002EE88(id result, uint64_t *a2)
{
  if (result && (result & 7) == 0)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    unint64_t v4 = -[MPMediaLibrary lastModifiedDate]( +[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary"),  "lastModifiedDate");
    uint64_t v5 = v4;
    if (v4)
    {
      id result = -[NSDate timeIntervalSince1970](v4, "timeIntervalSince1970");
      if (v6 <= -9.22337204e18 || v6 >= 9.22337204e18) {
        goto LABEL_13;
      }
      uint64_t v8 = (uint64_t)v6;
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    *a2 = v8;

    return (id)(v5 != 0LL);
  }

  __break(0x5516u);
LABEL_13:
  __break(0x5505u);
  return result;
}

void sub_10002EF2C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002EC3C();
    [(id)qword_10011BCB0 setGroupingType:0];
    sub_10002EC84();
    *(void *)(a1 + 96) = -1LL;
  }

void sub_10002EF94(uint64_t a1, int a2, int a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2)
    {
      if ((byte_10011BCD0 & 1) == 0)
      {
        uint64_t v9 = v5;
        double v6 = MPMediaItemPropertyMediaType;
        unint64_t v7 = (unint64_t)[sub_10002F160((uint64_t)MPMediaItemPropertyMediaType) unsignedIntegerValue];
        if ((a3 & 1) == 0)
        {
          if (qword_10011BCD8 != -1) {
            dispatch_once(&qword_10011BCD8, &stru_100104448);
          }
          if (qword_10011BCD8 != -1) {
            dispatch_once(&qword_10011BCD8, &stru_100104448);
          }
          if (qword_10011BCD8 != -1) {
            dispatch_once(&qword_10011BCD8, &stru_100104448);
          }
        }

        goto LABEL_23;
      }
    }

    else if ((byte_10011BCD0 & 1) == 0)
    {
      uint64_t v9 = v5;
      double v6 = MPMediaItemPropertyMediaType;
      unint64_t v8 = (unint64_t)[sub_10002F160((uint64_t)MPMediaItemPropertyMediaType) unsignedIntegerValue];
      if (a3) {
        unint64_t v7 = v8;
      }
      else {
        unint64_t v7 = v8 & 0xFFFFFFFFFFFFEBF1LL;
      }
LABEL_23:
      sub_10002F3F8( v6,  (uint64_t)+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v7));
      uint64_t v5 = v9;
    }

    return;
  }

  __break(0x5516u);
}

BOOL sub_10002F120(BOOL result)
{
  if (result && !(result & 7)) {
    return ((unint64_t)[sub_10002F160((uint64_t)MPMediaItemPropertyMediaType) unsignedIntegerValue] & 0x140E) != 0;
  }
  __break(0x5516u);
  return result;
}

id sub_10002F160(uint64_t a1)
{
  return objc_msgSend(objc_msgSend((id)qword_10011BCA8, "objectForKey:", a1), "value");
}

void sub_10002F188(_DWORD *a1, uint64_t a2)
{
  if (!a1
    || (a1 & 7) != 0
    || (double v15 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool),
        id v4 = sub_10002F160((uint64_t)MPMediaItemPropertyMediaType),
        sub_10002EC3C(),
        sub_10002F3F8(MPMediaItemPropertyMediaType, (uint64_t)v4),
        (uint64_t v5 = sub_100036FF0()) == 0)
    || (v5 & 7) != 0)
  {
    __break(0x5516u);
LABEL_31:
    __break(0x5515u);
    goto LABEL_32;
  }

  sub_10002F3F8(MPMediaPlaylistPropertyIsGeniusMix, (uint64_t)&__kCFBooleanFalse);
  sub_10002F3F8(MPMediaPlaylistPropertyIsHidden, (uint64_t)&__kCFBooleanFalse);
  unsigned int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 680LL))(a1);
  if (v6 > a2)
  {
    if (!dword_1001197D4)
    {
      id v7 = [(id)qword_10011BCB8 collectionsForProperty:MPMediaPlaylistPropertyName];
      if (v7) {
        goto LABEL_20;
      }
    }

    id v7 = [(id)qword_10011BCB0 collections];
    if (!dword_1001197D4) {
      objc_msgSend( (id)qword_10011BCB8,  "setCollections:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v7),  MPMediaPlaylistPropertyName);
    }
    if (v7) {
LABEL_20:
    }
      LODWORD(a2) = sub_10002F4C4(v7, a2);
    id v12 = objc_msgSend( objc_msgSend(v7, "objectAtIndex:", a2),  "valueForProperty:",  MPMediaPlaylistPropertyPersistentID);
    if (v12) {
      sub_10002F3F8(MPMediaPlaylistPropertyPersistentID, (uint64_t)v12);
    }
    *((void *)a1 + 12) = -1LL;
    goto LABEL_24;
  }

  if (!dword_1001197C8)
  {
LABEL_24:

    return;
  }

  unsigned int v8 = v6;
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  unsigned int v9 = [(id)qword_10011BCE0 stationCount];
  int v10 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 632LL))(a1);
  unsigned int v11 = a2 - v8;
  if (v11 < v9)
  {
    a1[24] = -1;
    a1[25] = v11;
    goto LABEL_24;
  }

  if (!__CFADD__(v9, v10))
  {
    if (v11 >= v9 + v10) {
      goto LABEL_24;
    }
    BOOL v13 = v11 >= v9;
    unsigned int v14 = v11 - v9;
    if (v13)
    {
      a1[24] = v14;
      a1[25] = -1;
      goto LABEL_24;
    }

    goto LABEL_31;
  }

void sub_10002F3F8(void *a1, uint64_t a2)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2)
  {
    unsigned int v6 = v4;
    uint64_t v5 = +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  a2,  a1);
    [(id)qword_10011BCA8 setObject:v5 forKey:a1];
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    id v4 = v6;
  }
}

uint64_t sub_10002F4C4(void *a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  while (1)
  {
    id v5 = [a1 objectAtIndex:v4];
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
    uint64_t result = objc_opt_isKindOfClass(v5, v6);
    if ((result & 1) != 0)
    {
      id v8 = [a1 objectAtIndex:v4];
      uint64_t result = (uint64_t)objc_msgSend( objc_msgSend(v8, "valueForProperty:", MPMediaPlaylistPropertyPlaylistAttributes),  "integerValue");
      if ((result & 4) != 0)
      {
        uint64_t result = (uint64_t)objc_msgSend(objc_msgSend(v8, "valueForProperty:", MPMediaPlaylistPropertySeedItems), "count");
        if (!result)
        {
          BOOL v9 = __CFADD__((_DWORD)a2, 1);
          a2 = (a2 + 1);
          if (v9) {
            break;
          }
        }
      }
    }

    if (v4 == 0xFFFFFFFFLL) {
      break;
    }
  }

  __break(0x5500u);
  return result;
}

void sub_10002F5A0(_DWORD *a1, uint64_t a2)
{
  uint64_t v35 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned int v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 688LL))(a1);
  if ((_DWORD)a2 == -1 || (unsigned int v5 = v4, v4 > a2))
  {
    id v9 = sub_10002F160((uint64_t)MPMediaItemPropertyMediaType);
    id v10 = sub_10002F160((uint64_t)MPMediaPlaylistPropertyPersistentID);
    sub_10002FABC((uint64_t)MPMediaPlaylistPropertyPersistentID, 0LL, 1);
    *((void *)a1 + 12) = -1LL;
    unsigned int v11 = &ADClientAddValueForScalarKey_ptr;
    id v12 = &off_10011B000;
    if (v10)
    {
      BOOL v13 = +[MPMediaQuery playlistsQuery](&OBJC_CLASS___MPMediaQuery, "playlistsQuery");
      -[MPMediaQuery addFilterPredicate:]( v13,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v10,  MPMediaItemPropertyPersistentID));
      unsigned int v14 = -[MPMediaQuery collections](v13, "collections");
      if ((id)-[NSArray count](v14, "count") == (id)1)
      {
        id v15 = -[NSArray objectAtIndex:](v14, "objectAtIndex:", 0LL);
        id v16 = v15;
        if (v15)
        {
          id v17 = v9;
          uint64_t v18 = MPMediaPlaylistPropertyParentPersistentID;
          id v19 = [v15 valueForProperty:MPMediaPlaylistPropertyParentPersistentID];
          if (v19)
          {
            unsigned int v11 = &ADClientAddValueForScalarKey_ptr;
            objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v10,  v18));
            id v9 = v17;
            id v12 = &off_10011B000;
          }

          else
          {
            id v9 = v17;
            id v12 = &off_10011B000;
            unsigned int v11 = &ADClientAddValueForScalarKey_ptr;
          }

void sub_10002FABC(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  [(id)qword_10011BCA8 removeObjectForKey:a1];
  objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
  if (dword_1001197D4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a3 == 0;
  }
  if (!v6) {
    [(id)qword_10011BCB8 invalidateMediaItem:a2];
  }
}

void sub_10002FB70(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (objc_msgSend( objc_msgSend( objc_msgSend((id)qword_10011BCA8, "objectForKey:", MPMediaItemPropertyMediaType),  "value"),  "unsignedIntValue") != 1026) {
      sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
    }
    sub_10002FABC((uint64_t)MPMediaItemPropertyArtistPersistentID, (uint64_t)MPMediaItemPropertyArtist, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyComposerPersistentID, 0LL, 0);
    if (a2 != -1) {
      sub_10002FC70( (uint64_t)MPMediaItemPropertyArtist,  MPMediaItemPropertyArtistPersistentID,  a2,  (byte_10011BCD0 & 1) == 0);
    }
  }

void sub_10002FC70(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  if (dword_1001197D4) {
    int v7 = 0;
  }
  else {
    int v7 = a4;
  }
  if (v7 != 1
    || (id v8 = [(id)qword_10011BCB8 collectionsForProperty:a1]) == 0)
  {
    id v9 = [(id)qword_10011BCB0 collections];
    id v8 = v9;
    char v10 = v7 ^ 1;
    if (!v9) {
      char v10 = 1;
    }
    if ((v10 & 1) != 0)
    {
      if (!v9) {
        return;
      }
    }

    else
    {
      objc_msgSend( (id)qword_10011BCB8,  "setCollections:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v9),  a1);
    }
  }

  if ((unint64_t)[v8 count] > a3) {
    sub_10002F3F8( a2,  (uint64_t)objc_msgSend( objc_msgSend(objc_msgSend(v8, "objectAtIndex:", a3), "representativeItem"),  "valueForProperty:",  a2));
  }
}

void sub_10002FD78(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
    if (a2 != -1) {
      sub_10002FC70( (uint64_t)MPMediaItemPropertyAlbumTitle,  MPMediaItemPropertyAlbumPersistentID,  a2,  (byte_10011BCD0 & 1) == 0);
    }
  }

void sub_10002FE18(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002FABC((uint64_t)MPMediaItemPropertyGenrePersistentID, (uint64_t)MPMediaItemPropertyGenre, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyArtistPersistentID, (uint64_t)MPMediaItemPropertyArtist, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyComposerPersistentID, (uint64_t)MPMediaItemPropertyComposer, 1);
    if (a2 != -1) {
      sub_10002FC70((uint64_t)MPMediaItemPropertyGenre, MPMediaItemPropertyGenrePersistentID, a2, 1);
    }
  }

void sub_10002FF0C(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyComposerPersistentID, (uint64_t)MPMediaItemPropertyComposer, 1);
    sub_10002FABC((uint64_t)MPMediaItemPropertyArtistPersistentID, (uint64_t)MPMediaItemPropertyArtist, 0);
    if (a2 != -1) {
      sub_10002FC70( (uint64_t)MPMediaItemPropertyComposer,  MPMediaItemPropertyComposerPersistentID,  a2,  (byte_10011BCD0 & 1) == 0);
    }
  }

void sub_10002FFEC(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = (void *)MPMediaItemPropertySeriesName;
    sub_10002FABC(MPMediaItemPropertySeriesName, 0LL, 0);
    sub_10002FABC(MPMediaItemPropertySeasonNumber, 0LL, 0);
    if (a2 != -1) {
      sub_10002FC70((uint64_t)v3, v3, a2, 0);
    }
  }

void sub_100030084(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showPodcasts])
    {
      sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
      if (a2 == -1)
      {
        if ((byte_10011BCD0 & 1) == 0
          && objc_msgSend( objc_msgSend( objc_msgSend((id)qword_10011BCA8, "objectForKey:", MPMediaItemPropertyMediaType),  "value"),  "unsignedIntValue") == 1026)
        {
          sub_10002EC3C();
          sub_10002EC84();
        }
      }

      else
      {
        sub_10002EC3C();
        if (byte_10011BCD0) {
          uint64_t v3 = 1024LL;
        }
        else {
          uint64_t v3 = 1026LL;
        }
        sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v3));
        sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
        [(id)qword_10011BCB0 setGroupingType:1];
        sub_10002FC70((uint64_t)MPMediaItemPropertyAlbumTitle, MPMediaItemPropertyAlbumPersistentID, a2, 0);
      }
    }

    else
    {
      NSLog(@"%s:%d not showPodcasts", "SelectPodcast", 1386LL);
    }
  }

dispatch_queue_s *sub_100030218(dispatch_queue_s *result, int a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_16;
  }

  if (a2 == -1) {
    return 0LL;
  }
  BOOL v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((*(int (**)(dispatch_queue_s *))(*(void *)v3 + 632LL))(v3) <= a2)
  {
LABEL_12:
    uint64_t v8 = 0LL;
    goto LABEL_13;
  }

  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  if (![(id)qword_10011BCE0 showMusic])
  {
    NSLog(@"%s:%d no systemMusicPlayer", "SelectGeniusMix", 1417LL);
    goto LABEL_12;
  }

  id v7 = objc_msgSend( objc_msgSend(+[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"), "collections"),  "objectAtIndex:",  a2);
  uint64_t result = (dispatch_queue_s *)sub_100041B3C();
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003035C;
    block[3] = &unk_1001037D0;
    void block[4] = v7;
    void block[5] = a3;
    dispatch_sync(result, block);
    uint64_t v8 = 1LL;
LABEL_13:

    return (dispatch_queue_s *)v8;
  }

uint64_t sub_10003035C(uint64_t a1)
{
  id v2 = sub_100041B30();
  [v2 setQueueWithGeniusMixPlaylist:*(void *)(a1 + 32)];
  uint64_t result = sub_100036FF0();
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    (*(void (**)(uint64_t, void))(*(void *)result + 520LL))(result, *(void *)(a1 + 40));
    return (uint64_t)[v2 play];
  }

  return result;
}

void sub_1000303B0(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showITunesU])
    {
      sub_10002FABC((uint64_t)MPMediaItemPropertyAlbumPersistentID, (uint64_t)MPMediaItemPropertyAlbumTitle, 1);
      if (a2 == -1)
      {
        if ((byte_10011BCD0 & 1) == 0
          && objc_msgSend( objc_msgSend( objc_msgSend((id)qword_10011BCA8, "objectForKey:", MPMediaItemPropertyMediaType),  "value"),  "unsignedIntValue") == 4104)
        {
          sub_10002EC3C();
          sub_10002EC84();
        }
      }

      else
      {
        sub_10002EC3C();
        if (byte_10011BCD0) {
          uint64_t v3 = 4096LL;
        }
        else {
          uint64_t v3 = 4104LL;
        }
        sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v3));
        sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
        [(id)qword_10011BCB0 setGroupingType:1];
        sub_10002FC70((uint64_t)MPMediaItemPropertyAlbumTitle, MPMediaItemPropertyAlbumPersistentID, a2, 0);
      }
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showITunesU", "SelectiTunesU", 1458LL);
    }
  }

void sub_100030548(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002EC3C();
    sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 8448LL));
    sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
    sub_10002F3F8( MPMediaItemPropertyIsRental,  (uint64_t)+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  }

void sub_1000305F4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002EC3C();
    sub_10002F3F8( MPMediaItemPropertyIsRental,  (uint64_t)+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
  }

void sub_10003067C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002EC3C();
    sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 512LL));
    sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
  }

void sub_100030704(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showPodcasts])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      sub_10002EC3C();
      sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 1024LL));
      sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
    }
  }

void sub_1000307D4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10002EC3C();
    sub_10002F3F8( MPMediaItemPropertyIsITunesU,  (uint64_t)+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
    sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
    sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 65280LL));
  }

void sub_100030880(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showMusic])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      sub_10002EC3C();
      sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 2048LL));
      sub_10002F3F8(MPMediaItemPropertyIsLocal, (uint64_t)&__kCFBooleanTrue);
    }
  }

void sub_100030950(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v3 = (void *)MPMediaItemPropertySeasonNumber;
    sub_10002FABC(MPMediaItemPropertySeasonNumber, 0LL, 0);
    if (a2 != -1)
    {
      id v4 = [(id)qword_10011BCB0 collections];
      if (v4)
      {
        unsigned int v5 = v4;
        if ((unint64_t)[v4 count] > a2)
        {
          id v6 = objc_msgSend( objc_msgSend(objc_msgSend(v5, "objectAtIndex:", (int)a2), "representativeItem"),  "valueForProperty:",  v3);
          if (v6) {
            sub_10002F3F8(v3, (uint64_t)v6);
          }
        }
      }
    }
  }

void sub_100030A14(uint64_t a1, int a2, int a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_18;
  }
  unsigned int v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v6 = v5;
  if (a2 > 2097484)
  {
    if (a2 != 2097501 && a2 != 2097485) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }

  if (!a2)
  {
LABEL_10:
    byte_10011BCD0 = 0;
    unsigned int v11 = v5;
    sub_10002EC84();
LABEL_11:
    id v6 = v11;
    goto LABEL_12;
  }

  if (a2 != 50)
  {
LABEL_12:

    return;
  }

  unsigned int v11 = v5;
  byte_10011BCD0 = 1;
  if ((~a3 & 0x32) == 0)
  {
    id v7 = &off_100111DB8;
    uint64_t v8 = MPMediaItemPropertyMediaType;
LABEL_17:
    sub_10002F3F8(v8, (uint64_t)v7);
    goto LABEL_11;
  }

  sub_10002F3F8( MPMediaItemPropertyMediaType,  (uint64_t)+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 65280LL));
  uint64_t v9 = sub_100036FF0();
  if (v9 && (v9 & 7) == 0)
  {
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 624LL))(v9);
    id v6 = v11;
    if (!v10) {
      goto LABEL_12;
    }
    uint64_t v8 = (NSString *)MPMediaItemPropertyIsLocal;
    id v7 = (_UNKNOWN **)&__kCFBooleanTrue;
    goto LABEL_17;
  }

uint64_t sub_100030B40(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030B54(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030B68(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030B7C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030B90(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030BA4(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030BB8(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030BCC(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030BE0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100030BF4(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

_DWORD *sub_100030C08(_DWORD *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    id v2 = objc_autoreleasePoolPush();
    if (!dword_1001197C8 || (v1[25] & 0x80000000) != 0 && (v1[24] & 0x80000000) != 0)
    {
      char v4 = byte_10011BCD0;
      int v5 = dword_1001197D4;
      [(id)qword_10011BCB0 setGroupingType:0];
      char v6 = v4 | (v5 != 0);
      if ((v6 & 1) != 0
        || ((unint64_t)[(id)qword_10011BCA8 count] < 2
          ? (id v7 = [(id)qword_10011BCB8 globalItemCountForProperty:MPMediaItemPropertyTitle])
          : (id v7 = [(id)qword_10011BCB8 itemCountForProperty:MPMediaItemPropertyTitle]),
            (id v8 = v7) == 0LL))
      {
        unint64_t v3 = (unint64_t)objc_msgSend(objc_msgSend((id)qword_10011BCB0, "items"), "count");
        if ((v6 & 1) == 0)
        {
          [(id)qword_10011BCB8 setItemCount:v3 forProperty:MPMediaItemPropertyTitle];
        }
      }

      else
      {
        unint64_t v3 = (unint64_t)[v8 unsignedIntValue];
      }
    }

    else
    {
      unint64_t v3 = dword_1001197CC;
    }

    objc_autoreleasePoolPop(v2);
    return (_DWORD *)v3;
  }

  return result;
}

uint64_t sub_100030D50(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = sub_100030DB8(2LL, (uint64_t)MPMediaItemPropertyArtist, (byte_10011BCD0 & 1) == 0);

    return v2;
  }

  return result;
}

uint64_t sub_100030DB8(uint64_t a1, uint64_t a2, int a3)
{
  if (dword_1001197D4) {
    int v5 = 0;
  }
  else {
    int v5 = a3;
  }
  char v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  [(id)qword_10011BCB0 setGroupingType:a1];
  uint64_t result = sub_100036FF0();
  if (result && (result & 7) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 624LL))(result)) {
      objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanTrue,  MPMediaItemPropertyIsLocal));
    }
    if (v5)
    {
      if ((unint64_t)[(id)qword_10011BCA8 count] <= 1)
      {
        id v10 = [(id)qword_10011BCB8 globalItemCountForProperty:a2];
        if (!v10) {
          goto LABEL_16;
        }
        id v8 = v10;
        objc_msgSend((id)qword_10011BCB8, "setItemCount:forProperty:", objc_msgSend(v10, "unsignedIntValue"), a2);
      }

      else
      {
        id v8 = [(id)qword_10011BCB8 itemCountForProperty:a2];
        if (!v8)
        {
LABEL_16:
          id v11 = [(id)qword_10011BCB8 collectionsForProperty:a2];
          if (!v11)
          {
            id v11 = [(id)qword_10011BCB0 collections];
            if (v11) {
              objc_msgSend( (id)qword_10011BCB8,  "setCollections:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v11),  a2);
            }
          }

          id v9 = [v11 count];
          [(id)qword_10011BCB8 setItemCount:v9 forProperty:a2];
          goto LABEL_21;
        }
      }

      id v9 = [v8 unsignedIntValue];
    }

    else
    {
      id v9 = objc_msgSend(objc_msgSend((id)qword_10011BCB0, "collections"), "count");
    }

uint64_t sub_100030F98(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = sub_100030DB8(1LL, (uint64_t)MPMediaItemPropertyAlbumTitle, (byte_10011BCD0 & 1) == 0);

    return v2;
  }

  return result;
}

uint64_t sub_100031000(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(0)),  MPMediaItemPropertyMediaType)));
    uint64_t v2 = sub_100030DB8(5LL, (uint64_t)MPMediaItemPropertyGenre, 1);
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

    return v2;
  }

  return result;
}

id sub_100031104(uint64_t a1)
{
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  return objc_msgSend(objc_msgSend((id)qword_10011BCE0, "mediaLibraryHelper"), "getFilteredMediaTypesMask:", a1);
}

uint64_t sub_100031158(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = sub_100030DB8(4LL, (uint64_t)MPMediaItemPropertyComposer, (byte_10011BCD0 & 1) == 0);

    return v2;
  }

  return result;
}

uint64_t sub_1000311C0(uint64_t result)
{
  if (result && (result & 7) == 0)
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = MPMediaItemPropertySeriesName;
    id v3 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeriesName];
    if (v3) {
      [(id)qword_10011BCA8 removeObjectForKey:v2];
    }
    uint64_t v4 = MPMediaItemPropertySeasonNumber;
    id v5 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeasonNumber];
    if (v5)
    {
      [(id)qword_10011BCA8 removeObjectForKey:v4];
    }

    else if (!v3)
    {
      uint64_t v6 = sub_100030DB8(8LL, v2, 0);
LABEL_13:

      return v6;
    }

    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    uint64_t v6 = sub_100030DB8(8LL, v2, 0);
    if (v3) {
      [(id)qword_10011BCA8 setObject:v3 forKey:v2];
    }
    if (v5) {
      [(id)qword_10011BCA8 setObject:v5 forKey:v4];
    }
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    goto LABEL_13;
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100031340(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = MPMediaItemPropertySeasonNumber;
    id v3 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeasonNumber];
    if (v3)
    {
      id v4 = v3;
      [(id)qword_10011BCA8 removeObjectForKey:v2];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      uint64_t v5 = sub_100030DB8(9LL, v2, 0);
      [(id)qword_10011BCA8 setObject:v4 forKey:v2];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    }

    else
    {
      uint64_t v5 = sub_100030DB8(9LL, v2, 0);
    }

    return v5;
  }

  return result;
}

NSUInteger sub_100031464(NSUInteger result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showAudioBooks])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      uint64_t v2 = +[MPMediaQuery audiobooksQuery](&OBJC_CLASS___MPMediaQuery, "audiobooksQuery");
      -[MPMediaQuery setGroupingType:](v2, "setGroupingType:", 0LL);
      NSUInteger v3 = -[NSArray count](-[MPMediaQuery items](v2, "items"), "count");
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showAudioBooks", "AudiobookCount", 1715LL);
      return 0LL;
    }

    return v3;
  }

  return result;
}

uint64_t sub_100031530(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showPodcasts])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1026),  MPMediaItemPropertyMediaType)));
      uint64_t v2 = sub_100030DB8(1LL, (uint64_t)MPMediaItemPropertyAlbumTitle, 0);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

      return v2;
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showPodcasts", "PodcastCount", 1734LL);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100031684(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showITunesU])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 4104),  MPMediaItemPropertyMediaType)));
      uint64_t v2 = sub_100030DB8(1LL, (uint64_t)MPMediaItemPropertyAlbumTitle, 0);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

      return v2;
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showiTunesU", "iTunesUCount", 1753LL);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000317D8(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showPodcasts])
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1024),  MPMediaItemPropertyMediaType)));
      uint64_t v2 = sub_100030DB8(1LL, (uint64_t)MPMediaItemPropertyAlbumTitle, 0);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

      return v2;
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showPodcasts", "VideoPodcastCount", 1772LL);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10003192C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showITunesU])
    {
      uint64_t v2 = (void *)qword_10011BCB0;
      NSUInteger v3 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
      objc_msgSend( v2,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v3,  MPMediaItemPropertyIsITunesU)));
      objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 65280),  MPMediaItemPropertyMediaType));
      uint64_t v4 = sub_100030DB8(1LL, (uint64_t)MPMediaItemPropertyAlbumTitle, 0);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

      return v4;
    }

    else
    {
      sub_1000CEA98(0, @"%s:%d not showiTunesU", "VideoITunesUCount", 1794LL);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100031AC0(uint64_t result, int a2)
{
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (dword_1001197C8 && ((*(_DWORD *)(v2 + 100) & 0x80000000) == 0 || (*(_DWORD *)(v2 + 96) & 0x80000000) == 0))
  {
    uint64_t result = (uint64_t)operator new(0x38uLL);
    if ((result & 0xF) != 0) {
      goto LABEL_22;
    }
    uint64_t v5 = result;
    uint64_t result = sub_10004EA40(result);
    if ((*(_DWORD *)(v2 + 100) & 0x80000000) == 0)
    {
      if ((v5 & 7) != 0) {
        goto LABEL_22;
      }
      *(_DWORD *)(v5 + 40) = a2;
    }

    if ((*(_DWORD *)(v2 + 96) & 0x80000000) == 0)
    {
      if ((v5 & 7) != 0) {
        goto LABEL_22;
      }
      *(_DWORD *)(v5 + 44) = a2;
    }

    goto LABEL_18;
  }

  if (!qword_10011BCB0
    || (id v6 = [(id)qword_10011BCB0 items],
        (unint64_t)[v6 count] <= a2))
  {
    uint64_t v5 = 0LL;
    goto LABEL_21;
  }

  id v7 = [v6 objectAtIndex:a2];
  uint64_t result = (uint64_t)operator new(0x38uLL);
  if ((result & 0xF) == 0)
  {
    uint64_t v5 = result;
    uint64_t result = sub_10004EA40(result);
    if ((v5 & 7) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, id))(*(void *)v5 + 400LL))(v5, v7);
LABEL_18:
      if ((v5 & 7) == 0)
      {
        *(_BYTE *)(v5 + 4_Block_object_dispose(va, 8) = 0;
LABEL_21:

        return v5;
      }
    }
  }

void sub_100031BF0(_Unwind_Exception *a1)
{
}

id sub_100031C08(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a1);
  uint64_t v2 = -[MPMediaQuery initWithFilterPredicates:]( objc_alloc(&OBJC_CLASS___MPMediaQuery),  "initWithFilterPredicates:",  +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v1,  MPMediaItemPropertyPersistentID)));
  NSUInteger v3 = v2;
  if (!v2)
  {
    NSLog( @"%s:%d Failed to create query for UID=%@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaLibrary.mm",  1868LL,  v1);
LABEL_8:
    id v5 = 0LL;
    goto LABEL_9;
  }

  uint64_t v4 = -[MPMediaQuery items](v2, "items");
  if ((id)-[NSArray count](v4, "count") != (id)1)
  {
    if (-[NSArray count](v4, "count") < 2) {
      NSLog( @"%s:%d No item match for UID=%@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaLibrary.mm",  1863LL,  v1);
    }
    else {
      NSLog( @"%s:%d Too many items returned!!! for UID=%@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaLibrary.mm",  1859LL,  v1);
    }
    goto LABEL_8;
  }

  id v5 = -[NSArray objectAtIndex:](-[MPMediaQuery items](v3, "items"), "objectAtIndex:", 0LL);
LABEL_9:

  return v5;
}

uint64_t sub_100031D44(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    NSUInteger v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v4 = +[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2);
    id v5 = sub_100031C08(a2);
    if (!v5)
    {
      NSLog( @"%s:%d Failed to get item for UID=%@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaLibrary.mm",  1891LL,  v4);
      id v7 = 0LL;
      goto LABEL_8;
    }

    id v6 = v5;
    uint64_t result = (uint64_t)operator new(0x38uLL);
    if ((result & 0xF) == 0)
    {
      id v7 = (_BYTE *)result;
      uint64_t result = sub_10004EA40(result);
      if ((v7 & 7) == 0)
      {
        (*(void (**)(_BYTE *, id))(*(void *)v7 + 400LL))(v7, v6);
        v7[48] = 0;
LABEL_8:

        return (uint64_t)v7;
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100031E1C(_Unwind_Exception *a1)
{
}

id sub_100031E30(id result, unsigned int a2)
{
  if (result && (result & 7) == 0)
  {
    NSUInteger v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v4 = MPMediaItemPropertySeasonNumber;
    id v5 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeasonNumber];
    if (v5)
    {
      [(id)qword_10011BCA8 removeObjectForKey:v4];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    }

    id v6 = [(id)qword_10011BCB0 collections];
    if (v6 && (id v7 = v6, (unint64_t)[v6 count] > a2))
    {
      id v8 = objc_msgSend( objc_msgSend( objc_msgSend(objc_msgSend(v7, "objectAtIndex:", (int)a2), "representativeItem"),  "valueForProperty:",  v4),  "unsignedIntValue");
      if (!v5) {
        goto LABEL_11;
      }
    }

    else
    {
      id v8 = 0LL;
      if (!v5)
      {
LABEL_11:

        return v8;
      }
    }

    [(id)qword_10011BCA8 setObject:v5 forKey:v4];
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    goto LABEL_11;
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100031F88(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 680LL))(v1);
      if (!dword_1001197C8) {
        goto LABEL_8;
      }
      if (qword_10011BCD8 != -1) {
        dispatch_once(&qword_10011BCD8, &stru_100104448);
      }
      unsigned int v4 = [(id)qword_10011BCE0 stationCount];
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 632LL))(v1);
      int v5 = result + v4;
      if (!__CFADD__((_DWORD)result, v4))
      {
        BOOL v6 = __CFADD__((_DWORD)v3, v5);
        uint64_t v3 = (v3 + v5);
        if (!v6)
        {
LABEL_8:

          return v3;
        }
      }

      __break(0x5500u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100032050(uint64_t result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(0)),  MPMediaItemPropertyMediaType)));
      uint64_t result = sub_100036FF0();
      if (result)
      {
        if ((result & 7) == 0)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)result + 624LL))(result)) {
            objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanTrue,  MPMediaItemPropertyIsLocal));
          }
          [(id)qword_10011BCB0 setGroupingType:6];
          objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsGeniusMix));
          objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsHidden));
          if (dword_1001197D4) {
            goto LABEL_8;
          }
          id v5 = [(id)qword_10011BCB8 globalItemCountForPropertyNoQ:MPMediaPlaylistPropertyName];
          if (v5)
          {
            id v3 = [v5 unsignedIntValue];
LABEL_17:
            objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:]( NSSet,  "setWithArray:",  objc_msgSend((id)qword_10011BCA8, "allValues")));

            return (uint64_t)v3;
          }

          if (dword_1001197D4
            || (id v3 = [(id)qword_10011BCB8 collectionsForPropertyNoQ:MPMediaPlaylistPropertyName]) == 0)
          {
LABEL_8:
            id v2 = [(id)qword_10011BCB0 collections];
            id v3 = v2;
            int v4 = dword_1001197D4;
            if (dword_1001197D4 || !v2)
            {
              if (!v2) {
                goto LABEL_15;
              }
            }

            else
            {
              objc_msgSend( (id)qword_10011BCB8,  "setCollectionsNoQ:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v2),  MPMediaPlaylistPropertyName);
            }
          }

          id v3 = sub_1000322D4(v3, (uint64_t)[v3 count]);
          int v4 = dword_1001197D4;
LABEL_15:
          if (!v4) {
            [(id)qword_10011BCB8 setGlobalItemCountNoQ:v3 ForProperty:MPMediaPlaylistPropertyName];
          }
          goto LABEL_17;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

id sub_1000322D4(void *a1, uint64_t a2)
{
  uint64_t v4 = [a1 count];
  if (!v4) {
    return (id)a2;
  }
  uint64_t v5 = 0LL;
  while (1)
  {
    id v6 = [a1 objectAtIndex:v5];
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {
      id v8 = [a1 objectAtIndex:v5];
      if ((objc_msgSend( objc_msgSend(v8, "valueForProperty:", MPMediaPlaylistPropertyPlaylistAttributes),  "integerValue") & 4) != 0)
      {
        id result = objc_msgSend(objc_msgSend(v8, "valueForProperty:", MPMediaPlaylistPropertySeedItems), "count");
        if (!result)
        {
          BOOL v10 = (_DWORD)a2 != 0;
          a2 = (a2 - 1);
          if (!v10) {
            break;
          }
        }
      }
    }

    if (v4 == ++v5) {
      return (id)a2;
    }
  }

  __break(0x5515u);
  return result;
}

uint64_t sub_1000323B0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = &v3;
    uint64_t v5 = 0x2020000000LL;
    int v6 = 0;
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_10003246C;
    v2[3] = &unk_100104368;
    void v2[4] = &v3;
    v2[5] = result;
    [(id)qword_10011BCB8 performOnQueue:v2];
    uint64_t v1 = *((unsigned int *)v4 + 6);
    _Block_object_dispose(&v3, 8);
    return v1;
  }

  return result;
}

void sub_100032454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10003246C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 704LL))(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

id sub_1000324A4(id result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    return result;
  }

  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v2 = sub_10002F160((uint64_t)MPMediaPlaylistPropertyPersistentID);
  sub_10002FABC((uint64_t)MPMediaPlaylistPropertyPersistentID, 0LL, 0);
  if (v2)
  {
    uint64_t v3 = +[MPMediaQuery playlistsQuery](&OBJC_CLASS___MPMediaQuery, "playlistsQuery");
    -[MPMediaQuery addFilterPredicate:]( v3,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v2,  MPMediaItemPropertyPersistentID));
    uint64_t v4 = -[MPMediaQuery collections](v3, "collections");
    if ((id)-[NSArray count](v4, "count") != (id)1) {
      goto LABEL_10;
    }
    id v5 = -[NSArray objectAtIndex:](v4, "objectAtIndex:", 0LL);
    if (!v5) {
      goto LABEL_10;
    }
    uint64_t v6 = MPMediaPlaylistPropertyParentPersistentID;
    if (![v5 valueForProperty:MPMediaPlaylistPropertyParentPersistentID]) {
      goto LABEL_10;
    }
    uint64_t v7 = qword_10011BCB0;
    id v8 = +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v2,  v6);
    id v9 = (void *)v7;
  }

  else
  {
    uint64_t v10 = qword_10011BCB0;
    id v11 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
    id v8 = +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v11,  MPMediaPlaylistPropertyParentPersistentID);
    id v9 = (void *)v10;
  }

  [v9 addFilterPredicate:v8];
LABEL_10:
  [(id)qword_10011BCB0 setGroupingType:6];
  objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsGeniusMix));
  objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsHidden));
  id v12 = [(id)qword_10011BCB0 collections];
  id v13 = v12;
  if (v12) {
    id v13 = sub_1000322D4(v12, (uint64_t)[v12 count]);
  }
  if (v2) {
    sub_10002F3F8(MPMediaPlaylistPropertyPersistentID, (uint64_t)v2);
  }
  objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));

  return v13;
}

uint64_t sub_1000326D4(uint64_t result)
{
  if (!result || (uint64_t v1 = (_DWORD *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = sub_10002F160((uint64_t)MPMediaPlaylistPropertyPersistentID);
    uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 688LL))(v1);
    if (dword_1001197C8)
    {
      if (v1[25] == -1 && v1[24] == -1)
      {
        if (!v3)
        {
          if (qword_10011BCD8 != -1) {
            goto LABEL_14;
          }
          while (1)
          {
            unsigned int v5 = [(id)qword_10011BCE0 stationCount];
            int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)v1 + 632LL))(v1);
            int v7 = v6 + v5;
            if (!__CFADD__(v6, v5))
            {
              BOOL v8 = __CFADD__((_DWORD)v4, v7);
              uint64_t v4 = (v4 + v7);
              if (!v8) {
                break;
              }
            }

            __break(0x5500u);
LABEL_14:
            dispatch_once(&qword_10011BCD8, &stru_100104448);
          }
        }
      }

      else
      {
        uint64_t v4 = 0LL;
      }
    }

    return v4;
  }

  return result;
}

uint64_t sub_1000327D0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000327E8(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = dword_1001197D8;
    if (dword_1001197D8 == -1)
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      id v2 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_100031104(255LL)),  MPMediaItemPropertyMediaType),  0LL);
      id v3 = -[MPMediaQuery initWithFilterPredicates:]( objc_alloc(&OBJC_CLASS___MPMediaQuery),  "initWithFilterPredicates:",  v2);
      dword_1001197D8 = -[NSArray count](-[MPMediaQuery items](v3, "items"), "count");
      uint64_t v4 = v3;
      unsigned int v5 = v2;

      return dword_1001197D8;
    }
  }

  return result;
}

uint64_t sub_1000328D4(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = dword_1001197DC;
    if (dword_1001197DC == -1)
    {
      uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      id v2 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  sub_100031104(65280LL)),  MPMediaItemPropertyMediaType),  0LL);
      id v3 = -[MPMediaQuery initWithFilterPredicates:]( objc_alloc(&OBJC_CLASS___MPMediaQuery),  "initWithFilterPredicates:",  v2);
      dword_1001197DC = -[NSArray count](-[MPMediaQuery items](v3, "items"), "count");
      uint64_t v4 = v3;
      unsigned int v5 = v2;

      return dword_1001197DC;
    }
  }

  return result;
}

id sub_1000329C0(id result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = objc_autoreleasePoolPush();
    id v2 = objc_msgSend( objc_msgSend(+[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"), "collections"),  "count");
    objc_autoreleasePoolPop(v1);
    return v2;
  }

  return result;
}

uint64_t sub_100032A2C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100032A40(uint64_t a1, __CFString *a2, unsigned int a3, std::string *a4)
{
  if (!a1) {
    goto LABEL_119;
  }
  uint64_t v5 = a1;
  if ((a1 & 7) != 0) {
    goto LABEL_119;
  }
  if (!a3) {
    return;
  }
  int v53 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 704LL))(v5);
  int v9 = v8;
  if (v8 > (int)a2)
  {
    int v51 = v8;
    uint64_t v52 = v5;
    if (__CFADD__((_DWORD)a2, a3))
    {
LABEL_120:
      __break(0x5500u);
      return;
    }

    unsigned int v10 = a3;
    int v9 = v8;
    if ((int)((_DWORD)a2 + a3) > v8)
    {
      unsigned int v10 = v8 - (_DWORD)a2;
      if (__OFSUB__(v8, (_DWORD)a2)) {
        goto LABEL_89;
      }
    }

    CFTypeRef cf = a2;
    id v11 = &off_10011B000;
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(0)),  MPMediaItemPropertyMediaType)));
    [(id)qword_10011BCB0 setGroupingType:6];
    objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsGeniusMix));
    int v12 = (int)cf;
    objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsHidden));
    if (dword_1001197D4) {
      goto LABEL_9;
    }
    id v26 =   objc_msgSend( (id)qword_10011BCB8,  "itemNamesForRangeNoQ:forProperty:",  (int)cf,  v10,  MPMediaPlaylistPropertyName);
    if (v26)
    {
      if (v10)
      {
        id v27 = v26;
        uint64_t v28 = 0LL;
        while (1)
        {
          sub_1000255A4((uint64_t)&__p, (char *)objc_msgSend(objc_msgSend(v27, "objectAtIndex:", v28), "UTF8String"));
          unint64_t size = a4->__r_.__value_.__l.__size_;
          if (size >= a4->__r_.__value_.__l.__cap_)
          {
            uint64_t v30 = sub_100024640(a4, &__p);
          }

          else
          {
            sub_1000245B0(a4, &__p);
            if (size >= 0xFFFFFFFFFFFFFFE8LL)
            {
LABEL_118:
              __break(0x5513u);
              goto LABEL_119;
            }

            uint64_t v30 = (std::string *)(size + 24);
          }

          a4->__r_.__value_.__l.__size_ = (std::string::size_type)v30;
          if (++v28 >= (unint64_t)v10)
          {
            unsigned int v4 = v10;
            goto LABEL_54;
          }
        }
      }

      unsigned int v4 = 0;
LABEL_54:
      id v31 = v11[406];
      a2 = cf;
      objc_msgSend( v31,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      uint64_t v5 = v52;
      goto LABEL_55;
    }

    if (dword_1001197D4
      || (id v14 = [(id)qword_10011BCB8 collectionsForPropertyNoQ:MPMediaPlaylistPropertyName]) == 0)
    {
LABEL_9:
      id v13 = [(id)qword_10011BCB0 collections];
      id v14 = v13;
      if (!dword_1001197D4 && v13) {
        objc_msgSend( (id)qword_10011BCB8,  "setCollectionsNoQ:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v13),  MPMediaPlaylistPropertyName);
      }
    }

    int v15 = [v14 count];
    unsigned int v4 = 0;
    if (v14)
    {
      unsigned int v16 = v15;
      if (v15 > (int)cf)
      {
        uint64_t v50 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v10);
        if (v16)
        {
          uint64_t v17 = 0LL;
          unsigned int v4 = 0;
          uint64_t v18 = 0LL;
          int v19 = 0;
          uint64_t v54 = v16;
          while (1)
          {
            if (0xAAAAAAAAAAAAAAABLL {
            id v20 = [v14 objectAtIndex:v17];
            }
            uint64_t v21 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
            if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
            {
              id v22 = [v14 objectAtIndex:v17];
              if ((objc_msgSend( objc_msgSend(v22, "valueForProperty:", MPMediaPlaylistPropertyPlaylistAttributes),  "integerValue") & 4) != 0 && !objc_msgSend(objc_msgSend(v22, "valueForProperty:", MPMediaPlaylistPropertySeedItems), "count"))
              {
                int v12 = (int)cf;
                goto LABEL_32;
              }

              uint64_t v18 = (__CFString *)[v20 valueForProperty:MPMediaPlaylistPropertyName];
              int v12 = (int)cf;
            }

            if (v19 >= v12)
            {
              if (!v18) {
                uint64_t v18 = &stru_10010A828;
              }
              -[NSMutableArray addObject:](v50, "addObject:", v18);
              sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](v18, "UTF8String"));
              unint64_t v23 = a4->__r_.__value_.__l.__size_;
              if (v23 >= a4->__r_.__value_.__l.__cap_)
              {
                unsigned int v24 = sub_100024640(a4, &__p);
              }

              else
              {
                sub_1000245B0(a4, &__p);
                if (v23 >= 0xFFFFFFFFFFFFFFE8LL) {
                  goto LABEL_118;
                }
                unsigned int v24 = (std::string *)(v23 + 24);
              }

              a4->__r_.__value_.__l.__size_ = (std::string::size_type)v24;
              BOOL v25 = __CFADD__(v4++, 1);
              if (v25) {
                goto LABEL_120;
              }
            }

            else
            {
              ++v19;
            }

LABEL_91:
  int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 632LL))(v5);
  if ((v40 & 0x80000000) == 0 && v4 < a3)
  {
    int v42 = v41;
    if (v41 >= 1)
    {
      id v43 = objc_msgSend( +[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"),  "collections");
      if (v43)
      {
        uint64_t v44 = sub_10002CD78();
        if (v44 && (v44 & 7) == 0)
        {
          cfa = sub_10002D200((__CFString *)v44, (uint64_t)@"IAP_GENIUS_MIX");
          if (v40 < v42)
          {
            unsigned int v45 = v4 + 1;
            do
            {
              id v46 = [v43 objectAtIndex:v40];
              uint64_t v47 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
              if ((objc_opt_isKindOfClass(v46, v47) & 1) != 0
                && [v46 valueForProperty:MPMediaPlaylistPropertyName])
              {
                a2 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@: %@",  cfa,  [v46 valueForProperty:MPMediaPlaylistPropertyName]);
              }

              if (!a2) {
                a2 = &stru_10010A828;
              }
              sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](a2, "UTF8String"));
              unint64_t v48 = a4->__r_.__value_.__l.__size_;
              if (v48 >= a4->__r_.__value_.__l.__cap_)
              {
                uint64_t v49 = sub_100024640(a4, &__p);
              }

              else
              {
                sub_1000245B0(a4, &__p);
                if (v48 >= 0xFFFFFFFFFFFFFFE8LL) {
                  goto LABEL_118;
                }
                uint64_t v49 = (std::string *)(v48 + 24);
              }

              a4->__r_.__value_.__l.__size_ = (std::string::size_type)v49;
              BOOL v25 = v45++ >= a3;
            }

            while (!v25);
          }

          CFRelease(cfa);
          goto LABEL_115;
        }

        goto LABEL_119;
      }
    }
  }

void sub_1000332AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::string *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
}

id sub_1000332F4(id result, int a2, int a3, uint64_t a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100033368;
    v4[3] = &unk_100104388;
    int v5 = a2;
    int v6 = a3;
    void v4[4] = result;
    v4[5] = a4;
    return [(id)qword_10011BCB8 performOnQueue:v4];
  }

  return result;
}

uint64_t sub_100033368(uint64_t result)
{
  if (*(void *)(result + 40)) {
    BOOL v1 = (*(void *)(result + 40) & 7LL) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    return (*(uint64_t (**)(void, void, void))(**(void **)(result + 32) + 696LL))( *(void *)(result + 32),  *(unsigned int *)(result + 48),  *(unsigned int *)(result + 52));
  }
  __break(0x5516u);
  return result;
}

void sub_100033398(uint64_t a1, __CFString *a2, unsigned int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_114;
  }
  if (!a3) {
    return;
  }
  int v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v8 = sub_10002F160((uint64_t)MPMediaPlaylistPropertyPersistentID);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 688LL))(a1);
  int v59 = v7;
  uint64_t v57 = a1;
  if (v9 <= (int)a2)
  {
    LODWORD(v10) = 0;
    goto LABEL_45;
  }

  unsigned int cf = a2;
  sub_10002FABC((uint64_t)MPMediaPlaylistPropertyPersistentID, 0LL, 0);
  a2 = (__CFString *)&off_10011B000;
  unsigned int v10 = &ADClientAddValueForScalarKey_ptr;
  signed int v58 = v9;
  if (!v8)
  {
    uint64_t v18 = qword_10011BCB0;
    int v19 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 0LL);
    unsigned int v16 = +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v19,  MPMediaPlaylistPropertyParentPersistentID);
    uint64_t v17 = (void *)v18;
    goto LABEL_12;
  }

  id v11 = +[MPMediaQuery playlistsQuery](&OBJC_CLASS___MPMediaQuery, "playlistsQuery");
  -[MPMediaQuery addFilterPredicate:]( v11,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v8,  MPMediaItemPropertyPersistentID));
  int v12 = -[MPMediaQuery collections](v11, "collections");
  if ((id)-[NSArray count](v12, "count") == (id)1)
  {
    id v13 = -[NSArray objectAtIndex:](v12, "objectAtIndex:", 0LL);
    if (v13)
    {
      uint64_t v14 = MPMediaPlaylistPropertyParentPersistentID;
      if ([v13 valueForProperty:MPMediaPlaylistPropertyParentPersistentID])
      {
        uint64_t v15 = qword_10011BCB0;
        unsigned int v16 = +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v8,  v14);
        uint64_t v17 = (void *)v15;
LABEL_12:
        [v17 addFilterPredicate:v16];
      }
    }
  }

  uint64_t v56 = (uint64_t)v8;
  [(id)qword_10011BCB0 setGroupingType:6];
  objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsGeniusMix));
  objc_msgSend( (id)qword_10011BCB0,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanFalse,  MPMediaPlaylistPropertyIsHidden));
  int v20 = cf;
  if (__CFADD__(cf, a3)) {
    goto LABEL_115;
  }
  unsigned int v21 = a3;
  if ((int)(cf + a3) > v58)
  {
    unsigned int v21 = v58 - cf;
    if (__OFSUB__(v58, cf)) {
      goto LABEL_84;
    }
  }

  id v22 = [(id)qword_10011BCB0 collections];
  unsigned int v23 = [v22 count];
  if (v22)
  {
    unsigned int v24 = cf + v21;
    if (!__CFADD__(cf, v21))
    {
      BOOL v36 = v24 != 0;
      unsigned int v25 = v24 - 1;
      if (!v36) {
        goto LABEL_84;
      }
      if (v25 < v23)
      {
        uint64_t v26 = 0LL;
        id v27 = 0LL;
        int v28 = 0;
        LODWORD(v10) = 0;
        unint64_t v60 = v21;
        uint64_t v29 = v23;
        while (1)
        {
          id v30 = [v22 objectAtIndex:v26];
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
          if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
          {
            id v32 = [v22 objectAtIndex:v26];
            if ((objc_msgSend( objc_msgSend(v32, "valueForProperty:", MPMediaPlaylistPropertyPlaylistAttributes),  "integerValue") & 4) != 0 && !objc_msgSend(objc_msgSend(v32, "valueForProperty:", MPMediaPlaylistPropertySeedItems), "count"))
            {
              int v20 = cf;
              goto LABEL_38;
            }

            id v27 = (__CFString *)[v30 valueForProperty:MPMediaPlaylistPropertyName];
            int v20 = cf;
          }

          if (v28 >= v20)
          {
            if (!v27) {
              id v27 = &stru_10010A828;
            }
            sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](v27, "UTF8String"));
            unint64_t size = a4->__r_.__value_.__l.__size_;
            if (size >= a4->__r_.__value_.__l.__cap_)
            {
              uint64_t v34 = sub_100024640(a4, &__p);
            }

            else
            {
              sub_1000245B0(a4, &__p);
              if (size >= 0xFFFFFFFFFFFFFFE8LL)
              {
LABEL_113:
                __break(0x5513u);
                goto LABEL_114;
              }

              uint64_t v34 = (std::string *)(size + 24);
            }

            a4->__r_.__value_.__l.__size_ = (std::string::size_type)v34;
            BOOL v36 = __CFADD__((_DWORD)v10, 1);
            LODWORD(v10) = (_DWORD)v10 + 1;
            if (v36) {
              goto LABEL_115;
            }
          }

          else
          {
            ++v28;
          }

LABEL_86:
  int v47 = (*(uint64_t (**)(uint64_t))(*(void *)v57 + 632LL))(v57);
  if ((v46 & 0x80000000) == 0 && v10 < a3)
  {
    int v48 = v47;
    if (v47 >= 1)
    {
      id v49 = objc_msgSend( +[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"),  "collections");
      if (v49)
      {
        uint64_t v50 = sub_10002CD78();
        if (v50 && (v50 & 7) == 0)
        {
          cfa = sub_10002D200((__CFString *)v50, (uint64_t)@"IAP_GENIUS_MIX");
          if (v46 < v48)
          {
            unsigned int v51 = (_DWORD)v10 + 1;
            do
            {
              id v52 = [v49 objectAtIndex:v46];
              uint64_t v53 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
              if ((objc_opt_isKindOfClass(v52, v53) & 1) != 0
                && [v52 valueForProperty:MPMediaPlaylistPropertyName])
              {
                a2 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@: %@",  cfa,  [v52 valueForProperty:MPMediaPlaylistPropertyName]);
              }

              if (!a2) {
                a2 = &stru_10010A828;
              }
              sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](a2, "UTF8String"));
              unint64_t v54 = a4->__r_.__value_.__l.__size_;
              if (v54 >= a4->__r_.__value_.__l.__cap_)
              {
                uint64_t v55 = sub_100024640(a4, &__p);
              }

              else
              {
                sub_1000245B0(a4, &__p);
                if (v54 >= 0xFFFFFFFFFFFFFFE8LL) {
                  goto LABEL_113;
                }
                uint64_t v55 = (std::string *)(v54 + 24);
              }

              a4->__r_.__value_.__l.__size_ = (std::string::size_type)v55;
              BOOL v36 = v51++ >= a3;
            }

            while (!v36);
          }

          CFRelease(cfa);
          goto LABEL_110;
        }

        goto LABEL_114;
      }
    }
  }

  __break(0x5515u);
  return result;
}

        __break(0x5516u);
        goto LABEL_87;
      }

  __break(0x5507u);
  return result;
}

    __break(0x5516u);
    goto LABEL_87;
  }

LABEL_110:
}

  if (!v48 && v43) {
    goto LABEL_112;
  }
  id v11 = 0;
  if (v48 && v43) {
    id v11 = [v48 isEqualToNumber:v43] ^ 1;
  }
LABEL_113:
  if (!v44)
  {
    int v19 = 1;
    if (!v45) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }

  int v19 = [v67 isEqualToNumber:v44] ^ 1;
  if (v45) {
LABEL_115:
  }
    [v62 isEqualToNumber:v45];
LABEL_116:
  if (v46) {
    uint64_t v73 = [v46 intValue];
  }
  else {
    uint64_t v73 = -1;
  }
  int v20 = -1;
  if (!v80 && v48 && !dword_100119850)
  {
    id v49 = [v48 intValue];
    int v20 = v49 == 0x7FFFFFFF ? 0 : v49;
    if (v20 >= 1)
    {
      if ((((_BYTE)self - 100) & 3) != 0) {
        goto LABEL_220;
      }
      self->_fakeStreamTrackCount = v20;
      self->_fakeStreamTrackIndex = v20 - 1;
      int v20 = v49;
    }
  }

  if (![v65 length] && objc_msgSend(v72, "length")
    || [v65 length] && !objc_msgSend(v72, "length"))
  {
    uint64_t v17 = [v65 length] != 0;
    uint64_t v79 = 1;
  }

  else
  {
    uint64_t v79 = 0;
    uint64_t v17 = 0;
  }

            int v19 = 4;
LABEL_158:
            if (*(unsigned __int16 *)(a2 + 126) != v8)
            {
LABEL_161:
              unint64_t v60 = *(void *)(a1 + 8);
              if (v60 && *(void *)(a2 + 8)) {
                return sub_1000AB4C4(v60, a2, 0, 1u);
              }
              unsigned int v61 = *(void *)(a2 + 8);
              if (v61 && (v61 & 7) == 0)
              {
                uint64_t v62 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v61 + 208LL))(v61);
                if ((*(_DWORD *)(a2 + 64) + 32) < 0x40)
                {
                  sub_1000CEAEC( 0,  4,  "%s:%d handle=%hhx devPort=%s lingo=%d cmd=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoDisplayRemote.cpp",  904,  v60,  v62,  *(_DWORD *)(a2 + 64),  *(unsigned __int16 *)(a2 + 126));
                  unint64_t v60 = *(void *)(a1 + 8);
                  return sub_1000AB4C4(v60, a2, 0, 1u);
                }

                goto LABEL_170;
              }

void sub_100033B40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::string *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
}

void sub_100033B78(uint64_t a1, int a2, unsigned int a3, std::string *a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    context = objc_autoreleasePoolPush();
    if (dword_1001197C8)
    {
      if ((*(_DWORD *)(a1 + 100) & 0x80000000) == 0)
      {
        if (dword_1001197CC > a2)
        {
          uint64_t v8 = sub_10002CD78();
          if (v8 && (v8 & 7) == 0)
          {
            int v9 = sub_10002D200((__CFString *)v8, (uint64_t)@"IAP_ITUNES_RADIO");
            int v10 = a2 + a3;
            if (__OFADD__(a2, a3)) {
              goto LABEL_80;
            }
            id v11 = v9;
            if (v10 > a2 && dword_1001197CC > a2)
            {
              uint64_t v12 = (a2 + 1);
              do
              {
                sub_1000255A4( (uint64_t)&__p,  (char *)-[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  v11,  v12,  context),  "UTF8String"));
                unint64_t size = a4->__r_.__value_.__l.__size_;
                if (size >= a4->__r_.__value_.__l.__cap_)
                {
                  uint64_t v14 = sub_100024640(a4, &__p);
                }

                else
                {
                  sub_1000245B0(a4, &__p);
                  if (size >= 0xFFFFFFFFFFFFFFE8LL) {
                    goto LABEL_79;
                  }
                  uint64_t v14 = (std::string *)(size + 24);
                }

                a4->__r_.__value_.__l.__size_ = (std::string::size_type)v14;
                BOOL v15 = (int)v12 < dword_1001197CC;
                uint64_t v12 = (v12 + 1);
              }

              while (v15);
            }

LABEL_66:
        sub_1000340CC((uint64_t)a4);
        goto LABEL_67;
      }

      if ((*(_DWORD *)(a1 + 96) & 0x80000000) == 0)
      {
        if (dword_1001197CC > a2)
        {
          uint64_t v16 = sub_10002CD78();
          if (v16 && (v16 & 7) == 0)
          {
            uint64_t v17 = sub_10002D200((__CFString *)v16, (uint64_t)@"IAP_ITUNES_GENIUS_MIX");
            int v18 = a2 + a3;
            if (__OFADD__(a2, a3)) {
              goto LABEL_80;
            }
            id v11 = v17;
            if (v18 > a2 && dword_1001197CC > a2)
            {
              uint64_t v19 = (a2 + 1);
              do
              {
                sub_1000255A4( (uint64_t)&__p,  (char *)-[NSString UTF8String]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%d",  v11,  v19,  context),  "UTF8String"));
                unint64_t v20 = a4->__r_.__value_.__l.__size_;
                if (v20 >= a4->__r_.__value_.__l.__cap_)
                {
                  unsigned int v21 = sub_100024640(a4, &__p);
                }

                else
                {
                  sub_1000245B0(a4, &__p);
                  if (v20 >= 0xFFFFFFFFFFFFFFE8LL) {
                    goto LABEL_79;
                  }
                  unsigned int v21 = (std::string *)(v20 + 24);
                }

                a4->__r_.__value_.__l.__size_ = (std::string::size_type)v21;
                BOOL v15 = (int)v19 < dword_1001197CC;
                uint64_t v19 = (v19 + 1);
              }

              while (v15);
            }

            goto LABEL_37;
          }

          goto LABEL_81;
        }

        goto LABEL_66;
      }
    }

    uint64_t v22 = a2;
    uint64_t v23 = a3;
    char v24 = byte_10011BCD0 | (dword_1001197D4 != 0);
    if (!(byte_10011BCD0 & 1 | (dword_1001197D4 != 0)))
    {
      id v25 =   objc_msgSend( (id)qword_10011BCB8,  "itemNamesForRange:forProperty:",  a2,  a3,  MPMediaItemPropertyTitle);
      if (v25)
      {
        if (a3)
        {
          uint64_t v26 = v25;
          uint64_t v27 = 0LL;
          do
          {
            sub_1000255A4((uint64_t)&__p, (char *)objc_msgSend(objc_msgSend(v26, "objectAtIndex:", v27), "UTF8String"));
            unint64_t v28 = a4->__r_.__value_.__l.__size_;
            if (v28 >= a4->__r_.__value_.__l.__cap_)
            {
              uint64_t v29 = sub_100024640(a4, &__p);
            }

            else
            {
              sub_1000245B0(a4, &__p);
              if (v28 >= 0xFFFFFFFFFFFFFFE8LL) {
                goto LABEL_79;
              }
              uint64_t v29 = (std::string *)(v28 + 24);
            }

            a4->__r_.__value_.__l.__size_ = (std::string::size_type)v29;
            ++v27;
          }

          while (a3 != v27);
        }

        goto LABEL_67;
      }
    }

    id v30 = [(id)qword_10011BCB0 items];
    if (!v30) {
      goto LABEL_67;
    }
    unsigned int v31 = a2 + a3;
    if (__CFADD__(a2, a3)) {
      goto LABEL_80;
    }
    unsigned int v32 = v31 - 1;
    if (!v31) {
      goto LABEL_82;
    }
    int v33 = v30;
    if ((v24 & 1) == 0)
    {
      int v37 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", a3);
      if (v32 >= a2)
      {
        for (uint64_t i = 0LL; v32 >= a2 + (int)i; ++i)
        {
          id v39 = objc_msgSend( objc_msgSend(v33, "objectAtIndex:", a2 + i),  "valueForProperty:",  MPMediaItemPropertyTitle);
          -[NSMutableArray addObject:](v37, "addObject:", v39);
          sub_1000255A4((uint64_t)&__p, (char *)[v39 UTF8String]);
          unint64_t v40 = a4->__r_.__value_.__l.__size_;
          if (v40 >= a4->__r_.__value_.__l.__cap_)
          {
            uint64_t v41 = sub_100024640(a4, &__p);
          }

          else
          {
            sub_1000245B0(a4, &__p);
            if (v40 >= 0xFFFFFFFFFFFFFFE8LL)
            {
LABEL_79:
              __break(0x5513u);
              goto LABEL_80;
            }

            uint64_t v41 = (std::string *)(v40 + 24);
          }

          a4->__r_.__value_.__l.__size_ = (std::string::size_type)v41;
          if (a2 + (_DWORD)i == -1) {
            goto LABEL_80;
          }
        }
      }

      objc_msgSend( (id)qword_10011BCB8,  "setItemNames:forRange:forProperty:",  v37,  a2,  v23,  MPMediaItemPropertyTitle);
      goto LABEL_67;
    }

    if (v32 < a2)
    {
LABEL_67:
      objc_autoreleasePoolPop(context);
      return;
    }

    uint64_t v34 = 0LL;
    while (1)
    {
      sub_1000255A4( (uint64_t)&__p,  (char *)objc_msgSend( objc_msgSend( objc_msgSend(v33, "objectAtIndex:", v22 + v34),  "valueForProperty:",  MPMediaItemPropertyTitle),  "UTF8String"));
      unint64_t v35 = a4->__r_.__value_.__l.__size_;
      if (v35 >= a4->__r_.__value_.__l.__cap_)
      {
        BOOL v36 = sub_100024640(a4, &__p);
      }

      else
      {
        sub_1000245B0(a4, &__p);
        if (v35 >= 0xFFFFFFFFFFFFFFE8LL) {
          goto LABEL_79;
        }
        BOOL v36 = (std::string *)(v35 + 24);
      }

      a4->__r_.__value_.__l.__size_ = (std::string::size_type)v36;
      if ((_DWORD)v22 + (_DWORD)v34 == -1) {
        break;
      }
    }

  __break(0x5512u);
  return result;
}

      __break(0x5513u);
    }

          uint64_t result = sub_100061274();
          if (!result || (result & 7) != 0) {
            goto LABEL_97;
          }
          id v25 = sub_10008CBE4(result, v6) >> 4;
          if (v25 == 2) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = 5;
          }
          if (v25 == 1) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = v26;
          }
          v29.sched_priority = 0;
          uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(v2 + 1448));
          uint64_t result = *v7;
          if (*v7)
          {
            if ((result & 3) != 0) {
              goto LABEL_97;
            }
            uint64_t v8 = sub_100055EF8(result, &v29);
            if (!(_DWORD)v8)
            {
              uint64_t result = sub_100061274();
              if (!result || (result & 7) != 0) {
                goto LABEL_97;
              }
              uint64_t v8 = 0LL;
              v29.sched_priority &= dword_10011D098;
            }
          }

          pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1448));
          if (!v29.sched_priority)
          {
LABEL_89:
            uint64_t result = sub_100061274();
            if (result && (result & 7) == 0)
            {
              uint64_t result = sub_100054A7C(result, v6);
              if ((_DWORD)result != 6)
              {
                sub_10006EA98(v2, v6, 0, 0);
                return v8;
              }

              if (((v2 + 1440) & 7) == 0)
              {
                unint64_t v28 = *(unsigned __int8 *)(v2 + 1440);
                sub_10006EA98(v2, v6, 0, 0);
                if (v28) {
                  *(_BYTE *)(v2 + 1440) = v28;
                }
                return v8;
              }
            }

            goto LABEL_97;
          }

          uint64_t result = sub_100061274();
          if (result)
          {
            if ((result & 7) == 0)
            {
              sub_100055074(result, v6, v29.sched_priority);
              uint64_t result = sub_100061274();
              if (result)
              {
                if ((result & 7) == 0)
                {
                  sub_100054FDC(result, v6, v27);
                  goto LABEL_89;
                }
              }
            }
          }

    __break(0x5516u);
    return;
  }

        __break(0x550Au);
        goto LABEL_67;
      }

      goto LABEL_65;
    }

LABEL_80:
    __break(0x5500u);
  }

  fclose(*v4);
  MPMediaQuery *v4 = 0LL;
  v32.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v32.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__str.st_blkunint64_t size = v32;
  *(timespec *)__str.st_qspare = v32;
  __str.st_birthtimespec = v32;
  *(timespec *)&__str.st_unint64_t size = v32;
  __str.st_mtimespec = v32;
  __str.st_ctimespec = v32;
  *(timespec *)&__str.st_uid = v32;
  __str.st_atimespec = v32;
  *(timespec *)&__str.st_dev = v32;
  int v33 = (const char *)(a1 + 80LL * a3 + 1240);
  if ((((_BYTE)a1 + 80 * (_BYTE)a3 - 40) & 7) != 0) {
    goto LABEL_131;
  }
  uint64_t v34 = (const char *)(a1 + 80LL * a3 + 1240);
  if (stat(v34, &__str))
  {
    sub_1000CEAEC( 0,  4,  "%s:%d IPodFileError_NoError != status\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoStorage.cpp",  1195);
    st_unint64_t size = 0LL;
  }

  else
  {
    st_unint64_t size = __str.st_size;
  }

  if ((v9 & 0x18) == 0) {
    goto LABEL_114;
  }
  if ((v9 & 8) == 0) {
    goto LABEL_100;
  }
  memset(&v55, 170, 24);
  std::string::basic_string((std::string *)&v55, (const std::string *)(a1 + 80LL * a3 + 1240));
  if (st_size)
  {
    BOOL v36 = (uint64_t *)(a1 + 80LL * a3 + 1216);
    if ((((_BYTE)a1 + 80 * (_BYTE)a3 - 64) & 7) != 0) {
      goto LABEL_131;
    }
    int v37 = *v36;
    if (*v36)
    {
      if ((v37 & 7) != 0) {
        goto LABEL_131;
      }
      if (sub_1000CD378(v37, (uint64_t)&v55)) {
        sub_1000CEAEC( 0,  4,  "%s:%d 0 != xmlStatus\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoStorage.cpp",  1215);
      }
      goto LABEL_94;
    }

LABEL_81:
  __break(0x5516u);
LABEL_82:
  __break(0x5515u);
}

    __break(0x5516u);
  }

    __break(0x550Au);
    return;
  }

  int v6 = *(unsigned __int16 *)(a2 + 126);
  uint64_t v8 = sub_1000451B0();
  if (!v8
    || (v8 & 7) != 0
    || ((*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 160LL))(v8, 3600000LL), (int v9 = sub_1000451B0()) == 0)
    || (v9 & 7) != 0)
  {
LABEL_80:
    __break(0x5516u);
    goto LABEL_81;
  }

  (*(void (**)(uint64_t))(*(void *)v9 + 168LL))(v9);
  if (v6 > 0x4F) {
    goto LABEL_14;
  }
  switch(v6)
  {
    case 2u:
      int v7 = sub_1000938D4(a1, a2);
      int v6 = 2;
      goto LABEL_15;
    case 4u:
      int v7 = sub_100093A40(a1, a2);
      int v6 = 4;
      goto LABEL_15;
    case 5u:
      int v7 = sub_100093B8C(a1, a2);
      int v6 = 5;
      goto LABEL_15;
    case 7u:
      int v7 = sub_100093DAC(a1, a2);
      int v6 = 7;
      goto LABEL_15;
    case 9u:
      int v7 = sub_100093FAC(a1, a2);
      int v6 = 9;
      goto LABEL_15;
    case 0xBu:
      int v7 = sub_100094054(a1, a2);
      int v6 = 11;
      goto LABEL_15;
    case 0xCu:
      sub_100094154(a1, a2);
      if (*(void *)(a2 + 8))
      {
        int v7 = v14;
        int v6 = 12;
        goto LABEL_15;
      }

      sub_1000AD43C(a2);
      break;
    case 0xEu:
      int v7 = sub_1000617EC(a1, a2);
      int v6 = 14;
      goto LABEL_15;
    case 0x10u:
      int v7 = sub_100094BB4(a1, a2);
      if (!v7 || v7 == 6) {
        return;
      }
      int v6 = 16;
      goto LABEL_15;
    case 0x12u:
      int v7 = sub_100094C7C(a1, a2);
      int v6 = 18;
      goto LABEL_15;
    case 0x14u:
      int v7 = sub_100094D08(a1, a2);
      int v6 = 20;
      goto LABEL_15;
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x1Au:
    case 0x38u:
    case 0x3Bu:
      int v10 = (uint64_t)operator new(0x78uLL);
      if ((v10 & 0xF) != 0) {
        goto LABEL_80;
      }
      id v11 = v10;
      if ((v10 & 7) != 0) {
        goto LABEL_80;
      }
      sub_10009E2D0(v10, *(void *)(a1 + 8), a2);
      goto LABEL_33;
    case 0x1Cu:
      int v7 = sub_100094E08(a1, a2);
      int v6 = 28;
      goto LABEL_15;
    case 0x1Eu:
      int v7 = sub_100095028(a1, a2);
      int v6 = 30;
      goto LABEL_15;
    case 0x20u:
      int v7 = sub_1000950C4(a1, a2);
      int v6 = 32;
      goto LABEL_15;
    case 0x22u:
      int v7 = sub_1000952B8(a1, a2);
      int v6 = 34;
      goto LABEL_15;
    case 0x24u:
      int v7 = sub_1000954AC(a1, a2);
      int v6 = 36;
      goto LABEL_15;
    case 0x26u:
      int v7 = sub_1000956A0(a1, a2);
      int v6 = 38;
      goto LABEL_15;
    case 0x28u:
      int v7 = sub_100095770(a1, a2);
      int v6 = 40;
      goto LABEL_15;
    case 0x29u:
      int v7 = sub_10009580C(a1, a2);
      int v6 = 41;
      goto LABEL_15;
    case 0x2Au:
      int v7 = sub_100095D0C(a1, a2);
      int v6 = 42;
      goto LABEL_15;
    case 0x2Cu:
      int v7 = sub_100095E6C(a1, a2);
      int v6 = 44;
      goto LABEL_15;
    case 0x2Eu:
      int v7 = sub_100095F14(a1, a2);
      int v6 = 46;
      goto LABEL_15;
    case 0x2Fu:
      int v7 = sub_100096014(a1, a2);
      int v6 = 47;
      goto LABEL_15;
    case 0x31u:
      int v7 = sub_1000960BC(a1, a2);
      int v6 = 49;
      goto LABEL_15;
    case 0x32u:
      int v7 = sub_1000961BC(a1, a2);
      int v6 = 50;
      goto LABEL_15;
    case 0x33u:
      int v7 = sub_1000963B4(a1, a2);
      int v6 = 51;
      goto LABEL_15;
    case 0x35u:
      int v7 = sub_1000964CC(a1, a2);
      int v6 = 53;
      goto LABEL_15;
    case 0x37u:
      int v7 = sub_10009656C(a1, a2);
      int v6 = 55;
      goto LABEL_15;
    case 0x39u:
      int v7 = sub_1000967CC(a1, a2);
      int v6 = 57;
      goto LABEL_15;
    case 0x3Cu:
    case 0x3Eu:
    case 0x40u:
    case 0x42u:
      uint64_t v12 = (uint64_t)operator new(0x78uLL);
      if ((v12 & 0xF) != 0) {
        goto LABEL_80;
      }
      id v11 = v12;
      if ((v12 & 7) != 0) {
        goto LABEL_80;
      }
      sub_10009E738(v12, *(void *)(a1 + 8), a2);
LABEL_33:
      id v13 = *(void *)(v11 + 48);
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_80;
      }
      sub_10005BC28(v13, v11);
      return;
    case 0x44u:
      int v7 = sub_1000638CC(a1, a2);
      int v6 = 68;
      goto LABEL_15;
    case 0x45u:
      int v7 = sub_10009A2B0(a1, a2);
      int v6 = 69;
      goto LABEL_15;
    case 0x47u:
      int v7 = sub_100063AB4(a1, a2);
      int v6 = 71;
      goto LABEL_15;
    case 0x48u:
      int v7 = sub_100096918(a1, a2);
      int v6 = 72;
      goto LABEL_15;
    case 0x4Au:
      int v7 = sub_100096930(a1, a2);
      int v6 = 74;
      goto LABEL_15;
    case 0x4Bu:
      int v7 = sub_100096BD8(a1, a2);
      int v6 = 75;
      goto LABEL_15;
    case 0x4Cu:
      int v7 = sub_100096DBC(a1, a2);
      int v6 = 76;
      goto LABEL_15;
    case 0x4Eu:
      int v7 = sub_100096F2C(a1, a2);
      if (!v7 || v7 == 6) {
        return;
      }
      int v6 = 78;
      goto LABEL_15;
    default:
      int v7 = 4;
      sub_1000CEAEC( 0,  4,  "%s:%d ERROR: CIapLingoRemoteUI::ProcessCmd Unknown CmdID: 0x%04X\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoRemoteUI.cpp",  1436,  v6);
      goto LABEL_15;
  }

void sub_100034070( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_1000340CC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_10002552C(a1, *(void *)a1);
  }
}

void sub_1000340E4(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    int v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v7 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertyArtistPersistentID];
    if (v7) {
      [(id)qword_10011BCA8 removeObjectForKey:MPMediaItemPropertyArtistPersistentID];
    }
    id v8 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertyAlbumPersistentID];
    if (v8)
    {
      [(id)qword_10011BCA8 removeObjectForKey:MPMediaItemPropertyAlbumPersistentID];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304((uint64_t)MPMediaItemPropertyArtist, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
      if (!v7)
      {
LABEL_7:
        [(id)qword_10011BCA8 setObject:v8 forKey:MPMediaItemPropertyAlbumPersistentID];
LABEL_8:
        objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
LABEL_9:

        return;
      }
    }

    else
    {
      if (!v7)
      {
        sub_100034304((uint64_t)MPMediaItemPropertyArtist, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
        goto LABEL_9;
      }

      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304((uint64_t)MPMediaItemPropertyArtist, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
    }

    [(id)qword_10011BCA8 setObject:v7 forKey:MPMediaItemPropertyArtistPersistentID];
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  __break(0x5516u);
}

void sub_100034304(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4, int a5)
{
  if (a3)
  {
    int v10 = dword_1001197D4;
    int v37 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (v10) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = a5 == 0;
    }
    if (v11)
    {
      id v12 = objc_msgSend((id)qword_10011BCB0, "collections", v37);
      if (!v12) {
        goto LABEL_57;
      }
      unsigned int v13 = a2 + a3;
      if (__CFADD__(a2, a3)) {
        goto LABEL_60;
      }
      unsigned int v14 = v13 - 1;
      if (v13)
      {
        BOOL v15 = v12;
        if ((unint64_t)[v12 count] > v14 && v14 >= a2)
        {
          uint64_t v17 = 0LL;
          while (1)
          {
            int v18 = (__CFString *)objc_msgSend( objc_msgSend(objc_msgSend(v15, "objectAtIndex:", a2 + v17), "representativeItem"),  "valueForProperty:",  a1);
            if (!v18) {
              int v18 = &stru_10010A828;
            }
            sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](v18, "UTF8String"));
            unint64_t size = a4->__r_.__value_.__l.__size_;
            if (size >= a4->__r_.__value_.__l.__cap_)
            {
              unint64_t v20 = sub_100024640(a4, &__p);
            }

            else
            {
              sub_1000245B0(a4, &__p);
              if (size >= 0xFFFFFFFFFFFFFFE8LL)
              {
LABEL_59:
                __break(0x5513u);
                goto LABEL_60;
              }

              unint64_t v20 = (std::string *)(size + 24);
            }

            a4->__r_.__value_.__l.__size_ = (std::string::size_type)v20;
            if (a2 + (_DWORD)v17 == -1) {
              goto LABEL_60;
            }
          }
        }

        goto LABEL_57;
      }
    }

    else
    {
      uint64_t v21 = a3;
      id v22 = objc_msgSend((id)qword_10011BCB8, "itemNamesForRange:forProperty:", a2, a3, a1, v37);
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = 0LL;
        do
        {
          sub_1000255A4((uint64_t)&__p, (char *)objc_msgSend(objc_msgSend(v23, "objectAtIndex:", v24), "UTF8String"));
          unint64_t v25 = a4->__r_.__value_.__l.__size_;
          if (v25 >= a4->__r_.__value_.__l.__cap_)
          {
            uint64_t v26 = sub_100024640(a4, &__p);
          }

          else
          {
            sub_1000245B0(a4, &__p);
            if (v25 >= 0xFFFFFFFFFFFFFFE8LL) {
              goto LABEL_59;
            }
            uint64_t v26 = (std::string *)(v25 + 24);
          }

          a4->__r_.__value_.__l.__size_ = (std::string::size_type)v26;
          ++v24;
        }

        while (a3 != v24);
        goto LABEL_57;
      }

      id v27 = [(id)qword_10011BCB8 collectionsForProperty:a1];
      if (!v27)
      {
        id v28 = [(id)qword_10011BCB0 collections];
        if (!v28) {
          goto LABEL_57;
        }
        id v27 = v28;
        objc_msgSend( (id)qword_10011BCB8,  "setCollections:forProperty:",  +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v28),  a1);
      }

      unsigned int v29 = a2 + a3;
      if (__CFADD__(a2, a3)) {
        goto LABEL_60;
      }
      unsigned int v30 = v29 - 1;
      if (v29)
      {
        if ((unint64_t)[v27 count] > v30)
        {
          unsigned int v31 = +[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", a3);
          if (v30 >= a2)
          {
            uint64_t v32 = 0LL;
            while (1)
            {
              int v33 = (const __CFString *)objc_msgSend( objc_msgSend( objc_msgSend(v27, "objectAtIndex:", a2 + v32),  "representativeItem"),  "valueForProperty:",  a1);
              uint64_t v34 = v33 ? (__CFString *)v33 : &stru_10010A828;
              -[NSMutableArray addObject:](v31, "addObject:", v34);
              sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](v34, "UTF8String"));
              unint64_t v35 = a4->__r_.__value_.__l.__size_;
              if (v35 >= a4->__r_.__value_.__l.__cap_)
              {
                BOOL v36 = sub_100024640(a4, &__p);
              }

              else
              {
                sub_1000245B0(a4, &__p);
                if (v35 >= 0xFFFFFFFFFFFFFFE8LL) {
                  goto LABEL_59;
                }
                BOOL v36 = (std::string *)(v35 + 24);
              }

              a4->__r_.__value_.__l.__size_ = (std::string::size_type)v36;
              if (a2 + (_DWORD)v32 == -1) {
                break;
              }
            }

LABEL_60:
            __break(0x5500u);
            goto LABEL_61;
          }

  if (self->_fakeStreamTrackIndexNeedChange)
  {
    self->_fakeStreamTrackIndexNeedChange = 0;
    uint64_t v21 = 1;
  }

  if (dword_100119850 == 4) {
    uint64_t v21 = 0;
  }
  if ((v17 | v21) == 1)
  {
    id v27 = v77;
    if (v76) {
      id v27 = 1;
    }
    if ((v84 | v27) == 1)
    {
      unsigned int v29 = v73 == -1 || v20 < 1 || v84;
      if (v29 == 1)
      {
        if (self->_fakeStreamTrackIndexSet)
        {
          self->_fakeStreamTrackIndexSet = 0;
        }

        else
        {
          if (dword_100119850)
          {
            if (dword_100119850 == 3)
            {
              -[MediaPlayerHelper _calcNewFakeStreamIndexCount](self, "_calcNewFakeStreamIndexCount");
            }

            else if (dword_100119850 == 2)
            {
              self->_fakeStreamTrackIndex = (self->_fakeStreamTrackIndex & 1) == 0;
            }
          }

          else
          {
            p_fakeStreamTrackCount = &self->_fakeStreamTrackCount;
            if (*p_fakeStreamTrackCount - 1 < 0x1E847F) {
              unsigned int v51 = *p_fakeStreamTrackCount + 1;
            }
            else {
              unsigned int v51 = 2;
            }
            *p_fakeStreamTrackCount = v51;
            if (!v51) {
              goto LABEL_223;
            }
            self->_fakeStreamTrackIndex = v51 - 1;
          }

          self->_fakeStreamTrackIndexSetTimestamp = 0;
        }

        if (qword_10011BD40 != -1) {
          dispatch_once(&qword_10011BD40, &stru_1001046A0);
        }
        if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
          goto LABEL_220;
        }
      }

      if ((v21 & 1) != 0)
      {
        if (qword_10011BD40 != -1) {
          dispatch_once(&qword_10011BD40, &stru_1001046A0);
        }
        if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
          goto LABEL_220;
        }
        sub_10003AFF0(qword_10011BD38);
        -[MediaPlayerHelper performSelectorOnMainThread:withObject:waitUntilDone:]( self,  "performSelectorOnMainThread:withObject:waitUntilDone:",  "_nowPlayingItemChanged:",  0LL,  0LL);
      }
    }

    else if (v21)
    {
      -[MediaPlayerHelper performSelectorOnMainThread:withObject:waitUntilDone:]( self,  "performSelectorOnMainThread:withObject:waitUntilDone:",  "_nowPlayingItemChanged:",  0LL,  0LL);
      if ((v24 & 1) == 0) {
        goto LABEL_170;
      }
      goto LABEL_163;
    }
  }

  if (!v24) {
    goto LABEL_170;
  }
LABEL_163:
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  if (!qword_10011BD38) {
    goto LABEL_220;
  }
  if ((qword_10011BD38 & 7) != 0) {
    goto LABEL_220;
  }
  (*(void (**)(void))(*(void *)qword_10011BD38 + 56LL))();
  id v52 = sub_10004783C();
  if (!v52 || (v52 & 7) != 0) {
    goto LABEL_220;
  }
  sub_10004B9C4(v52);
LABEL_170:
  if (v83)
  {
    if (v75) {
      uint64_t v53 = self->_nowPlayingAppIsIPodRadio == 0;
    }
    else {
      uint64_t v53 = 0;
    }
    unint64_t v54 = !v53;
    self->_lastWasStreamPlayback = v54;
  }

  if (v19)
  {
    if (dword_100119848) {
      goto LABEL_190;
    }
    if (v13 != 0.0)
    {
      if (!self->_explicitControlOccurred)
      {
        uint64_t v57 = v83;
        if (v18 == 0.0) {
          uint64_t v57 = 0;
        }
        if (!v57 && self->_lastWasStreamPlayback)
        {
          signed int v58 = sub_100062E0C();
          if ((((_BYTE)self - 84) & 3) != 0) {
            goto LABEL_220;
          }
          self->_lastTimeNowPlayingPBRateChangeToPauseOrStop = v58;
          int v59 = dispatch_time(0LL, 2000000000LL);
          p_nowPlayingHandlerQueue = &self->nowPlayingHandlerQueue;
          unsigned int v61 = (dispatch_queue_s *)*p_nowPlayingHandlerQueue;
          if (!*p_nowPlayingHandlerQueue) {
            goto LABEL_225;
          }
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10003B088;
          block[3] = &unk_100101C70;
          void block[4] = self;
          dispatch_after(v59, v61, block);
LABEL_189:
          self->_explicitControlOccurred = 0;
LABEL_190:
          if (qword_10011BD40 != -1) {
            dispatch_once(&qword_10011BD40, &stru_1001046A0);
          }
          uint64_t v55 = qword_10011BD38;
          if (qword_10011BD38 && (qword_10011BD38 & 7) == 0)
          {
            -[MediaPlayerHelper nowPlayingAppPlaybackState](self, "nowPlayingAppPlaybackState");
            (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)v55 + 56LL))( v55,  524301LL,  0LL,  0LL,  0LL);
            goto LABEL_195;
          }

            if (a3 <= 0xE && ((1 << a3) & 0x5244) != 0)
            {
              unsigned int v29 = a4 & 0x7F;
              unsigned int v30 = v29 < 0x40;
              unsigned int v31 = 1LL << a4;
              if ((a4 & 0x40) != 0) {
                unsigned int v31 = 0LL;
              }
              unsigned int v96 = v31;
              a4 &= 0x7Fu;
            }

            else if (a4 < 0x80)
            {
              unsigned int v29 = a4;
              unsigned int v30 = a4 < 0x40;
            }

            else
            {
              sub_1000CEAEC( 0,  4,  "%s:%d Cmd limited to 128 bits currently\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapAuthentic/IapAuthentic.cpp",  2816);
              unsigned int v30 = 0;
              unsigned int v29 = a4;
            }

            uint64_t v32 = 0LL;
            int v33 = 0LL;
            uint64_t v34 = 0LL;
            switch(a3)
            {
              case 0:
                if (v30)
                {
                  if ((v25 & 7) == 0)
                  {
                    unint64_t v35 = *(uint64_t **)v25;
                    if (*(void *)v25)
                    {
                      if ((v35 & 7) == 0 && (v26 & 7) == 0)
                      {
                        BOOL v36 = *(uint64_t **)v26;
                        if (*(void *)v26)
                        {
                        }
                      }
                    }
                  }

                  goto LABEL_223;
                }

                unint64_t v89 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v89 & 7) != 0) {
                  goto LABEL_223;
                }
                __int128 v90 = (uint64_t *)(v89 + 56);
                __int128 v91 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v92 = v91 + 7;
                int v33 = *v90;
                uint64_t v34 = *v92;
                v93 = 1LL << a4;
                if (v29 >= 0x80) {
                  v93 = 0LL;
                }
                unsigned int v96 = v93;
                uint64_t v32 = 0x7FFFFFFFFFF7LL;
                goto LABEL_215;
              case 1:
                int v47 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v47 & 7) != 0) {
                  goto LABEL_223;
                }
                int v48 = (unsigned __int16 *)(v47 + 72);
                id v49 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v50 = (unsigned __int16 *)(v49 + 9);
                int v33 = *v48;
                uint64_t v34 = *v50;
                uint64_t v32 = 0x1FFFLL;
                goto LABEL_215;
              case 2:
                unsigned int v51 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v51 & 7) != 0) {
                  goto LABEL_223;
                }
                id v52 = (unsigned int *)(v51 + 64);
                uint64_t v53 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                unint64_t v54 = (unsigned int *)(v53 + 8);
                int v33 = *v52;
                uint64_t v34 = *v54;
                uint64_t v32 = 67108859LL;
                goto LABEL_215;
              case 3:
                uint64_t v55 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v55 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v56 = (uint64_t *)(v55 + 8);
                uint64_t v57 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                signed int v58 = v57 + 1;
                int v33 = *v56;
                uint64_t v34 = *v58;
                uint64_t v32 = 0x7FFFFFFFFLL;
                goto LABEL_215;
              case 4:
                if (v30)
                {
                  int v37 = *(void *)v25;
                  if (!*(void *)v25) {
                    goto LABEL_223;
                  }
                  if ((v37 & 7) != 0) {
                    goto LABEL_223;
                  }
                  unint64_t v35 = (uint64_t *)(v37 + 16);
                  int v38 = *(uint64_t **)v26;
                  if (!*(void *)v26) {
                    goto LABEL_223;
                  }
                  BOOL v36 = v38 + 2;
LABEL_86:
                  int v33 = *v35;
                  uint64_t v34 = *v36;
                  uint64_t v32 = -1LL;
                }

                else
                {
                  __int128 v85 = *(void *)v25;
                  if (!*(void *)v25) {
                    goto LABEL_223;
                  }
                  if ((v85 & 7) != 0) {
                    goto LABEL_223;
                  }
                  __int128 v86 = (unsigned int *)(v85 + 48);
                  __int128 v87 = *(uint64_t **)v26;
                  if (!*(void *)v26) {
                    goto LABEL_223;
                  }
                  unint64_t v88 = (unsigned int *)(v87 + 6);
                  if (a4 - 64 > 0x3F) {
                    goto LABEL_225;
                  }
                  int v33 = *v86;
                  uint64_t v34 = *v88;
                  unsigned int v96 = 1LL << (a4 - 64);
                  uint64_t v32 = 65471LL;
                }

    if ((v9 & 0x4000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_61;
  }

  v108[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v23 = *(void *)(a1 + 1200);
  if (!v23 || (v23 & 7) != 0) {
    goto LABEL_262;
  }
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 384LL))(v23);
  v108[0] = v24;
  if (!v24) {
    goto LABEL_70;
  }
  unint64_t v25 = v24;
  if ((v24 & 7) != 0) {
    goto LABEL_262;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v24 + 16LL))(v24))
  {
LABEL_70:
    int v37 = sub_100061534((_DWORD *)(a1 + 1300), (int *)(a1 + 1296));
    if (v37 > 0x1F) {
      goto LABEL_263;
    }
    if (v37) {
      goto LABEL_261;
    }
LABEL_72:
    sub_100064D0C(v108);
    if ((v9 & 0x2000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_60;
  }

  if ((v9 & 0x100) != 0) {
    *(void *)(a1 + 128_Block_object_dispose(va, 8) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 24LL))(v25);
  }
  if ((v9 & 0xE0) == 0)
  {
LABEL_109:
    if (*(_BYTE *)(a1 + 1334)) {
      unsigned int v46 = v105 == 0;
    }
    else {
      unsigned int v46 = 0;
    }
    int v47 = !v46;
    if ((v9 & 0x400) != 0 && v47)
    {
      if ((v107 & 0x104) != 0) {
        *(_BYTE *)(a1 + 1334) = 0;
      }
      *(_BYTE *)(a1 + 1334) = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 256LL))(v25);
    }

    if (((v105 != 0) & (v9 >> 11)) != 0 || (v107 & 0x800) != 0) {
      *(_DWORD *)(a1 + 1336) = sub_100097130(a1, 0x27u, v25);
    }
    goto LABEL_72;
  }

  if ((v107 & 0x104) != 0 || (uint64_t v26 = *(_DWORD *)(a1 + 1316), v26 == -1)) {
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 368LL))(v25);
  }
  if (!v26)
  {
    *(void *)(a1 + 1316) = 0xFFFFFFFF00000000LL;
    uint64_t v32 = -1;
    *(_DWORD *)(a1 + 1324) = -1;
    goto LABEL_108;
  }

  *(_DWORD *)(a1 + 1316) = v26;
  id v27 = *(void *)(a1 + 1200);
  if (!v27 || (v27 & 7) != 0) {
    goto LABEL_262;
  }
  id v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 208LL))(v27);
  *(_DWORD *)(a1 + 13memset(md, 170, 20) = v28;
  unsigned int v29 = *(_DWORD *)(a1 + 1308);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 376LL))(v25, v28);
  unsigned int v31 = v29 - result;
  if (v29 >= result)
  {
    *(_DWORD *)(a1 + 1324) = v31;
    uint64_t v32 = v31 / 0x3E8;
    int v6 = (void *)&unk_10011C000;
LABEL_108:
    *(_DWORD *)(a1 + 132_Block_object_dispose(va, 8) = v32;
    goto LABEL_109;
  }

      __break(0x5518u);
      goto LABEL_61;
    }
  }

  uint64_t result = sub_1000ACADC(v2, v11);
  if (result)
  {
    unsigned int v13 = *(_DWORD *)(v2 + 56);
    id v12 = v11;
    if (v11 > v13) {
      goto LABEL_60;
    }
    goto LABEL_22;
  }

  return result;
}

LABEL_61:
    __break(0x5515u);
  }

    __break(0x5513u);
    goto LABEL_62;
  }

                                      uint64_t result = sub_10007CF80(v1, 132LL);
                                      if (*(_BYTE *)(v1 + 2202))
                                      {
                                        id v12 = 15LL;
LABEL_98:
                                        kdebug_trace(731139620LL, 0LL, 0LL, 0LL, 0LL);
                                        return v12;
                                      }

                                      if (v3)
                                      {
                                        if ((v3 & 7) == 0)
                                        {
                                          *(_BYTE *)(v1 + 2214) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272LL))(v3);
                                          uint64_t result = sub_100061274();
                                          if (result)
                                          {
                                            if ((result & 7) == 0)
                                            {
                                              sub_10008D0F4(result, v3, 56);
                                              sub_10006FED0(v1, v3, 0);
                                              *(_BYTE *)(v1 + 2200) = 1;
                                              uint64_t result = *(void *)(v1 + 8);
                                              if (result)
                                              {
                                                if ((result & 7) == 0)
                                                {
                                                  unsigned int v13 = sub_1000579D4(result);
                                                  uint64_t result = sub_10006FDE8(v1, 0LL, 0);
                                                  if (v13)
                                                  {
                                                    if ((v13 & 7) == 0)
                                                    {
                                                      uint64_t result = sub_100061274();
                                                      if (result)
                                                      {
                                                        if ((result & 7) == 0)
                                                        {
                                                          sub_10008D224(result, v3);
                                                          uint64_t result = sub_100061274();
                                                          if (result)
                                                          {
                                                            if ((result & 7) == 0)
                                                            {
                                                              sub_10008CC64(result, v3, 0, 0);
                                                              sub_100070C38(v1, v14, 1LL);
                                                              uint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
                                                              id v22 = 0xAAAAAAAAAAAAAAAALL;
                                                              v19[0] = 0xF00000000LL;
                                                              v19[1] = v3;
                                                              v19[2] = 0LL;
                                                              unint64_t v20 = *(void *)(v1 + 8);
                                                              sub_10005BEC8(0, 0LL, (uint64_t)v19, 48, v20);
                                                              uint64_t result = sub_1000BE638();
                                                              if (result)
                                                              {
                                                                uint64_t v16 = result;
                                                                if ((result & 7) == 0)
                                                                {
                                                                  uint64_t v17 = sub_1000C0034(*(void *)(v1 + 8));
                                                                  (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 120LL))( v16,  v17);
                                                                  sub_10006E778(v1, 1);
                                                                  *(void *)(v1 + 1272) = 0LL;
                                                                  uint64_t result = v1 + 1992;
                                                                  if (((v1 + 1992) & 7) == 0)
                                                                  {
                                                                    sub_10006EC68(result);
                                                                    sub_10006E9E8(v1);
                                                                    uint64_t result = *(void *)(v1 + 8);
                                                                    if (result)
                                                                    {
                                                                      if ((result & 7) == 0)
                                                                      {
                                                                        sub_100057B04(result);
                                                                        uint64_t v23 = 116;
                                                                        if (sub_100063558(v1, 116))
                                                                        {
LABEL_92:
                                                                          if (sub_100063CE8(v3)
                                                                            && (v7 == 100 || v7 == -1))
                                                                          {
                                                                            *(_BYTE *)(v1 + 1533) = 1;
                                                                            if (sub_100062D14( (void *)v1,  -1,  115,  0LL,  2000)) {
                                                                              sub_1000CEAEC( 0,  4,  "%s:%d SetCmdTimeout failed!\n",  "/Library/Caches/com.apple.xbs/Sources/ia pd/iapd/IAP/Source/IapLingoGeneral.cpp",  16006);
                                                                            }
                                                                          }

                                                                          sub_10007CF80(v1, 132LL);
                                                                          id v12 = 0LL;
                                                                          goto LABEL_98;
                                                                        }

                                                                        uint64_t result = sub_100061274();
                                                                        if (result && (result & 7) == 0)
                                                                        {
                                                                          if (sub_1000BBFD4((uint64_t *)result))
                                                                          {
                                                                            else {
                                                                              int v18 = 3100;
                                                                            }
                                                                            sub_100062D14( (void *)v1,  -1,  v23,  0LL,  v18);
                                                                          }

                                                                          goto LABEL_92;
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }

                                      goto LABEL_100;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      goto LABEL_100;
    }
  }

      if (!a2)
      {
LABEL_81:
        int v33 = 0LL;
LABEL_254:
        if (*(_BYTE *)(a1 + 1384)) {
          return v33;
        }
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v92) {
          return v33;
        }
        *(_BYTE *)(a1 + 1384) = 1;
        sub_1000612C4(*(void *)(a1 + 8));
        if (v93 && (v93 & 7) == 0)
        {
          sub_10005EA88(v93, *(_DWORD *)(a1 + 1376));
          return v33;
        }

        goto LABEL_262;
      }

              *int v9 = bswap32(a3);
              BOOL v36 = v48.__r_.__value_.__s.__size_;
              if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                BOOL v36 = v48.__r_.__value_.__l.__size_;
              }
              int v37 = __CFADD__(v36, 1LL);
              int v38 = v36 + 1;
              if (v37) {
                goto LABEL_107;
              }
              int v37 = v11 >= 4;
              v11 -= 4;
              if (!v37) {
                goto LABEL_108;
              }
              if (v38 <= v11)
              {
                if (v38 >> 16) {
                  goto LABEL_105;
                }
                BOOL v11 = v38;
              }

              else if (HIWORD(v11))
              {
                goto LABEL_105;
              }

              if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                id v39 = &v48;
              }
              else {
                id v39 = (std::string *)v48.__r_.__value_.__r.__words[0];
              }
              memcpy(v9 + 1, v39, (unsigned __int16)v11);
              unsigned int v13 = (unsigned __int16)v11;
              sub_1000616D4(v17, (uint64_t)(v9 + 1), (unsigned __int16)v11);
              unint64_t v40 = sub_1000ABB10(v10, 0, 4LL, 27, v16, v9, (unsigned __int16)(v11 + 4));
              if (!v40)
              {
                int v10 = 3LL;
LABEL_85:
                if (!*(_BYTE *)(v15 + 60)) {
                  sub_1000D276C();
                }
                goto LABEL_91;
              }

              int v10 = v40;
              uint64_t v41 = *(void *)(v15 + 48);
              if (v41 && (v41 & 7) == 0)
              {
                sub_10005BDD0(v41, v15, v10);
                if (sub_10009703C(v17, v10, 0, v43))
                {
                  int v10 = 2LL;
                  goto LABEL_85;
                }

                int v37 = __CFADD__(a3++, 1);
                if (v37) {
                  goto LABEL_107;
                }
                int v10 = 0LL;
                --a5;
LABEL_91:
                goto LABEL_93;
              }
            }

            else
            {
              uint64_t v34 = sub_10002CD78();
              if (v34 && (v34 & 7) == 0)
              {
                (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v34 + 88LL))(v34, 1376257LL, &v48);
                unint64_t size = v48.__r_.__value_.__s.__size_;
                unsigned int v31 = v48.__r_.__value_.__s.__size_;
                uint64_t v32 = v48.__r_.__value_.__l.__size_;
                if ((v48.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v35 = v48.__r_.__value_.__s.__size_;
                }
                else {
                  unint64_t v35 = v48.__r_.__value_.__l.__size_;
                }
                if (!v35)
                {
                  std::string::assign(&v48, "Unknown");
                  unint64_t size = v48.__r_.__value_.__s.__size_;
                  uint64_t v32 = v48.__r_.__value_.__l.__size_;
                  unsigned int v31 = v48.__r_.__value_.__s.__size_;
                }

                goto LABEL_58;
              }
            }
          }
        }
      }
    }
  }

  id v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 136LL))(v21, 4LL);
  if (v22 < 0x10000)
  {
    BOOL v11 = (unsigned __int16)v22;
    int v9 = operator new[]((unsigned __int16)v22);
    uint64_t v23 = sub_100063A78(v17);
    if (v23)
    {
      unsigned int v13 = v23;
      if ((v23 & 7) == 0) {
        goto LABEL_32;
      }
    }

    goto LABEL_31;
  }

          __break(0x5513u);
        }

  if ((a2 & 0x400) != 0 && a3) {
    sub_1000B8024(a3);
  }
  if ((a2 & 0x2000) != 0 && a3) {
    sub_1000B80D4(a3);
  }
}

void sub_100034688( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1000346C0(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v7 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertyAlbumPersistentID];
    if (v7)
    {
      id v8 = v7;
      [(id)qword_10011BCA8 removeObjectForKey:MPMediaItemPropertyAlbumPersistentID];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304((uint64_t)MPMediaItemPropertyAlbumTitle, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
      [(id)qword_10011BCA8 setObject:v8 forKey:MPMediaItemPropertyAlbumPersistentID];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    }

    else
    {
      sub_100034304((uint64_t)MPMediaItemPropertyAlbumTitle, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
    }
  }

void sub_10003482C(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(0)),  MPMediaItemPropertyMediaType)));
    sub_100034304((uint64_t)MPMediaItemPropertyGenre, a2, a3, a4, 1);
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
  }

void sub_10003494C(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    int v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v7 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertyComposerPersistentID];
    if (v7) {
      [(id)qword_10011BCA8 removeObjectForKey:MPMediaItemPropertyComposerPersistentID];
    }
    id v8 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertyAlbumPersistentID];
    if (v8)
    {
      [(id)qword_10011BCA8 removeObjectForKey:MPMediaItemPropertyAlbumPersistentID];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304((uint64_t)MPMediaItemPropertyComposer, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
      if (!v7)
      {
LABEL_7:
        [(id)qword_10011BCA8 setObject:v8 forKey:MPMediaItemPropertyAlbumPersistentID];
LABEL_8:
        objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
LABEL_9:

        return;
      }
    }

    else
    {
      if (!v7)
      {
        sub_100034304((uint64_t)MPMediaItemPropertyComposer, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
        goto LABEL_9;
      }

      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304((uint64_t)MPMediaItemPropertyComposer, a2, a3, a4, (byte_10011BCD0 & 1) == 0);
    }

    [(id)qword_10011BCA8 setObject:v7 forKey:MPMediaItemPropertyComposerPersistentID];
    if (!v8) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  __break(0x5516u);
}

void sub_100034B6C(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    BOOL v11 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v7 = MPMediaItemPropertySeriesName;
    id v8 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeriesName];
    if (v8) {
      [(id)qword_10011BCA8 removeObjectForKey:v7];
    }
    uint64_t v9 = MPMediaItemPropertySeasonNumber;
    id v10 = [(id)qword_10011BCA8 objectForKey:MPMediaItemPropertySeasonNumber];
    if (v10)
    {
      [(id)qword_10011BCA8 removeObjectForKey:v9];
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304(v7, a2, a3, a4, 0);
      if (!v8)
      {
LABEL_7:
        [(id)qword_10011BCA8 setObject:v10 forKey:v9];
LABEL_8:
        objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
LABEL_9:

        return;
      }
    }

    else
    {
      if (!v8)
      {
        sub_100034304(v7, a2, a3, a4, 0);
        goto LABEL_9;
      }

      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
      sub_100034304(v7, a2, a3, a4, 0);
    }

    [(id)qword_10011BCA8 setObject:v8 forKey:v7];
    if (!v10) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  __break(0x5516u);
}

void sub_100034D50(uint64_t a1, unsigned int a2, int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_24:
    __break(0x5516u);
    goto LABEL_25;
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  id v8 = +[MPMediaQuery audiobooksQuery](&OBJC_CLASS___MPMediaQuery, "audiobooksQuery");
  -[MPMediaQuery setGroupingType:](v8, "setGroupingType:", 0LL);
  uint64_t v9 = -[MPMediaQuery items](v8, "items");
  if ((a2 & 0x80000000) != 0) {
    goto LABEL_21;
  }
  id v10 = v9;
  if (!v9) {
    goto LABEL_21;
  }
  NSUInteger v11 = -[NSArray count](v9, "count");
  int v12 = a2 + a3;
  if (__CFADD__(a2, a3))
  {
LABEL_22:
    __break(0x5500u);
LABEL_23:
    __break(0x5513u);
    goto LABEL_24;
  }

  unsigned int v13 = v12 - 1;
  if (v12)
  {
    if (v11 > v13 && v13 >= a2)
    {
      uint64_t v14 = 0LL;
      do
      {
        sub_1000255A4( (uint64_t)&__p,  (char *)objc_msgSend( objc_msgSend( -[NSArray objectAtIndex:](v10, "objectAtIndex:", a2 + v14),  "valueForProperty:",  MPMediaItemPropertyTitle),  "UTF8String"));
        unint64_t size = a4->__r_.__value_.__l.__size_;
        if (size >= a4->__r_.__value_.__l.__cap_)
        {
          uint64_t v16 = sub_100024640(a4, &__p);
        }

        else
        {
          sub_1000245B0(a4, &__p);
          if (size >= 0xFFFFFFFFFFFFFFE8LL) {
            goto LABEL_23;
          }
          uint64_t v16 = (std::string *)(size + 24);
        }

        a4->__r_.__value_.__l.__size_ = (std::string::size_type)v16;
        if (a2 + (_DWORD)v14 == -1) {
          goto LABEL_22;
        }
      }

      while (v13 >= a2 + ++v14);
    }

void sub_100034EF4( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100034F0C(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (byte_10011BCD0) {
      uint64_t v7 = 1024LL;
    }
    else {
      uint64_t v7 = 1026LL;
    }
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(v7)),  MPMediaItemPropertyMediaType)));
    sub_100034304((uint64_t)MPMediaItemPropertyAlbumTitle, a2, a3, a4, 0);
    objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
  }

void sub_100035034(uint64_t a1, unsigned int a2, unsigned int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if ([(id)qword_10011BCE0 showITunesU])
    {
      if (byte_10011BCD0) {
        uint64_t v7 = 4096LL;
      }
      else {
        uint64_t v7 = 4104LL;
      }
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithObject:]( NSSet,  "setWithObject:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100031104(v7)),  MPMediaItemPropertyMediaType)));
      sub_100034304((uint64_t)MPMediaItemPropertyAlbumTitle, a2, a3, a4, 0);
      objc_msgSend( (id)qword_10011BCB0,  "setFilterPredicates:",  +[NSSet setWithArray:](NSSet, "setWithArray:", objc_msgSend((id)qword_10011BCA8, "allValues")));
    }
  }

void sub_100035194(uint64_t a1, unsigned int a2, int a3, std::string *a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_27:
    __break(0x5516u);
    goto LABEL_28;
  }

  int v18 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v7 = objc_msgSend(+[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"), "collections");
  if (!v7)
  {
LABEL_24:

    return;
  }

  int v8 = a2 + a3;
  if (__CFADD__(a2, a3))
  {
LABEL_25:
    __break(0x5500u);
LABEL_26:
    __break(0x5513u);
    goto LABEL_27;
  }

  unsigned int v9 = v8 - 1;
  if (v8)
  {
    id v10 = v7;
    uint64_t v12 = 0LL;
    unsigned int v13 = 0LL;
    while (1)
    {
      id v14 = [v10 objectAtIndex:a2 + v12];
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
      if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0) {
        unsigned int v13 = (__CFString *)[v14 valueForProperty:MPMediaPlaylistPropertyName];
      }
      if (!v13) {
        unsigned int v13 = &stru_10010A828;
      }
      sub_1000255A4((uint64_t)&__p, (char *)-[__CFString UTF8String](v13, "UTF8String"));
      unint64_t size = a4->__r_.__value_.__l.__size_;
      if (size >= a4->__r_.__value_.__l.__cap_)
      {
        uint64_t v17 = sub_100024640(a4, &__p);
      }

      else
      {
        sub_1000245B0(a4, &__p);
        if (size >= 0xFFFFFFFFFFFFFFE8LL) {
          goto LABEL_26;
        }
        uint64_t v17 = (std::string *)(size + 24);
      }

      a4->__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      if (a2 + (_DWORD)v12 == -1) {
        goto LABEL_25;
      }
    }
  }

void sub_10003532C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_100035344()
{
  return qword_10011BCB0;
}

id sub_100035350()
{
  return [(id)qword_10011BCA8 allValues];
}

uint64_t sub_10003535C()
{
  return byte_10011BCD0;
}

BOOL sub_100035368(BOOL result)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    AppBooleanint Value = dword_1001197E0;
    if (dword_1001197E0 == -1)
    {
      AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"GeniusMixSupport", @"com.apple.iapd", 0LL);
      dword_1001197E0 = AppBooleanValue;
    }

    return AppBooleanValue != 0;
  }

  return result;
}

void sub_1000353C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (qword_10011BCD8 != -1) {
      dispatch_once(&qword_10011BCD8, &stru_100104448);
    }
    if (![(id)qword_10011BCE0 showMusic])
    {
      NSLog( @"%s:%s:%d no systemMusicPlayer",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaLibrary.mm",  "CreateGeniusPlaylistForTrack",  2802LL);
      return;
    }

    uint64_t v7 = 0LL;
    int v8 = &v7;
    uint64_t v9 = 0x2020000000LL;
    char v10 = 0;
    int v5 = (dispatch_queue_s *)sub_100041B3C();
    if (v5)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003550C;
      block[3] = &unk_1001043C0;
      void block[5] = a2;
      void block[6] = a3;
      void block[4] = &v7;
      dispatch_sync(v5, block);
      if (*((unsigned __int8 *)v8 + 24) < 2u)
      {
        _Block_object_dispose(&v7, 8);
        return;
      }

      goto LABEL_12;
    }
  }

  __break(0x5510u);
LABEL_12:
  __break(0x550Au);
}

void sub_1000354F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10003550C(void *a1)
{
  id v2 = sub_100041B30();
  uint64_t result = a1[5];
  if (result) {
    BOOL v4 = (a1[5] & 7LL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    goto LABEL_16;
  }
  if (!result || (result & 7) != 0) {
    goto LABEL_16;
  }
  uint64_t result = (uint64_t)objc_msgSend( v2,  "setQueueWithSeedItems:",  +[NSArray arrayWithObject:]( NSArray,  "arrayWithObject:",  (*(uint64_t (**)(uint64_t))(*(void *)result + 408))(result)));
  if ((_DWORD)result)
  {
    uint64_t result = sub_100036FF0();
    if (!result || (result & 7) != 0)
    {
LABEL_16:
      __break(0x5516u);
      return result;
    }

    (*(void (**)(uint64_t, void))(*(void *)result + 520LL))(result, a1[6]);
    uint64_t result = (uint64_t)[v2 play];
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 1;
  }

  return result;
}

uint64_t sub_1000355D4(uint64_t result, void *lpsrc)
{
  if ((lpsrc & 7) != 0 {
    || !lpsrc
  }
    || !result
    || (result & 7) != 0
  {
    __break(0x5516u);
  }

  else
  {
    id v2 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 128LL))(result);
    id v3 = [v2 valueForProperty:MPMediaPlaylistPropertySeedItems];
    id v4 = [v3 count];
    if (!v4) {
      return v4 != 0LL;
    }
    int v5 = dispatch_semaphore_create(0LL);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_1000356EC;
    void v6[3] = &unk_1001043F8;
    v6[4] = v5;
    uint64_t result = (uint64_t)objc_msgSend(v2, "populateWithSeedItem:completionBlock:", objc_msgSend(v3, "lastObject"), v6);
    if (v5)
    {
      dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
      return v4 != 0LL;
    }
  }

  __break(0x5510u);
  return result;
}

dispatch_semaphore_s *sub_1000356EC(uint64_t a1)
{
  uint64_t result = *(dispatch_semaphore_s **)(a1 + 32);
  if (result) {
    return (dispatch_semaphore_s *)dispatch_semaphore_signal(result);
  }
  __break(0x5510u);
  return result;
}

uint64_t sub_1000356FC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

NSAutoreleasePool *sub_100035714(NSAutoreleasePool *result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    if (!a2) {
      return 0;
    }
    uint64_t result = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if ((a2 & 7) == 0)
    {
      id v3 = result;
      int v5 = *(uint64_t **)a2;
      unint64_t v4 = *(void *)(a2 + 8);
      BOOL v6 = *(void *)a2 >= v4;
      if (*(void *)a2 < v4)
      {
        uint64_t v7 = *(void *)a2 & 7LL;
        while (v5 && !v7)
        {
          uint64_t result = (NSAutoreleasePool *)sub_100031C08(*v5);
          if (!result) {
            goto LABEL_12;
          }
          ++v5;
          unint64_t v8 = *(void *)(a2 + 8);
          BOOL v6 = (unint64_t)v5 >= v8;
        }

        goto LABEL_15;
      }

id sub_1000357C4()
{
  if (qword_10011BCD8 != -1) {
    dispatch_once(&qword_10011BCD8, &stru_100104448);
  }
  return [(id)qword_10011BCE0 showMusic];
}

uint64_t sub_100035804(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 100);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10003581C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 96);
  }
  __break(0x5516u);
  return result;
}

void sub_100035834(id a1)
{
  qword_10011BCE0 = objc_alloc_init(&OBJC_CLASS___iAPMediaLibraryHelper);
}

id sub_100035F3C(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v1 = (id *)(*(void *)(a1 + 32) + 8LL);
  id v3 = *v1;
  id v4 = [*v1 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        unint64_t v8 = (id *)(*(void *)(a1 + 32) + 8LL);
        objc_msgSend( objc_msgSend(*v8, "objectForKey:", *(void *)(*((void *)&v11 + 1) + 8 * (void)i), (void)v11),  "removeNonGlobalCache");
      }

      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v5);
  }

  uint64_t v9 = (id *)(*(void *)(a1 + 32) + 8LL);
  if ((v9 & 7) != 0) {
LABEL_12:
  }
    __break(0x5516u);
  return [*v9 removeAllObjects];
}

id sub_1000360D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setGlobalItemCountNoQ:*(unsigned int *)(a1 + 48) ForProperty:*(void *)(a1 + 40)];
}

void sub_1000361B0(uint64_t a1, uint64_t a2)
{
}

void sub_1000361C0(uint64_t a1)
{
}

id sub_1000361CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) globalItemCountForPropertyNoQ:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = result;
  return result;
}

id sub_100036244(id result, id *a2)
{
  if (!a2 || (a2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = result;
    id v4 = [*a2 objectForKey:result];
    if (!v4)
    {
      id v4 = -[MediaLibraryPropertyCache initForProperty:]( objc_alloc(&OBJC_CLASS___MediaLibraryPropertyCache),  "initForProperty:",  v3);
      id v5 = (NSMutableDictionary *)*a2;
      if (!*a2)
      {
        id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        *a2 = v5;
      }

      -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v4, v3);
    }

    return v4;
  }

  return result;
}

id sub_100036364(uint64_t a1)
{
  return [*(id *)(a1 + 32) setItemCountNoQ:*(unsigned int *)(a1 + 48) forProperty:*(void *)(a1 + 40)];
}

id sub_1000363EC(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "setItemNamesNoQ:forRange:forProperty:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 48));
}

id sub_100036550(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) itemCountForPropertyNoQ:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = result;
  return result;
}

id sub_10003664C(uint64_t a1)
{
  id result = objc_msgSend( *(id *)(a1 + 32),  "itemNamesForRangeNoQ:forProperty:",  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = result;
  return result;
}

id sub_100036764(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCollectionsNoQ:*(void *)(a1 + 40) forProperty:*(void *)(a1 + 48)];
}

id sub_100036864(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) collectionsForPropertyNoQ:*(void *)(a1 + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) = result;
  return result;
}

id sub_100036930(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:MPMediaItemPropertyGenre];
  if ((result & 1) != 0
    || (id result = [*(id *)(a1 + 32) isEqualToString:MPMediaPlaylistPropertyName], (_DWORD)result))
  {
    id v3 = (void **)(*(void *)(a1 + 40) + 8LL);
    id v4 = *v3;
    id v5 = &MPMediaItemPropertyArtist;
    goto LABEL_5;
  }

  id result = [*(id *)(a1 + 32) isEqualToString:MPMediaItemPropertyArtist];
  if ((_DWORD)result)
  {
    uint64_t v9 = (void **)(*(void *)(a1 + 40) + 8LL);
    id v4 = *v9;
    id v5 = &MPMediaItemPropertyComposer;
LABEL_5:
    uint64_t v6 = *v5;
LABEL_6:
    id result = [v4 removeObjectForKey:v6];
    uint64_t v7 = (id *)(*(void *)(a1 + 40) + 8LL);
    if ((v7 & 7) == 0)
    {
      id result = [*v7 removeObjectForKey:MPMediaItemPropertyAlbumTitle];
      goto LABEL_8;
    }

uint64_t sub_100036AE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

const char *sub_100036AF4(const char *result, unint64_t a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  if (result && a2 && a3 && a4)
  {
    __int128 v11 = result;
    int v12 = 0;
    unint64_t v13 = 0LL;
    unint64_t v14 = ~a3;
    while (1)
    {
      BOOL v15 = __CFADD__(v11, v12);
      BOOL v16 = &v11[v12] >= v11;
      if (v12 < 0) {
        BOOL v16 = v15;
      }
      if (!v16) {
        break;
      }
      id result = fmtcheck(a5, "%02X");
      if (v13 > v14) {
        break;
      }
      id result = (const char *)sprintf((char *)&v11[v12], result, *(unsigned __int8 *)(a3 + v13));
      BOOL v17 = __OFADD__(v12, (_DWORD)result);
      v12 += (int)result;
      if (v17) {
        goto LABEL_26;
      }
      if (v12 >= a2) {
        return result;
      }
      if (a4 == ++v13)
      {
        if (!a6) {
          return result;
        }
        BOOL v18 = __CFADD__(v12, v11);
        BOOL v19 = &v11[v12] >= v11;
        if (v12 < 0) {
          BOOL v19 = v18;
        }
        if (v19)
        {
          *(_WORD *)&v11[v12] = 10;
          return result;
        }

        break;
      }
    }

    __break(0x5513u);
LABEL_26:
    __break(0x5500u);
  }

  return result;
}

unint64_t sub_100036C08()
{
  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v1.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v1, 0LL);
  return sub_100036C3C((unint64_t)&v1);
}

unint64_t sub_100036C3C(unint64_t result)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_7;
  }
  uint64_t v1 = 1000LL * *(void *)result;
  if ((unsigned __int128)(*(uint64_t *)result * (__int128)1000LL) >> 64 != v1 >> 63)
  {
LABEL_8:
    __break(0x550Cu);
    goto LABEL_9;
  }

  if (((result + 8) & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    goto LABEL_8;
  }

  int v2 = *(_DWORD *)(result + 8) / 1000;
  id result = (v1 + v2);
  if (__CFADD__((_DWORD)v1, v2)) {
LABEL_9:
  }
    __break(0x5500u);
  return result;
}

uint64_t sub_100036CA0()
{
  return pthread_once(&stru_100119828, (void (*)(void))sub_100036CB4);
}

uint64_t sub_100036CB4()
{
  qword_10011C828 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSR");
  qword_10011C830 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSRPlay");
  qword_10011C838 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSRNextPrev");
  qword_10011C840 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSRFFRew");
  qword_10011C848 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSRShuffleRepeat");
  uint64_t result = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayInfoAfterSRTot");
  qword_10011C858 = result;
  return result;
}

uint64_t sub_100036D84(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004285C(result);
    return v1;
  }

  return result;
}

LABEL_7:
  __break(0x550Au);
}

  dispatch_release(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

  __break(0x5516u);
  return result;
}

  __break(0x5513u);
  return result;
}

  dispatch_release(v4);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  return v7;
}

  if ((a3 + 32) <= 0x3F)
  {
    if ((a2 & 7) == 0)
    {
LABEL_9:
      uint64_t v6 = sub_1000569F0(a2);
LABEL_12:
      sub_1000CEAEC( 0,  4,  "GetNewLingoObject could not get lingo object for lingoType=%xh, handle=%hhx, connection shuttingDown: %d\n",  a3,  a2,  v6);
      return;
    }

    goto LABEL_45;
  }

  __break(0x5500u);
  return result;
}

    __break(0x5510u);
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100036F40(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_100062E0C();
  if (((*(_BYTE *)(a1 + 32) - 92) & 3) != 0)
  {
LABEL_9:
    __break(0x5516u);
    return result;
  }

  uint64_t result = sub_100063BF0(*(_DWORD *)(*(void *)(a1 + 32) + 164LL), result, 1);
  if (result >= 0x64)
  {
    if (qword_10011BD40 != -1) {
      dispatch_once(&qword_10011BD40, &stru_1001046A0);
    }
    uint64_t result = qword_10011BD38;
    if (qword_10011BD38 && (qword_10011BD38 & 7) == 0) {
      return (*(uint64_t (**)(void))(*(void *)qword_10011BD38 + 56LL))();
    }
    goto LABEL_9;
  }

  return result;
}

uint64_t sub_100036FF0()
{
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  return qword_10011BD38;
}

uint64_t sub_100037030(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_100062E0C();
  if (((*(_BYTE *)(a1 + 32) - 92) & 3) != 0) {
    goto LABEL_9;
  }
  uint64_t result = sub_100063BF0(*(_DWORD *)(*(void *)(a1 + 32) + 164LL), result, 1);
  *(_BYTE *)(*(void *)(a1 + 32) + 160LL) = 0;
  if (((*(_BYTE *)(a1 + 32) - 92) & 3) != 0) {
    goto LABEL_9;
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 164LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 168LL) = 1;
  if (dword_100119850 == 4) {
    dword_100119850 = dword_10011984C;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if ((((_BYTE)v3 + 104) & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    return result;
  }

  uint64_t v4 = *(void *)(v3 + 104);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100037114;
  v5[3] = &unk_100104560;
  v5[4] = v3;
  return MRMediaRemoteGetNowPlayingInfo(v4, v5);
}

id sub_100037114(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleNowPlayingInfo:a2];
}

uint64_t sub_100037304(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_100062E0C();
  if (((*(_BYTE *)(a1 + 32) - 92) & 3) != 0) {
    goto LABEL_7;
  }
  uint64_t result = sub_100063BF0(*(_DWORD *)(*(void *)(a1 + 32) + 164LL), result, 1);
  *(_BYTE *)(*(void *)(a1 + 32) + 160LL) = 0;
  if (((*(_BYTE *)(a1 + 32) - 92) & 3) != 0
    || (*(_DWORD *)(*(void *)(a1 + 32) + 164LL) = 0,
        *(_BYTE *)(*(void *)(a1 + 32) + 168LL) = 1,
        uint64_t v3 = *(void *)(a1 + 32),
        (((_BYTE)v3 + 104) & 7) != 0))
  {
LABEL_7:
    __break(0x5516u);
    return result;
  }

  uint64_t v4 = *(void *)(v3 + 104);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000373CC;
  v5[3] = &unk_100104560;
  v5[4] = v3;
  return MRMediaRemoteGetNowPlayingInfo(v4, v5);
}

id sub_1000373CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleNowPlayingInfo:a2];
}

id sub_1000376C0(uint64_t a1)
{
  id v2 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  byte_100119844 = objc_msgSend( +[MPCloudController sharedCloudController]( MPCloudController,  "sharedCloudController"),  "canShowCloudMusic");
  [*(id *)(a1 + 32) initPBQItemsFromQueueQuery];
  return [v2 beginGeneratingPlaybackNotifications];
}

void sub_100037748(id a1)
{
}

void sub_1000379D0(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter");
  NSLog(@"MR: Init initial NowPlayingInfo state");
  [*(id *)(a1 + 32) _nowPlayingAppChanged:0];
  sub_1000CEA98(0, @"NowPlaying: Init calling MRMediaRemoteGetNowPlayingInfo");
  uint64_t v3 = *(void *)(a1 + 32);
  if ((((_BYTE)v3 + 104) & 7) != 0) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v3 + 104);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100037D04;
  void v14[3] = &unk_100104560;
  v14[4] = v3;
  MRMediaRemoteGetNowPlayingInfo(v4, v14);
  uint64_t v5 = *(void *)(a1 + 32);
  if ((((_BYTE)v5 + 104) & 7) != 0) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v5 + 104);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100037D48;
  v13[3] = &unk_1001045A8;
  v13[4] = v5;
  MRMediaRemoteGetNowPlayingApplicationIsPlaying(v6, v13);
  uint64_t v7 = *(void *)(a1 + 32) + 104LL;
  if ((v7 & 7) != 0) {
    goto LABEL_9;
  }
  MRMediaRemoteRegisterForNowPlayingNotifications(*(void *)v7);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_startMusicPlayerNotifications:",  off_10011B9C0,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_stopMusicPlayerNotifications:",  off_10011B9C8,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_supportedCommandsDidChangeNotification",  kMRMediaRemoteSupportedCommandsDidChangeNotification,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_canShowCloudTracksDidChangeNotification:",  MPCloudControllerCanShowCloudTracksDidChangeNotification,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_nowPlayingInfoChanged:",  kMRMediaRemoteNowPlayingInfoDidChangeNotification,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_nowPlayingAppChanged:",  kMRMediaRemoteNowPlayingApplicationDidChangeNotification,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_nowPlayingAppIsPlayingChanged:",  kMRMediaRemoteNowPlayingApplicationIsPlayingDidChangeNotification,  0LL);
  -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_playbackQueueDidChangeNotification:",  kMRMediaRemoteNowPlayingPlaybackQueueDidChangeNotification,  0LL);
  unsigned int v8 = objc_msgSend( +[MPCloudController sharedCloudController]( MPCloudController,  "sharedCloudController"),  "canShowCloudMusic");
  byte_100119844 = v8;
  NSLog(@"__showCloudTracksSetting after canShowCloudMusic = %d", v8);
  MRMediaRemoteSetWantsSupportedCommandsChangedNotifications(1LL);
  uint64_t v9 = *(void *)(a1 + 32);
  if ((((_BYTE)v9 + 104) & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    uint64_t v10 = *(void *)(v9 + 104);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100037D8C;
    void v12[3] = &unk_1001045D0;
    v12[4] = v9;
    MRMediaRemoteCopySupportedCommands(v10, v12);
    else {
      NSLog(@"not starting music player notifications yet");
    }
    -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_itemPlaybackDidEnd:",  MPMusicPlayerControllerItemPlaybackDidEndNotification,  0LL);
    +[MPMediaQuery setFilteringDisabled:](&OBJC_CLASS___MPMediaQuery, "setFilteringDisabled:", 1LL);
    __int128 v11 = +[MPMediaLibrary defaultMediaLibrary](&OBJC_CLASS___MPMediaLibrary, "defaultMediaLibrary");
    -[NSNotificationCenter addObserver:selector:name:object:]( v2,  "addObserver:selector:name:object:",  *(void *)(a1 + 32),  "_mediaLibraryChanged:",  MPMediaLibraryEntitiesAddedOrRemovedNotification,  v11);
    -[MPMediaLibrary beginGeneratingLibraryChangeNotifications](v11, "beginGeneratingLibraryChangeNotifications");
  }

void sub_100037D04(uint64_t a1, uint64_t a2)
{
}

void sub_100037D48(uint64_t a1, uint64_t a2)
{
}

void sub_100037D8C(uint64_t a1, const void *a2)
{
}

MPMusicPlayerController *sub_100038050(uint64_t a1)
{
  uint64_t result = -[MPMusicPlayerController initWithClientIdentifier:queue:]( [MPMusicPlayerController alloc],  "initWithClientIdentifier:queue:",  @"com.apple.iapd.mediaplayer",  [*(id *)(a1 + 32) sharedSystemMusicPlayerQueue]);
  qword_10011BD00 = (uint64_t)result;
  return result;
}

void sub_1000380E0(id a1)
{
  qword_10011BD10 = (uint64_t)dispatch_queue_create("com.apple.iapd.mpqueue", 0LL);
}

void sub_10003854C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_10003857C(uint64_t a1)
{
  id v2 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  NSLog( @"prepareForPlaybackWithQuery:andFirstItem: allMusic, query=%@ count=%lu firstItem(%llu)=%@",  *(void *)(a1 + 32),  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "items"), "count"),  objc_msgSend(*(id *)(a1 + 40), "persistentID"),  *(void *)(a1 + 40));
  MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.Music");
  [v2 setQueueWithQuery:*(void *)(a1 + 32) firstItem:*(void *)(a1 + 40)];
  [v2 prepareQueueForPlayback];
  if (![v2 nowPlayingItem])
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 14;
    NSLog(@"prepareForPlaybackWithQuery:andFirstItem: Playback queue is empty");
  }

void sub_100038804()
{
  byte_10011C864 = 0;
  if (qword_10011C868)
  {

    qword_10011C868 = 0LL;
  }

  if (qword_10011C870)
  {

    qword_10011C870 = 0LL;
  }

  qword_10011C878 = 0LL;
}

uint64_t sub_1000393F0(uint64_t result, int a2)
{
  if (!result || (id v2 = (id *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else if ((*(unsigned int (**)(uint64_t))(*(void *)result + 592LL))(result))
  {
    sub_100040E1C((uint64_t)v2, a2);
    if ((v4 & 1) != 0) {
      return 1LL;
    }
    else {
      return (*((uint64_t (**)(id *))*v2 + 63))(v2);
    }
  }

  else
  {
    return [v2[15] currentNowPlayingInfoTrackCountExists] ^ 1;
  }

  return result;
}

LABEL_221:
        __break(0x5513u);
        goto LABEL_222;
      }

LABEL_224:
      __break(0x5512u);
      goto LABEL_225;
    }

    LOBYTE(v74) = v39;
    std::string v63 = *(_DWORD *)(a2 + 68);
    int v64 = v4;
    __int128 v65 = 1;
LABEL_225:
    int v37 = sub_1000ABB10(v64, 0, 0LL, 39, v63, &v74, v65);
    goto LABEL_226;
  }

  if (v38 > 15)
  {
    switch(v38)
    {
      case 16:
        id v39 = 4;
        break;
      case 32:
        id v39 = 5;
        break;
      case 64:
        id v39 = 6;
        break;
      default:
        return;
    }

    goto LABEL_224;
  }

  if (v38 == 2)
  {
    id v39 = 1;
    goto LABEL_224;
  }

  if (v38 == 4)
  {
    uint64_t v74 = 2LL;
    uint64_t v73 = -86;
    uint64_t v72 = -86;
    uint64_t v71 = -86;
    unsigned int v61 = sub_10004783C();
    uint64_t v62 = sub_10004783C();
    if (!v62) {
      goto LABEL_241;
    }
    if ((v62 & 7) != 0) {
      goto LABEL_241;
    }
    *(_DWORD *)((char *)&v74 + 1) = bswap32((*(uint64_t (**)(uint64_t))(*(void *)v62 + 112LL))(v62));
    if (!v61 || (v61 & 7) != 0) {
      goto LABEL_241;
    }
    (*(void (**)(uint64_t, char *, char *, char *))(*(void *)v61 + 160LL))(v61, &v73, &v72, &v71);
    BYTE5(v74) = v73;
    BYTE6(v74) = v72;
    HIBYTE(v74) = v71;
    std::string v63 = *(_DWORD *)(a2 + 68);
    int v64 = v4;
    __int128 v65 = 8;
    goto LABEL_225;
  }

  if (v38 != 8) {
    return;
  }
LABEL_104:
  LOWORD(v74) = 3;
  unsigned int v31 = sub_100061274();
  if (!v31) {
    goto LABEL_241;
  }
  if ((v31 & 7) != 0) {
    goto LABEL_241;
  }
  uint64_t v32 = sub_10008C710(v31, v4);
  int v33 = (_DWORD *)(a1 + 1972);
  if (((a1 + 1972) & 3) != 0) {
    goto LABEL_241;
  }
  uint64_t v34 = 0;
  unint64_t v35 = 1;
  while (2)
  {
    if (((*v33 ^ v32) & v35) != 0)
    {
      BYTE1(v74) = v34;
      unint64_t v44 = sub_1000ABB10(v4, 0, 0LL, 39, *(_DWORD *)(a2 + 68), &v74, 2u);
      if (!__CFADD__(*v33, v35))
      {
        int v37 = v44;
        *v33 += v35;
        goto LABEL_226;
      }

      goto LABEL_246;
    }

    v35 *= 2;
    if (v34++ <= 0xD) {
      continue;
    }
    break;
  }

  sub_1000CEAEC( 0,  4,  "%s:%d invalid lingo number!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  4082);
  int v37 = 0LL;
LABEL_226:
  if (v37)
  {
    sub_1000AB4C4(*(void *)(a1 + 8), v37, 0, 1u);
    sub_1000612C4(*(void *)(a1 + 8));
    if (v66)
    {
      __int128 v67 = v66;
      if ((v66 & 7) == 0)
      {
        __int128 v68 = (unsigned int *)(a1 + 1980);
        if ((v68 & 3) == 0)
        {
          sub_10005EB3C(v66, *v68);
          sub_10005EA88(v67, *v68);
          return;
        }
      }

                    if (!(v50 | ((_BYTE)a3 + 16) & 7) && (((_DWORD)a3 + 26) & 1) == 0)
                    {
                      id v52 = *(void *)(a3 + 26);
LABEL_227:
                      if ((((_BYTE)a3 + 16) & 7) != 0) {
                        goto LABEL_244;
                      }
                      uint64_t v70 = *(unsigned int *)(a3 + 125);
                      uint64_t v71 = *(_DWORD *)(a3 + 129);
                      uint64_t v72 = v71 >= v70;
                      uint64_t v73 = v71 - v70;
                      if (!v72) {
                        uint64_t v73 = 0;
                      }
                      if (v52)
                      {
                        uint64_t v74 = v83;
                        if (v23 <= v73)
                        {
                          if (__CFADD__(v52, v70)) {
                            goto LABEL_245;
                          }
                          uint64_t v75 = v25;
                          uint64_t v76 = v23;
                          memcpy((void *)(v52 + v70), v27, v23);
                          uint64_t v77 = *(_DWORD *)(a3 + 125);
                          LODWORD(v70) = v77 + v76;
                          if (__CFADD__(v77, v76)) {
                            goto LABEL_247;
                          }
                          *(_DWORD *)(a3 + 125) = v70;
                          unint64_t v25 = v75;
                        }
                      }

                      else
                      {
                        uint64_t v74 = v83;
                      }

                      if (v25 == v74) {
                        unsigned int v51 = 2 * ((_DWORD)v70 != *(_DWORD *)(a3 + 129));
                      }
                      else {
                        unsigned int v51 = 19;
                      }
                      goto LABEL_147;
                    }

LABEL_223:
    __break(0x5515u);
    goto LABEL_224;
  }

    __break(0x5516u);
LABEL_224:
    __break(0x550Au);
LABEL_225:
    __break(0x5514u);
  }

LABEL_220:
          __break(0x5516u);
          goto LABEL_221;
        }
      }
    }

    if (self->_explicitControlOccurred <= 1u)
    {
      if (self->_explicitControlOccurred || v13 == 0.0 && v18 != 0.0)
      {
        self->_lastTimeNowPlayingPBRateChangeToPauseOrStop = 0;
      }

      goto LABEL_189;
    }

LABEL_222:
    __break(0x550Au);
    goto LABEL_223;
  }

  if (v16 == 6 && a3 != 6) {
    sub_10006EF28(a1, 0, 0);
  }
  return v18;
}

LABEL_195:
  if (v10)
  {
    sub_1000CEA98( 7u,  @"MR: %s:%d release oldNowPlayingInfo(%hhx)",  "-[MediaPlayerHelper _handleNowPlayingInfo:]",  1991LL,  v10);
  }

  if (!v79) {
    goto LABEL_203;
  }
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
    goto LABEL_220;
  }
  (*(void (**)(void))(*(void *)qword_10011BD38 + 56LL))();
LABEL_203:
  if (!self->_nowPlayingAppIsIPodIsValid || !self->_nowPlayingAppIsIPod || self->_nowPlayingAppIsIPodRadio) {
    goto LABEL_208;
  }
  uint64_t v56 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v56)
  {
    dispatch_sync(v56, &stru_100104638);
LABEL_208:

    return;
  }

LABEL_225:
  __break(0x5510u);
}

uint64_t sub_10003AD60(uint64_t result)
{
  if (!result
    || (result & 7) != 0
    || ((result + 8) & 7) != 0
    || ((uint64_t v1 = *(void *)(result + 8)) != 0 ? (v2 = (*(void *)(result + 8) & 7LL) == 0) : (v2 = 0),
        !v2 || (uint64_t result = v1 + 16, ((v1 + 16) & 3) != 0)))
  {
    __break(0x5516u);
  }

  return result;
}

void sub_10003ADA0(uint64_t a1)
{
  if (!a1) {
    goto LABEL_29;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v1 = (void **)(a1 + 8);
  if (((a1 + 8) & 7) != 0) {
    goto LABEL_29;
  }
  BOOL v2 = *v1;
  uint64_t v3 = (unint64_t)*v1 & 7;
  BOOL v4 = v2 && v3 == 0;
  BOOL v5 = v4 && ((unint64_t)(v2 + 1) & 7) == 0;
  if (v5
    && ((uint64_t v6 = *v2) != 0 ? (v7 = (*v2 & 7) == 0) : (v7 = 0),
        v7 ? (BOOL v8 = ((v6 + 8) & 7) == 0) : (BOOL v8 = 0),
        v8
     && ((*(void *)(v6 + 8) = v2[1], (uint64_t v9 = (void *)v2[1]) != 0LL) ? (v10 = (v2[1] & 7) == 0) : (v10 = 0),
         v10 && (*uint64_t v9 = v6, ((a1 + 16) & 7) == 0))))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    BOOL v12 = v11 != 0;
    uint64_t v13 = v11 - 1;
    if (v12)
    {
      *(void *)(a1 + 16) = v13;
      sub_100042948(a1, v2);
      return;
    }
  }

  else
  {
LABEL_29:
    __break(0x5516u);
  }

  __break(0x5515u);
}

void sub_10003AE40(uint64_t a1, char a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_20;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  uint64_t v4 = *(unsigned int *)(a1 + 128);
  if (v4 < 4 && *(unsigned __int8 *)(a1 + 392) <= 1u)
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 393);
    if (v5 <= 1)
    {
      NSLog( @"MR: %s:%d ENTER _expectedPlayState=%d _expectedPlayStateTimestamp=%u _nowPlayingInfoReceived=%u _nowPlayingAppI sPlayingReceived=%u",  "ResetExpectedPlayStateInfo",  4684LL,  v4,  *(unsigned int *)(a1 + 132),  *(unsigned __int8 *)(a1 + 392),  v5);
      if (!*(_DWORD *)(a1 + 132)) {
        goto LABEL_15;
      }
      if ((a2 & 1) != 0)
      {
        *(_BYTE *)(a1 + 392) = 1;
        unsigned int v6 = *(unsigned __int8 *)(a1 + 393);
      }

      else
      {
        *(_BYTE *)(a1 + 393) = 1;
        unsigned int v6 = *(unsigned __int8 *)(a1 + 392);
      }

      if (v6 <= 1)
      {
        if (!v6) {
          goto LABEL_15;
        }
        unsigned int v7 = *(_DWORD *)(a1 + 128);
        if (v7 <= 3)
        {
          if (v7 == [*(id *)(a1 + 120) nowPlayingAppPlaybackState])
          {
            *(_DWORD *)(a1 + 132) = 0;
            *(_WORD *)(a1 + 392) = 0;
          }

uint64_t sub_10003AF78(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 328));
    *(_DWORD *)(v1 + 324) = 0;
    uint64_t v2 = *(unsigned int *)(v1 + 320);
    if (v2 < 4)
    {
      NSLog( @"MR: %s:%d _expectedFFRewStateTimestamp=%u _expectedFFRewState=%d",  "ResetExpectedFFRewStateInfo",  4776LL,  0LL,  v2);
      return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 328));
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10003AFF0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 208));
    NSLog( @"MR: %s:%d _waitForMRNotificationTimestamp=%u",  "ResetWaitForMRNotification",  4723LL,  *(unsigned int *)(v1 + 204));
    if (*(_DWORD *)(v1 + 204))
    {
      *(_DWORD *)(v1 + 204) = 0;
      NSLog(@"MR: %s:%d signal _waitForMRNotificationCond", "ResetWaitForMRNotification", 4728LL);
      pthread_cond_signal((pthread_cond_t *)(v1 + 272));
    }

    return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 208));
  }

  return result;
}

void sub_10003B088(uint64_t a1)
{
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  uint64_t v2 = qword_10011BD38;
  if (qword_10011BD38) {
    BOOL v3 = (qword_10011BD38 & 7) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    [*(id *)(a1 + 32) nowPlayingAppPlaybackState];
    (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)v2 + 56LL))( v2,  524301LL,  0LL,  0LL,  0LL);
  }

  else
  {
    __break(0x5516u);
  }

void sub_10003B110(id a1)
{
  id v1 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  if (sub_1000357C4() && ([v1 isNowPlayingItemFromGeniusMix] & 1) == 0)
  {
    if (qword_10011BD40 != -1) {
      dispatch_once(&qword_10011BD40, &stru_1001046A0);
    }
    if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
      __break(0x5516u);
    }
    else {
      (*(void (**)(void))(*(void *)qword_10011BD38 + 680LL))();
    }
  }

  else if ((sub_1000357C4() & 1) == 0)
  {
    NSLog( @"%s:%d no systemMusicPlayer!",  "-[MediaPlayerHelper _handleNowPlayingInfo:]_block_invoke_2",  2010LL);
  }

void sub_10003B384(uint64_t a1)
{
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  uint64_t v2 = qword_10011BD38;
  if (qword_10011BD38) {
    BOOL v3 = (qword_10011BD38 & 7) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    [*(id *)(a1 + 32) nowPlayingAppPlaybackState];
    (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)v2 + 56LL))( v2,  524301LL,  0LL,  0LL,  0LL);
  }

  else
  {
    __break(0x5516u);
  }

id sub_10003B514(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "queueAsQuery");
  if (((*(_BYTE *)(a1 + 32) - 112) & 7) == 0)
  {
    BOOL v3 = result;
    id result = *(id *)(*(void *)(a1 + 32) + 144LL);
    if (v3)
    {
      id result = [v3 items];
      if (((*(_BYTE *)(a1 + 32) - 112) & 7) == 0)
      {
        *(void *)(*(void *)(a1 + 32) + 144LL) = result;
        return result;
      }
    }

    else if (((*(_BYTE *)(a1 + 32) - 112) & 7) == 0)
    {
      *(void *)(*(void *)(a1 + 32) + 144LL) = 0LL;
      return result;
    }
  }

  __break(0x5516u);
  return result;
}

id sub_10003B7C8(id *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 setITunesUAppSelected:a3];
  }

  else
  {
    [a1[15] setPodcastAppSelected:0];
    [a1[15] setIBooksAppSelected:0];
    return [a1[15] setITunesUAppSelected:0];
  }

uint64_t sub_10003BB98(uint64_t result, _DWORD *a2)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v2 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  id result = sub_100042A00(result, 0LL, 0LL, a2);
  if (!result
    || (result & 7) != 0
    || (((_BYTE)result + 8) & 7) != 0
    || (uint64_t v3 = *v2, *(void *)result = *v2, *(void *)(result + 8) = v2, !v3)
    || (v3 & 7) != 0
    || (uint64_t v4 = (uint64_t *)(v3 + 8), (v4 & 7) != 0)
    || (uint64_t *v4 = result, *v2 = result, v5 = v2 + 2, (v5 & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
  }

  else if (*v5 != -1LL)
  {
    ++*v5;
    return result;
  }

  __break(0x5500u);
  return result;
}

id sub_10003BC34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleNowPlayingInfo:a2];
}

id sub_10003BD18(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _handleNowPlayingAppIsPlayingDidChange:a2];
}

id sub_10003BDF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handlePlaybackQueueDidChange];
}

uint64_t sub_10003BE94(uint64_t result, uint64_t a2)
{
  if (((*(_BYTE *)(result + 32) - 56) & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    return result;
  }

  uint64_t v2 = result;
  id v3 = [*(id *)(*(void *)(result + 32) + 200) applicationInfoForPIDSync:a2];
  id result = (uint64_t)[v3 objectForKey:BKSApplicationStateDisplayIDKey];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = objc_msgSend( +[LSApplicationProxy applicationProxyForIdentifier:]( LSApplicationProxy,  "applicationProxyForIdentifier:",  result),  "localizedNameForContext:",  0);
    id result = (uint64_t)[*(id *)(v2 + 32) _handleNowPlayingAppDidChange:v4];
    if (v5)
    {
      id result = pthread_mutex_lock((pthread_mutex_t *)(*(void *)(v2 + 32) + 16LL));
      unsigned int v6 = (void **)(*(void *)(v2 + 32) + 88LL);
      if ((v6 & 7) == 0)
      {
        unsigned int v7 = *v6;
        if (v7) {

        }
        id result = (uint64_t)v5;
        uint64_t v8 = *(void *)(v2 + 32) + 88LL;
        if ((v8 & 7) == 0)
        {
          *(void *)uint64_t v8 = result;
          return pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(v2 + 32) + 16LL));
        }
      }

      goto LABEL_10;
    }
  }

  return result;
}

uint64_t sub_10003BFF4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)result + 56LL))( result,  524310LL,  0LL,  0LL,  0LL);
  }
  __break(0x5516u);
  return result;
}

void sub_10003C074(id a1)
{
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  if (qword_10011BD38) {
    BOOL v1 = (qword_10011BD38 & 7) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    sub_10003C0C8(qword_10011BD38);
  }
  else {
    __break(0x5516u);
  }
}

uint64_t sub_10003C0C8(uint64_t result)
{
  if (!result) {
    goto LABEL_17;
  }
  BOOL v1 = (id *)result;
  if ((result & 7) != 0) {
    goto LABEL_17;
  }
  if (byte_10011C864 >= 2u)
  {
LABEL_18:
    __break(0x550Au);
    return result;
  }

  if (!byte_10011C864) {
    goto LABEL_14;
  }
  byte_10011C864 = 0;
  (*(void (**)(uint64_t))(*(void *)result + 680LL))(result);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  id result = qword_10011BD38;
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
    goto LABEL_17;
  }
  (*(void (**)(void))(*(void *)qword_10011BD38 + 568LL))();
  id v3 = -[MPMediaQuery initWithEntities:entityType:]( [MPMediaQuery alloc],  "initWithEntities:entityType:",  [(id)qword_10011C868 items],  0);
  [v1[15] prepareForPlaybackWithQuery:v3 andFirstItem:qword_10011C870];

  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  id result = qword_10011BD38;
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  (*(void (**)(uint64_t))(*(void *)qword_10011BD38 + 560LL))(qword_10011BD38);
  sub_100038804();

LABEL_14:
  id result = (*((uint64_t (**)(id *))*v1 + 56))(v1);
  if ((_DWORD)result) {
    return (*((uint64_t (**)(id *))*v1 + 42))(v1);
  }
  return result;
}

void sub_10003C5D0(uint64_t a1, const void *a2)
{
}

void sub_10003C868(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x198uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10003C8C4(v1);
    qword_10011BD38 = v2;
  }

void sub_10003C8B0(_Unwind_Exception *a1)
{
}

uint64_t sub_10003C8C4(uint64_t result)
{
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  sub_10001B6E4(result);
  *(void *)uint64_t v1 = off_1001046D0;
  *(_DWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 204) = 0;
  *(void *)(v1 + 3memset(md, 170, 20) = 0LL;
  *(_WORD *)(v1 + 392) = 0;
  *(_DWORD *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 99) = 0;
  *(void *)(v1 + 1memset(md, 170, 20) = 0LL;
  *(void *)(v1 + 12_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  *(void *)(v1 + 112) = 0LL;
  *(void *)(v1 + 396) = -1LL;
  if (dword_100119838 == -1) {
    dword_100119838 = CFPreferencesGetAppBooleanValue( @"OverrideNowPlayingInfoTimestamp",  @"com.apple.iapd",  0LL) != 0;
  }
  if (dword_10011983C == -1)
  {
    AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"UseAppNameForNowPlayingInfoEmptyTitle",  @"com.apple.iapd",  0LL);
    dword_10011983C = AppBooleanValue != 0;
    sub_1000CEA98( 0,  @"%s:%d __useAppNameForNowPlayingInfoEmptyTitle=%d",  "MediaPlayer",  2649LL,  AppBooleanValue != 0);
  }

  if (dword_100119848 == -1)
  {
    int v3 = CFPreferencesGetAppBooleanValue(@"doNotDebouncePBRatePause", @"com.apple.iapd", 0LL);
    dword_100119848 = v3 != 0;
    sub_1000CEA98(0, @"%s:%d __doNotDebouncePBRatePause=%d", "MediaPlayer", 2653LL, v3 != 0);
  }

  if (dword_10011984C == -1)
  {
    AppIntegerint Value = CFPreferencesGetAppIntegerValue(@"tiltBehavior", @"com.apple.iapd", 0LL);
    dword_10011984C = AppIntegerValue;
    dword_100119850 = AppIntegerValue;
    sub_1000CEA98(0, @"%s:%d __tiltBehavior=%d", "MediaPlayer", 2658LL, AppIntegerValue);
  }

  if (dword_100119854 == -1)
  {
    int v5 = CFPreferencesGetAppBooleanValue(@"doNotAllowTiltSetIndex", @"com.apple.iapd", 0LL);
    dword_100119854 = v5 == 0;
    sub_1000CEA98(0, @"%s:%d __tiltAllowSetIndex=%d", "MediaPlayer", 2662LL, v5 == 0);
  }

  if (dword_1001197C8 == -1)
  {
    int v6 = CFPreferencesGetAppBooleanValue(@"doNotFakeTiltPlaylist", @"com.apple.iapd", 0LL);
    dword_1001197C8 = v6 == 0;
    sub_1000CEA98(0, @"%s:%d __fakeTiltPlaylist=%d", "MediaPlayer", 2667LL, v6 == 0);
  }

  if (dword_100119858 == -1)
  {
    int v7 = CFPreferencesGetAppBooleanValue( @"tiltBehaviorChangeDuringFakeTiltPlaylist",  @"com.apple.iapd",  0LL);
    dword_100119858 = v7 != 0;
    sub_1000CEA98(0, @"%s:%d __fakeTiltPlaylistBehaviorChange=%d", "MediaPlayer", 2672LL, v7 != 0);
  }

  if (dword_100119840 == -1) {
    dword_100119840 = CFPreferencesGetAppBooleanValue(@"HideCloudTracks", @"com.apple.iapd", 0LL) != 0;
  }
  if (dword_10011985C == -1)
  {
    int v8 = CFPreferencesGetAppBooleanValue(@"allowControlDuringCall", @"com.apple.iapd", 0LL);
    dword_10011985C = v8 == 0;
    sub_1000CEA98(0, @"%s:%d __dontAllowControlDuringCall=%d", "MediaPlayer", 2681LL, v8 == 0);
  }

  memset(v11, 170, sizeof(v11));
  id result = sub_10004783C();
  if (!result || (result & 7) != 0)
  {
LABEL_34:
    __break(0x5516u);
  }

  else
  {
    (*(void (**)(void **__return_ptr))(*(void *)result + 120LL))(v11);
    uint64_t v9 = (void *)HIBYTE(v11[2]);
    if (SHIBYTE(v11[2]) < 0) {
      uint64_t v9 = v11[1];
    }
    if (v9 == (void *)3
      && *(_BYTE *)sub_1000232F8((uint64_t)v11, 0LL) == 78
      && *(_BYTE *)sub_1000232F8((uint64_t)v11, 1LL) == 57
      && (*(_BYTE *)sub_1000232F8((uint64_t)v11, 2LL) == 48 || *(_BYTE *)sub_1000232F8((uint64_t)v11, 2LL) == 50))
    {
      byte_10011BD20 = 1;
    }

    pthread_mutex_init((pthread_mutex_t *)(v1 + 136), 0LL);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 328), 0LL);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 208), 0LL);
    pthread_cond_init((pthread_cond_t *)(v1 + 272), 0LL);
    *(void *)(v1 + 1memset(md, 170, 20) = objc_alloc_init(&OBJC_CLASS___MediaPlayerHelper);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003CD80;
    block[3] = &unk_100101CB8;
    void block[4] = v1;
    dispatch_async(&_dispatch_main_q, block);
    if (SHIBYTE(v11[2]) < 0) {
      operator delete(v11[0]);
    }
    return v1;
  }

  return result;
}

void sub_10003CD54(_Unwind_Exception *a1)
{
}

uint64_t sub_10003CD80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = CTTelephonyCenterSetDefaultDispatchQueue(&_dispatch_main_q);
  uint64_t Default = CTTelephonyCenterGetDefault(v2);
  CTTelephonyCenterAddObserver(Default, v1, sub_10003CE00, kCTCallStatusChangeNotification, 0LL, 4LL);
  return CTTelephonyCenterAddObserver(Default, v1, sub_10003CE00, kCTCallAlternateStatusChangeNotification, 0LL, 4LL);
}

uint64_t sub_10003CE00(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  int Value = CFDictionaryGetValue(theDict, kCTCall);
  uint64_t result = CTCallGetStatus(Value);
  if ((_DWORD)result == 5)
  {
    uint64_t result = (uint64_t)sub_100062E0C();
    if (!a2 || (a2 & 7) != 0 || ((a2 + 96) & 7) != 0) {
      goto LABEL_29;
    }
    *(_DWORD *)(a2 + 96) = result;
  }

  uint64_t result = sub_10003D168();
  if (a2 && !result)
  {
    uint64_t result = pthread_mutex_lock(&stru_10011B978);
    if ((a2 & 7) != 0) {
      goto LABEL_29;
    }
    int v8 = (uint64_t *)(a2 + 112);
    if (((a2 + 112) & 7) != 0) {
      goto LABEL_29;
    }
    uint64_t result = sub_1000C8254(*v8);
    if (!(_DWORD)result)
    {
LABEL_19:
      uint64_t result = pthread_mutex_unlock(&stru_10011B978);
      if ((((_BYTE)a2 + 100) & 3) == 0)
      {
        *(_WORD *)(a2 + 100) = 0;
        if ((((_DWORD)a2 + 102) & 1) == 0)
        {
          *(_BYTE *)(a2 + 102) = 0;
          if (((a2 + 104) & 7) == 0)
          {
            *(_DWORD *)(a2 + 104) = 0;
            *int v8 = 0LL;
            return result;
          }
        }
      }

      goto LABEL_29;
    }

    if (*(unsigned __int8 *)(a2 + 101) <= 1u)
    {
      if (*(_BYTE *)(a2 + 101))
      {
        (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)a2 + 64LL))( a2,  524313LL,  0LL,  *(void *)(a2 + 112),  0LL);
        goto LABEL_19;
      }

      if ((((_DWORD)a2 + 102) & 1) != 0) {
        goto LABEL_29;
      }
      if (*(_BYTE *)(a2 + 102))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)a2 + 64LL))( a2,  524313LL,  1LL,  *(void *)(a2 + 112),  0LL);
        goto LABEL_19;
      }

      if (((a2 + 100) & 3) != 0)
      {
LABEL_29:
        __break(0x5516u);
        goto LABEL_30;
      }

      if (*(unsigned __int8 *)(a2 + 100) <= 1u)
      {
        if (!*(_BYTE *)(a2 + 100)) {
          goto LABEL_19;
        }
        if ((((_BYTE)a2 + 104) & 7) == 0)
        {
          (*(void (**)(uint64_t, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 304LL))( a2,  *(unsigned int *)(a2 + 104),  0LL,  0LL,  0LL,  *(void *)(a2 + 112),  0xFFFFFFFFLL,  1LL);
          goto LABEL_19;
        }

        goto LABEL_29;
      }
    }

uint64_t sub_10003CFA4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10003D014(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_1001046D0;
    pthread_mutex_destroy((pthread_mutex_t *)(result + 136));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 328));
    pthread_cond_destroy((pthread_cond_t *)(v1 + 272));
    pthread_mutex_destroy((pthread_mutex_t *)(v1 + 208));

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003D0D8;
    block[3] = &unk_100101CB8;
    void block[4] = v1;
    dispatch_sync(&_dispatch_main_q, block);
    return sub_10003CFA4(v1);
  }

  return result;
}

void sub_10003D0C0(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D0D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = CTTelephonyCenterSetDefaultDispatchQueue(&_dispatch_main_q);
  uint64_t Default = CTTelephonyCenterGetDefault(v2);
  return CTTelephonyCenterRemoveEveryObserver(Default, v1);
}

uint64_t sub_10003D108(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10003D014(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10003D11C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10003D014(a1);
    operator delete((void *)a1);
  }

void sub_10003D154(_Unwind_Exception *a1)
{
}

uint64_t sub_10003D168()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  uint64_t v1 = CTGetCurrentCallCountWithTypes( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  kCTCallTypeNormal,  kCTCallTypeVoicemail,  kCTCallTypeVideoConference,  kCTCallTypeAudioConference,  kCTCallTypeVOIP,  0LL));
  objc_autoreleasePoolPop(v0);
  return v1;
}

id *sub_10003D1F8(id *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!result) {
    goto LABEL_23;
  }
  int v6 = result;
  BOOL v10 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  sub_100038804();
  if (!a3)
  {
    uint64_t result = (id *)objc_autoreleasePoolPush();
    BOOL v12 = result;
    if (!dword_1001197C8) {
      goto LABEL_11;
    }
    if (a6 && (a6 & 7) == 0)
    {
      *((_DWORD *)v6 + 100) = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 656LL))(a6);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 664LL))(a6);
      *((_DWORD *)v6 + 99) = v13;
      if (((_DWORD)v6[50] & v13) < 0 == v14)
      {
        uint64_t v11 = 0LL;
LABEL_21:
        objc_autoreleasePoolPop(v12);
        goto LABEL_22;
      }

void sub_10003D3BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  (*(void (**)(uint64_t))(*(void *)v2 + 680LL))(v2);
  id v4 = [sub_100035350() copy];
  int v5 = objc_alloc_init(&OBJC_CLASS___MPMediaQuery);
  -[MPMediaQuery setFilterPredicates:]( v5,  "setFilterPredicates:",  +[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));
  int v6 = (const __CFString *)objc_msgSend( -[NSArray objectAtIndex:]( -[MPMediaQuery items](v5, "items"),  "objectAtIndex:",  *(_DWORD *)(a1 + 40) & ~(*(int *)(a1 + 40) >> 31)),  "valueForProperty:",  MPMediaItemPropertyTitle);
  if (v6) {
    int v7 = v6;
  }
  else {
    int v7 = &stru_10010A828;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 656LL))(v2);
  -[MPMediaQuery addFilterPredicate:]( v5,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  v7,  MPMediaItemPropertyTitle));
  [v3 setQueueWithQuery:v5];
  [v3 prepareQueueForPlayback];
  if ((sub_1000357C4() & 1) == 0) {
    NSLog( @"%s:%d no systemMusicPlayer!...unlikely to be in this case",  "PrepareNowPlaying_block_invoke",  2801LL);
  }
}

uint64_t sub_10003D508(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = (id *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_100038804();
    if ((a2 & 0x80000000) == 0)
    {
      int v5 = +[MPMediaQuery audiobooksQuery](&OBJC_CLASS___MPMediaQuery, "audiobooksQuery");
      -[MPMediaQuery setGroupingType:](v5, "setGroupingType:", 0LL);
      id v6 = -[NSArray objectAtIndex:](-[MPMediaQuery items](v5, "items"), "objectAtIndex:", a2);
      (*((void (**)(id *))*v2 + 82))(v2);
      [v2[15] prepareForPlaybackWithQuery:v5 andFirstItem:v6];
      (*((void (**)(id *))*v2 + 85))(v2);
    }

    return 1LL;
  }

  return result;
}

NSAutoreleasePool *sub_10003D5BC( NSAutoreleasePool *result, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (!result) {
    goto LABEL_30;
  }
  p_isa = (id *)&result->super.isa;
  uint64_t result = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  BOOL v10 = result;
  if (!a3) {
    goto LABEL_24;
  }
  if (a2 < 2)
  {
    if ((a3 & 7) == 0)
    {
      uint64_t v20 = a5;
      uint64_t result = +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  (uint64_t)(a3[1] - *a3) >> 3);
      uint64_t v11 = result;
      BOOL v12 = (uint64_t *)*a3;
      if (*a3 < a3[1])
      {
        int v13 = 0LL;
        uint64_t v14 = *a3 & 7LL;
        while (v12 && !v14)
        {
          uint64_t result = (NSAutoreleasePool *)sub_100031C08(*v12);
          if (result)
          {
            BOOL v15 = result;
            uint64_t result = (NSAutoreleasePool *)[v11 addObject:result];
            if (v13) {
              BOOL v16 = 0;
            }
            else {
              BOOL v16 = *v12 == a4;
            }
            if (v16) {
              int v13 = v15;
            }
          }
        }

        goto LABEL_30;
      }

      int v13 = 0LL;
LABEL_20:
      if ([v11 count])
      {
        BOOL v17 = +[MPMediaItemCollection collectionWithItems:]( &OBJC_CLASS___MPMediaItemCollection,  "collectionWithItems:",  v11);
        if (v13)
        {
          if (!a2) {
            goto LABEL_28;
          }
        }

        else
        {
          int v13 = (NSAutoreleasePool *)[v11 objectAtIndex:0];
          if (!a2) {
            goto LABEL_28;
          }
        }

        if ((*((unsigned int (**)(id *))*p_isa + 52))(p_isa) == 1)
        {
          byte_10011C864 = 1;
          qword_10011C868 = v17;
          BOOL v18 = 0LL;
          qword_10011C870 = v13;
          qword_10011C878 = v20;
          goto LABEL_29;
        }

uint64_t sub_10003D7D0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10003D7E4(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 < 4)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 128LL))(result);
  }

  __break(0x550Au);
  return result;
}

void sub_10003D80C(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_18:
    __break(0x5516u);
LABEL_19:
    __break(0x550Au);
  }

  id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 >= 4) {
    goto LABEL_19;
  }
  int v5 = v4;
  if (a2 == 1) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = 1;
  }
  if (a2 == 2) {
    uint64_t v7 = 3LL;
  }
  else {
    uint64_t v7 = v6;
  }
  int valuePtr = v7;
  [*(id *)(a1 + 120) setExpectedRepeatMode:v7];
  if (![*(id *)(a1 + 120) _isCommandSupported:25])
  {
    [*(id *)(a1 + 120) setRepeatModeCache:v7];
    if (qword_10011BD40 != -1) {
      dispatch_once(&qword_10011BD40, &stru_1001046A0);
    }
    if (qword_10011BD38 && (qword_10011BD38 & 7) == 0)
    {
      (*(void (**)(void))(*(void *)qword_10011BD38 + 56LL))();
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  keys[0] = (void *)kMRMediaRemoteOptionRepeatMode;
  keys[1] = (void *)kMRMediaRemoteCommandInfoPreservesRepeatModeKey;
  values[0] = v8;
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v9 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  NSLog(@"SetRepeatDefault send ChangeRepeatMode repeatModeNumber=%@ opts=%@", v8, v9);
  MRMediaRemoteSendCommand(25LL, v9);
  [*(id *)(a1 + 120) setRepeatModeCache:0];
  CFRelease(v9);
LABEL_17:
}

uint64_t sub_10003D9E0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    unsigned int v3 = [*(id *)(v1 + 120) currentRepeatMode];
    if (v3 == 2) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = 2 * (v3 == 3);
    }
    objc_autoreleasePoolPop(v2);
    return v4;
  }

  return result;
}

uint64_t sub_10003DA3C(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 < 4)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 160LL))(result);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10003DA64(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 168LL))(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10003DA80(id *a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_18:
    __break(0x5516u);
LABEL_19:
    __break(0x550Au);
  }

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 >= 4) {
    goto LABEL_19;
  }
  int v5 = v4;
  if (a2 == 1) {
    unsigned int v6 = 3;
  }
  else {
    unsigned int v6 = 1;
  }
  if (a2 == 2) {
    uint64_t v7 = 2LL;
  }
  else {
    uint64_t v7 = v6;
  }
  int valuePtr = v7;
  [a1[15] setExpectedShuffleMode:v7];
  if (![a1[15] _isCommandSupported:26])
  {
    [a1[15] setShuffleModeCache:v7];
    if (qword_10011BD40 != -1) {
      dispatch_once(&qword_10011BD40, &stru_1001046A0);
    }
    if (qword_10011BD38 && (qword_10011BD38 & 7) == 0)
    {
      (*(void (**)(void))(*(void *)qword_10011BD38 + 56LL))();
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  keys[0] = (void *)kMRMediaRemoteOptionShuffleMode;
  keys[1] = (void *)kMRMediaRemoteCommandInfoPreservesShuffleModeKey;
  values[0] = v8;
  values[1] = kCFBooleanTrue;
  CFDictionaryRef v9 = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)keys,  (const void **)values,  2LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  NSLog(@"SetShuffleDefault send ChangeShuffleMode shuffleModeNumber=%@ opts=%@", v8, v9);
  MRMediaRemoteSendCommand(26LL, v9);
  [a1[15] setShuffleModeCache:0];
  CFRelease(v9);
  (*((void (**)(id *))*a1 + 82))(a1);
LABEL_17:
}

uint64_t sub_10003DC60(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = objc_autoreleasePoolPush();
    unsigned int v3 = [*(id *)(v1 + 120) currentShuffleMode];
    if (v3 == 3) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = 2 * (v3 == 2);
    }
    objc_autoreleasePoolPop(v2);
    return v4;
  }

  return result;
}

uint64_t sub_10003DCBC(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 < 0x100)
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 192LL))(result);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10003DCE4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 200LL))(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10003DD00(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 >= 0x100)
  {
LABEL_9:
    __break(0x550Au);
    return;
  }

  if (a2 == 1) {
    uint64_t v3 = 1LL;
  }
  else {
    uint64_t v3 = 2 * (a2 == 255);
  }
  MRMediaRemoteSetPlaybackSpeed(v3);
}

uint64_t sub_10003DD6C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    [*(id *)(v1 + 120) nowPlayingAppPlaybackSpeed];
    if (v3 < 1.0) {
      unsigned int v4 = 255;
    }
    else {
      unsigned int v4 = 0;
    }
    if (v3 <= 1.0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 1LL;
    }

    return v5;
  }

  return result;
}

void sub_10003DDD0(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_9;
  }

  double v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 >= 0x80)
  {
LABEL_9:
    __break(0x550Au);
    return;
  }

  CFNumberRef v8 = v3;
  if ((_DWORD)a2)
  {
    id v4 = objc_msgSend( +[MLEQPreset eqPresetForBuiltInPresetType:](MLEQPreset, "eqPresetForBuiltInPresetType:", a2),  "name");
    uint64_t v5 = kCFPreferencesCurrentUser;
    unsigned int v6 = kCFPreferencesAnyHost;
  }

  else
  {
    uint64_t v5 = kCFPreferencesCurrentUser;
    unsigned int v6 = kCFPreferencesAnyHost;
    id v4 = 0LL;
  }

  CFPreferencesSetValue(@"MusicEQPresetName", v4, @"com.apple.mobileipod", v5, v6);
  CFPreferencesSynchronize(@"com.apple.mobileipod", v5, v6);
  GSSendAppPreferencesChanged(@"com.apple.mobileipod", @"MusicEQPresetName");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.preferences.ipod-changed", 0LL, 0LL, 1u);
  notify_post("com.apple.mobileipod-prefsChanged");
}

void sub_10003DF00(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_7:
    __break(0x550Au);
    return;
  }

  CFPropertyListRef v1 = CFPreferencesCopyValue( @"MusicEQPresetName",  @"com.apple.mobileipod",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = +[MLEQPreset eqPresetForName:](&OBJC_CLASS___MLEQPreset, "eqPresetForName:", v1);
    CFRelease(v1);
    unsigned int v4 = [v3 builtInPresetType];

    if (v4 >= 0x80) {
      goto LABEL_7;
    }
  }

uint64_t sub_10003DFB4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 248LL))(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10003DFD0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 224LL))(result);
  if (result >= 0x80)
  {
LABEL_8:
    __break(0x550Au);
    return result;
  }

  if ((_DWORD)result) {
    return (result - 99);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10003E014(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
LABEL_8:
    __break(0x5500u);
    goto LABEL_9;
  }

  if (!a2)
  {
LABEL_6:
    (*(void (**)(uint64_t))(*(void *)result + 216LL))(result);
    return 1LL;
  }

  if (a2 >= 0xFFFFFF9C) {
    goto LABEL_8;
  }
  if (a2 + 99 < 0x80) {
    goto LABEL_6;
  }
LABEL_9:
  __break(0x550Au);
  return result;
}

uint64_t sub_10003E064(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 272LL))(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10003E080(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 280LL))(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10003E09C(uint64_t result, int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (CFPropertyListRef *)&kCFBooleanTrue;
    if (!a2) {
      uint64_t v2 = (CFPropertyListRef *)&kCFBooleanFalse;
    }
    CFPreferencesSetValue( @"MusicSoundCheckEnabledSetting",  *v2,  @"com.apple.mobileipod",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
    CFPreferencesSynchronize(@"com.apple.mobileipod", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    GSSendAppPreferencesChanged(@"com.apple.mobileipod", @"MusicSoundCheckEnabledSetting");
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.preferences.ipod-changed", 0LL, 0LL, 1u);
    return notify_post("com.apple.mobileipod-prefsChanged");
  }

  return result;
}

BOOL sub_10003E168(BOOL result)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    Boolean keyExistsAndHasValidFormat = -86;
    return CFPreferencesGetAppBooleanValue( @"MusicSoundCheckEnabledSetting",  @"com.apple.mobileipod",  &keyExistsAndHasValidFormat) != 0;
  }

  return result;
}

uint64_t sub_10003E1BC(uint64_t result, int a2, uint64_t a3)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  *(_WORD *)(result + 100) = 0;
  *(_BYTE *)(result + 102) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(void *)(result + 112) = 0LL;
  if (sub_10003D168() < 1) {
    return 1LL;
  }
  uint64_t result = sub_1000BE638();
  if (!result || (result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 104LL))(result, a3);
  if (!result) {
    return 1LL;
  }
  if (dword_10011985C)
  {
LABEL_11:
    uint64_t result = 0LL;
    *(_BYTE *)(v3 + 100) = 1;
    *(_DWORD *)(v3 + 104) = a2;
    *(void *)(v3 + 112) = a3;
    return result;
  }

  if ((result & 7) == 0)
  {
    goto LABEL_11;
  }

uint64_t sub_10003E278(uint64_t result, int a2, uint64_t a3, char a4)
{
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_15;
  }
  *(_WORD *)(result + 100) = 0;
  *(_BYTE *)(result + 102) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(void *)(result + 112) = 0LL;
  uint64_t result = sub_1000BE638();
  if (!result || (result & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 104LL))(result, a3);
  if (!result) {
    return 1LL;
  }
  if (dword_10011985C) {
    goto LABEL_10;
  }
  if ((result & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    return result;
  }

void sub_10003E36C(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_19;
  }

  if (!a6) {
    return;
  }
  int v13 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((*((unsigned int (**)(id *, uint64_t, uint64_t))*a1 + 36))(a1, a2, a6))
  {
    uint64_t v21 = 0LL;
    id v22 = &v21;
    uint64_t v23 = 0x2020000000LL;
    char v24 = -86;
    if (([a1[15] podcastAppSelected] & 1) != 0
      || ([a1[15] iBooksAppSelected] & 1) != 0)
    {
      LOBYTE(v14) = 0;
    }

    else
    {
      unsigned int v14 = [a1[15] iTunesUAppSelected] ^ 1;
    }

    char v24 = v14;
    BOOL v15 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (v15)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003E56C;
      block[3] = &unk_100104368;
      void block[4] = &v21;
      void block[5] = a1;
      dispatch_sync(v15, block);
      if (*((unsigned __int8 *)v22 + 24) >= 2u)
      {
LABEL_20:
        __break(0x550Au);
        return;
      }

      if (!*((_BYTE *)v22 + 24))
      {
        (*((void (**)(id *, uint64_t))*a1 + 65))(a1, a6);
        (*((void (**)(id *))*a1 + 70))(a1);
        (*((void (**)(id *, void, uint64_t))*a1 + 83))(a1, a7 & ~(a7 >> 31), 1LL);
        goto LABEL_15;
      }

      BOOL v16 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
      if (v16)
      {
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_10003E6EC;
        v17[3] = &unk_100104988;
        int v18 = a2;
        v17[4] = a1;
        v17[5] = a6;
        char v19 = a8;
        dispatch_sync(v16, v17);
        (*((void (**)(id *))*a1 + 70))(a1);
LABEL_15:
        _Block_object_dispose(&v21, 8);
        goto LABEL_16;
      }
    }

void sub_10003E554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10003E56C(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 40);
  id v3 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  if (dword_1001197C8)
  {
    uint64_t v4 = v3;
    if (v2[100] < 0)
    {
      if ((v2[99] & 0x80000000) == 0)
      {
        id v10 = objc_msgSend( objc_msgSend( +[MPMediaQuery geniusMixesQuery](MPMediaQuery, "geniusMixesQuery"),  "collections"),  "objectAtIndex:",  v2[99]);
        (*(void (**)(int *))(*(void *)v2 + 656LL))(v2);
        [v4 setQueueWithGeniusMixPlaylist:v10];
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
        if ((sub_1000357C4() & 1) == 0) {
          NSLog( @"%s:%d no systemMusicPlayer! unlikely to be starting genius mix",  "Play_block_invoke",  3363LL);
        }
      }
    }

    else
    {
      if (qword_10011BD40 != -1) {
        dispatch_once(&qword_10011BD40, &stru_1001046A0);
      }
      uint64_t v5 = (void *)qword_10011BD38;
      if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0)
      {
        __break(0x5516u);
      }

      else
      {
        unsigned int v6 = sub_10002ED74((id)qword_10011BD38);
        unsigned int v8 = v2[100];
        if (v6 > v8)
        {
          id v9 = sub_10002EDC4(v5, v8, v7);
          (*(void (**)(int *))(*(void *)v2 + 656LL))(v2);
          [v4 setQueueWithRadioStation:v9];
          [v4 prepareQueueForPlayback];
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
      }
    }
  }

uint64_t sub_10003E6EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  if (*(_DWORD *)(a1 + 48) != -1)
  {
    if (sub_1000357C4())
    {
      id v4 = [v3 nowPlayingItemAtIndex:*(int *)(a1 + 48)];
      if (!v4) {
        NSLog( @"%s:%d Failed nowPlayingItemAtIndex: numberOfItems=%d index=%d mediaItem=%@",  "Play_block_invoke_2",  3388,  [v3 numberOfItems],  *(unsigned int *)(a1 + 48),  0);
      }
      [v3 setNowPlayingItem:v4];
    }

    else
    {
      NSLog(@"%s:%d no systemMusicPlayer, can't queue track for now playing!", "Play_block_invoke_2", 3395LL);
    }
  }

  if (!sub_1000357C4() || [v3 playbackState] || objc_msgSend(v3, "queueAsQuery"))
  {
  }

  else
  {
    unsigned int v6 = +[MPMediaQuery songsQuery](&OBJC_CLASS___MPMediaQuery, "songsQuery");
    uint64_t result = sub_1000256D8();
    if (!result || (result & 7) != 0) {
      goto LABEL_29;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 96LL))(result))
    {
      if (qword_10011BD40 != -1) {
        dispatch_once(&qword_10011BD40, &stru_1001046A0);
      }
      uint64_t result = qword_10011BD38;
      if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0) {
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(void))(*(void *)qword_10011BD38 + 624LL))()) {
        -[MPMediaQuery addFilterPredicate:]( v6,  "addFilterPredicate:",  +[MPMediaPropertyPredicate predicateWithValue:forProperty:]( &OBJC_CLASS___MPMediaPropertyPredicate,  "predicateWithValue:forProperty:",  &__kCFBooleanTrue,  MPMediaItemPropertyIsLocal));
      }
    }

    [v3 setQueueWithQuery:v6];
    [v3 prepareQueueForPlayback];
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 520LL))(v2, *(void *)(a1 + 40));
  if (*(unsigned __int8 *)(a1 + 52) >= 2u)
  {
    __break(0x550Au);
LABEL_29:
    __break(0x5516u);
    return result;
  }

  if (*(_BYTE *)(a1 + 52)) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 656LL))(v2);
  }
  return result;
}

void sub_10003E914(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v2 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (v2)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003E9A8;
      block[3] = &unk_100101CB8;
      void block[4] = a1;
      dispatch_sync(v2, block);

      return;
    }
  }

  __break(0x5510u);
}

id sub_10003E9A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  (*(void (**)(uint64_t))(*(void *)v1 + 576LL))(v1);
  return [v2 setQueueWithQuery:0];
}

dispatch_queue_s *sub_10003E9EC(dispatch_queue_s *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v7 = 0LL;
    unsigned int v8 = &v7;
    uint64_t v9 = 0x2020000000LL;
    char v10 = 0;
    unsigned int v2 = sub_1000357C4();
    if (!v2) {
      goto LABEL_10;
    }
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (((*(uint64_t (**)(dispatch_queue_s *))(*(void *)v1 + 440LL))(v1) & 1) != 0
      || ((*(uint64_t (**)(dispatch_queue_s *))(*(void *)v1 + 464LL))(v1) & 1) != 0)
    {
LABEL_8:

      unsigned int v4 = *((unsigned __int8 *)v8 + 24);
      if (v4 < 2)
      {
LABEL_11:
        BOOL v5 = v4 != 0;
        _Block_object_dispose(&v7, 8);
        return (dispatch_queue_s *)v5;
      }

      __break(0x550Au);
LABEL_10:
      sub_1000CEA98( v2,  @"%s:%s:%d no systemMusicPlayer, sending MR start FF command",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "StartFastForward",  3469LL);
      MRMediaRemoteSendCommandToApp(8LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      unsigned int v4 = 1;
      *((_BYTE *)v8 + 24) = 1;
      goto LABEL_11;
    }

    uint64_t result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (result)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003EB68;
      block[3] = &unk_1001049B0;
      void block[4] = &v7;
      dispatch_sync(result, block);
      goto LABEL_8;
    }
  }

  __break(0x5510u);
  return result;
}

void sub_10003EB4C(_Unwind_Exception *a1)
{
}

id sub_10003EB68(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "beginSeekingForward");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  return result;
}

dispatch_queue_s *sub_10003EBA4(dispatch_queue_s *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v7 = 0LL;
    unsigned int v8 = &v7;
    uint64_t v9 = 0x2020000000LL;
    char v10 = 0;
    unsigned int v2 = sub_1000357C4();
    if (!v2) {
      goto LABEL_10;
    }
    id v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (((*(uint64_t (**)(dispatch_queue_s *))(*(void *)v1 + 448LL))(v1) & 1) != 0
      || ((*(uint64_t (**)(dispatch_queue_s *))(*(void *)v1 + 464LL))(v1) & 1) != 0)
    {
LABEL_8:

      unsigned int v4 = *((unsigned __int8 *)v8 + 24);
      if (v4 < 2)
      {
LABEL_11:
        BOOL v5 = v4 != 0;
        _Block_object_dispose(&v7, 8);
        return (dispatch_queue_s *)v5;
      }

      __break(0x550Au);
LABEL_10:
      sub_1000CEA98( v2,  @"%s:%s:%d no systemMusicPlayer, sending MR start REW command",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "StartRewind",  3495LL);
      MRMediaRemoteSendCommandToApp(10LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      unsigned int v4 = 1;
      *((_BYTE *)v8 + 24) = 1;
      goto LABEL_11;
    }

    id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (result)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003ED20;
      block[3] = &unk_1001049B0;
      void block[4] = &v7;
      dispatch_sync(result, block);
      goto LABEL_8;
    }
  }

  __break(0x5510u);
  return result;
}

void sub_10003ED04(_Unwind_Exception *a1)
{
}

id sub_10003ED20(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "beginSeekingBackward");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  return result;
}

void sub_10003ED5C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (!sub_1000357C4())
    {
      sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, sending MR stop FF/REW command",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "StopFFRew",  3513LL);
      MRMediaRemoteSendCommandToApp(9LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      MRMediaRemoteSendCommandToApp(11LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      return;
    }

    uint64_t v1 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (v1)
    {
      dispatch_sync(v1, &stru_1001049D0);
      return;
    }
  }

  __break(0x5510u);
}

void sub_10003EE18(id a1)
{
}

void sub_10003EE34(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = (dispatch_queue_s *)[*(id *)(a1 + 120) nowPlayingHandlerQueue];
    if (v4)
    {
      v5[1] = 3221225472LL;
      v5[0] = _NSConcreteStackBlock;
      v5[2] = sub_10003EEC8;
      v5[3] = &unk_1001049F0;
      v5[4] = a1;
      *(double *)&void v5[5] = (double)a2 / 1000.0;
      dispatch_async(v4, v5);
      return;
    }
  }

  __break(0x5510u);
}

id sub_10003EEC8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 120) _isSetElapsedTimeAvailable];
  if ((_DWORD)result) {
    return (id)MRMediaRemoteSetElapsedTime(*(double *)(a1 + 40));
  }
  return result;
}

dispatch_queue_s *sub_10003EF04(dispatch_queue_s *result, unsigned int a2)
{
  if (!result) {
    goto LABEL_17;
  }
  unsigned int v2 = result;
  unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!sub_1000357C4())
  {
    id result = (dispatch_queue_s *)[*((id *)v2 + 15) nowPlayingAppPlaybackState];
    if (result <= 3)
    {
      if (!(_DWORD)result) {
        goto LABEL_15;
      }
      if (a2 <= 0xFF)
      {
        if (a2 - 1 >= 2)
        {
          if (a2 != 3) {
            goto LABEL_15;
          }
          sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, sending MRMediaRemoteCommandNextTrack",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "Next",  3581LL);
          uint64_t v5 = 4LL;
        }

        else
        {
          sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, sending MRMediaRemoteCommandNextChapter",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "Next",  3586LL);
          uint64_t v5 = 100LL;
        }

        MRMediaRemoteSendCommandToApp(v5, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
        goto LABEL_15;
      }
    }

    goto LABEL_16;
  }

  id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003F074;
    block[3] = &unk_100103288;
    void block[4] = v2;
    if (a2 < 0x100)
    {
      unsigned int v7 = a2;
      dispatch_sync(result, block);
LABEL_15:

      return (dispatch_queue_s *)1;
    }

void sub_10003F074(uint64_t a1)
{
  unsigned int v2 = *(id **)(a1 + 32);
  id v3 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  if ([v3 playbackState])
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 >= 0x100) {
      goto LABEL_28;
    }
    if (v4 - 1 >= 2)
    {
      if (v4 == 3) {
        [v3 skipToNextItem];
      }
    }

    else
    {
      if (qword_10011BD40 != -1) {
        dispatch_once(&qword_10011BD40, &stru_1001046A0);
      }
      uint64_t v5 = qword_10011BD38;
      sub_10003F224(v2, 0LL);
      if (v6)
      {
        uint64_t v7 = v6;
        if ((v6 & 7) != 0) {
          goto LABEL_29;
        }
        if (sub_10004EB2C(v6, 0))
        {
          unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 368LL))(v7);
          unsigned int v9 = v8;
          if (v8) {
            unsigned int v8 = (*((uint64_t (**)(id *))*v2 + 26))(v2);
          }
          unsigned int v10 = *(_DWORD *)(a1 + 40);
          if (v10 <= 0xFF)
          {
            if (v10 == 1)
            {
              if (!v9)
              {
LABEL_16:
                [v3 skipToNextItem];
LABEL_27:
                (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
                return;
              }

              if (v8 == -1) {
                goto LABEL_30;
              }
              if (v8 + 1 >= v9) {
                goto LABEL_16;
              }
            }

            else
            {
              if (!v9 || v10 != 2) {
                goto LABEL_27;
              }
              if (v8 == -1) {
                goto LABEL_30;
              }
              if (v8 + 1 >= v9) {
                goto LABEL_27;
              }
            }

            if (v5 && (v5 & 7) == 0)
            {
              uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 376LL))(v7);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 344LL))(v5, v11);
              goto LABEL_27;
            }

void sub_10003F224(id *a1, uint64_t a2)
{
  if (((*((uint64_t (**)(id *))*a1 + 74))(a1) & 1) == 0
    && ((*((uint64_t (**)(id *))*a1 + 75))(a1) & 1) == 0
    && ((*((uint64_t (**)(id *))*a1 + 76))(a1) & 1) == 0)
  {
    uint64_t v9 = (uint64_t)operator new(0x38uLL);
    if ((v9 & 0xF) == 0)
    {
      uint64_t v7 = v9;
      sub_10004EA40(v9);
      if ((v7 & 7) == 0)
      {
        *(_BYTE *)(v7 + 32) = 1;
        *(_DWORD *)(v7 + 36) = sub_10003FC58((uint64_t)a1, a2);
LABEL_14:
        if ((v7 & 7) == 0)
        {
          *(_BYTE *)(v7 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
          return;
        }
      }
    }

void sub_10003F460( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

dispatch_queue_s *sub_10003F498(dispatch_queue_s *result, unsigned int a2)
{
  if (!result) {
    goto LABEL_17;
  }
  unsigned int v2 = result;
  unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!sub_1000357C4())
  {
    id result = (dispatch_queue_s *)[*((id *)v2 + 15) nowPlayingAppPlaybackState];
    if (result <= 3)
    {
      if (!(_DWORD)result) {
        goto LABEL_15;
      }
      if (a2 <= 0xFF)
      {
        if (a2 - 1 >= 2)
        {
          if (a2 != 3) {
            goto LABEL_15;
          }
          sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, sending MRMediaRemoteCommandPrevTrack",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "Prev",  3651LL);
          uint64_t v5 = 5LL;
        }

        else
        {
          sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, sending MRMediaRemoteCommandPreviousChapter",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "Prev",  3656LL);
          uint64_t v5 = 101LL;
        }

        MRMediaRemoteSendCommandToApp(v5, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
        goto LABEL_15;
      }
    }

    goto LABEL_16;
  }

  id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (result)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003F608;
    block[3] = &unk_100103288;
    void block[4] = v2;
    if (a2 < 0x100)
    {
      unsigned int v7 = a2;
      dispatch_sync(result, block);
LABEL_15:

      return (dispatch_queue_s *)1;
    }

void sub_10003F608(uint64_t a1)
{
  unsigned int v2 = *(id **)(a1 + 32);
  id v3 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  uint64_t v4 = (uint64_t)[v3 playbackState];
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 40);
    if (v5 >= 0x100)
    {
LABEL_30:
      __break(0x550Au);
      goto LABEL_31;
    }

    if (v5 - 1 >= 2)
    {
      if (v5 == 3)
      {
        else {
          [v3 skipToPreviousItem];
        }
      }
    }

    else
    {
      if (qword_10011BD40 != -1) {
        dispatch_once(&qword_10011BD40, &stru_1001046A0);
      }
      uint64_t v6 = (id *)qword_10011BD38;
      sub_10003F224(v2, 0LL);
      if (v4)
      {
        uint64_t v7 = v4;
        if ((v4 & 7) != 0)
        {
LABEL_31:
          __break(0x5516u);
          [(id)v4 skipToBeginning];
          return;
        }

        if (sub_10004EB2C(v4, 0))
        {
          uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 368LL))(v7);
          int v8 = v4;
          if ((_DWORD)v4)
          {
            uint64_t v9 = sub_10003F7E8(v6, 0);
            uint64_t v4 = (*(uint64_t (**)(uint64_t, id *))(*(void *)v7 + 392LL))(v7, v9);
          }

          unsigned int v10 = *(_DWORD *)(a1 + 40);
          if (v10 <= 0xFF)
          {
            if (v10 == 1)
            {
              if (!v8 || !(_DWORD)v4)
              {
                [v3 skipToBeginningOrPreviousItem];
LABEL_29:
                (*(void (**)(uint64_t))(*(void *)v7 + 8LL))(v7);
                return;
              }
            }

            else if (!v8 || !(_DWORD)v4 || v10 != 2)
            {
              goto LABEL_29;
            }

            if (v6 && (v6 & 7) == 0)
            {
              uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 376LL))(v7, (v4 - 1));
              (*((void (**)(id *, uint64_t))*v6 + 43))(v6, v11);
              goto LABEL_29;
            }

            goto LABEL_31;
          }

          goto LABEL_30;
        }
      }
    }
  }

id *sub_10003F7E8(id *result, int a2)
{
  if (!result) {
    goto LABEL_30;
  }
  unsigned int v2 = result;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!(*((unsigned int (**)(id *))*v2 + 74))(v2) || sub_1000393F0((uint64_t)v2, a2))
  {
    id result = (id *)[v2[15] currentPlaybackTime];
    if (v5 >= 0.0 && v5 <= 2147483.65)
    {
      double v6 = v5 * 1000.0;
      if (v6 <= -1.0 || v6 >= 4294967300.0) {
        goto LABEL_31;
      }
      uint64_t v8 = v6;
      goto LABEL_18;
    }

    if (qword_10011BD40 != -1) {
      dispatch_once(&qword_10011BD40, &stru_1001046A0);
    }
    id result = (id *)qword_10011BD38;
    if (qword_10011BD38 && (qword_10011BD38 & 7) == 0)
    {
      uint64_t v8 = (*(unsigned int (**)(void))(*(void *)qword_10011BD38 + 504LL))() - 1;
LABEL_18:
      unsigned int v9 = (*((uint64_t (**)(id *))*v2 + 74))(v2);
      sub_1000CEA98(6u, @"MP: IsNowPlayingAppIPod()=%d, timeElapsed=%d", v9, v8);
      uint64_t v10 = v8;
LABEL_29:

      return (id *)v10;
    }

void sub_10003FA00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003FA18(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10003FA30(uint64_t result, char a2)
{
  if (!result) {
    goto LABEL_40;
  }
  unsigned int v2 = (char *)result;
  if ((result & 7) != 0) {
    goto LABEL_40;
  }
  if ((a2 & 1) != 0
    || dword_100119850 != 4
    || (id result = (uint64_t)[*(id *)(result + 120) fakeStreamTrackIndexTimeExpired], (_DWORD)result))
  {
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 208));
    if (*((_DWORD *)v2 + 51))
    {
      unsigned int v3 = sub_100062E0C();
      unsigned int v4 = sub_100063BF0(*((_DWORD *)v2 + 51), v3, 1);
      unsigned int v5 = v4;
      if (byte_10011BD20) {
        int v6 = 5000;
      }
      else {
        int v6 = 1700;
      }
      sub_1000CEAEC( 0,  7,  "%s:%d curTimeInMs = %u, _waitForMRNotificationTimestamp = %u, timeElapsed = %u, __cacheTimeoutMSWaitForMRNotification = %u",  "WaitForMRNotification",  3690,  v3,  *((_DWORD *)v2 + 51),  v4,  v6);
      if (byte_10011BD20) {
        unsigned int v7 = 5000;
      }
      else {
        unsigned int v7 = 1700;
      }
      if (v7 <= v5)
      {
        *((_DWORD *)v2 + 51) = 0;
      }

      else
      {
        v19.__darwin_time_t tv_sec = 0xAAAAAAAAAAAAAAAALL;
        *(void *)&v19.tv_usec = 0xAAAAAAAAAAAAAAAALL;
        id result = gettimeofday(&v19, 0LL);
        if (byte_10011BD20) {
          unsigned int v8 = 5000;
        }
        else {
          unsigned int v8 = 1700;
        }
        BOOL v9 = v8 >= v5;
        unsigned int v10 = v8 - v5;
        if (!v9) {
          goto LABEL_41;
        }
        if ((*((_DWORD *)v2 + 100) & 0x80000000) == 0
          || (id result = (uint64_t)[*((id *)v2 + 15) iBooksAppSelected], (result & 1) != 0)
          || (id result = (uint64_t)[*((id *)v2 + 15) podcastAppSelected], (result & 1) != 0)
          || (id result = (uint64_t)[*((id *)v2 + 15) iTunesUAppSelected], (_DWORD)result))
        {
          int v11 = 5000;
        }

        else
        {
          int v11 = 0;
        }

        BOOL v9 = __CFADD__(v10, v11);
        unsigned int v12 = v10 + v11;
        if (v9) {
          goto LABEL_39;
        }
        if (1000LL * v19.tv_usec != 1000 * v19.tv_usec)
        {
LABEL_42:
          __break(0x550Cu);
          return result;
        }

        __darwin_time_t tv_sec = v19.tv_sec;
        if (v12 >= 0x3E9)
        {
          while (1)
          {
            __darwin_time_t v14 = tv_sec + 1;
            if (__OFADD__(tv_sec, 1LL)) {
              goto LABEL_39;
            }
            v12 -= 1000;
            ++tv_sec;
            if (v12 <= 0x3E8)
            {
              __darwin_time_t tv_sec = v14;
              break;
            }
          }
        }

        uint64_t v15 = 1000000 * v12 + (uint64_t)(1000 * v19.tv_usec);
        v18.__darwin_time_t tv_sec = tv_sec;
        v18.tv_nsec = v15;
        if (v15 >= 1000000001)
        {
          BOOL v16 = __OFADD__(tv_sec, 1LL);
          __darwin_time_t v17 = tv_sec + 1;
          if (v16)
          {
LABEL_39:
            __break(0x5500u);
LABEL_40:
            __break(0x5516u);
LABEL_41:
            __break(0x5515u);
            goto LABEL_42;
          }

          v18.__darwin_time_t tv_sec = v17;
          v18.tv_nsec = v15 - 1000000000;
        }

        if (pthread_cond_timedwait((pthread_cond_t *)(v2 + 272), (pthread_mutex_t *)(v2 + 208), &v18) == 60) {
          NSLog(@"%s:%d, Timed out waiting for MR notifications", "WaitForMRNotification", 3726LL);
        }
      }
    }

    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 208));
  }

  return result;
}

uint64_t sub_10003FC58(uint64_t result, uint64_t a2)
{
  if (!result || (unsigned int v2 = (id *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_10003FA30((uint64_t)v2, 0);
    else {
      uint64_t v5 = 0xFFFFFFFFLL;
    }

    return v5;
  }

  return result;
}

uint64_t sub_10003FCE0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10003FC58(result, 1LL);
  }
  __break(0x5516u);
  return result;
}

void sub_10003FCF8(uint64_t a1, uint64_t a2)
{
}

void sub_10003FD08(uint64_t a1)
{
}

id *sub_10003FD14(id *result)
{
  return result;
}

id sub_10003FD2C(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "nowPlayingItem");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = result;
  return result;
}

void sub_10003FD64(id *a1)
{
  else {
    sub_10003F224(a1, 1LL);
  }
}

dispatch_queue_s *sub_10003FD7C(dispatch_queue_s *result)
{
  if (!result || (uint64_t v1 = (id *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v6 = 0LL;
    unsigned int v7 = &v6;
    uint64_t v8 = 0x2020000000LL;
    int v9 = 0;
    sub_10003FA30((uint64_t)v1, 0);
    unsigned int v3 = [v1[15] currentNowPlayingInfoTrackCount];
    *((_DWORD *)v7 + 6) = v3;
    if (([v1[15] currentNowPlayingInfoTrackCountExists] & 1) != 0
      || !(*((unsigned int (**)(id *))*v1 + 74))(v1)
      || ((*((uint64_t (**)(id *))*v1 + 64))(v1) & 1) != 0)
    {
      goto LABEL_9;
    }

    id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (result)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10003FEF4;
      block[3] = &unk_1001049B0;
      void block[4] = &v6;
      dispatch_sync(result, block);
      sub_1000CEA98( 7u,  @"%s:%s-%d numberOfItems from iPod player is 0x%x\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "TrackCount",  3839LL,  *((unsigned int *)v7 + 6));
LABEL_9:

      uint64_t v4 = *((unsigned int *)v7 + 6);
      _Block_object_dispose(&v6, 8);
      return (dispatch_queue_s *)v4;
    }
  }

  __break(0x5510u);
  return result;
}

void sub_10003FEDC(_Unwind_Exception *a1)
{
}

id sub_10003FEF4(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "numberOfItems");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_10003FF2C(id *a1, unsigned int a2)
{
  uint64_t v31 = 0LL;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  uint64_t v34 = 0LL;
  sub_10003FA30((uint64_t)a1, 1);
  if (((*((uint64_t (**)(id *))*a1 + 74))(a1) & 1) == 0
    && ((*((uint64_t (**)(id *))*a1 + 75))(a1) & 1) == 0
    && ((*((uint64_t (**)(id *))*a1 + 76))(a1) & 1) == 0)
  {
    unsigned int v17 = [a1[15] currentNowPlayingInfoTrack];
    if (((*((uint64_t (**)(id *))*a1 + 64))(a1) & 1) == 0
      && ((a2 & 0x80000000) != 0 || (*((unsigned int (**)(id *))*a1 + 49))(a1) <= a2))
    {
      goto LABEL_38;
    }

    uint64_t v18 = (uint64_t)operator new(0x38uLL);
    uint64_t v19 = v18;
    if ((v18 & 0xF) == 0)
    {
      sub_10004EA40(v18);
      v32[3] = v19;
      if ((v19 & 7) == 0)
      {
        *(_DWORD *)(v19 + 36) = a2;
        if (v17 != a2)
        {
          uint64_t v19 = v32[3];
        }

        if (v19 && (v19 & 7) == 0)
        {
          *(_BYTE *)(v19 + 32) = 1;
          goto LABEL_38;
        }
      }
    }

    goto LABEL_58;
  }

  if ((*((unsigned int (**)(id *))*a1 + 49))(a1) <= a2)
  {
LABEL_38:
    uint64_t v16 = v32[3];
    if (!v16)
    {
LABEL_41:
      _Block_object_dispose(&v31, 8);
      return;
    }

    if ((v16 & 7) == 0)
    {
      *(_BYTE *)(v16 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
      goto LABEL_41;
    }

    goto LABEL_58;
  }

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned int v5 = [a1[15] currentNowPlayingInfoTrack];
  if (((*((uint64_t (**)(id *))*a1 + 75))(a1) & 1) != 0
    || !(*((unsigned int (**)(id *))*a1 + 64))(a1)
    || !sub_1000357C4())
  {
    id v11 = -[IAPStackshot startTimer:withInfo:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "startTimer:withInfo:",  @"MediaPlayer::GetIndTrackAccessor",  3.0);
    uint64_t v24 = 0LL;
    unint64_t v25 = &v24;
    uint64_t v26 = 0x3052000000LL;
    id v27 = sub_10003FCF8;
    id v28 = sub_10003FD08;
    uint64_t v29 = 0LL;
    if ((*((unsigned int (**)(id *))*a1 + 75))(a1))
    {
      if (v5 == a2) {
        goto LABEL_27;
      }
    }

    else
    {
      if ((*((unsigned int (**)(id *))*a1 + 76))(a1))
      {
LABEL_27:
        id v12 = sub_100031C08((uint64_t)[a1[15] currentNowPlayingInfoPID]);
        v25[5] = (uint64_t)v12;
        goto LABEL_28;
      }

      if (sub_1000357C4())
      {
        uint64_t v20 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
        if (!v20) {
          goto LABEL_59;
        }
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        v21[2] = sub_10004049C;
        v21[3] = &unk_100104368;
        unsigned int v22 = a2;
        unsigned int v23 = v5;
        v21[4] = &v24;
        dispatch_sync(v20, v21);
      }

      else if ((sub_1000357C4() & 1) == 0)
      {
        sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer, can't get nowPlayingItemAtIndex",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "GetIndTrackAccessor",  3944LL);
      }
    }

void sub_1000403B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_10004041C(uint64_t a1)
{
  id v2 = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "nowPlayingItem");
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (result) {
    BOOL v4 = (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) & 7LL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    && ((uint64_t result = (*(uint64_t (**)(uint64_t, id))(*(void *)result + 400LL))(result, v2),
         (uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) != 0)
      ? (BOOL v6 = (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) & 7LL) == 0)
      : (BOOL v6 = 0),
        v6))
  {
    *(_BYTE *)(v5 + 32) = 1;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

void sub_10004049C(uint64_t a1)
{
  id v2 = +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
  unsigned int v3 = v2;
  if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a1 + 44)) {
    id v4 = [v2 nowPlayingItem];
  }
  else {
    id v4 = objc_msgSend(v2, "nowPlayingItemAtIndex:");
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL) = v4;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    NSLog( @"%s:%d Failed nowPlayingItemAtIndex: numberOfItems=%d index=%d mediaItem=%@",  "GetIndTrackAccessor_block_invoke_2",  3937,  [v3 numberOfItems],  *(unsigned int *)(a1 + 40),  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

id *sub_100040544(id *result)
{
  return result;
}

id sub_10004055C(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "currentPlaybackTime");
  double v4 = v3 * 1000.0;
  if (v4 > -1.0 && v4 < 4294967300.0) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v4;
  }
  else {
    __break(0x5505u);
  }
  return result;
}

uint64_t sub_1000405C0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_15;
  }

  pthread_mutex_lock((pthread_mutex_t *)(result + 136));
  if (!*(_DWORD *)(v1 + 132))
  {
LABEL_8:
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
    if ([*(id *)(v1 + 120) nowPlayingAppIsValid])
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 592LL))(v1) & 1) != 0)
      {
        double v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
        id v5 = -[IAPStackshot startTimer:withInfo:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "startTimer:withInfo:",  @"MediaPlayer::GetPlaybackState",  3.0);
        id v6 = [*(id *)(v1 + 120) nowPlayingAppPlaybackState];
        -[IAPStackshot endTimer:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "endTimer:",  v5);

        sub_1000CEA98(6u, @"MP: GetPlaybackState: playbackState=%d", v6);
        return (uint64_t)v6;
      }

      else
      {
        id v3 = [*(id *)(v1 + 120) nowPlayingAppPlaybackState];
        sub_1000CEA98(6u, @"MP: GetPlaybackState: playbackState=%d, ! IsNowPlayingAppIPod()", v3);
      }
    }

    else
    {
      sub_1000CEA98(6u, @"MP: GetPlaybackState: playbackState=%d, ! IsNowPlayingAppValid()", 0LL);
      return 0LL;
    }

    return (uint64_t)v3;
  }

  id v2 = sub_100062E0C();
  id result = sub_100063BF0(*(_DWORD *)(v1 + 132), v2, 1);
  if (result > 0x3E7)
  {
    *(_DWORD *)(v1 + 132) = 0;
    *(_WORD *)(v1 + 392) = 0;
    goto LABEL_8;
  }

  id v3 = (id)*(unsigned int *)(v1 + 128);
  if (v3 < 4)
  {
    sub_1000CEA98( 6u,  @"MP: GetPlaybackState: playbackState=%d, _expectedPlayState=%d, curTimeInMs(%u) - _expectedPlayStateTimestamp(%u) > __cacheTimeoutMS(%u)",  v3,  v3,  v2,  *(unsigned int *)(v1 + 132),  1000LL);
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 136));
    return (uint64_t)v3;
  }

BOOL sub_10004074C(BOOL result)
{
  if (!result || (uint64_t v1 = result, result & 7))
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98(6u, @"MP: Playing: check Playing, kPlaying=%u", 1LL);
    return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 416LL))(v1) == 1;
  }

  return result;
}

BOOL sub_1000407B0(BOOL result)
{
  if (!result || (uint64_t v1 = result, result & 7))
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98(6u, @"MP: Paused: check Playing, kPlaying=%u", 2LL);
    return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 416LL))(v1) == 2;
  }

  return result;
}

void sub_100040814(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_24;
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 328));
  if (*(_DWORD *)(a1 + 324))
  {
    id v2 = sub_100062E0C();
    if (sub_100063BF0(*(_DWORD *)(a1 + 324), v2, 1) <= 0x3E7)
    {
      uint64_t v3 = *(unsigned int *)(a1 + 320);
      if (v3 < 4)
      {
        sub_1000CEA98( 6u,  @"MP: InFF(%d): ISL::kInFF=%d _expectedFFRewState=%d, __cacheTimeoutMS(%u) > (curTimeInMs(%u) - _expectedFFRewS tateTimestamp(%u))",  (_DWORD)v3 == 1,  1LL,  v3,  1000LL,  v2,  *(unsigned int *)(a1 + 324));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 328));
        return;
      }

      goto LABEL_24;
    }

    *(_DWORD *)(a1 + 324) = 0;
    uint64_t v4 = *(unsigned int *)(a1 + 320);
    sub_1000CEA98( 6u,  @"MP: InFF(%d): ISL::kInFF=%d _expectedFFRewState=%d, __cacheTimeoutMS(%u) > (curTimeInMs(%u) - _expectedFFRewStateTimestamp(%u))",  0LL,  1LL,  v4,  1000LL,  v2,  0LL);
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 328));
  id v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 592LL))(a1);
  [*(id *)(a1 + 120) nowPlayingAppPlaybackRate];
  double v8 = v7;
  if ((v6 & 1) == 0)
  {
    BOOL v10 = v7 != 1.5 && v7 > 1.0;
    sub_1000CEA98( 6u,  @"MP: InFF(%d): ISL::kInFF=%d ! IsNowPlayingAppIPod() rate=%f",  v10,  1LL,  *(void *)&v7);
    goto LABEL_19;
  }

  if ([*(id *)(a1 + 120) nowPlayingAppPlaybackState])
  {
    BOOL v9 = v8 != 1.5 && v8 > 1.0;
    sub_1000CEA98( 6u,  @"MP: InFF(%d): ISL::kInFF=%d IsNowPlayingAppIPod() rate=%f, Not ISL::kStopped",  v9,  1LL,  *(void *)&v8);
    goto LABEL_19;
  }

  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  char v17 = 0;
  id v11 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v11)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100040A88;
    block[3] = &unk_1001049B0;
    void block[4] = &v14;
    dispatch_sync(v11, block);
    uint64_t v12 = *((unsigned __int8 *)v15 + 24);
    if (v12 <= 1)
    {
      sub_1000CEA98( 6u,  @"MP: InFF(%d): ISL::kInFF=%d IsNowPlayingAppIPod() rate=%f, ISL::kStopped",  v12,  1LL,  *(void *)&v8,  0LL);
      _Block_object_dispose(&v14, 8);
LABEL_19:

      return;
    }

void sub_100040A70(_Unwind_Exception *a1)
{
}

id sub_100040A88(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "playbackState");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result == (id)4;
  return result;
}

void sub_100040AC8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_17;
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 328));
  if (*(_DWORD *)(a1 + 324))
  {
    id v2 = sub_100062E0C();
    if (sub_100063BF0(*(_DWORD *)(a1 + 324), v2, 1) <= 0x3E7)
    {
      uint64_t v3 = *(unsigned int *)(a1 + 320);
      if (v3 < 4)
      {
        sub_1000CEA98( 6u,  @"MP: InRew(%d): ISL::kInRew=%d _expectedFFRewState=%d, __cacheTimeoutMS(%u) > (curTimeInMs(%u) - _expectedFFRe wStateTimestamp(%u))",  (_DWORD)v3 == 2,  2LL,  v3,  1000LL,  v2,  *(unsigned int *)(a1 + 324));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 328));
        return;
      }

      goto LABEL_17;
    }

    *(_DWORD *)(a1 + 324) = 0;
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 328));
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 592LL))(a1);
  [*(id *)(a1 + 120) nowPlayingAppPlaybackRate];
  double v7 = v6;
  if ((v5 & 1) == 0)
  {
    sub_1000CEA98( 6u,  @"MP: InRew(%d): ISL::kInRew=%d ! IsNowPlayingAppIPod() rate=%f",  v6 < 0.0,  2LL,  *(void *)&v6);
    goto LABEL_12;
  }

  if ([*(id *)(a1 + 120) nowPlayingAppPlaybackState])
  {
    sub_1000CEA98( 6u,  @"MP: InRew(%d): ISL::kInRew=%d IsNowPlayingAppIPod() rate=%f, Not ISL::kStopped",  v7 < 0.0,  2LL,  *(void *)&v7);
LABEL_12:

    return;
  }

  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  double v8 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v8)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100040CEC;
    block[3] = &unk_1001049B0;
    void block[4] = &v11;
    dispatch_sync(v8, block);
    uint64_t v9 = *((unsigned __int8 *)v12 + 24);
    if (v9 <= 1)
    {
      sub_1000CEA98( 6u,  @"MP: InRew(%d): ISL::kInRew=%d IsNowPlayingAppIPod() rate=%f, ISL::kStopped",  v9,  2LL,  *(void *)&v7,  0LL);
      _Block_object_dispose(&v11, 8);
      goto LABEL_12;
    }

void sub_100040CD4(_Unwind_Exception *a1)
{
}

id sub_100040CEC(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "playbackState");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result == (id)5;
  return result;
}

uint64_t sub_100040D2C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else if (((*(uint64_t (**)(uint64_t))(*(void *)result + 440LL))(result) & 1) != 0)
  {
    return 1LL;
  }

  else
  {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 448LL))(v1);
  }

  return result;
}

uint64_t sub_100040D88(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(unsigned int (**)(uint64_t))(*(void *)result + 416LL))(result) == 0;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100040DBC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100040DD4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100040DEC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100040E04(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100040E1C(a1, 1);
  }
}

void sub_100040E1C(uint64_t a1, int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_15:
    __break(0x550Au);
    goto LABEL_16;
  }

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v8 = 0LL;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000LL;
  char v11 = 0;
  if (!sub_1000357C4() || !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 592LL))(a1))
  {
    if ((sub_1000357C4() & 1) == 0) {
      sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer!",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "_IsNowPlayingGeniusMix",  4290LL);
    }
LABEL_11:

    if (*((unsigned __int8 *)v9 + 24) <= 1u)
    {
      _Block_object_dispose(&v8, 8);
      return;
    }

    goto LABEL_15;
  }

  if (!a2)
  {
    unsigned __int8 v6 = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer]( MediaPlayerHelper,  "sharedSystemMusicPlayer"),  "isNowPlayingItemFromGeniusMix");
    *((_BYTE *)v9 + 24) = v6;
    goto LABEL_11;
  }

  char v5 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v5)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100040F9C;
    block[3] = &unk_1001049B0;
    void block[4] = &v8;
    dispatch_sync(v5, block);
    goto LABEL_11;
  }

void sub_100040F84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100040F9C(uint64_t a1)
{
  id result = objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "isNowPlayingItemFromGeniusMix");
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

BOOL sub_100040FD4(BOOL result)
{
  if (!result || (uint64_t v1 = (id *)result, result & 7))
  {
    __break(0x5516u);
  }

  else
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    BOOL v3 = (*((unsigned int (**)(id *))*v1 + 74))(v1)

    return v3;
  }

  return result;
}

uint64_t sub_100041058(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_1000393F0(result, 1);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100041070(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10003535C();
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100041094(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 23LL;
  }
  __break(0x5516u);
  return result;
}

NSAutoreleasePool *sub_1000410AC(uint64_t a1, int a2, std::string *this)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v23 = v5;
  __int128 v24 = v5;
  __int128 v21 = v5;
  __int128 v22 = v5;
  __int128 v19 = v5;
  __int128 v20 = v5;
  __int128 v17 = v5;
  __int128 v18 = v5;
  __int128 v15 = v5;
  __int128 v16 = v5;
  __int128 v13 = v5;
  __int128 v14 = v5;
  __int128 v11 = v5;
  __int128 v12 = v5;
  __int128 v9 = v5;
  __int128 v10 = v5;
  if (!a2) {
    return (NSAutoreleasePool *)std::string::assign(this, "Off");
  }
  id result = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if ((a2 - 1) >= 0xFFFFFF9C)
  {
    __break(0x5500u);
  }

  else
  {
    double v7 = result;
    uint64_t v8 = (const __CFString *)objc_msgSend( +[MLEQPreset eqPresetForBuiltInPresetType:]( MLEQPreset,  "eqPresetForBuiltInPresetType:",  (a2 + 99),  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24),  "localizedName");

    return (NSAutoreleasePool *)std::string::assign(this, (const std::string::value_type *)&v9);
  }

  return result;
}

void sub_1000411D8(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    __int128 v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = [*(id *)(a1 + 120) nowPlayingAppName];
    if (v4)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v4, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_9:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_9;
    }
  }

  __break(0x5516u);
}

void sub_10004126C(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v5 = [*(id *)(a1 + 120) currentNowPlayingInfoString:kMRMediaRemoteNowPlayingInfoTitle];
    if (v5)
    {
      unsigned __int8 v6 = v5;
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v5, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v7 = v6;
LABEL_5:

      return;
    }

    if (dword_10011983C && [*(id *)(a1 + 120) nowPlayingAppName])
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend( objc_msgSend(*(id *)(a1 + 120), "nowPlayingAppName"),  "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      memset(&v16, 0, sizeof(v16));
      sub_1000255A4((uint64_t)__p, ".");
      sub_10001C8E4(a2, &v16, (std::string::size_type)__p);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 3);
      int64_t v9 = v8 - 1;
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v10 = 3 * v9;
      BOOL v11 = (unsigned __int128)(v9 * (__int128)24LL) >> 64 != (24 * v9) >> 63;
      BOOL v12 = __CFADD__(v16.__r_.__value_.__r.__words[0], 24 * v9);
      if (v11 || v12) {
        goto LABEL_25;
      }
      if (v16.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v13 = v16.__r_.__value_.__r.__words[0] + 8 * v10;
        if ((v13 & 7) == 0)
        {
          std::string::operator=(a2, (const std::string *)v13);
          __p[0] = &v16;
          sub_100025484((uint64_t **)__p);
          goto LABEL_5;
        }
      }
    }

    else
    {
      if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2->__r_.__value_.__s.__size_ = 0;
        goto LABEL_5;
      }

      if (a2->__r_.__value_.__r.__words[0])
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0LL;
        goto LABEL_5;
      }
    }
  }

  __break(0x5516u);
LABEL_24:
  __break(0x5515u);
LABEL_25:
  __break(0x5513u);
}

void sub_100041408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100041434(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = [*(id *)(a1 + 120) currentNowPlayingInfoString:kMRMediaRemoteNowPlayingInfoAlbum];
    if (v4)
    {
      id v5 = v4;
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v4, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v6 = v5;
LABEL_9:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_9;
    }
  }

  __break(0x5516u);
}

void sub_1000414E0(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = [*(id *)(a1 + 120) currentNowPlayingInfoString:kMRMediaRemoteNowPlayingInfoArtist];
    if (v4)
    {
      id v5 = v4;
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v4, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v6 = v5;
LABEL_9:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_9;
    }
  }

  __break(0x5516u);
}

void sub_10004158C(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = [*(id *)(a1 + 120) currentNowPlayingInfoString:kMRMediaRemoteNowPlayingInfoGenre];
    if (v4)
    {
      id v5 = v4;
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v4, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v6 = v5;
LABEL_9:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_9;
    }
  }

  __break(0x5516u);
}

void sub_100041638(uint64_t a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = [*(id *)(a1 + 120) currentNowPlayingInfoString:kMRMediaRemoteNowPlayingInfoComposer];
    if (v4)
    {
      id v5 = v4;
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v4, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v6 = v5;
LABEL_9:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_9;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_9;
    }
  }

  __break(0x5516u);
}

uint64_t sub_1000416E4(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_18;
  }
  id result = (uint64_t)[*(id *)(result + 120) currentNowPlayingInfoDuration];
  if (v1 >= 0.0 && v1 <= 2147483.65)
  {
    double v2 = v1 * 1000.0;
    if (v2 > -1.0 && v2 < 4294967300.0) {
      return v2;
    }
    goto LABEL_19;
  }

  if (qword_10011BD40 != -1) {
    dispatch_once(&qword_10011BD40, &stru_1001046A0);
  }
  id result = qword_10011BD38;
  if (!qword_10011BD38 || (qword_10011BD38 & 7) != 0)
  {
LABEL_18:
    __break(0x5516u);
LABEL_19:
    __break(0x5505u);
    return result;
  }

  else {
    return 0xFFFFFFFFLL;
  }
}

id *sub_1000417A8(id *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id result = (id *)[result[15] currentNowPlayingInfoAlbumTrack];
  }

  __break(0x5507u);
  return result;
}

id *sub_1000417E0(id *result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id result = (id *)[result[15] currentNowPlayingInfoDisc];
  }

  __break(0x5507u);
  return result;
}

id sub_100041818(id *a1)
{
  return [a1 currentNowPlayingInfoChapter];
}

id *sub_100041830(id *result)
{
  return result;
}

id sub_100041848(id *a1)
{
  return [a1 currentNowPlayingInfoArtworkExists];
}

void sub_100041860(id *a1, uint64_t a2, std::string *a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (!(*((unsigned int (**)(id *))*a1 + 76))(a1))
    {
LABEL_6:

      return;
    }

    id v7 = [a1[15] nowPlayingInfoTitleForAudiobookIndex:a2];
    if (v7)
    {
      unint64_t v8 = v7;
      std::string::assign( a3,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v7, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      id v9 = v8;
      goto LABEL_6;
    }

    if (dword_10011983C && [a1[15] nowPlayingAppName])
    {
      std::string::assign( a3,  (const std::string::value_type *)objc_msgSend( objc_msgSend( objc_msgSend(a1[15], "nowPlayingAppName"),  "precomposedStringWithCanonicalMapping"),  "UTF8String"));
      memset(&v18, 0, sizeof(v18));
      sub_1000255A4((uint64_t)__p, ".");
      sub_10001C8E4(a3, &v18, (std::string::size_type)__p);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18.__r_.__value_.__l.__size_ - v18.__r_.__value_.__r.__words[0]) >> 3);
      int64_t v11 = v10 - 1;
      if (!v10) {
        goto LABEL_25;
      }
      uint64_t v12 = 3 * v11;
      BOOL v13 = (unsigned __int128)(v11 * (__int128)24LL) >> 64 != (24 * v11) >> 63;
      BOOL v14 = __CFADD__(v18.__r_.__value_.__r.__words[0], 24 * v11);
      if (v13 || v14) {
        goto LABEL_26;
      }
      if (v18.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v15 = v18.__r_.__value_.__r.__words[0] + 8 * v12;
        if ((v15 & 7) == 0)
        {
          std::string::operator=(a3, (const std::string *)v15);
          __p[0] = &v18;
          sub_100025484((uint64_t **)__p);
          goto LABEL_6;
        }
      }
    }

    else
    {
      if (((char)a3->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a3->__r_.__value_.__s.__data_[0] = 0;
        a3->__r_.__value_.__s.__size_ = 0;
        goto LABEL_6;
      }

      if (a3->__r_.__value_.__r.__words[0])
      {
        *a3->__r_.__value_.__l.__data_ = 0;
        a3->__r_.__value_.__l.__size_ = 0LL;
        goto LABEL_6;
      }
    }
  }

  __break(0x5516u);
LABEL_25:
  __break(0x5515u);
LABEL_26:
  __break(0x5513u);
}

void sub_100041A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_100041A38(BOOL result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0)) {
    __break(0x5516u);
  }
  else {
  return result;
  }
}

BOOL sub_100041A88(BOOL result)
{
  if (result && (result & 7) == 0) {
    return [*(id *)(result + 120) nowPlayingAppIsVideosApp] != 0;
  }
  __break(0x5516u);
  return result;
}

BOOL sub_100041AB8(BOOL result)
{
  if (result && (result & 7) == 0) {
    return [*(id *)(result + 120) nowPlayingAppIsiBooksApp] != 0;
  }
  __break(0x5516u);
  return result;
}

BOOL sub_100041AE8(BOOL result)
{
  if (result && (result & 7) == 0) {
    return [*(id *)(result + 120) nowPlayingAppIsPodcastApp] != 0;
  }
  __break(0x5516u);
  return result;
}

id sub_100041B18(id *a1)
{
  return [a1 currentNowPlayingInfoArtwork];
}

id sub_100041B30()
{
  return +[MediaPlayerHelper sharedSystemMusicPlayer](&OBJC_CLASS___MediaPlayerHelper, "sharedSystemMusicPlayer");
}

id sub_100041B3C()
{
  return +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
}

uint64_t sub_100041B48(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 568LL))(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100041B64(uint64_t a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v4 = a2;
    id v5 = (dispatch_queue_s *)[*(id *)(a1 + 120) nowPlayingHandlerQueue];
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100041BE8;
      void v6[3] = &unk_1001037D0;
      v6[4] = a2;
      void v6[5] = a1;
      dispatch_async(v5, v6);
      return;
    }
  }

  __break(0x5510u);
}

void sub_100041BE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1000CEA98(7u, @"MR: %s:%d call _handleNowPlayingInfo:", "DBGNotifyNowPlayingInfo_block_invoke", 4597LL);
  [*(id *)(v2 + 120) _handleNowPlayingInfo:*(void *)(a1 + 32)];
}

void sub_100041C40(uint64_t a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v4 = a2;
    id v5 = (dispatch_queue_s *)[*(id *)(a1 + 120) nowPlayingHandlerQueue];
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_100041CC4;
      void v6[3] = &unk_1001037D0;
      v6[4] = a2;
      void v6[5] = a1;
      dispatch_async(v5, v6);
      return;
    }
  }

  __break(0x5510u);
}

void sub_100041CC4(uint64_t a1)
{
}

void sub_100041CF0(uint64_t a1, char a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v4 = (dispatch_queue_s *)[*(id *)(a1 + 120) nowPlayingHandlerQueue];
    if (v4)
    {
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      v5[2] = sub_100041D74;
      v5[3] = &unk_100104A10;
      v5[4] = a1;
      char v6 = a2;
      dispatch_async(v4, v5);
      return;
    }
  }

  __break(0x5510u);
}

void sub_100041D74(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1000CEA98( 7u,  @"MR: %s:%d call _handleNowPlayingAppIsPlayingDidChange:",  "DBGNotifyNowPlayingState_block_invoke",  4615LL);
  else {
    objc_msgSend(*(id *)(v2 + 120), "_handleNowPlayingAppIsPlayingDidChange:");
  }
}

void *sub_100041DD0(void *result, uint64_t a2)
{
  if (!a2) {
    goto LABEL_11;
  }
  if ((a2 & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    WORD2(v4) = -21846;
    LODWORD(v4) = -1431655766;
    id result = (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 192LL))(&v4, a2);
    if (&vars0 != (uint64_t *)23 && (unint64_t)&v4 + 5 > 3)
    {
      BOOL v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02X:%02X:%02X:%02X:%02X:%02X",  v4,  BYTE1(v4),  BYTE2(v4),  BYTE3(v4),  BYTE4(v4),  BYTE5(v4));
      if (!v3) {
        return (void *)((_DWORD)v3 != 0);
      }
      LODWORD(v3) = MRMediaRemoteSelectSourceWithID();
      if ((_DWORD)v3) {
        return (void *)((_DWORD)v3 != 0);
      }
      NSLog(@"MediaPlayer::PullRouteToA2DP failed to set audio route to A2DP");
LABEL_11:
      LODWORD(v3) = 0;
      return (void *)((_DWORD)v3 != 0);
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_100041EC0(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t v2 = a2;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 136));
  uint64_t v4 = *(unsigned int *)(a1 + 128);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 393);
  NSLog( @"MR: %s:%d ENTER _expectedPlayState=%d _expectedPlayStateTimestamp=%u _nowPlayingInfoReceived=%u _nowPlayingAppIsPlayingReceived=%u",  "SetExpectedPlayStateInfo",  4646LL,  v4,  *(unsigned int *)(a1 + 132),  *(unsigned __int8 *)(a1 + 392),  v5);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == 3)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      if ((_DWORD)v2 != 1) {
        goto LABEL_23;
      }
      uint64_t v6 = 2LL;
    }
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  id v7 = (uint64_t *)*(unsigned int *)(a1 + 132);
  if (!(_DWORD)v7) {
    goto LABEL_18;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 128);
  if (v8 > 3) {
    goto LABEL_21;
  }
  if ((_DWORD)v6 != v8)
  {
LABEL_18:
    *(_DWORD *)(a1 + 12_Block_object_dispose(va, 8) = v6;
    id v7 = sub_100062E0C();
    *(_DWORD *)(a1 + 132) = (_DWORD)v7;
    *(_WORD *)(a1 + 392) = 0;
    uint64_t v6 = *(unsigned int *)(a1 + 128);
    if (v6 < 4)
    {
      uint64_t v9 = 0LL;
      unsigned int v10 = 0;
      goto LABEL_20;
    }

uint64_t sub_10004200C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 208));
    uint64_t v2 = sub_100062E0C();
    *(_DWORD *)(v1 + 204) = (_DWORD)v2;
    NSLog(@"MR: %s:%d _waitForMRNotificationTimestamp=%u", "SetWaitForMRNotification", 4715LL, v2);
    return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 208));
  }

  return result;
}

uint64_t sub_100042078(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v2 = a2;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 328));
  uint64_t v4 = *(unsigned int *)(a1 + 320);
  NSLog( @"MR: %s:%d ENTER _expectedFFRewStateTimestamp=%u _expectedFFRewState=%d",  "SetExpectedFFRewStateInfo",  4742LL,  *(unsigned int *)(a1 + 324),  v4);
  uint64_t v5 = dword_1000DAE20[(int)v2 - 8];
  uint64_t v6 = (uint64_t *)*(unsigned int *)(a1 + 324);
  if (!(_DWORD)v6) {
    goto LABEL_8;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 320);
  if (v7 > 3)
  {
LABEL_10:
    __break(0x550Au);
LABEL_11:
    __break(0x5516u);
LABEL_12:
    sub_1000D25E0(v2);
  }

  if ((_DWORD)v5 != v7)
  {
LABEL_8:
    *(_DWORD *)(a1 + 3memset(md, 170, 20) = v5;
    uint64_t v6 = sub_100062E0C();
    *(_DWORD *)(a1 + 324) = (_DWORD)v6;
    uint64_t v5 = *(unsigned int *)(a1 + 320);
    goto LABEL_10;
  }

uint64_t sub_100042168(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if ([*(id *)(result + 120) podcastAppSelected])
    {
      NSLog(@"MusicPlayerPlay: podcastAppSelected, send MR Play to Podcasts");
      uint64_t v2 = @"com.apple.podcasts";
LABEL_9:
      MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(v2);
      BOOL v3 = v2;
LABEL_10:
      MRMediaRemoteSendCommandToApp(0LL, 0LL, 0LL, v3, 0LL, 0LL, 0LL);
      return sub_100041EC0(v1, 0LL);
    }

    if ([*(id *)(v1 + 120) iBooksAppSelected])
    {
      NSLog(@"MusicPlayerPlay: iBooksAppSelected, send MR Play to iBooks");
      uint64_t v2 = @"com.apple.iBooks";
      goto LABEL_9;
    }

    if ([*(id *)(v1 + 120) iTunesUAppSelected])
    {
      NSLog(@"MusicPlayerPlay: iTunesUAppSelected, send MR Play to iTunesU");
      uint64_t v2 = @"com.apple.itunesu";
      goto LABEL_9;
    }

    if ((sub_1000357C4() & 1) == 0)
    {
      NSLog(@"MusicPlayerPlay: No systemMusicPlayer. send MR Play instead");
      MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.Music");
      BOOL v3 = 0LL;
      goto LABEL_10;
    }

    NSLog(@"MusicPlayerPlay: systemMusicPlayer play");
    MRSystemAppPlaybackQueueInternalPrepareBundleIDForPlayback(@"com.apple.Music");
    id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (result)
    {
      dispatch_sync((dispatch_queue_t)result, &stru_100104A30);
      return sub_100041EC0(v1, 0LL);
    }
  }

  __break(0x5510u);
  return result;
}

void sub_10004229C(id a1)
{
}

uint64_t sub_1000422B8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if ((sub_1000357C4() & 1) == 0)
    {
      NSLog(@"MusicPlayerPause: No systemMusicPlayer. send MR Pause instead");
      MRMediaRemoteSendCommandToApp(1LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      return sub_100041EC0(v1, 1LL);
    }

    sub_1000CEA98( 6u,  @"%s:%d regular systemMusicPlayer pause",  "virtual void ISL::MediaPlayer::MusicPlayerPause()",  4909LL);
    id result = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
    if (result)
    {
      dispatch_sync((dispatch_queue_t)result, &stru_100104A50);
      return sub_100041EC0(v1, 1LL);
    }
  }

  __break(0x5510u);
  return result;
}

void sub_10004236C(id a1)
{
}

uint64_t sub_100042388(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if ((sub_1000357C4() & 1) != 0)
    {
      NSLog(@"MusicPlayerStop: systemMusicPlayer stop");
      objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer](MediaPlayerHelper, "sharedSystemMusicPlayer"),  "stop");
    }

    else
    {
      NSLog(@"MusicPlayerStop: No systemMusicPlayer. send MR Stop instead");
      MRMediaRemoteSendCommandToApp(3LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    }

    return sub_100041EC0(v1, 3LL);
  }

  return result;
}

void sub_100042410(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  uint64_t v7 = 0LL;
  unsigned int v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  int v10 = 2;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v3 = -[IAPStackshot startTimer:withInfo:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "startTimer:withInfo:",  @"MediaPlayer::GetPlaybackState",  3.0);
  if ((sub_1000357C4() & 1) == 0)
  {
    sub_1000CEA98( 0,  @"%s:%s:%d [[MPMusicPlayerController systemMusicPlayer] playbackState] unlikely to work with no systemMusicPlayer. Use media remote playback state instead",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "MusicPlayerState",  4944LL);
    unsigned int v5 = [*(id *)(a1 + 120) nowPlayingAppPlaybackState];
    *((_DWORD *)v8 + 6) = v5;
LABEL_7:
    -[IAPStackshot endTimer:]( +[IAPStackshot sharedInstance](&OBJC_CLASS___IAPStackshot, "sharedInstance"),  "endTimer:",  v3);

    if (*((_DWORD *)v8 + 6) < 4u)
    {
      _Block_object_dispose(&v7, 8);
      return;
    }

    goto LABEL_10;
  }

  uint64_t v4 = +[MediaPlayerHelper sharedSystemMusicPlayerQueue]( &OBJC_CLASS___MediaPlayerHelper,  "sharedSystemMusicPlayerQueue");
  if (v4)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100042584;
    block[3] = &unk_1001049B0;
    void block[4] = &v7;
    dispatch_sync(v4, block);
    goto LABEL_7;
  }

void sub_100042568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

char *sub_100042584(uint64_t a1)
{
  id result = (char *)objc_msgSend( +[MediaPlayerHelper sharedSystemMusicPlayer]( MediaPlayerHelper,  "sharedSystemMusicPlayer"),  "playbackState");
  else {
    int v3 = dword_1000DAE00[(void)(result - 1)];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v3;
  return result;
}

uint64_t sub_1000425DC(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_15;
  }
  if (!*(_BYTE *)(result + 395))
  {
    int v1 = byte_100119844;
    goto LABEL_14;
  }

  int v1 = byte_100119845;
  if (byte_100119845 >= 2u)
  {
LABEL_14:
    __break(0x550Au);
LABEL_15:
    __break(0x5516u);
    return result;
  }

void sub_10004266C(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = byte_100119844;
    if (byte_100119844 < 2u)
    {
      byte_100119845 = byte_100119844;
      *(_BYTE *)(a1 + 395) = a2;
      sub_1000CEA98( 7u,  @"%s:%s Just froze cloud tracks, __showCloudTracksSettingWhenSettingFrozen=%d, _cloudTracksSettingFrozen=%d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaPlayer.mm",  "FreezeCloudTracksHiddenSetting",  v2,  a2);
      return;
    }
  }

  __break(0x550Au);
}

id sub_1000426E0(id *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 setITunesUAppSelected:a3];
  }

  else
  {
    [a1[15] _resetFakeStreamTrackCount];
    [a1[15] setPodcastAppSelected:0];
    [a1[15] setIBooksAppSelected:0];
    return [a1[15] setITunesUAppSelected:0];
  }

id *sub_100042734(id *a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

id sub_100042748(id *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 _setFakeStreamTrackIndexForSetCurIndex:a3];
  }

  else
  {
    sub_1000CEA98( 7u,  @"MR: %s:%d index=%d, call _setFakeStreamTrackIndexForSetCurIndex",  "SetFakeStreamTrackIndexForSetCurIndex",  5007LL,  a2);
    return [a1[15] _setFakeStreamTrackIndexForSetCurIndex:a2];
  }

id sub_1000427AC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 _setFakeStreamTrackIndex:a3 fromPlay:a4];
  }

  else
  {
    sub_1000CEA98( 7u,  @"MR: %s:%d index=%d fromPlay=%d, call _setFakeStreamTrackIndex:fromPlay:",  "SetFakeStreamTrackIndex",  5014LL,  a2,  a3);
    return [a1[15] _setFakeStreamTrackIndex:a2 fromPlay:a3];
  }

uint64_t sub_100042824(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(void *)(result + 396) = -1LL;
  }
  return result;
}

id sub_100042844(id *a1)
{
  return [a1 notifyExplicitControlOccurred];
}

void sub_10004285C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || ((a1 + 16) & 7) != 0) {
    goto LABEL_22;
  }
  if (!*(void *)(a1 + 16)) {
    return;
  }
  if ((((_BYTE)a1 + 8) & 7) != 0
    || (uint64_t v2 = *(void *)a1) == 0
    || (v2 & 7) != 0
    || (uint64_t v3 = (void *)(v2 + 8), (v3 & 7) != 0)
    || (uint64_t v4 = *(uint64_t **)(a1 + 8)) == 0LL
    || (v4 & 7) != 0
    || (uint64_t v5 = *v4) == 0
    || (v5 & 7) != 0
    || ((v5 + 8) & 7) != 0
    || (*(void *)(v5 + 8) = *v3, (uint64_t v6 = (void *)*v3) == 0LL)
    || (v6 & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    return;
  }

  *uint64_t v6 = v5;
  *(void *)(a1 + 16) = 0LL;
  if (v4 != (uint64_t *)a1)
  {
    while (v4 && (v4 & 7) == 0 && (((_BYTE)v4 + 8) & 7) == 0)
    {
      uint64_t v7 = (uint64_t *)v4[1];
      sub_100042948(a1, v4);
      uint64_t v4 = v7;
    }

    goto LABEL_22;
  }

void sub_100042948(uint64_t a1, void *__p)
{
  if (!a1
    || (a1 & 7) != 0
    || (((_BYTE)a1 + 16) & 7) != 0
    || !__p
    || (__p & 7) != 0
    || (((_BYTE)__p + 16) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    operator delete(__p);
  }

uint64_t sub_100042984()
{
  qword_10011BD28 = sub_1000BC2D4(0LL, 3u, 0, "MP.nowPlayingInfoNotifyDelay");
  uint64_t result = sub_1000BC2D4(0LL, 3u, 0, "NP.nowPlayingInfoProcessDelay");
  qword_10011BD30 = result;
  return result;
}

uint64_t sub_100042A00(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (!result {
    || (result & 7) != 0
  }
    || (((_BYTE)result + 16) & 7) != 0
    || (memset(v8, 170, sizeof(v8)), result = sub_100024F14((uint64_t)v8, 1uLL), (uint64_t v7 = v8[2]) == 0)
    || (v8[2] & 7) != 0
    || (*(void *)v8[2] = a2, *(void *)(v7 + _Block_object_dispose(va, 8) = a3, (((_BYTE)v7 + 16) & 3) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(_DWORD *)(v7 + 16) = *a4;
    v8[2] = 0LL;
    sub_100024F54((uint64_t)v8);
    return v7;
  }

  return result;
}

uint64_t sub_100042AA0()
{
  qword_10011BCE8 = (uint64_t)&qword_10011BCE8;
  unk_10011BCF0 = &qword_10011BCE8;
  qword_10011BCF8 = 0LL;
  return __cxa_atexit((void (*)(void *))sub_100036D84, &qword_10011BCE8, (void *)&_mh_execute_header);
}

uint64_t sub_100042AC4()
{
  if (qword_10011BD50 != -1) {
    dispatch_once(&qword_10011BD50, &stru_100104AA0);
  }
  return qword_10011BD48;
}

void sub_100042B04(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x68uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100042B60(v1);
    qword_10011BD48 = v2;
  }

void sub_100042B4C(_Unwind_Exception *a1)
{
}

uint64_t sub_100042B60(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    *(void *)uint64_t v1 = off_100104AD0;
    *(_BYTE *)(v1 + 96) = 0;
    +[IAPServer sendAudioStateChangedNotification](&OBJC_CLASS___IAPServer, "sendAudioStateChangedNotification");
    return v1;
  }

  return result;
}

void sub_100042BB4(_Unwind_Exception *a1)
{
}

uint64_t sub_100042BCC(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_100042C3C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100042BCC(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100042C50(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100042BCC(a1);
    operator delete((void *)a1);
  }

void sub_100042C88(_Unwind_Exception *a1)
{
}

void sub_100042C9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(a1 + 96) = 1;
    sub_100042CBC(a1, a2, a3, 1u);
  }

void sub_100042CBC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (!a2)
    {
      NSLog( @"ERROR - %s:%s - %d need a port",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "SetVolumeMaster",  105LL);
      return;
    }

    __int128 v19 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    sub_1000CEA98( 8u,  @"%s - volume changing from %d to %d, notifyApp=%d",  "SetVolumeMaster",  dword_10011C880,  a3,  a4);
    int v9 = a3 - dword_10011C880;
    if (v9)
    {
      if ((_DWORD)a3) {
        dword_10011C884 = 0;
      }
      dword_10011C880 = a3;
      uint64_t v10 = sub_1000B6CE0();
      if (!v10 || (v10 & 7) != 0) {
        goto LABEL_22;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void))(*(void *)v10 + 48LL))( v10,  512LL,  0LL,  0LL,  0LL);
    }

    if (!a4) {
      goto LABEL_20;
    }
    uint64_t v11 = SBSSpringBoardServerPort(v8);
    SBSetMediaVolume(v11, (float)dword_10011C880 / 255.0);
    sub_1000CEA98(8u, @"%s - sending IAPAudioVolumeChangedNotification", "SetVolumeMaster");
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, IAPAudioVolumeChangedNotification, 0LL, 0LL, 0);
    uint64_t v13 = sub_1000BE638();
    if (v13 && (v13 & 7) == 0)
    {
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 104LL))(v13, a2);
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
        *(float *)&double v17 = (float)dword_10011C880 / 255.0;
        std::string v18 = +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v17);
        if ((v15 & 7) == 0)
        {
          [v16 updateValueFromIap:v18 forPort:kCFAccessoryPortLineOut andPortPorperty:kCFAccessoryPortPropertyVolumeScalar forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15)];
          goto LABEL_20;
        }

        goto LABEL_22;
      }

uint64_t sub_100042F04(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 88LL))( result,  a2,  a3,  0LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100042F24(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    pthread_once(&stru_1001198B8, (void (*)(void))sub_100042F60);
    return dword_10011C880;
  }

  return result;
}

void sub_100042F60(uint64_t a1)
{
  float v4 = 0.0;
  uint64_t v1 = SBSSpringBoardServerPort(a1);
  SBGetMediaVolume(v1, &v4);
  float v2 = v4 * 255.0;
  if ((float)(v4 * 255.0) > -1.0 && v2 < 4295000000.0)
  {
    dword_10011C880 = v2;
    sub_1000CEA98(8u, @"MediaVolumeMgr::InitVolumeOnce %d", v2);
  }

  else
  {
    __break(0x5505u);
  }

uint64_t sub_100042FD4(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (dword_10011C880)
    {
      uint64_t v2 = 0LL;
      dword_10011C884 = dword_10011C880;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 88LL))( result,  a2,  v2,  0LL);
    }

    uint64_t v2 = dword_10011C884;
    if (dword_10011C884) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 88LL))( result,  a2,  v2,  0LL);
    }
  }

  return result;
}

BOOL sub_100043020(BOOL result)
{
  if (result && !(result & 7)) {
    return dword_10011C880 == 0;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043044(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004305C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 255LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100043074(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    goto LABEL_17;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_17;
  }
  id v16 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  unsigned int v8 = a2[89];
  if (v8 >= 2) {
    goto LABEL_18;
  }
  if ((((v8 == 0) ^ a3) & 1) != 0)
  {
LABEL_16:

    return;
  }

  a2[89] = a3;
  uint64_t v9 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 208LL))(a2);
  sub_1000CEA98( 8u,  @"%s - setting legacy volume support %d, port=%hhx(%s)",  "SetLegacyVolumeSupport",  a3,  a2,  v9);
  uint64_t v10 = sub_1000BE638();
  if (!v10 || (v10 & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96LL))(v10, a4);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  id v13 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  uint64_t v14 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3);
  if ((v12 & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  [v13 updateValueFromIap:v14 forPort:kCFAccessoryPortLineOut andPortPorperty:kCFAccessoryPortPropertyVolumeControlIsSupported forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12)];
LABEL_12:
  sub_1000CEA98( 8u,  @"%s - sending IAPAudioVolumeControlSupportChangedNotification",  "SetLegacyVolumeSupport");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, IAPAudioVolumeControlSupportChangedNotification, 0LL, 0LL, 0);
  if (!(_DWORD)a3) {
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a1 + 96) <= 1u)
  {
    if (*(_BYTE *)(a1 + 96)) {
      sub_100042CBC(a1, (uint64_t)a2, dword_10011C880, 1u);
    }
    goto LABEL_16;
  }

BOOL sub_100043240(BOOL result, uint64_t a2)
{
  if (!result || result & 7) {
    goto LABEL_9;
  }
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      unsigned int v2 = *(unsigned __int8 *)(a2 + 89);
      if (v2 < 2) {
        return v2 != 0;
      }
      goto LABEL_10;
    }

void sub_1000432BC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!a3)
  {
    NSLog( @"ERROR - %s:%s - %d couldn't find transport for accID %hhx",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "SetVolumeControlSupported",  219LL,  0LL);
    goto LABEL_18;
  }

  unsigned int v6 = a3[88];
  if (v6 >= 2) {
    goto LABEL_20;
  }
  if ((((v6 == 0) ^ a2) & 1) != 0)
  {
LABEL_18:

    return;
  }

  a3[88] = a2;
  uint64_t v7 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a3 + 208LL))(a3);
  sub_1000CEA98( 8u,  @"%s - setting non-legacy volume support %d, port=%hhx(%s)",  "SetVolumeControlSupported",  a2,  a3,  v7);
  uint64_t v8 = sub_1000BE638();
  if (!v8 || (v8 & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 104LL))(v8, a3);
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = v9;
  id v11 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  uint64_t v12 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2);
  if ((v10 & 7) != 0)
  {
LABEL_19:
    __break(0x5516u);
    goto LABEL_20;
  }

  [v11 updateValueFromIap:v12 forPort:kCFAccessoryPortLineOut andPortPorperty:kCFAccessoryPortPropertyVolumeControlIsSupported forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10)];
LABEL_13:
  sub_1000CEA98( 8u,  @"%s - sending IAPAudioVolumeControlSupportChangedNotification",  "SetVolumeControlSupported");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, IAPAudioVolumeControlSupportChangedNotification, 0LL, 0LL, 0);
  if (!(_DWORD)a2) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(a1 + 96) <= 1u)
  {
    if (*(_BYTE *)(a1 + 96)) {
      sub_100042CBC(a1, (uint64_t)a3, dword_10011C880, 1u);
    }
    goto LABEL_18;
  }

BOOL sub_1000434BC(BOOL result, uint64_t a2)
{
  if (!result || result & 7) {
    goto LABEL_10;
  }
  if (a2)
  {
    if ((a2 & 7) == 0 && ((a2 + 88) & 7) == 0)
    {
      unsigned int v2 = *(unsigned __int8 *)(a2 + 88);
      if (v2 < 2) {
        return v2 != 0;
      }
      goto LABEL_11;
    }

void sub_100043544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (!a2) {
    goto LABEL_8;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_17;
  }
  if ((sub_100010620(a2) & 1) == 0)
  {
LABEL_8:
    NSLog( @"ERROR - %s:%s - %d can only set lineout on a specific port",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/MediaVolumeMgr.mm",  "SetLineoutEnabled",  266LL,  v10);
LABEL_16:

    return;
  }

  byte_10011C824 = a3;
  if (objc_msgSend( +[IAPGroupedCommandManager sharedManager]( IAPGroupedCommandManager,  "sharedManager"),  "isGrouping:",  a2))
  {
    objc_msgSend( +[IAPGroupedCommandManager sharedManager](IAPGroupedCommandManager, "sharedManager"),  "lineOutEnabled:onTransport:",  a3,  a2);
    goto LABEL_14;
  }

  +[IAPServer sendAudioStateChangedNotification](&OBJC_CLASS___IAPServer, "sendAudioStateChangedNotification");
  uint64_t v5 = sub_1000BE638();
  if (!v5 || (v5 & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 104LL))(v5, a2);
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = v6;
  id v8 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
  uint64_t v9 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3);
  if ((v7 & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  [v8 updateValueFromIap:v9 forPort:kCFAccessoryPortLineOut andPortPorperty:kCFAccessoryPortPropertyIsConnected forAccessory:(*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7)];
LABEL_14:
  if (byte_10011C824 <= 1u)
  {
    sub_1000CEA98( 9u,  @"MediaVolumeMgr::SetLineoutEnabled(%d) on port %hhx",  byte_10011C824,  a2);
    goto LABEL_16;
  }

BOOL sub_1000436EC(BOOL result, uint64_t a2)
{
  if (!result || result & 7) {
    goto LABEL_9;
  }
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      goto LABEL_10;
    }

void sub_100043770(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98(8u, @"MediaVolumeMgr::SetVolumeAsUninitialized");
    *(_BYTE *)(a1 + 96) = 0;
  }

void sub_1000437F0(id a1)
{
  qword_10011BD58 = objc_alloc_init(&OBJC_CLASS___PlatformHelper);
}

uint64_t sub_100043814(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = IOServiceMatching("IODPController");
    Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v3 = Mutable;
      CFDictionaryAddValue(Mutable, @"Location", @"External");
      CFDictionaryAddValue(v1, @"IOPropertyMatch", v3);
      CFRelease(v3);
    }

    return IOServiceGetMatchingService(kIOMasterPortDefault, v1);
  }

  return result;
}

uint64_t sub_1000438B8()
{
  if (qword_10011BD70 != -1) {
    dispatch_once(&qword_10011BD70, &stru_100104BE0);
  }
  return qword_10011BD68;
}

void sub_1000438F8(id a1)
{
  uint64_t v1 = operator new(0x60uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = (uint64_t)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100043954(v1);
    qword_10011BD68 = v2;
  }

void sub_100043940(_Unwind_Exception *a1)
{
}

void *sub_100043954(void *result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*uint64_t result = off_100104C10, ((unint64_t)(result + 1) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E64(result + 1);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 4), 0LL);
    return v1;
  }

  return result;
}

void sub_1000439BC(_Unwind_Exception *a1)
{
}

uint64_t sub_1000439D0(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100104C10,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_100043A40(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_1000439D0(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100043A54(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000439D0(a1);
    operator delete((void *)a1);
  }

void sub_100043A8C(_Unwind_Exception *a1)
{
}

uint64_t sub_100043AA0(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (pthread_mutex_lock((pthread_mutex_t *)(result + 32)), uint64_t result = v2 + 8, ((v2 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B8DC(result, &v3);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 32));
    return 1LL;
  }

  return result;
}

uint64_t sub_100043B04(uint64_t result, uint64_t a2)
{
  uint64_t v7 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (unint64_t v3 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        float v4 = (uint64_t *)(v2 + 8),
        ((v2 + 8) & 7) != 0)
    || (result = sub_10001BBF8(v2 + 8, &v7), uint64_t v5 = v2 + 16, (v5 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v6 = result;
    if (v5 != result) {
      sub_1000095C0(v4, result);
    }
    pthread_mutex_unlock(v3);
    return v5 != v6;
  }

  return result;
}

uint64_t sub_100043BA0(uint64_t result, uint64_t a2)
{
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (float v4 = (pthread_mutex_t *)(result + 32),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 32)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v2 + 8) & 7) != 0)
    || (v7 = *(void *)(v2 + 8), uint64_t v5 = v2 + 16, (v5 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v7 != v5)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_13;
      }
      (**(void (***)(uint64_t, uint64_t))result)(result, a2);
      sub_100008A4C(&v7);
    }

    return pthread_mutex_unlock(v4);
  }

  return result;
}

uint64_t sub_100043C60(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
    unsigned __int8 v3 = [v2 isEqualToString:@"iPad"];

    if ((v3 & 1) != 0)
    {
      unsigned int v4 = 23933;
    }

    else
    {
      unsigned int v4 = 23933;
      if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 160LL))(v1) & 1) == 0)
      {
        else {
          unsigned int v4 = 24445;
        }
      }
    }

    else {
      return v4;
    }
  }

  return result;
}

id sub_100043D18()
{
  uint64_t v0 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  id v1 = [v0 isEqualToString:@"iPad"];

  return v1;
}

uint64_t sub_100043D5C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043D74(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043D8C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043DA4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043DBC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 176LL))(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043DD8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 88LL))(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043DF4(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100043E7C;
    block[3] = &unk_100101CB8;
    void block[4] = result;
    if (qword_10011BD78 != -1) {
      dispatch_once(&qword_10011BD78, block);
    }
    return byte_10011BD80 & 1;
  }

  return result;
}

uint64_t sub_100043E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 160LL))(v1);
  if ((result & 1) != 0 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 168LL))(v1), (_DWORD)result))
  {
    byte_10011BD80 = 0;
  }

  else
  {
    io_object_t v3 = sub_100043814(v1);
    byte_10011BD80 = v3 != 0;
    return IOObjectRelease(v3);
  }

  return result;
}

uint64_t sub_100043EEC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F04(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F1C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F34(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F4C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F64(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return MGGetBoolAnswer(@"DeviceSupports9Pin");
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F80(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100043F9C()
{
  uint64_t v0 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  unsigned __int8 v1 = [v0 isEqualToString:@"Watch"];

  if ((v1 & 1) != 0) {
    return 4LL;
  }
  io_object_t v3 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  unsigned __int8 v4 = [v3 isEqualToString:@"iPod"];

  if ((v4 & 1) != 0) {
    return 2LL;
  }
  uint64_t v5 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  unsigned __int8 v6 = [v5 isEqualToString:@"iPad"];

  if ((v6 & 1) != 0) {
    return 3LL;
  }
  uint64_t v7 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  unsigned __int8 v8 = [v7 isEqualToString:@"iPhone"];

  if ((v8 & 1) != 0) {
    return 1LL;
  }
  uint64_t v9 = (void *)MGCopyAnswer(@"DeviceClass", 0LL);
  unsigned int v10 = [v9 isEqualToString:@"AppleTV"];

  if (v10) {
    return 5LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000440B8()
{
  return MGGetBoolAnswer(@"hidpi");
}

uint64_t sub_1000440C4(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else if (((*(uint64_t (**)(uint64_t))(*(void *)result + 160LL))(result) & 1) != 0)
  {
    return 0LL;
  }

  else
  {
    return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 168LL))(v1) ^ 1;
  }

  return result;
}

uint64_t sub_100044120(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044138(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 160LL))(result);
  if ((result & 1) == 0)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 168LL))(v2);
    if (!(_DWORD)result) {
      return 1LL;
    }
  }

  if (!a2 || (a2 & 7) != 0) {
LABEL_11:
  }
    __break(0x5516u);
  else {
    return ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 272LL))(a2) & 1) != 0
  }
        || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 216LL))(a2) == 1;
  return result;
}

uint64_t sub_1000441D4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000441EC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044204(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004421C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044234(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004424C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return MGGetBoolAnswer(@"telephony");
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044268(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return MGGetBoolAnswer(@"bluetooth");
  }
  __break(0x5516u);
  return result;
}

id sub_100044284(id result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    return [result supportsUltraHighPowerMode];
  }

  uint64_t result = objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2);
  if (result) {
    return [result supportsUltraHighPowerMode];
  }
  return result;
}

id sub_1000442CC(id result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    return [result supportsPowerModeOnAcrossSleep];
  }

  uint64_t result = objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2);
  if (result) {
    return [result supportsPowerModeOnAcrossSleep];
  }
  return result;
}

uint64_t sub_100044314(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return MGGetBoolAnswer(@"assistant");
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044330(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100044348()
{
  uint64_t v0 = qword_10011BD88;
  if (qword_10011BD88) {
    goto LABEL_4;
  }
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v2 = objc_msgSend( objc_msgSend( objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", @"Media"),  "stringByAppendingPathComponent:",  @"iTunes_Control"),  "stringByAppendingPathComponent:",  @"Device");
  io_object_t v3 = (char *)[v2 lengthOfBytesUsingEncoding:4];
  unsigned __int8 v4 = v3 + 1;
  if (v3 != (char *)-1LL)
  {
    qword_10011BD88 = (uint64_t)malloc((size_t)(v3 + 1));
    [v2 getCString:qword_10011BD88 maxLength:v4 encoding:4];

    uint64_t v0 = qword_10011BD88;
LABEL_4:
    qword_10011C888 = v0;
    return;
  }

  __break(0x5500u);
}

CFIndex sub_1000443F4()
{
  return CFPreferencesGetAppIntegerValue(@"ChargingPowerBehavior", @"com.apple.iapd", 0LL);
}

CFIndex sub_10004441C()
{
  return CFPreferencesGetAppIntegerValue(@"PretendBatteryLevel", @"com.apple.iapd", 0LL);
}

void sub_100044444( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _WORD *a9)
{
  AppIntegerint Value = CFPreferencesGetAppIntegerValue(@"PretendAccessoryType", @"com.apple.iapd", 0LL);
  CFIndex v17 = CFPreferencesGetAppIntegerValue(@"PretendAccessoryType", @"com.apple.iapd", 0LL);
  if ((_DWORD)v17 == 1)
  {
    uint64_t v19 = 1LL;
    uint64_t v18 = a8;
  }

  else
  {
    uint64_t v18 = a8;
    if ((_DWORD)v17 != 2) {
      goto LABEL_6;
    }
    CFIndex v17 = 0LL;
    uint64_t v19 = 0LL;
  }

  sub_1000CEA98( 0,  @"RequiresChargingCurrentLimit: pretendAccessoryType=%d, override isApple=%d -> %d",  AppIntegerValue,  v17,  a5);
  a5 = v19;
LABEL_6:
  v70[0] = @"productTypeContain";
  v70[1] = @"productTypeEqualGreater";
  v71[0] = @"iPhone";
  v71[1] = @"iPhone10,1";
  v70[2] = @"nameMatch";
  v70[3] = @"modelMatch";
  v71[2] = @"BMW NBT";
  void v71[3] = @"B069 C2";
  v70[4] = @"manufacturerMatch";
  v70[5] = @"overrideCurrentLimit";
  v71[4] = @"HarmanBecker";
  v71[5] = &off_100111DD0;
  uint64_t v72 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v71,  v70,  6LL);
  obunsigned int j = +[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v72, 1LL);
  CFIndex v56 = CFPreferencesGetAppIntegerValue(@"ChargingPowerOverride", @"com.apple.iapd", 0LL);
  CFIndex v20 = CFPreferencesGetAppIntegerValue(@"ChargingPowerBehavior", @"com.apple.iapd", 0LL);
  int v21 = CFPreferencesGetAppIntegerValue(@"PretendBatteryLevel", @"com.apple.iapd", 0LL);
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = 0LL;
    uint64_t v22 = v18;
LABEL_101:
    id v28 = a9;
    goto LABEL_102;
  }

  if (v21 <= 0) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v21;
  }
  if ((v20 - 3) < 6)
  {
    uint64_t v23 = (10 * v20 - 5);
LABEL_12:
    unsigned int v24 = 1;
    goto LABEL_13;
  }

  uint64_t v23 = 45LL;
  if ((_DWORD)v20 != 1)
  {
    if ((_DWORD)v20 == 2) {
      uint64_t v23 = 45LL;
    }
    goto LABEL_12;
  }

  unsigned int v24 = 0;
LABEL_13:
  uint64_t v55 = v23;
  NSLog( @"RequiresChargingCurrentLimit: isApple=%d deviceType=%d checkChargingCurrentLimit=%d chargingCurrentLimit=%d inLimit =%d behavior=%d batteryThreshold=%d",  a5,  a6,  v24,  v56,  a7,  v20,  v23);
  unint64_t v25 = 0LL;
  if (!v24)
  {
    id v28 = a9;
    uint64_t v18 = a8;
    goto LABEL_102;
  }

  BOOL v27 = (int)v56 > 0 && (int)v56 < (int)a7;
  if ((v56 & 0x80000000) != 0 || v27)
  {
    id v28 = a9;
    unsigned int v50 = v56;
    uint64_t v18 = a8;
    goto LABEL_81;
  }

  uint64_t v18 = a8;
  if (!a2 && !a3 && !a4)
  {
    unint64_t v25 = 0LL;
    goto LABEL_101;
  }

  if (!a2)
  {
    int v64 = 0LL;
    if (a3) {
      goto LABEL_27;
    }
LABEL_29:
    std::string v63 = 0LL;
    goto LABEL_30;
  }

  int v64 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2);
  if (!a3) {
    goto LABEL_29;
  }
LABEL_27:
  std::string v63 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a3);
LABEL_30:
  id v28 = a9;
  if (a4) {
    uint64_t v62 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a4);
  }
  else {
    uint64_t v62 = 0LL;
  }
  id v29 = (id)v56;
  unint64_t v60 = (void *)MGCopyAnswer(@"ProductType", 0LL);
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  id v59 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v65,  v69,  16LL);
  if (!v59) {
    goto LABEL_64;
  }
  uint64_t v53 = v22;
  uint64_t v54 = a8;
  uint64_t v58 = *(void *)v66;
  while (2)
  {
    for (uint64_t i = 0LL; i != v59; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v66 != v58) {
        objc_enumerationMutation(obj);
      }
      uint64_t v31 = *(void **)(*((void *)&v65 + 1) + 8LL * (void)i);
      unint64_t v32 = (unint64_t)[v31 objectForKey:@"nameMatch"];
      unint64_t v33 = (unint64_t)[v31 objectForKey:@"nameContain"];
      BOOL v34 = (v32 | v33) == 0;
      if (v64)
      {
        if (v32)
        {
          unsigned int v35 = -[NSString isEqualToString:](v64, "isEqualToString:", v32);
        }

        else
        {
          if (!v33) {
            goto LABEL_44;
          }
          unsigned int v35 = -[NSString containsString:](v64, "containsString:", v33);
        }

        BOOL v34 = v35;
      }

LABEL_87:
    goto LABEL_88;
  }

  if (!HIWORD(v50))
  {
    if ((v28 & 1) == 0)
    {
      *id v28 = v50;
      BOOL v51 = 1;
      BOOL v27 = 1;
      goto LABEL_86;
    }

  __break(0x5516u);
}

            __break(0x5512u);
            goto LABEL_88;
          }

            sub_1000C3D60(a1);
          }

          return;
        case 2u:
          if ((((_BYTE)a4 + 16) & 7) != 0 || ((a4 + 20) & 3) != 0) {
            goto LABEL_142;
          }
          int v21 = *(_DWORD *)(a4 + 20);
          if (v21 > 3) {
            goto LABEL_143;
          }
          if (v21 == 2)
          {
            if (((a4 + 24) & 7) != 0) {
              goto LABEL_142;
            }
            *(void *)(a1 + 16_Block_object_dispose(va, 8) = *(void *)(a4 + 24);
            *(_BYTE *)(a1 + 160) = 1;
            sub_1000C40B0((_DWORD *)a1);
          }

          else
          {
            if (v21 != 1)
            {
              if (v21) {
                return;
              }
              if ((((_BYTE)a4 + 24) & 7) == 0 && (((_BYTE)a4 + 32) & 7) == 0)
              {
                *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a4 + 32);
                if (((a4 + 40) & 7) == 0)
                {
                  *(void *)(a1 + 136) = *(void *)(a4 + 40);
                  *(_BYTE *)(a1 + 1memset(md, 170, 20) = 1;
                  goto LABEL_87;
                }
              }

              goto LABEL_142;
            }

            if (((a4 + 24) & 7) != 0) {
              goto LABEL_142;
            }
            *(void *)(a1 + 152) = *(void *)(a4 + 24);
            *(_BYTE *)(a1 + 144) = 1;
            sub_1000C4050((_DWORD *)a1);
          }

          goto LABEL_87;
        case 4u:
          if ((((_BYTE)a4 + 16) & 7) != 0 || ((a4 + 20) & 3) != 0) {
            goto LABEL_142;
          }
          uint64_t v22 = *(_DWORD *)(a4 + 20);
          if (v22 > 3) {
            goto LABEL_143;
          }
          if (v22 == 2)
          {
            if (((a4 + 24) & 7) != 0) {
              goto LABEL_142;
            }
            *(void *)(a1 + 216) = *(void *)(a4 + 24);
            *(_BYTE *)(a1 + 20_Block_object_dispose(va, 8) = 1;
            unint64_t v25 = *(_DWORD *)(a1 + 116);
            if (v25 <= 7)
            {
              if (v25 == 2) {
                sub_1000C4190(a1);
              }
              uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
              goto LABEL_141;
            }

            goto LABEL_143;
          }

          if (v22 == 1)
          {
            if (((a4 + 24) & 7) != 0) {
              goto LABEL_142;
            }
            *(void *)(a1 + 200) = *(void *)(a4 + 24);
            *(_BYTE *)(a1 + 192) = 1;
            uint64_t v26 = *(_DWORD *)(a1 + 116);
            if (v26 <= 7)
            {
              if (v26 == 2) {
                sub_1000C4190(a1);
              }
              uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
              goto LABEL_141;
            }

            goto LABEL_143;
          }

          if (v22) {
            return;
          }
          if (((a4 + 24) & 7) != 0) {
            goto LABEL_142;
          }
          *(void *)(a1 + 184) = *(void *)(a4 + 24);
          *(_BYTE *)(a1 + 176) = 1;
          uint64_t v23 = *(_DWORD *)(a1 + 116);
          if (v23 > 7) {
            goto LABEL_143;
          }
          if (v23 == 2) {
            sub_1000C4190(a1);
          }
          (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 32LL))( a1,  983044LL,  *(unsigned int *)(a1 + 112),  0LL);
          uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
          goto LABEL_141;
        case 7u:
        case 9u:
          if ((((_BYTE)a4 + 16) & 7) != 0 || (((_DWORD)a4 + 18) & 1) != 0) {
            goto LABEL_142;
          }
          uint64_t v7 = *(_DWORD *)(a4 + 18);
          if (v7 > 3) {
            goto LABEL_143;
          }
          if (v7 == 2)
          {
            if ((((_DWORD)a4 + 22) & 1) != 0) {
              goto LABEL_142;
            }
            unsigned int v24 = *(_DWORD *)(a4 + 22);
            if (v24 <= 0xFF)
            {
              switch(v24)
              {
                case 0u:
                  if ((((_DWORD)a4 + 26) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if (((a1 + 264) & 7) != 0) {
                    goto LABEL_142;
                  }
                  *(_WORD *)(a1 + 264) = *(_WORD *)(a4 + 26);
                  if ((((_DWORD)a4 + 28) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if (((a1 + 268) & 3) != 0) {
                    goto LABEL_142;
                  }
                  *(_DWORD *)(a1 + 26_Block_object_dispose(va, 8) = *(_DWORD *)(a4 + 28);
                  if ((((_DWORD)a4 + 32) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if (((a1 + 272) & 7) != 0) {
                    goto LABEL_142;
                  }
                  *(double *)(a1 + 272) = (double)*(int *)(a4 + 32) / 1000000.0;
                  if ((((_DWORD)a4 + 36) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if (((a1 + 280) & 7) != 0) {
                    goto LABEL_142;
                  }
                  *(double *)(a1 + 280) = (double)*(int *)(a4 + 36) / 1000000.0;
                  if ((((_DWORD)a4 + 40) & 1) != 0 || (((_BYTE)a1 + 32) & 7) != 0) {
                    goto LABEL_142;
                  }
                  *(_WORD *)(a1 + 28_Block_object_dispose(va, 8) = *(_WORD *)(a4 + 40);
                  *(_BYTE *)(a1 + 260) = 1;
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  goto LABEL_141;
                case 1u:
                  unsigned int v35 = (const void **)(a4 + 26);
                  if ((((_DWORD)a4 + 26) & 1) != 0) {
                    goto LABEL_142;
                  }
                  unint64_t v36 = (unsigned int *)(a4 + 34);
                  if ((((_DWORD)a4 + 34) & 1) != 0) {
                    goto LABEL_142;
                  }
                  unint64_t v37 = *v36;
                  BOOL v38 = *(_DWORD *)(a1 + 320);
                  unsigned int v39 = malloc(*v36);
                  if (!v39) {
                    goto LABEL_118;
                  }
                  if ((((_BYTE)a1 + 56) & 7) != 0) {
                    goto LABEL_142;
                  }
                  unint64_t v40 = *(void **)(a1 + 312);
                  *(void *)(a1 + 312) = v39;
                  *(_DWORD *)(a1 + 3memset(md, 170, 20) = v37;
                  free(v40);
                  BOOL v38 = *(_DWORD *)(a1 + 320);
LABEL_118:
                  if ((((_BYTE)a1 + 48) & 7) != 0) {
                    goto LABEL_142;
                  }
                  *(_DWORD *)(a1 + 304) = v37;
                  if ((((_BYTE)a1 + 56) & 7) != 0) {
                    goto LABEL_142;
                  }
                  memcpy(*(void **)(a1 + 312), *v35, v37);
                  *(_BYTE *)(a1 + 296) = 1;
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  break;
                case 2u:
                  unint64_t v41 = (const void **)(a4 + 26);
                  if ((((_DWORD)a4 + 26) & 1) != 0) {
                    goto LABEL_142;
                  }
                  BOOL v42 = (unsigned int *)(a4 + 34);
                  if ((((_DWORD)a4 + 34) & 1) != 0) {
                    goto LABEL_142;
                  }
                  unsigned int v43 = *v42;
                  BOOL v44 = *(_DWORD *)(a1 + 336);
                  if (v43 > v44)
                  {
                    unsigned int v45 = malloc(*v42);
                    if (v45)
                    {
                      char v46 = *(void **)(a1 + 328);
                      *(void *)(a1 + 32_Block_object_dispose(va, 8) = v45;
                      *(_DWORD *)(a1 + 336) = v43;
                      free(v46);
                      BOOL v44 = *(_DWORD *)(a1 + 336);
                    }
                  }

                  memcpy(*(void **)(a1 + 328), *v41, v43);
                  *(_BYTE *)(a1 + 324) = 1;
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  goto LABEL_141;
                case 3u:
                  BOOL v47 = (_DWORD *)(a4 + 26);
                  if ((((_DWORD)a4 + 26) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if ((((_DWORD)a1 + 342) & 1) != 0) {
                    goto LABEL_142;
                  }
                  *(_WORD *)(a1 + 342) = *v47 / 0x36EE80u - 24 * ((2731 * (*v47 / 0x36EE80u)) >> 16);
                  if ((((_DWORD)a1 + 344) & 1) != 0) {
                    goto LABEL_142;
                  }
                  *(_BYTE *)(a1 + 344) = *v47 / 0xEA60u - 60 * ((71582789 * (unint64_t)(*v47 / 0xEA60u)) >> 32);
                  *(_BYTE *)(a1 + 345) = *v47 / 0x3E8u - 60 * ((71582789 * (unint64_t)(*v47 / 0x3E8u)) >> 32);
                  *(_BYTE *)(a1 + 340) = 1;
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  goto LABEL_141;
                case 4u:
                  char v48 = (_DWORD *)(a4 + 26);
                  if ((((_DWORD)a4 + 26) & 1) != 0) {
                    goto LABEL_142;
                  }
                  if ((((_BYTE)a1 + 92) & 3) != 0) {
                    goto LABEL_142;
                  }
                  *(_WORD *)(a1 + 34_Block_object_dispose(va, 8) = *v48 / 0x36EE80u - 24 * ((2731 * (*v48 / 0x36EE80u)) >> 16);
                  if ((((_DWORD)a1 + 350) & 1) != 0) {
                    goto LABEL_142;
                  }
                  *(_BYTE *)(a1 + 350) = *v48 / 0xEA60u - 60 * ((71582789 * (unint64_t)(*v48 / 0xEA60u)) >> 32);
                  *(_BYTE *)(a1 + 351) = *v48 / 0x3E8u - 60 * ((71582789 * (unint64_t)(*v48 / 0x3E8u)) >> 32);
                  *(_BYTE *)(a1 + 346) = 1;
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  goto LABEL_141;
                case 5u:
                  uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
                  goto LABEL_141;
                default:
                  return;
              }

              goto LABEL_141;
            }

            goto LABEL_143;
          }

          if (v7 != 1) {
            return;
          }
          if ((((_DWORD)a4 + 22) & 1) != 0) {
            goto LABEL_142;
          }
          unsigned __int8 v8 = *(_DWORD *)(a4 + 22);
          if (v8 > 0xFF) {
            goto LABEL_143;
          }
          if (v8 != 128)
          {
            if (v8) {
              return;
            }
            uint64_t v9 = (const void **)(a4 + 26);
            if ((((_DWORD)a4 + 26) & 1) != 0) {
              goto LABEL_142;
            }
            unsigned int v10 = (unsigned int *)(a4 + 34);
            if ((((_DWORD)a4 + 34) & 1) != 0) {
              goto LABEL_142;
            }
            id v11 = *v10;
            uint64_t v12 = *(_DWORD *)(a1 + 240);
            if (v11 > v12)
            {
              id v13 = malloc(*v10);
              if (v13)
              {
                uint64_t v14 = *(void **)(a1 + 232);
                *(void *)(a1 + 232) = v13;
                *(_DWORD *)(a1 + 240) = v11;
                free(v14);
                uint64_t v12 = *(_DWORD *)(a1 + 240);
              }
            }

            if (v11 <= v12 && *v9)
            {
              memcpy(*(void **)(a1 + 232), *v9, v11);
              *(_BYTE *)(a1 + 224) = 1;
              uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
LABEL_141:
              v15();
              return;
            }

            return;
          }

          BOOL v27 = (const void *)(a4 + 26);
          if ((((_DWORD)a4 + 26) & 1) != 0) {
            goto LABEL_142;
          }
          id v28 = *(unsigned int *)(a4 + 109);
          id v29 = v28 + 1;
          if ((_DWORD)v28 == -1) {
            goto LABEL_144;
          }
          if (v29 > *(_DWORD *)(a1 + 256))
          {
            unsigned int v30 = malloc((v28 + 1));
            if (v30)
            {
              uint64_t v31 = *(void **)(a1 + 248);
              *(void *)(a1 + 24_Block_object_dispose(va, 8) = v30;
              *(_DWORD *)(a1 + 256) = v29;
              free(v31);
            }
          }

          if (v29 > *(_DWORD *)(a1 + 240)) {
            return;
          }
          memcpy(*(void **)(a1 + 248), v27, v28);
          unint64_t v32 = *(void *)(a1 + 248);
          if (__CFADD__(v32, v28)) {
            goto LABEL_145;
          }
          if (v32)
          {
            *(_BYTE *)(v32 + v2_Block_object_dispose(va, 8) = 0;
            *(_BYTE *)(a1 + 244) = 1;
            uint64_t v15 = *(void (**)(void))(*(void *)a1 + 32LL);
            goto LABEL_141;
          }

          break;
        default:
          return;
      }
    }

    goto LABEL_142;
  }

  if (!a4 || a3 || a5 != 48) {
    return;
  }
  if ((a4 & 7) != 0)
  {
LABEL_142:
    __break(0x5516u);
    goto LABEL_143;
  }

  if (*(_DWORD *)a4 <= 0x1Fu)
  {
    id v16 = *(_DWORD *)a4 - 1;
    if (v16 <= 0xC && ((0x153Fu >> v16) & 1) != 0) {
      sub_1000C3F84(a1, (0xEC0u >> v16) & 1);
    }
    return;
  }

LABEL_104:
    __break(0x5516u);
  }

  __break(0x5507u);
}

              __break(0x5507u);
            }

BOOL sub_100044B38( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v7 = (a2 | a3 | a4 | a5 | a6 | a7) == 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v7 = (uint64_t)[a1 isEqualToString:a2];
      goto LABEL_4;
    }

    if (!a3)
    {
LABEL_4:
      if (a4)
      {
        id v13 = [a1 length];
        if (v13 == [(id)a4 length])
        {
          BOOL v14 = (unint64_t)[a1 compare:a4] + 1 >= 2;
        }

        else
        {
          id v15 = [a1 length];
          BOOL v14 = v15 >= [(id)a4 length];
        }

        uint64_t v7 = !v14;
      }

      if (a5)
      {
        id v16 = [a1 length];
        if (v16 != [(id)a5 length])
        {
          id v17 = [a1 length];
          uint64_t v7 = v17 < [(id)a5 length];
          if (!a6) {
            goto LABEL_25;
          }
LABEL_23:
          id v18 = [a1 length];
          if (v18 != [(id)a6 length])
          {
            id v19 = [a1 length];
            uint64_t v7 = v19 > [(id)a6 length];
            if (!a7) {
              return v7;
            }
            goto LABEL_28;
          }

          uint64_t v7 = (unint64_t)[a1 compare:a6] < 2;
LABEL_25:
          if (!a7) {
            return v7;
          }
LABEL_28:
          id v20 = [a1 length];
          if (v20 == [(id)a7 length]) {
            return [a1 compare:a7] == (id)1;
          }
          id v21 = [a1 length];
          return v21 > [(id)a7 length];
        }

        uint64_t v7 = [a1 compare:a5] == (id)-1;
      }

      if (!a6) {
        goto LABEL_25;
      }
      goto LABEL_23;
    }

    uint64_t v7 = (uint64_t)objc_msgSend(a1, "containsString:");
    if (a4 || a5 || a6 || a7)
    {
      uint64_t v7 = v7 & sub_100044B38(a1, 0LL, 0LL, a4, a5, a6, a7);
      goto LABEL_4;
    }
  }

  return v7;
}

uint64_t sub_100044D4C(unsigned int a1)
{
  uint64_t result = (uint64_t)operator new(0x18uLL);
  if ((result & 0xF) != 0 || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100044DAC(result, a1);
    return v3;
  }

  return result;
}

void sub_100044D98(_Unwind_Exception *a1)
{
}

uint64_t sub_100044DAC(uint64_t result, unsigned int a2)
{
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  *(void *)uint64_t result = off_100104D58;
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  *(void *)(result + 14) = 0LL;
  unsigned __int8 v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a2 == -1) {
    goto LABEL_20;
  }
  uint64_t v5 = +[MPMediaQuery playlistsQuery](&OBJC_CLASS___MPMediaQuery, "playlistsQuery");
  if (!v5) {
    goto LABEL_20;
  }
  unsigned __int8 v6 = -[MPMediaQuery collections](v5, "collections");
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = v6;
  uint64_t v8 = sub_10002E834();
  unsigned int v9 = -[NSArray count](v7, "count");
  if (v9 > a2)
  {
    id v10 = -[NSArray objectAtIndex:](v7, "objectAtIndex:", a2);
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = objc_opt_class(&OBJC_CLASS___MPMediaPlaylist);
      if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0) {
        *(void *)(v2 + _Block_object_dispose(va, 8) = v11;
      }
    }

    goto LABEL_20;
  }

  if (!dword_1001197C8)
  {
LABEL_20:

    return v2;
  }

  uint64_t result = (uint64_t)objc_msgSend( +[MPRadioLibrary defaultRadioLibrary](MPRadioLibrary, "defaultRadioLibrary"),  "stationCount");
  if (!v8 || (v8 & 7) != 0)
  {
LABEL_21:
    __break(0x5516u);
LABEL_22:
    __break(0x5500u);
    goto LABEL_23;
  }

  int v13 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 632LL))(v8);
  unsigned int v14 = v9 + v13;
  if (__CFADD__(v9, v13)) {
    goto LABEL_22;
  }
  if (v14 > a2)
  {
    *(_BYTE *)(v2 + 21) = 1;
    *(_DWORD *)(v2 + 16) = 0;
    goto LABEL_20;
  }

  BOOL v15 = __CFADD__(v14, (_DWORD)result);
  unsigned int v16 = v14 + result;
  if (v15) {
    goto LABEL_22;
  }
  if (v16 <= a2) {
    goto LABEL_20;
  }
  *(_BYTE *)(v2 + memset(md, 170, 20) = 1;
  if (!v13)
  {
    *(_DWORD *)(v2 + 16) = 0;
    goto LABEL_20;
  }

uint64_t sub_100044F2C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100104D58;

    *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
    return v1;
  }

  return result;
}

uint64_t sub_100044F74(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100044F2C(result);
  }
  __break(0x5516u);
  return result;
}

void sub_100044F88(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100044F2C(a1);
    operator delete((void *)a1);
  }

void sub_100044FC0(_Unwind_Exception *a1)
{
}

BOOL sub_100044FD4(BOOL result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8) != 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100044FF4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (objc_msgSend( objc_msgSend( *(id *)(result + 8),  "valueForProperty:",  MPMediaPlaylistPropertyPlaylistAttributes),  "intValue") >> 2) & 1;
  }
  __break(0x5516u);
  return result;
}

BOOL sub_100045030(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 20);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

BOOL sub_10004505C(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 21);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100045088(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000450A0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000450B8(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_7;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    return result;
  }

  if (*(void *)a2)
  {
    **(_BYTE **)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
LABEL_7:
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_1000450F0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045108(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045120(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045138(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045150(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045168(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045180(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100045198(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000451B0()
{
  if (qword_10011BD98 != -1) {
    dispatch_once(&qword_10011BD98, &stru_100104DF8);
  }
  return qword_10011BD90;
}

void sub_1000451F0(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0xC8uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004524C(v1);
    qword_10011BD90 = v2;
  }

void sub_100045238(_Unwind_Exception *a1)
{
}

uint64_t sub_10004524C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = (void *)result, (result & 7) != 0)
    || (result = sub_10001B6E4(result), void *v1 = off_100104E28, ((unint64_t)(v1 + 12) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E64(v1 + 12);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 15), 0LL);
    if ((byte_10011BDA0 & 1) == 0)
    {
      v1[23] = IONotificationPortCreate(kIOMasterPortDefault);
      Main = CFRunLoopGetMain();
      CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource((IONotificationPortRef)v1[23]);
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver( DarwinNotifyCenter,  v1,  (CFNotificationCallback)sub_1000453DC,  @"com.apple.iapd.LoggingPreferencesChangedNotification",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
      uint64_t v5 = (IONotificationPort *)v1[23];
      unsigned __int8 v6 = IOServiceMatching("IOPMPowerSource");
      IOServiceAddMatchingNotification( v5,  "IOServiceFirstMatch",  v6,  (IOServiceMatchingCallback)sub_1000453F0,  v1 + 23,  (io_iterator_t *)v1 + 48);
      sub_1000453F0((IONotificationPort **)v1 + 23, *((_DWORD *)v1 + 48));
      byte_10011BDA0 = 1;
      uint64_t v7 = 176LL;
      if ((byte_10011BDA1 & 1) == 0) {
        uint64_t v7 = 184LL;
      }
      (*(void (**)(void *, void))(*v1 + v7))(v1, 0LL);
    }

    return (uint64_t)v1;
  }

  return result;
}

void sub_1000453B4(_Unwind_Exception *a1)
{
}

void sub_1000453DC()
{
}

IONotificationPort **sub_1000453F0(IONotificationPort **result, io_iterator_t iterator)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = *result;
    io_object_t notification = -1431655766;
    uint64_t result = (IONotificationPort **)IOIteratorNext(iterator);
    if ((_DWORD)result)
    {
      io_registry_entry_t v4 = result;
      do
      {
        sub_100046E0C(v4);
        IOServiceAddInterestNotification( v3,  v4,  "IOGeneralInterest",  (IOServiceInterestCallback)sub_1000471B4,  0LL,  &notification);
        IOObjectRelease(v4);
        uint64_t result = (IONotificationPort **)IOIteratorNext(iterator);
        io_registry_entry_t v4 = result;
      }

      while ((_DWORD)result);
    }
  }

  return result;
}

uint64_t sub_10004549C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10004550C(uint64_t result)
{
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_7;
  }
  *(void *)uint64_t result = off_100104E28;
  if (byte_10011BDA0 == 1)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  (const void *)v1,  @"com.apple.iapd.LoggingPreferencesChangedNotification",  0LL);
    Main = CFRunLoopGetMain();
    CFRunLoopSourceRef RunLoopSource = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 184));
    CFRunLoopRemoveSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 184));
  }

  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 120));
  uint64_t result = v1 + 96;
  if (((v1 + 96) & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return sub_10004549C(v1);
  }

  return result;
}

uint64_t sub_1000455E0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10004550C(result);
  }
  __break(0x5516u);
  return result;
}

void sub_1000455F4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004550C(a1);
    operator delete((void *)a1);
  }

void sub_10004562C(_Unwind_Exception *a1)
{
}

uint64_t sub_100045640(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (pthread_mutex_lock((pthread_mutex_t *)(result + 120)), uint64_t result = v2 + 96, ((v2 + 96) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B8DC(result, &v3);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 120));
    return 1LL;
  }

  return result;
}

uint64_t sub_1000456A4(uint64_t result, uint64_t a2)
{
  uint64_t v7 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (unint64_t v3 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        io_registry_entry_t v4 = (uint64_t *)(v2 + 96),
        ((v2 + 96) & 7) != 0)
    || (result = sub_10001BBF8(v2 + 96, &v7), uint64_t v5 = v2 + 104, (v5 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v6 = result;
    if (v5 != result) {
      sub_1000095C0(v4, result);
    }
    pthread_mutex_unlock(v3);
    return v5 != v6;
  }

  return result;
}

uint64_t sub_100045740(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t v2 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v8 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v1 + 96) & 7) != 0)
    || (v3 = *(void *)(v1 + 96), uint64_t v8 = v3, v4 = v1 + 104, ((v1 + 104) & 7) != 0))
  {
LABEL_19:
    __break(0x5516u);
    return result;
  }

  if (v3 != v4)
  {
    while (1)
    {
      uint64_t result = *sub_100008AFC(&v8);
      if (!result || (result & 7) != 0) {
        goto LABEL_19;
      }
      uint64_t v6 = (**(uint64_t (***)(uint64_t, void))result)(result, 0LL);
      sub_100008A4C(&v8);
      if ((_DWORD)v6) {
        BOOL v7 = v8 == v4;
      }
      else {
        BOOL v7 = 1;
      }
      if (v7) {
        goto LABEL_18;
      }
    }
  }

  uint64_t v6 = 1LL;
LABEL_18:
  pthread_mutex_unlock(v2);
  return v6;
}

uint64_t sub_100045814(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t v2 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v5 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v1 + 96) & 7) != 0)
    || (uint64_t v5 = *(void *)(v1 + 96), v3 = v1 + 104, ((v1 + 104) & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
  }

  else
  {
    int v4 = 1;
    while (v5 != v3)
    {
      uint64_t result = *sub_100008AFC(&v5);
      if (result)
      {
        if ((result & 7) != 0) {
          goto LABEL_12;
        }
        v4 &= (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
      }

      else
      {
        NSLog(@"ERROR - Power listener is NULL");
      }

      sub_100008A4C(&v5);
    }

    pthread_mutex_unlock(v2);
    return v4 & 1;
  }

  return result;
}

uint64_t sub_1000458F0(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t v2 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v1 + 96) & 7) != 0)
    || (uint64_t v7 = *(void *)(v1 + 96), v3 = v1 + 104, ((v1 + 104) & 7) != 0))
  {
LABEL_14:
    __break(0x5516u);
  }

  else
  {
    uint64_t v4 = v7;
    uint64_t v5 = 1LL;
    while (v4 != v3)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_14;
      }
      uint64_t v5 = v5 & (*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result);
      sub_100008A4C(&v7);
      uint64_t v4 = v7;
    }

    pthread_mutex_unlock(v2);
    return v5;
  }

  return result;
}

uint64_t sub_1000459B8(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t v2 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v1 + 96) & 7) != 0)
    || (uint64_t v7 = *(void *)(v1 + 96), v3 = v1 + 104, ((v1 + 104) & 7) != 0))
  {
LABEL_14:
    __break(0x5516u);
  }

  else
  {
    uint64_t v4 = v7;
    uint64_t v5 = 1LL;
    while (v4 != v3)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_14;
      }
      uint64_t v5 = v5 & (*(unsigned int (**)(uint64_t))(*(void *)result + 24LL))(result);
      sub_100008A4C(&v7);
      uint64_t v4 = v7;
    }

    pthread_mutex_unlock(v2);
    return v5;
  }

  return result;
}

uint64_t sub_100045A80(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t v2 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v1 + 96) & 7) != 0)
    || (uint64_t v7 = *(void *)(v1 + 96), v3 = v1 + 104, ((v1 + 104) & 7) != 0))
  {
LABEL_14:
    __break(0x5516u);
  }

  else
  {
    uint64_t v4 = v7;
    uint64_t v5 = 1LL;
    while (v4 != v3)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_14;
      }
      uint64_t v5 = v5 & (*(unsigned int (**)(uint64_t))(*(void *)result + 32LL))(result);
      sub_100008A4C(&v7);
      uint64_t v4 = v7;
    }

    pthread_mutex_unlock(v2);
    return v5;
  }

  return result;
}

uint64_t sub_100045B48(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_14;
  }

  if (a3 >= 4)
  {
LABEL_14:
    __break(0x550Au);
    return result;
  }

  sub_1000CEA98(0xAu, @"acc power changed to %d state for dock (%hhx)", a3, a2);
  pthread_mutex_lock(&stru_1001198C8);
  if (a2) {
    BOOL v5 = (_DWORD)a3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  uint64_t v6 = !v5;
  if (!v5) {
    objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2),  "setAccessoryPowerState:",  a3);
  }
  pthread_mutex_unlock(&stru_1001198C8);
  return v6;
}

id sub_100045BF0(id result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    pthread_mutex_lock(&stru_1001198C8);
    if (a2)
    {
      id v3 = objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2);
      if (v3)
      {
        id v4 = [v3 accessoryPowerState];
        pthread_mutex_unlock(&stru_1001198C8);
        __break(0x550Au);
      }
    }

    pthread_mutex_unlock(&stru_1001198C8);
    return 0LL;
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100045C78(uint64_t result, uint64_t a2)
{
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (id v4 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v2 + 96) & 7) != 0)
    || (v7 = *(void *)(v2 + 96), uint64_t v5 = v2 + 104, (v5 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v7 != v5)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 40LL))(result, a2);
      sub_100008A4C(&v7);
    }

    return pthread_mutex_unlock(v4);
  }

  return result;
}

uint64_t sub_100045D38(uint64_t result, uint64_t a2)
{
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (id v4 = (pthread_mutex_t *)(result + 120),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 120)),
        uint64_t v7 = 0xAAAAAAAAAAAAAAAALL,
        (((_BYTE)v2 + 96) & 7) != 0)
    || (v7 = *(void *)(v2 + 96), uint64_t v5 = v2 + 104, (v5 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    while (v7 != v5)
    {
      uint64_t result = *sub_100008AFC(&v7);
      if (result) {
        BOOL v6 = (result & 7) == 0;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_13;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 48LL))(result, a2);
      sub_100008A4C(&v7);
    }

    return pthread_mutex_unlock(v4);
  }

  return result;
}

id sub_100045DF8(id result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    return [result setAccessoryPowerModeOnDuringSleep:a3];
  }

  else if (a2)
  {
    uint64_t result = objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2);
    if (result) {
      return [result setAccessoryPowerModeOnDuringSleep:a3];
    }
  }

  return result;
}

id sub_100045E54(id a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (!a2) {
      return 0LL;
    }
    a1 = objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagerForDevPort:",  a2);
    if (!a1) {
      return 0LL;
    }
  }

  return [a1 accessoryPowerModeOnDuringSleep];
}

uint64_t sub_100045EAC(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98(0xAu, @"IsPowerConnected: __isOnAC = %d", byte_10011BDA1 & 1);
    return byte_10011BDA1 & 1;
  }

  return result;
}

uint64_t sub_100045F04(uint64_t result)
{
  if (result && (result & 7) == 0)
  {
    uint64_t v1 = sub_10000CEF8();
    pthread_mutex_lock(&stru_10011B978);
    uint64_t v5 = *(void *)(v1 + 8);
    if (v5 == v1)
    {
LABEL_22:
      pthread_mutex_unlock(&stru_10011B978);
      return 0LL;
    }

    while (1)
    {
      uint64_t result = *sub_10000D014(&v5);
      if (!result || (result & 7) != 0) {
        break;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result))
      {
        uint64_t result = sub_1000BE638();
        if (!result) {
          break;
        }
        uint64_t v3 = result;
        if ((result & 7) != 0) {
          break;
        }
        id v4 = sub_10000D014(&v5);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 104LL))(v3, *v4);
        if (result)
        {
          if ((result & 7) != 0) {
            break;
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)result + 24LL))(result) == 11)
          {
            if (dword_10011BDA4 == 0x4000)
            {
              if ((byte_10011BDA1 & 1) != 0)
              {
LABEL_21:
                pthread_mutex_unlock(&stru_10011B978);
                return 1LL;
              }
            }

            else if (dword_10011BDA4 == 0x8000)
            {
              goto LABEL_21;
            }
          }
        }
      }

      sub_10000D048(&v5);
      if (v5 == v1) {
        goto LABEL_22;
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100046040(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    return result;
  }

  uint64_t v1 = sub_10000CEF8();
  pthread_mutex_lock(&stru_10011B978);
  for (uint64_t i = *(void *)(v1 + 8); i != v1; sub_10000D048(&i))
  {
    uint64_t result = *sub_10000D014(&i);
    if (!result || (result & 7) != 0) {
      goto LABEL_22;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result))
    {
      uint64_t result = sub_1000BE638();
      if (!result) {
        goto LABEL_22;
      }
      uint64_t v3 = result;
      if ((result & 7) != 0) {
        goto LABEL_22;
      }
      id v4 = sub_10000D014(&i);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 104LL))(v3, *v4);
      if (result)
      {
        if ((result & 7) != 0) {
          goto LABEL_22;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)result + 24LL))(result) == 11
          && dword_10011BDA4 == 0x4000
          && (byte_10011BDA1 & 1) != 0)
        {
          pthread_mutex_unlock(&stru_10011B978);
          return 1LL;
        }
      }
    }
  }

  pthread_mutex_unlock(&stru_10011B978);
  return 0LL;
}

uint64_t sub_100046170(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98( 0xAu,  @"GetBatteryLevel: __batteryCapacity/Override = %d / %d",  dword_10011BDA8,  dword_10011BDAC);
    if (dword_10011BDAC) {
      return dword_10011BDAC;
    }
    else {
      return dword_10011BDA8;
    }
  }

  return result;
}

uint64_t sub_1000461D4(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000CEA98( 0xAu,  @"GetBatteryLevelMax: __batteryCapacity/Override = %d / %d, max = %d / %d",  dword_10011BDA8,  dword_10011BDAC,  100LL,  dword_10011BDB0);
    if (dword_10011BDAC) {
      return 100LL;
    }
    else {
      return dword_10011BDB0;
    }
  }

  return result;
}

uint64_t sub_100046250(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t v2 = byte_10011BDB4 & 1;
      uint64_t v3 = dword_10011BDAC;
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 232LL))(result);
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 240LL))(v1);
      sub_1000CEA98( 0xAu,  @"GetChargingState: __isBatteryCharging =%d, __batteryCapacityOverride = %d, batteryLevel = %d / %d",  v2,  v3,  v4,  v5);
      if ((byte_10011BDB4 & 1) != 0 && !dword_10011BDAC) {
        goto LABEL_5;
      }
      char v7 = byte_10011BDA1;
      if ((byte_10011BDA1 & 1) != 0)
      {
        unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL))(v1);
        if (v8 < (*(unsigned int (**)(uint64_t))(*(void *)v1 + 240LL))(v1))
        {
LABEL_5:
          uint64_t v6 = 1LL;
          sub_1000CEA98(0xAu, @"GetChargingState: kChargerCharging");
          return v6;
        }

        char v7 = byte_10011BDA1;
      }

      if ((v7 & 1) != 0)
      {
        int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 232LL))(v1);
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 240LL))(v1);
        if (v9 == v10) {
          id v11 = @"GetChargingState: kChargerCharged";
        }
        else {
          id v11 = @"GetChargingState: kChargerTrickle";
        }
        if (v9 == v10) {
          uint64_t v6 = 3LL;
        }
        else {
          uint64_t v6 = 2LL;
        }
        sub_1000CEA98(0xAu, &v11->isa);
      }

      else
      {
        uint64_t v6 = 0LL;
        sub_1000CEA98(0xAu, @"GetChargingState: kChargerDisabled");
      }

      return v6;
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_1000463A4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100043D18() ^ 1;
  }
  __break(0x5516u);
  return result;
}

NSNumber *sub_1000463CC(NSNumber *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t result = (NSNumber *)sub_1000438B8()) == 0LL
    || (result & 7) != 0
    || ((uint64_t result = (NSNumber *)((uint64_t (*)(NSNumber *))result->super.super.isa[20].isa)(result),
         !(_DWORD)result)
      ? (unsigned __int16 v3 = 300)
      : (unsigned __int16 v3 = 500),
        (a2 & 7) != 0 || (uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber), !a2) || ((a2 + 84) & 3) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v4 = -[NSNumber initWithInt:](result, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v5 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v4);
    if (!v5)
    {
LABEL_14:

      return (NSNumber *)v3;
    }

    uint64_t result = (NSNumber *)[v5 ultraHighPowerModeCurrentLimit];
    if (!(result >> 16))
    {
      unsigned __int16 v3 = (unsigned __int16)result;
      goto LABEL_14;
    }
  }

  __break(0x5507u);
  return result;
}

void sub_10004648C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (id v5 = objc_alloc(&OBJC_CLASS___NSNumber), !a2) || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    char v7 = -[NSNumber initWithInt:](v5, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v6 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v7);
    if (v6) {
      [v6 setAvailableCurrentFromAccInMa:a3];
    }
  }

NSNumber *sub_10004651C(NSNumber *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (a2 & 7) != 0
    || (uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber), !a2)
    || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned __int16 v3 = -[NSNumber initWithInt:](result, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v4 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v3);
    if (v4) {
      id v5 = [v4 availableCurrentFromAccInMa];
    }
    else {
      id v5 = 0LL;
    }

    return (NSNumber *)v5;
  }

  return result;
}

void sub_1000465AC(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (unsigned __int16 v3 = objc_alloc(&OBJC_CLASS___NSNumber), !a2) || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v5 = -[NSNumber initWithInt:](v3, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v4 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v5);
    if (v4) {
      [v4 restoreAvailableCurrentFromAcc];
    }
  }

void sub_100046634(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1 || (a1 & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_35;
  }
  char v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232LL))(a2);
  unsigned int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 296LL))(a1, a2);
  if (a3 >= 0) {
    unsigned int v14 = a3;
  }
  else {
    unsigned int v14 = v13;
  }
  if (v14 >= 0x10000) {
    goto LABEL_36;
  }
  unsigned int v15 = v13;
  unsigned __int16 v27 = v14;
  unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 232LL))(a1);
  unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 240LL))(a1);
  if (!v17 || v16 > v17)
  {
    LOBYTE(v19) = 0;
  }

  else
  {
    uint64_t v20 = 100LL * v16;
    if ((v20 & 0xFFFFFFFF00000000LL) != 0)
    {
LABEL_38:
      __break(0x550Cu);
      return;
    }

    unsigned int v19 = v20 / v17;
  }

  uint64_t v21 = sub_100043F9C();
  uint64_t v22 = sub_1000B6CE0();
  if (!v22 || (v22 & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t v23 = sub_1000561D8(v22, a2);
  if (v21 >= 8)
  {
LABEL_37:
    __break(0x550Au);
    goto LABEL_38;
  }

  sub_100044444(v12, a4, a5, a6, v23, v21, (unsigned __int16)v14, v19, &v27);
  if (v27 == v15) {
    return;
  }
  unsigned int v24 = "(nil)";
  if (a4) {
    unint64_t v25 = (const char *)a4;
  }
  else {
    unint64_t v25 = "(nil)";
  }
  if (a5) {
    uint64_t v26 = (const char *)a5;
  }
  else {
    uint64_t v26 = "(nil)";
  }
  if (a6) {
    unsigned int v24 = (const char *)a6;
  }
  sub_1000CEA98( 0xAu,  @"CheckAndLimitChargingAtStart: override chargingCurrent %d -> %d for %s / %s / %s",  (unsigned __int16)v14,  v27,  v25,  v26,  v24);
  if (qword_10011BD98 != -1) {
    dispatch_once(&qword_10011BD98, &stru_100104DF8);
  }
  if (!qword_10011BD90 || (qword_10011BD90 & 7) != 0)
  {
LABEL_35:
    __break(0x5516u);
LABEL_36:
    __break(0x5507u);
    goto LABEL_37;
  }

  (*(void (**)(void))(*(void *)qword_10011BD90 + 288LL))();
}

void sub_100046838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (id v5 = objc_alloc(&OBJC_CLASS___NSNumber), !a2) || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    char v7 = -[NSNumber initWithInt:](v5, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v6 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v7);
    if (v6) {
      [v6 setReserveCurrentForAccInMa:a3];
    }
  }

NSNumber *sub_1000468C8(NSNumber *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (a2 & 7) != 0
    || (uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber), !a2)
    || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned __int16 v3 = -[NSNumber initWithInt:](result, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v4 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v3);
    if (v4) {
      id v5 = [v4 reserveCurrentForAccInMa];
    }
    else {
      id v5 = 0LL;
    }

    return (NSNumber *)v5;
  }

  return result;
}

void sub_100046958(NSNumber *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (a1 = objc_alloc(&OBJC_CLASS___NSNumber), !a2))
  {
    __break(0x5516u);
    -[NSNumber setInternalBatteryChargingState:](a1, "setInternalBatteryChargingState:", a3);
  }

  else
  {
    id v5 = -[NSNumber initWithInt:](a1, "initWithInt:", (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2));
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v5);

      if (v7) {
        [v7 setInternalBatteryChargingState:a3];
      }
    }
  }

id sub_100046A0C(NSNumber *a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (a1 = objc_alloc(&OBJC_CLASS___NSNumber), !a2))
  {
    __break(0x5516u);
    return -[NSNumber internalBatteryChargingState](a1, "internalBatteryChargingState");
  }

  else
  {
    unsigned __int16 v3 = -[NSNumber initWithInt:](a1, "initWithInt:", (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64LL))(a2));
    if (v3
      && (id v4 = v3,
          id v5 = objc_msgSend( objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "iapPortManagers"),  "objectForKey:",  v3),  v4,  v5))
    {
      return [v5 internalBatteryChargingState];
    }

    else
    {
      return 0LL;
    }
  }

void sub_100046AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0 || (a2 & 7) != 0 || (id v5 = objc_alloc(&OBJC_CLASS___NSNumber), !a2) || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v7 = -[NSNumber initWithInt:](v5, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v6 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v7);
    if (v6) {
      [v6 setMaxInputCurrentFromAccInMa:a3];
    }
  }

NSNumber *sub_100046B40(NSNumber *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (a2 & 7) != 0
    || (uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber), !a2)
    || ((a2 + 84) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned __int16 v3 = -[NSNumber initWithInt:](result, "initWithInt:", *(unsigned int *)(a2 + 84));
    id v4 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v3);
    if (v4) {
      id v5 = [v4 maxInputCurrentFromAccInMa];
    }
    else {
      id v5 = 0LL;
    }

    return (NSNumber *)v5;
  }

  return result;
}

id sub_100046BD0(id result, unsigned int a2)
{
  if (result && (result & 7) == 0) {
    return objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "preventIdleSleep:",  a2 / 0x3E8uLL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046C18(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100046C2C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 64LL))( result,  1048577LL,  0LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046C5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 64LL))( result,  1048578LL,  0LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046C8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 64LL))( result,  1048579LL,  0LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046CBC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 64LL))( result,  1048580LL,  0LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046CEC(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (*(unsigned int (**)(uint64_t))(*(void *)result + 232LL))(result);
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v1 + 240LL))(v1);
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v1 + 64LL))( v1,  1048583LL,  0LL,  v2,  v3);
  }

  return result;
}

uint64_t sub_100046D5C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 45LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100046D74(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void sub_100046D88(id a1)
{
  uint64_t v1 = dword_10011BDAC;
  CFIndex v2 = sub_10004441C();
  NSLog(@"Logging preferences changed! (pretendBatteryLevel): %d -> %d", v1, v2);
  dword_10011BDAC = sub_10004441C();
  if (qword_10011BD98 != -1) {
    dispatch_once(&qword_10011BD98, &stru_100104DF8);
  }
  if (!qword_10011BD90 || (qword_10011BD90 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100046CEC(qword_10011BD90);
  }
}

void sub_100046E0C(io_registry_entry_t a1)
{
  CFMutableDictionaryRef properties = 0LL;
  CFIndex v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (IORegistryEntryCreateCFProperties(a1, &properties, 0LL, 0)) {
    goto LABEL_42;
  }
  dword_10011BDA8 = objc_msgSend( -[__CFDictionary objectForKey:]( properties,  "objectForKey:",  @"CurrentCapacity"),  "intValue");
  dword_10011BDB0 = objc_msgSend( -[__CFDictionary objectForKey:](properties, "objectForKey:", @"MaxCapacity"),  "intValue");
  byte_10011BDA1 = objc_msgSend( -[__CFDictionary objectForKey:]( properties,  "objectForKey:",  @"ExternalConnected"),  "BOOLValue");
  byte_10011BDB4 = objc_msgSend( -[__CFDictionary objectForKey:](properties, "objectForKey:", @"IsCharging"),  "BOOLValue");
  byte_10011BDB7 = objc_msgSend( -[__CFDictionary objectForKey:]( properties,  "objectForKey:",  @"ExternalChargeCapable"),  "BOOLValue");
  id v3 = objc_msgSend(-[__CFDictionary objectForKey:](properties, "objectForKey:", @"AdapterInfo"), "intValue");
  dword_10011BDA4 = (int)v3;
  NSLog( @"__update_battery_state: battCap %d (%d) / %d, onAC %d, charging %d, chargingCapable %d, source %d",  dword_10011BDA8,  dword_10011BDAC,  dword_10011BDB0,  byte_10011BDA1 & 1,  byte_10011BDB4 & 1,  byte_10011BDB7 & 1,  v3);
  if ((byte_10011BDB4 & 1) == 0)
  {
    if ((byte_10011BDA1 & 1) != 0) {
      goto LABEL_10;
    }
LABEL_6:
    if ((byte_10011BDB7 & 1) == 0)
    {
      BOOL v4 = dword_10011BDA4 == -536870201;
      goto LABEL_11;
    }

    goto LABEL_10;
  }

  if ((byte_10011BDA1 & 1) == 0) {
    goto LABEL_6;
  }
  if (dword_10011BDA8 == dword_10011BDB0)
  {
    BOOL v4 = 0;
    byte_10011BDB4 = 0;
    goto LABEL_11;
  }

void sub_1000471B4(uint64_t a1, io_registry_entry_t a2, int a3)
{
  if (a3 == -536723200) {
    sub_100046E0C(a2);
  }
}

void sub_1000471D0(id a1)
{
  if (qword_10011BD98 != -1) {
    dispatch_once(&qword_10011BD98, &stru_100104DF8);
  }
  if (qword_10011BD90) {
    BOOL v1 = (qword_10011BD90 & 7) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    sub_100046CEC(qword_10011BD90);
  }
  else {
    __break(0x5516u);
  }
}

void sub_100047224()
{
  if (!sub_1000BE638()) {
    syslog(4, "Can't create and IPodAccessoryMgr instance\n");
  }
  if (!sub_1000C7D20()) {
    syslog(4, "Can't create and IPodSimpleRemote instance\n");
  }
  if (!sub_1000BD830()) {
    syslog(4, "Can't create and IPodAccessoryEQ instance\n");
  }
}

uint64_t sub_100047284()
{
  uint64_t result = sub_1000B6CE0();
  if (result && (result & 7) == 0) {
    return sub_1000BA40C(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000472A8()
{
  if (qword_10011BDC0 != -1) {
    dispatch_once(&qword_10011BDC0, &stru_100105008);
  }
  return qword_10011BDB8;
}

void sub_1000472E8(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x60uLL);
  if ((v1 & 0xF) != 0 || (CFIndex v2 = (void *)v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(v1);
    void *v2 = off_100105038;
    qword_10011BDB8 = (uint64_t)v2;
  }

void sub_10004733C(_Unwind_Exception *a1)
{
}

uint64_t sub_100047350(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_1000473C0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100047350(result);
  }
  __break(0x5516u);
  return result;
}

void sub_1000473D4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100047350(a1);
    operator delete((void *)a1);
  }

void sub_10004740C(_Unwind_Exception *a1)
{
}

id sub_100047420(id result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v6 = objc_msgSend( objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "sessionForAccessoryWithConnectionID:andSessionID:",  a2,  a3),  "isPacketAvailable");

    return v6;
  }

  return result;
}

id sub_100047490(id result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v6 = objc_msgSend( objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "sessionForAccessoryWithConnectionID:andSessionID:",  a2,  a3),  "consumeNextOutPacket");

    return v6;
  }

  return result;
}

void sub_100047500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    objc_msgSend( objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "sessionForAccessoryWithConnectionID:andSessionID:",  a2,  a3),  "recycleOutPacket:",  a4);
  }

uint64_t sub_100047578(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    LODWORD(a3) = objc_msgSend( objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "sessionForAccessoryWithConnectionID:andSessionID:",  a2,  a3),  "bufferToAppHasSpaceAvailable");

    return a3 ^ 1;
  }

  return result;
}

id sub_1000475E8(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v10 = objc_msgSend( objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "sessionForAccessoryWithConnectionID:andSessionID:",  a2,  a3),  "sendBytesToApp:length:",  a5,  a4);

    return v10;
  }

  return result;
}

void sub_100047670(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v7 = +[EAManager sharedManager](&OBJC_CLASS___EAManager, "sharedManager");
    if (a4) {
      [v7 openCompleteForSessionWithConnectionID:a2 sessionID:a3];
    }
    else {
      [v7 closeSessionForConnectionID:a2 sessionID:a3 notifyApp:1];
    }
  }

void sub_1000476F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "closeSessionForConnectionID:sessionID:notifyApp:",  a2,  a3,  1);
  }

uint64_t sub_100047758(uint64_t result, unsigned int a2, __int16 a3, char a4)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    v4[1] = -86;
    v4[0] = a4;
    __int16 v5 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, _BYTE *))(*(void *)result + 32LL))( result,  1310721LL,  a2,  v4);
  }

  return result;
}

uint64_t sub_1000477AC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 32LL))( result,  1310724LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000477DC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 32LL))( result,  1310722LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004780C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 32LL))( result,  1310723LL,  a2,  a3);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004783C()
{
  if (qword_10011BDD0 != -1) {
    dispatch_once(&qword_10011BDD0, &stru_100105110);
  }
  return qword_10011BDC8;
}

void sub_10004787C(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0xA8uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000478D8(v1);
    qword_10011BDC8 = v2;
  }

void sub_1000478C4(_Unwind_Exception *a1)
{
}

uint64_t sub_1000478D8(uint64_t result)
{
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t result = sub_10001B6E4(result);
  *(void *)uint64_t v1 = off_100105140;
  *(_DWORD *)(v1 + 96) = 0;
  *(void *)(v1 + 104) = 0LL;
  if (((v1 + 112) & 7) != 0) {
    goto LABEL_27;
  }
  sub_1000255A4(v1 + 112, "");
  *(_WORD *)(v1 + 136) = 0;
  *(void *)(v1 + 144) = 0LL;
  mach_port_t notify_port = 0;
  Boolean shouldFreeInfo = 0;
  context.version = 0LL;
  context.info = (void *)v1;
  memset(&context.retain, 0, 24);
  qword_10011C8B8 = (uint64_t)dispatch_queue_create("SystemStatus BT global event queue", 0LL);
  if (!notify_register_mach_port("com.apple.springboard.lockstate", &notify_port, 0, (int *)(v1 + 96)))
  {
    uint64_t v2 = CFMachPortCreateWithPort( kCFAllocatorDefault,  notify_port,  (CFMachPortCallBack)sub_100047CAC,  &context,  &shouldFreeInfo);
    if (v2)
    {
      CFRunLoopSourceRef RunLoopSource = CFMachPortCreateRunLoopSource(kCFAllocatorDefault, v2, 0LL);
      CFRelease(v2);
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
      int check = 0;
      uint32_t v5 = notify_check(*(_DWORD *)(v1 + 96), &check);
      uint64_t v6 = 0LL;
      if (!v5 && check) {
        uint64_t v6 = SBSGetScreenLockStatus(0LL);
      }
      *(void *)(v1 + 104) = v6;
    }
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver( DarwinNotifyCenter,  (const void *)v1,  (CFNotificationCallback)sub_100047D48,  @"com.apple.springboard.nowPlayingAppChanged",  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  _AXSAssistiveTouchEnabled();
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver( LocalCenter,  (const void *)v1,  (CFNotificationCallback)sub_100047DB4,  kAXSAssistiveTouchEnabledNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  if (dword_100119914 == -1) {
    dword_100119914 = CFPreferencesGetAppBooleanValue(@"FakeNowPlayingBundleID", @"com.apple.iapd", 0LL) != 0;
  }
  if (dword_100119910 == -1) {
    dword_100119910 = CFPreferencesGetAppBooleanValue(@"NotifyBundleIDAsMobileIPod", @"com.apple.iapd", 0LL) != 0;
  }
  byte_10011C890 = CFPreferencesGetAppBooleanValue(@"LogVideoEvents", @"com.apple.iapd", 0LL);
  if (qword_10011BDE0 != -1) {
    dispatch_once(&qword_10011BDE0, &stru_100105448);
  }
  qword_10011BDE8 = objc_alloc_init(&OBJC_CLASS___IAPApplicationStateMonitor);
  [(id)qword_10011BDE8 startObserving];
  byte_10011C8C0 = byte_10011BDD8 & 1;
  if ((byte_10011BDD8 & 1) != 0 && (byte_10011BDD9 & 1) != 0)
  {
    byte_10011C8B0 = CFPreferencesGetAppBooleanValue(@"DisableAuthentication", @"com.apple.iapd", 0LL);
    AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"DisableUSBAuthentication", @"com.apple.iapd", 0LL);
  }

  else
  {
    NSLog(@"Can't disable auth!");
    AppBooleanint Value = 0;
    byte_10011C8B0 = 0;
  }

  byte_10011C8B1 = AppBooleanValue;
  CFPropertyListRef v10 = CFPreferencesCopyAppValue(@"IapImitate", @"com.apple.iapd");
  id v11 = v10;
  if (v10)
  {
    CFTypeID v12 = CFGetTypeID(v10);
    if (v12 == CFStringGetTypeID()) {
      qword_10011C8A0 = (uint64_t)v11;
    }
    else {
      CFRelease(v11);
    }
  }

  sub_100047EB8();
  uint64_t result = (uint64_t)operator new(0x18uLL);
  uint64_t v13 = result;
  if ((result & 0xF) != 0 || (result & 7) != 0)
  {
LABEL_27:
    __break(0x5516u);
  }

  else
  {
    sub_100009E64((void *)result);
    *(void *)(v1 + 152) = v13;
    *(void *)(v1 + 160) = dispatch_queue_create("com.apple.iapd.MACAddressesMapQ", 0LL);
    return v1;
  }

  return result;
}

void sub_100047C6C(_Unwind_Exception *a1)
{
}

void sub_100047CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2 || (a2 & 3) != 0 || ((a2 + 20) & 3) != 0 || !a4 || (a4 & 7) != 0 || ((a4 + 96) & 7) != 0) {
    goto LABEL_14;
  }
  if (*(_DWORD *)(a2 + 20) != *(_DWORD *)(a4 + 96)) {
    return;
  }
  unsigned int v5 = SBSGetScreenLockStatus(0LL);
  if (((a4 + 104) & 7) != 0)
  {
LABEL_14:
    __break(0x5516u);
    return;
  }

  *(void *)(a4 + 104) = v5;
  if (!v5)
  {
    uint64_t v6 = sub_100015744();
    if (v6 && (v6 & 7) == 0)
    {
      sub_100017440(v6);
      return;
    }

    goto LABEL_14;
  }

uint64_t sub_100047D48()
{
  if (qword_10011BDD0 != -1) {
    dispatch_once(&qword_10011BDD0, &stru_100105110);
  }
  uint64_t result = qword_10011BDC8;
  if (qword_10011BDC8) {
    BOOL v1 = (qword_10011BDC8 & 7) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 32LL))();
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100047DB4()
{
  if (qword_10011BDD0 != -1) {
    dispatch_once(&qword_10011BDD0, &stru_100105110);
  }
  uint64_t result = qword_10011BDC8;
  if (qword_10011BDC8) {
    BOOL v1 = (qword_10011BDC8 & 7) == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 32LL))();
  }
  __break(0x5516u);
  return result;
}

void sub_100047E20(id a1)
{
  byte_10011BDD8 = 0;
  byte_10011BDD9 = 0;
  BOOL v1 = (const void *)MGCopyAnswer(@"ReleaseType", 0LL);
  if (v1)
  {
    uint64_t v2 = v1;
    byte_10011BDD8 = CFEqual(v1, @"Internal") != 0;
    CFRelease(v2);
  }

  else
  {
    byte_10011BDD8 = 0;
  }

  id v3 = (const __CFBoolean *)MGCopyAnswer(@"SigningFuse", 0LL);
  byte_10011BDD9 = CFBooleanGetValue(v3) == 0;
  CFRelease(v3);
}

void sub_100047EB8()
{
  BOOL v1 = sub_10004C59C;
  uint64_t v0 = -[NSString cStringUsingEncoding:]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.iaptransportd-%d",  getpid()),  "cStringUsingEncoding:",  4LL);
  if (BTSessionAttachWithQueue(v0, &v1, 0LL, qword_10011C8B8))
  {
    NSLog( @"ERROR - %s:%s - %d failed attaching to BT server",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTAttachToServer",  2343LL,  v1);
    qword_10011C8A8 = 0LL;
  }

uint64_t sub_100047F54(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

void sub_100047FC4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_17;
  }
  *(void *)a1 = off_100105140;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  (const void *)a1,  @"com.apple.springboard.nowPlayingAppChanged",  0LL);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, kAXSAssistiveTouchEnabledNotification, 0LL);
  notify_cancel(dword_10011C894);
  if (qword_10011C8A0)
  {
    CFRelease((CFTypeRef)qword_10011C8A0);
    qword_10011C8A0 = 0LL;
  }

  BOOL v4 = *(void **)(a1 + 144);
  if (v4)
  {

    *(void *)(a1 + 144) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 152);
  if (v5)
  {
    if ((v5 & 7) != 0) {
      goto LABEL_17;
    }
    uint64_t v6 = (void *)sub_10004D2B4(v5);
    operator delete(v6);
  }

  id v7 = *(dispatch_object_s **)(a1 + 160);
  if (!v7)
  {
LABEL_18:
    __break(0x5510u);
    return;
  }

  dispatch_release(v7);
  if (qword_10011C8B8)
  {
    dispatch_release((dispatch_object_t)qword_10011C8B8);
    qword_10011C8B8 = 0LL;
  }

  [(id)qword_10011BDE8 stopObserving];

  if (((a1 + 112) & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  sub_100047F54(a1);
}

void sub_1000480D0(_Unwind_Exception *a1)
{
}

void sub_1000480F0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100047FC4(a1);
  }
}

void sub_100048104(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100047FC4(a1);
    operator delete((void *)a1);
  }

void sub_10004813C(_Unwind_Exception *a1)
{
}

BOOL sub_100048150(BOOL result)
{
  if (result && !(result & 7)) {
    return byte_10011C8B0 != 0;
  }
  __break(0x5516u);
  return result;
}

BOOL sub_100048174(BOOL result)
{
  if (result && !(result & 7)) {
    return byte_10011C8B1 != 0;
  }
  __break(0x5516u);
  return result;
}

BOOL sub_100048198(BOOL result)
{
  if (result && !(result & 7)) {
    return byte_10011C8C0 != 0;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000481BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_17;
  }
  unsigned int v12 = 0;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v27 = v5;
  __int128 v28 = v5;
  __int128 v25 = v5;
  __int128 v26 = v5;
  __int128 v23 = v5;
  __int128 v24 = v5;
  __int128 v21 = v5;
  __int128 v22 = v5;
  __int128 v19 = v5;
  __int128 v20 = v5;
  __int128 v17 = v5;
  __int128 v18 = v5;
  __int128 v15 = v5;
  __int128 v16 = v5;
  *(_OWORD *)buffer = v5;
  __int128 v14 = v5;
  uint64_t v6 = (const __CFString *)MGCopyAnswerWithError(a2, 0LL, &v12);
  id v7 = v6;
  uint64_t v8 = v12;
  if (v6 && !v12)
  {
    CFTypeID v9 = CFGetTypeID(v6);
    if (v9 == CFStringGetTypeID())
    {
      if (CFStringGetCString(v7, buffer, 256LL, 0x8000100u)) {
        goto LABEL_14;
      }
    }

    else
    {
      NSLog(@"SystemStatus::GetMobileGestaltKeyValue() got non-string when querying key");
    }

    buffer[0] = 0;
LABEL_14:
    CFRelease(v7);
    if (a3)
    {
      CFPropertyListRef v10 = buffer;
      return sub_1000255A4(a3, v10);
    }

void sub_100048304(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 528LL))(a1);
  uint64_t v5 = dword_10011C8C4;
  uint64_t v6 = v4;
  BOOL v7 = 0LL;
  uint64_t v8 = byte_10011C8C8;
  if (dword_10011C8C4 && byte_10011C8C8)
  {
    if (v4 > 7)
    {
LABEL_23:
      __break(0x550Au);
      goto LABEL_24;
    }

    BOOL v7 = (_DWORD)v4 == 4;
  }

  uint64_t v9 = a1[136];
  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_24;
    }
    CFPropertyListRef v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
  }

  else
  {
    CFPropertyListRef v10 = "NULL";
  }

  sub_1000CEA98( 0xCu,  @"%s:%s shouldDisplayPortTransportBeEnabled = %d, _isDisplayPortTransportEnabled = %d, _videoOutMode = %d, _videoOutA uthorized = %d, tvSignal = %d for port %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetupVideoPortTransportsIfNecessary",  v7,  v9,  v5,  v8,  v6,  v10);
  if (a1[136] == v7) {
    return;
  }
  uint64_t v11 = sub_1000438B8();
  if (!v11 || (v11 & 7) != 0)
  {
LABEL_24:
    __break(0x5516u);
    return;
  }

  io_registry_entry_t v12 = sub_100043814(v11);
  if (v12)
  {
    io_registry_entry_t v13 = v12;
    sub_1000CEA98(0xCu, @"VideoOut Logging: DP enabled = %d", v7);
    __int128 v14 = (CFTypeRef *)&kCFBooleanTrue;
    if (!v7) {
      __int128 v14 = (CFTypeRef *)&kCFBooleanFalse;
    }
    IORegistryEntrySetCFProperty(v13, @"PowerState", *v14);
    IOObjectRelease(v13);
  }

  else
  {
    NSLog( @"ERROR - %s:%s - %d unable to get service for display port",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetupVideoPortTransportsIfNecessary",  455LL);
  }

  a1[136] = v7;
}

void sub_100048498(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
    if (!qword_10011C8A0
      || CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL)
      && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL)
      && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL))
    {
      sub_1000481BC(a1, (uint64_t)@"UserAssignedDeviceName", (uint64_t)&__str);
      std::string::operator=(a2, &__str);
    }

    else
    {
      std::string::assign(a2, "iPod");
    }
  }

void sub_100048574( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1000485A0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    a2->__r_.__value_.__r.__words[0] = 0LL;
    a2->__r_.__value_.__l.__size_ = 0LL;
    a2->__r_.__value_.__l.__cap_ = 0LL;
    if (!qword_10011C8A0
      || CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL)
      && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL)
      && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL))
    {
      sub_1000481BC(a1, (uint64_t)@"SerialNumber", (uint64_t)&__str);
      std::string::operator=(a2, &__str);
    }

    else
    {
      std::string::assign(a2, "1A12345ABCD");
    }
  }

void sub_10004867C( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1000486A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!a1 || (a1 & 7) != 0) {
LABEL_32:
  }
    __break(0x5516u);
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v35 = v3;
  __int128 v36 = v3;
  __int128 v33 = v3;
  __int128 v34 = v3;
  __int128 v31 = v3;
  __int128 v32 = v3;
  __int128 v29 = v3;
  __int128 v30 = v3;
  __int128 v27 = v3;
  __int128 v28 = v3;
  __int128 v25 = v3;
  __int128 v26 = v3;
  __int128 v23 = v3;
  __int128 v24 = v3;
  __int128 v21 = v3;
  __int128 v22 = v3;
  LOBYTE(v21) = 0;
  uint64_t v4 = MGCopyAnswer(@"ModelNumber", 0LL);
  if (v4)
  {
    io_registry_entry_t v12 = (const __CFString *)v4;
    uint64_t v13 = CPGetDeviceRegionCode( v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v21,  *((void *)&v21 + 1),  v22,  *((void *)&v22 + 1),  v23,  *((void *)&v23 + 1),  v24,  *((void *)&v24 + 1),  v25,  *((void *)&v25 + 1),  v26,  *((void *)&v26 + 1),  v27,  *((void *)&v27 + 1),  v28,  *((void *)&v28 + 1),  v29,  *((void *)&v29 + 1),  v30,  *((void *)&v30 + 1),  v31,  *((void *)&v31 + 1),  v32,  *((void *)&v32 + 1));
    if (v13)
    {
      __int128 v14 = (const __CFString *)v13;
      MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, v12);
      CFStringAppend(MutableCopy, v14);
      CFRelease(v12);
      io_registry_entry_t v12 = MutableCopy;
    }

    CFRelease(v12);
  }

  if (qword_10011C8A0)
  {
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL))
    {
      if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL))
      {
        if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL))
        {
          if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Unknown", 1uLL) == kCFCompareEqualTo)
          {
            uint64_t v18 = 0x6E776F6E6B6E55LL;
LABEL_29:
            *(void *)&__int128 v21 = v18;
            goto LABEL_30;
          }

          if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPhone4_Black_16_GSM", 1uLL) == kCFCompareEqualTo)
          {
            unint64_t v17 = 0x4C383133434DLL;
            goto LABEL_28;
          }

          if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Touch_4G_32", 1uLL))
          {
            if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPad2_Black_32_GSM", 1uLL))
            {
              if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPad2_White_32_GSM", 1uLL)) {
                goto LABEL_30;
              }
              uint64_t v16 = 943276877LL;
              goto LABEL_22;
            }

            uint64_t v19 = 926368589LL;
          }

          else
          {
            uint64_t v19 = 875905869LL;
          }

          unint64_t v17 = v19 & 0xFFFF0000FFFFFFFFLL | 0x4C3400000000LL;
          goto LABEL_28;
        }

        uint64_t v16 = 892486221LL;
LABEL_22:
        unint64_t v17 = v16 & 0xFFFF0000FFFFFFFFLL | 0x4C3300000000LL;
        goto LABEL_28;
      }

      unint64_t v17 = 0x4C393230424DLL;
    }

    else
    {
      unint64_t v17 = 0x4C363431414DLL;
    }

uint64_t sub_100048914(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (!qword_10011C8A0) {
      return 2490368LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL) == kCFCompareEqualTo) {
      return 720896LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL) == kCFCompareEqualTo) {
      return 1245184LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL) == kCFCompareEqualTo) {
      return 1310720LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Unknown", 1uLL) == kCFCompareEqualTo) {
      return 11206656LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPhone4_Black_16_GSM", 1uLL) == kCFCompareEqualTo) {
      return 0x200000LL;
    }
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Touch_4G_32", 1uLL) == kCFCompareEqualTo) {
      return 2162688LL;
    }
    uint64_t v1 = 2359296LL;
    if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPad2_Black_32_GSM", 1uLL))
    {
      if (CFStringCompare((CFStringRef)qword_10011C8A0, @"iPad2_White_32_GSM", 1uLL)) {
        return 2490368LL;
      }
      else {
        return 2359296LL;
      }
    }

    return v1;
  }

  return result;
}

void sub_100048A4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (!a1 || (a1 & 7) != 0) {
LABEL_11:
  }
    __break(0x5516u);
  __int128 v3 = (const __CFString *)MGCopyAnswer(@"HWModelStr", 0LL);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0LL, v3);
  CFIndex Length = CFStringGetLength(MutableCopy);
  if (CFStringHasSuffix(MutableCopy, @"AP"))
  {
    CFIndex v6 = Length - 2;
    if (!__OFSUB__(Length, 2LL)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }

  if (!CFStringHasSuffix(MutableCopy, @"DEV")) {
    goto LABEL_6;
  }
  CFIndex v6 = Length - 3;
  if (__OFSUB__(Length, 3LL))
  {
LABEL_10:
    __break(0x5515u);
    goto LABEL_11;
  }

LABEL_5:
  CFStringPad(MutableCopy, 0LL, v6, 0LL);
LABEL_6:
  memset(buffer, 170, 10);
  CFStringGetCString(MutableCopy, buffer, 10LL, 0x600u);
  memset(a2, 170, 24);
  sub_1000255A4((uint64_t)a2, buffer);
  CFRelease(v3);
  CFRelease(MutableCopy);
}

void sub_100048B7C(_Unwind_Exception *a1)
{
}

void sub_100048BA8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!a1) {
    goto LABEL_12;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_12;
  }
  __int128 v3 = (std::string *)(a1 + 112);
  if (((a1 + 112) & 7) != 0) {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      goto LABEL_10;
    }
  }

  else if (*(_BYTE *)(a1 + 135))
  {
    goto LABEL_10;
  }

  sub_1000481BC(a1, (uint64_t)@"ProductVersion", (uint64_t)&__str);
  std::string::operator=(v3, &__str);
LABEL_10:
  if (a2)
  {
    std::string::basic_string(a2, v3);
    return;
  }

void sub_100048C3C( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100048C54(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned __int8 v3 = -86;
    unsigned __int8 v2 = -86;
    unsigned __int8 v1 = -86;
    (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *))(*(void *)result + 160LL))( result,  &v3,  &v2,  &v1);
    return (v2 << 8) | (v3 << 16) | v1;
  }

  return result;
}

void sub_100048CBC(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_77;
  }
  memset(&__str, 170, sizeof(__str));
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 128LL))(&__str);
  unint64_t size = __str.__r_.__value_.__s.__size_;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_str = &__str;
    }
    if (!__CFADD__(p_str, size) && "." != (char *)-1LL)
    {
      uint64_t v9 = (std::string *)((char *)p_str + size);
      unint64_t v10 = size;
      uint64_t v11 = p_str;
      while (v11)
      {
        if (v11->__r_.__value_.__s.__data_[0] == 46) {
          goto LABEL_16;
        }
        if (v11 == (std::string *)-1LL) {
          goto LABEL_76;
        }
        uint64_t v11 = (std::string *)((char *)v11 + 1);
        if (!--v10)
        {
          uint64_t v11 = (std::string *)((char *)p_str + size);
LABEL_16:
          int v12 = (_DWORD)v11 - (_DWORD)p_str;
          if (v11 == v9) {
            int v12 = -1;
          }
          goto LABEL_20;
        }
      }

      goto LABEL_77;
    }

LABEL_76:
    __break(0x5513u);
LABEL_77:
    __break(0x5516u);
    goto LABEL_78;
  }

  int v12 = -1;
LABEL_20:
  int v13 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_79;
  }
  std::string::size_type v14 = v13;
  std::string::size_type v15 = (std::string::size_type)&__str;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v15 = __str.__r_.__value_.__r.__words[0];
  }
  if (size > v13)
  {
    if (~v15 >= v13 && size <= ~v15 && "" != 0LL)
    {
      uint64_t v18 = (_BYTE *)(v15 + size);
      uint64_t v19 = (_BYTE *)(v15 + v13);
      unint64_t v20 = size - v14;
      while (v19)
      {
        if (*v19 == 46) {
          goto LABEL_37;
        }
        if (v19 == (_BYTE *)-1LL) {
          goto LABEL_76;
        }
        ++v19;
        if (!--v20)
        {
          uint64_t v19 = v18;
LABEL_37:
          if (v19 == v18) {
            int v21 = -1;
          }
          else {
            int v21 = (_DWORD)v19 - v15;
          }
          goto LABEL_41;
        }
      }

      goto LABEL_77;
    }

    goto LABEL_76;
  }

  int v21 = -1;
LABEL_41:
  memset(&v32, 170, sizeof(v32));
  std::string::basic_string(&v32, &__str, 0LL, v12, (std::allocator<char> *)&v31);
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  if (!qword_10011C8A0
    || CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_5G", 1uLL)
    && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_Classic", 1uLL)
    && CFStringCompare((CFStringRef)qword_10011C8A0, @"iPod_3G_nano", 1uLL))
  {
    if (v21 == -1)
    {
      std::string::basic_string(&__p, &__str, v14, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
      std::string::operator=(&v31, &__p);
      std::string::assign(&v30, "0");
    }

    else
    {
      std::string::basic_string(&__p, &__str, v14, v21, (std::allocator<char> *)&v34);
      std::string::operator=(&v31, &__p);
      if (__OFADD__(v21, 1)) {
        goto LABEL_79;
      }
      std::string::basic_string(&__p, &__str, v21 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
      std::string::operator=(&v30, &__p);
    }

    if ((v32.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v24 = &v32;
    }
    else {
      __int128 v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
    }
    unsigned int v25 = atoi((const char *)v24);
    if (v25 > 0xFF
      || ((*a2 = v25, (v31.__r_.__value_.__s.__size_ & 0x80u) == 0)
        ? (__int128 v26 = &v31)
        : (__int128 v26 = (std::string *)v31.__r_.__value_.__r.__words[0]),
          (unsigned int v27 = atoi((const char *)v26), v27 > 0xFF)
       || ((*a3 = v27, unsigned __int8 v23 = v30.__r_.__value_.__s.__size_, (v30.__r_.__value_.__s.__size_ & 0x80u) == 0)
         ? (__int128 v28 = &v30)
         : (__int128 v28 = (std::string *)v30.__r_.__value_.__r.__words[0]),
           unsigned int v22 = atoi((const char *)v28),
           v22 > 0xFF)))
    {
LABEL_78:
      __break(0x5507u);
LABEL_79:
      __break(0x5500u);
      return;
    }
  }

  else
  {
    LOBYTE(v22) = 0;
    *a2 = 1;
    *a3 = 2;
    unsigned __int8 v23 = v30.__r_.__value_.__s.__size_;
  }

  *a4 = v22;
  if ((v23 & 0x80) != 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

      if (v18) {
        CFRelease(v18);
      }

      return;
    case 4:
LABEL_18:
      uint64_t v11 = 5LL;
      LODWORD(a4) = 4;
      goto LABEL_37;
    case 5:
LABEL_24:
      uint64_t v11 = 102LL;
      LODWORD(a4) = 5;
      goto LABEL_37;
    case 6:
LABEL_25:
      uint64_t v11 = 103LL;
      LODWORD(a4) = 6;
      goto LABEL_37;
    case 7:
LABEL_19:
      uint64_t v11 = 3LL;
      LODWORD(a4) = 7;
      goto LABEL_37;
    case 8:
LABEL_20:
      uint64_t v11 = 0LL;
      LODWORD(a4) = 8;
      goto LABEL_37;
    case 9:
LABEL_21:
      uint64_t v11 = 1LL;
      LODWORD(a4) = 9;
      goto LABEL_37;
    case 11:
LABEL_22:
      uint64_t v11 = 100LL;
      LODWORD(a4) = 11;
      goto LABEL_37;
    case 12:
LABEL_23:
      uint64_t v11 = 101LL;
      LODWORD(a4) = 12;
      goto LABEL_37;
    case 13:
LABEL_26:
      uint64_t v11 = 104LL;
      LODWORD(a4) = 13;
      goto LABEL_37;
    case 14:
LABEL_27:
      uint64_t v11 = 105LL;
      LODWORD(a4) = 14;
      goto LABEL_37;
    case 15:
LABEL_28:
      uint64_t v11 = 6LL;
      LODWORD(a4) = 15;
      goto LABEL_37;
    case 16:
LABEL_29:
      uint64_t v11 = 7LL;
      LODWORD(a4) = 16;
      goto LABEL_37;
    case 17:
LABEL_30:
      uint64_t v11 = 8LL;
      LODWORD(a4) = 20;
      goto LABEL_37;
    case 18:
LABEL_31:
      uint64_t v11 = 10LL;
      LODWORD(a4) = 21;
      goto LABEL_37;
    default:
      NSLog( @"ERROR - %s:%s - %d unhandled audio button 0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/SimpleRemoteEventHandler.mm",  "__convertIslKeyToIapFrameworkKey",  227LL,  a4);
      goto LABEL_14;
  }

                    sub_1000605A8(v2, 0x10u);
                  }

      __break(0x5516u);
      goto LABEL_77;
    }

    if (((a4 + 20) & 3) != 0) {
      goto LABEL_76;
    }
    uint64_t v9 = *(_DWORD *)(a4 + 20);
    if (v9 > 0x1F) {
      goto LABEL_77;
    }
    switch(v9)
    {
      case 0u:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        if (*(_DWORD *)(a4 + 28) > 0x1Fu) {
          goto LABEL_77;
        }
        if (((a4 + 32) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 320LL))(result);
        break;
      case 3u:
        if ((((_BYTE)a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 328LL))( result,  *(unsigned __int8 *)(a4 + 28),  *(unsigned __int8 *)(a4 + 29));
        break;
      case 4u:
LABEL_44:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 344LL))( result,  *(unsigned __int16 *)(a4 + 28));
        break;
      case 6u:
        if (((a4 + 24) & 7) != 0) {
          goto LABEL_76;
        }
        unint64_t v10 = *(_DWORD *)(a4 + 24);
        if (v10 > 7) {
          goto LABEL_77;
        }
        switch(v10)
        {
          case 0u:
            goto LABEL_44;
          case 1u:
            if ((((_BYTE)a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            return (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 336LL))( result,  *(unsigned __int8 *)(a4 + 28),  *(unsigned __int8 *)(a4 + 29));
          case 2u:
            if (((a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            uint64_t v11 = *(_DWORD *)(a4 + 28);
            if (v11 > 7) {
              goto LABEL_77;
            }
            if (((a4 + 32) & 3) != 0) {
              goto LABEL_76;
            }
            uint64_t result = sub_1000C2E70(result, v11, *(_BYTE *)(a4 + 32));
            break;
          case 3u:
            if (((a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            return sub_1000C2EEC(result, *(_BYTE *)(a4 + 28));
          case 4u:
            if (((a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            return sub_1000C2F54(result, (_OWORD *)(a4 + 28));
          case 5u:
            if (((a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            return sub_1000C2FC4(result, (_OWORD *)(a4 + 28));
          case 6u:
            if (((a4 + 28) & 3) != 0) {
              goto LABEL_76;
            }
            return sub_1000C3040(result, (__int128 *)(a4 + 28));
          default:
            return result;
        }

        break;
      case 8u:
        if ((((_BYTE)a4 + 28) & 3) != 0 || ((a4 + 32) & 3) != 0 || (((_DWORD)a4 + 34) & 1) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)result + 368LL))( result,  *(unsigned __int8 *)(a4 + 35),  *(unsigned int *)(a4 + 28),  *(unsigned __int16 *)(a4 + 32),  *(unsigned __int8 *)(a4 + 34));
        break;
      case 0xBu:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 376LL))( result,  *(unsigned int *)(a4 + 28));
        break;
      case 0xFu:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 384LL))(result);
        break;
      case 0x11u:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 416LL))( result,  *(unsigned int *)(a4 + 28));
        break;
      case 0x13u:
        if (((a4 + 28) & 3) != 0) {
          goto LABEL_76;
        }
        if (*(_DWORD *)(a4 + 28) > 1u) {
          goto LABEL_77;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 424LL))( result,  *(_DWORD *)(a4 + 28));
        break;
      default:
        return result;
    }
  }

  else
  {
    if (a5 != 48) {
      return result;
    }
    if (!a4 || (a4 & 7) != 0) {
      goto LABEL_76;
    }
    if (*(_DWORD *)a4 > 0x1Fu) {
      goto LABEL_77;
    }
    if (*(_DWORD *)a4 != 9) {
      return result;
    }
    if (*(_BYTE *)(result + 124))
    {
LABEL_30:
      *(_BYTE *)(result + 124) = 0;
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 32LL);
      return v8();
    }
  }

  return result;
}

void sub_100049040( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::string *a12, std::string *a13, std::string *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

BOOL sub_1000490B4(BOOL result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 104) != 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000490D4(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_1000490E8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100049100(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049114(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049128(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004913C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100049154(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049168(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 255LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100049180(uint64_t result, int a2, __n128 a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    float v3 = (float)a2 / 255.0;
    a3.n128_u32[0] = 0;
    if (v3 >= 0.00000011921)
    {
      a3.n128_f32[0] = (float)a2 / 255.0;
      if (v3 > 1.0) {
        a3.n128_u32[0] = 1.0;
      }
    }

    return BKSDisplayBrightnessSetWithImplicitTransaction(a3);
  }

  return result;
}

void sub_1000491CC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_12:
    __break(0x5505u);
    return;
  }

  float Current = BKSDisplayBrightnessGetCurrent();
  if (Current >= 0.00000011921 && Current <= 1.0)
  {
    float v2 = Current * 255.0;
    if (v2 <= -1.0 || v2 >= 65536.0) {
      goto LABEL_12;
    }
  }

uint64_t sub_100049248(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return SBSUndimScreen();
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004925C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049270(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049284(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100049298(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000492B0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_1000492C4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000492DC(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_1000492F0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_100049308(uint64_t a1)
{
  if (!a1) {
    goto LABEL_6;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_6;
  }
  NSLog(@"sda mode unlocked");
  int valuePtr = 1;
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  float v2 = (const __CFString *)kIapdServerName;
  CFPreferencesSetValue(@"SDAModeUnlocked", v1, kIapdServerName, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  CFPreferencesSetValue(@"SDAModeEnabled", v1, v2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  CFPreferencesSynchronize(v2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  CFRelease(v1);
  uint64_t v3 = sub_100015744();
  if (!v3 || (v3 & 7) != 0) {
LABEL_6:
  }
    __break(0x5516u);
  else {
    sub_100017470(v3);
  }
}

void sub_1000493F8(uint64_t a1)
{
  unsigned int v2 = byte_10011C8C8;
  if (byte_10011C8C8)
  {
    unsigned int v2 = dword_10011C8C4;
    if (dword_10011C8C4 >= 4)
    {
      __break(0x550Au);
      goto LABEL_19;
    }

    if (dword_10011C8C4 == 3) {
      uint64_t v3 = 0LL;
    }
    else {
      uint64_t v3 = off_100105540[dword_10011C8C4];
    }
  }

  else
  {
    uint64_t v3 = @"Off";
  }

  if (v2 == dword_10011BDF0)
  {
    if (!a1)
    {
      uint64_t v4 = "NULL";
      goto LABEL_15;
    }

    if ((a1 & 7) == 0)
    {
      uint64_t v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
LABEL_15:
      sub_1000CEA98( 0xCu,  @"Video %@ setting set to %@ for port %s - ignoring as duplicate",  @"Out",  v3,  v4);
      return;
    }

    goto LABEL_19;
  }

  dword_10011BDF0 = v2;
  notify_set_state(dword_10011C894, v2);
  if (!a1)
  {
    uint64_t v5 = "NULL";
    goto LABEL_17;
  }

  if ((a1 & 7) == 0)
  {
    uint64_t v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208LL))(a1);
LABEL_17:
    sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"Out", v3, v5);
    sub_100049534(a1);
    return;
  }

void sub_100049534(uint64_t a1)
{
  if (objc_msgSend( +[IAPGroupedCommandManager sharedManager]( IAPGroupedCommandManager,  "sharedManager"),  "isGrouping:",  a1))
  {
    objc_msgSend( +[IAPGroupedCommandManager sharedManager](IAPGroupedCommandManager, "sharedManager"),  "videoOutSettingsChanged:",  a1);
  }

  else
  {
    context.version = 0LL;
    if (qword_10011BDD0 != -1) {
      dispatch_once(&qword_10011BDD0, &stru_100105110);
    }
    context.info = (void *)qword_10011BDC8;
    memset(&context.retain, 0, 24);
    if (qword_10011C898)
    {
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10011C898);
      CFRelease((CFTypeRef)qword_10011C898);
      qword_10011C898 = 0LL;
    }

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    qword_10011C898 = (uint64_t)CFRunLoopTimerCreate( kCFAllocatorDefault,  Current + 0.2,  0.0,  0LL,  0LL,  (CFRunLoopTimerCallBack)sub_10004B918,  &context);
    Main = CFRunLoopGetMain();
    CFRunLoopAddTimer(Main, (CFRunLoopTimerRef)qword_10011C898, kCFRunLoopDefaultMode);
  }

char *sub_100049648(uint64_t a1, char **a2)
{
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  uint64_t v5 = -[NSString initWithCString:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithCString:encoding:", a1, 4LL);
  if (!v5) {
    goto LABEL_9;
  }
  CFIndex v6 = (__CFString *)v5;
  uint64_t v7 = (void *)CFPreferencesCopyAppValue(v5, @"com.apple.iapd");
  if (!v7)
  {
LABEL_8:

LABEL_9:
    return 0LL;
  }

  uint64_t v8 = v7;
  uint64_t v9 = (char *)[v7 lengthOfBytesUsingEncoding:4];
  BOOL v10 = __CFADD__(v9, 1LL);
  uint64_t result = v9 + 1;
  if (!v10)
  {
    uint64_t result = (char *)malloc((size_t)result);
    int v12 = result;
    *a2 = result;
    uint64_t result = (char *)[v8 lengthOfBytesUsingEncoding:4];
    if (result != (char *)-1LL)
    {
      [v8 getCString:v12 maxLength:result + 1 encoding:4];

      goto LABEL_8;
    }
  }

  __break(0x5500u);
LABEL_11:
  __break(0x5516u);
  return result;
}

void sub_100049724(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    goto LABEL_13;
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a3 < 4)
  {
    if (a3 == 3) {
      goto LABEL_11;
    }
    CFIndex v6 = *(void **)*(&off_100105558 + (int)a3);
    if (!v6) {
      goto LABEL_11;
    }
    uint64_t v8 = v5;
    if (!a2)
    {
      uint64_t v7 = "NULL";
      goto LABEL_10;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_10:
      sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"TV System", v6, v7);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutSystem UTF8String],  objc_msgSend(v6, "UTF8String"));
      uint64_t v5 = v8;
LABEL_11:

      return;
    }

    goto LABEL_12;
  }

uint64_t sub_10004981C(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2 && (uint64_t v7 = 0, sub_100049648((uint64_t)[kIAPVideoTVOutSystem UTF8String], (char **)&v7), v7))
    {
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v5 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v7);
      if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSystem_NTSC))
      {
        if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSystem_PAL)) {
          uint64_t v6 = 2
        }
             * (-[NSString caseInsensitiveCompare:]( v5,  "caseInsensitiveCompare:",  kIAPVideoTVOutSystem_SECAM) == NSOrderedSame);
        else {
          uint64_t v6 = 1LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      free(v7);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    return v6;
  }

  return result;
}

void sub_100049920(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_14:
    __break(0x5516u);
    goto LABEL_15;
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a3 < 2)
  {
    if (a3) {
      uint64_t v6 = (void **)&kIAPVideoTVOutAspectRatio_16_9;
    }
    else {
      uint64_t v6 = (void **)&kIAPVideoTVOutAspectRatio_4_3;
    }
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_13;
    }
    uint64_t v9 = v5;
    if (!a2)
    {
      uint64_t v8 = "NULL";
      goto LABEL_12;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_12:
      sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"TV Aspect Ratio", v7, v8);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutAspectRatio UTF8String],  objc_msgSend(v7, "UTF8String"));
      uint64_t v5 = v9;
LABEL_13:

      return;
    }

    goto LABEL_14;
  }

uint64_t sub_100049A24(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2
      && (uint64_t v7 = 0, sub_100049648((uint64_t)[kIAPVideoTVOutAspectRatio UTF8String], (char **)&v7), v7))
    {
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v5 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v7);
      if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutAspectRatio_4_3))
      {
        -[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutAspectRatio_16_9);
        uint64_t v6 = 1LL;
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      free(v7);
    }

    else
    {
      uint64_t v6 = 1LL;
    }

    return v6;
  }

  return result;
}

void sub_100049B00(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a3 < 8)
  {
    uint64_t v9 = v6;
    if (a3 > 4)
    {
      sub_100048304(a1, a2);
    }

    else
    {
      uint64_t v7 = *(void **)*(&off_100105570 + (int)a3);
      sub_100048304(a1, a2);
      if (v7)
      {
        if (!a2)
        {
          uint64_t v8 = "NULL";
          goto LABEL_11;
        }

        if ((a2 & 7) == 0)
        {
          uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_11:
          sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"TV Signal", v7, v8);
          NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutSignal UTF8String],  objc_msgSend(v7, "UTF8String"));
          goto LABEL_12;
        }

        goto LABEL_13;
      }
    }

uint64_t sub_100049C20(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2 && (uint64_t v7 = 0, sub_100049648((uint64_t)[kIAPVideoTVOutSignal UTF8String], (char **)&v7), v7))
    {
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v5 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v7);
      if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSignal_None))
      {
        if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSignal_Composite))
        {
          if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSignal_SVideo))
          {
            if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutSignal_Component)) {
              uint64_t v6 = 4
            }
                 * (-[NSString caseInsensitiveCompare:]( v5,  "caseInsensitiveCompare:",  kIAPVideoTVOutSignal_DisplayPort) == NSOrderedSame);
            else {
              uint64_t v6 = 3LL;
            }
          }

          else
          {
            uint64_t v6 = 2LL;
          }
        }

        else
        {
          uint64_t v6 = 1LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      free(v7);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    return v6;
  }

  return result;
}

void sub_100049D64(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_14:
    __break(0x5516u);
    goto LABEL_15;
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a3 < 2)
  {
    if (a3) {
      uint64_t v6 = (void **)&kIAPVideoTVOutCaptioning_On;
    }
    else {
      uint64_t v6 = (void **)&kIAPVideoTVOutCaptioning_Off;
    }
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_13;
    }
    uint64_t v9 = v5;
    if (!a2)
    {
      uint64_t v8 = "NULL";
      goto LABEL_12;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_12:
      sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"Closed Captioning", v7, v8);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutCaptioning UTF8String],  objc_msgSend(v7, "UTF8String"));
      uint64_t v5 = v9;
LABEL_13:

      return;
    }

    goto LABEL_14;
  }

uint64_t sub_100049E68(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2
      && (uint64_t v7 = 0, sub_100049648((uint64_t)[kIAPVideoTVOutCaptioning UTF8String], (char **)&v7), v7))
    {
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v5 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v7);
      if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutCaptioning_On))
      {
        -[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutCaptioning_Off);
        uint64_t v6 = 0LL;
      }

      else
      {
        uint64_t v6 = 1LL;
      }

      free(v7);
    }

    else
    {
      uint64_t v6 = 0LL;
    }

    return v6;
  }

  return result;
}

void sub_100049F44(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_14:
    __break(0x5516u);
    goto LABEL_15;
  }

  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (a3 < 2)
  {
    if (a3) {
      uint64_t v6 = (void **)&kIAPVideoTVOutFitSystem_ScaleToFit;
    }
    else {
      uint64_t v6 = (void **)&kIAPVideoTVOutFitSystem_ScaleToFill;
    }
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_13;
    }
    uint64_t v9 = v5;
    if (!a2)
    {
      uint64_t v8 = "NULL";
      goto LABEL_12;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_12:
      sub_1000CEA98(0xCu, @"Video %@ setting set to %@ for port %s", @"TV fit", v7, v8);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutFitSystem UTF8String],  objc_msgSend(v7, "UTF8String"));
      uint64_t v5 = v9;
LABEL_13:

      return;
    }

    goto LABEL_14;
  }

uint64_t sub_10004A048(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (a2 && (uint64_t v7 = 0, sub_100049648((uint64_t)[kIAPVideoTVOutFitSystem UTF8String], (char **)&v7), v7))
    {
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v5 = -[NSString initWithUTF8String:](v4, "initWithUTF8String:", v7);
      if (-[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutFitSystem_ScaleToFill))
      {
        -[NSString caseInsensitiveCompare:](v5, "caseInsensitiveCompare:", kIAPVideoTVOutFitSystem_ScaleToFit);
        uint64_t v6 = 1LL;
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      free(v7);
    }

    else
    {
      uint64_t v6 = 1LL;
    }

    return v6;
  }

  return result;
}

void sub_10004A124(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a3 < 4)
  {
    dword_10011C8C4 = a3;
    sub_100048304(a1, a2);
    sub_1000493F8(a2);
    return;
  }

  __break(0x550Au);
}

uint64_t sub_10004A16C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = dword_10011C8C4;
  if (dword_10011C8C4 >= 4) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

void sub_10004A194(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v6 = (void **)&kIAPVideoTVOutReservedForiPodOut_YES;
    if (!a3) {
      uint64_t v6 = (void **)&kIAPVideoTVOutReservedForiPodOut_NO;
    }
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_11;
    }
    uint64_t v9 = v5;
    if (!a2)
    {
      uint64_t v8 = "NULL";
      goto LABEL_10;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_10:
      sub_1000CEA98( 0xCu,  @"Video %@ setting set to %@ for port %s",  @"iPod Out video reserved",  v7,  v8);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutReservedForiPodOut UTF8String],  objc_msgSend(v7, "UTF8String"));
      uint64_t v5 = v9;
LABEL_11:

      return;
    }
  }

  __break(0x5516u);
}

void sub_10004A284(uint64_t a1, uint64_t a2, int a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    uint64_t v6 = (void **)&kIAPVideoTVOutReservedForRemoteUI_YES;
    if (!a3) {
      uint64_t v6 = (void **)&kIAPVideoTVOutReservedForRemoteUI_NO;
    }
    uint64_t v7 = *v6;
    if (!*v6) {
      goto LABEL_11;
    }
    uint64_t v9 = v5;
    if (!a2)
    {
      uint64_t v8 = "NULL";
      goto LABEL_10;
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_10:
      sub_1000CEA98( 0xCu,  @"Video %@ setting set to %@ for port %s",  @"RemoteUI video reserved",  v7,  v8);
      NSLog( @"%s:%d Not setting tv out setting %s to %s on current platform",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  896,  [kIAPVideoTVOutReservedForRemoteUI UTF8String],  objc_msgSend(v7, "UTF8String"));
      uint64_t v5 = v9;
LABEL_11:

      return;
    }
  }

  __break(0x5516u);
}

tm *sub_10004A374(tm *result, _WORD *a2, char *a3)
{
  if (!result) {
    goto LABEL_12;
  }
  time_t v7 = 0xAAAAAAAAAAAAAAAALL;
  time(&v7);
  uint64_t result = localtime(&v7);
  uint64_t v5 = result->tm_gmtoff / 60;
  if (v5 != (__int16)v5)
  {
LABEL_13:
    __break(0x5507u);
    return result;
  }

  *a2 = v5;
  if (((unint64_t)&result->tm_isdst & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    goto LABEL_13;
  }

  if (result->tm_isdst) {
    char v6 = 60;
  }
  else {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_10004A428(unsigned __int8 *a1, uint64_t a2, unsigned int a3)
{
  if (a1 && (a1 & 7) == 0)
  {
    byte_10011C8C8 = a3;
    if (!a2)
    {
      char v6 = "NULL";
      goto LABEL_7;
    }

    if ((a2 & 7) == 0)
    {
      char v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 208LL))(a2);
LABEL_7:
      sub_1000CEA98( 0xCu,  @"%s:%s-%d _videoOutAuthorized = %d for port %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetVideoOutAuthorized",  1280LL,  a3,  v6);
      sub_100048304(a1, a2);
      sub_1000493F8(a2);
      return;
    }
  }

  __break(0x5516u);
}

BOOL sub_10004A4E0(BOOL result)
{
  if (result && !(result & 7)) {
    return byte_10011C8C8 != 0;
  }
  __break(0x5516u);
  return result;
}

NSNumber *sub_10004A504(NSNumber *result, uint64_t a2)
{
  if (!a2)
  {
    NSLog( @"ERROR - %s:%s - %d need a transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "GetUSBMode",  1341LL);
    return 0LL;
  }

  if ((a2 & 7) != 0) {
    goto LABEL_20;
  }
  uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber);
  if (((a2 + 84) & 3) != 0) {
    goto LABEL_20;
  }
  uint64_t v3 = -[NSNumber initWithInt:](result, "initWithInt:", *(unsigned int *)(a2 + 84));
  id v4 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v3);

  if (!v4 || (uint64_t result = (NSNumber *)[v4 service], !(_DWORD)result))
  {
    NSLog( @"ERROR - %s:%s - %d need an port manager (%hhx)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "GetUSBMode",  1337LL,  a2);
    return 0LL;
  }

  int v8 = -1;
  unsigned __int8 v7 = 0;
  if (((a2 + 80) & 7) != 0)
  {
LABEL_20:
    __break(0x5516u);
    goto LABEL_21;
  }

  uint64_t ServiceWithPort = IOAccessoryPortGetServiceWithPort(*(unsigned int *)(a2 + 80));
  uint64_t ManagerService = IOAccessoryPortGetManagerService(ServiceWithPort);
  uint64_t result = (NSNumber *)IOAccessoryManagerGetUSBConnectType(ManagerService, &v8, &v7);
  if (!(_DWORD)result)
  {
    if (v7 < 2u)
    {
      if (!v7) {
        return 0LL;
      }
      if ((v8 + 8) <= 0xF)
      {
        return 0LL;
      }
    }

uint64_t sub_10004A690(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  if (!a2)
  {
    NSLog( @"ERROR - %s:%s - %d need a transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetUSBMode",  1406LL);
    return 1LL;
  }

  if ((a2 & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = objc_alloc(&OBJC_CLASS___NSNumber);
  if (((a2 + 84) & 3) != 0) {
    goto LABEL_21;
  }
  id v5 = [(id)result initWithInt:*(unsigned int *)(a2 + 84)];
  id v6 = objc_msgSend( objc_msgSend(+[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"), "iapPortManagers"),  "objectForKey:",  v5);

  if (!v6 || (uint64_t result = (uint64_t)[v6 service], !(_DWORD)result))
  {
    NSLog( @"ERROR - %s:%s - %d need an port manager (%hhx)",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetUSBMode",  1402LL,  a2);
    return 1LL;
  }

  if (((a2 + 80) & 7) != 0)
  {
LABEL_21:
    __break(0x5516u);
    goto LABEL_22;
  }

  uint64_t ServiceWithPort = IOAccessoryPortGetServiceWithPort(*(unsigned int *)(a2 + 80));
  io_service_t ManagerService = IOAccessoryPortGetManagerService(ServiceWithPort);
  io_connect_t connect = 0;
  uint64_t v9 = IOServiceOpen(ManagerService, mach_task_self_, 0, &connect);
  if ((_DWORD)v9 || (uint64_t result = connect) == 0)
  {
    NSLog( @"ERROR - %s:%s - %d Couldn't connect to port (%hhx) because of error 0x%x\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetUSBMode",  1398LL,  a2,  v9);
    return 1LL;
  }

  if (a3 < 8)
  {
    uint64_t v10 = IOAccessoryManagerConfigureUSBMode();
    if ((_DWORD)v10 != -536870183)
    {
      if ((_DWORD)v10) {
        NSLog( @"ERROR - %s:%s - %d unable to set USB mode 0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetUSBMode",  1394LL,  v10);
      }
    }

    IOServiceClose(connect);
    return 1LL;
  }

void sub_10004A880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (!a2)
    {
      NSLog( @"ERROR - %s:%s - %d need a transport",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetAudioIn",  1427LL);
      return;
    }

    if (!*(void *)(a1 + 144)) {
      *(void *)(a1 + 144) = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v6 = objc_alloc(&OBJC_CLASS___NSNumber);
    if (a3 < 4)
    {
      unsigned __int8 v7 = -[NSNumber initWithUnsignedInt:](v6, "initWithUnsignedInt:", a3);
      int v8 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
      [*(id *)(a1 + 144) setObject:v7 forKey:v8];

      return;
    }
  }

  __break(0x550Au);
}

void *sub_10004A96C(void *result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = result;
    if ((result & 7) == 0)
    {
      if (a2 && result[18])
      {
        uint64_t v3 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a2);
        id v4 = objc_msgSend(objc_msgSend((id)v2[18], "objectForKey:", v3), "unsignedIntValue");

        __break(0x550Au);
      }

      return 0LL;
    }
  }

  __break(0x5516u);
  return result;
}

BOOL sub_10004A9EC(BOOL result, std::string *a2)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v4 = (void *)SBSCopyNowPlayingAppBundleIdentifier();
    id v5 = v4;
    if (v4)
    {
      std::string::assign(a2, (const std::string::value_type *)[v4 UTF8String]);
      CFRelease(v5);
    }

    return v5 != 0LL;
  }

  return result;
}

BOOL sub_10004AA68(BOOL result, std::string *a2)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = (void *)SBSCopyNowPlayingAppBundleIdentifier();
    if (v3)
    {
      id v4 = objc_msgSend( +[LSApplicationProxy applicationProxyForIdentifier:]( LSApplicationProxy,  "applicationProxyForIdentifier:",  v3),  "localizedNameForContext:",  0);
      if (v4) {
        id v5 = v4;
      }
      else {
        id v5 = v3;
      }
      std::string::assign( a2,  -[NSString UTF8String]( +[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v5),  "UTF8String"));
      CFRelease(v3);
    }

    return v3 != 0LL;
  }

  return result;
}

uint64_t sub_10004AAF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_37;
  }
  unsigned __int8 v7 = (const __CFString *)SBSCopyFrontmostApplicationDisplayIdentifier();
  __int16 v22 = 0;
  uint64_t v8 = SBSSpringBoardServerPort(v7);
  SBGetScreenLockStatus(v8, (char *)&v22 + 1, &v22);
  if (!v7
    || (v23.size_t length = CFStringGetLength(v7),
        v23.location = 0LL,
        CFStringCompareWithOptions(v7, @"com.apple.Music", v23, 1uLL) == kCFCompareEqualTo)
    || (v24.size_t length = CFStringGetLength(v7),
        v24.location = 0LL,
        CFStringCompareWithOptions(v7, @"com.apple.mobileipod", v24, 1uLL) == kCFCompareEqualTo)
    || (v25.size_t length = CFStringGetLength(v7),
        int v9 = 1,
        v25.location = 0LL,
        CFStringCompareWithOptions(v7, @"com.apple.videos", v25, 1uLL) == kCFCompareEqualTo))
  {
    int v9 = 0;
  }

  int v10 = (HIBYTE(v22) != 0) & ~v9;
  if (!(_BYTE)v22) {
    int v10 = 0;
  }
  char v11 = v9 | v10;
  sub_1000CEA98( 3u,  @"Launch Application (iAP1), launchToBackground=%d (frontMostApp = %@),  screenLocked = %d, passcodeRequired = %d"),  v9 | v10,  v7,  HIBYTE(v22),  v22);
  int v12 = objc_autoreleasePoolPush();
  int v13 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a6);
  if (v13)
  {
    std::string::size_type v14 = v13;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10004ADA8;
    v21[3] = &unk_100101EB0;
    v21[4] = v13;
    id v15 = objc_msgSend( objc_msgSend(objc_msgSend((id)qword_10011BDE8, "foregroundAppBundleIDs"), "objectsPassingTest:", v21),  "count");
    char v16 = v11 ^ 1;
    if (!v15) {
      char v16 = 1;
    }
    if ((v16 & 1) == 0)
    {
      sub_1000CEA98(3u, @"Attempting to background launch same application in foreground", v20);
LABEL_25:
      uint64_t v17 = 1LL;
LABEL_33:
      NSLog(@"Launch Application (iAP1), launching app %@, wasSuccessful=%d", v14, v17);
      goto LABEL_34;
    }

    if ((v11 & 1) != 0)
    {
      if (!MKBDeviceUnlockedSinceBoot())
      {
        uint64_t v19 = MKBDeviceUnlockedSinceBoot();
        sub_1000CEA98(3u, @"Restricted from launching = %d", v19);
        uint64_t v17 = 0LL;
        goto LABEL_33;
      }

      if (qword_10011BDD0 != -1) {
        dispatch_once(&qword_10011BDD0, &stru_100105110);
      }
      uint64_t result = qword_10011BDC8;
      if (qword_10011BDC8 && (qword_10011BDC8 & 7) == 0)
      {
        uint64_t v18 = *(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 328LL);
LABEL_32:
        uint64_t v17 = v18();
        goto LABEL_33;
      }
    }

    else
    {
      if (v15)
      {
        sub_1000CEA98(3u, @"skipping app launch of %@ because it's already in the foreground", v14);
        goto LABEL_25;
      }

      if (qword_10011BDD0 != -1) {
        dispatch_once(&qword_10011BDD0, &stru_100105110);
      }
      uint64_t result = qword_10011BDC8;
      if (qword_10011BDC8 && (qword_10011BDC8 & 7) == 0)
      {
        uint64_t v18 = *(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 336LL);
        goto LABEL_32;
      }
    }

uint64_t sub_10004ADA8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = (uint64_t)[*(id *)(a1 + 32) caseInsensitiveCompare:a2];
  if (result) {
    return 0LL;
  }
  if (a3)
  {
    uint64_t result = 1LL;
    *a3 = 1;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_10004ADF0(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  unsigned int v2 = +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", a2, 4LL);
  if (v2)
  {
    uint64_t v5 = FBSOpenApplicationOptionKeyUnlockDevice;
    id v6 = &__kCFBooleanTrue;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    _BYTE v4[2] = sub_10004AEF0;
    v4[3] = &unk_100105470;
    void v4[4] = v2;
    objc_msgSend( +[FBSSystemService sharedService](FBSSystemService, "sharedService"),  "openApplication:options:withResult:",  v2,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1),  v4);
  }

  return 1LL;
}

void sub_10004AEF0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    NSLog( @"%s:%s-%d error launching app %@ is %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "virtual BOOL ISL::SystemStatus::LaunchApplicationToForeground(const char *)_block_invoke",  1596LL,  *(void *)(a1 + 32),  a2);
  }
  else {
    sub_1000CEA98(3u, @"Launching app %@ succeeded, taking process assertion", *(void *)(a1 + 32));
  }
}

uint64_t sub_10004AF54(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  unsigned int v2 = +[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", a2, 4LL);
  id v3 = objc_alloc_init(sub_1000D00C0(@"UIAccessoryBackgroundTaskAction", 0LL));
  id v4 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", v3, 0LL);
  v7[0] = FBSOpenApplicationOptionKeyActivateSuspended;
  v7[1] = FBSOpenApplicationOptionKeyActions;
  v8[0] = &__kCFBooleanTrue;
  v8[1] = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10004B0A0;
  void v6[3] = &unk_100105470;
  v6[4] = v2;
  objc_msgSend( +[FBSSystemService sharedService](FBSSystemService, "sharedService"),  "openApplication:options:withResult:",  v2,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v8,  v7,  2),  v6);

  return 1LL;
}

void sub_10004B0A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSLog( @"%s:%s-%d error launching app %@ is %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "virtual BOOL ISL::SystemStatus::LaunchApplicationToBackground(const char *)_block_invoke",  1621LL,  *(void *)(a1 + 32),  a2);
  }

  else
  {
    sub_1000CEA98(3u, @"Launching app %@ succeeded, taking process assertion", *(void *)(a1 + 32));
    objc_msgSend( +[EAManager sharedManager](EAManager, "sharedManager"),  "takeProcessAssertionForBundleID:",  *(void *)(a1 + 32));
  }

void sub_10004B12C(uint64_t a1, const void *a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  uint64_t v5 = objc_autoreleasePoolPush();
  id v6 = -[NSString stringByAppendingPathComponent:]( NSHomeDirectory(),  "stringByAppendingPathComponent:",  @"Library/Logs/CrashReporter/");
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  *(_OWORD *)cStr = 0u;
  __int128 v13 = 0u;
  if (!qword_10011BDF8 && !gethostname(cStr, 0x100uLL)) {
    qword_10011BDF8 = (uint64_t)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x600u);
  }
  unsigned __int8 v7 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss ZZZ");
  uint64_t v8 = -[NSDateFormatter stringFromDate:](v7, "stringFromDate:", +[NSDate date](&OBJC_CLASS___NSDate, "date"));

  int v9 = -[NSString stringByAppendingPathComponent:]( v6,  "stringByAppendingPathComponent:",  -[NSString stringByAppendingPathExtension:]( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"haywire_%@_%@",  v8,  qword_10011BDF8),  "stringByAppendingPathExtension:",  @"plist"));
  int v10 = fopen(-[NSString fileSystemRepresentation](v9, "fileSystemRepresentation"), "w");
  if (v10)
  {
    char v11 = v10;
    fwrite(a2, 1uLL, a3, v10);
    fclose(v11);
    -[NSString fileSystemRepresentation](v9, "fileSystemRepresentation");
    syslog(4, "%s:%s accessory user-level crashlog generated at %s");
  }

  else
  {
    syslog(4, "%s:%s-%d can't open fp\n");
  }

  objc_autoreleasePoolPop(v5);
}

void sub_10004B328(uint64_t a1, const void *a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v5 = objc_autoreleasePoolPush();
    id v6 = -[NSString stringByAppendingPathComponent:]( NSHomeDirectory(),  "stringByAppendingPathComponent:",  @"Library/Logs/CrashReporter/Panics/");
    unsigned __int8 v7 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
    -[NSDateFormatter setDateFormat:](v7, "setDateFormat:", @"yyyy-MM-dd HH:mm:ss ZZZ");
    uint64_t v8 = -[NSDateFormatter stringFromDate:](v7, "stringFromDate:", +[NSDate date](&OBJC_CLASS___NSDate, "date"));

    int v9 = -[NSString stringByAppendingPathComponent:]( v6,  "stringByAppendingPathComponent:",  -[NSString stringByAppendingPathExtension:]( -[NSString stringByAppendingPathExtension:](v8, "stringByAppendingPathExtension:", @"panic"),  "stringByAppendingPathExtension:",  @"plist"));
    mkdir(-[NSString fileSystemRepresentation](v6, "fileSystemRepresentation"), 0x1E8u);
    int v10 = fopen(-[NSString fileSystemRepresentation](v9, "fileSystemRepresentation"), "w");
    if (v10)
    {
      char v11 = v10;
      fwrite(a2, 1uLL, a3, v10);
      fclose(v11);
      -[NSString fileSystemRepresentation](v9, "fileSystemRepresentation");
      syslog(4, "%s:%s accessory kernel-level crashlog generated at %s");
    }

    else
    {
      syslog(4, "%s:%s-%d can't open fp\n");
    }

    objc_autoreleasePoolPop(v5);
  }

uint64_t sub_10004B498(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL);
    if (!v1) {
      return 0LL;
    }
    unsigned int v2 = (const void *)v1;
    id v3 = (const __CFArray *)WiFiManagerClientCopyDevices();
    if (v3)
    {
      id v4 = v3;
      if (CFArrayGetCount(v3)
        && (ValueAtIndex = CFArrayGetValueAtIndex(v4, 0LL),
            (id v6 = (const void *)WiFiDeviceClientCopyCurrentNetwork(ValueAtIndex)) != 0LL))
      {
        CFRelease(v6);
        uint64_t v7 = 1LL;
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      CFRelease(v4);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    CFRelease(v2);
    return v7;
  }

  return result;
}

BOOL sub_10004B540(BOOL result)
{
  if (!result || result & 7)
  {
    __break(0x5516u);
  }

  else
  {
    __int16 v2 = 0;
    uint64_t v1 = SBSSpringBoardServerPort();
    SBGetScreenLockStatus(v1, (char *)&v2 + 1, &v2);
    return HIBYTE(v2) != 0;
  }

  return result;
}

BOOL sub_10004B588(BOOL result)
{
  if (result && !(result & 7)) {
    return _AXSAssistiveTouchEnabled() != 0;
  }
  __break(0x5516u);
  return result;
}

void sub_10004B5B4(uint64_t a1, char *a2, unsigned int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v5 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL);
    if (v5)
    {
      id v6 = (const void *)v5;
      uint64_t v7 = (const __CFArray *)WiFiManagerClientCopyDevices();
      if (v7)
      {
        uint64_t v8 = v7;
        if (CFArrayGetCount(v7))
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v8, 0LL);
          uint64_t v10 = WiFiDeviceClientCopyCurrentNetwork(ValueAtIndex);
          if (v10)
          {
            char v11 = (const void *)v10;
            SSID = (const __CFString *)WiFiNetworkGetSSID();
            CFStringGetCString(SSID, a2, a3, 0x8000100u);
            CFRelease(v11);
          }
        }

        CFRelease(v8);
      }

      CFRelease(v6);
    }
  }

void sub_10004B67C(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_40;
  }
  uint64_t v3 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL);
  if (v3)
  {
    id v4 = (const void *)v3;
    uint64_t v5 = (const __CFArray *)WiFiManagerClientCopyDevices();
    if (!v5)
    {
LABEL_27:
      CFRelease(v4);
      return;
    }

    id v6 = v5;
    if (!CFArrayGetCount(v5))
    {
LABEL_26:
      CFRelease(v6);
      goto LABEL_27;
    }

    ValueAtIndex = CFArrayGetValueAtIndex(v6, 0LL);
    uint64_t v8 = WiFiDeviceClientCopyCurrentNetwork(ValueAtIndex);
    if (!v8)
    {
      if (a2 && (a2 & 7) == 0)
      {
        *(_DWORD *)a2 = 3;
        goto LABEL_26;
      }

      goto LABEL_40;
    }

    int v9 = (const void *)v8;
    SSID = (const __CFString *)WiFiNetworkGetSSID();
    if (!a2 || (a2 & 7) != 0)
    {
LABEL_40:
      __break(0x5516u);
      goto LABEL_41;
    }

    CFStringGetCString(SSID, (char *)(a2 + 4), 33LL, 0x8000100u);
    *(_DWORD *)a2 = 0;
    if (WiFiNetworkIsWEP(v9))
    {
      if (((a2 + 40) & 7) != 0) {
        goto LABEL_40;
      }
      *(_DWORD *)(a2 + 40) = 1;
    }

    else
    {
      if (!WiFiNetworkIsWPA(v9))
      {
        char v11 = (const __CFString *)WiFiNetworkCopyPassword(v9);
        if (!v11) {
          goto LABEL_18;
        }
        goto LABEL_13;
      }

      __int128 v15 = (int *)(a2 + 40);
      if (((a2 + 40) & 7) != 0) {
        goto LABEL_40;
      }
      int *v15 = 2;
      __int128 v16 = (const __CFDictionary *)WiFiNetworkCopyRecord(v9);
      if (v16)
      {
        __int128 v17 = v16;
        int v18 = CFDictionaryContainsKey(v16, @"WPA_IE");
        if (CFDictionaryContainsKey(v17, @"RSN_IE"))
        {
          if (v18) {
            int v19 = 4;
          }
          else {
            int v19 = 3;
          }
          int *v15 = v19;
        }

        CFRelease(v17);
      }

      else
      {
        *(_DWORD *)a2 = 3;
      }
    }

    char v11 = (const __CFString *)WiFiNetworkCopyPassword(v9);
    if (!v11)
    {
LABEL_20:
      *(_DWORD *)a2 = 1;
LABEL_21:
      CFRelease(v9);
      goto LABEL_26;
    }

id sub_10004B8B0(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 addStatusBarItem:a3];
  }

  else
  {
    Class v3 = sub_1000D00C0(@"UIStatusBarServer", 0LL);
    return -[objc_class addStatusBarItem:](v3, "addStatusBarItem:", 19LL);
  }

id sub_10004B8E4(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    return [a1 removeStatusBarItem:a3];
  }

  else
  {
    Class v3 = sub_1000D00C0(@"UIStatusBarServer", 0LL);
    return -[objc_class removeStatusBarItem:](v3, "removeStatusBarItem:", 19LL);
  }

void sub_10004B918()
{
  if (qword_10011C898)
  {
    CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10011C898);
    CFRelease((CFTypeRef)qword_10011C898);
    qword_10011C898 = 0LL;
  }

uint64_t sub_10004B968(uint64_t result, unsigned int a2)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 32LL))( result,  327687LL,  a2,  0LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004B994(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)result + 64LL))( result,  327705LL,  0LL,  a2,  0LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004B9C4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)result + 32LL))( result,  327685LL,  0LL,  0LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004B9F0(uint64_t result, char a2)
{
  char v2 = a2;
  if (result && (result & 7) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, char *, uint64_t))(*(void *)result + 56LL))( result,  327707LL,  0LL,  &v2,  1LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004BA3C(uint64_t a1, int *a2, unint64_t a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_6:
    __break(0x5500u);
  }

  unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
  int v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 2);
  unint64_t v6 = bswap64(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, int *, uint64_t))(*(void *)a1 + 56LL))( a1,  327708LL,  0LL,  &v4,  14LL);
}

uint64_t sub_10004BAE0(uint64_t result, int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    memset(v13, 170, sizeof(v13));
    sub_100009E64(v13);
    sub_10004BC9C((uint64_t)v13);
    if (v13[2])
    {
      for (uint64_t i = (void *)v13[0]; i != &v13[1]; sub_100008A4C((uint64_t *)&i))
      {
        memset(v11, 170, 18);
        int v4 = sub_10004BE24((uint64_t *)&i);
        int v5 = *(_DWORD *)v4;
        LOWORD(v11[4]) = *((_WORD *)v4 + 2);
        void v11[3] = v5;
        if (BTDeviceFromAddress(qword_10011C8A8, &v11[3], &v11[1]))
        {
          NSLog( @"ERROR - %s:%s - %d BTDeviceFromAddress failed.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "PostBluetoothConnectionStatusNotificationAboutKnownDevices",  2013LL);
        }

        else
        {
          if (BTDeviceGetConnectedServices(*(void *)&v11[1], v11))
          {
            NSLog( @"WARNING - %s:%s - %d BTDeviceGetConnectedServices failed.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "PostBluetoothConnectionStatusNotificationAboutKnownDevices",  2020LL);
            v11[0] = 0;
          }

          if (a2) {
            v11[0] = 0;
          }
          unint64_t v6 = sub_10004BE24((uint64_t *)&i);
          int v7 = *(_DWORD *)v6;
          __int16 v10 = *((_WORD *)v6 + 2);
          int v9 = v7;
          if (v11[0] == -1) {
            uint64_t v8 = -1LL;
          }
          else {
            uint64_t v8 = v11[0] & 0x1FFFBLL;
          }
          (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v2 + 656LL))(v2, &v9, v8);
        }
      }
    }

    return sub_100028890((uint64_t)v13);
  }

  return result;
}

void sub_10004BC84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_10004BC9C(uint64_t a1)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[6] = v2;
  v10[7] = v2;
  v10[4] = v2;
  void v10[5] = v2;
  uint64_t v10[2] = v2;
  void v10[3] = v2;
  v10[0] = v2;
  v10[1] = v2;
  sub_10004D254(a1);
  if (qword_10011C8A8 && !BTLocalDeviceGetDefault(qword_10011C8A8, &v9))
  {
    if (BTLocalDeviceGetConnectedDevices(v9, v10, &v8, 16LL))
    {
      NSLog( @"ERROR - %s:%s - %d failed getting connected BT devices",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTFindKnownDevices",  2100LL);
    }

    else if (v8)
    {
      uint64_t v3 = 0LL;
      while (1)
      {
        __int16 v7 = -21846;
        int v6 = -1431655766;
        if (v3 == 16) {
          break;
        }
        if (sub_10004C2E8(*((void *)v10 + v3), (uint64_t)&v6))
        {
          NSLog( @"ERROR - %s:%s - %d failed getting MAC address for device",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTFindKnownDevices",  2110LL);
          return;
        }

        int v4 = v6;
        __int16 v5 = v7;
        sub_10004C360(a1, (uint64_t)&v4);
        if (++v3 >= v8) {
          return;
        }
      }

      __break(0x5512u);
    }
  }

  else
  {
    NSLog( @"ERROR - %s:%s - %d failed getting local BT device",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTFindKnownDevices",  2092LL);
  }

uint64_t *sub_10004BE24(uint64_t *result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v1 = *result;
      if (*result)
      {
        if ((v1 & 7) == 0) {
          return (uint64_t *)(v1 + 25);
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10004BE4C(uint64_t a1, int *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_7;
  }

  uint64_t v6 = 0LL;
  __int16 v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  int v9 = 0;
  __int128 v2 = *(dispatch_queue_s **)(a1 + 160);
  if (!v2)
  {
LABEL_7:
    __break(0x5510u);
    goto LABEL_8;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768LL;
  block[2] = sub_10004BF10;
  block[3] = &unk_100105498;
  int v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 2);
  void block[4] = &v6;
  void block[5] = a1;
  dispatch_sync(v2, block);
  if (*((_DWORD *)v7 + 6) < 4u)
  {
    _Block_object_dispose(&v6, 8);
    return;
  }

uint64_t sub_10004BF10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = *(void *)(v2 + 152);
  if (result) {
    BOOL v4 = (*(void *)(v2 + 152) & 7LL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    goto LABEL_19;
  }
  uint64_t result = sub_10004D390(result, a1 + 48);
  uint64_t v9 = result;
  uint64_t v5 = *(void *)(v2 + 152);
  if (!v5 || (*(void *)(v2 + 152) & 7LL) != 0) {
    goto LABEL_19;
  }
  uint64_t v7 = v5 + 8;
  if ((v7 & 7) != 0) {
    goto LABEL_19;
  }
  if (v7 == result) {
    return result;
  }
  uint64_t result = (uint64_t)sub_10004BFC8(&v9);
  if (!result || (result & 3) != 0 || ((result + 8) & 3) != 0)
  {
LABEL_19:
    __break(0x5516u);
    goto LABEL_20;
  }

  unsigned int v8 = *(_DWORD *)(result + 8);
  if (v8 >= 4)
  {
LABEL_20:
    __break(0x550Au);
    return result;
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v8;
  return result;
}

uint64_t *sub_10004BFC8(uint64_t *result)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t result = sub_10004D548(result)) == 0LL
    || (result & 3) != 0)
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_10004BFF8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 4_Block_object_dispose(va, 8) = v2;
  return result;
}

void sub_10004C010(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0 || !a2) {
    goto LABEL_9;
  }
  if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFFALL)
  {
    __break(0x5513u);
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02X:%02X:%02X:%02X:%02X:%02X",  *a2,  a2[1],  a2[2],  a2[3],  a2[4],  a2[5]);
  if (a3 >= 4)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  NSLog( @"INFO - %s:%s - %d  setting mode %d for MAC address %@",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "SetMode",  2053LL,  a3,  v6);
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 160);
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768LL;
    block[2] = sub_10004C140;
    block[3] = &unk_1001054C8;
    void block[4] = a1;
    int v8 = *(_DWORD *)a2;
    __int16 v12 = *((_WORD *)a2 + 2);
    int v10 = a3;
    int v11 = v8;
    dispatch_sync(v7, block);
    return;
  }

void sub_10004C140(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 152);
  if (v3) {
    BOOL v4 = (*(void *)(v2 + 152) & 7LL) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4
    && ((v5 = a1 + 44, uint64_t v6 = sub_10004D390(v3, a1 + 44), (v7 = *(uint64_t **)(v2 + 152)) != 0LL)
      ? (BOOL v8 = (*(void *)(v2 + 152) & 7LL) == 0)
      : (BOOL v8 = 0),
        v8 && ((unint64_t)(v7 + 1) & 7) == 0))
  {
    unsigned int v9 = *(_DWORD *)(a1 + 40);
    if (v7 + 1 == (uint64_t *)v6)
    {
      if (v9 <= 3)
      {
LABEL_17:
        sub_10004C1F0((uint64_t)v7, v5);
        *int v10 = v9;
        return;
      }
    }

    else if (v9 < 4)
    {
      if (!v9)
      {
        sub_10004D578(v7, v6);
        return;
      }

      goto LABEL_17;
    }
  }

  else
  {
    __break(0x5516u);
  }

  __break(0x550Au);
}

void sub_10004C1F0(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v4 = (uint64_t *)sub_10004D5F4(a1, &v8, a2);
  uint64_t v5 = (void *)*v4;
  if (*v4)
  {
  }

  else
  {
    uint64_t v6 = v4;
    memset(v7, 170, sizeof(v7));
    sub_10004D778((_DWORD *)a1, a2, v7);
    sub_100008FEC(a1, v8, v6, (void *)v7[0]);
    uint64_t v5 = v7[0];
    v7[0] = 0LL;
    sub_10004D814(v7, 0LL);
    if (!v5) {
      goto LABEL_11;
    }
  }

  if ((v5 & 7) != 0 || (((_BYTE)v5 + 28) & 3) != 0) {
LABEL_11:
  }
    __break(0x5516u);
}

uint64_t sub_10004C2D0(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 44);
  *(_WORD *)(result + 4_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(result + 44) = v2;
  return result;
}

uint64_t sub_10004C2E8(uint64_t a1, uint64_t a2)
{
  uint64_t result = BTDeviceGetAddressString(a1, v4, 23LL);
  if (!(_DWORD)result) {
    return BTDeviceAddressFromString(v4, a2);
  }
  return result;
}

void sub_10004C360(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  sub_10004CF04(a1, a2, a2);
  if ((v2 & 0xFE) != 0) {
LABEL_6:
  }
    __break(0x550Au);
}

uint64_t sub_10004C398(uint64_t a1)
{
  __int16 v5 = -21846;
  int v3 = -1431655766;
  int v4 = -1431655766;
  if (sub_10004C2E8(a1, (uint64_t)&v4)) {
    NSLog( @"ERROR - %s:%s - %d _BTGetMACAddress failed.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTPostConnectionStatus",  2156LL);
  }
  if (BTDeviceGetConnectedServices(a1, &v3))
  {
    NSLog( @"WARNING - %s:%s - %d BTDeviceGetConnectedServices failed.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTPostConnectionStatus",  2162LL);
    int v3 = 0;
  }

  if (qword_10011BDD0 != -1) {
    dispatch_once(&qword_10011BDD0, &stru_100105110);
  }
  uint64_t result = qword_10011BDC8;
  if (qword_10011BDC8 && (qword_10011BDC8 & 7) == 0) {
    return (*(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 656LL))();
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004C4A4(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  if (a3 >= 4)
  {
    __break(0x550Au);
    return a1;
  }

  if (a3 != 1)
  {
    if (a3 || (a2 & 0x1FFFB) == 0 || a4 != 11 || a5) {
      return a1;
    }
    return sub_10004C398(a1);
  }

  if ((a2 & 0x1FFFB) != 0 && a4 == 12) {
    return sub_10004C398(a1);
  }
  return a1;
}

uint64_t sub_10004C4FC(uint64_t result, unsigned int a2)
{
  if (a2 >= 0x10)
  {
    __break(0x550Au);
LABEL_13:
    __break(0x5516u);
    return result;
  }

  if (!a2)
  {
    int v2 = -1431655766;
    uint64_t result = BTLocalDeviceGetModulePower(result, 1LL, &v2);
    if ((_DWORD)result)
    {
      int v2 = 0;
      goto LABEL_5;
    }

    if (!v2)
    {
LABEL_5:
      if (qword_10011BDD0 != -1) {
        dispatch_once(&qword_10011BDD0, &stru_100105110);
      }
      uint64_t result = qword_10011BDC8;
      if (qword_10011BDC8 && (qword_10011BDC8 & 7) == 0) {
        return (*(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 664LL))();
      }
      goto LABEL_13;
    }
  }

  return result;
}

void sub_10004C59C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a3)
  {
    NSLog( @"ERROR - %s:%s - %d called with a BTResult of %d",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTSessionCallback",  2328LL,  a3);
    return;
  }

  if (a2 >= 4)
  {
    __break(0x550Au);
LABEL_19:
    __break(0x5516u);
    return;
  }

  if (a2 == 2)
  {
    qword_10011C8A8 = 0LL;
    if ((objc_msgSend( +[IAPServer sharedIAPServer](IAPServer, "sharedIAPServer"),  "isShuttingDown") & 1) == 0) {
      sub_100047EB8();
    }
  }

  else if (!a2)
  {
    if (!a1)
    {
      NSLog( @"ERROR - %s:%s - %d called with a NULL BTSession",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "_BTSessionCallback",  2312LL);
      return;
    }

    qword_10011C8A8 = a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
    if (!BTLocalDeviceGetDefault(a1, &v8))
    {
      __int128 v6 = off_1001054F8;
      uint64_t v7 = 0LL;
      BTLocalDeviceAddCallbacks(v8, &v6, 0LL);
    }

    BTServiceAddCallbacks(a1, sub_10004C4A4, a4);
    *(void *)&__int128 v6 = 0LL;
    BTAccessoryManagerGetDefault(a1, &v6);
    if (qword_10011BDD0 != -1) {
      dispatch_once(&qword_10011BDD0, &stru_100105110);
    }
    if (qword_10011BDC8 && (qword_10011BDC8 & 7) == 0)
    {
      (*(void (**)(void))(*(void *)qword_10011BDC8 + 664LL))();
      return;
    }

    goto LABEL_19;
  }

void sub_10004C720(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v25 = v4;
  __int128 v26 = v4;
  *(_OWORD *)__dst = v4;
  __int128 v24 = v4;
  __int16 v22 = -21846;
  int v21 = -1431655766;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v18 = 0LL;
  int v17 = 0;
  if (!qword_10011C8A8)
  {
    NSLog( @"ERROR - %s:%s - %d NULL BT session",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2363LL);
    return;
  }

  int v7 = *(_DWORD *)(a3 + 8);
  int v8 = *(_DWORD *)(a3 + 12);
  if (BTLocalDeviceGetDefault(qword_10011C8A8, &v18))
  {
    NSLog( @"ERROR - %s:%s - %d failed getting local BT device",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2369LL);
    return;
  }

  if (BTAccessoryManagerGetDefault(qword_10011C8A8, &v19))
  {
    NSLog( @"ERROR - %s:%s - %d failed getting  BT accessory manager",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2375LL);
    return;
  }

  if (BTLocalDeviceGetModulePower(v18, 1LL, &v17))
  {
    NSLog( @"ERROR - %s:%s - %d failed getting local BT device power status",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2381LL);
    return;
  }

  if (!v17)
  {
    NSLog( @"INFO %s:%s - %d local BT device is powered off",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2388LL);
    return;
  }

  uint64_t v9 = sub_1000BE638();
  if (!v9 || (v9 & 7) != 0) {
    goto LABEL_36;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 96LL))(v9, *a2);
  uint64_t v11 = v10;
  if (v10)
  {
    if ((v10 & 7) != 0) {
      goto LABEL_36;
    }
    __int16 v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 104LL))(v10);
    if (v12)
    {
      if ((v12 & 3) == 0)
      {
        strlcpy(__dst, v12, 0x40uLL);
        goto LABEL_21;
      }

LABEL_36:
      __break(0x5516u);
      return;
    }
  }

  __int128 v25 = 0u;
  __int128 v26 = 0u;
  *(_OWORD *)__dst = 0u;
  __int128 v24 = 0u;
LABEL_21:
  int v21 = *(_DWORD *)(a3 + 38);
  __int16 v22 = *(_WORD *)(a3 + 42);
  if (BTAccessoryManagerRegisterDevice(v19, &v21, __dst, *(unsigned int *)(a3 + 16), a3 + 22, &v20))
  {
    NSLog( @"WARNING %s:%s - %d  %s failed.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUpdateStatus",  2416LL,  __dst);
    return;
  }

  if (v11 && v20)
  {
    sub_1000BE638();
    if ((v11 & 7) == 0)
    {
      int v13 = v8 & v7;
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40LL))(v11);
      uint64_t v15 = sub_1000BF55C(v14);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 88LL))(v11) == 12)
      {
        uint64_t v16 = *a1;
        if (v13)
        {
          (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 680))(a1, v19, v20, 1LL, v15);
          return;
        }

        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v16 + 688))(a1, v19, v20, 1LL);
        if (v15 && (v15 & 7) == 0)
        {
          sub_1000587EC((uint64_t *)v15, v20);
          return;
        }
      }

      else if (v15 && (v15 & 7) == 0)
      {
        sub_1000586D0(v15, v19, v20, v13 != 0, 0);
        return;
      }
    }

    goto LABEL_36;
  }

    __break(0x5516u);
    return result;
  }

  syslog(4, "GetNowPlayingApp failed to return now playing app bundleID\n");
LABEL_33:
  return v5;
}

  __break(0x5516u);
LABEL_37:
  __break(0x5513u);
  return result;
}

  __break(0x550Cu);
  return result;
}

  __break(0x550Cu);
  return result;
}

  __break(0x550Au);
  return result;
}

      __break(0x5513u);
      goto LABEL_37;
    }

    sub_100009E9C((uint64_t)v23);
    return;
  }

  if (*(_BYTE *)(v2 + 1)) {
    goto LABEL_36;
  }
  uint64_t v20 = *(unsigned __int8 *)v2;
  int v21 = 0;
  sub_100083230((uint64_t)v23, a1 + 261);
  if (!a1[264]) {
    goto LABEL_36;
  }
LABEL_28:
  int v14 = sub_10004783C();
  if (!v14 || (v14 & 7) != 0) {
    goto LABEL_44;
  }
  if (v20 <= 1)
  {
    (*(void (**)(uint64_t, void))(*(void *)v14 + 320LL))(v14, v21);
    goto LABEL_36;
  }

  if ((v3 & 0x80000) != 0)
  {
    int v13 = *(void *)(result + 56);
    if (!v13 || (v13 & 7) != 0 || ((v13 + 16) & 7) != 0) {
      goto LABEL_105;
    }
    if ((~*(_DWORD *)(v13 + 16) & 0x10800) != 0)
    {
      int v14 = (_DWORD *)(v13 + 24);
      if ((~*v14 & 0x10800LL) != 0) {
        __int128 v4 = 7;
      }
    }
  }

  if ((((_BYTE)result + 72) & 7) != 0) {
    goto LABEL_105;
  }
  if (*(void *)(result + 80) != *(void *)(result + 72) || *(void *)(result + 120))
  {
    uint64_t v15 = *(void *)(result + 56);
    if (!v15 || (v15 & 7) != 0 || ((v15 + 16) & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v15 + 17) & 6) == 0)
    {
      uint64_t v16 = v15 + 24;
      if ((v16 & 7) != 0) {
        goto LABEL_105;
      }
      if ((*(_BYTE *)(v16 + 1) & 6) == 0) {
        __int128 v4 = 7;
      }
    }
  }

  int v17 = v1 & v2;
  if ((v17 & 1) != 0 && (uint64_t v18 = *(void *)(result + 48)) != 0)
  {
    if ((v18 & 7) != 0) {
      goto LABEL_105;
    }
    uint64_t v19 = (int *)(v18 + 20);
  }

  else
  {
    if ((v17 & 0x100) == 0) {
      goto LABEL_85;
    }
    uint64_t v20 = *(void *)(result + 128);
    if (!v20) {
      goto LABEL_85;
    }
    if ((v20 & 7) != 0) {
      goto LABEL_105;
    }
    uint64_t v19 = (int *)(v20 + 20);
  }

  int v21 = *v19;
  if ((v21 & 0x400) != 0)
  {
    __int16 v22 = *(void *)(result + 56);
    if (!v22 || (v22 & 7) != 0 || ((v22 + 16) & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v22 + 16) & 0x10) == 0)
    {
      __int128 v23 = (_BYTE *)(v22 + 24);
      if ((*v23 & 0x10) == 0) {
        __int128 v4 = 7;
      }
    }
  }

  if ((v21 & 2) != 0)
  {
    __int128 v24 = *(void *)(result + 56);
    if (!v24 || (v24 & 7) != 0 || ((v24 + 16) & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v24 + 16) & 2) == 0)
    {
      __int128 v25 = (_BYTE *)(v24 + 24);
      if ((*v25 & 2) == 0) {
        __int128 v4 = 7;
      }
    }
  }

  if ((v21 & 8) == 0)
  {
    __int128 v26 = *(void *)(result + 56);
    if (!v26) {
      goto LABEL_105;
    }
    if ((v26 & 7) != 0) {
      goto LABEL_105;
    }
    __int128 v27 = v26 + 16;
    if ((v27 & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v27 + 1) & 8) != 0) {
      __int128 v4 = 7;
    }
  }

  __break(0x5516u);
  return result;
}

  __break(0x5507u);
LABEL_37:
  __break(0x5500u);
  return result;
}

    __break(0x5516u);
  }

  int v8 = 0;
  LODWORD(v11) = 0;
LABEL_23:
  __int16 v12 = *(void *)(a2 + 8);
  int v14 = -86;
  int v13 = bswap32(v11) | 0xAAAAAAAA00000000LL;
  if ((unint64_t)&v13 >= 0xFFFFFFFFFFFFFFFCLL)
  {
LABEL_38:
    __break(0x5500u);
    goto LABEL_39;
  }

  HIDWORD(v13) = bswap32(v8);
  if ((unint64_t)&v13 >= 0xFFFFFFFFFFFFFFF8LL)
  {
LABEL_39:
    __break(0x5513u);
    return result;
  }

  int v14 = v6;
  sub_1000AC324(a2, v12, 0, 4LL, 29, *(_DWORD *)(a2 + 68), &v13, 9u);
  return 0LL;
}

      __break(0x550Au);
      goto LABEL_37;
    }

    uint64_t result = sub_10009A408((uint64_t)v3, a2, a3);
    if ((_DWORD)result != -1)
    {
      uint64_t v9 = v3[304];
      if (v9 <= 3)
      {
        uint64_t v10 = result;
        sub_100097398((uint64_t)v3, v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128LL))(a2, v10);
        return 0LL;
      }

      goto LABEL_36;
    }

    return 22LL;
  }

  uint64_t result = sub_1000438B8();
  if (!result || (result & 7) != 0)
  {
LABEL_35:
    __break(0x5516u);
    goto LABEL_36;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 80LL))(result);
  if ((_DWORD)result)
  {
    if ((a3 + 1) > 1)
    {
      uint64_t result = 22LL;
    }

    else
    {
      sub_100097398((uint64_t)v3, 2u);
      uint64_t result = 0LL;
    }
  }

  v3[351] = -1;
  v3[352] = a3;
  return result;
}

  __break(0x550Au);
  return result;
}

        __break(0x5516u);
        goto LABEL_37;
      }
    }

    uint64_t v19 = 0LL;
LABEL_33:
    sub_1000AD43C((uint64_t)v19);
    return;
  }

    __break(0x5513u);
  }

    __break(0x5513u);
  }

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

void sub_10004CA58(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_15;
  }
  if (!a3)
  {
    __break(0x5518u);
    goto LABEL_15;
  }

  uint64_t v9 = BTAccessoryManagerPlugInDevice(a2, a3);
  if (!(_DWORD)v9 || (_DWORD)v9 == 603)
  {
    if (!a4) {
      goto LABEL_11;
    }
    if (a5 && (a5 & 7) == 0)
    {
      sub_1000586D0(a5, a2, a3, 0, 1);
      goto LABEL_11;
    }

void sub_10004CB48(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_12;
  }
  if (!a3)
  {
    __break(0x5518u);
LABEL_12:
    __break(0x5516u);
    return;
  }

  uint64_t v6 = BTAccessoryManagerUnplugDevice(a2);
  if ((_DWORD)v6 && (_DWORD)v6 != 604) {
    NSLog( @"ERROR - %s:%s-%d BTAccessoryManagerUnplugDevice failed (with %d result)!",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUnplugDevice",  2486LL,  v6);
  }
  if (a4)
  {
    if (BTDeviceDisconnect(a3)) {
      NSLog( @"ERROR - %s:%s-%d BTDeviceDisconnect failed!",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/SystemStatus.mm",  "BluetoothUnplugDevice",  2495LL);
    }
  }

uint64_t sub_10004CC00(uint64_t result, std::string *a2, BOOL a3)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_36;
  }
  memset(&__str, 0, sizeof(__str));
  if (qword_10011BDD0 != -1) {
    dispatch_once(&qword_10011BDD0, &stru_100105110);
  }
  uint64_t result = qword_10011BDC8;
  if (!qword_10011BDC8 || (qword_10011BDC8 & 7) != 0) {
    goto LABEL_36;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)qword_10011BDC8 + 304LL))();
  if ((_DWORD)v5)
  {
    if (!std::string::compare(&__str, "com.apple.mobileipod")
      || (uint64_t result = std::string::compare(&__str, "com.apple.Music"), !(_DWORD)result))
    {
      int v7 = "com.apple.mobileipod";
      if (!dword_100119914) {
        goto LABEL_31;
      }
      uint64_t result = sub_100036FF0();
      if (result && (result & 7) == 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)result + 504LL))(result) & 1) != 0)
        {
          int v7 = "com.apple.iapd.radio";
          goto LABEL_31;
        }

        uint64_t result = sub_100036FF0();
        if (result && (result & 7) == 0)
        {
          goto LABEL_31;
        }
      }
    }

    else
    {
      if (dword_100119910)
      {
LABEL_14:
        if (!std::string::compare(&__str, "com.apple.podcasts") || !std::string::compare(&__str, "com.apple.iBooks"))
        {
LABEL_20:
          int v7 = "com.apple.mobileipod";
LABEL_31:
          std::string::assign(&__str, v7);
LABEL_32:
          std::string::operator=(a2, &__str);
          goto LABEL_33;
        }

void sub_10004CDF4( _Unwind_Exception *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_10004CE0C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004CE20(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004CE34(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004CE48(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CE60(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004CE74(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CE8C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CEA4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CEBC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CED4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004CEEC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void sub_10004CF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = (uint64_t *)sub_10004CFDC(a1, &v9, a2);
  uint64_t v6 = (void *)*v5;
  if (*v5)
  {
LABEL_10:
    __break(0x5516u);
    return;
  }

  int v7 = v5;
  memset(v8, 170, sizeof(v8));
  sub_10004D154((char *)a1, a3, v8);
  sub_100008FEC(a1, v9, v7, (void *)v8[0]);
  uint64_t v6 = v8[0];
  v8[0] = 0LL;
  sub_10004D1D0(v8, 0LL);
  if (!v6) {
    return;
  }
LABEL_8:
}

uint64_t sub_10004CFDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a1) {
    goto LABEL_31;
  }
  uint64_t v5 = a1;
  if ((a1 & 7) != 0) {
    goto LABEL_31;
  }
  __int128 v4 = a2;
  a1 = sub_100008C24(a1);
  uint64_t v7 = v5 + 8;
  if (((v5 + 8) & 7) != 0) {
    goto LABEL_31;
  }
  if (!a1)
  {
    a1 = v5 + 8;
    goto LABEL_33;
  }

  if ((((_BYTE)v5 + 16) & 7) != 0 || (a1 & 7) != 0) {
    goto LABEL_31;
  }
  while (1)
  {
    unsigned int v8 = bswap32(*(_DWORD *)a3);
    int v3 = (uint64_t *)bswap32(*(_DWORD *)(a1 + 25));
    if (v8 == (_DWORD)v3)
    {
      unsigned int v8 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      unsigned int v9 = bswap32(*(unsigned __int16 *)(a1 + 29));
      if (v8 == HIWORD(v9)) {
        break;
      }
      int v3 = (uint64_t *)HIWORD(v9);
    }

    int v11 = v8 < v3 ? -1 : 1;
    if ((v11 & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = *(void *)a1;
    if (!*(void *)a1)
    {
      uint64_t v7 = a1;
      goto LABEL_33;
    }

LABEL_27:
    if ((v10 & 7) != 0) {
      goto LABEL_31;
    }
    uint64_t v7 = a1;
    a1 = v10;
  }

  unsigned int v12 = bswap32(*(_DWORD *)(a1 + 25));
  int v3 = (uint64_t *)bswap32(*(_DWORD *)a3);
  if (v12 == (_DWORD)v3)
  {
    unsigned int v12 = bswap32(*(unsigned __int16 *)(a1 + 29)) >> 16;
    int v3 = (uint64_t *)bswap32(*(unsigned __int16 *)(a3 + 4));
    int v3 = (uint64_t *)(v3 >> 16);
  }

  else {
    int v13 = 1;
  }
  if (v13 < 0)
  {
    int v3 = (uint64_t *)(a1 + 8);
    if (((a1 + 8) & 7) != 0) {
      goto LABEL_31;
    }
    uint64_t v10 = *v3;
    if (!*v3) {
      goto LABEL_32;
    }
    a1 += 8LL;
    goto LABEL_27;
  }

  __break(0x550Cu);
  return result;
}

  __break(0x5512u);
  return result;
}

      __break(0x5513u);
      goto LABEL_28;
    }

    __break(0x5518u);
LABEL_25:
    __break(0x5516u);
    goto LABEL_26;
  }

  __break(0x5516u);
  return result;
}

    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

  __break(0x5516u);
LABEL_28:
  __break(0x5513u);
LABEL_29:
  __break(0x5500u);
  return result;
}

  __break(0x5516u);
  return result;
}

                __break(0x550Au);
                return result;
              }
            }

            else
            {
              __break(0x5518u);
            }
          }
        }
      }
    }

  __break(0x5507u);
  return result;
}

  __break(0x5516u);
  return result;
}

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    goto LABEL_28;
  }

  *(_DWORD *)(a1 + 144) = 0;
LABEL_23:
  *(_DWORD *)(a1 + 14_Block_object_dispose(va, 8) = 0;
  if (a8)
  {
    sub_1000AC214(a1, a8, a4, 0, 0);
    __int128 v23 = *(void **)(a1 + 24);
    if (v23)
    {
      *(_WORD *)(a1 + 12_Block_object_dispose(va, 8) = a8;
      memcpy(v23, a7, a8);
    }
  }

    __break(0x5516u);
  }

  return result;
}

      __break(0x5516u);
      return;
    }

    uint64_t v7 = v9;
    if ((v9 & 7) != 0) {
      goto LABEL_27;
    }
    if (sub_10001864C(v9) != v5 && *(void *)(v5 + 32))
    {
      uint64_t v10 = sub_10001864C(v7);
      sub_10008D56C(a1, v10, v7);
      sub_10008D480(a1, (void *)v5, v7);
    }
  }

  unsigned int v8 = 0;
  if (v5) {
    goto LABEL_18;
  }
LABEL_24:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
  if (a3) {
    *a3 = v8;
  }
}

  __break(0x5516u);
LABEL_28:
  __break(0x5500u);
  return result;
}

    __break(0x5516u);
LABEL_28:
    __break(0x5513u);
    goto LABEL_29;
  }

  if (!__OFADD__((_DWORD)result, 1))
  {
    uint64_t v15 = (char *)malloc((int)result + 1);
    *a3 = v15;
    if (!v15)
    {
LABEL_11:
      uint64_t v16 = 0LL;
LABEL_23:
      xmlFreeTextWriter(v11);
      goto LABEL_24;
    }

    goto LABEL_16;
  }

char *sub_10004D154@<X0>(char *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result
    || (result & 7) != 0
    || (__int128 v4 = result + 8, ((unint64_t)(result + 8) & 7) != 0)
    || (memset(a3, 170, 24),
        uint64_t result = (char *)operator new(0x20uLL),
        *a3 = result,
        a3[1] = v4,
        (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(_DWORD *)(result + 25) = *(_DWORD *)a2;
    *(_WORD *)(result + 29) = *(_WORD *)(a2 + 4);
    *((_BYTE *)a3 + 16) = 1;
  }

  return result;
}

void sub_10004D1D0(void **a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  int v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    if ((v4 & 7) == 0)
    {
      sub_10004D204(v4, v3);
      return;
    }

    goto LABEL_7;
  }

void sub_10004D204(uint64_t a1, void *__p)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (*(unsigned __int8 *)(a1 + 8) >= 2u)
    {
      __break(0x550Au);
      return;
    }

    if (*(_BYTE *)(a1 + 8))
    {
    }

    else
    {
      if (!__p) {
        return;
      }
      if (*(void *)a1)
      {
LABEL_8:
        operator delete(__p);
        return;
      }
    }
  }

  __break(0x5516u);
}

void sub_10004D254(uint64_t a1)
{
  if (!a1
    || (a1 & 7) != 0
    || (int v2 = (void *)sub_100008C24(a1), sub_1000288D4(a1, v2), (((_BYTE)a1 + 16) & 7) != 0)
    || (*(void *)(a1 + 16) = 0LL, ((a1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)a1 = a1 + 8;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
  }

uint64_t sub_10004D2B4(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    int v2 = (void *)sub_100008C24(result);
    sub_10004D2F8(v1, v2);
    return v1;
  }

  return result;
}

void sub_10004D2F8(uint64_t a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    return;
  }

  if (a2)
  {
    if ((a2 & 7) == 0 && (*a2 & 7LL) == 0)
    {
      sub_10004D2F8(a1);
      if (((unint64_t)(a2 + 1) & 7) == 0 && (a2[1] & 7LL) == 0)
      {
        sub_10004D2F8(a1);
        if ((((_BYTE)a1 + 8) & 7) == 0 && (((_BYTE)a2 + 28) & 3) == 0)
        {
          operator delete(a2);
          return;
        }
      }
    }

    goto LABEL_12;
  }

uint64_t sub_10004D390(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t result = sub_100008C24(result);
      uint64_t v4 = v2 + 8;
      if (((v2 + 8) & 7) == 0)
      {
        uint64_t result = sub_10004D47C(v2, a2, result, v2 + 8);
        uint64_t v10 = result;
        if (v4 == result) {
          return v4;
        }
        if ((((_BYTE)v2 + 16) & 7) == 0)
        {
          uint64_t v5 = sub_10004D548(&v10);
          unsigned int v6 = bswap32(*(_DWORD *)a2);
          unsigned int v7 = bswap32(*(_DWORD *)v5);
          if (v6 == v7)
          {
            unsigned int v6 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
            unsigned int v8 = bswap32(*((unsigned __int16 *)v5 + 2));
            if (v6 == HIWORD(v8)) {
              return v10;
            }
            unsigned int v7 = HIWORD(v8);
          }

          if (v6 < v7) {
            int v9 = -1;
          }
          else {
            int v9 = 1;
          }
          if (v9 < 0) {
            return v4;
          }
          return v10;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10004D47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 && (a1 & 7) == 0)
  {
    if (!a3) {
      return a4;
    }
    if ((((_BYTE)a1 + 16) & 7) == 0 && (a3 & 7) == 0)
    {
      while (((a3 + 28) & 3) == 0)
      {
        unsigned int v4 = bswap32(*(_DWORD *)(a3 + 28));
        unsigned int v5 = bswap32(*(_DWORD *)a2);
        if (v4 == v5)
        {
          unsigned int v4 = bswap32(*(unsigned __int16 *)(a3 + 32)) >> 16;
          unsigned int v6 = bswap32(*(unsigned __int16 *)(a2 + 4));
          if (v4 == HIWORD(v6)) {
            goto LABEL_18;
          }
          unsigned int v5 = HIWORD(v6);
        }

        if (v4 < v5) {
          int v8 = -1;
        }
        else {
          int v8 = 1;
        }
        if ((v8 & 0x80000000) == 0)
        {
LABEL_18:
          uint64_t v7 = *(void *)a3;
          if (!*(void *)a3) {
            return a3;
          }
          goto LABEL_19;
        }

        if (((a3 + 8) & 7) != 0) {
          break;
        }
        uint64_t v7 = *(void *)(a3 + 8);
        if (!v7) {
          return a4;
        }
        a3 = a4;
LABEL_19:
        if ((v7 & 7) != 0) {
          break;
        }
        a4 = a3;
        a3 = v7;
      }
    }
  }

  __break(0x5516u);
  return a3;
}

uint64_t *sub_10004D548(uint64_t *result)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v1 = *result) == 0
    || (v1 & 7) != 0
    || (uint64_t result = (uint64_t *)(v1 + 28), ((v1 + 28) & 3) != 0))
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t *sub_10004D578(uint64_t *result, uint64_t a2)
{
  uint64_t v5 = a2;
  if (!result
    || (char v2 = (char)result, (result & 7) != 0)
    || (a2 & 7) != 0
    || (uint64_t result = sub_10000963C(result, a2), ((v2 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v4 = result;
    sub_10004D548(&v5);
    operator delete((void *)a2);
    return v4;
  }

  return result;
}

uint64_t sub_10004D5F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a1 || (v5 = a1, (a1 & 7) != 0) || (unsigned int v4 = a2, a1 = sub_100008C24(a1), v7 = v5 + 8, ((v5 + 8) & 7) != 0))
  {
LABEL_32:
    __break(0x5516u);
LABEL_33:
    uint64_t v7 = a1;
    a1 = v3;
    goto LABEL_34;
  }

  if (a1)
  {
    if ((((_BYTE)v5 + 16) & 7) == 0 && (a1 & 7) == 0)
    {
      while (1)
      {
        int v8 = (unsigned int *)(a1 + 28);
        if (((a1 + 28) & 3) != 0) {
          goto LABEL_32;
        }
        unsigned int v9 = bswap32(*(_DWORD *)a3);
        unsigned int v10 = bswap32(*v8);
        if (v9 == v10)
        {
          unsigned int v9 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
          unsigned int v11 = bswap32(*(unsigned __int16 *)(a1 + 32));
          if (v9 == HIWORD(v11)) {
            goto LABEL_18;
          }
          unsigned int v10 = HIWORD(v11);
        }

        if (v9 < v10) {
          uint64_t v3 = 0xFFFFFFFFLL;
        }
        else {
          uint64_t v3 = 1LL;
        }
        if ((v3 & 0x80000000) != 0)
        {
          uint64_t v12 = *(void *)a1;
          if (!*(void *)a1)
          {
            uint64_t v7 = a1;
            goto LABEL_34;
          }

          goto LABEL_28;
        }

_DWORD *sub_10004D778@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_8;
  }
  unsigned int v4 = (char *)(result + 2);
  if (((unint64_t)(result + 2) & 7) != 0
    || (memset(a3, 170, 24), uint64_t result = operator new(0x28uLL),
                             *a3 = result,
                             a3[1] = v4,
                             (result & 7) != 0)
    || ((unint64_t)(result + 7) & 3) != 0
    || (result[7] = *(_DWORD *)a2,
        *((_WORD *)result + 16) = *(_WORD *)(a2 + 4),
        *((_BYTE *)a3 + 16) = 1,
        ((unint64_t)(result + 9) & 3) != 0))
  {
LABEL_8:
    __break(0x5516u);
  }

  else
  {
    result[9] = 0;
    *((_BYTE *)a3 + 17) = 1;
  }

  return result;
}

void sub_10004D814(void **a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (uint64_t)(a1 + 1);
    if ((v4 & 7) == 0)
    {
      sub_10004D848(v4, v3);
      return;
    }

    goto LABEL_7;
  }

void sub_10004D848(uint64_t a1, void *__p)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)(a1 + 8) > 1u)
  {
LABEL_20:
    __break(0x550Au);
    return;
  }

  if (*(_BYTE *)(a1 + 8))
  {
  }

  else
  {
    if (!__p) {
      return;
    }
    if (*(void *)a1)
    {
LABEL_15:
      operator delete(__p);
      return;
    }
  }

void sub_10004DB00(_Unwind_Exception *a1)
{
}

void sub_10004DB20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:BKSApplicationStateKey]);
  id v5 = [v4 unsignedIntegerValue];

  unsigned int v6 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v6);
  if (!WeakRetained) {
    goto LABEL_9;
  }
  int v8 = WeakRetained;
  id v9 = objc_loadWeakRetained(v6);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 foregroundBundleIDsQueue]);

  if (!v10) {
    goto LABEL_9;
  }
  id v11 = objc_loadWeakRetained(v6);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 foregroundBundleIDsQueue]);
  if (v12)
  {
    unsigned int v13 = (dispatch_queue_s *)v12;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004DCF8;
    block[3] = &unk_1001055A0;
    v23[1] = v5;
    objc_copyWeak(v23, v6);
    id v14 = v3;
    id v22 = v14;
    dispatch_sync(v13, block);

    id v15 = objc_loadWeakRetained(v6);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 delegate]);
    if (v16)
    {
      id v17 = objc_loadWeakRetained(v6);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 delegate]);
      char v19 = objc_opt_respondsToSelector(v18, "applicationStateChanged:");

      if ((v19 & 1) == 0)
      {
LABEL_8:

        objc_destroyWeak(v23);
LABEL_9:

        return;
      }

      id v15 = objc_loadWeakRetained(v6);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 delegate]);
      [v20 applicationStateChanged:v14];
    }

    goto LABEL_8;
  }

  __break(0x5510u);
}

void sub_10004DCE4(_Unwind_Exception *a1)
{
}

void sub_10004DCF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id *)(a1 + 40);
  if (v2 == 32 || v2 == 8)
  {
    id WeakRetained = objc_loadWeakRetained(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained foregroundAppBundleIDsMutable]);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:BKSApplicationStateDisplayIDKey]);
    [v5 addObject:v6];
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained foregroundAppBundleIDsMutable]);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:BKSApplicationStateDisplayIDKey]);
    [v5 removeObject:v6];
  }
}

void sub_10004DE48(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) foregroundAppBundleIDsMutable]);
  [v2 removeAllObjects];

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v3 + 24) >= 2u)
  {
    __break(0x550Au);
    goto LABEL_7;
  }

  if (!*(_BYTE *)(v3 + 24)) {
    return;
  }
  if ((((int)v3 + 16) & 7LL) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  objc_msgSend(*(id *)(v3 + 16), "removeObserver:");
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
}

void sub_10004DF74(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 24LL))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) elements]);
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v3 = v2;
    id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          int v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
          NSLog(@"First time, use layoutMonitor to add bundleID %@ to foreground app list", v9);

          unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) foregroundAppBundleIDsMutable]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
          [v10 addObject:v11];
        }

        id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v5);
    }

    uint64_t v12 = *(void *)(a1 + 32);
    if ((((int)v12 + 16) & 7LL) != 0)
    {
      __break(0x5516u);
    }

    else
    {
      objc_msgSend(*(id *)(v12 + 16), "removeObserver:");
      *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
    }
  }

uint64_t sub_10004E248(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004E258(uint64_t a1)
{
}

void sub_10004E260(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) foregroundAppBundleIDsMutable]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_10004E34C()
{
  if (qword_10011BE08 != -1) {
    dispatch_once(&qword_10011BE08, &stru_100105660);
  }
  return qword_10011BE00;
}

void sub_10004E38C(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x78uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004E3E8(v1);
    qword_10011BE00 = v2;
  }

void sub_10004E3D4(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E3E8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_10001B6E4(result);
    *(void *)uint64_t v1 = off_100105690;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004E4B0;
    block[3] = &unk_100101CB8;
    void block[4] = v1;
    dispatch_async(&_dispatch_main_q, block);
    *(void *)(v1 + 96) = 0LL;
    int v3 = 0;
    CTIndicatorsCopyVoicemailStatus(0LL, &v3, 0LL);
    int v2 = v3;
    *(_DWORD *)(v1 + 104) = v3;
    *(_DWORD *)(v1 + 10_Block_object_dispose(va, 8) = v2;
    *(void *)(v1 + 112) = 0LL;
    return v1;
  }

  return result;
}

void sub_10004E498(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E4B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = CTTelephonyCenterSetDefaultDispatchQueue(&_dispatch_main_q);
  uint64_t Default = CTTelephonyCenterGetDefault(v2);
  CTTelephonyCenterAddObserver(Default, v1, sub_10004E558, kCTCallStatusChangeNotification, 0LL, 4LL);
  CTTelephonyCenterAddObserver(Default, v1, sub_10004E558, kCTCallAlternateStatusChangeNotification, 0LL, 4LL);
  return CTTelephonyCenterAddObserver(Default, v1, sub_10004E614, kCTIndicatorsVoiceMailNotification, 0LL, 4LL);
}

void sub_10004E558(int a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef theDict)
{
  int Value = CFDictionaryGetValue(theDict, kCTCall);
  unsigned int Status = CTCallGetStatus(Value);
  if (Status >= 6)
  {
    syslog(4, "unknown call status, setting to idle");
    unsigned int Status = 0;
  }

  if (kCTCallStatusChangeNotification == a3)
  {
    if (a2 && (a2 & 7) == 0)
    {
      sub_10004E85C(a2, Status);
      return;
    }

uint64_t sub_10004E614(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  uint64_t result = CTIndicatorsCopyVoicemailStatus(0LL, &v4, 0LL);
  if (a2 && (a2 & 7) == 0) {
    return sub_10004E8DC(a2, v4, v4);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004E66C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (*(void *)uint64_t result = off_100102218,
        pthread_mutex_destroy((pthread_mutex_t *)(result + 32)),
        uint64_t result = v1 + 8,
        ((v1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100009E9C(result);
    return v1;
  }

  return result;
}

uint64_t sub_10004E6DC(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100105690;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004E760;
    block[3] = &unk_100101CB8;
    void block[4] = result;
    dispatch_sync(&_dispatch_main_q, block);
    return sub_10004E66C(v1);
  }

  return result;
}

uint64_t sub_10004E760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = CTTelephonyCenterSetDefaultDispatchQueue(&_dispatch_main_q);
  uint64_t Default = CTTelephonyCenterGetDefault(v2);
  return CTTelephonyCenterRemoveEveryObserver(Default, v1);
}

uint64_t sub_10004E790(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10004E6DC(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10004E7A4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004E6DC(a1);
    operator delete((void *)a1);
  }

void sub_10004E7DC(_Unwind_Exception *a1)
{
}

uint64_t sub_10004E7F0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 96);
  if (result >= 8) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_10004E814(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 100);
  if (result >= 8) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_10004E838(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *a2 = *(_DWORD *)(result + 104);
    *a3 = *(_DWORD *)(result + 108);
  }

  return result;
}

uint64_t sub_10004E85C(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 < 8)
  {
    *(_DWORD *)(result + 96) = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 56LL))( result,  917505LL,  0LL,  result + 96,  4LL);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10004E89C(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 < 8)
  {
    *(_DWORD *)(result + 100) = a2;
    return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)result + 56LL))( result,  917506LL,  0LL,  result + 100,  4LL);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10004E8DC(uint64_t result, int a2, int a3)
{
  if (!result || (int v3 = (_DWORD *)result, (result & 7) != 0)) {
    __break(0x5516u);
  }
  *(_DWORD *)(result + 104) = a2;
  *(_DWORD *)(result + 10_Block_object_dispose(va, 8) = a3;
  if (*(_DWORD *)(result + 112) != a2 || *(_DWORD *)(result + 116) != a3)
  {
    v5[0] = a2;
    v5[1] = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, _DWORD *, uint64_t))(*(void *)result + 56LL))( result,  917507LL,  0LL,  v5,  8LL);
    a2 = v3[26];
  }

  int v4 = v3[27];
  v3[28] = a2;
  v3[29] = v4;
  return result;
}

uint64_t sub_10004E98C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100105740;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_WORD *)(result + 32) = 0;
    *(void *)(result + 36) = -1LL;
    *(_DWORD *)(result + 44) = -1;
    if (dword_100119978 == -1)
    {
      AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"doNotFillNonCurrentItemWithAppName",  @"com.apple.iapd",  0LL);
      dword_100119978 = AppBooleanValue == 0;
      sub_1000CEA98( 0,  @"%s:%d __fillNonCurrentItemWithAppName=%d",  "TrackAccessor",  45LL,  AppBooleanValue == 0);
    }

    return v1;
  }

  return result;
}

uint64_t sub_10004EA40(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10004E98C(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004EA54(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100105740;

    *(void *)(v1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v1 + 16) = 0LL;

    *(void *)(v1 + 24) = 0LL;
    return v1;
  }

  return result;
}

uint64_t sub_10004EAB4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10004EA54(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10004EAC8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10004EA54(a1);
    operator delete((void *)a1);
  }

void sub_10004EB00(_Unwind_Exception *a1)
{
}

uint64_t sub_10004EB14(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10004EB2C(result, 1);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004EB2C(uint64_t result, int a2)
{
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t result = sub_100036FF0();
  if (!result || (result & 7) != 0) {
    goto LABEL_22;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 592LL))(result))
  {
    uint64_t result = 1LL;
    goto LABEL_10;
  }

  uint64_t result = sub_100036FF0();
  if (!result || (result & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    goto LABEL_23;
  }

  uint64_t result = sub_1000393F0(result, a2);
LABEL_10:
  if ((*(_DWORD *)(v2 + 44) & 0x80000000) == 0 || (*(_DWORD *)(v2 + 40) & 0x80000000) == 0)
  {
    BOOL v4 = 1;
    goto LABEL_13;
  }

  unsigned int v6 = *(unsigned __int8 *)(v2 + 33);
  if (v6 > 1)
  {
LABEL_23:
    __break(0x550Au);
    return result;
  }

  BOOL v4 = v6 != 0;
LABEL_13:
  if (*(void *)(v2 + 8)) {
    return 1LL;
  }
  if (*(_BYTE *)(v2 + 32)) {
    int v5 = 1;
  }
  else {
    int v5 = result;
  }
  return v4 | v5;
}

uint64_t sub_10004EBF4(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  if (*(unsigned __int8 *)(result + 32) >= 2u)
  {
LABEL_12:
    __break(0x550Au);
    return result;
  }

  if (*(_BYTE *)(result + 32))
  {
    uint64_t result = sub_100036FF0();
    if (result && (result & 7) == 0) {
      return (uint64_t)sub_10003FD14((id *)result);
    }
    goto LABEL_11;
  }

  if (!*(void *)(result + 8)) {
    return 0LL;
  }
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  id v3 = objc_msgSend( objc_msgSend(*(id *)(v1 + 8), "valueForProperty:", MPMediaItemPropertyPersistentID),  "unsignedLongLongValue");

  return (uint64_t)v3;
}

void sub_10004EC94(uint64_t a1, std::string *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v4 = sub_100036FF0();
    if (!v4 || (v4 & 7) != 0) {
      goto LABEL_49;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 608LL))(v4))
    {
      uint64_t v5 = sub_100036FF0();
      if (v5 && (v5 & 7) == 0)
      {
        sub_100041860((id *)v5, *(unsigned int *)(a1 + 36), a2);
        return;
      }

      goto LABEL_49;
    }
  }

  if (*(_BYTE *)(a1 + 32))
  {
    uint64_t v6 = sub_100036FF0();
    if (v6 && (v6 & 7) == 0)
    {
      sub_10004126C(v6, a2);
      return;
    }

    goto LABEL_49;
  }

  if (*(void *)(a1 + 8))
  {
    id v17 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v7 = [*(id *)(a1 + 8) valueForProperty:MPMediaItemPropertyTitle];
    if (v7)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v7, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_35:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_35;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_35;
    }

LABEL_49:
    __break(0x5516u);
    goto LABEL_50;
  }

  if ((char)a2->__r_.__value_.__s.__size_ < 0)
  {
    if (!a2->__r_.__value_.__r.__words[0]) {
      goto LABEL_49;
    }
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0LL;
  }

  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2->__r_.__value_.__s.__size_ = 0;
  }

  if (dword_100119978)
  {
    int v8 = objc_autoreleasePoolPush();
    if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
    {
      if ((*(_DWORD *)(a1 + 44) & 0x80000000) != 0)
      {
        uint64_t v16 = sub_100036FF0();
        if (!v16 || (v16 & 7) != 0) {
          goto LABEL_49;
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 536LL))(v16, a2);
LABEL_45:
        objc_autoreleasePoolPop(v8);
        return;
      }

      uint64_t v13 = sub_10002CD78();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_49;
      }
      unsigned int v10 = sub_10002D200((__CFString *)v13, (uint64_t)@"IAP_ITUNES_GENIUS_MIX");
      if (*(unsigned __int8 *)(a1 + 33) <= 1u)
      {
        id v11 = v10;
        if (!*(_BYTE *)(a1 + 33))
        {
          int v12 = *(_DWORD *)(a1 + 44);
          goto LABEL_42;
        }

    uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 24LL))(v66);
    if (v67 <= 1)
    {
      __int128 v27 = (char *)v17 + v23;
      if (v67 == 1)
      {
        __int128 v28 = 3;
      }

      else
      {
        __int128 v28 = 2;
      }

      __CFString *v27 = v28;
      uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 24LL))(&v65);
      if (!HIWORD(HIDWORD(v65)))
      {
        *(_WORD *)(v27 + 1) = bswap32(HIDWORD(v65)) >> 16;
        uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 24LL))(v64);
        if (!HIWORD(LODWORD(v64[0])))
        {
          *(_WORD *)(v27 + 3) = bswap32(v64[0]) >> 16;
          uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 32LL))(&v63);
          if (!HIWORD(HIDWORD(v63)))
          {
            *(_WORD *)(v27 + 5) = bswap32(HIDWORD(v63)) >> 16;
            uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 32LL))(&v62);
            if (!WORD1(v62))
            {
              *(_WORD *)(v27 + 7) = bswap32(v62) >> 16;
              uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 32LL))(&v60);
              if (!HIWORD(v61))
              {
                *(_WORD *)(v27 + 9) = bswap32(v61) >> 16;
                uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 32LL))(&v58);
                if (!HIWORD(v59))
                {
                  *(_WORD *)(v27 + 11) = bswap32(v59) >> 16;
                  uint64_t result = (unint64_t)(*(void *(**)(uint64_t *__return_ptr))(*(void *)a4 + 24LL))(&v56);
                  *(_DWORD *)(v27 + 13) = bswap32(v57);
                  uint64_t v20 = v27 + 17;
                  goto LABEL_69;
                }
              }
            }
          }
        }
      }

            __break(0x5500u);
          }

          uint64_t v18 = qword_10011C980;
          if (!qword_10011C980) {
            goto LABEL_113;
          }
LABEL_100:
          if ((v18 & 7) != 0) {
            goto LABEL_113;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(v18 + 1224));
          return 0LL;
        }
      }

    sub_1000CEAEC(0, 4, "%s:%d CIapLingoUsbHostControl::NotifyEvent bad event: 0x%02X\n");
    return v14;
  }

  if (a2 == 8) {
    return v14;
  }
  if (a2 != 32)
  {
    if (a2 == 64)
    {
      if (!result || (result & 7) != 0) {
        goto LABEL_70;
      }
      uint64_t result = sub_100054B88(result, a4);
      if ((_DWORD)result)
      {
        if (a3 != 4) {
          return v14;
        }
        if (*(unsigned __int8 *)(v4 + 1266) <= 1u)
        {
          if (*(_BYTE *)(v4 + 1266))
          {
            if (*(_BYTE *)(v4 + 1265))
            {
              uint64_t result = sub_10004783C();
              if (result)
              {
                if ((result & 7) == 0)
                {
                  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 280LL))( result,  a4,  2LL,  1LL))
                  {
                    *(_BYTE *)(v4 + 126_Block_object_dispose(va, 8) = 1;
                  }

                  BOOL v14 = sub_1000A93C4(*(void *)(v4 + 8), 1);
                  if (v14) {
                    sub_1000CEAEC(0, 4, "%s:%d 0 != status\n");
                  }
                  return v14;
                }

                goto LABEL_70;
              }

              return v14;
            }
          }

          if (*(unsigned __int8 *)(v4 + 1267) <= 1u)
          {
            if (!*(_BYTE *)(v4 + 1267)) {
              return v14;
            }
            uint64_t result = sub_1000A9A40(v4);
            uint64_t v13 = result;
            if (a4 && (a4 & 7) == 0)
            {
              unsigned int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 16LL))(a4, 0LL);
              id v11 = sub_1000ABB10(a4, 0, 6LL, 4, v10, &v13, 1u);
              if (!v11) {
                return 12;
              }
              BOOL v14 = sub_100062BF8(v4, v11, 500, 0, 0LL);
              if (v14) {
                return v14;
              }
              uint64_t result = *(void *)(v4 + 8);
              if (result)
              {
                if ((result & 7) == 0)
                {
                  uint64_t result = sub_10005758C(result, 6u, 1);
                  int v12 = *(void *)(v4 + 8);
                  if (v12)
                  {
                    if ((v12 & 7) == 0)
                    {
                      uint64_t v9 = sub_100062E0C();
                      uint64_t result = v12;
                      goto LABEL_41;
                    }
                  }
                }
              }
            }

            goto LABEL_70;
          }
        }

void sub_10004EF18(uint64_t a1, std::string *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 32) < 2u)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v4 = sub_100036FF0();
      if (v4 && (v4 & 7) == 0)
      {
        sub_100041434(v4, a2);
        return;
      }

      goto LABEL_20;
    }

    if (!*(void *)(a1 + 8))
    {
      if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2->__r_.__value_.__s.__size_ = 0;
        return;
      }

      if (a2->__r_.__value_.__r.__words[0])
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0LL;
        return;
      }

      goto LABEL_20;
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v5 = [*(id *)(a1 + 8) valueForProperty:MPMediaItemPropertyAlbumTitle];
    if (v5)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v5, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_19:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_19;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_19;
    }

void sub_10004F02C(uint64_t a1, std::string *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 32) < 2u)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v4 = sub_100036FF0();
      if (v4 && (v4 & 7) == 0)
      {
        sub_1000414E0(v4, a2);
        return;
      }

      goto LABEL_20;
    }

    if (!*(void *)(a1 + 8))
    {
      if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2->__r_.__value_.__s.__size_ = 0;
        return;
      }

      if (a2->__r_.__value_.__r.__words[0])
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0LL;
        return;
      }

      goto LABEL_20;
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v5 = [*(id *)(a1 + 8) valueForProperty:MPMediaItemPropertyArtist];
    if (v5)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v5, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_19:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_19;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_19;
    }

void sub_10004F140(uint64_t a1, std::string *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 32) < 2u)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v4 = sub_100036FF0();
      if (v4 && (v4 & 7) == 0)
      {
        sub_10004158C(v4, a2);
        return;
      }

      goto LABEL_20;
    }

    if (!*(void *)(a1 + 8))
    {
      if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2->__r_.__value_.__s.__size_ = 0;
        return;
      }

      if (a2->__r_.__value_.__r.__words[0])
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0LL;
        return;
      }

      goto LABEL_20;
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v5 = [*(id *)(a1 + 8) valueForProperty:MPMediaItemPropertyGenre];
    if (v5)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v5, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_19:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_19;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_19;
    }

void sub_10004F254(uint64_t a1, std::string *a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_20;
  }
  if (*(unsigned __int8 *)(a1 + 32) < 2u)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v4 = sub_100036FF0();
      if (v4 && (v4 & 7) == 0)
      {
        sub_100041638(v4, a2);
        return;
      }

      goto LABEL_20;
    }

    if (!*(void *)(a1 + 8))
    {
      if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
        a2->__r_.__value_.__s.__data_[0] = 0;
        a2->__r_.__value_.__s.__size_ = 0;
        return;
      }

      if (a2->__r_.__value_.__r.__words[0])
      {
        *a2->__r_.__value_.__l.__data_ = 0;
        a2->__r_.__value_.__l.__size_ = 0LL;
        return;
      }

      goto LABEL_20;
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v5 = [*(id *)(a1 + 8) valueForProperty:MPMediaItemPropertyComposer];
    if (v5)
    {
      std::string::assign( a2,  (const std::string::value_type *)objc_msgSend( objc_msgSend(v5, "precomposedStringWithCanonicalMapping"),  "UTF8String"));
LABEL_19:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_19;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_19;
    }

uint64_t sub_10004F368(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_7;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    return result;
  }

  if (*(void *)a2)
  {
    **(_BYTE **)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
LABEL_7:
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_10004F3A0(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_7;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    return result;
  }

  if (*(void *)a2)
  {
    **(_BYTE **)a2 = 0;
    *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  }

  else
  {
LABEL_7:
    __break(0x5516u);
  }

  return result;
}

void *sub_10004F3D8(void *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!result[1]) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [(id)v1[1] valueForProperty:MPMediaItemPropertySeasonNumber];
    if (v3) {
      id v4 = [v3 unsignedIntValue];
    }
    else {
      id v4 = 0LL;
    }

    return v4;
  }

  return result;
}

void sub_10004F454(void *a1, std::string *a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    if (!a1[2]) {
      (*(void (**)(void *))(*a1 + 256LL))(a1);
    }
    id v4 = (void *)a1[3];
    if (v4)
    {
      std::string::assign(a2, (const std::string::value_type *)[v4 UTF8String]);
LABEL_11:

      return;
    }

    if (((char)a2->__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2->__r_.__value_.__s.__size_ = 0;
      goto LABEL_11;
    }

    if (a2->__r_.__value_.__r.__words[0])
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0LL;
      goto LABEL_11;
    }
  }

  __break(0x5516u);
}

uint64_t sub_10004F4F8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F510(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F528(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F540(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_20:
    __break(0x5516u);
    goto LABEL_21;
  }

  if (*(unsigned __int8 *)(result + 32) < 2u)
  {
    if (!*(_BYTE *)(result + 32))
    {
      if (!*(void *)(result + 8)) {
        return 0LL;
      }
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyPlaybackDuration];
      if (v3)
      {
        uint64_t result = (uint64_t)[v3 doubleValue];
        double v5 = v4 * 1000.0;
        if (v5 <= -1.0 || v5 >= 4294967300.0) {
          goto LABEL_22;
        }
        uint64_t v7 = v5;
      }

      else
      {
        uint64_t v7 = 0LL;
      }

      return v7;
    }

    uint64_t result = sub_100036FF0();
    if (result && (result & 7) == 0) {
      return sub_1000416E4(result);
    }
    goto LABEL_20;
  }

uint64_t sub_10004F614(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F62C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F644(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F65C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F674(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  if (*(unsigned __int8 *)(result + 32) >= 2u)
  {
LABEL_16:
    __break(0x550Au);
    return result;
  }

  if (*(_BYTE *)(result + 32))
  {
    uint64_t result = sub_100036FF0();
    if (result && (result & 7) == 0) {
      return (uint64_t)sub_1000417A8((id *)result);
    }
    goto LABEL_15;
  }

  if (*(void *)(result + 8))
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyAlbumTrackNumber];
    if (v3) {
      unsigned __int16 v4 = (unsigned __int16)[v3 unsignedIntValue];
    }
    else {
      unsigned __int16 v4 = 0;
    }
  }

  else
  {
    return 0;
  }

  return v4;
}

uint64_t sub_10004F720(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  if (*(unsigned __int8 *)(result + 32) >= 2u)
  {
LABEL_16:
    __break(0x550Au);
    return result;
  }

  if (*(_BYTE *)(result + 32))
  {
    uint64_t result = sub_100036FF0();
    if (result && (result & 7) == 0) {
      return (uint64_t)sub_1000417E0((id *)result);
    }
    goto LABEL_15;
  }

  if (*(void *)(result + 8))
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyDiscNumber];
    if (v3) {
      unsigned __int16 v4 = (unsigned __int16)[v3 unsignedIntValue];
    }
    else {
      unsigned __int16 v4 = 0;
    }
  }

  else
  {
    return 0;
  }

  return v4;
}

uint64_t sub_10004F7CC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F7E4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F7FC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F814(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F82C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_10004F844(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004F85C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_18:
    __break(0x5516u);
    goto LABEL_19;
  }

  if (*(unsigned __int8 *)(result + 32) < 2u)
  {
    if (*(_BYTE *)(result + 32))
    {
      uint64_t result = sub_100036FF0();
      if (result && (result & 7) == 0) {
        return (uint64_t)sub_100041848((id *)result);
      }
      goto LABEL_18;
    }

    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyChapterArtworkTimes];
    unsigned __int16 v4 = sub_1000296E8(*(void **)(v1 + 8));
    uint64_t v5 = (uint64_t)v4;
    if (v3)
    {
      id v6 = [v3 count];
      if (!v5 && !v6)
      {
        uint64_t v5 = 0LL;
LABEL_16:

        return v5;
      }
    }

    else if (!v4)
    {
      goto LABEL_16;
    }

    uint64_t v5 = 1LL;
    goto LABEL_16;
  }

uint64_t sub_10004F934(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

void *sub_10004F94C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      if (!result[1]) {
        return 0LL;
      }
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      id v3 = (NSNumber *)v1[2];
      if (v3) {
        goto LABEL_14;
      }
      id v4 = (id)v1[3];
      if (v4
        || (id v4 = [(id)v1[1] valueForProperty:MPMediaItemPropertyLyrics],
            (v1[3] = v4) != 0LL))
      {
        if ([v4 lengthOfBytesUsingEncoding:4])
        {
          uint64_t v5 = 1LL;
LABEL_13:
          id v3 = -[NSNumber initWithBool:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithBool:", v5);
          v1[2] = v3;
LABEL_14:
          BOOL v7 = -[NSNumber BOOLValue](v3, "BOOLValue");

          return (void *)v7;
        }

        id v6 = (void *)v1[3];
      }

      else
      {
        id v6 = 0LL;
      }

      uint64_t v5 = 0LL;
      v1[3] = 0LL;
      goto LABEL_13;
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10004FA24(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyMediaType];
    if (v3) {
      uint64_t v4 = ([v3 intValue] >> 2) & 1;
    }
    else {
      uint64_t v4 = 0LL;
    }

    return v4;
  }

  return result;
}

BOOL sub_10004FAA0(BOOL result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyMediaType];
    if (v3) {
      BOOL v4 = ([v3 intValue] & 0x402) != 0;
    }
    else {
      BOOL v4 = 0LL;
    }

    return v4;
  }

  return result;
}

BOOL sub_10004FB24(BOOL result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    id v3 = [*(id *)(v1 + 8) valueForProperty:MPMediaItemPropertyMediaType];
    if (v3) {
      BOOL v4 = ([v3 intValue] & 0x1008) != 0;
    }
    else {
      BOOL v4 = 0LL;
    }

    return v4;
  }

  return result;
}

BOOL sub_10004FBA8(BOOL result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    BOOL v3 = ((unsigned __int16)objc_msgSend( objc_msgSend(*(id *)(v1 + 8), "valueForProperty:", MPMediaItemPropertyMediaType),  "intValue") & 0xFF00) != 0;

    return v3;
  }

  return result;
}

uint64_t sub_10004FC1C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004FC34(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004FC4C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004FC64(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004FC7C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10004FC94(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = sub_100036FF0();
      if (result)
      {
        if ((result & 7) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 608LL))(result);
          if ((result & 1) != 0) {
            return 0LL;
          }
          if (!*(_BYTE *)(v1 + 32))
          {
            if (*(void *)(v1 + 8))
            {
              BOOL v3 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
              id v2 = [*(id *)(v1 + 8) countOfChaptersOfType:1];

              return (uint64_t)v2;
            }

            return 0LL;
          }

          uint64_t result = sub_100036FF0();
          if (result && (result & 7) == 0) {
            return (uint64_t)sub_100041830((id *)result);
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_16:
  __break(0x550Au);
  return result;
}

void *sub_10004FD48(void *result, unsigned int a2)
{
  if (result)
  {
    id v2 = result;
    if ((result & 7) == 0)
    {
      if (!result[1]) {
        return 0LL;
      }
      BOOL v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
      id v5 = [(id)v2[1] chaptersOfType:1];
      if ((unint64_t)[v5 count] <= a2)
      {
        uint64_t v9 = 0LL;
      }

      else
      {
        uint64_t result = objc_msgSend(objc_msgSend(v5, "objectAtIndex:", a2), "playbackTime");
        double v7 = v6 * 1000.0;
        if (v7 <= -1.0 || v7 >= 4294967300.0) {
          goto LABEL_16;
        }
        uint64_t v9 = v7;
      }

      return (void *)v9;
    }
  }

  __break(0x5516u);
LABEL_16:
  __break(0x5505u);
  return result;
}

uint64_t sub_10004FE08(uint64_t result, unsigned int a2, std::string *a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(result + 8)) {
      return 0LL;
    }
    double v6 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    double v7 = *(void **)(v3 + 8);
    if (v7
      && (id v8 = objc_msgSend(objc_msgSend(v7, "chaptersOfType:", 1), "objectAtIndex:", a2),
          id v9 = [v8 value],
          uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString),
          (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
    {
      std::string::assign(a3, (const std::string::value_type *)objc_msgSend(objc_msgSend(v8, "value"), "UTF8String"));
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    return v11;
  }

  return result;
}

uint64_t sub_10004FED0(uint64_t a1, unsigned int a2)
{
  if (!a1 || (a1 & 7) != 0) {
LABEL_21:
  }
    __break(0x5516u);
  if (*(void *)(a1 + 8))
  {
    BOOL v4 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "valueForProperty:", MPMediaItemPropertyPlaybackDuration), "doubleValue");
    double v5 = (double)a2 / 1000.0;
    if (v5 > v6
      || (id v7 = [*(id *)(a1 + 8) chaptersOfType:1],
          __int128 v19 = 0u,
          __int128 v20 = 0u,
          __int128 v21 = 0u,
          __int128 v22 = 0u,
          (id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16]) == 0))
    {
      uint64_t v13 = 0LL;
      goto LABEL_18;
    }

    id v9 = v8;
    int v10 = 0;
    uint64_t v11 = *(void *)v20;
    while (1)
    {
      int v12 = 0LL;
      uint64_t v13 = (v10 + (_DWORD)v9);
      do
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v7);
        }
        BOOL v14 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v12);
        [v14 playbackTime];
        double v16 = v15;
        [v14 playbackDuration];
        if (v16 + v17 >= v5)
        {
          uint64_t v13 = (v10 + (_DWORD)v12);
          goto LABEL_18;
        }

        if ((void *)~v10 == v12)
        {
          __break(0x5500u);
          goto LABEL_21;
        }

        int v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      int v10 = v13;
      if (!v9)
      {
LABEL_18:

        return v13;
      }
    }
  }

  return 0LL;
}

void *sub_100050088(void *result, void *a2)
{
  if (!result || (id v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = a2;
    v2[1] = result;
  }

  return result;
}

uint64_t sub_1000500BC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8);
  }
  __break(0x5516u);
  return result;
}

NSAutoreleasePool *sub_1000500D4( NSAutoreleasePool *result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  if (!result || (BOOL v4 = result, (result & 7) != 0))
  {
LABEL_17:
    __break(0x5516u);
    goto LABEL_18;
  }

  Class v8 = sub_1000D00C0(@"UIImage", 0LL);
  id v9 = 0LL;
  uint64_t result = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  if (LOBYTE(v4->_reserved) < 2u)
  {
    int v10 = result;
    if (!LOBYTE(v4->_reserved))
    {
      if (v4->_token)
      {
        uint64_t v13 = (void *)((uint64_t (*)(NSAutoreleasePool *))v4->super.isa[51].isa)(v4);
        BOOL v14 = sub_1000296E8(v13);
        if (v14) {
          id v9 = objc_msgSend(v14, "imageWithSize:", (double)a2, (double)a3);
        }
        else {
          id v9 = 0LL;
        }
        id v15 = v9;
      }

      else
      {
        id v9 = 0LL;
      }

      goto LABEL_15;
    }

    uint64_t result = (NSAutoreleasePool *)sub_100036FF0();
    if (result && (result & 7) == 0)
    {
      id v11 = sub_100041B18((id *)&result->super.isa);
      id v9 = -[objc_class imageWithData:](v8, "imageWithData:", v11);
      id v12 = v9;

LABEL_15:
      return (NSAutoreleasePool *)v9;
    }

    goto LABEL_17;
  }

void sub_1000501F0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_11:
    __break(0x550Au);
    goto LABEL_12;
  }

  uint64_t v4 = 0LL;
  double v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  if (!*(void *)(a1 + 8))
  {
LABEL_8:
    if (*((unsigned __int8 *)v5 + 24) < 2u)
    {
      _Block_object_dispose(&v4, 8);
      return;
    }

    goto LABEL_11;
  }

  if (!sub_1000357C4())
  {
    sub_1000CEA98( 0,  @"%s:%s:%d no systemMusicPlayer",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/link/TrackAccessor.mm",  "IsGeniusAvailable",  714LL);
    goto LABEL_8;
  }

  id v2 = (dispatch_queue_s *)sub_100041B3C();
  if (v2)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100050304;
    block[3] = &unk_100104368;
    void block[4] = &v4;
    void block[5] = a1;
    dispatch_sync(v2, block);
    goto LABEL_8;
  }

void sub_1000502EC(_Unwind_Exception *a1)
{
}

id sub_100050304(uint64_t a1)
{
  id result = objc_msgSend( sub_100041B30(),  "isGeniusAvailableForSeedItems:",  +[NSArray arrayWithObject:]( NSArray,  "arrayWithObject:",  *(void *)(*(void *)(a1 + 40) + 8)));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

uint64_t sub_10005035C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100050374(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005038C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000503A4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 0LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000503BC()
{
  if (qword_10011BE18 != -1) {
    dispatch_once(&qword_10011BE18, &stru_1001058F8);
  }
  return qword_10011BE10;
}

void sub_1000503FC(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x58uLL);
  if ((v1 & 0xF) != 0 || (uint64_t v2 = v1, (v1 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100050458(v1);
    qword_10011BE10 = v2;
  }

void sub_100050444(_Unwind_Exception *a1)
{
}

uint64_t sub_100050458(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)id result = off_100105928;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)(result + memset(md, 170, 20) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_DWORD *)(result + 2_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(void *)(result + 40) = 0LL;
    *(_DWORD *)(result + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(void *)(result + 80) = 0LL;
    *(void *)(result + 56) = 0LL;
    *(void *)(result + 64) = 0LL;
    *(_DWORD *)(result + 72) = 0;
    *(void *)(result + 80) = objc_alloc_init(&OBJC_CLASS___NSLock);
    return v1;
  }

  return result;
}

void *sub_1000504CC(void *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *id result = off_100105928;
    uint64_t v2 = (__CFRunLoopTimer *)result[1];
    if (v2)
    {
      CFRunLoopTimerInvalidate(v2);
      v1[1] = 0LL;
    }

    uint64_t v3 = (__CFRunLoopTimer *)v1[5];
    if (v3)
    {
      CFRunLoopTimerInvalidate(v3);
      v1[5] = 0LL;
    }

    [(id)v1[10] lock];
    uint64_t v4 = (__CFRunLoopTimer *)v1[8];
    if (v4)
    {
      CFRunLoopTimerInvalidate(v4);
      v1[8] = 0LL;
    }

    [(id)v1[10] unlock];

    v1[10] = 0LL;
    return v1;
  }

  return result;
}

void *sub_100050554(void *result)
{
  return result;
}

void sub_100050568(void *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000504CC(a1);
    operator delete(a1);
  }

void sub_1000505A0(_Unwind_Exception *a1)
{
}

id *sub_1000505B4(id *result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    [result[10] lock];
    v1[8] = 0LL;
    return (id *)[v1[10] unlock];
  }

  return result;
}

uint64_t sub_1000505F0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0) || (result = sub_100042AC4()) == 0 || (result & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  id result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 104LL))(result, *(void *)(v1 + 56));
  int v2 = *(_DWORD *)(v1 + 48);
  int v3 = result + v2;
  if (__OFADD__((_DWORD)result, v2))
  {
LABEL_12:
    __break(0x5500u);
    return result;
  }

  if (*(void *)(v1 + 56))
  {
    id result = sub_100042AC4();
    if (result && (result & 7) == 0) {
      return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 88LL))( result,  *(void *)(v1 + 56),  v3 & ~(v3 >> 31),  0LL);
    }
    goto LABEL_11;
  }

  return result;
}

void sub_100050684(uint64_t a1, uint64_t a2)
{
  if (qword_10011BE18 != -1) {
    dispatch_once(&qword_10011BE18, &stru_1001058F8);
  }
  int v3 = (_DWORD *)qword_10011BE10;
  if (qword_10011BE10) {
    BOOL v4 = (qword_10011BE10 & 7) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 && (((_BYTE)qword_10011BE10 + 24) & 7) == 0LL;
  if (!v5 || (*(_BYTE *)(qword_10011BE10 + 24) = 1, ((unint64_t)(v3 + 5) & 3) != 0))
  {
LABEL_26:
    __break(0x5516u);
    return;
  }

  int v6 = v3[5];
  switch(v6)
  {
    case 1028:
      Class v8 = v3 + 8;
      (*(void (**)(_DWORD *, uint64_t, void, uint64_t, uint64_t))(*(void *)v3 + 64LL))( v3,  a2,  0LL,  21LL,  131074LL);
      goto LABEL_22;
    case 1027:
      Class v8 = v3 + 8;
      (*(void (**)(_DWORD *, uint64_t, void, uint64_t, uint64_t))(*(void *)v3 + 64LL))( v3,  a2,  0LL,  20LL,  131074LL);
LABEL_22:
      if ((v8 & 7) == 0)
      {
        *Class v8 = 1;
LABEL_24:
        (*(void (**)(_DWORD *))(*(void *)v3 + 56LL))(v3);
        return;
      }

      goto LABEL_26;
    case 0:
      sub_1000CEA98(0xBu, @"SimpleRemoteEventHandler long play pause fired");
      uint64_t v7 = sub_100036FF0();
      if (v7)
      {
        if ((v7 & 7) == 0)
        {
          sub_100041B48(v7);
          if (((unint64_t)(v3 + 7) & 3) == 0)
          {
            if (v3[7]) {
              SBSLockDevice(0LL, 0LL);
            }
            goto LABEL_24;
          }
        }
      }

      goto LABEL_26;
  }

void sub_1000507DC(uint64_t a1, void *a2, int a3, CFTimeInterval a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    context.version = 0LL;
    context.info = a2;
    memset(&context.retain, 0, 24);
    uint64_t v7 = *(__CFRunLoopTimer **)(a1 + 8);
    if (v7) {
      CFRunLoopTimerInvalidate(v7);
    }
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + memset(md, 170, 20) = a3;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = CFRunLoopTimerCreate( kCFAllocatorDefault,  Current + a4,  a4,  0LL,  0LL,  (CFRunLoopTimerCallBack)sub_100050684,  &context);
    Main = CFRunLoopGetMain();
    CFRunLoopAddTimer(Main, *(CFRunLoopTimerRef *)(a1 + 8), kCFRunLoopDefaultMode);
    CFRelease(*(CFTypeRef *)(a1 + 8));
  }

void sub_100050898(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    int v2 = *(__CFRunLoopTimer **)(a1 + 8);
    if (v2)
    {
      CFRunLoopTimerInvalidate(v2);
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    }
  }

void sub_1000508D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_79;
  }
  id v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  int v10 = v9;
  if (a3 != 3)
  {
    if (a3 == 2)
    {
      int v14 = 3;
      uint64_t v11 = 4LL;
      switch((int)a4)
      {
        case 0:
          goto LABEL_15;
        case 1:
LABEL_39:
          uint64_t v13 = (const __CFString **)&kMRMediaRemoteMediaTypeVideo;
          LODWORD(a4) = v14;
          goto LABEL_40;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        case 4:
          goto LABEL_20;
        case 5:
          goto LABEL_21;
        case 8:
          goto LABEL_22;
        case 9:
          goto LABEL_23;
        default:
          NSLog( @"ERROR - %s:%s - %d unhandled video button 0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/SimpleRemoteEventHandler.mm",  "__convertIslKeyToIapFrameworkKey",  161LL,  a4);
          goto LABEL_14;
      }
    }

    if (a3 == 1)
    {
      int v12 = a4;
      uint64_t v11 = 4LL;
      LODWORD(a4) = 3;
      switch(v12)
      {
        case 0:
          goto LABEL_15;
        case 1:
LABEL_38:
          uint64_t v13 = (const __CFString **)&kMRMediaRemoteMediaTypeImage;
          goto LABEL_40;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_19;
        case 4:
          goto LABEL_20;
        case 5:
          goto LABEL_21;
        default:
          NSLog( @"ERROR - %s:%s - %d unhandled image button 0x%x",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/SimpleRemoteEventHandler.mm",  "__convertIslKeyToIapFrameworkKey",  128LL,  3LL);
          break;
      }
    }

LABEL_79:
        __break(0x5516u);
LABEL_80:
        __break(0x550Au);
      }

      if (a5 == 131074 && (a4 & 0xFFFFFFFE) == 0x14)
      {
        sub_100050E4C(v11);
        MRMediaRemoteSendCommand(v11, v18);
        if ((v11 | 2) == 0xA)
        {
LABEL_73:
          uint64_t v22 = sub_100036FF0();
          if (v22 && (v22 & 7) == 0)
          {
            sub_100042078(v22, v11);
            goto LABEL_76;
          }

          goto LABEL_79;
        }
      }

  if (v16 && (_DWORD)v33)
  {
    if (v34 >= v33) {
      char v48 = v33;
    }
    else {
      char v48 = v34;
    }
    if (__CFADD__(v16, v17)) {
      goto LABEL_141;
    }
    int v49 = v17;
    memcpy(v32, (const void *)(v16 + v17), v48);
    if (__CFADD__(v32, v48)) {
      goto LABEL_141;
    }
    if (!((v48 + v49) >> 32))
    {
      v32 += v48;
      *(_DWORD *)(a2 + 125) = v48 + v49;
      goto LABEL_88;
    }

uint64_t *sub_100050E4C(unsigned int a1)
{
  id result = (uint64_t *)pthread_once(&stru_10011B908, sub_1000BC260);
  if ((unint64_t)dword_10011B8F8 >= 0xFFFFFFFFFFFFFFF4LL)
  {
    __break(0x5513u);
  }

  else if (dword_10011B904)
  {
    sub_100036CA0();
    id result = sub_1000BC5A4();
    int v3 = (int)result;
    if (!dword_10011C860) {
      dword_10011C860 = (int)result;
    }
    if (!dword_10011C850)
    {
      pthread_mutex_lock(&stru_1001197E8);
      if (!dword_10011C850)
      {
        dword_10011C850 = v3;
        if (a1 > 0xB) {
          int v4 = 0;
        }
        else {
          int v4 = dword_1000DAFF8[a1];
        }
        dword_10011C854 = v4;
      }

      return (uint64_t *)pthread_mutex_unlock(&stru_1001197E8);
    }
  }

  return result;
}

void sub_100050F28(uint64_t a1, uint64_t a2, int *a3)
{
  if (!a1) {
    goto LABEL_111;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_111;
  }
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v45 = *a3;
  unint64_t v44 = 0xAAAAAAAAAAAAAAAALL;
  BOOL v5 = (unsigned int *)(a3 + 1);
  unint64_t v44 = a3[1];
  int v6 = (uint64_t *)(a3 + 2);
  uint64_t v8 = *v6;
  id v9 = objc_alloc_init(&OBJC_CLASS___NSAutoreleasePool);
  int v10 = v9;
  if ((a2 - 131077) <= 1)
  {
    uint64_t v11 = *a3;
    if (v11 <= 3)
    {
      int v12 = "DOWN";
      if ((_DWORD)a2 == 131077) {
        int v12 = "UP";
      }
      sub_1000CEA98(0xBu, @"car key %s event: source=%d key=%d port=%hhx", v12, v11, *v5, *v6);
      [*(id *)(a1 + 80) lock];
      *(_DWORD *)(a1 + 72) = *v5;
      uint64_t v13 = *(__CFRunLoopTimer **)(a1 + 64);
      if (v13)
      {
        CFRunLoopTimerInvalidate(v13);
        *(void *)(a1 + 64) = 0LL;
      }

      if ((_DWORD)a2 != 131077)
      {
        context.version = 0LL;
        context.info = (void *)a1;
        memset(&context.retain, 0, 24);
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(void *)(a1 + 64) = CFRunLoopTimerCreate( 0LL,  Current + 1.5,  0.0,  0LL,  0LL,  (CFRunLoopTimerCallBack)sub_100051610,  &context);
        Main = CFRunLoopGetMain();
        CFRunLoopAddTimer(Main, *(CFRunLoopTimerRef *)(a1 + 64), kCFRunLoopCommonModes);
        CFRelease(*(CFTypeRef *)(a1 + 64));
      }

      [*(id *)(a1 + 80) unlock];
      goto LABEL_99;
    }

    goto LABEL_112;
  }

  if ((_DWORD)a2 != 131079)
  {
    float v42 = 0.0;
    uint64_t v24 = SBSSpringBoardServerPort(v9);
    SBGetCurrentBacklightFactor(v24, &v42);
    float v25 = v42 * 255.0;
    *(_DWORD *)(a1 + 2_Block_object_dispose((const void *)(v1 - 48), 8) = v25;
    if (sub_1000CEA70(11LL))
    {
      if (v45 > 0xA) {
        __int128 v26 = "Unknown";
      }
      else {
        __int128 v26 = off_100105988[v45];
      }
      __int128 v27 = "evKeyUp";
      if ((_DWORD)a2 == 131074) {
        __int128 v27 = "evKeyDown";
      }
      NSLog(@"SimpleRemoteEventHandler got %s context:%s key:%lu port=%hhx", v27, v26, v44, v8);
    }

    sub_100051628(a1, &v45, (uint64_t *)&v44);
    if ((_DWORD)a2 == 131073) {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56LL))(a1);
    }
    unint64_t v29 = v44;
    if (!v44)
    {
      if ((_DWORD)a2 == 131074)
      {
        (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)a1 + 48LL))(a1, v8, 0LL, 2.0);
        sub_1000CEA98(0xBu, @"SimpleRemoteEventHandler starting timer for %f seconds", 0x4000000000000000LL);
      }

      if (*(_BYTE *)(a1 + 24))
      {
        sub_1000CEA98(0xBu, @"SimpleRemoteEventHandler ignoring key");
        goto LABEL_99;
      }

      unint64_t v29 = v44;
    }

    if ((_DWORD)a2 == 131074 && (v29 | 8) != 0x1A && !_AXSVoiceOverTouchEnabled(v28))
    {
      uint64_t v30 = sub_1000C7788();
      if (!v30 || (v30 & 7) != 0) {
        goto LABEL_111;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v30 + 104LL))(v30))
      {
        uint64_t v31 = sub_1000256D8();
        if (!v31 || (v31 & 7) != 0) {
          goto LABEL_111;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v31 + 96LL))(v31) & 1) == 0)
        {
          uint64_t v32 = sub_10004783C();
          if (!v32 || (v32 & 7) != 0) {
            goto LABEL_111;
          }
          (*(void (**)(uint64_t))(*(void *)v32 + 448LL))(v32);
        }
      }
    }

    if (v45 && v45 != 3)
    {
      int v37 = 0;
      unint64_t v33 = v44;
    }

    else
    {
      unint64_t v33 = v44;
      if (v44 - 1 <= 1)
      {
        if ((_DWORD)a2 == 131074)
        {
          if (v44 == 1) {
            int v34 = 8;
          }
          else {
            int v34 = -8;
          }
          *(_DWORD *)(a1 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = v34;
          *(void *)(a1 + 56) = v8;
          context.version = 0LL;
          context.info = (void *)a1;
          memset(&context.retain, 0, 24);
          CFAbsoluteTime v35 = CFAbsoluteTimeGetCurrent();
          *(void *)(a1 + 40) = CFRunLoopTimerCreate( 0LL,  v35 + 0.4,  0.4,  0LL,  0LL,  (CFRunLoopTimerCallBack)sub_1000516B8,  &context);
          __int128 v36 = CFRunLoopGetMain();
          CFRunLoopAddTimer(v36, *(CFRunLoopTimerRef *)(a1 + 40), kCFRunLoopCommonModes);
          CFRelease(*(CFTypeRef *)(a1 + 40));
        }

        else
        {
          CFRunLoopTimerInvalidate(*(CFRunLoopTimerRef *)(a1 + 40));
          *(void *)(a1 + 40) = 0LL;
          sub_1000505F0(a1);
          *(void *)(a1 + 56) = 0LL;
        }

        goto LABEL_99;
      }

      if (v44 == 10)
      {
        if ((_DWORD)a2 != 131073) {
          goto LABEL_99;
        }
        uint64_t v38 = sub_100042AC4();
        if (v38 && (v38 & 7) == 0)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 112LL))(v38, v8);
          goto LABEL_99;
        }

        goto LABEL_111;
      }

      if (!v45 && v44 == 19)
      {
        if ((_DWORD)a2 == 131073)
        {
          id v39 = -[ITIdleTimerState newAssertionToDisableIdleTimerForReason:error:]( +[ITIdleTimerState sharedInstance](&OBJC_CLASS___ITIdleTimerState, "sharedInstance"),  "newAssertionToDisableIdleTimerForReason:error:",  @"SimpleRemoteButtonUp",  0LL);
          [v39 invalidate];
        }

        goto LABEL_99;
      }

      if (v45)
      {
        int v37 = 0;
      }

      else
      {
        if (v44 <= 0x1A && ((1LL << v44) & 0x4060000) != 0)
        {
          if ((_DWORD)a2 == 131073)
          {
            if (v44 != 26)
            {
              if (v44 != 18) {
                goto LABEL_99;
              }
              uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 64LL))( a1,  v8,  0LL,  9LL,  131073LL);
              if (v44 == 17)
              {
                SBSUndimScreen(v41);
                goto LABEL_99;
              }
            }

            SBSLockDevice(0LL, 0LL);
          }

LABEL_99:
          return;
        }

        int v37 = 1;
        if ((_DWORD)a2 == 131074 && v44 - 3 <= 1)
        {
          (*(void (**)(uint64_t, uint64_t, void, double))(*(void *)a1 + 48LL))( a1,  v8,  (v44 + 1024),  0.5);
          goto LABEL_99;
        }
      }
    }

    if (*(unsigned __int8 *)(a1 + 32) <= 1u)
    {
      if (!*(_BYTE *)(a1 + 32)) {
        int v37 = 0;
      }
      if ((_DWORD)a2 == 131073 && v37 && v33 - 3 <= 1)
      {
        *(_BYTE *)(a1 + 32) = 0;
        if (v33 == 3) {
          uint64_t v40 = 20LL;
        }
        else {
          uint64_t v40 = 21LL;
        }
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 64LL))( a1,  v8,  0LL,  v40,  131073LL);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)a1 + 64LL))( a1,  v8,  v45,  v33,  a2);
      }

      goto LABEL_99;
    }

    goto LABEL_112;
  }

  uint64_t v16 = *v5;
  uint64_t v17 = *(unsigned int *)v6;
  CFDictionaryRef v18 = a3 + 3;
  uint64_t v19 = *v18;
  uint64_t v20 = a3 + 4;
  uint64_t v21 = *v20;
  uint64_t v22 = a3 + 5;
  if (((unint64_t)(a3 + 5) & 3) != 0)
  {
LABEL_111:
    __break(0x5516u);
    goto LABEL_112;
  }

  uint64_t v23 = *v22;
  if (v23 <= 3)
  {
    if ((((_BYTE)a3 + 24) & 7) == 0 && (((_DWORD)a3 + 26) & 1) == 0 && ((unint64_t)(a3 + 8) & 7) == 0)
    {
      sub_1000CEA98( 0xBu,  @"rotation event: source=%d ctype=%d dir=%d action=%d rtype=%d deg=%d degTotal=%d port=%hhx",  v16,  v17,  v19,  v21,  v23,  *((unsigned __int16 *)a3 + 12),  *((unsigned __int16 *)a3 + 13),  *((void *)a3 + 4));
      if (*(_DWORD *)v6 > 3u || !*(_DWORD *)v6 && (*v20 > 3u || *v20 == 1 && (*v22 > 3u || *v18 >= 4u))) {
        goto LABEL_112;
      }
      goto LABEL_99;
    }

    goto LABEL_111;
  }

      __break(0x5516u);
      goto LABEL_100;
    }
  }

LABEL_112:
  __break(0x550Au);
LABEL_113:
  __break(0x5505u);
}

        LOWORD(v56) = 0;
        goto LABEL_113;
      }

      uint64_t v55 = v87;
      if (!v87) {
        goto LABEL_112;
      }
LABEL_109:
      CFIndex v56 = v55 + 1;
      if (v55 == -1) {
        goto LABEL_164;
      }
      if (v56 >> 16) {
        goto LABEL_165;
      }
LABEL_113:
      uint64_t v57 = BYTE6(__n[0]);
      if (v6 - 5 >= 0xFFFFFFFE && BYTE6(__n[0]) + (unsigned __int16)v56 > v51)
      {
        if (BYTE6(__n[0]) == 4)
        {
          if (v88 >= 0) {
            uint64_t v58 = HIBYTE(v88);
          }
          else {
            uint64_t v58 = v87;
          }
          if (v58)
          {
            if ((_WORD)v56)
            {
              id v59 = 0;
              unint64_t v60 = 0;
              unsigned int v61 = 0;
              uint64_t v78 = ~v52;
              uint64_t v79 = v51;
              do
              {
                uint64_t v62 = BYTE6(__n[0]);
                std::string v63 = v51 - BYTE6(__n[0]);
                if ((unsigned __int16)v56 - v59 <= (int)v63)
                {
                  int v64 = 3;
                  std::string v63 = (unsigned __int16)v56 - v59;
                }

                else
                {
                  if (HIWORD(v63)) {
                    goto LABEL_165;
                  }
                  int v64 = 1;
                }

                LOBYTE(__n[1]) = v64;
                __int128 v65 = (unsigned __int16)v60 + 1;
                if ((v65 & 0x10000) != 0) {
                  goto LABEL_165;
                }
                *(_WORD *)((char *)&__n[1] + 1) = bswap32(v60) >> 16;
                memcpy(v53, (char *)__n + 7, BYTE6(__n[0]));
                __int128 v66 = HIBYTE(v88);
                if (v88 < 0) {
                  __int128 v66 = v87;
                }
                if (v66)
                {
                  if (v78 < v62) {
                    goto LABEL_166;
                  }
                  p_p = (char *)&__p;
                  if (v88 < 0) {
                    p_p = (char *)__p;
                  }
                  if (__CFADD__(p_p, v61)) {
                    goto LABEL_166;
                  }
                  memcpy(&v53[v62], &p_p[v61], v63);
                  LODWORD(v62) = v63 + v62;
                  if (WORD1(v62)) {
                    goto LABEL_165;
                  }
                }

                __int128 v68 = sub_1000ABB10(v5, 0, 4LL, 13, *(_DWORD *)(a2 + 68), v53, (unsigned __int16)v62);
                if (!v68 || sub_10009703C(a1, v68, 0, 1u))
                {
                  *(_WORD *)(a2 + 126) = 12;
                  goto LABEL_157;
                }

                unsigned int v61 = v63 + v59;
                if (v63 + v59 >= 0x10000) {
                  goto LABEL_165;
                }
                id v59 = (unsigned __int16)(v63 + v59);
                unint64_t v60 = v65;
                BOOL v51 = v79;
              }

              while (v61 < (unsigned __int16)v56);
            }

            int v69 = *(_DWORD *)(a2 + 68);
            uint64_t v70 = a2;
            uint64_t v71 = 0LL;
            uint64_t v72 = 0xFFFFFFFFLL;
            uint64_t v73 = 0;
            uint64_t v74 = 0LL;
            uint64_t v75 = 0;
            goto LABEL_156;
          }

id *sub_100051610(uint64_t a1, id *a2)
{
  return result;
}

void sub_100051628(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*a2 != 5LL) {
    return;
  }
  if (!a3 || (a3 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    return;
  }

  unint64_t v4 = *a3 - 3;
  if (v4 <= 5)
  {
    uint64_t v5 = qword_1000DB028[v4];
    *a3 = v5;
    sub_1000CEA98(0xBu, @"Simple remote IR command was converted to the following Context command %lu", v5);
    *a2 = 0LL;
  }

uint64_t sub_1000516B8(uint64_t a1, uint64_t a2)
{
  if (a2 && (a2 & 7) == 0) {
    return sub_1000505F0(a2);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000516D0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

unsigned __int16 *sub_1000516E4(unsigned __int16 *result)
{
  if (result)
  {
  }

  else
  {
    __break(0x5516u);
  }

  __break(0x5513u);
  return result;
}

unsigned __int16 *sub_100051708(unsigned __int16 *result, unsigned int a2, unsigned __int16 *a3)
{
  if (a2 < 2) {
    return 0;
  }
  if (!result) {
    goto LABEL_26;
  }
  if (result == (unsigned __int16 *)-1LL || (unint64_t)result >= 0xFFFFFFFFFFFFFFFELL)
  {
    __break(0x5513u);
    goto LABEL_26;
  }

  unint64_t v3 = a2 - 2LL;
  if (v3 >> 16) {
    goto LABEL_27;
  }
  unsigned int v4 = *result++;
  unsigned int v5 = __rev16(v4);
  BOOL v7 = (a3 & 7) == 0 && a3 != 0LL;
  if (!v5)
  {
    if (v7 && (((_DWORD)a3 + 2) & 1) == 0)
    {
      unsigned __int16 v8 = a3[1];
      if (!v8) {
        return (unsigned __int16 *)v8;
      }
      sub_100051A5C(result, a3, 0);
      return (unsigned __int16 *)(unsigned __int16)(v5 + 2);
    }

    goto LABEL_26;
  }

  if (!v7 || (((_DWORD)a3 + 2) & 1) != 0)
  {
LABEL_26:
    __break(0x5516u);
    goto LABEL_27;
  }

  if ((v5 + 3) >> 2 > a3[1]) {
    return 0;
  }
  uint64_t result = sub_100051A5C(result, a3, v5);
  if (v5 <= 0xFFFD) {
    return (unsigned __int16 *)(unsigned __int16)(v5 + 2);
  }
LABEL_27:
  __break(0x5507u);
  return result;
}

unsigned __int16 *sub_1000517E4(unsigned __int16 *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a4 || (a4 & 7) != 0) {
    goto LABEL_13;
  }
  BOOL v7 = result;
  uint64_t result = sub_100051708(result, a2, (unsigned __int16 *)a4);
  if (!(_DWORD)result) {
    return 0;
  }
  int v8 = (int)result;
  if (!__CFADD__(v7, result))
  {
    if (((a4 + 40) & 7) == 0)
    {
      uint64_t result = sub_100051708( (unsigned __int16 *)((char *)v7 + result),  (unsigned __int16)(a2 - (_WORD)result),  (unsigned __int16 *)(a4 + 40));
      if ((_DWORD)result)
      {
        unsigned __int16 v9 = (_WORD)result + v8;
        if (!(((_DWORD)result + v8) >> 16))
        {
          if (((a4 + 80) & 7) == 0)
          {
            *(void *)(a4 + 80) = a3;
            return (unsigned __int16 *)v9;
          }

          goto LABEL_13;
        }

unsigned __int16 *sub_10005189C( unsigned __int16 *result, unsigned int a2, _WORD *a3, _WORD *a4, unsigned __int16 *a5, unsigned __int16 *a6, unsigned __int16 *a7)
{
  if (a2 < 4) {
    return 0LL;
  }
  if (!result) {
    goto LABEL_26;
  }
  *a3 = _byteswap_ushort(*result);
  *a4 = _byteswap_ushort(result[1]);
  int v10 = result + 2;
  uint64_t result = sub_100051708(result + 2, a2, a5);
  if (!(_DWORD)result) {
    return result;
  }
  __int16 v11 = (__int16)result;
  unsigned __int16 v12 = a2 - (_WORD)result;
  uint64_t v13 = (unsigned __int16 *)((char *)v10 + result);
  int v14 = v12;
  uint64_t result = sub_100051708(v13, v12, a6);
  if (!(_DWORD)result) {
    return result;
  }
  unsigned int v15 = (unsigned __int16)(v11 + 4) + (_DWORD)result;
  uint64_t v16 = (unsigned __int16 *)((char *)v13 + result);
  unsigned int v17 = (unsigned __int16)(v14 - (_WORD)result);
  uint64_t result = sub_100051708(v16, v17, a7);
  if (!(_DWORD)result) {
    return result;
  }
  if (__CFADD__(v16, result))
  {
LABEL_25:
    __break(0x5513u);
LABEL_26:
    __break(0x5516u);
LABEL_27:
    __break(0x5507u);
    return result;
  }

  return (unsigned __int16 *)1;
}

unsigned __int16 *sub_100051A04(unsigned __int16 *result, unsigned int a2, unsigned __int16 *a3)
{
  if (!a3 || (a3 & 7) != 0 || (((_DWORD)a3 + 2) & 1) != 0)
  {
    __break(0x5516u);
  }

  else if ((a2 + 3) >> 2 <= a3[1])
  {
    sub_100051A5C(result, a3, a2);
    return 0LL;
  }

  else
  {
    return (unsigned __int16 *)16;
  }

  return result;
}

unsigned __int16 *sub_100051A5C(unsigned __int16 *result, unsigned __int16 *a2, unsigned int a3)
{
  if (a3)
  {
    if (a2 && (a2 & 7) == 0 && (((_DWORD)a2 + 2) & 1) == 0)
    {
      uint64_t v3 = a3 - 1;
      if (__CFADD__(result, v3)) {
        goto LABEL_27;
      }
      unsigned __int16 v4 = 0;
      unint64_t v5 = a3 + 3LL;
      int v6 = (unsigned __int8 *)result + v3;
      BOOL v7 = a2 + 4;
LABEL_8:
      char v8 = 0;
      int v9 = 0;
      int v10 = v6;
      LOWORD(v11) = a3;
      v6 -= 4;
      LOWORD(a3) = a3 - 4;
      int v12 = 31;
      while (1)
      {
        if (!v10) {
          goto LABEL_27;
        }
        uint64_t result = (unsigned __int16 *)*v10;
        unsigned int v11 = (unsigned __int16)v11 - 1;
        if (HIWORD(v11)) {
          goto LABEL_26;
        }
        --v10;
        uint64_t result = (unsigned __int16 *)((_DWORD)result << v8);
        v9 |= result;
        if (!v11)
        {
          LOWORD(a3) = 0;
          int v6 = v10;
LABEL_16:
          int v13 = v4 + 1;
          if ((v13 & 0x10000) == 0)
          {
            uint64_t v14 = *v7;
            if (__CFADD__(*v7, 4LL * v4)) {
              goto LABEL_27;
            }
            if (!v14) {
              goto LABEL_30;
            }
            unsigned int v15 = (_DWORD *)(v14 + 4LL * v4);
            _DWORD *v15 = v9;
            unsigned __int16 v4 = v13;
            if (!(_WORD)a3)
            {
              *a2 = v5 >> 2;
              return sub_100053850(a2);
            }

            goto LABEL_8;
          }

__int16 *sub_100051B90(__int16 *result)
{
  char v1 = 0;
  uint64_t v2 = 0LL;
  do
  {
    uint64_t v3 = off_100119980[v2];
    if (v3) {
      BOOL v4 = ((unint64_t)off_100119980[v2] & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4)
    {
      __break(0x5516u);
      return result;
    }

    int v5 = (unsigned __int16)*v3;
    unsigned __int8 v6 = v1 ^ 1;
    char v1 = 1;
    uint64_t v2 = 1LL;
  }

  while (((v5 != (_DWORD)result) & v6) != 0);
  if (v5 == (_DWORD)result) {
    return v3;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100051BE4(uint64_t result)
{
  if (!result) {
    return 0;
  }
  if ((result & 7) != 0 || ((result + 12) & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int16 *)(result + 12);
    if (v1 <= 0x7FF) {
      return (unsigned __int16)(32 * v1);
    }
  }

  __break(0x5507u);
  return result;
}

uint64_t sub_100051C24(uint64_t result, uint64_t a2)
{
  if (!a2
    || (a2 & 7) != 0
    || (((_BYTE)a2 + 80) & 7) != 0
    || (*(void *)(a2 + 80) = result, sub_100053568(a2, 0, 6, a2 + 16), uint64_t result = a2 + 40, ((a2 + 40) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100053568(result, 0, 6, a2 + 56);
    return 0LL;
  }

  return result;
}

uint64_t sub_100051C94(const void **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  return sub_10005219C(a1, a2, a3, a4);
}

uint64_t sub_100051CDC(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__dst = v6;
  __int128 v18 = v6;
  uint64_t result = sub_1000534CC((uint64_t)__dst);
  if (!a2 || (a2 & 7) != 0 || ((a2 + 12) & 3) != 0 || !a1 || (a1 & 7) != 0) {
    goto LABEL_36;
  }
  unint64_t v8 = *(unsigned __int16 *)(a2 + 12);
  unsigned int v9 = *(unsigned __int16 *)a1;
  if (v9 > v8)
  {
    if ((((_BYTE)a1 + 8) & 7) != 0) {
      goto LABEL_36;
    }
    int v10 = (unsigned __int16 *)(a2 + 14);
    do
    {
      memcpy(__dst[1], *(const void **)(a1 + 8), 4 * v8);
      LOWORD(__dst[0]) = v8;
      sub_100053850((unsigned __int16 *)__dst);
      uint64_t result = (uint64_t)sub_100053EDC((void *)v8, (unsigned __int16 *)a1);
      if (a3 == 1)
      {
        if (((a2 + 16) & 7) != 0) {
          goto LABEL_36;
        }
        sub_100053F58(*(unsigned __int16 **)(a2 + 16), (unsigned __int16 *)a1);
      }

      else
      {
        sub_100053B78(*v10, (unsigned __int16 *)a1);
      }

      uint64_t result = sub_100053C8C((unint64_t)__dst, (unsigned __int16 *)a1);
      unsigned int v9 = *(unsigned __int16 *)a1;
    }

    while (v9 > v8);
  }

  if (((a1 + 8) & 7) == 0)
  {
    unint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = 4 * v8 - 4;
    BOOL v13 = __CFADD__(v12, v11);
    BOOL v14 = v12 + v11 >= v11;
    if (!(_DWORD)v8) {
      BOOL v14 = v13;
    }
    if (!v14) {
      goto LABEL_37;
    }
    if (v11)
    {
      unsigned int v15 = (_DWORD *)(v11 + v12);
      if ((v15 & 3) == 0)
      {
        if (*v15 == -1)
        {
          uint64_t result = (uint64_t)sub_100053908((const void **)a1, (uint64_t)__dst);
          if (a3 == 1)
          {
            if (((a2 + 16) & 7) == 0)
            {
              sub_100053C8C(*(void *)(a2 + 16), (unsigned __int16 *)a1);
              goto LABEL_32;
            }
          }

          else if ((((_DWORD)a2 + 14) & 1) == 0)
          {
            sub_100053A38(*(unsigned __int16 *)(a2 + 14), a1);
LABEL_32:
            unsigned int v16 = *(unsigned __int16 *)a1;
            if (v16 <= v8)
            {
              sub_100053908((const void **)__dst, a1);
            }

            else
            {
              *(_WORD *)a1 = v16 - 1;
              sub_100053850((unsigned __int16 *)a1);
            }

            return sub_100053638((uint64_t)__dst);
          }

          goto LABEL_36;
        }

        return sub_100053638((uint64_t)__dst);
      }
    }
  }

uint64_t sub_100051ED0(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_24;
  }
  uint64_t v2 = (unsigned __int16 *)result;
  if ((result & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t v3 = (void *)(result + 8);
  if (((result + 8) & 7) != 0) {
    goto LABEL_24;
  }
  unint64_t v5 = *(void *)(result + 8);
  uint64_t result = sub_100053788(result);
  if ((_DWORD)result) {
    return result;
  }
  if (!a2 || (a2 & 7) != 0 || (((_DWORD)a2 + 14) & 1) != 0) {
    goto LABEL_24;
  }
  sub_100053A38(*(unsigned __int16 *)(a2 + 14), (uint64_t)v2);
  uint64_t result = sub_100051CDC((uint64_t)v2, a2, 0);
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 0;
    unint64_t v8 = v5 & 3;
    while (v5 && !v8)
    {
      *(_DWORD *)unint64_t v5 = ~*(_DWORD *)v5;
      if (v5 >= 0xFFFFFFFFFFFFFFFCLL) {
        goto LABEL_25;
      }
      if (v7 == 0xFFFF) {
        goto LABEL_26;
      }
      v5 += 4LL;
      unsigned int v7 = (unsigned __int16)(v7 + 1);
    }

uint64_t sub_10005201C(const void **a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[0] = v6;
  v8[1] = v6;
  sub_1000534CC((uint64_t)v8);
  sub_100053908(a1, (uint64_t)v8);
  sub_100051ED0((uint64_t)v8, a3);
  sub_100053C8C((unint64_t)v8, a2);
  sub_100051CDC((uint64_t)a2, a3, 0);
  return sub_100053638((uint64_t)v8);
}

uint64_t sub_1000520A4(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v6;
  _OWORD v8[2] = v6;
  v8[0] = v6;
  sub_10005359C((uint64_t)v8);
  sub_100053FC0(a1, a2, v8);
  sub_100051CDC((uint64_t)v8, a3, 0);
  sub_100053908((const void **)v8, (uint64_t)a2);
  return sub_100053638((uint64_t)v8);
}

uint64_t sub_100052128(unint64_t a1, uint64_t a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  sub_10005359C((uint64_t)v6);
  sub_10005430C(a1, (uint64_t)v6);
  sub_100051CDC((uint64_t)v6, a2, 0);
  sub_100053908((const void **)v6, a1);
  return sub_100053638((uint64_t)v6);
}

uint64_t sub_10005219C(const void **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1000536B0(a3);
  if (dword_10011C8CC == -1) {
    goto LABEL_48;
  }
  unsigned int v9 = result;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[0] = v10;
  v26[1] = v10;
  v24[0] = v10;
  v24[1] = v10;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v10;
  v22[1] = v10;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v10;
  v20[1] = v10;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  ++dword_10011C8CC;
  uint64_t result = sub_100052560(0LL, a3);
  if ((_DWORD)result)
  {
    if (a2)
    {
      if ((a2 & 7) == 0)
      {
        *(_WORD *)a2 = 0;
        if (a1)
        {
          if ((a1 & 7) == 0)
          {
            *(_WORD *)a1 = 0;
            return result;
          }
        }
      }
    }

    goto LABEL_47;
  }

  uint64_t result = sub_100052560(1LL, a3);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = sub_100052560(2LL, a3);
  if ((_DWORD)result) {
    return sub_1000525E0((uint64_t)a1, a2, a4);
  }
  if (!a4 || (a4 & 7) != 0 || ((a4 + 24) & 7) != 0) {
    goto LABEL_47;
  }
  if (sub_100052560(*(unsigned __int16 *)(a4 + 24), (uint64_t)a1)
    && sub_100052560(1LL, (uint64_t)a2))
  {
    sub_1000534CC((uint64_t)v24);
    sub_1000534CC((uint64_t)v26);
    sub_100053908(a1, (uint64_t)v26);
    sub_100053908(a2, (uint64_t)v24);
    uint64_t result = sub_1000525E0((uint64_t)v26, (const void **)v24, a4);
    if (v9 >= 3)
    {
      int v11 = v9 - 1;
      do
      {
        if (sub_1000537EC(a3, (unsigned __int16)--v11))
        {
          sub_100052898((const void **)v26, (const void **)v24, (unsigned __int16 *)a1, (unsigned __int16 *)a2, a4);
          uint64_t v12 = v26;
          BOOL v13 = (const void **)v24;
        }

        else
        {
          sub_100052898(a1, a2, (unsigned __int16 *)v26, (unsigned __int16 *)v24, a4);
          uint64_t v12 = a1;
          BOOL v13 = a2;
        }

        uint64_t result = sub_1000525E0((uint64_t)v12, v13, a4);
      }

      while (v11 > 1);
    }

    if (a3)
    {
      if ((a3 & 7) == 0 && ((a3 + 8) & 7) == 0)
      {
        BOOL v14 = *(_BYTE **)(a3 + 8);
        if (v14)
        {
          if ((v14 & 3) == 0)
          {
            if ((*v14 & 1) != 0) {
              sub_100052898((const void **)v26, (const void **)v24, (unsigned __int16 *)a1, (unsigned __int16 *)a2, a4);
            }
            else {
              sub_1000525E0((uint64_t)a1, a2, a4);
            }
            sub_100053638((uint64_t)v26);
            unint64_t v19 = v24;
            return sub_100053638((uint64_t)v19);
          }
        }
      }
    }
  }

  else
  {
    sub_1000534CC((uint64_t)v24);
    sub_1000534CC((uint64_t)v26);
    sub_1000534CC((uint64_t)v20);
    sub_1000534CC((uint64_t)v22);
    sub_100053908(a1, (uint64_t)v22);
    sub_100053908(a2, (uint64_t)v20);
    sub_100053908(a1, (uint64_t)v26);
    sub_100053908(a2, (uint64_t)v24);
    uint64_t result = sub_1000525E0((uint64_t)v26, (const void **)v24, a4);
    if (v9 >= 3)
    {
      int v15 = v9 - 1;
      do
      {
        if (sub_1000537EC(a3, (unsigned __int16)--v15))
        {
          sub_1000529F0( (const void **)v26,  (const void **)v24,  (unsigned __int16 *)a1,  (unsigned __int16 *)a2,  (unsigned __int16 *)v22,  (unsigned __int16 *)v20,  a4);
          unsigned int v16 = v26;
          unsigned int v17 = (const void **)v24;
        }

        else
        {
          sub_1000529F0( a1,  a2,  (unsigned __int16 *)v26,  (unsigned __int16 *)v24,  (unsigned __int16 *)v22,  (unsigned __int16 *)v20,  a4);
          unsigned int v16 = a1;
          unsigned int v17 = a2;
        }

        uint64_t result = sub_1000525E0((uint64_t)v16, v17, a4);
      }

      while (v15 > 1);
    }

    if (a3)
    {
      if ((a3 & 7) == 0 && ((a3 + 8) & 7) == 0)
      {
        __int128 v18 = *(_BYTE **)(a3 + 8);
        if (v18)
        {
          if ((v18 & 3) == 0)
          {
            if ((*v18 & 1) != 0) {
              sub_1000529F0( (const void **)v26,  (const void **)v24,  (unsigned __int16 *)a1,  (unsigned __int16 *)a2,  (unsigned __int16 *)v22,  (unsigned __int16 *)v20,  a4);
            }
            else {
              sub_1000525E0((uint64_t)a1, a2, a4);
            }
            sub_100053638((uint64_t)v26);
            sub_100053638((uint64_t)v24);
            sub_100053638((uint64_t)v22);
            unint64_t v19 = v20;
            return sub_100053638((uint64_t)v19);
          }
        }
      }
    }
  }

LABEL_47:
  __break(0x5516u);
LABEL_48:
  __break(0x5500u);
  return result;
}

  __break(0x550Au);
}

uint64_t sub_100052560(uint64_t result, uint64_t a2)
{
  int v3 = result;
  if (!(_DWORD)result)
  {
    uint64_t result = sub_100053788(a2);
    if ((_DWORD)result) {
      return 1LL;
    }
  }

  if (a2 && (a2 & 7) == 0)
  {
    if (*(_WORD *)a2 != 1) {
      return 0LL;
    }
    if (((a2 + 8) & 7) == 0)
    {
      __int128 v4 = *(_DWORD **)(a2 + 8);
      if (v4)
      {
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_1000525E0(uint64_t result, const void **a2, uint64_t a3)
{
  if (!a3 || (a3 & 7) != 0 || (((_DWORD)a3 + 26) & 1) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t v5 = (const void **)result;
    if (*(_WORD *)(a3 + 26) == 4)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v14 = v6;
      __int128 v15 = v6;
      unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v11 = v6;
      __int128 v12 = v6;
      sub_1000534CC((uint64_t)&v14);
      sub_1000534CC((uint64_t)&v11);
      sub_100053908(v5, (uint64_t)&v14);
      sub_100052128((unint64_t)&v14, a3);
      sub_100053908(a2, (uint64_t)&v11);
      sub_100052128((unint64_t)&v11, a3);
      sub_1000520A4((unsigned __int16 *)v5, (unsigned __int16 *)a2, a3);
      sub_100053B78(4LL, (unsigned __int16 *)a2);
      sub_100051CDC((uint64_t)a2, a3, 0);
      sub_100053908((const void **)&v14, (uint64_t)v5);
      sub_10005201C((const void **)&v11, (unsigned __int16 *)v5, a3);
      sub_100052128((unint64_t)v5, a3);
      sub_100053C8C((unint64_t)&v11, (unsigned __int16 *)&v14);
      sub_100051CDC((uint64_t)&v14, a3, 0);
      sub_100053C8C((unint64_t)a2, (unsigned __int16 *)&v14);
      sub_100051CDC((uint64_t)&v14, a3, 0);
      sub_1000520A4((unsigned __int16 *)a2, (unsigned __int16 *)&v14, a3);
      sub_100053908((const void **)&v14, (uint64_t)a2);
      sub_100053638((uint64_t)&v14);
      unint64_t v7 = &v11;
    }

    else
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v14 = v8;
      __int128 v15 = v8;
      unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v11 = v8;
      __int128 v12 = v8;
      unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
      v9[0] = v8;
      v9[1] = v8;
      sub_1000534CC((uint64_t)&v14);
      sub_1000534CC((uint64_t)&v11);
      sub_1000534CC((uint64_t)v9);
      sub_100053908(v5, (uint64_t)&v14);
      sub_100052128((unint64_t)&v14, a3);
      sub_100053908(a2, (uint64_t)&v11);
      sub_100052128((unint64_t)&v11, a3);
      sub_100053908(v5, (uint64_t)v9);
      sub_1000520A4((unsigned __int16 *)a2, (unsigned __int16 *)v9, a3);
      sub_100053908((const void **)v9, (uint64_t)a2);
      sub_100053B78(*(unsigned __int16 *)(a3 + 26), (unsigned __int16 *)a2);
      sub_100051CDC((uint64_t)a2, a3, 0);
      sub_100053C8C((unint64_t)&v14, (unsigned __int16 *)a2);
      sub_100051CDC((uint64_t)a2, a3, 0);
      sub_100053C8C((unint64_t)&v11, (unsigned __int16 *)a2);
      sub_100051CDC((uint64_t)a2, a3, 0);
      sub_1000520A4((unsigned __int16 *)v9, (unsigned __int16 *)a2, a3);
      sub_100053B78(4LL, (unsigned __int16 *)a2);
      sub_100051CDC((uint64_t)a2, a3, 0);
      sub_100053908((const void **)&v14, (uint64_t)v5);
      sub_10005201C((const void **)&v11, (unsigned __int16 *)v5, a3);
      sub_100052128((unint64_t)v5, a3);
      sub_100053638((uint64_t)&v14);
      sub_100053638((uint64_t)&v11);
      unint64_t v7 = v9;
    }

    return sub_100053638((uint64_t)v7);
  }

  return result;
}

uint64_t sub_100052898( const void **a1, const void **a2, unsigned __int16 *a3, unsigned __int16 *a4, uint64_t a5)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v10;
  v14[1] = v10;
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  v12[0] = v10;
  v12[1] = v10;
  sub_1000534CC((uint64_t)v14);
  sub_1000534CC((uint64_t)v12);
  sub_100053908(a1, (uint64_t)v14);
  sub_1000520A4(a3, (unsigned __int16 *)v14, a5);
  sub_100053908(a2, (uint64_t)v12);
  sub_1000520A4(a4, (unsigned __int16 *)v12, a5);
  sub_10005201C((const void **)v12, (unsigned __int16 *)v14, a5);
  sub_100053908(a2, (uint64_t)v12);
  sub_1000520A4(a3, (unsigned __int16 *)v12, a5);
  sub_100053908((const void **)v14, (uint64_t)a3);
  sub_100052128((unint64_t)a3, a5);
  sub_1000520A4((unsigned __int16 *)a1, a4, a5);
  sub_10005201C((const void **)v12, a4, a5);
  uint64_t result = sub_100052128((unint64_t)a4, a5);
  if ((a5 & 7) != 0 || (((_BYTE)a5 + 24) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100053B78(*(unsigned __int16 *)(a5 + 24), a4);
    sub_100051CDC((uint64_t)a4, a5, 0);
    sub_100053638((uint64_t)v14);
    return sub_100053638((uint64_t)v12);
  }

  return result;
}

uint64_t sub_1000529F0( const void **a1, const void **a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v14;
  v18[1] = v14;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v14;
  v16[1] = v14;
  sub_1000534CC((uint64_t)v18);
  sub_1000534CC((uint64_t)v16);
  sub_100053908(a1, (uint64_t)v18);
  sub_1000520A4(a3, (unsigned __int16 *)v18, a7);
  sub_100053908(a2, (uint64_t)v16);
  sub_1000520A4(a4, (unsigned __int16 *)v16, a7);
  sub_10005201C((const void **)v16, (unsigned __int16 *)v18, a7);
  sub_100053908(a2, (uint64_t)v16);
  sub_1000520A4(a3, (unsigned __int16 *)v16, a7);
  sub_100053908((const void **)v18, (uint64_t)a3);
  sub_100052128((unint64_t)a3, a7);
  sub_1000520A4((unsigned __int16 *)a1, a4, a7);
  sub_10005201C((const void **)v16, a4, a7);
  sub_100052128((unint64_t)a4, a7);
  sub_1000520A4(a5, a4, a7);
  sub_1000520A4(a6, a3, a7);
  sub_100053638((uint64_t)v18);
  return sub_100053638((uint64_t)v16);
}

uint64_t sub_100052B44(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0 && (((_DWORD)result + 2) & 1) == 0 && a2 && (a2 & 7) == 0 && ((a2 + 12) & 3) == 0)
  {
    uint64_t v2 = *(unsigned __int16 *)(a2 + 12);
    uint64_t v3 = *(unsigned __int16 *)result;
    if (v3 >= v2)
    {
LABEL_21:
      *(_WORD *)uint64_t result = v2;
      result += 8LL;
      if ((result & 7) == 0)
      {
        unint64_t v9 = *(void *)result;
        uint64_t v10 = 4 * v2 - 4;
        BOOL v11 = __CFADD__(v10, *(void *)result);
        if ((_DWORD)v2) {
          BOOL v12 = v10 + *(void *)result >= v9;
        }
        else {
          BOOL v12 = v11;
        }
        if (!v12) {
          goto LABEL_33;
        }
        if (v9 && ((v9 + v10) & 3) == 0)
        {
          uint64_t result = 0LL;
          *(_DWORD *)(v9 + v10) = *(_DWORD *)(v9 + v10) & 0x3FFFFFFF | 0x40000000;
          return result;
        }
      }
    }

    else if (((result + 8) & 7) == 0)
    {
      uint64_t v4 = *(void *)(result + 8);
      BOOL v6 = (v4 & 3) == 0 && v4 != 0;
      unint64_t v7 = 4 * v3;
      uint64_t v8 = v2 - v3;
      while (v7 <= ~v4)
      {
        if (!v6) {
          goto LABEL_32;
        }
        *(_DWORD *)(v4 + v7) = 0;
        v7 += 4LL;
        if (!--v8) {
          goto LABEL_21;
        }
      }

      goto LABEL_33;
    }
  }

uint64_t sub_100052C40( const void **a1, const void **a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, unsigned __int16 *a6, uint64_t a7)
{
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v14;
  v22[1] = v14;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v14;
  v20[1] = v14;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v14;
  v18[1] = v14;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v14;
  v16[1] = v14;
  sub_1000534CC((uint64_t)v22);
  sub_1000534CC((uint64_t)v20);
  sub_1000534CC((uint64_t)v18);
  sub_1000534CC((uint64_t)v16);
  sub_100053908(a1, (uint64_t)v22);
  sub_1000520A4(a3, (unsigned __int16 *)v22, a7);
  sub_100053908(a1, (uint64_t)v20);
  sub_1000520A4(a4, (unsigned __int16 *)v20, a7);
  sub_100053908(a2, (uint64_t)v18);
  sub_1000520A4(a4, (unsigned __int16 *)v18, a7);
  sub_100053908(a2, (uint64_t)v16);
  sub_1000520A4(a3, (unsigned __int16 *)v16, a7);
  sub_100053908((const void **)v20, (uint64_t)a1);
  sub_10005201C((const void **)v16, (unsigned __int16 *)a1, a7);
  sub_100052128((unint64_t)a1, a7);
  sub_1000520A4(a5, (unsigned __int16 *)a1, a7);
  sub_1000520A4(a5, (unsigned __int16 *)a1, a7);
  sub_100053908((const void **)v22, (uint64_t)a3);
  sub_10005201C((const void **)v18, a3, a7);
  sub_100052128((unint64_t)a3, a7);
  sub_1000520A4(a6, a3, a7);
  sub_1000520A4(a6, a3, a7);
  sub_100053C8C((unint64_t)a3, (unsigned __int16 *)a1);
  sub_100051CDC((uint64_t)a1, a7, 0);
  sub_100053908((const void **)v20, (uint64_t)a3);
  sub_100053C8C((unint64_t)v16, a3);
  sub_100051CDC((uint64_t)a3, a7, 0);
  sub_100053908((const void **)v22, (uint64_t)a2);
  sub_100053C8C((unint64_t)v18, (unsigned __int16 *)a2);
  sub_100051CDC((uint64_t)a2, a7, 0);
  uint64_t result = sub_1000520A4((unsigned __int16 *)a2, a3, a7);
  if (!a7 || (a7 & 7) != 0 || (((_DWORD)a7 + 26) & 1) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000539D8(*(unsigned __int16 *)(a7 + 26), a2);
    sub_1000520A4((unsigned __int16 *)v20, (unsigned __int16 *)a2, a7);
    sub_1000520A4((unsigned __int16 *)v16, (unsigned __int16 *)a2, a7);
    sub_100053C8C((unint64_t)a2, (unsigned __int16 *)a2);
    sub_100051CDC((uint64_t)a2, a7, 0);
    sub_100053C8C((unint64_t)a2, a3);
    sub_100051CDC((uint64_t)a3, a7, 0);
    sub_1000520A4(a5, a3, a7);
    sub_1000520A4(a6, a3, a7);
    sub_100053C8C((unint64_t)a3, a3);
    sub_100051CDC((uint64_t)a3, a7, 0);
    sub_10005201C((const void **)a3, (unsigned __int16 *)a1, a7);
    sub_100053638((uint64_t)v22);
    sub_100053638((uint64_t)v20);
    sub_100053638((uint64_t)v18);
    sub_100053638((uint64_t)v16);
    return sub_100053788((uint64_t)a1) != 0;
  }

  return result;
}

const void **sub_100052F50( uint64_t a1, unsigned __int16 *a2, unsigned int a3, unsigned __int16 *a4, unsigned int a5)
{
  unint64_t v35 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[0] = v10;
  v34[1] = v10;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  v32[0] = v10;
  v32[1] = v10;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  v30[0] = v10;
  v30[1] = v10;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v10;
  v28[1] = v10;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  v26[0] = v10;
  v26[1] = v10;
  unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v10;
  v24[1] = v10;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  v22[1] = v10;
  v22[0] = v10;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  v20[0] = v10;
  v20[1] = v10;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  v18[1] = v10;
  _OWORD v18[2] = v10;
  v18[0] = v10;
  unsigned __int16 v17 = -21846;
  __int16 v16 = -21846;
  sub_1000534CC((uint64_t)v20);
  sub_1000534CC((uint64_t)v34);
  sub_1000534CC((uint64_t)v32);
  sub_1000534CC((uint64_t)v30);
  sub_1000534CC((uint64_t)v28);
  sub_1000534CC((uint64_t)v26);
  sub_1000534CC((uint64_t)v24);
  sub_1000534CC((uint64_t)v22);
  sub_10005359C((uint64_t)v18);
  uint64_t v11 = sub_1000532D4(a1);
  if (!v11)
  {
    uint64_t v14 = 1LL;
    goto LABEL_21;
  }

  BOOL v12 = (unsigned __int16 *)v11;
  unsigned int v13 = sub_10005189C( a4,  a5,  &v17,  &v16,  (unsigned __int16 *)v34,  (unsigned __int16 *)v32,  (unsigned __int16 *)v30);
  uint64_t v14 = 5LL;
  if (!v13 || v17 != 61453) {
    goto LABEL_21;
  }
  if (v16 != 6)
  {
    uint64_t v14 = 20LL;
    goto LABEL_21;
  }

  uint64_t result = sub_100053908((const void **)v32, (uint64_t)v18);
  if ((v12 & 7) == 0 && (((_DWORD)v12 + 14) & 1) == 0)
  {
    sub_1000539D8(v12[7], v20);
    uint64_t result = (const void **)sub_100053C8C((unint64_t)v20, (unsigned __int16 *)v18);
    if (((unint64_t)(v12 + 6) & 3) == 0)
    {
      if (LOWORD(v20[0]) > v12[6])
      {
        uint64_t v14 = 18LL;
LABEL_21:
        sub_100053638((uint64_t)v28);
        sub_100053638((uint64_t)v26);
        sub_100053638((uint64_t)v32);
        sub_100053638((uint64_t)v30);
        sub_100053638((uint64_t)v24);
        sub_100053638((uint64_t)v22);
        sub_100053638((uint64_t)v20);
        sub_100053638((uint64_t)v34);
        sub_100053638((uint64_t)v18);
        return (const void **)v14;
      }

      uint64_t v14 = (uint64_t)sub_100051A04(a2, a3, (unsigned __int16 *)v20);
      if ((_DWORD)v14) {
        goto LABEL_21;
      }
      uint64_t result = (const void **)sub_100052B44((uint64_t)v20, (uint64_t)v12);
      if ((_DWORD)result) {
        sub_1000D2640();
      }
      if ((((_BYTE)v12 + 24) & 7) == 0)
      {
        sub_1000539D8(v12[12], v28);
        sub_100051C94((const void **)v28, (const void **)v26, (uint64_t)v34, (uint64_t)v12);
        sub_100053908((const void **)v32, (uint64_t)v18);
        sub_100053F58((unsigned __int16 *)v20, (unsigned __int16 *)v18);
        uint64_t result = (const void **)sub_100051CDC((uint64_t)v18, (uint64_t)v12, 1);
        if (a1)
        {
          if ((a1 & 7) == 0)
          {
            sub_100053908((const void **)a1, (uint64_t)v24);
            uint64_t result = (const void **)(a1 + 40);
            if (((a1 + 40) & 7) == 0)
            {
              sub_100053908(result, (uint64_t)v22);
              sub_10005219C((const void **)v24, (const void **)v22, (uint64_t)v18, (uint64_t)v12);
              if (sub_100052C40( (const void **)v32,  (const void **)v30,  (unsigned __int16 *)v24,  (unsigned __int16 *)v22,  (unsigned __int16 *)v28,  (unsigned __int16 *)v26,  (uint64_t)v12)) {
                uint64_t v14 = 0LL;
              }
              else {
                uint64_t v14 = 6LL;
              }
              goto LABEL_21;
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100053244(uint64_t result, uint64_t a2)
{
  if (!result {
    || (uint64_t v2 = result, (result & 7) != 0)
  }
    || (((_BYTE)result + 88) & 7) != 0
    || (*(void *)(result + 8_Block_object_dispose((const void *)(v1 - 48), 8) = a2, result += 96LL, ((v2 + 96) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100053568(result, 0, 6, v2 + 112);
    return sub_100051C24(a2, v2);
  }

  return result;
}

uint64_t sub_1000532A8(uint64_t result)
{
  if (!result) {
    return 1LL;
  }
  if ((result & 7) == 0 && ((result + 88) & 7) == 0) {
    return sub_100051BE4(*(void *)(result + 88));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000532D4(uint64_t result)
{
  if (result && (result & 7) == 0 && ((result + 88) & 7) == 0) {
    return *(void *)(result + 88);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000532F8(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t result = sub_100053348(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (!a1 || (a1 & 7) != 0 || ((a1 + 96) & 7) != 0) {
      __break(0x5516u);
    }
    else {
      return 2 * (*(_WORD *)(a1 + 96) != 0);
    }
  }

  return result;
}

uint64_t sub_100053348(uint64_t a1, unsigned __int16 *a2, unsigned int a3)
{
  if (a3 > 3)
  {
    uint64_t result = (uint64_t)sub_1000516E4(a2);
    if ((unint64_t)a2 < 0xFFFFFFFFFFFFFFFELL)
    {
      if ((_DWORD)result == 65261)
      {
        char v8 = 1;
      }

      else
      {
        if ((_DWORD)result != 57005)
        {
          BOOL v6 = "feePublicKey: Bad Public Key Magic Number";
          goto LABEL_27;
        }

        char v8 = 0;
      }

      if ((unint64_t)(a2 + 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (!(((unint64_t)(unsigned __int16)(a3 - 2) - 2) >> 16))
        {
          uint64_t result = (uint64_t)sub_1000516E4(a2 + 2);
          if ((unint64_t)(a2 + 2) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            if ((unsigned __int16)(a3 - 4) < 2uLL)
            {
LABEL_32:
              __break(0x5515u);
              return result;
            }

            uint64_t result = (uint64_t)sub_100051B90((__int16 *)result);
            if (a1 && (a1 & 7) == 0 && ((a1 + 88) & 7) == 0)
            {
              uint64_t v9 = result;
              *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 48), 8) = result;
              if (!result)
              {
                BOOL v6 = "feePublicKey: Bad Key Blob(2)";
                goto LABEL_27;
              }

              uint64_t result = (uint64_t)(a2 + 3);
              if ((v8 & 1) != 0)
              {
                if (!sub_1000517E4((unsigned __int16 *)result, (unsigned __int16)(a3 - 6), v9, a1))
                {
                  BOOL v6 = "feePublicKey: Bad Key Blob(4)";
                  goto LABEL_27;
                }

                return 0LL;
              }

              if (((a1 + 96) & 7) == 0)
              {
                if (!sub_100051708( (unsigned __int16 *)result,  (unsigned __int16)(a3 - 6),  (unsigned __int16 *)(a1 + 96)))
                {
                  BOOL v6 = "feePublicKey: Bad Key Blob(3)";
                  goto LABEL_27;
                }

                uint64_t result = sub_100051C24(*(void *)(a1 + 88), a1);
                if ((_DWORD)result) {
                  return result;
                }
                return 0LL;
              }
            }

uint64_t sub_1000534CC(uint64_t result)
{
  if (!result
    || (result & 7) != 0
    || (*(_WORD *)uint64_t result = 0, (((_DWORD)result + 2) & 1) != 0)
    || (*(_WORD *)(result + 2) = 6, ((result + 8) & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_14;
  }

  *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = result + 16;
  uint64_t v1 = dword_10011C8D0 + 40LL;
  if (v1 != (int)v1)
  {
LABEL_15:
    __break(0x5507u);
    return result;
  }

  dword_10011C8D0 += 40;
  int v2 = dword_10011C8D8 + 1;
  if (__OFADD__(dword_10011C8D8, 1))
  {
LABEL_14:
    __break(0x5500u);
    goto LABEL_15;
  }

  ++dword_10011C8D8;
  if (v2 > dword_10011C8DC) {
    dword_10011C8DC = v2;
  }
  return result;
}

uint64_t sub_100053568(uint64_t result, __int16 a2, __int16 a3, uint64_t a4)
{
  if (!result
    || (result & 7) != 0
    || (*(_WORD *)uint64_t result = a2, (((_DWORD)result + 2) & 1) != 0)
    || (*(_WORD *)(result + 2) = a3, ((result + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a4;
  }

  return result;
}

uint64_t sub_10005359C(uint64_t result)
{
  if (!result
    || (result & 7) != 0
    || (*(_WORD *)uint64_t result = 0, (((_DWORD)result + 2) & 1) != 0)
    || (*(_WORD *)(result + 2) = 10, ((result + 8) & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_14;
  }

  *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = result + 16;
  uint64_t v1 = dword_10011C8D0 + 56LL;
  if (v1 != (int)v1)
  {
LABEL_15:
    __break(0x5507u);
    return result;
  }

  dword_10011C8D0 += 56;
  int v2 = dword_10011C8E0 + 1;
  if (__OFADD__(dword_10011C8E0, 1))
  {
LABEL_14:
    __break(0x5500u);
    goto LABEL_15;
  }

  ++dword_10011C8E0;
  if (v2 > dword_10011C8E4) {
    dword_10011C8E4 = v2;
  }
  return result;
}

uint64_t sub_100053638(uint64_t result)
{
  if (!result || (result & 7) != 0 || (((_DWORD)result + 2) & 1) != 0)
  {
    __break(0x5516u);
LABEL_13:
    __break(0x5515u);
    goto LABEL_14;
  }

  uint64_t v1 = *(unsigned __int16 *)(result + 2);
  unint64_t v2 = 4 * v1 + 4;
  BOOL v3 = dword_10011C8D0 >= v2;
  unint64_t v4 = dword_10011C8D0 - v2;
  if (!v3) {
    goto LABEL_13;
  }
  if (v4 == (int)v4)
  {
    dword_10011C8D0 = v4;
    else {
      unint64_t v5 = &dword_10011C8E0;
    }
    if (!__OFSUB__(*v5, 1))
    {
      --*v5;
      return result;
    }

    goto LABEL_13;
  }

uint64_t sub_1000536B0(uint64_t a1)
{
  uint64_t result = sub_100053788(a1);
  if ((_DWORD)result)
  {
    LOWORD(v3) = 0;
    return (unsigned __int16)v3;
  }

  if (!a1 || (a1 & 7) != 0 || (((_BYTE)a1 + 8) & 7) != 0) {
    goto LABEL_25;
  }
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(unsigned __int16 *)a1 - 1LL;
  BOOL v6 = __CFADD__(v4, 4 * v5);
  if (*(_WORD *)a1) {
    BOOL v7 = v4 + 4 * v5 >= v4;
  }
  else {
    BOOL v7 = v6;
  }
  if (!v7) {
    goto LABEL_26;
  }
  if (!v4 || (char v8 = (int *)(v4 + 4 * v5), (v8 & 3) != 0))
  {
LABEL_25:
    __break(0x5516u);
LABEL_26:
    __break(0x5513u);
    goto LABEL_27;
  }

  int v9 = *v8;
  if (!*v8) {
    sub_1000D266C();
  }
  uint64_t v10 = 32LL;
  if ((v9 & 0x80000000) == 0)
  {
    unsigned int v11 = 0x80000000;
    while (1)
    {
      uint64_t v10 = (unsigned __int16)v10 - 1;
      BOOL v12 = (v9 & (v11 >> 1)) == 0;
      v11 >>= 1;
      if (!v12) {
        goto LABEL_20;
      }
    }

uint64_t sub_100053788(uint64_t result)
{
  if (result && (result & 7) == 0)
  {
    int v1 = *(unsigned __int16 *)result;
    if (!*(_WORD *)result) {
      return 1LL;
    }
    if (((result + 8) & 7) == 0)
    {
      for (uint64_t i = *(_DWORD **)(result + 8); i && (*(void *)(result + 8) & 3LL) == 0; ++i)
      {
        if (*i) {
          return 0LL;
        }
        if (!--v1) {
          return 1LL;
        }
      }
    }
  }

  __break(0x5516u);
LABEL_14:
  __break(0x5513u);
  return result;
}

uint64_t sub_1000537EC(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x1F) == 0x1F) {
    goto LABEL_10;
  }
  if (!result || (result & 7) != 0 || ((result + 8) & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
LABEL_10:
    __break(0x5514u);
    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(result + 8);
  if (!__CFADD__(v2, 4LL * (a2 >> 5)))
  {
    if (v2)
    {
      unint64_t v3 = (_DWORD *)(v2 + 4LL * (a2 >> 5));
    }

    goto LABEL_9;
  }

unsigned __int16 *sub_100053850(unsigned __int16 *result)
{
  if (!result) {
    goto LABEL_23;
  }
  uint64_t v1 = *result;
  unint64_t v2 = *((void *)result + 1);
  uint64_t v3 = 4 * v1 - 4;
  BOOL v4 = __CFADD__(v3, v2);
  BOOL v5 = v3 + v2 >= v2;
  if (!*result) {
    BOOL v5 = v4;
  }
  if (!v5) {
    goto LABEL_22;
  }
  if (!v2) {
    goto LABEL_23;
  }
  BOOL v6 = (_DWORD *)(v2 + v3);
  if (*v6) {
    return result;
  }
  BOOL v7 = v1 >= 2;
  unsigned int v8 = v1 - 2;
  if (v7)
  {
    while (~v2 >= 4 * (unint64_t)v8)
    {
      if (*(_DWORD *)(v2 + 4LL * v8)) {
        goto LABEL_20;
      }
      if ((int)v8-- <= 0)
      {
        unsigned __int16 v10 = 0;
        goto LABEL_21;
      }
    }

const void **sub_100053908(const void **result, uint64_t a2)
{
  if (!result) {
    sub_1000D2698(275, "srcgiant != ((void *)0)");
  }
  if (!a2) {
    sub_1000D2698(276, "destgiant != ((void *)0)");
  }
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned __int16 *)result;
  if ((((_BYTE)a2 + 8) & 7) != 0 || (((_BYTE)result + 8) & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (const void **)memcpy(*(void **)(a2 + 8), result[1], 4 * v4);
    unsigned int v5 = *(unsigned __int16 *)v3;
    *(_WORD *)a2 = v5;
  }

  return result;
}

uint64_t sub_1000539D8(uint64_t result, _WORD *a2)
{
  if (a2 && (a2 & 7) == 0)
  {
    *a2 = 0;
    unint64_t v2 = (_DWORD **)(a2 + 4);
    uint64_t v3 = (unint64_t)(a2 + 4) & 7;
    if ((_DWORD)result)
    {
      if (!v3)
      {
        uint64_t v4 = *v2;
        if (v4)
        {
          if ((v4 & 3) == 0)
          {
            _DWORD *v4 = result;
            *a2 = 1;
            return result;
          }
        }
      }
    }

    else if (!v3)
    {
      unsigned int v5 = *v2;
      if (v5)
      {
        if ((v5 & 3) == 0)
        {
          _DWORD *v5 = 0;
          return result;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100053A38(uint64_t result, uint64_t a2)
{
  if (!a2 || (a2 & 7) != 0) {
    goto LABEL_34;
  }
  unsigned int v3 = result;
  unint64_t v4 = *(unsigned __int16 *)a2;
  uint64_t result = sub_100053788(a2);
  if ((_DWORD)result)
  {
    if (v3 < 0x10000) {
      return sub_1000539D8((unsigned __int16)v3, (_WORD *)a2);
    }
    goto LABEL_36;
  }

  BOOL v5 = v3 != 0;
  if ((_DWORD)v4 && v3)
  {
    if (((a2 + 8) & 7) == 0)
    {
      unint64_t v6 = 0LL;
      uint64_t v7 = *(void *)(a2 + 8);
      BOOL v9 = (v7 & 3) == 0 && v7 != 0;
      unint64_t v10 = 1LL;
      while (v6 <= ~v7)
      {
        if (!v9) {
          goto LABEL_34;
        }
        int v11 = *(_DWORD *)(v7 + v6);
        int v12 = v11 + v3;
        BOOL v5 = __CFADD__(v11, v3);
        unsigned int v3 = v5;
        *(_DWORD *)(v7 + v6) = v12;
        if (v10 < v4)
        {
          v6 += 4LL;
          ++v10;
          if (v5) {
            continue;
          }
        }

        goto LABEL_23;
      }

      goto LABEL_35;
    }

    goto LABEL_34;
  }

uint64_t sub_100053B78(uint64_t result, unsigned __int16 *a2)
{
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      unsigned int v2 = *a2;
      if (((unint64_t)(a2 + 4) & 7) == 0)
      {
        if (*a2)
        {
          unsigned int v3 = (_DWORD *)*((void *)a2 + 1);
          if (__CFADD__(v3, 4LL * (v2 - 1))) {
            goto LABEL_24;
          }
          if (v3)
          {
            unint64_t v4 = &v3[v2 - 1];
            if ((v4 & 3) == 0)
            {
              if (!*v4) {
                sub_1000D26EC(369, "(size == 0) || (g->n[size - 1] != 0)");
              }
              unsigned int v5 = 0;
              unint64_t v6 = 0LL;
              uint64_t v7 = *((void *)a2 + 1) & 3LL;
              uint64_t v8 = *((void *)a2 + 1);
              while (!v7)
              {
                unint64_t v9 = v6 + *v3 * (unint64_t)result;
                _DWORD *v3 = v9;
                if (v5 == 0xFFFF) {
                  goto LABEL_25;
                }
                ++v3;
                unint64_t v6 = HIDWORD(v9);
                unsigned int v5 = (unsigned __int16)(v5 + 1);
                LOBYTE(v_Block_object_dispose((const void *)(v1 - 48), 8) = v8 + 4;
                if (v5 >= v2)
                {
                  if (!(_DWORD)v6) {
                    goto LABEL_18;
                  }
                  if ((v8 & 3) != 0) {
                    break;
                  }
                  _DWORD *v3 = v6;
                  if (v2 == 0xFFFF) {
                    goto LABEL_25;
                  }
                  *a2 = v2 + 1;
                  return result;
                }
              }
            }
          }
        }

        else
        {
LABEL_18:
          if ((((_DWORD)a2 + 2) & 1) == 0)
          {
            if (v2 > a2[1]) {
              sub_1000D26EC(386, "(g)->sign <= (g)->capacity");
            }
            return result;
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_24:
  __break(0x5513u);
LABEL_25:
  __break(0x5507u);
  return result;
}

unint64_t sub_100053C8C(unint64_t result, unsigned __int16 *a2)
{
  if (!result
    || (result & 7) != 0
    || !a2
    || (a2 & 7) != 0
    || ((result + 8) & 7) != 0
    || ((unint64_t)(a2 + 4) & 7) != 0)
  {
    goto LABEL_62;
  }

  unsigned int v2 = *(unsigned __int16 *)result;
  unsigned int v3 = *a2;
  unint64_t v4 = *(void *)(result + 8);
  unint64_t v5 = *((void *)a2 + 1);
  if (v2 < v3)
  {
    if (!*(_WORD *)result)
    {
      LODWORD(v7) = 0;
      uint64_t v10 = *((void *)a2 + 1);
LABEL_31:
      while (v5 && (v10 & 3) == 0)
      {
        if (v5 > 0xFFFFFFFFFFFFFFFBLL) {
          goto LABEL_61;
        }
        BOOL v17 = __CFADD__(*(_DWORD *)v5, (_DWORD)v7);
        *(_DWORD *)v5 += v7;
        v5 += 4LL;
        LODWORD(v7) = v17;
        if (++v2 >= v3) {
          goto LABEL_53;
        }
      }

      goto LABEL_62;
    }

    unsigned int v6 = 0;
    unint64_t v7 = 0LL;
    uint64_t v8 = *(void *)(result + 8) & 3LL;
    uint64_t v9 = *((void *)a2 + 1) & 3LL;
    uint64_t v10 = *((void *)a2 + 1);
    while (v4 < 0xFFFFFFFFFFFFFFFCLL)
    {
      if (!v4 || v8 || !v5 || v9) {
        goto LABEL_62;
      }
      if (v5 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_61;
      }
      uint64_t result = *(unsigned int *)v5;
      unint64_t v11 = v7 + *(unsigned int *)v4 + result;
      *(_DWORD *)unint64_t v5 = v11;
      if (v6 == 0xFFFF) {
        goto LABEL_63;
      }
      v4 += 4LL;
      v5 += 4LL;
      unint64_t v7 = HIDWORD(v11);
      unsigned int v6 = (unsigned __int16)(v6 + 1);
      LOBYTE(v10) = v10 + 4;
      if (v6 >= v2) {
        goto LABEL_31;
      }
    }

    goto LABEL_61;
  }

  if (*a2)
  {
    unsigned int v12 = 0;
    uint64_t result = 0LL;
    unint64_t v13 = v4 & 3;
    uint64_t v14 = *((void *)a2 + 1) & 3LL;
    LOBYTE(v15) = v4;
    uint64_t v16 = *((void *)a2 + 1);
    while (v4 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      if (!v4 || v13 || !v5 || v14) {
        goto LABEL_62;
      }
      if (v5 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_61;
      }
      result += *(unsigned int *)v4 + (unint64_t)*(unsigned int *)v5;
      *(_DWORD *)unint64_t v5 = result;
      if (v12 == 0xFFFF) {
        goto LABEL_63;
      }
      v4 += 4LL;
      v5 += 4LL;
      result >>= 32;
      unsigned int v12 = (unsigned __int16)(v12 + 1);
      LOBYTE(v16) = v16 + 4;
      LOBYTE(v15) = v15 + 4;
      if (v12 >= v3)
      {
        LODWORD(v7) = result;
        goto LABEL_40;
      }
    }

    goto LABEL_61;
  }

  LODWORD(v7) = 0;
  uint64_t v16 = *((void *)a2 + 1);
  uint64_t v15 = *(void *)(result + 8);
LABEL_40:
  if (v3 < v2)
  {
    uint64_t v18 = v15 & 3;
    uint64_t v19 = v16 & 3;
    while (v4 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      if (!v4 || v18) {
        goto LABEL_62;
      }
      int v20 = *(_DWORD *)v4 + v7;
      LODWORD(v7) = __CFADD__(*(_DWORD *)v4, (_DWORD)v7);
      if (v5 > 0xFFFFFFFFFFFFFFFBLL) {
        break;
      }
      if (!v5 || v19) {
        goto LABEL_62;
      }
      v4 += 4LL;
      unint64_t v21 = v5 + 4;
      *(_DWORD *)unint64_t v5 = v20;
      ++v3;
      v5 += 4LL;
      if (v3 >= v2)
      {
        unsigned int v3 = v2;
        unint64_t v5 = v21;
        goto LABEL_53;
      }
    }

void *sub_100053EDC(void *result, unsigned __int16 *a2)
{
  if ((_DWORD)result)
  {
    unsigned int v2 = *a2;
    if (v2 > result)
    {
      unsigned int v3 = v2 - (_DWORD)result;
      if (HIWORD(v3)) {
        goto LABEL_13;
      }
      *a2 = v3;
      int v4 = 4 * v3;
      size_t v5 = (unsigned __int16)v4 & 0xFFFC;
      if ((_DWORD)v5 != (v4 & 0x3FFFC)) {
        goto LABEL_13;
      }
      if (((unint64_t)(a2 + 4) & 7) == 0)
      {
        unsigned int v6 = (char *)*((void *)a2 + 1);
        goto LABEL_14;
      }

uint64_t sub_100053F58(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = v4;
  void v6[2] = v4;
  v6[0] = v4;
  sub_10005359C((uint64_t)v6);
  sub_100053FC0(a1, a2, v6);
  sub_100053908((const void **)v6, (uint64_t)a2);
  return sub_100053638((uint64_t)v6);
}

void sub_100053FC0(unsigned __int16 *a1, unsigned __int16 *a2, _WORD *a3)
{
  if (dword_10011C8E8 == -1)
  {
LABEL_72:
    __break(0x5500u);
    goto LABEL_73;
  }

  unsigned int v6 = *a1;
  unsigned int v7 = *a2;
  ++dword_10011C8E8;
  unsigned int v8 = v7 + v6;
  uint64_t v9 = (void **)(a3 + 4);
  bzero(*v9, 4 * v8);
  unint64_t v10 = *((void *)a2 + 1);
  if (v7 >= 2)
  {
    unsigned __int16 v11 = 0;
    uint64_t v12 = *((void *)a2 + 1) & 3LL;
    while (1)
    {
      if (v10 >= 0xFFFFFFFFFFFFFFFCLL) {
        goto LABEL_73;
      }
      if (!v10 || v12) {
        goto LABEL_75;
      }
      unint64_t v13 = (unsigned int *)(v10 + 4);
      if (v10 + 4 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_73;
      }
      uint64_t v14 = *v9;
      if (__CFADD__(*v9, 4LL * v11)) {
        goto LABEL_73;
      }
      if (!v14) {
        goto LABEL_75;
      }
      unint64_t v15 = (unint64_t)v14 + 4 * v11;
      if ((v15 & 3) != 0) {
        goto LABEL_75;
      }
      unsigned int v17 = *(_DWORD *)v10;
      v10 += 8LL;
      unsigned int v16 = v17;
      uint64_t v18 = *v13;
      uint64_t v19 = *(unsigned int *)v15;
      if (v6) {
        break;
      }
      unint64_t v23 = 0LL;
      unint64_t v22 = 0LL;
      LODWORD(v30) = 0;
LABEL_36:
      unint64_t v35 = v18 * (unint64_t)v30;
      BOOL v26 = __CFADD__(v19 + v23, v35);
      unint64_t v36 = v19 + v23 + v35;
      if (v26) {
        goto LABEL_72;
      }
      BOOL v26 = __CFADD__(v36, v22);
      unint64_t v37 = v36 + v22;
      if (v26) {
        goto LABEL_72;
      }
      if (v15 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_73;
      }
      if ((v15 & 3) != 0) {
        goto LABEL_75;
      }
      *(void *)unint64_t v15 = v37;
      v11 += 2;
      if ((unsigned __int16)(v7 - 1) <= v11)
      {
        unint64_t v38 = HIDWORD(v37);
        goto LABEL_43;
      }
    }

    unsigned int v20 = 0;
    uint64_t v21 = 0LL;
    unint64_t v22 = 0LL;
    unint64_t v23 = 0LL;
    unint64_t v24 = *((void *)a1 + 1);
    unint64_t v25 = v24 & 3;
    while (v24 <= 0xFFFFFFFFFFFFFFFBLL)
    {
      if (!v24 || v25) {
        goto LABEL_75;
      }
      BOOL v26 = __CFADD__(v23, v22);
      unint64_t v27 = v23 + v22;
      if (v26) {
        goto LABEL_72;
      }
      BOOL v26 = __CFADD__(v19, v27);
      uint64_t v28 = v19 + v27;
      if (v26) {
        goto LABEL_72;
      }
      int v29 = dword_10011C8EC + 1;
      if (dword_10011C8EC == -1) {
        goto LABEL_72;
      }
      uint64_t v30 = *(unsigned int *)v24;
      ++dword_10011C8EC;
      int v31 = v29 + 1;
      if (v29 == -1) {
        goto LABEL_72;
      }
      unint64_t v32 = v21 * v18;
      dword_10011C8EC = v31;
      unint64_t v33 = v30 * v16 + (unint64_t)(v21 * v18);
      BOOL v26 = __CFADD__(v33, v28);
      unint64_t v34 = v33 + v28;
      if (v26) {
        goto LABEL_72;
      }
      if (v15 > 0xFFFFFFFFFFFFFFFBLL) {
        goto LABEL_73;
      }
      uint64_t v19 = *(unsigned int *)(v15 + 4);
      *(_DWORD *)unint64_t v15 = v34;
      if (v20 == 0xFFFF) {
        goto LABEL_76;
      }
      v24 += 4LL;
      unint64_t v22 = HIDWORD(v32);
      unint64_t v23 = HIDWORD(v34) + ((v30 * (unint64_t)v16) >> 32);
      v15 += 4LL;
      unsigned int v20 = (unsigned __int16)(v20 + 1);
      uint64_t v21 = v30;
      if (v20 >= v6) {
        goto LABEL_36;
      }
    }

    goto LABEL_73;
  }

  unsigned __int16 v11 = 0;
  unint64_t v38 = 0LL;
LABEL_43:
  if (v7 > v11)
  {
    if (!v10 || (v10 & 3) != 0) {
      goto LABEL_75;
    }
    unsigned int v39 = *(_DWORD *)v10;
    if (!v39) {
      goto LABEL_65;
    }
    uint64_t v40 = a1 + 4;
    if (!__CFADD__(*v9, 4LL * v11))
    {
      uint64_t v41 = (uint64_t)*v9 + 4 * v11;
      if (v6)
      {
        unsigned int v42 = 0;
        unint64_t v38 = 0LL;
        unsigned int v43 = (unsigned int *)*v40;
        uint64_t v44 = *v40 & 3LL;
        uint64_t v45 = (unint64_t)*v9 & 3;
        char v46 = (_DWORD *)v41;
        do
        {
          if (!v43 || v44) {
            goto LABEL_75;
          }
          if (dword_10011C8EC == -1) {
            goto LABEL_72;
          }
          unsigned int v47 = *v43;
          ++dword_10011C8EC;
          if (!v46 || v45) {
            goto LABEL_75;
          }
          unint64_t v48 = v47 * (unint64_t)v39;
          uint64_t v41 = (uint64_t)(v46 + 1);
          unint64_t v49 = v48 + v38 + *v46;
          *char v46 = v49;
          if (v42 == 0xFFFF) {
            goto LABEL_76;
          }
          ++v43;
          unint64_t v38 = HIDWORD(v49);
          unsigned int v42 = (unsigned __int16)(v42 + 1);
          ++v46;
        }

        while (v42 < v6);
        if (!v41) {
          goto LABEL_75;
        }
      }

      else
      {
        unint64_t v38 = 0LL;
        if (!v41) {
          goto LABEL_75;
        }
      }

      if ((v41 & 3) == 0)
      {
        *(_DWORD *)uint64_t v41 = v38;
        goto LABEL_65;
      }

LABEL_75:
      __break(0x5516u);
      goto LABEL_76;
    }

              if (((v9 + 1404) & 3) != 0) {
                goto LABEL_84;
              }
              unint64_t v10 = (*(_BYTE *)(v9 + 1404) & 0x20) == 0;
              unsigned __int16 v11 = 24000;
LABEL_50:
              uint64_t v12 = 32000;
LABEL_51:
              if (v10) {
                unsigned int v6 = v12;
              }
              else {
                unsigned int v6 = v11;
              }
              goto LABEL_54;
            }

          sub_100070F1C(*(void *)(a1 + 8), v10, 0);
          return;
        }

LABEL_73:
    __break(0x5513u);
LABEL_74:
    sub_1000D2740();
  }

            if (((v9 + 1404) & 3) != 0) {
              goto LABEL_84;
            }
            if ((*(_BYTE *)(v9 + 1404) & 0x10) != 0)
            {
              unsigned int v6 = 22050LL;
              goto LABEL_54;
            }

            goto LABEL_75;
          }

  if (!v36) {
    return 0LL;
  }
  if (a3) {
    return sub_10006D1FC(a1, v36);
  }
  uint64_t result = 0LL;
  *v31 |= v36;
  return result;
}

LABEL_65:
  if (HIWORD(v8))
  {
LABEL_76:
    __break(0x5507u);
    return;
  }

  __int16 v50 = v8 - 1;
  if (v38) {
    BOOL v51 = 1;
  }
  else {
    BOOL v51 = v8 == 0;
  }
  if (v51) {
    __int16 v50 = v7 + v6;
  }
  *a3 = v50;
}

            __break(0x550Au);
            goto LABEL_66;
          }
        }
      }
    }

        if (((v9 + 1404) & 3) != 0) {
          goto LABEL_84;
        }
        if ((*(_BYTE *)(v9 + 1404) & 4) != 0)
        {
          unsigned int v6 = 12000LL;
          goto LABEL_54;
        }

        goto LABEL_69;
      }
    }

    else
    {
      if (((v9 + 1404) & 3) != 0) {
        goto LABEL_84;
      }
      if ((*(_BYTE *)(v9 + 1404) & 1) != 0)
      {
        unsigned int v6 = 8000LL;
        goto LABEL_54;
      }
    }

    if (((v9 + 1404) & 3) != 0) {
      goto LABEL_84;
    }
    if ((*(_BYTE *)(v9 + 1404) & 2) != 0)
    {
      unsigned int v6 = 11025LL;
      goto LABEL_54;
    }

    goto LABEL_65;
  }

  if ((_DWORD)v6 != 11127 && (_DWORD)v6 != 12000)
  {
    if ((_DWORD)v6 == 16000)
    {
      if (((v9 + 1404) & 3) != 0) {
        goto LABEL_84;
      }
      unint64_t v10 = (*(_BYTE *)(v9 + 1404) & 8) == 0;
      unsigned __int16 v11 = 16000;
      goto LABEL_50;
    }

    goto LABEL_56;
  }

  if (((v9 + 1404) & 3) == 0)
  {
    unint64_t v10 = (*(_BYTE *)(v9 + 1404) & 4) == 0;
    unsigned __int16 v11 = 12000;
    goto LABEL_44;
  }

        __break(0x5516u);
      }

  __break(0x5515u);
  return result;
}

      __break(0x5516u);
      goto LABEL_66;
    }

    return 0LL;
  }

  if (v6 != 0xFFFF)
  {
    unint64_t v23 = *(_WORD **)(v2 + 1424);
    if (v23 && (v23 & 7) == 0)
    {
      *unint64_t v23 = v8 + 1;
      return 19LL;
    }

    goto LABEL_65;
  }

    __break(0x5516u);
    goto LABEL_66;
  }

unint64_t sub_10005430C(unint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_54;
  }
  if (dword_10011C8F0 != -1)
  {
    unsigned int v2 = *(unsigned __int16 *)result;
    ++dword_10011C8F0;
    BOOL v4 = (a2 & 7) == 0 && a2 != 0;
    if (v2)
    {
      if (v4 && ((a2 + 8) & 7) == 0 && ((result + 8) & 7) == 0)
      {
        unsigned int v5 = 0;
        unint64_t v6 = *(void *)(result + 8);
        unint64_t v7 = *(void *)(a2 + 8);
        unsigned int v8 = (_DWORD *)v7;
        uint64_t v9 = (unsigned int *)v6;
        do
        {
          if (!v9 || (v6 & 3) != 0) {
            goto LABEL_54;
          }
          if (!v8 || (v7 & 3) != 0) {
            goto LABEL_54;
          }
          unint64_t v10 = *v9 * (unint64_t)*v9;
          *unsigned int v8 = v10;
          unsigned __int16 v11 = v8 + 1;
          _DWORD *v11 = HIDWORD(v10);
          if (v5 == 0xFFFF) {
            goto LABEL_55;
          }
          ++v9;
          unsigned int v5 = (unsigned __int16)(v5 + 1);
          unsigned int v8 = v11 + 1;
        }

        while (v5 < v2);
        unint64_t v12 = ~v7;
        if (v2 >= 2)
        {
          uint64_t result = 0LL;
          unint64_t v13 = (unsigned int *)v6;
LABEL_26:
          if (!v13) {
            goto LABEL_54;
          }
          unsigned int v14 = result + 1;
          uint64_t v15 = (2 * (_DWORD)result) | 1u;
          if ((_DWORD)result == 0xFFFF) {
            goto LABEL_55;
          }
          uint64_t result = v7 + 4 * v15;
          unsigned int v16 = (unsigned __int16)v14;
          if ((unsigned __int16)v14 < v2)
          {
            unint64_t v17 = 0LL;
            unsigned int v18 = *v13;
            uint64_t v19 = (_DWORD *)(v6 + 4LL * v14);
            while ((unint64_t)v19 <= 0xFFFFFFFFFFFFFFFBLL && result <= 0xFFFFFFFFFFFFFFFBLL)
            {
              unint64_t v20 = *v19 * (unint64_t)v18;
              unint64_t v21 = 2LL * *v19 * v18 + v17 + *(unsigned int *)result;
              *(_DWORD *)uint64_t result = v21;
              if (v16 == 0xFFFF) {
                goto LABEL_55;
              }
              ++v19;
              result += 4LL;
              unint64_t v17 = ((v20 >> 31) & 0x1FFFFFFFELL) + HIDWORD(v21);
              unsigned int v16 = (unsigned __int16)(v16 + 1);
              if (v16 >= v2) {
                goto LABEL_39;
              }
            }

uint64_t sub_10005453C(uint64_t result)
{
  if (!result) {
    __break(0x5516u);
  }
  return result;
}

char *sub_100054548(char *result, uint64_t a2)
{
  if (!result) {
    goto LABEL_8;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = (char *)operator new(0x128uLL);
  *(_DWORD *)uint64_t result = 0;
  *((void *)result + 1) = 0LL;
  *((void *)result + 2) = 0LL;
  *((_DWORD *)result + 6) = 5;
  *(_OWORD *)(result + 44) = 0u;
  *(_OWORD *)(result + 60) = 0u;
  *(_OWORD *)(result + 76) = 0u;
  *(_OWORD *)(result + 92) = 0u;
  *(_OWORD *)(result + 10_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)(result + 124) = 0u;
  *(_OWORD *)(result + 140) = 0u;
  *(_OWORD *)(result + 156) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_OWORD *)(result + 18_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)(result + 204) = 0u;
  *(_OWORD *)(result + 2memset(md, 170, 20) = 0u;
  *(_OWORD *)(result + 236) = 0u;
  *(_OWORD *)(result + 252) = 0u;
  *(_OWORD *)(result + 2_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)(result + 26_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(void *)(result + 283) = 0LL;
  if ((a2 & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    return result;
  }

  *(void *)(a2 + 24) = result;
  return result;
}

void sub_1000545F0(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_9;
  }
  if (!a2) {
    sub_1000D276C();
  }
  if ((a2 & 7) != 0) {
    goto LABEL_9;
  }
  unsigned int v2 = *(void **)(a2 + 24);
  if (!v2) {
    sub_1000D276C();
  }
  *(void *)(a2 + 24) = 0LL;
  if ((v2 & 7) != 0) {
LABEL_9:
  }
    __break(0x5516u);
  else {
    operator delete(v2);
  }
}

uint64_t sub_100054630(uint64_t result, int a2, char *a3, _BYTE *a4)
{
  if (result && a3 && ((a2 & 0xFFFFFF00) != 0x200 ? (char v4 = 1) : (char v4 = 2), *a3 = v4, a4))
  {
    *a4 = 0;
    return 0LL;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

unsigned __int16 *sub_100054660(unsigned __int16 *result, const void *a2, int a3)
{
  if (!result) {
    goto LABEL_11;
  }
  if (a3 == 512) {
    return (unsigned __int16 *)0x7FFF;
  }
  uint64_t result = sub_1000546B8(result, a2, a3);
  if (result)
  {
    if ((result & 7) == 0)
    {
      uint64_t v3 = *(void *)result;
      if (*(void *)result)
      {
        if ((v3 & 7) == 0)
        {
          char v4 = (unsigned __int16 *)(v3 + 76);
        }
      }
    }

unsigned __int16 *sub_1000546B8(unsigned __int16 *result, const void *a2, int a3)
{
  if (!result) {
    goto LABEL_21;
  }
  if (!a3)
  {
    if (a2 && (a2 & 7) == 0)
    {
      switch((*(unsigned int (**)(const void *))(*(void *)a2 + 216LL))(a2))
      {
        case 0u:
          uint64_t result = (unsigned __int16 *)&off_1001199B0;
          break;
        case 1u:
          uint64_t result = (unsigned __int16 *)&off_1001199C8;
          break;
        case 2u:
          uint64_t result = (unsigned __int16 *)&off_1001199E0;
          break;
        case 3u:
          else {
            uint64_t result = 0LL;
          }
          break;
        default:
          return 0LL;
      }

      return result;
    }

uint64_t *sub_1000547C8(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = sub_10000CEF8();
    pthread_mutex_lock(&stru_10011B978);
    uint64_t v2 = *(void *)(v1 + 8);
    for (i = v2; ; uint64_t v2 = i)
    {
      if (v2 == v1)
      {
        uint64_t v5 = 1LL;
        goto LABEL_15;
      }

      uint64_t result = sub_10000D014(&i);
      if (*result) {
        BOOL v3 = (*result & 7) == 0;
      }
      else {
        BOOL v3 = 0;
      }
      if (!v3) {
        goto LABEL_16;
      }
      uint64_t v4 = *(void *)(*result + 24);
      if (v4)
      {
        if ((v4 & 7) != 0) {
          goto LABEL_16;
        }
        if (*(_BYTE *)(v4 + 35)) {
          break;
        }
      }

      sub_10000D048(&i);
    }

    uint64_t v5 = 0LL;
LABEL_15:
    pthread_mutex_unlock(&stru_10011B978);
    return (uint64_t *)v5;
  }

  else
  {
LABEL_16:
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100054874(uint64_t result, uint64_t a2, int a3)
{
  if (!result) {
    goto LABEL_29;
  }
  if (!a2) {
    goto LABEL_28;
  }
  if ((a3 + 8) < 0x10)
  {
    if (a3 > 6)
    {
LABEL_27:
      __break(0x5518u);
LABEL_28:
      sub_1000D276C();
    }

    if ((a2 & 7) == 0)
    {
      uint64_t v5 = *(void *)(a2 + 24);
      if (v5)
      {
        if ((v5 & 7) == 0 && ((v5 + 28) & 3) == 0)
        {
          if (*(_DWORD *)(v5 + 28)) {
            return 0LL;
          }
          unint64_t v6 = (unsigned __int16 *)result;
          if ((a3 + 1) < 2)
          {
            sub_1000549B8((unsigned __int16 *)result, (void *)a2);
            goto LABEL_25;
          }

          if (a3 == -2)
          {
            if (!(*(unsigned int (**)(uint64_t))(*(void *)a2 + 280LL))(a2))
            {
              (*(void (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
              goto LABEL_25;
            }

            uint64_t result = *(void *)(a2 + 40);
            if (result && (result & 7) == 0)
            {
              (*(void (**)(uint64_t))(*(void *)result + 120LL))(result);
              goto LABEL_25;
            }
          }

          else
          {
            if (a3 != 6) {
              goto LABEL_25;
            }
            uint64_t result = sub_1000B6CE0();
            if (result && (result & 7) == 0)
            {
              int v7 = sub_10008D0AC(result, a2);
              if ((v7 - 768) <= 0xFFFFFEFF)
              {
                uint64_t result = (uint64_t)sub_1000546B8(v6, (const void *)a2, v7);
                if (result)
                {
                  if (((v5 + 8) & 7) == 0)
                  {
                    *(void *)(v5 + _Block_object_dispose((const void *)(v1 - 48), 8) = result;
                    goto LABEL_25;
                  }

                  goto LABEL_29;
                }

                goto LABEL_27;
              }

unsigned __int16 *sub_1000549B8(unsigned __int16 *result, void *a2)
{
  if (!result) {
    goto LABEL_15;
  }
  if (!a2) {
    sub_1000D276C();
  }
  uint64_t v3 = a2[3];
  if (!v3 || (v3 & 7) != 0 || ((v3 + 28) & 3) != 0) {
    goto LABEL_15;
  }
  if (*(_DWORD *)(v3 + 28)) {
    return result;
  }
  *(void *)(v3 + 28_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 20_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 12_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  uint64_t result = sub_1000546B8(result, a2, 0);
  if (((v3 + 8) & 7) != 0
    || (*(void *)(v3 + 8) = result, (uint64_t v4 = a2[3]) == 0)
    || (v4 & 7) != 0
    || (uint64_t v5 = (_DWORD *)(v4 + 4), (v5 & 3) != 0))
  {
LABEL_15:
    __break(0x5516u);
    return result;
  }

  _DWORD *v5 = 0x7FFFFFFF;
  return result;
}

uint64_t sub_100054A7C(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_9;
  }
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  if ((a2 & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t v2 = *(unsigned int **)(a2 + 24);
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = *v2;
  if ((result + 8) >= 0x10) {
LABEL_10:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_100054AC0(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_13;
  }
  if (!a2) {
    sub_1000D276C();
  }
  uint64_t result = sub_100054A7C(result, a2);
  if ((a2 & 7) != 0
    || (uint64_t v3 = *(void *)(a2 + 24)) == 0
    || (v3 & 7) != 0
    || (uint64_t v4 = (unsigned int *)(v3 + 4), (v4 & 3) != 0))
  {
LABEL_13:
    __break(0x5516u);
    return result;
  }

  uint64_t result = *v4;
  if ((result & 0x80000000) == 0) {
    return result;
  }
  __break(0x550Au);
  return 0x7FFFFFFFLL;
}

uint64_t sub_100054B34(uint64_t result, uint64_t a2, int a3)
{
  if (result)
  {
    if (!a2) {
      sub_1000D276C();
    }
    if (a3 < 0) {
      goto LABEL_11;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v3 = *(void *)(a2 + 24);
      if (v3)
      {
        if ((v3 & 7) == 0)
        {
          uint64_t v4 = (_DWORD *)(v3 + 4);
          if ((v4 & 3) == 0)
          {
            _DWORD *v4 = a3;
            return 0LL;
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_11:
  __break(0x550Au);
  return result;
}

BOOL sub_100054B88(BOOL result, uint64_t a2)
{
  if (!result) {
    goto LABEL_9;
  }
  if (!a2) {
    sub_1000D276C();
  }
  if ((a2 & 7) != 0 || (uint64_t v2 = *(int **)(a2 + 24)) == 0LL || (v2 & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    int v3 = *v2;
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100054BE0(uint64_t result, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  if (!result) {
    goto LABEL_28;
  }
  if (!a2) {
    sub_1000CEAEC( 0,  4,  "%s:%d: NULL devPort\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapAuthentic/IapAuthentic.cpp",  2267);
  }
  if (a3 != 1 || a4)
  {
    BOOL v11 = a3 == 2 && a4 == 0;
    if (v11) {
      char v9 = a3;
    }
    else {
      char v9 = 0;
    }
    if (a3 == 2 && a4 == 0) {
      uint64_t result = 0LL;
    }
    else {
      uint64_t result = 2LL;
    }
    uint64_t v10 = 20LL;
    if (a3 != 2 || a4 != 0) {
      uint64_t v10 = 0LL;
    }
    if (!a2)
    {
LABEL_7:
      if (!v11) {
        return result;
      }
      goto LABEL_24;
    }
  }

  else
  {
    uint64_t result = 0LL;
    char v9 = 1;
    uint64_t v10 = 16LL;
    BOOL v11 = 1;
    if (!a2) {
      goto LABEL_7;
    }
  }

  if ((a2 & 7) != 0) {
    goto LABEL_28;
  }
  unint64_t v12 = *(_BYTE **)(a2 + 24);
  if (!v12) {
    goto LABEL_28;
  }
  if ((((_BYTE)v12 + 32) & 7) != 0) {
    goto LABEL_28;
  }
  v12[32] = v9;
  v12[33] = 0;
  if ((((_DWORD)v12 + 34) & 1) != 0) {
    goto LABEL_28;
  }
  v12[34] = v10;
  if (!v11) {
    return result;
  }
LABEL_24:
  if (!a5 || (a5 & 7) != 0)
  {
LABEL_28:
    __break(0x5516u);
    return result;
  }

  *a5 = v10;
  return result;
}

unsigned __int16 *sub_100054CE8(unsigned __int16 *result, void *a2)
{
  if (result)
  {
    if (!a2) {
      return (unsigned __int16 *)22;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v2 = a2[3];
      uint64_t result = sub_1000546B8(result, a2, 0);
      if (v2)
      {
        if ((v2 & 7) == 0 && (((_BYTE)v2 + 8) & 7) == 0)
        {
          *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 48), 8) = result;
          if ((((_BYTE)v2 + 16) & 7) == 0)
          {
            *(void *)(v2 + 16) = 0LL;
            if ((((_BYTE)v2 + 24) & 7) == 0)
            {
              *(_DWORD *)(v2 + 24) = 5;
              if (((v2 + 28) & 3) == 0)
              {
                uint64_t result = 0LL;
                *(_DWORD *)(v2 + 2_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
                return result;
              }
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100054D7C(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    goto LABEL_23;
  }
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*a2 + 208LL))(a2);
  if (!a3) {
    goto LABEL_23;
  }
  unint64_t v6 = (const char *)v5;
  int v7 = (const char *)(*(uint64_t (**)(void *))(*a3 + 208LL))(a3);
  syslog( 4,  "%s:%s-%d ctaSrcPort = %hhx %s, ctaDstPort = %hhx %s",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapAuthentic/IapAuthentic.cpp",  "TransferCTAAuthState",  2373,  (_DWORD)a2,  v6,  (_DWORD)a3,  v7);
  unsigned int v8 = (int *)a2[3];
  int v9 = *v8;
  uint64_t v10 = v8 + 7;
  syslog( 4,  "ctaSrcPort->GetAuthPortInfo()->authenticState=%d, ctaSrcPort->GetAuthPortInfo()->ctaCertLingoes=%X\n",  v9,  *v10);
  if (a2 == a3) {
    return;
  }
  BOOL v11 = (_DWORD *)a2[3];
  if ((*v11 + 8) > 0xF)
  {
LABEL_24:
    __break(0x550Au);
    return;
  }

  if (*v11 != 6) {
    return;
  }
  if (((unint64_t)(v11 + 7) & 3) != 0)
  {
LABEL_23:
    __break(0x5516u);
    goto LABEL_24;
  }

  if (v11[7])
  {
    uint64_t v12 = a3[3];
    memcpy((void *)v12, v11, 0x128uLL);
    if (((unint64_t)(v11 + 4) & 7) == 0)
    {
      *((void *)v11 + 2) = a3;
      if ((v12 & 7) == 0 && (((_BYTE)v12 + 16) & 7) == 0)
      {
        *(void *)(v12 + 16) = 0LL;
        if (((v12 + 24) & 7) == 0)
        {
          *(_DWORD *)(v12 + 24) = 5;
          return;
        }
      }
    }

    goto LABEL_23;
  }

uint64_t sub_100054F0C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 0LL;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v2 = *(void *)(a2 + 24);
      if (v2)
      {
        if ((v2 & 7) == 0)
        {
          uint64_t v3 = v2 + 16;
          if ((v3 & 7) == 0) {
            return *(void *)v3;
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100054F4C(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  if (!a2) {
    return 5LL;
  }
  if ((a2 & 7) != 0
    || (uint64_t v2 = *(void *)(a2 + 24)) == 0
    || (v2 & 7) != 0
    || (uint64_t v3 = (unsigned int *)(v2 + 24), (v3 & 7) != 0))
  {
LABEL_10:
    __break(0x5516u);
    goto LABEL_11;
  }

  uint64_t result = *v3;
  if (result >= 8) {
LABEL_11:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_100054F98(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t result = 22LL;
  if (a2 && a3)
  {
    if ((a2 & 7) == 0)
    {
      uint64_t v3 = *(void *)(a2 + 24);
      if (v3)
      {
        if ((v3 & 7) == 0)
        {
          uint64_t v4 = (void *)(v3 + 16);
          if ((v4 & 7) == 0)
          {
            uint64_t result = 0LL;
            void *v4 = a3;
            return result;
          }
        }
      }
    }

uint64_t sub_100054FDC(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (result)
  {
    if (!a2) {
      return 22LL;
    }
    if (a3 >= 8) {
      goto LABEL_12;
    }
    if (a3 == 5) {
      return 22LL;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v3 = *(void *)(a2 + 24);
      if (v3)
      {
        if ((v3 & 7) == 0)
        {
          uint64_t v4 = (unsigned int *)(v3 + 24);
          if ((v4 & 7) == 0)
          {
            uint64_t result = 0LL;
            unsigned int *v4 = a3;
            return result;
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_12:
  __break(0x550Au);
  return result;
}

uint64_t sub_100055034(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (!a2) {
      return 0LL;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v2 = *(void *)(a2 + 24);
      if (v2)
      {
        if ((v2 & 7) == 0)
        {
          uint64_t v3 = (unsigned int *)(v2 + 28);
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100055074(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result) {
    goto LABEL_11;
  }
  if (a3 >= 0x8000)
  {
    __break(0x5518u);
    goto LABEL_11;
  }

  if (!a2) {
    return result;
  }
  if ((a2 & 7) != 0
    || (uint64_t v3 = *(void *)(a2 + 24)) == 0
    || (v3 & 7) != 0
    || (uint64_t v4 = (unsigned int *)(v3 + 28), (v4 & 3) != 0))
  {
LABEL_11:
    __break(0x5516u);
    return result;
  }

  unsigned int *v4 = a3;
  return result;
}

uint64_t sub_1000550B8(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (result)
  {
    if (a2 != 1)
    {
      if (a2 == 8 || a2 == 4) {
        sub_1000549B8((unsigned __int16 *)result, a4);
      }
      return 0LL;
    }

    int v4 = -1431655766;
    uint64_t result = sub_1000B6CE0();
    if (result && (result & 7) == 0)
    {
      sub_1000BA3A8(result, dword_100119990, &v4);
      return 0LL;
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100055134(unsigned __int16 *a1, uint64_t a2, int a3, unsigned int a4)
{
  if (!a1) {
    goto LABEL_223;
  }
  if (!a2) {
    sub_1000D276C();
  }
  int v7 = a3 >= 0 ? 1 << a3 : 0;
  uint64_t v8 = sub_1000B6CE0();
  if (!v8) {
    goto LABEL_223;
  }
  if ((v8 & 7) != 0) {
    goto LABEL_223;
  }
  int v94 = sub_10008D0AC(v8, a2);
  uint64_t v9 = sub_1000B6CE0();
  if (!v9) {
    goto LABEL_223;
  }
  if ((v9 & 7) != 0) {
    goto LABEL_223;
  }
  int v10 = sub_10008C7E4(v9, a2);
  uint64_t v11 = sub_1000B6CE0();
  if (!v11) {
    goto LABEL_223;
  }
  if ((v11 & 7) != 0) {
    goto LABEL_223;
  }
  int v12 = dword_10011D098;
  uint64_t v13 = sub_1000B6CE0();
  if (!v13) {
    goto LABEL_223;
  }
  if ((v13 & 7) != 0) {
    goto LABEL_223;
  }
  uint64_t v14 = sub_10008E550(v13, a2, 0);
  uint64_t v15 = sub_1000B6CE0();
  if (!v15) {
    goto LABEL_223;
  }
  if ((v15 & 7) != 0) {
    goto LABEL_223;
  }
  uint64_t v16 = sub_10008C2EC(v15, v14, 0);
  if ((v16 & 7) != 0) {
    goto LABEL_223;
  }
  uint64_t v17 = v16;
  uint64_t v18 = 1LL << a4;
  if (a4 >= 0x40) {
    uint64_t v18 = 0LL;
  }
  uint64_t v96 = v18;
  sub_100085454(v14);
  if (a3) {
    goto LABEL_21;
  }
  if (a4 <= 0x38 && ((1LL << a4) & 0x100000000080002LL) != 0)
  {
    sub_1000549B8(a1, (void *)a2);
    return;
  }

  if ((a4 & 0xFFFFFFFD) != 0x39)
  {
LABEL_21:
    if (v17)
    {
      int v19 = sub_100085454(v14);
      if (!a3 && v19)
      {
        BOOL v20 = (a4 & 0xFFC0) != 0x40 || ((1LL << a4) & 0xC001800) == 0;
        BOOL v21 = v20;
        if ((v96 & 0x1F00003000078004LL) != 0 || !v21) {
          return;
        }
      }

      if ((v17 & 7) != 0) {
        goto LABEL_223;
      }
      int v22 = sub_10007AC40(v17);
      if ((a3 & 0xFFFFFFFE) == 2 && v22 == 2) {
        return;
      }
    }

    if ((v10 & v12 & v7) == 0 || (v7 & 0x20) != 0) {
      return;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v23 = *(void *)(a2 + 24);
      if (v23)
      {
        if ((v23 & 7) == 0 && ((v23 + 32) & 7) == 0)
        {
          if (*(_BYTE *)(v23 + 32) == 2)
          {
            int v24 = *(_DWORD *)v23;
            if ((v24 - 4) > 2 || (unint64_t v25 = sub_1000546B8(a1, (const void *)a2, v94), (v26 = v25) == 0LL))
            {
              unint64_t v25 = sub_1000546B8(a1, (const void *)a2, 0);
              BOOL v26 = v25;
              if (!v25) {
                goto LABEL_222;
              }
            }

            goto LABEL_60;
          }

          unint64_t v27 = (unsigned __int16 **)(v23 + 8);
          if ((v27 & 7) == 0)
          {
            unint64_t v25 = *v27;
            uint64_t v28 = sub_1000546B8(a1, (const void *)a2, v94);
            if (v28) {
              BOOL v26 = v28;
            }
            else {
              BOOL v26 = v25;
            }
            if (!v25 || !v26)
            {
LABEL_222:
              __break(0x5518u);
              goto LABEL_223;
            }

LABEL_215:
                if ((v96 & v32) != 0 && (v96 & v33) == 0 && (v96 & v34) != 0) {
                  sub_100054B88((BOOL)a1, a2);
                }
                break;
              case 5:
                goto LABEL_215;
              case 6:
                uint64_t v59 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v59 & 7) != 0) {
                  goto LABEL_223;
                }
                unint64_t v60 = (unsigned __int8 *)(v59 + 78);
                unsigned int v61 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v62 = (unsigned __int8 *)v61 + 78;
                uint64_t v33 = *v60;
                uint64_t v34 = *v62;
                uint64_t v32 = 31LL;
                goto LABEL_215;
              case 7:
                uint64_t v63 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v63 & 7) != 0) {
                  goto LABEL_223;
                }
                int v64 = (uint64_t *)(v63 + 24);
                __int128 v65 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                __int128 v66 = v65 + 3;
                uint64_t v33 = *v64;
                uint64_t v34 = *v66;
                uint64_t v32 = 0x3FFFFFFFFFFFFLL;
                goto LABEL_215;
              case 8:
                uint64_t v67 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v67 & 7) != 0) {
                  goto LABEL_223;
                }
                __int128 v68 = *(uint64_t **)v26;
                uint64_t v33 = *(unsigned __int8 *)(v67 + 79);
                uint64_t v34 = *((unsigned __int8 *)v68 + 79);
                uint64_t v32 = 255LL;
                goto LABEL_215;
              case 9:
                uint64_t v69 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v69 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v70 = (unsigned int *)(v69 + 40);
                uint64_t v71 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v72 = (unsigned int *)(v71 + 5);
                uint64_t v33 = *v70;
                uint64_t v34 = *v72;
                uint64_t v32 = 0x1FFFFFFLL;
                goto LABEL_215;
              case 10:
                uint64_t v73 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v73 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v74 = (unsigned __int8 *)(v73 + 80);
                uint64_t v75 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v76 = (unsigned __int8 *)(v75 + 10);
                uint64_t v33 = *v74;
                uint64_t v34 = *v76;
                uint64_t v32 = 63LL;
                goto LABEL_215;
              case 11:
                uint64_t v39 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v39 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v40 = (uint64_t *)(v39 + 32);
                uint64_t v41 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                unsigned int v42 = v41 + 4;
                uint64_t v33 = *v40;
                uint64_t v34 = *v42;
                uint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                goto LABEL_215;
              case 12:
                uint64_t v77 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v77 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v78 = (unsigned int *)(v77 + 44);
                uint64_t v79 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                uint64_t v80 = (unsigned int *)v79 + 11;
                uint64_t v33 = *v78;
                uint64_t v34 = *v80;
                uint64_t v32 = 0x7FFFFLL;
                goto LABEL_215;
              case 13:
                uint64_t v81 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v81 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v82 = (unsigned int *)(v81 + 68);
                uint64_t v83 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                __int128 v84 = (unsigned int *)v83 + 17;
                uint64_t v33 = *v82;
                uint64_t v34 = *v84;
                uint64_t v32 = 0xFFFFLL;
                goto LABEL_215;
              case 14:
                uint64_t v43 = *(void *)v25;
                if (!*(void *)v25) {
                  goto LABEL_223;
                }
                if ((v43 & 7) != 0) {
                  goto LABEL_223;
                }
                uint64_t v44 = (unsigned __int16 *)(v43 + 74);
                uint64_t v45 = *(uint64_t **)v26;
                if (!*(void *)v26) {
                  goto LABEL_223;
                }
                char v46 = (unsigned __int16 *)v45 + 37;
                uint64_t v33 = *v44;
                uint64_t v34 = *v46;
                uint64_t v32 = 1023LL;
                goto LABEL_215;
              default:
                uint64_t v33 = 0LL;
                uint64_t v34 = 0LL;
                goto LABEL_215;
            }

            return;
          }
        }
      }
    }

    __break(0x5515u);
    goto LABEL_216;
  }

void sub_100055AD0(uint64_t a1, uint64_t a2, size_t __nbytes, void *__buf)
{
  if (!a1) {
    goto LABEL_8;
  }
  if (!a2) {
    sub_1000D276C();
  }
  arc4random_buf(__buf, __nbytes);
  if ((a2 & 7) != 0 || (uint64_t v7 = *(void *)(a2 + 24)) == 0 || (v7 & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else
  {
    *(_OWORD *)(v7 + 36) = 0u;
    uint64_t v8 = (_OWORD *)(v7 + 36);
    *(_OWORD *)((char *)v8 + 239) = 0u;
    v8[13] = 0u;
    v8[14] = 0u;
    v8[11] = 0u;
    v8[12] = 0u;
    v8[9] = 0u;
    v8[10] = 0u;
    v8[7] = 0u;
    v8[8] = 0u;
    v8[5] = 0u;
    v8[6] = 0u;
    _OWORD v8[3] = 0u;
    v8[4] = 0u;
    v8[1] = 0u;
    _OWORD v8[2] = 0u;
    memcpy(v8, __buf, __nbytes);
  }

uint64_t sub_100055B68(uint64_t result, void *a2, int a3, unsigned __int16 *a4, unsigned int a5)
{
  if (!result) {
    goto LABEL_24;
  }
  uint64_t result = (uint64_t)sub_1000546B8((unsigned __int16 *)result, a2, a3);
  if (!a2) {
    sub_1000D276C();
  }
  if (!result) {
    return 19LL;
  }
  if ((result & 7) != 0 || ((result + 16) & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t v8 = *(unsigned __int16 **)(result + 16);
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v13[6] = v9;
  v13[7] = v9;
  v13[4] = v9;
  void v13[5] = v9;
  v13[2] = v9;
  void v13[3] = v9;
  v13[0] = v9;
  v13[1] = v9;
  uint64_t result = sub_1000532F8((uint64_t)v13, v8, 0x2Au);
  if (result > 0x1F)
  {
LABEL_25:
    __break(0x550Au);
    return result;
  }

  if ((_DWORD)result) {
    return 94LL;
  }
  if ((a2 & 7) != 0
    || (uint64_t v10 = a2[3]) == 0
    || (v10 & 7) != 0
    || (result = sub_1000532A8((uint64_t)v13), (uint64_t v11 = a2[3]) == 0)
    || (v11 & 7) != 0
    || (int v12 = (unsigned __int8 *)(v11 + 34), (v12 & 1) != 0))
  {
LABEL_24:
    __break(0x5516u);
    goto LABEL_25;
  }

  uint64_t result = (uint64_t)sub_100052F50((uint64_t)v13, (unsigned __int16 *)(v10 + 36), result >> 3, a4, a5);
  if ((_DWORD)result) {
    return 94LL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100055C88(uint64_t result)
{
  if (!result || (result & 3) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_WORD *)(result + 204_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(_BYTE *)(result + 2305) = 0;
    *(void *)(result + 230_Block_object_dispose((const void *)(v1 - 48), 8) = 0x7FFFFFFF00000000LL;
  }

  return result;
}

uint64_t sub_100055CB0(uint64_t result)
{
  if (result && (result & 3) == 0) {
    return sub_100055C88(result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100055CC4(uint64_t result)
{
  if (!result || (result & 3) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100055CD8(uint64_t result, uint64_t *a2)
{
  uint64_t v4 = result;
  if (!a2 || (a2 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    return result;
  }

  uint64_t v3 = *a2;
  if (result)
  {
    uint64_t result = IapAuthGetAppCertP7Sync(2LL, &v4, &v3);
    if ((_DWORD)result)
    {
      if (v3)
      {
        uint64_t result = 0LL;
        *a2 = v3;
        return result;
      }

      __break(0x5518u);
      goto LABEL_10;
    }
  }

  return 22LL;
}

uint64_t sub_100055D4C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a4;
  uint64_t v7 = *a5;
  if (!result || (result & 7) != 0 || (uint64_t v6 = *(void *)(result + 24)) == 0 || (v6 & 7) != 0)
  {
LABEL_14:
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(v6 + 35) = 1;
    if (IapAuthChallengeRespondSync(a2, a3, &v8, &v7))
    {
      uint64_t result = 0LL;
      *a5 = v7;
    }

    else
    {
      uint64_t result = 22LL;
    }

    *(_BYTE *)(v6 + 35) = 0;
  }

  return result;
}

uint64_t sub_100055DF4(uint64_t __dst, const void *a2, size_t __n)
{
  if (!__dst || (uint64_t v3 = __dst, (__dst & 3) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    __int16 v4 = __n;
    if (__n > 0x7FF)
    {
      return 22LL;
    }

    else
    {
      memcpy((void *)__dst, a2, __n);
      __dst = 0LL;
      *(_WORD *)(v3 + 204_Block_object_dispose((const void *)(v1 - 48), 8) = v4;
    }
  }

  return __dst;
}

uint64_t sub_100055E48(uint64_t result, const void *a2, size_t __n)
{
  if (!result || (uint64_t v3 = result, (result & 3) != 0))
  {
    __break(0x5516u);
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  int v4 = __n;
  uint64_t v5 = *(unsigned __int16 *)(result + 2048);
  if (!__CFADD__(result, v5))
  {
    uint64_t result = (uint64_t)memcpy((void *)(result + v5), a2, __n);
    unsigned int v6 = *(unsigned __int16 *)(v3 + 2048) + v4;
    if (v6 < 0x10000)
    {
      uint64_t result = 0LL;
      *(_WORD *)(v3 + 204_Block_object_dispose((const void *)(v1 - 48), 8) = v6;
      return result;
    }

    goto LABEL_12;
  }

uint64_t sub_100055ED0(uint64_t result, void *a2)
{
  if (!result || (result & 3) != 0) {
    goto LABEL_7;
  }
  if (!a2) {
    return result;
  }
  if ((a2 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return result;
  }

  *a2 = *(unsigned __int16 *)(result + 2048);
  return result;
}

uint64_t sub_100055EF8(uint64_t a1, _DWORD *a2)
{
  if (!a1 || (a1 & 3) != 0) {
    goto LABEL_20;
  }
  int v4 = *(_DWORD *)(a1 + 2308);
  if (v4) {
    goto LABEL_15;
  }
  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v9 = 16LL;
  uint64_t v8 = (unsigned __int8 *)v10;
  int v5 = IapAuthCertSerial(a1, *(unsigned __int16 *)(a1 + 2048), &v8, &v9);
  if (v5 && v9 == 15)
  {
    if (!v8) {
      goto LABEL_20;
    }
    unsigned int v6 = v8[7];
    if (v6 <= 0xA)
    {
      if (v8[2] != 170 || v8[6] != 170 || v8[8] != 170 || v8[11] != 170)
      {
        __break(0x5518u);
        goto LABEL_20;
      }

      *(_DWORD *)(a1 + 2312) = v6;
      int v4 = dword_1000DE7FC[(char)v6];
      *(_DWORD *)(a1 + 230_Block_object_dispose((const void *)(v1 - 48), 8) = v4;
      goto LABEL_15;
    }
  }

  if (!v8) {
    goto LABEL_20;
  }
  syslog( 4,  "%s:%d ERROR: Failure bStatus:%d, certSerLen:%02X, certClass:%02X\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapAuthentic/IapAuthentic.cpp",  3548,  v5,  v9,  v8[7]);
  int v4 = *(_DWORD *)(a1 + 2308);
  if (v4)
  {
LABEL_15:
    if (a2 && (a2 & 3) == 0)
    {
      uint64_t result = 0LL;
      *a2 = v4;
      return result;
    }

uint64_t sub_100056060(uint64_t result, unsigned int *a2)
{
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v2 = result;
  if ((result & 3) != 0) {
    goto LABEL_11;
  }
  unsigned int v3 = *(_DWORD *)(result + 2312);
  if ((v3 & 0x80000000) != 0) {
    goto LABEL_12;
  }
  if (v3 < 0xB) {
    goto LABEL_7;
  }
  int v5 = 0;
  uint64_t result = sub_100055EF8(result, &v5);
  unsigned int v3 = *(_DWORD *)(v2 + 2312);
  if ((v3 & 0x80000000) != 0)
  {
LABEL_12:
    __break(0x550Au);
    return result;
  }

  if (v3 > 0xA) {
    return result;
  }
LABEL_7:
  if (!a2 || (a2 & 3) != 0)
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  uint64_t result = 0LL;
  *a2 = v3;
  return result;
}

uint64_t sub_1000560E0(uint64_t result)
{
  if (!result || (result & 3) != 0)
  {
    __break(0x5516u);
  }

  else if (IapAuthCertVerifyAuthVersion(result, *(unsigned __int16 *)(result + 2048), 2LL))
  {
    return 0LL;
  }

  else
  {
    return 94LL;
  }

  return result;
}

uint64_t sub_100056118(uint64_t result)
{
  if (result && (result & 3) == 0) {
    return IapAuthVerifyCertSerialNumber(result, *(unsigned __int16 *)(result + 2048), 2LL);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100056134(uint64_t result, const void *a2, size_t __n)
{
  if (!result || (uint64_t v3 = result, (result & 3) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    char v4 = __n;
    if (__n > 0xFE)
    {
      return 22LL;
    }

    else
    {
      memcpy((void *)(result + 2050), a2, __n);
      uint64_t result = 0LL;
      *(_BYTE *)(v3 + 2305) = v4;
    }
  }

  return result;
}

uint64_t sub_100056188(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 3) != 0) {
    goto LABEL_9;
  }
  if (!a2)
  {
    __break(0x5518u);
LABEL_9:
    __break(0x5516u);
    return result;
  }

  if (IapAuthChallengeVerify( result,  *(unsigned __int16 *)(result + 2048),  result + 2050,  *(unsigned __int8 *)(result + 2305),  a2,  a3,  2LL)) {
    return 0LL;
  }
  else {
    return 22LL;
  }
}

uint64_t sub_1000561D8(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v3 = result, (result = sub_1000B6CE0()) == 0) || (result & 7) != 0)
  {
    __break(0x5516u);
    return result;
  }

  int v4 = sub_10008D0AC(result, a2);
  if ((v4 & 0xFFFFFF00) == 0x200) {
    return sub_100054AC0(v3, a2) == 0;
  }
  int v5 = v4;
  uint64_t result = 1LL;
  if (v5 > 473)
  {
  }

  else if (v5 > 69)
  {
    if (v5 != 70 && v5 != 131 && v5 != 134) {
      return 0LL;
    }
  }

  else if (v5 > 0x10 || ((1 << v5) & 0x1800A) == 0)
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1000562BC()
{
  return _os_assert_log(0LL);
}

uint64_t sub_1000562C4(uint64_t result)
{
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  *(_DWORD *)uint64_t result = -1412567295;
  *(_DWORD *)(result + 1460) = 0;
  *(void *)(result + 1464) = 0LL;
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 40_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  *(_OWORD *)(result + 392) = 0u;
  *(_OWORD *)(result + 1440) = 0u;
  *(_BYTE *)(result + 1456) = 0;
  *(_OWORD *)(result + 184_Block_object_dispose((const void *)(v1 - 48), 8) = xmmword_1000DE830;
  *(void *)(result + 1992) = 0LL;
  *(void *)(result + 1997) = 0LL;
  if (((result + 2008) & 7) != 0 {
    || (*(void *)(result + 200_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL, *(void *)(result + 2016) = 0LL, (((_BYTE)result - 24) & 7) != 0)
  }
    || (*(void *)(result + 2024) = 0LL, ((result + 2032) & 7) != 0)
    || (*(void *)(result + 2032) = 0LL, *(void *)(result + 2040) = 0LL, (result & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 204_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    sub_100010C30((void *)(result + 2120));
    sub_100010C30((void *)(v1 + 2144));
    *(_BYTE *)(v1 + 2280) = 0;
    uint64_t result = sub_1000BD7A8((pthread_mutex_t *)(v1 + 416));
    for (unint64_t i = 0LL; i != 960; i += 64LL)
    {
      if (i > ~(v1 + 480))
      {
        __break(0x5513u);
        goto LABEL_13;
      }

      uint64_t result = sub_1000BD7A8((pthread_mutex_t *)(v1 + i + 480));
    }

    sub_1000BD7A8((pthread_mutex_t *)(v1 + 2056));
    pthread_cond_init((pthread_cond_t *)(v1 + 2168), 0LL);
    pthread_mutex_init((pthread_mutex_t *)(v1 + 2216), 0LL);
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 12_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 20_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 256) = 0u;
    *(_OWORD *)(v1 + 272) = 0u;
    *(_OWORD *)(v1 + 28_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 3memset(md, 170, 20) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 352) = 0u;
    *(_OWORD *)(v1 + 36_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(void *)(v1 + 384) = 0LL;
    *(void *)(v1 + 1976) = 0LL;
    *(_OWORD *)(v1 + 1944) = 0u;
    *(_OWORD *)(v1 + 1960) = 0u;
    *(_OWORD *)(v1 + 1912) = 0u;
    *(_OWORD *)(v1 + 192_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
    *(_OWORD *)(v1 + 1880) = 0u;
    *(_OWORD *)(v1 + 1896) = 0u;
    *(_OWORD *)(v1 + 1864) = 0u;
    sub_100056480(v1 + 2032);
    sub_100056480(v1 + 2008);
    sub_1000D1B48();
    *(_DWORD *)(v1 + 1984) = v3;
    uint64_t result = (uint64_t)operator new(0x590uLL);
    if ((result & 0xF) != 0) {
      goto LABEL_13;
    }
    *(void *)(v1 + 144_Block_object_dispose((const void *)(v1 - 48), 8) = sub_1000AE860((void *)result, v1);
    return v1;
  }

  return result;
}

uint64_t sub_100056480(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100058C74(result, *(void *)result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100056498(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_1000562C4(result);
  }
  __break(0x5516u);
  return result;
}

void sub_1000564AC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_21;
  }
  unsigned int v2 = 0;
  *(_BYTE *)(a1 + 410) = 1;
  do
    sub_1000565F4(a1, v2++);
  while (v2 != 15);
  uint64_t v3 = *(void *)(a1 + 392);
  if (v3) {
    sub_1000D27A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 400);
  if (v4) {
    sub_1000D27A0(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1448);
  if (v5)
  {
    if ((v5 & 7) != 0) {
      goto LABEL_21;
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
    *(void *)(a1 + 144_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  }

  pthread_cond_destroy((pthread_cond_t *)(a1 + 2168));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2216));
  *(_DWORD *)a1 = 1412567294;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2056));
  for (unint64_t i = 0LL; i != 960; i += 64LL)
  {
    if (i > ~(a1 + 480))
    {
      __break(0x5513u);
      goto LABEL_21;
    }

    pthread_mutex_destroy((pthread_mutex_t *)(a1 + i + 480));
  }

  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 416));
  if (((a1 + 2144) & 7) == 0)
  {
    sub_1000180FC(a1 + 2144);
    if (((a1 + 2120) & 7) == 0)
    {
      sub_1000180FC(a1 + 2120);
      if (((a1 + 2032) & 7) == 0)
      {
        uint64_t v7 = (uint64_t *)(a1 + 2032);
        sub_100058BEC(&v7);
        if (((a1 + 2008) & 7) == 0)
        {
          uint64_t v7 = (uint64_t *)(a1 + 2008);
          sub_100058BEC(&v7);
          return;
        }
      }
    }
  }

uint64_t sub_1000565F4(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_16:
    __break(0x5516u);
    goto LABEL_17;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_17:
    __break(0x550Au);
    goto LABEL_18;
  }

  if (a2 >= 0xF)
  {
LABEL_18:
    __break(0x5512u);
    goto LABEL_19;
  }

  if (!__CFADD__(v2 + 32, 24LL * a2))
  {
    uint64_t v4 = v2 + 24LL * a2 + 32;
    if ((v4 & 7) == 0)
    {
      uint64_t v5 = v2 + 24LL * a2 + 40;
      if ((v5 & 7) == 0)
      {
        uint64_t v6 = *(void *)v5;
        *(void *)uint64_t v5 = 0LL;
        *(_DWORD *)uint64_t v4 = 0;
        sub_100057854(v2, a2);
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
        uint64_t result = sub_10005789C(v2, a2);
        if (!v6) {
          return sub_1000578E8(v2, a2);
        }
        if (a2 == 7 || a2 == 9)
        {
          if ((v6 & 7) == 0)
          {
            (*(void (**)(uint64_t, void))(*(void *)v6 + 56LL))(v6, 0LL);
            return sub_1000578E8(v2, a2);
          }
        }

        else if ((v6 & 7) == 0)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
          return sub_1000578E8(v2, a2);
        }
      }
    }

    goto LABEL_16;
  }

void sub_100056714(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_1000564AC(a1);
  }
}

uint64_t sub_100056728(uint64_t result)
{
  if (result)
  {
    if ((result & 7) != 0) {
      goto LABEL_17;
    }
    if (*(_DWORD *)result == -1412567295)
    {
      if ((((_DWORD)result + 410) & 1) != 0) {
        goto LABEL_17;
      }
      if (*(_BYTE *)(result + 410)) {
        return 1LL;
      }
      if (((result + 408) & 7) != 0)
      {
LABEL_17:
        __break(0x5516u);
        goto LABEL_18;
      }

      if (*(_BYTE *)(result + 408)) {
        return 1LL;
      }
    }

    if ((((_DWORD)result + 410) & 1) == 0)
    {
      if (((result + 408) & 7) == 0)
      {
        unsigned int v1 = *(unsigned __int8 *)(result + 408);
        if (v1 <= 1)
        {
          sub_1000CEAEC( 0,  4,  "%s:%d Not valid handle=%hhx maxgic=%xh shuttingDown=%d isInList=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapConnectionHandle.cpp",  145,  result,  *(_DWORD *)result,  *(unsigned __int8 *)(result + 410),  v1);
          return 0LL;
        }

uint64_t sub_100056800(uint64_t result, char a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    *(_BYTE *)(v2 + 40_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
  }

  return result;
}

uint64_t sub_10005684C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (pthread_mutex_t *)(result + 416);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    unsigned int v3 = *(unsigned __int8 *)(v1 + 408);
    if (v3 < 2)
    {
      pthread_mutex_unlock(v2);
      return v3 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_1000568A4(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 409) = a2;
  }
  return result;
}

BOOL sub_1000568BC(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 409);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_1000568E8(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_14;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_14;
  }
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  *(void *)(v2 + 1440) = a2;
  if (!a2) {
    goto LABEL_10;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)(a2 + 32);
  if (!v4) {
    goto LABEL_10;
  }
  if ((v4 & 7) != 0 || (uint64_t v5 = (int *)(v4 + 52), (v5 & 3) != 0))
  {
LABEL_14:
    __break(0x5516u);
    goto LABEL_15;
  }

  int v6 = *v5;
  if (v6 != (char)v6)
  {
LABEL_15:
    __break(0x550Au);
    return result;
  }

  sub_100056998(v2, v6);
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
  uint64_t result = *(void *)(v2 + 1448);
  if (result)
  {
    if ((result & 7) == 0) {
      return sub_1000AEC90(result);
    }
    goto LABEL_14;
  }

  return result;
}

uint64_t sub_100056998(uint64_t result, int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  int v2 = *(_DWORD *)(result + 1848);
  if (((v2 + 128) | (a2 + 128)) >= 0x100)
  {
LABEL_8:
    __break(0x550Au);
    return result;
  }

  if (v2 != a2)
  {
    *(_DWORD *)(result + 1852) = v2;
    *(_DWORD *)(result + 184_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  }

  return result;
}

uint64_t sub_1000569D8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 1440);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000569F0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    int v2 = (pthread_mutex_t *)(result + 416);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    unsigned int v3 = *(unsigned __int8 *)(v1 + 410);
    if (v3 < 2)
    {
      pthread_mutex_unlock(v2);
      return v3 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

BOOL sub_100056A48(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 411);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100056A74(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    *(_BYTE *)(v1 + 40_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(_BYTE *)(v1 + 410) = 1;
    return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 416));
  }

  return result;
}

uint64_t sub_100056ABC(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_20;
  }
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  *(void *)(v2 + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  if (!a2) {
    goto LABEL_16;
  }
  uint64_t v4 = a2[4];
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void **)(v2 + 1440);
  if (v5)
  {
    if (v5 != a2) {
      goto LABEL_12;
    }
  }

  if ((v4 & 7) != 0 || (int v6 = (int *)(v4 + 52), (v6 & 3) != 0))
  {
LABEL_20:
    __break(0x5516u);
    goto LABEL_21;
  }

  int v7 = *v6;
  if (v7 != (char)v7)
  {
LABEL_21:
    __break(0x550Au);
    return result;
  }

  uint64_t result = sub_100056998(v2, v7);
LABEL_12:
  if (!*(_BYTE *)(v2 + 1456))
  {
    int v8 = (*(uint64_t (**)(void *))(*a2 + 280LL))(a2);
    *(_BYTE *)(v2 + 1456) = v8;
    if (v8) {
  }
    }

uint64_t sub_100056BC4(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (result = pthread_mutex_lock((pthread_mutex_t *)(result + 416)), uint64_t v2 = *(void *)(v1 + 16), (v2 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = *(void *)(v1 + 8);
    if (v2 == v3) {
      *(void *)(v1 + 16) = 0LL;
    }
    *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 416));
    return v3;
  }

  return result;
}

uint64_t sub_100056C30(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_16;
  }
  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_16;
    }
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(v2 + 416));
  *(void *)(v2 + 16) = a2;
  if (a2)
  {
    if (*(unsigned __int8 *)(v2 + 1456) > 1u)
    {
LABEL_17:
      __break(0x550Au);
      return result;
    }

    if (!*(_BYTE *)(v2 + 1456))
    {
      if ((a2 & 7) == 0)
      {
        *(_BYTE *)(v2 + 1456) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 280LL))(a2);
        goto LABEL_11;
      }

uint64_t sub_100056CF8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 16);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100056D10(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
      uint64_t v2 = *(void *)(v1 + 16);
      if (!v2)
      {
LABEL_6:
        *(void *)(v1 + 16) = 0LL;
        pthread_mutex_unlock((pthread_mutex_t *)(v1 + 416));
        return v2;
      }

      if ((v2 & 7) == 0)
      {
        (*(void (**)(void, void))(*(void *)v2 + 392LL))(*(void *)(v1 + 16), 0LL);
        goto LABEL_6;
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100056D84(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 2216)), (((_BYTE)v1 + 72) & 7) != 0)
    || ((v1 + 2136) & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    if (*(void *)(v1 + 2136)) {
      pthread_cond_wait((pthread_cond_t *)(v1 + 2168), (pthread_mutex_t *)(v1 + 2216));
    }
    return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 2216));
  }

  return result;
}

uint64_t sub_100056DEC(uint64_t result, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (pthread_mutex_lock((pthread_mutex_t *)(result + 2216)), uint64_t result = v2 + 2120, ((v2 + 2120) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    sub_100056E4C(result, &v3);
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2216));
  }

  return result;
}

uint64_t sub_100056E4C(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v2 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t result = sub_100058CBC(result, 0LL, 0LL, a2);
  if (!result
    || (result & 7) != 0
    || (((_BYTE)result + 8) & 7) != 0
    || (uint64_t v3 = *v2, *(void *)result = *v2, *(void *)(result + 8) = v2, !v3)
    || (v3 & 7) != 0
    || (uint64_t v4 = (uint64_t *)(v3 + 8), (v4 & 7) != 0)
    || (uint64_t *v4 = result, *v2 = result, v5 = v2 + 2, (v5 & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
  }

  else if (*v5 != -1LL)
  {
    ++*v5;
    return result;
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_100056EE8(uint64_t result, uint64_t a2)
{
  uint64_t v6 = a2;
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(v2 + 2216));
  uint64_t v3 = v2 + 2120;
  if (((v2 + 2120) & 7) != 0 || ((v2 + 2128) & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(v2 + 2128);
  char v7 = -86;
  uint64_t result = sub_100058DD4(v4, v2 + 2120, &v6);
  uint64_t v5 = result;
  if (v3 != result) {
    uint64_t result = sub_100020944(v2 + 2120, (uint64_t *)result);
  }
  if (((v2 + 2136) & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
  }

  else
  {
    if (!*(void *)(v2 + 2136)) {
      pthread_cond_signal((pthread_cond_t *)(v2 + 2168));
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2216));
    return v3 != v5;
  }

  return result;
}

uint64_t sub_100056FD8(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_100056FF0(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 24);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057008(uint64_t result, unsigned int a2, int a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if (a2 >= 0xF)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (!__CFADD__(v3 + 32, 24LL * a2))
  {
    uint64_t v6 = v3 + 24LL * a2 + 32;
    if ((v6 & 7) == 0)
    {
      *(_DWORD *)uint64_t v6 = a3;
      return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 416));
    }

    goto LABEL_8;
  }

uint64_t sub_10005709C(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t v6 = (pthread_mutex_t *)(result + 416);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_13:
    __break(0x550Au);
    goto LABEL_14;
  }

  if (a2 >= 0xF)
  {
LABEL_14:
    __break(0x5512u);
    goto LABEL_15;
  }

  if (__CFADD__(v3 + 32, 24LL * a2))
  {
LABEL_15:
    __break(0x5513u);
    return result;
  }

  if ((((_BYTE)v3 + 32) & 7) != 0 || (uint64_t v7 = v3 + 24LL * a2 + 40, (v7 & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
    goto LABEL_13;
  }

  if (*(void *)v7)
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
    *(void *)uint64_t v7 = a3;
  }

  pthread_mutex_unlock(v6);
  return v8;
}

uint64_t sub_100057160(uint64_t result, unsigned int a2, int a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  if (a2 >= 0xF)
  {
LABEL_11:
    __break(0x5512u);
    goto LABEL_12;
  }

  if (!__CFADD__(v3 + 32, 24LL * a2))
  {
    if ((((_BYTE)v3 + 32) & 7) == 0)
    {
      uint64_t v6 = v3 + 24LL * a2 + 48;
      if ((v6 & 7) == 0)
      {
        *(_DWORD *)uint64_t v6 = a3;
        return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 416));
      }
    }

    goto LABEL_9;
  }

uint64_t sub_100057208(uint64_t result, unsigned int a2, int a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if (a2 >= 0xF)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (!__CFADD__(v3 + 32, 24LL * a2))
  {
    uint64_t v6 = v3 + 24LL * a2 + 32;
    if ((v6 & 7) == 0)
    {
      *(_DWORD *)v6 |= a3;
      return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 416));
    }

    goto LABEL_8;
  }

uint64_t sub_1000572A4(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_8:
    __break(0x550Au);
    goto LABEL_9;
  }

  if (a2 >= 0x10)
  {
LABEL_9:
    __break(0x5512u);
    goto LABEL_10;
  }

  if (!__CFADD__(v3 + 32, 24LL * a2))
  {
    uint64_t v6 = v3 + 24LL * a2;
    __int128 v7 = *(_OWORD *)(v6 + 32);
    *(void *)(a3 + 16) = *(void *)(v6 + 48);
    *(_OWORD *)a3 = v7;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 416));
    return a3;
  }

uint64_t sub_100057348(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if (a2 >= 0xF)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (!__CFADD__(v2 + 32, 24LL * a2))
  {
    uint64_t v4 = v2 + 24LL * a2 + 32;
    if ((v4 & 7) == 0)
    {
      uint64_t v5 = *(unsigned int *)v4;
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
      return v5;
    }

    goto LABEL_8;
  }

uint64_t sub_1000573E0(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t v4 = (pthread_mutex_t *)(result + 416);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  if (a2 >= 0xF)
  {
LABEL_11:
    __break(0x5512u);
    goto LABEL_12;
  }

  if (!__CFADD__(v2 + 32, 24LL * a2))
  {
    if ((((_BYTE)v2 + 32) & 7) == 0)
    {
      uint64_t v5 = v2 + 24LL * a2 + 40;
      if ((v5 & 7) == 0)
      {
        uint64_t v6 = *(void *)v5;
        pthread_mutex_unlock(v4);
        return v6;
      }
    }

    goto LABEL_9;
  }

uint64_t sub_10005748C(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t v4 = (pthread_mutex_t *)(result + 416);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
  if (a2 + 32 >= 0x40)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  if (a2 >= 0xF)
  {
LABEL_11:
    __break(0x5512u);
    goto LABEL_12;
  }

  if (!__CFADD__(v2 + 32, 24LL * a2))
  {
    if ((((_BYTE)v2 + 32) & 7) == 0)
    {
      uint64_t v5 = v2 + 24LL * a2 + 48;
      if ((v5 & 7) == 0)
      {
        uint64_t v6 = *(unsigned int *)v5;
        pthread_mutex_unlock(v4);
        return v6;
      }
    }

    goto LABEL_9;
  }

uint64_t sub_100057538(uint64_t result, unsigned int a2, int a3)
{
  if (!result || (result & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if (a2 >= 0xF)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (!__CFADD__(result + 1864, 8LL * a2))
  {
    uint64_t v3 = result + 8LL * a2 + 1864;
    if ((v3 & 7) == 0)
    {
      *(_DWORD *)uint64_t v3 = a3;
      return result;
    }

    goto LABEL_8;
  }

uint64_t sub_10005758C(uint64_t result, unsigned int a2, char a3)
{
  if (!result || (result & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  if (a2 + 32 > 0x3F)
  {
LABEL_10:
    __break(0x550Au);
    goto LABEL_11;
  }

  if (a2 >= 0xF)
  {
LABEL_11:
    __break(0x5512u);
    goto LABEL_12;
  }

  if (!__CFADD__(result + 1864, 8LL * a2))
  {
    if ((((_BYTE)result + 72) & 7) == 0)
    {
      uint64_t v3 = result + 8LL * a2 + 1868;
      if ((v3 & 3) == 0)
      {
        *(_BYTE *)uint64_t v3 = a3;
        return result;
      }
    }

    goto LABEL_9;
  }

uint64_t sub_1000575F0(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if (a2 >= 0xF)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (!__CFADD__(result + 1864, 8LL * a2))
  {
    uint64_t v2 = result + 8LL * a2 + 1864;
    if ((v2 & 7) == 0) {
      return *(unsigned int *)v2;
    }
    goto LABEL_8;
  }

BOOL sub_100057644(BOOL result, unsigned int a2)
{
  if (!result || result & 7)
  {
LABEL_10:
    __break(0x5516u);
    goto LABEL_11;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_11:
    __break(0x550Au);
    goto LABEL_12;
  }

  if (a2 >= 0xF)
  {
LABEL_12:
    __break(0x5512u);
    goto LABEL_13;
  }

  if (!__CFADD__(result + 1864, 8LL * a2))
  {
    if (!((result + 72) & 7))
    {
      uint64_t v2 = result + 8LL * a2 + 1868;
      if ((v2 & 3) == 0)
      {
        unsigned int v3 = *(unsigned __int8 *)v2;
        if (v3 <= 1) {
          return v3 != 0;
        }
        goto LABEL_11;
      }
    }

    goto LABEL_10;
  }

uint64_t sub_1000576B8(uint64_t result, unsigned int a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_31:
    __break(0x5516u);
    goto LABEL_32;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_32:
    __break(0x550Au);
    goto LABEL_33;
  }

  if (a2 > 0xE) {
    goto LABEL_18;
  }
  uint64_t result = sub_100057644(result, a2);
  if (!(_DWORD)result) {
    goto LABEL_18;
  }
  unsigned int v4 = sub_100062E0C();
  uint64_t result = sub_1000575F0(v2, a2);
  unsigned int v5 = v4 - result;
  if (v4 >= result)
  {
    if (v5 <= 0x1F3)
    {
      uint64_t v6 = 500 - v5;
      if (!a2) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }

    sub_10005758C(v2, a2, 0);
    uint64_t result = sub_100057538(v2, a2, 0);
LABEL_18:
    uint64_t v6 = 0LL;
    if (!a2)
    {
LABEL_9:
      uint64_t v7 = *(void *)(v2 + 8);
      if (!v7) {
        return v6;
      }
      if ((v7 & 7) == 0)
      {
        uint64_t result = sub_1000B6CE0();
        if (result)
        {
          if ((result & 7) == 0)
          {
            int v8 = sub_100054A7C(result, v7);
            if (v8 != -2)
            {
              if (v8 == 1) {
                return 5000LL;
              }
              return v6;
            }

            BOOL v9 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 344LL))(v7) == 0;
            unsigned int v10 = 5000;
LABEL_27:
            if (v9) {
              return v6;
            }
            else {
              return v10;
            }
          }
        }
      }

      goto LABEL_31;
    }

uint64_t sub_10005783C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 1984);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057854(uint64_t result, int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_11;
  }

  if ((a2 + 32) >= 0x40)
  {
LABEL_11:
    __break(0x550Au);
    return result;
  }

  if (a2)
  {
    if (a2 != 2) {
      return result;
    }
    int v2 = -33;
  }

  else
  {
    int v2 = -31;
  }

  *(_DWORD *)(result + 1460) &= v2;
  return result;
}

uint64_t sub_10005789C(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_8:
    __break(0x550Au);
    goto LABEL_9;
  }

  if (a2 >= 0x10)
  {
LABEL_9:
    __break(0x5512u);
    goto LABEL_10;
  }

uint64_t sub_1000578E8(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  if (a2 + 32 >= 0x40)
  {
LABEL_8:
    __break(0x550Au);
    goto LABEL_9;
  }

  if (a2 >= 0x10)
  {
LABEL_9:
    __break(0x5512u);
    goto LABEL_10;
  }

uint64_t sub_100057934(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(void *)(result + 392) = a2;
  }
  return result;
}

uint64_t sub_10005794C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 392);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057964(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = *(void *)(result + 392);
    *(void *)(result + 392) = 0LL;
    return v1;
  }

  return result;
}

uint64_t sub_100057984(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(void *)(result + 400) = a2;
  }
  return result;
}

uint64_t sub_10005799C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 400);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000579B4(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = *(void *)(result + 400);
    *(void *)(result + 400) = 0LL;
    return v1;
  }

  return result;
}

uint64_t sub_1000579D4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 1448);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000579EC(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_8;
  }
  uint64_t result = *(void *)(result + 1448);
  if (result)
  {
    if ((result & 7) == 0)
    {
      if (a2 < 0x10) {
        return sub_1000AF5E4(result, a2);
      }
      goto LABEL_9;
    }

BOOL sub_100057A20(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 1456);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057A4C(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a2 + 32 < 0x40)
  {
    return sub_10005BEC8(a2, a3, a4, a5, result);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057A88(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100057A9C(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a3 < 8)
  {
    *(_DWORD *)(result + 1460) |= 1 << a3;
    return result;
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057AD0(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a3 < 8)
  {
    *(_DWORD *)(result + 1460) &= ~(1 << a3);
    return result;
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057B04(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    for (int i = 0; i != 15; ++i)
      uint64_t result = sub_100057854(v1, i);
  }

  return result;
}

uint64_t sub_100057B4C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 1LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057B64(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 1460);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057B7C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 1848);
  if ((_DWORD)result != (char)result) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_100057BA0(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  uint64_t result = *(unsigned int *)(result + 1852);
  if ((_DWORD)result != (char)result) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_100057BC4(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 1856);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057BDC(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(unsigned int *)(result + 1860);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057BF4(uint64_t result, int a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_DWORD *)(result + 1856) = a2;
  }
  return result;
}

uint64_t sub_100057C0C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      int v3 = a2;
      if (!(_DWORD)a2 || *(_DWORD *)(result + 1860) == (_DWORD)a2) {
        goto LABEL_8;
      }
      uint64_t result = *(void *)(result + 8);
      if (result && (result & 7) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 320LL))(result, a2);
LABEL_8:
        *(_DWORD *)(v2 + 1860) = v3;
        return result;
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100057C70(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 1464);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100057C88(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(void *)(result + 1464) = a2;
  }
  return result;
}

uint64_t sub_100057CA0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    result += 1472LL;
  }
  return result;
}

char *sub_100057CB8(char *result, const void *a2)
{
  return result;
}

uint64_t sub_100057CD4(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 2000) = a2;
  }
  return result;
}

BOOL sub_100057CEC(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 2000);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057D18(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 2001) = a2;
  }
  return result;
}

BOOL sub_100057D30(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 2001);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057D5C(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 2002) = a2;
  }
  return result;
}

BOOL sub_100057D74(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 2002);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057DA0(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 2003) = a2;
  }
  return result;
}

BOOL sub_100057DB8(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 2003);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057DE4(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  else {
    *(_BYTE *)(result + 2004) = a2;
  }
  return result;
}

BOOL sub_100057DFC(BOOL result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 2004);
    if (v1 < 2) {
      return v1 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100057E28(uint64_t result, int a2)
{
  if (!result
    || (uint64_t v2 = result, (result & 7) != 0)
    || (unsigned int v4 = (pthread_mutex_t *)(result + 2056),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 2056)),
        (((_BYTE)v2 - 40) & 7) != 0))
  {
LABEL_21:
    __break(0x5516u);
LABEL_22:
    __break(0x5513u);
    return result;
  }

  uint64_t v5 = *(void *)(v2 + 2016);
  uint64_t v6 = *(void *)(v2 + 2008);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    unint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    uint64_t v10 = v7 >> 4;
    BOOL v12 = (v6 & 7) == 0 && v6 != 0;
    while (!(v9 >> 59) && v8 <= ~v6)
    {
      if (!v12) {
        goto LABEL_21;
      }
      if (*(_DWORD *)(v6 + v8) == a2)
      {
        pthread_mutex_unlock(v4);
        return v9;
      }

      ++v9;
      v8 += 16LL;
      if (v10 == v9) {
        goto LABEL_18;
      }
    }

    goto LABEL_22;
  }

unint64_t sub_100057EFC(unint64_t result, int a2)
{
  if (!result
    || (unint64_t v2 = result, (result & 7) != 0)
    || (unsigned int v4 = (pthread_mutex_t *)(result + 2056),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 2056)),
        (((_BYTE)v2 - 16) & 7) != 0))
  {
LABEL_20:
    __break(0x5516u);
LABEL_21:
    __break(0x5513u);
    return result;
  }

  uint64_t v5 = *(void *)(v2 + 2040);
  uint64_t v6 = *(void *)(v2 + 2032);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    unint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    uint64_t v10 = v7 >> 4;
    BOOL v12 = (v6 & 7) == 0 && v6 != 0;
    while (!(v9 >> 59) && v8 <= ~v6)
    {
      if (!v12) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v6 + v8) == a2) {
        goto LABEL_19;
      }
      ++v9;
      v8 += 16LL;
      if (v10 == v9) {
        goto LABEL_18;
      }
    }

    goto LABEL_21;
  }

uint64_t sub_100057FC4(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_33;
  }
  unint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 2056));
  if ((a2 & 7) != 0) {
    goto LABEL_33;
  }
  unsigned int v4 = (int *)(a2 + 24);
  if (((a2 + 24) & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t result = sub_100057E28(v2, *v4);
  if ((_DWORD)result == -1) {
    goto LABEL_24;
  }
  uint64_t v5 = (void *)(v2 + 2008);
  if (((v2 + 2008) & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t v6 = *v5;
  if (!v6 || (v6 & 7) != 0)
  {
LABEL_33:
    __break(0x5516u);
    goto LABEL_34;
  }

  uint64_t v7 = result;
  if (*(void *)(v6 + 16LL * result + 8) != a2)
  {
    sub_10005813C(v2, *v4);
    *(void *)&__int128 __dst = *(void *)(v2 + 2008);
    uint64_t result = (uint64_t)sub_100058E40((unint64_t *)&__dst, v7);
    unint64_t v8 = *(void *)(v2 + 2008);
    BOOL v9 = (unint64_t)__dst >= v8;
    uint64_t v10 = __dst - v8;
    char v11 = !v9;
    char v12 = v9;
    if (v10 >= 0) {
      char v13 = v11;
    }
    else {
      char v13 = v12;
    }
    sub_100058E94((char *)(__dst + 16), *(char **)(v2 + 2016), (void *)__dst);
    sub_100058C74(v2 + 2008, v14);
LABEL_24:
    unsigned int v15 = *(_DWORD *)(a2 + 24);
    *((void *)&__dst + 1) = a2;
    *(void *)&__int128 __dst = v15 | 0xAAAAAAAA00000000LL;
    uint64_t result = v2 + 2008;
    if (((v2 + 2008) & 7) == 0 && ((v2 + 2024) & 7) == 0)
    {
      unint64_t v16 = *(void *)(v2 + 2016);
      if (v16 >= *(void *)(v2 + 2024))
      {
        uint64_t v17 = sub_100058F90((uint64_t *)result, &__dst);
        goto LABEL_30;
      }

      uint64_t result = (uint64_t)sub_100058F18((void *)result, &__dst);
      if (v16 < 0xFFFFFFFFFFFFFFF0LL)
      {
        uint64_t v17 = v16 + 16;
LABEL_30:
        *(void *)(v2 + 2016) = v17;
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
      }

unint64_t sub_10005813C(unint64_t result, int a2)
{
  if (!result) {
    goto LABEL_13;
  }
  unint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  pthread_mutex_lock((pthread_mutex_t *)(result + 2056));
  uint64_t result = sub_100057EFC(v2, a2);
  if ((_DWORD)result == -1) {
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
  }
  unsigned int v4 = (void **)(v2 + 2032);
  if (((v2 + 2032) & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v5 = result;
  __int128 __dst = *(void **)(v2 + 2032);
  sub_100058E40((unint64_t *)&__dst, result);
  __int128 __dst = *v4;
  uint64_t result = (unint64_t)sub_100058E40((unint64_t *)&__dst, v5);
  if ((_BYTE *)__dst - (_BYTE *)*v4 >= 0) {
    BOOL v6 = __dst < *v4;
  }
  else {
    BOOL v6 = __dst >= *v4;
  }
  if (!v6 && (unint64_t)__dst < 0xFFFFFFFFFFFFFFF0LL)
  {
    sub_100058E94((char *)__dst + 16, *(char **)(v2 + 2040), __dst);
    sub_100058C74(v2 + 2032, v7);
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
  }

unint64_t sub_10005822C(unint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_16;
  }
  unint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_16;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 2056));
  if ((a2 & 7) != 0) {
    goto LABEL_16;
  }
  unsigned int v4 = (int *)(a2 + 24);
  unsigned int v5 = sub_100057E28(v2, *v4);
  if (v5 != -1)
  {
    unsigned int v6 = v5;
    uint64_t result = sub_10005813C(v2, *v4);
    uint64_t v7 = (void **)(v2 + 2008);
    if (((v2 + 2008) & 7) == 0)
    {
      __int128 __dst = *v7;
      uint64_t result = (unint64_t)sub_100058E40((unint64_t *)&__dst, v6);
      if ((_BYTE *)__dst - (_BYTE *)*v7 >= 0) {
        BOOL v8 = __dst < *v7;
      }
      else {
        BOOL v8 = __dst >= *v7;
      }
      if (!v8 && (unint64_t)__dst < 0xFFFFFFFFFFFFFFF0LL)
      {
        sub_100058E94((char *)__dst + 16, *(char **)(v2 + 2016), __dst);
        sub_100058C74(v2 + 2008, v9);
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
      }

unint64_t sub_10005831C(unint64_t result, int a2)
{
  if (!result) {
    goto LABEL_20;
  }
  unint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_20;
  }
  pthread_mutex_lock((pthread_mutex_t *)(result + 2056));
  unsigned int v4 = sub_100057E28(v2, a2);
  if (v4 == -1) {
    goto LABEL_19;
  }
  uint64_t result = sub_10005813C(v2, a2);
  if (((v2 + 2008) & 7) != 0)
  {
LABEL_20:
    __break(0x5516u);
    goto LABEL_21;
  }

  uint64_t v5 = *(void *)(v2 + 2008);
  if (!__CFADD__(v5, 16LL * v4))
  {
    if (!v5 || (v5 & 7) != 0) {
      goto LABEL_20;
    }
    uint64_t v6 = *(void *)(v5 + 16LL * v4 + 8);
    if (!v6 || (*(void *)(v5 + 16LL * v4 + 8) & 7LL) != 0) {
      goto LABEL_20;
    }
    uint64_t result = *(void *)(v6 + 48);
    if (!result || (*(void *)(v6 + 48) & 7LL) != 0) {
      goto LABEL_20;
    }
    sub_10005BD74(result, v6);
LABEL_19:
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
    return v4 != -1;
  }

BOOL sub_1000583F4(BOOL result, int a2)
{
  if (!result || (unint64_t v2 = result, result & 7))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 2056));
    int v4 = sub_100057EFC(v2, a2);
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 2056));
    return v4 != -1;
  }

  return result;
}

uint64_t sub_100058458(uint64_t result, char a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 416));
      uint64_t result = *(void *)(v2 + 392);
      if (!result) {
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
      }
      if ((result & 7) == 0)
      {
        sub_100059A98(result, a2);
        return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_1000584B8(uint64_t a1)
{
  if (!a1) {
    goto LABEL_39;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_39;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2056));
  uint64_t v2 = (uint64_t *)(a1 + 2008);
  if (((a1 + 2008) & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t v3 = *(void *)(a1 + 2016) - *(void *)(a1 + 2008);
  if (!v3)
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2056));
    return;
  }

  if (((a1 + 2032) & 7) != 0)
  {
LABEL_39:
    __break(0x5516u);
  }

  else
  {
    unint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    uint64_t v6 = v3 >> 4;
    else {
      uint64_t v7 = v3 >> 4;
    }
    while (!(v5 >> 59))
    {
      uint64_t v8 = *v2;
      if (v4 > ~*v2) {
        break;
      }
      if (v8) {
        BOOL v9 = (((_BYTE)v4 + (_BYTE)v8) & 7) == 0LL;
      }
      else {
        BOOL v9 = 0;
      }
      if (!v9) {
        goto LABEL_39;
      }
      uint64_t v10 = (_OWORD *)(v8 + v4);
      unint64_t v11 = *(void *)(a1 + 2040);
      char v12 = (uint64_t *)(a1 + 2032);
      if (v11 >= *(void *)(a1 + 2048))
      {
        uint64_t v13 = sub_100058F90(v12, v10);
      }

      else
      {
        sub_100058F18(v12, v10);
        if (v11 >= 0xFFFFFFFFFFFFFFF0LL) {
          break;
        }
        uint64_t v13 = v11 + 16;
      }

      *(void *)(a1 + 2040) = v13;
      uint64_t v14 = *(void *)(a1 + 2008);
      if (__CFADD__(v14, v4)) {
        break;
      }
      if (!v14) {
        goto LABEL_39;
      }
      if ((((_BYTE)v4 + (_BYTE)v14) & 7) != 0) {
        goto LABEL_39;
      }
      uint64_t v15 = *(void *)(v14 + v4 + 8);
      if (!v15 || (v15 & 7) != 0) {
        goto LABEL_39;
      }
      uint64_t v16 = *(void *)(v15 + 48);
      if (!v16 || (*(void *)(v15 + 48) & 7LL) != 0) {
        goto LABEL_39;
      }
      sub_10005BD74(v16, v15);
      ++v5;
      v4 += 16LL;
      if (v7 == v5)
      {
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2056));
        sub_1000CEAEC( 0,  4,  "CIapConnection::%s:%d wait for all cancel to finish, size=%ld\n",  "CancelAllCommands",  1236,  v6);
        unsigned int v18 = 0;
        do
        {
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 2056));
          uint64_t v19 = *(void *)(a1 + 2040);
          uint64_t v20 = *(void *)(a1 + 2032);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2056));
          if (v19 != v20) {
            usleep(0x186A0u);
          }
          unsigned int v21 = v18 + 1;
          if (v19 == v20) {
            break;
          }
        }

        while (v18++ < 0xC7);
        sub_1000CEAEC( 0,  4,  "CIapConnection::%s:%d took %d tries to finish all cancel, size=%ld\n",  "CancelAllCommands",  1250,  v21,  (v19 - v20) >> 4);
        return;
      }
    }
  }

  __break(0x5513u);
}

uint64_t sub_1000586D0(uint64_t result, uint64_t a2, uint64_t a3, char a4, char a5)
{
  if (!result) {
    goto LABEL_23;
  }
  if ((result & 7) != 0) {
    goto LABEL_23;
  }
  uint64_t i = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v5 = result + 2144;
  if (((result + 2144) & 7) != 0 || ((result + 2152) & 7) != 0) {
    goto LABEL_23;
  }
  for (uint64_t i = *(void *)(result + 2152); i != v5; sub_10000D048(&i))
  {
    uint64_t result = (uint64_t)sub_10000D014(&i);
    uint64_t v10 = *(void *)result;
    BOOL v11 = *(void *)result && (*(void *)result & 7LL) == 0;
    if (!v11 || ((v10 + 8) & 7) != 0) {
      goto LABEL_23;
    }
    if (*(void *)(v10 + 8) == a3)
    {
      if ((((_BYTE)v10 + 16) & 7) != 0) {
        goto LABEL_23;
      }
      *(_BYTE *)(v10 + 16) = a4;
      *(_BYTE *)(v10 + 17) = a5;
      if (i != v5) {
        return result;
      }
      break;
    }
  }

  uint64_t result = (uint64_t)operator new(0x18uLL);
  if ((result & 0xF) != 0 || (result & 7) != 0)
  {
LABEL_23:
    __break(0x5516u);
    return result;
  }

  *(void *)uint64_t result = a2;
  *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a3;
  *(_BYTE *)(result + 16) = a4;
  uint64_t v13 = result;
  return sub_100020DF4(v5, &v13);
}

uint64_t *sub_1000587EC(uint64_t *result, uint64_t a2)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t v8 = (uint64_t *)0xAAAAAAAAAAAAAAAALL, v2 = result + 268, ((unint64_t)(result + 268) & 7) != 0)
    || ((unint64_t)(result + 269) & 7) != 0)
  {
LABEL_24:
    __break(0x5516u);
    return result;
  }

  uint64_t v8 = (uint64_t *)result[269];
  if (v8 != v2)
  {
    while (1)
    {
      uint64_t result = sub_10000D014((uint64_t *)&v8);
      BOOL v4 = *result && (*result & 7) == 0;
      uint64_t v5 = *result + 8;
      if (!v4 || (v5 & 7) != 0) {
        goto LABEL_24;
      }
      if (*(void *)v5 == a2)
      {
        uint64_t result = sub_10000D014((uint64_t *)&v8);
        if (*result) {
          BOOL v7 = (*result & 7) == 0;
        }
        else {
          BOOL v7 = 0;
        }
        if (v7)
        {
          *(_BYTE *)(*result + 17) = 0;
          return result;
        }

        goto LABEL_24;
      }

      uint64_t result = sub_10000D048(&v8);
      if (v8 == v2) {
        return result;
      }
    }
  }

  return result;
}

void sub_1000588B8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (uint64_t v1 = a1 + 2144, (v1 & 7) != 0)) {
    __break(0x5516u);
  }
  else {
    sub_1000180FC(v1);
  }
}

void *sub_1000588D8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  return result;
}

uint64_t sub_100058900(uint64_t result, char a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    *(_BYTE *)(v2 + 2280) = a2;
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 416));
  }

  return result;
}

uint64_t sub_10005894C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (pthread_mutex_t *)(result + 416);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 416));
    unsigned int v3 = *(unsigned __int8 *)(v1 + 2280);
    if (v3 < 2)
    {
      pthread_mutex_unlock(v2);
      return v3 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

void sub_1000589A4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_37;
  }
  io_connect_t connect = 0;
  unsigned __int8 v10 = 0;
  int v9 = -1;
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1)
  {
LABEL_18:
    LODWORD(ServiceWithPrimaryPort) = 0;
    goto LABEL_19;
  }

  if ((v1 & 7) != 0
    || (*(_BYTE *)(v1 + 72) = 1, (uint64_t v2 = sub_1000B6CE0()) == 0)
    || (v2 & 7) != 0
    || ((*(void (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v2 + 48LL))( v2,  8LL,  0LL,  v1,  0LL),  ((v1 + 84) & 3) != 0))
  {
LABEL_37:
    __break(0x5516u);
    goto LABEL_38;
  }

  uint64_t ServiceWithPrimaryPort = IOAccessoryManagerGetServiceWithPrimaryPort(*(unsigned int *)(v1 + 84));
  if ((_DWORD)ServiceWithPrimaryPort)
  {
LABEL_9:
    if (IOServiceOpen(ServiceWithPrimaryPort, mach_task_self_, 0, &connect)
      || IOAccessoryManagerGetUSBConnectType(ServiceWithPrimaryPort, &v9, &v10))
    {
      goto LABEL_25;
    }

    if ((v9 + 8) < 0x10)
    {
      syslog(3, "Current USB Connection Type: %d\n", v9);
      if (v10 <= 1u)
      {
        syslog(3, "Current USB Connection Active: %d\n", v10);
        syslog(3, "Toggling USB connection for 1250ms...\n");
        mach_error_t v4 = IOAccessoryManagerConfigureUSBMode(connect, 4LL);
        if (v4)
        {
LABEL_14:
          uint64_t v5 = "Could not configure USB mode: %s\n";
LABEL_24:
          BOOL v7 = mach_error_string(v4);
          syslog(3, v5, v7);
LABEL_25:
          char v6 = 0;
          goto LABEL_26;
        }

        mach_error_t v4 = IOAccessoryManagerConfigurePower(connect, 1LL);
        if (v4)
        {
          uint64_t v5 = "Could not disable ACC power: %s\n";
          goto LABEL_24;
        }

        usleep(0x1312D0u);
        mach_error_t v4 = IOAccessoryManagerConfigurePower(connect, 3LL);
        if (v4)
        {
          uint64_t v5 = "Could not enable ACC power: %s\n";
          goto LABEL_24;
        }

        if ((v9 + 8) <= 0xF)
        {
          else {
            uint64_t v8 = dword_1000DE840[v9 - 2];
          }
          syslog(3, "USB mode: %d\n", v8);
          mach_error_t v4 = IOAccessoryManagerConfigureUSBMode(connect, v8);
          if (!v4) {
            goto LABEL_25;
          }
          goto LABEL_14;
        }
      }
    }

void sub_100058BEC(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100058C74((uint64_t)v2, *v2);
    mach_error_t v4 = *a1;
    if (*a1 && (v4 & 7) == 0 && (((_BYTE)v4 + 16) & 7) == 0)
    {
      if (v4[2] - *v4 >= 0)
      {
        operator delete((void *)*v4);
        return;
      }

      goto LABEL_16;
    }

uint64_t sub_100058C74(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    unint64_t v2 = *(void *)(result + 8);
    if (v2 == a2)
    {
LABEL_7:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
      return result;
    }

    if ((((_BYTE)result + 16) & 7) == 0)
    {
      while (v2 > 0xF)
      {
        v2 -= 16LL;
        if (v2 == a2) {
          goto LABEL_7;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100058CBC(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result
    || (result & 7) != 0
    || (((_BYTE)result + 16) & 7) != 0
    || (memset(v10, 170, sizeof(v10)), result = sub_100058D5C((uint64_t)v10, 1uLL), (uint64_t v7 = v10[2]) == 0)
    || (v10[2] & 7) != 0
    || (*(void *)v10[2] = a2, *(void *)(v7 + 8) = a3, uint64_t v8 = (void *)(v7 + 16), (v8 & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t v8 = *a4;
    uint64_t v9 = v10[2];
    void v10[2] = 0LL;
    sub_100024F54((uint64_t)v10);
    return v9;
  }

  return result;
}

uint64_t sub_100058D5C(uint64_t result, unint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    *(void *)(result + 16) = sub_100058D9C(result, a2);
    return v2;
  }

  return result;
}

void *sub_100058D9C(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D251C();
  }

  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    goto LABEL_5;
  }
  return operator new(24 * a2);
}

uint64_t sub_100058DD4(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v5 = result;
  if (result != a2)
  {
    while (*sub_10000D014(&v5) != *a3)
    {
      sub_10000D048(&v5);
      if (v5 == a2) {
        return a2;
      }
    }

    return v5;
  }

  return result;
}

unint64_t *sub_100058E40(unint64_t *result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t v2 = *result;
    BOOL v3 = __CFADD__(*result, 16 * a2);
    if ((a2 & 0x800000000000000LL) != 0) {
      BOOL v4 = v3;
    }
    else {
      BOOL v4 = *result + 16 * a2 >= v2;
    }
    if (!((unint64_t)(a2 + 0x800000000000000LL) >> 60) && v4)
    {
      *uint64_t result = v2 + 16 * a2;
      return result;
    }
  }

  __break(0x5513u);
  return result;
}

char *sub_100058E94(char *__src, char *a2, void *__dst)
{
  uint64_t v5 = __src;
  uint64_t v6 = a2 - __src;
  if (a2 == __src)
  {
LABEL_5:
    if (!__CFADD__(__dst, v6))
    {
      BOOL v7 = a2 >= v5;
      if (v6 < 0) {
        BOOL v7 = a2 < v5;
      }
      if (v7) {
        return &v5[v6];
      }
    }

    __break(0x5513u);
    goto LABEL_11;
  }

  if (v6 < 0)
  {
LABEL_11:
    __break(0x550Cu);
    goto LABEL_12;
  }

  if ((unint64_t)(v6 - 16) < 0xFFFFFFFFFFFFFFF0LL)
  {
    __src = (char *)memmove(__dst, __src, a2 - __src);
    goto LABEL_5;
  }

void *sub_100058F18(void *result, _OWORD *a2)
{
  v3[0] = result;
  unint64_t v2 = result[1];
  if (v2 >= 0xFFFFFFFFFFFFFFF0LL)
  {
LABEL_10:
    __break(0x5513u);
    return result;
  }

  v3[2] = v2 + 16;
  if ((((_BYTE)result + 16) & 7) != 0 || !v2 || (v2 & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  *(_OWORD *)unint64_t v2 = *a2;
  v3[1] = v2 + 16;
  return sub_100024794(v3);
}

uint64_t sub_100058F90(uint64_t *a1, _OWORD *a2)
{
  if (!a1) {
    goto LABEL_15;
  }
  unint64_t v2 = a1;
  BOOL v3 = a1 + 2;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v12 = v4;
  __int128 v13 = v4;
  uint64_t v5 = (a1[1] - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
LABEL_16:
    __break(0x5500u);
LABEL_17:
    sub_10002A484((uint64_t)v2);
  }

  if (v6 >> 60) {
    goto LABEL_17;
  }
  unint64_t v8 = *v3 - *a1;
  if (v8 >> 3 > v6) {
    unint64_t v6 = v8 >> 3;
  }
  unint64_t v9 = v8 >= 0x7FFFFFFFFFFFFFF0LL ? 0xFFFFFFFFFFFFFFFLL : v6;
  uint64_t result = sub_100059148((uint64_t)&v12, v9, v5, (uint64_t)v3);
  if (!(void)v13 || (v13 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *(_OWORD *)__int128 v13 = *a2;
  if ((unint64_t)v13 >= 0xFFFFFFFFFFFFFFF0LL)
  {
    __break(0x5513u);
  }

  else
  {
    *(void *)&__int128 v13 = v13 + 16;
    sub_100059088(v2, &v12);
    uint64_t v11 = v2[1];
    sub_100059310((uint64_t)&v12);
    return v11;
  }

  return result;
}

uint64_t *sub_100059088(uint64_t *result, void *a2)
{
  if (!result) {
    goto LABEL_6;
  }
  unint64_t v2 = result;
  BOOL v3 = result + 2;
  unint64_t v6 = result + 1;
  uint64_t v5 = result[1];
  uint64_t v7 = *result;
  uint64_t v8 = a2[1];
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v15 = v9;
  __int128 v16 = v9;
  uint64_t result = (uint64_t *)sub_10005926C(&v14, v5, v5, v7, v8, v8, &v15);
  uint64_t v10 = *((void *)&v16 + 1);
  a2[1] = *((void *)&v16 + 1);
  uint64_t v11 = *v2;
  uint64_t *v2 = v10;
  a2[1] = v11;
  if ((v6 & 7) != 0)
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    uint64_t v12 = *v6;
    *unint64_t v6 = a2[2];
    a2[2] = v12;
    uint64_t v13 = *v3;
    uint64_t *v3 = a2[3];
    a2[3] = v13;
    *a2 = a2[1];
  }

  return result;
}

uint64_t sub_100059148(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (__int128 v4 = (void *)result, (result & 7) != 0)
    || (((_BYTE)result + 24) & 7) != 0
    || (*(void *)(result + 24) = 0LL, ((result + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 32) = a4;
    if (a2)
    {
      uint64_t v7 = sub_100024960(result);
      uint64_t result = (uint64_t)sub_100059218(v7, a2);
    }

    else
    {
      uint64_t result = 0LL;
    }

    void *v4 = result;
    if (!((unint64_t)(a3 + 0x800000000000000LL) >> 60) && 16 * a3 <= (unint64_t)~result)
    {
      uint64_t v8 = result + 16 * a3;
      v4[1] = v8;
      _BYTE v4[2] = v8;
      if (!((a2 + 0x800000000000000LL) >> 60) && 16 * a2 <= ~result)
      {
        void v4[3] = result + 16 * a2;
        return (uint64_t)v4;
      }
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_100059218(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D2544();
  }

  if (a2 >> 60) {
    goto LABEL_5;
  }
  return operator new(16 * a2);
}

unint64_t sub_10005923C(unint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_5:
    __break(0x5516u);
    goto LABEL_6;
  }

  unint64_t v1 = *(void *)(result + 8);
  if (v1 > 0xF)
  {
    uint64_t result = v1 - 16;
    if (((v1 - 16) & 7) == 0) {
      return result;
    }
    goto LABEL_5;
  }

_OWORD *sub_10005926C@<X0>( _OWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  *(void *)&__int128 v13 = a2;
  *((void *)&v13 + 1) = a3;
  *(void *)&__int128 v12 = a5;
  *((void *)&v12 + 1) = a6;
  if (result)
  {
    if (a3 == a4)
    {
LABEL_6:
      if (a7)
      {
        __int128 v11 = v12;
        *a7 = v13;
        a7[1] = v11;
        return result;
      }
    }

    else
    {
      while (1)
      {
        __int128 v9 = (_OWORD *)sub_10005923C((unint64_t)&v13);
        uint64_t result = (_OWORD *)sub_10005923C((unint64_t)&v12);
        *uint64_t result = *v9;
        if (*((void *)&v13 + 1) <= 0xFuLL) {
          break;
        }
        uint64_t v10 = *((void *)&v13 + 1) - 16LL;
        *((void *)&v13 + 1) -= 16LL;
        if (*((void *)&v12 + 1) <= 0xFuLL) {
          break;
        }
        *((void *)&v12 + 1) -= 16LL;
        if (v10 == a4) {
          goto LABEL_6;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100059310(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_10005937C(result);
  if (!*v1) {
    return (uint64_t)v1;
  }
  sub_100024960((uint64_t)v1);
  uint64_t result = *v1;
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (v1[3] - result >= 0)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t sub_10005937C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100059394(result, *(void *)(result + 8));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_100059394(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    for (unint64_t i = *(void *)(result + 16); i != a2; *(void *)(v2 + 16) = i)
    {
      uint64_t result = sub_100024960(v2);
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 <= 0xF)
      {
        __break(0x5513u);
        goto LABEL_9;
      }

      unint64_t i = v5 - 16;
    }
  }

  return result;
}

void *sub_1000593F4(void *result, uint64_t a2)
{
  if (!result
    || (uint64_t v2 = (uint64_t)result, (result & 7) != 0)
    || (*uint64_t result = result, result[1] = result, ((unint64_t)(result + 2) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[2] = 0LL;
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v6 = v4;
    while (v4 != a2)
    {
      unint64_t v5 = sub_10000D014(&v6);
      sub_100020DF4(v2, v5);
      sub_10000D048(&v6);
      uint64_t v4 = v6;
    }

    return (void *)v2;
  }

  return result;
}

uint64_t sub_100059478(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = off_100105A50;
    *(_BYTE *)(result + 32) = 0;
    *(void *)(result + 24) = dispatch_semaphore_create(0LL);
    return v1;
  }

  return result;
}

unint64_t sub_1000594C4(unint64_t result, unsigned int a2, uint64_t a3)
{
  if (result)
  {
    unint64_t v3 = result;
    if ((result & 7) == 0)
    {
      if (a2 >= 4)
      {
        __break(0x5518u);
      }

      else
      {
        *(_DWORD *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
        uint64_t result = (unint64_t)operator new[](8LL * a2);
        if ((result & 7) == 0)
        {
          *(void *)(v3 + 16) = result;
          if (!a2) {
            return result;
          }
          uint64_t v6 = 0LL;
          unint64_t v7 = 0LL;
          unint64_t v8 = 0LL;
          BOOL v10 = (a3 & 3) == 0 && a3 != 0;
          while (1)
          {
            uint64_t result = (unint64_t)operator new(0x188uLL);
            if ((result & 0xF) != 0) {
              break;
            }
            if (v7 > ~a3) {
              goto LABEL_23;
            }
            if (!v10 || (result & 7) != 0) {
              break;
            }
            uint64_t result = sub_100059AC4(result, *(_DWORD *)(a3 + v7));
            uint64_t v11 = *(void *)(v3 + 16);
            if (__CFADD__(v11, v6)) {
              goto LABEL_23;
            }
            if (!v11 || (((_BYTE)v6 + (_BYTE)v11) & 7) != 0) {
              break;
            }
            *(void *)(v11 + v6) = result;
            ++v8;
            v7 += 4LL;
            v6 += 8LL;
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_23:
  __break(0x5513u);
  return result;
}

void sub_1000595BC(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_19:
    __break(0x5516u);
LABEL_20:
    __break(0x5513u);
    goto LABEL_21;
  }

  *(void *)a1 = off_100105A50;
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = *(void *)(a1 + 16);
      if (__CFADD__(v3, 8 * v2)) {
        goto LABEL_20;
      }
      uint64_t v4 = (uint64_t *)(v3 + 8 * v2);
      if (v3) {
        BOOL v5 = (v4 & 7) == 0LL;
      }
      else {
        BOOL v5 = 0;
      }
      if (!v5) {
        goto LABEL_19;
      }
      uint64_t v6 = *v4;
      if (*v4)
      {
        if ((v6 & 7) != 0) {
          goto LABEL_19;
        }
        sub_10005AB3C(v6);
        operator delete(v7);
      }
    }

    while (++v2 < (unint64_t)*(unsigned int *)(a1 + 8));
  }

  unint64_t v8 = *(void **)(a1 + 16);
  if (v8) {
    operator delete[](v8);
  }
  __int128 v9 = *(dispatch_object_s **)(a1 + 24);
  if (v9)
  {
    dispatch_release(v9);
    return;
  }

void sub_10005966C(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

void sub_100059680(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

uint64_t sub_100059694(uint64_t result, uint64_t a2, char a3, unsigned int a4)
{
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_22;
  }
  if ((a3 & 1) != 0)
  {
    unint64_t v8 = 0LL;
  }

  else
  {
    unint64_t v8 = dispatch_semaphore_create(0LL);
    uint64_t result = sub_1000AA170(a2, (uint64_t)v8);
  }

  if (a4 > 3) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(v4 + 16);
  if (__CFADD__(v9, 8LL * a4))
  {
LABEL_24:
    __break(0x5513u);
    goto LABEL_25;
  }

  if (!v9
    || (BOOL v10 = (uint64_t *)(v9 + 8LL * a4), (v10 & 7) != 0)
    || ((result = *v10, v11 = *v10 & 7, result) ? (BOOL v12 = v11 == 0) : (BOOL v12 = 0), !v12))
  {
LABEL_22:
    __break(0x5516u);
LABEL_23:
    __break(0x550Au);
    goto LABEL_24;
  }

  uint64_t v13 = sub_100059784(result, a2);
  if ((_DWORD)v13) {
    return v13;
  }
  uint64_t result = *(void *)(v4 + 24);
  if (result)
  {
    uint64_t result = dispatch_semaphore_signal((dispatch_semaphore_t)result);
    if ((a3 & 1) == 0)
    {
      if (!v8)
      {
        __break(0x5518u);
        goto LABEL_22;
      }

      dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v8);
    }

    return v13;
  }

uint64_t sub_100059784(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t v4 = sub_10005AEEC(result, 0);
  if (!v4) {
    return 16LL;
  }
  uint64_t v5 = v4;
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)v2);
  if ((v5 & 7) != 0 {
    || (((_BYTE)v5 + 24) & 7) != 0
  }
    || (*(void *)(v5 + 24) = a2, *(_BYTE *)uint64_t v5 = 1, ((v5 + 8) & 7) != 0)
    || (*(void *)(v5 + _Block_object_dispose((const void *)(v1 - 48), 8) = v2, ((v2 + 224) & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
  }

  else
  {
    int v6 = sub_10005AF10(v2, (pthread_mutex_t *)(v2 + 224), v5);
    if (v6) {
      sub_1000D27B4(v6);
    }
    pthread_mutex_unlock((pthread_mutex_t *)v2);
    return 0LL;
  }

  return result;
}

uint64_t sub_10005983C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
LABEL_38:
    __break(0x5516u);
  }

  else
  {
    uint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    int v2 = *(_DWORD *)(result + 8);
    unsigned int v3 = v2 - 1;
    if (!v2) {
      goto LABEL_42;
    }
    uint64_t v4 = 2863311530LL;
LABEL_5:
    while ((v3 & 0x80000000) != 0)
    {
LABEL_25:
      uint64_t result = *(void *)(v1 + 24);
      if (!result) {
        goto LABEL_41;
      }
      dispatch_semaphore_wait((dispatch_semaphore_t)result, 0xFFFFFFFFFFFFFFFFLL);
    }

    int v5 = 0;
    uint64_t result = 1LL;
    uint64_t v6 = 8LL * v3;
    while (*(unsigned __int8 *)(v1 + 32) <= 1u)
    {
      int v7 = v3 + v5;
      if (*(_BYTE *)(v1 + 32)) {
        BOOL v8 = v5 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (v8)
      {
        uint64_t v9 = *(void *)(v1 + 16);
        if (__CFADD__(v9, v6)) {
          goto LABEL_40;
        }
        if (!v9 || (((_BYTE)v6 + (_BYTE)v9) & 7) != 0) {
          goto LABEL_38;
        }
        uint64_t result = *(void *)(v9 + v6);
        if (!result || (*(void *)(v9 + v6) & 7LL) != 0) {
          goto LABEL_38;
        }
        uint64_t result = sub_1000599C8(result, &v13);
        uint64_t v4 = v3 + v5;
      }

      if ((_DWORD)result)
      {
        --v5;
        v6 -= 8LL;
        if (v7 > 0) {
          continue;
        }
      }

      if ((_DWORD)result) {
        goto LABEL_25;
      }
      uint64_t v11 = v13;
      if (!v13)
      {
        __break(0x5518u);
        goto LABEL_38;
      }

      if ((v13 & 7) != 0) {
        goto LABEL_38;
      }
      uint64_t result = sub_1000AA14C(v13);
      BOOL v12 = result == 3;
      if ((_DWORD)result != 3)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v1 + 16LL))(v1, v11, v4);
      }

      if (sub_100056CF8(v11))
      {
        uint64_t result = sub_100056CF8(v11);
        if (!result) {
          goto LABEL_41;
        }
        dispatch_semaphore_signal((dispatch_semaphore_t)result);
      }

      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
      if (!v12) {
        goto LABEL_5;
      }
      return result;
    }
  }

  __break(0x550Au);
LABEL_40:
  __break(0x5513u);
LABEL_41:
  __break(0x5510u);
LABEL_42:
  __break(0x5515u);
  return result;
}

uint64_t sub_1000599C8(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_16;
  }
  int v2 = (pthread_mutex_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_16;
  }
  uint64_t v4 = sub_10005B194(result, 0);
  if (!v4) {
    return 35LL;
  }
  uint64_t v5 = v4;
  uint64_t result = pthread_mutex_lock(v2);
  if ((v5 & 7) != 0)
  {
LABEL_16:
    __break(0x5516u);
    goto LABEL_17;
  }

  if (*(unsigned __int8 *)v5 < 2u)
  {
    if (!*(_BYTE *)v5)
    {
      uint64_t v8 = 22LL;
LABEL_13:
      pthread_mutex_unlock(v2);
      return v8;
    }

    if (((v5 + 24) & 7) == 0)
    {
      *a2 = *(void *)(v5 + 24);
      if (((unint64_t)&v2[1] & 7) == 0)
      {
        uint64_t v6 = sub_10005B1B8(v5);
        int v7 = sub_10005AF10((uint64_t)v2, v2 + 1, v6);
        if (v7) {
          sub_1000D27B4(v7);
        }
        uint64_t v8 = 0LL;
        goto LABEL_13;
      }
    }

    goto LABEL_16;
  }

uint64_t sub_100059A98(uint64_t result, char a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(result + 32) = a2;
    if ((a2 & 1) != 0) {
      return result;
    }
    uint64_t result = *(void *)(result + 24);
    if (result) {
      return dispatch_semaphore_signal((dispatch_semaphore_t)result);
    }
  }

  __break(0x5510u);
  return result;
}

unint64_t sub_100059AC4(unint64_t result, int a2)
{
  if (result)
  {
    unint64_t v2 = result;
    if ((result & 7) == 0 && ((result + 64) & 7) == 0 && ((result + 176) & 7) == 0)
    {
      LODWORD(v3) = a2;
      uint64_t result = (unint64_t)sub_100059C38((void *)(result + 176));
      if (((v2 + 224) & 7) == 0)
      {
        uint64_t result = v2 + 336;
        if (((v2 + 336) & 7) == 0)
        {
          sub_100059C38((void *)result);
          *(void *)(v2 + 384) = 0LL;
          pthread_mutex_init((pthread_mutex_t *)v2, 0LL);
          pthread_cond_init((pthread_cond_t *)(v2 + 128), 0LL);
          pthread_mutex_init((pthread_mutex_t *)(v2 + 64), 0LL);
          pthread_cond_init((pthread_cond_t *)(v2 + 288), 0LL);
          pthread_mutex_init((pthread_mutex_t *)(v2 + 224), 0LL);
          uint64_t result = (unint64_t)operator new[](32LL * v3);
          if ((result & 0xF) == 0)
          {
            unint64_t v4 = result;
            uint64_t v5 = 0LL;
            uint64_t v6 = v3;
            unint64_t v7 = result & 7;
            while (!v7)
            {
              uint64_t result = sub_100059C74(v4 + v5);
              v5 += 32LL;
              if (32LL * v3 == v5)
              {
                uint64_t v8 = 0LL;
                *(void *)(v2 + 384) = v4;
                uint64_t v3 = (int)v3;
                while (1)
                {
                  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
                  uint64_t v9 = *(void *)(v2 + 384);
                  if (__CFADD__(v9, v8)) {
                    goto LABEL_20;
                  }
                  unint64_t v10 = v9 + v8;
                  uint64_t result = sub_100059C98(v2 + 176, &v10);
                  v8 += 32LL;
                  if (!--v3)
                  {
                    if (((v2 + 216) & 7) != 0) {
                      goto LABEL_19;
                    }
                    if (*(void *)(v2 + 216) != v6) {
                      sub_1000D2500();
                    }
                    return v2;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void *sub_100059C38(void *result)
{
  if (!result
    || (result & 7) != 0
    || (*uint64_t result = 0LL, result[1] = 0LL, result[2] = 0LL, ((unint64_t)(result + 3) & 7) != 0)
    || (result[3] = 0LL, result[4] = 0LL, (((_BYTE)result + 40) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    result[5] = 0LL;
  }

  return result;
}

uint64_t sub_100059C74(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)uint64_t result = 0;
    *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    *(_BYTE *)(result + 16) = 0;
    *(void *)(result + 24) = 0LL;
  }

  return result;
}

unint64_t sub_100059C98(unint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v2 = (void *)result;
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t v3 = (void *)(result + 40);
  if (((result + 40) & 7) != 0) {
    goto LABEL_10;
  }
  if (!sub_100059D20(result)) {
    sub_100059D7C((uint64_t)v2);
  }
  uint64_t result = (unint64_t)sub_100059FD0(v2);
  if (!v5 || (v5 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
  }

  else
  {
    void *v5 = *a2;
    if (*v3 != -1LL)
    {
      ++*v3;
      return result;
    }
  }

  __break(0x5500u);
  return result;
}

unint64_t sub_100059D20(unint64_t result)
{
  if (!result || (unint64_t v1 = result, (result & 7) != 0) || (result = sub_10005A054(result), (((_BYTE)v1 + 40) & 7) != 0))
  {
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  BOOL v4 = __CFADD__(v2, v3);
  unint64_t v5 = v2 + v3;
  if (v4)
  {
LABEL_9:
    __break(0x5500u);
LABEL_10:
    __break(0x5515u);
    return result;
  }

  BOOL v4 = result >= v5;
  result -= v5;
  if (!v4) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_100059D7C(uint64_t result)
{
  if (!result || (unint64_t v1 = (uint64_t *)result, (result & 7) != 0) || ((result + 40) & 7) != 0)
  {
LABEL_28:
    __break(0x5516u);
    goto LABEL_29;
  }

  unint64_t v2 = *(void *)(result + 32);
  if (v2 > 0x1FF)
  {
    *(void *)(result + 32) = v2 - 512;
    uint64_t result = sub_10005A098(result);
    *(void *)&__int128 v18 = *(void *)result;
    unint64_t v3 = v1[1];
    if (v3 < 0xFFFFFFFFFFFFFFF8LL)
    {
      v1[1] = v3 + 8;
      return sub_10005A0C0((unint64_t)v1, &v18);
    }

    goto LABEL_29;
  }

  BOOL v4 = (void *)(result + 16);
  unint64_t v5 = (void *)(result + 8);
  uint64_t v6 = *(void *)(result + 16) - *(void *)(result + 8);
  if (sub_10005A268(result) <= (unint64_t)(v6 >> 3))
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v18 = v7;
    __int128 v19 = v7;
    uint64_t result = sub_10005A268((uint64_t)v1);
    if (result < 0)
    {
LABEL_31:
      __break(0x550Cu);
      return result;
    }

    if (((unint64_t)(v1 + 3) & 7) == 0)
    {
      if (result) {
        unint64_t v8 = 2 * result;
      }
      else {
        unint64_t v8 = 1LL;
      }
      sub_1000251DC((uint64_t)&v18, v8, (uint64_t)(*v4 - *v5) >> 3, (uint64_t)(v1 + 3));
      v17[1] = v1 + 5;
      v17[2] = (void *)512;
      __int128 v16 = operator new(0x1000uLL);
      uint64_t result = sub_10005A488((unint64_t)&v18, &v16);
      v17[0] = 0LL;
      uint64_t v9 = (void *)*v4;
      if (*v4 != *v5)
      {
        uint64_t v10 = *v4 & 7LL;
        while ((unint64_t)v9 > 7)
        {
          if (v10) {
            goto LABEL_28;
          }
          uint64_t result = sub_10005A654((uint64_t)&v18, --v9);
          if (v9 == (void *)*v5) {
            goto LABEL_20;
          }
        }

        goto LABEL_29;
      }

void *sub_100059FD0(void *result)
{
  if (!result || (unint64_t v1 = result, (result & 7) != 0) || (((_BYTE)result + 40) & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    goto LABEL_13;
  }

  uint64_t v3 = result[4];
  uint64_t v2 = result[5];
  BOOL v4 = __CFADD__(v2, v3);
  unint64_t v5 = v2 + v3;
  if (v4)
  {
LABEL_14:
    __break(0x5500u);
    return result;
  }

  uint64_t v6 = result[1];
  uint64_t v7 = (v5 >> 6) & 0x3FFFFFFFFFFFFF8LL;
  if (__CFADD__(v6, v7))
  {
LABEL_13:
    __break(0x5513u);
    goto LABEL_14;
  }

  uint64_t result = (void *)(v6 + v7);
  if (v1[2] != v6)
  {
    if (v6 && (result & 7) == 0)
    {
      if (!__CFADD__(*result, 8 * (v5 & 0x1FF))) {
        return result;
      }
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  return result;
}

uint64_t sub_10005A054(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
LABEL_9:
    __break(0x550Cu);
    goto LABEL_10;
  }

  unint64_t v1 = *(void *)(result + 16) - *(void *)(result + 8);
  if (!v1) {
    return 0LL;
  }
  if (v1 >> 58) {
    goto LABEL_9;
  }
  uint64_t v2 = v1 << 6;
  uint64_t result = v2 - 1;
  if (!v2) {
LABEL_10:
  }
    __break(0x5515u);
  return result;
}

uint64_t sub_10005A098(uint64_t result)
{
  if (!result
    || (result & 7) != 0
    || ((result = *(void *)(result + 8)) != 0 ? (BOOL v1 = (result & 7) == 0) : (BOOL v1 = 0), !v1))
  {
    __break(0x5516u);
  }

  return result;
}

unint64_t sub_10005A0C0(unint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_33;
  }
  uint64_t v2 = (void *)result;
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  unint64_t v5 = (void *)(result + 16);
  BOOL v4 = *(char **)(result + 16);
  uint64_t v6 = (char **)(result + 24);
  if (((result + 24) & 7) != 0) {
    goto LABEL_33;
  }
  if (v4 != *v6)
  {
LABEL_29:
    if (v4 && (v4 & 7) == 0)
    {
      *(void *)BOOL v4 = *a2;
      if (*v5 <= 0xFFFFFFFFFFFFFFF7LL)
      {
        *v5 += 8LL;
        return result;
      }

      goto LABEL_34;
    }

    goto LABEL_33;
  }

  uint64_t v7 = (unint64_t *)(result + 8);
  uint64_t result = *(void *)(result + 8);
  uint64_t v8 = result - *v2;
  if (result > *v2)
  {
    if (v8 >> 3 >= -1) {
      uint64_t v9 = (v8 >> 3) + 1;
    }
    else {
      uint64_t v9 = (v8 >> 3) + 2;
    }
    uint64_t v10 = -(v9 >> 1);
    BOOL v11 = __CFADD__(result, -8 * (v9 >> 1));
    unint64_t v12 = result - 8 * (v9 >> 1);
    char v13 = v11;
    BOOL v14 = v12 >= result;
    if (v8 >= 8) {
      BOOL v14 = v13;
    }
    if (!v14) {
      goto LABEL_34;
    }
    uint64_t result = (unint64_t)sub_10005A828((char *)result, v4, (void *)(result + 8 * v10));
    void *v5 = v4;
    unint64_t v15 = *v7;
    BOOL v16 = __CFADD__(8 * v10, *v7);
    BOOL v17 = 8 * v10 + *v7 >= v15;
    if (v8 >= 8) {
      BOOL v17 = v16;
    }
    if (!v17) {
      goto LABEL_34;
    }
    unint64_t *v7 = v15 + 8 * v10;
    goto LABEL_29;
  }

  uint64_t v18 = (uint64_t)&v4[-*v2];
  if (v18 >= 0)
  {
    unint64_t v19 = (unint64_t)v18 >> 2;
    else {
      unint64_t v20 = v19;
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v25 = v21;
    __int128 v26 = v21;
    sub_1000251DC((uint64_t)&v25, v20, v20 >> 2, (uint64_t)v6);
    uint64_t result = sub_10005A8AC((uint64_t)&v25, v2[1], (uint64_t)(v2[2] - v2[1]) >> 3);
    int v22 = (char *)*v2;
    void *v2 = v25;
    *(void *)&__int128 v25 = v22;
    if ((v7 & 7) == 0)
    {
      unint64_t v23 = *v7;
      unint64_t *v7 = *((void *)&v25 + 1);
      *((void *)&v25 + 1) = v23;
      if ((v5 & 7) == 0)
      {
        __int128 v24 = *(_OWORD *)v5;
        *(_OWORD *)unint64_t v5 = v26;
        __int128 v26 = v24;
        uint64_t result = sub_1000253A0((uint64_t)&v25);
        BOOL v4 = (char *)*v5;
        goto LABEL_29;
      }
    }

uint64_t sub_10005A268(uint64_t result)
{
  if (result && (result & 7) == 0 && (((_BYTE)result + 24) & 7) == 0) {
    return (uint64_t)(*(void *)(result + 24) - *(void *)result) >> 3;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005A298(uint64_t result)
{
  if (result && (result & 7) == 0 && (((_BYTE)result + 24) & 7) == 0) {
    return (uint64_t)(*(void *)(result + 24) - *(void *)(result + 16)) >> 3;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005A2C4(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v2 = (void *)result;
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  BOOL v4 = (uint64_t *)(result + 8);
  uint64_t result = *(void *)(result + 8);
  if (result != *v2) {
    goto LABEL_29;
  }
  uint64_t v6 = v2 + 2;
  unint64_t v5 = (_BYTE *)v2[2];
  uint64_t v7 = v2 + 3;
  uint64_t v8 = *v7;
  if ((unint64_t)v5 < *v7)
  {
    uint64_t v9 = v8 - (void)v5;
    uint64_t v10 = (v8 - (uint64_t)v5) >> 3;
    if (v10 >= -1) {
      uint64_t v11 = v10 + 1;
    }
    else {
      uint64_t v11 = v10 + 2;
    }
    uint64_t v12 = v11 >> 1;
    BOOL v13 = __CFADD__(v5, 8 * (v11 >> 1));
    BOOL v14 = &v5[8 * (v11 >> 1)];
    char v15 = v13;
    BOOL v16 = v14 >= v5;
    if (v9 <= -24) {
      BOOL v16 = v15;
    }
    if (!v16) {
      goto LABEL_35;
    }
    uint64_t result = (uint64_t)sub_10005A9FC((_BYTE *)result, v5, (unint64_t)&v5[8 * v12]);
    uint64_t *v4 = v17;
    unint64_t v18 = *v6;
    BOOL v19 = __CFADD__(8 * v12, *v6);
    BOOL v20 = 8 * v12 + *v6 >= v18;
    if (v9 <= -24) {
      BOOL v20 = v19;
    }
    if (!v20) {
      goto LABEL_35;
    }
    *uint64_t v6 = v18 + 8 * v12;
LABEL_29:
    if ((((_BYTE)v2 + 24) & 7) == 0)
    {
      uint64_t v29 = *v4 - 8;
      if ((unint64_t)*v4 < 8)
      {
LABEL_35:
        __break(0x5513u);
        goto LABEL_36;
      }

      if ((v29 & 7) == 0)
      {
        *(void *)uint64_t v29 = *a2;
        if ((unint64_t)*v4 >= 8)
        {
          *v4 -= 8LL;
          return result;
        }

        goto LABEL_35;
      }
    }

unint64_t sub_10005A488(unint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_33;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  BOOL v4 = (void *)(result + 16);
  uint64_t v3 = *(void *)(result + 16);
  if (((result + 24) & 7) != 0) {
    goto LABEL_33;
  }
  if (v3 != *(void *)(result + 24))
  {
LABEL_29:
    uint64_t result = sub_100024960(v2);
    __int128 v25 = *(void **)(v2 + 16);
    if (v25 && (v25 & 7) == 0)
    {
      *__int128 v25 = *a2;
      if (*v4 <= 0xFFFFFFFFFFFFFFF7LL)
      {
        *v4 += 8LL;
        return result;
      }

      goto LABEL_34;
    }

    goto LABEL_33;
  }

  uint64_t v6 = (unint64_t *)(result + 8);
  uint64_t result = *(void *)(result + 8);
  uint64_t v7 = *(void *)v2;
  uint64_t v8 = result - *(void *)v2;
  if (result > *(void *)v2)
  {
    if (v8 >> 3 >= -1) {
      uint64_t v9 = (v8 >> 3) + 1;
    }
    else {
      uint64_t v9 = (v8 >> 3) + 2;
    }
    uint64_t v10 = -(v9 >> 1);
    BOOL v11 = __CFADD__(result, -8 * (v9 >> 1));
    unint64_t v12 = result - 8 * (v9 >> 1);
    char v13 = v11;
    BOOL v14 = v12 >= result;
    if (v8 >= 8) {
      BOOL v14 = v13;
    }
    if (!v14) {
      goto LABEL_34;
    }
    uint64_t result = (unint64_t)sub_10005A828((char *)result, *(char **)(v2 + 16), (void *)(result + 8 * v10));
    void *v4 = v15;
    unint64_t v16 = *v6;
    BOOL v17 = __CFADD__(8 * v10, *v6);
    BOOL v18 = 8 * v10 + *v6 >= v16;
    if (v8 >= 8) {
      BOOL v18 = v17;
    }
    if (!v18) {
      goto LABEL_34;
    }
    *uint64_t v6 = v16 + 8 * v10;
    goto LABEL_29;
  }

  if (v3 - v7 >= 0)
  {
    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v26 = v19;
    __int128 v27 = v19;
    uint64_t v20 = sub_100024960(v2);
    if (v3 == v7) {
      unint64_t v21 = 1LL;
    }
    else {
      unint64_t v21 = (unint64_t)(v3 - v7) >> 2;
    }
    sub_1000251DC((uint64_t)&v26, v21, v21 >> 2, v20);
    uint64_t result = sub_10005A8AC( (uint64_t)&v26,  *(void *)(v2 + 8),  (uint64_t)(*(void *)(v2 + 16) - *(void *)(v2 + 8)) >> 3);
    uint64_t v22 = *(void *)v2;
    *(void *)uint64_t v2 = v26;
    *(void *)&__int128 v26 = v22;
    if ((v6 & 7) == 0)
    {
      unint64_t v23 = *v6;
      *uint64_t v6 = *((void *)&v26 + 1);
      *((void *)&v26 + 1) = v23;
      if ((v4 & 7) == 0)
      {
        __int128 v24 = *(_OWORD *)v4;
        *(_OWORD *)BOOL v4 = v27;
        __int128 v27 = v24;
        sub_1000253A0((uint64_t)&v26);
        goto LABEL_29;
      }
    }

uint64_t sub_10005A654(uint64_t result, void *a2)
{
  if (!result) {
    goto LABEL_34;
  }
  uint64_t v2 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_34;
  }
  unint64_t v5 = (uint64_t *)(result + 8);
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != *(void *)result) {
    goto LABEL_29;
  }
  uint64_t v7 = (unint64_t *)(result + 16);
  uint64_t v6 = *(_BYTE **)(result + 16);
  uint64_t v8 = (uint64_t *)(result + 24);
  if (((result + 24) & 7) != 0) {
    goto LABEL_34;
  }
  uint64_t v9 = *v8;
  if ((unint64_t)v6 < *v8)
  {
    uint64_t v10 = v9 - (void)v6;
    uint64_t v11 = (v9 - (uint64_t)v6) >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    BOOL v14 = __CFADD__(v6, 8 * (v12 >> 1));
    uint64_t v15 = &v6[8 * (v12 >> 1)];
    char v16 = v14;
    BOOL v17 = v15 >= v6;
    if (v10 <= -24) {
      BOOL v17 = v16;
    }
    if (!v17) {
      goto LABEL_35;
    }
    uint64_t result = (uint64_t)sub_10005A9FC(*(_BYTE **)(result + 8), v6, (unint64_t)&v6[8 * v13]);
    uint64_t *v5 = v18;
    unint64_t v19 = *v7;
    BOOL v20 = __CFADD__(8 * v13, *v7);
    BOOL v21 = 8 * v13 + *v7 >= v19;
    if (v10 <= -24) {
      BOOL v21 = v20;
    }
    if (!v21) {
      goto LABEL_35;
    }
    unint64_t *v7 = v19 + 8 * v13;
LABEL_29:
    uint64_t result = sub_100024960((uint64_t)v2);
    unint64_t v28 = v2[1];
    BOOL v14 = v28 >= 8;
    uint64_t v29 = (void *)(v28 - 8);
    if (!v14) {
      goto LABEL_35;
    }
    if ((v29 & 7) == 0)
    {
      *uint64_t v29 = *a2;
      if ((unint64_t)*v5 >= 8)
      {
        *v5 -= 8LL;
        return result;
      }

      goto LABEL_35;
    }

char *sub_10005A828(char *__src, char *a2, void *__dst)
{
  unint64_t v5 = __src;
  uint64_t v6 = a2 - __src;
  if (a2 == __src)
  {
LABEL_5:
    if (!__CFADD__(__dst, v6))
    {
      BOOL v7 = a2 >= v5;
      if (v6 < 0) {
        BOOL v7 = a2 < v5;
      }
      if (v7) {
        return &v5[v6];
      }
    }

    __break(0x5513u);
    goto LABEL_11;
  }

  if (v6 < 0)
  {
LABEL_11:
    __break(0x550Cu);
    goto LABEL_12;
  }

  if ((unint64_t)(v6 - 8) < 0xFFFFFFFFFFFFFFF8LL)
  {
    __src = (char *)memmove(__dst, __src, a2 - __src);
    goto LABEL_5;
  }

uint64_t sub_10005A8AC(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if ((result & 7) == 0)
    {
      memset(v7, 170, sizeof(v7));
      sub_10005A974(v7, (void *)(result + 16), a3);
      if (v7[0] == v7[1]) {
        return (uint64_t)sub_10005A9CC(v7);
      }
      unint64_t v5 = a2 & 7;
      while (1)
      {
        uint64_t result = sub_100024960(v3);
        if (!a2 || v5 || !v7[0] || (v7[0] & 7) != 0) {
          break;
        }
        *(void *)v7[0] = *(void *)a2;
        if (v7[0] >= 0xFFFFFFFFFFFFFFF8LL) {
          goto LABEL_14;
        }
        uint64_t v6 = v7[0] + 8LL;
        v7[0] += 8LL;
        if (a2 >= 0xFFFFFFFFFFFFFFF8LL) {
          goto LABEL_14;
        }
        a2 += 8LL;
        if (v6 == v7[1]) {
          return (uint64_t)sub_10005A9CC(v7);
        }
      }
    }
  }

  __break(0x5516u);
LABEL_14:
  __break(0x5513u);
  return result;
}

void *sub_10005A974(void *result, void *a2, uint64_t a3)
{
  if (!result || (result & 7) != 0 || !a2 || (a2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = *a2;
    if (!((unint64_t)(a3 + 0x1000000000000000LL) >> 61) && (unint64_t)(8 * a3) <= ~*a2)
    {
      result[1] = *a2 + 8 * a3;
      result[2] = a2;
      return result;
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_10005A9CC(void *result)
{
  if (result
    && (result & 7) == 0
    && ((BOOL v1 = (void *)result[2]) != 0LL ? (v2 = (result[2] & 7LL) == 0) : (v2 = 0), v2))
  {
    void *v1 = *result;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

_BYTE *sub_10005A9FC(_BYTE *a1, _BYTE *a2, unint64_t a3)
{
  uint64_t result = sub_10005AA5C(a1, a2, a3);
  BOOL v7 = result >= a1;
  if (result - a1 < 0) {
    BOOL v7 = result < a1;
  }
  if (!v7) {
    goto LABEL_7;
  }
  BOOL v8 = v6 >= a3;
  if (!v8) {
LABEL_7:
  }
    __break(0x5513u);
  return result;
}

_BYTE *sub_10005AA5C(_BYTE *__src, _BYTE *a2, unint64_t a3)
{
  uint64_t v4 = a2 - __src;
  else {
    BOOL v5 = a3 - (a2 - __src) > a3;
  }
  if (v5)
  {
    __break(0x5513u);
LABEL_11:
    __break(0x550Cu);
    goto LABEL_12;
  }

  unint64_t v6 = (void *)(a3 - 8 * (v4 >> 3));
  if (a2 == __src) {
    return a2;
  }
  if (v4 < 0) {
    goto LABEL_11;
  }
  unint64_t v7 = v4 - 8;
  if (v7 < 0xFFFFFFFFFFFFFFF8LL)
  {
    memmove(v6, __src, v7 + 8);
    return a2;
  }

void sub_10005AAD8(void **a1, void *a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return;
  }

  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = a1 + 1;
    if ((v4 & 7) == 0)
    {
      sub_10005AB0C(v4, v3);
      return;
    }

    goto LABEL_7;
  }

void sub_10005AB0C(void *a1, void *__p)
{
  if (a1 && (a1 & 7) == 0 && *a1)
  {
    if (!(a1[1] >> 61))
    {
      operator delete(__p);
      return;
    }
  }

  else
  {
    __break(0x5516u);
  }

  __break(0x550Cu);
}

void sub_10005AB3C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_10;
  }
  BOOL v2 = *(void **)(a1 + 384);
  if (v2) {
    operator delete[](v2);
  }
  pthread_cond_destroy((pthread_cond_t *)(a1 + 288));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 224));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 128));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 64));
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  if ((((_BYTE)a1 - 32) & 7) != 0
    || ((a1 + 336) & 7) != 0
    || (sub_10005ABE0(a1 + 336), (((_BYTE)a1 + 64) & 7) != 0)
    || ((a1 + 176) & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
  }

  else
  {
    sub_10005ABE0(a1 + 176);
  }

void sub_10005ABE0(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0)
  {
    sub_10005AC64((void *)a1);
    BOOL v2 = *(void ***)(a1 + 8);
    uint64_t v3 = *(void ***)(a1 + 16);
    if (v2 == v3)
    {
LABEL_10:
      sub_10005AE3C(a1);
      return;
    }

    if ((((_BYTE)a1 + 40) & 7) == 0)
    {
      uint64_t v4 = *(void *)(a1 + 8) & 7LL;
      while (v2 && !v4)
      {
        operator delete(*v2);
        if (++v2 == v3) {
          goto LABEL_10;
        }
      }
    }
  }

  __break(0x5516u);
LABEL_12:
  __break(0x5513u);
}

void sub_10005AC64(void *a1)
{
  if (!a1 || (a1 & 7) != 0 || (((_BYTE)a1 + 40) & 7) != 0)
  {
LABEL_20:
    __break(0x5516u);
LABEL_21:
    __break(0x5513u);
    return;
  }

  BOOL v2 = sub_10005AD64(a1);
  uint64_t v4 = v3;
  uint64_t v11 = v2;
  uint64_t v12 = v3;
  sub_100059FD0(a1);
  if (v4 != v5)
  {
    uint64_t v6 = v5;
    while (v4 && (v4 & 7) == 0)
    {
      sub_10005ADD0((unint64_t *)&v11);
      uint64_t v4 = v12;
      if (v12 == v6) {
        goto LABEL_9;
      }
    }

    goto LABEL_20;
  }

void *sub_10005AD64(void *result)
{
  if (!result) {
    goto LABEL_10;
  }
  BOOL v1 = result;
  uint64_t v2 = result[1];
  unint64_t v3 = result[4];
  uint64_t v4 = (v3 >> 6) & 0x3FFFFFFFFFFFFF8LL;
  if (__CFADD__(v2, v4)) {
    goto LABEL_11;
  }
  uint64_t result = (void *)(v2 + v4);
  if (v1[2] != v2)
  {
    if (v2 && (result & 7) == 0)
    {
      if (!__CFADD__(*result, 8 * (v3 & 0x1FF))) {
        return result;
      }
LABEL_11:
      __break(0x5513u);
      return result;
    }

unint64_t *sub_10005ADD0(unint64_t *result)
{
  unint64_t v1 = result[1];
  if (v1 >= 0xFFFFFFFFFFFFFFF8LL) {
    goto LABEL_12;
  }
  unint64_t v2 = v1 + 8;
  result[1] = v1 + 8;
  unint64_t v3 = *result;
  if (!*result || (v3 & 7) != 0) {
    goto LABEL_11;
  }
  if (v2 - *(void *)v3 != 4096) {
    return result;
  }
  if (v3 > 0xFFFFFFFFFFFFFFF7LL)
  {
LABEL_12:
    __break(0x5513u);
    return result;
  }

  uint64_t v4 = (unint64_t *)(v3 + 8);
  *uint64_t result = (unint64_t)v4;
  if ((v4 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  result[1] = *v4;
  return result;
}

uint64_t sub_10005AE3C(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  unint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_10005AE9C(result);
  uint64_t result = *v1;
  if (!*v1) {
    return (uint64_t)v1;
  }
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (v1[3] - result >= 0)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t sub_10005AE9C(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10005AEB4(result, *(void *)(result + 8));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005AEB4(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    for (unint64_t i = *(void *)(result + 16); i != a2; *(void *)(result + 16) = i)
    {
      if (i <= 7)
      {
        __break(0x5513u);
        goto LABEL_9;
      }

      i -= 8LL;
    }
  }

  return result;
}

uint64_t sub_10005AEEC(uint64_t result, int a2)
{
  if (result && (result & 7) == 0 && ((result + 64) & 7) == 0) {
    return sub_10005AF78(result, (pthread_mutex_t *)(result + 64), a2);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005AF10(uint64_t result, pthread_mutex_t *a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock(a2);
    uint64_t v6 = a3;
    sub_100059C98((unint64_t)&a2[1].__opaque[40], &v6);
    uint64_t v5 = pthread_cond_signal((pthread_cond_t *)&a2[1]);
    pthread_mutex_unlock(a2);
    return v5;
  }

  return result;
}

uint64_t sub_10005AF78(uint64_t result, pthread_mutex_t *a2, int a3)
{
  if (result && (result & 7) == 0)
  {
    pthread_mutex_lock(a2);
    if (a3)
    {
      while (!*(void *)&a2[2].__opaque[16])
      {
        if (pthread_cond_wait((pthread_cond_t *)&a2[1], a2)) {
          goto LABEL_9;
        }
      }
    }

    else if (!*(void *)&a2[2].__opaque[16])
    {
LABEL_9:
      uint64_t v5 = 0LL;
      goto LABEL_10;
    }

    uint64_t v5 = *(void *)sub_10005B010((uint64_t)&a2[1].__opaque[40]);
    sub_10005B074((uint64_t)&a2[1].__opaque[40]);
LABEL_10:
    pthread_mutex_unlock(a2);
    return v5;
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10005B010(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = (*(void *)(result + 32) >> 6) & 0x3FFFFFFFFFFFFF8LL;
  if (__CFADD__(v1, v2))
  {
LABEL_14:
    __break(0x5513u);
    return result;
  }

  if (!v1 || (unint64_t v3 = (uint64_t *)(v1 + v2), (v3 & 7) != 0))
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v4 = *v3;
  uint64_t v5 = 8 * (*(void *)(result + 32) & 0x1FFLL);
  if (__CFADD__(v4, v5)) {
    goto LABEL_14;
  }
  uint64_t result = v4 + v5;
  uint64_t v6 = (v4 + v5) & 7;
  if (v4) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    goto LABEL_13;
  }
  return result;
}

void sub_10005B074(uint64_t a1)
{
  if (!a1) {
    goto LABEL_11;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v1 = (void *)(a1 + 40);
  if (((a1 + 40) & 7) != 0) {
    goto LABEL_11;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (v3 >> 6) & 0x3FFFFFFFFFFFFF8LL;
  if (__CFADD__(v2, v4))
  {
LABEL_12:
    __break(0x5513u);
    goto LABEL_13;
  }

  if (!v2 || (uint64_t v5 = (void *)(v2 + v4), (v5 & 7) != 0))
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  if (__CFADD__(*v5, 8 * (*(void *)(a1 + 32) & 0x1FFLL))) {
    goto LABEL_12;
  }
  if (!*v1)
  {
LABEL_13:
    __break(0x5515u);
    goto LABEL_14;
  }

  --*v1;
  if (v3 != -1LL)
  {
    *(void *)(a1 + 32) = v3 + 1;
    sub_10005B0FC(a1, 1);
    return;
  }

void sub_10005B0FC(uint64_t a1, char a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_18;
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 < 0x200) {
    a2 = 1;
  }
  if (v3 < 0x400) {
    char v5 = a2;
  }
  else {
    char v5 = 0;
  }
  if ((v5 & 1) != 0) {
    return;
  }
  if ((((_BYTE)a1 + 40) & 7) != 0 || (uint64_t v6 = *(void ***)(a1 + 8)) == 0LL || (v6 & 7) != 0)
  {
LABEL_18:
    __break(0x5516u);
    goto LABEL_19;
  }

  operator delete(*v6);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7 >= 0xFFFFFFFFFFFFFFF8LL)
  {
LABEL_19:
    __break(0x5513u);
LABEL_20:
    __break(0x5515u);
    return;
  }

  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = v7 + 8;
  unint64_t v8 = *(void *)(a1 + 32);
  BOOL v9 = v8 >= 0x200;
  unint64_t v10 = v8 - 512;
  if (!v9) {
    goto LABEL_20;
  }
  *(void *)(a1 + 32) = v10;
}

uint64_t sub_10005B194(uint64_t result, int a2)
{
  if (result && (result & 7) == 0 && ((result + 224) & 7) == 0) {
    return sub_10005AF78(result, (pthread_mutex_t *)(result + 224), a2);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005B1B8(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    goto LABEL_8;
  }

  if (*(unsigned __int8 *)(result + 16) < 2u)
  {
    if (!*(_BYTE *)(result + 16))
    {
      *(_BYTE *)uint64_t result = 0;
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
      *(_BYTE *)(result + 16) = 0;
      *(void *)(result + 24) = 0LL;
      return result;
    }

    __break(0x5518u);
    goto LABEL_7;
  }

dispatch_semaphore_t sub_10005B1F4( dispatch_semaphore_t result, uint64_t a2, int a3, __int16 a4, int a5, uint64_t a6, char a7, dispatch_once_t *a8)
{
  if (result)
  {
    dispatch_semaphore_t v8 = result;
    if ((result & 7) == 0)
    {
      *(void *)uint64_t result = off_100105A88;
      *((void *)result + 1) = a2;
      if ((a3 + 32) >= 0x40
        || (*((_DWORD *)result + 4) = a3,
            *((_WORD *)result + 10) = a4,
            *((_DWORD *)result + 6) = a5,
            *((void *)result + 4) = a6,
            *((_BYTE *)result + 40) = a7,
            a8 > 3))
      {
        __break(0x550Au);
      }

      else
      {
        *((_DWORD *)result + 11) = (_DWORD)a8;
        sub_10005B2A0(a8);
        *((void *)v8 + 6) = v9;
        *((_DWORD *)v8 + 14) = 1;
        *((_BYTE *)v8 + 60) = 0;
        sub_100010C30((void *)v8 + 9);
        uint64_t result = dispatch_semaphore_create(0LL);
        *((void *)v8 + _Block_object_dispose((const void *)(v1 - 48), 8) = result;
        uint64_t v10 = *((void *)v8 + 4);
        if (!v10) {
          return v8;
        }
        if ((v10 & 7) == 0)
        {
          *(void *)(v10 + 136) = v8;
          return v8;
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10005B2A0(dispatch_once_t *a1)
{
  int v2 = (int)a1;
  if ((_DWORD)a1 == 3)
  {
    __break(0x5518u);
LABEL_8:
    dispatch_once(a1, block);
    goto LABEL_5;
  }

  unint64_t v1 = 8LL * a1;
  if (v1 > ~(unint64_t)&unk_10011BE20)
  {
LABEL_9:
    __break(0x5513u);
LABEL_10:
    __break(0x550Au);
    return;
  }

  a1 = (dispatch_once_t *)((char *)&unk_10011BE20 + 8 * a1);
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10005B78C;
  block[3] = &unk_100105AA0;
  int v4 = v2;
  if (*a1 != -1) {
    goto LABEL_8;
  }
LABEL_5:
}

uint64_t *sub_10005B360(uint64_t *result)
{
  if (!result) {
    goto LABEL_25;
  }
  unint64_t v1 = result;
  *uint64_t result = (uint64_t)off_100105A88;
  uint64_t v2 = result[6];
  if (!v2 || (result[6] & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = (uint64_t *)pthread_mutex_lock((pthread_mutex_t *)(v2 + 16));
  unint64_t i = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
  int v4 = v1 + 9;
  for (unint64_t i = (uint64_t *)v1[10]; v4 != i; unint64_t i = (uint64_t *)sub_100020944((uint64_t)(v1 + 9), i))
  {
    uint64_t result = sub_10000D014((uint64_t *)&i);
    if (!*result || (*result & 7) != 0) {
      goto LABEL_25;
    }
    *(void *)(*result + 136) = 0LL;
  }

  uint64_t result = (uint64_t *)v1[4];
  if (result)
  {
    if ((result & 7) != 0)
    {
LABEL_25:
      __break(0x5516u);
      goto LABEL_26;
    }

    result[17] = 0LL;
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    v1[4] = 0LL;
  }

  uint64_t v6 = (dispatch_semaphore_s *)v1[8];
  v1[8] = 0LL;
  uint64_t v7 = v1[6];
  if (!v7 || (v7 & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = (uint64_t *)pthread_mutex_unlock((pthread_mutex_t *)(v7 + 16));
  if (!v6)
  {
LABEL_26:
    __break(0x5510u);
    return result;
  }

  while (!dispatch_semaphore_wait(v6, 0LL))
    ;
  dispatch_release(v6);
  sub_1000180FC((uint64_t)(v1 + 9));
  return v1;
}

void sub_10005B49C(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

void sub_10005B4B0(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

uint64_t sub_10005B4C4(uint64_t result, uint64_t a2)
{
  uint64_t v4 = a2;
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  if (!a2) {
    return result;
  }
  result += 72LL;
  if (((v2 + 72) & 7) != 0 || (result = sub_100056E4C(result, &v4), (uint64_t v3 = v4) == 0) || (v4 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    return result;
  }

  *(void *)(v4 + 136) = v2;
  if (*(void *)(v2 + 32) == v3) {
    *(void *)(v2 + 32) = 0LL;
  }
  return result;
}

void sub_10005B538(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_10;
  }
  if (!a2) {
    return;
  }
  if (*(void *)(a1 + 32) == a2) {
    *(void *)(a1 + 32) = 0LL;
  }
  if ((a2 & 7) != 0 || (*(void *)(a2 + 136) = 0LL, uint64_t v2 = (void *)(a1 + 72), (v2 & 7) != 0))
  {
LABEL_10:
    __break(0x5516u);
    return;
  }

  sub_10005B598(v2, &v3);
}

void sub_10005B598(void *a1, void *a2)
{
  if (!a1
    || (a1 & 7) != 0
    || (memset(v8, 170, sizeof(v8)), (((_BYTE)a1 + 16) & 7) != 0)
    || (sub_100010C30(v8), (((_BYTE)a1 + 8) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v7 = (void *)a1[1];
    while (v7 != a1)
    {
      if (*sub_10000D014((uint64_t *)&v7) == *a2)
      {
        unint64_t i = (void *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v9 = v7;
        sub_10000D048(&v9);
        uint64_t v4 = v9;
        for (i = v9; ; uint64_t v4 = i)
        {
          if (v4 == a1)
          {
            char v5 = a1;
            goto LABEL_13;
          }

          sub_10000D048(&i);
        }

        char v5 = i;
LABEL_13:
        sub_100028AA8(v8, v8, a1, v7, v5);
        uint64_t v7 = i;
        if (i == a1) {
          continue;
        }
      }

      sub_10000D048(&v7);
    }

    sub_1000180FC((uint64_t)v8);
  }

uint64_t sub_10005B6CC(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(_BYTE *)(result + 60) = 1;
    uint64_t result = *(void *)(result + 64);
    if (result) {
      return dispatch_semaphore_signal((dispatch_semaphore_t)result);
    }
  }

  return result;
}

void sub_10005B6F4(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t v1 = *(dispatch_semaphore_s **)(a1 + 64);
    if (v1)
    {
      dispatch_time_t v2 = dispatch_time(0LL, 2000000000LL);
      if (dispatch_semaphore_wait(v1, v2)) {
        syslog( 4,  "%s:%d dispatch_semaphore_wait timedout!\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapDispatchWork.cpp",  146);
      }
    }
  }

uint64_t sub_10005B76C(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = *(void *)(result + 64);
    if (result) {
      return dispatch_semaphore_signal((dispatch_semaphore_t)result);
    }
  }

  return result;
}

dispatch_queue_global_s *sub_10005B78C(uint64_t a1)
{
  uint64_t result = (dispatch_queue_global_s *)operator new(0x60uLL);
  unsigned int v3 = *(_DWORD *)(a1 + 32);
  if (v3 >= 4)
  {
LABEL_9:
    __break(0x550Au);
    goto LABEL_10;
  }

  if ((result & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    goto LABEL_9;
  }

  uint64_t result = sub_10005B80C(result, v3);
  uint64_t v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 == 3)
  {
LABEL_10:
    __break(0x5512u);
    goto LABEL_11;
  }

  if (~(unint64_t)qword_10011BE38 >= 8 * v4)
  {
    qword_10011BE38[v4] = result;
    return result;
  }

dispatch_queue_global_t sub_10005B80C(dispatch_queue_global_t result, unsigned int a2)
{
  if (!result) {
    goto LABEL_15;
  }
  dispatch_queue_global_t v2 = result;
  *(void *)uint64_t result = off_100105AD0;
  if (a2 >= 4
    || (*((_DWORD *)result + 2) = a2,
        uint64_t result = (dispatch_queue_global_t)pthread_mutex_init((pthread_mutex_t *)((char *)result + 16), 0LL),
        unsigned int v4 = *((_DWORD *)v2 + 2),
        v4 > 3))
  {
    __break(0x550Au);
    goto LABEL_14;
  }

  if (v4 != 2)
  {
    if (a2 >= 3) {
      goto LABEL_16;
    }
    unint64_t v6 = 8LL * a2;
    if (v6 <= ~(unint64_t)off_10011B5A0)
    {
      uint64_t v5 = a2;
      uint64_t result = (dispatch_queue_global_t)dispatch_queue_create(off_10011B5A0[a2], 0LL);
      *((void *)v2 + 10) = result;
LABEL_11:
      if (v6 <= ~(unint64_t)off_10011B5B8)
      {
        *((void *)v2 + 11) = dispatch_queue_create(off_10011B5B8[v5], 0LL);
        return v2;
      }
    }

uint64_t sub_10005B908(uint64_t result)
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  *(void *)uint64_t result = off_100105AD0;
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 < 4)
  {
    if (v2 != 2)
    {
      uint64_t result = *(void *)(result + 80);
      if (!result)
      {
LABEL_9:
        __break(0x5510u);
LABEL_10:
        __break(0x5516u);
        goto LABEL_11;
      }

      dispatch_release((dispatch_object_t)result);
    }

    uint64_t result = *(void *)(v1 + 88);
    if (result)
    {
      dispatch_release((dispatch_object_t)result);
      return v1;
    }

    goto LABEL_9;
  }

uint64_t sub_10005B978(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10005B908(result);
  }
  __break(0x5516u);
  return result;
}

void sub_10005B98C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = (void *)sub_10005B908(a1);
    operator delete(v1);
  }

void sub_10005B9B0(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1) {
    goto LABEL_51;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_51;
  }
  if (!a2) {
    goto LABEL_51;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_51;
  }
  uint64_t v7 = (unsigned int *)(a2 + 56);
  if (((a2 + 56) & 7) != 0) {
    goto LABEL_51;
  }
  unsigned int v8 = *v7;
  if (*v7 <= 3)
  {
    int v9 = 0;
    unsigned int v3 = (_BYTE *)(a2 + 60);
    uint64_t v4 = (a2 + 60) & 3;
    while (1)
    {
      if (v8 != 1) {
        goto LABEL_27;
      }
      if (v4) {
        break;
      }
      unsigned int v8 = *v3;
      if (v8 > 1) {
        goto LABEL_26;
      }
      if (*v3) {
        goto LABEL_31;
      }
      unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16LL))(a2);
      *(_DWORD *)(a2 + 56) = v10;
      if (v10 > 3) {
        goto LABEL_26;
      }
      if (v10)
      {
        if (v10 == 2)
        {
          if (((a2 + 44) & 3) != 0) {
            break;
          }
          unsigned int v8 = *(_DWORD *)(a2 + 44);
          if (v8 > 3) {
            goto LABEL_26;
          }
          if (v8 == 2) {
            unsigned int *v7 = 1;
          }
        }

        unsigned int v8 = *v3;
        if (v8 > 1) {
          goto LABEL_26;
        }
        if (!*v3)
        {
          if (__OFADD__(v9++, 1)) {
            goto LABEL_52;
          }
          if (((a2 + 40) & 7) != 0) {
            break;
          }
        }
      }

      unsigned int v8 = *v7;
      if (*v7 >= 4) {
        goto LABEL_26;
      }
    }

uint64_t sub_10005BC04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if ((result & 7) != 0) {
      __break(0x5516u);
    }
    else {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
    }
  }

  return result;
}

void sub_10005BC28(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_21;
  }
  if (!a2) {
    return;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v4 = (uint64_t *)(a2 + 8);
  if (((a2 + 8) & 7) != 0) {
    goto LABEL_21;
  }
  int v5 = sub_1000774F8(*(void *)(a2 + 8));
  unint64_t v6 = (void *)(a2 + 48);
  if (((a2 + 48) & 7) != 0) {
    goto LABEL_21;
  }
  int v7 = v5;
  if (*v6 == a1)
  {
    uint64_t v9 = *v4;
    if (!*v4 || (v9 & 7) != 0) {
      goto LABEL_21;
    }
    sub_100057FC4(v9, a2);
  }

  else
  {
    *unint64_t v6 = a1;
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    if (v8 >= 4)
    {
LABEL_23:
      __break(0x550Au);
      return;
    }

    if (((a2 + 44) & 3) != 0) {
      goto LABEL_21;
    }
    *(_DWORD *)(a2 + 44) = v8;
  }

  unint64_t v10 = *(void *)&v7 & 0x80000LL;
  if (v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *v4;
  if (!*v4 || (v11 & 7) != 0)
  {
LABEL_21:
    __break(0x5516u);
    goto LABEL_22;
  }

  sub_100058458(v11, 1);
LABEL_18:
  uint64_t v12 = *(dispatch_queue_s **)(a1 + 80);
  if (!v12)
  {
LABEL_22:
    __break(0x5510u);
    goto LABEL_23;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000LL;
  block[2] = sub_10005BD50;
  block[3] = &unk_100105B00;
  void block[4] = a1;
  void block[5] = a2;
  char v14 = v10 >> 19;
  dispatch_async(v12, block);
}

void sub_10005BD50(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 48);
  if (v1 >= 2) {
    __break(0x550Au);
  }
  else {
    sub_10005B9B0(*(void *)(a1 + 32), *(void *)(a1 + 40), v1 != 0);
  }
}

uint64_t sub_10005BD74(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    return result;
  }

  if (a2)
  {
    unsigned int v3 = (pthread_mutex_t *)(result + 16);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    if ((a2 & 7) == 0)
    {
      sub_10005B6CC(a2);
      return pthread_mutex_unlock(v3);
    }

    goto LABEL_7;
  }

  return result;
}

uint64_t sub_10005BDD0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
    return result;
  }

  if (a2 && a3)
  {
    int v5 = (pthread_mutex_t *)(result + 16);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    if ((a2 & 7) == 0)
    {
      sub_10005B4C4(a2, a3);
      return pthread_mutex_unlock(v5);
    }

    goto LABEL_8;
  }

  return result;
}

uint64_t sub_10005BE44(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    return result;
  }

  if (a2)
  {
    unsigned int v3 = (pthread_mutex_t *)(result + 16);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 16));
    if ((a2 & 7) == 0)
    {
      uint64_t v4 = *(void *)(a2 + 136);
      if (!v4) {
        return pthread_mutex_unlock(v3);
      }
      if ((v4 & 7) == 0)
      {
        sub_10005B538(*(void *)(a2 + 136), a2);
        sub_10005B76C(v4);
        return pthread_mutex_unlock(v3);
      }
    }

    goto LABEL_10;
  }

  return result;
}

uint64_t sub_10005BEC8(unsigned int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v9 = a1;
  unint64_t v10 = &off_10011B000;
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_10011BE58);
  if ((v11 & 1) != 0) {
    goto LABEL_2;
  }
  uint64_t v20 = a5;
  int v19 = a4;
  uint64_t v18 = a3;
  unsigned int v16 = a1;
  unsigned int v17 = a2;
  int v15 = __cxa_guard_acquire(&qword_10011BE58);
  unint64_t v10 = &off_10011B000;
  unsigned int v9 = v16;
  a2 = v17;
  a3 = v18;
  a4 = v19;
  a5 = v20;
  if (!v15) {
    goto LABEL_2;
  }
  if (qword_10011BE68 != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    qword_10011BE50 = qword_10011BE60;
    __cxa_guard_release(&qword_10011BE58);
    unint64_t v10 = &off_10011B000;
    a5 = v20;
    a4 = v19;
    a3 = v18;
    unsigned int v9 = v16;
    a2 = v17;
LABEL_2:
    uint64_t v12 = (uint64_t)v10[458];
    __break(0x5516u);
LABEL_12:
    __break(0x550Au);
LABEL_13:
    dispatch_once(&qword_10011BE68, &stru_100105B60);
  }

  if (v9 + 32 >= 0x40) {
    goto LABEL_12;
  }
  return sub_10005C008(v12, v9, a2, a3, a4, a5);
}

uint64_t sub_10005BFC8()
{
  if (qword_10011BE68 != -1) {
    dispatch_once(&qword_10011BE68, &stru_100105B60);
  }
  return qword_10011BE60;
}

uint64_t sub_10005C008(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (!result) {
    goto LABEL_63;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_63;
  }
  if (a2 + 32 >= 0x40) {
    goto LABEL_65;
  }
  *(_DWORD *)(result + 360) = a2;
  if (a2 < 0x10)
  {
    if (__CFADD__(result, 24LL * a2))
    {
LABEL_64:
      __break(0x5513u);
      goto LABEL_65;
    }

    unsigned int v8 = (uint64_t *)(result + 24LL * a2);
    if ((v8 & 7) == 0)
    {
      uint64_t v9 = result + 24LL * a2;
      uint64_t v11 = *(void *)(v9 + 8);
      unint64_t v10 = (char **)(v9 + 8);
      uint64_t v12 = (unint64_t *)*v8;
      if (*v8 != v11)
      {
        uint64_t v14 = *v8 & 7;
        do
        {
          unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
          if (!v12 || v14) {
            goto LABEL_63;
          }
          unint64_t v39 = *v12;
          unsigned int v16 = *(void **)(v6 + 392);
          uint64_t v15 = *(void *)(v6 + 400);
          char v40 = -86;
          unint64_t v17 = sub_10005C870((unint64_t)v16, v15, &v39);
          __int128 __dst = v16;
          uint64_t result = (uint64_t)sub_10005C8B8((unint64_t *)&__dst, (uint64_t)(v17 - (void)v16) >> 3);
          if (__dst == *(void **)(v6 + 400))
          {
            uint64_t result = v39;
            if (!v39 || (v39 & 7) != 0 || ((v39 + 8) & 7) != 0) {
              goto LABEL_63;
            }
            uint64_t v18 = *(void *)(v39 + 8);
            if (v18) {
              BOOL v19 = a6 == 0;
            }
            else {
              BOOL v19 = 1;
            }
            if (v19 || v18 == a6) {
              uint64_t result = (*(uint64_t (**)(void))(*(void *)v39 + 24LL))();
            }
          }

          ++v12;
        }

        while (v12 != (unint64_t *)*v10);
      }

      *(_DWORD *)(v6 + 360) = -1;
      if (((v6 + 392) & 7) == 0)
      {
        BOOL v21 = *(void **)(v6 + 392);
        if (v21 != *(void **)(v6 + 400))
        {
          uint64_t v22 = *(void *)(v6 + 392) & 7LL;
          while (v21 && !v22)
          {
            uint64_t v23 = (uint64_t)*v10;
            unint64_t v24 = (unint64_t *)*v8;
            LOBYTE(v39) = -86;
            unint64_t v25 = sub_10005C870((unint64_t)v24, v23, v21);
            __int128 __dst = v24;
            uint64_t result = (uint64_t)sub_10005C8B8((unint64_t *)&__dst, (uint64_t)(v25 - (void)v24) >> 3);
            if (__dst != *v10)
            {
              else {
                BOOL v26 = (unint64_t)__dst >= *v8;
              }
              sub_10005A828((char *)__dst + 8, *v10, __dst);
              uint64_t result = sub_100008E0C((uint64_t)v8, v27);
            }

            if (++v21 == *(void **)(v6 + 400)) {
              goto LABEL_40;
            }
          }

          goto LABEL_63;
        }

LABEL_40:
        uint64_t result = sub_10005C778(v6 + 392);
        if (((v6 + 368) & 7) == 0)
        {
          unint64_t v28 = *(void **)(v6 + 368);
          if (v28 != *(void **)(v6 + 376))
          {
            uint64_t v29 = v6 + 24LL * a2 + 16;
            uint64_t v30 = *(void *)(v6 + 368) & 7LL;
            while (v28 && !v30)
            {
              __int128 v31 = *v10;
              unint64_t v32 = (unint64_t *)*v8;
              LOBYTE(v39) = -86;
              unint64_t v33 = sub_10005C870((unint64_t)v32, (uint64_t)v31, v28);
              __int128 __dst = v32;
              uint64_t result = (uint64_t)sub_10005C8B8((unint64_t *)&__dst, (uint64_t)(v33 - (void)v32) >> 3);
              uint64_t v34 = __dst;
              if (__dst == *v10)
              {
                if ((v29 & 7) != 0) {
                  goto LABEL_63;
                }
                if ((unint64_t)__dst >= *(void *)v29)
                {
                  uint64_t result = sub_10005C90C(v8, v28);
                }

                else
                {
                  uint64_t result = (uint64_t)sub_100024F94(v8, v28);
                  uint64_t result = (uint64_t)v34 + 8;
                }

                *unint64_t v10 = (char *)result;
              }

              if (++v28 == *(void **)(v6 + 376)) {
                goto LABEL_54;
              }
            }

            goto LABEL_63;
          }

  __break(0x5500u);
  return result;
}

  __break(0x5500u);
  return result;
}

  __break(0x550Au);
  return result;
}

  __break(0x5513u);
  return result;
}

  __break(0x5513u);
  return result;
}

      __break(0x5516u);
      goto LABEL_41;
    }
  }

LABEL_63:
    __break(0x5516u);
    goto LABEL_64;
  }

          unsigned int v8 = 0LL;
          goto LABEL_22;
        }

void sub_10005C388(id a1)
{
  uint64_t v1 = (uint64_t)operator new(0x1A0uLL);
  if ((v1 & 0xF) != 0 || (v1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    qword_10011BE60 = sub_10005C3C0(v1);
  }
}

uint64_t sub_10005C3C0(uint64_t result)
{
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v1 = result & 7;
  if ((result & 7) != 0) {
    goto LABEL_9;
  }
  do
  {
    unsigned int v2 = (void *)(result + v1);
    void *v2 = 0LL;
    v2[1] = 0LL;
    v2[2] = 0LL;
    v1 += 24LL;
  }

  while (v1 != 360);
  *(_DWORD *)(result + 360) = -1;
  if (((result + 368) & 7) != 0 {
    || (*(void *)(result + 36_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL, *(void *)(result + 376) = 0LL, (((_BYTE)result + 0x80) & 7) != 0)
  }
    || (*(void *)(result + 384) = 0LL, ((result + 392) & 7) != 0)
    || (*(void *)(result + 392) = 0LL, *(void *)(result + 400) = 0LL, (((_BYTE)result - 104) & 7) != 0))
  {
LABEL_9:
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 40_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  }

  return result;
}

uint64_t *sub_10005C434(uint64_t *result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v22 = a2;
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v4 = result;
  unsigned int v6 = a3 + 32;
  if (a3 + 32 >= 0x40) {
    goto LABEL_28;
  }
  if (a3 < 0x10)
  {
    if (__CFADD__(result, 24LL * a3)) {
      goto LABEL_29;
    }
    int v7 = (unint64_t *)&result[3 * a3];
    unint64_t v10 = &result[3 * a3];
    uint64_t v12 = v10[1];
    uint64_t v11 = v10 + 1;
    unint64_t v13 = *v7;
    char v23 = -86;
    unint64_t v14 = sub_10005C870(v13, v12, &v22);
    unint64_t v24 = v13;
    uint64_t result = (uint64_t *)sub_10005C8B8(&v24, (uint64_t)(v14 - v13) >> 3);
    unint64_t v15 = v24;
    uint64_t v16 = *v11;
    if (v24 != *v11) {
      return (uint64_t *)(v15 == v16);
    }
    if (!v22 || (v22 & 7) != 0 || ((v22 + 8) & 7) != 0)
    {
LABEL_27:
      __break(0x5516u);
      goto LABEL_28;
    }

    *(void *)(v22 + _Block_object_dispose((const void *)(v1 - 48), 8) = a4;
    int v17 = *((_DWORD *)v4 + 90);
    if (((v17 + 32) | v6) < 0x40)
    {
      if (v17 == a3)
      {
        uint64_t result = v4 + 46;
        if (((unint64_t)(v4 + 46) & 7) == 0 && ((unint64_t)(v4 + 48) & 7) == 0)
        {
          unint64_t v18 = v4[47];
          if (v18 >= v4[48])
          {
            uint64_t v19 = sub_10005C90C(result, &v22);
            goto LABEL_23;
          }

          uint64_t result = sub_100024F94(result, &v22);
          if (v18 < 0xFFFFFFFFFFFFFFF8LL)
          {
            uint64_t v19 = v18 + 8;
LABEL_23:
            v4[47] = v19;
            return (uint64_t *)(v15 == v16);
          }

          goto LABEL_29;
        }

        goto LABEL_27;
      }

      uint64_t v20 = (uint64_t)&v4[3 * a3 + 2];
      if ((v20 & 7) == 0)
      {
        if (v15 >= *(void *)v20)
        {
          uint64_t v21 = sub_10005C90C((uint64_t *)v7, &v22);
          goto LABEL_25;
        }

        uint64_t result = sub_100024F94(v7, &v22);
        if (v15 < 0xFFFFFFFFFFFFFFF8LL)
        {
          uint64_t v21 = v15 + 8;
LABEL_25:
          uint64_t *v11 = v21;
          return (uint64_t *)(v15 == v16);
        }

uint64_t *sub_10005C5F4(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v18 = a2;
  if (!result || (unsigned int v3 = result, (result & 7) != 0))
  {
LABEL_24:
    __break(0x5516u);
    goto LABEL_25;
  }

  unsigned int v5 = a3 + 32;
  if (a3 + 32 >= 0x40) {
    goto LABEL_25;
  }
  if (a3 < 0x10)
  {
    if (__CFADD__(result, 24LL * a3))
    {
LABEL_26:
      __break(0x5513u);
      goto LABEL_27;
    }

    uint64_t v6 = (uint64_t)&result[3 * a3];
    if ((v6 & 7) != 0) {
      goto LABEL_24;
    }
    int v7 = &result[3 * a3];
    unsigned int v8 = *(void **)v6;
    uint64_t v9 = v7[1];
    char v19 = -86;
    unint64_t v10 = sub_10005C870((unint64_t)v8, v9, &v18);
    __int128 __dst = v8;
    uint64_t result = (uint64_t *)sub_10005C8B8((unint64_t *)&__dst, (uint64_t)(v10 - (void)v8) >> 3);
    uint64_t v11 = (char *)__dst;
    uint64_t v12 = (char *)v7[1];
    if (__dst == v12) {
      return (uint64_t *)(v11 != v12);
    }
    int v13 = *((_DWORD *)v3 + 90);
    if (((v13 + 32) | v5) < 0x40)
    {
      if (v13 == a3)
      {
        uint64_t result = v3 + 49;
        if (((unint64_t)(v3 + 49) & 7) == 0 && ((unint64_t)(v3 + 51) & 7) == 0)
        {
          unint64_t v14 = v3[50];
          if (v14 >= v3[51])
          {
            uint64_t v15 = sub_10005C90C(result, &v18);
            goto LABEL_22;
          }

          uint64_t result = sub_100024F94(result, &v18);
          if (v14 < 0xFFFFFFFFFFFFFFF8LL)
          {
            uint64_t v15 = v14 + 8;
LABEL_22:
            v3[50] = v15;
            return (uint64_t *)(v11 != v12);
          }

          goto LABEL_26;
        }

        goto LABEL_24;
      }

      else {
        BOOL v16 = (unint64_t)__dst >= *(void *)v6;
      }
      sub_10005A828((char *)__dst + 8, v12, __dst);
      sub_100008E0C(v6, v17);
      return (uint64_t *)(v11 != v12);
    }

uint64_t sub_10005C778(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_100008E0C(result, *(void *)result);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005C790(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t v4 = 0LL;
      unint64_t v5 = ~result;
      while (1)
      {
        if (((*(_DWORD *)(a2 + 20) >> v4) & 1) != 0)
        {
          if (24 * v4 > v5) {
            goto LABEL_20;
          }
          uint64_t v6 = v2 + 24 * v4;
          unsigned int v8 = *(uint64_t **)(v6 + 8);
          int v7 = (uint64_t **)(v6 + 8);
          uint64_t v9 = *(uint64_t **)(v2 + 24 * v4);
          if (v9 != v8) {
            break;
          }
        }

unint64_t sub_10005C870(unint64_t result, uint64_t a2, void *a3)
{
  if (result != a2)
  {
    unint64_t v3 = result & 7;
    while (result && !v3)
    {
      if (*(void *)result == *a3) {
        return result;
      }
      if (result >= 0xFFFFFFFFFFFFFFF8LL) {
        goto LABEL_11;
      }
      result += 8LL;
      if (result == a2) {
        return a2;
      }
    }

    __break(0x5516u);
LABEL_11:
    __break(0x5513u);
  }

  return result;
}

unint64_t *sub_10005C8B8(unint64_t *result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t v2 = *result;
    BOOL v3 = __CFADD__(*result, 8 * a2);
    if ((a2 & 0x1000000000000000LL) != 0) {
      BOOL v4 = v3;
    }
    else {
      BOOL v4 = *result + 8 * a2 >= v2;
    }
    if (!((unint64_t)(a2 + 0x1000000000000000LL) >> 61) && v4)
    {
      *uint64_t result = v2 + 8 * a2;
      return result;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_10005C90C(uint64_t *a1, void *a2)
{
  if (!a1) {
    goto LABEL_15;
  }
  unint64_t v2 = a1;
  BOOL v3 = a1 + 2;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __int128 v12 = v4;
  __int128 v13 = v4;
  uint64_t v5 = (a1[1] - *a1) >> 3;
  unint64_t v6 = v5 + 1;
  if (v5 == -1)
  {
LABEL_16:
    __break(0x5500u);
LABEL_17:
    sub_10002A484((uint64_t)v2);
  }

  if (v6 >> 61) {
    goto LABEL_17;
  }
  unint64_t v8 = *v3 - *a1;
  if (v8 >> 2 > v6) {
    unint64_t v6 = v8 >> 2;
  }
  unint64_t v9 = v8 >= 0x7FFFFFFFFFFFFFF8LL ? 0x1FFFFFFFFFFFFFFFLL : v6;
  uint64_t result = sub_10005CA04((uint64_t)&v12, v9, v5, (uint64_t)v3);
  if (!(void)v13 || (v13 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *(void *)__int128 v13 = *a2;
  if ((unint64_t)v13 >= 0xFFFFFFFFFFFFFFF8LL)
  {
    __break(0x5513u);
  }

  else
  {
    *(void *)&__int128 v13 = v13 + 8;
    sub_10002511C(v2, &v12);
    uint64_t v11 = v2[1];
    sub_1000253A0((uint64_t)&v12);
    return v11;
  }

  return result;
}

uint64_t sub_10005CA04(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result
    || (__int128 v4 = (void *)result, (result & 7) != 0)
    || (((_BYTE)result + 24) & 7) != 0
    || (*(void *)(result + 24) = 0LL, ((result + 32) & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)(result + 32) = a4;
    if (a2)
    {
      uint64_t v7 = sub_100024960(result);
      uint64_t result = (uint64_t)sub_10005CAD4(v7, a2);
    }

    else
    {
      uint64_t result = 0LL;
    }

    void *v4 = result;
    if (!((unint64_t)(a3 + 0x1000000000000000LL) >> 61) && 8 * a3 <= (unint64_t)~result)
    {
      uint64_t v8 = result + 8 * a3;
      v4[1] = v8;
      _BYTE v4[2] = v8;
      if (!((a2 + 0x1000000000000000LL) >> 61) && 8 * a2 <= ~result)
      {
        void v4[3] = result + 8 * a2;
        return (uint64_t)v4;
      }
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_10005CAD4(uint64_t a1, unint64_t a2)
{
  if (!a1)
  {
    __break(0x5516u);
LABEL_5:
    sub_1000D251C();
  }

  if (a2 >> 61) {
    goto LABEL_5;
  }
  return operator new(8 * a2);
}

uint64_t sub_10005CAFC(uint64_t a1, dispatch_semaphore_s *a2)
{
  uint64_t result = (uint64_t)operator new(0x170uLL);
  if ((result & 0xF) != 0 || (uint64_t v5 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = sub_10005CD80(result, a1);
    if (a2)
    {
      dispatch_semaphore_signal(a2);
      return v5;
    }
  }

  __break(0x5510u);
  return result;
}

uint64_t sub_10005CB64(uint64_t a1, uint64_t a2)
{
  __int128 v4 = dispatch_semaphore_create(0LL);
  memset(__p, 170, sizeof(__p));
  sub_1000255A4((uint64_t)__p, "CIapIncomingProcessThread");
  uint64_t result = sub_10005CC44(0LL, (uint64_t)__p, (uint64_t)v4, 24576LL, 52);
  if (!result) {
    sub_1000D276C();
  }
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v6 = result;
  uint64_t result = dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  if ((v6 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
LABEL_12:
    __break(0x5510u);
    return result;
  }

  uint64_t result = sub_10005CCDC(v6);
  uint64_t v7 = result;
  if (result)
  {
    if ((result & 7) == 0)
    {
      sub_10005CD24(result, a1, a2);
      goto LABEL_7;
    }

    goto LABEL_11;
  }

uint64_t sub_10005CC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result = (uint64_t)operator new(0x88uLL);
  if ((result & 0xF) != 0 || (uint64_t v11 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v12 = sub_10005F328(result);
    if (!sub_10005F170(v12, a1, a2, a3, a4, a5))
    {
      pthread_mutex_destroy((pthread_mutex_t *)(v11 + 24));
      operator delete((void *)v11);
      return 0LL;
    }

    return v11;
  }

  return result;
}

uint64_t sub_10005CCDC(uint64_t result)
{
  if (!result || (uint64_t v1 = (uint64_t *)result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t v2 = (pthread_mutex_t *)(result + 24);
    pthread_mutex_lock((pthread_mutex_t *)(result + 24));
    uint64_t v3 = *v1;
    pthread_mutex_unlock(v2);
    return v3;
  }

  return result;
}

uint64_t sub_10005CD24(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(result + 56));
    *(void *)(v3 + 3memset(md, 170, 20) = a3;
    *(void *)(v3 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 56));
    return 1LL;
  }

  return result;
}

uint64_t sub_10005CD80(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = sub_100059478(result);
      *(void *)unint64_t v2 = off_100105B90;
      *(_DWORD *)(v2 + 36) = 0;
      *(void *)(v2 + 40) = a2;
      *(void *)(v2 + 4_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
      *(_BYTE *)(v2 + 312) = 0;
      *(void *)(v2 + 3memset(md, 170, 20) = 0LL;
      if (((v2 + 328) & 7) == 0)
      {
        *(void *)(v2 + 32_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
        *(void *)(v2 + 336) = 0LL;
        if ((((_BYTE)v2 + 88) & 7) == 0)
        {
          *(void *)(v2 + 344) = 0LL;
          *(_WORD *)(v2 + 364) = 0;
          if (qword_10011B5D0 == -1)
          {
            Boolean keyExistsAndHasValidFormat = 0;
            CFPreferencesAppSynchronize(@"com.apple.iapd");
            AppIntegerint Value = CFPreferencesGetAppIntegerValue( @"StackShotsDelayMs",  @"com.apple.iapd",  &keyExistsAndHasValidFormat);
            if (keyExistsAndHasValidFormat) {
              uint64_t v5 = AppIntegerValue;
            }
            else {
              uint64_t v5 = 0LL;
            }
            qword_10011B5D0 = v5;
          }

          uint64_t result = pthread_mutex_init((pthread_mutex_t *)(v2 + 56), 0LL);
          unint64_t v6 = 0LL;
          unint64_t v7 = 0LL;
          while (v6 <= ~(v2 + 120))
          {
            uint64_t result = pthread_mutex_init((pthread_mutex_t *)(v2 + v6 + 120), 0LL);
            if (v7 > ~(v2 + 352)) {
              break;
            }
            if ((v2 & 3) != 0) {
              goto LABEL_17;
            }
            *(_DWORD *)(v2 + v7 + 352) = *(_DWORD *)"#";
            v7 += 4LL;
            v6 += 64LL;
            if (v7 == 12)
            {
              sub_1000594C4(v2, 3u, v2 + 352);
              return v2;
            }
          }

          __break(0x5513u);
        }
      }
    }
  }

void sub_10005CEE8(uint64_t a1)
{
  if (a1)
  {
    if ((a1 & 7) == 0)
    {
      *(void *)a1 = off_100105B90;
      *(_BYTE *)(a1 + 312) = 1;
      *(_BYTE *)(a1 + 365) = 1;
      if (((a1 + 328) & 7) == 0)
      {
        uint64_t v2 = *(void *)(a1 + 328);
        if (*(void *)(a1 + 336) == v2)
        {
LABEL_13:
          unint64_t v6 = 0LL;
          *(_DWORD *)(a1 + 36) = 0;
          while (v6 <= ~(a1 + 120))
          {
            pthread_mutex_destroy((pthread_mutex_t *)(a1 + v6 + 120));
            v6 += 64LL;
            if (v6 == 192)
            {
              pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
              unint64_t v7 = (uint64_t *)(a1 + 328);
              sub_10005F454(&v7);
              sub_1000595BC(a1);
              return;
            }
          }
        }

        else
        {
          uint64_t v3 = 0LL;
          unsigned int v4 = 0;
          while (!__CFADD__(v2, v3))
          {
            if (!v2 || (((_BYTE)v3 + (_BYTE)v2) & 7) != 0) {
              goto LABEL_18;
            }
            if (*(void *)(v2 + v3)) {
              sub_10005D014(a1, v4);
            }
            unsigned int v5 = v4 + 1;
            if (v4 == -1) {
              goto LABEL_19;
            }
            uint64_t v2 = *(void *)(a1 + 328);
            ++v4;
            v3 += 24LL;
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 336) - v2) >> 3) <= v5) {
              goto LABEL_13;
            }
          }
        }

        __break(0x5513u);
      }
    }
  }

void sub_10005D014(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    goto LABEL_22;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_22;
  }
  unsigned int v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  unsigned int v5 = (uint64_t *)(a1 + 328);
  if (((a1 + 328) & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)(a1 + 328);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 336) - v6) >> 3) <= a2) {
    sub_1000D276C();
  }
  if (__CFADD__(v6, 24LL * a2)) {
    goto LABEL_23;
  }
  if (!v6) {
    goto LABEL_22;
  }
  unint64_t v7 = (uint64_t *)(v6 + 24LL * a2);
  uint64_t v8 = *v7;
  if (!*v7) {
    sub_1000D276C();
  }
  if ((v8 & 7) != 0) {
    goto LABEL_22;
  }
  sub_1000BD5C8(v8);
  uint64_t v9 = *v5;
  unint64_t v10 = ~*v5;
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v11 = (dispatch_object_s **)(v9 + 24LL * a2);
  uint64_t v12 = *v11;
  if (!*v11) {
    goto LABEL_16;
  }
  if ((v12 & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    goto LABEL_23;
  }

  __int128 v13 = sub_1000BD504(v12);
  operator delete(v13);
  uint64_t v9 = *v5;
  unint64_t v10 = ~*v5;
LABEL_16:
  if (24 * (unint64_t)a2 <= v10)
  {
    if (v9)
    {
      unint64_t v14 = (void *)(v9 + 24LL * a2);
      if ((v14 & 7) == 0)
      {
        *unint64_t v14 = 0LL;
        v14[1] = 0LL;
        *(_DWORD *)(v9 + 24LL * a2 + 16) = -1;
        pthread_mutex_unlock(v4);
        return;
      }
    }

    goto LABEL_22;
  }

void sub_10005D140(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_10005CEE8(a1);
  }
}

void sub_10005D154(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10005CEE8(a1);
    operator delete(v1);
  }

uint64_t sub_10005D178(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result || (uint64_t v3 = result, (result & 7) != 0))
  {
LABEL_55:
    __break(0x5516u);
LABEL_56:
    __break(0x5507u);
LABEL_57:
    __break(0x5513u);
LABEL_58:
    __break(0x5500u);
LABEL_59:
    __break(0x5512u);
    return result;
  }

  uint64_t result = sub_1000AA14C(a2);
  if (result >= 8)
  {
LABEL_54:
    __break(0x550Au);
    goto LABEL_55;
  }

  switch((int)result)
  {
    case 0:
      unsigned int v6 = *(unsigned __int8 *)(v3 + 312);
      if (v6 > 1) {
        goto LABEL_54;
      }
      uint64_t result = sub_100056FF0(a2);
      uint64_t v7 = result;
      if (v6)
      {
        if (result && (result & 7) == 0)
        {
          int v8 = sub_1000AA2B4(result);
          if (v8 == 1281)
          {
            uint64_t result = sub_100056FF0(v7);
            if (result && (result & 7) == 0)
            {
              uint64_t result = *(void *)result;
              if (!result) {
                goto LABEL_20;
              }
              if ((result & 7) == 0)
              {
                (*(void (**)(uint64_t))(*(void *)result + 8LL))(result);
                goto LABEL_20;
              }
            }
          }

          else
          {
            if (v8 != 1280) {
              goto LABEL_20;
            }
            uint64_t result = sub_100056FF0(v7);
            if (result && (result & 7) == 0)
            {
              sub_1000AD43C(*(void *)result);
              goto LABEL_20;
            }
          }
        }

        goto LABEL_55;
      }

      uint64_t result = sub_10005D484(v3, result);
      if (a3 > 3) {
        goto LABEL_54;
      }
      uint64_t v15 = (pthread_mutex_t *)(v3 + 120 + ((unint64_t)a3 << 6));
      uint64_t result = pthread_mutex_lock(v15);
      if (__CFADD__(v3 + 352, 4LL * a3)) {
        goto LABEL_57;
      }
      uint64_t v16 = v3 + 352 + 4LL * a3;
      int v17 = *(_DWORD *)v16 + 1;
      if (*(_DWORD *)v16 == -1) {
        goto LABEL_58;
      }
      *(_DWORD *)uint64_t v16 = v17;
      if (a3 <= 2)
      {
        if ((v16 & 3) != 0) {
          goto LABEL_55;
        }
        if ((v17 - 1) < *(_DWORD *)"#")
        {
          pthread_mutex_unlock(v15);
          sub_10005D504(v3);
          goto LABEL_46;
        }

        __break(0x5518u);
        goto LABEL_54;
      }

      goto LABEL_59;
    case 1:
      if (*(_BYTE *)(v3 + 312)) {
        goto LABEL_20;
      }
      sub_10005D590(v3, a2);
      goto LABEL_46;
    case 2:
      uint64_t v9 = *(void *)(v3 + 320);
      if (!v9 || (v9 & 7) != 0) {
        goto LABEL_55;
      }
      uint64_t v10 = sub_100056FF0(a2);
      sub_10008E3D4(v9, v10);
      goto LABEL_46;
    case 4:
      int v12 = *(_DWORD *)(a2 + 24);
      if ((v12 & 0x34CC) == 0x400)
      {
        if (*(void *)(a2 + 40)) {
          goto LABEL_23;
        }
      }

      else if ((v12 & 0x30CC) != 0)
      {
LABEL_23:
        uint64_t result = *(void *)(v3 + 320);
        if (!result || (result & 7) != 0) {
          goto LABEL_55;
        }
        (*(void (**)(uint64_t))(*(void *)result + 184LL))(result);
        goto LABEL_46;
      }

      uint64_t result = *(void *)(v3 + 320);
      if (!result || (result & 7) != 0) {
        goto LABEL_55;
      }
      (*(void (**)(uint64_t))(*(void *)result + 200LL))(result);
LABEL_46:
      BOOL v11 = 1LL;
LABEL_47:
      uint64_t result = v11;
      break;
    case 5:
      if (*(_DWORD *)(a2 + 28) >= 0x10000u) {
        goto LABEL_56;
      }
      unsigned int v13 = *(unsigned __int8 *)(v3 + 312);
      if (v13 > 1) {
        goto LABEL_54;
      }
      unint64_t v14 = *(void **)(a2 + 32);
      BOOL v11 = v13 == 0;
      if (v13) {
        goto LABEL_31;
      }
      uint64_t result = *(unsigned int *)(a2 + 24);
      sub_10005BEC8( result,  (unsigned __int16)*(_DWORD *)(a2 + 28),  *(void *)(a2 + 32),  *(_DWORD *)(a2 + 40),  *(void *)(a2 + 48));
LABEL_31:
      if (v14) {
        operator delete[](v14);
      }
      goto LABEL_47;
    default:
      sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::HandleMessage: unknown type 0x%08x\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  484,  result);
LABEL_20:
      BOOL v11 = 0LL;
      goto LABEL_47;
  }

  return result;
}

uint64_t sub_10005D484(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v2 = a1;
  if ((a1 & 7) != 0) {
    goto LABEL_12;
  }
  if (!a2)
  {
    __break(0x5518u);
    goto LABEL_12;
  }

  if ((a2 & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
LABEL_13:
    sub_1000D27CC(a1);
  }

  LODWORD(a1) = sub_1000AA2B4(a2);
  if ((_DWORD)a1 != 1281)
  {
    if ((_DWORD)a1 != 1280) {
      goto LABEL_13;
    }
    a1 = sub_100056FF0(a2);
    if (a1 && (a1 & 7) == 0)
    {
      sub_10005D7F4(v2, *(void *)a1);
      return 1LL;
    }

    goto LABEL_12;
  }

  return 1LL;
}

uint64_t sub_10005D504(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || ((result = *(void *)(result + 320)) != 0 ? (BOOL v2 = (result & 7) == 0) : (BOOL v2 = 0), !v2))
  {
LABEL_14:
    __break(0x5516u);
    return result;
  }

  uint64_t result = (uint64_t)sub_10008CF04((uint64_t *)result);
  if (result)
  {
    uint64_t v3 = result;
    uint64_t result = *(void *)(v1 + 320);
    if (result)
    {
      if ((result & 7) == 0)
      {
        uint64_t result = sub_10008CDC4(result, v3, 0);
        if ((v3 & 7) == 0) {
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 48LL))(v3, 1LL);
        }
      }
    }

    goto LABEL_14;
  }

  return result;
}

uint64_t sub_10005D590(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v3 = sub_1000AA460(a2);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 56));
  uint64_t result = sub_10005D758(v2, v3);
  unsigned int v4 = result;
  if ((_DWORD)result == -1)
  {
    uint64_t v7 = 0LL;
    unsigned int v6 = -1;
    goto LABEL_11;
  }

  if (((v2 + 328) & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v5 = *(void *)(v2 + 328);
  if (!__CFADD__(v5, 24LL * result))
  {
    if (!v5 || (v5 & 7) != 0) {
      goto LABEL_29;
    }
    unsigned int v6 = *(_DWORD *)(v5 + 24LL * result + 16);
    if (v6 + 32 >= 0x40) {
      goto LABEL_30;
    }
    uint64_t v7 = *(void *)(v5 + 24LL * result + 8);
LABEL_11:
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 56));
    if (*(unsigned __int8 *)(v2 + 312) < 2u)
    {
      if (v4 == -1 || *(_BYTE *)(v2 + 312)) {
        return 1LL;
      }
      if (!v7) {
        goto LABEL_22;
      }
      if ((v7 & 7) == 0)
      {
        sub_10005789C(v7, v6);
        uint64_t result = *(void *)(v2 + 320);
        if (result)
        {
          if ((result & 7) == 0)
          {
            uint64_t result = sub_10008C2EC(result, v7, v6);
            if (result)
            {
              if ((result & 7) == 0)
              {
                (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)result + 80LL))( result,  32LL,  v4,  0LL);
                sub_1000578E8(v7, v6);
                return 1LL;
              }

              goto LABEL_29;
            }

            sub_1000578E8(v7, v6);
LABEL_22:
            if (v6 != -1 || (uint64_t result = *(void *)(v2 + 320)) == 0 || v7)
            {
              sub_1000CEAEC(0, 4, "Lingo Object does not exist for handle=%hhx lingo=%xh\n", v7, v6);
              return 1LL;
            }

            if ((result & 7) == 0)
            {
              (*(void (**)(uint64_t, uint64_t, void, void, void))(*(void *)result + 48LL))( result,  32LL,  v4,  0LL,  0LL);
              return 1LL;
            }
          }
        }
      }

uint64_t sub_10005D758(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0 && (((_BYTE)result + 72) & 7) == 0)
  {
    uint64_t v2 = *(void *)(result + 328);
    uint64_t v3 = *(void *)(result + 336);
    uint64_t v4 = v3 - v2;
    if (v3 == v2) {
      return 0xFFFFFFFFLL;
    }
    unint64_t v5 = 0LL;
    unsigned int v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v2) {
      BOOL v8 = (*(void *)(result + 328) & 7LL) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    int v9 = v8;
    uint64_t result = 0xFFFFFFFFLL;
    while (v5 <= ~v2)
    {
      if (!v9) {
        goto LABEL_22;
      }
      unsigned int v10 = v6 + 1;
      if (v6 == -1) {
        goto LABEL_23;
      }
      if (*(void *)(v2 + v5) == a2) {
        uint64_t result = v6;
      }
      else {
        uint64_t result = result;
      }
      ++v6;
      v5 += 24LL;
      if (v7 <= v10) {
        return result;
      }
    }

    __break(0x5513u);
  }

void sub_10005D7F4(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_211;
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(a1 + 320);
  if (!v5 || (v5 & 7) != 0) {
    goto LABEL_211;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (!v6 || (v6 & 7) != 0) {
    goto LABEL_211;
  }
  if ((sub_1000569F0(v6) & 1) != 0)
  {
LABEL_10:
    if (!a2) {
      return;
    }
    goto LABEL_11;
  }

  if (!a2 || (a2 & 7) != 0) {
    goto LABEL_211;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 8);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 126);
  uint64_t v85 = 0LL;
  __int128 v86 = &v85;
  uint64_t v87 = 0x2000000000LL;
  char v88 = 1;
  if (qword_10011B5D0 >= 1)
  {
    if (!is_mul_ok(qword_10011B5D0, 0xF4240uLL))
    {
LABEL_216:
      __break(0x550Cu);
      goto LABEL_217;
    }

    dispatch_time_t v10 = dispatch_time(0LL, 1000000 * qword_10011B5D0);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    if (!global_queue)
    {
LABEL_217:
      __break(0x5510u);
      return;
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000LL;
    block[2] = sub_10005E354;
    block[3] = &unk_100105BB0;
    void block[4] = &v85;
    int v83 = v7;
    __int16 v84 = v9;
    dispatch_after(v10, global_queue, block);
  }

  unsigned int v80 = v9;
  pthread_once(&stru_10011B908, sub_1000BC260);
  if (!dword_10011B8F8[0]) {
    goto LABEL_67;
  }
  if (!v8 || (v8 & 7) != 0) {
    goto LABEL_211;
  }
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
  if (v12 >= 5) {
    goto LABEL_212;
  }
  if (!qword_10011BE70[v12])
  {
    pthread_mutex_lock(&stru_10011B5D8);
    unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
    if (v13 > 4) {
      goto LABEL_212;
    }
    if (!qword_10011BE70[v13])
    {
      uint64_t v14 = sub_1000BC2D4(v8, 0, 0, "incoming.InQUs");
      unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
      if (v15 > 4) {
        goto LABEL_212;
      }
      qword_10011BE70[v15] = v14;
    }

    pthread_mutex_unlock(&stru_10011B5D8);
  }

  unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
  if (v16 > 4) {
    goto LABEL_212;
  }
  if (!qword_10011BE98[v16])
  {
    pthread_mutex_lock(&stru_10011B618);
    unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
    if (v17 > 4) {
      goto LABEL_212;
    }
    if (!qword_10011BE98[v17])
    {
      uint64_t v18 = sub_1000BC2D4(v8, 0, 0, "incoming.OutOfQSinceInitUs");
      unsigned int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
      if (v19 > 4) {
        goto LABEL_212;
      }
      qword_10011BE98[v19] = v18;
    }

    pthread_mutex_unlock(&stru_10011B618);
  }

  unsigned int v20 = sub_1000BC5A4();
  uint64_t v21 = (unsigned int *)(a2 + 148);
  if (((a2 + 148) & 3) != 0) {
    goto LABEL_211;
  }
  unsigned int v22 = v20;
  if (*v21)
  {
    unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
    if (v23 >= 5) {
      goto LABEL_212;
    }
    unint64_t v24 = (unsigned int *)qword_10011BE70[v23];
    if (v22 < *v21) {
      goto LABEL_215;
    }
    uint64_t v25 = v24[19];
    if (dword_10011B8F8[v25]) {
      (*(void (**)(unsigned int *, void, void, void))(*(void *)v24 + 104LL))( v24,  v22 - *v21,  0LL,  0LL);
    }
  }

  BOOL v26 = (_DWORD *)(a2 + 144);
  if (((a2 + 144) & 7) != 0) {
    goto LABEL_211;
  }
  if (*v26)
  {
    unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216LL))(v8);
    if (v27 > 4) {
      goto LABEL_212;
    }
    unint64_t v28 = (unsigned int *)qword_10011BE98[v27];
    if (v22 >= *v26)
    {
      uint64_t v29 = v28[19];
      if (v29 < 4)
      {
        if (~(unint64_t)dword_10011B8F8 >= 4 * v29)
        {
          if (dword_10011B8F8[v29]) {
            (*(void (**)(unsigned int *, void, void, void))(*(void *)v28 + 104LL))( v28,  v22 - *v26,  0LL,  0LL);
          }
          goto LABEL_67;
        }

LABEL_213:
        __break(0x5513u);
        goto LABEL_214;
      }

LABEL_212:
      __break(0x5512u);
      goto LABEL_213;
    }

LABEL_67:
  if (!*(_DWORD *)(a1 + 36))
  {
    uint64_t v30 = *(void *)(a1 + 320);
    if (!v30 || (v30 & 7) != 0) {
      goto LABEL_211;
    }
    *(_DWORD *)(a1 + 36) = dword_10011D098;
  }

  if ((int)v7 >= 15)
  {
LABEL_210:
    __break(0x5518u);
    goto LABEL_211;
  }

  uint64_t v31 = *(void *)(a1 + 320);
  if (!v31 || (v31 & 7) != 0) {
    goto LABEL_211;
  }
  sub_1000BAEF8(v31, v8);
  int v32 = 1 << v7;
  if ((*(_DWORD *)(a1 + 36) & v32) == 0) {
    goto LABEL_198;
  }
  uint64_t v33 = sub_10004783C();
  if (!v33 || (v33 & 7) != 0) {
    goto LABEL_211;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v33 + 744LL))(v33) & 1) == 0)
  {
    uint64_t v34 = sub_10004783C();
    if (!v34 || (v34 & 7) != 0) {
      goto LABEL_211;
    }
    if (!v8 || (v8 & 7) != 0) {
      goto LABEL_211;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 216LL))(v8) != 1)
    {
LABEL_86:
      unsigned int v35 = *(unsigned __int16 **)(a1 + 320);
      sub_100055134(v35, v8, v7, v80);
      if (v36 <= 7)
      {
        unsigned int v37 = v36;
        if (v36) {
          goto LABEL_94;
        }
        goto LABEL_90;
      }

    __break(0x5507u);
  }

  __break(0x5513u);
  return result;
}

LABEL_214:
      __break(0x550Au);
      goto LABEL_215;
    }
  }

LABEL_90:
  uint64_t v38 = *(void *)(a1 + 48);
  if (!v38 || (v38 & 7) != 0) {
    goto LABEL_211;
  }
  if (!sub_100057CEC(v38))
  {
    uint64_t v41 = *(void *)(a1 + 48);
    if (!v41) {
      goto LABEL_211;
    }
    if ((v41 & 7) != 0) {
      goto LABEL_211;
    }
    sub_10005789C(v41, v7);
    uint64_t v42 = *(void *)(a1 + 320);
    if (!v42 || (v42 & 7) != 0) {
      goto LABEL_211;
    }
    uint64_t v43 = sub_10008C2EC(v42, *(void *)(a1 + 48), v7);
    if (!v43)
    {
      if ((_DWORD)v7) {
        goto LABEL_113;
      }
      uint64_t v77 = *(void *)(a1 + 320);
      if (!v77) {
        goto LABEL_211;
      }
      if ((v77 & 7) != 0) {
        goto LABEL_211;
      }
      sub_1000BB794(v77, *(void *)(a1 + 48), 1u);
      uint64_t v78 = *(void *)(a1 + 320);
      if (!v78) {
        goto LABEL_211;
      }
      if ((v78 & 7) != 0) {
        goto LABEL_211;
      }
      sub_1000BB7FC(v78, *(void *)(a1 + 48), 1u);
      uint64_t v79 = *(void *)(a1 + 320);
      if (!v79 || (v79 & 7) != 0) {
        goto LABEL_211;
      }
      uint64_t v43 = sub_10008C2EC(v79, *(void *)(a1 + 48), 0);
      if (!v43)
      {
LABEL_113:
        sub_1000CEAEC( 0,  4,  "%s:%d NO Lingo object, cannot process lingo(%xh) cmd(%xh)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  756,  v7,  v80);
        goto LABEL_114;
      }
    }

    uint64_t v44 = sub_1000B6CE0();
    if (v44 && (v44 & 7) == 0)
    {
      BOOL v45 = sub_10008E10C(v44, v8);
      if (!(_DWORD)v7 && !v45 && (v80 == 19 || v80 == 1))
      {
        if ((v43 & 7) != 0) {
          goto LABEL_211;
        }
        sub_1000822C4(v43);
      }

      if ((v43 & 7) == 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 72LL))(v43, a2);
        a2 = 0LL;
LABEL_114:
        uint64_t v46 = *(void *)(a1 + 48);
        if (v46 && (v46 & 7) == 0)
        {
          unsigned int v47 = v7;
LABEL_197:
          sub_1000578E8(v46, v47);
          goto LABEL_198;
        }
      }
    }

        int v32 = -21846;
        uint64_t v33 = -86;
        unint64_t v28 = sub_1000B6CE0();
        if (v28 && (v28 & 7) == 0)
        {
          if (sub_10008E10C(v28, v5))
          {
            uint64_t v29 = 0;
          }

          else
          {
            int v32 = bswap32(WORD5(v34)) >> 16;
            uint64_t v29 = 2;
          }

          if (!__CFADD__(&v32, v29))
          {
            *((_BYTE *)&v32 + v29) = v18;
            sub_1000AC324(a2, v5, 0, 0LL, 45, *(_DWORD *)(a2 + 68), &v32, v29 | 1);
            sub_1000AB4C4(*(void *)(a1 + 8), a2, 0, 1u);
            if (v19) {
              sub_10007158C(a1, 0, 1LL, (uint64_t)&v34, 96);
            }
            return v18;
          }

        __break(0x5515u);
        return result;
      }
    }

LABEL_211:
    __break(0x5516u);
    goto LABEL_212;
  }

  unsigned int v37 = 0;
LABEL_94:
  __int16 v39 = -1;
  BOOL v40 = 1;
  switch((int)v7)
  {
    case 0:
      BOOL v40 = 0;
      __int16 v39 = 2;
      goto LABEL_135;
    case 2:
    case 4:
      BOOL v40 = 0;
      __int16 v39 = 1;
      goto LABEL_135;
    case 3:
    case 11:
    case 13:
      BOOL v40 = 0;
      __int16 v39 = 0;
      goto LABEL_135;
    case 9:
      unsigned int v48 = (unsigned __int16)(v80 - 139);
      BOOL v40 = v48 < 0xFFF5;
      if (v48 < 0xFFF5) {
        __int16 v39 = -1;
      }
      else {
        __int16 v39 = 128;
      }
      goto LABEL_135;
    case 12:
      BOOL v40 = v80 > 0x12;
      if (v80 <= 0x12) {
        __int16 v39 = 0;
      }
      else {
        __int16 v39 = -1;
      }
      goto LABEL_135;
    case 14:
      if ((v80 & 0x80) == 0 && v80 != 9 && v80 != 7) {
        goto LABEL_135;
      }
      uint64_t v49 = sub_1000B6CE0();
      if (!v49 || (v49 & 7) != 0) {
        goto LABEL_211;
      }
      __int16 v50 = *(unsigned __int16 **)(a2 + 24);
      if (!v50) {
        goto LABEL_211;
      }
      *(_DWORD *)(a2 + 6_Block_object_dispose((const void *)(v1 - 48), 8) = bswap32(*v50) >> 16;
LABEL_134:
      sub_10005E3CC(a2, 1);
      BOOL v40 = 0;
      __int16 v39 = 128;
LABEL_135:
      int v51 = v37 == 6 ? 16 : 4;
      uint64_t v52 = *(void *)(a1 + 320);
      if (!v52) {
        goto LABEL_211;
      }
      if ((v52 & 7) != 0) {
        goto LABEL_211;
      }
      uint64_t v53 = *(void *)(a2 + 8);
      int v54 = sub_10008C7E4(v52, v8);
      uint64_t v55 = *(void *)(a1 + 48);
      if (!v55 || (v55 & 7) != 0) {
        goto LABEL_211;
      }
      if (!sub_100057CEC(v55) && !v80 && (_DWORD)v7 == 2 && !v54 && sub_100063D7C(v53))
      {
        char v81 = 2;
        uint64_t v56 = sub_1000ABB10(v53, 0, 0LL, 1, *(_DWORD *)(a2 + 68), &v81, 1u);
        if (!v56) {
          goto LABEL_210;
        }
        uint64_t v57 = v56;
        uint64_t v58 = *(void *)(a1 + 48);
        if (!v58) {
          goto LABEL_211;
        }
        if ((v58 & 7) != 0) {
          goto LABEL_211;
        }
        sub_10005789C(v58, 0);
        uint64_t v59 = *(void *)(a1 + 320);
        if (!v59 || (v59 & 7) != 0) {
          goto LABEL_211;
        }
        uint64_t v60 = sub_10008C2EC(v59, *(void *)(a1 + 48), 0);
        if (v60) {
          goto LABEL_162;
        }
        uint64_t v61 = *(void *)(a1 + 320);
        if (!v61) {
          goto LABEL_211;
        }
        if ((v61 & 7) != 0) {
          goto LABEL_211;
        }
        sub_1000BB794(v61, *(void *)(a1 + 48), 1u);
        uint64_t v62 = *(void *)(a1 + 320);
        if (!v62) {
          goto LABEL_211;
        }
        if ((v62 & 7) != 0) {
          goto LABEL_211;
        }
        sub_1000BB7FC(v62, *(void *)(a1 + 48), 1u);
        uint64_t v63 = *(void *)(a1 + 320);
        if (!v63 || (v63 & 7) != 0) {
          goto LABEL_211;
        }
        uint64_t v60 = sub_10008C2EC(v63, *(void *)(a1 + 48), 0);
        if (v60)
        {
LABEL_162:
          if ((v60 & 7) != 0) {
            goto LABEL_211;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 72LL))(v60, v57);
          uint64_t v64 = *(void *)(a1 + 320);
          if (!v64 || (v64 & 7) != 0) {
            goto LABEL_211;
          }
          uint64_t v65 = sub_10008C2EC(v64, *(void *)(a1 + 48), 2u);
          if (v65)
          {
            if ((v65 & 7) != 0) {
              goto LABEL_211;
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 72LL))(v65, a2);
            a2 = 0LL;
          }

          else
          {
            sub_1000CEAEC( 0,  4,  "%s:%d NULL pLingo\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  915);
          }
        }

        else
        {
          sub_1000CEAEC( 0,  4,  "%s:%d NULL pGenLingo\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  920);
        }

  __break(0x5507u);
  return result;
}

LABEL_194:
        uint64_t v46 = *(void *)(a1 + 48);
        if (v46 && (v46 & 7) == 0)
        {
          unsigned int v47 = 0;
          goto LABEL_197;
        }

        goto LABEL_211;
      }

      uint64_t v66 = *(void *)(a1 + 48);
      if (!v66 || (v66 & 7) != 0) {
        goto LABEL_211;
      }
      BOOL v67 = sub_100057CEC(v66);
      if (!v40)
      {
        if (v37 - 3 >= 2) {
          int v68 = v51;
        }
        else {
          int v68 = 7;
        }
        if (v67) {
          int v69 = 17;
        }
        else {
          int v69 = v68;
        }
        sub_1000ABE78(a2, v53, 0, v7, v39, *(_DWORD *)(a2 + 68), v69, v80, 0, 255, 0LL, 0, 0, 0);
        sub_1000AB4C4(*(void *)(a1 + 48), a2, 0, 1u);
        a2 = 0LL;
      }

      if (v37 == 3)
      {
        uint64_t v70 = *(void *)(a1 + 320);
        if (!v70 || (v70 & 7) != 0) {
          goto LABEL_211;
        }
        if ((sub_10008CBE4(v70, v8) & 3) != 1) {
          break;
        }
        uint64_t v71 = *(void *)(a1 + 48);
        if (!v71) {
          goto LABEL_211;
        }
        if ((v71 & 7) != 0) {
          goto LABEL_211;
        }
        sub_10005789C(v71, 0);
        uint64_t v72 = *(void *)(a1 + 320);
        if (!v72 || (v72 & 7) != 0) {
          goto LABEL_211;
        }
        uint64_t v73 = sub_10008C2EC(v72, *(void *)(a1 + 48), 0);
        if (!v73)
        {
          uint64_t v74 = *(void *)(a1 + 320);
          if (!v74) {
            goto LABEL_211;
          }
          if ((v74 & 7) != 0) {
            goto LABEL_211;
          }
          sub_1000BB794(v74, *(void *)(a1 + 48), 1u);
          uint64_t v75 = *(void *)(a1 + 320);
          if (!v75) {
            goto LABEL_211;
          }
          if ((v75 & 7) != 0) {
            goto LABEL_211;
          }
          sub_1000BB7FC(v75, *(void *)(a1 + 48), 1u);
          uint64_t v76 = *(void *)(a1 + 320);
          if (!v76 || (v76 & 7) != 0) {
            goto LABEL_211;
          }
          uint64_t v73 = sub_10008C2EC(v76, *(void *)(a1 + 48), 0);
          if (!v73) {
            goto LABEL_210;
          }
        }

        if ((v73 & 7) != 0) {
          goto LABEL_211;
        }
        sub_10007304C(v73, v8);
        goto LABEL_194;
      }

      break;
    default:
      goto LABEL_135;
  }

LABEL_198:
  *((_BYTE *)v86 + 24) = 0;
  _Block_object_dispose(&v85, 8);
  if (a2) {
LABEL_11:
  }
    sub_1000AD43C(a2);
}

      sub_1000CEAEC( 0,  4,  "CIapLingoSimpleRemote::%s:%d ackedCmdID = %X\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoSimpleRemote.cpp",  977,  v33);
      goto LABEL_204;
    }

    uint64_t result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v46, 0LL, 0xFFFFu);
    if (v32)
    {
      __int16 v39 = *(unsigned __int8 *)(v2 + 4448);
      if (v39 <= 1)
      {
        sub_1000A1BF0(*(void *)(v2 + 8), *(_DWORD *)(v2 + 4452), v39 != 0);
        goto LABEL_204;
      }
    }

    else
    {
      *(_BYTE *)(v2 + 4441) = 0;
      BOOL v40 = *(unsigned __int8 *)(v2 + 4448);
      if (v40 <= 1)
      {
        *(_BYTE *)(v2 + 4439) = v40;
        pthread_mutex_t *v15 = *(_BYTE *)(v2 + 4449);
        goto LABEL_204;
      }
    }

uint64_t sub_10005E354(uint64_t result)
{
  if (*(unsigned __int8 *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) >= 2u)
  {
LABEL_6:
    __break(0x550Au);
    return result;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL))
  {
    if ((*(_DWORD *)(result + 40) + 32) <= 0x3F)
    {
      syslog( 4,  "CIapIncomingProcess::ProcessPacket: timeout processing lingo=%u cmdID=%02x\n",  *(_DWORD *)(result + 40),  *(unsigned __int16 *)(result + 44));
      return WriteStackshotReport_stdc("Timedout waiting packet processing", 3131746989LL);
    }

    goto LABEL_6;
  }

  return result;
}

uint64_t sub_10005E3CC(uint64_t result, int a2)
{
  if (result && (result & 7) == 0) {
    return sub_10005F130(result, 2u, a2);
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005E3E8(uint64_t result, unsigned int a2, size_t a3, const void *a4, unsigned int a5)
{
  if (!result) {
    goto LABEL_28;
  }
  uint64_t v5 = result;
  if ((result & 7) != 0) {
    goto LABEL_28;
  }
  if (!*(_BYTE *)(result + 364)) {
    return 6LL;
  }
  if (*(unsigned __int8 *)(result + 312) > 1u)
  {
LABEL_27:
    __break(0x550Au);
    goto LABEL_28;
  }

  if (*(_BYTE *)(result + 312)) {
    return 6LL;
  }
  if (*(_BYTE *)(result + 365)) {
    return 6LL;
  }
  uint64_t result = (uint64_t)operator new(0x20uLL);
  if ((result & 0xF) != 0) {
    goto LABEL_28;
  }
  if (a2 > 0x7FF) {
    goto LABEL_27;
  }
  uint64_t v11 = result;
  uint64_t result = sub_1000AA350(result, a2, a4, a3);
  if (a5 >= 4) {
    goto LABEL_27;
  }
  if (a5) {
    goto LABEL_26;
  }
  unsigned int v12 = (pthread_mutex_t *)(v5 + 120);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(v5 + 120));
  unsigned int v13 = (_DWORD *)(v5 + 352);
  if (((v5 + 352) & 3) != 0) {
    goto LABEL_28;
  }
  if (*v13 > *(_DWORD *)"#")
  {
LABEL_26:
    __break(0x5518u);
    goto LABEL_27;
  }

  if (*v13 < 6u)
  {
    if ((v11 & 7) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
      uint64_t v6 = 28LL;
      goto LABEL_25;
    }

    goto LABEL_28;
  }

  if ((v11 & 7) != 0)
  {
LABEL_28:
    __break(0x5516u);
    goto LABEL_29;
  }

  uint64_t result = sub_100059694(v5, v11, 1, 0);
  if ((_DWORD)result)
  {
    uint64_t v6 = 16LL;
LABEL_25:
    pthread_mutex_unlock(v12);
    return v6;
  }

  if (*v13)
  {
    uint64_t v6 = 0LL;
    --*v13;
    goto LABEL_25;
  }

uint64_t sub_10005E54C(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  uint64_t v2 = sub_10005D758(result, 0LL);
  if ((_DWORD)v2 != -1) {
    return v2;
  }
  uint64_t result = v1 + 328;
  if (((v1 + 328) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = -1431655765 * ((*(void *)(v1 + 336) - *(void *)(v1 + 328)) >> 3);
    if ((_DWORD)v2 != -1)
    {
      sub_10005E5C8(result, (v2 + 1));
      return v2;
    }
  }

  __break(0x5500u);
  return result;
}

void sub_10005E5C8(uint64_t a1, unint64_t a2)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_15:
    __break(0x5513u);
    return;
  }

  uint64_t v2 = *(void *)a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_10005F538(a1, v5);
    return;
  }

  if (!v4)
  {
    BOOL v6 = __CFADD__(v2, 24 * a2);
    if ((unsigned __int128)((uint64_t)a2 * (__int128)24LL) >> 64 == (uint64_t)(24 * a2) >> 63 && !v6)
    {
      sub_10005F4FC(a1, v2 + 24 * a2);
      return;
    }

    goto LABEL_15;
  }

void sub_10005E640(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  if (!a1 || (a1 & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_44;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    sub_1000D276C();
  }
  if ((v4 & 7) != 0) {
    goto LABEL_44;
  }
  if (!*(void *)(v4 + 24))
  {
    syslog(4, "Dropping incoming packet because of invalid state");
    sub_1000AD43C(a2);
    return;
  }

  uint64_t v5 = *(void *)(a1 + 320);
  if (!v5) {
    goto LABEL_44;
  }
  if ((v5 & 7) != 0) {
    goto LABEL_44;
  }
  int v6 = sub_100054A7C(v5, v4);
  uint64_t v7 = *(void *)(a1 + 48);
  if (!v7 || (v7 & 7) != 0) {
    goto LABEL_44;
  }
  if (v6 == -2) {
    goto LABEL_39;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8 || (v8 & 7) != 0) {
    goto LABEL_44;
  }
  if ((sub_10005894C(v8) & 1) != 0) {
    goto LABEL_39;
  }
  pthread_once(&stru_10011B908, sub_1000BC260);
  if (dword_10011B8F8[0])
  {
    unsigned int v9 = sub_1000BC5A4();
    if (((a2 + 148) & 3) != 0) {
      goto LABEL_44;
    }
    *(_DWORD *)(a2 + 14_Block_object_dispose((const void *)(v1 - 48), 8) = v9;
  }

  int v10 = sub_10005E3E8(a1, 0x500u, 8uLL, &v17, 0);
  if (!v10) {
    return;
  }
  if (v10 != 6)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    if (!v11)
    {
      __break(0x5518u);
      goto LABEL_44;
    }

    if ((v11 & 7) != 0) {
      goto LABEL_44;
    }
    sub_10005789C(v11, 0);
    uint64_t v12 = *(void *)(a1 + 320);
    if (!v12 || (v12 & 7) != 0) {
      goto LABEL_44;
    }
    uint64_t v13 = sub_10008C2EC(v12, *(void *)(a1 + 48), 0);
    if (!v13) {
      goto LABEL_35;
    }
    if ((v13 & 7) != 0) {
      goto LABEL_44;
    }
    if (!v14)
    {
LABEL_35:
      sub_1000CEAEC( 0,  4,  "%s:%d NULL lingoGeneral\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1219);
      goto LABEL_36;
    }

    if ((v14 & 7) == 0)
    {
      sub_10007852C(v14, 2u, 0LL, 0, 2u, v17, -1);
      if (!v15) {
        uint64_t v17 = 0LL;
      }
LABEL_36:
      uint64_t v16 = *(void *)(a1 + 48);
      if (v16 && (v16 & 7) == 0)
      {
        sub_1000578E8(v16, 0);
        goto LABEL_39;
      }
    }

uint64_t sub_10005E878(uint64_t result, int a2, uint64_t a3, int a4)
{
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v8 = (pthread_mutex_t *)(result + 56);
  pthread_mutex_lock((pthread_mutex_t *)(result + 56));
  uint64_t result = sub_10005E54C(v4);
  if ((_DWORD)result == -1) {
    goto LABEL_19;
  }
  unsigned int v9 = (void *)(v4 + 328);
  if (((v4 + 328) & 7) != 0)
  {
LABEL_21:
    __break(0x5516u);
    goto LABEL_22;
  }

  uint64_t v10 = result;
  uint64_t v11 = *v9;
  uint64_t v12 = 3LL * result;
  if (!v11) {
    goto LABEL_21;
  }
  uint64_t v13 = (uint64_t *)(v11 + 24LL * result);
  uint64_t result = (uint64_t)operator new(0x20uLL);
  if ((result & 0xF) != 0) {
    goto LABEL_21;
  }
  uint64_t v14 = 8 * v12;
  uint64_t result = (uint64_t)sub_1000BD46C((dispatch_source_s *)result, v4);
  uint64_t *v13 = result;
  uint64_t v15 = *(void *)(v4 + 328);
  if (__CFADD__(v15, v14))
  {
LABEL_22:
    __break(0x5513u);
    goto LABEL_23;
  }

  if (!v15) {
    goto LABEL_21;
  }
  uint64_t v16 = (uint64_t *)(v15 + 24LL * v10);
  uint64_t result = *v16;
  if (!*v16)
  {
LABEL_19:
    uint64_t v10 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }

  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = sub_1000BD518(result, a2);
  uint64_t v17 = *v9;
  if (__CFADD__(*v9, v14)) {
    goto LABEL_22;
  }
  if (!v17 || (v17 & 7) != 0) {
    goto LABEL_21;
  }
  if ((a4 + 32) < 0x40)
  {
    uint64_t v18 = v17 + 24LL * v10;
    *(void *)(v18 + _Block_object_dispose((const void *)(v1 - 48), 8) = a3;
    *(_DWORD *)(v18 + 16) = a4;
LABEL_20:
    pthread_mutex_unlock(v8);
    return v10;
  }

uint64_t sub_10005E9CC(uint64_t result, unsigned int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
      if ((((_BYTE)v3 + 72) & 7) == 0)
      {
        uint64_t v6 = *(void *)(v3 + 328);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v3 + 336) - v6) >> 3) <= a2) {
          sub_1000D276C();
        }
        if (__CFADD__(v6, 24LL * a2)) {
          goto LABEL_14;
        }
        if (v6)
        {
          uint64_t v7 = (uint64_t *)(v6 + 24LL * a2);
          if ((v7 & 7) == 0)
          {
            uint64_t result = *v7;
            if (!*v7) {
              sub_1000D276C();
            }
            if ((result & 7) == 0)
            {
              sub_1000BD518(result, a3);
              return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 56));
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_14:
  __break(0x5513u);
  return result;
}

uint64_t sub_10005EA88(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
      if ((((_BYTE)v2 + 72) & 7) == 0)
      {
        uint64_t v4 = *(void *)(v2 + 328);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 336) - v4) >> 3) <= a2) {
          sub_1000D276C();
        }
        if (__CFADD__(v4, 24LL * a2)) {
          goto LABEL_14;
        }
        if (v4)
        {
          uint64_t v5 = (uint64_t *)(v4 + 24LL * a2);
          if ((v5 & 7) == 0)
          {
            uint64_t result = *v5;
            if (!*v5) {
              sub_1000D276C();
            }
            if ((result & 7) == 0)
            {
              sub_1000BD530(result);
              return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 56));
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_14:
  __break(0x5513u);
  return result;
}

uint64_t sub_10005EB3C(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
      if ((((_BYTE)v2 + 72) & 7) == 0)
      {
        uint64_t v4 = *(void *)(v2 + 328);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 336) - v4) >> 3) <= a2) {
          sub_1000D276C();
        }
        if (__CFADD__(v4, 24LL * a2)) {
          goto LABEL_14;
        }
        if (v4)
        {
          uint64_t v5 = (uint64_t *)(v4 + 24LL * a2);
          if ((v5 & 7) == 0)
          {
            uint64_t result = *v5;
            if (!*v5) {
              sub_1000D276C();
            }
            if ((result & 7) == 0)
            {
              sub_1000BD5C8(result);
              return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 56));
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
LABEL_14:
  __break(0x5513u);
  return result;
}

uint64_t sub_10005EBF0(uint64_t result, unsigned int a2)
{
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t v4 = (pthread_mutex_t *)(result + 56);
  uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
  if ((((_BYTE)v2 + 72) & 7) != 0) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v2 + 328);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v2 + 336) - v5) >> 3) <= a2) {
    sub_1000D276C();
  }
  if (__CFADD__(v5, 24LL * a2)) {
    goto LABEL_13;
  }
  if (!v5 || (uint64_t v6 = (uint64_t *)(v5 + 24LL * a2), (v6 & 7) != 0))
  {
LABEL_12:
    __break(0x5516u);
LABEL_13:
    __break(0x5513u);
    return result;
  }

  uint64_t v7 = *v6;
  if (!*v6) {
    sub_1000D276C();
  }
  pthread_mutex_unlock(v4);
  return v7;
}

uint64_t sub_10005ECA0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
      if (*(unsigned __int8 *)(v1 + 312) < 2u)
      {
        if (*(_BYTE *)(v1 + 312)) {
          return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
        }
        if (*(unsigned __int8 *)(v1 + 364) <= 1u)
        {
          if (!*(_BYTE *)(v1 + 364)) {
            *(_BYTE *)(v1 + 364) = 1;
          }
          return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
        }
      }

      __break(0x550Au);
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10005ED08(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_8;
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::StopProcessing\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1474);
  if (*(unsigned __int8 *)(a1 + 312) >= 2u)
  {
LABEL_8:
    __break(0x550Au);
    return;
  }

  if (!*(_BYTE *)(a1 + 312))
  {
    *(_BYTE *)(a1 + 312) = 1;
    *(_BYTE *)(a1 + 364) = 0;
    sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::StopProcessing mShuttingDown: %d, mStartQueueing: %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1479,  1,  0);
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 56));
}

uint64_t sub_10005EDB8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = (pthread_mutex_t *)(result + 56);
    uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 56));
    unsigned int v3 = *(unsigned __int8 *)(v1 + 312);
    if (v3 < 2)
    {
      pthread_mutex_unlock(v2);
      return v3 != 0;
    }
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_10005EE10(uint64_t result, int a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, char a7)
{
  if (!result) {
    goto LABEL_18;
  }
  uint64_t v7 = result;
  if ((result & 7) != 0) {
    goto LABEL_18;
  }
  if (*(_BYTE *)(result + 365)) {
    return 0LL;
  }
  if ((a2 & 8) == 0 && *(_BYTE *)(result + 312)) {
    return 0LL;
  }
  uint64_t result = (uint64_t)operator new(0x38uLL);
  if ((result & 0xF) != 0 || (uint64_t v14 = result, result = sub_1000AA548(result, a2, a3, a4, a5), (result & 7) != 0))
  {
LABEL_18:
    __break(0x5516u);
    return result;
  }

  if (a6 > 3)
  {
LABEL_17:
    __break(0x550Au);
    goto LABEL_18;
  }

  if (sub_100059694(v7, v14, a7 ^ 1u, a6))
  {
    sub_1000CEAEC( 0,  4,  "%s:%d Could not send event message to incoming process thread: this=%hhx pMsg=%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1559,  v7,  v14);
    (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
    return 0LL;
  }

  uint64_t result = 1LL;
  if ((a2 & 8) != 0) {
    *(_BYTE *)(v7 + 365) = 1;
  }
  return result;
}

void sub_10005EF38(uint64_t a1)
{
  if (!a1
    || (a1 & 7) != 0
    || (sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::DestroyProcess\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1589),  sub_10005ED08(a1),  uint64_t v2 = (uint64_t)operator new(0x18uLL),  (v2 & 0xF) != 0)
    || (uint64_t v3 = v2,
        sub_1000AA4E8(v2),
        sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::DestroyProcess sending a stop message\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1605),  (v3 & 7) != 0))
  {
    __break(0x5516u);
  }

  else if (sub_100059694(a1, v3, 1, 0))
  {
    sub_1000CEAEC( 0,  4,  "%s:%d Could not send stop message to incoming process thread: this=%hhx pMsg=%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1620,  a1,  v3);
  }

void sub_10005F020(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_10;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_10;
  }
  sub_1000CEAEC( 0,  4,  "%s:%d CIapIncomingProcess::StartDestroyHandle\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1641);
  uint64_t v4 = (uint64_t)operator new(0x20uLL);
  if ((v4 & 0xF) != 0) {
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  sub_1000AA488(v4, a2);
  if (!a2)
  {
    sub_1000CEAEC( 0,  4,  "%s:%d NULL handle (%hhx) or pMsg (%hhx)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1663,  0,  v5);
    goto LABEL_9;
  }

  *(_BYTE *)(a1 + 365) = 1;
  sub_10005ED08(a1);
  if ((v5 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    return;
  }

  if (sub_100059694(a1, v5, 1, 0)) {
LABEL_9:
  }
    sub_1000CEAEC( 0,  4,  "%s:%d Could not start destroying connection stack: handle=%hhx incomingProcess=%hhx pMsg=%hhx\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapIncomingProcess.cpp",  1670,  a2,  a1,  v5);
}

uint64_t sub_10005F130(uint64_t result, unsigned int a2, int a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else if (a3)
  {
    if (a2 <= 0xF)
    {
      char v3 = *(_BYTE *)(result + 132) | a2;
LABEL_8:
      *(_BYTE *)(result + 132) = v3;
      return result;
    }
  }

  else if (a2 <= 0xF)
  {
    char v3 = *(_BYTE *)(result + 132) & ~(_BYTE)a2;
    goto LABEL_8;
  }

  __break(0x550Au);
  return result;
}

BOOL sub_10005F170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_16:
    __break(0x550Au);
  }

  if (*(_BYTE *)(a1 + 8)) {
    return 0LL;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  *(void *)(a1 + 16) = a4;
  *(void *)a1 = a2;
  *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v18.__opaque[24] = v11;
  *(_OWORD *)&v18.__opaque[40] = v11;
  *(_OWORD *)&v18.__sig = v11;
  *(_OWORD *)&v18.__opaque[8] = v11;
  pthread_attr_init(&v18);
  int v12 = pthread_attr_setinheritsched(&v18, 2);
  if (v12) {
    sub_1000CEAEC( 0,  4,  "%s:%d status == %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapSimpleThread.h",  213,  v12);
  }
  sched_param v17 = (sched_param)0xAAAAAAAAAAAAAAAALL;
  pthread_attr_getschedparam(&v18, &v17);
  v17.sched_priority = a6;
  int v13 = pthread_attr_setschedparam(&v18, &v17);
  if (v13) {
    sub_1000CEAEC( 0,  4,  "%s:%d status == %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapSimpleThread.h",  222,  v13);
  }
  pthread_t v16 = (pthread_t)0xAAAAAAAAAAAAAAAALL;
  int v14 = pthread_create(&v16, &v18, (void *(__cdecl *)(void *))sub_10005F370, (void *)a1);
  BOOL v7 = v14 == 0;
  if (v14)
  {
    sub_1000CEAEC( 0,  4,  "%s:%d status == %d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapSimpleThread.h",  236,  v14);
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  }

  else
  {
    *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = 1;
    pthread_cond_wait((pthread_cond_t *)(a1 + 88), (pthread_mutex_t *)(a1 + 24));
    pthread_detach(v16);
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  return v7;
}

uint64_t sub_10005F328(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(void *)(result + 16) = 0LL;
    pthread_mutex_init((pthread_mutex_t *)(result + 24), 0LL);
    return v1;
  }

  return result;
}

uint64_t sub_10005F370(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      sub_10005F3BC(result);
      pthread_mutex_destroy((pthread_mutex_t *)(v1 + 24));
      operator delete((void *)v1);
      return 0LL;
    }
  }

  else
  {
    __break(0x5518u);
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10005F3BC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(result + 24));
      if (!*(void *)v1) {
        *(void *)uint64_t v1 = sub_10005CAFC(v1, *(dispatch_semaphore_s **)(v1 + 16));
      }
      *(void *)(v1 + 16) = 0LL;
      pthread_cond_broadcast((pthread_cond_t *)(v1 + 88));
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 24));
      uint64_t result = *(void *)v1;
      if (*(void *)v1)
      {
        if ((result & 7) == 0)
        {
          sub_10005983C(result);
          uint64_t result = *(void *)v1;
          if (!*(void *)v1)
          {
LABEL_10:
            *(_BYTE *)(v1 + _Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            return result;
          }

          if ((result & 7) == 0)
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
            goto LABEL_10;
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10005F454(uint64_t **a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10005F4FC((uint64_t)v2, *v2);
    uint64_t v4 = *a1;
    if (*a1 && (v4 & 7) == 0 && (((_BYTE)v4 + 16) & 7) == 0)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v4[2] - *v4) >> 3) < 0xAAAAAAAAAAAAAABLL)
      {
        operator delete((void *)*v4);
        return;
      }

      goto LABEL_16;
    }

uint64_t sub_10005F4FC(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
  }

  else
  {
    unint64_t v2 = *(void *)(result + 8);
    while (v2 != a2)
    {
      if (v2 <= 0x17)
      {
        __break(0x5513u);
        return result;
      }

      v2 -= 24LL;
      if ((*(void *)(result + 8) & 7LL) != 0) {
        goto LABEL_7;
      }
    }
  }

  *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  return result;
}

void sub_10005F538(uint64_t a1, unint64_t a2)
{
  if (!a1 || (unint64_t v2 = (uint64_t *)a1, (a1 & 7) != 0) || ((a1 + 16) & 7) != 0)
  {
    __break(0x5516u);
LABEL_15:
    __break(0x5500u);
LABEL_16:
    sub_100024868((uint64_t)v2);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    sub_10005F654(a1, a2);
    return;
  }

  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v6;
  v11[1] = v6;
  uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)a1) >> 3);
  unint64_t v8 = v7 + a2;
  if (__CFADD__(v7, a2)) {
    goto LABEL_15;
  }
  if (v8 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_16;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(void *)a1) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  if (v9 >= 0x555555555555555LL) {
    int64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    int64_t v10 = v8;
  }
  sub_100024884((uint64_t)v11, v10, v7, a1 + 16);
  sub_10005F6F4((uint64_t)v11, a2);
  sub_10005F788(v2, v11);
  sub_10005F9A4((uint64_t)v11);
}

void sub_10005F654(uint64_t a1, uint64_t a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    memset(v6, 170, sizeof(v6));
    sub_10005F850(v6, a1, a2);
    unint64_t v3 = v6[1];
    uint64_t v4 = v6[2];
    if (v6[1] == v6[2])
    {
LABEL_7:
      sub_100024794(v6);
      return;
    }

    uint64_t v5 = a1 + 16;
    if ((v5 & 7) == 0)
    {
      while (1)
      {
        sub_10005F830(v5, v3);
        if (v3 >= 0xFFFFFFFFFFFFFFE8LL) {
          break;
        }
        v3 += 24LL;
        v6[1] = v3;
        if (v3 == v4) {
          goto LABEL_7;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
}

void sub_10005F6F4(uint64_t a1, uint64_t a2)
{
  if (a1 && (a1 & 7) == 0)
  {
    memset(v5, 170, sizeof(v5));
    sub_10005F8A8(v5, (void *)(a1 + 16), a2);
    uint64_t v3 = v5[0];
    while (1)
    {
      if (v3 == v5[1])
      {
        sub_10005A9CC(v5);
        return;
      }

      uint64_t v4 = sub_100024960(a1);
      sub_10005F830(v4, v5[0]);
      if (v5[0] >= 0xFFFFFFFFFFFFFFE8LL) {
        break;
      }
      uint64_t v3 = v5[0] + 24;
      v5[0] += 24LL;
    }

    __break(0x5513u);
  }

  __break(0x5516u);
}

uint64_t *sub_10005F788(uint64_t *result, void *a2)
{
  if (!result) {
    goto LABEL_6;
  }
  unint64_t v2 = result;
  if ((result & 7) != 0
    || (uint64_t v3 = result + 2, ((unint64_t)(result + 2) & 7) != 0)
    || (uint64_t v5 = result + 1,
        uint64_t result = (uint64_t *)sub_10005F90C((uint64_t)(result + 2), result[1], result[1], *result, *result, a2[1], a2[1]),
        a2[1] = v6,
        uint64_t v7 = *v2,
        uint64_t *v2 = v6,
        a2[1] = v7,
        (v5 & 7) != 0))
  {
LABEL_6:
    __break(0x5516u);
  }

  else
  {
    uint64_t v8 = *v5;
    uint64_t *v5 = a2[2];
    a2[2] = v8;
    uint64_t v9 = *v3;
    uint64_t *v3 = a2[3];
    a2[3] = v9;
    *a2 = a2[1];
  }

  return result;
}

void sub_10005F830(uint64_t a1, uint64_t a2)
{
  if (!a2 || (a2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + _Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
    *(_DWORD *)(a2 + 16) = -1;
  }

void *sub_10005F850(void *result, uint64_t a2, uint64_t a3)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = a2;
    uint64_t v3 = *(void *)(a2 + 8);
    result[1] = v3;
    BOOL v4 = __CFADD__(v3, 24 * a3);
    if ((unsigned __int128)(a3 * (__int128)24LL) >> 64 == (24 * a3) >> 63 && !v4)
    {
      result[2] = v3 + 24 * a3;
      return result;
    }
  }

  __break(0x5513u);
  return result;
}

void *sub_10005F8A8(void *result, void *a2, uint64_t a3)
{
  if (!result || (result & 7) != 0 || !a2 || (a2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    *uint64_t result = *a2;
    BOOL v3 = __CFADD__(*a2, 24 * a3);
    if ((unsigned __int128)(a3 * (__int128)24LL) >> 64 == (24 * a3) >> 63 && !v3)
    {
      result[1] = *a2 + 24 * a3;
      result[2] = a2;
      return result;
    }
  }

  __break(0x5513u);
  return result;
}

unint64_t sub_10005F90C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14 = a2;
  unint64_t v15 = a3;
  uint64_t v12 = a6;
  unint64_t v13 = a7;
  if (a3 == a5) {
    return a6;
  }
  while (1)
  {
    unint64_t v8 = sub_100024A80((unint64_t)&v12);
    unint64_t result = sub_100024A80((unint64_t)&v14);
    uint64_t v10 = *(void *)(result + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)result;
    *(void *)(v8 + 16) = v10;
    if (v15 <= 0x17) {
      break;
    }
    unint64_t v11 = v15 - 24;
    v15 -= 24LL;
    if (v13 <= 0x17) {
      break;
    }
    v13 -= 24LL;
    if (v11 == a5) {
      return v12;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_10005F9A4(uint64_t result)
{
  if (!result) {
    goto LABEL_8;
  }
  uint64_t v1 = (uint64_t *)result;
  if ((result & 7) != 0) {
    goto LABEL_8;
  }
  sub_10005FA30(result);
  if (!*v1) {
    return (uint64_t)v1;
  }
  sub_100024960((uint64_t)v1);
  unint64_t result = *v1;
  if (((unint64_t)(v1 + 3) & 7) != 0)
  {
LABEL_8:
    __break(0x5516u);
  }

  else if (0xAAAAAAAAAAAAAAABLL * ((v1[3] - result) >> 3) < 0xAAAAAAAAAAAAAABLL)
  {
    operator delete((void *)result);
    return (uint64_t)v1;
  }

  __break(0x550Cu);
  return result;
}

uint64_t sub_10005FA30(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return sub_10005FA48(result, *(void *)(result + 8));
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_10005FA48(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0))
  {
LABEL_7:
    __break(0x5516u);
  }

  else
  {
    unint64_t v4 = *(void *)(result + 16);
    while (v4 != a2)
    {
      unint64_t result = sub_100024960(v2);
      unint64_t v5 = *(void *)(v2 + 16);
      if (v5 <= 0x17)
      {
        __break(0x5513u);
        return result;
      }

      unint64_t v4 = v5 - 24;
      *(void *)(v2 + 16) = v4;
      if ((v4 & 7) != 0) {
        goto LABEL_7;
      }
    }
  }

  return result;
}

uint64_t sub_10005FAAC(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  sub_10006107C(result, a2, 8);
  *(void *)uint64_t v2 = off_100105BF8;
  pthread_mutex_init((pthread_mutex_t *)(v2 + 1208), 0LL);
  *(_BYTE *)(v2 + 1272) = 0;
  *(void *)(v2 + 1280) = 0LL;
  *(_WORD *)(v2 + 128_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  *(_BYTE *)(v2 + 1290) = 0;
  sub_10005FB7C(v2, 1, 1);
  unint64_t result = *(void *)(v2 + 8);
  if (!result
    || (result & 7) != 0
    || (sub_10005758C(result, 8u, 0), (unint64_t result = *(void *)(v2 + 8)) == 0)
    || (result & 7) != 0
    || (sub_100057538(result, 8u, 0), (unint64_t result = sub_100061274()) == 0)
    || (result & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
  }

  else
  {
    sub_10008C5A8(result, 8, 108, a2);
    return v2;
  }

  return result;
}

void sub_10005FB7C(uint64_t a1, int a2, int a3)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_27:
    __break(0x5516u);
LABEL_28:
    __break(0x5513u);
    return;
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1208));
  unsigned int v6 = *(unsigned __int8 *)(a1 + 1272);
  if (*(_BYTE *)(a1 + 1272))
  {
    if (*(void *)(a1 + 1280))
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = 0LL;
      while (1)
      {
        uint64_t v9 = *(void *)(a1 + 1280);
        if (__CFADD__(v9, v7)) {
          goto LABEL_28;
        }
        if (v9) {
          BOOL v10 = (((_BYTE)v7 + (_BYTE)v9) & 7) == 0LL;
        }
        else {
          BOOL v10 = 0;
        }
        if (!v10) {
          goto LABEL_27;
        }
        uint64_t v11 = *(void *)(v9 + v7);
        if (v11)
        {
          if ((v11 & 7) != 0) {
            goto LABEL_27;
          }
          operator delete((void *)v11);
          unsigned int v6 = *(unsigned __int8 *)(a1 + 1272);
        }

        ++v8;
        v7 += 8LL;
        if (v8 >= v6)
        {
          uint64_t v12 = *(void **)(a1 + 1280);
          if (v12) {
            operator delete[](v12);
          }
          *(void *)(a1 + 1280) = 0LL;
          break;
        }
      }
    }

    *(_BYTE *)(a1 + 1272) = 0;
    *(_WORD *)(a1 + 128_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
    *(_BYTE *)(a1 + 1290) = 0;
  }

  if (a2) {
    *(void *)(a1 + 1192) = 0LL;
  }
  if (a3) {
    *(_DWORD *)(a1 + 1200) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1208));
}

uint64_t sub_10005FC7C(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0) {
    return sub_10005FAAC(result, a2);
  }
  __break(0x5516u);
  return result;
}

void sub_10005FC90(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0 || (*(void *)a1 = off_100105BF8, (uint64_t v2 = sub_100061274()) == 0) || (v2 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10008C5A8(v2, 8, 0, *(void *)(a1 + 8));
    sub_10005FB7C(a1, 1, 1);
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1208));
    sub_100061324(a1);
  }

void sub_10005FD04(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_10005FC90(a1);
  }
}

void sub_10005FD18(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_10005FC90(a1);
    operator delete(v1);
  }

uint64_t sub_10005FD3C(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_83;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_83;
  }
  if (!*(void *)(result + 8))
  {
LABEL_10:
    uint64_t v4 = 89LL;
LABEL_11:
    sub_1000AD43C(a2);
    return v4;
  }

  unint64_t result = sub_100061274();
  if (!result || (result & 7) != 0)
  {
LABEL_83:
    __break(0x5516u);
LABEL_84:
    __break(0x5507u);
    goto LABEL_85;
  }

  unint64_t result = *(void *)(v2 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_83;
  }
  unint64_t result = sub_1000569F0(result);
  if ((result & 1) != 0) {
    goto LABEL_10;
  }
  if (!a2 || (a2 & 7) != 0) {
    goto LABEL_83;
  }
  unsigned int v5 = *(unsigned __int16 *)(a2 + 126);
  uint64_t v4 = 2LL;
  if (v5 > 7) {
    goto LABEL_11;
  }
  unsigned int v6 = *(unsigned __int8 **)(a2 + 24);
  if (!v6) {
    goto LABEL_11;
  }
  unsigned int v7 = *(unsigned __int16 *)(a2 + 128);
  if (!*(_WORD *)(a2 + 128)) {
    goto LABEL_11;
  }
  unint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_83;
  }
  unint64_t result = sub_100054B88(result, *(void *)(v2 + 1192));
  if (!(_DWORD)result) {
    goto LABEL_11;
  }
  __int16 v27 = 8;
  uint64_t v26 = 0LL;
  switch(v5)
  {
    case 0u:
      if (v7 < 2) {
        goto LABEL_11;
      }
      __int16 v27 = v6[1];
      unint64_t result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v27, &v26, 0xFFFFu);
      uint64_t v4 = result;
      if (v7 == 2 && !*v6)
      {
        if (!(_DWORD)result && v6[1] == 3)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
          *(_BYTE *)(v2 + 128_Block_object_dispose((const void *)(v1 - 48), 8) = *(_BYTE *)(v2 + 1289);
          *(_BYTE *)(v2 + 1201) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
          goto LABEL_77;
        }
      }

      else if (!(_DWORD)result)
      {
        uint64_t v4 = 0LL;
        switch(v6[1])
        {
          case 1u:
            goto LABEL_71;
          case 3u:
            int v8 = *(unsigned __int8 *)(v2 + 1201);
            if (v8 == 255) {
              goto LABEL_84;
            }
            *(_BYTE *)(v2 + 1201) = v8 + 1;
            uint64_t v9 = sub_1000602E0(v2, *(unsigned __int8 *)(v2 + 1289));
            goto LABEL_74;
          case 4u:
            goto LABEL_61;
          case 6u:
            int v25 = *(unsigned __int8 *)(v2 + 1203);
            if (v25 == 255) {
              goto LABEL_84;
            }
            *(_BYTE *)(v2 + 1203) = v25 + 1;
            goto LABEL_33;
          default:
            goto LABEL_11;
        }
      }

      goto LABEL_11;
    case 2u:
      __int16 v27 = 1;
      unint64_t result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v27, &v26, 0xFFFFu);
      uint64_t v4 = result;
      if (v7 == 1)
      {
        unsigned int v10 = *v6;
        unsigned int v11 = *(unsigned __int8 *)(v2 + 1272);
        if (!(_DWORD)result && v10 < v11)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
          *(_BYTE *)(v2 + 128_Block_object_dispose((const void *)(v1 - 48), 8) = *v6;
          *(_BYTE *)(v2 + 1200) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
          if (!*(_BYTE *)(v2 + 1272)) {
            goto LABEL_77;
          }
LABEL_33:
          LOBYTE(v12) = *(_BYTE *)(v2 + 1290);
          goto LABEL_34;
        }

        if ((_DWORD)result || v10 < v11) {
          goto LABEL_11;
        }
      }

      else if ((_DWORD)result)
      {
        goto LABEL_11;
      }

LABEL_71:
      int v24 = *(unsigned __int8 *)(v2 + 1200);
      if (v24 == 255) {
        goto LABEL_84;
      }
      *(_BYTE *)(v2 + 1200) = v24 + 1;
      goto LABEL_73;
    case 5u:
      __int16 v27 = 4;
      unint64_t result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v27, &v26, 0xFFFFu);
      uint64_t v4 = result;
      if (v7 != 1 || (_DWORD)result)
      {
        if (v7 == 1 || (_DWORD)result) {
          goto LABEL_11;
        }
LABEL_61:
        int v22 = *(unsigned __int8 *)(v2 + 1202);
        if (v22 == 255) {
          goto LABEL_84;
        }
        *(_BYTE *)(v2 + 1202) = v22 + 1;
        uint64_t v9 = sub_1000603D0(v2);
      }

      else
      {
        pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
        *(_BYTE *)(v2 + 1272) = *v6;
        *(_BYTE *)(v2 + 1202) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
        if (!*(_BYTE *)(v2 + 1272))
        {
          sub_10005FB7C(v2, 0, 0);
          goto LABEL_76;
        }

        pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
        size_t v13 = 8LL * *(unsigned __int8 *)(v2 + 1272);
        unint64_t result = (uint64_t)operator new[](v13);
        if ((result & 7) != 0) {
          goto LABEL_83;
        }
        *(void *)(v2 + 1280) = result;
        bzero((void *)result, v13);
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
LABEL_73:
        uint64_t v9 = sub_100060210(v2);
      }

      goto LABEL_74;
    case 7u:
      __int16 v27 = 6;
      unint64_t result = sub_100062E78(v2, *(_DWORD *)(a2 + 68), &v27, &v26, 0xFFFFu);
      uint64_t v4 = result;
      if (v7 > 0x81)
      {
        if ((_DWORD)result) {
          goto LABEL_11;
        }
LABEL_67:
        int v23 = *(unsigned __int8 *)(v2 + 1203);
        if (v23 == 255) {
          goto LABEL_84;
        }
        *(_BYTE *)(v2 + 1203) = v23 + 1;
        sub_1000604A0(v2, *(_BYTE *)(v2 + 1290));
        goto LABEL_77;
      }

      unsigned int v14 = *(unsigned __int8 *)(v2 + 1290);
      if (v14 >= *(unsigned __int8 *)(v2 + 1272) || (_DWORD)result || *v6 != v14)
      {
        if ((_DWORD)result || *v6 == v14) {
          goto LABEL_11;
        }
        goto LABEL_67;
      }

      pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
      unint64_t result = (uint64_t)operator new(0x18uLL);
      if ((result & 0xF) != 0) {
        goto LABEL_83;
      }
      if (v6 != (unsigned __int8 *)-1LL)
      {
        if ((result & 7) != 0) {
          goto LABEL_83;
        }
        unint64_t result = (uint64_t)sub_100060FB4((_BYTE *)result, v6 + 1, v7 - 1);
        uint64_t v15 = *(void *)(v2 + 1280);
        uint64_t v16 = *(unsigned __int8 *)(v2 + 1290);
        if (!__CFADD__(v15, 8 * v16))
        {
          if (v15)
          {
            sched_param v17 = (uint64_t *)(v15 + 8 * v16);
            if ((v17 & 7) == 0)
            {
              uint64_t *v17 = result;
              *(_BYTE *)(v2 + 1203) = 0;
              unint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
              uint64_t v18 = *(void *)(v2 + 1280);
              uint64_t v19 = *(unsigned __int8 *)(v2 + 1290);
              if (__CFADD__(v18, 8 * v19)) {
                goto LABEL_85;
              }
              if (v18)
              {
                unsigned int v20 = (void *)(v18 + 8 * v19);
                if ((v20 & 7) == 0)
                {
                  if (*v20)
                  {
                    unint64_t result = pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
                    int v21 = *(unsigned __int8 *)(v2 + 1290);
                    if (v21 == 255) {
                      goto LABEL_84;
                    }
                    *(_BYTE *)(v2 + 1290) = v21 + 1;
                    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
                    unsigned int v12 = *(unsigned __int8 *)(v2 + 1290);
                    if (v12 < *(unsigned __int8 *)(v2 + 1272))
                    {
LABEL_34:
                      uint64_t v9 = sub_1000604A0(v2, v12);
LABEL_74:
                      uint64_t v4 = v9;
                      goto LABEL_11;
                    }

  __break(0x550Au);
  return result;
}

        uint64_t v16 = v34;
        if (v8 == 0xFFFF) {
          break;
        }
        sched_param v17 = v8 + 1;
        int v8 = (unsigned __int16)(v8 + 1);
        if (v6 <= v17) {
          goto LABEL_76;
        }
      }

  __break(0x5516u);
}

        __break(0x550Au);
        goto LABEL_72;
      }

      if ((~(_DWORD)a3 & 0xFFFFFFFE) != 0) {
        return v14;
      }
      unint64_t result = *(void *)(v4 + 1256);
      if (!result || (result & 7) != 0) {
        goto LABEL_70;
      }
      unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 272LL))(result, a4);
      if ((_DWORD)result != 2) {
        return v14;
      }
      if (!*(_BYTE *)(v4 + 1268)) {
        return v14;
      }
      syslog(3, "%s setting USB Device Mode on auth failure/lockout", "NotifyEvent");
LABEL_26:
      unint64_t result = *(void *)(v4 + 1256);
      if (result && (result & 7) == 0)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)result + 280LL))(result, a4, 1LL, 0LL);
        *(_BYTE *)(v4 + 126_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
        return v14;
      }

      goto LABEL_70;
    }

    goto LABEL_49;
  }

  sub_10006329C(v4, (uint64_t)&v14);
  unint64_t result = *(void *)(v4 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_70;
  }
  if (!sub_100057644(result, 6u)) {
    return v14;
  }
  int v8 = sub_100062E0C();
  unint64_t result = *(void *)(v4 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_70;
  }
  unint64_t result = sub_1000575F0(result, 6u);
  if (v8 >= result)
  {
    unint64_t result = *(void *)(v4 + 8);
    if (result)
    {
      if ((result & 7) == 0)
      {
        sub_10005758C(result, 6u, 0);
        unint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          if ((result & 7) == 0)
          {
            uint64_t v9 = 0;
LABEL_41:
            sub_100057538(result, 6u, v9);
            return v14;
          }
        }
      }
    }

  unint64_t result = *(void *)(v2 + 56);
  if (sub_1000583F4(result, *(_DWORD *)(a2 + 68))) {
    return sub_1000AD43C(a2);
  }
  unsigned int v14 = *(void *)(a2 + 8);
  if (!v14 || !sub_1000C8254(*(void *)(a2 + 8)))
  {
    sub_1000CEAEC( 0,  4,  "%s:%d CIapOutgoingProcess::ProcessOutgoingPacket: devPort not assigned for packet !\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapOutgoingProcess.cpp",  424);
    return sub_1000AD43C(a2);
  }

  unint64_t result = sub_10002ACC4();
  if (!result || (result & 7) != 0) {
    goto LABEL_86;
  }
  (*(void (**)(uint64_t))(*(void *)result + 280LL))(result);
  unint64_t result = sub_1000AC59C(a2);
  if ((_DWORD)result)
  {
    if ((v14 & 7) == 0)
    {
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32LL))(a2);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 24LL))(v14, a2, v15);
    }

    goto LABEL_86;
  }

  return result;
}

    __break(0x550Au);
    goto LABEL_72;
  }

LABEL_77:
                  uint64_t v4 = 0LL;
                  goto LABEL_11;
                }
              }
            }
          }

          goto LABEL_83;
        }
      }

          __break(0x550Au);
          return result;
        }
      }

LABEL_85:
      __break(0x5513u);
      return result;
    default:
      goto LABEL_11;
  }

  if ((v3 & 0x100000) != 0)
  {
    unint64_t v28 = *(void *)(result + 56);
    if (!v28) {
      goto LABEL_105;
    }
    if ((v28 & 7) != 0) {
      goto LABEL_105;
    }
    uint64_t v29 = v28 + 16;
    if ((v29 & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v29 + 2) & 2) == 0) {
      uint64_t v4 = 7;
    }
  }

  if ((v3 & 0x400000) != 0)
  {
    uint64_t v30 = *(void *)(result + 56);
    if (!v30) {
      goto LABEL_105;
    }
    if ((v30 & 7) != 0) {
      goto LABEL_105;
    }
    uint64_t v31 = v30 + 16;
    if ((v31 & 7) != 0) {
      goto LABEL_105;
    }
    if ((*(_BYTE *)(v31 + 2) & 0x80) == 0) {
      uint64_t v4 = 7;
    }
  }

  int v32 = *(void *)(result + 56);
  if (!v32 || (v32 & 7) != 0 || (uint64_t v33 = v32 + 16, (v33 & 7) != 0))
  {
LABEL_105:
    __break(0x5516u);
    return result;
  }

  if ((*(_BYTE *)(v33 + 1) & 6) != 0) {
    sub_100085A08(result);
  }
  if (v4 == 8) {
    return 0LL;
  }
  else {
    return 7LL;
  }
}

    __break(0x5518u);
    goto LABEL_86;
  }

uint64_t sub_100060210(uint64_t result)
{
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(result + 1192);
  if (!v2 || *(unsigned __int8 *)(result + 1200) > 3u)
  {
    uint64_t v5 = 2LL;
    goto LABEL_9;
  }

  if ((v2 & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
    return result;
  }

  int v3 = (*(uint64_t (**)(void, void))(*(void *)v2 + 16LL))(*(void *)(result + 1192), 0LL);
  uint64_t v4 = sub_1000ABB10(v2, 0, 8LL, 1, v3, 0LL, 0);
  if (v4) {
    uint64_t v5 = sub_100060DA8(v4, 0, 2500, *(void *)(v1 + 8));
  }
  else {
    uint64_t v5 = 12LL;
  }
LABEL_9:
  if (*(unsigned __int8 *)(v1 + 1200) >= 4u)
  {
    sub_10005FB7C(v1, 0, 0);
    sub_1000605A8(v1, 0x10u);
  }

  return v5;
}

uint64_t sub_1000602E0(uint64_t result, unsigned int a2)
{
  char v7 = a2;
  if (!result) {
    goto LABEL_17;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_17;
  }
  unint64_t result = sub_100061274();
  if (!result || (result & 7) != 0)
  {
LABEL_17:
    __break(0x5516u);
    return result;
  }

  unint64_t result = sub_100054B88(result, *(void *)(v2 + 1192));
  if (!(_DWORD)result) {
    return 2LL;
  }
  uint64_t v4 = *(void *)(v2 + 1192);
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_17;
  }
  int v5 = (*(uint64_t (**)(void, void))(*(void *)v4 + 16LL))(*(void *)(v2 + 1192), 0LL);
  uint64_t v6 = sub_1000ABB10(v4, 0, 8LL, 3, v5, &v7, 1u);
  if (!v6) {
    return 12LL;
  }
  *(_BYTE *)(v2 + 1289) = v7;
  return sub_100060DA8(v6, 0, 3000, *(void *)(v2 + 8));
}

uint64_t sub_1000603D0(uint64_t result)
{
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(result + 1192);
  if (!v2 || *(unsigned __int8 *)(result + 1202) > 3u)
  {
    uint64_t v5 = 2LL;
    goto LABEL_9;
  }

  if ((v2 & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
    return result;
  }

  int v3 = (*(uint64_t (**)(void, void))(*(void *)v2 + 16LL))(*(void *)(result + 1192), 0LL);
  uint64_t v4 = sub_1000ABB10(v2, 0, 8LL, 4, v3, 0LL, 0);
  if (v4) {
    uint64_t v5 = sub_100060DA8(v4, 0, 3000, *(void *)(v1 + 8));
  }
  else {
    uint64_t v5 = 12LL;
  }
LABEL_9:
  if (*(unsigned __int8 *)(v1 + 1202) >= 4u)
  {
    sub_10005FB7C(v1, 0, 0);
    sub_1000605A8(v1, 0x10u);
  }

  return v5;
}

uint64_t sub_1000604A0(uint64_t result, char a2)
{
  char v8 = a2;
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)(result + 1192);
  if (!v3 || *(unsigned __int8 *)(result + 1203) > 3u)
  {
    uint64_t v7 = 2LL;
    goto LABEL_9;
  }

  if ((v3 & 7) != 0)
  {
LABEL_13:
    __break(0x5516u);
    return result;
  }

  int v4 = (*(uint64_t (**)(void, void))(*(void *)v3 + 16LL))(*(void *)(result + 1192), 0LL);
  uint64_t v5 = sub_1000ABB10(v3, 0, 8LL, 6, v4, &v8, 1u);
  if (v5)
  {
    uint64_t v6 = v5;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 1208));
    *(_BYTE *)(v2 + 1290) = v8;
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 1208));
    uint64_t v7 = sub_100060DA8(v6, 0, 3000, *(void *)(v2 + 8));
  }

  else
  {
    uint64_t v7 = 12LL;
  }

uint64_t sub_1000605A8(uint64_t result, unsigned int a2)
{
  if (!result || (result & 7) != 0)
  {
LABEL_7:
    __break(0x5516u);
    goto LABEL_8;
  }

  v2[0] = 0xAAAAAAAAAAAAAAAALL;
  if (a2 < 0x20)
  {
    LODWORD(v2[0]) = a2;
    v2[1] = *(void *)(result + 1192);
    unint64_t result = *(void *)(result + 8);
    if (result && (result & 7) == 0) {
      return sub_100057A4C(result, 8u, 0LL, (uint64_t)v2, 16);
    }
    goto LABEL_7;
  }

uint64_t sub_100060618(uint64_t result, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
LABEL_15:
    __break(0x5507u);
  }

  else
  {
    switch(a3)
    {
      case 1:
        int v6 = *(unsigned __int8 *)(result + 1200);
        if (v6 == 255) {
          goto LABEL_15;
        }
        *(_BYTE *)(result + 1200) = v6 + 1;
        unint64_t result = sub_100060210(result);
        break;
      case 3:
        int v8 = *(unsigned __int8 *)(result + 1201);
        if (v8 == 255) {
          goto LABEL_15;
        }
        *(_BYTE *)(result + 1201) = v8 + 1;
        unint64_t result = sub_1000602E0(result, *(unsigned __int8 *)(result + 1289));
        break;
      case 4:
        int v7 = *(unsigned __int8 *)(result + 1202);
        if (v7 == 255) {
          goto LABEL_15;
        }
        *(_BYTE *)(result + 1202) = v7 + 1;
        unint64_t result = sub_1000603D0(result);
        break;
      case 6:
        int v9 = *(unsigned __int8 *)(result + 1203);
        if (v9 == 255) {
          goto LABEL_15;
        }
        *(_BYTE *)(result + 1203) = v9 + 1;
        unint64_t result = sub_1000604A0(result, *(_BYTE *)(result + 1290));
        break;
      default:
        sub_1000CEAEC( 0,  4,  "%s:%d Invalid command ID %hu received\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoAccessoryEQ.cpp",  424,  a3);
        unint64_t result = 22LL;
        break;
    }

    *a5 = result;
  }

  return result;
}

uint64_t sub_100060720(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    goto LABEL_38;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_38;
  }
  unsigned int v10 = 0;
  if (a2 <= 31)
  {
    if (a2 != 4)
    {
      if (a2 != 8 || *(void *)(result + 1192) != a4) {
        return v10;
      }
      sub_1000608F0(result);
      uint64_t v5 = v4;
      int v6 = 1;
      goto LABEL_20;
    }

    uint64_t v8 = *(void *)(result + 1192);
    if (v8 && v8 != a4) {
      return v10;
    }
    *(void *)(result + 1192) = a4;
    if (a4)
    {
LABEL_19:
      sub_1000608F0(v4);
      uint64_t v5 = v4;
      int v6 = 0;
LABEL_20:
      sub_10005FB7C(v5, v6, 1);
      return v10;
    }

    __break(0x5518u);
    goto LABEL_38;
  }

  if (a2 != 32)
  {
    if (a2 != 64 || !*(void *)(result + 1192)) {
      return v10;
    }
    unint64_t result = sub_100061274();
    if (result && (result & 7) == 0)
    {
      if (sub_100054B88(result, *(void *)(v4 + 1192)))
      {
        if (a3 == 4)
        {
          *(_DWORD *)(v4 + 1200) = 0;
          sub_1000608F0(v4);
          sub_1000603D0(v4);
        }

        return v10;
      }

      if (a3)
      {
        if (a3 == 0xFFFFFFFFLL)
        {
          sub_1000608F0(v4);
          sub_10005FB7C(v4, 0, 1);
          sub_1000605A8(v4, 0xDu);
        }

        return v10;
      }

      goto LABEL_19;
    }

    goto LABEL_38;
  }

  sub_10006329C(result, (uint64_t)&v10);
  unint64_t result = *(void *)(v4 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_38;
  }
  if (!sub_100057644(result, 8u)) {
    return v10;
  }
  unsigned int v9 = sub_100062E0C();
  unint64_t result = *(void *)(v4 + 8);
  if (!result || (result & 7) != 0)
  {
LABEL_38:
    __break(0x5516u);
    goto LABEL_39;
  }

  unint64_t result = sub_1000575F0(result, 8u);
  if (v9 >= result)
  {
    unint64_t result = *(void *)(v4 + 8);
    if (result)
    {
      if ((result & 7) == 0)
      {
        sub_10005758C(result, 8u, 0);
        unint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          if ((result & 7) == 0)
          {
            sub_100057538(result, 8u, 0);
            return v10;
          }
        }
      }
    }

    goto LABEL_38;
  }

uint64_t sub_1000608F0(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v2 = 0LL;
    do
    {
      __int16 v3 = -1;
      unint64_t result = sub_100062E78(v1, -1, &v3, &v2, 0xFFFFu);
    }

    while (!(_DWORD)result);
  }

  return result;
}

uint64_t sub_10006094C(uint64_t result, uint64_t a2)
{
  if (!a2) {
    goto LABEL_16;
  }
  if ((a2 & 7) == 0)
  {
    uint64_t v2 = (_BYTE *)result;
    unint64_t result = sub_100057A88(a2);
    if (result)
    {
      uint64_t v3 = result;
      if ((result & 7) == 0)
      {
        sub_10005789C(result, 8u);
        unint64_t result = sub_1000614B8(8LL, v3);
        if (!result)
        {
          uint64_t v7 = 22LL;
LABEL_15:
          sub_1000578E8(v3, 8u);
          return v7;
        }

        uint64_t v4 = result;
        if ((result & 7) == 0)
        {
          uint64_t v5 = (pthread_mutex_t *)(result + 1208);
          unint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 1208));
          if (v2)
          {
            if ((((_BYTE)v4 + 8) & 7) == 0 && ((v4 + 1272) & 7) == 0)
            {
              unsigned int v6 = *(unsigned __int8 *)(v4 + 1288);
              if (v6 >= *(unsigned __int8 *)(v4 + 1272))
              {
                uint64_t v7 = 2LL;
              }

              else
              {
                uint64_t v7 = 0LL;
                _BYTE *v2 = v6;
              }

              pthread_mutex_unlock(v5);
              goto LABEL_15;
            }

            goto LABEL_17;
          }

uint64_t sub_100060A3C(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if ((a2 & 7) == 0)
    {
      unsigned int v2 = result;
      unint64_t result = sub_100057A88(a2);
      if (result)
      {
        uint64_t v3 = result;
        if ((result & 7) == 0)
        {
          sub_10005789C(result, 8u);
          unint64_t result = sub_1000614B8(8LL, v3);
          if (!result)
          {
            uint64_t v4 = 2LL;
            goto LABEL_9;
          }

          if ((result & 7) == 0)
          {
            uint64_t v4 = sub_1000602E0(result, v2);
LABEL_9:
            sub_1000578E8(v3, 8u);
            return v4;
          }
        }
      }
    }
  }

  else
  {
    __break(0x5518u);
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100060ADC(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = (_BYTE *)result;
    *(_BYTE *)unint64_t result = 0;
    if (a2)
    {
      if ((a2 & 7) == 0)
      {
        unint64_t result = sub_100057A88(a2);
        if (result)
        {
          uint64_t v3 = result;
          if ((result & 7) == 0)
          {
            sub_10005789C(result, 8u);
            unint64_t result = sub_1000614B8(8LL, v3);
            if (!result)
            {
              uint64_t v7 = 22LL;
LABEL_14:
              sub_1000578E8(v3, 8u);
              return v7;
            }

            uint64_t v4 = result;
            if ((result & 7) == 0)
            {
              uint64_t v5 = (pthread_mutex_t *)(result + 1208);
              unint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 1208));
              if (((v4 + 1272) & 7) == 0)
              {
                char v6 = *(_BYTE *)(v4 + 1272);
                if (v6)
                {
                  uint64_t v7 = 0LL;
                  _BYTE *v2 = v6;
                }

                else
                {
                  uint64_t v7 = 2LL;
                }

                pthread_mutex_unlock(v5);
                goto LABEL_14;
              }
            }
          }
        }
      }
    }

    else
    {
      __break(0x5518u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100060BBC(uint64_t result, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (!a4) {
    goto LABEL_40;
  }
  if ((a4 & 7) != 0) {
    goto LABEL_41;
  }
  unsigned int v6 = result;
  unint64_t result = sub_100057A88(a4);
  if (!result) {
    goto LABEL_41;
  }
  uint64_t v7 = result;
  if ((result & 7) != 0) {
    goto LABEL_41;
  }
  sub_10005789C(result, 8u);
  unint64_t result = sub_1000614B8(8LL, v7);
  if ((result & 7) != 0) {
    goto LABEL_41;
  }
  if (!a2 || !a3 || (unsigned int v8 = *a3, v8 < 2) || v8 == 255)
  {
LABEL_40:
    __break(0x5518u);
    goto LABEL_41;
  }

  uint64_t v9 = result;
  if (!result)
  {
    uint64_t v22 = 22LL;
LABEL_39:
    sub_1000578E8(v7, 8u);
    return v22;
  }

  if ((result & 7) != 0) {
    goto LABEL_41;
  }
  unint64_t result = pthread_mutex_lock((pthread_mutex_t *)(result + 1208));
  if (((v9 + 1272) & 7) != 0) {
    goto LABEL_41;
  }
  unsigned int v10 = (uint64_t *)(v9 + 1280);
  if (((v9 + 1280) & 7) != 0) {
    goto LABEL_41;
  }
  uint64_t v11 = *v10;
  if (!*v10) {
    goto LABEL_37;
  }
  if (__CFADD__(v11, 8LL * v6))
  {
LABEL_42:
    __break(0x5513u);
    goto LABEL_43;
  }

  unsigned int v12 = (uint64_t *)(v11 + 8LL * v6);
  uint64_t v13 = *v12;
  if (!v13) {
    goto LABEL_37;
  }
  if ((v13 & 7) != 0)
  {
LABEL_41:
    __break(0x5516u);
    goto LABEL_42;
  }

  int v14 = *(char *)(v13 + 23);
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
    if ((_BYTE)v14) {
      goto LABEL_22;
    }
LABEL_37:
    uint64_t v22 = 2LL;
LABEL_38:
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 1208));
    goto LABEL_39;
  }

  uint64_t v15 = *(void *)(v13 + 8);
  if (!v15) {
    goto LABEL_37;
  }
LABEL_22:
  BOOL v16 = __CFADD__(v15, 1LL);
  unint64_t v17 = v15 + 1;
  if (v16)
  {
LABEL_43:
    __break(0x5500u);
    goto LABEL_44;
  }

  if (v17 < 0x100)
  {
    else {
      unsigned __int8 v18 = *a3;
    }
    *a3 = v18;
    uint64_t v19 = *v10;
    if (__CFADD__(v19, 8LL * v6)) {
      goto LABEL_42;
    }
    if (v19)
    {
      unsigned int v20 = (const void ***)(v19 + 8LL * v6);
      if ((v20 & 7) == 0)
      {
        int v21 = *v20;
        if (*v20)
        {
          if ((v21 & 7) == 0)
          {
            memcpy(a2, v21, v18);
            sub_1000616D4(v9, (uint64_t)a2, v18);
            uint64_t v22 = 0LL;
            goto LABEL_38;
          }
        }
      }
    }

    goto LABEL_41;
  }

uint64_t sub_100060DA8(uint64_t result, int a2, int a3, uint64_t a4)
{
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t v5 = a4;
  __int16 v8 = *(_WORD *)(result + 126);
  int v9 = *(_DWORD *)(result + 68);
  if (!a4)
  {
    uint64_t v10 = *(void *)(result + 8);
    unint64_t result = sub_100061274();
    if (!result || (result & 7) != 0) {
      goto LABEL_15;
    }
    unint64_t result = sub_10008E550(result, v10, 0);
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_14;
    }
  }

  if ((v5 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    return result;
  }

  sub_10005789C(v5, 8u);
  unint64_t result = sub_1000614B8(8LL, v5);
  if (!result)
  {
LABEL_14:
    __break(0x5518u);
    goto LABEL_15;
  }

  uint64_t v11 = (void *)result;
  if ((result & 7) != 0) {
    goto LABEL_15;
  }
  uint64_t v12 = sub_1000AB4C4(v5, v4, a2, 1u);
  if (!(_DWORD)v12)
  {
    uint64_t v12 = (uint64_t)sub_100062D14(v11, v9, v8, 0LL, a3);
    if (!(_DWORD)v12)
    {
      sub_10005758C(v5, 8u, 1);
      int v13 = sub_100062E0C();
      sub_100057538(v5, 8u, v13);
    }
  }

  sub_1000578E8(v5, 8u);
  return v12;
}

uint64_t sub_100060ED0(uint64_t result, int a2)
{
  if (result && a2 == 9)
  {
    *(_BYTE *)unint64_t result = 8;
    if (result != -1)
    {
      *(void *)(result + 1) = 0LL;
      return 0LL;
    }
  }

  else
  {
    __break(0x5518u);
  }

  __break(0x5500u);
  return result;
}

uint64_t sub_100060F00(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100060F14(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100060F28(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
    goto LABEL_6;
  }

  unint64_t result = *(unsigned int *)(result + 16);
  if ((result + 32) >= 0x40) {
LABEL_6:
  }
    __break(0x550Au);
  return result;
}

uint64_t sub_100060F50(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    unint64_t result = *(unsigned int *)(result + 16);
  }

  __break(0x550Au);
  return result;
}

uint64_t sub_100060F78(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100060F8C(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100060FA0(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

void *sub_100060FB4(_BYTE *__dst, void *__src, size_t __len)
{
  if (!__dst) {
    goto LABEL_16;
  }
  uint64_t v3 = __dst;
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    goto LABEL_17;
  }
  if (__len > 0x16)
  {
    if ((__len | 7) == 0x17) {
      size_t v7 = 25LL;
    }
    else {
      size_t v7 = (__len | 7) + 1;
    }
    unsigned int v6 = operator new(v7);
    v3[1] = __len;
    v3[2] = v7 | 0x8000000000000000LL;
    void *v3 = v6;
  }

  else
  {
    __dst[23] = __len;
    unsigned int v6 = __dst;
  }

  if (__CFADD__(__src, __len)) {
    goto LABEL_15;
  }
  if (__len) {
    memmove(v6, __src, __len);
  }
  if (__CFADD__(v6, __len))
  {
LABEL_15:
    __break(0x5513u);
LABEL_16:
    __break(0x5516u);
LABEL_17:
    sub_100024588((uint64_t)v3);
  }

  *((_BYTE *)v6 + __len) = 0;
  return v3;
}

void sub_10006107C(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_34;
  }
  *(void *)a1 = off_100105CA8;
  *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 1176) = -1;
  *(_BYTE *)(a1 + 1180) = 0;
  *(void *)(a1 + 1184) = 0LL;
  uint64_t v5 = pthread_mutex_init((pthread_mutex_t *)(a1 + 1112), 0LL);
  if (a2)
  {
    uint64_t v6 = sub_1000B6CE0();
    if (!v6 || (v6 & 7) != 0) {
      goto LABEL_34;
    }
    if (sub_10008E7AC(v6, a2))
    {
      if ((a2 & 7) != 0)
      {
LABEL_34:
        __break(0x5516u);
        goto LABEL_35;
      }

      if ((sub_1000569F0(a2) & 1) == 0)
      {
        if (!sub_1000579D4(a2)) {
          goto LABEL_31;
        }
        uint64_t v7 = sub_1000579D4(a2);
        if (!v7 || (v7 & 7) != 0) {
          goto LABEL_34;
        }
        uint64_t v5 = sub_100061278(v7);
        uint64_t v8 = *(unsigned int *)(a1 + 16);
        if ((v8 + 32) <= 0x3F)
        {
          HIDWORD(v10) = *(_DWORD *)(a1 + 16);
          LODWORD(v10) = HIDWORD(v10);
          unsigned int v9 = v10 >> 1;
          if (v9 <= 7 && ((1 << v9) & 0xC3) != 0) {
            goto LABEL_17;
          }
          if (v8 > 0xE)
          {
LABEL_36:
            __break(0x5512u);
            return;
          }

          if (~(unint64_t)qword_10011C900 >= 8 * v8)
          {
            uint64_t v5 = qword_10011C900[v8];
            if (!v5)
            {
              qword_10011C900[v8] = a2;
              goto LABEL_17;
            }

LABEL_35:
        __break(0x550Au);
        goto LABEL_36;
      }
    }
  }

    __break(0x550Au);
  }

  __break(0x5500u);
  return result;
}

    __break(0x5516u);
    goto LABEL_36;
  }

    __break(0x5516u);
    goto LABEL_36;
  }

    __break(0x5516u);
    return;
  }

  if ((a2 - 1310721) < 2 || a2 == 1310724 || a2 == 1310723 && (sub_1000785F0(a1) & 0x800) != 0)
  {
    unint64_t v10 = sub_1000BF55C(a3);
    if (!v10 || (uint64_t v11 = v10, (sub_100056728(v10) & 1) == 0))
    {
      sub_1000CEAEC( 0,  4,  "%s:%d INVALID HANDLE in GeneralLingo::SendISLNotification\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  12445);
      return;
    }

    if (a2 == 1310721)
    {
      unsigned int v12 = operator new(4uLL);
      *unsigned int v12 = *a4;
    }

    if ((v11 & 7) != 0) {
      goto LABEL_35;
    }
    if (*(void *)(a1 + 8) == sub_100057A88(v11))
    {
      uint64_t v15 = sub_1000B6CE0();
      if (v15 && (v15 & 7) == 0)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 128LL))(v15, 3LL);
        return;
      }

      goto LABEL_35;
    }
  }

  __break(0x5500u);
  __break(0x5513u);
  return result;
}

  __break(0x550Au);
}

  __break(0x5513u);
  return result;
}

  __break(0x550Au);
  return result;
}

    __break(0x5516u);
    goto LABEL_36;
  }

    __break(0x5516u);
    goto LABEL_36;
  }

        __break(0x5516u);
        goto LABEL_36;
      }
    }

  __break(0x5500u);
}

  __break(0x550Cu);
  return result;
}

uint64_t sub_100061278(uint64_t result)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      result += 16LL;
      if ((result & 7) == 0) {
        return sub_1000B2EA4(result);
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100061298(uint64_t result)
{
  if ((result + 32) >= 0x40)
  {
    __break(0x550Au);
  }

  else
  {
    HIDWORD(v1) = result;
    LODWORD(v1) = result;
    return ((v1 >> 1) < 8) & (0xC3u >> (v1 >> 1));
  }

  return result;
}

void sub_1000612C4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_1000B6CE0();
    if (!v2 || (v2 & 7) != 0)
    {
      __break(0x5516u);
    }

    else
    {
      sub_10008ED00(v2, a1);
      if (!v3) {
        sub_1000CEAEC(0, 4, "No IncomingProcessObject! handle=%hhx\n", a1);
      }
    }
  }

void sub_100061324(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_25;
  }
  *(void *)a1 = off_100105CA8;
  sub_1000612C4(*(void *)(a1 + 8));
  unsigned int v3 = *(_DWORD *)(a1 + 1176);
  if (v2)
  {
    if (v3 != -1)
    {
      uint64_t v4 = v2;
      if ((v2 & 7) != 0) {
        goto LABEL_25;
      }
      sub_10005EB3C(v2, v3);
      sub_10005D014(v4, *(_DWORD *)(a1 + 1176));
    }
  }

  else
  {
    sub_1000CEAEC( 0,  4,  "%s:%d Cannot get IncomingProcess object, cannot DeleteTimer(%d)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoBase.cpp",  394,  v3);
  }

  *(_DWORD *)(a1 + 1176) = -1;
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if ((v5 + 32) >= 0x40)
  {
LABEL_26:
    __break(0x550Au);
    goto LABEL_27;
  }

  HIDWORD(v7) = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = HIDWORD(v7);
  unsigned int v6 = v7 >> 1;
  BOOL v8 = v6 > 7;
  int v9 = (1 << v6) & 0xC3;
  if (!v8 && v9 != 0) {
    goto LABEL_13;
  }
  if ((_DWORD)v5 == 9)
  {
    uint64_t v5 = 9LL;
    unint64_t v12 = 72LL;
    goto LABEL_22;
  }

  if (v5 < 0xF)
  {
    unint64_t v12 = 8 * v5;
    if (qword_10011C900[v5] == *(void *)(a1 + 8))
    {
LABEL_22:
      if (v12 <= ~(unint64_t)qword_10011C900)
      {
        qword_10011C900[v5] = 0LL;
LABEL_13:
        uint64_t v11 = *(void *)(a1 + 1184);
        if (!v11)
        {
LABEL_16:
          pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1112));
          return;
        }

        if ((v11 & 7) == 0)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8LL))(v11);
          *(void *)(a1 + 1184) = 0LL;
          goto LABEL_16;
        }

        goto LABEL_25;
      }

void sub_100061490(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

void sub_1000614A4(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    __break(1u);
  }
  __break(0x5516u);
}

uint64_t sub_1000614B8(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  unsigned int v2 = result;
  if ((result + 32) < 0x40)
  {
    if (result <= 0xE)
    {
      unint64_t result = sub_1000B6CE0();
      if (result)
      {
        if ((result & 7) == 0) {
          return sub_10008C2EC(result, a2, v2);
        }
        goto LABEL_9;
      }
    }

    return 0LL;
  }

  __break(0x550Au);
LABEL_9:
  __break(0x5516u);
  return result;
}

uint64_t sub_100061520(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    __break(0x5516u);
  }
  return result;
}

uint64_t sub_100061534(_DWORD *a1, int *a2)
{
  if (a1)
  {
    uint64_t result = sub_100036FF0();
    if (!result)
    {
LABEL_26:
      __break(0x5518u);
      goto LABEL_27;
    }

    if ((result & 7) != 0) {
      goto LABEL_27;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 528LL))(result);
    *a1 = result;
  }

  if (!a2) {
    return 0LL;
  }
  uint64_t result = sub_100036FF0();
  if (!result) {
    goto LABEL_26;
  }
  uint64_t v5 = result;
  if ((result & 7) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)result + 384LL))(result);
    uint64_t v8 = v6;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 464LL))(v5);
    int v7 = 0;
    if ((result & 1) == 0 && v6)
    {
      if ((v6 & 7) != 0) {
        goto LABEL_27;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16LL))(v6);
      if ((_DWORD)result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 440LL))(v5);
        if ((result & 1) != 0)
        {
          int v7 = 3;
        }

        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 448LL))(v5);
          if ((result & 1) != 0)
          {
            int v7 = 4;
          }

          else
          {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 424LL))(v5);
            if ((result & 1) != 0)
            {
              int v7 = 1;
            }

            else
            {
              uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 432LL))(v5);
              if ((_DWORD)result) {
                int v7 = 2;
              }
              else {
                int v7 = 0;
              }
            }
          }
        }
      }

      else
      {
        int v7 = 0;
      }
    }

    if ((a2 & 3) == 0)
    {
      *a2 = v7;
      sub_100064D0C(&v8);
      return 0LL;
    }
  }

uint64_t sub_100061690(uint64_t result)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_7;
  }
  uint64_t result = qword_10011C8F8;
  if (!qword_10011C8F8)
  {
    uint64_t result = sub_10001C608();
    qword_10011C8F8 = result;
    if (!result)
    {
      __break(0x5518u);
LABEL_7:
      __break(0x5516u);
    }
  }

  return result;
}

uint64_t sub_1000616D4(uint64_t result, uint64_t a2, int a3)
{
  if (!result || (result & 7) != 0)
  {
LABEL_12:
    __break(0x5516u);
    return result;
  }

  if (!a2 || !a3)
  {
    __break(0x5518u);
LABEL_11:
    __break(0x5513u);
    goto LABEL_12;
  }

  do
  {
    LOWORD(a3) = a3 - 1;
    if (!(_WORD)a3) {
      break;
    }
    int v3 = *(char *)(a2 + (unsigned __int16)a3);
    *(_BYTE *)(a2 + (unsigned __int16)a3) = 0;
    if ((v3 & 0x80000000) == 0) {
      break;
    }
  }

  while ((v3 + 64) > 0x37u);
  return result;
}

uint64_t sub_100061730(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  if (!result || (uint64_t v4 = result, (result & 7) != 0))
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = a4;
  if (a3 < 0x20)
  {
    v6[0] = a3;
    uint64_t v7 = a2;
    uint64_t result = sub_1000B6CE0();
    if (result)
    {
      if ((result & 7) == 0)
      {
        int v8 = sub_10008D0AC(result, a2);
        uint64_t result = sub_1000B6CE0();
        if (result)
        {
          if ((result & 7) == 0)
          {
            int v9 = sub_10008C710(result, a2);
            uint64_t result = *(void *)(v4 + 8);
            uint64_t v10 = result;
            if (result)
            {
              if ((result & 7) == 0) {
                return sub_100057A4C(result, 0, 0LL, (uint64_t)v6, 48);
              }
            }
          }
        }
      }
    }

    goto LABEL_11;
  }

uint64_t sub_1000617EC(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_39;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t result = sub_100061690(result);
  if (!result || (result & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 88LL))(result);
  int v4 = result;
  if (((7LL * result) & 0xFFFFFFFF00000000LL) != 0)
  {
LABEL_44:
    __break(0x550Cu);
    return result;
  }

  uint64_t result = (uint64_t)operator new[]((7 * result));
  uint64_t v5 = (void *)result;
  if (v4)
  {
    uint64_t v6 = 0LL;
    unsigned int v7 = 0;
    unint64_t v8 = result;
    while (1)
    {
      uint64_t result = sub_100061690(v2);
      if (!result) {
        goto LABEL_39;
      }
      if ((result & 7) != 0) {
        goto LABEL_39;
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 96LL))(result, v6);
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v15 = v10;
      __int128 v16 = v10;
      uint64_t result = sub_100061690(v2);
      if (!result || (result & 7) != 0) {
        goto LABEL_39;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(void *)result + 104LL))(&v15, result, v9);
      uint64_t result = sub_100061A34((int *)&v15);
      if ((_DWORD)result)
      {
        if (!v8) {
          goto LABEL_39;
        }
        *(_WORD *)unint64_t v8 = bswap32(v9) >> 16;
        if (v8 >= 0xFFFFFFFFFFFFFFFELL) {
          goto LABEL_40;
        }
        if (HIDWORD(v16) >= 2) {
          goto LABEL_42;
        }
        if (HIDWORD(v16) == 1)
        {
          if (v8 == -3LL) {
            goto LABEL_40;
          }
          char v11 = 3;
        }

        else
        {
          if (v8 == -3LL) {
            goto LABEL_40;
          }
          char v11 = 2;
        }

        *(_BYTE *)(v8 + 2) = v11;
        if (HIWORD(DWORD1(v15))) {
          goto LABEL_41;
        }
        *(_WORD *)(v8 + 3) = bswap32(DWORD1(v15)) >> 16;
        if (v8 + 3 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_40;
        }
        if (WORD1(v15)) {
          goto LABEL_41;
        }
        *(_WORD *)(v8 + 5) = bswap32(v15) >> 16;
        if (v8 + 5 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_40;
        }
        BOOL v12 = __CFADD__(v7, 7);
        v7 += 7;
        if (v12) {
          goto LABEL_43;
        }
        v8 += 7LL;
      }

      uint64_t v6 = (v6 + 1);
      if (v4 == (_DWORD)v6)
      {
        if (a2) {
          goto LABEL_32;
        }
        goto LABEL_39;
      }
    }
  }

  unsigned int v7 = 0;
  if (!a2)
  {
LABEL_39:
    __break(0x5516u);
LABEL_40:
    __break(0x5513u);
    goto LABEL_41;
  }

BOOL sub_100061A34(int *a1)
{
  unint64_t v1 = 0LL;
  int v3 = *a1;
  int v2 = a1[1];
  int v4 = &word_1000DE936;
  do
  {
    if (v2 == (unsigned __int16)*(v4 - 1))
    {
      BOOL result = v3 == (unsigned __int16)*v4;
    }

    else
    {
      BOOL result = 0LL;
    }

    v4 += 2;
  }

  while (v1++ < 7);
  return result;
}

uint64_t sub_100061A84( uint64_t result, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  if (!result) {
    goto LABEL_56;
  }
  uint64_t v8 = result;
  if ((result & 7) != 0) {
    goto LABEL_56;
  }
  if (!a2) {
    goto LABEL_56;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_56;
  }
  BOOL result = *(void *)(a2 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_56;
  }
  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
  unsigned __int16 v15 = result;
  BOOL result = sub_100061690(v8);
  if (!result
    || (result & 7) != 0
    || (BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 112LL))(result, a5),
        (uint64_t v36 = result) == 0)
    || (uint64_t v16 = result, (result & 7) != 0))
  {
LABEL_56:
    __break(0x5516u);
LABEL_57:
    __break(0x5513u);
    goto LABEL_58;
  }

  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result) {
    goto LABEL_25;
  }
  if (!a5 || (a5 & 7) != 0) {
    goto LABEL_56;
  }
  BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 24LL))(v16, a6);
  uint64_t v17 = *(unsigned int *)(a2 + 64);
  if (result <= a7)
  {
LABEL_25:
    uint64_t v21 = 4LL;
    goto LABEL_26;
  }

  if (result - a7 < a8)
  {
    a8 = (unsigned __int16)(result - a7);
  }

  if ((_DWORD)v17 == 4)
  {
    if (*(_WORD *)(a2 + 126) == 42)
    {
      int v18 = 0;
      unsigned int v19 = 0;
      __int16 v20 = 43;
    }

    else
    {
      if (a3 > 3) {
        goto LABEL_59;
      }
      if (a3) {
        unsigned int v19 = 5;
      }
      else {
        unsigned int v19 = 9;
      }
      int v18 = 1;
      __int16 v20 = 77;
    }
  }

  else
  {
    int v18 = 0;
    unsigned int v19 = 0;
    __int16 v20 = 32;
  }

  if (v15 <= v19)
  {
    __break(0x5518u);
    goto LABEL_56;
  }

  int v22 = (int)(v15 - v19) / 4;
  int v23 = a8;
  if (v22 >= a8) {
    goto LABEL_37;
  }
  if (HIWORD(v22))
  {
LABEL_58:
    __break(0x5507u);
    goto LABEL_59;
  }

  int v23 = (unsigned __int16)((int)(v15 - v19) / 4);
  a8 = (int)(v15 - v19) / 4;
LABEL_37:
  int v33 = v23;
  size_t v24 = v19 + 4 * a8;
  if (WORD1(v24)) {
    goto LABEL_58;
  }
  unsigned int v32 = a3;
  int v25 = v18;
  uint64_t v26 = operator new[](v24);
  memset(v35, 0, sizeof(v35));
  BOOL result = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 32LL))(v16, a6, v35);
  __int16 v27 = v26;
  if (!v25)
  {
LABEL_46:
    if (v33)
    {
      uint64_t v29 = v35[0];
      unint64_t v30 = ~v35[0];
      while ((((unsigned __int16)a7 + 1) & 0x10000) == 0)
      {
        if (!v29) {
          goto LABEL_56;
        }
        uint64_t v31 = (unsigned int *)(v29 + 4LL * (unsigned __int16)a7);
        _DWORD *v27 = bswap32(*v31);
        ++v27;
        LOWORD(a7) = a7 + 1;
        if (!--a8) {
          goto LABEL_54;
        }
      }

      goto LABEL_58;
    }

uint64_t sub_100061DD8(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!result) {
    goto LABEL_27;
  }
  unint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  if (a3 >= 4) {
    goto LABEL_28;
  }
  BOOL result = sub_100061FA8(result, a3, a4);
  uint64_t v18 = result;
  if (!result)
  {
LABEL_23:
    unint64_t v16 = 4LL;
LABEL_24:
    sub_100064D0C(&v18);
    return v16;
  }

  uint64_t v10 = result;
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result)
    || !(*(unsigned int (**)(uint64_t))(*(void *)v10 + 232LL))(v10))
  {
    goto LABEL_23;
  }

  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  BOOL result = sub_100061690(v6);
  if (!result || (result & 7) != 0) {
    goto LABEL_27;
  }
  BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 112LL))(result, v10);
  unint64_t v17 = result;
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v11 = result;
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  BOOL result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40LL))(v11, a5, a6);
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v12 = result;
  if ((result & 7) != 0)
  {
LABEL_27:
    __break(0x5516u);
    goto LABEL_28;
  }

  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 48LL))(result))
  {
LABEL_22:
    sub_100064D0C(&v17);
    goto LABEL_23;
  }

  BOOL result = (uint64_t)sub_100064D0C(&v17);
  if (!a2 || (a2 & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  if ((v13 + 32) < 0x40)
  {
    int v14 = *(_DWORD *)(a2 + 68);
    BOOL result = *(void *)(a2 + 136);
    if (!result)
    {
      unsigned __int16 v15 = 0LL;
      goto LABEL_26;
    }

    if ((result & 7) == 0)
    {
LABEL_26:
      unint64_t v16 = sub_1000620F4(v6, v13, (unsigned __int16)v14, v12, 0, 0, (uint64_t)v15);
      goto LABEL_24;
    }

    goto LABEL_27;
  }

uint64_t sub_100061FA8(uint64_t result, unsigned int a2, uint64_t a3)
{
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_29;
  }
  if (a2 < 4)
  {
    switch(a2)
    {
      case 2u:
        BOOL result = sub_100063A78(result);
        if (!result || (result & 7) != 0) {
          goto LABEL_29;
        }
        uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 448LL);
        break;
      case 1u:
        BOOL result = sub_100036FF0();
        if (!result) {
          goto LABEL_29;
        }
        uint64_t v6 = result;
        if ((result & 7) != 0) {
          goto LABEL_29;
        }
        uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 400LL);
        BOOL result = v6;
        break;
      case 0u:
        if (a3)
        {
LABEL_8:
          BOOL result = sub_100063A78(v3);
          if (result && (result & 7) == 0) {
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 456LL))(result, a3);
          }
          goto LABEL_29;
        }

        BOOL result = sub_100036FF0();
        if (result && (result & 7) == 0)
        {
          BOOL result = sub_100036FF0();
          if (result && (result & 7) == 0)
          {
LABEL_26:
            BOOL result = sub_100036FF0();
            if (result && (result & 7) == 0) {
              return (*(uint64_t (**)(uint64_t))(*(void *)result + 384LL))(result);
            }
          }
        }

unint64_t sub_1000620F4( unint64_t result, uint64_t a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  unint64_t v51 = result;
  if (!result) {
    goto LABEL_123;
  }
  if ((result & 7) != 0) {
    goto LABEL_123;
  }
  if (!a7) {
    goto LABEL_123;
  }
  if ((a7 & 7) != 0) {
    goto LABEL_123;
  }
  BOOL result = *(void *)(result + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_123;
  }
  unint64_t v11 = *(void *)(a7 + 128);
  uint64_t v12 = sub_10001864C(result);
  BOOL result = sub_1000774F8(*(void *)(v51 + 8));
  unsigned int v49 = (result & 0x80000) == 0;
  uint64_t v55 = v12;
  if (!v12) {
    goto LABEL_118;
  }
  unint64_t v46 = v11;
  if ((v12 & 7) != 0) {
    goto LABEL_123;
  }
  unsigned int v54 = a2;
  BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 136LL))(v12, a2);
  if (!a4) {
    goto LABEL_118;
  }
  unsigned __int16 v13 = result;
  if (v46)
  {
    if ((v46 & 7) != 0 || ((v46 + 24) & 7) != 0) {
      goto LABEL_123;
    }
    if (*(void *)(v46 + 24) != a4)
    {
LABEL_118:
      __break(0x5518u);
      goto LABEL_119;
    }
  }

  if ((a4 & 7) != 0) {
    goto LABEL_123;
  }
  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48LL))(a4);
  if (result <= a6) {
LABEL_119:
  }
    sub_1000D2500();
  if ((_DWORD)a2 == 4)
  {
    if (((a7 + 32) & 7) != 0) {
      goto LABEL_123;
    }
    uint64_t v14 = *(void *)(a7 + 32);
    if (!v14 || (v14 & 7) != 0) {
      goto LABEL_123;
    }
    int v15 = *(unsigned __int16 *)(v14 + 126);
    BOOL v50 = v15 != 16;
    if (v15 == 16) {
      __int16 v16 = 17;
    }
    else {
      __int16 v16 = 79;
    }
  }

  else
  {
    BOOL v50 = 0;
    __int16 v16 = 25;
  }

  __int16 v52 = v16;
  BOOL result = (unint64_t)operator new[](v13);
  unint64_t v17 = (_WORD *)result;
  if (a5)
  {
    uint64_t v18 = *(void *)(a7 + 128);
    if (!v18) {
      goto LABEL_123;
    }
    if ((v18 & 7) != 0) {
      goto LABEL_123;
    }
    unsigned int v19 = (unsigned __int16 *)(v18 + 16);
    unsigned int v45 = *v19;
    __int16 v20 = (_WORD *)result;
LABEL_69:
    BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40LL))(a4);
    if (!__CFADD__(result, a6))
    {
      unint64_t v29 = result;
      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48LL))(a4);
      unsigned int v30 = result - a6;
      if (result >= a6)
      {
        uint64_t v31 = (char *)(v29 + a6);
        unsigned int v48 = bswap32(v45) >> 16;
        do
        {
          if ((_WORD)a5)
          {
            *__int16 v20 = bswap32(a5) >> 16;
            unsigned int v32 = v20 + 1;
            if (v50)
            {
              *unsigned int v32 = v48;
              v20 += 2;
            }

            else
            {
              ++v20;
            }
          }

          int64_t v33 = (char *)v20 - (char *)v17;
          unint64_t v34 = v13 - ((char *)v20 - (char *)v17);
          if (v34 >> 16) {
            goto LABEL_120;
          }
          if (v30 <= v34)
          {
            if (HIWORD(v30)) {
              goto LABEL_120;
            }
            size_t v35 = (unsigned __int16)v30;
          }

          else
          {
            size_t v35 = (unsigned __int16)(v13 - ((_WORD)v20 - (_WORD)v17));
          }

          BOOL result = (unint64_t)memcpy(v20, v31, v35);
          if (__CFADD__(v31, v35)) {
            goto LABEL_121;
          }
          BOOL v36 = v30 >= v35;
          v30 -= v35;
          if (!v36) {
            goto LABEL_122;
          }
          if (__OFADD__(v35, v33)) {
            goto LABEL_124;
          }
          if ((v35 + v33) >> 16) {
            goto LABEL_120;
          }
          uint64_t v37 = sub_1000ABB10(v55, 0, v54, v52, a3, v17, (unsigned __int16)(v35 + v33));
          BOOL result = *(void *)(a7 + 48);
          if (!result || (result & 7) != 0) {
            goto LABEL_123;
          }
          BOOL result = sub_10005BDD0(result, a7, v37);
          if (v37)
          {
            BOOL result = sub_1000AB4C4(*(void *)(v51 + 8), v37, 0, v49);
            uint64_t v38 = 2 * ((_DWORD)result != 0);
          }

          else
          {
            uint64_t v38 = 0LL;
          }

          if ((_WORD)a5 == 0xFFFF) {
            goto LABEL_120;
          }
          ++a5;
          if ((_DWORD)v38) {
            BOOL v39 = 1;
          }
          else {
            BOOL v39 = v30 == 0;
          }
          int v40 = v39;
          if (v37) {
            break;
          }
          v31 += v35;
          __int16 v20 = v17;
        }

        while (!v40);
        if ((v40 & 1) != 0)
        {
LABEL_117:
          operator delete[](v17);
          return v38;
        }

        unint64_t v41 = v46;
        if (v46) {
          goto LABEL_112;
        }
        BOOL result = (unint64_t)operator new(0x20uLL);
        if ((result & 0xF) == 0)
        {
          unint64_t v41 = result;
          if ((result & 7) == 0)
          {
            *(_BYTE *)BOOL result = -1;
            *(_DWORD *)(result + 4) = -1;
            uint64_t v42 = (int *)(result + 4);
            *(_WORD *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            *(_DWORD *)(result + 12) = 0;
            *(_WORD *)(result + 16) = 0;
            uint64_t v43 = (_WORD *)(result + 16);
            *(void *)(result + 24) = 0LL;
            if (v54 > 0xFF) {
              goto LABEL_120;
            }
            *(_BYTE *)BOOL result = v54;
            if ((v42 & 3) == 0)
            {
              *uint64_t v42 = a3;
              if ((v43 & 7) == 0)
              {
                *uint64_t v43 = v45;
                if ((((_BYTE)result + 24) & 7) == 0)
                {
                  *(void *)(result + 24) = a4;
                  *(void *)(a7 + 12_Block_object_dispose((const void *)(v1 - 48), 8) = result;
LABEL_112:
                  if ((v41 & 7) == 0)
                  {
                    unint64_t v44 = v41;
                    if (((v41 + 8) & 7) == 0)
                    {
                      *(_WORD *)(v41 + _Block_object_dispose((const void *)(v1 - 48), 8) = a5;
                      BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48LL))(a4);
                      if (((v44 + 12) & 3) == 0)
                      {
                        *(_DWORD *)(v44 + 12) = result - v30;
                        uint64_t v38 = 6LL;
                        goto LABEL_117;
                      }
                    }
                  }
                }
              }
            }
          }
        }

LABEL_123:
        __break(0x5516u);
        goto LABEL_124;
      }

        __break(0x5513u);
        goto LABEL_124;
      }
    }

LABEL_122:
      __break(0x5515u);
      goto LABEL_123;
    }

    __break(0x5512u);
    goto LABEL_123;
  }

LABEL_121:
    __break(0x5513u);
    goto LABEL_122;
  }

  if (!v50)
  {
    *(_WORD *)BOOL result = 0;
    if (result > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_121;
    }
    unsigned int v45 = 0;
    uint64_t v23 = 2LL;
    goto LABEL_49;
  }

  BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 48LL))(a4);
  unsigned int v21 = *(_DWORD *)(a7 + 104);
  if (v21 >= 4) {
    goto LABEL_125;
  }
  if (v21)
  {
    unsigned int v22 = result + 22;
  }

  else
  {
    unsigned int v22 = result + 26;
    if (result >= 0xFFFFFFE6)
    {
LABEL_124:
      __break(0x5500u);
      goto LABEL_125;
    }
  }

  unsigned int v24 = v13 - 4;
  if (v13 != 4)
  {
    unsigned int v45 = v22 / v24;
    if ((v22 / v24) >> 16) {
      goto LABEL_120;
    }
    _WORD *v17 = 0;
    v17[1] = bswap32(v45) >> 16;
    *((_BYTE *)v17 + 4) = v21;
    if (v17 == (_WORD *)-5LL) {
      goto LABEL_121;
    }
    int v25 = (_DWORD *)((char *)v17 + 5);
    unint64_t v26 = *(void *)(a7 + 112);
    if (v21)
    {
      *int v25 = bswap32(v26);
      uint64_t v23 = 9LL;
    }

    else
    {
      *(void *)int v25 = bswap64(v26);
      uint64_t v23 = 13LL;
    }

                __break(0x5518u);
LABEL_122:
                sub_1000D276C();
              }

                  __break(0x550Au);
                  goto LABEL_122;
                }

                sub_10008ED00((uint64_t)a1, v15);
                if (v31)
                {
                  unsigned int v32 = v31;
                  goto LABEL_90;
                }
              }

              else
              {
                __break(0x5518u);
              }

              sub_1000D276C();
            }
          }

          uint64_t v12 = 0;
          goto LABEL_33;
        }

LABEL_120:
      __break(0x5507u);
      goto LABEL_121;
    }

        ++v10;
        goto LABEL_121;
      case 8:
        *(_BYTE *)(a1 + 131) += v21;
        uint64_t v37 = *(_BYTE **)(a1 + 104);
        if (!v37) {
          goto LABEL_135;
        }
        *uint64_t v37 = v21;
        uint64_t v38 = *(void *)(a1 + 104);
        if (v38 == -1) {
          goto LABEL_133;
        }
        *(void *)(a1 + 104) = v38 + 1;
        *(_BYTE *)(a1 + 130) = 9;
        *(_DWORD *)(a1 + 6_Block_object_dispose((const void *)(v1 - 48), 8) = v21 << 8;
LABEL_68:
        BOOL v39 = *(unsigned __int16 *)(a1 + 122) - 1;
        LODWORD(v9) = HIWORD(v39);
        if (HIWORD(v39)) {
          goto LABEL_136;
        }
        *(_WORD *)(a1 + 122) = v39;
        goto LABEL_120;
      case 9:
        *(_BYTE *)(a1 + 131) += v21;
        int v40 = *(_BYTE **)(a1 + 104);
        if (!v40) {
          goto LABEL_135;
        }
        uint64_t *v40 = v21;
        uint64_t v9 = *(void *)(a1 + 104);
        if (v9 == -1LL) {
          goto LABEL_133;
        }
        unint64_t v41 = v9 + 1;
        *(void *)(a1 + 104) = v9 + 1;
        *(_DWORD *)(a1 + 68) |= v21;
        LODWORD(v9) = *(unsigned __int16 *)(a1 + 122) - 1;
        if (WORD1(v9)) {
          goto LABEL_136;
        }
        *(_WORD *)(a1 + 122) = v9;
        LOWORD(v9) = *(_WORD *)(a1 + 128);
        if (!(_WORD)v9) {
          goto LABEL_117;
        }
        LOBYTE(v9) = 0;
        *(_BYTE *)(a1 + 130) = 10;
        goto LABEL_116;
      case 0xA:
        uint64_t v42 = v19 + 1;
        if (v19 != -1LL)
        {
          uint64_t v43 = *(unsigned __int16 *)(a1 + 122);
          if (v42 >= v43) {
            unint64_t v44 = *(unsigned __int16 *)(a1 + 122);
          }
          else {
            unint64_t v44 = v19 + 1;
          }
          unsigned int v19 = v42 - v44;
          if (v42 < v44) {
            goto LABEL_134;
          }
          unsigned __int16 v13 = v43 >= v44;
          unsigned int v45 = v43 - v44;
          if (!v13) {
            goto LABEL_134;
          }
          if (v45 >> 16) {
            goto LABEL_136;
          }
          *(_WORD *)(a1 + 122) = v45;
          if (__CFADD__(v10, v44)) {
            goto LABEL_133;
          }
          memcpy(*(void **)(a1 + 104), v10, v44);
          if (v44)
          {
            unint64_t v46 = &v10[v44];
            unsigned int v47 = *(unsigned __int8 *)(a1 + 131);
            unsigned int v48 = v44;
            do
            {
              v47 += *v10;
              *(_BYTE *)(a1 + 131) = v47;
              if (v10 == (_BYTE *)-1LL) {
                goto LABEL_133;
              }
              ++v10;
              --v48;
            }

            while (v48);
            uint64_t v10 = v46;
          }

          uint64_t v9 = *(void *)(a1 + 104);
          if (__CFADD__(v9, v44))
          {
LABEL_133:
            __break(0x5513u);
            goto LABEL_134;
          }

          *(void *)(a1 + 104) = v9 + v44;
          LOWORD(v9) = *(_WORD *)(a1 + 122);
          if ((_WORD)v9) {
            LOBYTE(v9) = 0;
          }
          else {
            *(_BYTE *)(a1 + 130) = 11;
          }
LABEL_121:
          unsigned int v59 = v19 != 0;
          if (v18) {
            unsigned int v59 = 0;
          }
          if (!v59 && (v9 & 1) == 0) {
            goto LABEL_130;
          }
          continue;
        }

        __break(0x5500u);
LABEL_140:
        __break(0x5512u);
        return;
      case 0xB:
        unsigned int v49 = *(_BYTE *)(a1 + 131) + v21;
        *(_BYTE *)(a1 + 131) = v49;
        if (v49) {
          goto LABEL_113;
        }
        pthread_once(&stru_10011B908, sub_1000BC260);
        if (dword_10011B8F8[0])
        {
          sub_1000AC134(*(void *)(a1 + 8));
          if (*(_DWORD *)(a1 + 144))
          {
            BOOL v50 = *(void *)(a1 + 8);
            if (!v50 || (v50 & 7) != 0) {
              goto LABEL_135;
            }
            unint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 216LL))(v50);
            if (v51 >= 5) {
              goto LABEL_140;
            }
            __int16 v52 = (unsigned int *)qword_10011C680[v51];
            if (v52) {
              uint64_t v53 = (qword_10011C680[v51] & 7LL) == 0;
            }
            else {
              uint64_t v53 = 0;
            }
            if (!v53) {
              goto LABEL_135;
            }
            unsigned int v54 = sub_1000BC5A4();
            uint64_t v55 = *(_DWORD *)(a1 + 144);
            uint64_t v56 = v54 - v55;
            if (v54 < v55) {
              goto LABEL_134;
            }
            unsigned int v57 = v52[19];
            if (dword_10011B8F8[v57]) {
              (*(void (**)(unsigned int *, uint64_t, void, void))(*(void *)v52 + 104LL))( v52,  v56,  0LL,  0LL);
            }
          }

          uint64_t v58 = sub_1000BC5A4();
        }

        else
        {
          uint64_t v58 = 0;
        }

        unint64_t v17 = 0LL;
        unsigned int v19 = 0LL;
        LOBYTE(v9) = 0;
        *(_DWORD *)(a1 + 144) = v58;
        *(_DWORD *)(a1 + 14_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
        *(_BYTE *)(a1 + 130) = 12;
        *(void *)(a1 + 72) = a2;
        ++v10;
        *(void *)(a1 + 104) = 0LL;
        goto LABEL_121;
      default:
        goto LABEL_138;
    }
  }

LABEL_125:
    __break(0x550Au);
  }

  __break(0x5503u);
  return result;
}

              __break(0x5500u);
            }
          }

          else if (__p.__r_.__value_.__s.__size_)
          {
            unsigned int v24 = __p.__r_.__value_.__s.__size_;
            goto LABEL_63;
          }

          if ((v9 & 0xFFFFFFF7) == 0)
          {
            LOWORD(v25) = 0;
            goto LABEL_65;
          }

          BOOL result = (const char *)std::string::assign(&__p, "");
          unsigned int v24 = __p.__r_.__value_.__s.__size_;
          std::string::size_type size = (char)__p.__r_.__value_.__s.__size_;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unsigned int v24 = __p.__r_.__value_.__l.__size_;
          }
          goto LABEL_63;
        }

uint64_t sub_100062820(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  if (!result || (uint64_t v6 = result, (result & 7) != 0) || (result = (uint64_t)operator new(0x88uLL), (result & 0xF) != 0))
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  if (a3 < 4)
  {
    uint64_t v12 = result;
    if ((result & 7) == 0)
    {
      sub_100064854(result, *(void *)(v6 + 8), a2, a3, a4, a5, a6);
      BOOL result = *(void *)(v12 + 48);
      if (result)
      {
        if ((result & 7) == 0)
        {
          sub_10005BC28(result, v12);
          return 0LL;
        }
      }
    }

    goto LABEL_9;
  }

unint64_t sub_1000628DC(unint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)(a2 + 128);
  if (!v3)
  {
    __break(0x5518u);
    goto LABEL_16;
  }

  if (((a2 + 16) & 7) != 0) {
    goto LABEL_16;
  }
  uint64_t v4 = *(unsigned int *)(a2 + 16);
  if ((v4 + 32) > 0x3F)
  {
LABEL_17:
    __break(0x550Au);
    goto LABEL_18;
  }

  if ((v3 & 7) != 0 || ((v3 + 4) & 3) != 0)
  {
LABEL_16:
    __break(0x5516u);
    goto LABEL_17;
  }

  if (*(_DWORD *)(v3 + 4) < 0x10000u)
  {
    if ((((_BYTE)v3 + 24) & 7) == 0 && ((v3 + 8) & 7) == 0 && ((v3 + 12) & 3) == 0) {
      return sub_1000620F4( result,  v4,  (unsigned __int16)*(_DWORD *)(v3 + 4),  *(void *)(v3 + 24),  *(unsigned __int16 *)(v3 + 8),  *(_DWORD *)(v3 + 12),  a2);
    }
    goto LABEL_16;
  }

void sub_100062984(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5)
{
  if (!a1) {
    goto LABEL_39;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t v8 = sub_100061690(a1);
  if (!v8 || (v8 & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 112LL))(v8, a2);
  uint64_t v28 = v9;
  if (!v9 || (v9 & 7) != 0) {
    goto LABEL_39;
  }
  uint64_t v11 = v9;
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16LL))(v9);
  uint64_t v13 = sub_100061690(a1);
  if (!v13 || (v13 & 7) != 0) {
    goto LABEL_39;
  }
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 88LL))(v13);
  if (a3 != -1)
  {
    unint64_t v15 = a4 - 1LL;
    if (v15 >= 0x400)
    {
LABEL_40:
      __break(0x5507u);
      goto LABEL_41;
    }

    int v16 = v14;
    unint64_t v17 = (_WORD *)(a3 + 1);
    if (v14)
    {
      uint64_t v18 = 0LL;
      unsigned int v19 = 0;
      while (1)
      {
        uint64_t v20 = sub_100061690(a1);
        if (!v20) {
          break;
        }
        if ((v20 & 7) != 0) {
          break;
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 96LL))(v20, v18);
        *(void *)&__int128 v22 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v27[0] = v22;
        v27[1] = v22;
        uint64_t v23 = sub_100061690(a1);
        if (!v23 || (v23 & 7) != 0) {
          break;
        }
        (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(void *)v23 + 104LL))(v27, v23, v21);
        if (sub_100061A34((int *)v27))
        {
          if (WORD1(v21)) {
            goto LABEL_40;
          }
          if (!v17) {
            break;
          }
          _WORD *v17 = bswap32(v21) >> 16;
          if (v12)
          {
            unsigned int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 24LL))(v11, v21);
            if (HIWORD(v24)) {
              goto LABEL_40;
            }
          }

          else
          {
            unsigned int v24 = 0;
          }

          v17[1] = bswap32(v24) >> 16;
          if (v19 == 255) {
            goto LABEL_40;
          }
          v17 += 2;
          ++v19;
        }

        uint64_t v18 = (v18 + 1);
        if (v16 == (_DWORD)v18) {
          goto LABEL_34;
        }
      }
    }

    else
    {
      sub_1000CEAEC( 0,  4,  "%s:%d formatCount is zero.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoBase.cpp",  1388);
      unsigned int v19 = 0;
LABEL_34:
      if ((v15 >> 2) < v19) {
        sub_1000CEAEC( 0,  4,  "%s:%d format count too big! (%d > %d)\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoBase.cpp",  1394,  v19,  (v15 >> 2));
      }
      if (a5)
      {
        *a5 = (_BYTE)v17 - a3;
        sub_100064D0C(&v28);
        return;
      }
    }

uint64_t sub_100062BF8(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (!result || (uint64_t v5 = result, (result & 7) != 0) || !a2 || (a2 & 7) != 0)
  {
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  __int16 v13 = *(_WORD *)(a2 + 126);
  int v8 = *(_DWORD *)(a2 + 68);
  BOOL result = (uint64_t)sub_100062D14((void *)result, v8, v13, a5, a3);
  if ((_DWORD)result)
  {
    uint64_t v9 = result;
    sub_1000AD43C(a2);
    return v9;
  }

  unsigned int v10 = *(_DWORD *)(a2 + 64);
  if (v10 + 32 < 0x40)
  {
    BOOL result = *(void *)(v5 + 8);
    if (result)
    {
      if ((result & 7) == 0)
      {
        BOOL result = sub_10005758C(result, *(_DWORD *)(a2 + 64), 1);
        uint64_t v11 = *(void *)(v5 + 8);
        if (v11)
        {
          if ((v11 & 7) == 0)
          {
            int v12 = sub_100062E0C();
            sub_100057538(v11, v10, v12);
            uint64_t v9 = sub_1000AB4C4(*(void *)(v5 + 8), a2, a4, 1u);
            if ((_DWORD)v9) {
              sub_100062E78(v5, v8, &v13, 0LL, 0xFFFFu);
            }
            return v9;
          }
        }
      }
    }

    goto LABEL_15;
  }

void *sub_100062D14(void *result, int a2, __int16 a3, uint64_t a4, int a5)
{
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v5 = (uint64_t)result;
  pthread_mutex_lock((pthread_mutex_t *)(result + 139));
  BOOL result = sub_100062FB0((void *)v5);
  if (!result)
  {
    uint64_t v11 = 16LL;
    goto LABEL_12;
  }

  uint64_t v10 = (uint64_t)result;
  *BOOL result = 0LL;
  if ((((_BYTE)result + 12) & 3) != 0) {
    goto LABEL_13;
  }
  *((_DWORD *)result + 3) = a2;
  if ((((_BYTE)result + 16) & 7) != 0) {
    goto LABEL_13;
  }
  *((_WORD *)result + _Block_object_dispose((const void *)(v1 - 48), 8) = a3;
  result[3] = a4;
  BOOL result = sub_100062FF8();
  if (!__CFADD__((_DWORD)result, a5))
  {
    if ((((_BYTE)v10 + 8) & 7) == 0)
    {
      *(_DWORD *)(v10 + _Block_object_dispose((const void *)(v1 - 48), 8) = (_DWORD)result + a5;
      sub_100063064((uint64_t *)v5, v10);
      uint64_t v11 = 0LL;
LABEL_12:
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 1112));
      sub_100063144(v5);
      return (void *)v11;
    }

uint64_t *sub_100062E0C()
{
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000CE91C((uint64_t)v3, 1u);
  v2[1] = 0LL;
  v3[0] = off_100103838;
  v2[0] = 0LL;
  sub_1000CE9E8((uint64_t)v3, v2);
  uint64_t v0 = sub_100027C8C(v2);
  v3[0] = off_100103838;
  sub_1000CE94C(v3);
  return v0;
}

uint64_t sub_100062E78(uint64_t result, int a2, _WORD *a3, void *a4, unsigned int a5)
{
  if (result)
  {
    uint64_t v5 = result;
    if ((result & 7) == 0)
    {
      BOOL result = pthread_mutex_lock((pthread_mutex_t *)(result + 1112));
      if (a3)
      {
        if ((a3 & 1) == 0)
        {
          BOOL result = (uint64_t)sub_1000634C8(v5, a2, (unsigned __int16)*a3, a5);
          if (!result)
          {
            pthread_mutex_unlock((pthread_mutex_t *)(v5 + 1112));
            return 2LL;
          }

          if ((result & 7) == 0)
          {
            uint64_t v10 = *(void *)result;
            if (*(void *)result)
            {
              if ((__int16)*a3 == -1)
              {
                if ((v10 & 7) != 0 || ((v10 + 16) & 7) != 0) {
                  goto LABEL_22;
                }
                *a3 = *(_WORD *)(v10 + 16);
                if (!a4) {
                  goto LABEL_18;
                }
              }

              else if (!a4)
              {
LABEL_18:
                uint64_t v11 = sub_1000633E0(v5, v10);
                pthread_mutex_unlock((pthread_mutex_t *)(v5 + 1112));
                if (!(_DWORD)v11) {
                  sub_100063144(v5);
                }
                return v11;
              }

              if ((v10 & 7) == 0 && (((v10 + 24) | a4) & 7) == 0)
              {
                *a4 = *(void *)(v10 + 24);
                uint64_t v10 = *(void *)result;
                goto LABEL_18;
              }
            }

            else
            {
              __break(0x5518u);
            }
          }
        }
      }
    }
  }

void sub_100062F90(uint64_t a1)
{
  if (a1 && (a1 & 7) == 0) {
    abort();
  }
  __break(0x5516u);
}

void *sub_100062FB0(void *result)
{
  if ((unint64_t)(result + 3) >= 0xFFFFFFFFFFFFFFE0LL)
  {
LABEL_10:
    __break(0x5513u);
    return result;
  }

  unint64_t v1 = (void **)(result + 7);
  BOOL result = *v1;
  if (!*v1) {
    return result;
  }
  if ((result & 7) != 0)
  {
LABEL_9:
    __break(0x5516u);
    goto LABEL_10;
  }

  void *v1 = (void *)*result;
  return result;
}

uint64_t *sub_100062FF8()
{
  v3[0] = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000CE91C((uint64_t)v3, 1u);
  v2[1] = 0xAAAAAAAAAAAAAAAALL;
  v3[0] = off_100103838;
  v2[0] = 0xAAAAAAAAAAAAAAAALL;
  sub_1000CE9E8((uint64_t)v3, v2);
  uint64_t v0 = sub_100027C8C(v2);
  v3[0] = off_100103838;
  sub_1000CE94C(v3);
  return v0;
}

uint64_t *sub_100063064(uint64_t *result, uint64_t a2)
{
  if (result)
  {
    int v2 = result;
    if ((result & 7) == 0)
    {
      if (a2)
      {
        BOOL result = sub_100062FF8();
        if ((a2 & 7) == 0 && ((a2 + 8) & 7) == 0)
        {
          uint64_t v4 = v2 + 3;
          unsigned int v5 = *(_DWORD *)(a2 + 8);
          BOOL v6 = v5 >= result;
          unsigned int v7 = v5 - (_DWORD)result;
          if (!v6) {
            unsigned int v7 = 0;
          }
          if ((v4 & 7) == 0 && ((unint64_t)(v2 + 4) & 7) == 0)
          {
            *((_DWORD *)v2 + _Block_object_dispose((const void *)(v1 - 48), 8) = (_DWORD)result;
            while ((v4 & 7) == 0)
            {
              int v8 = (uint64_t **)v4;
              if ((((_BYTE)v4 + 8) & 7) != 0) {
                break;
              }
              unsigned int v9 = *((_DWORD *)v4 + 2);
              BOOL v6 = v9 >= result;
              unsigned int v10 = v9 - (_DWORD)result;
              if (v6) {
                unsigned int v11 = v10;
              }
              else {
                unsigned int v11 = 0;
              }
              uint64_t v4 = *v8;
              if (*v8)
              {
                unsigned int v13 = *((_DWORD *)v4 + 2);
                BOOL v6 = v13 >= result;
                unsigned int v14 = v13 - (_DWORD)result;
                if (!v6) {
                  unsigned int v14 = 0;
                }
                if (v7 < v11 || v7 > v14) {
                  continue;
                }
              }

              *int v8 = (uint64_t *)a2;
              *(void *)a2 = v4;
              return 0LL;
            }
          }
        }
      }

      else
      {
        __break(0x5518u);
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100063144(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_30;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    goto LABEL_29;
  }
  sub_1000612C4(*(void *)(a1 + 8));
  if (v3)
  {
    sub_1000612C4(v2);
    if (!v4 || (v4 & 7) != 0) {
      goto LABEL_30;
    }
    sub_10005EB3C(v4, *(_DWORD *)(a1 + 1176));
  }

  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1112));
  unsigned int v5 = (uint64_t *)(a1 + 24);
  if (((a1 + 24) & 7) != 0) {
    goto LABEL_30;
  }
  uint64_t v6 = *v5;
  if (!*v5)
  {
LABEL_27:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1112));
    return;
  }

  unsigned int v7 = sub_100062FF8();
  if ((v6 & 7) != 0 || ((v6 + 8) & 7) != 0)
  {
LABEL_30:
    __break(0x5516u);
    goto LABEL_31;
  }

  unsigned int v8 = *(_DWORD *)(v6 + 8);
  int v9 = v8 - v7;
  if (v8 <= v7)
  {
    if (*(unsigned __int8 *)(a1 + 1180) > 1u)
    {
LABEL_31:
      __break(0x550Au);
      return;
    }

    if (*(_BYTE *)(a1 + 1180)) {
      goto LABEL_27;
    }
    sub_1000612C4(v2);
    if (!v13) {
      goto LABEL_27;
    }
    sub_1000612C4(v2);
    if (!v14 || (v14 & 7) != 0) {
      goto LABEL_30;
    }
    uint64_t v15 = sub_10005EBF0(v14, *(_DWORD *)(a1 + 1176));
    if (v15)
    {
      if ((v15 & 7) == 0)
      {
        sub_1000BD638(v15);
        goto LABEL_27;
      }

      goto LABEL_30;
    }

void sub_10006329C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if ((a1 & 7) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1112));
      if ((((_BYTE)a1 + 24) & 7) == 0)
      {
        if (!*(void *)(a1 + 24))
        {
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1112));
          return;
        }

        uint64_t v4 = *(void *)(a1 + 24);
        while (1)
        {
          unsigned int v5 = sub_100062FF8();
          if ((v4 & 7) != 0 || ((v4 + 8) & 7) != 0) {
            break;
          }
          unsigned int v6 = *(_DWORD *)(v4 + 8);
          BOOL v7 = v6 >= v5;
          int v8 = v6 - v5;
          if (v8 == 0 || !v7 || v8 < 1)
          {
            *(_BYTE *)(a1 + 1180) = 1;
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1112));
            if ((((_BYTE)v4 + 12) & 3) != 0 || (((_BYTE)v4 + 16) & 7) != 0 || (((_BYTE)v4 + 24) & 7) != 0) {
              break;
            }
            (*(void (**)(uint64_t, void, void, void, uint64_t))(*(void *)a1 + 104LL))( a1,  *(unsigned int *)(v4 + 12),  *(unsigned __int16 *)(v4 + 16),  *(void *)(v4 + 24),  a2);
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 1112));
            *(_BYTE *)(a1 + 1180) = 0;
            sub_1000633E0(a1, v4);
            uint64_t v4 = *(void *)(a1 + 24);
            if (v4) {
              continue;
            }
          }

          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1112));
          sub_100063144(a1);
          return;
        }
      }
    }
  }

  __break(0x5516u);
}

uint64_t sub_1000633E0(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_15;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_15;
  }
  if (!a2) {
    goto LABEL_14;
  }
  if ((a2 & 7) != 0 || ((a2 + 12) & 3) != 0 || ((a2 + 16) & 7) != 0) {
    goto LABEL_15;
  }
  BOOL result = (uint64_t)sub_1000634C8(result, *(_DWORD *)(a2 + 12), *(unsigned __int16 *)(a2 + 16), 0xFFFFu);
  if (!result)
  {
    sub_1000CEAEC( 0,  4,  "%s:%d NULL pPrevNode.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoBase.cpp",  1999);
    return 2LL;
  }

  if ((result & 7) != 0) {
    goto LABEL_15;
  }
  if (*(void *)result != a2)
  {
LABEL_14:
    __break(0x5518u);
LABEL_15:
    __break(0x5516u);
    goto LABEL_16;
  }

  *(void *)BOOL result = *(void *)a2;
  if ((unint64_t)(v2 + 24) < 0xFFFFFFFFFFFFFFE0LL)
  {
    uint64_t v4 = (void *)(v2 + 56);
    if (((v2 + 56) & 7) == 0)
    {
      BOOL result = 0LL;
      *(void *)a2 = *v4;
      void *v4 = a2;
      return result;
    }

    goto LABEL_15;
  }

void *sub_1000634C8(uint64_t a1, int a2, unsigned int a3, unsigned int a4)
{
  if (!a1 || (a1 & 7) != 0 || (BOOL result = (void *)(a1 + 24), (result & 7) != 0))
  {
LABEL_24:
    __break(0x5516u);
  }

  else
  {
    while (1)
    {
      unsigned int v5 = (void *)*result;
      if (!*result) {
        break;
      }
      if ((v5 & 7) != 0
        || (((unint64_t)v5 + 12) & 3) != 0
        || ((unint64_t)(v5 + 2) & 7) != 0)
      {
        goto LABEL_24;
      }

      if (a2 == -1 || *((_DWORD *)v5 + 3) == a2)
      {
        BOOL v8 = a3 == 0xFFFF || *((unsigned __int16 *)v5 + 8) == a3;
        BOOL v9 = !v8;
        if (a3 <= a4 && !v9) {
          return result;
        }
      }

      BOOL result = (void *)*result;
    }
  }

  return 0LL;
}

uint64_t sub_100063558(uint64_t a1, int a2)
{
  if (!a1
    || (a1 & 7) != 0
    || (uint64_t v5 = a1 + 24,
        uint64_t v2 = (pthread_mutex_t *)(a1 + 1112),
        uint64_t result = pthread_mutex_lock((pthread_mutex_t *)(a1 + 1112)),
        (v5 & 7) != 0))
  {
LABEL_14:
    __break(0x5516u);
  }

  else
  {
    uint64_t v3 = 0LL;
    while (1)
    {
      uint64_t v5 = *(void *)v5;
      if (!v5) {
        break;
      }
      if ((v5 & 7) != 0 || ((v5 + 16) & 7) != 0) {
        goto LABEL_14;
      }
      if (*(unsigned __int16 *)(v5 + 16) == a2)
      {
        BOOL v8 = __CFADD__((_DWORD)v3, 1);
        uint64_t v3 = (v3 + 1);
        if (v8)
        {
          __break(0x5500u);
          return result;
        }
      }

      if ((v5 & 7) != 0) {
        goto LABEL_14;
      }
    }
  }

  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t sub_1000635F4( uint64_t a1, uint64_t a2, unsigned int (*a3)(void *, __int128 *), uint64_t a4)
{
  if (!a1
    || (a1 & 7) != 0
    || ((uint64_t v8 = a1 + 24,
         uint64_t v23 = (pthread_mutex_t *)(a1 + 1112),
         pthread_mutex_lock((pthread_mutex_t *)(a1 + 1112)),
         (a2 & 7) == 0)
      ? (BOOL v9 = a2 == 0)
      : (BOOL v9 = 1),
        !v9 ? (char v10 = 0) : (char v10 = 1),
        (v11 = (unsigned __int16 *)(a2 + 16), ((a2 + 16) & 7) != 0) ? (char v12 = 1) : (char v12 = v10),
        (v8 & 7) != 0))
  {
LABEL_37:
    __break(0x5516u);
  }

  else
  {
    uint64_t v13 = (_DWORD *)(a2 + 12);
    uint64_t v14 = (void *)(a1 + (a4 >> 1));
    while (1)
    {
      uint64_t v8 = *(void *)v8;
      if (!v8) {
        break;
      }
      BOOL v15 = (v8 & 7) == 0 && (((_BYTE)v8 + 16) & 7) == 0LL;
      if (!v15 || ((v8 + 12) & 3) != 0 || (v12 & 1) != 0) {
        goto LABEL_37;
      }
      int v16 = *v11;
      if (v16 == *(unsigned __int16 *)(v8 + 16) || v16 == 0xFFFF)
      {
        if (*v13 == *(_DWORD *)(v8 + 12) || *v13 == -1)
        {
          *(void *)&__int128 v19 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __int128 v24 = v19;
          __int128 v25 = v19;
          __int128 v20 = *(_OWORD *)(v8 + 16);
          *((void *)&v24 + 1) = *(void *)(v8 + 8);
          __int128 v25 = v20;
          *(void *)&__int128 v24 = 0LL;
          uint64_t v21 = a3;
          if ((a4 & 1) != 0) {
            uint64_t v21 = *(unsigned int (**)(void *, __int128 *))(*v14 + a3);
          }
          if (v21(v14, &v24)) {
            break;
          }
        }
      }

      if ((v8 & 7) != 0) {
        goto LABEL_37;
      }
    }
  }

  return pthread_mutex_unlock(v23);
}

uint64_t sub_100063738(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return *(void *)(result + 8);
  }
  __break(0x5516u);
  return result;
}

void sub_100063750(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v4)
    {
      sub_1000612C4(v4);
      if (!v6) {
        goto LABEL_22;
      }
      uint64_t v7 = v6;
      if ((v6 & 7) != 0) {
        goto LABEL_22;
      }
      sub_10005EB3C(v6, *(_DWORD *)(a1 + 1176));
      sub_10005D014(v7, *(_DWORD *)(a1 + 1176));
      *(_DWORD *)(a1 + 1176) = -1;
    }

    *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
    if (!a2) {
      return;
    }
    sub_1000612C4(a2);
    if (!v8)
    {
      sub_1000CEAEC( 0,  4,  "%s:%d Cannot get IncomingProcess object, cannot RegisterTimer\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoBase.cpp",  2153);
      return;
    }

    uint64_t v9 = v8;
    if ((v8 & 7) == 0)
    {
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64LL))(a1);
      int v11 = sub_10005E878(v9, 1, a2, v10);
      *(_DWORD *)(a1 + 1176) = v11;
      if (v11 == -1)
      {
        __break(0x5518u);
      }

      else
      {
        sub_1000612C4(a2);
        if (v12 && (v12 & 7) == 0)
        {
          sub_10005EB3C(v12, *(_DWORD *)(a1 + 1176));
          return;
        }
      }
    }

unint64_t sub_100063878(unint64_t result, unsigned int a2)
{
  if (!a2) {
    return a2 != 0;
  }
  if (!__CFADD__(result, a2))
  {
    unint64_t v2 = a2 + result - 1;
    do
    {
      uint64_t v3 = (_BYTE *)v2;
      if (v2 <= result) {
        break;
      }
      --v2;
    }

    while ((*v3 & 0xC0) == 0x80);
    return a2 != 0;
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_1000638CC(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_38;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_38;
  }
  int v4 = *(_DWORD *)(a2 + 64);
  uint64_t v5 = 4LL;
  if (v4 == 4) {
    int v6 = 5;
  }
  else {
    int v6 = 4;
  }
  uint64_t v7 = *(unsigned __int8 **)(a2 + 24);
  uint64_t result = sub_100036FF0();
  int v8 = *(_DWORD *)(a2 + 64);
  if (v8 == 4)
  {
    if (!v7) {
      goto LABEL_38;
    }
    unsigned int v9 = *v7;
    uint64_t v10 = 1LL;
  }

  else
  {
    uint64_t v10 = 0LL;
    unsigned int v9 = 1;
  }

  BOOL v11 = __CFADD__(v7, v10);
  uint64_t v12 = &v7[v10];
  if (!v11)
  {
    if (!v12) {
      goto LABEL_38;
    }
    if (v9 >= 4)
    {
LABEL_39:
      __break(0x550Au);
      goto LABEL_40;
    }

    if (v9)
    {
      if (v9 != 1) {
        return v5;
      }
      if (!result || (result & 7) != 0) {
        goto LABEL_38;
      }
      uint64_t v13 = 50LL;
    }

    else
    {
      uint64_t result = sub_100063A78(v2);
      if (!result || (result & 7) != 0) {
        goto LABEL_38;
      }
      uint64_t v13 = 56LL;
    }

    uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v13))();
    if (result)
    {
      uint64_t v14 = result;
      if ((result & 7) == 0)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result))
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 360LL))(v14))
          {
            uint64_t result = (uint64_t)operator new(0x78uLL);
            if ((result & 0xF) == 0)
            {
              uint64_t v15 = result;
              if ((result & 7) == 0)
              {
                sub_100064B38((dispatch_semaphore_t)result, *(void *)(v2 + 8), a2, v14);
                uint64_t result = *(void *)(v15 + 48);
                if (result)
                {
                  if ((result & 7) == 0)
                  {
                    sub_10005BC28(result, v15);
                    return 0LL;
                  }
                }
              }
            }

            goto LABEL_38;
          }

          uint64_t v5 = 18LL;
        }

        (*(void (**)(uint64_t))(*(void *)v14 + 8LL))(v14);
        return v5;
      }

uint64_t sub_100063A78(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = *(void *)(result + 1184);
    if (!result)
    {
      uint64_t result = sub_10002E834();
      *(void *)(v1 + 1184) = result;
    }
  }

  return result;
}

uint64_t sub_100063AB4(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_34;
  }
  int v2 = *(_DWORD *)(a2 + 64);
  uint64_t v3 = 4LL;
  if (v2 == 4) {
    int v4 = 5;
  }
  else {
    int v4 = 4;
  }
  uint64_t v5 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == 4)
  {
    if (!v5) {
      goto LABEL_34;
    }
    unsigned int v6 = *v5;
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    unsigned int v6 = 1;
  }

  BOOL v8 = __CFADD__(v5, v7);
  unsigned int v9 = &v5[v7];
  if (!v8)
  {
    if (!v9) {
      goto LABEL_34;
    }
    if (v6 < 4)
    {
      if (v6)
      {
        if (v6 != 1)
        {
          BOOL v11 = 0LL;
          goto LABEL_32;
        }

        uint64_t result = sub_100036FF0();
        if (result && (result & 7) == 0)
        {
          uint64_t v10 = 50LL;
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t result = sub_100063A78(result);
        if (result && (result & 7) == 0)
        {
          uint64_t v10 = 56LL;
LABEL_25:
          uint64_t result = (*(uint64_t (**)(void))(*(void *)result + 8 * v10))();
          BOOL v11 = (void *)result;
          if (result)
          {
            if ((result & 7) == 0)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result))
              {
                else {
                  uint64_t v3 = 18LL;
                }
              }

              goto LABEL_32;
            }

            goto LABEL_34;
          }

uint64_t sub_100063BF0(unsigned int a1, unsigned int a2, int a3)
{
  uint64_t v3 = a2 - a1;
  if (a2 < a1)
  {
    syslog(6, "%s: wrap detected on subtraction: %u - %u = %u", "CalcElapsedTimeInMs", a2, a1, a2 - a1);
    if ((v3 & 0x80000000) != 0)
    {
      if (a3)
      {
        syslog(6, "%s: out of range: %u - %u = %u, resetOnRange", "CalcElapsedTimeInMs", a2, a1, v3);
        return 0LL;
      }
    }
  }

  return v3;
}

uint64_t sub_100063C84(uint64_t result, uint64_t a2)
{
  if (!result || (result & 7) != 0 || (result = sub_1000B6CE0()) == 0 || (BOOL v3 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = sub_10008E168(result, a2);
    if (result) {
      return sub_10008E10C(v3, result);
    }
  }

  return result;
}

uint64_t sub_100063CE8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 264LL))(result);
    if ((_DWORD)result)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 216LL))(v1)) {
        return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 216LL))(v1) == 3
      }
            && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 288LL))(v1) == 1;
      else {
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t sub_100063D7C(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0))
  {
    __break(0x5516u);
  }

  else if ((*(unsigned int (**)(uint64_t))(*(void *)result + 216LL))(result))
  {
    return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 216LL))(v1) == 3
        && (*(unsigned int (**)(uint64_t))(*(void *)v1 + 288LL))(v1) == 1;
  }

  else
  {
    return 1LL;
  }

  return result;
}

uint64_t sub_100063DFC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) == 0)
    {
      if (result) {
        BOOL v2 = (result & 7) == 0;
      }
      else {
        BOOL v2 = 0;
      }
      if (v2) {
        return sub_1000AE298(result, 0);
      }
    }

    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100063E8C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) != 0) {
      goto LABEL_14;
    }
    if (result && (result & 7) == 0)
    {
      BOOL v3 = result;
      if (sub_1000AE24C(result, 0)) {
        return 1LL;
      }
      BOOL v4 = sub_1000AE298(v3, 0);
      uint64_t result = 0LL;
      if (v4) {
        return 1LL;
      }
    }

    else
    {
LABEL_14:
      __break(0x5516u);
    }
  }

  return result;
}

uint64_t sub_100063F38(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) == 0)
    {
      if (result) {
        BOOL v2 = (result & 7) == 0;
      }
      else {
        BOOL v2 = 0;
      }
      if (v2) {
        return sub_1000AE24C(result, 1u);
      }
    }

    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100063FC8(const void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t result = sub_1000438B8();
  if ((a1 & 7) == 0)
  {
    uint64_t v3 = result;
    if ((*(unsigned int (**)(const void *))(*(void *)a1 + 216LL))(a1) == 3)
    {
      if (result && (result & 7) == 0) {
        return sub_1000AE24C(result, 4u);
      }
      goto LABEL_12;
    }

    uint64_t result = (*(uint64_t (**)(const void *))(*(void *)a1 + 264LL))(a1);
    if ((_DWORD)result)
    {
      if (v3 && (v3 & 7) == 0) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 176LL))(v3);
      }
      goto LABEL_12;
    }

    return 0LL;
  }

uint64_t sub_100064088(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) == 0)
    {
      if (result) {
        BOOL v2 = (result & 7) == 0;
      }
      else {
        BOOL v2 = 0;
      }
      if (v2) {
        return sub_1000AE24C(result, 3u);
      }
    }

    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100064120(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) == 0)
    {
      if (result) {
        BOOL v2 = (result & 7) == 0;
      }
      else {
        BOOL v2 = 0;
      }
      if (v2) {
        return sub_1000AE24C(result, 5u);
      }
    }

    __break(0x5516u);
  }

  return result;
}

uint64_t sub_1000641B0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const void *)result;
    if ((result & 7) == 0)
    {
      if (result) {
        BOOL v2 = (result & 7) == 0;
      }
      else {
        BOOL v2 = 0;
      }
      if (v2) {
        return sub_1000AE24C(result, 6u);
      }
    }

    __break(0x5516u);
  }

  return result;
}

uint64_t sub_100064240(uint64_t a1)
{
  __int16 v4 = 0;
  uint64_t result = sub_1000B6CE0();
  if ((a1 + 32) >= 0x40)
  {
    __break(0x550Au);
  }

  else
  {
    sub_1000BBBAC(a1, (_BYTE *)&v4 + 1, (char *)&v4);
    return HIBYTE(v4) != 255 && v4 != 255;
  }

  return result;
}

uint64_t sub_1000642A4(uint64_t result)
{
  if ((result + 32) >= 0x40)
  {
    __break(0x550Au);
  }

  else
  {
    if (~(unint64_t)qword_10011C900 >= 8 * (unint64_t)result)
    {
      uint64_t result = qword_10011C900[result];
      if (result)
      {
        if ((result & 7) == 0) {
          return sub_10001864C(result);
        }
        goto LABEL_10;
      }

      return 0LL;
    }
  }

  __break(0x5513u);
LABEL_10:
  __break(0x5516u);
  return result;
}

uint64_t sub_1000642F8(uint64_t result, unsigned int a2, unsigned int *a3, int *a4)
{
  if (!result) {
    goto LABEL_37;
  }
  uint64_t v4 = result;
  if ((result & 7) != 0) {
    goto LABEL_37;
  }
  if (!a3) {
    return 0LL;
  }
  if (a2 >= 4)
  {
LABEL_38:
    __break(0x550Au);
    return result;
  }

  switch(a2)
  {
    case 2u:
      unsigned int v9 = *a3;
      uint64_t result = sub_100063A78(result);
      if (!result || (result & 7) != 0) {
        goto LABEL_37;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 448LL))(result, bswap32(v9));
      break;
    case 1u:
      unsigned int v7 = *a3;
      uint64_t result = sub_100036FF0();
      if (!result) {
        goto LABEL_37;
      }
      uint64_t v8 = result;
      if ((result & 7) != 0) {
        goto LABEL_37;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 400LL))(v8, bswap32(v7));
      break;
    case 0u:
      unint64_t v6 = *(void *)a3;
      if (*(void *)a3) {
        goto LABEL_9;
      }
      uint64_t result = sub_100036FF0();
      if (!result || (result & 7) != 0) {
        goto LABEL_37;
      }
      uint64_t result = sub_100036FF0();
      if (!result || (result & 7) != 0) {
        goto LABEL_37;
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)result + 592LL))(result) & 1) != 0)
      {
LABEL_9:
        uint64_t result = sub_100063A78(v4);
        if (result && (result & 7) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 456LL))( result,  bswap64(v6));
          if (!a4) {
            return result;
          }
          goto LABEL_33;
        }
      }

      else
      {
LABEL_30:
        uint64_t result = sub_100036FF0();
        if (result && (result & 7) == 0)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 384LL))(result);
          if (!a4) {
            return result;
          }
LABEL_33:
          if ((a4 & 3) == 0)
          {
            int v10 = 8;
            goto LABEL_35;
          }
        }
      }

uint64_t sub_10006447C(uint64_t result, unsigned int a2, unsigned int *a3, int *a4)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_25;
  }
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  if (a2 >= 4)
  {
LABEL_26:
    __break(0x550Au);
    return result;
  }

  if (a2 == 2)
  {
    uint64_t result = bswap32(*a3);
    if (a4)
    {
      if ((a4 & 3) == 0)
      {
        int v6 = 4;
        goto LABEL_19;
      }

      goto LABEL_25;
    }

    return result;
  }

  if (a2 == 1)
  {
    uint64_t result = sub_100036FF0();
    if (result && (result & 7) == 0)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 464LL))(result);
      if ((result & 1) != 0) {
        return -1;
      }
      unsigned int v7 = bswap32(*a3);
      if (!a4) {
        return v7;
      }
      if ((a4 & 3) == 0)
      {
        *a4 = 4;
        return v7;
      }
    }

void sub_10006455C(uint64_t a1, int a2, unsigned int a3, int a4, char a5)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  char v11 = -86;
  __int16 v10 = -21846;
  if ((a2 + 32) >= 0x40)
  {
LABEL_12:
    __break(0x550Au);
    goto LABEL_13;
  }

  char v9 = a2;
  if (&v9 == (char *)-1LL)
  {
LABEL_13:
    __break(0x5500u);
    goto LABEL_14;
  }

  __int16 v10 = __rev16(a3);
  if ((unint64_t)&v9 < 0xFFFFFFFFFFFFFFFDLL)
  {
    char v11 = a5;
    uint64_t v7 = sub_1000B6CE0();
    if ((v7 & 7) == 0)
    {
      if (v7)
      {
        uint64_t v8 = sub_10008C2EC(v7, *(void *)(a1 + 8), 0);
        if (v8)
        {
          if ((v8 & 7) == 0)
          {
            sub_10007852C(v8, 0xDu, &v9, 4u, 2u, 0LL, a4);
            return;
          }
        }
      }
    }

    goto LABEL_11;
  }

uint64_t sub_100064620(uint64_t result, unsigned int a2, char a3)
{
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_19;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = sub_100036FF0();
  v8[0] = 0;
  if (a2 >= 0x20)
  {
LABEL_20:
    __break(0x550Au);
    return result;
  }

  uint64_t v6 = result;
  v8[1] = a2;
  uint64_t result = *(void *)(v3 + 8);
  if (!result) {
    goto LABEL_19;
  }
  if ((result & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t v10 = sub_10001864C(result);
  LOBYTE(v9) = a3;
  uint64_t result = *(void *)(v3 + 8);
  if (!result || (result & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t result = sub_100057A4C(result, 2u, 0LL, (uint64_t)v8, 24);
  if (a2 != 4)
  {
    if (a2 != 3) {
      return result;
    }
    BOOL v7 = (v6 & 7) == 0;
    if (!v6) {
      goto LABEL_19;
    }
LABEL_16:
    if (v7) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 656LL))(v6);
    }
LABEL_19:
    __break(0x5516u);
    goto LABEL_20;
  }

  if (!v6 || (v6 & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 408LL))(v6);
  if (result <= 0x7CF)
  {
    BOOL v7 = 1;
    goto LABEL_16;
  }

  return result;
}

uint64_t sub_10006472C(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (sub_100064620(result, 3u, 1), sub_100064620(v1, 3u, 0), (uint64_t result = sub_100036FF0()) == 0)
    || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 432LL))(result);
    if ((_DWORD)result)
    {
      sub_100064620(v1, 8u, 1);
      return sub_100064620(v1, 8u, 0);
    }
  }

  return result;
}

uint64_t sub_1000647C0(uint64_t result)
{
  if (!result
    || (uint64_t v1 = result, (result & 7) != 0)
    || (sub_100064620(result, 4u, 1), sub_100064620(v1, 4u, 0), (uint64_t result = sub_100036FF0()) == 0)
    || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 432LL))(result);
    if ((_DWORD)result)
    {
      sub_100064620(v1, 8u, 1);
      return sub_100064620(v1, 8u, 0);
    }
  }

  return result;
}

uint64_t sub_100064854(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, int a7)
{
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v7 = result;
  if ((result & 7) != 0 || !a3 || (a3 & 7) != 0) {
    goto LABEL_11;
  }
  int v9 = *(_DWORD *)(a3 + 64);
  uint64_t result = (uint64_t)sub_10005B1F4( (dispatch_semaphore_t)result,  a2,  v9,  *(_WORD *)(a3 + 126),  *(_DWORD *)(a3 + 68),  a3,  5,  (dispatch_once_t *)1);
  *(void *)uint64_t v7 = off_100105D70;
  if (!a2 || (a2 & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    goto LABEL_12;
  }

  unsigned int v15 = *(_DWORD *)(a3 + 64);
  if (v15 + 32 < 0x40)
  {
    uint64_t result = sub_1000573E0(a2, v15);
    *(void *)(v7 + 96) = result;
    if (a4 < 4)
    {
      *(_DWORD *)(v7 + 104) = a4;
      *(void *)(v7 + 112) = a5;
      *(_DWORD *)(v7 + 1memset(md, 170, 20) = a6;
      *(_DWORD *)(v7 + 124) = a7;
      *(void *)(v7 + 12_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
      return v7;
    }
  }

uint64_t *sub_10006493C(uint64_t *result)
{
  return result;
}

void sub_100064950(uint64_t *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = sub_100064A90(a1);
    operator delete(v1);
  }

uint64_t sub_100064974(uint64_t result)
{
  if (!result) {
    goto LABEL_23;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_23;
  }
  uint64_t result = *(void *)(result + 96);
  BOOL v3 = (result & 7) == 0 && result != 0;
  if (*(void *)(v1 + 128))
  {
    if (v3)
    {
      int v4 = sub_1000628DC(result, v1);
      uint64_t v5 = v4 == 6;
      if (!v4) {
        return v5;
      }
      goto LABEL_16;
    }

uint64_t *sub_100064A90(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      *uint64_t result = (uint64_t)off_100105D70;
      uint64_t result = (uint64_t *)result[16];
      if (!result) {
        return sub_10005B360(v1);
      }
      if ((result & 7) == 0)
      {
        BOOL v2 = sub_100064AE8(result);
        operator delete(v2);
        v1[16] = 0LL;
        return sub_10005B360(v1);
      }
    }
  }

  __break(0x5516u);
  return result;
}

void *sub_100064AE8(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = (void *)result[3];
      if (!result) {
        return v1;
      }
      if ((result & 7) == 0)
      {
        (*(void (**)(void *))(*result + 8LL))(result);
        v1[3] = 0LL;
        return v1;
      }
    }
  }

  __break(0x5516u);
  return result;
}

dispatch_semaphore_t sub_100064B38(dispatch_semaphore_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result) {
    goto LABEL_10;
  }
  int v4 = result;
  int v6 = *(_DWORD *)(a3 + 64);
  uint64_t result = sub_10005B1F4(result, a2, v6, *(_WORD *)(a3 + 126), *(_DWORD *)(a3 + 68), a3, 5, 0LL);
  void *v4 = off_100105D98;
  if (!a2 || (a2 & 7) != 0)
  {
LABEL_10:
    __break(0x5516u);
    goto LABEL_11;
  }

  unsigned int v9 = *(_DWORD *)(a3 + 64);
  if (v9 + 32 < 0x40)
  {
    v4[12] = sub_1000573E0(a2, v9);
    v4[14] = a4;
    return (dispatch_semaphore_t)v4;
  }

uint64_t *sub_100064BF0(uint64_t *result)
{
  return result;
}

void sub_100064C04(uint64_t *a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t v1 = sub_10005B360(a1);
    operator delete(v1);
  }

uint64_t sub_100064C28(uint64_t result)
{
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 96);
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = sub_100063A78(result);
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(v1 + 96);
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
  BOOL v5 = result && (result & 7) == 0;
  if (v5
    && (uint64_t v6 = sub_10001864C(result),
        char v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 608LL))(v3, v4, v6),
        (uint64_t result = *(void *)(v1 + 96)) != 0)
    && (result & 7) == 0)
  {
    int v8 = *(_DWORD *)(v1 + 16);
    if ((v8 + 32) < 0x40)
    {
      sub_10006455C(result, v8, *(unsigned __int16 *)(v1 + 20), *(_DWORD *)(v1 + 24), v7 ^ 1);
      return 0LL;
    }
  }

  else
  {
LABEL_21:
    __break(0x5516u);
  }

  __break(0x550Au);
  return result;
}

void *sub_100064D0C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = (void *)*result;
      if (!*v1) {
        return v1;
      }
      if ((result & 7) == 0)
      {
        (*(void (**)(void *))(*result + 8LL))(result);
        return v1;
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100064D58(uint64_t **a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_100064DE0((uint64_t)v2, *v2);
    uint64_t v4 = *a1;
    if (*a1 && (v4 & 7) == 0 && (((_BYTE)v4 + 16) & 7) == 0)
    {
      if (v4[2] - *v4 >= 0)
      {
        operator delete((void *)*v4);
        return;
      }

      goto LABEL_16;
    }

uint64_t sub_100064DE0(uint64_t result, uint64_t a2)
{
  if (result && (result & 7) == 0)
  {
    unint64_t v2 = *(void *)(result + 8);
    if (v2 == a2)
    {
LABEL_7:
      *(void *)(result + _Block_object_dispose((const void *)(v1 - 48), 8) = a2;
      return result;
    }

    if ((((_BYTE)result + 16) & 7) == 0)
    {
      while (v2 > 3)
      {
        v2 -= 4LL;
        if (v2 == a2) {
          goto LABEL_7;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

void sub_100064E28(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_17;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t v4 = (_OWORD *)(a1 + 1404);
  sub_10006107C(a1, a2, 10);
  *(void *)a1 = off_100105DD8;
  *(void *)(a1 + 1392) = 0LL;
  *(_BYTE *)(a1 + 1400) = 0;
  _OWORD *v4 = xmmword_1000DE980;
  *(_OWORD *)(a1 + 14memset(md, 170, 20) = xmmword_1000DE990;
  *(_DWORD *)(a1 + 1436) = -1;
  sub_100064F90(v5);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1200), 0LL);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1264), 0LL);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1328), 0LL);
  sub_1000612C4(a2);
  if (!v6 || (v6 & 7) != 0) {
    goto LABEL_17;
  }
  int v7 = sub_10005E878(v6, 3000, a2, 10);
  *(_DWORD *)(a1 + 1432) = v7;
  if (v7 == -1) {
    goto LABEL_16;
  }
  sub_1000612C4(a2);
  if (!v8) {
    goto LABEL_17;
  }
  if ((v8 & 7) != 0) {
    goto LABEL_17;
  }
  sub_10005EB3C(v8, *(_DWORD *)(a1 + 1432));
  sub_1000612C4(a2);
  if (!v9 || (v9 & 7) != 0) {
    goto LABEL_17;
  }
  int v10 = sub_10005E878(v9, 500, a2, 10);
  *(_DWORD *)(a1 + 1436) = v10;
  if (v10 == -1)
  {
LABEL_16:
    __break(0x5518u);
  }

  else
  {
    sub_1000612C4(a2);
    if (v11)
    {
      if ((v11 & 7) == 0)
      {
        sub_10005EB3C(v11, *(_DWORD *)(a1 + 1436));
        uint64_t v12 = sub_100061274();
        if (v12)
        {
          if ((v12 & 7) == 0)
          {
            sub_10008C5A8(v12, 10, 108, a2);
            return;
          }
        }
      }
    }
  }

void sub_100064F90(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 14memset(md, 170, 20) = 0;
  *(void *)(a1 + 1424) = 0LL;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1404) = xmmword_1000DE980;
  *(_BYTE *)(a1 + 1400) = 0;
  *(void *)(a1 + 1392) = 0LL;
  *(_DWORD *)(a1 + 1196) = 0;
  sub_1000612C4(*(void *)(a1 + 8));
  if (!v2) {
    return;
  }
  if (*(_DWORD *)(a1 + 1432) != -1)
  {
    sub_1000612C4(*(void *)(a1 + 8));
    if (v3 && (v3 & 7) == 0)
    {
      sub_10005EB3C(v3, *(_DWORD *)(a1 + 1432));
      goto LABEL_8;
    }

void sub_10006504C(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100064E28(a1, a2);
  }
}

void sub_100065060(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_15;
  }
  *(void *)a1 = off_100105DD8;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1328));
  if (*(unsigned __int8 *)(a1 + 1401) < 2u)
  {
    if (!*(_BYTE *)(a1 + 1401))
    {
LABEL_8:
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1328));
      sub_1000612C4(*(void *)(a1 + 8));
      if (v4)
      {
        if ((v4 & 7) == 0)
        {
          sub_10005D014(v4, *(_DWORD *)(a1 + 1432));
          *(_DWORD *)(a1 + 1432) = -1;
          sub_1000612C4(*(void *)(a1 + 8));
          if (v5)
          {
            if ((v5 & 7) == 0)
            {
              sub_10005D014(v5, *(_DWORD *)(a1 + 1436));
              *(_DWORD *)(a1 + 1436) = -1;
              uint64_t v6 = sub_100061274();
              if (v6)
              {
                if ((v6 & 7) == 0)
                {
                  sub_10008C5A8(v6, 10, 0, *(void *)(a1 + 8));
                  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1328));
                  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1264));
                  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1200));
                  sub_100061324(a1);
                  return;
                }
              }
            }
          }
        }
      }

      goto LABEL_15;
    }

    v7[0] = 2LL;
    uint64_t v2 = *(void *)(a1 + 1392);
    v7[1] = 0LL;
    void v7[2] = v2;
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3 && (v3 & 7) == 0)
    {
      sub_100057A4C(v3, 0xAu, 0LL, (uint64_t)v7, 24);
      sub_100064F90(a1);
      goto LABEL_8;
    }

void sub_100065194(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100065060(a1);
  }
}

void sub_1000651A8(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_100065060(a1);
    operator delete(v1);
  }

uint64_t sub_1000651CC(uint64_t result)
{
  if (!result) {
    return 0LL;
  }
  uint64_t v1 = result;
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 256LL))(result);
  if (!(_DWORD)result) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(v1 + 32);
  if (!v2) {
    return 0LL;
  }
  if ((v2 & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t v3 = (uint64_t *)(v2 + 40);
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t result = sub_1000614B8(10LL, *v3);
    uint64_t v5 = result;
    if (result)
    {
      if ((result & 7) != 0) {
        goto LABEL_27;
      }
      goto LABEL_16;
    }

    return v5;
  }

  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t result = sub_10008C1FC(result, 10);
  uint64_t v5 = result;
  if (!result) {
    return v5;
  }
  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
  uint64_t v4 = result;
  if (!result) {
    return 0LL;
  }
LABEL_16:
  if ((v4 & 7) != 0) {
    goto LABEL_27;
  }
  uint64_t result = sub_10005789C(v4, 0xAu);
  if ((v5 & 7) != 0 || ((v5 + 1400) & 7) != 0) {
    goto LABEL_27;
  }
  if (*(unsigned __int8 *)(v5 + 1400) < 2u)
  {
    if (!*(_BYTE *)(v5 + 1400))
    {
      uint64_t v5 = 0LL;
      goto LABEL_26;
    }

    if (((v5 + 1404) & 3) == 0)
    {
      uint64_t v5 = (~*(_DWORD *)(v5 + 1404) & 0x1C0) == 0;
LABEL_26:
      sub_1000578E8(v4, 0xAu);
      return v5;
    }

uint64_t sub_100065308(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = result & 7;
    if ((result & 7) == 0)
    {
      if (a2 <= 22049)
      {
        if (a2 > 11999)
        {
          if (a2 == 12000)
          {
            int v3 = 4;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          }

          if (a2 == 16000)
          {
            int v3 = 8;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          }
        }

        else
        {
          if (a2 == 8000)
          {
            int v3 = 1;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          }

          if (a2 == 11025)
          {
            int v3 = 2;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          }
        }
      }

      else if (a2 <= 31999)
      {
        if (a2 == 22050)
        {
          int v3 = 16;
          return (*(_DWORD *)(result + 1404) & v3) != 0;
        }

        if (a2 == 24000)
        {
          int v3 = 32;
          return (*(_DWORD *)(result + 1404) & v3) != 0;
        }
      }

      else
      {
        switch(a2)
        {
          case 32000:
            int v3 = 64;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          case 44100:
            int v3 = 128;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
          case 48000:
            int v3 = 256;
            return (*(_DWORD *)(result + 1404) & v3) != 0;
        }
      }

      return v2;
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_100065400(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_84;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = (uint64_t *)(v3 + 40);
  uint64_t v6 = result;
  uint64_t result = *v4;
  if (!*v4) {
    return 0LL;
  }
  if ((result & 7) != 0) {
    goto LABEL_84;
  }
  uint64_t result = sub_100057A88(result);
  if (!result || (result & 7) != 0) {
    goto LABEL_84;
  }
  uint64_t v8 = result;
  sub_10005789C(result, 0xAu);
  uint64_t result = sub_1000614B8(10LL, v8);
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v9 = result;
  if ((result & 7) != 0) {
    goto LABEL_84;
  }
  uint64_t result = sub_1000651CC(a2);
  if (!(_DWORD)result)
  {
LABEL_27:
    uint64_t v6 = 0LL;
LABEL_54:
    sub_1000578E8(v8, 0xAu);
    return v6;
  }

  if ((int)v6 > 22049)
  {
    if ((int)v6 > 31999)
    {
      if ((_DWORD)v6 == 32000 || (_DWORD)v6 == 44100 || (_DWORD)v6 == 48000) {
        goto LABEL_54;
      }
      goto LABEL_56;
    }

    if ((_DWORD)v6 != 22050)
    {
      if ((_DWORD)v6 == 22255 || (_DWORD)v6 == 24000)
      {
        if (((v9 + 1404) & 3) == 0)
        {
          BOOL v10 = (*(_BYTE *)(v9 + 1404) & 0x20) == 0;
          unsigned int v11 = 24000;
LABEL_44:
          unsigned int v12 = 48000;
          goto LABEL_51;
        }

        goto LABEL_84;
      }

      goto LABEL_56;
    }

    if (((v9 + 1404) & 3) != 0) {
      goto LABEL_84;
    }
    BOOL v10 = (*(_BYTE *)(v9 + 1404) & 0x10) == 0;
    unsigned int v11 = 22050;
LABEL_47:
    unsigned int v12 = 44100;
    goto LABEL_51;
  }

  if ((int)v6 <= 11126)
  {
    if ((_DWORD)v6 == 8000)
    {
      if (((v9 + 1404) & 3) != 0) {
        goto LABEL_84;
      }
      BOOL v10 = (*(_BYTE *)(v9 + 1404) & 1) == 0;
      unsigned int v11 = 8000;
      goto LABEL_50;
    }

    if ((_DWORD)v6 == 11025)
    {
      if (((v9 + 1404) & 3) != 0) {
        goto LABEL_84;
      }
      BOOL v10 = (*(_BYTE *)(v9 + 1404) & 2) == 0;
      unsigned int v11 = 11025;
      goto LABEL_47;
    }

LABEL_69:
          if (((v9 + 1404) & 3) != 0) {
            goto LABEL_84;
          }
          if ((*(_BYTE *)(v9 + 1404) & 8) != 0)
          {
            uint64_t v6 = 16000LL;
            goto LABEL_54;
          }

          goto LABEL_73;
        }

      __break(0x5518u);
      goto LABEL_70;
    }

    goto LABEL_53;
  }

  if (v8 == 3)
  {
    __int16 v27 = (_OWORD **)(v5 + 8);
    if (((v5 + 8) & 7) != 0) {
      goto LABEL_70;
    }
    uint64_t v28 = *v27;
    if (*v27)
    {
      uint64_t result = (uint64_t)operator new(0x10uLL);
      if (!(result & 0xF | v28 & 3) && (result & 3) == 0)
      {
        uint64_t result = (uint64_t)sub_1000A307C((_OWORD *)result, v28);
        if (((v9 + 8) & 7) == 0)
        {
          *(void *)(v9 + _Block_object_dispose((const void *)(v1 - 48), 8) = result;
          goto LABEL_55;
        }
      }

      goto LABEL_70;
    }

    goto LABEL_53;
  }

  if (v8 != 4) {
    goto LABEL_55;
  }
  int v16 = (void *)(v5 + 8);
  if (((v5 + 8) & 7) == 0)
  {
    if (*v16)
    {
      unint64_t v17 = (unint64_t *)(v5 + 16);
      if (((v5 + 16) & 7) != 0) {
        goto LABEL_70;
      }
      uint64_t v18 = *v17;
      if (*v17)
      {
        uint64_t result = (uint64_t)operator new[](v18 & 0xFFFFFFFFFFFFFFFELL);
        if ((result & 1) == 0)
        {
          __int128 v19 = (uint64_t *)(v9 + 8);
          if (((v9 + 8) & 7) == 0)
          {
            *__int128 v19 = result;
            if (v18 >= 2)
            {
              __int128 v20 = 0LL;
              while (1)
              {
                uint64_t v21 = *v16;
                if (__CFADD__(*v16, 2 * v20)) {
                  goto LABEL_71;
                }
                __int128 v22 = (_WORD *)(v21 + 2 * v20);
                if (v21) {
                  uint64_t v23 = (v22 & 1) == 0LL;
                }
                else {
                  uint64_t v23 = 0;
                }
                if (!v23) {
                  goto LABEL_70;
                }
                __int128 v24 = *v19;
                if (__CFADD__(*v19, 2 * v20)) {
                  goto LABEL_71;
                }
                if (!v24) {
                  goto LABEL_70;
                }
                __int128 v25 = (_WORD *)(v24 + 2 * v20);
                *__int128 v25 = *v22;
                unint64_t v26 = __CFADD__((_DWORD)v20, 1);
                __int128 v20 = (v20 + 1);
                if (v26) {
                  goto LABEL_73;
                }
              }
            }

            goto LABEL_55;
          }
        }

        goto LABEL_70;
      }

      goto LABEL_69;
    }

    __break(0x5516u);
LABEL_70:
    __break(0x5513u);
LABEL_71:
    __break(0x5515u);
LABEL_72:
    __break(0x550Au);
LABEL_73:
    __break(0x5512u);
  }

LABEL_84:
  __break(0x5516u);
  return result;
}

          *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
          sub_1000612C4(*(void *)(a1 + 8));
          if (v29)
          {
            sub_1000612C4(*(void *)(a1 + 8));
            if (v30 && (v30 & 7) == 0)
            {
              sub_10005EA88(v30, *(_DWORD *)(a1 + 2744));
              return;
            }

            goto LABEL_93;
          }

          return;
        }

        break;
      case 64:
        if (a3 < 0xFFFFFFFE)
        {
          if ((_DWORD)a3)
          {
            if ((_DWORD)a3 == 6)
            {
              v31[0] = 0xAAAAAAAAAAAAAAAALL;
              v31[1] = 0xAAAAAAAAAAAAAAAALL;
              sub_1000CE91C((uint64_t)v31, 1u);
              v31[0] = off_100103838;
              if (((a1 + 2272) & 7) == 0)
              {
                sub_1000CE9E8((uint64_t)v31, (__darwin_time_t *)(a1 + 2272));
                v31[0] = off_100103838;
                sub_1000CE94C(v31);
                return;
              }

              goto LABEL_93;
            }
          }

          else
          {
            *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            *(_BYTE *)(a1 + 2756) = 0;
          }

          return;
        }

        goto LABEL_69;
      case 512:
        if ((((_BYTE)a1 - 72) & 7) != 0) {
          goto LABEL_93;
        }
        BOOL v10 = *(_DWORD *)(a1 + 1788);
        unsigned int v11 = v10 + 1;
        if (v10 != -1)
        {
          unsigned int v12 = *(_DWORD *)(a1 + 1208);
          *(_DWORD *)(a1 + 178_Block_object_dispose((const void *)(v1 - 48), 8) = v11;
          if (*(unsigned __int8 *)(a1 + 2748) <= 1u)
          {
            if (*(_BYTE *)(a1 + 2748) || (v12 & 0x10010) == 0) {
              return;
            }
            goto LABEL_84;
          }

          goto LABEL_94;
        }

        break;
      default:
        return;
    }

    *BOOL v10 = v11;
    return;
  }

  BOOL v36 = *v9;
  if (v22 != -1)
  {
    if (!v36 || (v36 & 7) != 0) {
      goto LABEL_96;
    }
    sub_1000ADF50(v36, 128LL, v22);
    BOOL v36 = *v9;
  }

  if (!v36 || (v36 & 7) != 0) {
    goto LABEL_96;
  }
  sub_1000ADF50(v36, 8LL, 0);
  *BOOL v10 = v11;
  if (v22 != -1) {
    goto LABEL_92;
  }
}

    __break(0x5513u);
    goto LABEL_85;
  }

  if (v10 > 127)
  {
    if (v10 != 128)
    {
      if (v10 == 130)
      {
        unint64_t v17 = v11 != 22;
LABEL_71:
        uint64_t v6 = (2 * v17);
LABEL_77:
        __int128 v24 = *(void *)(a1 + 8);
        if (v24)
        {
          if ((v24 & 7) == 0)
          {
            sub_10005758C(v24, 0xCu, 1);
            __int128 v25 = *(void *)(a1 + 8);
            if (v25)
            {
              if ((v25 & 7) == 0)
              {
                unint64_t v26 = sub_100062E0C();
                sub_100057538(v25, 0xCu, v26);
                goto LABEL_11;
              }
            }
          }
        }

        goto LABEL_82;
      }

uint64_t sub_100065758(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_22;
    }
    uint64_t v2 = *(void *)(a2 + 32);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)(v2 + 40);
      int v5 = result;
      uint64_t result = *v3;
      if (*v3)
      {
        if ((result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t result = sub_100057A88(result);
        if (!result || (result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v7 = result;
        sub_10005789C(result, 0xAu);
        uint64_t result = sub_1000614B8(10LL, v7);
        if (!result) {
          return sub_1000578E8(v7, 0xAu);
        }
        if ((result & 7) == 0 && ((result + 1408) & 7) == 0)
        {
          *(_DWORD *)(result + 140_Block_object_dispose((const void *)(v1 - 48), 8) = v5;
          sub_100065828(v7);
          return sub_1000578E8(v7, 0xAu);
        }

uint64_t sub_100065828(uint64_t result)
{
  uint64_t v1 = result;
  if (result) {
    goto LABEL_5;
  }
  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0)
  {
LABEL_11:
    __break(0x5516u);
    return result;
  }

  uint64_t result = sub_10008C35C(result, 10);
  uint64_t v1 = result;
  if (result)
  {
LABEL_5:
    if ((v1 & 7) == 0)
    {
      sub_10005789C(v1, 0xAu);
      uint64_t result = sub_1000614B8(10LL, v1);
      if (!result) {
        return sub_1000578E8(v1, 0xAu);
      }
      if ((result & 7) == 0)
      {
        sub_100065E80(result, 0);
        return sub_1000578E8(v1, 0xAu);
      }
    }

    goto LABEL_11;
  }

  return result;
}

uint64_t sub_1000658B4(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_22;
    }
    uint64_t v2 = *(void *)(a2 + 32);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)(v2 + 40);
      int v5 = result;
      uint64_t result = *v3;
      if (*v3)
      {
        if ((result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t result = sub_100057A88(result);
        if (!result || (result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v7 = result;
        sub_10005789C(result, 0xAu);
        uint64_t result = sub_1000614B8(10LL, v7);
        if (!result) {
          return sub_1000578E8(v7, 0xAu);
        }
        if ((result & 7) == 0 && ((result + 1416) & 7) == 0)
        {
          *(_DWORD *)(result + 1416) = v5;
          sub_100065828(v7);
          return sub_1000578E8(v7, 0xAu);
        }

uint64_t sub_100065984(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    if ((a2 & 7) != 0) {
      goto LABEL_22;
    }
    uint64_t v2 = *(void *)(a2 + 32);
    if (v2)
    {
      uint64_t v3 = (uint64_t *)(v2 + 40);
      int v5 = result;
      uint64_t result = *v3;
      if (*v3)
      {
        if ((result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t result = sub_100057A88(result);
        if (!result || (result & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v7 = result;
        sub_10005789C(result, 0xAu);
        uint64_t result = sub_1000614B8(10LL, v7);
        if (!result) {
          return sub_1000578E8(v7, 0xAu);
        }
        if ((result & 7) == 0 && ((result + 1412) & 3) == 0)
        {
          *(_DWORD *)(result + 1412) = v5;
          sub_100065828(v7);
          return sub_1000578E8(v7, 0xAu);
        }

uint64_t sub_100065A54(uint64_t result)
{
  if (!result) {
    return 0LL;
  }
  if ((result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t v1 = *(void *)(result + 32);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t *)(v1 + 40);
  uint64_t result = *v2;
  if (!*v2) {
    return 0LL;
  }
  if ((result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = sub_100057A88(result);
  if (!result || (result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t v5 = result;
  sub_10005789C(result, 0xAu);
  uint64_t result = sub_1000614B8(10LL, v5);
  if (!result) {
    goto LABEL_22;
  }
  if ((result & 7) == 0)
  {
    uint64_t v6 = (unsigned int *)(result + 1408);
    if (((result + 1408) & 7) == 0)
    {
      if (sub_100065308(result, *(_DWORD *)(result + 1408)))
      {
        uint64_t v7 = *v6;
LABEL_23:
        sub_1000578E8(v5, 0xAu);
        return v7;
      }

uint64_t sub_100065B30(_DWORD *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)operator new[](0x24uLL);
  if ((result & 3) == 0)
  {
    uint64_t v5 = result;
    if (!a2) {
      return v5;
    }
    if ((a2 & 7) == 0)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      if (!v6) {
        return v5;
      }
      if ((v6 & 7) == 0)
      {
        uint64_t v7 = (uint64_t *)(v6 + 40);
        if ((v7 & 7) == 0)
        {
          uint64_t result = *v7;
          if (!*v7) {
            return v5;
          }
          if ((result & 7) == 0)
          {
            uint64_t result = sub_100057A88(result);
            if (result)
            {
              uint64_t v8 = result;
              if ((result & 7) == 0)
              {
                sub_10005789C(result, 0xAu);
                uint64_t result = sub_1000614B8(10LL, v8);
                if ((result & 7) == 0 && a1 && (a1 & 3) == 0)
                {
                  uint64_t v9 = result;
                  *a1 = 0;
                  if (!result) {
                    goto LABEL_24;
                  }
                  uint64_t result = sub_1000651CC(a2);
                  if ((_DWORD)result)
                  {
                    uint64_t v10 = v9 & 7 | (v9 + 1404) & 3;
                    if (!v10)
                    {
                      while (1)
                      {
                        if (((*(_DWORD *)(v9 + 1404) >> v10) & 1) != 0)
                        {
                          uint64_t v11 = *a1;
                          unsigned int v12 = (_DWORD *)(v5 + 4 * v11);
                          *unsigned int v12 = dword_1000DE9A0[v10];
                          BOOL v13 = __CFADD__((_DWORD)v11, 1);
                          int v14 = v11 + 1;
                          if (v13) {
                            goto LABEL_29;
                          }
                          *a1 = v14;
                        }

                        if (++v10 == 9) {
                          goto LABEL_23;
                        }
                      }
                    }

                    goto LABEL_27;
                  }

uint64_t sub_100065CAC(uint64_t result)
{
  if (!result) {
    return 0LL;
  }
  if ((result & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t v1 = *(void *)(result + 32);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = (uint64_t *)(v1 + 40);
  uint64_t result = *v2;
  if (!*v2) {
    return 0LL;
  }
  if ((result & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t result = sub_100057A88(result);
  if (!result || (result & 7) != 0) {
    goto LABEL_24;
  }
  uint64_t v5 = result;
  sub_10005789C(result, 0xAu);
  uint64_t result = sub_1000614B8(10LL, v5);
  if (!result)
  {
    uint64_t v6 = 0LL;
    goto LABEL_22;
  }

  if ((result & 7) == 0 && ((result + 1196) & 3) == 0)
  {
    uint64_t v6 = *(unsigned int *)(result + 1196);
LABEL_22:
    sub_1000578E8(v5, 0xAu);
    return v6;
  }

void sub_100065D7C(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)(a1 + 1392);
  if (!v2 || (*(void *)(a1 + 1392) & 7LL) != 0) {
    goto LABEL_17;
  }
  int v4 = (*(uint64_t (**)(void, void))(*(void *)v2 + 16LL))(*(void *)(a1 + 1392), 0LL);
  uint64_t v5 = sub_1000ABB10(v2, 0, 10LL, 2, v4, 0LL, 0);
  if (v5)
  {
    uint64_t v6 = v5;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1200));
    *(_DWORD *)(a1 + 1404) = 0;
    sub_1000AB4C4(*(void *)(a1 + 8), v6, 0, 1u);
    sub_1000612C4(*(void *)(a1 + 8));
    if (v7)
    {
      sub_1000612C4(*(void *)(a1 + 8));
      if (!v8
        || (v8 & 7) != 0
        || (sub_10005EB3C(v8, *(_DWORD *)(a1 + 1432)), sub_1000612C4(*(void *)(a1 + 8)), !v9)
        || (v9 & 7) != 0)
      {
LABEL_17:
        __break(0x5516u);
        return;
      }

      sub_10005EA88(v9, *(_DWORD *)(a1 + 1432));
    }

    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1200));
  }

uint64_t sub_100065E80(uint64_t a1, char a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_28;
  }
  if ((a2 & 1) == 0
    && *(_DWORD *)(a1 + 1408) == *(_DWORD *)(a1 + 1420)
    && *(_DWORD *)(a1 + 1416) == *(_DWORD *)(a1 + 1424)
    && *(_DWORD *)(a1 + 1412) == *(_DWORD *)(a1 + 1428))
  {
    return 0LL;
  }

  uint64_t result = sub_100065308(a1, *(_DWORD *)(a1 + 1408));
  if (!(_DWORD)result) {
    return 45LL;
  }
  uint64_t v14 = 0LL;
  unsigned int v13 = bswap32(*(_DWORD *)(a1 + 1408));
  if ((unint64_t)&v13 < 0xFFFFFFFFFFFFFFF8LL)
  {
    HIDWORD(v14) = bswap32(*(_DWORD *)(a1 + 1412));
    uint64_t v5 = sub_100036FF0();
    if (v5 && (v5 & 7) == 0)
    {
      uint64_t v6 = *(void *)(a1 + 1392);
      if (v6)
      {
        if ((v6 & 7) == 0)
        {
          int v7 = (*(uint64_t (**)(void, void))(*(void *)v6 + 16LL))(*(void *)(a1 + 1392), 0LL);
          uint64_t v3 = 12LL;
          uint64_t v8 = sub_1000ABB10(v6, 0, 10LL, 4, v7, &v13, 0xCu);
          if (!v8) {
            return v3;
          }
          uint64_t v9 = v8;
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 1264));
          uint64_t v3 = sub_1000AB4C4(*(void *)(a1 + 8), v9, 0, 1u);
          if (!(_DWORD)v3)
          {
            *(_DWORD *)(a1 + 14memset(md, 170, 20) = *(_DWORD *)(a1 + 1408);
            *(_DWORD *)(a1 + 1424) = *(_DWORD *)(a1 + 1416);
            *(_DWORD *)(a1 + 142_Block_object_dispose((const void *)(v1 - 48), 8) = *(_DWORD *)(a1 + 1412);
          }

          sub_1000612C4(*(void *)(a1 + 8));
          if (!v10)
          {
LABEL_25:
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1264));
            return v3;
          }

          sub_1000612C4(*(void *)(a1 + 8));
          if (v11)
          {
            if ((v11 & 7) == 0)
            {
              sub_10005EB3C(v11, *(_DWORD *)(a1 + 1436));
              sub_1000612C4(*(void *)(a1 + 8));
              if (v12)
              {
                if ((v12 & 7) == 0)
                {
                  sub_10005EA88(v12, *(_DWORD *)(a1 + 1436));
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }

uint64_t sub_100066074(uint64_t result)
{
  if (result)
  {
    if ((result & 7) != 0) {
      goto LABEL_24;
    }
    uint64_t v1 = *(void *)(result + 32);
    if (v1)
    {
      uint64_t v2 = (uint64_t *)(v1 + 40);
      uint64_t result = *v2;
      if (*v2)
      {
        if ((result & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t result = sub_100057A88(result);
        if (!result || (result & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v5 = result;
        sub_10005789C(result, 0xAu);
        uint64_t result = sub_1000614B8(10LL, v5);
        if (!result) {
          return sub_1000578E8(v5, 0xAu);
        }
        if ((result & 7) == 0 && (((_BYTE)result - 116) & 3) == 0)
        {
          *(_DWORD *)(result + 14memset(md, 170, 20) = 0;
          if ((((_BYTE)result - 112) & 7) == 0)
          {
            *(_DWORD *)(result + 1424) = 0;
            if (((result + 1428) & 3) == 0)
            {
              *(_DWORD *)(result + 142_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
              return sub_1000578E8(v5, 0xAu);
            }
          }
        }

void sub_100066158(uint64_t a1, int a2)
{
  if (a2 <= 22049)
  {
    if (a2 <= 11024)
    {
      if (!a2) {
        goto LABEL_17;
      }
      if (a2 != 8000) {
        return;
      }
      a2 = dword_10011BEC0 + 1;
      if (dword_10011BEC0 != -1) {
        goto LABEL_17;
      }
      goto LABEL_30;
    }

    switch(a2)
    {
      case 11025:
        a2 = dword_10011BEC0 + 2;
        break;
      case 12000:
        a2 = dword_10011BEC0 + 4;
        break;
      case 16000:
        a2 = dword_10011BEC0 + 8;
        goto LABEL_30;
      default:
        return;
    }

    goto LABEL_17;
  }

  if (a2 > 31999)
  {
    switch(a2)
    {
      case 32000:
        a2 = dword_10011BEC0 + 64;
        break;
      case 44100:
        a2 = dword_10011BEC0 + 128;
        if (dword_10011BEC0 >= 0xFFFFFF80)
        {
          do
          {
LABEL_30:
            __break(0x5500u);
LABEL_31:
            a2 = dword_10011BEC0 + 16;
          }

          while (dword_10011BEC0 >= 0xFFFFFFF0);
        }

        break;
      case 48000:
        a2 = dword_10011BEC0 + 256;
        goto LABEL_30;
      default:
        return;
    }

void sub_1000662A8(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_65;
  }
  if (!*(void *)(a1 + 8)) {
    return;
  }
  uint64_t v4 = sub_100061274();
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_65;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5 || (v5 & 7) != 0) {
    goto LABEL_65;
  }
  if ((sub_1000569F0(v5) & 1) == 0)
  {
    if (!a2) {
      goto LABEL_65;
    }
    if ((a2 & 7) != 0) {
      goto LABEL_65;
    }
    uint64_t v6 = *(void *)(a2 + 8);
    int v7 = *(__int16 *)(a2 + 126);
    uint64_t v8 = sub_100061274();
    if (!v8 || (v8 & 7) != 0) {
      goto LABEL_65;
    }
    if ((sub_10008C710(v8, v6) & 0x400) == 0 || v6 != *(void *)(a1 + 1392))
    {
      sub_1000ABE78(a2, v6, 0, 10LL, 1, *(_DWORD *)(a2 + 68), 7, (unsigned __int16)v7, 0, 255, 0LL, 0, 0, 0);
LABEL_18:
      sub_1000AB4C4(*(void *)(a1 + 8), a2, 0, 1u);
      return;
    }

    unint64_t v9 = *(void *)(a2 + 24);
    unint64_t v10 = *(unsigned __int16 *)(a2 + 128);
    if (v7 == 5)
    {
      int v13 = 4;
      if (v9 && (_DWORD)v10 == 4)
      {
        sub_1000668A0(a1);
        int v13 = 0;
      }

      sub_1000ABE78(a2, v6, 0, 10LL, 1, *(_DWORD *)(a2 + 68), v13, 5u, 0, 255, 0LL, 0, 0, 0);
      goto LABEL_18;
    }

    if (v7 == 3)
    {
      sub_1000612C4(*(void *)(a1 + 8));
      if (v14)
      {
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1200));
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v15 || (v15 & 7) != 0) {
          goto LABEL_65;
        }
        sub_10005EB3C(v15, *(_DWORD *)(a1 + 1432));
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1200));
      }

      if (!*(_DWORD *)(a1 + 1404) && (v10 & 3) == 0)
      {
        unint64_t v18 = v10 >> 2;
        if ((v10 >> 2) - 3 <= 0x3C)
        {
          uint64_t v19 = 0LL;
          *(void *)&__int128 v20 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)((char *)v39 + 12) = v20;
          __int128 v38 = v20;
          v39[0] = v20;
          __int128 v36 = v20;
          __int128 v37 = v20;
          __int128 v34 = v20;
          __int128 v35 = v20;
          __int128 v32 = v20;
          __int128 v33 = v20;
          __int128 v30 = v20;
          __int128 v31 = v20;
          __int128 v28 = v20;
          __int128 v29 = v20;
          __int128 v26 = v20;
          __int128 v27 = v20;
          __int128 v25 = v20;
          do
          {
            if (!v9) {
              goto LABEL_65;
            }
            *((_DWORD *)&v25 + v19) = bswap32(*(_DWORD *)v9);
            if (v9 > 0xFFFFFFFFFFFFFFFBLL) {
              goto LABEL_66;
            }
            v9 += 4LL;
            ++v19;
          }

          while (v18 != v19);
          if ((sub_100066758(a1, (uint64_t)&v25, (v10 >> 2)) & 1) != 0)
          {
            *(_BYTE *)(a1 + 1192) = 0;
            __int128 v25 = 1uLL;
            *(void *)&__int128 v26 = *(void *)(a1 + 1392);
            uint64_t v21 = *(void *)(a1 + 8);
            if (v21 && (v21 & 7) == 0)
            {
              sub_100057A4C(v21, 0xAu, 0LL, (uint64_t)&v25, 24);
              goto LABEL_43;
            }

            goto LABEL_65;
          }
        }
      }

      int v16 = *(unsigned __int8 *)(a1 + 1192);
      if (v16 != 255)
      {
        char v17 = v16 + 1;
        *(_BYTE *)(a1 + 1192) = v17;
        if ((v17 & 0xFC) != 0)
        {
          *(_BYTE *)(a1 + 1192) = 0;
          goto LABEL_43;
        }

        sub_1000ABE78(a2, v6, 0, 10LL, 1, *(_DWORD *)(a2 + 68), 4, 3u, 0, 255, 0LL, 0, 0, 0);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1200));
        sub_1000AB4C4(*(void *)(a1 + 8), a2, 0, 1u);
        sub_1000612C4(*(void *)(a1 + 8));
        if (v22)
        {
          sub_1000612C4(*(void *)(a1 + 8));
          if (!v23 || (v23 & 7) != 0) {
            goto LABEL_65;
          }
          sub_10005EB3C(v23, *(_DWORD *)(a1 + 1432));
          if (!*(_DWORD *)(a1 + 1404))
          {
            sub_1000612C4(*(void *)(a1 + 8));
            if (!v24 || (v24 & 7) != 0) {
              goto LABEL_65;
            }
            sub_10005EA88(v24, *(_DWORD *)(a1 + 1432));
          }
        }

        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1200));
        return;
      }
    }

    else
    {
      if (v7)
      {
        sub_1000CEAEC( 0,  4,  "%s:%d unknown command.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoDigitalAudio.cpp",  1149);
        sub_1000ABE78(a2, v6, 0, 10LL, 1, *(_DWORD *)(a2 + 68), 4, (unsigned __int16)v7, 0, 255, 0LL, 0, 0, 0);
        goto LABEL_18;
      }

      if (!v9 || (_DWORD)v10 != 2 || *(_BYTE *)v9)
      {
LABEL_43:
        sub_1000AD43C(a2);
        return;
      }

      if (v9 != -1LL)
      {
        if (*(_BYTE *)(v9 + 1) != 4) {
          goto LABEL_43;
        }
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v11) {
          goto LABEL_43;
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1264));
        sub_1000612C4(*(void *)(a1 + 8));
        if (v12 && (v12 & 7) == 0)
        {
          sub_10005EB3C(v12, *(_DWORD *)(a1 + 1436));
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1264));
          goto LABEL_43;
        }

uint64_t sub_100066758(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (!result || (result & 7) != 0)
  {
LABEL_42:
    __break(0x5516u);
  }

  else
  {
    if (a3)
    {
      unint64_t v3 = 0LL;
      int v4 = 0;
      BOOL v6 = (a2 & 3) == 0 && a2 != 0;
      do
      {
        if (v3 > ~a2)
        {
          __break(0x5513u);
          goto LABEL_42;
        }

        if (!v6) {
          goto LABEL_42;
        }
        int v7 = *(_DWORD *)(a2 + v3);
        int v8 = v4 | 0x40;
        int v9 = v4 | 0x80;
        int v10 = v4 | 0x100;
        if (v7 != 48000) {
          int v10 = v4;
        }
        if (v7 != 44100) {
          int v9 = v10;
        }
        if (v7 != 32000) {
          int v8 = v9;
        }
        int v11 = v4 | 0x10;
        int v12 = v4 | 0x20;
        if (v7 != 24000) {
          int v12 = v4;
        }
        if (v7 != 22050) {
          int v11 = v12;
        }
        if (v7 <= 31999) {
          int v8 = v11;
        }
        int v13 = v4 | 4;
        int v14 = v4 | 8;
        if (v7 != 16000) {
          int v14 = v4;
        }
        if (v7 != 12000) {
          int v13 = v14;
        }
        int v15 = v4 | 1;
        if (v7 == 11025) {
          v4 |= 2u;
        }
        if (v7 == 8000) {
          int v4 = v15;
        }
        if (v7 > 11999) {
          int v4 = v13;
        }
        if (v7 > 22049) {
          int v4 = v8;
        }
        v3 += 4LL;
      }

      while (4LL * a3 != v3);
      if ((~v4 & 0x1C0) != 0) {
        goto LABEL_39;
      }
      *(_DWORD *)(result + 1404) = v4;
      *(_BYTE *)(result + 1192) = 0;
      return 1LL;
    }

    else
    {
LABEL_39:
      uint64_t v16 = 0LL;
      *(_DWORD *)(result + 1404) = 0;
    }

    return v16;
  }

  return result;
}

uint64_t sub_1000668A0(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
LABEL_6:
    __break(0x5500u);
  }

  unint64_t v3 = 0xAAAAAAAAAAAAAAAALL;
  char v2 = 10;
  unint64_t v3 = 0x400000000000000LL;
  return 0LL;
}

void sub_10006693C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0)
  {
LABEL_22:
    __break(0x5516u);
    goto LABEL_23;
  }

  switch(a2)
  {
    case 32:
      if (*(_DWORD *)(a1 + 1432) != a3)
      {
        if (*(_DWORD *)(a1 + 1436) == a3) {
          sub_100065E80(a1, 1);
        }
        else {
          sub_1000CEAEC( 0,  4,  "%s:%d unknown timer.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoDigitalAudio.cpp",  1251);
        }
        return;
      }

      int v7 = *(unsigned __int8 *)(a1 + 1192);
      if (v7 != 255)
      {
        char v8 = v7 + 1;
        *(_BYTE *)(a1 + 1192) = v8;
        if ((v8 & 0xFC) != 0) {
          *(_BYTE *)(a1 + 1192) = 0;
        }
        else {
          sub_100065D7C(a1);
        }
        return;
      }

uint64_t sub_100066AC4(uint64_t result, int a2, uint64_t a3)
{
  if (!a3) {
    return 22LL;
  }
  if ((a3 & 7) != 0) {
    goto LABEL_27;
  }
  int v5 = result;
  sub_10005789C(a3, 0xAu);
  uint64_t result = sub_1000614B8(10LL, a3);
  if (!result)
  {
    uint64_t v6 = 22LL;
    goto LABEL_24;
  }

  if ((result & 7) != 0) {
    goto LABEL_27;
  }
  if (v5 != 64)
  {
LABEL_23:
    uint64_t v6 = 0LL;
    goto LABEL_24;
  }

  uint64_t v6 = 0LL;
  if ((a2 + 1) > 7)
  {
LABEL_24:
    sub_1000578E8(a3, 0xAu);
    return v6;
  }

  int v7 = 1 << (a2 + 1);
  if ((v7 & 0x13) == 0)
  {
    if ((v7 & 0xA0) == 0) {
      goto LABEL_24;
    }
    if ((((_BYTE)result + 120) & 7) != 0) {
      goto LABEL_27;
    }
    *(_BYTE *)(result + 1400) = 1;
    if (((result + 1404) & 3) != 0) {
      goto LABEL_27;
    }
    if (!*(_DWORD *)(result + 1404))
    {
      sub_100065D7C(result);
      uint64_t v6 = v9;
      goto LABEL_24;
    }

    if (a2 == 4)
    {
      if ((((_BYTE)result - 88) & 7) != 0) {
        goto LABEL_27;
      }
      *(_BYTE *)(result + 1192) = 0;
      v10[0] = 1LL;
      v10[1] = 0LL;
      if ((((_BYTE)result + 112) & 7) != 0) {
        goto LABEL_27;
      }
      void v10[2] = *(void *)(result + 1392);
      char v8 = (uint64_t *)(result + 8);
      if (((result + 8) & 7) != 0) {
        goto LABEL_27;
      }
      uint64_t result = *v8;
      if (!*v8 || (result & 7) != 0) {
        goto LABEL_27;
      }
      sub_100057A4C(result, 0xAu, 0LL, (uint64_t)v10, 24);
    }

    goto LABEL_23;
  }

  if (((result + 1400) & 7) == 0)
  {
    uint64_t v6 = 0LL;
    *(_BYTE *)(result + 1400) = 0;
    goto LABEL_24;
  }

uint64_t sub_100066C44(uint64_t result, int a2)
{
  if (result && a2 == 9)
  {
    *(_BYTE *)uint64_t result = 10;
    if (result != -1)
    {
      *(void *)(result + 1) = 0x400000000000000LL;
      return 0LL;
    }
  }

  else
  {
    __break(0x5518u);
  }

  __break(0x5500u);
  return result;
}

void sub_100066C78(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_181;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_181;
  }
  sub_10006107C(a1, a2, 3);
  *(void *)a1 = off_100105E88;
  *(void *)(a1 + 1192) = 0LL;
  *(void *)(a1 + 1744) = -1LL;
  *(_DWORD *)(a1 + 1752) = -1;
  *(_BYTE *)(a1 + 1756) = 0;
  if ((((_BYTE)a1 - 32) & 7) != 0) {
    goto LABEL_181;
  }
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_BYTE *)(a1 + 1776) = 1;
  *(_OWORD *)(a1 + 1780) = xmmword_1000DE9E0;
  if (((a1 + 2256) & 7) != 0) {
    goto LABEL_181;
  }
  if ((((_BYTE)a1 - 32) & 7) != 0) {
    goto LABEL_181;
  }
  *(_BYTE *)(a1 + 2757) = 1;
  *(_OWORD *)(a1 + 2760) = xmmword_1000DE9F0;
  if (((a1 + 2784) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2784) = 0LL;
  *(void *)(a1 + 2792) = 0LL;
  *(void *)(a1 + 2800) = 0LL;
  if (((a1 + 2808) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 280_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  *(void *)(a1 + 2816) = 0LL;
  *(void *)(a1 + 2824) = 0LL;
  if (((a1 + 2832) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2832) = 0LL;
  *(void *)(a1 + 2840) = 0LL;
  *(void *)(a1 + 284_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (((a1 + 2856) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2856) = 0LL;
  *(void *)(a1 + 2864) = 0LL;
  *(void *)(a1 + 2872) = 0LL;
  if (((a1 + 2880) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2880) = 0LL;
  *(void *)(a1 + 288_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  *(void *)(a1 + 2896) = 0LL;
  if (dword_10011B6B0 == -1)
  {
    uint64_t v4 = sub_10002ACC4();
    if (!v4 || (v4 & 7) != 0) {
      goto LABEL_181;
    }
    dword_10011B6B0 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v4 + 360LL))( v4,  "SetDurationToZeroOnInvalid");
  }

  if (dword_10011B6B4 == -1)
  {
    uint64_t v5 = sub_10002ACC4();
    if (!v5 || (v5 & 7) != 0) {
      goto LABEL_181;
    }
    dword_10011B6B4 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v5 + 360LL))( v5,  "SetDurationToLargeOnInvalid");
  }

  if (dword_10011B6B8 == -1)
  {
    uint64_t v6 = sub_10002ACC4();
    if (!v6 || (v6 & 7) != 0) {
      goto LABEL_181;
    }
    dword_10011B6B8 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v6 + 360LL))( v6,  "SetDurationTo5MinOnInvalid");
  }

  if (dword_10011B6BC == -1)
  {
    uint64_t v7 = sub_10002ACC4();
    if (!v7 || (v7 & 7) != 0) {
      goto LABEL_181;
    }
    dword_10011B6BC = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v7 + 360LL))( v7,  "SetDurationTo24HrsOnInvalid");
  }

  if (dword_10011B6C0 == -1)
  {
    uint64_t v8 = sub_10002ACC4();
    if (!v8 || (v8 & 7) != 0) {
      goto LABEL_181;
    }
    dword_10011B6C0 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)v8 + 360LL))( v8,  "SetDurationTo1HrOnInvalid");
  }

  uint64_t v9 = sub_100036FF0();
  *(void *)(a1 + 1192) = v9;
  if (!v9) {
    sub_1000D276C();
  }
  *(_DWORD *)(a1 + 1780) &= ~dword_10011B658;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  *(_DWORD *)(a1 + 2744) = -1;
  *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  *(_DWORD *)(a1 + 2752) = 6;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 2756) = 0;
  if ((((_BYTE)a1 - 72) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 120_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  if ((((_BYTE)a1 - 68) & 3) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1212) = 0;
  unint64_t v10 = a1 + 1280;
  if (((a1 + 1280) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1280) = 0;
  if ((((_BYTE)a1 + 8) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 128_Block_object_dispose((const void *)(v1 - 48), 8) = a1 + 1216;
  if ((((_BYTE)a1 + 16) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1296) = 1028;
  if (v10 >= 0xFFFFFFFFFFFFFFE8LL) {
    goto LABEL_182;
  }
  if (((a1 + 1304) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1304) = 1;
  if ((((_BYTE)a1 + 32) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1312) = a1 + 1220;
  if ((((_BYTE)a1 + 40) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 13memset(md, 170, 20) = 1028;
  if (v10 > 0xFFFFFFFFFFFFFFCFLL) {
    goto LABEL_182;
  }
  if (((a1 + 1328) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 132_Block_object_dispose((const void *)(v1 - 48), 8) = 2;
  if ((((_BYTE)a1 + 56) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1336) = a1 + 1228;
  if ((((_BYTE)a1 + 64) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1344) = 2056;
  if (v10 > 0xFFFFFFFFFFFFFFB7LL) {
    goto LABEL_182;
  }
  if (((a1 + 1352) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1352) = 3;
  if ((((_BYTE)a1 + 80) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1360) = a1 + 1254;
  if ((((_BYTE)a1 + 88) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 136_Block_object_dispose((const void *)(v1 - 48), 8) = 257;
  if (v10 > 0xFFFFFFFFFFFFFF9FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1376) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1376) = 4;
  if ((((_BYTE)a1 + 104) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1384) = a1 + 1245;
  if ((((_BYTE)a1 + 112) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1392) = 514;
  if (v10 > 0xFFFFFFFFFFFFFF87LL) {
    goto LABEL_182;
  }
  if (((a1 + 1400) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1400) = 5;
  if ((((_BYTE)a1 + 0x80) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 140_Block_object_dispose((const void *)(v1 - 48), 8) = a1 + 1247;
  if ((((_BYTE)a1 - 120) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1416) = 514;
  if (v10 > 0xFFFFFFFFFFFFFF6FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1424) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1424) = 6;
  if ((((_BYTE)a1 - 104) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1432) = a1 + 1224;
  if ((((_BYTE)a1 - 96) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1440) = 1028;
  if (v10 > 0xFFFFFFFFFFFFFF57LL) {
    goto LABEL_182;
  }
  if (((a1 + 1448) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 144_Block_object_dispose((const void *)(v1 - 48), 8) = 7;
  if ((((_BYTE)a1 - 80) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1456) = a1 + 1255;
  if ((((_BYTE)a1 - 72) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1464) = 257;
  if (v10 > 0xFFFFFFFFFFFFFF3FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1472) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1472) = 8;
  if ((((_BYTE)a1 - 56) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1480) = a1 + 1256;
  if ((((_BYTE)a1 - 48) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 148_Block_object_dispose((const void *)(v1 - 48), 8) = 257;
  if (v10 > 0xFFFFFFFFFFFFFF27LL) {
    goto LABEL_182;
  }
  if (((a1 + 1496) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1496) = 9;
  if ((((_BYTE)a1 - 32) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1504) = a1 + 1236;
  if ((((_BYTE)a1 - 24) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1512) = 1542;
  if (v10 > 0xFFFFFFFFFFFFFF0FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1520) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 15memset(md, 170, 20) = 10;
  if ((((_BYTE)a1 - 8) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 152_Block_object_dispose((const void *)(v1 - 48), 8) = a1 + 1242;
  if ((a1 & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1536) = 771;
  if (v10 > 0xFFFFFFFFFFFFFEF7LL) {
    goto LABEL_182;
  }
  if (((a1 + 1544) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1544) = 11;
  if ((((_BYTE)a1 + 16) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1552) = a1 + 1257;
  if ((((_BYTE)a1 + 24) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1560) = 257;
  if (v10 > 0xFFFFFFFFFFFFFEDFLL) {
    goto LABEL_182;
  }
  if (((a1 + 1568) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 156_Block_object_dispose((const void *)(v1 - 48), 8) = 12;
  if ((((_BYTE)a1 + 40) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1576) = a1 + 1258;
  if ((((_BYTE)a1 + 48) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1584) = 257;
  if (v10 > 0xFFFFFFFFFFFFFEC7LL) {
    goto LABEL_182;
  }
  if (((a1 + 1592) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1592) = 13;
  if ((((_BYTE)a1 + 64) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1600) = a1 + 1259;
  if ((((_BYTE)a1 + 72) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 160_Block_object_dispose((const void *)(v1 - 48), 8) = 257;
  if (v10 > 0xFFFFFFFFFFFFFEAFLL) {
    goto LABEL_182;
  }
  if (((a1 + 1616) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1616) = 14;
  if ((((_BYTE)a1 + 88) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1624) = a1 + 1260;
  if ((((_BYTE)a1 + 96) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1632) = 257;
  if (v10 > 0xFFFFFFFFFFFFFE97LL) {
    goto LABEL_182;
  }
  if (((a1 + 1640) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1640) = 15;
  if ((((_BYTE)a1 + 112) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 164_Block_object_dispose((const void *)(v1 - 48), 8) = a1 + 1252;
  if ((((_BYTE)a1 + 120) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1656) = 514;
  if (v10 > 0xFFFFFFFFFFFFFE7FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1664) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1664) = 16;
  if ((((_BYTE)a1 - 120) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1672) = a1 + 1249;
  if ((((_BYTE)a1 - 112) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1680) = 771;
  if (v10 > 0xFFFFFFFFFFFFFE67LL) {
    goto LABEL_182;
  }
  if (((a1 + 1688) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 168_Block_object_dispose((const void *)(v1 - 48), 8) = 17;
  if ((((_BYTE)a1 - 96) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 1696) = a1 + 1264;
  if ((((_BYTE)a1 - 88) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 1704) = 1028;
  if (v10 > 0xFFFFFFFFFFFFFE4FLL) {
    goto LABEL_182;
  }
  if (((a1 + 1712) & 7) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1712) = 18;
  if ((((_BYTE)a1 - 72) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 17memset(md, 170, 20) = a1 + 1268;
  if ((((_BYTE)a1 - 64) & 7) != 0) {
    goto LABEL_181;
  }
  *(_WORD *)(a1 + 172_Block_object_dispose((const void *)(v1 - 48), 8) = 1032;
  if ((((_BYTE)a1 - 12) & 3) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 126_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  if ((((_BYTE)a1 - 8) & 3) != 0) {
    goto LABEL_181;
  }
  *(_DWORD *)(a1 + 1272) = 0;
  sub_100067978(a1);
  sub_1000679F8(a1);
  unint64_t v11 = a1 + 2296;
  if (((a1 + 2296) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2296) = sub_100067A60;
  *(void *)(a1 + 2304) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFFEFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2312) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2312) = sub_100067AF0;
  *(void *)(a1 + 23memset(md, 170, 20) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFFDFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2328) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 232_Block_object_dispose((const void *)(v1 - 48), 8) = sub_100067BF4;
  *(void *)(a1 + 2336) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFFCFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2344) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2344) = sub_100067EF8;
  *(void *)(a1 + 2352) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFFBFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2360) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2360) = sub_100067FF8;
  *(void *)(a1 + 236_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFFAFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2376) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2376) = sub_1000681B4;
  *(void *)(a1 + 2384) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF9FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2392) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2392) = sub_10006836C;
  *(void *)(a1 + 2400) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF8FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2408) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 240_Block_object_dispose((const void *)(v1 - 48), 8) = sub_1000683F4;
  *(void *)(a1 + 2416) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF7FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2424) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2424) = sub_100068484;
  *(void *)(a1 + 2432) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF6FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2440) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2440) = sub_100068514;
  *(void *)(a1 + 244_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF5FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2456) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2456) = sub_1000686A8;
  *(void *)(a1 + 2464) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF4FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2472) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2472) = sub_1000686C0;
  *(void *)(a1 + 2480) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF3FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2488) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 248_Block_object_dispose((const void *)(v1 - 48), 8) = sub_100068748;
  *(void *)(a1 + 2496) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF2FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2504) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2504) = sub_1000687C8;
  *(void *)(a1 + 2512) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF1FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2520) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 25memset(md, 170, 20) = sub_10006884C;
  *(void *)(a1 + 252_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFF0FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2536) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2536) = sub_1000688DC;
  *(void *)(a1 + 2544) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFEFFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2552) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2552) = sub_10006895C;
  *(void *)(a1 + 2560) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFEEFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2568) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 256_Block_object_dispose((const void *)(v1 - 48), 8) = sub_100068B50;
  *(void *)(a1 + 2576) = 0LL;
  if (v11 > 0xFFFFFFFFFFFFFEDFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2584) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2584) = sub_100068C14;
  *(void *)(a1 + 2592) = 0LL;
  unint64_t v12 = a1 + 2600;
  if (((a1 + 2600) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2600) = sub_100068D50;
  *(void *)(a1 + 260_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFFEFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2616) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2616) = sub_100068F5C;
  *(void *)(a1 + 2624) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFFDFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2632) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2632) = sub_1000690E8;
  *(void *)(a1 + 2640) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFFCFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2648) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 264_Block_object_dispose((const void *)(v1 - 48), 8) = sub_1000691A8;
  *(void *)(a1 + 2656) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFFBFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2664) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2664) = sub_100069268;
  *(void *)(a1 + 2672) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFFAFLL) {
    goto LABEL_182;
  }
  if (((a1 + 2680) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2680) = sub_100069328;
  *(void *)(a1 + 268_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFF9FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2696) & 7) != 0) {
    goto LABEL_181;
  }
  *(void *)(a1 + 2696) = sub_1000693E8;
  *(void *)(a1 + 2704) = 0LL;
  if (v12 > 0xFFFFFFFFFFFFFF8FLL) {
    goto LABEL_182;
  }
  if (((a1 + 2712) & 7) != 0)
  {
LABEL_181:
    __break(0x5516u);
    goto LABEL_182;
  }

  *(void *)(a1 + 2712) = sub_1000694A8;
  *(void *)(a1 + 27memset(md, 170, 20) = 0LL;
  if (v12 <= 0xFFFFFFFFFFFFFF7FLL)
  {
    if (((a1 + 2728) & 7) == 0)
    {
      *(void *)(a1 + 272_Block_object_dispose((const void *)(v1 - 48), 8) = sub_100069694;
      *(void *)(a1 + 2736) = 0LL;
      sub_1000612C4(a2);
      if (v13)
      {
        if ((v13 & 7) == 0)
        {
          int v14 = sub_10005E878(v13, 96, a2, 3);
          *(_DWORD *)(a1 + 2744) = v14;
          if (v14 == -1)
          {
            __break(0x5518u);
          }

          else
          {
            *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            sub_1000612C4(a2);
            if (v15)
            {
              if ((v15 & 7) == 0)
              {
                sub_10005EB3C(v15, *(_DWORD *)(a1 + 2744));
                uint64_t v16 = sub_100061274();
                if (v16)
                {
                  if ((v16 & 7) == 0)
                  {
                    sub_10008C5A8(v16, 3, 621, a2);
                    *(_DWORD *)(a1 + 1204) = 0;
                    *(_BYTE *)(a1 + 1200) = 0;
                    *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
                    v20[0] = 0xAAAAAAAAAAAAAAAALL;
                    v20[1] = 0xAAAAAAAAAAAAAAAALL;
                    sub_1000CE91C((uint64_t)v20, 1u);
                    v20[0] = off_100103838;
                    sub_1000CE9E8((uint64_t)v20, (__darwin_time_t *)(a1 + 2256));
                    uint64_t v17 = sub_10004783C();
                    if (v17)
                    {
                      if ((v17 & 7) == 0)
                      {
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16LL))(v17, a1);
                        uint64_t v18 = sub_100042AC4();
                        if (v18)
                        {
                          if ((v18 & 7) == 0)
                          {
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16LL))(v18, a1);
                            uint64_t v19 = *(void *)(a1 + 1192);
                            if (v19)
                            {
                              if ((v19 & 7) == 0)
                              {
                                (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16LL))(v19, a1);
                                v20[0] = off_100103838;
                                sub_1000CE94C(v20);
                                return;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    goto LABEL_181;
  }

LABEL_182:
  __break(0x5513u);
}

uint64_t sub_100067978(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result & 7;
    if ((result & 7) == 0)
    {
      *(_OWORD *)(result + 2216) = 0u;
      *(_OWORD *)(result + 2232) = 0u;
      *(_OWORD *)(result + 2184) = 0u;
      *(_OWORD *)(result + 2200) = 0u;
      *(_OWORD *)(result + 2152) = 0u;
      *(_OWORD *)(result + 216_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
      *(_OWORD *)(result + 21memset(md, 170, 20) = 0u;
      *(_OWORD *)(result + 2136) = 0u;
      *(_OWORD *)(result + 208_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
      *(_OWORD *)(result + 2104) = 0u;
      *(_OWORD *)(result + 2056) = 0u;
      *(_OWORD *)(result + 2072) = 0u;
      *(_OWORD *)(result + 2024) = 0u;
      *(_OWORD *)(result + 2040) = 0u;
      *(_OWORD *)(result + 1992) = 0u;
      *(_OWORD *)(result + 200_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
      *(_OWORD *)(result + 1960) = 0u;
      *(_OWORD *)(result + 1976) = 0u;
      *(_OWORD *)(result + 192_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
      *(_OWORD *)(result + 1944) = 0u;
      *(_OWORD *)(result + 1896) = 0u;
      *(_OWORD *)(result + 1912) = 0u;
      *(_OWORD *)(result + 1864) = 0u;
      *(_OWORD *)(result + 1880) = 0u;
      *(_OWORD *)(result + 1832) = 0u;
      *(_OWORD *)(result + 184_Block_object_dispose((const void *)(v1 - 48), 8) = 0u;
      *(_OWORD *)(result + 1800) = 0u;
      *(_OWORD *)(result + 1816) = 0u;
      *(void *)(result + 224_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
      while (v1 <= ~(result + 1800))
      {
        *(void *)(result + 1808 + v1) = 0LL;
        v1 += 24LL;
        if (v1 == 456) {
          return 0LL;
        }
      }

      __break(0x5513u);
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_1000679F8(uint64_t result)
{
  if (!result || (uint64_t v1 = result, (result & 7) != 0) || (result = sub_100042AC4()) == 0 || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
    *(_DWORD *)(v1 + 1736) = result;
    if ((_DWORD)result == 256) {
      *(void *)(v1 + 1736) = 0x1000000FFLL;
    }
    else {
      *(_DWORD *)(v1 + 1740) = 0;
    }
  }

  return result;
}

uint64_t sub_100067A60(uint64_t result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 408LL))(result);
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = &a2[v5 + 1];
  if (__CFADD__(a2 + 1, v5))
  {
LABEL_14:
    __break(0x5500u);
    goto LABEL_15;
  }

  if (!v6)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  *uint64_t v6 = bswap32(result);
  if (v5 < 0xFC)
  {
    *a2 = v5 + 4;
    *(_DWORD *)(v2 + 276_Block_object_dispose((const void *)(v1 - 48), 8) = result;
    return 0LL;
  }

uint64_t sub_100067AF0(uint64_t result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = *(void *)(v2 + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_25;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 392LL))(result))
  {
LABEL_15:
    uint64_t result = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t result = *(void *)(v2 + 1192);
    if (!result || (result & 7) != 0) {
      goto LABEL_25;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 376LL))(result);
  }

  if (!a2) {
    goto LABEL_25;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = &a2[v5 + 1];
  if (__CFADD__(a2 + 1, v5))
  {
LABEL_26:
    __break(0x5500u);
    goto LABEL_27;
  }

  if (!v6)
  {
LABEL_25:
    __break(0x5516u);
    goto LABEL_26;
  }

  *uint64_t v6 = bswap32(result);
  if (v5 >= 0xFC)
  {
LABEL_27:
    __break(0x5507u);
    goto LABEL_28;
  }

  *a2 = v5 + 4;
  if (*(unsigned __int8 *)(v2 + 2757) >= 2u)
  {
LABEL_28:
    __break(0x550Au);
    return result;
  }

  if (*(_BYTE *)(v2 + 2757)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = *(_DWORD *)(v2 + 2764) != (_DWORD)result;
  }
  *(_BYTE *)(v2 + 2757) = v7;
  *(_DWORD *)(v2 + 2764) = result;
  return 0LL;
}

uint64_t sub_100067BF4(uint64_t result, unsigned __int8 *a2)
{
  if (!result) {
    goto LABEL_48;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_48;
  }
  unsigned int v3 = *(_DWORD *)(result + 2760);
  if (v3 >= 8) {
    goto LABEL_51;
  }
  if (!v3)
  {
    unsigned int v7 = 0;
    LODWORD(v5) = -1;
    unsigned int v8 = -1;
LABEL_37:
    if (a2)
    {
      unint64_t v12 = a2 + 1;
      uint64_t v13 = *a2;
      int v14 = &a2[v13 + 1];
      if (__CFADD__(a2 + 1, v13)) {
        goto LABEL_49;
      }
      if (v14)
      {
        *(_DWORD *)int v14 = bswap32(v5);
        unsigned __int8 v15 = v13 + 4;
        *a2 = v15;
        uint64_t v16 = &v12[v15];
        if (__CFADD__(v12, v15)) {
          goto LABEL_49;
        }
        if (v16)
        {
          *uint64_t v16 = bswap32(v7) >> 16;
          if (v15 <= 0xFDu)
          {
            unsigned __int8 v17 = v15 + 2;
            *a2 = v17;
            BOOL v18 = __CFADD__(v12, v17);
            uint64_t v19 = &v12[v17];
            if (!v18)
            {
              if (v19)
              {
                *uint64_t v19 = bswap32(v8) >> 16;
                if (v17 <= 0xFDu)
                {
                  *a2 = v17 + 2;
                  return 0LL;
                }

                goto LABEL_50;
              }

              goto LABEL_48;
            }

uint64_t sub_100067EF8(uint64_t result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_22;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_22;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 416LL))(result);
  if (result >= 8)
  {
LABEL_23:
    __break(0x550Au);
    goto LABEL_24;
  }

  int v5 = result;
  if ((result - 1) <= 1)
  {
    uint64_t result = *(void *)(v2 + 1192);
    if (!result || (result & 7) != 0) {
      goto LABEL_22;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 440LL))(result);
    if ((result & 1) != 0)
    {
      int v5 = 3;
    }

    else
    {
      uint64_t result = *(void *)(v2 + 1192);
      if (!result || (result & 7) != 0) {
        goto LABEL_22;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 448LL))(result);
      if ((_DWORD)result) {
        int v5 = 4;
      }
    }
  }

  if (!a2)
  {
LABEL_22:
    __break(0x5516u);
    goto LABEL_23;
  }

  uint64_t v6 = *a2;
  if (__CFADD__(a2 + 1, v6))
  {
LABEL_24:
    __break(0x5513u);
    goto LABEL_25;
  }

  a2[v6 + 1] = v5;
  if ((_DWORD)v6 != 255)
  {
    *a2 = v6 + 1;
    *(_DWORD *)(v2 + 2760) = v5;
    return 0LL;
  }

uint64_t sub_100067FF8(uint64_t result, unsigned __int8 *a2)
{
  if (!result) {
    goto LABEL_33;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t v4 = sub_100042AC4();
  uint64_t result = sub_100061274();
  if (!result) {
    goto LABEL_33;
  }
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t result = sub_10008E168(result, *(void *)(v2 + 8));
  if (!v4 || (v4 & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t v5 = result;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 120LL))(v4, result);
  if (!v5)
  {
    __break(0x5518u);
    goto LABEL_33;
  }

  unsigned __int8 v6 = result;
  __int16 v7 = sub_1000774F8(*(void *)(v2 + 8));
  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t result = sub_10008D184(result, v5);
  if ((_DWORD)result == 56)
  {
    if ((v7 & 0x800) == 0 && *(_BYTE *)(v2 + 2756)) {
      return 2LL;
    }
  }

  if (*(unsigned __int8 *)(v2 + 2756) <= 1u)
  {
    if ((_DWORD)result != 56 && *(_BYTE *)(v2 + 2756))
    {
      uint64_t result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_33;
      }
      if ((result & 7) != 0) {
        goto LABEL_33;
      }
      uint64_t result = sub_1000579D4(result);
      if (!result || (result & 7) != 0) {
        goto LABEL_33;
      }
      sub_10006C3D4(result, 1LL);
    }

    if ((v6 & 1) != 0)
    {
      uint64_t result = 0LL;
    }

    else
    {
      unsigned int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 104LL))(v4, v5);
      sub_1000679F8(v2);
      uint64_t result = sub_10006D798(v2, v8, 0);
    }

    if (a2)
    {
      unint64_t v9 = *a2;
      unint64_t v10 = ~(unint64_t)(a2 + 1);
      if (v10 >= v9)
      {
        a2[v9 + 1] = v6;
        if ((_DWORD)v9 == 255)
        {
LABEL_35:
          __break(0x5507u);
          goto LABEL_36;
        }

        unsigned __int8 v11 = v9 + 1;
        *a2 = v11;
        if (v11 <= v10)
        {
          a2[v11 + 1] = result;
          if (v11 != 255)
          {
            uint64_t result = 0LL;
            *a2 = v11 + 1;
            return result;
          }

          goto LABEL_35;
        }
      }

uint64_t sub_1000681B4(uint64_t result, unsigned __int8 *a2)
{
  if (!result) {
    goto LABEL_25;
  }
  if ((result & 7) != 0) {
    goto LABEL_25;
  }
  uint64_t result = sub_1000451B0();
  if (!result) {
    goto LABEL_25;
  }
  uint64_t v3 = result;
  if ((result & 7) != 0) {
    goto LABEL_25;
  }
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)result + 208LL))(result);
  uint64_t v5 = *(void *)v3;
  if ((v4 & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t))(v5 + 216))(v3) & 1) != 0)
    {
      uint64_t result = 0LL;
      LOBYTE(v6) = 0;
      char v7 = 2;
    }

    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 248LL))(v3);
      if (result > 3)
      {
LABEL_28:
        __break(0x550Au);
        goto LABEL_29;
      }

      if ((_DWORD)result == 1)
      {
        uint64_t result = 0LL;
        LOBYTE(v6) = 0;
        char v7 = 4;
      }

      else if ((_DWORD)result == 3)
      {
        uint64_t result = 0LL;
        LOBYTE(v6) = 0;
        char v7 = 5;
      }

      else
      {
        uint64_t result = 0LL;
        LOBYTE(v6) = 0;
        char v7 = 3;
      }
    }

uint64_t sub_10006836C(uint64_t result, _BYTE *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 240LL))(result);
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t v4 = *a2;
  uint64_t v5 = &a2[v4 + 1];
  if (__CFADD__(a2 + 1, v4))
  {
LABEL_14:
    __break(0x5500u);
    goto LABEL_15;
  }

  if (!v5)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  _DWORD *v5 = bswap32(result);
  if (v4 < 0xFC)
  {
    *a2 = v4 + 4;
    return 0LL;
  }

uint64_t sub_1000683F4(uint64_t result, _BYTE *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 152LL))(result);
  if (result >= 4)
  {
LABEL_14:
    __break(0x550Au);
    goto LABEL_15;
  }

  if (!a2)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v4 = *a2;
  if (__CFADD__(a2 + 1, v4))
  {
LABEL_15:
    __break(0x5513u);
    goto LABEL_16;
  }

  a2[v4 + 1] = result;
  if ((_DWORD)v4 != 255)
  {
    *a2 = v4 + 1;
    return 0LL;
  }

uint64_t sub_100068484(uint64_t result, _BYTE *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136LL))(result);
  if (result >= 4)
  {
LABEL_14:
    __break(0x550Au);
    goto LABEL_15;
  }

  if (!a2)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v4 = *a2;
  if (__CFADD__(a2 + 1, v4))
  {
LABEL_15:
    __break(0x5513u);
    goto LABEL_16;
  }

  a2[v4 + 1] = result;
  if ((_DWORD)v4 != 255)
  {
    *a2 = v4 + 1;
    return 0LL;
  }

tm *sub_100068514(tm *result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_25;
  }
  v14.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v14.tm_mon = v3;
  *(_OWORD *)&v14.tm_isdst = v3;
  *(_OWORD *)&v14.tm_sec = v3;
  time_t v13 = time(0LL);
  uint64_t result = localtime_r(&v13, &v14);
  if (!a2) {
    goto LABEL_25;
  }
  unsigned int v4 = v14.tm_year + 1900;
  if (!__OFADD__(v14.tm_year, 1900))
  {
    if (v4 >= 0x10000) {
      goto LABEL_23;
    }
    uint64_t v5 = *a2;
    unsigned int v6 = &a2[v5 + 1];
    if (!__CFADD__(a2 + 1, v5))
    {
      if (!v6)
      {
LABEL_25:
        __break(0x5516u);
        goto LABEL_26;
      }

      *unsigned int v6 = bswap32(v4) >> 16;
      unsigned __int8 v7 = v5 + 2;
      *a2 = v5 + 2;
      unsigned int v8 = v14.tm_mon + 1;
      if (!__OFADD__(v14.tm_mon, 1))
      {
        if (v8 <= 0xFF)
        {
          unint64_t v9 = ~(unint64_t)(a2 + 1);
          if (v7 > v9) {
            goto LABEL_24;
          }
          a2[v7 + 1] = v8;
          if (v7 != 0xFF)
          {
            *a2 = v7 + 1;
            if (v14.tm_mday <= 0xFFu)
            {
              unint64_t v10 = (v7 + 1);
              if (v10 > v9) {
                goto LABEL_24;
              }
              a2[v10 + 1] = v14.tm_mday;
              if (v7 != 0xFE)
              {
                unsigned __int8 v11 = v10 + 1;
                *a2 = v10 + 1;
                if (v14.tm_hour <= 0xFFu)
                {
                  uint64_t v12 = (v10 + 1);
                  if (v11 > v9) {
                    goto LABEL_24;
                  }
                  a2[v12 + 1] = v14.tm_hour;
                  if (v11 != 0xFF)
                  {
                    *a2 = v12 + 1;
                    if (v14.tm_min <= 0xFFu)
                    {
                      if ((v12 + 1) <= v9)
                      {
                        a2[(v12 + 1) + 1] = v14.tm_min;
                        if ((v12 + 1) != 255)
                        {
                          *a2 = v12 + 2;
                          return 0LL;
                        }

                        goto LABEL_23;
                      }

uint64_t sub_1000686A8(uint64_t result)
{
  if (result && (result & 7) == 0) {
    return 4LL;
  }
  __break(0x5516u);
  return result;
}

uint64_t sub_1000686C0(uint64_t result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_10;
  }
  if ((result & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t result = sub_10004783C();
  if (!result || (result & 7) != 0) {
    goto LABEL_10;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
  if (result >= 0x100)
  {
LABEL_11:
    __break(0x5507u);
    goto LABEL_12;
  }

  if (!a2)
  {
LABEL_10:
    __break(0x5516u);
    goto LABEL_11;
  }

  uint64_t v3 = *a2;
  if (!__CFADD__(a2 + 1, v3))
  {
    a2[v3 + 1] = result;
    if ((_DWORD)v3 != 255)
    {
      *a2 = v3 + 1;
      return 0LL;
    }

    goto LABEL_11;
  }

uint64_t sub_100068748(uint64_t result, _BYTE *a2)
{
  if (!result
    || (result & 7) != 0
    || (uint64_t result = sub_10004783C()) == 0
    || (result & 7) != 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 168LL))(result), !a2))
  {
    __break(0x5516u);
    goto LABEL_10;
  }

  uint64_t v3 = *a2;
  if (__CFADD__(a2 + 1, v3))
  {
LABEL_10:
    __break(0x5513u);
    goto LABEL_11;
  }

  a2[v3 + 1] = result;
  if ((_DWORD)v3 != 255)
  {
    *a2 = v3 + 1;
    return 0LL;
  }

uint64_t sub_1000687C8(uint64_t result, _BYTE *a2)
{
  if (!result
    || (result & 7) != 0
    || ((result = *(void *)(result + 1192)) != 0 ? (BOOL v2 = (result & 7) == 0) : (BOOL v2 = 0),
        !v2 || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 264LL))(result), !a2)))
  {
    __break(0x5516u);
    goto LABEL_13;
  }

  uint64_t v4 = *a2;
  if (__CFADD__(a2 + 1, v4))
  {
LABEL_13:
    __break(0x5513u);
    goto LABEL_14;
  }

  a2[v4 + 1] = result;
  if ((_DWORD)v4 != 255)
  {
    *a2 = v4 + 1;
    return 0LL;
  }

uint64_t sub_10006884C(uint64_t result, _BYTE *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_13;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 184LL))(result);
  if (result >= 0x100)
  {
LABEL_14:
    __break(0x550Au);
    goto LABEL_15;
  }

  if (!a2)
  {
LABEL_13:
    __break(0x5516u);
    goto LABEL_14;
  }

  uint64_t v4 = *a2;
  if (__CFADD__(a2 + 1, v4))
  {
LABEL_15:
    __break(0x5513u);
    goto LABEL_16;
  }

  a2[v4 + 1] = result;
  if ((_DWORD)v4 != 255)
  {
    *a2 = v4 + 1;
    return 0LL;
  }

uint64_t sub_1000688DC(uint64_t result, _BYTE *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_12;
  }
  unsigned int v2 = *(_DWORD *)(result + 2768);
  if (v2 >> 19 >= 0x7D) {
    unsigned int v3 = 0xFFFF;
  }
  else {
    unsigned int v3 = v2 / 0x3E8;
  }
  if (v3 >= 0x10000) {
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_12:
    __break(0x5516u);
LABEL_13:
    __break(0x5507u);
    goto LABEL_14;
  }

  uint64_t v4 = *a2;
  uint64_t v5 = &a2[v4 + 1];
  if (!__CFADD__(a2 + 1, v4))
  {
    if (v5)
    {
      _WORD *v5 = bswap32(v3) >> 16;
      if (v4 <= 0xFD)
      {
        *a2 = v4 + 2;
        return 0LL;
      }

      goto LABEL_13;
    }

    goto LABEL_12;
  }

uint64_t sub_10006895C(uint64_t result, unsigned __int8 *a2)
{
  if (!result) {
    goto LABEL_35;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t result = sub_10008E168(result, *(void *)(v2 + 8));
  if (!result)
  {
    __break(0x5518u);
    goto LABEL_35;
  }

  uint64_t v4 = result;
  uint64_t result = sub_100042AC4();
  if (!result) {
    goto LABEL_35;
  }
  uint64_t v5 = result;
  if ((result & 7) != 0) {
    goto LABEL_35;
  }
  unsigned __int8 v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 120LL))(result, v4);
  __int16 v7 = sub_1000774F8(*(void *)(v2 + 8));
  uint64_t result = sub_100061274();
  if (!result || (result & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t result = sub_10008D184(result, v4);
  if ((_DWORD)result == 56)
  {
    if ((v7 & 0x800) == 0 && *(_BYTE *)(v2 + 2756)) {
      return 2LL;
    }
  }

  if (*(unsigned __int8 *)(v2 + 2756) <= 1u)
  {
    if ((_DWORD)result != 56 && *(_BYTE *)(v2 + 2756))
    {
      uint64_t result = *(void *)(v2 + 8);
      if (!result) {
        goto LABEL_35;
      }
      if ((result & 7) != 0) {
        goto LABEL_35;
      }
      uint64_t result = sub_1000579D4(result);
      if (!result || (result & 7) != 0) {
        goto LABEL_35;
      }
      sub_10006C3D4(result, 1LL);
    }

    if ((v6 & 1) != 0)
    {
      unsigned __int8 v8 = 0;
      uint64_t result = 0LL;
    }

    else
    {
      unsigned int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 104LL))(v5, v4);
      unsigned __int8 v8 = sub_10006D798(v2, v9, 1);
      uint64_t result = sub_10006D798(v2, v9, 0);
    }

    if (a2)
    {
      unint64_t v10 = *a2;
      unint64_t v11 = ~(unint64_t)(a2 + 1);
      if (v11 >= v10)
      {
        a2[v10 + 1] = v6;
        if ((_DWORD)v10 == 255) {
          goto LABEL_37;
        }
        unsigned __int8 v12 = v10 + 1;
        unint64_t v13 = (v10 + 1);
        *a2 = v12;
        if (v13 <= v11)
        {
          a2[v13 + 1] = result;
          if (v12 != 0xFF)
          {
            unsigned __int8 v14 = v13 + 1;
            *a2 = v14;
            if (v14 <= v11)
            {
              a2[v14 + 1] = v8;
              if (v14 != 255)
              {
                uint64_t result = 0LL;
                *a2 = v14 + 1;
                return result;
              }

              goto LABEL_37;
            }

            goto LABEL_36;
          }

uint64_t sub_100068B50(uint64_t result, _BYTE *a2)
{
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_19;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_19;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)result + 464LL))(result) & 1) != 0)
  {
    uint64_t result = 0LL;
  }

  else
  {
    uint64_t result = *(void *)(v2 + 1192);
    if (!result || (result & 7) != 0) {
      goto LABEL_19;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
    if ((_DWORD)result) {
      uint64_t result = sub_10006D8F8(v2);
    }
  }

  if (!a2) {
    goto LABEL_19;
  }
  uint64_t v5 = *a2;
  unsigned __int8 v6 = &a2[v5 + 1];
  if (__CFADD__(a2 + 1, v5))
  {
LABEL_20:
    __break(0x5500u);
    goto LABEL_21;
  }

  if (!v6)
  {
LABEL_19:
    __break(0x5516u);
    goto LABEL_20;
  }

  *unsigned __int8 v6 = bswap32(result);
  if (v5 < 0xFC)
  {
    *a2 = v5 + 4;
    return 0LL;
  }

uint64_t sub_100068C14(uint64_t result, unsigned __int8 *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_29;
  }
  if ((unint64_t)(result + 1280) >= 0xFFFFFFFFFFFFFE50LL)
  {
LABEL_32:
    __break(0x5513u);
    goto LABEL_33;
  }

  if ((((_BYTE)result - 80) & 7) != 0) {
    goto LABEL_29;
  }
  uint64_t v2 = (unsigned int **)(result + 1720);
  if (((result + 1720) & 7) != 0) {
    goto LABEL_29;
  }
  unsigned int v3 = *v2;
  if (!*v2) {
    goto LABEL_29;
  }
  unsigned int v4 = *v3;
  BOOL v5 = __CFADD__(v3, 4LL);
  unsigned __int8 v6 = (int *)(v3 + 1);
  if (v5) {
    goto LABEL_30;
  }
  int v7 = *v6;
  unsigned int v8 = *(_DWORD *)(result + 2760);
  if (v8 < 8)
  {
    if (v8)
    {
      uint64_t result = *(void *)(result + 1192);
      if (!result) {
        goto LABEL_29;
      }
      if ((result & 7) != 0) {
        goto LABEL_29;
      }
      unsigned int v10 = bswap32(v4);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
      BOOL v11 = v10 != result;
      if (!a2) {
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t result = 0LL;
      BOOL v11 = 0;
      if (!a2) {
        goto LABEL_29;
      }
    }

    unint64_t v13 = a2 + 1;
    uint64_t v12 = *a2;
    unsigned __int8 v14 = &a2[v12 + 1];
    if (!__CFADD__(a2 + 1, v12))
    {
      if (!v14) {
        goto LABEL_29;
      }
      *(_DWORD *)unsigned __int8 v14 = bswap32(result);
      if (v12 >= 0xFC)
      {
LABEL_31:
        __break(0x5507u);
        goto LABEL_32;
      }

      unsigned __int8 v15 = v12 + 4;
      *a2 = v15;
      BOOL v5 = __CFADD__(v13, v15);
      uint64_t v16 = &v13[v15];
      int v17 = v5;
      if (v11)
      {
        if (!v17)
        {
          if (v16)
          {
            v7 ^= 0x400u;
            goto LABEL_27;
          }

          goto LABEL_29;
        }
      }

      else if (!v17)
      {
        if (v16)
        {
LABEL_27:
          *uint64_t v16 = v7;
          if (v15 <= 0xFBu)
          {
            *a2 = v15 + 4;
            return 0LL;
          }

          goto LABEL_31;
        }

uint64_t sub_100068D50(uint64_t result, unsigned int *a2)
{
  if (!result) {
    goto LABEL_42;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_42;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v4 = result && (result & 7) == 0;
  BOOL v5 = !v4 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v20 = result;
  if (!result) {
    goto LABEL_20;
  }
  uint64_t v7 = result;
  if ((result & 7) != 0) {
    goto LABEL_42;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result))
  {
LABEL_20:
    uint64_t v10 = 2LL;
LABEL_41:
    sub_100064D0C(&v20);
    return v10;
  }

  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 128LL))(v7);
  unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 368LL))(v7);
  if (v8 == -1)
  {
    if (dword_10011B6B0)
    {
      unsigned int v8 = 0;
    }

    else if (dword_10011B6B4)
    {
      unsigned int v8 = 0x7FFFFFFF;
    }

    else if (dword_10011B6B8)
    {
      unsigned int v8 = 300000;
    }

    else if (dword_10011B6BC)
    {
      unsigned int v8 = 86400000;
    }

    else if (dword_10011B6C0)
    {
      unsigned int v8 = 3600000;
    }

    else
    {
      unsigned int v8 = -1;
    }
  }

  BOOL v11 = (unsigned __int8 *)a2 + 6;
  uint64_t result = sub_10006D8F8(v2);
  if ((((_DWORD)a2 + 6) & 1) != 0) {
    goto LABEL_42;
  }
  uint64_t v12 = (char *)a2 + 7;
  uint64_t v13 = *((unsigned __int8 *)a2 + 6);
  unsigned __int8 v14 = (unsigned int *)((char *)a2 + v13 + 7);
  if (!v14) {
    goto LABEL_42;
  }
  *unsigned __int8 v14 = bswap32(result);
  unsigned __int8 v15 = v13 + 4;
  unsigned __int8 *v11 = v15;
  uint64_t v16 = &v12[v15];
  if (__CFADD__(v12, v15))
  {
LABEL_43:
    __break(0x5500u);
    goto LABEL_44;
  }

  if (!v16)
  {
LABEL_42:
    __break(0x5516u);
    goto LABEL_43;
  }

  *(_DWORD *)uint64_t v16 = bswap32(v8);
  if (v15 > 0xFBu) {
    goto LABEL_44;
  }
  unsigned __int8 v17 = v15 + 4;
  unsigned __int8 *v11 = v17;
  BOOL v18 = __CFADD__(v12, v17);
  uint64_t v19 = &v12[v17];
  if (v18) {
    goto LABEL_43;
  }
  if (!v19) {
    goto LABEL_42;
  }
  *(_WORD *)uint64_t v19 = bswap32(v9) >> 16;
  if (v17 <= 0xFDu)
  {
    uint64_t v10 = 0LL;
    unsigned __int8 *v11 = v17 + 2;
    goto LABEL_41;
  }

uint64_t sub_100068F5C(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_27;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_33;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 368LL))(v6);
  if (result <= *((unsigned __int16 *)a2 + 2))
  {
LABEL_27:
    uint64_t v9 = 4LL;
    goto LABEL_28;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 376LL))(v6);
  if ((((_DWORD)a2 + 6) & 1) != 0) {
    goto LABEL_33;
  }
  uint64_t v7 = *((unsigned __int8 *)a2 + 6);
  unsigned int v8 = (unsigned int *)((char *)a2 + v7 + 7);
  if (__CFADD__((char *)a2 + 7, v7))
  {
LABEL_34:
    __break(0x5500u);
    goto LABEL_35;
  }

  if (!v8) {
    goto LABEL_33;
  }
  *unsigned int v8 = bswap32(result);
  if (v7 >= 0xFC)
  {
LABEL_35:
    __break(0x5507u);
    goto LABEL_36;
  }

  *((_BYTE *)a2 + 6) = v7 + 4;
  if (((unint64_t)(a2 + 10) & 7) != 0)
  {
LABEL_33:
    __break(0x5516u);
    goto LABEL_34;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 384LL))(v6, *((unsigned __int16 *)a2 + 2));
  if (*((char *)a2 + 63) < 0)
  {
    if (*((void *)a2 + 6)) {
      goto LABEL_26;
    }
  }

  else if (*((_BYTE *)a2 + 63))
  {
LABEL_26:
    uint64_t v9 = 0LL;
LABEL_28:
    sub_100064D0C(&v11);
    return v9;
  }

  uint64_t v10 = *((unsigned __int8 *)a2 + 6);
  if (v10 >= 0x21)
  {
LABEL_36:
    __break(0x5512u);
    goto LABEL_37;
  }

  if (!__CFADD__((char *)a2 + 7, v10))
  {
    uint64_t v9 = 0LL;
    *((_BYTE *)a2 + v10 + 7) = 0;
    *((_BYTE *)a2 + 6) = v10 + 1;
    goto LABEL_28;
  }

uint64_t sub_1000690E8(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result)
  {
LABEL_19:
    uint64_t v7 = 2LL;
    goto LABEL_20;
  }

  if (((unint64_t)(a2 + 10) & 7) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 48LL))(v6);
    uint64_t v7 = 0LL;
LABEL_20:
    sub_100064D0C(&v8);
    return v7;
  }

uint64_t sub_1000691A8(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result)
  {
LABEL_19:
    uint64_t v7 = 2LL;
    goto LABEL_20;
  }

  if (((unint64_t)(a2 + 10) & 7) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40LL))(v6);
    uint64_t v7 = 0LL;
LABEL_20:
    sub_100064D0C(&v8);
    return v7;
  }

uint64_t sub_100069268(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result)
  {
LABEL_19:
    uint64_t v7 = 2LL;
    goto LABEL_20;
  }

  if (((unint64_t)(a2 + 10) & 7) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 56LL))(v6);
    uint64_t v7 = 0LL;
LABEL_20:
    sub_100064D0C(&v8);
    return v7;
  }

uint64_t sub_100069328(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result)
  {
LABEL_19:
    uint64_t v7 = 2LL;
    goto LABEL_20;
  }

  if (((unint64_t)(a2 + 10) & 7) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 32LL))(v6);
    uint64_t v7 = 0LL;
LABEL_20:
    sub_100064D0C(&v8);
    return v7;
  }

uint64_t sub_1000693E8(uint64_t result, unsigned int *a2)
{
  if (!result || (result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v3 = result && (result & 7) == 0;
  BOOL v4 = !v3 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v6 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result)
  {
LABEL_19:
    uint64_t v7 = 2LL;
    goto LABEL_20;
  }

  if (((unint64_t)(a2 + 10) & 7) == 0)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 64LL))(v6);
    uint64_t v7 = 0LL;
LABEL_20:
    sub_100064D0C(&v8);
    return v7;
  }

uint64_t sub_1000694A8(uint64_t result, unsigned int *a2)
{
  if (!result) {
    goto LABEL_35;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_35;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_35;
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 376LL))(result);
  uint64_t result = *(void *)(v2 + 1192);
  if (!result) {
    goto LABEL_35;
  }
  if ((result & 7) != 0) {
    goto LABEL_35;
  }
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
  uint64_t result = *(void *)(v2 + 1192);
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v15 = result;
  if (!result)
  {
LABEL_29:
    uint64_t v14 = 2LL;
    goto LABEL_30;
  }

  uint64_t v7 = result;
  if ((result & 7) != 0)
  {
LABEL_35:
    __break(0x5516u);
    goto LABEL_36;
  }

  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result);
  if (!(_DWORD)result) {
    goto LABEL_29;
  }
  int v8 = *a2;
  if (*a2 >= v6) {
    goto LABEL_29;
  }
  unint64_t v9 = *((unsigned __int8 *)a2 + 6);
  if ((_DWORD)v9 == 255) {
    goto LABEL_38;
  }
  unint64_t v10 = v9 + 1;
  *((_BYTE *)a2 + 6) = v9 + 1;
  unint64_t v11 = ~((unint64_t)a2 + 7);
  if (v11 < v9)
  {
LABEL_37:
    __break(0x5513u);
    goto LABEL_38;
  }

  *((_BYTE *)a2 + v9 + 7) = 0;
  unint64_t v12 = v9 + 2;
  *((_BYTE *)a2 + 6) = v9 + 2;
  if (v9 > 0x1F)
  {
LABEL_36:
    __break(0x5512u);
    goto LABEL_37;
  }

  if (v11 < v10) {
    goto LABEL_37;
  }
  *((_BYTE *)a2 + v10 + 7) = 0;
  unsigned int v13 = v9 + 3;
  *((_BYTE *)a2 + 6) = v9 + 3;
  if (v11 < v12) {
    goto LABEL_37;
  }
  *((_BYTE *)a2 + v12 + 7) = 0;
  if (v5 != v8) {
    goto LABEL_32;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 256LL))(v7);
  if ((_DWORD)result)
  {
    if (((unint64_t)(a2 + 10) & 7) == 0)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 96LL))(v7);
      uint64_t v14 = 0LL;
LABEL_30:
      sub_100064D0C(&v15);
      return v14;
    }

    goto LABEL_35;
  }

  unsigned int v13 = *((unsigned __int8 *)a2 + 6);
  if (v13 != 255)
  {
LABEL_32:
    *((_BYTE *)a2 + 6) = v13 + 1;
    if (v13 <= 0x20)
    {
      if (v11 >= v13)
      {
        uint64_t v14 = 0LL;
        *((_BYTE *)a2 + v13 + 7) = 0;
        goto LABEL_30;
      }

      goto LABEL_37;
    }

    goto LABEL_36;
  }

uint64_t sub_100069694(uint64_t result, unsigned int *a2)
{
  if (!result) {
    goto LABEL_21;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_21;
  }
  uint64_t result = *(void *)(result + 1192);
  BOOL v4 = result && (result & 7) == 0;
  BOOL v5 = !v4 || a2 == 0LL;
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 400LL))(result, *a2);
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v7 = result;
  if ((result & 7) == 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16LL))(result))
    {
      sub_100062984(v2, v7, (uint64_t)a2 + 7, 0x21u, (_BYTE *)a2 + 6);
      uint64_t v9 = v8;
      if (v8 < 0x20)
      {
LABEL_20:
        sub_100064D0C(&v10);
        return v9;
      }

      __break(0x550Au);
    }

uint64_t sub_100069764(uint64_t result)
{
  if (!result || (result & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    uint64_t result = sub_1000CE91C(result, 1u);
    *(void *)uint64_t result = off_100103838;
  }

  return result;
}

void sub_100069798(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_100066C78(a1, a2);
  }
}

void sub_1000697AC(uint64_t a1)
{
  if (!a1) {
    goto LABEL_34;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_34;
  }
  *(void *)a1 = off_100105E88;
  uint64_t v2 = sub_10004783C();
  if (!v2) {
    goto LABEL_34;
  }
  if ((v2 & 7) != 0) {
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 24LL))(v2, a1);
  uint64_t v3 = sub_100042AC4();
  if (!v3) {
    goto LABEL_34;
  }
  if ((v3 & 7) != 0) {
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 24LL))(v3, a1);
  uint64_t v4 = *(void *)(a1 + 1192);
  if (!v4) {
    goto LABEL_34;
  }
  if ((v4 & 7) != 0) {
    goto LABEL_34;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 24LL))(v4, a1);
  sub_1000612C4(*(void *)(a1 + 8));
  if (!v5) {
    goto LABEL_34;
  }
  if ((v5 & 7) != 0) {
    goto LABEL_34;
  }
  sub_10005EB3C(v5, *(_DWORD *)(a1 + 2744));
  sub_1000612C4(*(void *)(a1 + 8));
  if (!v6) {
    goto LABEL_34;
  }
  if ((v6 & 7) != 0) {
    goto LABEL_34;
  }
  sub_10005D014(v6, *(_DWORD *)(a1 + 2744));
  *(_DWORD *)(a1 + 2744) = -1;
  uint64_t v7 = sub_100061274();
  if (!v7) {
    goto LABEL_34;
  }
  if ((v7 & 7) != 0) {
    goto LABEL_34;
  }
  sub_10008C5A8(v7, 3, 0, *(void *)(a1 + 8));
  sub_100067978(a1);
  if (((a1 + 2880) & 7) != 0) {
    goto LABEL_34;
  }
  if (((a1 + 2856) & 7) != 0) {
    goto LABEL_34;
  }
  if (((a1 + 2832) & 7) != 0) {
    goto LABEL_34;
  }
  if (((a1 + 2808) & 7) != 0) {
    goto LABEL_34;
  }
  if (((a1 + 2784) & 7) != 0) {
    goto LABEL_34;
  }
  if ((((_BYTE)a1 - 32) & 7) != 0 || (((_BYTE)a1 - 48) & 7) != 0 || (((_BYTE)a1 - 32) & 7) != 0) {
LABEL_34:
  }
    __break(0x5516u);
  else {
    sub_100061324(a1);
  }
}

void sub_100069960(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0) {
    __break(0x5516u);
  }
  else {
    sub_1000697AC(a1);
  }
}

void sub_100069974(uint64_t a1)
{
  if (!a1 || (a1 & 7) != 0)
  {
    __break(0x5516u);
  }

  else
  {
    sub_1000697AC(a1);
    operator delete(v1);
  }

uint64_t sub_100069998(uint64_t a1, uint64_t a2)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_168;
  }
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = sub_100061274();
    if (!v4 || (v4 & 7) != 0) {
      goto LABEL_168;
    }
    if (sub_10008E7AC(v4, *(void *)(a1 + 8)))
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5 || (v5 & 7) != 0) {
        goto LABEL_168;
      }
      if ((sub_1000569F0(v5) & 1) != 0) {
        return 89LL;
      }
      if (!a2 || (a2 & 7) != 0) {
        goto LABEL_168;
      }
      uint64_t v7 = *(void *)(a2 + 8);
      unsigned int v8 = *(unsigned __int16 *)(a2 + 126);
      unsigned int v9 = *(unsigned __int16 *)(a2 + 128);
      uint64_t v10 = *(unsigned __int8 **)(a2 + 24);
      memset(v66, 170, 21);
      if (!v7) {
        sub_1000D27A0(0LL);
      }
      if (v9 && !v10) {
LABEL_171:
      }
        sub_1000D276C();
      if (!*(_BYTE *)(a1 + 2748))
      {
        unsigned int v11 = *(_DWORD *)(a1 + 2752);
        if (v11 > 0xF) {
          goto LABEL_170;
        }
        if (v11 == 6)
        {
          *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
          sub_1000612C4(*(void *)(a1 + 8));
          if (v12)
          {
            sub_1000612C4(*(void *)(a1 + 8));
            if (!v13 || (v13 & 7) != 0) {
              goto LABEL_168;
            }
            sub_10005EA88(v13, *(_DWORD *)(a1 + 2744));
          }
        }
      }

      if ((v7 & 7) != 0) {
        goto LABEL_168;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 136LL))(v7, 3LL);
      if (result >= 0x10000)
      {
LABEL_172:
        __break(0x5507u);
LABEL_173:
        __break(0x5500u);
        goto LABEL_174;
      }

      switch(v8)
      {
        case 1u:
        case 3u:
        case 4u:
        case 6u:
          LOWORD(v14) = result;
          LODWORD(v63) = -1431655766;
          uint64_t v15 = *(void *)(a1 + 1192);
          if (!v15) {
            goto LABEL_168;
          }
          if ((v15 & 7) != 0) {
            goto LABEL_168;
          }
          unsigned int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 240LL))(v15);
          uint64_t v17 = *(void *)(a1 + 1192);
          if (!v17 || (v17 & 7) != 0) {
            goto LABEL_168;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 544LL))(v17);
          if (v8 == 1 && !v9)
          {
            LODWORD(v63) = bswap32(v16);
            int v18 = *(_DWORD *)(a2 + 68);
            unsigned int v19 = 4;
            uint64_t v20 = (std::string *)&v63;
            uint64_t v21 = a2;
            uint64_t v22 = v7;
            __int16 v23 = 2;
            goto LABEL_36;
          }

          if (v8 == 3 && v9 == 5)
          {
            if (!v10) {
              goto LABEL_168;
            }
            uint64_t v25 = bswap32(*(_DWORD *)v10);
            if (v25 < result)
            {
              if ((_DWORD)v25 == v16)
              {
LABEL_157:
                unsigned int v19 = 0;
                goto LABEL_158;
              }

              if ((unint64_t)v10 < 0xFFFFFFFFFFFFFFFCLL)
              {
                sub_10006A440(a1, v25, v10[4], v7);
                goto LABEL_157;
              }

LABEL_174:
              __break(0x5513u);
              return result;
            }

LABEL_168:
              __break(0x5516u);
            }

            if (v19 <= 0x1F)
            {
              sub_1000ABE78(a2, v7, 0, 3LL, 0, *(_DWORD *)(a2 + 68), v19, v8, 0, 255, 0LL, 0, 0, 0);
              goto LABEL_161;
            }

LABEL_170:
            __break(0x550Au);
            goto LABEL_171;
          }

          if (v8 == 4 && !v9)
          {
            LODWORD(v63) = bswap32(result);
            int v18 = *(_DWORD *)(a2 + 68);
            unsigned int v19 = 4;
            uint64_t v20 = (std::string *)&v63;
            uint64_t v21 = a2;
            uint64_t v22 = v7;
            __int16 v23 = 5;
LABEL_36:
            unsigned int v24 = 4;
LABEL_37:
            sub_1000AC324(v21, v22, 0, 3LL, v23, v18, v20, v24);
            goto LABEL_158;
          }

          unsigned int v19 = 4;
          if (v8 != 6 || v9 != 4) {
            goto LABEL_158;
          }
          if (!v10) {
            goto LABEL_168;
          }
          memset(&v65, 0, sizeof(v65));
          uint64_t v48 = *(void *)(a1 + 1192);
          if (!v48 || (v48 & 7) != 0) {
            goto LABEL_168;
          }
          unsigned int v49 = &v65;
          (*(void (**)(uint64_t))(*(void *)v48 + 552LL))(v48);
          if ((char)v65.__r_.__value_.__s.__size_ < 0)
          {
            unsigned int v49 = (std::string *)v65.__r_.__value_.__r.__words[0];
            if (!v65.__r_.__value_.__r.__words[0]) {
              goto LABEL_144;
            }
          }

          BOOL v50 = operator new[]((unsigned __int16)v14);
          uint64_t result = strlen((const char *)v49);
          if (result == -1) {
            goto LABEL_173;
          }
          if (result + 1 > (unint64_t)(unsigned __int16)v14)
          {
            memcpy(v50, v49, (unsigned __int16)v14);
LABEL_143:
            sub_1000616D4(a1, (uint64_t)v50, (unsigned __int16)v14);
            sub_1000AC324(a2, v7, 0, 3LL, 7, *(_DWORD *)(a2 + 68), v50, (unsigned __int16)v14);
            operator delete[](v50);
LABEL_144:
            std::string::~string(&v65);
LABEL_145:
            unsigned int v19 = 2;
            goto LABEL_158;
          }

          size_t v14 = (result + 1);
          if ((_DWORD)result == -1) {
            goto LABEL_173;
          }
          uint64_t result = (uint64_t)memcpy(v50, v49, v14);
          if (!WORD1(v14)) {
            goto LABEL_143;
          }
          goto LABEL_172;
        case 8u:
          if (v9 != 4) {
            goto LABEL_110;
          }
          if (!v10) {
            goto LABEL_168;
          }
          unsigned int v26 = bswap32(*(_DWORD *)v10);
          *(_BYTE *)(a1 + 2756) = 1;
          sub_10006A528(a1, v7, v26);
          *(_BYTE *)(a1 + 2756) = 0;
          unsigned int v19 = 4 * (v27 != 0);
          goto LABEL_158;
        case 0xAu:
          if (v9) {
            goto LABEL_110;
          }
          LODWORD(v65.__r_.__value_.__l.__data_) = -1431655766;
          if ((((_BYTE)a1 - 72) & 7) != 0) {
            goto LABEL_168;
          }
          sub_10006A6A4(a1, ~*(_DWORD *)(a1 + 1208) & 0x7FFFF, 0);
          __int128 v28 = (unsigned int *)(a1 + 1212);
          if (((a1 + 1212) & 3) != 0) {
            goto LABEL_168;
          }
          unsigned int v29 = *v28;
          LODWORD(v65.__r_.__value_.__l.__data_) = bswap32(*v28);
          unsigned int v19 = 4;
          sub_1000AC324(a2, v7, 0, 3LL, 11, *(_DWORD *)(a2 + 68), &v65, 4u);
          *v28 &= ~v29;
          goto LABEL_158;
        case 0xCu:
          if (v9 != 1) {
            goto LABEL_110;
          }
          *(_BYTE *)(a1 + 2756) = 1;
          unsigned int v19 = sub_10006ABB0(a1, a2);
          *(_BYTE *)(a1 + 2756) = 0;
          goto LABEL_158;
        case 0xEu:
          if (v9 < 2) {
            goto LABEL_110;
          }
          unsigned int v30 = sub_10006AE4C(a1, a2);
          goto LABEL_113;
        case 0xFu:
          if (v9) {
            goto LABEL_110;
          }
          *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 5) = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v64 = 0LL;
          v65.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
          uint64_t result = sub_100061534((_DWORD *)&v64 + 1, (int *)&v64);
          if ((_DWORD)result)
          {
            __break(0x5518u);
            goto LABEL_170;
          }

          v65.__r_.__value_.__s.__data_[0] = v64;
          if (!(_DWORD)v64)
          {
            int v32 = -1;
            int v37 = -1;
            unsigned int v34 = -1;
            goto LABEL_154;
          }

          uint64_t v31 = *(void *)(a1 + 1192);
          if (!v31) {
            goto LABEL_168;
          }
          if ((v31 & 7) != 0) {
            goto LABEL_168;
          }
          int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 376LL))(v31);
          uint64_t v33 = *(void *)(a1 + 1192);
          if (!v33) {
            goto LABEL_168;
          }
          if ((v33 & 7) != 0) {
            goto LABEL_168;
          }
          unsigned int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 408LL))(v33);
          unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v35 = *(void *)(a1 + 1192);
          if (!v35 || (v35 & 7) != 0) {
            goto LABEL_168;
          }
          uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 384LL))(v35);
          unint64_t v63 = v36;
          if (!v36) {
            goto LABEL_135;
          }
          if ((v36 & 7) != 0) {
            goto LABEL_168;
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v36 + 16LL))(v36) & 1) != 0)
          {
            if (!v63 || (v63 & 7) != 0) {
              goto LABEL_168;
            }
            int v37 = (*(uint64_t (**)(void))(*(void *)v63 + 128LL))();
            if (v37 != -1) {
              goto LABEL_153;
            }
          }

          else
          {
LABEL_135:
            LODWORD(v64) = 0;
            int v32 = -1;
          }

          if (dword_10011B6B0)
          {
            int v37 = 0;
          }

          else if (dword_10011B6B4)
          {
            int v37 = 0x7FFFFFFF;
          }

          else if (dword_10011B6B8)
          {
            int v37 = 300000;
          }

          else if (dword_10011B6BC)
          {
            int v37 = 86400000;
          }

          else if (dword_10011B6C0)
          {
            int v37 = 3600000;
          }

          else
          {
            int v37 = -1;
          }

              __break(0x5516u);
LABEL_171:
              __break(0x550Au);
            }
          }

LABEL_153:
          uint64_t result = (uint64_t)sub_100064D0C(&v63);
LABEL_154:
          *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + 1) = _byteswap_uint64(__PAIR64__(v32, v37));
          if ((unint64_t)&v65 < 0xFFFFFFFFFFFFFFF7LL)
          {
            *(_DWORD *)((char *)&v65.__r_.__value_.__r.__words[1] + 1) = bswap32(v34);
            int v41 = *(_DWORD *)(a2 + 68);
            unint64_t v46 = &v65;
            uint64_t v43 = a2;
            uint64_t v44 = v7;
            __int16 v45 = 16;
            unsigned int v42 = 13;
LABEL_156:
            sub_1000AC324(v43, v44, 0, 3LL, v45, v41, v46, v42);
            goto LABEL_157;
          }

          goto LABEL_173;
        case 0x11u:
          if (v9 != 4) {
            goto LABEL_110;
          }
          if (!v10) {
            goto LABEL_168;
          }
          unsigned int v30 = sub_10006B384(a1, bswap32(*(_DWORD *)v10));
LABEL_113:
          unsigned int v19 = v30;
          goto LABEL_158;
        case 0x12u:
          if (v9 != 7) {
            goto LABEL_110;
          }
          unsigned int v30 = sub_10006B5E8(a1, a2);
          if (*(void *)(a2 + 8)) {
            goto LABEL_113;
          }
          sub_1000AD43C(a2);
          return 2LL;
        case 0x14u:
          if (v9) {
            goto LABEL_110;
          }
          LODWORD(v65.__r_.__value_.__l.__data_) = -1431655766;
          uint64_t v38 = *(void *)(a1 + 1192);
          if (!v38 || (v38 & 7) != 0) {
            goto LABEL_168;
          }
          LODWORD(v65.__r_.__value_.__l.__data_) = bswap32((*(uint64_t (**)(uint64_t))(*(void *)v38 + 392LL))(v38));
          int v18 = *(_DWORD *)(a2 + 68);
          unsigned int v19 = 4;
          uint64_t v20 = &v65;
          uint64_t v21 = a2;
          uint64_t v22 = v7;
          __int16 v23 = 21;
          goto LABEL_36;
        case 0x16u:
          if (v9) {
            goto LABEL_110;
          }
          unsigned int v30 = sub_1000617EC(a1, a2);
          goto LABEL_113;
        case 0x18u:
          if (v9 != 10) {
            goto LABEL_110;
          }
          uint64_t v39 = *(void *)(a1 + 1192);
          if (!v39 || (v39 & 7) != 0) {
            goto LABEL_168;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 464LL))(v39);
          if ((result & 1) != 0) {
            goto LABEL_110;
          }
          if (!v10) {
            goto LABEL_168;
          }
          unsigned int v40 = sub_100062820( a1,  a2,  1u,  bswap32(*(_DWORD *)v10),  __rev16(*((unsigned __int16 *)v10 + 2)),  bswap32(*(_DWORD *)(v10 + 6)));
          if (v40 > 0x1F) {
            goto LABEL_170;
          }
          unsigned int v19 = v40;
          uint64_t result = 2LL;
          if (v19 && v19 != 6) {
            goto LABEL_158;
          }
          return result;
        case 0x1Au:
          if (v9) {
            goto LABEL_110;
          }
          LOBYTE(v66[0]) = 0;
          unsigned int v19 = sub_1000681B4(a1, (unsigned __int8 *)v66);
          if (v19) {
            goto LABEL_158;
          }
          int v18 = *(_DWORD *)(a2 + 68);
          unsigned int v24 = LOBYTE(v66[0]);
          uint64_t v21 = a2;
          uint64_t v22 = v7;
          __int16 v23 = 27;
          uint64_t v20 = (std::string *)((char *)v66 + 1);
          goto LABEL_37;
        case 0x1Cu:
          if (v9) {
            goto LABEL_110;
          }
          LOBYTE(v66[0]) = 0;
          sub_1000687C8(a1, v66);
          int v41 = *(_DWORD *)(a2 + 68);
          unsigned int v42 = LOBYTE(v66[0]);
          uint64_t v43 = a2;
          uint64_t v44 = v7;
          __int16 v45 = 29;
          unint64_t v46 = (std::string *)((char *)v66 + 1);
          goto LABEL_156;
        case 0x1Eu:
          if (v9 != 2) {
            goto LABEL_110;
          }
          if (!v10) {
            goto LABEL_168;
          }
          sub_10006BC98((void *)a1, *v10, v10[1], v7);
          goto LABEL_157;
        case 0x1Fu:
          if (v9 != 10) {
            goto LABEL_110;
          }
          uint64_t v47 = *(void *)(a1 + 1192);
          if (!v47 || (v47 & 7) != 0) {
            goto LABEL_168;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 464LL))(v47);
          if ((result & 1) != 0) {
            goto LABEL_110;
          }
          if (!v10) {
            goto LABEL_168;
          }
          unsigned int v51 = *(_DWORD *)v10;
          unsigned int v52 = *((unsigned __int16 *)v10 + 2);
          unsigned int v53 = *((unsigned __int16 *)v10 + 3);
          unsigned int v54 = *((unsigned __int16 *)v10 + 4);
          v65.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v55 = *(void *)(a1 + 1192);
          if (!v55 || (v55 & 7) != 0) {
            goto LABEL_168;
          }
          unint64_t v56 = bswap32(v51);
          uint64_t v57 = bswap32(v52) >> 16;
          unsigned int v58 = bswap32(v53) >> 16;
          int v59 = __rev16(v54);
          v65.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v55
                                                                                                  + 400LL))( v55,  v56);
          unsigned int v19 = sub_100061A84(a1, a2, 1u, v56, (uint64_t)v65.__r_.__value_.__l.__data_, v57, v58, v59);
          sub_100064D0C(&v65);
          goto LABEL_158;
        case 0x21u:
          unsigned int v30 = sub_1000638CC(a1, a2);
          goto LABEL_113;
        case 0x22u:
          unsigned int v30 = sub_100063AB4(a1, a2);
          goto LABEL_113;
        default:
          unsigned int v19 = 4;
          sub_1000CEAEC( 0,  4,  "%s:%d ERROR: CIapLingoDisplayRemote::ProcessCmd invalid cmd: 0x%08X !\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoDisplayRemote.cpp",  877,  v8);
          goto LABEL_158;
      }
    }
  }

  return 89LL;
}

uint64_t sub_10006A440(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if ((result & 7) == 0)
    {
      uint64_t result = *(void *)(result + 1192);
      if (result && (result & 7) == 0)
      {
        uint64_t result = *(void *)(v4 + 1192);
        if (result)
        {
          if ((result & 7) == 0)
          {
            int v9 = (*(uint64_t (**)(uint64_t))(*(void *)result + 240LL))(result);
            if (a3) {
              sub_10006D06C(v4, 6u, a4, v9, 0);
            }
            else {
              sub_10006D144(v4, 6u);
            }
            if (v9 == (_DWORD)a2) {
              return 0LL;
            }
            uint64_t result = *(void *)(v4 + 1192);
            if (result && (result & 7) == 0)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)result + 232LL))(result, a2);
              return 0LL;
            }
          }
        }
      }
    }
  }

  __break(0x5516u);
  return result;
}

void sub_10006A528(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    goto LABEL_37;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_37;
  }
  __int16 v6 = sub_1000774F8(*(void *)(a1 + 8));
  uint64_t v7 = sub_100061274();
  if (!v7 || (v7 & 7) != 0) {
    goto LABEL_37;
  }
  int v8 = sub_10008D184(v7, a2);
  if (v8 == 56)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + 2756);
    if (v9 >= 2) {
      goto LABEL_38;
    }
    BOOL v11 = (a3 & 0x10010) != 0 && v9 != 0;
    BOOL v12 = (v6 & 0x800) != 0LL || !v11;
  }

  else
  {
    BOOL v12 = 1;
  }

  if (a3 >> 19 || !a2 || !v12) {
    return;
  }
  if ((((_BYTE)a1 - 72) & 7) != 0) {
    goto LABEL_37;
  }
  *(_DWORD *)(a1 + 120_Block_object_dispose((const void *)(v1 - 48), 8) = a3;
  if ((((_BYTE)a1 - 68) & 3) != 0) {
    goto LABEL_37;
  }
  *(_DWORD *)(a1 + 1212) = a3;
  if (*(unsigned __int8 *)(a1 + 2756) > 1u)
  {
LABEL_38:
    __break(0x550Au);
    return;
  }

  if (*(_BYTE *)(a1 + 2756) && (a3 & 0x10010) != 0 && v8 != 56)
  {
    uint64_t v13 = *(void *)(a1 + 8);
    if (v13)
    {
      if ((v13 & 7) == 0)
      {
        uint64_t v14 = sub_1000579D4(v13);
        if (v14)
        {
          if ((v14 & 7) == 0)
          {
            sub_10006C3D4(v14, 1LL);
            goto LABEL_30;
          }
        }
      }
    }

uint64_t sub_10006A6A4(uint64_t a1, int a2, int a3)
{
  if (!a1) {
    goto LABEL_81;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_81;
  }
  uint64_t v31 = (_DWORD *)(a1 + 1212);
  if (((a1 + 1212) & 3) != 0) {
    goto LABEL_81;
  }
  int v36 = *(_DWORD *)(a1 + 1212);
  if (!*(_BYTE *)(a1 + 1200))
  {
    int v6 = 0;
    goto LABEL_17;
  }

  pthread_mutex_lock(&stru_10011B660);
  int v5 = dword_10011B658;
  int v6 = *(_DWORD *)(a1 + 1784);
  *(_DWORD *)(a1 + 1784) = 0;
  unsigned int v7 = *(_DWORD *)(a1 + 2760);
  if (v7 > 7)
  {
LABEL_79:
    __break(0x550Au);
LABEL_80:
    __break(0x5513u);
    goto LABEL_81;
  }

  int v8 = ~v5 & 8;
  if ((a2 & 0x28007) == 0) {
    int v8 = 0;
  }
  int v9 = v8 | a2;
  if (!v7) {
    v9 &= 0xFFFD7FF8;
  }
  if ((((_BYTE)a1 - 72) & 7) != 0) {
    goto LABEL_81;
  }
  int v10 = *(_DWORD *)(a1 + 1780);
  unsigned int v11 = v10 & v9 | v6;
  if ((*(_DWORD *)(a1 + 1208) & 0x10010) != 0 && *(_DWORD *)(a1 + 1788) != *(_DWORD *)(a1 + 1792)) {
    v11 |= a2 & 0x10010;
  }
  *(_DWORD *)(a1 + 1792) = *(_DWORD *)(a1 + 1788);
  a2 = BYTE2(v11) & ~(_BYTE)v5 & 2 | ((int)(v11 << 29) >> 31) & ~v5 & 0xB | (v11 >> 15) & ~(_BYTE)v5 & 1 | v11;
  *(_DWORD *)(a1 + 1780) = v10 & ~(a2 & v5);
  pthread_mutex_unlock(&stru_10011B660);
LABEL_17:
  *(_BYTE *)(a1 + 2757) = 0;
  if ((v6 & 2) == 0) {
    goto LABEL_29;
  }
  *(_BYTE *)(a1 + 2757) = 1;
  uint64_t v12 = sub_1000C7788();
  if (!v12 || (v12 & 7) != 0) {
    goto LABEL_81;
  }
  *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)uint64_t v38 = v13;
  *(_OWORD *)&v38[16] = v13;
  unint64_t v39 = 0xAAAAAAAAAAAAAAAALL;
  memset(&__p, 0, sizeof(__p));
  memset(&v37[1], 170, 20);
  v37[0] = 0;
  sub_100067AF0(a1, v37);
  if (*(_DWORD *)(a1 + 2764) != -1)
  {
    *(_DWORD *)uint64_t v38 = *(_DWORD *)(a1 + 2764);
    sub_100069268(a1, (unsigned int *)v38);
    if (((a1 + 2832) & 7) == 0)
    {
      std::string::operator=((std::string *)(a1 + 2832), &__p);
      sub_1000690E8(a1, (unsigned int *)v38);
      if (((a1 + 2784) & 7) == 0)
      {
        std::string::operator=((std::string *)(a1 + 2784), &__p);
        sub_100069328(a1, (unsigned int *)v38);
        if (((a1 + 2856) & 7) == 0)
        {
          std::string::operator=((std::string *)(a1 + 2856), &__p);
          sub_1000691A8(a1, (unsigned int *)v38);
          if (((a1 + 2808) & 7) == 0)
          {
            std::string::operator=((std::string *)(a1 + 2808), &__p);
            sub_1000693E8(a1, (unsigned int *)v38);
            if (((a1 + 2880) & 7) == 0)
            {
              std::string::operator=((std::string *)(a1 + 2880), &__p);
              goto LABEL_28;
            }
          }
        }
      }
    }

uint64_t sub_10006ABB0(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_44;
  }
  uint64_t v2 = (void *)result;
  if ((result & 7) != 0 || !a2 || (a2 & 7) != 0) {
    goto LABEL_44;
  }
  int v4 = *(unsigned __int16 *)(a2 + 128);
  int v5 = *(unsigned __int8 **)(a2 + 24);
  memset(v24, 170, 21);
  if (!v5 || v4 != 1)
  {
LABEL_42:
    __break(0x5518u);
LABEL_43:
    sub_1000D276C();
  }

  if (!*(void *)(a2 + 8)) {
    goto LABEL_43;
  }
  uint64_t v6 = *v5;
  unsigned int v7 = (int *)(result + 1208);
  if (((result + 1208) & 7) != 0) {
LABEL_44:
  }
    __break(0x5516u);
  int v8 = *v7;
  if ((*v7 & 0x8005) == 0 && ((_DWORD)v6 == 15 || (_DWORD)v6 == 2))
  {
    if ((((_BYTE)result - 8) & 7) != 0) {
      goto LABEL_44;
    }
    int v9 = *(uint64_t (**)(void *, __int16 *))(result + 2296);
    uint64_t v10 = *(void *)(result + 2304);
    memset(v23, 170, sizeof(v23));
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    __int16 v21 = 1;
    unsigned int v11 = (void *)(result + (v10 >> 1));
    if ((v10 & 1) != 0) {
      int v9 = *(uint64_t (**)(void *, __int16 *))(*v11 + v9);
    }
    uint64_t result = v9(v11, &v21);
    int v8 = *v7;
  }

  if ((v8 & 0x20006) == 0 && ((_DWORD)v6 == 17 || (_DWORD)v6 == 2))
  {
    uint64_t v12 = (uint64_t (*)(void *, __int16 *))v2[289];
    uint64_t v13 = v2[290];
    memset(v23, 170, sizeof(v23));
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    __int16 v21 = 257;
    unint64_t v14 = (void *)((char *)v2 + (v13 >> 1));
    if ((v13 & 1) != 0) {
      uint64_t v12 = *(uint64_t (**)(void *, __int16 *))(*v14 + v12);
    }
    uint64_t result = v12(v14, &v21);
    int v8 = *v7;
  }

  if ((_DWORD)v6 != 2 || (v8 & 0x20006) != 0) {
    goto LABEL_32;
  }
  if ((unint64_t)(v2 + 287) > 0xFFFFFFFFFFFFFFCFLL)
  {
LABEL_45:
    __break(0x5513u);
LABEL_46:
    __break(0x550Au);
    return result;
  }

  char v15 = (uint64_t (*)(void *, __int16 *))v2[293];
  uint64_t v16 = v2[294];
  memset(v23, 170, sizeof(v23));
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v21 = 769;
  uint64_t v17 = (void *)((char *)v2 + (v16 >> 1));
  if ((v16 & 1) != 0) {
    char v15 = *(uint64_t (**)(void *, __int16 *))(*v17 + v15);
  }
  uint64_t result = v15(v17, &v21);
LABEL_32:
  if (__CFADD__(v2 + 287, 16 * v6)) {
    goto LABEL_45;
  }
  if ((((_BYTE)v2 - 8 + 16 * (_BYTE)v6) & 7) != 0) {
    goto LABEL_44;
  }
  uint64_t v18 = (uint64_t (*)(void *, void *))v2[2 * v6 + 287];
  uint64_t v19 = v2[2 * v6 + 288];
  BYTE1(v24[0]) = v6;
  LOBYTE(v24[0]) = 1;
  uint64_t v20 = (void *)((char *)v2 + (v19 >> 1));
  if ((v19 & 1) != 0) {
    uint64_t v18 = *(uint64_t (**)(void *, void *))(*v20 + v18);
  }
  uint64_t result = v18(v20, v24);
  if (!(_DWORD)result)
  {
    if (LOBYTE(v24[0]) - 2 <= 0x11)
    {
      sub_1000AC324(a2, *(void *)(a2 + 8), 0, 3LL, 13, *(_DWORD *)(a2 + 68), (char *)v24 + 1, LOBYTE(v24[0]));
      return 0LL;
    }

    goto LABEL_42;
  }

  return result;
}

uint64_t sub_10006AE4C(uint64_t result, uint64_t a2)
{
  if (!result || (uint64_t v2 = result, (result & 7) != 0) || !a2 || (a2 & 7) != 0)
  {
LABEL_88:
    __break(0x5516u);
LABEL_89:
    __break(0x5513u);
LABEL_90:
    __break(0x5507u);
LABEL_91:
    __break(0x550Au);
    return result;
  }

  uint64_t v3 = *(_BYTE **)(a2 + 24);
  if (!v3 || (int v4 = *(unsigned __int16 *)(a2 + 128), v9 = v4 != 0, v5 = v4 - 1, v5 == 0 || !v9))
  {
    __break(0x5518u);
LABEL_87:
    sub_1000D276C();
  }

  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_87;
  }
  if (v3 == (_BYTE *)-1LL) {
    goto LABEL_89;
  }
  uint64_t result = 4LL;
  unsigned int v7 = (unsigned int *)(v3 + 1);
  switch(*v3)
  {
    case 0:
      break;
    case 1:
      break;
    case 2:
      break;
    case 3:
      break;
    case 4:
      if ((unsigned __int16)v5 == 3)
      {
        if ((v6 & 7) != 0) {
          goto LABEL_88;
        }
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 232LL))(*(void *)(a2 + 8));
        if ((result & 1) != 0) {
          goto LABEL_82;
        }
        if (!*(_BYTE *)(v2 + 2748))
        {
          uint64_t result = sub_10004783C();
          if (!result || (result & 7) != 0) {
            goto LABEL_88;
          }
          (*(void (**)(uint64_t))(*(void *)result + 448LL))(result);
          *(_BYTE *)(v2 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
        }

        v16[0] = 0xAAAAAAAAAAAAAAAALL;
        v16[1] = 0xAAAAAAAAAAAAAAAALL;
        sub_100069764((uint64_t)v16);
        *(void *)&__int128 v15 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
        __int128 v14 = xmmword_1000DEA10;
        uint64_t result = sub_1000CE9E8((uint64_t)v16, (__darwin_time_t *)&v15);
        if (((v2 + 2256) & 7) != 0) {
          goto LABEL_88;
        }
        __int128 v17 = v15;
        __int128 v13 = *(_OWORD *)sub_10006E13C(&v17, (void *)(v2 + 2256));
        uint64_t result = sub_10006CA04((uint64_t)&v13, &v14);
        if ((_DWORD)result)
        {
          __int128 v14 = xmmword_1000DEA10;
          uint64_t result = sub_1000CE9E8((uint64_t)v16, (__darwin_time_t *)&v15);
          if (*(_BYTE *)(v2 + 2288)) {
            goto LABEL_33;
          }
          if (((v2 + 2272) & 7) != 0) {
            goto LABEL_88;
          }
          __int128 v17 = v15;
          __int128 v13 = *(_OWORD *)sub_10006E13C(&v17, (void *)(v2 + 2272));
          uint64_t result = sub_10006CA04((uint64_t)&v13, &v14);
          if ((_DWORD)result)
          {
LABEL_33:
            uint64_t result = sub_10004783C();
            if (!result || (result & 7) != 0) {
              goto LABEL_88;
            }
            (*(void (**)(uint64_t))(*(void *)result + 448LL))(result);
            uint64_t result = sub_1000CE9E8((uint64_t)v16, (__darwin_time_t *)(v2 + 2256));
          }

          *(_BYTE *)(v2 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 1;
        }

        sub_10006CA2C(v2, *(unsigned __int8 *)v7, v3[2], v3[3], v6);
        v16[0] = off_100103838;
        sub_1000CE94C(v16);
        goto LABEL_77;
      }

      break;
    case 6:
      if ((unsigned __int16)v5 == 5)
      {
        uint64_t result = sub_10006A440(v2, bswap32(*v7), v3[5], v6);
      }

      break;
    case 7:
      if ((unsigned __int16)v5 == 2)
      {
        if (v3 == (_BYTE *)-2LL) {
          goto LABEL_89;
        }
        uint64_t result = sub_10006CBA0(v2, v3[1], v3[2], v6);
      }

      break;
    case 8:
      if ((unsigned __int16)v5 == 2)
      {
        if (v3 == (_BYTE *)-2LL) {
          goto LABEL_89;
        }
        uint64_t result = sub_10006CC6C(v2, v3[1], v3[2], v6);
      }

      break;
    case 9:
      if ((unsigned __int16)v5 == 6)
      {
        unsigned int v8 = (unsigned __int16)((bswap32(*(unsigned __int16 *)v7) >> 16) - 2000);
        BOOL v9 = v3[6] >= 0x3Cu || v3[5] >= 0x18u;
        if (v9
          || v3[4] - 1 >= 0x1F
          || v3[3] - 1 >= 0xC
          || v8 >= 0x64)
        {
          uint64_t result = 4LL;
        }

        else
        {
          uint64_t result = 0LL;
        }
      }

      break;
    case 0xB:
      if ((unsigned __int16)v5 == 2)
      {
        if (v3 == (_BYTE *)-2LL) {
          goto LABEL_89;
        }
        sub_10006CD38(v2, *(unsigned __int8 *)v7, 0LL, v6);
        goto LABEL_77;
      }

      break;
    case 0xD:
      if ((unsigned __int16)v5 == 2)
      {
        if (v3 == (_BYTE *)-2LL) {
          goto LABEL_89;
        }
        sub_10006BC98((void *)v2, v3[1], v3[2], v6);
        goto LABEL_77;
      }

      break;
    case 0xE:
      if ((unsigned __int16)v5 == 2)
      {
        if (v3 == (_BYTE *)-2LL) {
          goto LABEL_89;
        }
        uint64_t result = sub_10006CDDC(v2, v3[1], v3[2], v6);
      }

      break;
    case 0xF:
      if ((unsigned __int16)v5 == 2)
      {
LABEL_76:
        sub_10006C5EC((void *)v2);
        goto LABEL_77;
      }

      break;
    case 0x10:
      if ((unsigned __int16)v5 == 4)
      {
        if ((v6 & 7) != 0) {
          goto LABEL_88;
        }
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 232LL))(*(void *)(a2 + 8));
        if ((result & 1) != 0)
        {
LABEL_82:
          uint64_t result = 4LL;
        }

        else
        {
          sub_10006CEE4( v2,  *(unsigned __int8 *)v7,  v3[2],  v3[3],  v3[4],  v6);
LABEL_77:
          uint64_t result = 0LL;
        }
      }

      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10006B384(uint64_t result, uint64_t a2)
{
  if (!result) {
    goto LABEL_58;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_58;
  }
  uint64_t result = *(void *)(result + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_58;
  }
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
  uint64_t result = sub_10004783C();
  if (!result) {
    goto LABEL_58;
  }
  if ((result & 7) != 0) {
    goto LABEL_58;
  }
  (*(void (**)(uint64_t))(*(void *)result + 448LL))(result);
  uint64_t result = *(void *)(v2 + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_58;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)result + 512LL))(result);
  uint64_t result = *(void *)(v2 + 1192);
  BOOL v8 = (result & 7) == 0 && result != 0;
  if (v6)
  {
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)result + 664LL))(result, a2, 0LL);
      goto LABEL_21;
    }

    goto LABEL_58;
  }

  if (!v8) {
    goto LABEL_58;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)result + 592LL))(result))
  {
    uint64_t result = *(void *)(v2 + 1192);
    if (result)
    {
      if ((result & 7) == 0)
      {
        unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)result + 376LL))(result);
        uint64_t result = *(void *)(v2 + 1192);
        if (result)
        {
          if ((result & 7) == 0)
          {
            unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)result + 392LL))(result);
            uint64_t result = *(void *)(v2 + 1192);
            if (result)
            {
              if ((result & 7) == 0)
              {
                (*(void (**)(uint64_t, uint64_t))(*(void *)result + 672LL))(result, a2);
                uint64_t result = *(void *)(v2 + 1192);
                if (result)
                {
                  if ((result & 7) == 0)
                  {
                    if (((*(uint64_t (**)(uint64_t))(*(void *)result + 608LL))(result) & 1) != 0)
                    {
                      if (v12 < 3) {
                        goto LABEL_21;
                      }
                      goto LABEL_51;
                    }

                    uint64_t result = *(void *)(v2 + 1192);
                    if (result && (result & 7) == 0)
                    {
                      char v13 = (*(uint64_t (**)(uint64_t))(*(void *)result + 616LL))(result);
                      if (v12 < 3 || (v13 & 1) == 0) {
                        goto LABEL_21;
                      }
LABEL_51:
                      unsigned int v14 = v12 - 1;
                      if ((_DWORD)a2 && v11 == v14 || v11 >= a2 && v11 < v14 || !v11 && v14 == (_DWORD)a2)
                      {
                        sub_1000647C0(v2);
                        return 0LL;
                      }

const char *sub_10006B5E8(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    goto LABEL_124;
  }
  if ((a1 & 7) != 0) {
    goto LABEL_124;
  }
  if (!a2) {
    goto LABEL_124;
  }
  if ((a2 & 7) != 0) {
    goto LABEL_124;
  }
  int v4 = *(unsigned __int16 *)(a2 + 128);
  unsigned int v5 = *(unsigned __int8 **)(a2 + 24);
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__n = v6;
  __int128 v54 = v6;
  unint64_t v55 = 0xAAAAAAAAAAAAAAAALL;
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = *(void *)(a1 + 1192);
  if (!v7 || (v7 & 7) != 0) {
    goto LABEL_124;
  }
  uint64_t result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 392LL))(v7);
  if (!v5) {
    goto LABEL_121;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_122;
  }
  if (v4 != 7) {
    goto LABEL_121;
  }
  uint64_t v9 = *v5;
  if (__CFADD__(a1 + 2600, 16 * v9))
  {
LABEL_126:
    __break(0x5513u);
    goto LABEL_127;
  }

  uint64_t v10 = a1 + 2600 + 16 * v9;
  if ((v10 & 7) != 0) {
    goto LABEL_124;
  }
  unsigned int v11 = *(uint64_t (**)(void *, size_t *))v10;
  uint64_t v12 = *(void *)(a1 + 16 * v9 + 2608);
  unsigned int v13 = bswap32(*(_DWORD *)(v5 + 1));
  LODWORD(__n[0]) = v13;
  WORD2(__n[0]) = bswap32(*(unsigned __int16 *)(v5 + 5)) >> 16;
  HIBYTE(__n[0]) = v9;
  BYTE6(__n[0]) = 1;
  uint64_t v14 = sub_1000C7788();
  if (!v14 || (v14 & 7) != 0) {
    goto LABEL_124;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 112LL))(v14) && *(_DWORD *)(a1 + 2764) == v13)
  {
    switch((int)v9)
    {
      case 2:
        __int128 v15 = (const std::string *)(a1 + 2784);
        if (((a1 + 2784) & 7) != 0) {
          goto LABEL_124;
        }
        int v16 = *(char *)(a1 + 2807);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        if (!*(void *)(a1 + 2792)) {
          break;
        }
        goto LABEL_39;
      case 3:
        __int128 v15 = (const std::string *)(a1 + 2808);
        if (((a1 + 2808) & 7) != 0) {
          goto LABEL_124;
        }
        int v16 = *(char *)(a1 + 2831);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        if (!*(void *)(a1 + 2816)) {
          break;
        }
        goto LABEL_39;
      case 4:
        __int128 v15 = (const std::string *)(a1 + 2832);
        if (((a1 + 2832) & 7) != 0) {
          goto LABEL_124;
        }
        int v16 = *(char *)(a1 + 2855);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        if (!*(void *)(a1 + 2840)) {
          break;
        }
        goto LABEL_39;
      case 5:
        __int128 v15 = (const std::string *)(a1 + 2856);
        if (((a1 + 2856) & 7) != 0) {
          goto LABEL_124;
        }
        int v16 = *(char *)(a1 + 2879);
        if ((v16 & 0x80000000) == 0) {
          goto LABEL_38;
        }
        if (!*(void *)(a1 + 2864)) {
          break;
        }
        goto LABEL_39;
      case 6:
        __int128 v15 = (const std::string *)(a1 + 2880);
        if (((a1 + 2880) & 7) != 0) {
          goto LABEL_124;
        }
        int v16 = *(char *)(a1 + 2903);
        if ((v16 & 0x80000000) == 0)
        {
LABEL_38:
          if (!(_BYTE)v16) {
            break;
          }
          goto LABEL_39;
        }

        if (*(void *)(a1 + 2888))
        {
LABEL_39:
          std::string::operator=(&__p, v15);
          goto LABEL_48;
        }

        break;
      default:
        break;
    }
  }

  uint64_t v17 = *(void *)(a1 + 1192);
  if (!v17 || (v17 & 7) != 0) {
    goto LABEL_124;
  }
  if (v13 >= (*(unsigned int (**)(uint64_t))(*(void *)v17 + 392LL))(v17))
  {
LABEL_54:
    uint64_t v19 = 4LL;
  }

  else
  {
    uint64_t v18 = (void *)(a1 + (v12 >> 1));
    if ((v12 & 1) != 0) {
      unsigned int v11 = *(uint64_t (**)(void *, size_t *))(*v18 + v11);
    }
    uint64_t result = (const char *)v11(v18, __n);
    uint64_t v19 = (uint64_t)result;
    if (!(_DWORD)result)
    {
LABEL_48:
      uint64_t v20 = *(void *)(a2 + 8);
      if (v20)
      {
        if ((v20 & 7) == 0)
        {
          uint64_t result = (const char *)(*(uint64_t (**)(void, uint64_t))(*(void *)v20 + 136LL))( *(void *)(a2 + 8),  3LL);
          unsigned int v21 = (unsigned __int16)result;
          uint64_t result = (const char *)operator new[]((unsigned __int16)result);
          unint64_t v22 = (char *)result;
          int size = (char)__p.__r_.__value_.__s.__size_;
          if ((char)__p.__r_.__value_.__s.__size_ < 0)
          {
            std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
LABEL_63:
              std::string::size_type v25 = v24 + 1;
              if (v24 != -1LL)
              {
                if (v25 >> 16) {
                  goto LABEL_127;
                }
LABEL_65:
                uint64_t v26 = BYTE6(__n[0]);
                if ((_DWORD)v9 == 7 && BYTE6(__n[0]) + (unsigned __int16)v25 > v21)
                {
                  if (BYTE6(__n[0]) == 4)
                  {
                    std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
                    if (size >= 0) {
                      std::string::size_type v27 = size;
                    }
                    if (!v27) {
                      sub_1000D276C();
                    }
                    if ((_WORD)v25)
                    {
                      int v28 = 0;
                      unsigned int v29 = 0;
                      unsigned __int16 v30 = 0;
                      unsigned int v52 = v21;
                      while (1)
                      {
                        unint64_t v31 = BYTE6(__n[0]);
                        unsigned int v32 = v21 - BYTE6(__n[0]);
                        if ((unsigned __int16)v25 - v28 <= (int)v32)
                        {
                          char v33 = 3;
                          unsigned int v32 = (unsigned __int16)v25 - v28;
                        }

                        else
                        {
                          if (HIWORD(v32)) {
                            goto LABEL_127;
                          }
                          char v33 = 1;
                        }

                        LOBYTE(__n[1]) = v33;
                        int v34 = (unsigned __int16)v29 + 1;
                        if ((v34 & 0x10000) != 0) {
                          goto LABEL_127;
                        }
                        *(_WORD *)((char *)&__n[1] + 1) = bswap32(v29) >> 16;
                        uint64_t result = (const char *)memcpy(v22, (char *)__n + 7, BYTE6(__n[0]));
                        std::string::size_type v35 = __p.__r_.__value_.__s.__size_;
                        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                          std::string::size_type v35 = __p.__r_.__value_.__l.__size_;
                        }
                        if (v35)
                        {
                          p_p = &__p;
                          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          if (__CFADD__(p_p, v30)) {
                            goto LABEL_126;
                          }
                          uint64_t result = (const char *)memcpy(&v22[v31], (char *)p_p + v30, v32);
                          LODWORD(v31) = v32 + v31;
                          if (WORD1(v31)) {
                            goto LABEL_127;
                          }
                        }

                        int v37 = (*(uint64_t (**)(uint64_t, void))(*(void *)v20 + 16LL))(v20, 0LL);
                        uint64_t v19 = 3LL;
                        uint64_t v38 = sub_1000ABB10(v20, 0, 3LL, 19, v37, v22, (unsigned __int16)v31);
                        if (!v38) {
                          goto LABEL_120;
                        }
                        uint64_t v39 = v38;
                        uint64_t v40 = *(void *)(a1 + 8);
                        uint64_t v41 = v38 & 7;
                        if (!v40) {
                          goto LABEL_98;
                        }
                        if ((v38 & 7) != 0) {
                          goto LABEL_124;
                        }
                        uint64_t v41 = *(void *)(v38 + 8);
                        if (!v41)
                        {
LABEL_98:
                          if (v41) {
                            goto LABEL_124;
                          }
                          uint64_t v42 = *(void *)(v38 + 8);
                          if (!v42 || (v42 & 7) != 0) {
                            goto LABEL_124;
                          }
                          uint64_t result = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v42 + 208LL))(v42);
                          sub_1000CEAEC( 0,  4,  "%s:%d handle=%hhx devPort=%s lingo=%d cmd=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoDisplayRemote.cpp",  4330,  v40,  result,  *(_DWORD *)(v39 + 64),  *(unsigned __int16 *)(v39 + 126));
                          uint64_t v40 = *(void *)(a1 + 8);
                        }

                        uint64_t result = (const char *)sub_1000AB4C4(v40, v39, 0, 1u);
                        if ((_DWORD)result) {
                          break;
                        }
                        unsigned __int16 v30 = v32 + v28;
                        if (v32 + v28 >= 0x10000) {
                          goto LABEL_127;
                        }
                        int v28 = (unsigned __int16)(v32 + v28);
                        unsigned int v29 = v34;
                        unsigned int v21 = v52;
                      }

                      uint64_t v19 = 2LL;
LABEL_120:
                      *(_WORD *)(a2 + 126) = 18;
                      goto LABEL_117;
                    }

LABEL_105:
                    int v44 = *(_DWORD *)(a2 + 68);
                    uint64_t v45 = a2;
                    uint64_t v46 = 0LL;
                    uint64_t v47 = 0xFFFFFFFFLL;
                    __int16 v48 = 0;
                    unsigned int v49 = 0LL;
                    unsigned int v50 = 0;
LABEL_116:
                    sub_1000AC324(v45, v46, 0, v47, v48, v44, v49, v50);
                    uint64_t v19 = 0LL;
LABEL_117:
                    operator delete[](v22);
                    goto LABEL_55;
                  }

                  goto LABEL_121;
                }

                uint64_t result = (const char *)memcpy(v22, (char *)__n + 7, BYTE6(__n[0]));
                if (!(_WORD)v25)
                {
LABEL_115:
                  int v44 = *(_DWORD *)(a2 + 68);
                  unsigned int v50 = (unsigned __int16)v26;
                  uint64_t v45 = a2;
                  uint64_t v46 = v20;
                  uint64_t v47 = 3LL;
                  __int16 v48 = 19;
                  unsigned int v49 = v22;
                  goto LABEL_116;
                }

                if (v26 + (unsigned __int16)v25 <= v21)
                {
LABEL_110:
                  if (!__CFADD__(v22, v26))
                  {
                    if (size >= 0) {
                      unsigned int v51 = &__p;
                    }
                    else {
                      unsigned int v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    memcpy(&v22[v26], v51, (unsigned __int16)v25);
                    uint64_t result = (const char *)sub_1000616D4(a1, (uint64_t)&v22[v26], (unsigned __int16)v25);
                    LODWORD(v26) = v26 + (unsigned __int16)v25;
                    if (!WORD1(v26)) {
                      goto LABEL_115;
                    }
                    goto LABEL_127;
                  }

                  goto LABEL_126;
                }

                LODWORD(v25) = v21 - v26;
                if (v21 > v26)
                {
                  if (!WORD1(v25)) {
                    goto LABEL_110;
                  }
LABEL_127:
                  __break(0x5507u);
LABEL_128:
                  __break(0x550Au);
                  return result;
                }

    uint64_t v147 = 0;
    v153 = 0;
LABEL_106:
    xpc_object_t v145 = 1;
LABEL_107:
    uint64_t v151 = 1;
    goto LABEL_108;
  }

  if (v158 == (void *)v4)
  {
LABEL_97:
    uint64_t v147 = 0;
    v153 = 0;
    xpc_object_t v145 = 1;
    uint64_t v151 = 1;
LABEL_98:
    uint64_t v38 = 1;
LABEL_108:
    uint64_t v149 = v41;
    goto LABEL_109;
  }

  if (v152 == 512 && v159 == 2) {
    goto LABEL_105;
  }
  if (v159 | v162) {
    goto LABEL_97;
  }
  uint64_t v135 = sub_100061274();
  if (!v135) {
    goto LABEL_412;
  }
  if ((v135 & 7) != 0) {
    goto LABEL_412;
  }
  uint64_t v136 = sub_100054A7C(v135, (uint64_t)v158);
  unsigned int v137 = sub_100061274();
  if (!v137 || (v137 & 7) != 0) {
    goto LABEL_412;
  }
  uint64_t v138 = sub_100054F0C(v137, (uint64_t)v158);
  if (v138 != v4) {
    goto LABEL_396;
  }
  if (v136 != 6)
  {
LABEL_396:
    uint64_t v147 = 0;
    v153 = 0;
    uint64_t v162 = 0;
    if (v138) {
      uint64_t v142 = v138 == v4;
    }
    else {
      uint64_t v142 = 1;
    }
    uint64_t v143 = !v142;
    uint64_t v151 = v143;
    xpc_object_t v145 = 1;
    goto LABEL_98;
  }

  uint64_t v139 = sub_100061274();
  if (!v139 || (v139 & 7) != 0) {
    goto LABEL_412;
  }
  uint64_t v147 = sub_100055034(v139, (uint64_t)v158);
  if ((_DWORD)v33)
  {
    uint64_t v140 = *(_DWORD *)(a1 + 1516);
    uint64_t v141 = sub_100061274();
    if (!v141 || (v141 & 7) != 0) {
      goto LABEL_412;
    }
    __int16 v48 = v140 & ~v147;
    uint64_t v162 = sub_10008D0AC(v141, (uint64_t)v158);
    xpc_object_t v145 = 0;
    v153 = 1;
    goto LABEL_107;
  }

  if (!sub_100072CCC((uint64_t)v158, 1))
  {
    xpc_object_t v145 = 1;
    v153 = 0;
    uint64_t v162 = 0;
    LODWORD(v33) = 0;
    goto LABEL_107;
  }

  id v144 = sub_100061274();
  if (!v144 || (v144 & 7) != 0) {
    goto LABEL_412;
  }
  sub_100054CE8((unsigned __int16 *)v144, v158);
  sub_100072EAC(a1, *(void *)(a1 + 8), (uint64_t)v158, 0);
  v153 = 0;
  uint64_t v162 = 0;
  uint64_t v149 = 0;
  xpc_object_t v145 = 1;
  uint64_t v151 = 1;
  LODWORD(v33) = 1;
LABEL_109:
  *(_BYTE *)(a1 + 2200) = 0;
  if (((a1 + 1992) & 7) != 0) {
    goto LABEL_412;
  }
  sub_10006EC68(a1 + 1992);
  sub_10006E778(a1, 1);
  *(void *)(a1 + 1272) = 0LL;
  sub_10006E9E8(a1);
  unsigned int v50 = *(void *)(a1 + 8);
  if (!v50) {
    goto LABEL_412;
  }
  if ((v50 & 7) != 0) {
    goto LABEL_412;
  }
  sub_100057B04(v50);
  unsigned int v51 = sub_100061274();
  if (!v51) {
    goto LABEL_412;
  }
  if ((v51 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008D224(v51, v4);
  unsigned int v52 = sub_100061274();
  if (!v52) {
    goto LABEL_412;
  }
  if ((v52 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008CC64(v52, v4, 0, 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1448));
  unsigned int v53 = (uint64_t *)(a1 + 1408);
  if (((a1 + 1408) & 7) != 0) {
    goto LABEL_412;
  }
  __int128 v54 = *v53;
  if (*v53)
  {
    if ((v54 & 3) != 0) {
      goto LABEL_412;
    }
    unint64_t v55 = (void *)sub_100055CC4(v54);
    operator delete(v55);
    uint64_t *v53 = 0LL;
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1448));
  *(void *)&uint64_t v167 = __PAIR64__(v33, v162);
  if (((a1 + 1512) & 7) != 0) {
    goto LABEL_412;
  }
  if (*(_BYTE *)(a1 + 1512))
  {
    unint64_t v56 = *(unsigned __int8 *)(a1 + 1515);
    if (v56 == 255)
    {
LABEL_415:
      __break(0x5507u);
      return;
    }

    *(_BYTE *)(a1 + 1515) = v56 + 1;
  }

  else if (v162 == 134 || v162 == 131)
  {
    *(_WORD *)(a1 + 1512) = 1;
    if ((((_DWORD)a1 + 1514) & 1) != 0) {
      goto LABEL_412;
    }
    *(_WORD *)(a1 + 1514) = 0;
  }

  uint64_t v57 = sub_100061274();
  if (!v57) {
    goto LABEL_412;
  }
  if ((v57 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008D0F4(v57, v4, 19);
  unsigned int v58 = sub_100071124(a1, v4, v33, &v164);
  int v59 = sub_100061274();
  if (!v59 || (v59 & 7) != 0) {
    goto LABEL_412;
  }
  uint64_t v60 = sub_100054660((unsigned __int16 *)v59, (const void *)v4, v162);
  xpc_object_t v155 = v60 != 0;
  if (v162 == 474)
  {
    uint64_t v61 = sub_100061274();
    if (!v61 || (v61 & 7) != 0) {
      goto LABEL_412;
    }
    if ((dword_10011D098 & 0x200) == 0) {
      uint64_t v38 = 1;
    }
  }

  if ((v33 & 1) == 0) {
    sub_1000CEAEC( 0,  4,  "%s:%d General lingo missing from mask.\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  1772);
  }
  uint64_t v62 = v41 & 0xC;
  uint64_t v146 = v62;
  unint64_t v63 = v159;
  uint64_t v64 = !(v33 & 1);
  if (v149 > 0xFF || v159 == 3) {
    uint64_t v64 = 1;
  }
  uint64_t v66 = v64 | (v33 >> 14) & 1 | v38;
  if (v164) {
    unsigned int v67 = 1;
  }
  else {
    unsigned int v67 = v66;
  }
  if (*(_DWORD *)(a1 + 2372))
  {
    if (v159) {
      goto LABEL_154;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 2372) = v164;
    if (v159)
    {
LABEL_154:
      if (v162) {
        int v68 = v67 == 0;
      }
      else {
        int v68 = 0;
      }
      goto LABEL_159;
    }
  }

  sub_10006EA98(a1, v4, 1, 1);
  int v68 = (v67 | v33 & v48) == 0;
LABEL_159:
  int v69 = !v68;
  if ((v33 & 2) != 0)
  {
    uint64_t v70 = sub_1000438B8();
    if (!v70) {
      goto LABEL_412;
    }
    uint64_t v71 = v70;
    if ((v70 & 7) != 0) {
      goto LABEL_412;
    }
    uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 200LL))(v70);
    uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 248LL))(v4);
    unint64_t v63 = v159;
  }

  if ((v33 & 0x400) != 0) {
    v69 |= (*(uint64_t (**)(uint64_t))(*(void *)v4 + 256LL))(v4) ^ 1;
  }
  if (v63 != 2 && !v147)
  {
    if ((v33 & 0x17C2) != 0 || v146 > 4) {
      uint64_t v75 = 1;
    }
    else {
      uint64_t v75 = v69;
    }
    if (v152 == 512) {
      int v69 = 1;
    }
    else {
      int v69 = v75;
    }
  }

  if (v60) {
    uint64_t v76 = v58;
  }
  else {
    uint64_t v76 = 0;
  }
  if ((v69 & 1) != 0 || !v76 || (v33 & *(_DWORD *)(a1 + 1516) & v60) != (_DWORD)v33)
  {
    if (v69)
    {
      __int16 v84 = v164;
      if (v164)
      {
        *(_DWORD *)(a1 + 2372) = v164;
        goto LABEL_208;
      }

      __int16 v84 = *(_DWORD *)(a1 + 2372);
      if (v84)
      {
        uint64_t v164 = *(_DWORD *)(a1 + 2372);
LABEL_208:
        uint64_t v85 = 0;
        LODWORD(v86) = -1;
        do
        {
          if (((v84 >> v85) & 1) != 0) {
            __int128 v86 = v85;
          }
          else {
            __int128 v86 = v86;
          }
          ++v85;
        }

        while (v85 != 15);
        uint64_t v87 = sub_1000642A4(v86);
        sub_1000870E8(1LL, v4, v87);
        uint64_t v162 = -1;
        int v34 = 20;
        goto LABEL_277;
      }
    }

    char v88 = sub_100061274();
    if (!v88 || (v88 & 7) != 0) {
      goto LABEL_412;
    }
    sub_100054CE8((unsigned __int16 *)v88, (void *)v4);
    sub_100071254(a1, v4, v154);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 232LL))(v4))
    {
      uint64_t v89 = 4;
    }

    else
    {
      if ((v58 & 1) != 0)
      {
        LODWORD(v166) = 5;
        if ((v33 & 0x7FFF) != 0)
        {
          LODWORD(v33) = *(_DWORD *)(a1 + 1516) & v33 & 0x7FFF;
          if (!(_DWORD)v33)
          {
            LODWORD(v167) = 100;
            LODWORD(v166) = 4;
            goto LABEL_225;
          }

          LODWORD(v166) = 3;
          if (v162 != 70)
          {
LABEL_225:
            uint64_t v162 = -1;
            int v34 = 2;
            goto LABEL_277;
          }
        }

        else
        {
          LODWORD(v33) = 0;
        }

        LODWORD(v167) = 100;
        goto LABEL_225;
      }

      uint64_t v89 = 6;
    }

    LODWORD(v166) = v89;
    goto LABEL_225;
  }

  *(_DWORD *)(a1 + 2372) = 0;
  uint64_t v77 = v154;
  if (v150 == 56 || v150 == 19) {
    uint64_t v77 = (~(_DWORD)v33 | 0x2010) & v154;
  }
  sub_100071254(a1, v4, v77);
  if (!v63 && !v158) {
    sub_100070C38(a1, v78, 1LL);
  }
  uint64_t v79 = sub_100061274();
  if (!v79 || (v79 & 7) != 0) {
    goto LABEL_412;
  }
  unsigned int v80 = sub_100054630(v79, v162, (char *)(a1 + 1440), (_BYTE *)(a1 + 1441));
  if (v80) {
    sub_1000D280C(v80);
  }
  if ((((_BYTE)a1 - 96) & 7) != 0) {
    goto LABEL_412;
  }
  char v81 = *(unsigned __int8 *)(a1 + 1440);
  if (v81 == 2)
  {
    if ((((_BYTE)a1 - 108) & 3) != 0) {
      goto LABEL_412;
    }
    *(_DWORD *)(a1 + 142_Block_object_dispose((const void *)(v1 - 48), 8) = 15000;
    if ((((_BYTE)a1 - 104) & 7) != 0) {
      goto LABEL_412;
    }
    *(_DWORD *)(a1 + 1432) = 75000;
    *(_BYTE *)(a1 + 1439) = 3;
    uint64_t v82 = (__int16 *)(a1 + 1436);
    if (((a1 + 1436) & 3) != 0) {
      goto LABEL_412;
    }
    int v83 = 255;
LABEL_230:
    unsigned int *v82 = v83;
    goto LABEL_235;
  }

  if (v81 == 1)
  {
    if ((((_BYTE)a1 - 108) & 3) != 0) {
      goto LABEL_412;
    }
    *(_DWORD *)(a1 + 142_Block_object_dispose((const void *)(v1 - 48), 8) = 1000;
    if ((((_BYTE)a1 - 104) & 7) != 0) {
      goto LABEL_412;
    }
    *(_DWORD *)(a1 + 1432) = 7500;
    *(_BYTE *)(a1 + 1439) = 4;
    uint64_t v82 = (__int16 *)(a1 + 1436);
    if (((a1 + 1436) & 3) != 0) {
      goto LABEL_412;
    }
    int v83 = 70;
    goto LABEL_230;
  }

  if ((((_BYTE)a1 - 108) & 3) != 0) {
    goto LABEL_412;
  }
  *(_DWORD *)(a1 + 142_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
  if ((((_BYTE)a1 - 104) & 7) != 0) {
    goto LABEL_412;
  }
  *(_DWORD *)(a1 + 1432) = 0;
  *(_BYTE *)(a1 + 1439) = 0;
  if (((a1 + 1436) & 3) != 0) {
    goto LABEL_412;
  }
  *(_WORD *)(a1 + 1436) = 0;
LABEL_235:
  __int128 v90 = sub_100061274();
  if (!v90) {
    goto LABEL_412;
  }
  if ((v90 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008D008(v90, v4, v162);
  __int128 v91 = sub_100061274();
  if (!v91) {
    goto LABEL_412;
  }
  if ((v91 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008CB5C(v91, v4, v149);
  uint64_t v92 = sub_100061274();
  if (!v92) {
    goto LABEL_412;
  }
  if ((v92 & 7) != 0) {
    goto LABEL_412;
  }
  sub_10008CC64(v92, v4, 0, v146 == 12);
  uint64_t v93 = sub_100061274();
  if (!v93 || (v93 & 7) != 0) {
    goto LABEL_412;
  }
  v33 &= 0x7FFFu;
  int v94 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v93 + 144LL))(v93, *(void *)(a1 + 8), v33);
  uint64_t v95 = v94;
  if (v94 != (_DWORD)v33) {
    sub_1000CEAEC( 0,  4,  "%s:%d Failed SetActiveLingoMask mask=%xh return=%xh\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  1973,  v33,  v94);
  }
  uint64_t v96 = sub_100061274();
  if (!v96 || (v96 & 7) != 0) {
    goto LABEL_412;
  }
  uint64_t v97 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v96 + 160LL))(v96, *(void *)(a1 + 8), v33);
  v98 = v97;
  if (v97 != (_DWORD)v33) {
    sub_1000CEAEC( 0,  4,  "%s:%d Failed SetAllowedLingoMask mask=%xh return=%xh\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  1984,  v33,  v97);
  }
  if (qword_10011C8F8)
  {
    if ((qword_10011C8F8 & 7) != 0) {
      goto LABEL_412;
    }
    (*(void (**)(void))(*(void *)qword_10011C8F8 + 8LL))();
    qword_10011C8F8 = 0LL;
  }

  for (unint64_t i = 0; i != 15; ++i)
  {
    if (((v33 >> i) & 1) != 0)
    {
      uint64_t v100 = *(void *)(a1 + 8);
      if (v100) {
        v101 = (*(void *)(a1 + 8) & 7LL) == 0;
      }
      else {
        v101 = 0;
      }
      if (!v101) {
        goto LABEL_412;
      }
      sub_10005789C(v100, i);
      xpc_object_t v102 = sub_100061274();
      if (!v102 || (v102 & 7) != 0) {
        goto LABEL_412;
      }
      unsigned int v103 = sub_10008C2EC(v102, *(void *)(a1 + 8), i);
      if (v103)
      {
        if ((v103 & 7) != 0) {
          goto LABEL_412;
        }
        (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v103 + 80LL))(v103, 4LL, 0LL, v4);
      }

      else
      {
        sub_1000CEAEC( 0,  4,  "%s:%d No lingo object! lingo=%d\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoGeneral.cpp",  2012,  i);
      }

      uint64_t v104 = *(void *)(a1 + 8);
      if (!v104 || (v104 & 7) != 0) {
        goto LABEL_412;
      }
      sub_1000578E8(v104, i);
    }
  }

  if (v162 == 3)
  {
    v105 = v98 == (_DWORD)v33 && v95 == (_DWORD)v33;
    LODWORD(v166) = 4;
    if (v105) {
      int v34 = 2;
    }
    else {
      int v34 = 4;
    }
    uint64_t v162 = 3;
  }

  else
  {
    if ((v145 & 1) == 0)
    {
      uint64_t v128 = sub_100061274();
      if (!v128 || (v128 & 7) != 0) {
        goto LABEL_412;
      }
      sub_100054D7C(v128, v158, (void *)v4);
      if (!v129)
      {
        uint64_t v130 = sub_100061274();
        if (!v130) {
          goto LABEL_412;
        }
        if ((v130 & 7) != 0) {
          goto LABEL_412;
        }
        uint64_t v131 = sub_10008D0AC(v130, (uint64_t)v158);
        xpc_object_t v132 = sub_100061274();
        if (!v132 || (v132 & 7) != 0) {
          goto LABEL_412;
        }
        sub_10008D008(v132, v4, v131);
      }
    }

    int v34 = 4;
    if (v95 == (_DWORD)v33 && v98 == (_DWORD)v33)
    {
      int v34 = 0;
      unsigned int v107 = 1;
      goto LABEL_278;
    }
  }

            __break(0x5500u);
LABEL_106:
            __break(0x5513u);
          }
        }
      }

      else
      {
        if (v6 != 327685)
        {
          if (v6 != 327687) {
            return;
          }
          int v44 = -1431655936;
          *(_DWORD *)uint64_t v42 = 3;
          uint64_t v45 = 0xAAAAAAAA00000000LL;
          *(_OWORD *)&v42[4] = 0u;
          uint64_t v43 = 0u;
          __s = 0LL;
          if (((a3 + 16) & 7) != 0) {
            goto LABEL_102;
          }
          if (!*(void *)(a3 + 16))
          {
            *(_DWORD *)uint64_t v42 = 2;
            uint64_t v9 = 1;
            uint64_t v10 = operator new[](1uLL);
            LOBYTE(v12) = 0;
            *uint64_t v10 = 2;
            goto LABEL_77;
          }

          uint64_t v7 = sub_10004783C();
          if (!v7 || (v7 & 7) != 0) {
            goto LABEL_102;
          }
          (*(void (**)(uint64_t, _BYTE *))(*(void *)v7 + 144LL))(v7, v42);
          BOOL v8 = *(_DWORD *)v42;
          if (*(_DWORD *)v42 > 3u) {
            goto LABEL_103;
          }
          if (*(_DWORD *)v42)
          {
            uint64_t v9 = 1;
            uint64_t v10 = operator new[](1uLL);
            *uint64_t v10 = v8;
            if (v8 != 1)
            {
              LOBYTE(v12) = 0;
              goto LABEL_77;
            }

            unsigned int v11 = sub_100015744();
            if (v11 && (v11 & 7) == 0)
            {
              sub_100017D04(v11);
              LOBYTE(v12) = 0;
              uint64_t v9 = 1;
              goto LABEL_77;
            }

  __break(0x5507u);
LABEL_106:
  __break(0x5518u);
LABEL_107:
  __break(0x5500u);
LABEL_108:
  __break(0x5515u);
LABEL_109:
  __break(0x5513u);
LABEL_110:
  __break(0x550Au);
}

LABEL_124:
        __break(0x5516u);
        goto LABEL_125;
      }

      uint64_t v19 = 2LL;
    }
  }

void *sub_10006BC98(void *result, int a2, int a3, uint64_t a4)
{
  if (!result) {
    goto LABEL_16;
  }
  uint64_t v4 = (uint64_t)result;
  uint64_t result = (void *)result[149];
  int v9 = (*(uint64_t (**)(void *))(*result + 264LL))(result);
  if (a3) {
    sub_10006D06C(v4, 0xDu, a4, v9, 0);
  }
  else {
    sub_10006D144(v4, 0xDu);
  }
  if ((a2 != 0) == v9) {
    return 0LL;
  }
  uint64_t result = *(void **)(v4 + 1192);
  if (result && (result & 7) == 0)
  {
    (*(void (**)(void *, BOOL))(*result + 256LL))(result, a2 != 0);
    return 0LL;
  }

void sub_10006BD60(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a1 || (a1 & 7) != 0) {
    goto LABEL_93;
  }
  if (a2 > 31)
  {
    switch(a2)
    {
      case 32:
        if ((((_BYTE)a1 - 72) & 7) != 0) {
          goto LABEL_93;
        }
        int v21 = *(_DWORD *)(a1 + 1208);
        if (*(_BYTE *)(a1 + 1200))
        {
          if ((-858993459 * *(_DWORD *)(a1 + 1204)) <= 0x33333333)
          {
            sub_10006A6A4(a1, *(_DWORD *)(a1 + 1208), 1);
          }

          else if ((v21 & 0x10010) != 0 {
                 && (*(_DWORD *)(a1 + 1788) != *(_DWORD *)(a1 + 1792) || (*(_DWORD *)(a1 + 1780) & 0x10010) != 0))
          }
          {
            sub_10006C3F4(a1);
          }
        }

        else
        {
          *(_DWORD *)(a1 + 1204) = 0;
          sub_10006A6A4(a1, 0x7FFFF, 1);
          if ((((_BYTE)a1 - 68) & 3) != 0) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 1212) = 0;
          *(_BYTE *)(a1 + 1200) = 1;
        }

        int v26 = *(_DWORD *)(a1 + 1204);
        BOOL v27 = __CFADD__(v26, 1);
        int v28 = v26 + 1;
        if (!v27)
        {
          *(_DWORD *)(a1 + 1204) = v28;
          if ((*(_DWORD *)(a1 + 1780) & v21) == 0)
          {
            *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            return;
          }

LABEL_95:
    __break(0x5500u);
    return;
  }

  switch(a2)
  {
    case 1:
      if ((unint64_t)(a3 - 7) >= 2 && a3 != 5)
      {
        if (a3 != 6) {
          return;
        }
        *(_DWORD *)(a1 + 2752) = 6;
        if (*(unsigned __int8 *)(a1 + 2748) <= 1u)
        {
          if (*(_BYTE *)(a1 + 2748)) {
            return;
          }
          goto LABEL_84;
        }

      __break(0x5516u);
LABEL_96:
      __break(0x550Au);
      goto LABEL_97;
    }

    if (*(void *)(a1 + 1192) != a4) {
      return;
    }
    int v12 = sub_1000C60C4();
    if (!v12 || (v12 & 7) != 0) {
      goto LABEL_95;
    }
    (*(void (**)(uint64_t, void))(*(void *)v12 + 104LL))(v12, *(void *)(a1 + 1192));
    *(void *)(a1 + 1192) = 0LL;
    do
    {
      uint64_t v41 = -1;
      v42[0] = 0LL;
    }

    while (!sub_100062E78(a1, -1, &v41, v42, 0xFFFFu));
    uint64_t v43 = 0;
  }

LABEL_94:
        __break(0x550Au);
        goto LABEL_95;
      }

      *(_DWORD *)(a1 + 2752) = a3;
      *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      sub_1000612C4(*(void *)(a1 + 8));
      if (v22)
      {
        sub_1000612C4(*(void *)(a1 + 8));
        if (!v23 || (v23 & 7) != 0) {
          goto LABEL_93;
        }
        sub_10005EB3C(v23, *(_DWORD *)(a1 + 2744));
      }

      *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      *(_BYTE *)(a1 + 2756) = 0;
LABEL_69:
      uint64_t v24 = *(void *)(a1 + 8);
      if (v24)
      {
        if ((v24 & 7) == 0)
        {
          uint64_t v25 = sub_1000579D4(v24);
          if (v25)
          {
            if ((v25 & 7) == 0)
            {
              sub_10006C3D4(v25, 0LL);
              return;
            }
          }
        }
      }

      goto LABEL_93;
    case 4:
      if (!a4) {
        sub_1000D276C();
      }
      if ((((_BYTE)a1 - 72) & 7) != 0) {
        goto LABEL_93;
      }
      *(_DWORD *)(a1 + 120_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      if ((((_BYTE)a1 - 68) & 3) != 0) {
        goto LABEL_93;
      }
      *(_DWORD *)(a1 + 1212) = 0;
      *(void *)(a1 + 178_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
      *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      uint64_t v13 = sub_100061274();
      if (!v13 || (v13 & 7) != 0) {
        goto LABEL_93;
      }
      int v14 = sub_10008D0AC(v13, a4);
      *(_BYTE *)(a1 + 2756) = 0;
      unsigned int v15 = v14 - 15;
      uint64_t v16 = *(void *)(a1 + 8);
      BOOL v18 = (v16 & 7) == 0 && v16 != 0;
      if (v15 >= 2)
      {
        if (!v18) {
          goto LABEL_93;
        }
        uint64_t v19 = sub_1000579D4(v16);
        if (!v19 || (v19 & 7) != 0) {
          goto LABEL_93;
        }
        uint64_t v20 = 0LL;
      }

      else
      {
        if (!v18) {
          goto LABEL_93;
        }
        uint64_t v19 = sub_1000579D4(v16);
        if (!v19 || (v19 & 7) != 0) {
          goto LABEL_93;
        }
        uint64_t v20 = 1LL;
      }

      sub_10006C3D4(v19, v20);
      *(_DWORD *)(a1 + 1204) = 0;
      return;
    case 8:
      if (!a4) {
        sub_1000D276C();
      }
      *(_BYTE *)(a1 + 274_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
      sub_1000612C4(*(void *)(a1 + 8));
      if (!v6)
      {
LABEL_12:
        sub_10006C18C(a1, a4);
        if ((((_BYTE)a1 - 72) & 7) == 0)
        {
          *(_DWORD *)(a1 + 120_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
          if ((((_BYTE)a1 - 68) & 3) == 0)
          {
            *(_DWORD *)(a1 + 1212) = 0;
            *(_BYTE *)(a1 + 228_Block_object_dispose((const void *)(v1 - 48), 8) = 0;
            *(_BYTE *)(a1 + 2756) = 0;
            uint64_t v8 = *(void *)(a1 + 8);
            if (v8)
            {
              if ((v8 & 7) == 0)
              {
                uint64_t v9 = sub_1000579D4(v8);
                if (v9)
                {
                  if ((v9 & 7) == 0)
                  {
                    sub_10006C3D4(v9, 0LL);
                    *(void *)(a1 + 178_Block_object_dispose((const void *)(v1 - 48), 8) = 0LL;
                    return;
                  }
                }
              }
            }
          }
        }

        goto LABEL_93;
      }

      sub_1000612C4(*(void *)(a1 + 8));
      if (v7 && (v7 & 7) == 0)
      {
        sub_10005EB3C(v7, *(_DWORD *)(a1 + 2744));
        goto LABEL_12;
      }

  uint64_t v38 = (uint64_t *)(a1 + 80LL * a3 + 1216);
  if ((((_BYTE)a1 + 80 * (_BYTE)a3 - 64) & 7) != 0) {
    goto LABEL_131;
  }
  uint64_t v39 = *v38;
  if (*v38)
  {
    if ((v39 & 7) != 0) {
      goto LABEL_131;
    }
    (*(void (**)(uint64_t))(*(void *)v39 + 8LL))(v39);
    uint64_t *v38 = 0LL;
  }

  else
  {
    sub_1000CEAEC( 0,  4,  "%s:%d NULL == pOpenFile->pXmlSig\n",  "/Library/Caches/com.apple.xbs/Sources/iapd/iapd/IAP/Source/IapLingoStorage.cpp",  1226);
  }

  if (SHIBYTE(v55.tm_year) < 0)
  {
    operator delete(*(void **)&v55.tm_sec);
    if ((v9 & 0x10) == 0) {
      goto LABEL_114;
    }
    goto LABEL_101;
  }

uint64_t sub_10006C18C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    if ((result & 7) == 0)
    {
      if (!a2) {
        return 22LL;
      }
      unsigned int v4 = 0;
      unsigned int v5 = (unsigned __int8 *)(result + 1800);
      uint64_t v6 = result & 3;
      while (1)
      {
        if (*((void *)v5 + 1) == a2)
        {
          if (*v5 >= 2u) {
            goto LABEL_43;
          }
          if (*v5)
          {
            switch(v4)
            {
              case 4u:
                uint64_t result = sub_1000438B8();
                if (!result || (result & 7) != 0) {
                  goto LABEL_44;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
                if (!(_DWORD)result) {
                  goto LABEL_39;
                }
                if (*((_DWORD *)v5 + 4) >= 0x100u) {
                  goto LABEL_45;
                }
                if (v6) {
                  goto LABEL_44;
                }
                if (*((_DWORD *)v5 + 5) > 0xFFu) {
                  goto LABEL_45;
                }
                uint64_t result = sub_10006CA2C( (uint64_t)v2,  *((_DWORD *)v5 + 4),  *((_DWORD *)v5 + 5),  0,  a2);
                break;
              case 6u:
                uint64_t result = sub_10006A440((uint64_t)v2, *((unsigned int *)v5 + 4), 0, a2);
                if (!(_DWORD)result) {
                  break;
                }
                goto LABEL_41;
              case 7u:
                uint64_t result = sub_10006CBA0((uint64_t)v2, *((unsigned int *)v5 + 4), 0, a2);
                if (!(_DWORD)result) {
                  break;
                }
                goto LABEL_41;
              case 8u:
                uint64_t result = sub_10006CC6C((uint64_t)v2, *((unsigned int *)v5 + 4), 0, a2);
                if (!(_DWORD)result) {
                  break;
                }
                goto LABEL_41;
              case 0xAu:
                break;
              case 0xBu:
                uint64_t result = sub_10006CD38((uint64_t)v2, v5[16], 0LL, a2);
                break;
              case 0xDu:
                uint64_t result = (uint64_t)sub_10006BC98(v2, *((_DWORD *)v5 + 4) != 0, 0, a2);
                break;
              case 0xEu:
                unsigned int v7 = *((_DWORD *)v5 + 4);
                if (v7 > 0xFF) {
                  goto LABEL_43;
                }
                uint64_t result = sub_10006CDDC((uint64_t)v2, v7, 0, a2);
                if ((_DWORD)result) {
                  goto LABEL_41;
                }
                break;
              case 0x10u:
                uint64_t result = sub_1000438B8();
                if (!result || (result & 7) != 0) {
                  goto LABEL_44;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48LL))(result);
                if ((_DWORD)result)
                {
                  if (*((_DWORD *)v5 + 4) > 0xFFu) {
                    goto LABEL_45;
                  }
                  if (v6) {
                    goto LABEL_44;
                  }
                  if (*((_DWORD *)v5 + 5) > 0xFFu) {
                    goto LABEL_45;
                  }
                  uint64_t result = sub_10006CEE4( (uint64_t)v2,  *((_DWORD *)v5 + 4),  0,  *((_DWORD *)v5 + 5),  0,  a2);
                }

                else
                {
LABEL_39:
                  unsigned __int8 *v5 = 0;
                }

                break;
              default:
                uint64_t result = sub_10006D144((uint64_t)v2, v4);
                if (!(_DWORD)result) {
                  break;
                }
LABEL_41:
                __break(0x5518u);
                goto LABEL_42;
            }
          }
        }

        ++v4;
        v5 += 24;
        if (v4 == 19) {
          return 0LL;
        }
      }

uint64_t sub_10006C3D4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if ((result & 7) == 0)
    {
      result += 1008LL;
      if ((result & 7) == 0) {
        return sub_1000B4FE0(result, a2);
      }
    }
  }

  __break(0x5516u);
  return result;
}

uint64_t sub_10006C3F4(uint64_t a1)
{
  if (!a1) {
    goto LABEL_27;
  }
  uint64_t v2 = a1 & 7;
  if ((a1 & 7) != 0) {
    goto LABEL_27;
  }
  int v3 = 0;
  memset(v20, 170, 21);
  uint64_t v19 = 0x1000000004LL;
  unint64_t v4 = ~(a1 + 2296);
  unint64_t v18 = ~(a1 + 1280);
  *(_DWORD *)(a1 + 1792) = *(_DWORD *)(a1 + 1788);
  char v5 = 1;
  do
  {
    uint64_t v6 = *((int *)&v20[-1] + v2);
    if (v4 < 16 * v6) {
      goto LABEL_26;
    }
    char v7 = v5;
    uint64_t v8 = a1 + 16 * v6;
    uint64_t v9 = *(uint64_t (**)(void *, void *))(v8 + 2296);
    uint64_t v10 = *(void *)(v8 + 2304);
    BYTE1(v20[0]) = v6;
    LOBYTE(v20[0]) = 1;
    int v11 = (void *)(a1 + (v10 >> 1));
    if ((v10 & 1) != 0) {
      uint64_t v9 = *(uint64_t (**)(void *, void *))(*v11 + v9);
    }
    unsigned int v12 = v9(v11, v20);
    if (v12 > 0x1F) {
      goto LABEL_25;
    }
    if (!v12)
    {
      if (24 * v6 > v18) {
        goto LABEL_26;
      }
      if ((a1 & 7) != 0) {
        goto LABEL_27;
      }
      uint64_t v13 = a1 + 24LL * (int)v6 + 1296;
      if ((v13 & 7) != 0) {
        goto LABEL_27;
      }
      size_t v14 = *(unsigned __int8 *)v13;
      if (LOBYTE(v20[0]) - 1 != (_DWORD)v14)
      {
        __break(0x5518u);
LABEL_25:
        __break(0x550Au);
LABEL_26:
        __break(0x5513u);
LABEL_27:
        __break(0x5516u);
LABEL_28:
        __break(0x5512u);
      }

      unsigned int v15 = (const void **)(a1 + 24LL * (int)v6 + 1288);
      uint64_t v16 = (void *)*v15;
      if (memcmp(*v15, (char *)v20 + 2, v14))
      {
        memcpy(v16, (char *)v20 + 2, v14);
        v3 |= 1 << v6;
      }
    }

    char v5 = 0;
    uint64_t v2 = 1LL;
  }

  while ((v7 & 1) != 0);
  if (v3) {
    return sub_10006D48C(a1, v3);
  }
  else {
    return 0LL;
  }
}

void *sub_10006C5EC(void *result)
{
  if (result
    && (result & 7) == 0
    && ((result = (void *)result[149]) != 0LL ? (BOOL v1 = (result & 7) == 0LL) : (BOOL v1 = 0), v1))
  {
    (*(void (**)(void *))(*result + 344LL))(result);
    return 0LL;
  }

  else
  {
    __break(0x5516u);
  }

  return result;
}

uint64_t sub_10006C630(uint64_t result, unsigned int a2)
{
  if (!result) {
    goto LABEL_37;
  }
  uint64_t v2 = result;
  if ((result & 7) != 0) {
    goto LABEL_37;
  }
  uint64_t v10 = 0LL;
  uint64_t result = sub_100061534((_DWORD *)&v10 + 1, (int *)&v10);
  if ((_DWORD)result)
  {
    __break(0x5518u);
    goto LABEL_36;
  }

  if (v10 > 7)
  {
LABEL_38:
    __break(0x550Au);
    goto LABEL_39;
  }

  if (!(_DWORD)v10) {
    return 0LL;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = *(void *)(v2 + 1192);
  if (!result || (result & 7) != 0) {
    goto LABEL_37;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 384LL))(result);
  unint64_t v9 = result;
  if (!result || (result & 7) != 0) {
    goto LABEL_37;
  }
  uint64_t v5 = result;
  if (((*(uint64_t (**)(uint64_t))(*(void *)result + 16LL))(result) & 1) == 0) {
LABEL_36:
  }
    sub_1000D276C();
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 368LL))(v5);
  if (v6)
  {
    if (v6 <= a2)
    {
LABEL_31:
      sub_100064D0C(&v9);
      return 0LL;
    }

    uint64_t result = *(void *)(v2 + 1192);
    if (result)
    {
      if ((result & 7) == 0)
      {
        (*(void (**)(uint64_t))(*(void *)result + 408LL))(result);
        uint64_t result = v9;
        if (v9)
        {
          if ((v9 & 7) == 0)
          {
            if ((*(unsigned int (**)(void))(*(void *)v9 + 392LL))() != a2)
            {
              uint64_t result = sub_10004783C();
              if (!result) {
                goto LABEL_37;
              }
              if ((result & 7) != 0) {
                goto LABEL_37;
              }
              (*(void (**)(uint64_t))(*(void *)result + 448LL))(result);
              uint64_t result = v9;
              if ((v9 & 7) != 0) {
                goto LABEL_37;
              }
              unsigned int v7 = (*(uint64_t (**)(void))(*(void *)v9 + 376LL))();
              uint64_t result = *(void *)(v2 + 1192);
              if (!result || (result & 7) != 0) {
                goto LABEL_37;
              }
              if (v7 >= 0xFFFFFC18)
              {
LABEL_39:
                __break(0x5500u);
                return result;
              }

              (*(void (**)(uint64_t, void))(*(void *)result + 344LL))(result, v7 + 1000);
              v8[0] = 0xAAAAAAAAAAAAAAAALL;
              v8[1] = 0xAAAAAAAAAAAAAAAALL;
              uint64_t result = sub_1000CE91C((uint64_t)v8, 0);
              v8[0] = off_100105F38;
              if (((v2 + 1760) & 7) != 0) {
                goto LABEL_37;
              }
              sub_1000CE9E8((uint64_t)v8, (__darwin_time_t *)(v2 + 1760));
              *(_BYTE *)(v2 + 1756) = 1;
              v8[0] = off_100105F38;
              sub_1000CE94C(v8);
            }

            goto LABEL_31;
          }
        }
      }
    }