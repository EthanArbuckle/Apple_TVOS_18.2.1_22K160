uint64_t sub_10006D1EC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  return sub_1000307E0(v0, v1, (uint64_t *)(v2 - 104));
}

uint64_t sub_10006D1FC(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

id sub_10006D214()
{
  return v0;
}

void sub_10006D21C()
{
}

void sub_10006D228(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    uint64_t v7 = 4LL;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1)
         : *(id *)(a1 + 8 * v7);
      v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1LL)) {
        break;
      }
      v12 = v8;
      sub_1000728D0(&v12, a2);
      if (v3)
      {

        swift_bridgeObjectRelease();
        return;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_13:
    if (a1 < 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
  }

uint64_t sub_10006D338(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = v20[0];
  uint64_t v5 = v20[1];
  int64_t v6 = v20[3];
  unint64_t v7 = v20[4];
  int64_t v8 = (unint64_t)(v20[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v11 = v10 | (v6 << 6);
  while (1)
  {
    v16 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(v4 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v18);
    swift_retain(v19);
    a2(v17, v18, v19);
    swift_release(v19);
    uint64_t result = swift_bridgeObjectRelease(v18);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v12 >= v8) {
      return swift_release(v4);
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    int64_t v14 = v6 + 1;
    if (!v13)
    {
      int64_t v14 = v6 + 2;
      if (v6 + 2 >= v8) {
        return swift_release(v4);
      }
      unint64_t v13 = *(void *)(v5 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v6 + 3;
        if (v6 + 3 >= v8) {
          return swift_release(v4);
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v6 + 4;
          if (v6 + 4 >= v8) {
            return swift_release(v4);
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v6 + 5;
            if (v6 + 5 >= v8) {
              return swift_release(v4);
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v6 + 6;
              while (v15 < v8)
              {
                unint64_t v13 = *(void *)(v5 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release(v4);
            }
          }
        }
      }
    }

void sub_10006D4B8()
{
  qword_1001D4690 = 0x40F5180000000000LL;
}

uint64_t sub_10006D4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  uint64_t v10 = sub_10005A18C();
  uint64_t v11 = sub_100077448();
  sub_10003D7EC(v11, v12);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v4 + OBJC_IVAR____TtC7parsecd16DownloadResource_url,  a3,  v10);
  sub_100010BE4(v9, (uint64_t)v14, 33LL);
  sub_1000766FC(a4, v9);
  swift_endAccess(v14);
  return v4;
}

void sub_10006D57C()
{
  uint64_t v4 = sub_10005A18C();
  sub_10005A368();
  __chkstk_darwin(v5);
  sub_10005A49C();
  __chkstk_darwin(v6);
  int64_t v8 = (char *)&v36 - v7;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_1000771B0();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  sub_100010BE4(v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl, (uint64_t)&v40, 0LL);
  sub_1000107D0(v13, (uint64_t)v12, &qword_1001D5ED0);
  int v14 = sub_100010708((uint64_t)v12, 1LL, v4);
  sub_100019C1C((uint64_t)v12, &qword_1001D5ED0);
  uint64_t v15 = sub_10000941C(&qword_1001D12E8);
  if (v14 == 1)
  {
    inited = (__n128 *)swift_initStackObject(v15, &v39);
    sub_10007722C(inited, (__n128)xmmword_10015C7F0);
    uint64_t v17 = v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
    sub_100010BE4(v17, (uint64_t)v38, 0LL);
    uint64_t v18 = sub_1000770AC(v2, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    uint64_t v19 = URL.absoluteString.getter(v18);
    unint64_t v21 = v20;
    sub_10007704C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    inited[3].n128_u64[0] = v19;
    inited[3].n128_u64[1] = v21;
    v22 = inited;
LABEL_5:
    Dictionary.init(dictionaryLiteral:)( v22,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
    sub_100009AA0();
    return;
  }

  v23 = (__n128 *)swift_initStackObject(v15, &v37);
  sub_10007722C(v23, (__n128)xmmword_10015D580);
  uint64_t v24 = v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
  sub_100010BE4(v24, (uint64_t)v38, 0LL);
  uint64_t v25 = sub_1000770AC((uint64_t)v8, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  uint64_t v26 = URL.absoluteString.getter(v25);
  unint64_t v28 = v27;
  v29 = *(void (**)(char *, uint64_t))(v3 + 8);
  v29(v8, v4);
  v23[3].n128_u64[0] = v26;
  v23[3].n128_u64[1] = v28;
  strcpy((char *)&v23[4], "redirect_url");
  v23[4].n128_u8[13] = 0;
  v23[4].n128_u16[7] = -5120;
  uint64_t v30 = sub_100077424();
  sub_1000107D0(v30, v31, v32);
  uint64_t v33 = sub_10005A148(v1, 1LL, v4);
  if (!v34)
  {
    v23[5].n128_u64[0] = URL.absoluteString.getter(v33);
    v23[5].n128_u64[1] = v35;
    v29((char *)v1, v4);
    v22 = v23;
    goto LABEL_5;
  }

  __break(1u);
}

void sub_10006D7D0()
{
  uint64_t v1 = sub_10005A18C();
  sub_100019DA4(v1);
  sub_100019C1C(v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl, &qword_1001D5ED0);
  sub_100009A90();
}

uint64_t sub_10006D81C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10006D840()
{
  return type metadata accessor for DownloadResource(0LL);
}

uint64_t type metadata accessor for DownloadResource(uint64_t a1)
{
  uint64_t result = qword_1001D46C0;
  if (!qword_1001D46C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DownloadResource);
  }
  return result;
}

void sub_10006D880(uint64_t a1)
{
  v6[0] = &unk_100160488;
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_10000D05C(319LL);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_updateClassMetadata2(a1, 256LL, 3LL, v6, a1 + 80);
    }
  }

void sub_10006D914()
{
  uint64_t v2 = type metadata accessor for URLQueryItem(0LL);
  sub_10002FBE4();
  __chkstk_darwin(v3);
  sub_100010FCC();
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_10005F878();
  uint64_t v7 = v5 - v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  int v14 = (void *)objc_opt_self(&OBJC_CLASS___NSURLComponents);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  id v18 = objc_msgSend(v14, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v16, 0);

  if (v18)
  {
    static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(v18);

    uint64_t v19 = sub_1000772D8();
    uint64_t v20 = (uint64_t)v11;
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v19 = sub_1000772D8();
    uint64_t v20 = sub_100077448();
  }

  sub_10003D7EC(v20, v21);
  uint64_t v22 = sub_100077424();
  sub_10004E6C4(v22, v23, (uint64_t *)&unk_1001D47C0);
  sub_1000107D0((uint64_t)v13, v7, (uint64_t *)&unk_1001D47C0);
  sub_1000772D8();
  uint64_t v24 = sub_10005A148(v7, 1LL, v19);
  if (v33)
  {
    sub_100019C1C(v7, (uint64_t *)&unk_1001D47C0);
  }

  else
  {
    uint64_t v25 = URLComponents.queryItems.getter(v24);
    sub_10003D850(v7, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL));
    if (v25)
    {
      uint64_t v37 = v25;
      uint64_t v26 = *(void *)(v25 + 16);
      if (v26)
      {
        unint64_t v27 = v37 + ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        uint64_t v28 = *(void *)(v1 + 72);
        v29 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + 16);
        while (1)
        {
          uint64_t v30 = v29(v0, v27, v2);
          uint64_t v31 = URLQueryItem.name.getter(v30);
          BOOL v33 = v31 == 0x6E6F6973726576LL && v32 == 0xE700000000000000LL;
          if (v33) {
            break;
          }
          char v34 = sub_10005A06C(v31, v32, 0x6E6F6973726576LL, 0xE700000000000000LL);
          sub_100009B3C();
          if ((v34 & 1) != 0) {
            goto LABEL_19;
          }
          sub_10007704C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          v27 += v28;
          if (!--v26) {
            goto LABEL_16;
          }
        }

        swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v35 = swift_bridgeObjectRelease();
        URLQueryItem.value.getter(v35);
        sub_10007704C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      }

      else
      {
LABEL_16:
        swift_bridgeObjectRelease();
      }
    }
  }

  sub_100019C1C((uint64_t)v13, (uint64_t *)&unk_1001D47C0);
  sub_100009AA0();
}

void sub_10006DBA4()
{
  uint64_t v1 = v0;
  sub_10005A18C();
  sub_10005A368();
  __chkstk_darwin(v2);
  sub_100010FCC();
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100009B94();
  __chkstk_darwin(v3);
  sub_10005F878();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v33 - v8;
  URLComponents.init(url:resolvingAgainstBaseURL:)(v1, 0LL);
  sub_1000107D0((uint64_t)v9, v6, (uint64_t *)&unk_1001D47C0);
  uint64_t v10 = sub_1000772D8();
  uint64_t v11 = sub_10005A148(v6, 1LL, v10);
  if (v12)
  {
    sub_1000773EC(v11, (uint64_t *)&unk_1001D47C0);
LABEL_14:
    sub_100019C1C((uint64_t)v9, (uint64_t *)&unk_1001D47C0);
    sub_100009AA0();
    return;
  }

  uint64_t v13 = URLComponents.path.getter(v11);
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v6, v10);
  uint64_t v36 = v13;
  uint64_t v37 = v15;
  v35[0] = 47LL;
  v35[1] = 0xE100000000000000LL;
  unint64_t v16 = sub_1000106CC();
  uint64_t v17 = (void *)StringProtocol.components<A>(separatedBy:)( v35,  &type metadata for String,  &type metadata for String,  v16,  v16);
  swift_bridgeObjectRelease();
  if (v17[2] <= 4uLL)
  {
    sub_1000110E0();
    if (qword_1001D04C8 != -1) {
      swift_once(&qword_1001D04C8, sub_100034324);
    }
    uint64_t v18 = sub_100010ED4();
    sub_1000093D0(v18, (uint64_t)qword_1001EDB28);
    uint64_t v19 = sub_10005A0A8();
    uint64_t v21 = v20(v19);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      uint64_t v25 = (uint8_t *)sub_100009B20(12LL);
      char v34 = (void *)sub_100009B20(8LL);
      *(_DWORD *)uint64_t v25 = 138412290;
      URL._bridgeToObjectiveC()((NSURL *)&unk_10015D000);
      uint64_t v27 = v26;
      uint64_t v28 = sub_100077294(v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, v29, v30);
      uint64_t v31 = (uint64_t)v34;
      *char v34 = v27;
      sub_1000771FC();
      sub_100014564( (void *)&_mh_execute_header,  v22,  v24,  "invalid lookup hints url when processing signature: %@",  v25);
      sub_10000941C(&qword_1001D1060);
      sub_100030F9C(v31);
      sub_100010C34(v31);
      sub_100010C34((uint64_t)v25);
    }

    else
    {
      sub_1000771FC();
    }

    goto LABEL_14;
  }

  uint64_t v32 = v17[11];
  uint64_t v36 = v17[10];
  uint64_t v37 = v32;
  swift_bridgeObjectRetain(v32);
  sub_1000773D0(45LL);
  if (v17[2] < 5uLL)
  {
    __break(1u);
  }

  else
  {
    swift_bridgeObjectRetain(v17[13]);
    sub_100077370();
    sub_10001450C();
    sub_1000773D0(45LL);
    if (v17[2] >= 3uLL)
    {
      swift_bridgeObjectRetain(v17[9]);
      sub_1000110E0();
      sub_100077370();
      sub_10001450C();
      goto LABEL_14;
    }
  }

  __break(1u);
}

void sub_10006DE94()
{
  uint64_t v5 = v0;
  if ((sub_10000649C( *(unsigned __int8 **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_hasStarted) + 16LL),  1u) & 1) == 0)
  {
    if (qword_1001D0520 != -1) {
      swift_once(&qword_1001D0520, sub_1000344B0);
    }
    uint64_t v6 = sub_100010ED4();
    sub_1000093D0(v6, (uint64_t)qword_1001EDC30);
    uint64_t v7 = (os_log_s *)sub_10004ED90();
    static os_log_type_t.default.getter(v7);
    if (sub_100077264(v7))
    {
      uint64_t v8 = (_WORD *)sub_100009B20(2LL);
      *uint64_t v8 = 0;
      sub_10001444C((void *)&_mh_execute_header, v9, v10, "DownloadManager started. Dispatching loadResources.");
      sub_100010C34((uint64_t)v8);
    }

    v19[2] = *(void *)(v5 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
    uint64_t v11 = swift_allocObject(&unk_1001B49B0, 24LL, 7LL);
    *(void *)(v11 + 16) = v5;
    v21[4] = sub_1000766E0;
    v21[5] = v11;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256LL;
    v21[2] = sub_1000D2F18;
    v21[3] = &unk_1001B49C8;
    char v12 = _Block_copy(v21);
    sub_100009BA4();
    v19[1] = v19;
    sub_10005A368();
    __chkstk_darwin(v13);
    id v14 = sub_10007713C();
    static DispatchQoS.unspecified.getter(v14);
    uint64_t v15 = sub_100009C54();
    sub_10002FBE4();
    __chkstk_darwin(v16);
    sub_1000270AC();
    uint64_t v20 = _swiftEmptyArrayStorage;
    unint64_t v17 = sub_100019CD0();
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v18 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v7, v18, v15, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v12);
    sub_100077368();
    sub_10007704C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_10007743C(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    swift_release();
  }

  sub_100009AA0();
}

void sub_10006E09C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v25);
  sub_10005F878();
  uint64_t v28 = v26 - v27;
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v95 - v31;
  __chkstk_darwin(v30);
  char v34 = (char *)&v95 - v33;
  uint64_t v35 = sub_10005A18C();
  uint64_t v106 = *(void *)(v35 - 8);
  uint64_t v107 = v35;
  sub_100027160();
  __chkstk_darwin(v36);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v37);
  sub_10005A2F8();
  uint64_t v105 = v38;
  uint64_t v39 = (void *)sub_100047134();
  sub_100047200();
  __chkstk_darwin(v40);
  sub_100009B6C();
  v41 = *(void **)(v20 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v21 = v41;
  sub_1000471E0(v42, enum case for DispatchPredicate.onQueue(_:));
  id v43 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v21);
  sub_10007704C((uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
  uint64_t v44 = sub_1000471D8(OBJC_IVAR____TtC7parsecd15DownloadManager_assembly);
  if (!v44) {
    goto LABEL_51;
  }
  uint64_t v45 = v44;
  id v46 =  objc_msgSend( objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),  "dictionaryForKey:",  @"download_resources");
  sub_1000773D8();
  if (!v39)
  {
    swift_unknownObjectRelease();
LABEL_51:
    sub_100009AA0();
    return;
  }

  uint64_t v98 = v45;
  uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v39,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  int64_t v48 = 0LL;
  uint64_t v104 = v47 + 64;
  sub_1000771E4();
  unint64_t v51 = v50 & v49;
  v103 = (void *)(v20 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  v110 = v114;
  v53 = v117;
  int64_t v108 = (unint64_t)(v52 + 63) >> 6;
  int64_t v96 = v108 - 1;
  uint64_t v111 = v47;
  uint64_t v97 = v47 + 104;
  v99 = v34;
  uint64_t v101 = v28;
  v100 = v32;
  v109 = v117;
  while (1)
  {
    if (v51)
    {
      unint64_t v54 = __clz(__rbit64(v51));
      v51 &= v51 - 1;
      unint64_t v55 = v54 | (v48 << 6);
      goto LABEL_7;
    }

    int64_t v59 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v59 >= v108)
    {
      int64_t v61 = v48;
    }

    else
    {
      unint64_t v60 = *(void *)(v104 + 8 * v59);
      if (v60) {
        goto LABEL_11;
      }
      int64_t v61 = v48 + 1;
      if (v48 + 2 < v108)
      {
        unint64_t v60 = *(void *)(v104 + 8 * (v48 + 2));
        if (v60)
        {
          int64_t v59 = v48 + 2;
          goto LABEL_11;
        }

        int64_t v61 = v48 + 2;
        if (v48 + 3 < v108)
        {
          unint64_t v60 = *(void *)(v104 + 8 * (v48 + 3));
          if (v60)
          {
            int64_t v59 = v48 + 3;
LABEL_11:
            unint64_t v51 = (v60 - 1) & v60;
            unint64_t v55 = __clz(__rbit64(v60)) + (v59 << 6);
            int64_t v48 = v59;
LABEL_7:
            uint64_t v56 = *(void *)(v111 + 56);
            v57 = (void *)(*(void *)(v111 + 48) + 16 * v55);
            uint64_t v58 = v57[1];
            *(void *)&__int128 v113 = *v57;
            *((void *)&v113 + 1) = v58;
            sub_100010758(v56 + 32 * v55, (uint64_t)v110);
            swift_bridgeObjectRetain(v58);
            goto LABEL_14;
          }

          int64_t v59 = v48 + 4;
          int64_t v61 = v48 + 3;
          if (v48 + 4 < v108)
          {
            unint64_t v60 = *(void *)(v104 + 8 * v59);
            if (v60) {
              goto LABEL_11;
            }
            while (v48 + 5 < v108)
            {
              unint64_t v60 = *(void *)(v97 + 8 * v48++);
              if (v60)
              {
                int64_t v59 = v48 + 4;
                goto LABEL_11;
              }
            }

            int64_t v61 = v96;
          }
        }
      }
    }

    unint64_t v51 = 0LL;
    memset(v114, 0, 32);
    int64_t v48 = v61;
    __int128 v113 = 0u;
LABEL_14:
    sub_10004E6C4((uint64_t)&v113, (uint64_t)&v115, &qword_1001D47D0);
    uint64_t v62 = v116;
    if (!v116)
    {
      sub_10007705C((uint64_t)&a12);
      swift_release();
      goto LABEL_51;
    }

    uint64_t v63 = v115;
    sub_1000108D8(v53, &v113);
    uint64_t v64 = sub_10000941C((uint64_t *)&unk_1001D44D0);
    if ((sub_1000772F8((uint64_t)&v112, (uint64_t)&v113, (uint64_t)&type metadata for Any + 8, v64) & 1) != 0)
    {
      v65 = v112;
      if (v112[2] && (unint64_t v66 = sub_10000EC64(7107189LL, 0xE300000000000000LL), (v67 & 1) != 0))
      {
        uint64_t v68 = *(void *)(v65[7] + 16 * v66);
        sub_10005A62C();
        sub_100077400();
        sub_100077350();
        sub_10005A148((uint64_t)v34, 1LL, v68);
        if (v69)
        {
          sub_100009B3C();
          sub_1000110A8();
          sub_100019C1C((uint64_t)v34, &qword_1001D5ED0);
        }

        else
        {
          sub_1000770AC(v105, (uint64_t)v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32));
          sub_1000772BC();
          sub_100009654(v70, v71, v72, v68);
          if (v65[2] && (sub_10000EC64(0x7463657269646572LL, 0xEC0000006C72755FLL), (v73 & 1) != 0))
          {
            sub_10005A62C();
            sub_100009B3C();
            sub_100077400();
            sub_100077350();
            sub_100019C1C((uint64_t)v32, &qword_1001D5ED0);
            sub_10004E6C4(v28, (uint64_t)v32, &qword_1001D5ED0);
          }

          else
          {
            sub_100009B3C();
          }

          uint64_t v74 = v102;
          sub_1000770AC(v102, v105, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 16));
          sub_1000107D0((uint64_t)v32, v28, &qword_1001D5ED0);
          uint64_t v75 = type metadata accessor for DownloadResource(0LL);
          uint64_t v76 = sub_1000773F4(v75);
          swift_bridgeObjectRetain(v62);
          sub_10006D4CC(v63, v62, v74, v28);
          v77 = v103;
          sub_100010BE4((uint64_t)v103, (uint64_t)&v113, 33LL);
          swift_retain(v76);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v77);
          v112 = (void *)*v77;
          v79 = v112;
          void *v77 = 0x8000000000000000LL;
          unint64_t v80 = sub_100077388();
          uint64_t v82 = v79[2];
          BOOL v83 = (v81 & 1) == 0;
          Swift::Int v84 = v82 + v83;
          if (__OFADD__(v82, v83)) {
            goto LABEL_54;
          }
          unint64_t v85 = v80;
          char v86 = v81;
          sub_10000941C(&qword_1001D10E0);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v84))
          {
            unint64_t v87 = sub_100077388();
            if ((v86 & 1) != (v88 & 1)) {
              goto LABEL_56;
            }
            unint64_t v85 = v87;
          }

          v89 = v112;
          if ((v86 & 1) != 0)
          {
            uint64_t v90 = v112[7];
            swift_release();
            *(void *)(v90 + 8 * v85) = v76;
          }

          else
          {
            sub_10007726C((uint64_t)&v112[v85 >> 6]);
            v91 = (uint64_t *)(v89[6] + 16 * v85);
            uint64_t *v91 = v63;
            v91[1] = v62;
            *(void *)(v89[7] + 8 * v85) = v76;
            uint64_t v92 = v89[2];
            BOOL v93 = __OFADD__(v92, 1LL);
            uint64_t v94 = v92 + 1;
            if (v93) {
              goto LABEL_55;
            }
            v89[2] = v94;
            swift_bridgeObjectRetain(v62);
          }

          void *v103 = v89;
          sub_1000110A8();
          sub_1000325E4();
          swift_endAccess(&v113);
          swift_release();
          uint64_t v32 = v100;
          sub_100019C1C((uint64_t)v100, &qword_1001D5ED0);
          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v107);
          uint64_t v28 = v101;
          char v34 = v99;
        }

        v53 = v109;
      }

      else
      {
        sub_1000110A8();
        sub_100009B3C();
        v53 = v109;
      }
    }

    else
    {
      sub_1000110A8();
    }
  }

  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10006E790()
{
  uint64_t v4 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v1 = v4;
  sub_1000471E0(v5, enum case for DispatchPredicate.onQueue(_:));
  id v6 = v4;
  LOBYTE(v4) = _dispatchPreconditionTest(_:)(v1);
  sub_10007704C((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if (!sub_1000471D8(OBJC_IVAR____TtC7parsecd15DownloadManager_assembly))
  {
LABEL_30:
    sub_100009AA0();
    return;
  }

  uint64_t v7 = (void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  sub_100010BE4(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources, (uint64_t)&v46, 0LL);
  uint64_t v42 = *v7 + 64LL;
  sub_1000771E4();
  unint64_t v10 = v9 & v8;
  int64_t v43 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v44 = v12;
  swift_bridgeObjectRetain(v12);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int64_t v45 = v13;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v18 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v44 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v44 + 56) + 8 * i);
    swift_bridgeObjectRetain(v21);
    swift_retain(v23);
    sub_10006D57C();
    uint64_t v25 = v24;
    swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    unint64_t v26 = sub_10000EC64(v22, v21);
    if (__OFADD__(*((void *)&_swiftEmptyDictionarySingleton + 2), (v27 & 1) == 0))
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    unint64_t v28 = v26;
    char v29 = v27;
    sub_10000941C((uint64_t *)&unk_1001D47E0);
    if (sub_100077344())
    {
      unint64_t v30 = sub_10000EC64(v22, v21);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_36;
      }
      unint64_t v28 = v30;
    }

    if ((v29 & 1) != 0)
    {
      uint64_t v32 = *((void *)&_swiftEmptyDictionarySingleton + 7);
      swift_bridgeObjectRelease();
      *(void *)(v32 + 8 * v28) = v25;
    }

    else
    {
      sub_10007726C((uint64_t)&_swiftEmptyDictionarySingleton + 8 * (v28 >> 6));
      uint64_t v33 = (uint64_t *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + 16 * v28);
      *uint64_t v33 = v22;
      v33[1] = v21;
      *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + 8 * v28) = v25;
      uint64_t v34 = *((void *)&_swiftEmptyDictionarySingleton + 2);
      BOOL v35 = __OFADD__(v34, 1LL);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_32;
      }
      *((void *)&_swiftEmptyDictionarySingleton + 2) = v36;
      swift_bridgeObjectRetain(v21);
    }

    swift_release();
    sub_1000110E0();
    swift_bridgeObjectRelease();
    int64_t v13 = v45;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      goto LABEL_33;
    }
    if (v16 >= v43) {
      goto LABEL_29;
    }
    unint64_t v17 = *(void *)(v42 + 8 * v16);
    int64_t v18 = v13 + 1;
    if (!v17)
    {
      int64_t v18 = v13 + 2;
      if (v13 + 2 >= v43) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(v42 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v13 + 3;
        if (v13 + 3 >= v43) {
          goto LABEL_29;
        }
        unint64_t v17 = *(void *)(v42 + 8 * v18);
        if (!v17) {
          break;
        }
      }
    }

void sub_10006EB34()
{
  uint64_t v4 = v0;
  sub_10008FF34(v5);
  if (!v6)
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    goto LABEL_10;
  }

  uint64_t v7 = v6;
  v29[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  v29[1] = v8;
  AnyHashable.init<A>(_:)(v29);
  sub_10000BEF0((uint64_t)v28, v7, &v30);
  sub_100009B3C();
  uint64_t v9 = sub_10000BD34((uint64_t)v28);
  if (!*((void *)&v31 + 1))
  {
LABEL_10:
    sub_100019C1C((uint64_t)&v30, (uint64_t *)&unk_1001D32C0);
    goto LABEL_11;
  }

  uint64_t v10 = sub_100009B34(v9, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
  if ((sub_1000772F8((uint64_t)v28, (uint64_t)&v30, (uint64_t)&type metadata for Any + 8, v10) & 1) != 0)
  {
    uint64_t v11 = (void *)v28[0];
    if (qword_1001D0520 != -1) {
      swift_once(&qword_1001D0520, sub_1000344B0);
    }
    uint64_t v12 = sub_100010ED4();
    sub_1000093D0(v12, (uint64_t)qword_1001EDC30);
    int64_t v13 = (os_log_s *)sub_10004ED90();
    static os_log_type_t.debug.getter(v13);
    if (sub_100077264(v13))
    {
      unint64_t v14 = (_WORD *)sub_100009B20(2LL);
      *unint64_t v14 = 0;
      sub_10001444C((void *)&_mh_execute_header, v15, v16, "Received bag change notification");
      sub_100010C34((uint64_t)v14);
    }

    uint64_t v17 = v4;
    sub_10006DE94();
    v27[3] = *(void *)(v4 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
    uint64_t v18 = sub_100019E00((uint64_t)&unk_1001B4B40);
    *(void *)(v18 + 16) = v4;
    *(void *)(v18 + 24) = v11;
    v28[4] = sub_100076A5C;
    v28[5] = v18;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 1107296256LL;
    v28[2] = sub_1000D2F18;
    v28[3] = &unk_1001B4B58;
    uint64_t v19 = _Block_copy(v28);
    uint64_t v20 = sub_100009BA4();
    v27[2] = v27;
    uint64_t v21 = *(void *)(v20 - 8);
    __chkstk_darwin(v20);
    sub_10007713C();
    id v22 = v11;
    static DispatchQoS.unspecified.getter(v22);
    uint64_t v23 = sub_100009C54();
    v27[1] = v27;
    sub_10005A368();
    __chkstk_darwin(v24);
    sub_100009AD4();
    *(void *)&__int128 v30 = _swiftEmptyArrayStorage;
    unint64_t v25 = sub_100019CD0();
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v26 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v17, v26, v23, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v19);
    sub_100077368();

    sub_10003D850(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_10007743C(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    swift_release();
  }

LABEL_11:
  sub_100009AA0();
}

      uint64_t v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v16 + v8, v9 - v8);
  }

    __break(1u);
  }

    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL);
  __break(1u);
  return result;
}

        swift_bridgeObjectRelease();
        uint64_t v11 = 0.0;
        goto LABEL_12;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  sub_10002716C();
}

void sub_10006EDF0(void *a1)
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd15DownloadManager_assembly))
  {
    sub_100049DE0();
    uint64_t v4 = v3;
    uint64_t v5 = sub_100019E00((uint64_t)&unk_1001B4B90);
    *(void *)(v5 + 16) = v1;
    *(void *)(v5 + 24) = a1;
    v9[4] = sub_100076A7C;
    v9[5] = v5;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256LL;
    v9[2] = sub_100071760;
    v9[3] = &unk_1001B4BA8;
    uint64_t v6 = _Block_copy(v9);
    id v7 = v1;
    id v8 = a1;
    sub_100011030();
    [v4 getAllTasksWithCompletionHandler:v6];
    sub_100077368();
    sub_100010CA0();
  }

uint64_t sub_10006EF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v74 = a1;
  uint64_t v75 = (void *)a2;
  uint64_t v6 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v73 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v70 - v10;
  __chkstk_darwin(v9);
  int64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v76 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v71 = (void (*)(void))((char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v72 = (uint64_t)&v70 - v18;
  __chkstk_darwin(v17);
  v77 = (void (*)(void))((char *)&v70 - v19);
  uint64_t v20 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = *(void **)(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  void *v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v23);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if ((v24 & 1) != 0)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_assembly);
    if (result)
    {
      uint64_t v27 = result;
      sub_1000107D0(a3, (uint64_t)v13, &qword_1001D5ED0);
      uint64_t v28 = v14;
      if (sub_100010708((uint64_t)v13, 1LL, v14) == 1)
      {
        sub_100019C1C((uint64_t)v13, &qword_1001D5ED0);
        sub_10006F538( v74,  (uint64_t)v75,  1LL,  v29,  v30,  v31,  v32,  v33,  v70,  (uint64_t)v71,  v72,  v73,  v74,  (uint64_t)v75,  v76,  (uint64_t)v77,  v78,  v79[0],  v79[1],  v79[2]);
      }

      else
      {
        uint64_t v70 = v27;
        uint64_t v34 = *(void (**)(void (*)(void), char *, uint64_t))(v76 + 32);
        v34(v77, v13, v14);
        BOOL v35 = (uint64_t *)(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
        swift_beginAccess(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources, v79, 32LL, 0LL);
        uint64_t v36 = *v35;
        id v37 = v75;
        swift_bridgeObjectRetain(v75);
        uint64_t v38 = v74;
        uint64_t v39 = sub_10000BFD4(v74, v37, v36);
        swift_endAccess(v79);
        swift_bridgeObjectRelease();
        if (!v39)
        {
          uint64_t v40 = v72;
          (*(void (**)(uint64_t, void (*)(void), uint64_t))(v76 + 16))(v72, v77, v28);
          sub_100009654((uint64_t)v11, 1LL, 1LL, v28);
          uint64_t v41 = type metadata accessor for DownloadResource(0LL);
          uint64_t v39 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
          swift_bridgeObjectRetain(v37);
          sub_10006D4CC(v38, (uint64_t)v37, v40, (uint64_t)v11);
          swift_beginAccess(v35, v79, 33LL, 0LL);
          swift_bridgeObjectRetain(v37);
          uint64_t v42 = swift_retain(v39);
          sub_10000F614(v42, v38, (uint64_t)v37, v43, v44, v45, v46, v47, v70, (uint64_t)v71);
          swift_endAccess(v79);
          swift_bridgeObjectRelease();
        }

        uint64_t v48 = v73;
        sub_10006FE74(v73);
        if (sub_100010708(v48, 1LL, v28) != 1)
        {
          uint64_t v49 = v39;
          uint64_t v50 = (uint64_t)v71;
          v34(v71, (char *)v48, v28);
          uint64_t v73 = v49;
          uint64_t v51 = v49 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
          swift_beginAccess(v49 + OBJC_IVAR____TtC7parsecd16DownloadResource_url, v79, 0LL, 0LL);
          uint64_t v52 = v76;
          uint64_t v53 = v72;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v72, v51, v28);
          URL._bridgeToObjectiveC()(v54);
          uint64_t v56 = v55;
          uint64_t v76 = *(void *)(v52 + 8);
          ((void (*)(uint64_t, uint64_t))v76)(v53, v28);
          v57 = v77;
          URL._bridgeToObjectiveC()(v58);
          unint64_t v60 = v59;
          LOBYTE(v52) = sub_100076A94(v56, v59);

          if ((v52 & 1) != 0)
          {
            id v61 = [(id)objc_opt_self(NSFileManager) defaultManager];
            URL.path.getter(v61);
            NSString v62 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v63 = [v61 fileExistsAtPath:v62];

            if (v63)
            {
              if ((sub_10006FFB4(v38, (uint64_t)v37) & 1) == 0)
              {
                char v69 = (void (*)(void (*)(void), uint64_t))v76;
                ((void (*)(void (*)(void), uint64_t))v76)(v71, v28);
                swift_release();
                v69(v57, v28);
                return swift_unknownObjectRelease();
              }

              uint64_t v64 = 0xE600000000000000LL;
              uint64_t v65 = 0x70756B6F6F6CLL;
            }

            else
            {
              uint64_t v64 = 0xE700000000000000LL;
              uint64_t v65 = 0x676E697373696DLL;
            }

            uint64_t v50 = (uint64_t)v71;
          }

          else
          {
            uint64_t v64 = 0xE600000000000000LL;
            uint64_t v65 = 0x657461647075LL;
          }

          else {
            double v66 = 0.0;
          }
          swift_bridgeObjectRetain(v64);
          sub_100070048(v38, v37, v57, v65, v64, v66);
          swift_bridgeObjectRelease();
          uint64_t v67 = v50;
          uint64_t v68 = (void (*)(void (*)(void), uint64_t))v76;
          ((void (*)(uint64_t, uint64_t))v76)(v67, v28);
          swift_release();
          v68(v57, v28);
          swift_bridgeObjectRelease();
          return swift_unknownObjectRelease();
        }

        swift_release();
        (*(void (**)(void (*)(void), uint64_t))(v76 + 8))(v77, v28);
        sub_100019C1C(v48, &qword_1001D5ED0);
      }

      return swift_unknownObjectRelease();
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10006F538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v21;
  a20 = v22;
  uint64_t v23 = v20;
  LODWORD(v25) = v24;
  uint64_t v27 = v26;
  v137 = v28;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v29);
  sub_100014428();
  v136 = v30;
  uint64_t v31 = sub_10005A18C();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v125 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_100047134();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  sub_100009AEC();
  uint64_t v39 = v38 - v37;
  uint64_t v40 = *(void **)&v23[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
  *(void *)(v38 - v37) = v40;
  (*(void (**)(uint64_t, void, uint64_t))(v36 + 104))( v38 - v37,  enum case for DispatchPredicate.onQueue(_:),  v35);
  id v41 = v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)(v39);
  sub_10007704C(v39, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }

  int v135 = v25;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v23[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly]);
  if (!Strong) {
    goto LABEL_29;
  }
  uint64_t v25 = Strong;
  uint64_t v43 = &v23[OBJC_IVAR____TtC7parsecd15DownloadManager_resources];
  sub_100010BE4((uint64_t)&v23[OBJC_IVAR____TtC7parsecd15DownloadManager_resources], (uint64_t)&v139, 32LL);
  uint64_t v44 = *(void *)v43;
  sub_10005A62C();
  uint64_t v45 = v137;
  sub_10000BFD4(v137, v27, v44);
  sub_1000773E0();
  sub_10001460C();
  sub_100010D00();
  if (v44)
  {
    sub_100010BE4((uint64_t)v43, (uint64_t)&v139, 33LL);
    sub_10005A62C();
    uint64_t v46 = sub_10005A0A8();
    sub_1000800D0(v46, v47, v48, v49, v50, v51, v52, v53, v125, (uint64_t)v126);
    sub_1000773E0();
    sub_10001460C();
    sub_100010D00();
    sub_10006E790();
    sub_100049DE0();
    unint64_t v55 = v54;
    uint64_t v56 = *(void **)(v25 + 248);
    v57 = (void *)swift_allocObject(&unk_1001B4C30, 48LL, 7LL);
    v57[2] = v55;
    v57[3] = v45;
    v57[4] = v27;
    v57[5] = v23;
    v142 = sub_100076E34;
    v143 = v57;
    *(void *)&__int128 v139 = _NSConcreteStackBlock;
    *((void *)&v139 + 1) = 1107296256LL;
    v140 = sub_1000D2F18;
    v141 = &unk_1001B4C48;
    uint64_t v58 = _Block_copy(&v139);
    uint64_t v129 = sub_100009BA4();
    v130 = &v125;
    uint64_t v128 = *(void *)(v129 - 8);
    sub_100027160();
    __chkstk_darwin(v59);
    sub_100010FCC();
    sub_10005A62C();
    id v60 = v56;
    uint64_t v132 = v32;
    id v61 = v60;
    id v126 = v55;
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v62 = sub_100009C54();
    v133 = v34;
    uint64_t v63 = v62;
    v127 = &v125;
    uint64_t v134 = v25;
    sub_10005A368();
    __chkstk_darwin(v64);
    sub_100009AEC();
    uint64_t v131 = v27;
    uint64_t v65 = v31;
    uint64_t v68 = v67 - v66;
    v138[0] = _swiftEmptyArrayStorage;
    unint64_t v69 = sub_100019CD0();
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v70 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v138, v55, v70, v63, v69);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v68, v58);
    _Block_release(v58);

    uint64_t v32 = v132;
    uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    uint64_t v25 = v134;
    uint64_t v72 = v68;
    uint64_t v31 = v65;
    uint64_t v27 = v131;
    uint64_t v73 = v63;
    uint64_t v34 = v133;
    v71(v72, v73);
    sub_100077284();
    uint64_t v74 = v45;
    uint64_t v45 = v137;
    v75(v74, v129);
    swift_release();
  }

  if ((v135 & 1) == 0)
  {
LABEL_23:
    sub_100077454();
    goto LABEL_29;
  }

  uint64_t v76 = v136;
  sub_10005A0A8();
  sub_10006FE74(v77);
  sub_10005A148((uint64_t)v76, 1LL, v31);
  if (v109)
  {
    sub_100077454();
    sub_100019C1C((uint64_t)v136, &qword_1001D5ED0);
    goto LABEL_29;
  }

  (*(void (**)(char *, void *, uint64_t))(v32 + 32))(v34, v136, v31);
  id v78 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v79);
  char v81 = v80;
  *(void *)&__int128 v139 = 0LL;
  uint64_t v82 = (void *)sub_10007740C();
  unsigned int v84 = [v82 v83];

  unint64_t v85 = (void *)v139;
  if (v84)
  {
    char v86 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
    id v87 = v85;
    id v88 = [v86 defaultCenter];
    v137 = @"PARFileDeletedNotification";
    uint64_t v89 = sub_10000941C((uint64_t *)&unk_1001D32A0);
    uint64_t inited = swift_initStackObject(v89, &v144);
    *(_OWORD *)(inited + 16) = xmmword_10015C7F0;
    *(void *)&__int128 v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"identifier");
    *((void *)&v139 + 1) = v91;
    AnyHashable.init<A>(_:)(&v139);
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v45;
    *(void *)(inited + 80) = v27;
    swift_bridgeObjectRetain(v27);
    uint64_t v92 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    sub_1000C5160((uint64_t)v137, 0LL, v92, v88);
    sub_100077454();

LABEL_28:
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    goto LABEL_29;
  }

  id v93 = (id)v139;
  _convertNSErrorToError(_:)(v85);

  swift_willThrow(v94);
  uint64_t v95 = (void *)sub_1000773A8();
  id v96 = [v95 userInfo];

  uint64_t v97 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v96,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  sub_10000BF3C(v98, v99, v97, &v139);
  sub_100009B3C();
  uint64_t v100 = sub_1000110A8();
  if (v141)
  {
    uint64_t v101 = sub_100009B34(v100, (unint64_t *)&unk_1001D4810, &OBJC_CLASS___NSError_ptr);
    id v102 = v138[0];
    id v103 = [v138[0] domain];
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
    uint64_t v106 = v105;

    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSPOSIXErrorDomain);
    BOOL v109 = v104 == v107 && v106 == v108;
    if (v109)
    {
      sub_100019F4C(v106);
    }

    else
    {
      char v110 = sub_10005A06C(v104, v106, v107, v108);
      sub_100009B3C();
      sub_10001450C();
      if ((v110 & 1) == 0)
      {

        goto LABEL_24;
      }
    }

    id v111 = [v102 code];

    if (v111 == (id)2)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
      sub_100077054();
      goto LABEL_23;
    }
  }

  else
  {
    sub_100019C1C((uint64_t)&v139, (uint64_t *)&unk_1001D32C0);
  }

uint64_t sub_10006FE74@<X0>(uint64_t a1@<X8>)
{
  if (sub_1000471D8(OBJC_IVAR____TtC7parsecd15DownloadManager_assembly))
  {
    id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
    NSFileManager.parsecdAssetsDirectoryURL.getter(v4);

    uint64_t v5 = sub_10005A18C();
    sub_10005A148(v1, 1LL, v5);
    if (v6)
    {
      sub_10006B7B4();
      sub_100019C1C(v1, &qword_1001D5ED0);
      uint64_t v14 = a1;
      uint64_t v15 = 1LL;
    }

    else
    {
      uint64_t v12 = sub_10005A464();
      URL.appendingPathComponent(_:isDirectory:)(v12, v13, 0LL);
      sub_10006B7B4();
      sub_10003D850(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL));
      uint64_t v14 = a1;
      uint64_t v15 = 0LL;
    }

    return sub_10003D7EC(v14, v15);
  }

  else
  {
    type metadata accessor for URL(0LL);
    sub_1000772BC();
    return sub_100009654(v7, v8, v9, v10);
  }

uint64_t sub_10006FFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARLookupHintsWeekly);
  if (v4 == a1 && v5 == a2) {
    goto LABEL_12;
  }
  char v7 = sub_1000770E4(v4, v5);
  sub_1000110A8();
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARLookupHintsMonthly);
    if (v9 != a1 || v10 != a2)
    {
      char v8 = sub_1000770E4(v9, v10);
LABEL_13:
      sub_1000325E4();
      return v8 & 1;
    }

void sub_100070048(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v93 = v15;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v91 = *(void *)(v16 - 8);
  uint64_t v92 = v16;
  sub_100027160();
  __chkstk_darwin(v17);
  sub_100014428();
  uint64_t v90 = v18;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v19);
  sub_100014428();
  uint64_t v89 = v20;
  sub_10000941C(&qword_1001D5380);
  sub_100009B94();
  __chkstk_darwin(v21);
  sub_10000BEB8();
  uint64_t v98 = type metadata accessor for URLRequest(0LL);
  uint64_t v94 = *(void *)(v98 - 8);
  sub_100027160();
  __chkstk_darwin(v22);
  sub_100032C48();
  uint64_t v95 = v23;
  __chkstk_darwin(v24);
  sub_10003D828();
  uint64_t v97 = v25;
  __chkstk_darwin(v26);
  sub_10005A2F8();
  uint64_t v96 = v27;
  uint64_t v28 = type metadata accessor for DispatchPredicate(0LL);
  sub_10005A368();
  __chkstk_darwin(v29);
  sub_100009B54();
  uint64_t v30 = *(void **)(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *char v8 = v30;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v28);
  id v31 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v8, v28);
  if ((v30 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once(&qword_1001D0520, sub_1000344B0);
    goto LABEL_7;
  }

  if (!swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_assembly)) {
    return;
  }
  uint64_t v32 = v6;
  char v8 = a2;
  sub_100070898(a1, a2, a3, a4, a5, v9);
  if (v7)
  {
LABEL_4:
    sub_100077454();
    return;
  }

  uint64_t v33 = sub_100077448();
  if (sub_100010708(v33, v34, v98) != 1)
  {
    uint64_t v47 = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 32))(v96, v9, v98);
    if (qword_1001D0520 != -1) {
      swift_once(&qword_1001D0520, sub_1000344B0);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v48, (uint64_t)qword_1001EDC30);
    sub_1000773C4(v97);
    sub_1000773C4(v95);
    uint64_t v49 = sub_10007735C();
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      id v87 = v50;
      uint64_t v88 = v32;
      uint64_t v52 = sub_100009B20(42LL);
      uint64_t v53 = sub_100009B20(96LL);
      uint64_t v104 = v53;
      *(_DWORD *)uint64_t v52 = 136315906;
      URLRequest.url.getter();
      uint64_t v54 = type metadata accessor for URL(0LL);
      uint64_t v55 = sub_100010708(v89, 1LL, v54);
      if ((_DWORD)v55 == 1)
      {
        sub_100019C1C(v89, &qword_1001D5ED0);
        uint64_t v56 = 0LL;
        uint64_t v57 = 0LL;
      }

      else
      {
        uint64_t v56 = URL.absoluteString.getter(v55);
        uint64_t v57 = v59;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8LL))(v89, v54);
      }

      uint64_t v102 = v56;
      v103[0] = v57;
      sub_10000941C(&qword_1001D4480);
      uint64_t v60 = String.init<A>(describing:)(&v102);
      uint64_t v102 = sub_100077300(v60, v61);
      sub_1000772C8();
      sub_100009B3C();
      sub_1000773B0(v97);
      *(_WORD *)(v52 + 12) = 2080;
      if (a5) {
        uint64_t v62 = a4;
      }
      else {
        uint64_t v62 = 0LL;
      }
      if (a5) {
        unint64_t v63 = a5;
      }
      else {
        unint64_t v63 = 0xE000000000000000LL;
      }
      sub_10005A5AC();
      uint64_t v102 = sub_1000307E0(v62, v63, &v104);
      sub_1000772C8();
      sub_100019F4C(a5);
      sub_100009B3C();
      *(_WORD *)(v52 + 22) = 2048;
      uint64_t v102 = *(void *)&a6;
      uint64_t v64 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v52 + 24);
      *(_WORD *)(v52 + 32) = 2080;
      uint64_t v102 = URLRequest.allHTTPHeaderFields.getter(v64);
      sub_10000941C(&qword_1001D4808);
      uint64_t v65 = String.init<A>(describing:)(&v102);
      uint64_t v102 = sub_100077300(v65, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v52 + 34);
      sub_100009B3C();
      sub_1000773B0(v95);
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v51,  "starting download of %s reason: %s delay: %f headers: %s",  (uint8_t *)v52,  0x2Au);
      swift_arrayDestroy(v53, 3LL);
      sub_100010C34(v53);
      sub_100010C34(v52);

      uint64_t v32 = v88;
      uint64_t v47 = v96;
    }

    else
    {
      uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
      v58(v97, v98);
      sub_100019F4C(a5);
      v58(v95, v98);
    }

    sub_100049DE0();
    uint64_t v68 = v67;
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    unint64_t v70 = (void *)sub_10007740C();
    uint64_t v72 = v47;
    id v73 = [v70 v71];

    uint64_t v74 = ParsecNWActivityDomain;
    id v75 = v73;
    objc_msgSend(v75, "set_nw_activity:", nw_activity_create(v74, 6));

    swift_unknownObjectRelease();
    id v76 = v75;
    Date.init(timeIntervalSinceNow:)(60.0);
    Class v77 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
    id v78 = (void *)sub_10007740C();
    [v78 v79];

    [v76 resume];
    sub_1000489B0();
    char v81 = v80;
    static Client.parsecd.getter(v80);
    id v82 = v76;
    id v83 = objc_msgSend(v82, "_nw_activity");
    uint64_t v84 = type metadata accessor for ResourceAccessNetworkSpan(0LL);
    uint64_t v85 = swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
    uint64_t v86 = sub_100076BB8(v81, 9, v93, 0LL, 1, v82, (uint64_t)v83, 0LL, 0xE000000000000000LL, v85);
    [v82 taskIdentifier];
    swift_beginAccess(v32 + OBJC_IVAR____TtC7parsecd15DownloadManager_spans, &v102, 33LL, 0LL);
    swift_retain(v86);
    sub_10000F620();
    swift_endAccess(&v102);

    swift_release();
    sub_100077454();
    sub_1000773B0(v72);
    return;
  }

  sub_100019C1C(v9, &qword_1001D5380);
  if (qword_1001D0520 != -1) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v35, (uint64_t)qword_1001EDC30);
  uint64_t v36 = sub_10007735C();
  uint64_t v37 = (void *)Logger.logObject.getter(v36);
  unint64_t v39 = (unint64_t)v8;
  os_log_type_t v40 = static os_log_type_t.error.getter(v37, v38);
  if (!os_log_type_enabled((os_log_t)v37, v40))
  {

    sub_100019F4C(v39);
    goto LABEL_4;
  }

  id v41 = (uint8_t *)sub_100009B20(12LL);
  uint64_t v42 = sub_100009B20(32LL);
  uint64_t v102 = v42;
  *(_DWORD *)id v41 = 136315138;
  swift_bridgeObjectRetain(v39);
  uint64_t v43 = sub_1000307E0(a1, v39, &v102);
  uint64_t v44 = sub_100077294(v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v45, v46);
  swift_bridgeObjectRelease_n(v39, 3LL);
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v37, v40, "could not create download request for %s", v41, 0xCu);
  swift_arrayDestroy(v42, 1LL);
  sub_100010C34(v42);
  sub_100010C34((uint64_t)v41);
  sub_100077454();
}

uint64_t sub_100070898@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = v7;
  uint64_t v55 = a2;
  sub_10000941C(&qword_1001D5380);
  sub_100009B94();
  __chkstk_darwin(v13);
  sub_1000270AC();
  uint64_t v49 = type metadata accessor for URLRequest(0LL);
  uint64_t v46 = *(void *)(v49 - 8);
  sub_100027160();
  __chkstk_darwin(v14);
  sub_100032C48();
  uint64_t v44 = v15;
  __chkstk_darwin(v16);
  sub_10005A2F8();
  uint64_t v45 = v17;
  type metadata accessor for PegasusContext(0LL);
  sub_100009B94();
  __chkstk_darwin(v18);
  sub_100009AD4();
  uint64_t v19 = (void *)type metadata accessor for DispatchPredicate(0LL);
  sub_10005A368();
  __chkstk_darwin(v20);
  sub_10000BEB8();
  uint64_t v21 = *(void **)(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *char v8 = v21;
  (*(void (**)(void *, void, void *))(v11 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v19);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(void *, void *))(v11 + 8))(v8, v19);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_assembly);
  if (Strong)
  {
    uint64_t v24 = Strong;
    sub_10006FFB4(a1, (uint64_t)v55);
    if (a5)
    {
      if ((a4 != 0x676E697373696DLL || a5 != 0xE700000000000000LL)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(a4, a5, 0x676E697373696DLL, 0xE700000000000000LL, 0LL) & 1) == 0)
      {
        uint64_t v26 = (uint64_t *)(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
        swift_beginAccess(v26, v53, 32LL, 0LL);
        uint64_t v27 = *v26;
        uint64_t v28 = v55;
        sub_10005A62C();
        uint64_t v29 = sub_10000BFD4(a1, v28, v27);
        sub_10001460C();
        swift_endAccess(v53);
        if (v29)
        {
          sub_100070CE8(v29);
          sub_10001683C();
        }
      }
    }

    sub_10004A274(v10);
    uint64_t v32 = type metadata accessor for PARNetworkRequestFactory();
    uint64_t inited = swift_initStackObject(v32, &v54);
    uint64_t v34 = swift_retain(v24);
    sub_1000C5390(v34, inited);
    sub_100056378();
    if (v12)
    {
      sub_1000771CC();
      sub_10001683C();
      sub_10001460C();
      return sub_1000773A0();
    }

    sub_10001683C();
    sub_10001460C();
    uint64_t v11 = v49;
    if (sub_100010708((uint64_t)isa, 1LL, v49) == 1)
    {
      sub_1000773A0();
      sub_1000771CC();
      sub_100019C1C((uint64_t)isa, &qword_1001D5380);
      uint64_t v30 = 1LL;
      uint64_t v31 = a6;
      return sub_100009654(v31, v30, 1LL, v11);
    }

    uint64_t v36 = *(void (**)(void))(v46 + 32);
    uint64_t v6 = v45;
    v36();
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    uint64_t v37 = objc_opt_self(&OBJC_CLASS___NSMutableURLRequest);
    uint64_t v38 = swift_dynamicCastObjCClass(isa, v37);
    if (!v38)
    {

      goto LABEL_20;
    }

    uint64_t v19 = (void *)v38;
    a3 = v36;
    if (qword_1001D05D0 == -1)
    {
LABEL_18:
      [v19 _setTimeWindowDuration:*(double *)&qword_1001D4690];
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v19);

      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v6, v11);
      uint64_t v36 = a3;
      ((void (*)(uint64_t, uint64_t, uint64_t))a3)(v6, v44, v11);
LABEL_20:
      v39._countAndFlagsBits = 0xD00000000000001BLL;
      v39._object = (void *)0x80000001001702D0LL;
      v40.value._countAndFlagsBits = a1;
      v40.value._object = v55;
      URLRequest.setValue(_:forHTTPHeaderField:)(v40, v39);
      uint64_t v41 = a5;
      if (a5)
      {
        v42._object = (void *)0x80000001001702F0LL;
        uint64_t v43 = a4;
        v42._countAndFlagsBits = 0xD000000000000017LL;
        URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)(&v41 - 1), v42);
      }

      sub_1000771CC();
      sub_1000773A0();
      uint64_t v31 = a6;
      ((void (*)(uint64_t, uint64_t, uint64_t))v36)(a6, v6, v11);
      uint64_t v30 = 0LL;
      return sub_100009654(v31, v30, 1LL, v11);
    }

uint64_t sub_100070CE8(uint64_t a1)
{
  uint64_t v5 = sub_10005A18C();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000771B0();
  __chkstk_darwin(v7);
  uint64_t v9 = &v24[-v8];
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  sub_1000145F8();
  LOBYTE(v10) = sub_10006FFB4(v10, v11);
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v12 = a1 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  sub_100010BE4(a1 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl, (uint64_t)v24, 0LL);
  sub_1000107D0(v12, v2, &qword_1001D5ED0);
  sub_10005A148(v2, 1LL, v5);
  if (v13)
  {
    sub_100019C1C(v2, &qword_1001D5ED0);
LABEL_5:
    uint64_t v14 = a1 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
    sub_100010BE4(v14, (uint64_t)v25, 0LL);
    sub_1000770AC(v1, v14, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    sub_10006D914();
    uint64_t v20 = v15;
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v22 = v1;
    goto LABEL_6;
  }

  uint64_t v16 = sub_10005A464();
  sub_1000770AC(v16, v17, v18);
  sub_10006DBA4();
  uint64_t v20 = v19;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v22 = (uint64_t)v9;
LABEL_6:
  sub_10007704C(v22, v21);
  return v20;
}

uint64_t sub_100070E70()
{
  uint64_t v0 = sub_10000941C((uint64_t *)&unk_1001D44D0);
  OS_dispatch_queue.sync<A>(execute:)(&v3, sub_1000765A4, &v2, v0);
  return v3;
}

uint64_t sub_100070ED8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  swift_beginAccess(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources, v46, 0LL, 0LL);
  uint64_t v3 = *v2;
  uint64_t v44 = *v2 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(*v2 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(*v2 + 64);
  int64_t v45 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  int64_t v7 = 0LL;
  uint64_t v8 = &_swiftEmptyDictionarySingleton;
  while (v6)
  {
    unint64_t v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v10 = v9 | (v7 << 6);
LABEL_20:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v15);
    uint64_t v18 = swift_retain(v17);
    uint64_t v19 = sub_100070CE8(v18);
    if (v20)
    {
      uint64_t v21 = v19;
      uint64_t v22 = v20;
      char isUnique = swift_isUniquelyReferenced_nonNull_native(v8);
      uint64_t v47 = v8;
      unint64_t v23 = sub_10000EC64(v16, v15);
      uint64_t v24 = v8[2];
      char v43 = v25;
      BOOL v26 = (v25 & 1) == 0;
      BOOL v27 = __OFADD__(v24, v26);
      Swift::Int v28 = v24 + v26;
      if (v27) {
        goto LABEL_34;
      }
      Swift::Int capacity = v28;
      unint64_t v41 = v23;
      sub_10000941C(&qword_1001D10A0);
      Swift::Bool v29 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
      unint64_t v30 = v41;
      if (v29)
      {
        unint64_t v31 = sub_10000EC64(v16, v15);
        if ((v43 & 1) != (v32 & 1)) {
          goto LABEL_36;
        }
        unint64_t v30 = v31;
      }

      uint64_t v8 = v47;
      if ((v43 & 1) != 0)
      {
        uint64_t v33 = (uint64_t *)(v47[7] + 16 * v30);
        swift_bridgeObjectRelease();
        *uint64_t v33 = v21;
        v33[1] = v22;
      }

      else
      {
        v47[(v30 >> 6) + 8] |= 1LL << v30;
        uint64_t v34 = (uint64_t *)(v8[6] + 16 * v30);
        *uint64_t v34 = v16;
        v34[1] = v15;
        uint64_t v35 = (uint64_t *)(v8[7] + 16 * v30);
        *uint64_t v35 = v21;
        v35[1] = v22;
        uint64_t v36 = v8[2];
        BOOL v27 = __OFADD__(v36, 1LL);
        uint64_t v37 = v36 + 1;
        if (v27) {
          goto LABEL_35;
        }
        v8[2] = v37;
        swift_bridgeObjectRetain(v15);
      }

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
  }

  int64_t v11 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_33;
  }

  if (v11 >= v45) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v44 + 8 * v11);
  ++v7;
  if (v12) {
    goto LABEL_19;
  }
  int64_t v7 = v11 + 1;
  if (v11 + 1 >= v45) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v44 + 8 * v7);
  if (v12) {
    goto LABEL_19;
  }
  int64_t v7 = v11 + 2;
  if (v11 + 2 >= v45) {
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(v44 + 8 * v7);
  if (v12)
  {
LABEL_19:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
    goto LABEL_20;
  }

  int64_t v13 = v11 + 3;
  if (v13 >= v45)
  {
LABEL_31:
    uint64_t result = swift_release();
    *a2 = v8;
    return result;
  }

  unint64_t v12 = *(void *)(v44 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_19;
  }

  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v45) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v44 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }

void sub_1000711EC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_1001B4C80, 40LL, 7LL);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v11[4] = sub_100076E6C;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_100071760;
  v11[3] = &unk_1001B4C98;
  unint64_t v9 = _Block_copy(v11);
  swift_bridgeObjectRetain(a3);
  id v10 = a4;
  swift_release();
  [a1 getAllTasksWithCompletionHandler:v9];
  _Block_release(v9);
}

uint64_t sub_1000712C0(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(a1);
    if (v8) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }

  if (a1 < 0) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v13);
  uint64_t v8 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      unint64_t v12 = v11;
      ++v10;
      uint64_t v14 = v11;
      sub_1000713BC(&v14, a2, a3, a4);
    }

    while (v8 != v10);
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

void sub_1000713BC(void **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D5380);
  uint64_t v9 = __chkstk_darwin(v8);
  id v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = *a1;
  id v15 = [v14 originalRequest];
  if (v15)
  {
    uint64_t v16 = v15;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = type metadata accessor for URLRequest(0LL);
    uint64_t v18 = (uint64_t)v11;
    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v17 = type metadata accessor for URLRequest(0LL);
    uint64_t v18 = (uint64_t)v11;
    uint64_t v19 = 1LL;
  }

  sub_100009654(v18, v19, 1LL, v17);
  sub_10004E6C4((uint64_t)v11, (uint64_t)v13, &qword_1001D5380);
  type metadata accessor for URLRequest(0LL);
  uint64_t v20 = sub_100010708((uint64_t)v13, 1LL, v17);
  if ((_DWORD)v20 == 1)
  {
    sub_100019C1C((uint64_t)v13, &qword_1001D5380);
    return;
  }

  uint64_t v21 = URLRequest.allHTTPHeaderFields.getter(v20);
  (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v13, v17);
  if (v21)
  {
    uint64_t v22 = sub_10000BF84(0xD00000000000001BLL, 0x80000001001702D0LL, v21);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    if (v24)
    {
      if (v22 == a2 && v24 == a3)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, a2, a3, 0LL);
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0) {
          return;
        }
      }

      [v14 cancel];
      id v27 = [v14 taskIdentifier];
      uint64_t v43 = *(void *)&a4[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
      uint64_t v28 = swift_allocObject(&unk_1001B4CD0, 32LL, 7LL);
      *(void *)(v28 + 16) = a4;
      *(void *)(v28 + 24) = v27;
      aBlock[4] = sub_100076E98;
      aBlock[5] = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1000D2F18;
      aBlock[3] = &unk_1001B4CE8;
      Swift::Bool v29 = _Block_copy(aBlock);
      uint64_t v41 = type metadata accessor for DispatchQoS(0LL);
      Swift::String v42 = &v40;
      uint64_t v30 = *(void *)(v41 - 8);
      __chkstk_darwin(v41);
      char v32 = (char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      static DispatchQoS.unspecified.getter(a4);
      uint64_t v33 = type metadata accessor for DispatchWorkItemFlags(0LL);
      uint64_t v40 = (uint64_t)&v40;
      uint64_t v34 = *(void *)(v33 - 8);
      __chkstk_darwin(v33);
      uint64_t v36 = (char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      int64_t v45 = _swiftEmptyArrayStorage;
      unint64_t v37 = sub_100019CD0();
      uint64_t v38 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v39 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v38, v39, v33, v37);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v32, v36, v29);
      _Block_release(v29);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v41);
      swift_release();
    }
  }

uint64_t sub_100071760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = sub_100009788(0LL, (unint64_t *)&unk_1001D47F8, &OBJC_CLASS___NSURLSessionTask_ptr);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000717CC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_100047134();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100009B54();
  uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v3 = v8;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v3, enum case for DispatchPredicate.onQueue(_:), v6);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v3);
  uint64_t v10 = sub_10005A464();
  uint64_t result = v11(v10);
  if ((v8 & 1) != 0)
  {
    uint64_t v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
    sub_100010BE4((uint64_t)v13, (uint64_t)v16, 32LL);
    uint64_t v14 = *v13;
    swift_bridgeObjectRetain(a2);
    uint64_t v15 = sub_10000BFD4(a1, a2, v14);
    swift_endAccess(v16);
    sub_1000325E4();
    return v15;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1000718CC()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v7);
  id v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10005A18C();
  sub_100047200();
  __chkstk_darwin(v11);
  sub_10005F878();
  uint64_t v14 = v12 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = sub_1000471D8(OBJC_IVAR____TtC7parsecd15DownloadManager_assembly);
  if (v18)
  {
    uint64_t v19 = v18;
    sub_10006FE74((uint64_t)v9);
    sub_10005A148((uint64_t)v9, 1LL, v10);
    if (v20)
    {
      sub_10006B7B4();
      sub_100019C1C((uint64_t)v9, &qword_1001D5ED0);
    }

    else
    {
      uint64_t v21 = (objc_class *)sub_1000770AC( (uint64_t)v17,  (uint64_t)v9,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
      uint64_t v43 = v6;
      if (!v2) {
        goto LABEL_8;
      }
      id v22 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL.path.getter(v22);
      NSString v23 = String._bridgeToObjectiveC()();
      sub_100009B3C();
      v47[0] = 0LL;
      id v24 = [v22 attributesOfItemAtPath:v23 error:v47];

      id v25 = v47[0];
      if (v24)
      {
        type metadata accessor for FileAttributeKey(0LL);
        uint64_t v27 = v26;
        sub_10000BCF8( (unint64_t *)&qword_1001D0B98,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10015D13C);
        Swift::String v42 = (void *)v4;
        uint64_t v45 = v0;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, v27, (char *)&type metadata for Any + 8, v28);
        uint64_t v44 = v19;
        id v29 = v25;

        sub_100077430();
        uint64_t v0 = v45;
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v21 = isa;
        *uint64_t v2 = isa;
LABEL_8:
        sub_100009B34((uint64_t)v21, (unint64_t *)&qword_1001D4820, &OBJC_CLASS___NSFileHandle_ptr);
        sub_1000770AC(v14, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
        sub_100071D28(v14);
        sub_10007704C((uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
        sub_10006B7B4();
        goto LABEL_15;
      }

      id v31 = v47[0];
      _convertNSErrorToError(_:)(v25);

      swift_willThrow(v32);
      if (qword_1001D0520 != -1) {
        swift_once(&qword_1001D0520, sub_1000344B0);
      }
      uint64_t v33 = sub_100010ED4();
      uint64_t v34 = (os_log_s *)sub_1000093D0(v33, (uint64_t)qword_1001EDC30);
      sub_1000145F8();
      sub_100077254();
      sub_1000145F8();
      uint64_t v35 = sub_100077254();
      Logger.logObject.getter(v35);
      os_log_type_t v36 = sub_100010EC4();
      if (sub_100077244(v36))
      {
        uint64_t v37 = sub_100009B20(22LL);
        uint64_t v38 = (void *)sub_100009B20(8LL);
        Swift::String v42 = (void *)sub_100009B20(32LL);
        v47[0] = v42;
        *(_DWORD *)uint64_t v37 = 136315394;
        uint64_t v45 = v0;
        sub_1000145F8();
        uint64_t v46 = sub_1000307E0(v43, v4, (uint64_t *)v47);
        uint64_t v44 = v19;
        sub_1000772E8();
        sub_100019FA4(v4);
        *(_WORD *)(v37 + 12) = 2112;
        uint64_t v39 = sub_1000773A8();
        uint64_t v46 = v39;
        sub_1000772E8();
        *uint64_t v38 = v39;
        sub_100077054();
        sub_100077054();
        sub_100077100((void *)&_mh_execute_header, v34, (os_log_type_t)v23, "no file handle for %s: %@");
        sub_10000941C(&qword_1001D1060);
        sub_100030F9C((uint64_t)v38);
        sub_100010C34((uint64_t)v38);
        uint64_t v40 = (uint64_t)v42;
        sub_100030F9C((uint64_t)v42);
        sub_100010C34(v40);
        sub_100010C34(v37);
        swift_unknownObjectRelease();

        sub_100077054();
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8);
      }

      else
      {
        sub_10006B7B4();

        sub_100077054();
        sub_100077054();
        sub_100019F4C(v4);
        sub_100077054();
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
      }

      sub_10007704C((uint64_t)v17, v41);
    }
  }

id sub_100071D28(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0LL;
  id v6 = [(id)swift_getObjCClassFromMetadata(v2) fileHandleForReadingFromURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL(0LL);
    id v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  return v6;
}

void sub_100071E3C(uint64_t a1, void *a2)
{
  uint64_t v88 = a2;
  uint64_t v3 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v4 = __chkstk_darwin(v3);
  id v6 = (char *)v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v81 - v7;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v97 = *(void **)(v9 - 8);
  uint64_t v98 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v90 = (char *)v81 - v14;
  __chkstk_darwin(v13);
  uint64_t v91 = (char *)v81 - v15;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (void *)((char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  char v20 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_assembly);
  if (Strong)
  {
    uint64_t v23 = Strong;
    id v24 = v88;
    uint64_t v25 = sub_100076A08(v88);
    if (!v25)
    {
LABEL_36:
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v95 = v8;
    uint64_t v86 = v6;
    uint64_t v26 = sub_100050CF4(v25);
    uint64_t v27 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
    uint64_t v28 = swift_beginAccess(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources, v99, 0LL, 0LL);
    uint64_t v29 = *v27;
    __chkstk_darwin(v28);
    v81[-2] = v26;
    v81[-1] = a1;
    uint64_t v30 = swift_bridgeObjectRetain(v29);
    uint64_t v31 = v94;
    sub_10006D338(v30, (void (*)(uint64_t, uint64_t, uint64_t))sub_100076A8C);
    uint64_t v94 = v31;
    swift_bridgeObjectRelease();
    v81[0] = v23;
    sub_100049824();
    sub_1000BAB84();
    swift_unknownObjectRelease();
    int64_t v33 = 0LL;
    uint64_t v34 = *(void *)(v26 + 56);
    uint64_t v92 = v26 + 56;
    uint64_t v96 = v26;
    uint64_t v35 = 1LL << *(_BYTE *)(v26 + 32);
    uint64_t v36 = -1LL;
    if (v35 < 64) {
      uint64_t v36 = ~(-1LL << v35);
    }
    unint64_t v37 = v36 & v34;
    int64_t v93 = (unint64_t)(v35 + 63) >> 6;
    *(void *)&__int128 v32 = 136446466LL;
    __int128 v82 = v32;
    v81[1] = (char *)&type metadata for Any + 8;
    uint64_t v87 = a1;
    uint64_t v85 = v12;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          unint64_t v38 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          unint64_t v39 = v38 | (v33 << 6);
        }

        else
        {
          if (__OFADD__(v33++, 1LL))
          {
            __break(1u);
            goto LABEL_40;
          }

          if (v33 >= v93) {
            goto LABEL_35;
          }
          unint64_t v41 = *(void *)(v92 + 8 * v33);
          if (!v41)
          {
            int64_t v42 = v33 + 1;
            if (v33 + 1 >= v93) {
              goto LABEL_35;
            }
            unint64_t v41 = *(void *)(v92 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v33 + 2;
              if (v33 + 2 >= v93) {
                goto LABEL_35;
              }
              unint64_t v41 = *(void *)(v92 + 8 * v42);
              if (!v41)
              {
                int64_t v42 = v33 + 3;
                if (v33 + 3 >= v93)
                {
LABEL_35:
                  swift_release();
                  sub_10006E790();
                  goto LABEL_36;
                }

                unint64_t v41 = *(void *)(v92 + 8 * v42);
                if (!v41)
                {
                  while (1)
                  {
                    int64_t v33 = v42 + 1;
                    if (__OFADD__(v42, 1LL)) {
                      break;
                    }
                    if (v33 >= v93) {
                      goto LABEL_35;
                    }
                    unint64_t v41 = *(void *)(v92 + 8 * v33);
                    ++v42;
                    if (v41) {
                      goto LABEL_19;
                    }
                  }

#error "1000725B0: call analysis failed (funcsize=18)"
uint64_t sub_1000725C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  void v20[9];
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    id v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    uint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      uint64_t v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      uint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          uint64_t v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          uint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1000726F8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  sub_10006D228(a1, v5);
  uint64_t v6 = swift_allocObject(&unk_1001B4BE0, 32LL, 7LL);
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = a3;
  aBlock[4] = sub_100076A84;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B4BF8;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = v5;
  static DispatchQoS.unspecified.getter(a3);
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&aBlock[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v21 = _swiftEmptyArrayStorage;
  unint64_t v17 = sub_100019CD0();
  uint64_t v18 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v19 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v13, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v16, v7);
  _Block_release(v7);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1000728D0(void **a1, uint64_t *a2)
{
  uint64_t v49 = a2;
  uint64_t v3 = sub_10000941C(&qword_1001D5380);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *a1;
  if (qword_1001D0520 != -1) {
    swift_once(&qword_1001D0520, sub_1000344B0);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v13, (uint64_t)qword_1001EDC30);
  id v14 = v12;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v48;
    *(_DWORD *)unint64_t v17 = 136315138;
    id v18 = [v14 originalRequest];
    if (v18)
    {
      unint64_t v19 = v18;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = type metadata accessor for URLRequest(0LL);
      uint64_t v21 = (uint64_t)v6;
      uint64_t v22 = 0LL;
    }

    else
    {
      uint64_t v20 = type metadata accessor for URLRequest(0LL);
      uint64_t v21 = (uint64_t)v6;
      uint64_t v22 = 1LL;
    }

    sub_100009654(v21, v22, 1LL, v20);
    sub_10004E6C4((uint64_t)v6, (uint64_t)v8, &qword_1001D5380);
    type metadata accessor for URLRequest(0LL);
    if (sub_100010708((uint64_t)v8, 1LL, v20) == 1)
    {
      uint64_t v23 = 0x3E6C696E3CLL;
      id v24 = &qword_1001D5380;
      uint64_t v25 = (uint64_t)v8;
    }

    else
    {
      URLRequest.url.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v8, v20);
      uint64_t v26 = type metadata accessor for URL(0LL);
      uint64_t v27 = sub_100010708((uint64_t)v11, 1LL, v26);
      if ((_DWORD)v27 != 1)
      {
        uint64_t v23 = URL.absoluteString.getter(v27);
        unint64_t v28 = v29;
        (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v11, v26);
        goto LABEL_14;
      }

      uint64_t v23 = 0x3E6C696E3CLL;
      id v24 = &qword_1001D5ED0;
      uint64_t v25 = (uint64_t)v11;
    }

    sub_100019C1C(v25, v24);
    unint64_t v28 = 0xE500000000000000LL;
LABEL_14:
    os_log_type_t v51 = (void *)sub_1000307E0(v23, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v17 + 4);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "cancel download %s", v17, 0xCu);
    uint64_t v30 = v48;
    swift_arrayDestroy(v48, 1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    goto LABEL_15;
  }

LABEL_15:
  [v14 cancel];
  id v31 = [v14 taskIdentifier];
  __int128 v32 = v49;
  uint64_t v48 = *(uint64_t *)((char *)v49 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  uint64_t v33 = swift_allocObject(&unk_1001B4D20, 32LL, 7LL);
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v31;
  aBlock[4] = (uint64_t)sub_100076FC4;
  aBlock[5] = v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1000D2F18;
  aBlock[3] = (uint64_t)&unk_1001B4D38;
  uint64_t v34 = _Block_copy(aBlock);
  uint64_t v35 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v47 = (uint64_t)&v47;
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  unint64_t v38 = (char *)&v47 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = &v47;
  uint64_t v40 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  int64_t v42 = (char *)&v47 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v51 = _swiftEmptyArrayStorage;
  unint64_t v43 = sub_100019CD0();
  uint64_t v44 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v45 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v44, v45, v39, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v42, v34);
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v39);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  return swift_release();
}

uint64_t sub_100072DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_spans);
  sub_100010BE4(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_spans, (uint64_t)v10, 33LL);
  unint64_t v4 = sub_10000ED7C(a2);
  if ((v5 & 1) != 0)
  {
    unint64_t v6 = v4;
    swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10000941C(&qword_1001D10E8);
    sub_100077344();
    uint64_t v7 = type metadata accessor for ResourceAccessNetworkSpan(0LL);
    _NativeDictionary._delete(at:)(v6, v9, &type metadata for Int, v7, &protocol witness table for Int);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }

  swift_endAccess(v10);
  return swift_release();
}

void sub_100072EE8(uint64_t a1, void *a2)
{
}

void sub_100072FE4()
{
}

uint64_t type metadata accessor for DownloadManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd15DownloadManager);
}

void sub_1000730A4( uint64_t a1, void *a2, uint64_t a3, char *a4, void (**a5)(void, void, void))
{
  id v103 = a4;
  uint64_t v118 = a3;
  uint64_t v115 = type metadata accessor for URL(0LL);
  uint64_t v109 = *(void *)(v115 - 8);
  uint64_t v7 = __chkstk_darwin(v115);
  uint64_t v105 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v99 - v9;
  uint64_t v11 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v114 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v108 = (char *)&v99 - v14;
  uint64_t v15 = type metadata accessor for URLRequest(0LL);
  v117 = *(uint64_t **)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v116 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000941C(&qword_1001D5380);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v110 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v111 = (uint64_t)&v99 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  id v24 = (char *)&v99 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v99 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v99 - v29;
  __chkstk_darwin(v28);
  __int128 v32 = (char *)&v99 - v31;
  uint64_t v113 = swift_allocObject(&unk_1001B4AC8, 24LL, 7LL);
  *(void *)(v113 + 16) = a5;
  _Block_copy(a5);
  id v33 = [a2 originalRequest];
  uint64_t v107 = v10;
  if (v33)
  {
    uint64_t v34 = v33;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v33);

    uint64_t v35 = 0LL;
  }

  else
  {
    uint64_t v35 = 1LL;
  }

  sub_100009654((uint64_t)v30, v35, 1LL, v15);
  sub_10004E6C4((uint64_t)v30, (uint64_t)v32, &qword_1001D5380);
  int v36 = sub_100010708((uint64_t)v32, 1LL, v15);
  uint64_t v37 = v117;
  if (v36 == 1)
  {
    sub_100019C1C((uint64_t)v32, &qword_1001D5380);
    uint64_t countAndFlagsBits = 0LL;
    object = 0LL;
  }

  else
  {
    v38._object = (void *)0x80000001001702F0LL;
    v38._uint64_t countAndFlagsBits = 0xD000000000000017LL;
    Swift::String_optional v39 = URLRequest.value(forHTTPHeaderField:)(v38);
    uint64_t countAndFlagsBits = v39.value._countAndFlagsBits;
    object = v39.value._object;
    ((void (*)(char *, uint64_t))v37[1])(v32, v15);
  }

  id v40 = [a2 originalRequest];
  if (v40)
  {
    uint64_t v41 = v40;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v40);

    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v42 = 1LL;
  }

  unint64_t v43 = v116;
  sub_100009654((uint64_t)v24, v42, 1LL, v15);
  sub_10004E6C4((uint64_t)v24, (uint64_t)v27, &qword_1001D5380);
  if (sub_100010708((uint64_t)v27, 1LL, v15) == 1)
  {
    sub_100019C1C((uint64_t)v27, &qword_1001D5380);
    uint64_t v44 = 0LL;
    unint64_t v45 = 0LL;
  }

  else
  {
    v46._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v46._object = (void *)0x80000001001702D0LL;
    Swift::String_optional v47 = URLRequest.value(forHTTPHeaderField:)(v46);
    uint64_t v44 = v47.value._countAndFlagsBits;
    unint64_t v45 = v47.value._object;
    ((void (*)(char *, uint64_t))v37[1])(v27, v15);
  }

  if (qword_1001D0520 != -1) {
    swift_once(&qword_1001D0520, sub_1000344B0);
  }
  uint64_t v48 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v48, (uint64_t)qword_1001EDC30);
  ((void (*)(char *, uint64_t, uint64_t))v37[2])(v43, v118, v15);
  uint64_t v49 = swift_bridgeObjectRetain_n(v45, 2LL);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.debug.getter(v50);
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v104 = v44;
  if (v52)
  {
    uint64_t v106 = a5;
    uint64_t v53 = 0x3E6C696E3CLL;
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v100 = swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v100;
    *(_DWORD *)uint64_t v54 = 136315394;
    if (v45) {
      uint64_t v55 = v44;
    }
    else {
      uint64_t v55 = 0x3E6C696E3CLL;
    }
    if (v45) {
      unint64_t v56 = (unint64_t)v45;
    }
    else {
      unint64_t v56 = 0xE500000000000000LL;
    }
    swift_bridgeObjectRetain(v45);
    unint64_t v119 = (void *)sub_1000307E0(v55, v56, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v54 + 4);
    swift_bridgeObjectRelease_n(v45, 2LL);
    uint64_t v57 = swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    uint64_t v58 = (uint64_t)v108;
    URLRequest.url.getter(v57);
    uint64_t v59 = v115;
    uint64_t v60 = sub_100010708(v58, 1LL, v115);
    if ((_DWORD)v60 == 1)
    {
      sub_100019C1C(v58, &qword_1001D5ED0);
      unint64_t v61 = 0xE500000000000000LL;
    }

    else
    {
      uint64_t v53 = URL.absoluteString.getter(v60);
      unint64_t v61 = v64;
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v58, v59);
    }

    unint64_t v119 = (void *)sub_1000307E0(v53, v61, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, aBlock, v54 + 14);
    swift_bridgeObjectRelease();
    uint64_t v62 = (void (*)(char *, uint64_t))v117[1];
    v62(v116, v15);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "will begin %s url %s", (uint8_t *)v54, 0x16u);
    uint64_t v65 = v100;
    swift_arrayDestroy(v100, 2LL);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);

    a5 = v106;
  }

  else
  {
    swift_bridgeObjectRelease_n(v45, 2LL);
    uint64_t v62 = (void (*)(char *, uint64_t))v37[1];
    v62(v43, v15);

    uint64_t v59 = v115;
  }

  uint64_t v66 = (uint64_t)v114;
  if (!v45)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  URLRequest.url.getter(v63);
  if (sub_100010708(v66, 1LL, v59) != 1)
  {
    uint64_t v67 = v109;
    uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 32);
    uint64_t v69 = v107;
    v68(v107, v66, v59);
    uint64_t v70 = v104;
    if ((sub_10006FFB4(v104, (uint64_t)v45) & 1) != 0)
    {
      uint64_t v71 = v103;
      uint64_t v118 = *(void *)&v103[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v105, v69, v59);
      uint64_t v72 = *(unsigned __int8 *)(v67 + 80);
      uint64_t v73 = (v72 + 40) & ~v72;
      unint64_t v74 = (v102 + v73 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v75 = (v74 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      id v76 = (char *)swift_allocObject(&unk_1001B4AF0, v75 + 16, v72 | 7);
      *((void *)v76 + 2) = v71;
      *((void *)v76 + 3) = v70;
      *((void *)v76 + 4) = v45;
      v68(&v76[v73], (uint64_t)v105, v59);
      uint64_t v77 = (uint64_t *)&v76[v74];
      uint64_t v78 = (uint64_t)object;
      uint64_t v79 = v113;
      uint64_t *v77 = countAndFlagsBits;
      v77[1] = v78;
      uint64_t v80 = (void (**)(uint64_t, uint64_t))&v76[v75];
      *uint64_t v80 = sub_100076938;
      v80[1] = (void (*)(uint64_t, uint64_t))v79;
      aBlock[4] = (uint64_t)sub_1000769C0;
      aBlock[5] = (uint64_t)v76;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000D2F18;
      aBlock[3] = (uint64_t)&unk_1001B4B08;
      char v81 = _Block_copy(aBlock);
      uint64_t v82 = type metadata accessor for DispatchQoS(0LL);
      v117 = &v99;
      uint64_t v83 = *(void *)(v82 - 8);
      __chkstk_darwin(v82);
      uint64_t v85 = (char *)&v99 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      id v86 = v71;
      uint64_t v87 = swift_retain(v79);
      static DispatchQoS.unspecified.getter(v87);
      uint64_t v88 = type metadata accessor for DispatchWorkItemFlags(0LL);
      uint64_t v116 = (char *)&v99;
      uint64_t v106 = a5;
      uint64_t v89 = *(void *)(v88 - 8);
      __chkstk_darwin(v88);
      uint64_t v91 = (char *)&v99 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      unint64_t v119 = _swiftEmptyArrayStorage;
      unint64_t v92 = sub_100019CD0();
      uint64_t v93 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v94 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v119, v93, v94, v88, v92);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v85, v91, v81);
      _Block_release(v81);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v88);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v85, v82);
      (*(void (**)(char *, uint64_t))(v109 + 8))(v107, v115);
      swift_release();
      swift_release();
      uint64_t v95 = v106;
      goto LABEL_38;
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v59);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100019C1C(v66, &qword_1001D5ED0);
LABEL_34:
  uint64_t v96 = v111;
  sub_100009654(v111, 1LL, 1LL, v15);
  uint64_t v97 = v110;
  sub_1000107D0(v96, v110, &qword_1001D5380);
  if (sub_100010708(v97, 1LL, v15) == 1)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v62((char *)v97, v15);
  }

  ((void (**)(void, void, Class))a5)[2](a5, 0LL, isa);

  sub_100019C1C(v96, &qword_1001D5380);
  swift_release();
  uint64_t v95 = a5;
LABEL_38:
  _Block_release(v95);
}

void sub_100073A8C( uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v29[0] = a7;
  v29[1] = a8;
  uint64_t v30 = a6;
  uint64_t v12 = sub_10000941C(&qword_1001D5380);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v29 - v16;
  uint64_t v18 = type metadata accessor for URLRequest(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100070898(a2, a3, a4, a5, v30, (uint64_t)v17);
  uint64_t v22 = (void (*)(uint64_t, char *))v29[0];
  if (sub_100010708((uint64_t)v17, 1LL, v18) == 1)
  {
    sub_100019C1C((uint64_t)v17, &qword_1001D5380);
    if (qword_1001D0520 != -1) {
      swift_once(&qword_1001D0520, sub_1000344B0);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_1000093D0(v23, (uint64_t)qword_1001EDC30);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v27 = static os_log_type_t.error.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "createDownloadRequest failed ", v28, 2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v21, v18);
    sub_100009654((uint64_t)v15, 0LL, 1LL, v18);
    v22(1LL, v15);
    sub_100019C1C((uint64_t)v15, &qword_1001D5380);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }

void sub_100073DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000941C(&qword_1001D5380);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a2, (uint64_t)v8, &qword_1001D5380);
  uint64_t v9 = type metadata accessor for URLRequest(0LL);
  Class isa = 0LL;
  if (sub_100010708((uint64_t)v8, 1LL, v9) != 1)
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  }

  (*(void (**)(uint64_t, uint64_t, Class))(a3 + 16))(a3, a1, isa);
}

void sub_100073ED0()
{
  uint64_t v116 = v2;
  uint64_t v117 = v3;
  uint64_t v105 = (char *)v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  sub_10000941C(&qword_1001D5380);
  sub_100009B94();
  __chkstk_darwin(v8);
  sub_10005A49C();
  __chkstk_darwin(v9);
  sub_10005A2F8();
  sub_10007732C(v10);
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v104 = sub_10005A18C();
  uint64_t v102 = *(void *)(v104 - 8);
  uint64_t v15 = *(void *)(v102 + 64);
  __chkstk_darwin(v104);
  sub_10007732C((uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v99 - v17;
  if (v5)
  {
    uint64_t v0 = v14;
    uint64_t v19 = v7;
    uint64_t v20 = (char *)&v99 - v17;
    uint64_t v21 = v5;
    uint64_t v22 = (void *)_convertErrorToNSError(_:)(v5);
    id v23 = [v22 domain];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v26 = v25;

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSURLErrorDomain);
    BOOL v29 = v24 == v27 && v26 == v28;
    if (v29)
    {
      uint64_t v31 = sub_100019F4C(v26);
    }

    else
    {
      char v30 = sub_10005A06C(v24, v26, v27, v28);
      sub_1000325E4();
      uint64_t v31 = sub_1000110E0();
      if ((v30 & 1) == 0)
      {

        uint64_t v18 = v20;
        uint64_t v7 = v19;
        uint64_t v5 = v21;
        uint64_t v14 = v0;
        goto LABEL_10;
      }
    }

    sub_100047258(v31, "code");
    sub_1000773D8();
    BOOL v29 = v26 == -999;
    uint64_t v18 = v20;
    uint64_t v7 = v19;
    uint64_t v5 = v21;
    uint64_t v14 = v0;
    if (v29) {
      goto LABEL_31;
    }
  }

void sub_100074744(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v134 = a5;
  uint64_t v135 = a4;
  uint64_t countAndFlagsBits = a2;
  uint64_t v7 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v131 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v127 - v10;
  uint64_t v12 = type metadata accessor for URL(0LL);
  v136 = *(void (***)(char *, uint64_t))(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  v133 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v132 = (char *)&v127 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v137 = (char *)&v127 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v127 - v19;
  uint64_t v21 = sub_10000941C(&qword_1001D5380);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v127 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v127 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  char v30 = (char *)&v127 - v29;
  __chkstk_darwin(v28);
  id v32 = (char *)&v127 - v31;
  id v33 = [a1 originalRequest];
  if (v33)
  {
    uint64_t v34 = v33;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v33);

    uint64_t v35 = type metadata accessor for URLRequest(0LL);
    uint64_t v36 = (uint64_t)v30;
    uint64_t v37 = 0LL;
  }

  else
  {
    uint64_t v35 = type metadata accessor for URLRequest(0LL);
    uint64_t v36 = (uint64_t)v30;
    uint64_t v37 = 1LL;
  }

  sub_100009654(v36, v37, 1LL, v35);
  sub_10004E6C4((uint64_t)v30, (uint64_t)v32, &qword_1001D5380);
  type metadata accessor for URLRequest(0LL);
  if (sub_100010708((uint64_t)v32, 1LL, v35) == 1)
  {
    sub_100019C1C((uint64_t)v32, &qword_1001D5380);
    return;
  }

  uint64_t v130 = v12;
  v38._object = (void *)0x80000001001702D0LL;
  v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Swift::String_optional v39 = URLRequest.value(forHTTPHeaderField:)(v38);
  uint64_t v128 = *(void (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8LL);
  v128(v32, v35);
  if (v39.value._object)
  {
    uint64_t v129 = a3;
    uint64_t v40 = sub_1000717CC(v39.value._countAndFlagsBits, (uint64_t)v39.value._object);
    if (!v40)
    {
      uint64_t countAndFlagsBits = (uint64_t *)v39.value._countAndFlagsBits;
      if (qword_1001D0520 != -1) {
        swift_once(&qword_1001D0520, sub_1000344B0);
      }
      uint64_t v51 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v51, (uint64_t)qword_1001EDC30);
      os_log_type_t v52 = v136;
      uint64_t v53 = v130;
      ((void (*)(char *, uint64_t, uint64_t))v136[2])(v20, v129, v130);
      uint64_t v54 = swift_bridgeObjectRetain_n(v39.value._object, 2LL);
      uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
      os_log_type_t v57 = static os_log_type_t.error.getter(v55, v56);
      BOOL v58 = os_log_type_enabled(v55, v57);
      uint64_t v59 = (uint64_t)countAndFlagsBits;
      if (v58)
      {
        uint64_t v60 = swift_slowAlloc(22LL, -1LL);
        v137 = (char *)swift_slowAlloc(64LL, -1LL);
        uint64_t aBlock = (uint64_t)v137;
        *(_DWORD *)uint64_t v60 = 136315394;
        swift_bridgeObjectRetain(v39.value._object);
        __int128 v139 = (void *)sub_1000307E0(v59, (unint64_t)v39.value._object, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &aBlock, v60 + 4);
        uint64_t v61 = swift_bridgeObjectRelease_n(v39.value._object, 3LL);
        *(_WORD *)(v60 + 12) = 2080;
        uint64_t v62 = URL.absoluteString.getter(v61);
        __int128 v139 = (void *)sub_1000307E0(v62, v63, &aBlock);
        uint64_t v59 = (uint64_t)countAndFlagsBits;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &aBlock, v60 + 14);
        swift_bridgeObjectRelease();
        v52[1](v20, v53);
        _os_log_impl((void *)&_mh_execute_header, v55, v57, "missing resource for %s url: %s", (uint8_t *)v60, 0x16u);
        uint64_t v64 = v137;
        swift_arrayDestroy(v137, 2LL);
        swift_slowDealloc(v64, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(v39.value._object, 2LL);
        v52[1](v20, v53);
      }

      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
      uint64_t v86 = v85;
      uint64_t v87 = sub_10000941C(&qword_1001D10D0);
      uint64_t inited = swift_initStackObject(v87, v146);
      *(_OWORD *)(inited + 16) = xmmword_10015C7F0;
      *(void *)(inited + 32) = 0x6E6F73616572LL;
      *(void *)(inited + 40) = 0xE600000000000000LL;
      uint64_t aBlock = 0LL;
      unint64_t v141 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      uint64_t aBlock = 0x20676E697373696DLL;
      unint64_t v141 = 0xE800000000000000LL;
      v89._uint64_t countAndFlagsBits = v59;
      v89._object = v39.value._object;
      String.append(_:)(v89);
      swift_bridgeObjectRelease();
      v90._uint64_t countAndFlagsBits = 0x203A3E4C52553C20LL;
      v90._object = (void *)0xE800000000000000LL;
      String.append(_:)(v90);
      v92._uint64_t countAndFlagsBits = URL.absoluteString.getter(v91);
      String.append(_:)(v92);
      swift_bridgeObjectRelease();
      uint64_t v93 = aBlock;
      unint64_t v94 = v141;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v93;
      *(void *)(inited + 56) = v94;
      uint64_t v95 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
      id v96 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v97 = (void *)sub_1000765BC(v84, v86, 500LL, v95);
      uint64_t v98 = v135;
      dispatch_queue_t v99 = *(void **)(v135 + 248);
      uint64_t v100 = (void *)swift_allocObject(&unk_1001B4A78, 40LL, 7LL);
      uint64_t v101 = v134;
      v100[2] = v98;
      v100[3] = v101;
      v100[4] = v97;
      uint64_t v144 = sub_10007681C;
      v145 = v100;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v141 = 1107296256LL;
      v142 = sub_1000D2F18;
      v143 = &unk_1001B4A90;
      uint64_t v102 = _Block_copy(&aBlock);
      uint64_t v103 = type metadata accessor for DispatchQoS(0LL);
      uint64_t countAndFlagsBits = &v127;
      uint64_t v104 = *(void *)(v103 - 8);
      __chkstk_darwin(v103);
      id v106 = (char *)&v127 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      id v107 = v99;
      swift_unknownObjectRetain(v98);
      v136 = v97;
      static DispatchQoS.unspecified.getter(v136);
      uint64_t v108 = type metadata accessor for DispatchWorkItemFlags(0LL);
      v137 = (char *)&v127;
      uint64_t v109 = *(void *)(v108 - 8);
      __chkstk_darwin(v108);
      uint64_t v111 = (char *)&v127 - ((v110 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      __int128 v139 = _swiftEmptyArrayStorage;
      unint64_t v112 = sub_100019CD0();
      uint64_t v113 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v114 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v139, v113, v114, v108, v112);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v106, v111, v102);
      _Block_release(v102);

      (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
      goto LABEL_28;
    }

    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(&v147);
    uint64_t v43 = v42;
    id v44 = sub_100076840(v42);

    uint64_t v45 = v137;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v44);

    uint64_t v135 = v41;
    uint64_t v46 = v41 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
    swift_beginAccess(v41 + OBJC_IVAR____TtC7parsecd16DownloadResource_url, &aBlock, 33LL, 0LL);
    uint64_t v47 = v136;
    ((void (*)(uint64_t, char *, uint64_t))v136[5])(v46, v45, v130);
    swift_endAccess(&aBlock);
    id v48 = [a1 currentRequest];
    if (v48)
    {
      uint64_t v49 = v48;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v48);

      uint64_t v50 = 0LL;
    }

    else
    {
      uint64_t v50 = 1LL;
    }

    sub_100009654((uint64_t)v24, v50, 1LL, v35);
    sub_10004E6C4((uint64_t)v24, (uint64_t)v27, &qword_1001D5380);
    uint64_t v65 = sub_100010708((uint64_t)v27, 1LL, v35);
    if ((_DWORD)v65 == 1)
    {
      sub_100019C1C((uint64_t)v27, &qword_1001D5380);
      uint64_t v66 = v130;
      sub_100009654((uint64_t)v11, 1LL, 1LL, v130);
    }

    else
    {
      URLRequest.url.getter(v65);
      v128(v27, v35);
      uint64_t v66 = v130;
      if (sub_100010708((uint64_t)v11, 1LL, v130) != 1)
      {
        uint64_t v115 = v47[4];
        uint64_t v116 = v132;
        ((void (*)(char *, char *, uint64_t))v115)(v132, v11, v66);
        URL._bridgeToObjectiveC()(v117);
        Swift::String v119 = v118;
        id v120 = sub_100076840(v118);

        Swift::String v121 = v133;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v120);

        v122 = v137;
        ((void (*)(char *, uint64_t, uint64_t))v47[2])(v137, v46, v66);
        sub_10000BCF8( &qword_1001D47D8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        LOBYTE(v119) = dispatch thunk of static Equatable.== infix(_:_:)(v121, v122, v66, v123);
        v124 = v47[1];
        v124(v122, v66);
        v124(v116, v66);
        if ((v119 & 1) == 0)
        {
          uint64_t v125 = (uint64_t)v131;
          ((void (*)(char *, char *, uint64_t))v115)(v131, v121, v66);
          sub_100009654(v125, 0LL, 1LL, v66);
          uint64_t v67 = v135;
          uint64_t v126 = v135 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
          swift_beginAccess(v135 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl, &aBlock, 33LL, 0LL);
          sub_1000766FC(v125, v126);
          swift_endAccess(&aBlock);
          goto LABEL_20;
        }

        v124(v121, v66);
LABEL_19:
        uint64_t v67 = v135;
LABEL_20:
        if (qword_1001D0520 != -1) {
          swift_once(&qword_1001D0520, sub_1000344B0);
        }
        uint64_t v68 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v68, (uint64_t)qword_1001EDC30);
        uint64_t v69 = swift_retain_n(v67, 2LL);
        unint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
        os_log_type_t v71 = static os_log_type_t.debug.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = swift_slowAlloc(22LL, -1LL);
          uint64_t v134 = swift_slowAlloc(64LL, -1LL);
          uint64_t aBlock = v134;
          *(_DWORD *)uint64_t v72 = 136315394;
          uint64_t v73 = v47;
          uint64_t v74 = *(void *)(v67 + 16);
          unint64_t v75 = *(void *)(v67 + 24);
          swift_bridgeObjectRetain(v75);
          __int128 v139 = (void *)sub_1000307E0(v74, v75, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &aBlock, v72 + 4);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2080;
          uint64_t v76 = v137;
          uint64_t v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v73[2])(v137, v46, v66);
          uint64_t v78 = URL.absoluteString.getter(v77);
          unint64_t v80 = v79;
          v73[1](v76, v66);
          uint64_t v81 = v78;
          uint64_t v82 = v135;
          __int128 v139 = (void *)sub_1000307E0(v81, v80, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &aBlock, v72 + 14);
          swift_release_n(v82, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "%s url: %s", (uint8_t *)v72, 0x16u);
          uint64_t v83 = v134;
          swift_arrayDestroy(v134, 2LL);
          swift_slowDealloc(v83, -1LL, -1LL);
          swift_slowDealloc(v72, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v67, 2LL);
        }

        sub_10006E790();
LABEL_28:
        swift_release();
        return;
      }
    }

    sub_100019C1C((uint64_t)v11, &qword_1001D5ED0);
    goto LABEL_19;
  }

void sub_10007543C()
{
  uint64_t v159 = v5;
  uint64_t v7 = v6;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v8);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v9);
  sub_10005A2F8();
  v163 = v10;
  uint64_t v165 = sub_10005A18C();
  v157 = *(void **)(v165 - 8);
  sub_100027160();
  __chkstk_darwin(v11);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v12);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v13);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v14);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v15);
  sub_10005A2F8();
  sub_10007732C(v16);
  sub_10000941C(&qword_1001D5380);
  sub_100009B94();
  __chkstk_darwin(v17);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v18);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v19);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v20);
  sub_10005A2F8();
  sub_10007732C(v21);
  uint64_t v169 = *(void *)&v0[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
  uint64_t v22 = sub_100019E00((uint64_t)&unk_1001B4960);
  *(void *)(v22 + 16) = v0;
  *(void *)(v22 + 24) = v7;
  v175 = sub_100076684;
  uint64_t v176 = v22;
  *(void *)&__int128 v172 = _NSConcreteStackBlock;
  *((void *)&v172 + 1) = 1107296256LL;
  v173 = sub_1000D2F18;
  v174 = &unk_1001B4978;
  uint64_t v23 = _Block_copy(&v172);
  uint64_t v24 = sub_100009BA4();
  sub_100047200();
  __chkstk_darwin(v25);
  sub_100009AD4();
  v166 = v0;
  id v26 = v7;
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v27 = sub_100009C54();
  sub_10002FBE4();
  __chkstk_darwin(v28);
  sub_1000270AC();
  v171 = _swiftEmptyArrayStorage;
  unint64_t v29 = sub_100019CD0();
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v30 = sub_10007720C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v171, v0, v30, v27, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v3, v2, v23);
  _Block_release(v23);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v27);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v24);
  swift_release();
  id v31 = [v26 response];
  if (!v31) {
    goto LABEL_24;
  }
  id v32 = v31;
  uint64_t v33 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
  uint64_t v34 = swift_dynamicCastObjCClass(v32, v33);
  if (!v34) {
    goto LABEL_23;
  }
  uint64_t v35 = (void *)v34;
  uint64_t v36 = &selRef_fbr;
  id v37 = [v26 originalRequest];
  if (v37)
  {
    Swift::String v38 = v37;
    uint64_t v39 = (uint64_t)object;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v37);

    uint64_t v40 = sub_1000772E0();
    uint64_t v41 = (uint64_t)object;
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v40 = type metadata accessor for URLRequest(0LL);
    uint64_t v39 = (uint64_t)object;
    uint64_t v41 = (uint64_t)object;
    uint64_t v42 = 1LL;
  }

  sub_100077418(v41, v42);
  sub_10004E6C4(v39, countAndFlagsBits, &qword_1001D5380);
  sub_1000772E0();
  uint64_t v43 = sub_100077448();
  sub_10005A148(v43, v44, v40);
  if (v74)
  {

    uint64_t v45 = &qword_1001D5380;
    uint64_t v46 = countAndFlagsBits;
LABEL_9:
    sub_100019C1C(v46, v45);
    goto LABEL_24;
  }

  v47._object = (void *)0x80000001001702D0LL;
  v47._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Swift::String_optional v48 = URLRequest.value(forHTTPHeaderField:)(v47);
  uint64_t v49 = *(void (**)(uint64_t))(*(void *)(v40 - 8) + 8LL);
  uint64_t v50 = sub_100077424();
  v49(v50);
  if (!v48.value._object)
  {
LABEL_23:

    goto LABEL_24;
  }

  uint64_t v51 = v26;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(&v166[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly]);
  if (!Strong)
  {

    sub_10001460C();
    goto LABEL_24;
  }

  uint64_t v53 = Strong;
  uint64_t countAndFlagsBits = v48.value._countAndFlagsBits;
  uint64_t v54 = (char *)[v35 statusCode];
  uint64_t v55 = v54;
  if ((unint64_t)(v54 - 200) > 0xC7)
  {
    if (qword_1001D0520 != -1) {
      swift_once(&qword_1001D0520, sub_1000344B0);
    }
    uint64_t v60 = sub_100010ED4();
    sub_1000093D0(v60, (uint64_t)qword_1001EDC30);
    uint64_t v61 = sub_10005A62C();
    uint64_t v62 = Logger.logObject.getter(v61);
    os_log_type_t v64 = sub_100047278(v62, v63);
    if (sub_100077264((os_log_s *)&selRef_fbr))
    {
      uint64_t v65 = sub_100009B20(22LL);
      uint64_t v66 = sub_100009B20(32LL);
      *(void *)&__int128 v172 = v66;
      *(_DWORD *)uint64_t v65 = 136315394;
      sub_10005A5AC();
      uint64_t v67 = sub_1000307E0(countAndFlagsBits, (unint64_t)v48.value._object, (uint64_t *)&v172);
      sub_100077338(v67);
      uint64_t v69 = v68 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v68 + 8, v65 + 4);
      sub_100019FA4((uint64_t)v48.value._object);
      *(_WORD *)(v65 + 12) = 2048;
      v171 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v69, v65 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&selRef_fbr,  v64,  "download of %s got status code %ld",  (uint8_t *)v65,  0x16u);
      sub_100030F9C(v66);
      sub_100010C34(v66);
      sub_100010C34(v65);
      sub_1000771CC();
    }

    else
    {

      sub_100019F4C((uint64_t)v48.value._object);
      sub_1000771CC();
    }

    goto LABEL_23;
  }

  if (v54 != (char *)206 && v54 != (char *)200)
  {

    sub_10001460C();
    sub_1000771CC();
    goto LABEL_24;
  }

  sub_10006DE94();
  id v56 = [v51 originalRequest];
  if (v56)
  {
    os_log_type_t v57 = v56;
    uint64_t v36 = v161;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v56);

    uint64_t v58 = (uint64_t)v161;
    sub_100077318();
  }

  else
  {
    sub_100077318();
    uint64_t v58 = (uint64_t)v161;
  }

  sub_100077418(v58, v59);
  sub_1000773B8(v58, &qword_1001D5380, (uint64_t)&v172);
  uint64_t v70 = sub_10005A148(v58, 1LL, v40);
  if (v74)
  {
    sub_1000773EC(v70, &qword_1001D5380);
    sub_1000772BC();
    sub_100009654(v71, v72, v73, v165);
LABEL_32:
    sub_1000771CC();
    sub_10001460C();

    uint64_t v45 = &qword_1001D5ED0;
    uint64_t v46 = (uint64_t)v36;
    goto LABEL_9;
  }

  URLRequest.url.getter(v70);
  ((void (*)(uint64_t, uint64_t))v49)(v58, v40);
  sub_10005A148((uint64_t)v36, 1LL, v165);
  if (v74) {
    goto LABEL_32;
  }
  object = v48.value._object;
  unint64_t v75 = v157;
  v162 = (void (*)(uint64_t, char **, uint64_t))v157[4];
  v162(v160, v36, v165);
  if (qword_1001D0520 != -1) {
    swift_once(&qword_1001D0520, sub_1000344B0);
  }
  uint64_t v76 = sub_100010ED4();
  uint64_t v77 = sub_1000093D0(v76, (uint64_t)qword_1001EDC30);
  uint64_t v78 = (void (*)(char *, uint64_t, uint64_t))v157[2];
  v78(v55, v160, v165);
  v163 = v78;
  uint64_t v79 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v78)(v158, v159, v165);
  uint64_t v164 = v77;
  unint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
  os_log_type_t v81 = static os_log_type_t.default.getter(v80);
  v152 = v32;
  uint64_t v153 = v53;
  if (sub_100047154(v81))
  {
    uint64_t v82 = sub_100009B20(22LL);
    uint64_t v83 = sub_100009B20(64LL);
    *(void *)&__int128 v172 = v83;
    *(_DWORD *)uint64_t v82 = 136315394;
    LODWORD(v161) = v77;
    uint64_t v84 = URL.absoluteString.getter(v83);
    uint64_t v86 = sub_100077168(v84, v85);
    sub_100077338(v86);
    uint64_t v88 = v87 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v87 + 8, v82 + 4);
    sub_100009B3C();
    Swift::String v89 = (uint64_t (*)(char *, uint64_t))v75[1];
    uint64_t v90 = v89(v55, v165);
    *(_WORD *)(v82 + 12) = 2080;
    uint64_t v91 = URL.absoluteString.getter(v90);
    v171 = (void *)sub_100077168(v91, v92);
    uint64_t v93 = v88;
    unint64_t v94 = (char **)v89;
    uint64_t v95 = v166;
    uint64_t v96 = v165;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v93, v82 + 14);
    sub_100009B3C();
    uint64_t v97 = sub_10005A464();
    ((void (*)(uint64_t))v94)(v97);
    sub_100077100((void *)&_mh_execute_header, v80, (os_log_type_t)v161, "download of %s finished %s");
    swift_arrayDestroy(v83, 2LL);
    sub_100010C34(v83);
    sub_100010C34(v82);
  }

  else
  {
    unint64_t v94 = (char **)v157[1];
    uint64_t v99 = sub_100077424();
    ((void (*)(uint64_t))v94)(v99);
    ((void (*)(uint64_t, uint64_t))v94)(v158, v165);

    uint64_t v96 = v165;
    uint64_t v95 = v166;
  }

  __chkstk_darwin(v98);
  uint64_t v100 = countAndFlagsBits;
  *(&v151 - 4) = (uint64_t)v95;
  *(&v151 - 3) = v100;
  unint64_t v101 = (unint64_t)object;
  *(&v151 - 2) = (uint64_t)object;
  OS_dispatch_queue.sync<A>(execute:)(&v172, sub_1000766A4, &v151 - 6, &type metadata for Bool);
  if (v172 == 1)
  {
    uint64_t v102 = v155;
    sub_100077430();
    sub_10006FE74(v103);
    sub_10005A148((uint64_t)v102, 1LL, v96);
    uint64_t v104 = v152;
    if (v74)
    {
      sub_100019C1C((uint64_t)v102, &qword_1001D5ED0);
      sub_10005A5AC();
      uint64_t v105 = sub_100077174();
      os_log_type_t v107 = sub_100047278(v105, v106);
      if (sub_100077264(v102))
      {
        uint64_t v108 = (uint8_t *)sub_100009B20(12LL);
        uint64_t v109 = v96;
        uint64_t v110 = sub_100009B20(32LL);
        *(void *)&__int128 v172 = v110;
        *(_DWORD *)uint64_t v108 = 136315138;
        sub_10005A5AC();
        uint64_t v111 = sub_1000307E0(v100, v101, (uint64_t *)&v172);
        sub_100077338(v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v112 + 8, v108 + 4);
        sub_100019FA4(v101);
        sub_100014564((void *)&_mh_execute_header, v102, v107, "failed to get destination to save identifier %s", v108);
        sub_100030F9C(v110);
        sub_100010C34(v110);
        sub_100010C34((uint64_t)v108);
        sub_100077040();

        sub_10007715C();
        uint64_t v113 = v160;
        uint64_t v114 = v109;
LABEL_54:
        ((void (*)(uint64_t, uint64_t))v94)(v113, v114);
        goto LABEL_24;
      }

      sub_100019F4C(v101);
      sub_100077040();

LABEL_53:
      uint64_t v113 = v160;
      uint64_t v114 = v96;
      goto LABEL_54;
    }

    uint64_t v134 = v154;
    v162(v154, (char **)v102, v96);
    sub_1000489B0();
    v136 = v135;
    uint64_t v137 = sub_10000941C(&qword_1001D1070);
    sub_1000773F4(v137);
    sub_10000EBF4(v136, 7, 0LL);
    id v138 = [(id)objc_opt_self(NSFileManager) defaultManager];
    NSFileManager.saveInCache(file:from:)();

    uint64_t v140 = sub_10003D690();
    sub_10000BF3C(0xD000000000000027LL, 0x800000010016DA20LL, v140, &v172);
    sub_100009B3C();
    v161 = v94;
    if (v174)
    {
      if (sub_1000772F8( (uint64_t)&v171,  (uint64_t)&v172,  (uint64_t)&type metadata for Any + 8,  (uint64_t)&type metadata for Int))
      {
        unint64_t v141 = v171;
LABEL_52:
        sub_1000AF798(v141);
        id v142 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
        uint64_t v143 = sub_10000941C((uint64_t *)&unk_1001D32A0);
        uint64_t inited = swift_initStackObject(v143, &v170);
        *(_OWORD *)(inited + 16) = xmmword_10015D580;
        *(void *)&__int128 v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"identifier");
        *((void *)&v172 + 1) = v145;
        sub_100077180();
        *(void *)(inited + 96) = &type metadata for String;
        v146 = object;
        *(void *)(inited + 72) = countAndFlagsBits;
        *(void *)(inited + 80) = v146;
        *(void *)&__int128 v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"url");
        *((void *)&v172 + 1) = v147;
        sub_100077180();
        uint64_t v148 = v165;
        *(void *)(inited + 168) = v165;
        sub_10001B468((void *)(inited + 144));
        sub_10007730C();
        uint64_t v149 = inited;
        uint64_t v96 = v148;
        uint64_t v150 = Dictionary.init(dictionaryLiteral:)( v149,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
        sub_1000C5160((uint64_t)@"PARFileDownloadCompletedNotification", 0LL, v150, v142);
        sub_100077040();
        sub_100010D00();

        unint64_t v94 = v161;
        ((void (*)(uint64_t, uint64_t))v161)(v134, v148);
        goto LABEL_53;
      }
    }

    else
    {
      sub_100019C1C((uint64_t)&v172, (uint64_t *)&unk_1001D32C0);
    }

    unint64_t v141 = 0LL;
    goto LABEL_52;
  }

  v161 = v94;
  uint64_t v115 = v156;
  uint64_t v116 = v160;
  sub_10007730C();
  sub_10005A5AC();
  uint64_t v117 = sub_100077174();
  uint64_t v119 = v96;
  os_log_type_t v120 = sub_100047278(v117, v118);
  if (os_log_type_enabled((os_log_t)&v151, v120))
  {
    uint64_t v121 = v115;
    uint64_t v122 = sub_100009B20(22LL);
    uint64_t v123 = sub_100009B20(64LL);
    *(void *)&__int128 v172 = v123;
    *(_DWORD *)uint64_t v122 = 136315394;
    sub_10005A5AC();
    uint64_t v124 = sub_100077430();
    uint64_t v127 = sub_1000307E0(v124, v125, v126);
    sub_100077338(v127);
    uint64_t v129 = v128 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v128 + 8, v122 + 4);
    uint64_t v130 = sub_100019FA4(v101);
    *(_WORD *)(v122 + 12) = 2080;
    uint64_t v131 = URL.absoluteString.getter(v130);
    v171 = (void *)sub_100077168(v131, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, v129, v122 + 14);
    sub_100009B3C();
    v133 = v161;
    ((void (*)(uint64_t, uint64_t))v161)(v121, v119);
    sub_100077100( (void *)&_mh_execute_header,  (os_log_s *)&v151,  v120,  "failed to find download for identifier %s url %s");
    swift_arrayDestroy(v123, 2LL);
    sub_100010C34(v123);
    sub_100010C34(v122);
    sub_100077040();

    sub_10007715C();
    ((void (*)(uint64_t, uint64_t))v133)(v160, v119);
  }

  else
  {
    sub_100077040();

    sub_10007715C();
    __int128 v139 = v161;
    ((void (*)(uint64_t, uint64_t))v161)(v115, v119);
    sub_100019F4C(v101);
    ((void (*)(uint64_t, uint64_t))v139)(v116, v119);
  }

uint64_t sub_100076408(uint64_t a1, id a2)
{
  id v3 = [a2 taskIdentifier];
  swift_beginAccess(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_spans, v5, 33LL, 0LL);
  sub_1000800E4((uint64_t)v3);
  swift_endAccess(v5);
  return swift_release();
}

uint64_t sub_100076484@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t result = sub_1000717CC(a1, a2);
  uint64_t v5 = result;
  if (result) {
    uint64_t result = swift_release();
  }
  *a3 = v5 != 0;
  return result;
}

uint64_t sub_1000765A4@<X0>(void *a1@<X8>)
{
  return sub_100070ED8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000765BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  sub_10001460C();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_10001450C();
  }

  else
  {
    v8.super.Class isa = 0LL;
  }

  [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];
  sub_1000773D8();

  return a3;
}

uint64_t sub_10007665C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100076684()
{
  return sub_100076408(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_10007668C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007669C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000766A4@<X0>(BOOL *a1@<X8>)
{
  return sub_100076484(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1000766C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

#error "1000766F0: call analysis failed (funcsize=7)"
uint64_t sub_1000766FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v4 = sub_10000941C(&qword_1001D5ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100076744()
{
  uint64_t v4 = *(void *)(sub_10005A18C() - 8);
  sub_100077194();
  sub_100077154();

  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_unknownObjectRelease();
  return sub_100077098(v0, v3 + 16, v1);
}

void sub_1000767AC()
{
}

uint64_t sub_1000767E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000767F0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10007681C()
{
}

id sub_100076840(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents parsec_componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "parsec_componentsWithURL:resolvingAgainstBaseURL:",  v1,  0LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 queryItems]);
  id v4 = [v3 mutableCopy];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "parsec_filterObjectsUsingBlock:", &stru_1001B4D80));
  if ([v5 count])
  {
    [v2 setQueryItems:v5];
  }

  else
  {
    [v2 setQueryItems:0];
    [v2 setQuery:0];
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 URL]);

  return v6;
}

uint64_t sub_100076914()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100076938(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100076940()
{
  uint64_t v4 = *(void *)(sub_10005A18C() - 8);
  sub_100077194();
  sub_100077154();
  swift_bridgeObjectRelease();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_bridgeObjectRelease();
  swift_release();
  return sub_100077098(v0, ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16, v1);
}

void sub_1000769C0()
{
}

uint64_t sub_100076A08(void *a1)
{
  id v1 = [a1 downloadResourcesList];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String);

  return v3;
}

void sub_100076A5C()
{
}

uint64_t sub_100076A7C(uint64_t a1)
{
  return sub_1000726F8(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_100076A84()
{
}

uint64_t sub_100076A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007257C(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

id sub_100076A94(void *a1, void *a2)
{
  id v4 = a1;
  id v5 = a2;
  id v6 = 0LL;
  if (a1 && a2)
  {
    NSString v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents parsec_componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "parsec_componentsWithURL:resolvingAgainstBaseURL:",  v4,  0LL));
    NSDictionary v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLComponents parsec_componentsWithURL:resolvingAgainstBaseURL:]( &OBJC_CLASS___NSURLComponents,  "parsec_componentsWithURL:resolvingAgainstBaseURL:",  v5,  0LL));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 path]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
    id v6 = 0LL;
    if ([v9 isEqual:v10])
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 query]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 query]);
      id v6 = [v11 isEqual:v12];
    }
  }

  return v6;
}

uint64_t sub_100076BAC( void *a1, int a2, uint64_t a3, unint64_t a4, char a5, void *a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10)
{
  return sub_100076BB8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100076BB8( void *a1, int a2, uint64_t a3, unint64_t a4, char a5, void *a6, uint64_t a7, unint64_t a8, unint64_t a9, uint64_t a10)
{
  uint64_t v14 = a10 + qword_1001EDEB8;
  *(void *)uint64_t v14 = 0LL;
  *(_BYTE *)(v14 + 8) = 1;
  uint64_t v15 = a10 + qword_1001EDEB0;
  uint64_t v16 = type metadata accessor for Client(0LL);
  uint64_t v42 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v15, a3, v16);
  if ((a5 & 1) != 0)
  {
    uint64_t v29 = sub_10000941C(&qword_1001D0C10);
    uint64_t inited = (__n128 *)swift_initStackObject(v29, v44);
    uint64_t v31 = sub_100077394(inited, (__n128)xmmword_10015D580);
    unint64_t v33 = v32;
    inited[3].n128_u64[1] = (unint64_t)&type metadata for String;
    unint64_t v34 = sub_100042FE8();
    inited[2].n128_u64[0] = v31;
    inited[2].n128_u64[1] = v33;
    inited[6].n128_u64[0] = (unint64_t)&type metadata for String;
    inited[6].n128_u64[1] = v34;
    inited[4].n128_u64[0] = v34;
    inited[4].n128_u64[1] = a8;
    inited[5].n128_u64[0] = a9;
    sub_100077070();
    *uint64_t v35 = a6;
    v35[1] = &off_1001B6958;
    swift_retain(a10);
    sub_10007737C(a6);
    sub_1000771D4();
    sub_100011030();
    sub_100010CA0();
    uint64_t v24 = "client=%{signpost.description:attribute,public}s, version=%{signpost.description:attribute,public}s";
    uint64_t v25 = a1;
    int v26 = a2;
    uint64_t v27 = 99LL;
    uint64_t v28 = (uint64_t)inited;
  }

  else
  {
    *(void *)uint64_t v14 = a4;
    *(_BYTE *)(v14 + 8) = 0;
    uint64_t v17 = sub_10000941C(&qword_1001D0C10);
    uint64_t v18 = (__n128 *)swift_initStackObject(v17, v43);
    uint64_t v19 = sub_100077394(v18, (__n128)xmmword_10015C800);
    unint64_t v21 = v20;
    v18[3].n128_u64[1] = (unint64_t)&type metadata for String;
    unint64_t v22 = sub_100042FE8();
    v18[2].n128_u64[0] = v19;
    v18[2].n128_u64[1] = v21;
    v18[6].n128_u64[0] = (unint64_t)&type metadata for String;
    v18[6].n128_u64[1] = v22;
    v18[4].n128_u64[0] = v22;
    v18[4].n128_u64[1] = a8;
    v18[5].n128_u64[0] = a9;
    v18[8].n128_u64[1] = (unint64_t)&type metadata for UInt64;
    v18[9].n128_u64[0] = (unint64_t)&protocol witness table for UInt64;
    v18[7].n128_u64[0] = a4;
    sub_100077070();
    void *v23 = a6;
    v23[1] = &off_1001B6958;
    swift_retain(a10);
    sub_10007737C(a6);
    sub_1000771D4();
    sub_100011030();
    sub_100010CA0();
    uint64_t v24 = "client=%{signpost.description:attribute,public}s, version=%{signpost.description:attribute,public}s, identifie"
          "r=%{signpost.description:attribute,public}llu";
    uint64_t v25 = a1;
    int v26 = a2;
    uint64_t v27 = 155LL;
    uint64_t v28 = (uint64_t)v18;
  }

  sub_100041E38(v25, v26, (uint64_t)v24, v27, 2, v28);
  uint64_t v37 = v36;

  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(a3, v16);
  return v37;
}

uint64_t sub_100076E04()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100076E34()
{
}

uint64_t sub_100076E40()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100076E6C(uint64_t a1)
{
  return sub_1000712C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t sub_100076E78()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100076E98()
{
  return sub_100072DF8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

BOOL sub_100076EB0(id a1, NSURLQueryItem *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](v3, "name"));
  if ([v4 isEqualToString:@"key"])
  {
    char v5 = 0;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](v3, "name"));
    if ([v6 isEqualToString:@"lsk"])
    {
      char v5 = 0;
    }

    else
    {
      NSString v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](v3, "name"));
      if ([v7 isEqualToString:@"internal"])
      {
        char v5 = 0;
      }

      else
      {
        NSDictionary v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](v3, "name"));
        if ([v8 isEqualToString:@"seed"])
        {
          char v5 = 0;
        }

        else
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLQueryItem name](v3, "name"));
          unsigned __int8 v10 = [v9 isEqualToString:@"eat"];

          char v5 = v10 ^ 1;
        }
      }
    }
  }

  return v5;
}

void sub_100077030()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t sub_100077040()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 464));
}

uint64_t sub_10007704C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_100077054()
{
  return swift_errorRelease(v0);
}

uint64_t sub_10007705C@<X0>(uint64_t a1@<X8>)
{
  return swift_unknownObjectRelease(*(void *)(a1 - 256));
}

void sub_100077064()
{
}

void sub_100077070()
{
  *(void *)(v0 + *(void *)(*(void *)v0 + 472LL)) = 0LL;
  *(void *)(v0 + *(void *)(*(void *)v0 + 480LL)) = 0LL;
}

uint64_t sub_100077098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

uint64_t sub_1000770AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

void sub_1000770B4(Swift::String a1)
{
}

__n128 *sub_1000770C0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E6F73616572LL;
  result[2].n128_u64[1] = 0xE600000000000000LL;
  *(void *)(v2 - 224) = 0LL;
  *(void *)(v2 - 216) = 0xE000000000000000LL;
  return result;
}

uint64_t sub_1000770E4(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, a1, a2, 0LL);
}

void sub_100077100(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

void sub_10007710C()
{
  v0._uint64_t countAndFlagsBits = 0x203A3E4C52553C20LL;
  v0._object = (void *)0xE800000000000000LL;
  String.append(_:)(v0);
}

uint64_t sub_100077124()
{
  return sub_1000765BC(v1, v2, 500LL, v0);
}

id sub_10007713C()
{
  return v0;
}

void sub_100077154()
{
}

void sub_10007715C()
{
}

uint64_t sub_100077168(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 136));
}

uint64_t sub_100077174()
{
  return Logger.logObject.getter();
}

uint64_t sub_100077180()
{
  return AnyHashable.init<A>(_:)(v0 - 136);
}

  ;
}

  ;
}

uint64_t sub_1000771CC()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000771D4()
{
  *(void *)(v2 + v0) = v1;
  return swift_unknownObjectRetain(v1);
}

  ;
}

uint64_t sub_1000771FC()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_10007720C()
{
  return sub_10000945C();
}

  ;
}

__n128 *sub_10007722C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 7107189LL;
  result[2].n128_u64[1] = 0xE300000000000000LL;
  return result;
}

BOOL sub_100077244(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100077254()
{
  return swift_errorRetain(v0);
}

uint64_t sub_10007725C()
{
  return swift_unknownObjectRelease(v0);
}

BOOL sub_100077264(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

void sub_10007726C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1LL << v1;
}

  ;
}

uint64_t sub_100077294(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1000772AC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 264, v1, v0);
}

  ;
}

uint64_t sub_1000772C8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 120, v0, v1);
}

uint64_t sub_1000772D8()
{
  return type metadata accessor for URLComponents(0LL);
}

uint64_t sub_1000772E0()
{
  return type metadata accessor for URLRequest(0LL);
}

uint64_t sub_1000772E8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

uint64_t sub_1000772F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 6LL);
}

uint64_t sub_100077300(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_10007730C()
{
  return (*(uint64_t (**)(void))(v0 - 384))();
}

  ;
}

void sub_10007732C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_100077338(uint64_t result)
{
  *(void *)(v1 - 144) = result;
  return result;
}

BOOL sub_100077344()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v0, v1);
}

uint64_t sub_100077350()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_10007735C()
{
  return swift_bridgeObjectRetain_n(v0, 2LL);
}

void sub_100077368()
{
}

void sub_100077370()
{
  v2._uint64_t countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

id sub_10007737C(void *a1)
{
  return objc_msgSend(a1, v1, v2);
}

unint64_t sub_100077388()
{
  return sub_10000EC64(v1, v0);
}

uint64_t sub_100077394(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return Client.name.getter();
}

uint64_t sub_1000773A0()
{
  return sub_1000152F4(v0);
}

uint64_t sub_1000773A8()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000773B0(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1000773B8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_1000773C4(uint64_t a1)
{
  return v2(a1, v1, v3);
}

void sub_1000773D0(uint64_t a1)
{
  unint64_t v1 = 0xE100000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
}

void sub_1000773D8()
{
}

uint64_t sub_1000773E0()
{
  return swift_endAccess(v0 - 248);
}

void sub_1000773EC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000773F4(uint64_t a1)
{
  return swift_allocObject(a1, *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 52));
}

uint64_t sub_100077400()
{
  return URL.init(string:)(v0, v1);
}

uint64_t sub_10007740C()
{
  return v0;
}

uint64_t sub_100077418(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_100077424()
{
  return v0;
}

uint64_t sub_100077430()
{
  return v0;
}

uint64_t sub_10007743C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

uint64_t sub_100077448()
{
  return v0;
}

uint64_t sub_100077454()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10007745C(uint64_t a1)
{
  uint64_t result = sub_10001111C(a1);
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_100077478(void *a1)
{
  id v2 = [a1 typeForPQC];
  if ((unint64_t)v2 >= 2)
  {
    if (v2 != (id)2)
    {
      if (qword_1001D0530 != -1) {
        swift_once(&qword_1001D0530, sub_1000344F0);
      }
      uint64_t v7 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v7, (uint64_t)qword_1001EDC60);
      id v8 = a1;
      uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
      os_log_type_t v10 = static os_log_type_t.fault.getter(v9);
      if (os_log_type_enabled(v9, v10))
      {
        *(_DWORD *)sub_100077854() = 67109120;
        int v11 = [v8 type];
        sub_100077838(v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, SHIDWORD(v20), v21);

        sub_100077888((void *)&_mh_execute_header, v9, v10, "ECC: type %d is not handled");
        sub_100077864();
      }

      else
      {
      }

      return 0LL;
    }

    return 1LL;
  }

  sub_1000777D8(a1);
  if (v3)
  {
    v4._uint64_t countAndFlagsBits = sub_100077874();
    Swift::Bool v5 = String.hasPrefix(_:)(v4);
    swift_bridgeObjectRelease();
    if (v5) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_1000775D8(void *a1)
{
  id v2 = [a1 result];
  if (!v2) {
    return 0LL;
  }
  id v3 = v2;
  id v4 = [v2 typeForPQC];
  if ((unint64_t)v4 >= 2)
  {
    if (v4 != (id)2)
    {
      if (qword_1001D0530 != -1) {
        swift_once(&qword_1001D0530, sub_1000344F0);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v12, (uint64_t)qword_1001EDC60);
      id v3 = v3;
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v3);
      os_log_type_t v14 = static os_log_type_t.fault.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        *(_DWORD *)sub_100077854() = 67109120;
        int v15 = [v3 type];
        sub_100077838(v15, v16, v17, v18, v19, v20, v21, v22, v24, v25, SHIDWORD(v25), v26);

        sub_100077888((void *)&_mh_execute_header, v13, v14, "ECC: type %d is not handled");
        sub_100077864();

        return 0LL;
      }

LABEL_16:
      return 0LL;
    }

    id v9 = [a1 titleText];
  }

  else
  {
    sub_1000777D8(v3);
    uint64_t v6 = v5;
    if (!v5)
    {

      return v6;
    }

    v7._uint64_t countAndFlagsBits = sub_100077874();
    Swift::Bool v8 = String.hasPrefix(_:)(v7);
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_16;
    }
    id v9 = [v3 completedQuery];
  }

  id v10 = v9;
  int v11 = v10;
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return v6;
}

uint64_t type metadata accessor for SafariEngagedSuggestionController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd33SafariEngagedSuggestionController);
}

uint64_t sub_1000777D8(void *a1)
{
  id v1 = [a1 jsonSectionBundleIdentifier];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_100077838( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12)
{
  a11 = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(&a11, &a12, v12);
}

uint64_t sub_100077854()
{
  return swift_slowAlloc(8LL, -1LL);
}

uint64_t sub_100077864()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

unint64_t sub_100077874()
{
  return 0xD000000000000010LL;
}

void sub_100077888(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

char *sub_100077894(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v82 = *(void *)(v3 - 8);
  uint64_t v83 = (uint64_t (*)(void, void))v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v6);
  Swift::Bool v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v78 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v75 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v75 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v75 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  unint64_t v85 = (char *)&v75 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v75 - v24;
  uint64_t v84 = v1;
  NSFileManager.parsecdCustomFBDirectoryURL.getter(v23);
  if (sub_100010708((uint64_t)v8, 1LL, v9) != 1)
  {
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v77 = v25;
    v30(v25, v8, v9);
    if (a1 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (a1 <= 0x7FFFFFFF)
    {
      uint64_t v81 = v10;
      switch((int)a1)
      {
        case 0:
        case 19:
          (*(void (**)(char *, uint64_t))(v10 + 8))(v77, v9);
          goto LABEL_3;
        case 1:
          uint64_t v31 = @"SafariAutoFill";
          goto LABEL_27;
        case 2:
          uint64_t v31 = @"Crowdsourcing";
          goto LABEL_27;
        case 3:
          uint64_t v31 = @"SpotlightResultFeatures";
          goto LABEL_27;
        case 4:
          uint64_t v31 = @"SafariAutoPlay";
          goto LABEL_27;
        case 5:
          uint64_t v31 = @"Trystero";
          goto LABEL_27;
        case 6:
          uint64_t v31 = @"EngagedCompletionFeatures";
          goto LABEL_27;
        case 7:
          uint64_t v31 = @"ProactiveEventTracker";
          goto LABEL_27;
        case 8:
          uint64_t v31 = @"PhiDES";
          goto LABEL_27;
        case 9:
          uint64_t v31 = @"DuetExpert";
          goto LABEL_27;
        case 10:
          uint64_t v31 = @"UserReport";
          goto LABEL_27;
        case 11:
          uint64_t v31 = @"Usage";
          goto LABEL_27;
        case 12:
          uint64_t v31 = @"FeedbackV2";
          goto LABEL_27;
        case 13:
          uint64_t v31 = @"FeedbackV2PB";
          goto LABEL_27;
        case 14:
          uint64_t v31 = @"ProactiveEventTrackerAggregated";
          goto LABEL_27;
        case 15:
          uint64_t v31 = @"Handwashing";
          goto LABEL_27;
        case 16:
          uint64_t v31 = @"Experiments";
          goto LABEL_27;
        case 17:
          uint64_t v31 = @"FeatureQuality";
          goto LABEL_27;
        case 18:
          uint64_t v31 = @"OnDeviceAnalytics";
LABEL_27:
          unint64_t v32 = v31;
          break;
        default:
          uint64_t v31 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  a1));
          break;
      }

      unint64_t v33 = v31;
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      Swift::Bool v8 = v35;

      uint64_t v37 = UUID.init()(v36);
      uint64_t v38 = UUID.uuidString.getter(v37);
      a1 = v39;
      (*(void (**)(char *, uint64_t (*)(void, void)))(v82 + 8))(v5, v83);
      uint64_t v76 = v34;
      uint64_t v40 = v34;
      uint64_t v25 = v77;
      URL.appendingPathComponent(_:isDirectory:)(v40, v8, 1LL);
      uint64_t v82 = v38;
      URL.appendingPathComponent(_:)(v38, a1);
      uint64_t v41 = *(uint64_t (**)(void, void))(v81 + 8);
      uint64_t v42 = sub_100078258((uint64_t)v17);
      URL.standardizedFileURL.getter(v42);
      uint64_t v83 = v41;
      uint64_t v43 = v41(v20, v9);
      URL.path.getter(v43);
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_10000941C(qword_1001D41F8);
      uint64_t inited = swift_initStackObject(v45, v87);
      *(_OWORD *)(inited + 16) = xmmword_10015C7F0;
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 32) = NSFilePosixPermissions;
      *(void *)(inited + 40) = 384LL;
      type metadata accessor for FileAttributeKey(0LL);
      uint64_t v48 = v47;
      unint64_t v49 = sub_10005F76C();
      uint64_t v50 = NSFilePosixPermissions;
      uint64_t v51 = Dictionary.init(dictionaryLiteral:)(inited, v48, (char *)&type metadata for Any + 8, v49);
      LOBYTE(inited) = sub_100078160((uint64_t)v44, 0LL, 0xC000000000000000LL, v51, v84);

      if ((inited & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_1001D0518 != -1) {
          swift_once(&qword_1001D0518, sub_100034490);
        }
        uint64_t v58 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v58, (uint64_t)qword_1001EDC18);
        uint64_t v59 = sub_100078270(v78, *(uint64_t (**)(uint64_t, void, uint64_t))(v81 + 16));
        uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v62 = static os_log_type_t.error.getter(v60, v61);
        if (os_log_type_enabled(v60, v62))
        {
          uint64_t v63 = (uint8_t *)sub_100009B20(12LL);
          uint64_t v64 = sub_100009B20(32LL);
          uint64_t v88 = v64;
          *(_DWORD *)uint64_t v63 = 136315138;
          Swift::Bool v8 = (char *)(v63 + 12);
          uint64_t v65 = URL.path.getter(v64);
          uint64_t v86 = sub_1000307E0(v65, v66, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v63 + 4);
          swift_bridgeObjectRelease();
          sub_100078280();
          _os_log_impl((void *)&_mh_execute_header, v60, v62, "could not create custom feedback file at %s", v63, 0xCu);
          swift_arrayDestroy(v64, 1LL);
          uint64_t v67 = v64;
          uint64_t v25 = v77;
          sub_100010C34(v67);
          uint64_t v68 = (uint64_t)v63;
          a1 = (uint64_t)v85;
          sub_100010C34(v68);
        }

        else
        {
          sub_100078280();
        }

        uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
        uint64_t v17 = v72;
        id v73 = objc_allocWithZone(&OBJC_CLASS___NSError);
        sub_100078260(v71, (uint64_t)v17);
        sub_100078290();
        ((void (*)(uint64_t, uint64_t))v8)(a1, v9);
        ((void (*)(char *, uint64_t))v8)(v25, v9);
        return v17;
      }

      if (qword_1001D04F8 == -1)
      {
LABEL_30:
        uint64_t v52 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v52, (uint64_t)qword_1001EDBB8);
        swift_bridgeObjectRetain(v8);
        uint64_t v53 = swift_bridgeObjectRetain(a1);
        uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
        os_log_type_t v55 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = sub_100009B20(22LL);
          uint64_t v57 = sub_100009B20(64LL);
          uint64_t v88 = v57;
          *(_DWORD *)uint64_t v56 = 136315394;
          swift_bridgeObjectRetain(v8);
          uint64_t v86 = sub_1000307E0(v76, (unint64_t)v8, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v56 + 4);
          swift_bridgeObjectRelease_n(v8, 3LL);
          *(_WORD *)(v56 + 12) = 2080;
          swift_bridgeObjectRetain(a1);
          uint64_t v86 = sub_1000307E0(v82, a1, &v88);
          uint64_t v25 = v77;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v56 + 14);
          swift_bridgeObjectRelease_n(a1, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Created custom feedback file for type %s with name %s",  (uint8_t *)v56,  0x16u);
          swift_arrayDestroy(v57, 2LL);
          sub_100010C34(v57);
          sub_100010C34(v56);
        }

        else
        {

          swift_bridgeObjectRelease_n(a1, 2LL);
          swift_bridgeObjectRelease_n(v8, 2LL);
        }

        sub_10007821C();
        uint64_t v17 = v79;
        sub_100078270((uint64_t)v79, *(uint64_t (**)(uint64_t, void, uint64_t))(v81 + 16));
        uint64_t v69 = v80;
        uint64_t v70 = (char *)sub_1000CACF4((uint64_t)v17);
        if (!v69) {
          uint64_t v17 = v70;
        }
        sub_100078258(a1);
        sub_100078258((uint64_t)v25);
        return v17;
      }

LABEL_45:
      swift_once(&qword_1001D04F8, sub_1000343F4);
      goto LABEL_30;
    }

    __break(1u);
    goto LABEL_45;
  }

  sub_100010AE8((uint64_t)v8);
LABEL_3:
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
  uint64_t v28 = v27;
  id v29 = objc_allocWithZone(&OBJC_CLASS___NSError);
  sub_100078260(v26, v28);
  sub_100078290();
  return v17;
}

      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

id sub_100078160(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100010A30(a2, a3);
  type metadata accessor for FileAttributeKey(0LL);
  sub_10005F76C();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [a5 createFileAtPath:a1 contents:isa attributes:v10];

  return v11;
}

unint64_t sub_10007821C()
{
  unint64_t result = qword_1001D4820;
  if (!qword_1001D4820)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSFileHandle);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D4820);
  }

  return result;
}

uint64_t sub_100078258(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_100078260(uint64_t a1, uint64_t a2)
{
  return sub_1000765BC(a1, a2, 500LL, 0LL);
}

uint64_t sub_100078270@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void, uint64_t)@<X8>)
{
  return a2(a1, *(void *)(v3 - 176), v2);
}

uint64_t sub_100078280()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 192))(v1, v0);
}

uint64_t sub_100078290()
{
  return swift_willThrow();
}

uint64_t sub_10007829C()
{
  uint64_t v1 = sub_10004A50C();
  uint64_t v3 = v2;
  swift_release();
  sub_100078460(0, v1, v3);
  return v1;
}

uint64_t sub_1000782FC()
{
  uint64_t v0 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.userInitiated.getter(v1);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  uint64_t v8 = sub_10003B7FC( (unint64_t *)&qword_1001D0BB0,  v7,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)(&v15, v4, v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v9);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v12 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002BLL,  0x8000000100170540LL,  v3,  v6,  v11,  0LL);
  qword_1001EDDA0 = result;
  return result;
}

uint64_t sub_100078460(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_1001D05D8 != -1) {
    swift_once(&qword_1001D05D8, sub_1000782FC);
  }
  v25[2] = qword_1001EDDA0;
  uint64_t v8 = swift_allocObject(&unk_1001B4DE8, 24LL, 7LL);
  swift_weakInit(v8 + 16, v4);
  uint64_t v9 = swift_allocObject(&unk_1001B4E10, 48LL, 7LL);
  *(void *)(v9 + 16) = v8;
  *(_BYTE *)(v9 + 24) = a1 & 1;
  *(void *)(v9 + 32) = a2;
  *(void *)(v9 + 40) = a3;
  aBlock[4] = sub_100079734;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B4E28;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  v25[1] = v25;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a3);
  uint64_t v15 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v25[0] = v25;
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = &_swiftEmptyArrayStorage;
  uint64_t v21 = sub_10003B7FC( (unint64_t *)&qword_1001D2B80,  v20,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v23 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v16, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v19, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_release();
  return swift_release();
}

void sub_1000786CC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Client(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v116, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v12 = (void *)Strong;
    sub_1000489B0();
    uint64_t v14 = v13;
    static Client.parsecd.getter();
    uint64_t v15 = type metadata accessor for ResourceAccessSpan(0LL);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    uint64_t v16 = sub_100041728(v14, 39, (uint64_t)v10, 0LL, 1);
    id v17 = [(id)objc_opt_self(AMSTreatmentStore) defaultTreatmentStore];
    uint64_t v18 = sub_10000941C(&qword_1001D24A8);
    uint64_t inited = swift_initStackObject(v18, v115);
    *(_OWORD *)(inited + 16) = xmmword_10015C7F0;
    uint64_t v20 = v12[3];
    *(void *)(inited + 32) = v12[2];
    *(void *)(inited + 40) = v20;
    swift_bridgeObjectRetain(v20);
    sub_1000B1430(inited);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v110 = v17;
    id v22 = [v17 areasForNamespaces:isa];

    id v113 = 0LL;
    id v23 = [v22 resultWithError:&v113];

    id v24 = v113;
    if (v23)
    {
      uint64_t v25 = v12[3];
      *(void *)&v112[0] = v12[2];
      *((void *)&v112[0] + 1) = v25;
      swift_bridgeObjectRetain_n(v25, 2LL);
      id v26 = v24;
      id v27 = objc_msgSend(v23, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v112));
      swift_unknownObjectRelease();
      if (v27)
      {
        _bridgeAnyObjectToAny(_:)(v27);
        swift_unknownObjectRelease();
      }

      else
      {
        memset(v112, 0, sizeof(v112));
      }

      sub_1000506C4((uint64_t)v112, (uint64_t)&v113);
      if (!v114[2])
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        sub_10000BD68((uint64_t)&v113);
        return;
      }

      uint64_t v41 = sub_10000941C(&qword_1001D3D48);
      if ((swift_dynamicCast(&v111, &v113, (char *)&type metadata for Any + 8, v41, 6LL) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        return;
      }

      id v108 = v23;
      swift_bridgeObjectRelease();
      Class v42 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v43 = v110;
      id v44 = [v110 treatmentsPayloadForAreas:v42];

      id v113 = 0LL;
      id v45 = [v44 resultWithError:&v113];

      id v46 = v113;
      if (v45)
      {
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        unint64_t v49 = v48;
        id v50 = v46;

        uint64_t v51 = HIBYTE(v49) & 0xF;
        uint64_t v52 = v47;
        if ((v49 & 0x2000000000000000LL) == 0) {
          uint64_t v51 = v47 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v53 = (void *)v16;
        if (!v51)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          return;
        }

        id v54 = v108;
        if ((a2 & 1) != 0)
        {
          *(_BYTE *)(v16 + qword_1001D2E88) = 54;
          sub_100042D10();
          if (qword_1001D0540 != -1) {
            swift_once(&qword_1001D0540, sub_100034544);
          }
          uint64_t v55 = type metadata accessor for Logger(0LL);
          sub_1000093D0(v55, (uint64_t)qword_1001EDC90);
          swift_retain_n(v12, 2LL);
          uint64_t v56 = swift_bridgeObjectRetain_n(v49, 2LL);
          uint64_t v57 = (void *)Logger.logObject.getter(v56);
          os_log_type_t v58 = static os_log_type_t.debug.getter();
          int v59 = v58;
          if (!os_log_type_enabled((os_log_t)v57, v58))
          {

            swift_bridgeObjectRelease_n(v49, 2LL);
            swift_release_n(v12, 2LL);
            id v87 = v110;
            uint64_t v64 = v52;
LABEL_47:
            swift_retain(v12[6]);
            sub_10004B4F0(v64, v49);
            swift_release();
            swift_release();
            swift_release();

            return;
          }

          uint64_t v60 = swift_slowAlloc(22LL, -1LL);
          id v113 = (id)swift_slowAlloc(64LL, -1LL);
          uint64_t v109 = v53;
          id v61 = v113;
          *(_DWORD *)uint64_t v60 = 136315394;
          LODWORD(v107) = v59;
          uint64_t v63 = v12[2];
          unint64_t v62 = v12[3];
          swift_bridgeObjectRetain(v62);
          *(void *)&v112[0] = sub_1000307E0(v63, v62, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v60 + 4);
          swift_release_n(v12, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v60 + 12) = 2080;
          swift_bridgeObjectRetain(v49);
          *(void *)&v112[0] = sub_1000307E0(v52, v49, (uint64_t *)&v113);
          uint64_t v64 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v60 + 14);
          swift_bridgeObjectRelease_n(v49, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v57,  (os_log_type_t)v107,  "AMS Baseline Treatments for namespace %s initialized to '%s'",  (uint8_t *)v60,  0x16u);
          swift_arrayDestroy(v61, 2LL);
          swift_slowDealloc(v61, -1LL, -1LL);
          swift_slowDealloc(v60, -1LL, -1LL);

LABEL_46:
          id v87 = v110;
          goto LABEL_47;
        }

        uint64_t v64 = v52;
        if (!a4
          || (v52 == a3 ? (BOOL v66 = v49 == a4) : (BOOL v66 = 0),
              !v66 && (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v49, a3, a4, 0LL) & 1) == 0))
        {
          *(_BYTE *)(v16 + qword_1001D2E88) = 55;
          sub_100042D10();
          if (qword_1001D0540 != -1) {
            swift_once(&qword_1001D0540, sub_100034544);
          }
          uint64_t v73 = type metadata accessor for Logger(0LL);
          sub_1000093D0(v73, (uint64_t)qword_1001EDC90);
          swift_retain_n(v12, 4LL);
          uint64_t v74 = swift_bridgeObjectRetain_n(v49, 2LL);
          uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
          os_log_type_t v76 = static os_log_type_t.debug.getter();
          int v77 = v76;
          if (os_log_type_enabled(v75, v76))
          {
            uint64_t v78 = swift_slowAlloc(32LL, -1LL);
            uint64_t v109 = (void *)swift_slowAlloc(96LL, -1LL);
            *(void *)&v112[0] = v109;
            *(_DWORD *)uint64_t v78 = 136315650;
            LODWORD(v107) = v77;
            uint64_t v79 = v12[2];
            unint64_t v80 = v12[3];
            swift_bridgeObjectRetain(v80);
            id v113 = (id)sub_1000307E0(v79, v80, (uint64_t *)v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v78 + 4);
            swift_release_n(v12, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v78 + 12) = 2080;
            uint64_t v106 = v78 + 14;
            swift_retain(v12[6]);
            uint64_t v81 = (void *)sub_10004A50C();
            uint64_t v83 = v82;
            swift_release();
            id v113 = v81;
            v114[0] = v83;
            uint64_t v64 = v52;
            sub_10000941C(&qword_1001D4480);
            uint64_t v84 = String.init<A>(describing:)(&v113);
            id v113 = (id)sub_1000307E0(v84, v85, (uint64_t *)v112);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v106);
            swift_release_n(v12, 2LL);
            swift_bridgeObjectRelease();
            *(_WORD *)(v78 + 22) = 2080;
            swift_bridgeObjectRetain(v49);
            id v113 = (id)sub_1000307E0(v52, v49, (uint64_t *)v112);
            id v54 = v108;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v78 + 24);
            swift_bridgeObjectRelease_n(v49, 3LL);
            _os_log_impl( (void *)&_mh_execute_header,  v75,  (os_log_type_t)v107,  "Stale previously vended AMS Baseline Treatments for namespace %s %s updated to '%s'",  (uint8_t *)v78,  0x20u);
            uint64_t v86 = v109;
            swift_arrayDestroy(v109, 3LL);
            swift_slowDealloc(v86, -1LL, -1LL);
            swift_slowDealloc(v78, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v49, 2LL);
            swift_release_n(v12, 4LL);
          }

          goto LABEL_46;
        }

        uint64_t v67 = v12[6];
        swift_bridgeObjectRetain(v49);
        swift_retain(v67);
        uint64_t v68 = sub_10004A50C();
        uint64_t v70 = v69;
        swift_release();
        if (v70)
        {
          if (v52 == v68 && v70 == v49)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_55:
            if (qword_1001D0540 != -1) {
              swift_once(&qword_1001D0540, sub_100034544);
            }
            uint64_t v96 = type metadata accessor for Logger(0LL);
            sub_1000093D0(v96, (uint64_t)qword_1001EDC90);
            uint64_t v97 = swift_retain(v12);
            uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
            os_log_type_t v99 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v98, v99))
            {
              uint64_t v100 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v109 = (void *)swift_slowAlloc(32LL, -1LL);
              id v113 = v109;
              *(_DWORD *)uint64_t v100 = 136315138;
              uint64_t v53 = (void *)v16;
              os_log_type_t v107 = v100 + 4;
              uint64_t v102 = v12[2];
              unint64_t v101 = v12[3];
              swift_bridgeObjectRetain(v101);
              uint64_t v103 = v102;
              uint64_t v64 = v52;
              *(void *)&v112[0] = sub_1000307E0(v103, v101, (uint64_t *)&v113);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v107);
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "AMS BaselineTreatments for namespace %s unchanged",  v100,  0xCu);
              uint64_t v104 = v109;
              swift_arrayDestroy(v109, 1LL);
              swift_slowDealloc(v104, -1LL, -1LL);
              swift_slowDealloc(v100, -1LL, -1LL);
            }

            else
            {

              swift_release();
            }

            id v87 = v110;
            id v54 = v108;
            *((_BYTE *)v53 + qword_1001D2E88) = 53;
            sub_100042D10();
            goto LABEL_47;
          }

          char v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v49, v68, v70, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v72 & 1) != 0) {
            goto LABEL_55;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
        }

        *(_BYTE *)(v16 + qword_1001D2E88) = 54;
        sub_100042D10();
        if (qword_1001D0540 != -1) {
          swift_once(&qword_1001D0540, sub_100034544);
        }
        uint64_t v88 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v88, (uint64_t)qword_1001EDC90);
        swift_retain_n(v12, 2LL);
        uint64_t v89 = swift_bridgeObjectRetain_n(v49, 2LL);
        uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = swift_slowAlloc(22LL, -1LL);
          uint64_t v109 = (void *)swift_slowAlloc(64LL, -1LL);
          id v113 = v109;
          *(_DWORD *)uint64_t v92 = 136315394;
          uint64_t v94 = v12[2];
          unint64_t v93 = v12[3];
          swift_bridgeObjectRetain(v93);
          *(void *)&v112[0] = sub_1000307E0(v94, v93, (uint64_t *)&v113);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v92 + 4);
          swift_release_n(v12, 2LL);
          swift_bridgeObjectRelease();
          *(_WORD *)(v92 + 12) = 2080;
          swift_bridgeObjectRetain(v49);
          *(void *)&v112[0] = sub_1000307E0(v52, v49, (uint64_t *)&v113);
          uint64_t v64 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v92 + 14);
          swift_bridgeObjectRelease_n(v49, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "AMS Baseline Treatments for namespace %s updated to '%s'",  (uint8_t *)v92,  0x16u);
          uint64_t v95 = v109;
          swift_arrayDestroy(v109, 2LL);
          swift_slowDealloc(v95, -1LL, -1LL);
          swift_slowDealloc(v92, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v49, 2LL);
          swift_release_n(v12, 2LL);
        }

        id v87 = v110;
        id v54 = v108;
        goto LABEL_47;
      }

      id v65 = v113;
      uint64_t v29 = _convertNSErrorToError(_:)(v46);

      swift_willThrow();
      id v31 = v108;
      unint64_t v30 = (_BYTE *)v16;
    }

    else
    {
      id v28 = v113;
      uint64_t v29 = _convertNSErrorToError(_:)(v24);

      swift_willThrow();
      unint64_t v30 = (_BYTE *)v16;
      id v31 = v110;
    }

    v30[qword_1001D2E88] = 52;
    sub_100042D10();
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v32, (uint64_t)qword_1001EDC90);
    swift_errorRetain(v29);
    uint64_t v33 = swift_errorRetain(v29);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      uint64_t v109 = v30;
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = (void *)swift_slowAlloc(32LL, -1LL);
      id v113 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)&v112[0] = v29;
      swift_errorRetain(v29);
      sub_10000941C(&qword_1001D2B70);
      uint64_t v39 = String.init<A>(describing:)(v112);
      *(void *)&v112[0] = sub_1000307E0(v39, v40, (uint64_t *)&v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, (char *)v112 + 8, v37 + 4);
      swift_bridgeObjectRelease();
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Couldn't fetch Baseline Treatments: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_release();

      swift_release();
      swift_errorRelease(v29);
    }

    else
    {
      swift_release();
      swift_release();
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      swift_errorRelease(v29);
    }
  }

void *sub_100079678()
{
  return v0;
}

uint64_t sub_1000796A4()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for AMSBaselineTreatmentProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd28AMSBaselineTreatmentProvider);
}

uint64_t sub_1000796E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100079708()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100079734()
{
}

uint64_t sub_100079744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079754(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_100079760(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  sub_10007B010(v1 + 1LL);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079790(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  uint64_t v2 = sub_10002B1A8(v1);
  sub_10007B058(v2, v3, v4);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_1000797C4(char a1)
{
}

void sub_1000797D0(uint64_t a1)
{
}

void sub_1000797F8(uint64_t a1)
{
}

void sub_100079820(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  sub_10007AFFC(v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079854(uint64_t a1)
{
  char v1 = a1;
  sub_10003DDD8(a1);
  sub_10007AFFC(v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079888(uint64_t a1)
{
  int v1 = sub_10003DDD8(a1);
  sub_10007B13C(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_1000798B0(uint64_t a1)
{
  unsigned __int8 v1 = a1;
  sub_10003DDD8(a1);
  sub_10007B010(v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_1000798DC(uint64_t a1)
{
  unsigned __int8 v1 = sub_10003DDD8(a1);
  sub_10007B11C((uint64_t)v1);
  sub_10007AFDC();
  sub_10003DDCC();
}

uint64_t sub_100079904(uint64_t a1, char a2)
{
  BOOL v2 = (a2 & 1) == 0;
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v3 = 0x656475746974616CLL;
  }
  if (v2) {
    uint64_t v4 = 0xE800000000000000LL;
  }
  else {
    uint64_t v4 = 0xE900000000000065LL;
  }
  sub_10007B078(a1, v3);
  return sub_10007B070(v4);
}

void sub_100079958(uint64_t a1, char a2)
{
}

void sub_100079980()
{
}

void sub_10007999C(uint64_t a1, char a2)
{
}

void sub_1000799C4(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000799E8(int a1, Swift::UInt8 a2)
{
}

void sub_100079A08(uint64_t a1, unsigned __int8 a2)
{
}

void sub_100079A28(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_100079A60(uint64_t a1)
{
  return sub_10007B070(0xE600000000000000LL);
}

void sub_100079AB4(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_100079AD4(uint64_t a1, char a2)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

void sub_100079B00(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_10007B008(a1, a2);
  uint64_t v3 = sub_10002B1A8(v2);
  sub_10007B058(v3, v4, v5);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079B38(uint64_t a1, uint64_t a2)
{
  char v2 = sub_10007B008(a1, a2);
  sub_10007B11C((uint64_t)v2);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079B60(uint64_t a1, uint64_t a2)
{
}

void sub_100079B88(uint64_t a1, uint64_t a2)
{
  int v2 = sub_10007B008(a1, a2);
  sub_10007B13C(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079BB0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  sub_10007B008(a1, a2);
  sub_10007B010(v2 + 1LL);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079BE0(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_10007B008(a1, a2);
  sub_10007AFFC(v2);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079C14(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_10007B008(a1, a2);
  sub_10007AFFC(v2);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079C48(uint64_t a1, uint64_t a2)
{
}

void sub_100079C70(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  sub_10007B008(a1, a2);
  sub_10007B010(v2);
  sub_10007AFDC();
  sub_10003DDCC();
}

void sub_100079C9C(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  sub_10007B008(a1, a2);
  if ((v2 & 1) != 0) {
    uint64_t v3 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v3 = 0x656475746974616CLL;
  }
  sub_10007B078((uint64_t)v4, v3);
  sub_1000325E4();
  sub_10007AFDC();
  sub_10003DDCC();
}

uint64_t sub_100079D04(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_100079D30 + 4 * byte_100160564[a1]))( "creating",  8LL);
}

const char *sub_100079D30()
{
  return "updating";
}

unint64_t sub_100079D74(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

void sub_100079D84()
{
}

void sub_100079D9C(uint64_t a1)
{
}

void sub_100079DA4(uint64_t a1)
{
}

unint64_t sub_100079DBC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100079D74(*a1);
  *a2 = result;
  return result;
}

void sub_100079DE4()
{
}

void sub_100079E0C()
{
}

uint64_t sub_100079E34()
{
  return sub_100079D04(*v0);
}

uint64_t sub_100079E50(uint64_t a1, uint64_t a2)
{
  int v7 = (void *)(v2 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData);
  v7[1] = 0LL;
  v7[2] = 0LL;
  *int v7 = 0LL;
  uint64_t v8 = OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_locker;
  uint64_t v9 = type metadata accessor for Locker();
  uint64_t v10 = swift_allocObject(v9, 24LL, 7LL);
  char v11 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v11;
  *char v11 = 0;
  *(void *)(v2 + v8) = v10;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_fileManager) = a2;
  return v2;
}

uint64_t sub_100079F1C()
{
  uint64_t v1 = v0;
  uint64_t v72 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  sub_100014428();
  uint64_t v70 = v2;
  uint64_t v76 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v73 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  sub_100014428();
  uint64_t v75 = v3;
  uint64_t v4 = type metadata accessor for PegasusPersistenceContext(0LL);
  __chkstk_darwin(v4);
  int v6 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v69 - v12;
  uint64_t v14 = *(void *)(v0 + 16);
  uint64_t v15 = sub_10000941C(&qword_1001D4C10);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  swift_retain(v14);
  sub_10000E21C();
  uint64_t v77 = v16;
  uint64_t v74 = v1;
  uint64_t v81 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_fileManager);
  id v17 = v81;
  sub_10007B148(v16, (unint64_t *)&qword_1001D1AE8, &OBJC_CLASS___NSFileManager_ptr);
  static PegasusConfigContainerURLProvider.containerURL<A>(using:)(&v81, v18);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  id v19 = v17;
  PegasusPersistenceContext.init(location:fileManager:)(v11, v17);
  static PegasusKeyValueStoreFactory.deviceInfoStore(context:name:requiresAuthentication:)(v79, v6, 0LL, 0LL, 0LL);
  sub_10007B080();
  sub_10007B0D8();
  sub_100019BC4(v79, (uint64_t)&v81);
  sub_10007B018();
  uint64_t v21 = dispatch thunk of PegasusKeyValueStore.integer(for:)(3158628LL, 0xE300000000000000LL, v13, v11);
  LOBYTE(v13) = v22;
  LODWORD(v7) = v22 & 1;
  id v23 = v82;
  uint64_t v24 = v83;
  sub_100019AFC(&v81, (uint64_t)v82);
  uint64_t v25 = dispatch thunk of PegasusKeyValueStore.string(for:)(0x5555656369766564LL, 0xEA00000000004449LL, v23, v24);
  uint64_t v27 = v26;
  swift_bridgeObjectRetain(v26);
  LODWORD(v72) = v7;
  uint64_t v28 = sub_100082380(v21, v7, v25, v27);
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  if ((v13 & 1) != 0
    || v28 != v21
    || !v27
    || (v29 == v25 ? (v34 = v27 == v30) : (v34 = 0), !v34 && (uint64_t v28 = sub_10007B130(v29, v30, v25), (v28 & 1) == 0)))
  {
    uint64_t v70 = v25;
    uint64_t v71 = v21;
    sub_10007B148(v28, (unint64_t *)&qword_1001D1080, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v43 = v42;
    sub_10007B038();
    v69[0] = sub_1000106CC();
    sub_10007AFE4( (uint64_t)&v80,  (uint64_t)v78,  v44,  v45,  v46,  v47,  (uint64_t)&type metadata for String,  v48,  (uint64_t)&type metadata for String,  v69[0],  v69[0],  v69[0]);
    sub_10007B0C8();
    sub_10007B0E8((uint64_t)&qword_1001D4A90);
    uint64_t v49 = sub_10007B090();
    *(void *)(v50 - 256) = v43;
    id v54 = (id)OS_os_log.init(subsystem:category:)(v49, v51, v52, v53);
    uint64_t v55 = v75;
    uint64_t v56 = OSSignpostID.init(log:)(v54);
    static os_signpost_type_t.event.getter(v56);
    sub_10007B0B8();
    sub_10007B128( v57,  (uint64_t)v54,  (uint64_t)"failedToRead",  12LL,  2LL,  v55,  (uint64_t)"enableTelemetry=YES",  v58,  v67,  v68);

    uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 8))(v55, v76);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v62 = static os_log_type_t.error.getter(v60, v61);
    uint64_t v63 = v62;
    if (os_log_type_enabled(v60, v62))
    {
      id v23 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)id v23 = 0;
      sub_10001447C((void *)&_mh_execute_header, v60, (os_log_type_t)v63, "Failed to read data from store", v23);
      sub_100010C34((uint64_t)v23);
    }

    if ((_DWORD)v72 || v31 != v71)
    {
      sub_10007B018();
      dispatch thunk of PegasusKeyValueStore.setInteger(_:for:)(v31, 3158628LL, 0xE300000000000000LL, v63, v23);
    }

    if (v27)
    {
      if (v32 == v70 && v27 == v33) {
        goto LABEL_24;
      }
      char v65 = sub_10007B130(v32, v33, v70);
      sub_10005A1BC();
      if ((v65 & 1) != 0)
      {
LABEL_25:
        uint64_t v66 = sub_10000941C(&qword_1001D0C10);
        uint64_t v41 = sub_10005A72C(v66);
        *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
        *(void *)(v41 + 56) = &type metadata for Int;
        *(void *)(v41 + 64) = &protocol witness table for Int;
        *(void *)(v41 + 32) = v31;
        goto LABEL_26;
      }
    }

    sub_10007B018();
    swift_bridgeObjectRetain(v33);
    dispatch thunk of PegasusKeyValueStore.setString(_:for:)( v32,  v33,  0x5555656369766564LL,  0xEA00000000004449LL,  v63,  v23);
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }

  uint64_t v35 = sub_10005A1BC();
  os_log_type_t v36 = v74 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_logger;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (sub_100047154(v38))
  {
    uint64_t v39 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v39 = 0;
    sub_10001447C((void *)&_mh_execute_header, v37, v36, "Persistent data read successfully", v39);
    sub_100010C34((uint64_t)v39);
  }

  uint64_t v40 = sub_10000941C(&qword_1001D0C10);
  uint64_t v41 = sub_10005A72C(v40);
  *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  *(void *)(v41 + 56) = &type metadata for Int;
  *(void *)(v41 + 64) = &protocol witness table for Int;
  *(void *)(v41 + 32) = v21;
LABEL_26:
  sub_1000D6888("enableTelemetry=YES d20=%{signpost.telemetry:number1,public}lu", 62LL, 2LL, v41);
  swift_release();
  sub_1000325E4();
  sub_1000108B8(&v81);
  return v31;
}

uint64_t sub_10007A8B4(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D0C10);
  uint64_t v3 = swift_allocObject(v2, 72LL, 7LL);
  *(_OWORD *)(v3 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v8 = a1;
  swift_errorRetain(a1);
  sub_10000941C(&qword_1001D2B70);
  uint64_t v4 = String.init<A>(describing:)(&v8);
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_100042FE8();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  sub_1000D6888("ActivityResult=%{signpost.description:attribute}s", 49LL, 2LL, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10007A96C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_locker);
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 16);
  swift_retain(v0);
  swift_retain(v1);
  os_unfair_lock_lock(v2);
  sub_10007A9E8(v0, &v4);
  os_unfair_lock_unlock(v2);
  swift_release();
  swift_release();
  return v4;
}

void sub_10007A9E8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData + 16);
  if (v4)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = v3[1];
    uint64_t v7 = swift_bridgeObjectRetain(*(void *)(a1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData + 16));
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Reading persistent data from cache", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v5 = sub_100079F1C();
    uint64_t v6 = v11;
    uint64_t v4 = v12;
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Read persistent data from store", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    *uint64_t v3 = v5;
    v3[1] = v6;
    v3[2] = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease();
  }

  *a2 = v5;
  a2[1] = v6;
  a2[2] = v4;
}

uint64_t sub_10007AB68()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_logger;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData + 16));
  swift_release(*(void *)(v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_locker));
  return v0;
}

uint64_t sub_10007ABE8()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10007AC0C()
{
  return type metadata accessor for DevicePersistentDataManager(0LL);
}

uint64_t type metadata accessor for DevicePersistentDataManager(uint64_t a1)
{
  uint64_t result = qword_1001D4AE8;
  if (!qword_1001D4AE8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DevicePersistentDataManager);
  }
  return result;
}

uint64_t sub_10007AC4C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = &unk_1001605A0;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_10007ACE4()
{
  unint64_t result = qword_1001D4BD0;
  if (!qword_1001D4BD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001605D4, &type metadata for DevicePersistentDataManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D4BD0);
  }

  return result;
}

unint64_t sub_10007AD20(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10007AD4C();
  unint64_t result = sub_10007AD88();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10007AD4C()
{
  unint64_t result = qword_1001D4BF0;
  if (!qword_1001D4BF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100160628, &type metadata for DevicePersistentDataManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D4BF0);
  }

  return result;
}

unint64_t sub_10007AD88()
{
  unint64_t result = qword_1001D4BF8;
  if (!qword_1001D4BF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001605F0, &type metadata for DevicePersistentDataManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D4BF8);
  }

  return result;
}

unint64_t sub_10007ADC8()
{
  unint64_t result = qword_1001D4C00;
  if (!qword_1001D4C00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100160668, &type metadata for DevicePersistentDataManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D4C00);
  }

  return result;
}

unint64_t sub_10007AE04(uint64_t a1)
{
  unint64_t result = sub_10007AE28();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10007AE28()
{
  unint64_t result = qword_1001D4C08;
  if (!qword_1001D4C08)
  {
    uint64_t v1 = type metadata accessor for DevicePersistentDataManager(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1001605B8, v1);
    atomic_store(result, (unint64_t *)&qword_1001D4C08);
  }

  return result;
}

void sub_10007AE68(uint64_t a1, unint64_t *a2, void *a3)
{
  if (!*a2)
  {
    uint64_t v4 = objc_opt_self(*a3);
    atomic_store(swift_getObjCClassMetadata(v4), a2);
  }

  sub_100009A90();
}

uint64_t sub_10007AE9C( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    unint64_t v8 = result;
    sub_10007B0A8(result, a2, a3, a4, a5, a6, a7, a8, v17, v19);
    unint64_t result = ((unint64_t)v20 * (unsigned __int128)v8) >> 64;
    if (v20 * v8 < v8)
    {
      unint64_t v16 = -(uint64_t)v8 % v8;
      if (v16 > v20 * v8)
      {
        do
          unint64_t result = sub_10007B0A8(result, v9, v10, v11, v12, v13, v14, v15, v18, v20);
        while (v16 > v20 * v8);
        return ((unint64_t)v20 * (unsigned __int128)v8) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DevicePersistentDataManager.Activity( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10007AF58 + 4 * byte_10016056E[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10007AF8C + 4 * byte_100160569[v4]))();
}

uint64_t sub_10007AF8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007AF94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007AF9CLL);
  }
  return result;
}

uint64_t sub_10007AFA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007AFB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10007AFB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007AFBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentDataManager.Activity()
{
  return &type metadata for DevicePersistentDataManager.Activity;
}

Swift::Int sub_10007AFDC()
{
  return Hasher._finalize()();
}

uint64_t sub_10007AFE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( a1,  a2,  0LL,  0LL,  0LL,  1LL,  a7,  a7,  a9,  a10,  a11,  a12);
}

void sub_10007AFFC(uint64_t a1@<X8>)
{
}

void *sub_10007B008(uint64_t a1, uint64_t a2, ...)
{
  return Hasher.init(_seed:)((uint64_t *)va, a1);
}

void sub_10007B010(Swift::UInt a1)
{
}

void *sub_10007B018()
{
  return sub_100019AFC((void *)(v0 - 128), *(void *)(v0 - 104));
}

void sub_10007B038()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  *(void *)(v1 - 192) = v2;
  *(void *)(v1 - 184) = v3;
  *(void *)(v1 - 152) = 45LL;
  *(void *)(v1 - 144) = 0xE100000000000000LL;
  *(void *)(v1 - 208) = 95LL;
  *(void *)(v1 - 200) = 0xE100000000000000LL;
}

uint64_t sub_10007B058(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  return String.hash(into:)(va, a1, a2);
}

uint64_t sub_10007B070(uint64_t a1)
{
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10007B078(uint64_t a1, uint64_t a2)
{
  return String.hash(into:)(a1, a2, v2);
}

uint64_t sub_10007B080()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_10007B090()
{
  return v0;
}

uint64_t sub_10007B0A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0LL;
  return swift_stdlib_random(&a10, 8LL);
}

  ;
}

  ;
}

uint64_t sub_10007B0D8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10007B0E8@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 + 8));
}

uint64_t sub_10007B0F4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 + 8));
}

void sub_10007B100(uint64_t a1@<X8>)
{
}

void sub_10007B108()
{
}

void sub_10007B110()
{
}

void sub_10007B11C(uint64_t a1, ...)
{
}

void sub_10007B128( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_10007B130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

void sub_10007B13C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10007B148(uint64_t a1, unint64_t *a2, void *a3)
{
}

uint64_t sub_10007B150@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRetain(*(void *)(a1 + 8));
}

NSString sub_10007B15C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1001EDDA8 = (uint64_t)result;
  return result;
}

void static ObjcExceptionUtil.tryBlock<A>(_:)( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v8 = sub_10007B864(a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10005A4F0();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - v11;
  sub_10007B814();
  uint64_t v13 = (void *)sub_100009ACC((uint64_t)&unk_1001B4FC0, 48LL);
  v13[2] = a3;
  v13[3] = v12;
  v13[4] = a1;
  v13[5] = a2;
  uint64_t v14 = sub_100009ACC((uint64_t)&unk_1001B4FE8, 32LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = sub_10007B770;
  *(void *)(v14 + 24) = v13;
  uint64_t v28 = sub_10007B788;
  uint64_t v29 = v14;
  uint64_t v26 = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256LL;
  sub_100009BBC((uint64_t)sub_10007B5C8);
  sub_10007B848();
  swift_release();
  uint64_t v15 = (void (*)(void))a2[2];
  unint64_t v16 = a2;
  v15();
  id v17 = 0LL;
  while (1)
  {

    id v18 = v17;
    sub_10007B87C();
    sub_10007B870(v14, (uint64_t)"", 92LL, 38LL);
    uint64_t v19 = (void *)sub_10007B858();
    if ((v16 & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }

    if (v17)
    {
      id v20 = v17;
      sub_10007B800();
      unint64_t v21 = sub_10001B060();
      uint64_t v22 = sub_100010EA0((uint64_t)&type metadata for Incident, v21);
      sub_10007B838(v22, v23);

      sub_10007B828();
      sub_100019F70();
      goto LABEL_7;
    }

    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v4, v12, v8);
    uint64_t v19 = (void *)sub_100010708(v4, 1LL, (uint64_t)a3);
    if ((_DWORD)v19 != 1) {
      break;
    }
LABEL_9:
    __break(1u);
    id v17 = objc_begin_catch(v19);
    objc_end_catch();
  }

  sub_10007B888(v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((void *)a3 - 1) + 32LL));
  sub_10007B828();
  sub_100019F70();
LABEL_7:
  sub_10002716C();
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(void);
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v24 = a4;
  uint64_t v25 = sub_10007B864(a1, (uint64_t)a2, (uint64_t)a3);
  uint64_t v8 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_10005A4F0();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v30 = 0LL;
  sub_10007B814();
  uint64_t v12 = (void *)sub_100009ACC((uint64_t)&unk_1001B5038, 56LL);
  v12[2] = a3;
  v12[3] = v11;
  v12[4] = a1;
  v12[5] = a2;
  v12[6] = &v30;
  uint64_t v13 = sub_100009ACC((uint64_t)&unk_1001B5060, 32LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = sub_10007B7C8;
  *(void *)(v13 + 24) = v12;
  uint64_t v28 = sub_10007B7F4;
  uint64_t v29 = v13;
  uint64_t v26 = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256LL;
  sub_100009BBC((uint64_t)sub_10007B5C8);
  sub_10007B848();
  swift_release();
  uint64_t v14 = (void (*)(void))a2[2];
  uint64_t v15 = a2;
  v14();
  unint64_t v16 = 0LL;
  while (1)
  {

    id v17 = v16;
    sub_10007B87C();
    sub_10007B870(v13, (uint64_t)"", 92LL, 18LL);
    id v18 = (void *)sub_10007B858();
    if ((v15 & 1) != 0)
    {
      __break(1u);
      goto LABEL_12;
    }

    if (v16)
    {
      uint64_t v19 = v16;
      sub_10007B800();
      id v20 = sub_10001B060();
      unint64_t v21 = sub_100010EA0((uint64_t)&type metadata for Incident, v20);
      sub_10007B838(v21, v22);

LABEL_7:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v25);
      goto LABEL_8;
    }

    if (v30)
    {
      uint64_t v23 = swift_errorRetain(v30);
      swift_willThrow(v23);
      goto LABEL_7;
    }

    uint64_t v15 = (void *)v25;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))(v4, v11, v25);
    id v18 = (void *)sub_100010708(v4, 1LL, (uint64_t)a3);
    if ((_DWORD)v18 != 1) {
      break;
    }
LABEL_12:
    __break(1u);
    unint64_t v16 = objc_begin_catch(v18);
    objc_end_catch();
  }

  sub_10007B888(v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*((void *)a3 - 1) + 32LL));
  (*(void (**)(char *, void *))(v8 + 8))(v11, v15);
LABEL_8:
  swift_errorRelease(v30);
  sub_100019F70();
  sub_10002716C();
}

void sub_10007B5AC(void (*a1)(void))
{
}

void sub_10007B5C8(uint64_t a1)
{
}

uint64_t sub_10007B5E4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional(0LL, a5);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v14 - v11;
  a2(v10);
  sub_100009654((uint64_t)v12, 0LL, 1LL, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v12, v8);
}

uint64_t sub_10007B6B8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional(0LL, a4);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - v10;
  a2(v9);
  sub_100009654((uint64_t)v11, 0LL, 1LL, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1, v11, v7);
}

uint64_t sub_10007B764()
{
  return sub_10001B110(v0, 48LL);
}

uint64_t sub_10007B770()
{
  return sub_10007B6B8( *(void *)(v0 + 24),  *(void (**)(uint64_t))(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 16));
}

uint64_t sub_10007B77C()
{
  return sub_10001B110(v0, 32LL);
}

void sub_10007B788()
{
}

uint64_t sub_10007B7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007B7B4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10007B7BC()
{
  return sub_10001B110(v0, 56LL);
}

uint64_t sub_10007B7C8()
{
  return sub_10007B5E4( *(void *)(v0 + 24),  *(void (**)(uint64_t))(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 16));
}

uint64_t sub_10007B7D8()
{
  return sub_10001B110(v0, 32LL);
}

ValueMetadata *type metadata accessor for ObjcExceptionUtil()
{
  return &type metadata for ObjcExceptionUtil;
}

void sub_10007B800()
{
}

uint64_t sub_10007B814()
{
  return sub_100009654(v0, 1LL, 1LL, v1);
}

uint64_t sub_10007B828()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10007B838(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_10007B848()
{
  return swift_retain(v0);
}

uint64_t sub_10007B858()
{
  return swift_release(v0);
}

uint64_t sub_10007B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata accessor for Optional(0LL, a3);
}

uint64_t sub_10007B870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_isEscapingClosureAtFileLocation(a1, a2, a3, a4, 40LL, 1LL);
}

void sub_10007B87C()
{
}

uint64_t sub_10007B888@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v3, v2);
}

uint64_t sub_10007B894(void *a1)
{
  uint64_t v3 = swift_unknownObjectWeakInit(v1 + 16, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);

  uint64_t v4 = sub_10000941C(&qword_1001D4CD8);
  uint64_t v5 = swift_allocObject(v4, 20LL, 7LL);
  *(_DWORD *)(v5 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v1 + 24) = v5;
  return v1;
}

void sub_10007B8EC()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 24) + 16LL);
  os_unfair_lock_lock(v1);
  swift_unknownObjectWeakAssign(v0 + 16, 0LL);
  os_unfair_lock_unlock(v1);
}

void sub_10007B928(void *(*a1)(uint64_t *__return_ptr), uint64_t a2, os_unfair_lock_s *a3)
{
  uint64_t v4 = a3 + 4;
  os_unfair_lock_lock(a3 + 4);
  sub_10007E080(v5, a1, &v6);
  os_unfair_lock_unlock(v4);
}

void sub_10007B998(uint64_t a1)
{
  uint64_t v3 = (os_unfair_lock_s *)(*(void *)(v1 + 24) + 16LL);
  os_unfair_lock_lock(v3);
  swift_unknownObjectWeakAssign(v1 + 16, a1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_10007B9E0(uint64_t a1)
{
  return swift_unknownObjectWeakLoadStrong(a1 + 16);
}

void sub_10007BA08()
{
  uint64_t v0 = sub_10000941C(&qword_1001D4CE0);
  swift_allocObject(v0, 32LL, 7LL);
  sub_10000B644((uint64_t)&_swiftEmptyDictionarySingleton);
  qword_1001D4C18 = v1;
}

void sub_10007BA50()
{
  uint64_t v0 = sub_10000941C(&qword_1001D37C0);
  swift_allocObject(v0, 25LL, 7LL);
  sub_10005FC38(0);
  qword_1001EDDB0 = v1;
}

uint64_t sub_10007BA94()
{
  uint64_t v0 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.userInteractive.getter(v1);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  uint64_t v8 = sub_10007E0A8((unint64_t *)&qword_1001D0BB0, v7);
  dispatch thunk of OptionSet.init(rawValue:)(&v15, v4, v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void))(v12 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000017LL,  0x8000000100170760LL,  v3,  v6,  v11,  0LL);
  qword_1001EDDB8 = result;
  return result;
}

uint64_t sub_10007BBF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v44 = a5;
  LODWORD(v43) = a3;
  uint64_t v10 = sub_10005A18C();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1001D05F8 != -1) {
    swift_once(&qword_1001D05F8, sub_10007BA94);
  }
  uint64_t v47 = qword_1001EDDB8;
  uint64_t v14 = sub_100009ACC((uint64_t)&unk_1001B50D0, 24LL);
  swift_unknownObjectWeakInit(v14 + 16, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v10);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  uint64_t v17 = v16 + v12;
  unint64_t v18 = ((v17 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v19 = swift_allocObject(&unk_1001B50F8, v18 + 16, v15 | 7);
  unint64_t v20 = (v17 & 0xFFFFFFFFFFFFFFF8LL) + v19;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v14;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v19 + v16, v13, v10);
  *(_BYTE *)(v19 + v17) = v43 & 1;
  uint64_t v21 = v44;
  *(void *)(v20 + 8) = a4;
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v21;
  uint64_t v22 = (uint64_t *)(v19 + v18);
  uint64_t v24 = v45;
  uint64_t v23 = (uint64_t)v46;
  uint64_t *v22 = v45;
  v22[1] = v23;
  v48[5] = sub_10007DE78;
  v48[6] = v19;
  v48[1] = _NSConcreteStackBlock;
  v48[2] = 1107296256LL;
  uint64_t v25 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v42 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v43 = &v41;
  uint64_t v26 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_100009AEC();
  uint64_t v29 = v28 - v27;
  swift_retain(v14);
  sub_100026250(a4, v21);
  uint64_t v30 = sub_100026250(v24, v23);
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v46 = &v41;
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  sub_100009AEC();
  uint64_t v35 = v34 - v33;
  v48[0] = _swiftEmptyArrayStorage;
  uint64_t v37 = sub_10007E0A8((unint64_t *)&qword_1001D2B80, v36);
  uint64_t v38 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  uint64_t v39 = sub_10007E1E4((unint64_t *)&qword_1001D2B90, (uint64_t *)&unk_1001D0BC0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v38, v39, v31, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v35, v25);
  _Block_release(v25);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v42);
  sub_100010D00();
  return swift_release();
}

void sub_10007BF00( uint64_t a1, uint64_t a2, int a3, void (*a4)(_BYTE *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v112 = a7;
  uint64_t v110 = a6;
  int v109 = a3;
  uint64_t v11 = type metadata accessor for URLRequest(0LL);
  uint64_t v113 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v117 = &v100[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v115 = *(void *)(v13 - 8);
  uint64_t v116 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  id v108 = &v100[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v100[-v16];
  uint64_t v118 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v20 = &v100[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = sub_10000941C(&qword_1001D32B0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v111 = &v100[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v22);
  uint64_t v25 = &v100[-v24];
  a1 += 16LL;
  swift_beginAccess(a1, v123, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    uint64_t v27 = (void *)Strong;
    uint64_t v107 = a2;
    Swift::String_optional v28 = URL.host(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v28.value._countAndFlagsBits;
    if (!v28.value._object)
    {
      if (qword_1001D0570 != -1) {
        swift_once(&qword_1001D0570, sub_100034744);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v34, (uint64_t)qword_1001EDCD0);
      id v35 = v27;
      os_log_type_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v38 = static os_log_type_t.error.getter(v36, v37);
      if (os_log_type_enabled(v36, v38))
      {
        uint64_t v39 = swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v40;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t v41 = sub_10007CBC4();
        uint64_t v121 = sub_1000307E0(v41, v42, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v39 + 4);

        swift_bridgeObjectRelease();
        uint64_t v43 = "Throttling warmup for session: %s couldn't infer hostname";
LABEL_23:
        uint64_t v51 = v36;
        os_log_type_t v52 = v38;
        uint64_t v53 = (uint8_t *)v39;
        uint32_t v54 = 12;
        goto LABEL_24;
      }

      goto LABEL_25;
    }

    uint64_t v105 = a4;
    uint64_t v104 = v11;
    uint64_t v29 = qword_1001D05E8;
    swift_bridgeObjectRetain(v28.value._object);
    if (v29 != -1) {
      swift_once(&qword_1001D05E8, sub_10007BA08);
    }
    swift_retain(qword_1001D4C18);
    sub_10004A38C();
    uint64_t v31 = v30;
    swift_release();
    sub_10000BFD8(countAndFlagsBits, (uint64_t)v28.value._object, v31, (uint64_t)v25);
    object = v28.value._object;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = v118;
    if (sub_100010708((uint64_t)v25, 1LL, v118))
    {
      sub_10007DF5C((uint64_t)v25);
      uint64_t v33 = a5;
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v20, v25, v32);
      uint64_t v44 = sub_10007DF5C((uint64_t)v25);
      double v45 = Date.timeIntervalSinceNow.getter(v44);
      (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v20, v32);
      double v46 = fabs(v45);
      uint64_t v33 = a5;
      if (v46 < 180.0)
      {
        swift_bridgeObjectRelease();
        if (qword_1001D0570 != -1) {
          swift_once(&qword_1001D0570, sub_100034744);
        }
        uint64_t v47 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v47, (uint64_t)qword_1001EDCD0);
        id v35 = v27;
        os_log_type_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v48 = static os_log_type_t.default.getter(v36);
        if (os_log_type_enabled(v36, v48))
        {
          uint64_t v39 = swift_slowAlloc(22LL, -1LL);
          uint64_t v40 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v40;
          *(_DWORD *)uint64_t v39 = 136315394;
          uint64_t v49 = sub_10007CBC4();
          uint64_t v121 = sub_1000307E0(v49, v50, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v39 + 4);

          swift_bridgeObjectRelease();
          *(_WORD *)(v39 + 12) = 2048;
          uint64_t v121 = *(void *)&v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v39 + 14);
          uint64_t v43 = "Throttling warmup for session: %s attempted %f seconds ago";
          uint64_t v51 = v36;
          os_log_type_t v52 = v48;
          uint64_t v53 = (uint8_t *)v39;
          uint32_t v54 = 22;
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v51, v52, v43, v53, v54);
          swift_arrayDestroy(v40, 1LL);
          swift_slowDealloc(v40, -1LL, -1LL);
          swift_slowDealloc(v39, -1LL, -1LL);

          return;
        }

uint64_t sub_10007CBC4()
{
  uint64_t result = sub_10007DFE0(v0);
  if (!v2) {
    return 0x6E776F6E6B6E75LL;
  }
  return result;
}

void sub_10007CBFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v10 = a6 + 16;
  swift_beginAccess(a6 + 16, v27, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (!Strong) {
    goto LABEL_14;
  }
  uint64_t v12 = (void *)Strong;
  if (qword_1001D0570 != -1) {
    swift_once(&qword_1001D0570, sub_100034744);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v13, (uint64_t)qword_1001EDCD0);
  id v14 = v12;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    v26[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v19 = sub_10007CBC4();
    uint64_t v25 = sub_1000307E0(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v17 + 4);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "warmup attempt complete for session %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    if (!a7) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v21 = *(os_unfair_lock_s **)(a5 + 24);
    swift_retain(a8);
    sub_10007B928((void *(*)(uint64_t *__return_ptr))sub_10007E068, a5, v21);
    if (v22)
    {
      uint64_t v23 = v22;
      a7();
    }

    sub_10000A65C((uint64_t)a7, a8);
    goto LABEL_11;
  }

  if (a7) {
    goto LABEL_8;
  }
LABEL_11:
  if (qword_1001D05F0 != -1) {
    swift_once(&qword_1001D05F0, sub_10007BA50);
  }
  swift_retain(qword_1001EDDB0);
  sub_1000C18E8(0);

  swift_release();
LABEL_14:
  sub_10007B8EC();
}

uint64_t sub_10007CE78(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (a2)
  {
    swift_retain(v8);
    id v9 = v6;
    uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v11 = v10;
  }

  else
  {
    swift_retain(v8);
    unint64_t v11 = 0xF000000000000000LL;
  }

  id v12 = a3;
  id v13 = a4;
  v7(v6, v11, a3, a4);

  sub_100010A1C((uint64_t)v6, v11);
  return swift_release();
}

uint64_t sub_10007CF28(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    id v4 = a1;
    _StringGuts.grow(_:)(51LL);
    v5._object = (void *)0x80000001001707C0LL;
    v5._uint64_t countAndFlagsBits = 0xD000000000000016LL;
    String.append(_:)(v5);
    [v4 code];
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 0x3A6E69616D6F6420LL;
    v7._object = (void *)0xE900000000000020LL;
    String.append(_:)(v7);
    id v8 = [v4 domain];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._uint64_t countAndFlagsBits = 0x7069726373656420LL;
    v13._object = (void *)0xEE00203A6E6F6974LL;
    String.append(_:)(v13);
    id v14 = [v4 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;

    sub_10007E4D8();
    v18._uint64_t countAndFlagsBits = v15;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    sub_10007E4D8();
    return 0LL;
  }

  else
  {
    v19[0] = a1;
    v19[1] = a2;
    swift_bridgeObjectRetain(a2);
    sub_10000941C(&qword_1001D4480);
    return String.init<A>(describing:)(v19);
  }

uint64_t sub_10007D0EC()
{
  return sub_10007CF28(*(void **)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

id sub_10007D0F8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000772E0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v39 = v4;
  uint64_t v40 = v6;
  __chkstk_darwin(v4);
  id v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = sub_10000941C(&qword_1001D4CE8);
  uint64_t v43 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  sub_100009AEC();
  uint64_t v11 = v10 - v9;
  uint64_t v42 = sub_10000941C(&qword_1001D4CF0);
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = _s19ResponseFutureStoreCMa();
  sub_100009ACC(v15, 48LL);
  os_log_type_t v16 = sub_10007DEE4();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  uint64_t v47 = sub_10007E0E0;
  os_log_type_t v48 = v16;
  double v45 = _NSConcreteStackBlock;
  uint64_t v46 = 1107296256LL;
  Swift::String v18 = sub_100009BBC((uint64_t)sub_10007CE78);
  swift_retain(v16);
  sub_100010D00();
  id v19 = [v38[1] dataTaskWithRequest:isa completionHandler:v18];
  _Block_release(v18);

  LODWORD(v20) = *(_DWORD *)*(&off_1001B5308 + a2);
  [v19 setPriority:v20];
  uint64_t v21 = sub_100009ACC((uint64_t)&unk_1001B51C0, 32LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v21 + 24) = v19;
  swift_retain(v16);
  id v22 = v19;
  uint64_t v23 = sub_10000941C(&qword_1001D4CF8);
  uint64_t v24 = sub_10007E1E4(&qword_1001D4D00, &qword_1001D4CF8);
  Deferred.init(createPublisher:)(sub_10007E110, v21, v23, v24);
  uint64_t v25 = a1;
  uint64_t v26 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v25, v39);
  uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v28 = (v27 + 16) & ~v27;
  unint64_t v29 = (v40 + v28 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v30 = swift_allocObject(&unk_1001B51E8, v29 + 8, v27 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v30 + v28, v8, v26);
  *(void *)(v30 + v29) = v22;
  id v31 = v22;
  uint64_t v32 = sub_10000941C(&qword_1001D2B70);
  uint64_t v33 = sub_10007E1E4(&qword_1001D4D08, &qword_1001D4CE8);
  uint64_t v34 = v41;
  Publisher.mapError<A>(_:)(sub_10007E188, v30, v41, v32, v33, &protocol self-conformance witness table for Error);
  sub_100010D00();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v11, v34);
  uint64_t v35 = sub_10007E1E4(&qword_1001D4D10, &qword_1001D4CF0);
  uint64_t v36 = v42;
  Publisher.eraseToAnyPublisher()(v42, v35);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v14, v36);
  return v31;
}

void sub_10007D458(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_10007D6FC();
  uint64_t v11 = (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))v9;
  uint64_t v12 = v10;
  if (v8)
  {
    uint64_t v13 = v8;
    if (!v9)
    {
LABEL_5:
      swift_release();
      return;
    }

    if (a4)
    {
      swift_retain(v8);
      sub_100026250((uint64_t)v11, v12);
      swift_errorRetain(a4);
      uint64_t v14 = _convertErrorToNSError(_:)(a4);
      unint64_t v15 = sub_10007E268();
      uint64_t v16 = swift_allocError(&_s13ResponseErrorON, v15, 0LL, 0LL);
      *(void *)uint64_t v17 = v14;
      *(void *)(v17 + 8) = 0LL;
      *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = 1;
      v11(v16, 0LL, 0LL, 1LL);
      sub_10000A65C((uint64_t)v11, v12);
      sub_10000A65C((uint64_t)v11, v12);
      swift_release();
      swift_errorRelease(v16);
      swift_errorRelease(a4);
      goto LABEL_5;
    }

    if (a3 && (uint64_t v18 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse), (v19 = swift_dynamicCastObjCClass(a3, v18)) != 0))
    {
      double v20 = (void *)v19;
      id v21 = a3;
      swift_retain(v13);
      sub_100026250((uint64_t)v11, v12);
      id v29 = v21;
      sub_10007E2A4(a1, a2);
      v11((uint64_t)v20, a1, a2, 0LL);
      sub_10000A65C((uint64_t)v11, v12);
      sub_10000A65C((uint64_t)v11, v12);

      swift_release();
      sub_100010A1C(a1, a2);
      swift_release();
    }

    else
    {
      uint64_t v30 = a3;
      swift_retain(v13);
      sub_100026250((uint64_t)v11, v12);
      id v22 = a3;
      sub_10000941C(&qword_1001D4D18);
      uint64_t v23 = String.init<A>(describing:)(&v30);
      uint64_t v25 = v24;
      unint64_t v26 = sub_10007E268();
      uint64_t v27 = swift_allocError(&_s13ResponseErrorON, v26, 0LL, 0LL);
      *(void *)uint64_t v28 = v23;
      *(void *)(v28 + 8) = v25;
      *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = 0;
      v11(v27, 0LL, 0LL, 1LL);
      sub_10000A65C((uint64_t)v11, v12);
      sub_10000A65C((uint64_t)v11, v12);
      swift_release();
      swift_errorRelease(v27);
      swift_release();
    }
  }

  else
  {
    sub_10000A65C(v9, v10);
  }

uint64_t sub_10007D6FC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_10007DC78(v2, v0, &v7);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v7;
  if ((void)v8)
  {
    __int128 v6 = v8;
    *(_OWORD *)(swift_allocObject(&unk_1001B5238, 32LL, 7LL) + swift_weakDestroy(v0 + 16) = v6;
  }

  return v4;
}

id sub_10007D7A0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10000941C(&qword_1001D4CF8);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain(a1);
  uint64_t v7 = Future.init(_:)(sub_10007E21C, a1);
  sub_10007D8F8(v7);
  id result = [a2 resume];
  *a3 = v7;
  return result;
}

uint64_t sub_10007D828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_1001B5210, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain(a2);
  sub_10007D88C((uint64_t)sub_10007E248, v4);
  return swift_release();
}

void sub_10007D88C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + 40);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 5;
  os_unfair_lock_lock(v5 + 5);
  sub_10007DC34(v6, v2, a1, a2);
  os_unfair_lock_unlock(v7);
}

void sub_10007D8F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  if ((*(_BYTE *)(v3 + 16) & 1) == 0) {
    swift_weakAssign(v1 + 16, a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 20));
}

uint64_t sub_10007D948@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = URLRequest.allHTTPHeaderFields.getter();
  if (v6
    && (uint64_t v7 = sub_10000BF84(0xD000000000000011LL, 0x8000000100170780LL, v6), v9 = v8, swift_bridgeObjectRelease(), v9))
  {
    _StringGuts.grow(_:)(18LL);
    swift_bridgeObjectRelease();
    v30[0] = 0xD000000000000010LL;
    v30[1] = 0x80000001001707A0LL;
    v10._uint64_t countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000010LL;
    unint64_t v12 = 0x80000001001707A0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = 0LL;
    unint64_t v12 = 0xE000000000000000LL;
  }

  if (qword_1001D04F0 != -1) {
    swift_once(&qword_1001D04F0, sub_1000343D8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v13, (uint64_t)qword_1001EDBA0);
  id v14 = a2;
  uint64_t v15 = swift_bridgeObjectRetain(v12);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v18 = static os_log_type_t.error.getter(v16, v17);
  if (os_log_type_enabled(v16, v18))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v28 = a3;
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    v30[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v29 = v5;
    id v21 = [v14 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v27 = v11;
    unint64_t v24 = v23;

    uint64_t v31 = sub_1000307E0(v22, v24, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4);

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    uint64_t v31 = sub_1000307E0(v27, v12, v30);
    uint64_t v5 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 14);
    swift_bridgeObjectRelease_n(v12, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v16, v18, "Download for %s %s failed", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2LL);
    uint64_t v25 = v20;
    a3 = v28;
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v12, 2LL);
  }

  *a3 = v5;
  return swift_errorRetain(v5);
}

_BYTE *sub_10007DC34(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*result & 1) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a2 + 24) = a3;
    *(void *)(a2 + 32) = a4;
    sub_10000A65C(v5, v6);
    return (_BYTE *)swift_retain(a4);
  }

  return result;
}

uint64_t sub_10007DC78@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if ((*(_BYTE *)result & 1) != 0)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    a3[2] = 0LL;
  }

  else
  {
    *(_BYTE *)id result = 1;
    uint64_t v5 = a2 + 16;
    uint64_t Strong = swift_weakLoadStrong(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(a2 + 32);
    *(void *)(a2 + 24) = 0LL;
    *(void *)(a2 + 32) = 0LL;
    sub_100026250(v7, v8);
    sub_10000A65C(v7, v8);
    swift_weakAssign(v5, 0LL);
    if (v7)
    {
      id result = swift_allocObject(&unk_1001B5260, 32LL, 7LL);
      *(void *)(result + swift_weakDestroy(v0 + 16) = v7;
      *(void *)(result + 24) = v8;
      uint64_t v9 = sub_10007E2B8;
    }

    else
    {
      uint64_t v9 = 0LL;
      id result = 0LL;
    }

    *a3 = Strong;
    a3[1] = (uint64_t)v9;
    a3[2] = result;
  }

  return result;
}

uint64_t sub_10007DD48()
{
  return v0;
}

uint64_t sub_10007DD74()
{
  uint64_t v0 = sub_10007DD48();
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t _s19ResponseFutureStoreCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCE7parsecdCSo12NSURLSessionP33_8DDD333BFEC4B982C50C324CBAC3EEA419ResponseFutureStore);
}

uint64_t sub_10007DDB0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10007DDD4()
{
  uint64_t v1 = sub_10005A18C();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v5 + v0;
  unint64_t v7 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000271EC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v6 + 8)) {
    swift_release();
  }
  if (*(void *)(v0 + v7)) {
    swift_release();
  }
  return swift_deallocObject(v0, v7 + 16, v3 | 7);
}

void sub_10007DE78()
{
  uint64_t v1 = *(void *)(sub_10005A18C() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  sub_10007BF00( *(void *)(v0 + 16),  v0 + v2,  *(unsigned __int8 *)(v0 + v3),  *(void (**)(_BYTE *))((v3 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  *(void *)((v3 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 16),  *(void *)(v0 + (((v3 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + (((v3 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10007DECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007DEDC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_10007DEE4()
{
  v0[3] = 0LL;
  v0[4] = 0LL;
  uint64_t v1 = sub_10000941C(&qword_1001D4D28);
  uint64_t v2 = swift_allocObject(v1, 24LL, 7LL);
  *(_DWORD *)(v2 + 20) = 0;
  *(_BYTE *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  v0[5] = v2;
  return v0;
}

void *sub_10007DF2C(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  id result = a2(&v4);
  if (!v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t sub_10007DF5C(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D32B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10007DF9C()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10007DFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_10007DFE0(void *a1)
{
  id v1 = [a1 sessionDescription];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_10007E040@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10007B9E0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10007E068@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007E040(v1, a1);
}

void *sub_10007E080@<X0>( uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr)@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10007DF2C(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_10007E0A8(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = a2(255LL);
    uint64_t result = sub_100009C10(v4);
    atomic_store(result, a1);
  }

  return result;
}

void sub_10007E0E0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
}

uint64_t sub_10007E0E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

id sub_10007E110@<X0>(uint64_t *a1@<X8>)
{
  return sub_10007D7A0(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

uint64_t sub_10007E118()
{
  uint64_t v1 = sub_1000772E0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10007E188@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000772E0();
  return sub_10007D948( a1,  *(void **)(v2 + ((*(void *)(*(void *)(v5 - 8) + 64LL)
                      + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
                      + 7) & 0xFFFFFFFFFFFFF8LL)),
           a2);
}

uint64_t sub_10007E1E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000094A0(a2);
    uint64_t result = sub_100009C10(v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10007E21C(uint64_t a1, uint64_t a2)
{
  return sub_10007D828(a1, a2);
}

uint64_t sub_10007E224()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10007E248()
{
}

unint64_t sub_10007E268()
{
  unint64_t result = qword_1001D4D20;
  if (!qword_1001D4D20)
  {
    unint64_t result = swift_getWitnessTable(&unk_100160C5C, &_s13ResponseErrorON);
    atomic_store(result, (unint64_t *)&qword_1001D4D20);
  }

  return result;
}

uint64_t sub_10007E2A4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100014244(result, a2);
  }
  return result;
}

uint64_t sub_10007E2B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(unsigned __int8 *)(a1 + 24));
}

id sub_10007E2EC(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain(a2);
  }
}

void _s13ResponseErrorOwxx(uint64_t a1)
{
}

void sub_10007E30C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {

  }
  else {
    swift_bridgeObjectRelease(a2);
  }
}

uint64_t _s13ResponseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10007E2EC(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t _s13ResponseErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10007E2EC(*(void **)a2, v4, v5);
  unint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_10007E30C(v6, v7, v8);
  return a1;
}

uint64_t _s13ResponseErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_10007E30C(v4, v5, v6);
  return a1;
}

uint64_t _s13ResponseErrorOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t _s13ResponseErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10007E480(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10007E488(uint64_t result, char a2)
{
  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2 & 1;
  return result;
}

ValueMetadata *_s13ResponseErrorOMa()
{
  return &_s13ResponseErrorON;
}

  ;
}

void sub_10007E4D8()
{
}

BOOL sub_10007E4E8(int a1, int a2)
{
  return a1 == a2;
}

BOOL static SQLiteViewProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void sub_10007E504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v3 != v6 || v5 != v7) {
    sub_1000808F4(v3, v7, v6);
  }
  sub_1000325E4();
  sub_100009B3C();
  sub_1000110D4();
}

void sub_10007E56C(char a1, uint64_t a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v3 = 0x656475746974616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000LL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v5 = 0x656475746974616CLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000065LL;
  }
  else {
    unint64_t v6 = 0xE800000000000000LL;
  }
  if (v3 != v5 || v4 != v6) {
    sub_1000808F4(v3, a2, v5);
  }
  sub_1000325E4();
  sub_100009B3C();
  sub_1000110D4();
}

BOOL sub_10007E5F4(char a1, char a2)
{
  return qword_100160EA8[a1] == qword_100160EA8[a2];
}

BOOL sub_10007E618(char a1, char a2)
{
  return qword_100161010[a1] == qword_100161010[a2];
}

uint64_t sub_10007E640(char a1, char a2)
{
  uint64_t v2 = qword_100161380[a1];
  uint64_t v3 = qword_100161380[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  sub_100019F4C(0xE100000000000000LL);
  return v4 & 1;
}

void sub_10007E6A0(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10007E6E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10007E744 + 4 * byte_100160CA4[a2]))(0x6465736F6C63LL);
}

void sub_10007E744(uint64_t a1, uint64_t a2)
{
  if (a1 != 0x6465736F6C63LL || v2 != 0xE600000000000000LL) {
    sub_1000808F4(a1, a2, 0x6465736F6C63LL);
  }
  sub_1000325E4();
  sub_100009B3C();
  sub_1000110D4();
}

uint64_t sub_10007E7BC()
{
  id v1 = [v0 codable];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = PBCodable.containedRedactables.getter();
  }

  else
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = v3 + 5;
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      uint64_t ObjectType = swift_getObjectType(v6);
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 16);
      swift_unknownObjectRetain(v6);
      v9(ObjectType, v7);
      swift_unknownObjectRelease();
      v5 += 2;
      --v4;
    }

    while (v4);
  }

  return swift_bridgeObjectRelease();
}

void sub_10007E870(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v19 = a1;
    }
    else {
      uint64_t v19 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10005A624();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    sub_1000325E4();
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    if (v4 < 0) {
      uint64_t v20 = *v1;
    }
    else {
      uint64_t v20 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000145E8();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    sub_10001450C();
  }

  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *id v1 = v4;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v4 & 0x8000000000000000LL) == 0 && (v4 & 0x4000000000000000LL) == 0)
    {
      uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8LL;
      if (v5 + v3 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }

  while (1)
  {
    sub_1000145E8();
    sub_100080AB8();
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v9, v10, v11);
    swift_bridgeObjectRelease();
    *id v1 = v4;
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8LL;
LABEL_12:
    uint64_t v12 = sub_100080964(v7);
    sub_100080680( v12,  v13,  a1,  (void (*)(uint64_t, void, uint64_t))sub_1000DAFE0,  &qword_1001D4D40,  &qword_1001D1300,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10006A514);
    if (v14 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    if (v4 < 0) {
      uint64_t v21 = v4;
    }
    else {
      uint64_t v21 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_1000145E8();
    _CocoaArrayWrapper.endIndex.getter(v21);
    sub_10001450C();
  }

  if (v14 < 1) {
    goto LABEL_16;
  }
  sub_100080A58();
  if (!v17)
  {
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
LABEL_16:
    uint64_t v18 = swift_bridgeObjectRelease();
    specialized Array._endMutation()(v18);
    return;
  }

  __break(1u);
}

void sub_10007EA08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16LL);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!swift_isUniquelyReferenced_nonNull_native(*v1) || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_1000314C0();
    uint64_t v3 = v6;
  }

  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1000DB118(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *id v1 = v3;
    return;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    goto LABEL_11;
  }

void sub_10007EAE0()
{
}

void sub_10007EB04()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v25 = v1;
    }
    else {
      uint64_t v25 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v12 = *v0;
  if ((unint64_t)*v0 >> 62)
  {
    if (v12 < 0) {
      uint64_t v26 = *v0;
    }
    else {
      uint64_t v26 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100010DFC();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11))
  {
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v12 = *v0;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  uint64_t *v0 = v12;
  uint64_t v13 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000LL) == 0
    && (v12 & 0x4000000000000000LL) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8LL;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v13 = 1LL;
  }

  uint64_t v28 = v11;
  uint64_t v11 = (uint64_t)v9;
  uint64_t v9 = v7;
  uint64_t v7 = (unint64_t *)v5;
  uint64_t v5 = v3;
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    sub_100010DFC();
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v13,  v17,  1LL,  v12);
    swift_bridgeObjectRelease();
    uint64_t *v0 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v3 = v5;
    uint64_t v5 = (uint64_t *)v7;
    uint64_t v7 = v9;
    uint64_t v9 = (unint64_t *)v11;
    uint64_t v11 = v28;
LABEL_16:
    uint64_t v18 = sub_100080964(v16);
    sub_100080680( v18,  v19,  v10,  (void (*)(uint64_t, void, uint64_t))v9,  v7,  v5,  (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))v3);
    if (v20 >= v11) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v12 < 0) {
      uint64_t v27 = v12;
    }
    else {
      uint64_t v27 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100010DFC();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease();
  }

  if (v20 < 1) {
    goto LABEL_20;
  }
  sub_100080A58();
  if (!v23)
  {
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v22;
LABEL_20:
    uint64_t v24 = swift_bridgeObjectRelease();
    specialized Array._endMutation()(v24);
    return;
  }

  __break(1u);
}

void sub_10007ECDC()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (*(void *)(v2 + 24) >> 1) - v6;
  uint64_t v8 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result(0LL);
  if (v7 < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_1000DB24C(v0 + v10, v3, v2 + v10 + *(void *)(v9 + 72) * v6);
  if (!v3)
  {
LABEL_11:
    sub_1000325E4();
    *uint64_t v1 = v2;
    sub_100019F1C();
    return;
  }

  uint64_t v11 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v11, v3);
  uint64_t v12 = v11 + v3;
  if (!v5)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    goto LABEL_11;
  }

void sub_10007EDAC()
{
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!sub_100080A24() || (uint64_t v6 = *(void *)(v2 + 24) >> 1, v6 < v4))
  {
    sub_100031A38();
    uint64_t v2 = v7;
    uint64_t v6 = *(void *)(v7 + 24) >> 1;
  }

  if (!*(void *)(v0 + 16))
  {
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }

  if (v6 - *(void *)(v2 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_1000DB41C(v0 + 32, v3);
  if (!v3)
  {
LABEL_11:
    sub_1000325E4();
    *uint64_t v1 = v2;
    sub_100019F1C();
    return;
  }

  uint64_t v8 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v8, v3);
  uint64_t v9 = v8 + v3;
  if (!v5)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    goto LABEL_11;
  }

Swift::Void __swiftcall _CPSearchResultForFeedback.redactSensitive()()
{
  id v1 = [v0 type];
  if ((_DWORD)v1 != 1)
  {
    id v2 = sub_1000808DC((uint64_t)v1, "setUserInput:");
    id v3 = sub_1000808DC((uint64_t)v2, "setCompletedQuery:");
    id v4 = sub_1000808DC((uint64_t)v3, "setIntendedQuery:");
    sub_1000808DC((uint64_t)v4, "setPunchout:");
    sub_10007EF00(_CPCardSectionForFeedback.redactSensitive());
  }

Swift::Void __swiftcall _CPSearchResultForFeedback.redactUnused()()
{
}

void sub_10007EF00(void (*a1)(void))
{
  id v3 = [v1 card];
  if (v3)
  {
    sub_100080538(v3, (SEL *)&selRef_cardSections);
    if (v3)
    {
      uint64_t v4 = (uint64_t)v3;
      sub_1000809AC();
      if (v6)
      {
        if (v4 >= 0) {
          id v1 = v5;
        }
        else {
          id v1 = (void *)v4;
        }
        sub_1000145E8();
        uint64_t v7 = sub_10006B828();
        if (v7) {
          goto LABEL_5;
        }
      }

      else
      {
        uint64_t v7 = v5[2];
        sub_1000145E8();
        if (v7)
        {
LABEL_5:
          if (v7 >= 1)
          {
            while (1)
            {
              if ((v4 & 0xC000000000000001LL) != 0) {
                sub_100080B14();
              }
              else {
                sub_10006B830(v4);
              }
              sub_100080A30();
            }
          }

          __break(1u);
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
      }

      id v3 = (id)sub_100019F4C(v4);
    }
  }

  id v8 = sub_100047258((uint64_t)v3, "inlineCard");
  if (v8)
  {
    sub_100080538(v8, (SEL *)&selRef_cardSections);
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      sub_1000809AC();
      if (v11)
      {
        if (v9 >= 0) {
          id v1 = v10;
        }
        else {
          id v1 = (void *)v9;
        }
        sub_1000145E8();
        uint64_t v12 = sub_10006B828();
        if (v12)
        {
LABEL_15:
          if (v12 >= 1)
          {
            while (1)
            {
              if ((v9 & 0xC000000000000001LL) != 0) {
                sub_100080B14();
              }
              else {
                sub_10006B830(v9);
              }
              sub_100080A30();
            }
          }

          goto LABEL_46;
        }
      }

      else
      {
        uint64_t v12 = v10[2];
        sub_1000145E8();
        if (v12) {
          goto LABEL_15;
        }
      }

      id v8 = (id)sub_100019F4C(v9);
    }
  }

  id v13 = sub_100047258((uint64_t)v8, "compactCard");
  if (v13)
  {
    sub_100080538(v13, (SEL *)&selRef_cardSections);
    if (v14)
    {
      uint64_t v15 = v14;
      sub_1000809AC();
      if (v17)
      {
        sub_100010E2C();
        uint64_t v18 = sub_10006B828();
        if (v18) {
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t v18 = *(void *)(v16 + 16);
        sub_100010E2C();
        if (v18)
        {
LABEL_25:
          if (v18 < 1)
          {
LABEL_47:
            __break(1u);
            return;
          }

          for (uint64_t i = 0LL; i != v18; ++i)
          {
            if ((v15 & 0xC000000000000001LL) != 0) {
              uint64_t v20 = sub_1000808E8();
            }
            else {
              uint64_t v20 = (uint64_t)sub_1000808BC();
            }
            uint64_t v21 = (void *)v20;
            a1();
          }
        }
      }

      sub_100019F4C(v15);
    }
  }

Swift::Void __swiftcall _CPCardSectionForFeedback.redactSensitive()()
{
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  sub_1000809AC();
  if (!v5)
  {
    uint64_t v6 = *(void *)(v4 + 16);
    sub_10005A624();
    if (v6) {
      goto LABEL_4;
    }
LABEL_10:
    sub_100019F4C(v3);
LABEL_11:
    sub_100019F1C();
    return;
  }

  sub_10005A624();
  uint64_t v6 = sub_10006B828();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_4:
  if (v6 >= 1)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
    {
      if ((v3 & 0xC000000000000001LL) != 0) {
        uint64_t v8 = sub_100080B08();
      }
      else {
        uint64_t v8 = (uint64_t)sub_10006B830(v3 + 8 * i);
      }
      uint64_t v9 = (void *)v8;
      _CPCardSectionForFeedback.redactSensitive()();
    }

    goto LABEL_10;
  }

  __break(1u);
}

Swift::Void __swiftcall _CPCardSectionForFeedback.redactUnused()()
{
  if (!v1) {
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  sub_1000809AC();
  if (!v4)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    sub_10005A624();
    if (v5) {
      goto LABEL_4;
    }
LABEL_10:
    sub_100019F4C(v2);
LABEL_11:
    sub_100019F1C();
    return;
  }

  sub_10005A624();
  uint64_t v5 = sub_10006B828();
  if (!v5) {
    goto LABEL_10;
  }
LABEL_4:
  if (v5 >= 1)
  {
    for (uint64_t i = 0LL; i != v5; ++i)
    {
      if ((v2 & 0xC000000000000001LL) != 0) {
        uint64_t v7 = sub_100080B08();
      }
      else {
        uint64_t v7 = (uint64_t)sub_10006B830(v2 + 8 * i);
      }
      uint64_t v8 = (void *)v7;
      _CPCardSectionForFeedback.redactUnused()();
    }

    goto LABEL_10;
  }

  __break(1u);
}

Swift::Void __swiftcall _CPCardSectionEngagementFeedback.redactSensitive()()
{
  id v1 = [v0 destination];
  if (v1)
  {
    id v2 = v1;
    sub_100080594((uint64_t)_swiftEmptyArrayStorage, v1);
  }

Swift::Void __swiftcall _CPPunchoutForFeedback.redactSensitive()()
{
}

Swift::Void __swiftcall _CPCardSectionEngagementFeedback.redactUnused()()
{
}

Swift::Void __swiftcall _CPSectionRankingFeedback.redactSensitive()()
{
}

Swift::Void __swiftcall _CPStartLocalSearchFeedback.redactSensitive()()
{
}

void sub_10007F3A0(SEL *a1, SEL *a2)
{
  id v4 = [v2 *a1];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend(v4, *a2, 0);
  }

Swift::Void __swiftcall _CPStartNetworkSearchFeedback.redactSensitive()()
{
  if (sub_1000805EC(v0))
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-GEOCountryCodeSource");
    sub_100080AE4(v1, v2);
    sub_1000110A8();
    Class isa = sub_100080AF0().super.isa;
    sub_10001450C();
    sub_1000809C8();

    sub_100009B3C();
  }

  else
  {
    [v0 setHeaders:0];
  }

  if (sub_1000805EC(v0))
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-LocAge");
    sub_100080AE4(v4, v5);
    uint64_t v7 = v6;
    sub_1000110A8();
    Class v8 = sub_100080AF0().super.isa;
    sub_10001450C();
    sub_1000809C8();

    sub_100010B54(v7);
  }

  else
  {
    [v0 setHeaders:0];
  }

void PBCodable.containedResults.getter()
{
  uint64_t v3 = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v4 = objc_opt_self(&OBJC_CLASS____CPVisibleResultsFeedback);
  if (sub_100032C70(v4))
  {
    id v5 = sub_10006B860();
    sub_10008091C((uint64_t)v5, (SEL *)&selRef_results);
    if (v6) {
      sub_1000809D8();
    }
    id v7 = sub_100047258(v6, "goTakeoverResult");
    goto LABEL_5;
  }

  uint64_t v13 = objc_opt_self(&OBJC_CLASS____CPResultsReceivedAfterTimeoutFeedback);
  if (sub_100032C70(v13))
  {
    id v5 = sub_10006B860();
    sub_10008091C((uint64_t)v5, (SEL *)&selRef_results);
    if (v14) {
LABEL_11:
    }
      sub_1000809D8();
LABEL_12:

LABEL_13:
    sub_1000144F0();
    return;
  }

  uint64_t v15 = objc_opt_self(&OBJC_CLASS____CPSectionRankingFeedback);
  if (sub_100032C70(v15))
  {
    id v16 = sub_10006B860();
    sub_10008091C((uint64_t)v16, (SEL *)&selRef_results);
    sub_10008097C();
    if (v17)
    {
      sub_1000808A8();
      uint64_t v3 = sub_10006B828();
      sub_1000110A8();
      if (v3) {
        goto LABEL_17;
      }
    }

    else
    {
      sub_100080AA0();
      if (&_swiftEmptyArrayStorage)
      {
LABEL_17:
        if (v3 >= 1)
        {
          while (1)
          {
            if ((v1 & 0xC000000000000001LL) != 0) {
              sub_1000808E8();
            }
            else {
              sub_1000808BC();
            }
            sub_1000809B8();
            sub_100080924();
          }
        }

        __break(1u);
LABEL_59:
        sub_1000808A8();
        uint64_t v3 = sub_10006B828();
        sub_1000110A8();
        if (!v3) {
          goto LABEL_56;
        }
        goto LABEL_31;
      }
    }

LABEL_56:
LABEL_57:
    sub_1000110A8();
    goto LABEL_13;
  }

  uint64_t v18 = objc_opt_self(&OBJC_CLASS____CPResultRankingFeedback);
  if (sub_100032C70(v18))
  {
    id v5 = sub_10006B860();
    sub_10008091C((uint64_t)v5, (SEL *)&selRef_duplicateResults);
    if (v19) {
      sub_1000809D8();
    }
    sub_10008091C(v19, (SEL *)&selRef_hiddenResults);
    if (v20) {
      sub_1000809D8();
    }
    id v7 = sub_100047258(v20, "result");
LABEL_5:
    id v8 = v7;
    if (v8)
    {
      id v9 = v8;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v11 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v10 = *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v11 >= v10 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1);
      }
      uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
      specialized Array._endMutation()(v12);

      goto LABEL_13;
    }

    goto LABEL_12;
  }

  uint64_t v21 = objc_opt_self(&OBJC_CLASS____CPRankingFeedback);
  if (sub_100032C70(v21))
  {
    id v16 = sub_10006B860();
    sub_10008091C((uint64_t)v16, (SEL *)&selRef_sections);
    sub_10008097C();
    if (v22) {
      goto LABEL_59;
    }
    sub_100080AA0();
    if (&_swiftEmptyArrayStorage)
    {
LABEL_31:
      if (v3 >= 1)
      {
        while (1)
        {
          if ((v1 & 0xC000000000000001LL) != 0) {
            sub_1000808E8();
          }
          else {
            sub_1000808BC();
          }
          sub_1000809B8();
          sub_100080924();
        }
      }

      __break(1u);
      goto LABEL_62;
    }

    goto LABEL_56;
  }

  uint64_t v23 = objc_opt_self(&OBJC_CLASS____CPResultEngagementFeedback);
  if (sub_100032C70(v23) || (uint64_t v24 = objc_opt_self(&OBJC_CLASS____CPResultGradingFeedback), sub_100032C70(v24)))
  {
    id v5 = sub_10006B860();
    id v7 = sub_100047258((uint64_t)v5, "result");
    goto LABEL_5;
  }

  uint64_t v25 = objc_opt_self(&OBJC_CLASS____CPLateSectionsAppendedFeedback);
  uint64_t v26 = sub_100032C70(v25);
  if (!v26)
  {
    uint64_t v33 = objc_opt_self(&OBJC_CLASS____CPSectionEngagementFeedback);
    if (!sub_100032C70(v33)) {
      goto LABEL_13;
    }
    id v5 = sub_10006B860();
    id v34 = sub_100047258((uint64_t)v5, "section");
    if (v34)
    {
      sub_100080538(v34, (SEL *)&selRef_results);
      if (v35) {
        goto LABEL_11;
      }
    }

    goto LABEL_12;
  }

  uint64_t v27 = (void *)v26;
  id v0 = v0;
  sub_1000804AC(v27, (SEL *)&selRef_sections);
  sub_10008097C();
  if (v28)
  {
LABEL_62:
    if (v1 < 0) {
      uint64_t v36 = v1;
    }
    else {
      uint64_t v36 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100010E2C();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v36);
    sub_1000110A8();
    if (!v3) {
      goto LABEL_66;
    }
    goto LABEL_42;
  }

  sub_100080AA0();
  if (!&_swiftEmptyArrayStorage)
  {
LABEL_66:

    goto LABEL_57;
  }

  sub_100010A30(v40, v142);
  unint64_t v125 = sub_1000CF868();
  sub_1000CF648(v125);
  uint64_t v126 = sub_1000772E0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v126 - 8) + 8LL))(v43, v126);
  sub_10004729C(v127, *(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
  sub_1000CF6A0(v135, v136);
  sub_1000CF7B4(v44[13]);
LABEL_24:
  sub_1000144D4();
}

void *PBCodable.containedRedactables.getter()
{
  uint64_t v1 = (void *)v0;
  uint64_t v22 = _swiftEmptyArrayStorage;
  PBCodable.containedResults.getter();
  sub_10007FC1C();
  sub_100009B3C();
  sub_100080AD8();
  uint64_t v2 = objc_opt_self(&OBJC_CLASS____CPRankingFeedback);
  uint64_t v3 = swift_dynamicCastObjCClass(v0, v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = v1;
    sub_1000804AC(v4, (SEL *)&selRef_sections);
    if (v6)
    {
      sub_10007FC1C();
      sub_100009B3C();
      sub_100080AD8();
    }
  }

  else
  {
    uint64_t ObjectType = swift_getObjectType(v0);
    uint64_t v8 = sub_10008064C(v0, ObjectType, (uint64_t)&protocol descriptor for _CPRedactable);
    if (v8)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v9;
      uint64_t v12 = _swiftEmptyArrayStorage;
      id v13 = v1;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      {
        sub_100080AB8();
        sub_1000314C0();
        uint64_t v12 = v18;
      }

      unint64_t v14 = v12[2];
      unint64_t v15 = v14 + 1;
      if (v14 >= v12[3] >> 1)
      {
        sub_100080AB8();
        unint64_t v20 = v19;
        sub_1000314C0();
        unint64_t v14 = v20;
        uint64_t v12 = v21;
      }

      v12[2] = v15;
      id v16 = &v12[2 * v14];
      v16[4] = v10;
      v16[5] = v11;
      return v12;
    }
  }

  return v22;
}

void sub_10007FC1C()
{
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    sub_1000808A8();
    uint64_t v0 = sub_10006B828();
    sub_1000110A8();
  }

  else
  {
    sub_100080AA0();
  }

  if (!v0)
  {
LABEL_12:
    sub_1000144F0();
    return;
  }

  sub_1000AFA50(0, v0 & ~(v0 >> 63), 0);
  if ((v0 & 0x8000000000000000LL) == 0)
  {
    uint64_t v5 = 0LL;
    do
    {
      if ((v4 & 0xC000000000000001LL) != 0) {
        uint64_t v6 = sub_1000808E8();
      }
      else {
        uint64_t v6 = (uint64_t)sub_1000808BC();
      }
      uint64_t v7 = v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_1000AFA50(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage[2 * v9];
      *((void *)v10 + 4) = v7;
      *((void *)v10 + 5) = v2;
    }

    while (v0 != v5);
    goto LABEL_12;
  }

  __break(1u);
}

double sub_10007FD04@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = *v2;
  swift_bridgeObjectRetain(*v2);
  uint64_t v6 = sub_100080AFC();
  sub_10000EC64(v6, v7);
  sub_100080A14();
  if ((v5 & 1) != 0)
  {
    sub_100080948();
    sub_100080A78();
    int v8 = sub_10000941C(&qword_1001D10D8);
    sub_100080950(v8, v9, v10, v11, v12, v13, v14, v15, v23, v24);
    sub_100080A3C(*(void *)(v25 + 48) + 16 * a1);
    sub_1000108D8((_OWORD *)(*(void *)(v25 + 56) + 32 * a1), a2);
    uint64_t v16 = sub_100080AFC();
    _NativeDictionary._delete(at:)(v16, v17, v18, v19, v20);
    uint64_t v21 = *v2;
    *uint64_t v2 = v25;
    sub_100010B54(v21);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_10007FDE0()
{
  return sub_100080190();
}

uint64_t sub_10007FDF4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain(*v3);
  unint64_t v6 = sub_10000EC64(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *unint64_t v3 = 0x8000000000000000LL;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_10000941C(&qword_1001D10A0);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 16 * v6);
  _NativeDictionary._delete(at:)( v6,  v13,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  *unint64_t v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

#error "10007FF54: call analysis failed (funcsize=45)"
uint64_t sub_10007FFC4@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_10000ED5C();
  sub_100080A14();
  if ((v4 & 1) != 0)
  {
    swift_isUniquelyReferenced_nonNull_native(*v1);
    sub_100080A8C();
    uint64_t v5 = sub_10000941C(&qword_1001D10B0);
    sub_100080950(v5, v6, v7, v8, v9, v10, v11, v12, v24, v25);

    uint64_t v13 = *(void *)(v26 + 56);
    int v14 = type metadata accessor for TopicCacheEntry(0LL);
    sub_10006D028(v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * v2, a1);
    int v15 = sub_100009788(0LL, (unint64_t *)&qword_1001D10B8, &OBJC_CLASS___SFTopic_ptr);
    sub_10006D1AC();
    uint64_t v16 = sub_100080AFC();
    _NativeDictionary._delete(at:)(v16, v17, v15, v14, v18);
    sub_100080AAC();
    uint64_t v19 = a1;
    uint64_t v20 = 0LL;
    uint64_t v21 = 1LL;
    uint64_t v22 = v14;
  }

  else
  {
    type metadata accessor for TopicCacheEntry(0LL);
    uint64_t v19 = sub_100080A44();
  }

  return sub_100009654(v19, v20, v21, v22);
}

void sub_1000800D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_1000800E4(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = sub_10000ED7C(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  unint64_t v5 = v3;
  sub_100080948();
  sub_10008088C();
  int v6 = sub_10000941C(&qword_1001D10E8);
  sub_1000808C8(v6, v7, v8, v9, v10, v11, v12, v13, v17, v18);
  uint64_t v14 = sub_10008099C();
  uint64_t v15 = type metadata accessor for ResourceAccessNetworkSpan(v14);
  _NativeDictionary._delete(at:)(v5, v19, &type metadata for Int, v15, &protocol witness table for Int);
  sub_10008093C();
  return v2;
}

uint64_t sub_10008017C()
{
  return sub_100080190();
}

uint64_t sub_100080190()
{
  uint64_t v2 = v1;
  char v4 = v3;
  unint64_t v5 = v0;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRetain(*v5);
  unint64_t v12 = sub_10000EC64(v9, v7);
  LOBYTE(v7) = v13;
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    sub_100080A8C();
    Swift::Int v16 = *(void *)(v15 + 24);
    sub_10000941C(v4);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16);
    sub_100080A3C(*(void *)(v24 + 48) + 16 * v12);
    uint64_t v17 = *(void *)(v24 + 56);
    uint64_t v18 = v2(0LL);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))( v11,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v12,  v18);
    ((void (*)(unint64_t, void *, uint64_t, void *))_NativeDictionary._delete(at:))( v12,  &type metadata for String,  v18,  &protocol witness table for String);
    sub_100080AAC();
    sub_100080AB8();
  }

  else
  {
    v2(0LL);
    uint64_t v19 = sub_100080A44();
  }

  return sub_100009654(v19, v20, v21, v22);
}

void sub_1000802B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1000802C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = v10;
  swift_bridgeObjectRetain(*v10);
  uint64_t v16 = sub_100080AFC();
  unint64_t v18 = sub_10000EC64(v16, v17);
  char v20 = v19;
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    char v21 = sub_100080948();
    sub_100080A78();
    Swift::Int v23 = *(void *)(v22 + 24);
    sub_10000941C(v14);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(v21, v23);
    sub_100080A3C(*(void *)(a10 + 48) + 16 * v18);
    uint64_t v24 = v12(0LL);
    _NativeDictionary._delete(at:)(v18, a10, &type metadata for String, v24, &protocol witness table for String);
    *uint64_t v15 = a10;
    swift_bridgeObjectRelease();
  }

  sub_100080874();
}

#error "1000803FC: call analysis failed (funcsize=49)"
void sub_100080474(void *a1)
{
  sub_100080538(a1, (SEL *)&selRef_results);
}

void sub_100080490(void *a1)
{
}

void sub_1000804AC(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    unint64_t v3 = v2;
    uint64_t v4 = sub_10008098C();
    sub_100080A6C(v4);
  }

  sub_1000110D4();
}

void sub_100080500(void *a1)
{
}

void sub_10008051C(void *a1)
{
}

void sub_100080538(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    uint64_t v4 = sub_10008098C();
    sub_100080A6C(v4);
  }

  sub_1000110D4();
}

void sub_100080594(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setUrls:isa];
}

uint64_t sub_1000805EC(void *a1)
{
  id v1 = [a1 headers];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

  return v3;
}

uint64_t sub_10008064C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (swift_conformsToProtocol2(a2, a3)) {
    return a1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100080680( uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    sub_10005A624();
    uint64_t v15 = sub_10006B828();
    double result = sub_1000325E4();
    if (!v15) {
      return a3;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return a3;
    }
  }

  if (v13)
  {
    if (v14)
    {
      if (a3 < 0) {
        uint64_t v16 = a3;
      }
      else {
        uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
      }
      sub_10005A624();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v16);
      double result = sub_1000325E4();
      if (v17 <= a2)
      {
        if (v15 >= 1)
        {
          uint64_t v18 = sub_100080834(a5, a6);
          sub_10005A624();
          for (uint64_t i = 0LL; i != v15; ++i)
          {
            uint64_t v20 = sub_10000941C(a6);
            char v21 = (void (*)(_BYTE *, void))a7(v24, i, a3, v20, v18);
            id v23 = *v22;
            v21(v24, 0LL);
            *(void *)(v13 + 8 * i) = v23;
          }

          sub_1000325E4();
          return a3;
        }

        goto LABEL_19;
      }
    }

    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8LL) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10), v13);
        return a3;
      }

      __break(1u);
    }

    __break(1u);
LABEL_19:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000807F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CancellableStoreKey(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100080834(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_1000094A0(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

  ;
}

void sub_10008088C()
{
  void *v0 = 0x8000000000000000LL;
}

uint64_t sub_1000808A8()
{
  return swift_bridgeObjectRetain(v0);
}

id sub_1000808BC()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

BOOL sub_1000808C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

id sub_1000808DC(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_1000808E8()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000808F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, a3, v4, 0LL);
}

uint64_t sub_100080904(uint64_t a1)
{
  return _NativeDictionary._delete(at:)(v1, v2, v3, v4, a1);
}

void sub_10008091C(uint64_t a1, SEL *a2)
{
}

void sub_100080924()
{
}

uint64_t sub_10008093C()
{
  uint64_t v2 = *v0;
  uint64_t *v0 = v1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100080948()
{
  return swift_isUniquelyReferenced_nonNull_native(*v0);
}

BOOL sub_100080950(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_100080964@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8LL * *(void *)(a1 + 16) + 32;
}

  ;
}

uint64_t sub_10008098C()
{
  return sub_100009788(0LL, v1, v0);
}

uint64_t sub_10008099C()
{
  return 0LL;
}

  ;
}

uint64_t sub_1000809B8()
{
  return PBCodable.containedResults.getter();
}

id sub_1000809C8()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 2288), v1);
}

void sub_1000809D8()
{
}

  ;
}

  ;
}

uint64_t sub_100080A14()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_100080A24()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_100080A30()
{
  return v0();
}

uint64_t sub_100080A3C@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t sub_100080A44()
{
  return v0;
}

  ;
}

uint64_t sub_100080A6C(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, a1);
}

void sub_100080A78()
{
  void *v0 = 0x8000000000000000LL;
}

void sub_100080A8C()
{
  void *v0 = 0x8000000000000000LL;
}

  ;
}

uint64_t sub_100080AAC()
{
  uint64_t v2 = *v1;
  *uint64_t v1 = v0;
  return swift_bridgeObjectRelease(v2);
}

  ;
}

  ;
}

void sub_100080AD8()
{
}

uint64_t sub_100080AE4(uint64_t a1, uint64_t a2)
{
  return sub_10007FDF4(a1, a2);
}

NSDictionary sub_100080AF0()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_100080AFC()
{
  return v0;
}

uint64_t sub_100080B08()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100080B14()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_100080B20(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SessionType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (swift_unknownObjectWeakLoadStrong(v1 + 16))
  {
    sub_1000478B0();
    sub_1000C20C4(0LL, 0LL);
    sub_1000C27CC();
    uint64_t v8 = v7;
    swift_unknownObjectRelease();
    if (v8)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
      if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == enum case for SessionType.spotlight(_:))
      {
        id v9 = [v8 spotlightBiomeFBWritesEnabled];
        sub_1000145E0();

        return (uint64_t)v9;
      }

      sub_1000145E0();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }

    else
    {
      sub_1000145E0();
    }

    return 1LL;
  }

  if (qword_1001D04F0 != -1) {
    swift_once(&qword_1001D04F0, sub_1000343D8);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_1000093D0(v10, (uint64_t)qword_1001EDBA0);
  unint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.fault.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Assembly object has died", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return 0LL;
}

uint64_t sub_100080D04()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for BiomeStreamsLedger()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd18BiomeStreamsLedger);
}

uint64_t sub_100080D48(uint64_t a1)
{
  return sub_100080B20(a1) & 1;
}

void *sub_100080D6C(uint64_t a1, uint64_t a2)
{
  v2[3] = 0LL;
  swift_unknownObjectWeakInit(v2 + 2, 0LL);
  uint64_t v5 = type metadata accessor for Locker();
  uint64_t v6 = swift_allocObject(v5, 24LL, 7LL);
  uint64_t v7 = (_DWORD *)swift_slowAlloc(4LL, -1LL);
  *(void *)(v6 + sub_10000BDD4(v0 + 16) = v7;
  *uint64_t v7 = 0;
  v2[4] = v6;
  v2[5] = &_swiftEmptyDictionarySingleton;
  v2[3] = a2;
  swift_unknownObjectWeakAssign(v2 + 2, a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t sub_100080E04()
{
  uint64_t v1 = v0;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16LL);
  os_unfair_lock_lock(v2);
  swift_beginAccess(v1 + 40, v17, 0LL, 0LL);
  uint64_t v3 = swift_bridgeObjectRetain(*(void *)(v1 + 40));
  sub_10006D338(v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_10008129C);
  sub_10001450C();
  os_unfair_lock_unlock(v2);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
    uint64_t v8 = swift_bridgeObjectRetain(v18);
    v7(v8, ObjectType, v5);
    sub_1000110E0();
    sub_100010CA0();
  }

  id v9 = v18;
  uint64_t v10 = v18[2];
  if (v10)
  {
    swift_bridgeObjectRetain(v18);
    uint64_t v11 = v9 + 5;
    do
    {
      uint64_t v12 = *(v11 - 1);
      uint64_t v13 = *v11;
      uint64_t v14 = swift_getObjectType(v12);
      uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v13 + 72);
      swift_unknownObjectRetain(v12);
      v15(v14, v13);
      sub_100010CA0();
      v11 += 2;
      --v10;
    }

    while (v10);
    sub_10001450C();
  }

  sub_10001450C();
  sub_10000BDD4(v1 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100080F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    swift_unknownObjectRetain(v9);
    sub_1000340F8();
    uint64_t v12 = *(void *)(*a4 + 16);
    sub_100034174(v12);
    uint64_t v13 = *a4;
    *(void *)(v13 + sub_10000BDD4(v0 + 16) = v12 + 1;
    uint64_t v14 = v13 + 16 * v12;
    *(void *)(v14 + 32) = v9;
    *(void *)(v14 + 40) = v10;
    return swift_unknownObjectRelease();
  }

  else
  {
    sub_1000347F0();
    uint64_t v16 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter(v16, v17);
    uint64_t v18 = sub_10000941C(&qword_1001D0C10);
    uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
    *(_OWORD *)(v19 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_100042FE8();
    *(void *)(v19 + 32) = a1;
    *(void *)(v19 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:type:_:)("Detected unfinished activity with destroyed span at key %s", v20);

    return swift_bridgeObjectRelease();
  }

uint64_t sub_1000810A0()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for ActivityMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd15ActivityMonitor);
}

uint64_t type metadata accessor for ActivityMonitor.WeakReference()
{
  return objc_opt_self(&OBJC_CLASS____TtCC7parsecd15ActivityMonitor13WeakReference);
}

uint64_t sub_100081100( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void, void))
{
  uint64_t v17 = v16;
  swift_endAccess(v36);
  uint64_t result = swift_release();
  if (!v17)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1 + 16);
    if (Strong)
    {
      uint64_t v20 = *(void *)(a1 + 24);
      uint64_t ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t (**)(void, void), uint64_t, uint64_t))(v20 + 40))( a4,  a5,  ObjectType,  v20);
      sub_100010CA0();
    }

    uint64_t v22 = swift_getObjectType(a4);
    id v23 = (void *)a5[4](v22, a5);
    static os_log_type_t.error.getter(v23, v24);
    uint64_t v25 = sub_10000941C(&qword_1001D0C10);
    uint64_t v26 = swift_allocObject(v25, 112LL, 7LL);
    *(_OWORD *)(v26 + sub_10000BDD4(v0 + 16) = xmmword_10015D580;
    uint64_t v27 = a5[3](v22, a5);
    uint64_t v29 = v28;
    *(void *)(v26 + 56) = &type metadata for String;
    unint64_t v30 = sub_100042FE8();
    *(void *)(v26 + 64) = v30;
    *(void *)(v26 + 32) = v27;
    *(void *)(v26 + 40) = v29;
    uint64_t v31 = a5[5](v22, a5);
    uint64_t v32 = StaticString.description.getter(v31);
    *(void *)(v26 + 96) = &type metadata for String;
    *(void *)(v26 + 104) = v30;
    *(void *)(v26 + 72) = v32;
    *(void *)(v26 + 80) = v33;
    os_log(_:dso:log:type:_:)("Activity %s.%s never started or already ended", v35, v36[0]);

    return sub_1000110E0();
  }

  return result;
}

uint64_t sub_10008129C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100080F64(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1000812A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, void))
{
  uint64_t v8 = a4[7](a3, a4);
  uint64_t v10 = v9;
  uint64_t v11 = *(os_unfair_lock_s **)(*(void *)(a2 + 32) + 16LL);
  os_unfair_lock_lock(v11);
  sub_100081100(a2, v8, v10, a1, a4);
  os_unfair_lock_unlock(v11);
  sub_1000110E0();
  swift_unknownObjectRetain(a1);
  sub_100081350(a2, a1, a3, (uint64_t)a4);
  return swift_unknownObjectRelease();
}

uint64_t sub_100081350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 16);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(a2, a4, ObjectType, v9);
    return swift_unknownObjectRelease(v8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ResourceAccessOutcome(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0x93)
  {
    if (a2 + 109 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 109) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 110;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ResourceAccessOutcome(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 109 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 109) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0x93) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0x92) {
    return ((uint64_t (*)(void))((char *)&loc_100081494 + 4 * byte_100161495[v4]))();
  }
  *a1 = a2 + 109;
  return ((uint64_t (*)(void))((char *)sub_1000814C8 + 4 * asc_100161490[v4]))();
}

uint64_t sub_1000814C8(uint64_t result)
{
  *(_BYTE *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_1000814D0(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000814D8LL);
  }
  return result;
}

uint64_t sub_1000814E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000814ECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 109;
  return result;
}

uint64_t sub_1000814F0(uint64_t result)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_1000814F8(uint64_t result)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResourceAccessOutcome()
{
  return &type metadata for ResourceAccessOutcome;
}

uint64_t getEnumTagSinglePayload for ResourceAccessActivity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xD4)
  {
    if (a2 + 44 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 44) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 45;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for ResourceAccessActivity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD3) {
    return ((uint64_t (*)(void))((char *)&loc_1000815E8 + 4 * byte_10016149F[v4]))();
  }
  *a1 = a2 + 44;
  return ((uint64_t (*)(void))((char *)sub_10008161C + 4 * byte_10016149A[v4]))();
}

uint64_t sub_10008161C(uint64_t result)
{
  *(_BYTE *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_100081624(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x10008162CLL);
  }
  return result;
}

uint64_t sub_100081638(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100081640LL);
  }
  *(_BYTE *)uint64_t result = a2 + 44;
  return result;
}

uint64_t sub_100081644(uint64_t result)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_10008164C(uint64_t result)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResourceAccessActivity()
{
  return &type metadata for ResourceAccessActivity;
}

uint64_t sub_100081668(char a1)
{
  return qword_100161710[a1];
}

uint64_t sub_10008167C(char a1)
{
  return qword_100161878[a1];
}

uint64_t sub_100081690(uint64_t a1)
{
  uint64_t v1 = a1 - 496;
  uint64_t result = 29LL;
  switch(v1)
  {
    case 0LL:
      uint64_t result = 15LL;
      break;
    case 1LL:
      uint64_t result = 16LL;
      break;
    case 2LL:
      uint64_t result = 17LL;
      break;
    case 3LL:
      uint64_t result = 18LL;
      break;
    case 4LL:
      uint64_t result = 19LL;
      break;
    case 5LL:
      uint64_t result = 20LL;
      break;
    case 6LL:
      uint64_t result = 21LL;
      break;
    case 7LL:
      uint64_t result = 22LL;
      break;
    case 8LL:
      uint64_t result = 23LL;
      break;
    case 9LL:
      uint64_t result = 24LL;
      break;
    case 10LL:
      uint64_t result = 25LL;
      break;
    case 11LL:
      uint64_t result = 26LL;
      break;
    case 12LL:
      uint64_t result = 27LL;
      break;
    case 13LL:
      uint64_t result = 28LL;
      break;
    case 14LL:
      return result;
    case 15LL:
      uint64_t result = 30LL;
      break;
    case 16LL:
      uint64_t result = 31LL;
      break;
    case 17LL:
      uint64_t result = 32LL;
      break;
    case 18LL:
      uint64_t result = 33LL;
      break;
    case 19LL:
      uint64_t result = 34LL;
      break;
    case 20LL:
      uint64_t result = 35LL;
      break;
    case 54LL:
      uint64_t result = 36LL;
      break;
    case 55LL:
      uint64_t result = 37LL;
      break;
    case 56LL:
      uint64_t result = 38LL;
      break;
    case 57LL:
      uint64_t result = 39LL;
      break;
    case 58LL:
      uint64_t result = 40LL;
      break;
    case 59LL:
      uint64_t result = 41LL;
      break;
    case 60LL:
      uint64_t result = 42LL;
      break;
    case 61LL:
      uint64_t result = 43LL;
      break;
    case 62LL:
      uint64_t result = 44LL;
      break;
    case 79LL:
      uint64_t result = 45LL;
      break;
    case 80LL:
      uint64_t result = 46LL;
      break;
    case 81LL:
      uint64_t result = 47LL;
      break;
    case 84LL:
      uint64_t result = 48LL;
      break;
    case 85LL:
      uint64_t result = 49LL;
      break;
    case 86LL:
      uint64_t result = 50LL;
      break;
    case 87LL:
      uint64_t result = 51LL;
      break;
    default:
      uint64_t result = 110LL;
      break;
  }

  return result;
}

uint64_t sub_100081B7C(uint64_t a1)
{
  uint64_t result = 1LL;
  switch(a1)
  {
    case 0LL:
      uint64_t result = 0LL;
      break;
    case 1LL:
      return result;
    case 2LL:
      uint64_t result = 2LL;
      break;
    case 3LL:
      uint64_t result = 3LL;
      break;
    case 4LL:
      uint64_t result = 4LL;
      break;
    case 5LL:
      uint64_t result = 5LL;
      break;
    case 6LL:
      uint64_t result = 6LL;
      break;
    case 7LL:
      uint64_t result = 7LL;
      break;
    case 8LL:
      uint64_t result = 8LL;
      break;
    case 9LL:
      uint64_t result = 9LL;
      break;
    case 10LL:
      uint64_t result = 10LL;
      break;
    case 11LL:
      uint64_t result = 11LL;
      break;
    case 12LL:
      uint64_t result = 12LL;
      break;
    case 13LL:
      uint64_t result = 13LL;
      break;
    case 14LL:
      uint64_t result = 14LL;
      break;
    case 15LL:
      uint64_t result = 15LL;
      break;
    case 16LL:
      uint64_t result = 16LL;
      break;
    case 17LL:
      uint64_t result = 17LL;
      break;
    case 18LL:
      uint64_t result = 18LL;
      break;
    case 19LL:
      uint64_t result = 19LL;
      break;
    case 20LL:
      uint64_t result = 20LL;
      break;
    case 21LL:
      uint64_t result = 21LL;
      break;
    case 22LL:
    case 32LL:
    case 33LL:
    case 34LL:
    case 35LL:
    case 36LL:
    case 37LL:
    case 38LL:
    case 39LL:
    case 40LL:
    case 41LL:
    case 42LL:
    case 43LL:
    case 44LL:
    case 45LL:
    case 46LL:
    case 47LL:
    case 48LL:
    case 49LL:
    case 51LL:
    case 52LL:
    case 53LL:
    case 54LL:
    case 55LL:
    case 56LL:
    case 57LL:
    case 58LL:
    case 59LL:
    case 64LL:
      goto LABEL_10;
    case 23LL:
      uint64_t result = 22LL;
      break;
    case 24LL:
      uint64_t result = 23LL;
      break;
    case 25LL:
      uint64_t result = 24LL;
      break;
    case 26LL:
      uint64_t result = 25LL;
      break;
    case 27LL:
      uint64_t result = 26LL;
      break;
    case 28LL:
      uint64_t result = 27LL;
      break;
    case 29LL:
      uint64_t result = 28LL;
      break;
    case 30LL:
      uint64_t result = 29LL;
      break;
    case 31LL:
      uint64_t result = 30LL;
      break;
    case 50LL:
      uint64_t result = 31LL;
      break;
    case 60LL:
      uint64_t result = 32LL;
      break;
    case 61LL:
      uint64_t result = 33LL;
      break;
    case 62LL:
      uint64_t result = 34LL;
      break;
    case 63LL:
      uint64_t result = 35LL;
      break;
    case 65LL:
      uint64_t result = 36LL;
      break;
    case 66LL:
      uint64_t result = 37LL;
      break;
    case 67LL:
      uint64_t result = 38LL;
      break;
    default:
      switch(a1)
      {
        case 100LL:
          uint64_t result = 39LL;
          break;
        case 200LL:
          uint64_t result = 40LL;
          break;
        case 300LL:
          uint64_t result = 41LL;
          break;
        case 301LL:
          uint64_t result = 42LL;
          break;
        case 400LL:
          uint64_t result = 43LL;
          break;
        case 500LL:
          uint64_t result = 44LL;
          break;
        default:
LABEL_10:
          uint64_t result = 45LL;
          break;
      }

      break;
  }

  return result;
}

BOOL sub_100081D3C(char *a1, char *a2)
{
  return sub_10007E618(*a1, *a2);
}

void sub_100081D48()
{
}

void sub_100081D50(uint64_t a1)
{
}

void sub_100081D58(uint64_t a1)
{
}

uint64_t sub_100081D60@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100081690(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100081D88@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008167C(*v1);
  *a1 = result;
  return result;
}

BOOL sub_100081DB0(char *a1, char *a2)
{
  return sub_10007E5F4(*a1, *a2);
}

void sub_100081DBC()
{
}

void sub_100081DC4(uint64_t a1)
{
}

void sub_100081DCC(uint64_t a1)
{
}

uint64_t sub_100081DD4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100081B7C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100081DFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100081668(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_100081E28()
{
  unint64_t result = qword_1001D5008;
  if (!qword_1001D5008)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161640, &type metadata for ResourceAccessActivity);
    atomic_store(result, (unint64_t *)&qword_1001D5008);
  }

  return result;
}

unint64_t sub_100081E68()
{
  unint64_t result = qword_1001D5010;
  if (!qword_1001D5010)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001616E0, &type metadata for ResourceAccessOutcome);
    atomic_store(result, (unint64_t *)&qword_1001D5010);
  }

  return result;
}

uint64_t sub_100081EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [(id)objc_opt_self(TRIAllocationStatus) defaultProvider];
  BOOL v7 = (void *)swift_allocObject(&unk_1001B5610, 32LL, 7LL);
  v7[2] = a2;
  v7[3] = a3;
  aBlock[4] = sub_10008220C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10008203C;
  aBlock[3] = &unk_1001B5628;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain(v7);
  swift_release();
  aBlock[0] = 0LL;
  unsigned int v9 = [v6 enumerateActiveExperimentsForEnvironment:a1 error:aBlock block:v8];
  _Block_release(v8);
  swift_unknownObjectRelease(v6);
  id v10 = aBlock[0];
  id v11 = aBlock[0];
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v7, "", 100LL, 29LL, 103LL, 1LL);
  uint64_t result = swift_release();
  if ((a2 & 1) != 0) {
    __break(1u);
  }
  if (!v9)
  {
    _convertNSErrorToError(_:)(v10);

    return swift_willThrow();
  }

  return result;
}

void sub_10008203C(uint64_t a1, void *a2)
{
  int v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

id sub_100082080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [(id)objc_opt_self(TRIAllocationStatus) defaultProvider];
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_1000BCFEC;
  v12[3] = &unk_1001B55D8;
  unsigned int v9 = _Block_copy(v12);
  swift_retain(a4);
  swift_release();
  id v10 = [v8 addStatusUpdateHandlerForEnvironment:a1 queue:a2 block:v9];
  _Block_release(v9);
  swift_unknownObjectRelease(v8);
  return v10;
}

uint64_t sub_100082170(uint64_t a1)
{
  id v2 = [(id)objc_opt_self(TRIAllocationStatus) defaultProvider];
  [v2 removeUpdateHandlerForToken:a1];
  return swift_unknownObjectRelease(v2);
}

uint64_t type metadata accessor for TrialAllocationStatusProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd29TrialAllocationStatusProvider);
}

uint64_t sub_1000821E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000821F4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000821FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10008220C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for DevicePersistentData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for DevicePersistentData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

void *assignWithCopy for DevicePersistentData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[2];
  uint64_t v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for DevicePersistentData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for DevicePersistentData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DevicePersistentData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + sub_10000BDD4(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + sub_10000BDD4(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentData()
{
  return &type metadata for DevicePersistentData;
}

uint64_t sub_100082380(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  __chkstk_darwin(v13);
  sub_10000BEB8();
  if ((a2 & 1) != 0 || (unint64_t)(a1 - 21) <= 0xFFFFFFFFFFFFFFEBLL)
  {
    uint64_t v14 = sub_10007AE9C(20LL, v15, v16, v17, v18, v19, v20, v21);
    a1 = v14 + 1;
    if (!a4) {
      goto LABEL_8;
    }
  }

  else if (!a4)
  {
    goto LABEL_8;
  }

  UUID.init(uuidString:)(a3, a4);
  if (sub_100010708(v4, 1LL, v9) != 1)
  {
    sub_1000829CC(v4);
    return a1;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = sub_1000829CC(v4);
LABEL_8:
  uint64_t v22 = UUID.init()(v14);
  UUID.uuidString.getter(v22);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return a1;
}

uint64_t sub_1000824C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0LL;
  }
  if (a2 == a5 && a3 == a6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0LL);
  }
}

void UploadFrom.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t sub_100082524(uint64_t a1, unint64_t a2)
{
  if (a1 == 3158628 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(3158628LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x5555656369766564LL && a2 == 0xEA00000000004449LL)
  {
    swift_bridgeObjectRelease(0xEA00000000004449LL);
    return 1LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5555656369766564LL, 0xEA00000000004449LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10008260C(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x5555656369766564LL;
  }
  else {
    return 3158628LL;
  }
}

uint64_t sub_100082640(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_10000941C(&qword_1001D50D8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_10000BEB8();
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100019AFC(a1, v11);
  unint64_t v13 = sub_100082990();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DevicePersistentData.CodingKeys,  &type metadata for DevicePersistentData.CodingKeys,  v13,  v11,  v12);
  char v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v9);
  if (!v4)
  {
    char v16 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, a4, &v16, v9);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v5, v9);
}

uint64_t sub_100082758(void *a1)
{
  uint64_t v3 = sub_10000941C(&qword_1001D50C8);
  __chkstk_darwin(v3);
  sub_10000BEB8();
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100019AFC(a1, v4);
  unint64_t v6 = sub_100082990();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DevicePersistentData.CodingKeys,  &type metadata for DevicePersistentData.CodingKeys,  v6,  v4,  v5);
  if (v1)
  {
    sub_1000108B8(a1);
  }

  else
  {
    char v9 = 0;
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)(&v9, v3);
    char v8 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v8, v3);
    sub_100082B9C();
    sub_1000108B8(a1);
  }

  return v4;
}

void sub_100082884(uint64_t a1)
{
}

uint64_t sub_10008288C()
{
  return sub_10008260C(*v0);
}

uint64_t sub_100082894@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100082524(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000828B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.int.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000828DC(uint64_t a1)
{
  unint64_t v2 = sub_100082990();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100082904(uint64_t a1)
{
  unint64_t v2 = sub_100082990();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008292C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100082758(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_100082958(void *a1)
{
  return sub_100082640(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100082974(uint64_t *a1, uint64_t *a2)
{
  return sub_1000824C4(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

unint64_t sub_100082990()
{
  unint64_t result = qword_1001D50D0;
  if (!qword_1001D50D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161DE4, &type metadata for DevicePersistentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D50D0);
  }

  return result;
}

uint64_t sub_1000829CC(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DevicePersistentData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100082A58 + 4 * byte_100161C55[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100082A8C + 4 * byte_100161C50[v4]))();
}

uint64_t sub_100082A8C(uint64_t result)
{
  *(_BYTE *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_100082A94(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x100082A9CLL);
  }
  return result;
}

uint64_t sub_100082AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x100082AB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100082AB4(uint64_t result)
{
  *(_DWORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

uint64_t sub_100082ABC(uint64_t result)
{
  *(_WORD *)(result + sub_10007E30C(v1, v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentData.CodingKeys()
{
  return &type metadata for DevicePersistentData.CodingKeys;
}

unint64_t sub_100082ADC()
{
  unint64_t result = qword_1001D50E0;
  if (!qword_1001D50E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161DBC, &type metadata for DevicePersistentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D50E0);
  }

  return result;
}

unint64_t sub_100082B1C()
{
  unint64_t result = qword_1001D50E8;
  if (!qword_1001D50E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161D2C, &type metadata for DevicePersistentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D50E8);
  }

  return result;
}

unint64_t sub_100082B5C()
{
  unint64_t result = qword_1001D50F0;
  if (!qword_1001D50F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161D54, &type metadata for DevicePersistentData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D50F0);
  }

  return result;
}

uint64_t sub_100082B9C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_100082BAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URLError.Code(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = (char *)&v37 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  URLError.Code.init(rawValue:)([v1 code]);
  uint64_t v12 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v9, v11, v2);
  static URLError.Code.cancelled.getter(v12);
  sub_100082EE8();
  char v13 = sub_100082F28();
  uint64_t v14 = sub_100082F3C((uint64_t)v6);
  if ((v13 & 1) != 0)
  {
    sub_100082F3C((uint64_t)v9);
    sub_100082F3C((uint64_t)v11);
    return 59LL;
  }

  else
  {
    static URLError.Code.badURL.getter(v14);
    char v16 = sub_100082F28();
    uint64_t v17 = sub_100082F3C((uint64_t)v6);
    if ((v16 & 1) != 0)
    {
      sub_100082F3C((uint64_t)v9);
      sub_100082F3C((uint64_t)v11);
      return 60LL;
    }

    else
    {
      static URLError.Code.timedOut.getter(v17);
      char v18 = sub_100082F28();
      uint64_t v19 = sub_100082F3C((uint64_t)v6);
      if ((v18 & 1) != 0)
      {
        sub_100082F3C((uint64_t)v9);
        sub_100082F3C((uint64_t)v11);
        return 61LL;
      }

      else
      {
        static URLError.Code.unsupportedURL.getter(v19);
        char v20 = sub_100082F28();
        uint64_t v21 = sub_100082F3C((uint64_t)v6);
        if ((v20 & 1) != 0)
        {
          sub_100082F3C((uint64_t)v9);
          sub_100082F3C((uint64_t)v11);
          return 62LL;
        }

        else
        {
          static URLError.Code.cannotFindHost.getter(v21);
          char v22 = sub_100082F28();
          uint64_t v23 = sub_100082F3C((uint64_t)v6);
          if ((v22 & 1) != 0
            || (static URLError.Code.cannotConnectToHost.getter(v23),
                char v24 = sub_100082F28(),
                uint64_t v25 = sub_100082F3C((uint64_t)v6),
                (v24 & 1) != 0))
          {
            sub_100082F3C((uint64_t)v9);
            sub_100082F3C((uint64_t)v11);
            return 63LL;
          }

          else
          {
            static URLError.Code.networkConnectionLost.getter(v25);
            char v26 = sub_100082F28();
            uint64_t v27 = sub_100082F3C((uint64_t)v6);
            if ((v26 & 1) != 0)
            {
              sub_100082F3C((uint64_t)v9);
              sub_100082F3C((uint64_t)v11);
              return 64LL;
            }

            else
            {
              static URLError.Code.dnsLookupFailed.getter(v27);
              char v28 = sub_100082F28();
              uint64_t v29 = sub_100082F3C((uint64_t)v6);
              if ((v28 & 1) != 0)
              {
                sub_100082F3C((uint64_t)v9);
                sub_100082F3C((uint64_t)v11);
                return 65LL;
              }

              else
              {
                static URLError.Code.httpTooManyRedirects.getter(v29);
                char v30 = sub_100082F28();
                uint64_t v31 = sub_100082F3C((uint64_t)v6);
                if ((v30 & 1) != 0)
                {
                  sub_100082F3C((uint64_t)v9);
                  sub_100082F3C((uint64_t)v11);
                  return 66LL;
                }

                else
                {
                  static URLError.Code.resourceUnavailable.getter(v31);
                  char v32 = sub_100082F28();
                  uint64_t v33 = sub_100082F3C((uint64_t)v6);
                  if ((v32 & 1) != 0)
                  {
                    sub_100082F3C((uint64_t)v9);
                    sub_100082F3C((uint64_t)v11);
                    return 67LL;
                  }

                  else
                  {
                    static URLError.Code.notConnectedToInternet.getter(v33);
                    char v34 = sub_100082F28();
                    uint64_t v35 = sub_100082F3C((uint64_t)v6);
                    if ((v34 & 1) != 0)
                    {
                      sub_100082F3C((uint64_t)v9);
                      sub_100082F3C((uint64_t)v11);
                      return 68LL;
                    }

                    else
                    {
                      static URLError.Code.redirectToNonExistentLocation.getter(v35);
                      char v36 = sub_100082F28();
                      sub_100082F3C((uint64_t)v6);
                      sub_100082F3C((uint64_t)v9);
                      sub_100082F3C((uint64_t)v11);
                      if ((v36 & 1) != 0) {
                        return 69LL;
                      }
                      else {
                        return 22LL;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

unint64_t sub_100082EE8()
{
  unint64_t result = qword_1001D50F8;
  if (!qword_1001D50F8)
  {
    uint64_t v1 = type metadata accessor for URLError.Code(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URLError.Code, v1);
    atomic_store(result, (unint64_t *)&qword_1001D50F8);
  }

  return result;
}

uint64_t sub_100082F28()
{
  return dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v0, v3);
}

uint64_t sub_100082F3C(uint64_t a1)
{
  return v2(a1, v1);
}

void sub_100082F44()
{
}

uint64_t sub_100082F58()
{
  return sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
}

uint64_t sub_100082F6C()
{
  return sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
}

uint64_t sub_100082F80(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = sub_10000C4AC();
  a2(v3);
  return swift_release();
}

void sub_100082FC0()
{
}

void sub_100082FD4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = sub_10000C4AC();
  a2(v3);
  sub_10001683C();
  sub_100009A90();
}

uint64_t sub_100083008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v6 = v5;
  if (v4)
  {
    sub_1000471F0( a2,  a1 + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL));
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 1LL;
  }

  return sub_100009654(a2, v7, 1LL, v6);
}

double sub_10008307C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_100010758(a1 + 32, (uint64_t)a2);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

void sub_10008309C()
{
  uint64_t v116 = v3;
  uint64_t v124 = v4;
  uint64_t v127 = v5;
  uint64_t v126 = v6;
  uint64_t v115 = v7;
  uint64_t v123 = v8;
  uint64_t v128 = v9;
  uint64_t v11 = v10;
  uint64_t v12 = sub_10000941C((uint64_t *)&unk_1001D36C0);
  sub_1000A15E0(v12, (uint64_t)&v132);
  sub_100027160();
  __chkstk_darwin(v13);
  sub_10007732C((uint64_t)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v15);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v16);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v17);
  sub_10003D828();
  sub_100077030();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v112 - v20;
  __chkstk_darwin(v19);
  sub_1000A1C54();
  uint64_t v22 = sub_10006B428();
  sub_100010F98();
  __chkstk_darwin(v23);
  sub_100077030();
  __chkstk_darwin(v24);
  char v26 = (char *)&v112 - v25;
  uint64_t v27 = sub_100019F9C();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  sub_10006B61C();
  UserAgent.client.getter(v29);
  sub_1000A2738();
  sub_10007704C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
  uint64_t v30 = sub_10006B664();
  uint64_t v31 = ClientType.rawValue.getter(0LL);
  uint64_t v120 = v11;
  sub_1000A26C4((uint64_t)v26, v11);
  if (v30 == v31)
  {
    sub_1000A1A98((uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    sub_1000A22E4();
    uint64_t v32 = v125;
    goto LABEL_17;
  }

  uint64_t v114 = v0;
  uint64_t v33 = sub_1000A1E48();
  sub_1000A26C4(v33, v34);
  sub_1000A18B0(v1, 0LL);
  uint64_t v35 = v128;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v36 = v122;
  uint64_t v37 = v122 + *((int *)v121 + 12);
  os_log_type_t v38 = &unk_1001D5D20;
  uint64_t v39 = sub_100014590();
  sub_1000107D0(v39, v40, (uint64_t *)&unk_1001D5D20);
  uint64_t v41 = sub_100080AFC();
  sub_1000107D0(v41, v42, (uint64_t *)&unk_1001D5D20);
  sub_10005A148(v36, 1LL, v22);
  if (v47)
  {
    sub_1000A226C((uint64_t)v21);
    sub_1000A226C(v1);
    uint64_t v43 = sub_1000A2170();
    sub_1000A1A98(v43, v44);
    uint64_t v45 = sub_10005A148(v37, 1LL, v22);
    uint64_t v32 = v125;
    if (v47)
    {
      sub_1000A2198(v45, (uint64_t *)&unk_1001D5D20);
      sub_1000A22E4();
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v46 = v118;
    sub_1000107D0(v36, v118, (uint64_t *)&unk_1001D5D20);
    sub_10005A148(v37, 1LL, v22);
    if (!v47)
    {
      uint64_t v121 = v26;
      os_log_type_t v38 = v117;
      uint64_t v56 = sub_10006B688();
      sub_1000A19B8(v56, v57, v58);
      sub_100059F08( (unint64_t *)&unk_1001D55E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UserAgent);
      HIDWORD(v113) = dispatch thunk of static Equatable.== infix(_:_:)(v46, v38, v22, v59);
      sub_1000A26BC((uint64_t)v38);
      uint64_t v60 = sub_100080AFC();
      sub_100019C1C(v60, v61);
      sub_100019C1C(v1, (uint64_t *)&unk_1001D5D20);
      sub_1000A26BC((uint64_t)v121);
      sub_1000A26BC(v46);
      sub_100019C1C(v122, (uint64_t *)&unk_1001D5D20);
      sub_1000A22E4();
      uint64_t v32 = v125;
      if ((v113 & 0x100000000LL) != 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    }

    sub_1000A226C((uint64_t)v21);
    sub_1000A226C(v1);
    os_log_type_t v38 = *(void **)(v114 + 8);
    ((void (*)(char *, uint64_t))v38)(v26, v22);
    uint64_t v45 = ((uint64_t (*)(uint64_t, uint64_t))v38)(v46, v22);
    uint64_t v32 = v125;
  }

  sub_1000A2198(v45, (uint64_t *)&unk_1001D36C0);
  sub_1000A22E4();
LABEL_12:
  uint64_t v48 = sub_1000A2148((uint64_t)&v131);
  uint64_t v49 = v120;
  sub_1000A26C4(v48, v120);
  sub_1000A18B0((uint64_t)v38, 0LL);
  sub_10008502C();
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (v50)
  {
    id v51 = v50;
    UserAgent.fullString.getter();
    sub_10004EC84();
    id v52 = objc_allocWithZone(&OBJC_CLASS___PARBag);
    uint64_t v53 = (void *)sub_10006B688();
    sub_1000C4C48(v53, v54, v49);
    sub_100084F60(v55);
  }

  if (*(void *)(*(void *)(v35 + 64) + 32LL))
  {
    sub_10000C4AC();
    sub_1000B1BAC();
    sub_10001683C();
  }

void sub_1000838A0()
{
  os_log_type_t v5 = v0;
  sub_10000941C(&qword_1001D5ED0);
  sub_100027160();
  __chkstk_darwin(v6);
  sub_1000A1798();
  __chkstk_darwin(v7);
  sub_1000A1C64();
  uint64_t v8 = type metadata accessor for URL(0LL);
  sub_100010F98();
  __chkstk_darwin(v9);
  sub_10000BEB8();
  uint64_t v10 = sub_100019F9C();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  sub_100027160();
  __chkstk_darwin(v11);
  sub_10005A4F0();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v55 - v13;
  uint64_t v15 = *(void **)(v0 + 56);
  uint64_t v16 = sub_10000C4AC();
  static Client.parsecd.getter(v16);
  uint64_t v17 = sub_1000A166C();
  uint64_t v18 = sub_1000773F4(v17);
  uint64_t v19 = v15;
  uint64_t v20 = (os_log_s *)v18;
  sub_100041728(v19, 8, (uint64_t)v14, 0LL, 1);
  uint64_t v21 = sub_1000A28D4();
  if (!v21)
  {
    sub_1000A1D68(qword_1001D2E88);
LABEL_19:
    swift_release();
    goto LABEL_20;
  }

  uint64_t v22 = v21;
  sub_1000A24EC((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v59 = v2;
    id v25 = [v23 searchURL];

    if (v25)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v25);

      uint64_t v26 = 0LL;
    }

    else
    {
      uint64_t v26 = 1LL;
    }

    uint64_t v20 = (os_log_s *)v59;
    sub_10003B948(v4, v26);
    uint64_t v30 = sub_1000A24B8();
    sub_10004E6C4(v30, v31, v32);
    uint64_t v33 = sub_1000A2718();
    uint64_t v29 = sub_10005A148(v33, v34, v8);
    if (!v35)
    {
      uint64_t v57 = v1;
      uint64_t v39 = sub_1000A2164();
      sub_10005A3B0(v39, v40, v41);
      uint64_t v42 = sub_100009ACC((uint64_t)&unk_1001B5838, 24LL);
      *(void *)(v42 + sub_10000BDD4(v0 + 16) = 0LL;
      sub_1000498D4();
      uint64_t v44 = v43;
      static Client.parsecd.getter(v43);
      sub_1000A24EC((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
      uint64_t v58 = v22;
      uint64_t v56 = v44;
      if (v45)
      {
        uint64_t v46 = v45;
        unsigned int v47 = [v45 assumesHTTP3Capable];
      }

      else
      {
        unsigned int v47 = 0;
      }

      uint64_t v48 = sub_100009ACC((uint64_t)&unk_1001B5860, 24LL);
      sub_1000A2434(v48);
      uint64_t v49 = sub_100019E00((uint64_t)&unk_1001B5888);
      *(void *)(v49 + sub_10000BDD4(v0 + 16) = v48;
      *(void *)(v49 + 24) = v42;
      uint64_t v50 = sub_100009ACC((uint64_t)&unk_1001B5860, 24LL);
      sub_1000A2434(v50);
      id v51 = (uint64_t *)sub_100009ACC((uint64_t)&unk_1001B58B0, 40LL);
      v51[2] = (uint64_t)v14;
      v51[3] = v50;
      v55[1] = v42;
      v51[4] = v42;
      sub_100019F54(v42);
      sub_1000A14AC();
      sub_100010D08();
      sub_1000A1EA4();
      uint64_t v52 = v57;
      int v53 = v47;
      uint64_t v54 = v56;
      sub_10007BBF8(v3, v57, v53, (uint64_t)sub_10009FFA8, v49, (uint64_t)sub_10009FFD8, v51);

      sub_10001106C();
      sub_1000110B0();
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v3, v61);
      sub_100043584();
      sub_1000A1790();
      sub_100086C64();
      sub_100010D00();
      sub_1000A2404();
      sub_10005A26C(v52, v59[1]);
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v27 = sub_1000A2718();
    uint64_t v29 = sub_10003B948(v27, v28);
  }

  sub_1000A2724(v29, &qword_1001D5ED0);
  if (qword_1001D04B0 != -1) {
    swift_once(&qword_1001D04B0, sub_1000342AC);
  }
  uint64_t v36 = sub_100010ED4();
  sub_100010E78(v36, (uint64_t)qword_1001EDAE0);
  os_log_type_t v37 = sub_100014588();
  if (sub_10003EFD0(v37))
  {
    os_log_type_t v38 = (_WORD *)sub_100009B20(2LL);
    sub_100047288(v38);
    sub_1000A1394((void *)&_mh_execute_header, v20, v5, "warm not required, bag fetch in process");
    sub_100010C34(v22);
  }

  sub_1000A1D68(qword_1001D2E88);
  sub_100010D00();
  sub_1000471D0();
LABEL_20:
  sub_100009AA0();
}

void sub_100083C5C()
{
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10006B428();
  sub_100047144();
  __chkstk_darwin(v6);
  sub_100009B6C();
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v7 = sub_1000A197C();
  uint64_t v9 = sub_10005A148(v7, v8, v5);
  if (v10)
  {
    sub_1000A1878(v9, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    sub_1000770AC(v0, (uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_100082FD4( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__configuration,  (void (*)(uint64_t))sub_10004A3B8);
    if (!v11 || (uint64_t v12 = v11, v13 = [v11 parsecEnabled], v12, v13))
    {
      sub_10006B4EC();
      sub_1000A6578();
      sub_100010CA0();
    }

    sub_10007704C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  }

uint64_t sub_100083D74()
{
  *(void *)(v1 + 200) = v0;
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  *(void *)(v1 + 208) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A1A44();
  return sub_1000A1414(v3, v4, v5);
}

uint64_t sub_100083DC4()
{
  uint64_t v2 = *(void *)(v1 + 208);
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v3 = sub_10006B428();
  uint64_t v4 = sub_100010708(v2, 1LL, v3);
  int v5 = v4;
  sub_1000A2334(v4, (uint64_t *)&unk_1001D5D20);
  if (v5 == 1)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    uint64_t v8 = v7;
    uint64_t v9 = sub_10000941C(&qword_1001D10D0);
    uint64_t inited = (__n128 *)swift_initStackObject(v9, v1 + 16);
    uint64_t v11 = sub_1000A194C(inited, (__n128)xmmword_10015C7F0);
    unsigned int v13 = (__n128 *)sub_1000A1924(v11, (uint64_t)&type metadata for String, v12);
LABEL_10:
    v13[3].n128_u64[0] = v15;
    v13[3].n128_u64[1] = v16;
    uint64_t v31 = Dictionary.init(dictionaryLiteral:)( v13,  v14,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v32 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v33 = sub_10006B3A4(v6, v8, 1LL, v31);
    swift_willThrow(v33);
    swift_task_dealloc(*(void *)(v1 + 208));
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v1 + 200) + 16LL);
  *(void *)(v1 + 2sub_10000BDD4(v0 + 16) = Strong;
  if (!Strong)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    uint64_t v8 = v26;
    uint64_t v27 = sub_10000941C(&qword_1001D10D0);
    uint64_t v28 = (__n128 *)swift_initStackObject(v27, v1 + 96);
    unsigned int v13 = sub_1000A194C(v28, (__n128)xmmword_10015C7F0);
    uint64_t v14 = &type metadata for String;
    v13[2].n128_u64[0] = v29;
    v13[2].n128_u64[1] = v30;
    v13[4].n128_u64[1] = (unint64_t)&type metadata for String;
    uint64_t v15 = 0x6D65737341206F6ELL;
    unint64_t v16 = 0xEB00000000796C62LL;
    goto LABEL_10;
  }

  if (qword_1001D04E8 != -1) {
    swift_once(&qword_1001D04E8, sub_1000343B4);
  }
  uint64_t v18 = sub_100010ED4();
  uint64_t v19 = sub_1000093D0(v18, (uint64_t)qword_1001EDB88);
  *(void *)(v1 + 224) = v19;
  uint64_t v20 = (os_log_s *)v19;
  Logger.logObject.getter(v19);
  os_log_type_t v21 = sub_100014588();
  if (sub_100010DE4(v21))
  {
    uint64_t v22 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v22 = 0;
    sub_10001447C((void *)&_mh_execute_header, v20, v0, "Triggering Bag Forcefetch for parsec_tool", v22);
    sub_100010C34((uint64_t)v22);
  }

  sub_1000478B0();
  *(void *)(v1 + 232) = v23;
  uint64_t v24 = (void *)swift_task_alloc(dword_1001D6A44);
  *(void *)(v1 + 240) = v24;
  *uint64_t v24 = v1;
  v24[1] = sub_10008403C;
  return sub_1000C22E4();
}

uint64_t sub_10008403C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[22] = v2;
  v3[23] = a1;
  v3[24] = v1;
  uint64_t v4 = v3[30];
  v3[31] = v1;
  swift_task_dealloc(v4);
  if (!v1) {
    swift_unknownObjectRelease();
  }
  sub_1000A1A44();
  return swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000840AC(uint64_t a1)
{
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.debug.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (_WORD *)sub_100009B20(2LL);
    sub_100047288(v5);
    sub_1000A1394((void *)&_mh_execute_header, v3, v4, "Bag fetch completed, returning value to parsec_tool client");
    sub_100010C34(v1);
  }

  uint64_t v6 = *(void *)(v2 + 184);

  sub_100086C64();
  sub_1000471D0();
  sub_1000A183C();
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v6);
}

uint64_t sub_10008415C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000841A0(uint64_t a1, uint64_t a2)
{
  uint64_t v74 = a2;
  uint64_t v3 = sub_10000941C(&qword_1001D5528);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result(0LL);
  uint64_t v78 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v70 = (char *)&v56 - v11;
  __chkstk_darwin(v10);
  uint64_t v69 = (char *)&v56 - v12;
  uint64_t v13 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section(0LL);
  uint64_t v66 = *(void *)(v13 - 8);
  uint64_t v67 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v65 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = a1;
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    a1 = v74;
    uint64_t v17 = *(void *)(Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.getter(v14) + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v16 || v16 != v17) {
      return result;
    }
    unint64_t v19 = 0LL;
    unint64_t v61 = v59 & 0xC000000000000001LL;
    uint64_t v58 = v59 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v57 = v59 + 32;
    uint64_t v60 = v16;
    uint64_t v68 = v5;
    while (v19 != v16)
    {
      if (v61)
      {
        unint64_t v20 = v19;
        id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v59);
      }

      else
      {
        if (v19 >= *(void *)(v58 + 16)) {
          goto LABEL_43;
        }
        unint64_t v20 = v19;
        id v21 = *(id *)(v57 + 8 * v19);
      }

      uint64_t v22 = v21;
      id v64 = [v21 topic];

      a1 = v74;
      uint64_t v24 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.getter(v23);
      if (v20 >= *(void *)(v24 + 16)) {
        goto LABEL_42;
      }
      a1 = (uint64_t)v65;
      unint64_t v25 = v24 + ((*(unsigned __int8 *)(v66 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
      uint64_t v26 = *(void *)(v66 + 72);
      unint64_t v63 = v20;
      (*(void (**)(char *, unint64_t, uint64_t))(v66 + 16))(v65, v25 + v26 * v20, v67);
      uint64_t v27 = swift_bridgeObjectRelease();
      uint64_t v28 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.resultIdentifiers.getter(v27);
      uint64_t v29 = v28;
      uint64_t v73 = *(void *)(v28 + 16);
      if (v73)
      {
        unint64_t v30 = 0LL;
        uint64_t v72 = v28 + 32;
        uint64_t v31 = _swiftEmptyArrayStorage;
        uint64_t v71 = v28;
        while (v30 < *(void *)(v29 + 16))
        {
          unint64_t v77 = v30;
          id v32 = (uint64_t *)(v72 + 16 * v30);
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          uint64_t v35 = swift_bridgeObjectRetain(v34);
          a1 = v74;
          uint64_t v36 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.results.getter(v35);
          uint64_t v37 = *(void *)(v36 + 16);
          if (v37)
          {
            uint64_t v75 = v36;
            uint64_t v76 = v31;
            uint64_t v38 = v78;
            unint64_t v39 = v36 + ((*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
            swift_bridgeObjectRetain(v36);
            uint64_t v40 = *(void *)(v38 + 72);
            uint64_t v41 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v38 + 16);
            while (1)
            {
              uint64_t v42 = v41(v9, v39, v6);
              a1 = (uint64_t)v9;
              uint64_t v43 = Apple_Parsec_Spotlight_V1alpha_Result.identifier.getter(v42);
              if (v43 == v33 && v44 == v34) {
                break;
              }
              a1 = v44;
              char v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v33, v34, 0LL);
              swift_bridgeObjectRelease();
              if ((v46 & 1) != 0) {
                goto LABEL_27;
              }
              (*(void (**)(char *, uint64_t))(v78 + 8))(v9, v6);
              v39 += v40;
              if (!--v37)
              {
                swift_bridgeObjectRelease();
                uint64_t v47 = 1LL;
                uint64_t v5 = v68;
                uint64_t v31 = v76;
                goto LABEL_25;
              }
            }

            swift_bridgeObjectRelease();
LABEL_27:
            uint64_t v31 = v76;
            unint64_t v48 = v77;
            uint64_t v29 = v71;
            swift_bridgeObjectRelease();
            uint64_t v5 = v68;
            (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v68, v9, v6);
            uint64_t v47 = 0LL;
          }

          else
          {
            uint64_t v47 = 1LL;
LABEL_25:
            uint64_t v29 = v71;
            unint64_t v48 = v77;
          }

          sub_100009654((uint64_t)v5, v47, 1LL, v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (sub_100010708((uint64_t)v5, 1LL, v6) == 1)
          {
            sub_100019C1C((uint64_t)v5, &qword_1001D5528);
          }

          else
          {
            uint64_t v49 = v78;
            uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
            id v51 = v69;
            v50(v69, v5, v6);
            (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v70, v51, v6);
            if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
              uint64_t v31 = (void *)sub_100031854();
            }
            unint64_t v52 = v31[2];
            if (v52 >= v31[3] >> 1) {
              uint64_t v31 = (void *)sub_100031854();
            }
            v31[2] = v52 + 1;
            a1 = v78;
            v50( (char *)v31 + ((*(unsigned __int8 *)(a1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))
            + *(void *)(v78 + 72) * v52,
              v70,
              v6);
            (*(void (**)(char *, uint64_t))(a1 + 8))(v69, v6);
          }

          unint64_t v30 = v48 + 1;
          if (v30 == v73)
          {
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
        }

        __break(1u);
        break;
      }

      swift_bridgeObjectRelease();
      uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_38:
      int v53 = v64;
      unint64_t v54 = v63 + 1;
      a1 = v62;
      sub_10006C19C(v64, (uint64_t)v31);

      swift_bridgeObjectRelease();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      unint64_t v19 = v54;
      uint64_t v16 = v60;
      if (v54 == v60) {
        return result;
      }
    }

    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    if (a1 < 0) {
      uint64_t v55 = a1;
    }
    else {
      uint64_t v55 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v55);
    uint64_t v14 = swift_bridgeObjectRelease();
  }

uint64_t sub_10008471C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  id v87 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v72 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result(0LL);
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v86 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v72 - v14;
  uint64_t v73 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
  uint64_t v16 = *(void *)(v73 - 8);
  uint64_t v17 = __chkstk_darwin(v73);
  uint64_t v88 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((unint64_t)a1 >> 62)
  {
    uint64_t v69 = v11;
    if (a1 < 0) {
      uint64_t v70 = a1;
    }
    else {
      uint64_t v70 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v71 = v70;
    uint64_t v11 = v69;
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v71);
    uint64_t v17 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v19 == *(void *)(a2 + 16))
  {
    uint64_t v72 = v16;
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.init()(v17);
    if (v19)
    {
      uint64_t v20 = 0LL;
      unint64_t v77 = (*(unsigned __int8 *)(v82 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
      uint64_t v78 = v19;
      uint64_t v21 = a2 + v77;
      uint64_t v75 = *(void *)(v82 + 72);
      unint64_t v76 = a1 & 0xC000000000000001LL;
      uint64_t v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 16);
      uint64_t v84 = v15;
      uint64_t v80 = v5;
      uint64_t v81 = a1;
      uint64_t v79 = v6;
      uint64_t v85 = v11;
      do
      {
        uint64_t v22 = v83(v15, v21, v11);
        uint64_t v23 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.init()(v22);
        uint64_t v24 = Apple_Parsec_Spotlight_V1alpha_Result.identifier.getter(v23);
        uint64_t v26 = v25;
        uint64_t v27 = (void (*)(_BYTE *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.resultIdentifiers.modify(v89);
        uint64_t v29 = v28;
        uint64_t v30 = *v28;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v28);
        *uint64_t v29 = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000313E4(0, *(void *)(v30 + 16) + 1LL, 1, v30);
          uint64_t v30 = v58;
          *uint64_t v29 = v58;
        }

        unint64_t v33 = *(void *)(v30 + 16);
        unint64_t v32 = *(void *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          sub_1000313E4(v32 > 1, v33 + 1, 1, v30);
          uint64_t v30 = v59;
          *uint64_t v29 = v59;
        }

        *(void *)(v30 + sub_10000BDD4(v0 + 16) = v33 + 1;
        uint64_t v34 = v30 + 16 * v33;
        *(void *)(v34 + 32) = v24;
        *(void *)(v34 + 40) = v26;
        v27(v89, 0LL);
        if (v76) {
          id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v81);
        }
        else {
          id v35 = *(id *)(v81 + 8 * v20 + 32);
        }
        uint64_t v36 = v35;
        uint64_t v38 = v79;
        uint64_t v37 = v80;
        id v39 = [v35 contextId];

        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        uint64_t v42 = v41;

        Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.contextID.setter(v40, v42);
        (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v87, v10, v37);
        uint64_t v43 = (void (*)(_BYTE *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.modify(v89);
        uint64_t v45 = v44;
        uint64_t v46 = *v44;
        char v47 = swift_isUniquelyReferenced_nonNull_native(*v44);
        *uint64_t v45 = v46;
        if ((v47 & 1) == 0)
        {
          uint64_t v46 = sub_100031A00();
          *uint64_t v45 = v46;
        }

        unint64_t v48 = *(void *)(v46 + 16);
        if (v48 >= *(void *)(v46 + 24) >> 1)
        {
          uint64_t v46 = sub_100031A00();
          *uint64_t v45 = v46;
        }

        *(void *)(v46 + sub_10000BDD4(v0 + 16) = v48 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v38 + 32))( v46 + ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
        + *(void *)(v38 + 72) * v48,
          v87,
          v37);
        v43(v89, 0LL);
        v83(v86, (uint64_t)v84, v85);
        uint64_t v49 = (void (*)(_BYTE *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.results.modify(v89);
        id v51 = v50;
        uint64_t v52 = *v50;
        char v53 = swift_isUniquelyReferenced_nonNull_native(*v50);
        *id v51 = v52;
        if ((v53 & 1) == 0)
        {
          uint64_t v52 = sub_100031854();
          *id v51 = v52;
        }

        unint64_t v54 = *(void *)(v52 + 16);
        if (v54 >= *(void *)(v52 + 24) >> 1)
        {
          uint64_t v52 = sub_100031854();
          *id v51 = v52;
        }

        ++v20;
        *(void *)(v52 + sub_10000BDD4(v0 + 16) = v54 + 1;
        uint64_t v55 = v75;
        unint64_t v56 = v52 + v77 + v54 * v75;
        uint64_t v57 = v82;
        uint64_t v11 = v85;
        (*(void (**)(unint64_t, char *, uint64_t))(v82 + 32))(v56, v86, v85);
        v49(v89, 0LL);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v37);
        uint64_t v15 = v84;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v84, v11);
        v21 += v55;
      }

      while (v78 != v20);
    }

    uint64_t v67 = v73;
    uint64_t v68 = v74;
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v74, v88, v73);
    return sub_100009654(v68, 0LL, 1LL, v67);
  }

  else
  {
    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    uint64_t v61 = sub_1000093D0(v60, (uint64_t)qword_1001EDB70);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v64 = static os_log_type_t.error.getter(v62, v63);
    if (os_log_type_enabled(v62, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v64,  "TopicContextss and results should have the same count.",  v65,  2u);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    return sub_100009654(v74, 1LL, 1LL, v73);
  }

uint64_t sub_100084CF8(uint64_t a1)
{
  return sub_100084D18(a1, qword_1001EDDC0, 300LL);
}

uint64_t sub_100084D08(uint64_t a1)
{
  return sub_100084D18(a1, qword_1001EDDD8, 600LL);
}

uint64_t sub_100084D18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = sub_10006B8CC();
  sub_10001C180(v5, a2);
  uint64_t v6 = sub_1000272AC();
  *(void *)sub_1000093D0(v6, v7) = a3;
  return (*(uint64_t (**)(void))(*(void *)(v5 - 8) + 104LL))();
}

void sub_100084D74(void *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = v3;
  if (*(_BYTE *)(v3 + qword_1001EDD08 + 8)) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = *(void *)(v3 + qword_1001EDD08);
  }
  if ((a2 & 1) == 0)
  {
    id v8 = a1;
    uint64_t v9 = sub_1000A2590();
    a3(v9);
    sub_1000A0380(a1, 0);
    uint64_t v10 = qword_1001D2E88;
    char v11 = 2;
LABEL_6:
    *(_BYTE *)(v4 + v10) = v11;
    return;
  }

  sub_1000110C4();
  uint64_t v12 = sub_1000A1630();
  ((void (*)(uint64_t, void, uint64_t))a3)(v7, 0LL, v12);
  sub_1000A2154();
  if (*(void *)(v3 + qword_1001EDD00))
  {
    sub_10000C4AC();
    sub_10008F5F0((uint64_t)a1);
    sub_10001683C();
  }

  uint64_t v48 = (uint64_t)a1;
  sub_1000110C4();
  uint64_t v13 = sub_10000941C(&qword_1001D2B70);
  uint64_t v14 = sub_1000A1800((uint64_t)&v45, (uint64_t)&v48, v13, (uint64_t)&type metadata for ClientState.ResponseError);
  if ((_DWORD)v14)
  {
    sub_1000A1ABC();
    if ((_BYTE)v47)
    {
      uint64_t v30 = qword_1001D2E88;
      else {
        char v31 = 21;
      }
    }

    else
    {
      uint64_t v30 = qword_1001D2E88;
      char v31 = 19;
    }

    goto LABEL_20;
  }

  sub_1000A283C(v14, v15, v16, v17, v18, v19, v20, v21, v45, v46, v47, v48);
  uint64_t v48 = (uint64_t)a1;
  sub_1000110C4();
  if (!sub_1000A1800((uint64_t)&v45, (uint64_t)&v48, v13, (uint64_t)&_s13ResponseErrorON))
  {
    sub_1000A1ABC();
    sub_1000A283C(v35, v36, v37, v38, v39, v40, v41, v42, v45, v46, v47, v48);
    uint64_t v10 = qword_1001D2E88;
    char v11 = 24;
    goto LABEL_6;
  }

  if (v47 != 1)
  {
    uint64_t v43 = (void *)sub_1000A1F68();
    sub_10007E30C(v43, v44, 0);
    sub_1000A1ABC();
    uint64_t v30 = qword_1001D2E88;
    char v31 = 23;
LABEL_20:
    *(_BYTE *)(v4 + v30) = v31;
    goto LABEL_21;
  }

  char v32 = sub_100082BAC();
  unint64_t v33 = (void *)sub_1000A1F68();
  sub_10007E30C(v33, v34, 1);
  sub_1000A1ABC();
  *(_BYTE *)(v4 + qword_1001D2E88) = v32;
LABEL_21:
  sub_1000A283C(v22, v23, v24, v25, v26, v27, v28, v29, v45, v46, v47, v48);
}

void sub_100084F60(void *a1)
{
}

void sub_100084FA8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker) + 16LL);
  os_unfair_lock_lock(v1);
  sub_100085D78();
  os_unfair_lock_unlock(v1);
  sub_100009A90();
}

uint64_t sub_100084FE0(uint64_t a1)
{
  uint64_t v2 = sub_100019F9C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

void sub_10008502C()
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_10006B428();
  sub_100009B84();
  __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v8);
  sub_100032C48();
  uint64_t v79 = v9;
  sub_10003D810();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v71 - v11;
  uint64_t v13 = sub_100019F9C();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  sub_100032C48();
  uint64_t v78 = v15;
  sub_10003D810();
  __chkstk_darwin(v16);
  sub_10003D828();
  uint64_t v76 = v17;
  sub_10003D810();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v71 - v20;
  __chkstk_darwin(v19);
  sub_1000A1C64();
  sub_10000C4AC();
  sub_1000C1894();
  sub_10001683C();
  uint64_t v81 = v4;
  sub_1000107D0(v4, (uint64_t)v12, (uint64_t *)&unk_1001D5D20);
  uint64_t v22 = sub_10005A148((uint64_t)v12, 1LL, v5);
  uint64_t v80 = v1;
  if (v23)
  {
    sub_1000A2334(v22, (uint64_t *)&unk_1001D5D20);
    static Client.unknown.getter();
  }

  else
  {
    UserAgent.client.getter(v22);
    sub_10005A26C((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    sub_10005A6F0(v2, (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  }

  uint64_t v24 = v0;
  if (qword_1001D0500 != -1) {
    swift_once(&qword_1001D0500, sub_100034420);
  }
  uint64_t v25 = sub_100010ED4();
  sub_1000A15F8(v25, (uint64_t)qword_1001EDBD0);
  uint64_t v26 = v76;
  sub_1000A2498();
  unint64_t v77 = v27;
  v27();
  uint64_t v28 = sub_100019F54(v0);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  uint64_t v30 = v13;
  os_log_type_t v31 = static os_log_type_t.default.getter(v29);
  if (sub_1000A19C8(v29))
  {
    uint64_t v32 = sub_100009B20(22LL);
    uint64_t v73 = v2;
    uint64_t v33 = v30;
    uint64_t v71 = v30;
    uint64_t v34 = v32;
    uint64_t v35 = sub_100009B20(64LL);
    uint64_t v72 = v35;
    v84[0] = v35;
    *(_DWORD *)uint64_t v34 = 136446466;
    uint64_t v36 = Client.type.getter(v35);
    uint64_t v82 = ClientType.rawValue.getter(v36);
    uint64_t v74 = v5;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt,  &protocol witness table for UInt);
    uint64_t v82 = sub_1000A25C8(v37, v38);
    sub_1000A223C((uint64_t)&v82, (uint64_t)v83);
    sub_100009B3C();
    uint64_t v39 = v26;
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    uint64_t v41 = v33;
    uint64_t v2 = v73;
    v40(v39, v41);
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v42 = sub_1000A15C0();
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v44 = v43;
    uint64_t v45 = v42;
    uint64_t v46 = v40;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v44);
    uint64_t v82 = sub_1000A25C8(v47, v48);
    uint64_t v5 = v74;
    sub_1000A223C((uint64_t)&v82, (uint64_t)v83);
    sub_100019D80(v0);
    sub_100009B3C();
    sub_100019F44( (void *)&_mh_execute_header,  v29,  v31,  "userAgent changed to %{public}s for session %s",  (uint8_t *)v34);
    uint64_t v49 = v72;
    sub_10004EE00(v72);
    sub_100010C34(v49);
    sub_100010C34(v34);

    uint64_t v50 = v71;
  }

  else
  {
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v46(v26, v30);

    sub_100019D80(v0);
    uint64_t v50 = v30;
  }

  uint64_t v51 = v78;
  uint64_t v52 = v79;
  uint64_t v53 = sub_1000A1BDC( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  uint64_t v54 = Client.type.getter(v53);
  v46(v51, v50);
  sub_1000A2738();
  uint64_t v55 = ClientType.rawValue.getter(v54);
  uint64_t v56 = sub_10006B664();
  uint64_t v57 = v80;
  if (v55 != v56)
  {
    sub_10008557C(v24, (uint64_t)v84);
    uint64_t v58 = v24 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_100010BE4(v24 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController, (uint64_t)&v82, 33LL);
    sub_100010ABC((uint64_t)v84, v58, (uint64_t *)&unk_1001D44A0);
    swift_endAccess(&v82);
  }

  ((void (*)(uint64_t, uint64_t, uint64_t))v77)(v51, v2, v50);
  sub_100084FE0(v51);
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (v59)
  {
    uint64_t v60 = v59;
    sub_1000A1BDC( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    if (sub_100010708(v52, 1LL, v5))
    {
      sub_100019C1C(v52, (uint64_t *)&unk_1001D5D20);
      uint64_t v61 = 0LL;
      uint64_t v62 = 0LL;
    }

    else
    {
      uint64_t v63 = v75;
      uint64_t v64 = sub_1000A217C();
      sub_10005A3B0(v64, v65, v66);
      sub_100019C1C(v52, (uint64_t *)&unk_1001D5D20);
      uint64_t v61 = UserAgent.fullString.getter();
      uint64_t v67 = v5;
      uint64_t v62 = v68;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v63, v67);
    }

    objc_allocWithZone(&OBJC_CLASS___PARBag);
    id v69 = v60;
    sub_1000C4C48(v69, v61, v62);
    sub_100084F60(v70);
  }

  sub_100019C1C(v81, (uint64_t *)&unk_1001D5D20);
  v46(v2, v50);
  sub_100009AA0();
}

double sub_10008557C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Client(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UserAgent(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  if (sub_100010708((uint64_t)v10, 1LL, v11) == 1)
  {
    sub_100019C1C((uint64_t)v10, (uint64_t *)&unk_1001D5D20);
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_1000093D0(v15, (uint64_t)qword_1001EDC60);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "ClientState configured with nil useragent", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    goto LABEL_13;
  }

  uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v22 = UserAgent.client.getter(v21);
  uint64_t v23 = Client.type.getter(v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v23 == 1)
  {
    uint64_t v24 = type metadata accessor for SafariEngagedSuggestionController();
    swift_allocObject(v24, 25LL, 7LL);
    uint64_t v27 = swift_retain(a1);
    uint64_t v26 = sub_10007745C(v27);
    goto LABEL_11;
  }

  if (v23 == 2)
  {
    uint64_t v24 = type metadata accessor for SpotlightEngagedSuggestionController();
    swift_allocObject(v24, 25LL, 7LL);
    uint64_t v25 = swift_retain(a1);
    uint64_t v26 = sub_100029140(v25);
LABEL_11:
    *(void *)(a2 + 24) = v24;
    *(void *)(a2 + 32) = &off_1001B1208;
    *(void *)a2 = v26;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return result;
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
LABEL_13:
  *(void *)(a2 + 32) = 0LL;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + sub_10000BDD4(v0 + 16) = 0u;
  return result;
}

void sub_10008583C(void *a1)
{
  id v2 = a1;
  sub_10000C4AC();
  sub_10004B668(a1);
  sub_10001683C();
  sub_1000A1674(v2);
}

void sub_100085880()
{
  id v2 = v0;
  uint64_t v56 = v3;
  uint64_t v57 = v4;
  uint64_t v6 = v5;
  uint64_t v58 = v7;
  sub_10000941C(&qword_1001D5288);
  sub_100027160();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1000A151C();
  uint64_t v10 = type metadata accessor for SessionType(v9);
  uint64_t v59 = *(void *)(v10 - 8);
  sub_100027160();
  __chkstk_darwin(v11);
  sub_100014428();
  uint64_t v60 = v12;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F9C();
  sub_100027160();
  __chkstk_darwin(v16);
  sub_10006B61C();
  v0[3] = 0LL;
  sub_1000A24AC();
  uint64_t v17 = OBJC_IVAR____TtC7parsecd11ClientState__bag;
  uint64_t v18 = sub_10000941C(&qword_1001D5290);
  sub_100019E00(v18);
  uint64_t v19 = sub_10004ED84();
  *(void *)((char *)v0 + v17) = sub_10005FD0C(v19);
  uint64_t v20 = OBJC_IVAR____TtC7parsecd11ClientState__client;
  static Client.unknown.getter();
  uint64_t v21 = sub_10000941C(&qword_1001D5298);
  sub_1000773F4(v21);
  sub_10005FCBC();
  *(void *)((char *)v0 + v20) = v22;
  uint64_t v23 = OBJC_IVAR____TtC7parsecd11ClientState__userAgent;
  uint64_t v24 = sub_10006B428();
  sub_10002FC40((uint64_t)v15, v25, v26, v24);
  uint64_t v27 = sub_10000941C(&qword_1001D52A0);
  sub_1000773F4(v27);
  sub_10005FC74();
  *(void *)((char *)v0 + v23) = v28;
  uint64_t v29 = (uint64_t)v0 + OBJC_IVAR____TtC7parsecd11ClientState_lastNetworkRequest;
  uint64_t v30 = type metadata accessor for Date(0LL);
  sub_10002FC40(v29, v31, v32, v30);
  uint64_t v33 = OBJC_IVAR____TtC7parsecd11ClientState__configuration;
  uint64_t v34 = sub_10000941C(&qword_1001D52A8);
  sub_100019E00(v34);
  uint64_t v35 = (void *)sub_10004ED84();
  sub_10000B73C(v35);
  *(void *)((char *)v2 + v33) = v36;
  uint64_t v37 = (char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  *((void *)v37 + 4) = 0LL;
  *(_OWORD *)uint64_t v37 = 0u;
  *((_OWORD *)v37 + sub_10007E30C(v1, v0, 1) = 0u;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy) = 0LL;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy) = 0LL;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy) = 0LL;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_lookupSearchProxy) = 0LL;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_safariSearchProxy) = 0LL;
  uint64_t v38 = OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker;
  uint64_t v39 = type metadata accessor for Locker();
  uint64_t v40 = sub_100009ACC(v39, 24LL);
  uint64_t v41 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v40 + sub_10000BDD4(v0 + 16) = v41;
  _DWORD *v41 = 0;
  *(void *)((char *)v2 + v38) = v40;
  uint64_t v42 = v56;
  v2[3] = v57;
  sub_1000A24C4();
  sub_1000489B0();
  v2[7] = v43;
  uint64_t v44 = type metadata accessor for ClientSessionManager();
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  uint64_t v63 = 0LL;
  sub_100009ACC(v44, 153LL);
  sub_1000A2660();
  sub_10003EF98();
  uint64_t v45 = v58;
  sub_10009F704();
  v2[8] = v46;
  v2[9] = &off_1001B6BC8;
  v2[5] = v45;
  v2[6] = v6;
  sub_10003EF98();
  v2[4] = dispatch_semaphore_create(0LL);
  sub_1000107D0(v42, v1, &qword_1001D5288);
  sub_10005A148(v1, 1LL, v10);
  if (v47)
  {
    uint64_t v51 = v60;
    uint64_t v48 = sub_1000A2380();
    uint64_t v50 = SessionType.init(withClientIdentifier:)(v48, v49);
    sub_1000A2198(v50, &qword_1001D5288);
  }

  else
  {
    sub_1000110E0();
    uint64_t v51 = v60;
    uint64_t v52 = sub_100014590();
    sub_1000A2490(v52, v53);
  }

  sub_1000A2490((uint64_t)v2 + OBJC_IVAR____TtC7parsecd11ClientState_sessionType, v51);
  sub_100084FA8();
  uint64_t v54 = sub_1000145E0();
  sub_1000A225C(v54, &qword_1001D5288);
  sub_100009AA0();
}

uint64_t sub_100085BC8()
{
  if (swift_unknownObjectWeakLoadStrong(v0 + 16))
  {
    id v1 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    sub_1000A1650(v1, "removeObserver:");
    sub_1000471D0();
  }

  sub_10000BDD4(v0 + 16);
  sub_1000A2028();
  swift_bridgeObjectRelease();
  sub_1000A25A4();
  swift_unknownObjectRelease();
  uint64_t v2 = sub_1000A15C0();
  sub_100019DA4(v2);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState__bag);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState__client);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState__userAgent);
  sub_100019C1C(v0 + OBJC_IVAR____TtC7parsecd11ClientState_lastNetworkRequest, &qword_1001D32B0);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState__configuration);
  sub_100019C1C(v0 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController, (uint64_t *)&unk_1001D44A0);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_lookupSearchProxy);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_safariSearchProxy);
  sub_1000A1740(OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker);
  return v0;
}

uint64_t sub_100085D14()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100085D38()
{
  return type metadata accessor for ClientState(0LL);
}

uint64_t type metadata accessor for ClientState(uint64_t a1)
{
  uint64_t result = qword_1001D5138;
  if (!qword_1001D5138) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientState);
  }
  return result;
}

void sub_100085D78()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100019F9C();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  if (!sub_10005A61C()) {
    goto LABEL_19;
  }
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  uint64_t v8 = v7;
  if (!v7)
  {
    sub_1000478B0();
    sub_1000C20C4(0LL, 0LL);
    sub_1000C27CC();
    uint64_t v8 = v9;
    sub_100010CA0();
    if (!v8) {
      goto LABEL_6;
    }
  }

  sub_100090244(v8);
  if (v11 >> 60 != 15)
  {
    uint64_t v17 = v10;
    unint64_t v18 = v11;
    uint64_t v19 = sub_1000A1BDC( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
    uint64_t v20 = Client.type.getter(v19);
    sub_10003D850(v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    switch(v20)
    {
      case 4LL:
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v30 = sub_10004ED84();
        uint64_t v31 = type metadata accessor for PegasusProxyForLookupSearch(v30);
        sub_1000773F4(v31);
        uint64_t v32 = sub_1000A15C8();
        uint64_t v33 = PegasusProxyForLookupSearch.init(bagData:urlSession:)(v32);
        sub_1000A1728(v33);
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v34 = sub_1000A1F1C();
        sub_1000773F4(v34);
        sub_1000A1B94();
        break;
      case 2LL:
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v35 = sub_10004ED84();
        uint64_t v36 = type metadata accessor for PegasusProxyForSpotlightZKW(v35);
        sub_1000773F4(v36);
        uint64_t v37 = sub_1000A15C8();
        uint64_t v38 = PegasusProxyForSpotlightZKW.init(bagData:urlSession:)(v37);
        sub_1000A1728(v38);
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v39 = sub_1000A1F1C();
        sub_1000773F4(v39);
        sub_1000A1B94();
        break;
      case 1LL:
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v21 = sub_10004ED84();
        uint64_t v22 = type metadata accessor for PegasusProxyForSafariAssistant(v21);
        sub_1000773F4(v22);
        uint64_t v23 = sub_1000A15C8();
        uint64_t v24 = PegasusProxyForSafariAssistant.init(bagData:urlSession:)(v23);
        sub_1000A1728(v24);
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v25 = sub_10004ED84();
        uint64_t v26 = type metadata accessor for PegasusProxyForSafariSearch(v25);
        sub_1000773F4(v26);
        uint64_t v27 = sub_1000A15C8();
        uint64_t v28 = PegasusProxyForSafariSearch.init(bagData:urlSession:)(v27);
        sub_1000A1728(v28);
        sub_1000A1504();
        sub_1000A18DC();
        uint64_t v29 = sub_1000A1F1C();
        sub_1000773F4(v29);
        sub_1000A1B94();
        break;
      default:

        sub_100010A1C(v17, v18);
        sub_10001449C();
        goto LABEL_19;
    }

    uint64_t v40 = PegasusProxyForEngagement.init(bagData:urlSession:client:)();

    sub_100010A1C(v17, v18);
    sub_10001449C();
    *(void *)(v1 + OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy) = v40;
    swift_release();
LABEL_19:
    sub_100009AA0();
    return;
  }

LABEL_6:
  if (qword_1001D04B0 != -1) {
    swift_once(&qword_1001D04B0, sub_1000342AC);
  }
  uint64_t v12 = sub_100010ED4();
  uint64_t v41 = (os_log_s *)sub_100010E78(v12, (uint64_t)qword_1001EDAE0);
  os_log_type_t v14 = static os_log_type_t.error.getter(v41, v13);
  if (os_log_type_enabled(v41, v14))
  {
    uint64_t v15 = (_WORD *)sub_100009B20(2LL);
    sub_100047288(v15);
    sub_1000A1394((void *)&_mh_execute_header, v41, v14, "couldn't initialize Pegasus Proxy, missing bag data");
    sub_100010C34(v1);
    sub_10001449C();
    sub_100009AA0();
  }

  else
  {

    sub_100009AA0();
    swift_unknownObjectRelease();
  }

void sub_1000860A4()
{
  uint64_t v4 = (uint64_t)v0;
  uint64_t v26 = v5;
  uint64_t v6 = sub_10004ED84();
  uint64_t v25 = type metadata accessor for Requestor(v6);
  uint64_t v7 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  sub_100009B54();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v8);
  sub_1000A22A8();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - v11;
  __chkstk_darwin(v10);
  sub_1000A1C54();
  id v13 = v0;
  sub_10008583C(v0);
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v14 = sub_10006B428();
  uint64_t v15 = (void *)sub_100010708(v3, 1LL, v14);
  sub_100019C1C(v3, (uint64_t *)&unk_1001D5D20);
  if ((_DWORD)v15 == 1 || (uint64_t v15 = v13, (sub_1000862B4() & 1) != 0))
  {
    sub_1000107D0(v26, v2, (uint64_t *)&unk_1001D5D20);
    uint64_t v16 = sub_10005A148(v2, 1LL, v14);
    if (v17)
    {
      id v18 = sub_1000A1434(v16, "userAgent");
      sub_10005A614((uint64_t)v18);

      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v1, enum case for Requestor.parsecd(_:), v25);
      uint64_t v19 = sub_1000A2228();
      uint64_t v20 = UserAgent.init(_:requestor:)(v19);
      sub_1000A215C(v20, (uint64_t *)&unk_1001D5D20);
    }

    else
    {
      uint64_t v21 = sub_1000A2244();
      sub_1000A2234(v21, v22, v23);
    }

    sub_100009654((uint64_t)v12, 0LL, 1LL, v14);
    sub_10008502C();
    sub_10008557C(v4, (uint64_t)v28);
    uint64_t v24 = v4 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_100010BE4(v24, (uint64_t)v27, 33LL);
    sub_100010ABC((uint64_t)v28, v24, (uint64_t *)&unk_1001D44A0);
    swift_endAccess(v27);
  }

  sub_100009AA0();
}

uint64_t sub_1000862B4()
{
  id v1 = [v0 identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v4 = v3;

  if (v2 == 0x745F636573726170LL && v4 == 0xEB000000006C6F6FLL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = sub_10005A06C(v2, v4, 0x745F636573726170LL, 0xEB000000006C6F6FLL);
    sub_1000325E4();
    return v6 & 1;
  }

Swift::Int sub_10008637C()
{
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  char v6 = v5;
  uint64_t v7 = sub_10006B428();
  sub_100047144();
  __chkstk_darwin(v8);
  sub_100010FCC();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v9);
  sub_100009B54();
  sub_10008FF34(v6);
  if (!v10)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    goto LABEL_7;
  }

  uint64_t v11 = v10;
  v25[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
  v25[1] = v12;
  AnyHashable.init<A>(_:)(v25);
  sub_10000BEF0((uint64_t)v26, v11, &v27);
  sub_100009B3C();
  uint64_t v13 = sub_10000BD34((uint64_t)v26);
  if (!*((void *)&v28 + 1))
  {
LABEL_7:
    sub_100019C1C((uint64_t)&v27, (uint64_t *)&unk_1001D32C0);
    return OS_dispatch_semaphore.signal()();
  }

  uint64_t v14 = sub_100009B34(v13, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
  if ((swift_dynamicCast(v26, &v27, (char *)&type metadata for Any + 8, v14, 6LL) & 1) != 0)
  {
    uint64_t v15 = (void *)v26[0];
    sub_1000A1D60( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    uint64_t v16 = sub_100010708(v1, 1LL, v7);
    if ((_DWORD)v16)
    {
      sub_1000A1A50(v16, (uint64_t *)&unk_1001D5D20);
      uint64_t v17 = 0LL;
      uint64_t v18 = 0LL;
    }

    else
    {
      uint64_t v19 = sub_10005A274(v0, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
      sub_1000A1A50(v19, (uint64_t *)&unk_1001D5D20);
      uint64_t v17 = UserAgent.fullString.getter(v20);
      uint64_t v18 = v21;
      sub_10004729C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    }

    objc_allocWithZone(&OBJC_CLASS___PARBag);
    id v22 = v15;
    sub_1000C4C48(v22, v17, v18);
    sub_100084F60(v23);
  }

  return OS_dispatch_semaphore.signal()();
}

void sub_1000865A8(uint64_t a1)
{
  v6[0] = &unk_100161EE0;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = &unk_100161EF8;
  void v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[4] = &unk_100161EF8;
  uint64_t v2 = type metadata accessor for SessionType(319LL);
  if (v3 <= 0x3F)
  {
    v6[5] = *(void *)(v2 - 8) + 64LL;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[8] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_100026D28(319LL);
    if (v5 <= 0x3F)
    {
      v6[9] = *(void *)(v4 - 8) + 64LL;
      v6[10] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[11] = &unk_100161F10;
      v6[12] = &unk_100161F28;
      v6[13] = &unk_100161F28;
      v6[14] = &unk_100161F28;
      v6[15] = &unk_100161F28;
      v6[16] = &unk_100161F28;
      v6[17] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 18LL, v6, a1 + 80);
    }
  }

unint64_t sub_100086694()
{
  unint64_t result = qword_1001D5250;
  if (!qword_1001D5250)
  {
    unint64_t result = swift_getWitnessTable(&unk_10015EFA8, &type metadata for ResourceAccessActivity);
    atomic_store(result, (unint64_t *)&qword_1001D5250);
  }

  return result;
}

void sub_1000866D0(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

uint64_t sub_10008670C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v5);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for UserAgent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v28, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (!result) {
    return result;
  }
  uint64_t v13 = result;
  uint64_t v14 = (void **)(a3 + 16);
  id v15 = sub_1000869C4();
  swift_beginAccess(v14, v27, 1LL, 0LL);
  uint64_t v16 = *v14;
  *uint64_t v14 = v15;

  swift_beginAccess(v14, v26, 0LL, 0LL);
  if (*v14) {
    sub_100090108(0LL, 0xE000000000000000LL, *v14);
  }
  swift_beginAccess(v14, v25, 0LL, 0LL);
  if (*v14) {
    [*v14 setTriggerEvent:19];
  }
  swift_beginAccess(v14, v24, 0LL, 0LL);
  if (*v14) {
    [*v14 setEndpoint:12];
  }
  swift_beginAccess(v14, v23, 0LL, 0LL);
  uint64_t v17 = *v14;
  if (!*v14) {
    return swift_release();
  }
  id v18 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  id v19 = v17;
  id v20 = [v18 initWithCodable:v19];
  [v20 setQueryId:0];
  if (!v20)
  {

    return swift_release();
  }

  swift_unknownObjectRetain(*(void *)(v13 + 64));
  id v21 = v20;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v22 = sub_100010708((uint64_t)v7, 1LL, v8);
  if ((_DWORD)v22 == 1)
  {
    parsecdUserAgent.getter(v22);
    sub_100019C1C((uint64_t)v7, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
  }

  sub_1000A5CB4();

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

id sub_1000869C4()
{
  id v2 = [(id)objc_opt_self(_CPStartNetworkSearchFeedback) startSearchFeedbackWithUUID];
  URLRequest.url.getter();
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = sub_1000A197C();
  uint64_t v6 = sub_10005A148(v4, v5, v3);
  if (v7)
  {
    sub_1000A1878(v6, &qword_1001D5ED0);
    NSString v8 = 0LL;
  }

  else
  {
    URL.absoluteString.getter(v6);
    sub_10005A26C(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL));
    sub_1000A2380();
    NSString v8 = String._bridgeToObjectiveC()();
    sub_1000110E0();
  }

  sub_1000A1650(v2, "setUrl:");

  uint64_t v9 = URLRequest.allHTTPHeaderFields.getter();
  Class isa = (Class)v9;
  if (v9)
  {
    sub_10008F7F8(v9);
    sub_100009B3C();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1000110B0();
  }

  sub_1000A1650(v2, "setHeaders:");

  return v2;
}

void sub_100086B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D52E0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  *(_BYTE *)(a2 + qword_1001D2E88) = 4;
  sub_100042D10();
  swift_beginAccess(a3 + 16, v17, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3 + 16);
  if (Strong)
  {
    uint64_t v12 = Strong;
    swift_beginAccess(a4 + 16, v16, 0LL, 0LL);
    uint64_t v13 = *(void **)(a4 + 16);
    if (v13)
    {
      uint64_t v14 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
      sub_100009654((uint64_t)v10, 1LL, 1LL, v14);
      id v15 = v13;
      sub_10009EE08((uint64_t)v15, (uint64_t)v10, 0LL, 0LL, a1, 0LL, v12);

      swift_release();
      sub_100019C1C((uint64_t)v10, &qword_1001D52E0);
    }

    else
    {
      swift_release();
    }
  }

void sub_100086C64()
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  sub_1000A1B3C(v1, 0LL, v5, v4);
  sub_100010BE4(v0 + OBJC_IVAR____TtC7parsecd11ClientState_lastNetworkRequest, (uint64_t)v8, 33LL);
  uint64_t v6 = sub_1000272AC();
  sub_100010ABC(v6, v7, &qword_1001D32B0);
  swift_endAccess(v8);
  sub_1000110D4();
}

void sub_100086CFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v25;
  a20 = v26;
  uint64_t v27 = v20;
  LODWORD(v99) = v28;
  sub_100019F9C();
  sub_100047144();
  __chkstk_darwin(v29);
  sub_10006B61C();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v30);
  sub_100009B54();
  uint64_t v31 = sub_10006B428();
  sub_100010F98();
  __chkstk_darwin(v32);
  sub_1000A1798();
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v92 - v34;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v36 = sub_10005A148(v21, 1LL, v31);
  if (v37)
  {
    sub_1000A1A50(v36, (uint64_t *)&unk_1001D5D20);
  }

  else
  {
    sub_10005A274((uint64_t)v35, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32));
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v20 + 16);
    if (Strong)
    {
      uint64_t v39 = Strong;
      sub_1000A24D0((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
      uint64_t v41 = v40;

      if (v41)
      {
        sub_10004729C((uint64_t)v35, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
        sub_10006B644();
      }

      else
      {
        if (qword_1001D04E8 != -1) {
          swift_once(&qword_1001D04E8, sub_1000343B4);
        }
        uint64_t v42 = sub_100010ED4();
        sub_1000A15F8(v42, (uint64_t)qword_1001EDB88);
        sub_100010FC0();
        uint64_t v44 = v43();
        uint64_t v97 = 0LL;
        Logger.logObject.getter(v44);
        os_log_type_t v45 = sub_100014588();
        LODWORD(v96) = v45;
        BOOL v46 = os_log_type_enabled(0LL, v45);
        uint64_t v98 = v39;
        if (v46)
        {
          uint64_t v95 = 0LL;
          char v47 = (uint8_t *)sub_100009B20(12LL);
          *(_DWORD *)char v47 = 134349056;
          id v93 = v47 + 4;
          uint64_t v94 = v47;
          UserAgent.client.getter(v47);
          sub_1000A2738();
          sub_10005A6D0(v24, *((uint64_t (**)(uint64_t, uint64_t))v22 + 1));
          uint64_t v48 = sub_10006B664();
          uint64_t v49 = *(void (**)(char *, uint64_t))(v23 + 8);
          sub_1000A1D54();
          uint64_t v100 = v48;
          uint64_t v41 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &a9, v93);
          uint64_t v22 = v94;
          sub_100014564( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v96,  "Ensuring bag for client: %{public}lu",  v94);
          sub_100010C34((uint64_t)v22);
        }

        else
        {
          uint64_t v49 = *(void (**)(char *, uint64_t))(v23 + 8);
          sub_1000A1D54();
        }

        id v50 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
        [v50 addObserver:v27 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

        sub_1000478B0();
        sub_1000C20C4(0LL, 0LL);
        sub_1000C27CC();
        uint64_t v52 = v51;
        uint64_t v53 = sub_10006B644();
        if (v52)
        {
          if ((v99 & 1) != 0
            || (uint64_t v54 = sub_100009B34(v53, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr),
                (Config.isDefault.getter(v54) & 1) == 0))
          {
            id v60 = v52;
            uint64_t v61 = UserAgent.fullString.getter();
            uint64_t v63 = v62;
            id v64 = objc_allocWithZone(&OBJC_CLASS___PARBag);
            sub_1000C4C48(v60, v61, v63);
            sub_100084F60(v65);

            sub_1000A2404();
            v49(v35, v31);
            goto LABEL_22;
          }
        }

        sub_100086C64();
        uint64_t v55 = (uint8_t *)sub_10006B8CC();
        uint64_t v95 = (os_log_s *)&v92;
        sub_100047144();
        __chkstk_darwin(v56);
        sub_100014428();
        uint64_t v99 = v57;
        BOOL v58 = sub_10008732C();
        uint64_t v96 = v49;
        if (v58)
        {
          if (qword_1001D0608 != -1) {
            swift_once(&qword_1001D0608, sub_100084D08);
          }
          uint64_t v59 = qword_1001EDDD8;
        }

        else
        {
          if (qword_1001D0600 != -1) {
            swift_once(&qword_1001D0600, sub_100084CF8);
          }
          uint64_t v59 = qword_1001EDDC0;
        }

        uint64_t v66 = sub_1000093D0((uint64_t)v55, (uint64_t)v59);
        id v93 = v22;
        uint64_t v94 = v55;
        sub_10005A3B0(v99, v66, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v22 + 2));
        uint64_t v67 = type metadata accessor for DispatchTime(0LL);
        uint64_t v92 = (uint64_t)&v92;
        uint64_t v68 = *(void *)(v67 - 8);
        __chkstk_darwin(v67);
        sub_1000A22A8();
        __chkstk_darwin(v69);
        sub_1000A1C64();
        static DispatchTime.now()(v70);
        uint64_t v71 = sub_1000A272C();
        + infix(_:_:)(v71, v72);
        uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
        v73(v24, v67);
        uint64_t v74 = OS_dispatch_semaphore.wait(timeout:)(v22) & 1;
        v73((uint64_t)v22, v67);
        char v75 = static DispatchTimeoutResult.== infix(_:_:)(v74, 1LL);
        uint64_t v76 = swift_bridgeObjectRetain(0xE700000000000000LL);
        unint64_t v77 = v97;
        Logger.logObject.getter(v76);
        os_log_type_t v78 = sub_100014588();
        if (sub_1000A1A00(v78))
        {
          if ((v75 & 1) != 0) {
            uint64_t v79 = 0x74756F656D6974LL;
          }
          else {
            uint64_t v79 = 0x73736563637573LL;
          }
          uint64_t v80 = (uint8_t *)sub_100009B20(12LL);
          uint64_t v81 = sub_100009B20(32LL);
          uint64_t v100 = v81;
          *(_DWORD *)uint64_t v80 = 136315138;
          swift_bridgeObjectRetain(0xE700000000000000LL);
          uint64_t v82 = sub_1000307E0(v79, 0xE700000000000000LL, &v100);
          uint64_t v83 = sub_10006B808(v82);
          sub_1000A23B4(v83, v84, (uint64_t)(v80 + 4));
          sub_100019FA4(0xE700000000000000LL);
          sub_1000A2640();
          sub_100014564(v85, v86, v87, v88, v80);
          sub_100030F9C(v81);
          sub_100010C34(v81);
          sub_100010C34((uint64_t)v80);
        }

        else
        {

          sub_100019F4C(0xE700000000000000LL);
        }

        uint64_t v89 = v96;
        sub_1000A24D0((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
        uint64_t v91 = v90;
        sub_1000A2404();
        (*((void (**)(uint64_t, uint8_t *))v93 + 1))(v99, v94);
        v89(v35, v31);
        if (v91) {
      }
        }
    }

    else
    {
      sub_10004729C((uint64_t)v35, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    }
  }

BOOL sub_10008732C()
{
  if (!sub_10005A61C()) {
    return 0LL;
  }
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v1 = [v0 objectForKey:@"download_resources"];

  BOOL v2 = v1 == 0LL;
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v1);
    sub_10001449C();
    sub_1000471D0();
  }

  else
  {
    sub_10001449C();
    memset(v4, 0, sizeof(v4));
  }

  sub_100019C1C((uint64_t)v4, (uint64_t *)&unk_1001D32C0);
  return v2;
}

id sub_1000873F8(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v10, (uint64_t)qword_1001EDC78);
  id v11 = a1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    unint64_t v20 = a3;
    id v21 = a4;
    id v15 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v14 = 134349571;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4);
    *(_WORD *)(v14 + 12) = 2050;
    id v21 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 14);
    *(_WORD *)(v14 + 22) = 2117;
    id v21 = v11;
    id v16 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 24);
    *id v15 = v11;

    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "queryId:%{public}llu requestId: %{public}llu response: %{sensitive}@",  (uint8_t *)v14,  0x20u);
    sub_10000941C(&qword_1001D1060);
    swift_arrayDestroy(v15, 1LL);
    uint64_t v17 = v15;
    a3 = v20;
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  id v18 = v11;
  sub_10007E2A4(a2, a3);
  return v18;
}

void *sub_1000875FC(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = [a1 statusCode];
  unint64_t v6 = a3 >> 60;
  if (a3 >> 60 == 15)
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_10005A464();
    uint64_t v7 = Data.count.getter(v8, v9);
  }

  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_1000093D0(v10, (uint64_t)qword_1001EDC78);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v7;
    id v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v15 = 134217984;
    id v30 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4);
    sub_1000A2640();
    _os_log_impl(v16, v17, v18, v19, v15, 0xCu);
    uint64_t v20 = (uint64_t)v15;
    uint64_t v7 = v14;
    unint64_t v6 = a3 >> 60;
    sub_100010C34(v20);
  }

  if (v5 == (id)200)
  {
    if (v6 <= 0xE)
    {
      uint64_t v26 = sub_10005A464();
      sub_10007E2A4(v26, v27);
      id v28 = a1;
      return a1;
    }

    unint64_t v21 = sub_1000A0678();
    uint64_t v22 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v21);
    uint64_t v7 = 0LL;
    *(void *)uint64_t v23 = 200LL;
    char v24 = 1;
  }

  else
  {
    unint64_t v25 = sub_1000A0678();
    uint64_t v22 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v25);
    char v24 = 0;
    *(void *)uint64_t v23 = v5;
  }

  *(void *)(v23 + 8) = v7;
  *(_BYTE *)(v23 + sub_10000BDD4(v0 + 16) = v24;
  swift_willThrow(v22);
  return a1;
}

uint64_t sub_1000877F8(void *a1)
{
  BOOL v2 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  sub_100080AFC();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v18[0] = 0LL;
  id v4 = [v2 JSONObjectWithData:isa options:0 error:v18];

  id v5 = v18[0];
  if (!v4)
  {
    id v11 = v18[0];
    _convertNSErrorToError(_:)(v5);

LABEL_6:
    swift_willThrow(v12);
    return sub_10005A464();
  }

  id v6 = v18[0];
  _bridgeAnyObjectToAny(_:)(v4);
  swift_unknownObjectRelease();
  uint64_t v7 = sub_10000941C(&qword_1001D16D0);
  if ((swift_dynamicCast(&v17, v18, (char *)&type metadata for Any + 8, v7, 6LL) & 1) == 0)
  {
    unint64_t v13 = sub_1000A0678();
    uint64_t v14 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v13);
    sub_1000A28C0(v14, v15);
    goto LABEL_6;
  }

  id v8 = a1;
  uint64_t v9 = sub_100080AFC();
  sub_100014244(v9, v10);
  return sub_10005A464();
}

uint64_t sub_100087964(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode(0LL);
  __chkstk_darwin(v7);
  sub_100009AEC();
  unint64_t v10 = (os_log_s *)(v9 - v8);
  type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
  sub_1000A27A0();
  uint64_t v95 = v11;
  sub_100027160();
  __chkstk_darwin(v12);
  sub_10006B61C();
  sub_10008307C(a5, &v93);
  if (!v94)
  {
    sub_1000A19B0(v13, (uint64_t *)&unk_1001D32C0);
    goto LABEL_6;
  }

  uint64_t v14 = sub_100009788(0LL, &qword_1001D54C0, &OBJC_CLASS___NSDictionary_ptr);
  if ((swift_dynamicCast(&v91, &v93, (char *)&type metadata for Any + 8, v14, 6LL) & 1) == 0)
  {
LABEL_6:
    unint64_t v19 = sub_1000A0678();
    uint64_t v20 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v19);
    sub_1000A28C0(v20, v21);
    swift_willThrow(v22);
    return sub_1000A2374();
  }

  uint64_t v15 = (void *)v91;
  Apple_Parsec_Search_V2_SearchResponse.init()();
  unint64_t v91 = 0x737574617473LL;
  unint64_t v92 = 0xE600000000000000LL;
  id v16 = objc_msgSend(v15, "__swift_objectForKeyedSubscript:", sub_1000A1A20());
  swift_unknownObjectRelease();
  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(v16);
    uint64_t v17 = swift_unknownObjectRelease();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v17, v18, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    uint64_t v26 = sub_1000A13B8(v23, v24, v25, (uint64_t)&type metadata for String);
    if ((_DWORD)v26)
    {
      BOOL v27 = v89 == 19279 && v90 == 0xE200000000000000LL;
      if (v27 || (sub_1000A1A58(19279LL, 0xE200000000000000LL) & 1) != 0)
      {
        uint64_t v28 = swift_bridgeObjectRelease();
        uint64_t v29 = enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusOk(_:);
LABEL_25:
        sub_1000A1A80(v28, v29);
        sub_1000A1F5C();
        goto LABEL_26;
      }

      BOOL v30 = v89 == 0x524F525245LL && v90 == 0xE500000000000000LL;
      if (v30 || (sub_1000A1A58(0x524F525245LL, 0xE500000000000000LL) & 1) != 0)
      {
        uint64_t v28 = swift_bridgeObjectRelease();
        uint64_t v29 = enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:);
        goto LABEL_25;
      }

      if (v89 == 0x4C555345525F4F4ELL && v90 == 0xEA00000000005354LL)
      {
        uint64_t v26 = swift_bridgeObjectRelease();
LABEL_79:
        sub_1000A1A80(v26, enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusNoResults(_:));
        sub_1000A1F5C();
        if (qword_1001D0538 != -1) {
          swift_once(&qword_1001D0538, sub_100034518);
        }
        uint64_t v84 = type metadata accessor for Logger(0LL);
        uint64_t v85 = sub_1000093D0(v84, (uint64_t)qword_1001EDC78);
        unint64_t v10 = (os_log_s *)Logger.logObject.getter(v85);
        os_log_type_t v86 = static os_log_type_t.default.getter(v10);
        if (os_log_type_enabled(v10, v86))
        {
          os_log_type_t v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)os_log_type_t v87 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v86, "Response status: No results", v87, 2u);
          sub_100010C34((uint64_t)v87);
        }

        goto LABEL_26;
      }

      char v83 = sub_1000A1A58(0x4C555345525F4F4ELL, 0xEA00000000005354LL);
      uint64_t v26 = swift_bridgeObjectRelease();
      if ((v83 & 1) != 0) {
        goto LABEL_79;
      }
    }
  }

  else
  {
    sub_1000A19B0(v23, (uint64_t *)&unk_1001D32C0);
  }

  sub_1000A1A80(v26, enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:));
  sub_1000A1F5C();
LABEL_26:
  unint64_t v91 = 0x7972657571LL;
  unint64_t v92 = 0xE500000000000000LL;
  uint64_t v31 = sub_1000A1A20();
  id v32 = sub_1000A1420(v31);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v33 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v33, v34, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    if ((sub_1000A13B8(v35, v36, v37, (uint64_t)&type metadata for String) & 1) != 0)
    {
      unint64_t v10 = v5;
      ((void (*)())Apple_Parsec_Search_V2_SearchResponse.query.setter)();
    }
  }

  else
  {
    sub_1000A19B0(v35, (uint64_t *)&unk_1001D32C0);
  }

  unint64_t v91 = 0x6567615F78616DLL;
  unint64_t v92 = 0xE700000000000000LL;
  uint64_t v38 = sub_1000A1A20();
  id v39 = sub_1000A1420(v38);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v40 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v40, v41, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    if ((sub_1000A13B8(v42, v43, v44, (uint64_t)&type metadata for Int32) & 1) != 0)
    {
      unint64_t v10 = v5;
      Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.setter(v89);
    }
  }

  else
  {
    sub_1000A19B0(v42, (uint64_t *)&unk_1001D32C0);
  }

  unint64_t v91 = 7430758LL;
  unint64_t v92 = 0xE300000000000000LL;
  uint64_t v45 = sub_1000A1A20();
  id v46 = sub_1000A1420(v45);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v47 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v47, v48, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    if ((sub_1000A13B8(v49, v50, v51, (uint64_t)&type metadata for String) & 1) != 0)
    {
      unint64_t v10 = (os_log_s *)Data.init(base64Encoded:options:)(v89, v90, 0LL);
      unint64_t v53 = v52;
      swift_bridgeObjectRelease();
      if (v53 >> 60 != 15)
      {
        uint64_t v54 = sub_1000A1F68();
        unint64_t v10 = v5;
        Apple_Parsec_Search_V2_SearchResponse.feedback.setter(v54);
      }
    }
  }

  else
  {
    sub_1000A19B0(v49, (uint64_t *)&unk_1001D32C0);
  }

  unint64_t v91 = 0xD000000000000011LL;
  unint64_t v92 = 0x8000000100170B40LL;
  uint64_t v55 = sub_1000A1A20();
  id v56 = sub_1000A1420(v55);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v57 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v57, v58, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    if ((sub_1000A13B8(v59, v60, v61, (uint64_t)&type metadata for String) & 1) != 0)
    {
      unint64_t v10 = v5;
      ((void (*)())Apple_Parsec_Search_V2_SearchResponse.partialClientAddress.setter)();
    }
  }

  else
  {
    sub_1000A19B0(v59, (uint64_t *)&unk_1001D32C0);
  }

  unint64_t v91 = 0x6E6F697461727564LL;
  unint64_t v92 = 0xE800000000000000LL;
  uint64_t v62 = sub_1000A1A20();
  id v63 = sub_1000A1420(v62);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v64 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v64, v65, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
    if ((sub_1000A13B8(v66, v67, v68, (uint64_t)&type metadata for Int64) & 1) != 0)
    {
      unint64_t v10 = v5;
      ((void (*)())Apple_Parsec_Search_V2_SearchResponse.millisecondDuration.setter)();
    }
  }

  else
  {
    sub_1000A19B0(v66, (uint64_t *)&unk_1001D32C0);
  }

  unint64_t v91 = 0xD000000000000010LL;
  unint64_t v92 = 0x8000000100170B60LL;
  uint64_t v69 = sub_1000A1A20();
  id v70 = sub_1000A1420(v69);
  sub_1000A1660();
  if (v10)
  {
    sub_1000A1624();
    uint64_t v71 = sub_100010CA0();
  }

  else
  {
    sub_1000A1BD0();
  }

  sub_1000A15A0(v71, v72, (uint64_t *)&unk_1001D32C0);
  if (v94)
  {
  }

  else
  {

    sub_1000A19B0(v76, (uint64_t *)&unk_1001D32C0);
  }

  sub_1000A2498();
  v77();
  id v78 = a2;
  uint64_t v79 = sub_10005A464();
  sub_100014244(v79, v80);
  return sub_1000A2374();
}

id sub_1000880D0( char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v51 = a8;
  uint64_t v57 = a3;
  uint64_t v58 = a5;
  id v56 = a2;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v52 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for URLRequest(0LL);
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  __chkstk_darwin(v18);
  uint64_t v50 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v43 - v25;
  uint64_t v53 = a6;
  uint64_t v54 = a7;
  uint64_t v27 = String.count.getter(a6, a7);
  if (v27 < 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(a1, v58, v15);
    goto LABEL_5;
  }

  id v46 = a1;
  uint64_t v47 = v15;
  unint64_t v55 = a4;
  uint64_t v28 = v58;
  Apple_Parsec_Search_V2_SearchResponse.status.getter(v27);
  (*(void (**)(char *, void, uint64_t))(v21 + 104))( v24,  enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:),  v20);
  sub_100059F08( &qword_1001D54B8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode);
  char v30 = dispatch thunk of static Equatable.== infix(_:_:)(v26, v24, v20, v29);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v24, v20);
  v31(v26, v20);
  if ((v30 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v46, v28, v47);
    a4 = v55;
LABEL_5:
    uint64_t v32 = v57;
    goto LABEL_9;
  }

  uint64_t v44 = a9;
  uint64_t v45 = a11;
  type metadata accessor for CachedResultSet(0LL);
  uint64_t v33 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v50, v51, v49);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v35 = (uint64_t)v52;
  uint64_t v36 = v47;
  v34(v52, v28, v47);
  uint64_t v37 = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(a10);
  uint64_t v32 = v57;
  uint64_t v38 = v55;
  sub_100014244(v57, v55);
  uint64_t v39 = sub_1000CC5C0(v53, v37, v33, v35, v44, a10, v32, v38);
  uint64_t v40 = *(void *)(v45 + 64);
  if (*(void *)(v40 + 32))
  {
    swift_retain(*(void *)(v40 + 32));
    sub_1000B1CE8(v39);
    swift_release();
  }

  swift_release();
  v34(v46, v28, v36);
  a4 = v55;
LABEL_9:
  uint64_t v41 = v56;
  sub_100014244(v32, a4);
  return v41;
}

id sub_1000883CC( char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v24 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a1;
  uint64_t v23 = a9;
  uint64_t v14 = sub_10000941C(&qword_1001D52E0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL);
  v18(v16, a5, v17);
  sub_100009654((uint64_t)v16, 0LL, 1LL, v17);
  uint64_t v19 = Data.count.getter(a3, a4);
  id v20 = [a2 statusCode];
  swift_getObjectType(a7);
  sub_10009EF50(a7, (uint64_t)v16, v19, (uint64_t)v20, v24, v23, v25);
  sub_100019C1C((uint64_t)v16, &qword_1001D52E0);
  v18(v26, a5, v17);
  id v21 = a2;
  sub_100014244(a3, a4);
  return v21;
}

uint64_t sub_10008852C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v29 = a1;
  char v30 = 0LL;
  uint64_t v25 = a1;
  swift_errorRetain(a1);
  swift_errorRetain(v6);
  uint64_t v7 = sub_10000941C(&qword_1001D2B70);
  if (swift_dynamicCast(v27, &v25, v7, &type metadata for ClientState.ResponseError, 0LL) && !v28)
  {
    uint64_t v9 = a4;
    unint64_t v10 = v27[0];
    char v30 = v27[0];
    swift_errorRelease(v25);
    goto LABEL_11;
  }

  swift_errorRelease(v25);
  uint64_t v25 = v6;
  swift_errorRetain(v6);
  if (!swift_dynamicCast(v27, &v25, v7, &_s13ResponseErrorON, 0LL))
  {
    uint64_t v9 = a4;
LABEL_9:
    swift_errorRelease(v25);
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v6);
    swift_errorRelease(v6);
    unint64_t v10 = 0LL;
    uint64_t v29 = (uint64_t)v8;
    goto LABEL_10;
  }

  uint64_t v8 = v27[0];
  uint64_t v9 = a4;
  if (v28 != 1)
  {
    sub_10007E30C(v27[0], (uint64_t)v27[1], 0);
    goto LABEL_9;
  }

  swift_errorRelease(v6);
  uint64_t v29 = (uint64_t)v8;
  swift_errorRelease(v25);
  unint64_t v10 = 0LL;
LABEL_10:
  uint64_t v6 = (uint64_t)v8;
LABEL_11:
  swift_errorRetain(v6);
  uint64_t v11 = swift_errorRetain(v6);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v14 = static os_log_type_t.error.getter(v12, v13);
  if (os_log_type_enabled(v12, v14))
  {
    uint64_t v15 = swift_slowAlloc(42LL, -1LL);
    uint64_t v16 = (void *)swift_slowAlloc(32LL, -1LL);
    v27[0] = v16;
    *(_DWORD *)uint64_t v15 = 134218754;
    uint64_t v25 = (uint64_t)v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4);
    *(_WORD *)(v15 + 12) = 2050;
    uint64_t v25 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 14);
    *(_WORD *)(v15 + 22) = 2050;
    uint64_t v25 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 24);
    *(_WORD *)(v15 + 32) = 2082;
    uint64_t v25 = v6;
    swift_errorRetain(v6);
    uint64_t v17 = String.init<A>(describing:)(&v25);
    uint64_t v25 = sub_1000307E0(v17, v18, (uint64_t *)v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 34);
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v14,  "failed with HTTP status code %ld performing query %{public}llu requestId: %{public}llu error %{public}s",  (uint8_t *)v15,  0x2Au);
    swift_arrayDestroy(v16, 1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }

  swift_beginAccess(&v29, v27, 0LL, 0LL);
  uint64_t v19 = v29;
  swift_errorRetain(v29);
  id v20 = (void *)_convertErrorToNSError(_:)(v19);
  swift_errorRelease(v19);
  swift_beginAccess(&v30, &v25, 0LL, 0LL);
  sub_1000888DC();

  uint64_t v23 = v19;
  char v24 = 1;
  uint64_t v21 = sub_10000941C(&qword_1001D5440);
  return Just.init(_:)(&v23, v21);
}

void sub_1000888DC()
{
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v40 = v8;
  uint64_t v41 = v9;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  sub_10000941C(&qword_1001D52E0);
  sub_100027160();
  __chkstk_darwin(v14);
  sub_10000BEB8();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10006B428();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  sub_100010FCC();
  if (v13)
  {
    uint64_t v38 = v7;
    uint64_t v39 = v5;
    id v20 = objc_allocWithZone(&OBJC_CLASS____CPErrorFeedback);
    id v36 = v13;
    sub_10004CB5C((uint64_t)v13);
    uint64_t v22 = v21;
    id v23 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
    sub_1000A1C30();
    id v35 = v22;
    id v24 = [v23 initWithCodable:v22];
    uint64_t v37 = v11;
    [v24 setQueryId:v11];
    sub_1000A1D60( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    uint64_t v25 = sub_10005A148((uint64_t)v17, 1LL, v18);
    if (v26)
    {
      uint64_t v27 = parsecdUserAgent.getter(v25);
      sub_1000A2198(v27, (uint64_t *)&unk_1001D5D20);
    }

    else
    {
      sub_1000A1DB0(v1, (uint64_t)v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 32));
    }

    sub_10005A464();
    sub_1000A1BE4();
    sub_1000471D0();

    sub_1000A18D4(v1, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
    uint64_t v28 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
    sub_10002FC40(v2, v29, v30, v28);
    swift_getObjectType(v40);
    uint64_t v31 = sub_1000A2380();
    sub_10009EF50(v31, v32, v41, v38, v39, v37, v3);

    sub_1000A215C(v33, &qword_1001D52E0);
  }

  sub_100009AA0();
}

id sub_100088AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = [objc_allocWithZone(PARReply) init];
  [a5 scale];
  objc_msgSend(v9, "setScale:");
  if ([a5 verboseReply])
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    [v9 setHttpRequest:isa];

    [v9 setHttpResponse:a1];
  }

  sub_100090290(a2, a3, v9);
  return v9;
}

void sub_100088BB0()
{
  id v0 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
  sub_100047294();
  sub_1000A1B94();
  id v6 = sub_10008F620(v1, v2, v3);
  uint64_t v4 = sub_10006B4EC();
  sub_1000A1484(v4, "queryId");
  id v5 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v6];
  sub_1000A259C(v5, "setQueryId:");
  sub_1000A2590();
  sub_1000A5CB4();
  sub_100010CA0();

  sub_1000A1D68(qword_1001D2E88);
}

void sub_100088C90()
{
  if (sub_10005A61C())
  {
    id v0 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
    [v0 postNotificationName:@"com.apple.parsecd.performedSearch" object:0];
    sub_10001449C();
    sub_1000A1674(v0);
  }

  else
  {
    sub_1000A28E0();
  }

void sub_100088D04()
{
  uint64_t v1 = nw_activity_create(14, [v0 nwActivityLabel]);
  if (sub_10006B65C(v1, "nwActivity"))
  {
    uint64_t v2 = sub_10006B688();
    nw_activity_set_parent_activity(v2);
    sub_100010CA0();
  }

  nw_activity_activate(v1);
  sub_100009A90();
}

uint64_t sub_100088D6C@<X0>( void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t sub_100088DA8@<X0>( void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
  }

  return result;
}

uint64_t sub_100088DE8@<X0>( void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
  }

  return result;
}

uint64_t sub_100088E28@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = sub_10000941C(&qword_1001D53D8);
  uint64_t result = a2((char *)a3 + *(int *)(v10 + 64), v6, v7, v8, v9);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v12;
    a3[2] = v13;
  }

  return result;
}

uint64_t sub_100088EA8@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, char *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = sub_10000941C(&qword_1001D53D8);
  uint64_t result = a2((char *)a3 + *(int *)(v10 + 64), v7, v8, v9, (char *)a1 + *(int *)(v10 + 64));
  if (!v3)
  {
    *a3 = result;
    a3[1] = v12;
    a3[2] = v13;
  }

  return result;
}

uint64_t sub_100088F2C@<X0>( char *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = sub_10000941C(&qword_1001D53D8);
  uint64_t result = a2(v7, v8, v9, &a1[*(int *)(v10 + 64)]);
  if (!v3)
  {
    *(void *)a3 = result;
    *(_BYTE *)(a3 + 8) = v12 & 1;
  }

  return result;
}

id sub_100088FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    uint64_t v5 = *(void **)a1;
    swift_errorRetain(v2);
    uint64_t v3 = sub_10000941C(&qword_1001D2B70);
    return (id)swift_willThrowTypedImpl(&v5, v3, &protocol self-conformance witness table for Error);
  }

  else
  {
    *(void *)a2 = v2;
    *(_BYTE *)(a2 + 8) = 0;
    return v2;
  }

uint64_t sub_100089024(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v81 = a7;
  uint64_t v88 = a6;
  uint64_t v78 = a5;
  uint64_t v79 = a3;
  uint64_t v93 = 0LL;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType(0LL);
  uint64_t v85 = *(void *)(v9 - 8);
  uint64_t v86 = v9;
  __chkstk_darwin(v9);
  os_log_type_t v87 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType(0LL);
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v83 = v11;
  __chkstk_darwin(v11);
  uint64_t v84 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000941C(&qword_1001D54B0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10000941C((uint64_t *)&unk_1001D5340);
  uint64_t v21 = __chkstk_darwin(v20);
  id v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v76 - v24;
  uint64_t v26 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload(0LL);
  uint64_t v27 = __chkstk_darwin(v26);
  unint64_t v91 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v76 - v29;
  uint64_t v92 = v31;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  unint64_t v80 = a1;
  uint64_t v90 = v32;
  v32((char *)&v76 - v29, a1, v26);
  id v89 = a2;
  uint64_t v33 = Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter([a2 queryId]);
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter(v33);
  uint64_t v34 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  if (sub_100010708((uint64_t)v25, 1LL, v34) == 1)
  {
    uint64_t v35 = v93;
    id v36 = v90;
    uint64_t v37 = v91;
    goto LABEL_17;
  }

  sub_1000107D0((uint64_t)v25, (uint64_t)v23, (uint64_t *)&unk_1001D5340);
  uint64_t v77 = *(void *)(v34 - 8);
  int v38 = (*(uint64_t (**)(char *, uint64_t))(v77 + 88))(v23, v34);
  if (v38 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
  {
    uint64_t result = (uint64_t)[v89 triggerEvent];
    if (result < 0)
    {
      __break(1u);
      return result;
    }

    Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.init(rawValue:)();
    int v40 = sub_100010708((uint64_t)v15, 1LL, v16);
    uint64_t v37 = v91;
    uint64_t v76 = v34;
    if (v40 == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v17 + 104))( v19,  enum case for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.unknown(_:),  v16);
      sub_100019C1C((uint64_t)v15, &qword_1001D54B0);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
    }

    id v46 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v94);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.triggerEvent.setter(v19);
    v46(v94, 0LL);
    id v47 = v89;
    id v48 = [v89 triggerEvent];
    uint64_t v49 = (unsigned int *)&enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:);
    if (v48 != (id)23) {
      uint64_t v49 = (unsigned int *)&enum case for Apple_Parsec_Feedback_V2_SearchType.asYouType(_:);
    }
    uint64_t v50 = v84;
    (*(void (**)(char *, void, uint64_t))(v82 + 104))(v84, *v49, v83);
    uint64_t v51 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v94);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter(v50);
    v51(v94, 0LL);
    id v52 = [v47 queryString];
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;

    id v56 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v94);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter(v53, v55);
    v56(v94, 0LL);
    uint64_t v57 = v87;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))( v87,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:),  v86);
    uint64_t v58 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v94);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter(v57);
    v58(v94, 0LL);
    uint64_t v35 = v93;
    goto LABEL_15;
  }

  if (v38 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
  {
    uint64_t v76 = v34;
    uint64_t v41 = v87;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))( v87,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:),  v86);
    uint64_t v42 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v94);
    Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter(v41);
    v42(v94, 0LL);
    sub_100061030();
    sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
    uint64_t v35 = v93;
    uint64_t v44 = Message.serializedData(partial:)(0LL, v26, v43);
    uint64_t v37 = v91;
    if (v35)
    {
      swift_errorRelease(v35);
      uint64_t v35 = 0LL;
    }

    else
    {
      uint64_t v72 = v44;
      unint64_t v73 = v45;
      Swift::String v74 = Data.base64EncodedString(options:)(0LL);
      sub_100010A30(v72, v73);
      uint64_t v75 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v94);
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.fbq.setter(v74._countAndFlagsBits, v74._object);
      v75(v94, 0LL);
    }

uint64_t sub_100089720( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 112) = v24;
  *(_OWORD *)(v8 + 80) = v22;
  *(_OWORD *)(v8 + 96) = v23;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 40) = a4;
  uint64_t v9 = ((uint64_t (*)(void))type metadata accessor for BinaryEncodingError)(0LL);
  *(void *)(v8 + 120) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 128) = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 136) = swift_task_alloc(v11);
  *(void *)(v8 + 144) = swift_task_alloc(v11);
  uint64_t v12 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Search_StatusCode)(0LL);
  *(void *)(v8 + 152) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 160) = v13;
  *(void *)(v8 + 168) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  *(void *)(v8 + 176) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 184) = v15;
  *(void *)(v8 + 192) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for URLRequest(0LL);
  *(void *)(v8 + 200) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v8 + 208) = v17;
  *(void *)(v8 + 2sub_10000BDD4(v0 + 16) = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse(0LL);
  *(void *)(v8 + 224) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v8 + 232) = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 240) = swift_task_alloc(v20);
  *(void *)(v8 + 248) = swift_task_alloc(v20);
  return swift_task_switch(sub_100089858, 0LL, 0LL);
}

uint64_t sub_100089858( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void), uint64_t (*a13)(void), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24)
{
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (qword_1001D04B0 != -1) {
    swift_once(&qword_1001D04B0, sub_1000342AC);
  }
  uint64_t v27 = (void *)v24[5];
  uint64_t v28 = v24[7];
  uint64_t v29 = sub_100010ED4();
  os_log_type_t v30 = sub_1000093D0(v29, (uint64_t)qword_1001EDAE0);
  id v31 = v27;
  sub_1000A18C4(v28);
  id v32 = v31;
  uint64_t v33 = (os_log_s *)sub_1000A260C();
  os_log_type_t v38 = static os_log_type_t.info.getter(v33, v34, v35, v36, v37);
  BOOL v39 = sub_100010DE4(v38);
  uint64_t v40 = v24[7];
  if (v39)
  {
    uint64_t v41 = (void *)v24[5];
    uint64_t v48 = v24[6];
    uint64_t v42 = sub_100009B20(22LL);
    a12 = (uint64_t (*)(void))sub_100009B20(32LL);
    a13 = a12;
    *(_DWORD *)uint64_t v42 = 134349315;
    id v43 = sub_1000A1434((uint64_t)a12, "queryId");

    v24[3] = v43;
    sub_1000A26CC((uint64_t)(v24 + 3), (uint64_t)(v24 + 4));

    *(_WORD *)(v42 + 12) = 2085;
    sub_10003EF98();
    v24[4] = sub_1000A1C20(v48, v44, (uint64_t *)&a13);
    sub_1000A1894((uint64_t)(v24 + 4), (uint64_t)(v24 + 5));
    sub_100019FA4(v40);
    sub_100019F44( (void *)&_mh_execute_header,  v33,  v30,  "performing safari search over gRPC qid: %{public}llu query: %{sensitive}s",  (uint8_t *)v42);
    sub_100030F9C((uint64_t)a12);
    sub_100010C34((uint64_t)a12);
    sub_100010C34(v42);
  }

  else
  {
    unint64_t v45 = (void *)v24[5];

    sub_100019F4C(v40);
  }

  id v46 = (void *)sub_1000A1D74((uint64_t)&async function pointer to dispatch thunk of PegasusProxyForSafariSearch.send(_:));
  _BYTE v24[32] = v46;
  *id v46 = v24;
  v46[1] = sub_100089A1C;
  return sub_1000A16E4(v24[31], v24[9], a12);
}

uint64_t sub_100089A1C()
{
  uint64_t v3 = *(void *)(v2 + 256);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 264) = v0;
  swift_task_dealloc(v3);
  sub_1000A1A44();
  return sub_1000A1414(v5, v6, v7);
}

uint64_t sub_100089A6C()
{
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 224);
  id v4 = [objc_allocWithZone(PARReply) init];
  sub_100059F08( &qword_1001D54A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse);
  uint64_t v6 = Message.serializedData(partial:)(0LL, v3, v5);
  if (v2)
  {
    sub_1000A1BEC(*(void *)(v0 + 232));

    uint64_t v8 = *(void *)(v0 + 120);
    *(void *)(v0 + sub_10000BDD4(v0 + 16) = v2;
    sub_1000110C4();
    sub_10000941C(&qword_1001D2B70);
    uint64_t v9 = sub_10006B688();
    if ((sub_1000A1800(v9, v10, v11, v8) & 1) != 0)
    {
      uint64_t v12 = *(void *)(v0 + 136);
      uint64_t v13 = *(void *)(v0 + 144);
      sub_1000A247C();
      sub_100010D88();
      sub_10005A3B0(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
      sub_1000A1360(qword_1001D2E88);
      sub_1000A14E4(v14, "queryId");
      sub_100059F08(&qword_1001D5498, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
      sub_100010EA0(v8, v15);
      sub_10005A3B0(v16, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
      sub_1000A1630();
      sub_100010D88();
      sub_1000A1F48();
      sub_1000A2188();
      sub_10005A26C(v12, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      uint64_t v17 = *(void *)(v0 + 16);
    }

    else
    {
      id v31 = *(void (**)(id, void, uint64_t))(v0 + 88);
      sub_1000A2020();
      sub_1000A1360(qword_1001D2E88);
      id v33 = sub_100032C5C(v32, "queryId");
      sub_1000110C4();
      uint64_t v34 = sub_1000A1630();
      sub_100010D88();
      v31(v33, 0LL, v34);
      sub_10005F888();
      uint64_t v17 = v2;
    }

    swift_errorRelease(v17);
  }

  else
  {
    uint64_t v18 = v6;
    uint64_t v19 = v7;
    char v20 = sub_1000A47FC(v6, v7);
    uint64_t v21 = *(void *)(v0 + 248);
    if ((v20 & 1) != 0)
    {
      uint64_t v54 = *(void *)(v0 + 232);
      uint64_t v57 = *(void *)(v0 + 224);
      uint64_t v23 = *(void *)(v0 + 160);
      uint64_t v22 = *(void *)(v0 + 168);
      id v52 = *(void (**)(id, void, uint64_t))(v0 + 88);
      sub_1000A1360(qword_1001D2E88);
      id v25 = sub_10005A6E0(v24, "queryId");
      uint64_t v26 = Apple_Parsec_Safari_V1alpha_SafariSearchResponse.status.getter();
      Apple_Parsec_Search_StatusCode.rawValue.getter(v26);
      sub_1000A18D4(v22, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
      unint64_t v27 = sub_1000A0678();
      uint64_t v28 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v27);
      uint64_t v30 = sub_1000A2008(v28, v29);
      sub_100010D88();
      v52(v25, 0LL, v30);
      swift_errorRelease(v30);

      sub_1000A2620();
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v21, v57);
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 240);
      uint64_t v36 = *(void *)(v0 + 216);
      uint64_t v37 = *(void *)(v0 + 208);
      uint64_t v38 = *(void *)(v0 + 192);
      uint64_t v51 = *(void *)(v0 + 184);
      uint64_t v39 = *(void *)(v0 + 104);
      uint64_t v49 = *(void *)(v0 + 200);
      uint64_t v50 = *(void *)(v0 + 56);
      uint64_t v55 = *(void *)(v0 + 48);
      uint64_t v58 = *(void *)(v0 + 112);
      sub_100090290(v18, v19, v4);
      type metadata accessor for CachedResultSet(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v36, v39, v49);
      uint64_t v40 = sub_1000A217C();
      v41(v40);
      uint64_t v42 = swift_bridgeObjectRetain(v50);
      uint64_t v43 = UUID.init()(v42);
      UUID.uuidString.getter(v43);
      sub_10004EC84();
      sub_1000A262C(v51);
      sub_1000A1504();
      uint64_t v44 = sub_1000CC5F0(v55, v50, v36, v35, v38, v39, v18, v19);
      if (*(void *)(*(void *)(v58 + 64) + 32LL))
      {
        sub_10000C4AC();
        sub_1000B1CE8(v44);
        sub_10001683C();
      }

      uint64_t v53 = *(void *)(v0 + 232);
      uint64_t v56 = *(void *)(v0 + 224);
      uint64_t v59 = *(void *)(v0 + 248);
      unint64_t v45 = *(void (**)(id, id, void))(v0 + 88);
      id v46 = [*(id *)(v0 + 40) queryId];
      id v47 = v4;
      v45(v46, v4, 0LL);

      sub_1000A15EC(qword_1001D2E88);
      sub_1000110B0();

      sub_1000A2620();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v59, v56);
    }
  }

  sub_1000A1B7C();
  sub_1000A19F8();
  sub_1000A19D8();
  sub_1000A19C0();
  sub_1000A183C();
  sub_1000A196C();
  sub_1000A1974();
  return sub_1000A1680(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_100089E7C()
{
  uint64_t v2 = *(void *)(v0 + 264);
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = v2;
  uint64_t v3 = *(void *)(v0 + 120);
  sub_100029138();
  sub_10000941C(&qword_1001D2B70);
  uint64_t v4 = sub_1000272AC();
  if ((sub_1000A1800(v4, v5, v6, v3) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 144);
    sub_1000A247C();
    sub_100014530();
    sub_10005A3B0(v7, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
    sub_1000A1360(qword_1001D2E88);
    sub_1000A14E4(v9, "queryId");
    sub_100059F08(&qword_1001D5498, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    sub_100010EA0(v3, v10);
    sub_10005A3B0(v11, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    sub_1000A233C();
    sub_100014530();
    sub_1000A1F48();
    sub_1000A2188();
    sub_10005A26C(v7, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    uint64_t v12 = *(void *)(v0 + 16);
  }

  else
  {
    uint64_t v13 = *(void (**)(id, void, uint64_t))(v0 + 88);
    sub_1000A2020();
    sub_1000A1360(qword_1001D2E88);
    id v15 = sub_100032C5C(v14, "queryId");
    sub_100029138();
    uint64_t v16 = sub_1000A233C();
    sub_100014530();
    v13(v15, 0LL, v16);
    sub_10005F888();
    uint64_t v12 = v2;
  }

  swift_errorRelease(v12);
  sub_1000A1B7C();
  sub_1000A19F8();
  sub_1000A19D8();
  sub_1000A19C0();
  sub_1000A183C();
  sub_1000A196C();
  sub_1000A1974();
  return sub_1000A143C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_100089FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
}

uint64_t sub_10008A040( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = a8;
  uint64_t v54 = a7;
  uint64_t v55 = a5;
  uint64_t v59 = a4;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType(0LL);
  uint64_t v60 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v61 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType(0LL);
  uint64_t v56 = *(void *)(v13 - 8);
  uint64_t v57 = v13;
  __chkstk_darwin(v13);
  uint64_t v58 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D5340);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  char v20 = (char *)&v53 - v19;
  uint64_t v21 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  id v25 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v53 - v26;
  uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v62((char *)&v53 - v26, a1, v21);
  uint64_t v28 = Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter([a2 queryId]);
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter(v28);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  if (sub_100010708((uint64_t)v20, 1LL, v29) != 1)
  {
    sub_1000107D0((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_1001D5340);
    uint64_t v30 = *(void *)(v29 - 8);
    int v31 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v18, v29);
    if (v31 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
    {
      uint64_t v54 = a3;
      uint64_t v32 = v59;
      swift_bridgeObjectRetain(v59);
      uint64_t v53 = v30;
      uint64_t v33 = Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v64);
      uint64_t v55 = v11;
      uint64_t v34 = (void (*)(_BYTE *, void))v33;
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter(v54, v32);
      v34(v64, 0LL);
      uint64_t v35 = v58;
      (*(void (**)(char *, void, uint64_t))(v56 + 104))( v58,  enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:),  v57);
      uint64_t v36 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v64);
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter(v35);
      v36(v64, 0LL);
      uint64_t v37 = v61;
      (*(void (**)(char *, void, uint64_t))(v60 + 104))( v61,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecCard(_:),  v55);
      uint64_t v38 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v64);
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter(v37);
      uint64_t v30 = v53;
      v38(v64, 0LL);
    }

    else if (v31 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
    {
      uint64_t v39 = v11;
      uint64_t v40 = v61;
      (*(void (**)(char *, void, uint64_t))(v60 + 104))( v61,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecCard(_:),  v39);
      uint64_t v53 = v30;
      uint64_t v41 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v64);
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter(v40);
      v41(v64, 0LL);
      sub_100061030();
      uint64_t v30 = v53;
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v29);
  }

  sub_100019C1C((uint64_t)v20, (uint64_t *)&unk_1001D5340);
  uint64_t v42 = *(void *)(v63 + 64);
  v62(v25, (uint64_t)v27, v21);
  sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v44 = v43;
  swift_unknownObjectRetain(v42);
  uint64_t v45 = Message.serializedData(partial:)(0LL, v21, v44);
  unint64_t v47 = v46;
  uint64_t v48 = *(void (**)(char *, uint64_t))(v22 + 8);
  v48(v25, v21);
  id v49 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  sub_100069C58(v45, v47);
  uint64_t v51 = v50;
  sub_1000A5CB4();
  swift_unknownObjectRelease();

  return ((uint64_t (*)(char *, uint64_t))v48)(v27, v21);
}

void sub_10008A4B4( _BYTE *a1, uint64_t a2, void (*a3)(id, void, void), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6 = a6 + 16;
  if ((*a1 & 1) == 0)
  {
    *(_BYTE *)(a2 + qword_1001D2E88) = 24;
    if (qword_1001D04B8 != -1) {
      swift_once(&qword_1001D04B8, sub_1000342D4);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDAF8);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v13 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      v19[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = String.init<A>(describing:)(v15);
      uint64_t v18 = sub_1000307E0(v16, v17, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v14 + 4);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v13,  "Engagement Search: publisher failure, error: %s. Returning an empty response",  v14,  0xCu);
      swift_arrayDestroy(v15, 1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    a3([a5 queryId], 0, 0);
  }

  swift_beginAccess(v6, v19, 0LL, 0LL);
  if (swift_unknownObjectWeakLoadStrong(v6))
  {
    sub_100061030();
    swift_unknownObjectRelease();
  }

  sub_100042D10();
}

void sub_10008A6D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, void (*a6)(id, id, void), uint64_t a7, void *a8)
{
  uint64_t v39 = a6;
  uint64_t v40 = a8;
  uint64_t v41 = a4;
  uint64_t v42 = a7;
  unsigned int v38 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v9 = type metadata accessor for PegasusProxyForEngagement.Error(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000941C(&qword_1001D5328);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a1, (uint64_t)v19, &qword_1001D5328);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    char v20 = v40;
    *(_BYTE *)(v41 + qword_1001D2E88) = 48;
    id v21 = [v20 queryId];
    sub_100059F08( &qword_1001D5330,  (uint64_t (*)(uint64_t))&type metadata accessor for PegasusProxyForEngagement.Error);
    uint64_t v23 = swift_allocError(v9, v22, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v24, v12, v9);
    uint64_t v25 = sub_1000C5FB0(v23);
    swift_errorRelease(v23);
    v39(v21, 0LL, v25);
    swift_errorRelease(v25);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  else
  {
    uint64_t v26 = v39;
    uint64_t v37 = v14;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    *(_BYTE *)(v41 + qword_1001D2E88) = 2;
    id v27 = [objc_allocWithZone(PARReply) init];
    sub_100059F08( &qword_1001D5338,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse);
    uint64_t v29 = Message.serializedData(partial:)(0LL, v13, v28);
    unint64_t v31 = v30;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100010A30(v29, v31);
    uint64_t v33 = v40;
    [v27 setData:isa];

    [v27 setReplyType:v38];
    id v34 = [v33 queryId];
    id v35 = v27;
    v26(v34, v27, 0LL);

    (*(void (**)(char *, uint64_t))(v37 + 8))(v16, v13);
  }

  sub_10008D2C4(v43);
}

uint64_t sub_10008AA04(void *a1)
{
  uint64_t result = sub_1000877F8(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_10008AA2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_100087964(a1, a2, a3, a4, a5);
  if (v5) {
    return v7;
  }
  return result;
}

uint64_t sub_10008AA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  return sub_10008BC74(a2);
}

uint64_t sub_10008AAA0( char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v79 = a7;
  uint64_t v80 = a5;
  uint64_t v84 = a3;
  uint64_t v85 = a4;
  uint64_t v96 = 0LL;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Feedback_V2_LookupSelectionType(0LL);
  __chkstk_darwin(v11);
  id v89 = (unint64_t *)((char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType(0LL);
  uint64_t v90 = *(void *)(v13 - 8);
  uint64_t v91 = v13;
  __chkstk_darwin(v13);
  uint64_t v92 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent(0LL);
  uint64_t v15 = *(char **)(v86 - 8);
  __chkstk_darwin(v86);
  os_log_type_t v87 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType(0LL);
  uint64_t v82 = *(void *)(v17 - 8);
  uint64_t v83 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10000941C((uint64_t *)&unk_1001D5340);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v77 - v24;
  uint64_t v26 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload(0LL);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v77 - v30;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  uint64_t v81 = a1;
  uint64_t v94 = v33;
  uint64_t v95 = v32;
  v33((char *)&v77 - v30, a1, v26);
  id v88 = a2;
  uint64_t v34 = Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter([a2 queryId]);
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter(v34);
  uint64_t v35 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  int v36 = sub_100010708((uint64_t)v25, 1LL, v35);
  uint64_t v93 = a8;
  if (v36 == 1)
  {
    uint64_t v37 = v96;
    unsigned int v38 = v94;
    goto LABEL_12;
  }

  sub_1000107D0((uint64_t)v25, (uint64_t)v23, (uint64_t *)&unk_1001D5340);
  uint64_t v78 = *(void *)(v35 - 8);
  int v39 = (*(uint64_t (**)(char *, uint64_t))(v78 + 88))(v23, v35);
  uint64_t v40 = v23;
  if (v39 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
  {
    uint64_t v81 = v15;
    uint64_t v41 = v29;
    uint64_t v42 = v35;
    uint64_t v43 = v85;
    swift_bridgeObjectRetain(v85);
    uint64_t v77 = v23;
    uint64_t v44 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v97);
    uint64_t v45 = v43;
    uint64_t v35 = v42;
    uint64_t v29 = v41;
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter(v84, v45);
    v44(v97, 0LL);
    (*(void (**)(char *, void, uint64_t))(v82 + 104))( v19,  enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:),  v83);
    unint64_t v46 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v97);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter(v19);
    v46(v97, 0LL);
    unint64_t v47 = v87;
    (*((void (**)(char *, void, uint64_t))v81 + 13))( v87,  enum case for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.lookup(_:),  v86);
    uint64_t v48 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v97);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.triggerEvent.setter(v47);
    v48(v97, 0LL);
    id v49 = v92;
    (*(void (**)(char *, void, uint64_t))(v90 + 104))( v92,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:),  v91);
    uint64_t v50 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v97);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter(v49);
    v50(v97, 0LL);
    id v51 = [v88 lookupSelectionType];
    id v52 = v89;
    sub_10002966C((unint64_t)v51, v89);
    uint64_t v53 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v97);
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.lookupSelectionType.setter(v52);
    uint64_t v40 = v77;
    v53(v97, 0LL);
  }

  else if (v39 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
  {
    uint64_t v77 = v23;
    uint64_t v54 = v92;
    (*(void (**)(char *, void, uint64_t))(v90 + 104))( v92,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:),  v91);
    uint64_t v55 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v97);
    Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter(v54);
    v55(v97, 0LL);
    sub_100061030();
    sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
    uint64_t v37 = v96;
    uint64_t v57 = Message.serializedData(partial:)(0LL, v26, v56);
    if (v37)
    {
      swift_errorRelease(v37);
      uint64_t v37 = 0LL;
    }

    else
    {
      uint64_t v59 = v57;
      unint64_t v60 = v58;
      Swift::String v61 = Data.base64EncodedString(options:)(0LL);
      sub_100010A30(v59, v60);
      uint64_t v62 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v97);
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.fbq.setter(v61._countAndFlagsBits, v61._object);
      v62(v97, 0LL);
    }

    uint64_t v40 = v77;
    goto LABEL_11;
  }

  uint64_t v37 = v96;
LABEL_11:
  unsigned int v38 = v94;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v40, v35);
LABEL_12:
  sub_100019C1C((uint64_t)v25, (uint64_t *)&unk_1001D5340);
  v38(v29, v31, v26);
  sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v64 = Message.serializedData(partial:)(0LL, v26, v63);
  if (v37)
  {
    swift_errorRelease(v37);
    uint64_t v66 = *(void (**)(char *, uint64_t))(v95 + 8);
    v66(v29, v26);
    return ((uint64_t (*)(char *, uint64_t))v66)(v31, v26);
  }

  else
  {
    uint64_t v68 = v64;
    unint64_t v69 = v65;
    uint64_t v70 = v93 + 16;
    uint64_t v71 = *(void (**)(char *, uint64_t))(v95 + 8);
    v71(v29, v26);
    swift_beginAccess(v70, v97, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(v70);
    if (Strong)
    {
      uint64_t v73 = *(void *)(Strong + 64);
      id v74 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
      swift_unknownObjectRetain(v73);
      sub_100014244(v68, v69);
      sub_100069C58(v68, v69);
      uint64_t v76 = v75;
      sub_1000A5CB4();
      swift_release();
      swift_unknownObjectRelease();

      sub_100010A30(v68, v69);
      return ((uint64_t (*)(char *, uint64_t))v71)(v31, v26);
    }

    else
    {
      v71(v31, v26);
      return sub_100010A30(v68, v69);
    }
  }

uint64_t sub_10008B164( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v26;
  *(_OWORD *)(v8 + 96) = v24;
  *(_OWORD *)(v8 + 112) = v25;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 56) = a4;
  uint64_t v9 = ((uint64_t (*)(void))type metadata accessor for BinaryEncodingError)(0LL);
  *(void *)(v8 + 136) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 144) = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 152) = swift_task_alloc(v11);
  *(void *)(v8 + 160) = swift_task_alloc(v11);
  uint64_t v12 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Search_StatusCode)(0LL);
  *(void *)(v8 + 168) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 176) = v13;
  *(void *)(v8 + 184) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchResponse)(0LL);
  *(void *)(v8 + 192) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 200) = v15;
  *(void *)(v8 + 208) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchRequest)(0LL);
  *(void *)(v8 + 2sub_10000BDD4(v0 + 16) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v8 + 224) = v17;
  *(void *)(v8 + 232) = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for JSONEncodingOptions(0LL);
  *(void *)(v8 + 240) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v8 + 248) = v19;
  *(void *)(v8 + 256) = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for PegasusContext(0LL);
  *(void *)(v8 + 264) = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  *(void *)(v8 + 272) = Context;
  uint64_t v22 = *(void *)(Context - 8);
  *(void *)(v8 + 280) = v22;
  *(void *)(v8 + 288) = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008B2D4, 0LL, 0LL);
}

uint64_t sub_10008B2D4()
{
  uint64_t v37 = v1;
  uint64_t v38 = v2;
  int v36 = v0;
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[33];
  uint64_t v5 = v0[34];
  uint64_t v8 = v0[31];
  uint64_t v7 = v0[32];
  sub_10004A274(v6);
  sub_1000B5FCC(23LL, v3, v4);
  sub_10004D784(v6, type metadata accessor for PegasusContext);
  JSONEncodingOptions.init()(v9);
  sub_100059F08( &qword_1001D4488,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext);
  uint64_t v11 = Message.jsonString(options:)(v7, v5, v10);
  unint64_t v13 = v12;
  (*(void (**)(void, void))(v8 + 8))(v0[32], v0[30]);
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  uint64_t v14 = (os_log_s *)v0[11];
  uint64_t v15 = (void *)v0[9];
  uint64_t v16 = sub_100010ED4();
  os_log_type_t v17 = sub_1000093D0(v16, (uint64_t)qword_1001EDC78);
  id v18 = v15;
  sub_1000A18C4((uint64_t)v14);
  id v19 = v18;
  sub_10005A62C();
  sub_1000A260C();
  os_log_type_t v20 = sub_100014588();
  if (sub_100010DE4(v20))
  {
    uint64_t v21 = v0[11];
    uint64_t v32 = v0[12];
    uint64_t v22 = (void *)v0[9];
    uint64_t v30 = v0[10];
    uint64_t v31 = v11;
    uint64_t v23 = sub_100009B20(42LL);
    uint64_t v33 = sub_100009B20(64LL);
    v35[0] = v33;
    *(_DWORD *)uint64_t v23 = 134349827;
    id v24 = sub_10005A6E0(v33, "queryId");

    v0[3] = v24;
    sub_1000A1894((uint64_t)(v0 + 3), (uint64_t)(v0 + 4));

    *(_WORD *)(v23 + 12) = 2085;
    sub_1000A2710();
    v0[4] = sub_1000A2048(v30, v25, v35);
    sub_1000A1F14((uint64_t)(v0 + 4), (uint64_t)(v0 + 5));
    sub_100019FA4(v21);
    *(_WORD *)(v23 + 22) = 2085;
    sub_10005A62C();
    v0[5] = sub_1000307E0(v31, v13, v35);
    sub_1000A1F14((uint64_t)(v0 + 5), (uint64_t)(v0 + 6));
    sub_100019FA4(v13);
    *(_WORD *)(v23 + 32) = 2050;
    v0[6] = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v23 + 34);
    sub_1000A1808( (void *)&_mh_execute_header,  v14,  v17,  "performing query %{public}llu lookup string %{sensitive}s header: %{sensitive}s requestId: %{public}llu",  (uint8_t *)v23);
    sub_10004EE00(v33);
    sub_100010C34(v33);
    sub_100010C34(v23);
  }

  else
  {
    uint64_t v26 = v0[11];
    uint64_t v27 = (void *)v0[9];

    sub_100019F4C(v26);
    sub_100019F4C(v13);
  }

  ((void (*)(void, void, void))dispatch thunk of PegasusProxyForLookupSearch.createRequest(_:context:))( v0[10],  v0[11],  v0[36]);
  v0[37] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10008B60C;
  return ((uint64_t (*)(void, void))v34)(v0[26], v0[29]);
}

uint64_t sub_10008B60C()
{
  uint64_t v3 = *(void *)(v2 + 296);
  *uint64_t v4 = *v1;
  *(void *)(v2 + 304) = v0;
  swift_task_dealloc(v3);
  sub_1000A1A44();
  return sub_1000A1414(v5, v6, v7);
}

uint64_t sub_10008B65C()
{
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 192);
  id v4 = [objc_allocWithZone(PARReply) init];
  sub_100059F08( &qword_1001D54E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchResponse);
  uint64_t v6 = Message.serializedData(partial:)(0LL, v3, v5);
  if (v2)
  {
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v8 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v15 = *(void *)(v0 + 136);
    sub_1000A1BEC(*(void *)(v0 + 224));
    sub_10005A26C(v11, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    *(void *)(v0 + sub_10000BDD4(v0 + 16) = v2;
    sub_1000110C4();
    uint64_t v16 = sub_10000941C(&qword_1001D2B70);
    if ((sub_1000A1800(v14, v0 + 16, v16, v15) & 1) != 0)
    {
      uint64_t v17 = *(void *)(v0 + 152);
      uint64_t v18 = *(void *)(v0 + 160);
      sub_1000A281C();
      sub_100010D88();
      uint64_t v19 = sub_10005A3B0(v17, v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32));
      *(_BYTE *)(v1 + qword_1001D2E88) = 18;
      id v20 = sub_10005A6B4(v19, "queryId");
      sub_100059F08(&qword_1001D5498, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
      uint64_t v22 = sub_100010EA0(v13, v21);
      sub_10005A3B0(v23, v17, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
      sub_1000C5FB0(v22);
      sub_1000A2154();
      sub_1000A253C((uint64_t)v20);
      sub_1000A2188();
      sub_10005A26C(v17, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
      uint64_t v24 = *(void *)(v0 + 16);
    }

    else
    {
      sub_1000A2020();
      sub_1000A240C(qword_1001D2E88);
      id v36 = sub_10003D808(v35, "queryId");
      sub_1000110C4();
      sub_1000A1630();
      sub_100010D88();
      sub_1000A2548((uint64_t)v36);
      sub_10005F888();
      uint64_t v24 = v2;
    }

    swift_errorRelease(v24);
  }

  else
  {
    char v25 = sub_1000A47FC(v6, v7);
    uint64_t v52 = *(void *)(v0 + 272);
    uint64_t v53 = *(void *)(v0 + 288);
    uint64_t v50 = *(void *)(v0 + 232);
    uint64_t v51 = *(void *)(v0 + 280);
    uint64_t v48 = *(void *)(v0 + 224);
    uint64_t v49 = *(void *)(v0 + 216);
    uint64_t v47 = *(void *)(v0 + 200);
    if ((v25 & 1) != 0)
    {
      uint64_t v26 = *(void *)(v0 + 176);
      uint64_t v27 = *(void *)(v0 + 184);
      unint64_t v46 = *(void (**)(id, void, uint64_t))(v0 + 120);
      uint64_t v28 = *(void **)(v0 + 72);
      *(_BYTE *)(*(void *)(v0 + 112) + qword_1001D2E88) = 20;
      id v29 = [v28 queryId];
      uint64_t v30 = Apple_Parsec_Lookup_V1alpha_LookupSearchResponse.status.getter();
      Apple_Parsec_Search_StatusCode.rawValue.getter(v30);
      sub_10005A6D0(v27, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
      unint64_t v31 = sub_1000A0678();
      uint64_t v32 = sub_100010EA0((uint64_t)&type metadata for ClientState.ResponseError, v31);
      uint64_t v34 = sub_1000A2008(v32, v33);
      sub_1000A2154();
      v46(v29, 0LL, v34);
      swift_errorRelease(v34);
    }

    else
    {
      uint64_t v37 = *(void *)(v0 + 112);
      uint64_t v38 = sub_1000A272C();
      sub_100090290(v38, v39, v4);
      id v41 = sub_1000A1484(v40, "queryId");
      id v42 = v4;
      sub_1000A23D0((uint64_t)v41, (uint64_t)v4);

      *(_BYTE *)(v37 + qword_1001D2E88) = 2;
      sub_100042D10();
    }

    uint64_t v43 = sub_1000A272C();
    sub_100010A30(v43, v44);
    sub_1000A262C(v47);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v49);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v53, v52);
  }

  sub_1000A1AC8();
  sub_1000A19F8();
  sub_1000A19D8();
  sub_1000A19C0();
  sub_1000A183C();
  sub_1000A196C();
  sub_1000A1974();
  sub_1000A1C18();
  return sub_1000A1680(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008B9DC()
{
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 136);
  sub_1000A1BEC(*(void *)(v0 + 224));
  sub_10004729C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  *(void *)(v0 + sub_10000BDD4(v0 + 16) = v3;
  sub_100029138();
  uint64_t v8 = sub_10000941C(&qword_1001D2B70);
  if ((sub_1000A1800(v6, v0 + 16, v8, v7) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 152);
    sub_1000A281C();
    sub_100014530();
    uint64_t v10 = sub_1000A2244();
    uint64_t v13 = sub_10005A3B0(v10, v11, v12);
    *(_BYTE *)(v2 + qword_1001D2E88) = 18;
    id v14 = sub_10005A6B4(v13, "queryId");
    sub_100059F08(&qword_1001D5498, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    uint64_t v16 = sub_100010EA0(v6, v15);
    sub_10005A3B0(v17, v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
    sub_1000C5FB0(v16);
    sub_1000A2154();
    sub_1000A253C((uint64_t)v14);
    sub_1000A2188();
    sub_10005A26C(v9, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    uint64_t v18 = *(void *)(v0 + 16);
  }

  else
  {
    sub_1000A2020();
    sub_1000A240C(qword_1001D2E88);
    id v20 = sub_100047258(v19, "queryId");
    sub_100029138();
    sub_1000A233C();
    sub_100014530();
    sub_1000A2548((uint64_t)v20);
    sub_10005F888();
    uint64_t v18 = v3;
  }

  swift_errorRelease(v18);
  sub_1000A1AC8();
  sub_1000A19F8();
  sub_1000A19D8();
  sub_1000A19C0();
  sub_1000A183C();
  sub_1000A196C();
  sub_1000A1974();
  sub_1000A1C18();
  return sub_1000A143C(*(uint64_t (**)(void))(v0 + 8));
}

void *sub_10008BB70(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000875FC(a1, a2, a3);
  if (v3) {
    return (void *)v5;
  }
  return result;
}

id sub_10008BB94(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v6 = a2;
  uint64_t v7 = sub_100014244(a3, a4);
  Apple_Parsec_Search_V2_SearchResponse.init()(v7);
  return v6;
}

uint64_t sub_10008BBF8@<X0>( uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = sub_10000941C(&qword_1001D53D8);
  uint64_t result = a2((char *)a3 + *(int *)(v9 + 64), v6, v7, v8);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v11;
    a3[2] = v12;
  }

  return result;
}

uint64_t sub_10008BC74(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  sub_1000A14F8(a1 + 16, (uint64_t)v3);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    sub_100061030();
    return sub_100010CA0();
  }

  return result;
}

uint64_t sub_10008BCC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy);
  if (!v5)
  {
    sub_100085D78();
    uint64_t v5 = *(void *)(a1 + v4);
    if (!v5)
    {
      if (qword_1001D04E0 != -1) {
        swift_once(&qword_1001D04E0, sub_10003438C);
      }
      uint64_t v6 = type metadata accessor for Logger(0LL);
      uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001EDB70);
      uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.default.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing zkw proxy, bailing", v10, 2u);
        swift_slowDealloc(v10, -1LL, -1LL);
      }

      uint64_t v5 = 0LL;
    }
  }

  *a2 = v5;
  return swift_retain(v5);
}

uint64_t sub_10008BDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000941C(&qword_1001D54E8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!swift_unknownObjectWeakLoadStrong(v2 + 16))
  {
    uint64_t v43 = 0LL;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    goto LABEL_20;
  }

  sub_1000487F8((uint64_t)&v41);
  swift_unknownObjectRelease();
  if (!*((void *)&v42 + 1))
  {
LABEL_20:
    sub_100019C1C((uint64_t)&v41, &qword_1001D36D0);
    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_1000093D0(v28, (uint64_t)qword_1001EDB70);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v35 = static os_log_type_t.info.getter(v30, v31, v32, v33, v34);
    if (os_log_type_enabled(v30, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v35, "Topic results cache is disabled", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v37 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
    return sub_100009654(a2, 1LL, 1LL, v37);
  }

  sub_100019BC4(&v41, (uint64_t)v44);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v38 = a1;
    }
    else {
      uint64_t v38 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v9 = (uint64_t)_swiftEmptyArrayStorage;
  if (!v8)
  {
LABEL_13:
    uint64_t v18 = sub_100019AFC(v44, v45);
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0) {
        uint64_t v39 = v9;
      }
      else {
        uint64_t v39 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v40 = sub_100009788(0LL, (unint64_t *)&qword_1001D10B8, &OBJC_CLASS___SFTopic_ptr);
      swift_bridgeObjectRetain(v9);
      uint64_t v20 = _bridgeCocoaArray<A>(_:)(v39, v40);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v19 = swift_bridgeObjectRetain(v9);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v19);
      sub_100009788(0LL, (unint64_t *)&qword_1001D10B8, &OBJC_CLASS___SFTopic_ptr);
      uint64_t v20 = v9;
    }

    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)*v18;
    uint64_t v22 = *(os_unfair_lock_s **)(v21[2] + 16LL);
    swift_retain(v21);
    swift_bridgeObjectRetain(v20);
    os_unfair_lock_lock(v22);
    sub_10006C668(v21, v20, &v41);
    os_unfair_lock_unlock(v22);
    swift_bridgeObjectRelease_n(v20, 2LL);
    swift_release();
    uint64_t v23 = v41;
    if ((void)v41)
    {
      sub_100019AFC(v44, v45);
      sub_10008471C(a1, v23, (uint64_t)v7);
      swift_bridgeObjectRelease();
      uint64_t v24 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
      if (sub_100010708((uint64_t)v7, 1LL, v24) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(a2, v7, v24);
        uint64_t v26 = a2;
        uint64_t v27 = 0LL;
        uint64_t v25 = v24;
        goto LABEL_26;
      }

      sub_100019C1C((uint64_t)v7, &qword_1001D54E8);
    }

    uint64_t v25 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
    uint64_t v26 = a2;
    uint64_t v27 = 1LL;
LABEL_26:
    sub_100009654(v26, v27, 1LL, v25);
    return sub_1000108B8(v44);
  }

  *(void *)&__int128 v41 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v8);
  if ((v8 & 0x8000000000000000LL) == 0)
  {
    uint64_t v11 = 0LL;
    do
    {
      if ((a1 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      ++v11;
      id v14 = [v12 topic];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = *(void *)(v41 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
    }

    while (v8 != v11);
    uint64_t v9 = v41;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t sub_10008C1D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a3;
  uint64_t v53 = a6;
  v51[1] = a4;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType(0LL);
  uint64_t v54 = *(void *)(v9 - 8);
  uint64_t v55 = v9;
  __chkstk_darwin(v9);
  uint64_t v56 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000941C((uint64_t *)&unk_1001D5340);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)v51 - v19;
  uint64_t v21 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload(0LL);
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v58 = (char *)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v51 - v24;
  uint64_t v26 = a5 + 16;
  uint64_t v59 = v27;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  v57((char *)v51 - v24, a1, v21);
  uint64_t v28 = Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter([a2 queryId]);
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter(v28);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback(0LL);
  if (sub_100010708((uint64_t)v20, 1LL, v29) != 1)
  {
    sub_1000107D0((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_1001D5340);
    uint64_t v30 = *(void *)(v29 - 8);
    int v31 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v18, v29);
    v51[0] = v30;
    if (v31 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
    {
      (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for Apple_Parsec_Feedback_V2_SearchType.zeroKeyword(_:),  v11);
      uint64_t v32 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v61);
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter(v14);
      v32(v61, 0LL);
      uint64_t v33 = v56;
      (*(void (**)(char *, void, uint64_t))(v54 + 104))( v56,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecZeroKeywordSuggest(_:),  v55);
      uint64_t v34 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify(v61);
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter(v33);
      v34(v61, 0LL);
    }

    else if (v31 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
    {
      uint64_t v35 = v52 + 16;
      id v36 = v56;
      (*(void (**)(char *, void, uint64_t))(v54 + 104))( v56,  enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:),  v55);
      uint64_t v37 = (void (*)(_BYTE *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify(v61);
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter(v36);
      v37(v61, 0LL);
      swift_beginAccess(v35, v60, 0LL, 0LL);
      if (swift_unknownObjectWeakLoadStrong(v35))
      {
        sub_100061030();
        swift_unknownObjectRelease();
      }
    }

    (*(void (**)(char *, uint64_t))(v51[0] + 8LL))(v18, v29);
  }

  sub_100019C1C((uint64_t)v20, (uint64_t *)&unk_1001D5340);
  swift_beginAccess(v26, v61, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v26);
  if (!Strong) {
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v25, v21);
  }
  uint64_t v39 = Strong;
  uint64_t v40 = v58;
  v57(v58, (uint64_t)v25, v21);
  sub_100059F08( &qword_1001D16A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v42 = Message.serializedData(partial:)(0LL, v21, v41);
  unint64_t v44 = v43;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v59 + 8);
  v45(v40, v21);
  uint64_t v46 = *(void *)(v39 + 64);
  id v47 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  swift_unknownObjectRetain(v46);
  sub_100014244(v42, v44);
  sub_100069C58(v42, v44);
  uint64_t v49 = v48;
  sub_1000A5CB4();
  swift_unknownObjectRelease();
  swift_release();

  sub_100010A30(v42, v44);
  return ((uint64_t (*)(char *, uint64_t))v45)(v25, v21);
}

void sub_10008C664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (qword_1001D04E0 != -1) {
    swift_once(&qword_1001D04E0, sub_10003438C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDB70);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v16 = static os_log_type_t.info.getter(v11, v12, v13, v14, v15);
  if (os_log_type_enabled(v11, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v16,  "ZKW: Received response after timeout, attempting to add response to topic cache",  v17,  2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  if (*(_BYTE *)(a2 + 81) != 1) {
    goto LABEL_11;
  }
  sub_1000487F8((uint64_t)&v34);
  if (!v35)
  {
    sub_100019C1C((uint64_t)&v34, &qword_1001D36D0);
LABEL_11:
    swift_retain(a2);
    uint64_t v25 = swift_unknownObjectRetain(a3);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v31 = static os_log_type_t.info.getter(v26, v27, v28, v29, v30);
    if (os_log_type_enabled(v26, v31))
    {
      uint64_t v32 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v32 = 67109376;
      LODWORD(v36[0]) = *(unsigned __int8 *)(a2 + 81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, (char *)v36 + 4, v32 + 4);
      swift_release();
      *(_WORD *)(v32 + 8) = 1024;
      sub_1000487F8((uint64_t)v36);
      BOOL v33 = v37 != 0;
      sub_100019C1C((uint64_t)v36, &qword_1001D36D0);
      LODWORD(v36[0]) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, (char *)v36 + 4, v32 + 10);
      swift_unknownObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v31,  "ZKW: Failed to add to the cache. Span is done: %{BOOL}d. Cache is enabled %{BOOL}d",  (uint8_t *)v32,  0xEu);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
      swift_release();
    }

    return;
  }

  uint64_t v18 = sub_100019BC4(&v34, (uint64_t)v36);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "ZKW: Populating cache with response received after timeout",  v21,  2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  sub_100019AFC(v36, v37);
  id v22 = [a5 queryTopicContexts];
  uint64_t v23 = sub_100009788(0LL, &qword_1001D54F0, &OBJC_CLASS___PARQueryTopicContext_ptr);
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

  sub_1000841A0(v24, a1);
  swift_bridgeObjectRelease();
  sub_1000108B8(v36);
}

void sub_10008C9A4( uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = a3;
  uint64_t v54 = a8;
  id v50 = a5;
  uint64_t v51 = a6;
  uint64_t v52 = a4;
  uint64_t v11 = type metadata accessor for PegasusProxyForSpotlightZKW.Error(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v45 - v17;
  __chkstk_darwin(v16);
  os_log_type_t v20 = (char *)&v45 - v19;
  uint64_t v21 = sub_10000941C((uint64_t *)&unk_1001D5530);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = a7 + 16;
  sub_1000107D0(a1, (uint64_t)v23, (uint64_t *)&unk_1001D5530);
  if (sub_100010708((uint64_t)v23, 1LL, v11) == 1)
  {
    sub_100019C1C((uint64_t)v23, (uint64_t *)&unk_1001D5530);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v23, v11);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))( v18,  enum case for PegasusProxyForSpotlightZKW.Error.timedOut(_:),  v11);
    char v25 = static PegasusProxyForSpotlightZKW.Error.== infix(_:_:)(v20, v18);
    uint64_t v49 = *(void (**)(char *, uint64_t))(v12 + 8);
    v49(v18, v11);
    if ((v25 & 1) != 0) {
      char v26 = 27;
    }
    else {
      char v26 = 24;
    }
    *(_BYTE *)(a2 + qword_1001D2E88) = v26;
    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v27, (uint64_t)qword_1001EDB70);
    uint64_t v28 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v29 = v28(v15, v20, v11);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v32 = static os_log_type_t.error.getter(v30, v31);
    if (os_log_type_enabled(v30, v32))
    {
      uint64_t v47 = a2;
      BOOL v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = (void (*)(char *, char *, uint64_t))v28;
      uint64_t v35 = v34;
      v56[0] = v34;
      uint64_t v46 = v24;
      *(_DWORD *)BOOL v33 = 136315138;
      v48(v18, v15, v11);
      uint64_t v36 = String.init<A>(describing:)(v18);
      uint64_t v55 = sub_1000307E0(v36, v37, v56);
      uint64_t v24 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v33 + 4);
      swift_bridgeObjectRelease();
      uint64_t v38 = v49;
      v49(v15, v11);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v32,  "ZKW: publisher failure, error: %s. Returning an empty response",  v33,  0xCu);
      swift_arrayDestroy(v35, 1LL);
      uint64_t v39 = v35;
      uint64_t v28 = (uint64_t (*)(char *, char *, uint64_t))v48;
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      uint64_t v38 = v49;
      v49(v15, v11);
    }

    id v40 = [v50 queryId];
    sub_100059F08( (unint64_t *)&unk_1001D5518,  (uint64_t (*)(uint64_t))&type metadata accessor for PegasusProxyForSpotlightZKW.Error);
    uint64_t v42 = swift_allocError(v11, v41, 0LL, 0LL);
    v28(v43, v20, v11);
    uint64_t v44 = sub_1000C5FB0(v42);
    swift_errorRelease(v42);
    v53(v40, v51, v44);
    swift_errorRelease(v44);
    v38(v20, v11);
  }

  swift_beginAccess(v24, v56, 0LL, 0LL);
  if (swift_unknownObjectWeakLoadStrong(v24))
  {
    sub_100061030();
    swift_unknownObjectRelease();
  }

  sub_100042D10();
}

void sub_10008CDC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id, uint64_t, uint64_t), uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v49 = a8;
  uint64_t v50 = a6;
  uint64_t v54 = a3;
  id v55 = a7;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v53 = a2;
  uint64_t v11 = type metadata accessor for PegasusProxyForSpotlightZKW.Error(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10000941C(&qword_1001D5510);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a1, (uint64_t)v21, &qword_1001D5510);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v21, v11);
    *(_BYTE *)(v51 + qword_1001D2E88) = 48;
    id v22 = [v55 queryId];
    sub_100059F08( (unint64_t *)&unk_1001D5518,  (uint64_t (*)(uint64_t))&type metadata accessor for PegasusProxyForSpotlightZKW.Error);
    uint64_t v24 = swift_allocError(v11, v23, 0LL, 0LL);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v25, v14, v11);
    uint64_t v26 = sub_1000C5FB0(v24);
    swift_errorRelease(v24);
    v52(v22, a10, v26);
    swift_errorRelease(v26);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    *(_BYTE *)(v51 + qword_1001D2E88) = 2;
    id v27 = [objc_allocWithZone(PARReply) init];
    sub_100059F08( &qword_1001D5508,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse);
    uint64_t v29 = Message.serializedData(partial:)(0LL, v15, v28);
    unint64_t v31 = v30;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100010A30(v29, v31);
    uint64_t v47 = v16;
    uint64_t v48 = v15;
    objc_msgSend(v27, "setData:", isa, v18);

    id v33 = v55;
    id v34 = [v55 queryId];
    id v35 = v27;
    v52(v34, (uint64_t)v27, 0LL);

    if (qword_1001D04E0 != -1) {
      swift_once(&qword_1001D04E0, sub_10003438C);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v36, (uint64_t)qword_1001EDB70);
    uint64_t v37 = swift_unknownObjectRetain(v49);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v40 = 67109120;
      sub_1000487F8((uint64_t)v56);
      BOOL v41 = v57 != 0;
      sub_100019C1C((uint64_t)v56, &qword_1001D36D0);
      LODWORD(v56[0]) = v41;
      id v33 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, (char *)v56 + 4, v40 + 4);
      swift_unknownObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "ZKW: Attempting to add to cache. Cache is on: %{BOOL}d",  v40,  8u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      swift_unknownObjectRelease();
    }

    sub_1000487F8((uint64_t)v56);
    if (v57)
    {
      sub_100019AFC(v56, v57);
      id v42 = [v33 queryTopicContexts];
      uint64_t v43 = sub_100009788(0LL, &qword_1001D54F0, &OBJC_CLASS___PARQueryTopicContext_ptr);
      uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v43);

      uint64_t v45 = v46;
      sub_1000841A0(v44, v46);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v48);
      sub_1000108B8(v56);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);

      sub_100019C1C((uint64_t)v56, &qword_1001D36D0);
    }
  }

  sub_10008D2C4(v53);
}

void sub_10008D2C4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  sub_1000A14F8(a1 + 16, (uint64_t)v2);
  if (swift_unknownObjectWeakLoadStrong(v1))
  {
    sub_100061030();
    sub_1000471D0();
  }

  sub_100042D10();
}

uint64_t sub_10008D32C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 88) = v25;
  *(_OWORD *)(v8 + 72) = v24;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 32) = a4;
  uint64_t v9 = ((uint64_t (*)(void))type metadata accessor for ProxyError)(0LL);
  *(void *)(v8 + 96) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 104) = v10;
  *(void *)(v8 + 112) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000941C(&qword_1001D5550);
  *(void *)(v8 + 120) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail(0LL);
  *(void *)(v8 + 128) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v8 + 136) = v13;
  *(void *)(v8 + 144) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchResponse)(0LL);
  *(void *)(v8 + 152) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v8 + 160) = v15;
  *(void *)(v8 + 168) = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000941C(&qword_1001D5558);
  *(void *)(v8 + 176) = v16;
  unint64_t v17 = (*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 184) = swift_task_alloc(v17);
  *(void *)(v8 + 192) = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for PegasusContext(0LL);
  *(void *)(v8 + 200) = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  *(void *)(v8 + 208) = swift_task_alloc((*(void *)(*(void *)(Context - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10000941C(&qword_1001D5560);
  *(void *)(v8 + 2sub_10000BDD4(v0 + 16) = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest(0LL);
  *(void *)(v8 + 224) = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  *(void *)(v8 + 232) = v22;
  *(void *)(v8 + 240) = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008D4DC, 0LL, 0LL);
}

uint64_t sub_10008D4DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void), uint64_t (*a13)(void), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  a23 = v27;
  a24 = v28;
  a22 = v25;
  if (qword_1001D04B0 != -1) {
    swift_once(&qword_1001D04B0, sub_1000342AC);
  }
  uint64_t v29 = *(void **)(v25 + 32);
  uint64_t v30 = sub_100010ED4();
  sub_1000A15F8(v30, (uint64_t)qword_1001EDAE0);
  Logger.logObject.getter(v29);
  os_log_type_t v31 = sub_10006B8B0();
  BOOL v32 = sub_100010DE4(v31);
  id v33 = *(void **)(v25 + 32);
  id v34 = &selRef_fbr;
  if (v32)
  {
    uint64_t v35 = sub_100009B20(22LL);
    a12 = (uint64_t (*)(void))sub_100009B20(64LL);
    a13 = a12;
    *(_DWORD *)uint64_t v35 = 136643075;
    uint64_t v26 = v35 + 4;
    id v36 = sub_1000A1484((uint64_t)a12, "urlString");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v36);

    uint64_t v37 = sub_1000A1E48();
    *(void *)(v25 + sub_10000BDD4(v0 + 16) = sub_1000307E0(v37, v38, v39);
    sub_1000A26CC(v25 + 16, v25 + 24);
    sub_1000110A8();

    *(_WORD *)(v35 + 12) = 2085;
    id v41 = sub_1000A1484(v40, "urlVariants");
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for String);

    uint64_t v42 = sub_1000A2704();
    uint64_t v44 = Array.description.getter(v42, v43);
    unint64_t v46 = v45;
    sub_10003B8E8();
    uint64_t v47 = v44;
    id v34 = &selRef_fbr;
    *(void *)(v25 + 24) = sub_1000307E0(v47, v46, (uint64_t *)&a13);
    sub_1000A1A78(v25 + 24, v25 + 32);
    sub_100010C70();

    sub_100019F44( (void *)&_mh_execute_header,  v24,  (os_log_type_t)v29,  "URL string: %{sensitive}s, URL variants: %{sensitive}s",  (uint8_t *)v35);
    sub_10004EE00((uint64_t)a12);
    sub_100010C34((uint64_t)a12);
    sub_100010C34(v35);
  }

  else
  {
  }

  uint64_t v49 = *(void *)(v25 + 216);
  uint64_t v48 = *(void *)(v25 + 224);
  id v51 = sub_100032C5C(v50, v34[333]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v51);

  id v53 = sub_100032C5C(v52, "localeString");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  uint64_t v55 = v54;

  uint64_t v56 = sub_1000A217C();
  dispatch thunk of PegasusProxyForSafariAssistant.createPrefetchRequest(url:localeString:)(v56);
  sub_10003B8E8();
  sub_100010C70();
  sub_10005A148(v49, 1LL, v48);
  if (v57)
  {
    uint64_t v58 = *(void *)(v25 + 48);
    sub_100019C1C(*(void *)(v25 + 216), &qword_1001D5560);
    *(_BYTE *)(v58 + qword_1001D2E88) = 17;
    sub_1000A23D0(0LL, 0LL);
    sub_1000A1988();
    sub_1000A19F8();
    sub_1000A19D8();
    sub_1000A19C0();
    sub_1000A183C();
    sub_1000A196C();
    sub_1000A1974();
    sub_1000A1C18();
    swift_task_dealloc(v55);
    swift_task_dealloc(v26);
    return sub_1000A16C8(*(uint64_t (**)(void))(v25 + 8));
  }

  else
  {
    uint64_t v60 = *(void *)(v25 + 200);
    uint64_t v59 = *(void *)(v25 + 208);
    sub_1000A24D8(*(void *)(v25 + 232));
    sub_10004A274(v60);
    sub_1000A1CE0();
    sub_1000A2588(v61, type metadata accessor for PegasusContext);
    Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.queryContext.setter(v59);
    uint64_t v62 = (void *)sub_1000A1D74((uint64_t)&async function pointer to dispatch thunk of PegasusProxyForSafariAssistant.prefetch(searchRequest:));
    *(void *)(v25 + 248) = v62;
    *uint64_t v62 = v25;
    v62[1] = sub_10008D834;
    return sub_1000A16E4(*(void *)(v25 + 192), *(void *)(v25 + 240), a12);
  }

uint64_t sub_10008D834()
{
  return sub_1000A1414(v1, v2, v3);
}

#error "10008D9F8: call analysis failed (funcsize=227)"
void sub_10008DC10( uint64_t a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  uint64_t a14,  uint64_t a15,  uint64_t a16,  uint64_t a17,  uint64_t a18,  uint64_t a19,  uint64_t a20)
{
  os_log_s *v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_s *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  __objc2_class_ro *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_log_type_t v96;
  unint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v119;
  char v120;
  uint64_t v121;
  BOOL v122;
  Swift::Int v123;
  unint64_t v124;
  char v125;
  Swift::Bool v126;
  unint64_t v127;
  char v128;
  void (*v129)(uint64_t, unint64_t, uint64_t);
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  os_log_s *v140;
  os_log_type_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  os_log_s *v156;
  unint64_t v157;
  unint64_t v158;
  os_log_s *v159;
  uint64_t v160;
  uint64_t v161;
  os_log_type_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  os_log_s *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, void);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void v195[4];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t (*v200)(void);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  __int128 v205;
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  os_log_s *v210;
  uint64_t v211;
  char *v212;
  __objc2_class_ro *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  os_log_s *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  sub_100009B08();
  a19 = v24;
  a20 = v25;
  v213 = (__objc2_class_ro *)v26;
  v202 = v27;
  v203 = v28;
  v198 = v29;
  v199 = v30;
  sub_100010ED4();
  sub_1000A27A0();
  v197 = v31;
  sub_100027160();
  __chkstk_darwin(v32);
  v196 = (uint64_t)v195 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v34 = sub_1000A1638();
  v220 = type metadata accessor for SHA256(v34);
  v209 = *(void *)(v220 - 8);
  sub_100027160();
  __chkstk_darwin(v35);
  sub_100077030();
  __chkstk_darwin(v36);
  v212 = (char *)v195 - v37;
  unint64_t v38 = sub_1000A1638();
  os_log_type_t v39 = type metadata accessor for SHA256Digest(v38);
  sub_1000A15E0(v39, (uint64_t)&a16);
  v208 = v40;
  sub_100027160();
  __chkstk_darwin(v41);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v42);
  v207 = (char *)v195 - v43;
  uint64_t v44 = sub_1000A1638();
  v218 = type metadata accessor for String.Encoding(v44);
  v215 = *(void *)(v218 - 8);
  sub_100027160();
  __chkstk_darwin(v45);
  v217 = (os_log_s *)((char *)v195 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v47 = sub_1000A1638();
  v221 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail.HashDetail(v47);
  v219 = *(void *)(v221 - 8);
  sub_100027160();
  __chkstk_darwin(v48);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v49);
  sub_10005A2F8();
  v222 = (void *)v50;
  sub_10000941C(&qword_1001D5580);
  sub_100027160();
  __chkstk_darwin(v51);
  sub_100077030();
  __chkstk_darwin(v52);
  sub_10005A2F8();
  v214 = v53;
  uint64_t v54 = sub_1000A1638();
  uint64_t v55 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest(v54);
  sub_1000A15E0(v55, (uint64_t)&a12);
  *(void *)&v205 = v56;
  sub_100027160();
  __chkstk_darwin(v57);
  sub_100009B54();
  sub_10000941C(&qword_1001D5550);
  sub_100027160();
  __chkstk_darwin(v58);
  sub_10007732C((uint64_t)v195 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v216 = 0LL;
  v211 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail(0LL);
  sub_100009B84();
  __chkstk_darwin(v60);
  sub_1000A1798();
  uint64_t v62 = __chkstk_darwin(v61);
  uint64_t v64 = (uint64_t)v195 - v63;
  unint64_t v65 = Apple_Parsec_Sba_V1_SafariAssistantPrefetchResponse.hashBuckets.getter(v62);
  uint64_t v66 = *(void *)(v65 + 16);
  v201 = v64;
  v200 = v22;
  if (v66)
  {
    v204 = (char *)v21;
    uint64_t v21 = v65 + ((*((unsigned __int8 *)v20 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v20 + 80));
    uint64_t v64 = *((void *)v20 + 9);
    uint64_t v67 = v20;
    uint64_t v22 = (uint64_t (*)(void))*((void *)v20 + 2);
    sub_1000145F8();
    while (1)
    {
      sub_1000A1B94();
      uint64_t v68 = v22();
      unint64_t v69 = Apple_Parsec_Sba_V1_HashBucketDetail.hashPrefix.getter(v68);
      uint64_t v71 = v70;
      uint64_t v72 = Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.hashPrefix.getter();
      if (v69 == v72 && v71 == v73) {
        break;
      }
      uint64_t v75 = sub_10005A06C(v69, v71, v72, v73);
      sub_1000110A8();
      sub_100009B3C();
      if ((v75 & 1) != 0) {
        goto LABEL_13;
      }
      uint64_t v76 = v211;
      (*((void (**)(uint64_t, uint64_t))v67 + 1))(v23, v211);
      v21 += v64;
      if (!--v66)
      {
        sub_1000145F0();
        uint64_t v20 = v67;
        sub_1000A1EF0();
        goto LABEL_11;
      }
    }

    sub_1000145F0();
    sub_1000110A8();
LABEL_13:
    uint64_t v76 = v211;
    sub_1000110A8();
    uint64_t v20 = v67;
    uint64_t v78 = sub_1000A1DE8();
    sub_1000471F0(v78, v23, v79);
    sub_1000A1EF0();
  }

  else
  {
    uint64_t v77 = 1LL;
    uint64_t v76 = v211;
LABEL_11:
    uint64_t v67 = v210;
  }

  sub_100014600((uint64_t)v67, v77);
  sub_1000145F0();
  uint64_t v80 = sub_100010708((uint64_t)v67, 1LL, v76);
  uint64_t v81 = v76;
  uint64_t v82 = &SessionFilename;
  uint64_t v83 = &unk_10015D000;
  uint64_t v84 = v221;
  if ((_DWORD)v80 == 1)
  {
    sub_1000A2334(v80, &qword_1001D5550);
    if (qword_1001D04B0 != -1) {
      swift_once(&qword_1001D04B0, sub_1000342AC);
    }
    sub_1000A15F8((uint64_t)v22, (uint64_t)qword_1001EDAE0);
    uint64_t v85 = v203;
    uint64_t v86 = sub_1000A18C4(v203);
    Logger.logObject.getter(v86);
    os_log_type_t v87 = sub_1000A1810();
    if (sub_100077264(v67))
    {
      id v88 = (uint8_t *)sub_100009B20(12LL);
      id v89 = sub_100009B20(32LL);
      v224 = (void *)v89;
      *(_DWORD *)id v88 = 136642819;
      sub_1000145F8();
      uint64_t v90 = sub_1000307E0(v198, v85, (uint64_t *)&v224);
      uint64_t v91 = sub_1000A1C38(v90);
      sub_10006B6DC(v91, v92, (uint64_t)(v88 + 4));
      sub_100019FA4(v85);
      sub_100014564( (void *)&_mh_execute_header,  v67,  v87,  "Search response did not have any matching hash bucket for url %{sensitive}s",  v88);
      sub_100030F9C(v89);
      sub_100010C34(v89);
      sub_100010C34((uint64_t)v88);
    }

    else
    {

      sub_100019F4C(v85);
    }

    sub_10002FC40(v199, v93, v94, v211);
  }

  else
  {
    (*((void (**)(uint64_t, os_log_s *, uint64_t))v20 + 4))(v64, v67, v81);
    if (qword_1001D04B0 != -1) {
      swift_once(&qword_1001D04B0, sub_1000342AC);
    }
    sub_1000A15F8((uint64_t)v22, (uint64_t)qword_1001EDAE0);
    uint64_t v95 = v205;
    sub_10005F8E4(v21, (uint64_t)v213, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v205 + 16));
    sub_1000A2078((uint64_t)&a18);
    uint64_t v96 = sub_100014588();
    uint64_t v97 = v96;
    uint64_t v98 = os_log_type_enabled((os_log_t)&SessionFilename, v96);
    v195[0] = v20;
    if (v98)
    {
      v213 = &SessionFilename;
      uint64_t v99 = v95;
      uint64_t v100 = (uint8_t *)sub_100009B20(12LL);
      id v101 = sub_100009B20(32LL);
      v224 = (void *)v101;
      *(_DWORD *)uint64_t v100 = 136642819;
      id v102 = Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.hashPrefix.getter();
      uint64_t v104 = sub_1000307E0(v102, v103, (uint64_t *)&v224);
      uint64_t v105 = sub_1000A1C38(v104);
      uint64_t v83 = (void *)&unk_10015D000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v105, v106, v100 + 4);
      sub_100009B3C();
      sub_1000A1BC0(v21, *(uint64_t (**)(uint64_t, void))(v99 + 8));
      uint64_t v82 = v213;
      sub_100014564( (void *)&_mh_execute_header,  (os_log_s *)v213,  (os_log_type_t)v97,  "HashDetail.prefixHash: %{sensitive}s",  v100);
      sub_100030F9C(v101);
      sub_100010C34(v101);
      sub_100010C34((uint64_t)v100);
    }

    else
    {
      sub_100009BC8(v21, *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8));
    }

    uint64_t v107 = *(void *)(((uint64_t (*)(void))Apple_Parsec_Sba_V1_HashBucketDetail.hashDetails.getter)() + 16);
    if (v107)
    {
      sub_1000A2050();
      v206 = v108;
      uint64_t v110 = (uint64_t)v108 + v109;
      uint64_t v112 = *(void *)(v111 + 72);
      uint64_t v113 = _swiftEmptyDictionarySingleton;
      v213 = *(__objc2_class_ro **)(v111 + 16);
      do
      {
        uint64_t v114 = ((uint64_t (*)(void *, uint64_t, uint64_t))v213)(v222, v110, v84);
        uint64_t v97 = Apple_Parsec_Sba_V1_HashBucketDetail.HashDetail.fullHash.getter(v114);
        uint64_t v116 = v115;
        uint64_t v117 = (uint64_t)v113;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v113);
        v224 = (void *)v117;
        uint64_t v119 = sub_1000A28A0();
        uint64_t v121 = *(void *)(v117 + 16);
        uint64_t v122 = (v120 & 1) == 0;
        uint64_t v123 = v121 + v122;
        if (__OFADD__(v121, v122))
        {
          __break(1u);
LABEL_60:
          __break(1u);
          JUMPOUT(0x10008F01CLL);
        }

        uint64_t v124 = v119;
        uint64_t v125 = v120;
        sub_10000941C(&qword_1001D5588);
        uint64_t v126 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v123);
        uint64_t v84 = v221;
        if (v126)
        {
          uint64_t v127 = sub_1000A28A0();
          if ((v125 & 1) != (v128 & 1))
          {
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            JUMPOUT(0x10008F0A4LL);
          }

          uint64_t v124 = v127;
        }

        uint64_t v113 = v224;
        if ((v125 & 1) != 0)
        {
          uint64_t v97 = v124 * v112;
          uint64_t v129 = *(void (**)(uint64_t, unint64_t, uint64_t))(v219 + 32);
          uint64_t v130 = v214;
          v129(v214, v224[7] + v124 * v112, v84);
          v129(v113[7] + v124 * v112, (unint64_t)v222, v84);
          sub_1000A18B0(v130, 0LL);
        }

        else
        {
          v224[(v124 >> 6) + 8] |= 1LL << v124;
          uint64_t v131 = (unint64_t *)(v113[6] + 16 * v124);
          *uint64_t v131 = v97;
          v131[1] = v116;
          sub_1000A19B8( v113[7] + v124 * v112,  (uint64_t)v222,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v219 + 32));
          uint64_t v132 = v113[2];
          v133 = __OFADD__(v132, 1LL);
          uint64_t v134 = v132 + 1;
          if (v133) {
            goto LABEL_60;
          }
          v113[2] = v134;
          uint64_t v130 = v214;
          sub_1000A18B0(v214, 1LL);
          sub_1000A2710();
        }

        sub_10003B8E8();
        swift_bridgeObjectRelease();
        sub_100019C1C(v130, &qword_1001D5580);
        v110 += v112;
        --v107;
      }

      while (v107);
      sub_1000A2530();
      uint64_t v83 = (void *)&unk_10015D000;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v113 = _swiftEmptyDictionarySingleton;
    }

    v206 = v113;
    sub_1000A1834();
    sub_1000A1810();
    if (sub_1000A182C((os_log_s *)v97))
    {
      uint64_t v135 = (uint8_t *)sub_100009B20(12LL);
      *(_DWORD *)uint64_t v135 = 134217984;
      v136 = sub_100010BE4(v201, (uint64_t)&v224, 32LL);
      uint64_t v137 = Apple_Parsec_Sba_V1_HashBucketDetail.hashDetails.getter(v136);
      swift_endAccess(&v224);
      id v138 = *(void *)(v137 + 16);
      sub_100009B3C();
      v224 = (void *)v138;
      sub_10006B6DC((uint64_t)&v224, (uint64_t)&v225, (uint64_t)(v135 + 4));
      sub_1000A26F8();
      sub_100014564(v139, v140, v141, v142, v135);
      sub_100010C34((uint64_t)v135);
    }

    uint64_t v143 = v202;
    sub_1000145E8();
    uint64_t v144 = v203;
    sub_100047294();
    uint64_t v145 = swift_isUniquelyReferenced_nonNull_native(v143);
    v146 = v220;
    if ((v145 & 1) == 0)
    {
      sub_1000A2844(0, *(void *)(v143 + 16) + 1LL);
      uint64_t v143 = v193;
    }

    uint64_t v148 = *(void *)(v143 + 16);
    uint64_t v147 = *(void *)(v143 + 24);
    uint64_t v149 = v148 + 1;
    if (v148 >= v147 >> 1)
    {
      sub_1000A2844(v147 > 1, v148 + 1);
      uint64_t v143 = v194;
    }

    *(void *)(v143 + sub_10000BDD4(v0 + 16) = v149;
    uint64_t v150 = v143 + 16 * v148;
    *(void *)(v150 + 32) = v198;
    *(void *)(v150 + 40) = v144;
    sub_1000145E8();
    v202 = v143;
    uint64_t v151 = (uint64_t *)(v143 + 40);
    *(void *)&v152 = v83[326];
    v205 = v152;
    v204 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v153 = *(v151 - 1);
      uint64_t v154 = *v151;
      v155 = sub_1000145E8();
      uint64_t v156 = v217;
      static String.Encoding.utf8.getter(v155);
      v222 = (void *)v153;
      String.data(using:allowLossyConversion:)(v156, 0LL, v153, v154);
      uint64_t v158 = v157;
      uint64_t v159 = *(os_log_s **)(v215 + 8);
      ((void (*)(os_log_s *, uint64_t))v159)(v156, v218);
      if (v158 >> 60 != 15)
      {
        v213 = (__objc2_class_ro *)v159;
        sub_100059F08(&qword_1001D5590, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
        dispatch thunk of HashFunction.init()(v146, v166);
        v167 = (char *)&loc_10008E6AC + dword_10008F0AC[v158 >> 62];
        v214 = v154;
        __asm { BR              X9 }
      }

      sub_1000145E8();
      uint64_t v160 = sub_1000A1834();
      v162 = sub_100047278(v160, v161);
      if (sub_100047154(v162))
      {
        v163 = sub_100009B20(12LL);
        uint64_t v164 = sub_100009B20(32LL);
        v224 = (void *)v164;
        *(_DWORD *)v163 = v205;
        sub_1000145E8();
        *(void *)(v163 + 4) = sub_1000307E0((uint64_t)v222, v154, (uint64_t *)&v224);
        sub_100019FA4(v154);
        sub_100014564( (void *)&_mh_execute_header,  v156,  (os_log_type_t)v153,  "Could not sha256Base64Encode url %{sensitive}s",  (uint8_t *)v163);
        swift_arrayDestroy(v164, 1LL);
        sub_100010C34(v164);
        uint64_t v165 = v163;
        v146 = v220;
        sub_100010C34(v165);
      }

      else
      {

        sub_100019F4C(v154);
      }

      v151 += 2;
      --v149;
    }

    while (v149);
    sub_100019F4C(v202);
    v168 = v197;
    uint64_t v169 = v196;
    sub_1000A19B8(v196, (uint64_t)v210, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v197 + 16));
    uint64_t v170 = sub_1000A1E60((uint64_t)&v226);
    v171 = swift_bridgeObjectRetain_n(v170, 4LL);
    Logger.logObject.getter(v171);
    __int128 v172 = sub_1000A1810();
    if (os_log_type_enabled(v156, v172))
    {
      v173 = sub_100009B20(22LL);
      v222 = (void *)sub_100009B20(64LL);
      v224 = v222;
      *(_DWORD *)v173 = 136643075;
      sub_10003EF98();
      v174 = v198;
      uint64_t v176 = sub_1000A1C20(v198, v175, (uint64_t *)&v224);
      v177 = sub_1000A1C38(v176);
      v179 = v178;
      sub_1000A1658(v177, v178);
      v180 = sub_100019FA4((uint64_t)v151);
      *(_WORD *)(v173 + 12) = 2085;
      v181 = v217;
      static String.Encoding.utf8.getter(v180);
      String.data(using:allowLossyConversion:)(v181, 0LL, v174, v151);
      v183 = v182;
      ((void (*)(os_log_s *, uint64_t))v159)(v181, v218);
      if (v183 >> 60 != 15)
      {
        sub_100059F08(&qword_1001D5590, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
        dispatch thunk of HashFunction.init()(v220, v184);
        __asm { BR              X10 }
      }

      v185 = v195[0];
      v186 = sub_1000272AC();
      v223 = sub_1000307E0(v186, v187, v188);
      sub_1000A1F14((uint64_t)&v223, v179);
      sub_100019F4C(v203);
      sub_100009B3C();
      sub_100019F44( (void *)&_mh_execute_header,  v156,  v172,  "No matching HashDetail for url %{sensitive}s, full hash: %{sensitive}s",  (uint8_t *)v173);
      v189 = (uint64_t)v222;
      sub_10004EE00((uint64_t)v222);
      sub_100010C34(v189);
      sub_100010C34(v173);

      sub_1000A1E3C();
      sub_1000A1BC0(v196, v190);
      v191 = v201;
    }

    else
    {

      swift_bridgeObjectRelease_n(v151, 4LL);
      sub_1000A1A98(v169, *(uint64_t (**)(uint64_t, uint64_t))(v168 + 8));
      v185 = v195[0];
      v191 = v201;
    }

    v192 = v211;
    sub_1000A27B8(v199, 1LL, 1LL);
    sub_100010C70();
    (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v191, v192);
  }

  sub_100009AA0();
}

uint64_t sub_10008F0CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v21;
  v8[8] = v22;
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = ((uint64_t (*)(void))type metadata accessor for ProxyError)(0LL);
  v8[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeResponse)(0LL);
  v8[12] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[13] = v12;
  v8[14] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000941C(&qword_1001D55B8);
  v8[15] = v13;
  unint64_t v14 = (*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[16] = swift_task_alloc(v14);
  v8[17] = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for PegasusContext(0LL);
  v8[18] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  v8[19] = swift_task_alloc((*(void *)(*(void *)(Context - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000941C(&qword_1001D55C0);
  v8[20] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = ((uint64_t (*)(void))type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeRequest)(0LL);
  v8[21] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v8[22] = v19;
  v8[23] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10008F228, 0LL, 0LL);
}

uint64_t sub_10008F228()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  id v3 = [*(id *)(v0 + 24) urlString];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  dispatch thunk of PegasusProxyForSafariAssistant.createSummarizeRequest(urlString:)(v4, v6);
  sub_1000145F0();
  sub_10005A148(v2, 1LL, v1);
  if (v7)
  {
    uint64_t v8 = *(void (**)(void))(v0 + 40);
    sub_100019C1C(*(void *)(v0 + 160), &qword_1001D55C0);
    sub_1000A1360(qword_1001D2E88);
    sub_100047258(v9, "queryId");
    sub_1000A1A44();
    v8();
    sub_1000A1AE4();
    sub_1000A19F8();
    sub_1000A19D8();
    sub_1000A19C0();
    sub_1000A183C();
    sub_1000A196C();
    sub_1000A1974();
    sub_1000A1C18();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 152);
    sub_1000A24D8(*(void *)(v0 + 176));
    sub_10004A274(v11);
    sub_1000A1CE0();
    sub_1000A2588(v12, type metadata accessor for PegasusContext);
    Apple_Parsec_Sba_V1_SafariAssistantSummarizeRequest.queryContext.setter(v10);
    *(void *)(v0 + 192) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_10008F3B8;
    return ((uint64_t (*)(void, void))v15)(*(void *)(v0 + 136), *(void *)(v0 + 184));
  }

uint64_t sub_10008F3B8()
{
  return sub_1000A1414(v1, v2, v3);
}

uint64_t sub_10008F3EC()
{
  int v1 = sub_1000A28EC();
  uint64_t v2 = *(void *)(v0 + 128);
  if (v1 == 1)
  {
    uint64_t v3 = *(void *)(v0 + 88);
    uint64_t v5 = (uint64_t *)(v0 + 80);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 72);
    char v7 = *(void (**)(void, void, uint64_t))(v0 + 40);
    sub_1000770AC(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    sub_1000A240C(qword_1001D2E88);
    sub_100059F08(&qword_1001D5568, (uint64_t (*)(uint64_t))&type metadata accessor for ProxyError);
    sub_100010EA0(v6, v8);
    sub_1000770AC(v9, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
    uint64_t v10 = sub_1000A2580();
    sub_10005F888();
    v7(0LL, 0LL, v10);
    sub_100014530();
  }

  else
  {
    uint64_t v5 = (uint64_t *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 96);
    uint64_t v12 = *(void *)(v0 + 32);
    sub_10005A274( *(void *)(v0 + 112),  v2,  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 104) + 32LL));
    *(_BYTE *)(v12 + qword_1001D2E88) = 2;
    id v13 = [objc_allocWithZone(PARReply) init];
    sub_100059F08( &qword_1001D55C8,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeResponse);
    sub_1000A1D0C(v14);
    if (v11)
    {
      sub_100010D88();
    }

    else
    {
      sub_1000A25AC();
      sub_1000A2324();
    }

    uint64_t v15 = *(void **)(v0 + 24);
    sub_1000A1964(v13, "setData:");

    sub_100032C5C(v16, "queryId");
    id v17 = v13;
    sub_1000A1DC0();
  }

  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v18 = *(void *)(v0 + 184);
  sub_1000A1BEC(*v5);
  sub_100042D10();
  sub_1000A1A50(v20, &qword_1001D55B8);
  sub_10004729C(v18, *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8));
  sub_1000A1AE4();
  sub_1000A19F8();
  sub_1000A19D8();
  sub_1000A19C0();
  sub_1000A183C();
  sub_1000A196C();
  sub_1000A1974();
  sub_1000A1C18();
  return sub_1000A143C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10008F5F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  uint64_t v3 = *(void *)(v1 + v2);
  *(void *)(v1 + v2) = a1;
  swift_errorRetain(a1);
  return swift_errorRelease(v3);
}

id sub_10008F620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
  }

  else
  {
    NSString v6 = 0LL;
  }

  id v7 = [v3 initWithTriggerEvent:a1 input:v6];

  return v7;
}

id sub_10008F690( uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a6)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }

  else
  {
    NSString v18 = 0LL;
  }

  if (a8)
  {
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a8);
  }

  else
  {
    NSString v19 = 0LL;
  }

  if (!a10)
  {
    NSString v20 = 0LL;
    if (a11) {
      goto LABEL_9;
    }
LABEL_11:
    v21.super.Class isa = 0LL;
    goto LABEL_12;
  }

  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a10);
  if (!a11) {
    goto LABEL_11;
  }
LABEL_9:
  v21.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a11);
LABEL_12:
  id v22 = [v11 initWithStartSearch:a1 responseSize:a2 statusCode:a3 parsecStatus:v18 parsecDuration:v19 fbq:v20 partialClientIp:a4 networkTimingData:v21.super.isa];

  swift_unknownObjectRelease(a1);
  return v22;
}

uint64_t sub_10008F7F8(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  uint64_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL));
    sub_100057A20(0LL, v6, v8);
    uint64_t v9 = sub_10008F954((uint64_t)v8, v6, v2);
    if (v1) {
      swift_willThrow(v9);
    }
    else {
      return v9;
    }
  }

  else
  {
    uint64_t v10 = (void *)swift_slowAlloc(v7, -1LL);
    sub_100057A20(0LL, v6, v10);
    uint64_t v2 = sub_10008F954((uint64_t)v10, v6, v2);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return v2;
}

uint64_t sub_10008F954(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  id v36 = (unint64_t *)result;
  uint64_t v37 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v40 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = @"X-Apple-GeoMetadata";
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 16 * v10 + 8);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v18 == v15 && v19 == v16)
    {
LABEL_42:
      uint64_t result = swift_bridgeObjectRelease();
    }

    else
    {
      NSDictionary v21 = v8;
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v15, v16, 0LL);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0) {
        goto LABEL_41;
      }
      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Whitelisted-App-Signature");
      if (v23 == v15 && v24 == v16) {
        goto LABEL_40;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v15, v16, 0LL);
      swift_bridgeObjectRelease();
      if ((v26 & 1) != 0) {
        goto LABEL_41;
      }
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Trial-Identifiers-Array");
      if (v27 == v15 && v28 == v16) {
        goto LABEL_40;
      }
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v15, v16, 0LL);
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0) {
        goto LABEL_41;
      }
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-Silhouette");
      if (v31 == v15 && v32 == v16)
      {
LABEL_40:
        swift_bridgeObjectRelease();
LABEL_41:
        swift_bridgeObjectRelease();
        uint64_t v8 = v21;
        uint64_t v3 = a3;
        goto LABEL_42;
      }

      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v15, v16, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v21;
      uint64_t v3 = a3;
      if ((v34 & 1) == 0)
      {
        *(unint64_t *)((char *)v36 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
        BOOL v11 = __OFADD__(v37++, 1LL);
        if (v11) {
          goto LABEL_50;
        }
      }
    }
  }

  BOOL v11 = __OFADD__(v4++, 1LL);
  if (v11)
  {
    __break(1u);
    goto LABEL_49;
  }

  if (v4 >= v40) {
    return sub_10008FC88(v36, a2, v37, v3);
  }
  unint64_t v12 = *(void *)(v39 + 8 * v4);
  if (v12)
  {
LABEL_16:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_17;
  }

  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v40) {
    return sub_10008FC88(v36, a2, v37, v3);
  }
  unint64_t v12 = *(void *)(v39 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v40) {
    return sub_10008FC88(v36, a2, v37, v3);
  }
  unint64_t v12 = *(void *)(v39 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v40) {
    return sub_10008FC88(v36, a2, v37, v3);
  }
  unint64_t v12 = *(void *)(v39 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v4 = v13;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v40) {
      return sub_10008FC88(v36, a2, v37, v3);
    }
    unint64_t v12 = *(void *)(v39 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }

LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

    if (v25 < v22) {
      goto LABEL_139;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
    v180 = (char *)v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v23 + 2) + 1LL, 1, v23);
      uint64_t v23 = v147;
    }

    uint64_t v95 = *((void *)v23 + 2);
    uint64_t v94 = *((void *)v23 + 3);
    uint64_t v96 = v95 + 1;
    if (v95 >= v94 >> 1)
    {
      sub_1000DD3BC(v94 > 1, v95 + 1, 1, v23);
      uint64_t v23 = v148;
    }

    *((void *)v23 + 2) = v96;
    uint64_t v97 = v23 + 32;
    uint64_t v98 = &v23[16 * v95 + 32];
    uint64_t v99 = v180;
    *(void *)uint64_t v98 = v166;
    *((void *)v98 + sub_10007E30C(v1, v0, 1) = v99;
    if (v95) {
      break;
    }
    uint64_t v96 = 1LL;
LABEL_97:
    uint64_t v24 = a1[1];
    char v22 = (uint64_t)v180;
  }

  while (1)
  {
    uint64_t v100 = v96 - 1;
    if (v96 >= 4)
    {
      uint64_t v105 = &v97[2 * v96];
      uint64_t v106 = *(v105 - 8);
      uint64_t v107 = *(v105 - 7);
      uint64_t v111 = __OFSUB__(v107, v106);
      id v108 = v107 - v106;
      if (v111) {
        goto LABEL_124;
      }
      uint64_t v110 = *(v105 - 6);
      uint64_t v109 = *(v105 - 5);
      uint64_t v111 = __OFSUB__(v109, v110);
      uint64_t v103 = v109 - v110;
      uint64_t v104 = v111;
      if (v111) {
        goto LABEL_125;
      }
      uint64_t v112 = v96 - 2;
      uint64_t v113 = &v97[2 * v96 - 4];
      uint64_t v115 = *v113;
      uint64_t v114 = v113[1];
      uint64_t v111 = __OFSUB__(v114, v115);
      uint64_t v116 = v114 - v115;
      if (v111) {
        goto LABEL_126;
      }
      uint64_t v111 = __OFADD__(v103, v116);
      uint64_t v117 = v103 + v116;
      if (v111) {
        goto LABEL_128;
      }
      if (v117 >= v108)
      {
        uint64_t v135 = &v97[2 * v100];
        uint64_t v137 = *v135;
        v136 = v135[1];
        uint64_t v111 = __OFSUB__(v136, v137);
        id v138 = v136 - v137;
        if (v111) {
          goto LABEL_134;
        }
        uint64_t v128 = v103 < v138;
        goto LABEL_86;
      }
    }

    else
    {
      if (v96 != 3)
      {
        uint64_t v129 = *((void *)v23 + 4);
        uint64_t v130 = *((void *)v23 + 5);
        uint64_t v111 = __OFSUB__(v130, v129);
        uint64_t v122 = v130 - v129;
        uint64_t v123 = v111;
        goto LABEL_80;
      }

      id v102 = *((void *)v23 + 4);
      id v101 = *((void *)v23 + 5);
      uint64_t v111 = __OFSUB__(v101, v102);
      uint64_t v103 = v101 - v102;
      uint64_t v104 = v111;
    }

    if ((v104 & 1) != 0) {
      goto LABEL_127;
    }
    uint64_t v112 = v96 - 2;
    uint64_t v118 = &v97[2 * v96 - 4];
    uint64_t v120 = *v118;
    uint64_t v119 = v118[1];
    uint64_t v121 = __OFSUB__(v119, v120);
    uint64_t v122 = v119 - v120;
    uint64_t v123 = v121;
    if (v121) {
      goto LABEL_129;
    }
    uint64_t v124 = &v97[2 * v100];
    uint64_t v126 = *v124;
    uint64_t v125 = v124[1];
    uint64_t v111 = __OFSUB__(v125, v126);
    uint64_t v127 = v125 - v126;
    if (v111) {
      goto LABEL_131;
    }
    if (__OFADD__(v122, v127)) {
      goto LABEL_133;
    }
    if (v122 + v127 >= v103)
    {
      uint64_t v128 = v103 < v127;
LABEL_86:
      if (v128) {
        uint64_t v100 = v112;
      }
      goto LABEL_88;
    }

Swift::Int sub_10008FC88(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_10000941C(&qword_1001D52E8);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v9 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v39 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }

    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1LL)) {
        goto LABEL_40;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v38) {
              return v9;
            }
            unint64_t v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  return v9;
                }
                unint64_t v16 = v37[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v17 = v11 + 4;
          }
        }
      }

void sub_10008FF34(void *a1)
{
  id v1 = [a1 userInfo];
  if (v1)
  {
    uint64_t v2 = v1;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_100009A90();
}

void sub_10008FF98(void *a1)
{
  id v1 = [a1 completionCacheSuggestions];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = sub_100009B34((uint64_t)v1, (unint64_t *)&qword_1001D5470, &OBJC_CLASS___SFSearchSuggestion_ptr);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  sub_100009A90();
}

void sub_10008FFFC(void *a1)
{
}

void sub_100090008(void *a1)
{
}

void sub_100090014(void *a1)
{
}

void sub_100090020(void *a1)
{
}

uint64_t sub_10009002C(void *a1)
{
  id v2 = [a1 jsonData];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_100090098(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCompletionCacheSuggestions:isa];
}

void sub_100090108(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  [a3 setInput:v5];
}

void sub_100090158(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    sub_10001462C();
  }

  sub_10006B688();
  sub_1000110D4();
}

void sub_1000901A0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = String._bridgeToObjectiveC()();
  [a3 setInput:v4];
}

void sub_1000901E4(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100010A30(a1, a2);
  [a3 setData:isa];
}

void sub_100090244(void *a1)
{
  id v1 = [a1 bagData];
  if (v1)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    sub_10001462C();
  }

  sub_10006B688();
  sub_1000110D4();
}

void sub_100090290(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setData:isa];
}

void sub_1000902D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A17E4(a1, a2);
  sub_100030F20(v4, v5, v6);
  if (v3) {
    uint64_t v7 = sub_1000A1E98();
  }
  else {
    uint64_t v7 = (uint64_t)sub_1000A1E1C();
  }
  *id v2 = v7;
  sub_1000110D4();
}

void sub_100090314(id *a1)
{
}

void sub_10009031C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000A17E4(a1, a2);
  sub_100030F20(v4, v5, v6);
  if (v3) {
    uint64_t v7 = sub_1000A1E98();
  }
  else {
    uint64_t v7 = (uint64_t)sub_1000A1E1C();
  }
  *id v2 = v7;
  sub_1000110D4();
}

void sub_10009035C()
{
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  v485 = v7;
  Swift::Int v9 = v8;
  v511 = (void *)sub_100010ED4();
  uint64_t v474 = *(v511 - 1);
  sub_1000A1DF4();
  __chkstk_darwin(v10);
  uint64_t v473 = v11;
  sub_1000A1780();
  uint64_t v484 = v12;
  uint64_t v13 = sub_10000941C(&qword_1001D5350);
  uint64_t v456 = *(void *)(v13 - 8);
  uint64_t v457 = v13;
  sub_100027160();
  __chkstk_darwin(v14);
  sub_100014428();
  uint64_t v455 = v15;
  uint64_t v16 = sub_10000941C(&qword_1001D5358);
  uint64_t v459 = *(void *)(v16 - 8);
  uint64_t v460 = v16;
  sub_100027160();
  __chkstk_darwin(v17);
  sub_100014428();
  uint64_t v458 = v18;
  uint64_t v19 = sub_10000941C(&qword_1001D5360);
  uint64_t v462 = *(void *)(v19 - 8);
  uint64_t v463 = v19;
  sub_100027160();
  __chkstk_darwin(v20);
  sub_100014428();
  uint64_t v461 = v21;
  uint64_t v469 = sub_10000941C(&qword_1001D5368);
  uint64_t v464 = *(void *)(v469 - 8);
  sub_100027160();
  __chkstk_darwin(v22);
  sub_100032C48();
  uint64_t v478 = v23;
  sub_10003D810();
  __chkstk_darwin(v24);
  sub_10003D828();
  uint64_t v465 = v25;
  sub_10003D810();
  __chkstk_darwin(v26);
  sub_10005A2F8();
  uint64_t v467 = v27;
  uint64_t v483 = sub_10000941C(&qword_1001D5370);
  uint64_t v468 = *(void *)(v483 - 8);
  sub_100027160();
  __chkstk_darwin(v28);
  sub_100032C48();
  uint64_t v466 = v29;
  sub_10003D810();
  __chkstk_darwin(v30);
  sub_10005A2F8();
  uint64_t v482 = v31;
  uint64_t v32 = sub_10000941C(&qword_1001D5378);
  uint64_t v476 = *(void *)(v32 - 8);
  uint64_t v477 = v32;
  sub_100027160();
  __chkstk_darwin(v33);
  sub_100014428();
  uint64_t v475 = v34;
  uint64_t v470 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v35);
  sub_1000A1380();
  uint64_t v471 = v37;
  uint64_t v472 = v36;
  sub_1000A148C();
  __chkstk_darwin(v38);
  sub_10005A2F8();
  uint64_t v479 = v39;
  sub_10000941C(&qword_1001D5380);
  sub_100027160();
  __chkstk_darwin(v40);
  sub_100014428();
  uint64_t v488 = v41;
  uint64_t v42 = sub_1000A1638();
  uint64_t v43 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(v42);
  v490 = *(void (**)(uint64_t))(v43 - 8);
  v491 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
  sub_100027160();
  __chkstk_darwin(v44);
  sub_100014428();
  v489 = v45;
  uint64_t v46 = sub_1000772E0();
  uint64_t v47 = *(unsigned __int8 **)(v46 - 8);
  uint64_t v495 = v46;
  v496 = v47;
  sub_1000A157C();
  __chkstk_darwin(v48);
  sub_1000A1380();
  uint64_t v481 = v49;
  sub_1000A148C();
  __chkstk_darwin(v50);
  sub_10005A2F8();
  uint64_t v454 = v51;
  sub_1000A148C();
  __chkstk_darwin(v52);
  sub_10005A2F8();
  id v487 = v53;
  sub_1000A148C();
  uint64_t v55 = __chkstk_darwin(v54);
  char v57 = (char *)&v451 - v56;
  uint64_t v58 = __chkstk_darwin(v55);
  v497 = (os_log_s *)((char *)&v451 - v59);
  uint64_t v480 = v60;
  __chkstk_darwin(v58);
  uint64_t v498 = (uint64_t)&v451 - v61;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v62);
  sub_100014428();
  uint64_t v499 = v63;
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v64);
  v500 = (char *)&v451 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v66);
  sub_100032C48();
  uint64_t v503 = v67;
  sub_10003D810();
  __chkstk_darwin(v68);
  sub_10005A2F8();
  v502 = v69;
  uint64_t v70 = sub_10006B428();
  uint64_t v506 = *(void *)(v70 - 8);
  sub_100027160();
  __chkstk_darwin(v71);
  sub_100032C48();
  v504 = v72;
  sub_10003D810();
  __chkstk_darwin(v73);
  sub_10005A2F8();
  v501 = v74;
  uint64_t v75 = sub_100019F9C();
  uint64_t v492 = *(void *)(v75 - 8);
  v493 = (void *)v75;
  sub_100027160();
  __chkstk_darwin(v76);
  sub_10006B604();
  sub_10000941C((uint64_t *)&unk_1001D5388);
  sub_1000A27A0();
  uint64_t v507 = v77;
  sub_100027160();
  __chkstk_darwin(v78);
  sub_100009B6C();
  uint64_t v508 = sub_100009ACC((uint64_t)&unk_1001B59A0, 24LL);
  *(void *)(v508 + sub_10000BDD4(v0 + 16) = v4;
  sub_1000A1B50();
  v509 = v4;
  sub_1000A1B50();
  uint64_t v513 = v0;
  uint64_t v79 = v6;
  uint64_t v80 = Regex.init(_regexString:version:)(0xD000000000000011LL, 0x8000000100170B00LL, 1LL, &type metadata for Substring);
  id v81 = sub_1000A1434(v80, "queryString");
  uint64_t v82 = sub_10005A614((uint64_t)v81);
  sub_1000A2604();
  uint64_t v526 = v82;
  uint64_t v527 = v6;
  uint64_t v83 = *(void **)(v6 + 56);
  sub_1000272E4();
  uint64_t v84 = sub_1000A1BDC( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_1000A1434(v84, "queryId");
  uint64_t v85 = sub_1000A15B4();
  sub_1000773F4(v85);
  uint64_t v494 = v2;
  uint64_t v510 = sub_1000A1474(v83, 2, v2);
  id v86 = sub_1000A1434(v510, "queryCommand");
  uint64_t v514 = v70;
  if (v86)
  {
    os_log_type_t v87 = v86;
    uint64_t v88 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
    uint64_t v89 = sub_100032C70(v88);
    if (v89)
    {
      uint64_t v90 = (void *)v89;
      id v91 = v87;
      sub_100090158(v90, (SEL *)&selRef_tokenString);
      uint64_t v93 = v92;
      unint64_t v95 = v94;
      sub_1000110E0();

      if (v95) {
        uint64_t v96 = v93;
      }
      else {
        uint64_t v96 = 0LL;
      }
      unint64_t v97 = 0xE000000000000000LL;
      if (v95) {
        unint64_t v97 = v95;
      }
LABEL_16:
      uint64_t v526 = v96;
      uint64_t v527 = v97;
      goto LABEL_17;
    }

    uint64_t v98 = objc_opt_self(&OBJC_CLASS___SFUpdateSearchQueryCommand);
    uint64_t v99 = sub_100032C70(v98);
    if (v99)
    {
      uint64_t v100 = (void *)v99;
      id v101 = v87;
      sub_100090158(v100, (SEL *)&selRef_searchString);
      uint64_t v103 = v102;
      unint64_t v105 = v104;
      sub_1000110E0();

      if (v105) {
        uint64_t v96 = v103;
      }
      else {
        uint64_t v96 = 0LL;
      }
      uint64_t v79 = v6;
      unint64_t v97 = 0xE000000000000000LL;
      if (v105) {
        unint64_t v97 = v105;
      }
      uint64_t v70 = v514;
      goto LABEL_16;
    }
  }

LABEL_103:
  sub_1000A1D88();
  _Block_release(v232);
  swift_release();
  __break(1u);
}

void sub_100092D5C()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v291 = v7;
  Swift::Int v9 = v8;
  uint64_t v311 = (char *)type metadata accessor for URLQueryItem(0LL);
  uint64_t v308 = *((void *)v311 - 1);
  sub_100027160();
  __chkstk_darwin(v10);
  sub_100014428();
  uint64_t v310 = v11;
  v306 = (char *)sub_100010ED4();
  uint64_t v287 = *((void *)v306 - 1);
  sub_1000A1DF4();
  __chkstk_darwin(v12);
  uint64_t v282 = v13;
  sub_1000A1780();
  uint64_t v297 = v14;
  uint64_t v15 = sub_10000941C(&qword_1001D5350);
  uint64_t v270 = *(void *)(v15 - 8);
  uint64_t v271 = v15;
  sub_100027160();
  __chkstk_darwin(v16);
  sub_100014428();
  uint64_t v269 = v17;
  uint64_t v18 = sub_10000941C(&qword_1001D5358);
  uint64_t v273 = *(void *)(v18 - 8);
  uint64_t v274 = v18;
  sub_100027160();
  __chkstk_darwin(v19);
  sub_100014428();
  uint64_t v272 = v20;
  uint64_t v21 = sub_10000941C(&qword_1001D5360);
  uint64_t v276 = *(void *)(v21 - 8);
  uint64_t v277 = v21;
  sub_100027160();
  __chkstk_darwin(v22);
  sub_1000A1EAC(v23, v254);
  uint64_t v281 = sub_10000941C(&qword_1001D5368);
  uint64_t v279 = *(void *)(v281 - 8);
  sub_100027160();
  __chkstk_darwin(v24);
  uint64_t v278 = (char *)&v254 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  uint64_t v27 = __chkstk_darwin(v26);
  sub_1000A278C(v27, v28, v29, v30, v31, v32, v33, v34, v254);
  uint64_t v35 = sub_10000941C(&qword_1001D5370);
  uint64_t v284 = *(void *)(v35 - 8);
  uint64_t v285 = v35;
  sub_100027160();
  __chkstk_darwin(v36);
  sub_100014428();
  uint64_t v296 = v37;
  uint64_t v38 = sub_10000941C(&qword_1001D5378);
  uint64_t v289 = *(void *)(v38 - 8);
  uint64_t v290 = v38;
  sub_100027160();
  __chkstk_darwin(v39);
  v288 = (char *)&v254 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v283 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  uint64_t v42 = __chkstk_darwin(v41);
  sub_1000A1B0C(v42, v43, v44, v45, v46, v47, v48, v49, v254);
  __chkstk_darwin(v50);
  sub_10005A2F8();
  uint64_t v298 = v51;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100027160();
  __chkstk_darwin(v52);
  sub_100032C48();
  id v295 = v53;
  sub_10003D810();
  __chkstk_darwin(v54);
  sub_10003D828();
  uint64_t v294 = v55;
  sub_10003D810();
  __chkstk_darwin(v56);
  uint64_t v299 = (uint64_t)&v254 - v57;
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v58);
  id v302 = (char *)&v254 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_1000772E0();
  uint64_t v304 = *(void *)(v60 - 8);
  uint64_t v305 = v60;
  sub_1000A157C();
  __chkstk_darwin(v61);
  sub_1000A1380();
  uint64_t v268 = v62;
  sub_1000A148C();
  __chkstk_darwin(v63);
  uint64_t v300 = (char *)&v254 - v64;
  sub_1000A148C();
  __chkstk_darwin(v65);
  sub_10005A2F8();
  uint64_t v293 = v66;
  sub_1000A148C();
  __chkstk_darwin(v67);
  sub_10005A2F8();
  id v301 = v68;
  uint64_t v267 = v69;
  __chkstk_darwin(v70);
  sub_10005A2F8();
  uint64_t v307 = v71;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v72);
  sub_100014428();
  uint64_t v309 = v73;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v74);
  uint64_t v75 = sub_10006B428();
  uint64_t v312 = *(void *)(v75 - 8);
  sub_100027160();
  __chkstk_darwin(v76);
  sub_100014428();
  uint64_t v313 = v77;
  uint64_t v78 = sub_100019F9C();
  uint64_t v263 = *(void *)(v78 - 8);
  uint64_t v264 = v78;
  sub_100027160();
  __chkstk_darwin(v79);
  uint64_t v80 = sub_1000A151C();
  uint64_t v81 = type metadata accessor for URL(v80);
  uint64_t v314 = *(void *)(v81 - 8);
  uint64_t v315 = v81;
  sub_100027160();
  __chkstk_darwin(v82);
  sub_100010FCC();
  uint64_t v83 = sub_100009ACC((uint64_t)&unk_1001B5C70, 24LL);
  sub_1000A2804(v83);
  uint64_t v316 = (uint64_t (**)(uint64_t, uint64_t, void, void))v4;
  uint64_t v84 = sub_1000A1B50();
  id v85 = sub_1000A14E4((uint64_t)v84, "moreResultsURL");
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v85);

  id v86 = *(void **)(v6 + 56);
  sub_1000A14AC();
  uint64_t v87 = sub_1000A2760( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_1000A14E4(v87, "queryId");
  uint64_t v88 = sub_1000A15B4();
  sub_1000773F4(v88);
  uint64_t v89 = v86;
  uint64_t v90 = v75;
  uint64_t v265 = v2;
  uint64_t v91 = sub_1000A1474(v89, 6, v2);
  sub_1000A2760((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v92 = sub_1000A2250();
  uint64_t v94 = sub_10005A148(v92, v93, v90);
  if (v169)
  {
    sub_1000A225C(v94, (uint64_t *)&unk_1001D5D20);
    id v96 = sub_1000A14E4(v95, "queryId");
    uint64_t v97 = (uint64_t)v316;
    sub_1000A1354((uint64_t)v316, (uint64_t)v96, v316[2]);
    sub_1000A1B00(qword_1001D2E88);
    sub_100019F70();
    (*(void (**)(uint64_t, uint64_t))(v314 + 8))(v0, v315);
  }

  else
  {
    id v292 = v9;
    uint64_t v303 = v91;
    uint64_t v266 = v0;
    v262 = v1;
    uint64_t v99 = v312;
    uint64_t v98 = v313;
    uint64_t v100 = sub_1000A2590();
    sub_1000A19B8(v100, v101, v102);
    sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
    if (v103)
    {
      unint64_t v104 = v103;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6 + 16);
      if (Strong)
      {
        uint64_t v106 = Strong;
        uint64_t v259 = v90;
        uint64_t v107 = v6;
        sub_10004A274(v309);
        sub_1000A1A68();
        uint64_t v108 = v320;
        uint64_t v109 = sub_1000A1CBC();
        swift_initStackObject(v109, &v319);
        uint64_t v110 = sub_1000A1738();
        sub_1000A2638(v110);
        uint64_t v261 = v107;
        sub_10006B4EC();
        sub_1000A8A40();
        sub_100010CA0();
        sub_1000A2244();
        sub_1000548FC();
        id v258 = v104;
        uint64_t v260 = v106;
        uint64_t v116 = swift_release();
        sub_1000A1A90(v116, type metadata accessor for SessionTokens);
        uint64_t v117 = v304;
        uint64_t v118 = v305;
        uint64_t v119 = v307;
        sub_1000A21D0();
        char v257 = v120;
        v120();
        if (qword_1001D0538 != -1) {
          swift_once(&qword_1001D0538, sub_100034518);
        }
        id v302 = (char *)v108;
        sub_1000A15F8((uint64_t)v306, (uint64_t)qword_1001EDC78);
        unint64_t v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16);
        v121(v293, v119, v118);
        uint64_t v122 = v300;
        uint64_t v256 = v121;
        v121((uint64_t)v300, v119, v118);
        uint64_t v123 = (char *)v292;
        Logger.logObject.getter(v123);
        os_log_type_t v124 = sub_1000A1FF8();
        BOOL v125 = sub_1000A169C(v124);
        id v301 = v123;
        if (v125)
        {
          LODWORD(v292) = &SessionFilename;
          uint64_t v126 = sub_100009B20(42LL);
          uint64_t v127 = sub_100009B20(64LL);
          uint64_t v255 = v127;
          uint64_t v320 = v127;
          *(_DWORD *)uint64_t v126 = 134349826;
          uint64_t v317 = (uint64_t)sub_1000A14E4(v127, "queryId");
          sub_1000A1658((uint64_t)&v317, (uint64_t)&v318);

          *(_WORD *)(v126 + 12) = 2080;
          uint64_t v128 = URLRequest.debugDescription.getter();
          uint64_t v317 = sub_100077300(v128, v129);
          sub_1000A1A78((uint64_t)&v317, (uint64_t)&v318);
          sub_100009B3C();
          uint64_t v108 = *(void *)(v304 + 8);
          uint64_t v130 = sub_10005A578();
          uint64_t v131 = ((uint64_t (*)(uint64_t))v108)(v130);
          *(_WORD *)(v126 + 22) = 2080;
          uint64_t v132 = URLRequest.allHTTPHeaderFields.getter(v131);
          if (!v132) {
            uint64_t v132 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v133,  (uint64_t)&protocol witness table for String);
          }
          uint64_t v134 = sub_1000A1BA8(v132, (uint64_t)&type metadata for String);
          sub_100009B3C();
          uint64_t v317 = sub_1000A1E90(v134, v135, &v320);
          sub_1000A1A78((uint64_t)&v317, (uint64_t)&v318);
          sub_10005A1BC();
          ((void (*)(char *, uint64_t))v108)(v300, v305);
          sub_1000A2864();
          uint64_t v317 = (uint64_t)v302;
          sub_1000A1870((uint64_t)&v317, v136, v137);
          sub_1000A1808( (void *)&_mh_execute_header,  (os_log_s *)v121,  (os_log_type_t)v292,  "performing query %{public}llu request: %s header: %s requestId: %{public}llu",  (uint8_t *)v126);
          uint64_t v138 = v255;
          sub_10004EE00(v255);
          sub_100010C34(v138);
          sub_100010C34(v126);

          uint64_t v119 = v307;
        }

        else
        {

          char v139 = *(void (**)(uint64_t))(v117 + 8);
          uint64_t v140 = sub_10005A578();
          v139(v140);
          ((void (*)(char *, uint64_t))v139)(v122, v118);
        }

        id v141 = &selRef_fbr;
        id v142 = (void *)objc_opt_self(&OBJC_CLASS___NSURLComponents);
        URL._bridgeToObjectiveC()(v143);
        uint64_t v145 = v144;
        id v146 = objc_msgSend(v142, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v144, 0);

        if (v146)
        {
          uint64_t v147 = v294;
          static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(v146);

          uint64_t v148 = sub_1000772D8();
          uint64_t v149 = v147;
          uint64_t v150 = 0LL;
        }

        else
        {
          uint64_t v148 = sub_1000772D8();
          uint64_t v147 = v294;
          uint64_t v149 = sub_1000A2250();
        }

        sub_100009654(v149, v150, 1LL, v148);
        id v151 = v301;
        uint64_t v152 = v147;
        uint64_t v153 = v299;
        sub_10004E6C4(v152, v299, (uint64_t *)&unk_1001D47C0);
        sub_1000107D0(v153, (uint64_t)v295, (uint64_t *)&unk_1001D47C0);
        sub_1000772D8();
        uint64_t v154 = sub_1000A2250();
        uint64_t v156 = sub_10005A148(v154, v155, v148);
        if (v169)
        {
          sub_1000A225C(v156, (uint64_t *)&unk_1001D47C0);
        }

        else
        {
          uint64_t v157 = URLComponents.queryItems.getter(v156);
          uint64_t v158 = sub_1000A2170();
          sub_100009BC8(v158, v159);
          if (v157)
          {
            uint64_t v160 = *(void *)(v157 + 16);
            if (v160)
            {
              sub_1000A2050();
              uint64_t v162 = v157 + v161;
              uint64_t v108 = *(void *)(v163 + 72);
              id v164 = *(uint64_t (**)(uint64_t))(v163 + 16);
              while (1)
              {
                uint64_t v165 = sub_1000A2374();
                uint64_t v166 = v164(v165);
                uint64_t v167 = URLQueryItem.name.getter(v166);
                BOOL v169 = v167 == 113 && v168 == 0xE100000000000000LL;
                if (v169)
                {
                  uint64_t v171 = swift_bridgeObjectRelease();
                }

                else
                {
                  char v170 = sub_10005A06C(v167, v168, 113LL, 0xE100000000000000LL);
                  uint64_t v171 = sub_100009B3C();
                  if ((v170 & 1) == 0)
                  {
                    (*(void (**)(uint64_t, char *))(v308 + 8))(v310, v311);
                    goto LABEL_36;
                  }
                }

                uint64_t v172 = v310;
                uint64_t v173 = URLQueryItem.value.getter(v171);
                uint64_t v175 = v174;
                (*(void (**)(uint64_t, char *))(v308 + 8))(v172, v311);
                if (v175)
                {
                  sub_1000110E0();
LABEL_47:
                  uint64_t v176 = v313;
                  uint64_t v119 = v307;
                  id v141 = &selRef_fbr;
                  id v151 = v301;
LABEL_40:
                  uint64_t v177 = (char *)sub_1000869C4();
                  unint64_t v178 = (unint64_t)sub_10005A6B4((uint64_t)v177, "triggerEvent");
                  if (v178 >> 31)
                  {
                    __break(1u);
                  }

                  else
                  {
                    [v177 setTriggerEvent:v178];
                    sub_100010FC0();
                    sub_100090108(v179, v180, v181);
                    [v177 setEndpoint:6];
                    sub_10006B4EC();
                    id v182 = v177;
                    sub_10005A6B4((uint64_t)v182, v141[4]);
                    id v183 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v182];
                    sub_1000A1964(v183, "setQueryId:");
                    uint64_t v300 = v182;

                    sub_1000A26DC();
                    sub_100010CA0();

                    sub_100088D04();
                    uint64_t v185 = v184;
                    sub_1000498D4();
                    uint64_t v311 = (char *)sub_1000A1BB0(v119);
                    sub_1000A2604();
                    uint64_t v186 = v303;
                    uint64_t v187 = swift_weakLoadStrong(v303 + 16);
                    if (v187)
                    {
                      v188 = (void *)v187;
                      uint64_t v189 = v186 + qword_1001EDD10;
                      int v190 = *(unsigned __int8 *)(v303 + 80);
                      uint64_t v191 = v265;
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(v263 + 16))(v265, v189, v264);
                      unint64_t v192 = *(void *)(v303 + qword_1001EDD08);
                      char v193 = *(_BYTE *)(v303 + qword_1001EDD08 + 8);
                      uint64_t v194 = sub_1000A1CC4();
                      uint64_t v195 = sub_1000773F4(v194);
                      uint64_t v196 = v311;
                      sub_1000A1BB8(v185);
                      uint64_t v197 = v196;
                      uint64_t v253 = v195;
                      id v151 = v301;
                      uint64_t v198 = sub_100076BAC(v188, v190, v191, v192, v193, v197, v185, 0LL, 0xE000000000000000LL, v253);
                      sub_1000A2668(v198, qword_1001EDD00);
                      sub_1000145E0();
                      uint64_t v187 = sub_10001683C();
                    }

                    uint64_t v308 = v176;
                    uint64_t v310 = v185;
                    uint64_t v199 = UUID.init()(v187);
                    uint64_t v320 = v176;
                    id v200 = sub_10005A6B4(v199, "queryId");
                    uint64_t v201 = sub_100019E00((uint64_t)&unk_1001B5C98);
                    v202 = v302;
                    *(void *)(v201 + sub_10000BDD4(v0 + 16) = v200;
                    *(void *)(v201 + 24) = v202;
                    uint64_t v203 = sub_100019E00((uint64_t)&unk_1001B5CC0);
                    *(void *)(v203 + sub_10000BDD4(v0 + 16) = sub_1000A12F4;
                    *(void *)(v203 + 24) = v201;
                    uint64_t v204 = sub_1000271C4();
                    v205 = v151;
                    uint64_t v206 = sub_10000941C(&qword_1001D53B8);
                    sub_1000A1588(&qword_1001D53C0);
                    uint64_t v207 = v269;
                    Publisher.map<A>(_:)(sub_1000A1348, v203, v204, v206);
                    sub_100019F70();
                    uint64_t v208 = sub_100019E00((uint64_t)&unk_1001B5CE8);
                    uint64_t v119 = v261;
                    *(void *)(v208 + sub_10000BDD4(v0 + 16) = sub_1000A0260;
                    *(void *)(v208 + 24) = v119;
                    sub_1000A14AC();
                    sub_10000941C(&qword_1001D53C8);
                    uint64_t v209 = v272;
                    sub_1000A1C0C();
                    sub_1000A2748();
                    sub_1000110B0();
                    sub_10005A26C(v207, *(uint64_t (**)(uint64_t, uint64_t))(v270 + 8));
                    uint64_t v210 = sub_100019E00((uint64_t)&unk_1001B5D10);
                    *(void *)(v210 + sub_10000BDD4(v0 + 16) = sub_1000A028C;
                    *(void *)(v210 + 24) = v119;
                    sub_1000A14AC();
                    sub_10000941C(&qword_1001D53D0);
                    uint64_t v211 = v275;
                    sub_1000A1C0C();
                    sub_1000A1C4C();
                    sub_1000110B0();
                    sub_10005A26C(v209, *(uint64_t (**)(uint64_t, uint64_t))(v273 + 8));
                    uint64_t v212 = sub_100019E00((uint64_t)&unk_1001B5D38);
                    *(void *)(v212 + sub_10000BDD4(v0 + 16) = sub_1000A02B8;
                    *(void *)(v212 + 24) = v119;
                    sub_1000A14AC();
                    sub_10000941C(&qword_1001D53D8);
                    uint64_t v213 = (uint64_t)v278;
                    sub_1000A1C0C();
                    sub_1000A21C8();
                    sub_1000110B0();
                    sub_10005A26C(v211, *(uint64_t (**)(uint64_t, uint64_t))(v276 + 8));
                    id v214 = v300;
                    uint64_t v300 = v214;
                    uint64_t v177 = v205;
                    id v215 = sub_1000145D8((uint64_t)v214, "queryId");
                    uint64_t v216 = (void *)sub_100009ACC((uint64_t)&unk_1001B5D60, 48LL);
                    v216[2] = v119;
                    v216[3] = v214;
                    id v217 = v311;
                    v216[4] = v311;
                    v216[5] = v215;
                    uint64_t v218 = sub_100019E00((uint64_t)&unk_1001B5D88);
                    *(void *)(v218 + sub_10000BDD4(v0 + 16) = sub_1000A1208;
                    *(void *)(v218 + 24) = v216;
                    id v301 = v217;
                    sub_1000A14AC();
                    uint64_t v108 = v280;
                    sub_1000A1D34();
                    sub_1000A1C4C();
                    sub_100019F70();
                    id v151 = *(char **)(v279 + 8);
                    sub_1000A2018(v213);
                    uint64_t v219 = v268;
                    uint64_t v173 = v305;
                    v256(v268, v307, v305);
                    uint64_t v220 = *(unsigned __int8 *)(v304 + 80);
                    uint64_t v221 = (v220 + 24) & ~v220;
                    uint64_t v222 = swift_allocObject(&unk_1001B5DB0, v221 + v267, v220 | 7);
                    *(void *)(v222 + sub_10000BDD4(v0 + 16) = v177;
                    sub_1000A2780(v222 + v221, v219);
                    uint64_t v223 = sub_100019E00((uint64_t)&unk_1001B5DD8);
                    *(void *)(v223 + sub_10000BDD4(v0 + 16) = sub_1000A0334;
                    *(void *)(v223 + 24) = v222;
                    NSString v224 = v177;
                    sub_10000941C(&qword_1001D5440);
                    sub_1000A1D34();
                    sub_1000A2750();
                    sub_100019F70();
                    uint64_t v225 = sub_1000A2018(v108);
                    id v295 = sub_1000A1484(v225, "queryId");
                    uint64_t v226 = qword_1001D04D0;
                    uint64_t v311 = v300;
                    if (v226 == -1)
                    {
LABEL_44:
                      uint64_t v227 = sub_1000093D0((uint64_t)v306, (uint64_t)qword_1001EDB40);
                      uint64_t v228 = v287;
                      sub_10005F8E4(v297, v227, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v287 + 16));
                      unint64_t v229 = (*(unsigned __int8 *)(v228 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80);
                      sub_1000A1750();
                      uint64_t v232 = swift_allocObject(&unk_1001B5E00, v230, v231);
                      sub_10005F8E4(v232 + v229, v297, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v228 + 32));
                      *(void *)&v151[v232] = v295;
                      uint64_t v233 = v301;
                      *(void *)(v232 + v173) = v302;
                      *(void *)(v232 + v108) = v261;
                      *(void *)(v232 + v119) = v311;
                      *(void *)&v177[v232] = v233;
                      uint64_t v234 = sub_100019E00((uint64_t)&unk_1001B5E28);
                      *(void *)(v234 + sub_10000BDD4(v0 + 16) = sub_1000A0354;
                      *(void *)(v234 + 24) = v232;
                      v306 = v233;
                      sub_10005E31C();
                      uint64_t v235 = sub_1000271C4();
                      sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
                      uint64_t v237 = v236;
                      sub_1000A1588(&qword_1001D5458);
                      uint64_t v238 = (uint64_t)v288;
                      uint64_t v239 = v285;
                      uint64_t v240 = v296;
                      Publisher.catch<A>(_:)(sub_1000A1200, v234, v285, v235, v237, v241);
                      sub_100011030();
                      sub_10004729C(v240, *(uint64_t (**)(uint64_t, uint64_t))(v284 + 8));
                      uint64_t v242 = sub_100019E00((uint64_t)&unk_1001B5928);
                      uint64_t v243 = sub_1000A1B44(v242);
                      *(void *)(v240 + 24) = &off_1001B4440;
                      sub_1000A24A4(v243);
                      uint64_t v244 = v298;
                      uint64_t v245 = v286;
                      sub_1000A0008();
                      sub_1000A251C();
                      sub_1000A14CC();
                      uint64_t v248 = swift_allocObject(&unk_1001B5E50, v246, v247);
                      *(void *)(v248 + sub_10000BDD4(v0 + 16) = v240;
                      sub_1000A0040(v245, v248 + v239);
                      *(void *)(v248 + v237) = v303;
                      v249 = (void (**)())(v248 + v173);
                      uint64_t v250 = v262;
                      *v249 = sub_1000A1350;
                      v249[1] = v250;
                      sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
                      uint64_t v252 = v251;
                      sub_10005E314();
                      sub_10004EC38();
                      Publisher<>.sink(receiveValue:)(sub_1000A037C, v248, v290, v252);
                      sub_100019F70();
                      sub_10005A6D0(v238, *(uint64_t (**)(uint64_t, uint64_t))(v289 + 8));
                      sub_1000A2758();
                      sub_10001106C();
                      sub_100086C64();

                      swift_unknownObjectRelease();
                      sub_100011030();
                      swift_unknownObjectRelease();

                      swift_release();
                      sub_10004D784(v244, type metadata accessor for CancellableStoreKey);
                      sub_100019C1C(v299, (uint64_t *)&unk_1001D47C0);
                      (*(void (**)(uint64_t, uint64_t))(v304 + 8))(v307, v305);
                      sub_10004D784(v309, type metadata accessor for PegasusContext);
                      (*(void (**)(uint64_t, uint64_t))(v312 + 8))(v313, v259);
                      sub_1000A2030();
                      sub_1000110B0();
                      uint64_t v115 = v316;
                      goto LABEL_11;
                    }
                  }

                  swift_once(&qword_1001D04D0, sub_10003434C);
                  goto LABEL_44;
                }

void sub_100094190()
{
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v272 = v5;
  uint64_t v7 = v6;
  uint64_t v281 = (void *)sub_100010ED4();
  uint64_t v268 = *(v281 - 1);
  sub_1000A1DF4();
  __chkstk_darwin(v8);
  uint64_t v262 = v9;
  sub_1000A1780();
  uint64_t v275 = v10;
  uint64_t v11 = sub_10000941C(&qword_1001D5350);
  uint64_t v250 = *(void *)(v11 - 8);
  uint64_t v251 = v11;
  sub_100027160();
  __chkstk_darwin(v12);
  sub_100014428();
  uint64_t v249 = v13;
  uint64_t v14 = sub_10000941C(&qword_1001D5358);
  uint64_t v254 = *(void *)(v14 - 8);
  uint64_t v255 = v14;
  sub_100027160();
  __chkstk_darwin(v15);
  sub_100014428();
  uint64_t v252 = v16;
  uint64_t v17 = sub_10000941C(&qword_1001D5360);
  char v257 = *(uint64_t (***)(uint64_t, uint64_t))(v17 - 8);
  id v258 = (void *)v17;
  sub_100027160();
  __chkstk_darwin(v18);
  sub_1000A1EAC(v19, v235);
  uint64_t v261 = sub_10000941C(&qword_1001D5368);
  uint64_t v260 = *(void *)(v261 - 8);
  sub_100027160();
  __chkstk_darwin(v20);
  uint64_t v259 = (char *)&v235 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10003D810();
  uint64_t v23 = __chkstk_darwin(v22);
  sub_1000A278C(v23, v24, v25, v26, v27, v28, v29, v30, v235);
  uint64_t v31 = sub_10000941C(&qword_1001D5370);
  uint64_t v265 = *(void *)(v31 - 8);
  uint64_t v266 = v31;
  sub_100027160();
  __chkstk_darwin(v32);
  sub_100014428();
  uint64_t v274 = v33;
  uint64_t v34 = sub_10000941C(&qword_1001D5378);
  uint64_t v270 = *(void *)(v34 - 8);
  uint64_t v271 = v34;
  sub_100027160();
  __chkstk_darwin(v35);
  uint64_t v269 = (char *)&v235 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v263 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  uint64_t v38 = __chkstk_darwin(v37);
  sub_1000A1B0C(v38, v39, v40, v41, v42, v43, v44, v45, v235);
  __chkstk_darwin(v46);
  sub_10005A2F8();
  uint64_t v276 = v47;
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v48);
  uint64_t v49 = sub_1000A151C();
  uint64_t v50 = type metadata accessor for URLRequest(v49);
  uint64_t v278 = *(void *)(v50 - 8);
  uint64_t v279 = v50;
  uint64_t v51 = *(void *)(v278 + 64);
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v253 = (uint64_t)&v235 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v52);
  sub_10005A2F8();
  uint64_t v277 = v53;
  __chkstk_darwin(v54);
  sub_10005A2F8();
  uint64_t v273 = v55;
  uint64_t v57 = __chkstk_darwin(v56);
  uint64_t v59 = (char *)&v235 - v58;
  __chkstk_darwin(v57);
  uint64_t v280 = (uint64_t)&v235 - v60;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v61);
  sub_100014428();
  uint64_t v284 = v62;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v63);
  uint64_t v285 = sub_10006B428();
  uint64_t v282 = *(void *)(v285 - 8);
  sub_100027160();
  __chkstk_darwin(v64);
  uint64_t v283 = (char *)&v235 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_100019F9C();
  uint64_t v247 = *(void *)(v66 - 8);
  uint64_t v248 = v66;
  sub_100027160();
  __chkstk_darwin(v67);
  sub_100009B54();
  uint64_t v286 = sub_100009ACC((uint64_t)&unk_1001B5E78, 24LL);
  uint64_t v287 = (uint64_t (**)(uint64_t, uint64_t, void, void))v2;
  *(void *)(v286 + sub_10000BDD4(v0 + 16) = v2;
  uint64_t v68 = *(void **)(v4 + 56);
  sub_1000A1B50();
  sub_1000A1EA4();
  uint64_t v69 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_100047258(v69, "queryId");
  uint64_t v70 = sub_1000A15B4();
  sub_1000773F4(v70);
  uint64_t v71 = sub_1000A1474(v68, 7, v0);
  sub_100086CFC( 1LL,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v235,  v236,  (uint64_t)v237,  (uint64_t)v238,  (uint64_t)v239,  (uint64_t)v240,  (uint64_t)v241,  v242,  (uint64_t)v243,  v244,  v245,  v246);
  if ((v79 & 1) == 0
    || (sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614),
        !v79))
  {
    id v87 = sub_100047258(v79, "queryId");
    uint64_t v86 = (uint64_t)v287;
    sub_1000A1354((uint64_t)v287, (uint64_t)v87, v287[2]);
    sub_1000A15EC(qword_1001D2E88);
    sub_1000A2878();
LABEL_7:
    swift_release();
    goto LABEL_8;
  }

  uint64_t v246 = v79;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v80 = sub_1000A197C();
  uint64_t v82 = sub_10005A148(v80, v81, v285);
  if (v83)
  {
    sub_1000A1878(v82, (uint64_t *)&unk_1001D5D20);
    id v85 = sub_100047258(v84, "queryId");
    uint64_t v86 = (uint64_t)v287;
    sub_1000A1354((uint64_t)v287, (uint64_t)v85, v287[2]);
    sub_1000A15EC(qword_1001D2E88);
    sub_1000A2878();
    sub_1000A1790();
    sub_1000A2140();
LABEL_8:
    uint64_t v88 = (const void *)v86;
LABEL_9:
    _Block_release(v88);
    sub_100009AA0();
    return;
  }

  id v241 = v59;
  uint64_t v245 = v71;
  uint64_t v89 = v282;
  uint64_t v90 = v4;
  uint64_t v91 = (uint64_t)v283;
  uint64_t v92 = sub_1000A1E54();
  sub_1000A1DB0(v92, v93, v94);
  uint64_t v95 = v90;
  uint64_t v96 = sub_10005A61C();
  if (!v96)
  {
    id v113 = sub_100047258(0LL, "queryId");
    uint64_t v86 = (uint64_t)v287;
    sub_1000A1354((uint64_t)v287, (uint64_t)v113, v287[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
    sub_1000A2140();
    sub_1000A18D4(v91, *(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
    goto LABEL_7;
  }

  uint64_t v244 = v96;
  uint64_t v97 = (os_log_s *)v96;
  sub_10004A274(v284);
  sub_1000A1A68();
  uint64_t v243 = v291;
  if (qword_1001D04B8 != -1) {
    swift_once(&qword_1001D04B8, sub_1000342D4);
  }
  sub_1000A15F8((uint64_t)v281, (uint64_t)qword_1001EDAF8);
  uint64_t v98 = v95;
  sub_100019F54(v95);
  id v99 = v7;
  uint64_t v240 = v97;
  Logger.logObject.getter(v99);
  os_log_type_t v100 = sub_10006B8B0();
  if (sub_100010DE4(v100))
  {
    uint64_t v101 = sub_100009B20(32LL);
    uint64_t v239 = (void (*)(void, void, void))sub_100009B20(32LL);
    uint64_t v291 = v239;
    *(_DWORD *)uint64_t v101 = 136446722;
    uint64_t v237 = (os_log_s *)(v101 + 4);
    uint64_t v238 = v97;
    uint64_t v102 = sub_1000A15C0();
    uint64_t v242 = v98;
    uint64_t v103 = v102;
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v103, v104);
    uint64_t v288 = sub_100077300(v105, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, &v289, v237);
    sub_100019D80(v98);
    uint64_t v107 = sub_100009B3C();
    *(_WORD *)(v101 + 12) = 2050;
    os_log_type_t v108 = v7;
    id v109 = sub_10005A6E0(v107, "queryId");

    uint64_t v288 = (uint64_t)v109;
    sub_1000A1658((uint64_t)&v288, (uint64_t)&v289);

    *(_WORD *)(v101 + 22) = 2050;
    uint64_t v288 = (uint64_t)v243;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v288, &v289, v101 + 24);
    uint64_t v110 = v238;
    os_log_type_t v111 = v108;
    uint64_t v98 = v242;
    sub_1000A1B74( (void *)&_mh_execute_header,  v238,  v111,  "Session %{public}s performing query %{public}llu requestId: %{public}llu",  (uint8_t *)v101);
    uint64_t v112 = v239;
    sub_100030F9C((uint64_t)v239);
    sub_100010C34((uint64_t)v112);
    sub_100010C34(v101);
  }

  else
  {

    sub_100019D80(v95);
  }

  uint64_t v114 = sub_1000A1CBC();
  swift_initStackObject(v114, &v290);
  uint64_t v115 = swift_retain(v244);
  sub_1000A2638(v115);
  int v117 = v116;
  sub_10006B4EC();
  sub_1000A8A40();
  sub_100010CA0();
  int v118 = v117;
  sub_100055498();
  uint64_t v242 = v98;
  uint64_t v119 = sub_10001443C();
  sub_1000A2190(v119, type metadata accessor for SessionTokens);
  uint64_t v120 = v278;
  uint64_t v121 = v279;
  uint64_t v122 = v280;
  sub_1000A2498();
  uint64_t v239 = (void (*)(void, void, void))v123;
  v123();
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  sub_1000A15F8((uint64_t)v281, (uint64_t)qword_1001EDC78);
  os_log_type_t v124 = *(os_log_s **)(v120 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v124)(v273, v122, v121);
  uint64_t v238 = v124;
  ((void (*)(void, uint64_t, uint64_t))v124)(v277, v122, v121);
  id v125 = v99;
  Logger.logObject.getter(v125);
  os_log_type_t v126 = sub_1000A1FF8();
  if (sub_1000A169C(v126))
  {
    HIDWORD(v236) = v118;
    uint64_t v237 = v124;
    uint64_t v127 = v125;
    uint64_t v128 = sub_100009B20(42LL);
    uint64_t v129 = sub_100009B20(64LL);
    uint64_t v235 = v129;
    uint64_t v291 = (void (*)(void, void, void))v129;
    *(_DWORD *)uint64_t v128 = 134349826;
    uint64_t v288 = (uint64_t)sub_100047258(v129, "queryId");
    sub_1000A1658((uint64_t)&v288, (uint64_t)&v289);
    id v241 = v127;

    *(_WORD *)(v128 + 12) = 2080;
    uint64_t v130 = URLRequest.debugDescription.getter();
    uint64_t v288 = sub_100077300(v130, v131);
    sub_1000A1A78((uint64_t)&v288, (uint64_t)&v289);
    sub_100009B3C();
    uint64_t v132 = *(uint64_t (**)(uint64_t))(v120 + 8);
    uint64_t v133 = sub_1000A2704();
    uint64_t v134 = v132(v133);
    *(_WORD *)(v128 + 22) = 2080;
    uint64_t v135 = URLRequest.allHTTPHeaderFields.getter(v134);
    if (!v135) {
      uint64_t v135 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v136,  (uint64_t)&protocol witness table for String);
    }
    uint64_t v137 = sub_1000A1BA8(v135, (uint64_t)&type metadata for String);
    sub_100009B3C();
    uint64_t v288 = sub_1000A2220(v137, v138, (uint64_t *)&v291);
    sub_1000A1844((uint64_t)&v288, (uint64_t)&v289);
    sub_1000110A8();
    ((void (*)(void (*)(void, void, void), uint64_t))v132)(v277, v121);
    *(_WORD *)(v128 + 32) = 2050;
    uint64_t v288 = (uint64_t)v243;
    sub_1000A1870((uint64_t)&v288, v139, v128 + 34);
    uint64_t v140 = v237;
    sub_1000A1808( (void *)&_mh_execute_header,  v237,  BYTE4(v236),  "performing query %{public}llu request: %s header: %s requestId: %{public}llu",  (uint8_t *)v128);
    uint64_t v141 = v235;
    sub_10004EE00(v235);
    sub_100010C34(v141);
    sub_100010C34(v128);

    id v125 = v241;
  }

  else
  {

    id v142 = *(void (**)(uint64_t))(v120 + 8);
    uint64_t v143 = sub_1000A2704();
    v142(v143);
    ((void (*)(void (*)(void, void, void), uint64_t))v142)(v277, v121);
  }

  id v144 = sub_1000869C4();
  sub_100043600(113LL, 0xE100000000000000LL);
  if (v145)
  {
    NSString v146 = String._bridgeToObjectiveC()();
    sub_10001450C();
  }

  else
  {
    NSString v146 = 0LL;
  }

  sub_1000A1964(v144, "setInput:");

  unint64_t v148 = (unint64_t)sub_10005A6E0(v147, "triggerEvent");
  if (!(v148 >> 31))
  {
    id v149 = sub_10006B65C(v148, "setTriggerEvent:");
    sub_1000A28F8((uint64_t)v149, "setEndpoint:");
    sub_1000A1C30();
    uint64_t v150 = (os_log_s *)v144;
    sub_10005A6E0((uint64_t)v150, "queryId");
    id v151 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v150];
    sub_1000A1650(v151, "setQueryId:");
    uint64_t v237 = v150;

    sub_1000A1BE4();
    sub_1000471D0();

    sub_100088D04();
    uint64_t v273 = v152;
    sub_1000498D4();
    uint64_t v154 = v153;
    id v241 = sub_1000A1BB0(v280);
    uint64_t v277 = v155;

    uint64_t Strong = swift_weakLoadStrong(v245 + 16);
    if (Strong)
    {
      uint64_t v157 = (void *)Strong;
      uint64_t v158 = v245;
      uint64_t v159 = *(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 16);
      LODWORD(v247) = *(unsigned __int8 *)(v245 + 80);
      v159(v0, v245 + qword_1001EDD10, v248);
      uint64_t v160 = v158 + qword_1001EDD08;
      unint64_t v161 = *(void *)(v158 + qword_1001EDD08);
      id v162 = v125;
      char v163 = *(_BYTE *)(v160 + 8);
      uint64_t v164 = sub_1000A1CC4();
      uint64_t v165 = sub_1000773F4(v164);
      id v166 = v241;
      uint64_t v167 = v273;
      sub_1000A1BB8(v273);
      id v168 = v166;
      uint64_t v234 = v165;
      uint64_t v169 = v245;
      char v170 = v163;
      id v125 = v162;
      *(void *)(v169 + qword_1001EDD00) = sub_100076BAC( v157,  v247,  v0,  v161,  v170,  v168,  v167,  0LL,  0xE000000000000000LL,  v234);

      sub_1000471D0();
      uint64_t Strong = sub_10001683C();
    }

    uint64_t v171 = UUID.init()(Strong);
    uint64_t v291 = v277;
    id v172 = sub_10005A6E0(v171, "queryId");
    uint64_t v173 = sub_100019E00((uint64_t)&unk_1001B5EA0);
    uint64_t v174 = (uint64_t)v243;
    *(void *)(v173 + sub_10000BDD4(v0 + 16) = v172;
    *(void *)(v173 + 24) = v174;
    uint64_t v175 = sub_100019E00((uint64_t)&unk_1001B5EC8);
    *(void *)(v175 + sub_10000BDD4(v0 + 16) = sub_1000A12F4;
    *(void *)(v175 + 24) = v173;
    sub_1000271C4();
    sub_10000941C(&qword_1001D53B8);
    sub_1000A1588(&qword_1001D53C0);
    uint64_t v176 = v249;
    sub_1000A1E28((uint64_t)sub_1000A1348);
    sub_10001443C();
    uint64_t v177 = sub_100019E00((uint64_t)&unk_1001B5EF0);
    uint64_t v178 = v242;
    sub_1000A1864(v177, (uint64_t)sub_1000A0260);
    sub_10000941C(&qword_1001D53C8);
    uint64_t v179 = v252;
    sub_1000A1C00();
    Publishers.Map.tryMap<A>(_:)();
    sub_1000110B0();
    sub_100009BC8(v176, *(uint64_t (**)(uint64_t, uint64_t))(v250 + 8));
    uint64_t v180 = sub_100019E00((uint64_t)&unk_1001B5F18);
    sub_1000A1864(v180, (uint64_t)sub_1000A028C);
    sub_10000941C(&qword_1001D53D0);
    uint64_t v181 = v256;
    sub_1000A1C00();
    sub_1000A2218();
    sub_1000110B0();
    sub_100009BC8(v179, *(uint64_t (**)(uint64_t, uint64_t))(v254 + 8));
    uint64_t v182 = sub_100019E00((uint64_t)&unk_1001B5F40);
    sub_1000A1864(v182, (uint64_t)sub_1000A02B8);
    uint64_t v183 = sub_10000941C(&qword_1001D53D8);
    uint64_t v184 = v125;
    sub_1000A1C0C();
    sub_1000A21C8();
    sub_1000110B0();
    sub_10005A26C(v181, v257[1]);
    uint64_t v185 = v237;
    id v258 = v185;
    id v186 = sub_1000A1434((uint64_t)v185, "queryId");
    uint64_t v187 = (void *)sub_100009ACC((uint64_t)&unk_1001B5F68, 48LL);
    v187[2] = v178;
    v187[3] = v185;
    id v188 = v241;
    v187[4] = v241;
    v187[5] = v186;
    uint64_t v189 = sub_100019E00((uint64_t)&unk_1001B5F90);
    *(void *)(v189 + sub_10000BDD4(v0 + 16) = sub_1000A1208;
    *(void *)(v189 + 24) = v187;
    sub_1000A19A8();
    char v257 = (uint64_t (**)(uint64_t, uint64_t))v188;
    Publishers.TryMap.tryMap<A>(_:)(sub_1000A12E0, v189, v261, v183);
    sub_10001106C();
    int v190 = *(uint64_t (**)(uint64_t))(v260 + 8);
    sub_1000A1D54();
    uint64_t v191 = v253;
    uint64_t v192 = v279;
    sub_1000A2780(v253, v280);
    uint64_t v193 = *(unsigned __int8 *)(v278 + 80);
    uint64_t v194 = (v193 + 24) & ~v193;
    uint64_t v195 = swift_allocObject(&unk_1001B5FB8, v194 + v51, v193 | 7);
    *(void *)(v195 + sub_10000BDD4(v0 + 16) = v184;
    v239(v195 + v194, v191, v192);
    uint64_t v196 = sub_100019E00((uint64_t)&unk_1001B5FE0);
    *(void *)(v196 + sub_10000BDD4(v0 + 16) = sub_1000A0334;
    *(void *)(v196 + 24) = v195;
    id v197 = v184;
    sub_10000941C(&qword_1001D5440);
    sub_100010FC0();
    sub_1000A2218();
    sub_10001443C();
    uint64_t v198 = sub_1000A2590();
    uint64_t v199 = v190(v198);
    uint64_t v261 = (uint64_t)sub_1000A1484(v199, "queryId");
    uint64_t v200 = v268;
    sub_10005A6F0((uint64_t)v275, (uint64_t)v240, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v268 + 16));
    uint64_t v201 = *(unsigned __int8 *)(v200 + 80);
    uint64_t v202 = (v201 + 16) & ~v201;
    unint64_t v203 = (v262 + v202 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v204 = (v203 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v205 = (v204 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v206 = (v205 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v207 = (v206 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v208 = swift_allocObject(&unk_1001B6008, v207 + 8, v201 | 7);
    sub_10005A6F0(v208 + v202, (uint64_t)v275, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v200 + 32));
    *(void *)(v208 + v203) = v261;
    uint64_t v209 = v242;
    *(void *)(v208 + v204) = v243;
    *(void *)(v208 + v205) = v209;
    uint64_t v210 = v258;
    *(void *)(v208 + v206) = v258;
    uint64_t v211 = v257;
    *(void *)(v208 + v207) = v257;
    uint64_t v212 = sub_100019E00((uint64_t)&unk_1001B6030);
    *(void *)(v212 + sub_10000BDD4(v0 + 16) = sub_1000A0354;
    *(void *)(v212 + 24) = v208;
    sub_10000C4AC();
    uint64_t v281 = v210;
    uint64_t v275 = v211;
    uint64_t v213 = sub_1000271C4();
    sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
    uint64_t v215 = v214;
    sub_1000A1588(&qword_1001D5458);
    uint64_t v216 = (uint64_t)v269;
    uint64_t v217 = v274;
    Publisher.catch<A>(_:)(sub_1000A1200, v212, v266, v213, v215, v218);
    sub_100011030();
    sub_10005A6D0(v217, *(uint64_t (**)(uint64_t, uint64_t))(v265 + 8));
    uint64_t v219 = sub_100019E00((uint64_t)&unk_1001B5928);
    uint64_t v220 = sub_1000A1B44(v219);
    *(void *)(v217 + 24) = &off_1001B4440;
    sub_1000A242C(v220);
    uint64_t v221 = v276;
    uint64_t v222 = v267;
    sub_1000A0008();
    uint64_t v223 = *(unsigned __int8 *)(v263 + 80);
    uint64_t v224 = (v223 + 24) & ~v223;
    unint64_t v225 = (v264 + v224 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v226 = (v225 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v227 = swift_allocObject(&unk_1001B6058, v226 + 16, v223 | 7);
    uint64_t v228 = sub_1000A2804(v227);
    sub_1000A0040(v222, v228 + v224);
    uint64_t v229 = v245;
    *(void *)(v212 + v225) = v245;
    uint64_t v230 = (void (**)())(v212 + v226);
    uint64_t v231 = v286;
    *uint64_t v230 = sub_1000A1350;
    v230[1] = (void (*)())v231;
    sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
    uint64_t v233 = v232;
    swift_retain(v229);
    sub_1000A1EA4();
    Publisher<>.sink(receiveValue:)(sub_1000A037C, v212, v271, v233);
    sub_100011030();
    sub_10005A6D0(v216, *(uint64_t (**)(uint64_t, uint64_t))(v270 + 8));
    sub_100060FBC();
    sub_10001106C();
    sub_100086C64();

    swift_unknownObjectRelease();
    sub_100043584();
    swift_unknownObjectRelease();
    sub_1000A2140();
    swift_release();
    sub_10004D784(v221, type metadata accessor for CancellableStoreKey);
    (*(void (**)(uint64_t, uint64_t))(v278 + 8))(v280, v279);
    sub_10004D784(v284, type metadata accessor for PegasusContext);
    (*(void (**)(char *, uint64_t))(v282 + 8))(v283, v285);
    sub_1000A1790();
    uint64_t v88 = v287;
    goto LABEL_9;
  }

  __break(1u);
}

void sub_1000954CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v377 = v28;
  uint64_t v30 = v29;
  uint64_t v31 = sub_100010ED4();
  uint64_t v375 = *(void *)(v31 - 8);
  sub_1000A1DF4();
  __chkstk_darwin(v32);
  uint64_t v371 = v33;
  sub_1000A1780();
  sub_10007732C(v34);
  uint64_t v359 = sub_10000941C(&qword_1001D5350);
  uint64_t v358 = *(void *)(v359 - 8);
  sub_100027160();
  __chkstk_darwin(v35);
  sub_10007732C((uint64_t)&v351 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = sub_10000941C(&qword_1001D5358);
  sub_1000A15E0(v37, (uint64_t)&v386);
  uint64_t v361 = v38;
  sub_100027160();
  __chkstk_darwin(v39);
  sub_100014428();
  sub_10007732C(v40);
  uint64_t v367 = sub_10000941C(&qword_1001D5360);
  uint64_t v366 = *(void *)(v367 - 8);
  sub_100027160();
  __chkstk_darwin(v41);
  sub_100014428();
  sub_10007732C(v42);
  uint64_t v43 = sub_10000941C(&qword_1001D5368);
  sub_1000A15E0(v43, (uint64_t)&v395);
  uint64_t v369 = v44;
  sub_100027160();
  __chkstk_darwin(v45);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v46);
  sub_10005A2F8();
  sub_10007732C(v47);
  uint64_t v373 = sub_10000941C(&qword_1001D5370);
  uint64_t v372 = *(void *)(v373 - 8);
  sub_100027160();
  __chkstk_darwin(v48);
  sub_100014428();
  sub_10007732C(v49);
  uint64_t v50 = sub_10000941C(&qword_1001D5378);
  sub_1000A27E4(v50, (uint64_t)&v401);
  sub_100027160();
  __chkstk_darwin(v51);
  sub_100014428();
  uint64_t v376 = v52;
  uint64_t v370 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v53);
  sub_1000A1380();
  uint64_t v374 = v54;
  sub_1000A1858((uint64_t)&v398);
  __chkstk_darwin(v55);
  sub_10005A2F8();
  v379[2] = v56;
  uint64_t v57 = sub_1000772E0();
  sub_1000A15E0(v57, (uint64_t)&a12);
  uint64_t v382 = v58;
  sub_1000A157C();
  __chkstk_darwin(v59);
  sub_1000A1380();
  sub_1000A1404(v60);
  __chkstk_darwin(v61);
  sub_1000A1404((uint64_t)&v351 - v62);
  __chkstk_darwin(v63);
  sub_1000A1404((uint64_t)&v351 - v64);
  __chkstk_darwin(v65);
  sub_10007732C((uint64_t)&v351 - v66);
  sub_1000A1858((uint64_t)&v387);
  __chkstk_darwin(v67);
  uint64_t v386 = (uint64_t)&v351 - v68;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v69);
  sub_100014428();
  uint64_t v387 = v70;
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v71);
  sub_10006B604();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v72);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v73);
  uint64_t v389 = (os_log_s *)((char *)&v351 - v74);
  uint64_t v398 = sub_10006B428();
  sub_100009B84();
  __chkstk_darwin(v75);
  sub_100032C48();
  uint64_t v391 = v76;
  sub_10003D810();
  __chkstk_darwin(v77);
  uint64_t v79 = (char *)&v351 - v78;
  uint64_t v356 = sub_100019F9C();
  uint64_t v355 = *(os_log_s **)(v356 - 8);
  sub_100027160();
  __chkstk_darwin(v80);
  v396 = (char *)&v351 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v394 = sub_100009ACC((uint64_t)&unk_1001B6080, 24LL);
  uint64_t v395 = (uint64_t (**)(uint64_t, uint64_t, void, void))v25;
  *(void *)(v394 + sub_10000BDD4(v0 + 16) = v25;
  sub_1000A2344();
  if (qword_1001D04D8 != -1) {
    swift_once(&qword_1001D04D8, sub_10003436C);
  }
  uint64_t v385 = v31;
  uint64_t v82 = (void *)sub_1000093D0(v31, (uint64_t)qword_1001EDB58);
  sub_100019F54(v27);
  id v83 = v30;
  id v392 = v82;
  uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v85 = static os_log_type_t.default.getter(v84);
  BOOL v86 = sub_1000A19C8(v84);
  uint64_t v393 = v20;
  uint64_t v388 = v79;
  if (v86)
  {
    uint64_t v87 = sub_100009B20(22LL);
    uint64_t v88 = sub_100009B20(32LL);
    uint64_t v380 = v21;
    uint64_t v89 = v88;
    v400[0] = v88;
    *(_DWORD *)uint64_t v87 = 136446466;
    sub_1000A15C0();
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v91 = sub_1000A1EC8(v90);
    uint64_t v93 = sub_1000A1DD4(v91, v92);
    sub_1000A2560(v93);
    uint64_t v95 = v94 + 8;
    sub_1000A1DB8((uint64_t)v399, v94 + 8);
    sub_100019D80(v27);
    uint64_t v96 = sub_100009B3C();
    *(_WORD *)(v87 + 12) = 2048;
    id v97 = sub_10003D808(v96, "queryId");

    v399[0] = v97;
    uint64_t v98 = &selRef_fbr;
    sub_1000A1658((uint64_t)v399, v95);

    sub_100019F44( (void *)&_mh_execute_header,  v84,  v85,  "Session %{public}s performing zkw query[%llu]",  (uint8_t *)v87);
    sub_100030F9C(v89);
    uint64_t v99 = v89;
    uint64_t v21 = v380;
    sub_100010C34(v99);
    sub_100010C34(v87);
  }

  else
  {

    sub_100019D80(v27);
    uint64_t v98 = &selRef_fbr;
  }

  os_log_type_t v100 = *(void **)(v27 + 56);
  sub_10004EC38();
  uint64_t v101 = v396;
  uint64_t v102 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_10003D808(v102, v98[4]);
  uint64_t v103 = sub_1000A15B4();
  sub_1000773F4(v103);
  uint64_t v104 = sub_1000A1474(v100, 3, (uint64_t)v101);
  uint64_t v105 = (os_log_s *)v27;
  sub_100086CFC( 1LL,  v106,  v107,  v108,  v109,  v110,  v111,  v112,  v351,  v352,  (uint64_t)v353,  v354,  (uint64_t)v355,  v356,  v357,  v358,  v359,  v360,  v361,  v362);
  uint64_t v397 = v104;
  if ((v113 & 1) == 0)
  {
    uint64_t v383 = v27;
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_10004EC84();
    uint64_t v121 = sub_10000941C(&qword_1001D10D0);
    uint64_t v122 = (__n128 *)sub_1000A25C0(v121);
    uint64_t v123 = sub_10006B254(v122, (__n128)xmmword_10015C7F0);
    uint64_t v124 = sub_1000A1914((uint64_t)v123, (uint64_t)&type metadata for String);
    uint64_t v126 = sub_10006B3C0(v124, v125);
    uint64_t v128 = Dictionary.init(dictionaryLiteral:)( v126,  v127,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v129 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v130 = (void *)sub_10006B3A4((uint64_t)v105, (uint64_t)v100, 1LL, v128);
    id v131 = v83;
    sub_1000A1F9C();
    os_log_type_t v132 = sub_100010EC4();
    if (sub_1000A2364(v132))
    {
      uint64_t v133 = (uint8_t *)sub_100009B20(12LL);
      *(_DWORD *)uint64_t v133 = 134217984;
      id v134 = sub_100032C5C((uint64_t)v133, "queryId");
      uint64_t v135 = sub_1000A256C((uint64_t)v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v135, v136, v133 + 4);

      sub_100014564( (void *)&_mh_execute_header,  v105,  (os_log_type_t)v101,  "Bag fetch failed, can't complete zkw query[%llu]",  v133);
      sub_100010C34((uint64_t)v133);
    }

    else
    {

      uint64_t v105 = (os_log_s *)v131;
    }

    uint64_t v137 = v393;
    uint64_t v161 = v398;

    id v162 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    id v163 = sub_1000A2554(3LL);
    uint64_t v164 = sub_1000A1E14();
    id v165 = sub_100032C5C(v164, "queryId");
    id v166 = sub_1000A230C(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
    [v166 setQueryId:v165];
    sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    uint64_t v167 = sub_1000A2718();
    uint64_t v169 = sub_10005A148(v167, v168, v161);
    uint64_t v171 = v391;
    if (v117)
    {
      uint64_t v170 = parsecdUserAgent.getter(v169);
      sub_1000A2724(v170, (uint64_t *)&unk_1001D5D20);
    }

    else
    {
      uint64_t v172 = sub_1000A24B8();
      sub_1000770AC(v172, v173, v174);
    }

    uint64_t v175 = (uint64_t)v395;
    sub_1000A2684();
    sub_10005A910();

    uint64_t v176 = sub_10007704C(v171, *(uint64_t (**)(uint64_t, uint64_t))(v137 + 8));
    id v177 = sub_100032C5C(v176, "queryId");
    id v178 = v130;
    uint64_t v179 = sub_1000C5FB0((uint64_t)v130);

    if (v179) {
      uint64_t v180 = (void *)sub_1000A1C28();
    }
    else {
      uint64_t v180 = 0LL;
    }
    sub_1000A14EC(v175, (uint64_t)v177, *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v175 + 16));

    sub_100010D88();
    sub_1000A1B00(qword_1001D2E88);
    sub_10001106C();
    sub_100019F70();

    uint64_t v181 = (const void *)v175;
    goto LABEL_27;
  }

  id v114 = v83;
  uint64_t v115 = v389;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v116 = sub_10005A148((uint64_t)v115, 1LL, v398);
  if (v117)
  {
    sub_1000A2334(v116, (uint64_t *)&unk_1001D5D20);
    id v119 = sub_1000A1484(v118, v98[4]);
    uint64_t v120 = (uint64_t)v395;
    sub_1000A1354((uint64_t)v395, (uint64_t)v119, v395[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_1000A19E0();
LABEL_26:
    swift_release();
    uint64_t v181 = (const void *)v120;
    goto LABEL_27;
  }

  uint64_t v138 = v393;
  uint64_t v139 = (uint64_t)v388;
  sub_10005A6F0((uint64_t)v388, (uint64_t)v115, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v393 + 32));
  sub_1000A24EC((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (!v140)
  {
    id v182 = sub_1000A1484(0LL, v98[4]);
    uint64_t v120 = (uint64_t)v395;
    sub_1000A1354((uint64_t)v395, (uint64_t)v182, v395[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
    sub_10005A6D0(v139, *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8));
    goto LABEL_26;
  }

  uint64_t v391 = sub_1000A28D4();
  if (v391)
  {
    uint64_t v390 = v115;
    if ((-[os_log_s isEnabled](v115, "isEnabled") & 1) != 0)
    {
      sub_10006B4EC();
      sub_1000A8A40();
      sub_100010CA0();
      sub_1000A239C();
      int v141 = v391;
      sub_10004A274(v142);
      v400[0] = 0LL;
      sub_1000A1BC8((uint64_t)v400);
      uint64_t v143 = v400[0];
      sub_100019F54(v27);
      id v144 = (os_log_s *)v114;
      sub_1000A1F9C();
      os_log_type_t v145 = sub_1000A1810();
      BOOL v146 = sub_100047154(v145);
      uint64_t v389 = v144;
      if (v146)
      {
        uint64_t v147 = sub_100009B20(32LL);
        uint64_t v354 = v143;
        uint64_t v148 = v147;
        uint64_t v380 = sub_100009B20(32LL);
        v400[0] = v380;
        *(_DWORD *)uint64_t v148 = 136446722;
        LODWORD(v353) = v141;
        uint64_t v149 = sub_1000A15C0();
        sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
        uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter(v149, v150);
        uint64_t v153 = sub_1000A1DD4(v151, v152);
        sub_1000A2560(v153);
        uint64_t v155 = v154 + 8;
        sub_1000A1F14((uint64_t)v399, v154 + 8);
        sub_100019D80(v27);
        uint64_t v156 = sub_100009B3C();
        *(_WORD *)(v148 + 12) = 2050;
        id v114 = sub_1000A1434(v156, "queryId");

        v399[0] = v114;
        sub_1000A23A8();
        sub_1000A1658((uint64_t)v399, v155);

        *(_WORD *)(v148 + 22) = 2050;
        uint64_t v157 = v21;
        v399[0] = v354;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v399, v155, v148 + 24);
        sub_1000A1B74( (void *)&_mh_execute_header,  v115,  (os_log_type_t)v353,  "Session %{public}s performing query %{public}llu requestId: %{public}llu",  (uint8_t *)v148);
        uint64_t v158 = v380;
        sub_100030F9C(v380);
        sub_100010C34(v158);
        uint64_t v159 = v148;
        uint64_t v143 = v354;
        sub_100010C34(v159);

        uint64_t v160 = v27;
      }

      else
      {

        sub_100019D80(v27);
        uint64_t v160 = v27;
        sub_1000A23A8();
        uint64_t v157 = v21;
      }

      uint64_t v199 = sub_1000A1CBC();
      sub_100009ACC(v199, 928LL);
      uint64_t v200 = sub_1000A24E4();
      sub_1000A26F0(v200);
      sub_1000541F0();
      uint64_t v380 = v157;
      uint64_t v354 = v143;
      sub_10001683C();
      uint64_t v201 = v382;
      uint64_t v202 = v386;
      uint64_t v203 = v384;
      sub_1000A22A0(*(uint64_t (**)(void))(v382 + 32));
      if (qword_1001D0538 != -1) {
        swift_once(&qword_1001D0538, sub_100034518);
      }
      unint64_t v204 = (os_log_s *)sub_1000093D0(v385, (uint64_t)qword_1001EDC78);
      unint64_t v205 = *(void (**)(void, void, void))(v201 + 16);
      sub_1000A2490(v378, v202);
      uint64_t v206 = sub_1000A1E60((uint64_t)v403);
      v353 = v205;
      v205(v206, v202, v203);
      id v207 = sub_1000A2210((uint64_t)&a17);
      Logger.logObject.getter(v207);
      os_log_type_t v208 = sub_1000A1FF8();
      BOOL v209 = sub_1000A169C(v208);
      uint64_t v383 = v160;
      if (v209)
      {
        HIDWORD(v352) = (_DWORD)v204;
        uint64_t v389 = v204;
        uint64_t v210 = sub_100009B20(42LL);
        uint64_t v211 = sub_100009B20(64LL);
        uint64_t v351 = v211;
        v400[0] = v211;
        *(_DWORD *)uint64_t v210 = 134349826;
        id v212 = sub_10003D808(v211, "queryId");
        sub_1000A2560((uint64_t)v212);
        id v213 = v114;
        uint64_t v215 = v214 + 8;
        sub_1000A1658((uint64_t)v399, v214 + 8);

        *(_WORD *)(v210 + 12) = 2080;
        uint64_t v216 = URLRequest.debugDescription.getter();
        v399[0] = sub_1000A1DD4(v216, v217);
        sub_1000A1894((uint64_t)v399, v215);
        sub_100009B3C();
        uint64_t v218 = *(uint64_t (**)(uint64_t))(v201 + 8);
        uint64_t v219 = sub_1000A24B8();
        uint64_t v220 = v218(v219);
        *(_WORD *)(v210 + 22) = 2080;
        uint64_t v221 = URLRequest.allHTTPHeaderFields.getter(v220);
        if (!v221) {
          uint64_t v221 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v222,  (uint64_t)&protocol witness table for String);
        }
        uint64_t v223 = v354;
        id v114 = (id)(v210 + 24);
        uint64_t v224 = sub_1000A1BA8(v221, (uint64_t)&type metadata for String);
        sub_100009B3C();
        uint64_t v226 = sub_1000A2048(v224, v225, v400);
        sub_1000A2560(v226);
        sub_1000A1F14((uint64_t)v399, v227 + 8);
        sub_10003B8E8();
        ((void (*)(id, uint64_t))v218)(v213, v384);
        sub_1000A2850();
        v399[0] = v223;
        sub_1000A1870((uint64_t)v399, v228, v229);
        uint64_t v230 = v389;
        sub_1000A1808( (void *)&_mh_execute_header,  v389,  BYTE4(v352),  "performing query %{public}llu request %s header: %s requestId: %{public}llu",  (uint8_t *)v210);
        uint64_t v231 = v351;
        sub_10004EE00(v351);
        sub_100010C34(v231);
        sub_100010C34(v210);

        uint64_t v232 = v397;
        uint64_t v160 = v383;
      }

      else
      {

        uint64_t v230 = *(os_log_s **)(v201 + 8);
        uint64_t v248 = sub_1000A24B8();
        ((void (*)(uint64_t))v230)(v248);
        uint64_t v249 = sub_1000A2164();
        ((void (*)(uint64_t))v230)(v249);

        uint64_t v232 = v397;
      }

      sub_1000A25E0();
      uint64_t v250 = sub_10004ED84();
      sub_100090108(v250, 0xE000000000000000LL, v230);
      unint64_t v251 = (unint64_t)sub_10003D808( (uint64_t)-[os_log_s setSearchType:](v230, "setSearchType:", 1LL),  "triggerEvent");
      uint64_t v243 = &selRef_fbr;
      if (v251 >> 31)
      {
        __break(1u);
        swift_once(&qword_1001D0538, sub_100034518);
        sub_1000093D0(v385, (uint64_t)qword_1001EDC78);
        uint64_t v233 = sub_1000110C4();
        uint64_t v234 = Logger.logObject.getter(v233);
        sub_100047278(v234, v235);
        if (sub_1000A182C((os_log_s *)v207))
        {
          uint64_t v236 = (uint8_t *)sub_100009B20(12LL);
          uint64_t v237 = (void *)sub_100009B20(8LL);
          *(_DWORD *)uint64_t v236 = 138412290;
          uint64_t v238 = sub_1000A1C28();
          uint64_t v239 = sub_1000A20E8(v238);
          uint64_t v240 = (uint64_t)v388;
          sub_1000A23B4(v239, v241, v242);
          void *v237 = v238;
          id v114 = (id)v240;
          uint64_t v243 = &selRef_fbr;
          sub_100010D88();
          sub_1000A26F8();
          sub_100014564(v244, v245, v246, v247, v236);
          sub_10000941C(&qword_1001D1060);
          sub_100030F9C((uint64_t)v237);
          sub_100010C34((uint64_t)v237);
          sub_100010C34((uint64_t)v236);
        }

        else
        {
          sub_100010D88();
        }

        id v286 = [v389 v243[4]];
        sub_1000110C4();
        uint64_t v287 = sub_1000A1630();
        sub_100010D88();
        if (v287) {
          uint64_t v288 = (void *)sub_1000A2904();
        }
        else {
          uint64_t v288 = 0LL;
        }
        uint64_t v349 = (uint64_t)v395;
        sub_1000A14EC((uint64_t)v395, (uint64_t)v286, v395[2]);

        sub_1000A18BC();
        sub_1000A2810(qword_1001D2E88);
        sub_100043584();
        sub_1000A2060();
        sub_1000A15AC((uint64_t)&a18);
        sub_100010D88();
        sub_1000A1748(type metadata accessor for PegasusContext, (uint64_t)&a15);
        sub_1000A1A90(v350, type metadata accessor for SessionTokens);
        sub_1000A1D2C((uint64_t)v114, *(uint64_t (**)(uint64_t, void))(v393 + 8));
        sub_1000A19E0();
        uint64_t v181 = (const void *)v349;
      }

      else
      {
        id v252 = sub_10006B65C(v251, "setTriggerEvent:");
        sub_1000A1F3C((uint64_t)v252, "setEndpoint:");
        uint64_t v253 = *(void *)(v160 + 64);
        sub_1000A1C30();
        uint64_t v254 = v230;
        uint64_t v255 = (os_log_s *)sub_10003D808((uint64_t)v254, "queryId");
        id v256 = sub_1000A230C(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
        sub_1000A1650(v256, "setQueryId:");

        sub_1000A1BE4();
        sub_1000471D0();

        id v257 = v207;
        sub_1000A1F9C();
        os_log_type_t v258 = sub_100014588();
        if (sub_100010DE4(v258))
        {
          uint64_t v259 = (uint8_t *)sub_100009B20(12LL);
          *(_DWORD *)uint64_t v259 = 134217984;
          id v260 = sub_10003D808((uint64_t)v259, "queryId");
          uint64_t v261 = sub_1000A20E8((uint64_t)v260);
          sub_10006B6DC(v261, v262, v263);

          sub_100014564( (void *)&_mh_execute_header,  v255,  (os_log_type_t)v253,  "Dispatching network request for zkw query: (%llu)",  v259);
          sub_100010C34((uint64_t)v259);
        }

        else
        {

          uint64_t v255 = (os_log_s *)v257;
        }

        sub_100088D04();
        uint64_t v265 = v264;
        sub_1000498D4();
        uint64_t v267 = v266;
        id v268 = sub_1000A1BB0(v386);
        uint64_t v270 = v269;

        uint64_t Strong = swift_weakLoadStrong(v232 + 16);
        uint64_t v389 = v265;
        uint64_t v378 = (uint64_t)v268;
        if (Strong)
        {
          uint64_t v272 = (void *)Strong;
          sub_1000A2204();
          HIDWORD(v352) = *(unsigned __int8 *)(v232 + 80);
          uint64_t v355 = v254;
          uint64_t v273 = v396;
          sub_1000A244C((uint64_t)v396, v274, v275);
          uint64_t v276 = v232;
          id v277 = v257;
          unint64_t v278 = *(void *)(v232 + qword_1001EDD08);
          uint64_t v232 = *(unsigned __int8 *)(v232 + qword_1001EDD08 + 8);
          uint64_t v279 = sub_1000A1CC4();
          uint64_t v280 = sub_1000773F4(v279);
          id v281 = v268;
          sub_1000A1BB8((uint64_t)v265);
          id v282 = v281;
          sub_10004EC38();
          uint64_t v283 = (uint64_t)v273;
          uint64_t v254 = v355;
          unint64_t v284 = v278;
          id v257 = v277;
          *(void *)(v276 + qword_1001EDD00) = sub_1000A21C0( v272,  SHIDWORD(v352),  v283,  v284,  v232,  v282,  (uint64_t)v265,  v285,  0xE200000000000000LL,  v280);

          sub_1000145E0();
          sub_10001683C();
        }

        else
        {
          id v289 = v268;
          sub_10004EC38();
        }

        sub_1000A22D8();
        uint64_t v291 = UUID.init()(v290);
        v379[0] = v270;
        v400[0] = v270;
        id v292 = sub_10003D808(v291, "queryId");
        uint64_t v293 = sub_100019E00((uint64_t)&unk_1001B60A8);
        uint64_t v294 = v354;
        *(void *)(v293 + sub_10000BDD4(v0 + 16) = v292;
        *(void *)(v293 + 24) = v294;
        uint64_t v295 = sub_100019E00((uint64_t)&unk_1001B60D0);
        *(void *)(v295 + sub_10000BDD4(v0 + 16) = sub_1000A12F4;
        *(void *)(v295 + 24) = v293;
        uint64_t v296 = sub_1000271C4();
        uint64_t v297 = sub_10000941C(&qword_1001D53B8);
        sub_1000A1588(&qword_1001D53C0);
        sub_1000A2080();
        Publisher.map<A>(_:)(v298, v299, v296, v297);
        sub_10001106C();
        swift_release();
        uint64_t v300 = sub_100019E00((uint64_t)&unk_1001B60F8);
        uint64_t v301 = v383;
        *(void *)(v300 + sub_10000BDD4(v0 + 16) = sub_1000A0260;
        *(void *)(v300 + 24) = v301;
        sub_1000A14AC();
        sub_10000941C(&qword_1001D53C8);
        uint64_t v302 = v360;
        sub_1000A2748();
        sub_100019F70();
        sub_100009BC8(v232, *(uint64_t (**)(uint64_t, uint64_t))(v358 + 8));
        uint64_t v303 = sub_100019E00((uint64_t)&unk_1001B6120);
        *(void *)(v303 + sub_10000BDD4(v0 + 16) = sub_1000A028C;
        *(void *)(v303 + 24) = v301;
        sub_1000A14AC();
        sub_10000941C(&qword_1001D53D0);
        uint64_t v304 = v365;
        sub_1000A21C8();
        sub_100019F70();
        sub_100009BC8(v302, *(uint64_t (**)(uint64_t, uint64_t))(v361 + 8));
        uint64_t v305 = sub_100019E00((uint64_t)&unk_1001B6148);
        *(void *)(v305 + sub_10000BDD4(v0 + 16) = sub_1000A02B8;
        *(void *)(v305 + 24) = v301;
        sub_1000A14AC();
        sub_10000941C(&qword_1001D53D8);
        uint64_t v306 = v368;
        sub_1000A20C8();
        sub_100019F70();
        sub_100009BC8(v304, *(uint64_t (**)(uint64_t, uint64_t))(v366 + 8));
        uint64_t v307 = v254;
        uint64_t v367 = (uint64_t)v307;
        uint64_t v308 = (char *)sub_1000A2210((uint64_t)&v402);
        v396 = v308;
        id v309 = sub_10003D808((uint64_t)v308, "queryId");
        uint64_t v310 = (void *)sub_100009ACC((uint64_t)&unk_1001B6170, 48LL);
        v310[2] = v301;
        v310[3] = v307;
        v310[4] = v308;
        v310[5] = v309;
        uint64_t v311 = sub_100019E00((uint64_t)&unk_1001B6198);
        *(void *)(v311 + sub_10000BDD4(v0 + 16) = sub_1000A1208;
        *(void *)(v311 + 24) = v310;
        sub_1000A14AC();
        sub_1000A26A8();
        sub_1000A2750();
        sub_10005A8E0();
        uint64_t v312 = *(void *)(v369 + 8);
        sub_1000A2018(v306);
        uint64_t v313 = v364;
        uint64_t v314 = v384;
        sub_1000A1880((uint64_t)v379);
        sub_1000A21F4();
        uint64_t v317 = swift_allocObject(&unk_1001B61C0, (v316 & ~v315) + v363, v315 | 7);
        *(void *)(v317 + sub_10000BDD4(v0 + 16) = v257;
        sub_1000A1880((uint64_t)&a9);
        uint64_t v318 = sub_100019E00((uint64_t)&unk_1001B61E8);
        *(void *)(v318 + sub_10000BDD4(v0 + 16) = sub_1000A0334;
        *(void *)(v318 + 24) = v317;
        id v319 = v257;
        sub_10000941C(&qword_1001D5440);
        sub_1000A1D34();
        sub_1000A1C4C();
        sub_100019F70();
        uint64_t v320 = sub_1000A2018((uint64_t)v254);
        id v381 = sub_10003D808(v320, "queryId");
        uint64_t v321 = v375;
        uint64_t v322 = sub_1000A1DE8();
        sub_1000A1C7C(v322, (uint64_t)v392, v323);
        unint64_t v324 = (*(unsigned __int8 *)(v321 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v321 + 80);
        sub_1000A1750();
        uint64_t v327 = swift_allocObject(&unk_1001B6210, v325, v326);
        sub_1000A1C7C(v327 + v324, (uint64_t)v319, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v321 + 32));
        *(void *)(v327 + v312) = v381;
        *(void *)(v327 + v313) = v354;
        *(void *)(v327 + v314) = v383;
        uint64_t v328 = (void *)v367;
        *(void *)(v327 + v30sub_10007E30C(v1, v0, 1) = v367;
        *(char **)((char *)&selRef_fbr + v327) = v396;
        uint64_t v329 = sub_100019E00((uint64_t)&unk_1001B6238);
        *(void *)(v329 + sub_10000BDD4(v0 + 16) = sub_1000A0354;
        *(void *)(v329 + 24) = v327;
        sub_100010D08();
        id v392 = v328;
        uint64_t v330 = sub_1000271C4();
        sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
        uint64_t v332 = v331;
        sub_1000A1588(&qword_1001D5458);
        uint64_t v333 = v376;
        uint64_t v334 = v373;
        sub_1000A28AC();
        sub_100019F70();
        uint64_t v335 = sub_1000A2694();
        sub_10004729C(v335, v336);
        uint64_t v337 = sub_100019E00((uint64_t)&unk_1001B5928);
        uint64_t v338 = sub_1000A1B44(v337);
        qword_1001D5460 = (uint64_t)&off_1001B4440;
        sub_1000A24A4(v338);
        sub_1000A1E60((uint64_t)&v404);
        sub_1000A1E84();
        sub_1000A251C();
        sub_1000A14CC();
        uint64_t v341 = swift_allocObject(&unk_1001B6260, v339, v340);
        *(void *)(v341 + sub_10000BDD4(v0 + 16) = &unk_1001D5448;
        sub_1000A264C(v341, v341 + v334);
        *(void *)(v341 + v332) = v397;
        id v342 = (void (**)())(v341 + v313);
        uint64_t v343 = v394;
        *id v342 = sub_1000A1350;
        v342[1] = (void (*)())v343;
        sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
        sub_10005E31C();
        sub_10004EC38();
        sub_1000A2090();
        Publisher<>.sink(receiveValue:)(v344, v345, v346, v347);
        sub_100019F70();
        sub_1000A1E3C();
        sub_10005A6D0(v333, v348);
        sub_10005A578();
        sub_1000A2758();
        sub_10001106C();
        sub_100088C90();
        sub_100086C64();

        sub_10007705C((uint64_t)&a17);
        sub_10001443C();
        sub_1000A2060();
        sub_1000A15AC((uint64_t)&a18);

        sub_1000A1DE0((uint64_t)v403);
        sub_10004D784(v330, type metadata accessor for CancellableStoreKey);
        sub_1000A1BC0(v386, *(uint64_t (**)(uint64_t, void))(v382 + 8));
        sub_1000A1748(type metadata accessor for PegasusContext, (uint64_t)&a15);
        sub_1000A1748(type metadata accessor for SessionTokens, (uint64_t)&v405);
        sub_1000A1D2C((uint64_t)v388, *(uint64_t (**)(uint64_t, void))(v393 + 8));
        sub_1000110B0();
        uint64_t v181 = v395;
      }
    }

    else
    {
      sub_1000A1F9C();
      os_log_type_t v185 = sub_1000A1810();
      BOOL v186 = sub_100047154(v185);
      uint64_t v187 = (uint64_t)v395;
      if (v186)
      {
        id v188 = (_WORD *)sub_100009B20(2LL);
        sub_100047288(v188);
        sub_10005A550((void *)&_mh_execute_header, v189, v190, "no zkw, bag disabled");
        sub_100010C34(v138);
      }

      id v191 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
      id v192 = sub_1000A2554(2LL);
      uint64_t v193 = sub_10006B4EC();
      sub_1000A1484(v193, v98[4]);
      id v194 = sub_1000A2674(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
      sub_1000A1964(v194, "setQueryId:");
      sub_1000A2614();
      sub_100010CA0();

      id v196 = sub_1000A1484(v195, v98[4]);
      sub_1000A1354(v187, (uint64_t)v196, *(uint64_t (**)(uint64_t, uint64_t, void, void))(v187 + 16));
      sub_1000A1360(qword_1001D2E88);

      sub_10001683C();
      sub_1000A2060();
      sub_1000A15AC((uint64_t)&a18);
      uint64_t v197 = sub_1000A2170();
      sub_1000A1D2C(v197, v198);
      sub_1000A19E0();
      uint64_t v181 = (const void *)v187;
    }
  }

  else
  {
    id v183 = sub_1000A1484(0LL, v98[4]);
    uint64_t v184 = (uint64_t)v395;
    sub_1000A1354((uint64_t)v395, (uint64_t)v183, v395[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();

    sub_1000A1D2C((uint64_t)v388, *(uint64_t (**)(uint64_t, void))(v138 + 8));
    sub_1000A19E0();
    uint64_t v181 = (const void *)v184;
  }

void sub_100097238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v416 = v28;
  uint64_t v30 = v29;
  uint64_t v31 = sub_100010ED4();
  uint64_t v404 = *(void *)(v31 - 8);
  sub_1000A1DF4();
  __chkstk_darwin(v32);
  uint64_t v401 = v33;
  sub_1000A1780();
  sub_10007732C(v34);
  uint64_t v35 = sub_10000941C(&qword_1001D5350);
  sub_1000A15E0(v35, (uint64_t)&v414);
  uint64_t v386 = v36;
  sub_100027160();
  __chkstk_darwin(v37);
  sub_100014428();
  sub_10007732C(v38);
  uint64_t v391 = sub_10000941C(&qword_1001D5358);
  uint64_t v390 = *(void *)(v391 - 8);
  sub_100027160();
  __chkstk_darwin(v39);
  sub_100014428();
  sub_10007732C(v40);
  uint64_t v394 = sub_10000941C(&qword_1001D5360);
  uint64_t v393 = *(void *)(v394 - 8);
  sub_100027160();
  __chkstk_darwin(v41);
  sub_10007732C((uint64_t)&v378 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v397 = sub_10000941C(&qword_1001D5368);
  uint64_t v395 = *(uint64_t (**)(uint64_t, uint64_t))(v397 - 8);
  sub_100027160();
  __chkstk_darwin(v43);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v44);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v45);
  sub_10005A2F8();
  sub_10007732C(v46);
  uint64_t v400 = sub_10000941C(&qword_1001D5370);
  uint64_t v399 = *(void *)(v400 - 8);
  sub_100027160();
  __chkstk_darwin(v47);
  sub_10007732C((uint64_t)&v378 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = sub_10000941C(&qword_1001D5378);
  sub_1000A15E0(v49, (uint64_t)&v435);
  uint64_t v406 = v50;
  sub_100027160();
  __chkstk_darwin(v51);
  sub_100014428();
  uint64_t v405 = v52;
  uint64_t v398 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v53);
  sub_1000A1380();
  sub_10007732C(v54);
  sub_1000A1858((uint64_t)&v427);
  __chkstk_darwin(v55);
  sub_10005A2F8();
  uint64_t v411 = v56;
  uint64_t v57 = sub_1000772E0();
  sub_1000A27E4(v57, (uint64_t)&v443);
  sub_1000A157C();
  __chkstk_darwin(v58);
  sub_1000A1404((uint64_t)&v378 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v60);
  sub_10005A2F8();
  sub_1000A1404(v61);
  __chkstk_darwin(v62);
  sub_10005A2F8();
  sub_1000A1404(v63);
  __chkstk_darwin(v64);
  sub_10005A2F8();
  sub_1000A1404(v65);
  __chkstk_darwin(v66);
  sub_10005A2F8();
  sub_10007732C(v67);
  sub_1000A1858((uint64_t)&v438);
  __chkstk_darwin(v68);
  uint64_t v419 = (char *)&v378 - v69;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v70);
  sub_100014428();
  uint64_t v418 = v71;
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v72);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v73);
  sub_1000A1C54();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v74);
  sub_100077030();
  __chkstk_darwin(v75);
  sub_10005A2F8();
  uint64_t v422 = v76;
  uint64_t v430 = sub_10006B428();
  uint64_t v426 = *(void *)(v430 - 8);
  sub_100027160();
  __chkstk_darwin(v77);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v78);
  uint64_t v80 = (void (*)(uint64_t, uint64_t))((char *)&v378 - v79);
  uint64_t v81 = sub_100019F9C();
  sub_1000A15E0(v81, (uint64_t)&v411);
  uint64_t v382 = v82;
  sub_100027160();
  __chkstk_darwin(v83);
  sub_10006B604();
  uint64_t v427 = sub_100009ACC((uint64_t)&unk_1001B6288, 24LL);
  *(void *)(v427 + sub_10000BDD4(v0 + 16) = v25;
  sub_1000A1B50();
  uint64_t v428 = v25;
  uint64_t v84 = sub_1000A1B50();
  id v85 = sub_1000145D8((uint64_t)v84, "queryString");
  id v432 = (id)sub_10005A614((uint64_t)v85);
  uint64_t v87 = v86;

  id v433 = 0LL;
  sub_1000A1BC8((uint64_t)&v433);
  id v425 = v433;
  uint64_t v88 = *(void **)(v27 + 56);
  sub_1000A1738();
  uint64_t v89 = sub_1000A1D60( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_1000145D8(v89, "queryId");
  uint64_t v90 = sub_1000A15B4();
  sub_1000773F4(v90);
  uint64_t v384 = v21;
  uint64_t v91 = sub_1000A1474(v88, 4, v21);
  if (qword_1001D04C8 != -1) {
    swift_once(&qword_1001D04C8, sub_100034324);
  }
  uint64_t v92 = sub_1000093D0(v31, (uint64_t)qword_1001EDB28);
  sub_100019F54(v27);
  id v93 = v30;
  sub_1000A18C4(v87);
  id v94 = v93;
  uint64_t v95 = (os_log_s *)sub_1000A25E8();
  os_log_type_t v96 = static os_log_type_t.default.getter(v95);
  LODWORD(v42sub_10007E30C(v1, v0, 1) = v96;
  BOOL v97 = os_log_type_enabled(v95, v96);
  uint64_t v431 = v91;
  uint64_t v420 = v31;
  id v429 = v94;
  if (v97)
  {
    uint64_t v98 = sub_100009B20(42LL);
    id v381 = (id)sub_100009B20(64LL);
    id v433 = v381;
    *(_DWORD *)uint64_t v98 = 136446979;
    uint64_t v380 = v95;
    uint64_t v99 = v27 + OBJC_IVAR____TtC7parsecd11ClientState_sessionType;
    sub_1000A15C0();
    uint64_t v415 = v92;
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v101 = sub_1000A27CC(v100);
    uint64_t v103 = sub_1000307E0(v101, v102, (uint64_t *)&v433);
    uint64_t v104 = sub_1000A20D0(v103);
    sub_1000A1844(v104, v105);
    sub_100019D80(v27);
    uint64_t v106 = sub_10005A1BC();
    *(_WORD *)(v98 + 12) = 2050;
    id v107 = sub_10005A6B4(v106, "queryId");

    uint64_t v438 = (uint64_t)v107;
    sub_1000A1844((uint64_t)&v438, v99);

    *(_WORD *)(v98 + 22) = 2050;
    uint64_t v108 = (uint64_t)v432;
    uint64_t v92 = v415;
    uint64_t v438 = (uint64_t)v425;
    sub_1000A1870((uint64_t)&v438, v109, v98 + 24);
    *(_WORD *)(v98 + 32) = 2085;
    sub_100010E2C();
    uint64_t v438 = sub_1000A2220(v108, v110, (uint64_t *)&v433);
    sub_1000A1844((uint64_t)&v438, v99);
    sub_100019FA4(v87);
    uint64_t v111 = v380;
    sub_1000A1808( (void *)&_mh_execute_header,  v380,  (os_log_type_t)v421,  "Session %{public}s performing lookup query[%{public}llu] requestId:%{public}llu '%{sensitive}s'",  (uint8_t *)v98);
    uint64_t v112 = sub_1000A1E78((uint64_t)v410);
    sub_10004EE00(v112);
    sub_100010C34(v98 + 34);
    sub_100010C34(v98);
  }

  else
  {

    sub_100019F4C(v87);
    sub_100019D80(v27);
  }

  uint64_t v120 = v87;
  sub_100086CFC( 1LL,  v113,  v114,  v115,  v116,  v117,  v118,  v119,  v378,  v379,  (uint64_t)v380,  (uint64_t)v381,  v382,  v383,  v384,  v385,  v386,  v387,  v388,  v389);
  if ((v121 & 1) == 0)
  {
    uint64_t v130 = (os_log_s *)static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    uint64_t v131 = sub_10000941C(&qword_1001D10D0);
    os_log_type_t v132 = (__n128 *)sub_1000A25C0(v131);
    uint64_t v133 = sub_10006B254(v132, (__n128)xmmword_10015C7F0);
    uint64_t v134 = sub_1000A1914((uint64_t)v133, (uint64_t)&type metadata for String);
    uint64_t v136 = sub_10006B3C0(v134, v135);
    uint64_t v138 = (uint64_t (**)(uint64_t, uint64_t, void, uint64_t))Dictionary.init(dictionaryLiteral:)( v136,  v137,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v139 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v140 = sub_1000A1F68();
    id v425 = (id)sub_10006B3A4(v140, v141, 1LL, (uint64_t)v138);
    sub_1000A18C4(v87);
    sub_1000A25E8();
    os_log_type_t v142 = sub_100010EC4();
    if (sub_10004ED20(v142))
    {
      uint64_t v379 = v27;
      uint64_t v143 = sub_100009B20(12LL);
      uint64_t v422 = (uint64_t)&type metadata for Any + 8;
      id v144 = (uint8_t *)v143;
      uint64_t v145 = sub_100009B20(32LL);
      id v433 = (id)v145;
      *(_DWORD *)id v144 = 136642819;
      uint64_t v146 = v430;
      sub_1000A23A8();
      sub_100010E2C();
      uint64_t v148 = sub_1000A2220((uint64_t)v432, v147, (uint64_t *)&v433);
      uint64_t v149 = sub_1000A256C(v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v149, v150, v144 + 4);
      sub_100019FA4(v87);
      sub_100014564( (void *)&_mh_execute_header,  v130,  (os_log_type_t)v20,  "Bag fetch failed, can't complete query: %{sensitive}s",  v144);
      swift_arrayDestroy(v145, 1LL);
      sub_100010C34(v145);
      uint64_t v151 = (uint64_t)v144;
      uint64_t v120 = v87;
      uint64_t v152 = (uint64_t)v432;
      sub_100010C34(v151);

      uint64_t v153 = &selRef_fbr;
    }

    else
    {

      sub_100019F4C(v87);
      uint64_t v153 = &selRef_fbr;
      uint64_t v146 = v430;
      sub_1000A23A8();
      uint64_t v152 = (uint64_t)v432;
    }

    id v169 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    id v170 = sub_10008F620(3LL, v152, v120);
    uint64_t v171 = sub_1000A1E14();
    sub_1000A1434(v171, v153[4]);
    id v172 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v170];
    sub_1000A1650(v172, "setQueryId:");
    sub_1000A1E00();
    sub_1000A1D60(v173, v174);
    uint64_t v175 = sub_1000A2250();
    sub_10005A148(v175, v176, v146);
    if (v127)
    {
      sub_1000A1E00();
      parsecdUserAgent.getter(v177);
      sub_100019C1C(v152, (uint64_t *)&unk_1001D5D20);
      uint64_t v178 = v426;
    }

    else
    {
      uint64_t v178 = v426;
      uint64_t v152 = (uint64_t)v424;
      uint64_t v179 = sub_1000272AC();
      sub_10005A3B0(v179, v180, v181);
    }

    sub_1000A1E48();
    sub_1000A2684();
    sub_10005A910();

    uint64_t v182 = sub_10005A26C(v152, *(uint64_t (**)(uint64_t, uint64_t))(v178 + 8));
    id v183 = sub_1000A1434(v182, v153[4]);
    id v184 = v425;
    uint64_t v185 = sub_1000A1630();

    if (v185) {
      BOOL v186 = (void *)sub_1000A1C28();
    }
    else {
      BOOL v186 = 0LL;
    }
    sub_1000A14EC((uint64_t)v138, (uint64_t)v183, v138[2]);

    sub_100010D88();
    sub_1000A1360(qword_1001D2E88);
    sub_100019F70();
    sub_10001683C();

    _Block_release(v138);
    uint64_t v187 = v138;
    goto LABEL_33;
  }

  uint64_t v122 = v422;
  sub_1000A1D60((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v123 = v122;
  uint64_t v124 = sub_1000A197C();
  sub_10005A148(v124, v125, v430);
  uint64_t v126 = &selRef_fbr;
  if (v127)
  {
    sub_1000145F0();
    sub_100019C1C(v123, (uint64_t *)&unk_1001D5D20);
    id v128 = sub_1000A1D20();
    uint64_t v129 = (uint64_t)v428;
    sub_1000A1354((uint64_t)v428, (uint64_t)v128, v428[2]);
    sub_1000A1B00(qword_1001D2E88);
    sub_1000A1DE0((uint64_t)&a17);
LABEL_31:
    swift_release();
LABEL_32:
    sub_1000A1F34();
    uint64_t v187 = (const void *)v129;
LABEL_33:
    _Block_release(v187);
    sub_100009AA0();
    return;
  }

  id v424 = (id)v87;
  sub_1000A1DB0((uint64_t)v80, v123, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v426 + 32));
  sub_1000A24D0((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (!v154)
  {
    sub_1000A1B68();
    id v188 = sub_1000A1D20();
    uint64_t v129 = (uint64_t)v428;
    sub_1000A1354((uint64_t)v428, (uint64_t)v188, v428[2]);
    sub_1000A1B00(qword_1001D2E88);
    sub_100019F70();
    uint64_t v189 = sub_1000A2164();
LABEL_30:
    v191(v189, v190);
    goto LABEL_31;
  }

  uint64_t v155 = v154;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v27 + 16);
  if (!Strong)
  {
    sub_1000A1B68();
    id v192 = sub_1000A1D20();
    uint64_t v129 = (uint64_t)v428;
    sub_1000A1354((uint64_t)v428, (uint64_t)v192, v428[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();

    id v191 = *(void (**)(uint64_t, uint64_t))(v426 + 8);
    uint64_t v189 = (uint64_t)v80;
    uint64_t v190 = v430;
    goto LABEL_30;
  }

  uint64_t v157 = Strong;
  uint64_t v379 = v27;
  uint64_t v158 = *(void **)(v27 + 24);
  id v159 = [v155 isEnabled];
  if ((v159 & 1) == 0)
  {
    uint64_t v193 = v428;
    Logger.logObject.getter(v159);
    os_log_type_t v194 = sub_1000A1810();
    BOOL v195 = sub_100047154(v194);
    uint64_t v196 = (uint64_t)v432;
    if (v195)
    {
      uint64_t v197 = (_WORD *)sub_100009B20(2LL);
      sub_100047288(v197);
      sub_10005A550((void *)&_mh_execute_header, v198, v199, "no search, bag disabled");
      sub_100010C34(v87);
    }

    id v200 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    id v201 = sub_10008F620(2LL, v196, (uint64_t)v424);
    uint64_t v202 = sub_10006B4EC();
    sub_1000A1434(v202, "queryId");
    id v203 = sub_1000A2674(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
    sub_1000A1964(v203, "setQueryId:");
    sub_1000A26DC();
    sub_100010CA0();

    id v205 = sub_1000A1434(v204, "queryId");
    sub_1000A1354((uint64_t)v193, (uint64_t)v205, v193[2]);
    sub_1000A1360(qword_1001D2E88);

    sub_10001683C();
    sub_10006B644();

    sub_1000A14B4();
    sub_1000A1DE0((uint64_t)&a17);
    _Block_release(v193);
    uint64_t v187 = v193;
    goto LABEL_33;
  }

  uint64_t v423 = v155;
  uint64_t v436 = &unk_1001B32C8;
  unint64_t v437 = sub_10003B83C();
  LOBYTE(v433) = 3;
  uint64_t v160 = (os_log_s *)isFeatureEnabled(_:)(&v433);
  sub_1000108B8(&v433);
  if ((v160 & 1) != 0)
  {
    sub_1000A1B68();
    if (qword_1001D0538 != -1) {
      swift_once(&qword_1001D0538, sub_100034518);
    }
    uint64_t v422 = v157;
    sub_1000A15F8(v420, (uint64_t)qword_1001EDC78);
    id v161 = v429;
    Logger.logObject.getter(v161);
    os_log_type_t v162 = sub_100014588();
    if (sub_10003EFD0(v162))
    {
      uint64_t v163 = sub_100009B20(22LL);
      *(_DWORD *)uint64_t v163 = 134349312;
      id v433 = sub_100047258(v163, "queryId");
      sub_1000A21D0();
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v165, v166);

      *(_WORD *)(v163 + 12) = 2050;
      uint64_t v167 = (uint64_t)v425;
      id v433 = v425;
      uint64_t v168 = v423;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v433, &v434, v163 + 14);
      sub_100019F44( (void *)&_mh_execute_header,  v160,  (os_log_type_t)&selRef_fbr,  "Will perform %{public}llu request, requestId: %{public}llu using gRPC endpoint",  (uint8_t *)v163);
      sub_100010C34(v163);
    }

    else
    {

      uint64_t v160 = (os_log_s *)v161;
      uint64_t v167 = (uint64_t)v425;
      uint64_t v168 = v423;
    }

    uint64_t v210 = v379;
    sub_10006B4EC();
    uint64_t v211 = (void (**)(void, void, void, void))v414;
    sub_1000A8A40();
    sub_100010CA0();
    sub_10004D784((uint64_t)v211, type metadata accessor for SessionTokens);
    id v212 = (const void *)sub_1000A1E78((uint64_t)&a18);
    _Block_copy(v212);
    sub_10009CD60(v161, v167, v416, v422, (uint64_t)v158, (uint64_t)v80, v431, v210, v211);
    sub_100088C90();
    sub_100086C64();
    sub_100010D00();
    sub_1000471D0();

    sub_1000A14B4();
    swift_release();
    _Block_release(v211);
    uint64_t v187 = v211;
    goto LABEL_33;
  }

  sub_10006B4EC();
  sub_1000A8A40();
  sub_100010CA0();
  sub_1000A1E00();
  sub_10004A274(v206);
  uint64_t v207 = sub_1000A1CBC();
  uint64_t v208 = sub_100009ACC(v207, 928LL);
  uint64_t v209 = sub_1000A1738();
  sub_1000A26F0(v209);
  sub_100054E50();
  uint64_t v415 = v92;
  uint64_t v421 = v80;
  sub_10001683C();
  uint64_t v213 = v412;
  sub_1000A1DE8();
  uint64_t v214 = v417;
  sub_1000A22A0(v215);
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  uint64_t v422 = v157;
  sub_1000A15F8(v420, (uint64_t)qword_1001EDC78);
  uint64_t v216 = *(void (**)(void *, uint64_t, uint64_t))(v213 + 16);
  uint64_t v217 = (uint64_t)v408;
  v216(v408, v208, v214);
  uint64_t v218 = (uint64_t)v413;
  id v414 = v216;
  v216(v413, v208, v214);
  id v219 = v429;
  uint64_t v220 = (os_log_s *)Logger.logObject.getter(v219);
  int v221 = static os_log_type_t.debug.getter();
  BOOL v222 = os_log_type_enabled(v220, (os_log_type_t)v221);
  uint64_t v378 = v20;
  if (v222)
  {
    LODWORD(v429) = v221;
    uint64_t v223 = sub_100009B20(42LL);
    uint64_t v224 = sub_100009B20(64LL);
    id v433 = (id)v224;
    *(_DWORD *)uint64_t v223 = 134349826;
    uint64_t v438 = (uint64_t)sub_10003D808(v224, "queryId");
    sub_1000A1658((uint64_t)&v438, (uint64_t)v439);

    *(_WORD *)(v223 + 12) = 2080;
    uint64_t v226 = URLRequest.debugDescription.getter(v225);
    uint64_t v438 = sub_1000307E0(v226, v227, (uint64_t *)&v433);
    sub_1000A1894((uint64_t)&v438, (uint64_t)v439);
    sub_100009B3C();
    uint64_t v228 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
    uint64_t v229 = sub_1000A2830(v217);
    *(_WORD *)(v223 + 22) = 2080;
    uint64_t v230 = URLRequest.allHTTPHeaderFields.getter(v229);
    if (!v230) {
      uint64_t v230 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v231,  (uint64_t)&protocol witness table for String);
    }
    uint64_t v232 = sub_1000A1BA8(v230, (uint64_t)&type metadata for String);
    sub_100009B3C();
    uint64_t v234 = sub_1000A2048(v232, v233, (uint64_t *)&v433);
    uint64_t v235 = sub_1000A20D0(v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v235, v236, v223 + 24);
    sub_10003B8E8();
    sub_1000A2830((uint64_t)v413);
    sub_1000A2850();
    uint64_t v438 = (uint64_t)v425;
    sub_1000A1870((uint64_t)&v438, v237, v238);
    sub_1000A1808( (void *)&_mh_execute_header,  v220,  (os_log_type_t)v429,  "performing query %{public}llu request %s header: %s requestId: %{public}llu",  (uint8_t *)v223);
    sub_10004EE00(v224);
    sub_100010C34(v224);
    sub_100010C34(v223);

    uint64_t v126 = &selRef_fbr;
  }

  else
  {

    uint64_t v228 = *(void (**)(uint64_t, uint64_t))(v213 + 8);
    v228(v217, v214);
    v228(v218, v214);
  }

  id v247 = sub_1000A25E0();
  sub_1000901A0((uint64_t)v432, (uint64_t)v424, v247);
  id v249 = sub_1000A28F8(v248, "setTriggerEvent:");
  id v250 = sub_1000A1F3C((uint64_t)v249, "setEndpoint:");
  uint64_t v251 = (uint64_t)sub_10003D808((uint64_t)v250, "lookupSelectionType");
  if (v251 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    swift_once(&qword_1001D0538, sub_100034518);
    sub_1000093D0(v420, (uint64_t)qword_1001EDC78);
    uint64_t v239 = sub_1000110C4();
    uint64_t v240 = Logger.logObject.getter(v239);
    os_log_type_t v242 = sub_100047278(v240, v241);
    if (os_log_type_enabled((os_log_t)v219, v242))
    {
      uint64_t v243 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v244 = (void *)sub_100009B20(8LL);
      uint64_t v421 = v228;
      *(_DWORD *)uint64_t v243 = 138412290;
      id v245 = (id)sub_1000A1C28();
      id v433 = v245;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v433, &v434, v243 + 4);
      *uint64_t v244 = v245;
      sub_100010D88();
      sub_100014564((void *)&_mh_execute_header, (os_log_s *)v219, v242, "lookupRequest failed: %@", v243);
      sub_10000941C(&qword_1001D1060);
      sub_100030F9C((uint64_t)v244);
      uint64_t v246 = (uint64_t)v244;
      uint64_t v126 = &selRef_fbr;
      sub_100010C34(v246);
      sub_100010C34((uint64_t)v243);
    }

    else
    {
      sub_100010D88();
    }

    id v295 = sub_10006B65C(v294, v126[4]);
    sub_1000110C4();
    uint64_t v296 = sub_1000A1630();
    sub_100010D88();
    if (v296) {
      uint64_t v297 = (void *)sub_1000A2904();
    }
    else {
      uint64_t v297 = 0LL;
    }
    uint64_t v375 = v428;
    sub_1000A14EC((uint64_t)v428, (uint64_t)v295, v428[2]);

    sub_1000A18BC();
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
    sub_10007705C((uint64_t)&a12);
    sub_1000A15AC((uint64_t)&a13);
    sub_100010D88();
    sub_1000A1748(type metadata accessor for PegasusContext, (uint64_t)&v444);
    sub_1000A1A90(v376, type metadata accessor for SessionTokens);
    sub_1000A14B4();
    sub_1000A1790();
    _Block_release(v375);
    uint64_t v187 = v375;
    goto LABEL_33;
  }

  uint64_t v413 = v228;
  if (v251 > 0x7FFFFFFF) {
    goto LABEL_65;
  }
  sub_10006B65C(v251, "setLookupSelectionType:");
  uint64_t v252 = v379;
  sub_1000A1C30();
  id v253 = v247;
  sub_10003D808((uint64_t)v253, v126[4]);
  id v254 = objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload);
  id v255 = objc_msgSend(v254, "initWithCodable:", v253, v378);
  sub_1000A1650(v255, "setQueryId:");

  sub_1000A1BE4();
  sub_1000471D0();

  id v256 = &selRef_fbr;
  uint64_t v257 = sub_10006B4EC();
  sub_10003D808(v257, "queryId");
  sub_1000A84F8();
  sub_100010CA0();
  id v258 = v219;
  uint64_t v259 = sub_1000A1E60((uint64_t)&a14);
  sub_1000A18C4(v259);
  id v260 = v258;
  uint64_t v261 = (os_log_s *)sub_1000A25E8();
  os_log_type_t v262 = static os_log_type_t.debug.getter();
  if (sub_100077264(v261))
  {
    uint64_t v263 = sub_100009B20(22LL);
    id v256 = (char **)sub_100009B20(32LL);
    id v433 = v256;
    *(_DWORD *)uint64_t v263 = 134218242;
    id v264 = sub_1000A1434((uint64_t)v256, "queryId");

    uint64_t v438 = (uint64_t)v264;
    sub_1000A20A0();

    *(_WORD *)(v263 + 12) = 2080;
    sub_10003EF98();
    uint64_t v438 = sub_1000A1C20((uint64_t)v432, v265, (uint64_t *)&v433);
    sub_1000A20A0();
    sub_100019FA4(v252);
    sub_100019F44( (void *)&_mh_execute_header,  v261,  v262,  "Dispatching network request for (id, query): (%llu, %s)",  (uint8_t *)v263);
    sub_100030F9C((uint64_t)v256);
    sub_100010C34((uint64_t)v256);
    sub_100010C34(v263);
  }

  else
  {

    sub_100019F4C(v252);
  }

  uint64_t v266 = v422;
  uint64_t v267 = v431;
  uint64_t v268 = v407;
  v408 = v253;
  sub_100088D04();
  uint64_t v407 = v269;
  UUID.init()(v269);
  sub_1000A18DC();
  uint64_t v271 = v270;
  uint64_t v272 = sub_1000A2148((uint64_t)&a9);
  id v273 = sub_1000A1BB0(v272);
  id v429 = v274;

  uint64_t v275 = swift_weakLoadStrong(v267 + 16);
  id v381 = v273;
  if (v275)
  {
    uint64_t v276 = (void *)v275;
    sub_1000A2204();
    uint64_t v277 = v267;
    LODWORD(v382) = *(unsigned __int8 *)(v267 + 80);
    uint64_t v278 = v384;
    sub_1000A244C(v384, v279, v280);
    unint64_t v281 = *(void *)(v267 + qword_1001EDD08);
    id v282 = v260;
    char v283 = *(_BYTE *)(v267 + qword_1001EDD08 + 8);
    uint64_t v284 = sub_1000A1CC4();
    uint64_t v285 = v268;
    uint64_t v286 = sub_1000773F4(v284);
    id v287 = v273;
    uint64_t v288 = sub_1000A1E78((uint64_t)&v436);
    sub_1000A1BB8(v288);
    id v289 = v287;
    sub_1000A24E4();
    uint64_t v377 = v286;
    uint64_t v268 = v285;
    uint64_t v290 = v277;
    uint64_t v266 = (uint64_t)v419;
    char v291 = v283;
    id v260 = v282;
    *(void *)(v290 + qword_1001EDD00) = sub_1000A21C0( v276,  v382,  v278,  v281,  v291,  v289,  (uint64_t)v256,  v292,  0xE200000000000000LL,  v377);

    sub_1000145E0();
    uint64_t v293 = sub_10001683C();
  }

  else
  {
    id v298 = v273;
    uint64_t v293 = sub_1000A24E4();
  }

  uint64_t v380 = (os_log_s *)v260;
  id v433 = v429;
  id v299 = sub_1000A1434(v293, "queryId");
  uint64_t v300 = sub_100019E00((uint64_t)&unk_1001B62B0);
  sub_1000A239C();
  *(void *)(v301 + sub_10000BDD4(v0 + 16) = v299;
  *(void *)(v301 + 24) = v302;
  uint64_t v303 = sub_100019E00((uint64_t)&unk_1001B62D8);
  *(void *)(v303 + sub_10000BDD4(v0 + 16) = sub_1000A12F4;
  *(void *)(v303 + 24) = v300;
  sub_1000271C4();
  sub_10000941C(&qword_1001D53B8);
  sub_1000A1588(&qword_1001D53C0);
  uint64_t v304 = v385;
  sub_1000A1E28((uint64_t)sub_1000A1348);
  sub_10001443C();
  swift_release();
  uint64_t v305 = sub_100019E00((uint64_t)&unk_1001B6300);
  uint64_t v306 = v379;
  *(void *)(v305 + sub_10000BDD4(v0 + 16) = sub_1000A0260;
  *(void *)(v305 + 24) = v306;
  sub_1000A19A8();
  sub_10000941C(&qword_1001D53C8);
  sub_1000A26A8();
  Publishers.Map.tryMap<A>(_:)();
  sub_1000110B0();
  sub_100009BC8(v304, *(uint64_t (**)(uint64_t, uint64_t))(v386 + 8));
  uint64_t v307 = sub_100019E00((uint64_t)&unk_1001B6328);
  sub_1000A1864(v307, (uint64_t)sub_1000A028C);
  sub_10000941C(&qword_1001D53D0);
  uint64_t v308 = v392;
  sub_1000A1C4C();
  sub_1000110B0();
  uint64_t v309 = sub_1000A1BF4();
  sub_100009BC8(v309, v310);
  uint64_t v311 = sub_100019E00((uint64_t)&unk_1001B6350);
  sub_1000A1864(v311, (uint64_t)sub_1000A02B8);
  uint64_t v391 = sub_10000941C(&qword_1001D53D8);
  sub_1000A2218();
  sub_1000110B0();
  sub_100009BC8(v308, *(uint64_t (**)(uint64_t, uint64_t))(v393 + 8));
  uint64_t v312 = v417;
  uint64_t v313 = (void (*)(uint64_t))v414;
  ((void (*)(uint64_t, uint64_t, uint64_t))v414)(v388, v266, v417);
  sub_100090158(v408, (SEL *)&selRef_uuid);
  uint64_t v394 = v315;
  if (v314)
  {
    uint64_t v316 = v314;
    uint64_t v317 = v268;
    uint64_t v318 = sub_1000A2228();
    v313(v318);
    uint64_t v319 = *(unsigned __int8 *)(v412 + 80);
    uint64_t v412 = v319 | 7;
    unint64_t v320 = (v409 + ((v319 + 32) & ~v319) + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v321 = (v320 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v322 = swift_allocObject(&unk_1001B6378, v321 + 8, v319 | 7);
    sub_1000A1F80();
    *(void *)(v323 + sub_10000BDD4(v0 + 16) = v325;
    *(void *)(v323 + 24) = v324;
    sub_1000A1880((uint64_t)&v441);
    uint64_t v326 = (uint64_t *)(v322 + v320);
    *uint64_t v326 = v394;
    v326[1] = v316;
    uint64_t v327 = v379;
    *(void *)(v322 + v32sub_10007E30C(v1, v0, 1) = v379;
    uint64_t v328 = v327;
    swift_retain(v327);
    sub_1000A27F8();
    uint64_t v329 = sub_100019E00((uint64_t)&unk_1001B63A0);
    *(void *)(v329 + sub_10000BDD4(v0 + 16) = sub_1000A02E8;
    *(void *)(v329 + 24) = v322;
    sub_1000A26A8();
    uint64_t v330 = v397;
    Publishers.TryMap.tryMap<A>(_:)(v331, v329, v397, v391);
    sub_10001443C();
    sub_1000A1E3C();
    uint64_t v395 = v332;
    sub_10007704C(v317, v332);
    id v333 = sub_1000A2210((uint64_t)&v437);
    id v424 = v333;
    id v334 = sub_1000A2210((uint64_t)v410);
    id v432 = v334;
    uint64_t v335 = v380;
    id v336 = sub_1000A1434((uint64_t)v334, "queryId");
    uint64_t v337 = (void *)sub_100009ACC((uint64_t)&unk_1001B63C8, 48LL);
    v337[2] = v328;
    v337[3] = v333;
    v337[4] = v334;
    v337[5] = v336;
    uint64_t v338 = sub_100019E00((uint64_t)&unk_1001B63F0);
    *(void *)(v338 + sub_10000BDD4(v0 + 16) = sub_1000A1208;
    *(void *)(v338 + 24) = v337;
    sub_1000A1738();
    uint64_t v339 = v396;
    sub_1000A1C4C();
    sub_10001443C();
    uint64_t v340 = v395;
    v395(v312, v330);
    sub_1000A1E60((uint64_t)v439);
    sub_1000A22E4();
    sub_1000A1880((uint64_t)&v442);
    uint64_t v341 = swift_allocObject(&unk_1001B6418, ((v319 + 24) & ~v319) + v409, v412);
    *(void *)(v341 + sub_10000BDD4(v0 + 16) = v335;
    sub_1000A1880((uint64_t)&v441);
    uint64_t v342 = sub_100019E00((uint64_t)&unk_1001B6440);
    *(void *)(v342 + sub_10000BDD4(v0 + 16) = sub_1000A0334;
    *(void *)(v342 + 24) = v341;
    uint64_t v343 = v335;
    sub_10000941C(&qword_1001D5440);
    sub_1000A2218();
    sub_1000110B0();
    uint64_t v344 = v340(v339, v330);
    id v414 = sub_1000145D8(v344, "queryId");
    sub_1000770AC(v403, v415, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v404 + 16));
    sub_1000A2118();
    sub_1000A21DC();
    unint64_t v346 = v345 & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v347 = ((v345 & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v348 = (v347 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v349 = (v348 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v351 = swift_allocObject(&unk_1001B6468, v349 + 8, v350);
    uint64_t v352 = sub_1000A288C(v351);
    sub_1000770AC(v352, v353, v354);
    *(void *)(v342 + v312) = v414;
    sub_1000A239C();
    *(void *)(v342 + v346) = v355;
    *(void *)(v342 + v347) = v379;
    uint64_t v356 = v424;
    *(void *)(v342 + v348) = v424;
    *(void *)(v342 + v349) = v432;
    uint64_t v357 = sub_100019E00((uint64_t)&unk_1001B6490);
    *(void *)(v357 + sub_10000BDD4(v0 + 16) = sub_1000A0354;
    *(void *)(v357 + 24) = v342;
    sub_100010D08();
    id v425 = v356;
    sub_1000271C4();
    sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
    sub_1000A1588(&qword_1001D5458);
    uint64_t v358 = v405;
    uint64_t v359 = v400;
    sub_1000A28AC();
    sub_10001443C();
    sub_10007704C((uint64_t)&unk_1001D5448, *(uint64_t (**)(uint64_t, uint64_t))(v399 + 8));
    uint64_t v360 = sub_100019E00((uint64_t)&unk_1001B5928);
    uint64_t v361 = sub_1000A1B44(v360);
    qword_1001D5460 = (uint64_t)&off_1001B4440;
    swift_unknownObjectWeakInit(v361, v416);
    sub_1000A2148((uint64_t)&v440);
    uint64_t v362 = v402;
    sub_1000A0008();
    sub_1000A21F4();
    uint64_t v365 = v364 & ~v363;
    sub_1000A14CC();
    uint64_t v368 = swift_allocObject(&unk_1001B64B8, v366, v367);
    *(void *)(v368 + sub_10000BDD4(v0 + 16) = &unk_1001D5448;
    sub_1000A0040(v362, v368 + v365);
    *(void *)(v368 + v346) = v431;
    uint64_t v369 = (void (**)())(v368 + v347);
    uint64_t v370 = v427;
    *uint64_t v369 = sub_1000A1350;
    v369[1] = (void (*)())v370;
    sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
    sub_1000A1EA4();
    sub_1000272E4();
    sub_1000A2090();
    Publisher<>.sink(receiveValue:)(v371, v372, v373, v374);
    sub_1000110B0();
    sub_10005A6D0(v358, *(uint64_t (**)(uint64_t, uint64_t))(v406 + 8));
    sub_100060FBC();
    sub_10001443C();
    sub_100088C90();
    sub_100086C64();
    swift_release();
    sub_1000A15AC((uint64_t)&a15);
    sub_10007705C((uint64_t)&v436);
    sub_1000A1790();
    sub_10007705C((uint64_t)&a12);

    sub_1000A15AC((uint64_t)&a13);
    sub_10004D784(v359, type metadata accessor for CancellableStoreKey);
    sub_1000A27F8();
    sub_1000A1748(type metadata accessor for PegasusContext, (uint64_t)&v444);
    sub_1000A1748(type metadata accessor for SessionTokens, (uint64_t)&v407);
    sub_1000A1A10((uint64_t)v421, *(uint64_t (**)(uint64_t, void))(v426 + 8));
    sub_10001106C();
    uint64_t v129 = (uint64_t)v428;
    goto LABEL_32;
  }

  sub_1000A1F34();
  sub_1000A1F34();
  swift_release();
  __break(1u);
}

void sub_1000994D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v330 = v29;
  uint64_t v31 = v30;
  sub_100010ED4();
  sub_1000A27A0();
  uint64_t v325 = v32;
  sub_1000A1DF4();
  __chkstk_darwin(v33);
  uint64_t v321 = v34;
  sub_1000A1780();
  sub_10007732C(v35);
  uint64_t v313 = sub_10000941C(&qword_1001D5350);
  uint64_t v312 = *(void *)(v313 - 8);
  sub_100027160();
  __chkstk_darwin(v36);
  sub_100014428();
  sub_10007732C(v37);
  uint64_t v38 = sub_10000941C(&qword_1001D5358);
  sub_1000A15E0(v38, (uint64_t)&v342);
  uint64_t v317 = v39;
  sub_100027160();
  __chkstk_darwin(v40);
  sub_100014428();
  sub_10007732C(v41);
  uint64_t v42 = sub_10000941C(&qword_1001D5368);
  sub_1000A15E0(v42, (uint64_t)&v346);
  uint64_t v318 = v43;
  sub_100027160();
  __chkstk_darwin(v44);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v45);
  sub_10005A2F8();
  sub_10007732C(v46);
  uint64_t v326 = sub_10000941C(&qword_1001D5370);
  uint64_t v324 = *(void *)(v326 - 8);
  sub_100027160();
  __chkstk_darwin(v47);
  sub_10007732C((uint64_t)&v303 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = sub_10000941C(&qword_1001D5378);
  sub_1000A15E0(v49, (uint64_t)&v353);
  uint64_t v329 = v50;
  sub_100027160();
  __chkstk_darwin(v51);
  uint64_t v328 = (char *)&v303 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v322 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v53);
  uint64_t v327 = (char *)&v303 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A1858((uint64_t)&v350);
  __chkstk_darwin(v55);
  uint64_t v331 = (char *)&v303 - v56;
  uint64_t v57 = sub_1000772E0();
  sub_1000A15E0(v57, (uint64_t)&v356);
  sub_1000A23C4(v58);
  sub_1000A157C();
  __chkstk_darwin(v59);
  sub_1000A1380();
  sub_1000A1404(v60);
  __chkstk_darwin(v61);
  sub_1000A1404((uint64_t)&v303 - v62);
  __chkstk_darwin(v63);
  sub_10005A2F8();
  sub_1000A1404(v64);
  __chkstk_darwin(v65);
  sub_10005A2F8();
  sub_10007732C(v66);
  sub_1000A1858((uint64_t)&v338);
  __chkstk_darwin(v67);
  sub_10005A2F8();
  uint64_t v336 = v68;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v69);
  unint64_t v348 = (char *)&v303 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A1644();
  sub_100027160();
  __chkstk_darwin(v71);
  sub_10007732C((uint64_t)&v303 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v73);
  sub_100077030();
  __chkstk_darwin(v74);
  uint64_t v338 = (uint64_t)&v303 - v75;
  uint64_t v76 = sub_10006B428();
  sub_100009B84();
  __chkstk_darwin(v77);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v78);
  sub_10005A2F8();
  uint64_t v337 = v79;
  uint64_t v308 = sub_100019F9C();
  uint64_t v307 = *(void *)(v308 - 8);
  sub_100027160();
  __chkstk_darwin(v80);
  sub_10000BEB8();
  uint64_t v346 = sub_100009ACC((uint64_t)&unk_1001B6558, 24LL);
  *(void *)(v346 + sub_10000BDD4(v0 + 16) = v26;
  uint64_t v343 = (uint64_t (**)(uint64_t, uint64_t, void, uint64_t))v26;
  uint64_t v81 = sub_1000A2344();
  id v82 = sub_100032C5C((uint64_t)v81, "flightQuery");
  uint64_t v349 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
  uint64_t v84 = v83;

  sub_1000A1A68();
  uint64_t v342 = v355;
  id v85 = (void *)*((void *)v28 + 7);
  sub_100010D08();
  uint64_t v86 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_100032C5C(v86, "queryId");
  uint64_t v87 = sub_1000A15B4();
  sub_1000773F4(v87);
  uint64_t v309 = v21;
  uint64_t v347 = sub_1000A1474(v85, 5, v21);
  if (qword_1001D04C0 != -1) {
    swift_once(&qword_1001D04C0, sub_1000342FC);
  }
  uint64_t v335 = v22;
  sub_1000A15F8(v22, (uint64_t)qword_1001EDB10);
  sub_100019F54((uint64_t)v28);
  id v88 = v31;
  sub_1000A18C4((uint64_t)v84);
  id v89 = v88;
  sub_1000A2078((uint64_t)&a17);
  os_log_type_t v90 = sub_1000A1810();
  BOOL v91 = sub_1000A19C8((os_log_s *)v88);
  uint64_t v350 = v20;
  uint64_t v92 = (uint64_t)v84;
  id v344 = v89;
  id v345 = v84;
  if (v91)
  {
    uint64_t v93 = sub_100009B20(42LL);
    uint64_t v94 = sub_100009B20(64LL);
    uint64_t v355 = v94;
    *(_DWORD *)uint64_t v93 = 136446979;
    uint64_t v334 = v76;
    uint64_t v95 = (uint64_t)v28 + OBJC_IVAR____TtC7parsecd11ClientState_sessionType;
    sub_1000A15C0();
    sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v97 = sub_1000A1EC8(v96);
    uint64_t v99 = sub_1000307E0(v97, v98, &v355);
    uint64_t v100 = sub_1000A2100(v99);
    sub_1000A1DB8(v100, v101);
    sub_100019D80((uint64_t)v28);
    uint64_t v102 = sub_1000110A8();
    *(_WORD *)(v93 + 12) = 2048;
    id v103 = sub_1000145D8(v102, "queryId");

    uint64_t v351 = (uint64_t)v103;
    uint64_t v76 = v334;
    sub_1000A1A78((uint64_t)&v351, v95);

    *(_WORD *)(v93 + 22) = 2050;
    uint64_t v351 = v342;
    sub_1000A1870((uint64_t)&v351, v104, v93 + 24);
    *(_WORD *)(v93 + 32) = 2085;
    sub_10003EF98();
    uint64_t v351 = sub_1000A1C20(v349, v105, &v355);
    sub_10006B768();
    uint64_t v20 = v350;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v106, v107, v108);
    sub_100019FA4(v92);
    sub_1000A1808( (void *)&_mh_execute_header,  (os_log_s *)v88,  v90,  "Session %{public}s performing flight query[%llu] requestId: %{public}llu '%{sensitive}s'",  (uint8_t *)v93);
    sub_10004EE00(v94);
    sub_100010C34(v94);
    uint64_t v109 = v93;
    uint64_t v110 = (uint64_t)v348;
    sub_100010C34(v109);
  }

  else
  {

    sub_100019F4C((uint64_t)v84);
    sub_100019D80((uint64_t)v28);

    uint64_t v110 = (uint64_t)v348;
  }

  uint64_t v118 = v28;
  sub_100086CFC( 1LL,  v111,  v112,  v113,  v114,  v115,  v116,  v117,  v303,  v304,  (uint64_t)v305,  (uint64_t)v306,  v307,  v308,  v309,  v310,  v311,  v312,  v313,  v314);
  if ((v119 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(kPARErrorDomain);
    sub_1000A28B4();
    uint64_t v128 = sub_10000941C(&qword_1001D10D0);
    uint64_t inited = (__n128 *)swift_initStackObject(v128, v352);
    uint64_t v130 = sub_10006B254(inited, (__n128)xmmword_10015C7F0);
    uint64_t v131 = sub_1000A1914((uint64_t)v130, (uint64_t)&type metadata for String);
    uint64_t v133 = sub_10006B3C0(v131, v132);
    Dictionary.init(dictionaryLiteral:)( v133,  v134,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    id v135 = objc_allocWithZone(&OBJC_CLASS___NSError);
    unint64_t v348 = (char *)sub_1000A1458();
    uint64_t v136 = (uint64_t)v345;
    sub_1000A18C4((uint64_t)v345);
    sub_1000A1834();
    os_log_type_t v137 = sub_100010EC4();
    if (sub_10004ED20(v137))
    {
      uint64_t v306 = v28;
      uint64_t v138 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v139 = sub_100009B20(32LL);
      uint64_t v355 = v139;
      *(_DWORD *)uint64_t v138 = 136642819;
      swift_bridgeObjectRetain(v136);
      uint64_t v140 = v349;
      uint64_t v351 = sub_1000307E0(v349, v136, &v355);
      uint64_t v28 = v306;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v351, v352, v138 + 4);
      sub_100019FA4(v136);
      sub_100014564( (void *)&_mh_execute_header,  v118,  v90,  "Bag fetch failed, can't complete query: %{sensitive}s",  v138);
      swift_arrayDestroy(v139, 1LL);
      sub_100010C34(v139);
      sub_100010C34((uint64_t)v138);
    }

    else
    {

      sub_100019F4C(v136);
      uint64_t v140 = v349;
    }

    uint64_t v141 = v350;
    uint64_t v150 = v340;
    id v151 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    id v152 = sub_10008F620(3LL, v140, v136);
    uint64_t v153 = swift_unknownObjectRetain(*((void *)v28 + 8));
    sub_1000145D8(v153, "queryId");
    id v154 = sub_1000A230C(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
    sub_1000A1650(v154, "setQueryId:");
    uint64_t v155 = v339;
    sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent,  (void (*)(uint64_t))sub_1000C1650);
    uint64_t v156 = sub_10005A148(v155, 1LL, v76);
    if (v123)
    {
      parsecdUserAgent.getter(v156);
      sub_100019C1C(v155, (uint64_t *)&unk_1001D5D20);
    }

    else
    {
      sub_1000A1DB0(v150, v155, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v141 + 32));
    }

    sub_1000A217C();
    sub_1000A5CB4();
    sub_10006B644();

    uint64_t v157 = sub_1000A18D4(v150, *(uint64_t (**)(uint64_t, uint64_t))(v141 + 8));
    id v158 = sub_1000145D8(v157, "queryId");
    id v159 = v348;
    uint64_t v160 = sub_1000A233C();

    if (v160) {
      id v161 = (void *)_convertErrorToNSError(_:)(v160);
    }
    else {
      id v161 = 0LL;
    }
    uint64_t v162 = (uint64_t)v343;
    sub_1000A14EC((uint64_t)v343, (uint64_t)v158, v343[2]);

    sub_100014530();
    sub_1000A1360(qword_1001D2E88);
    sub_1000A19E0();
    sub_10001683C();

    char v127 = (const void *)v162;
    goto LABEL_31;
  }

  uint64_t v120 = v338;
  sub_100082F80((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v121 = sub_1000A197C();
  sub_10005A148(v121, v122, v76);
  if (v123)
  {
    uint64_t v124 = sub_1000A2288();
    sub_1000A1878(v124, (uint64_t *)&unk_1001D5D20);
    id v125 = sub_1000A1F74();
    uint64_t v126 = (uint64_t)v343;
    sub_1000A1354((uint64_t)v343, (uint64_t)v125, v343[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_1000A19E0();
LABEL_10:
    swift_release();
    char v127 = (const void *)v126;
    goto LABEL_31;
  }

  uint64_t v142 = v337;
  sub_1000A1DB0(v337, v120, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (!v143)
  {
    sub_1000A2288();
    id v163 = sub_1000A1F74();
    uint64_t v164 = (uint64_t)v343;
    sub_1000A1354((uint64_t)v343, (uint64_t)v163, v343[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v142, v76);
LABEL_30:
    sub_1000A19E0();
    char v127 = (const void *)v164;
    goto LABEL_31;
  }

  id v144 = v143;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong((char *)v28 + 16);
  if (!Strong)
  {
    sub_1000A2288();
    id v165 = sub_1000A1F74();
    uint64_t v126 = (uint64_t)v343;
    sub_1000A1354((uint64_t)v343, (uint64_t)v165, v343[2]);
    sub_1000A1360(qword_1001D2E88);
    sub_10001683C();

    sub_1000A18D4(v337, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    goto LABEL_10;
  }

  uint64_t v146 = (void *)Strong;
  if (([v144 isEnabled] & 1) == 0)
  {
    sub_1000A1834();
    os_log_type_t v166 = sub_1000A1810();
    if (sub_100047154(v166))
    {
      uint64_t v167 = (_WORD *)sub_100009B20(2LL);
      sub_100047288(v167);
      sub_10005A550((void *)&_mh_execute_header, v168, v169, "no search, bag disabled");
      sub_100010C34(v20);
    }

    id v170 = objc_allocWithZone(&OBJC_CLASS____CPSkipSearchFeedback);
    id v171 = sub_10008F620(2LL, v349, (uint64_t)v345);
    uint64_t v172 = sub_10006B4EC();
    sub_1000A1434(v172, "queryId");
    id v173 = sub_1000A2674(objc_allocWithZone(&OBJC_CLASS____CPFeedbackPayload), "initWithCodable:");
    sub_1000A1964(v173, "setQueryId:");
    sub_1000A2614();
    sub_100010CA0();

    id v175 = sub_1000A1434(v174, "queryId");
    uint64_t v164 = (uint64_t)v343;
    sub_1000A1354((uint64_t)v343, (uint64_t)v175, v343[2]);
    sub_1000A1360(qword_1001D2E88);

    sub_10001683C();
    sub_10005A910();

    uint64_t v176 = sub_1000A2170();
    v177(v176, v76);
    goto LABEL_30;
  }

  sub_10006B4EC();
  sub_1000A1E00();
  sub_1000A8A40();
  sub_100010CA0();
  sub_10004A274(v110);
  uint64_t v147 = sub_1000A1CBC();
  sub_100009ACC(v147, 928LL);
  uint64_t v148 = sub_10000C4AC();
  uint64_t v340 = (uint64_t)v146;
  sub_1000A26F0(v148);
  id v149 = v344;
  sub_1000556BC();
  uint64_t v334 = v76;
  sub_10001683C();
  uint64_t v178 = v332[2];
  sub_1000A1DE8();
  uint64_t v179 = v333;
  sub_1000A22A0(v180);
  sub_100088D04();
  uint64_t v182 = v181;
  if (qword_1001D0538 != -1) {
    swift_once(&qword_1001D0538, sub_100034518);
  }
  uint64_t v339 = (uint64_t)v144;
  sub_1000A15F8(v335, (uint64_t)qword_1001EDC78);
  id v183 = *(void (**)(void))(v178 + 16);
  uint64_t v184 = v310;
  sub_1000A2274();
  v183();
  sub_1000A2274();
  uint64_t v305 = v183;
  v183();
  id v185 = v149;
  Logger.logObject.getter(v185);
  os_log_type_t v186 = sub_1000A1FF8();
  BOOL v187 = sub_1000A169C(v186);
  uint64_t v306 = v28;
  uint64_t v338 = v182;
  if (v187)
  {
    LODWORD(v344) = (_DWORD)v149;
    uint64_t v188 = sub_100009B20(42LL);
    uint64_t v189 = sub_100009B20(64LL);
    uint64_t v304 = v189;
    uint64_t v355 = v189;
    *(_DWORD *)uint64_t v188 = 134349826;
    uint64_t v351 = (uint64_t)sub_10003D808(v189, "queryId");
    sub_1000A1658((uint64_t)&v351, (uint64_t)v352);

    *(_WORD *)(v188 + 12) = 2080;
    uint64_t v190 = URLRequest.description.getter();
    uint64_t v351 = sub_100077300(v190, v191);
    sub_1000A1DB8((uint64_t)&v351, (uint64_t)v352);
    sub_100009B3C();
    uint64_t v192 = v179;
    uint64_t v193 = *(void (**)(uint64_t, uint64_t))(v178 + 8);
    v193(v184, v192);
    *(_WORD *)(v188 + 22) = 2080;
    sub_1000A2300();
    uint64_t v195 = URLRequest.allHTTPHeaderFields.getter(v194);
    if (!v195) {
      uint64_t v195 = sub_1000A1BA0( (uint64_t)_swiftEmptyArrayStorage,  (uint64_t)&type metadata for String,  v196,  (uint64_t)&protocol witness table for String);
    }
    uint64_t v197 = v349;
    uint64_t v198 = sub_1000A1BA8(v195, (uint64_t)&type metadata for String);
    sub_100009B3C();
    uint64_t v200 = sub_1000A1E90(v198, v199, &v355);
    uint64_t v201 = sub_1000A2100(v200);
    sub_1000A223C(v201, v202);
    sub_10005A1BC();
    v193(v332[0], v333);
    sub_1000A2864();
    uint64_t v351 = v342;
    sub_1000A1870((uint64_t)&v351, v203, v204);
    sub_1000A1808( (void *)&_mh_execute_header,  (os_log_s *)v149,  (os_log_type_t)v344,  "performing query %{public}llu request %s header: %s requestId: %{public}llu",  (uint8_t *)v188);
    uint64_t v205 = v304;
    sub_10004EE00(v304);
    sub_100010C34(v205);
    sub_100010C34(v188);

    uint64_t v28 = v306;
  }

  else
  {

    uint64_t v206 = *(void (**)(uint64_t))(v178 + 8);
    uint64_t v207 = sub_1000A1E48();
    v206(v207);
    ((void (*)(void, uint64_t))v206)(v332[0], v179);

    uint64_t v197 = v349;
  }

  id v208 = sub_1000A25E0();
  uint64_t v209 = v197;
  uint64_t v210 = (uint64_t)v345;
  sub_1000901A0(v209, (uint64_t)v345, v208);
  [v208 setTriggerEvent:20];
  [v208 setEndpoint:13];
  sub_1000A1C30();
  uint64_t v211 = v208;
  sub_10003D808((uint64_t)v211, "queryId");
  id v212 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v211];
  sub_1000A1650(v212, "setQueryId:");
  id v344 = v211;

  sub_1000A1BE4();
  sub_1000471D0();

  uint64_t v213 = sub_10006B4EC();
  sub_10003D808(v213, "queryId");
  sub_1000A84F8();
  sub_100010CA0();
  id v214 = v185;
  sub_10003EF98();
  uint64_t v215 = (os_log_s *)sub_1000A260C();
  os_log_type_t v216 = static os_log_type_t.debug.getter();
  if (sub_100077264(v215))
  {
    uint64_t v217 = sub_100009B20(22LL);
    uint64_t v218 = sub_100009B20(32LL);
    uint64_t v355 = v218;
    *(_DWORD *)uint64_t v217 = 134218242;
    id v219 = sub_1000145D8(v218, "queryId");

    uint64_t v351 = (uint64_t)v219;
    uint64_t v211 = v352;
    sub_1000A1894((uint64_t)&v351, (uint64_t)v352);

    *(_WORD *)(v217 + 12) = 2080;
    sub_10003EF98();
    uint64_t v351 = sub_1000A1C20(v349, v220, &v355);
    sub_1000A2498();
    uint64_t v221 = v336;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v222, v223, v224);
    sub_100019FA4(v210);
    sub_100019F44( (void *)&_mh_execute_header,  v215,  v216,  "Dispatching network request for (id, query): (%llu, %s)",  (uint8_t *)v217);
    sub_100030F9C(v218);
    sub_100010C34(v218);
    sub_100010C34(v217);
  }

  else
  {

    sub_100019F4C(v210);
    uint64_t v221 = v336;
  }

  UUID.init()(v225);
  sub_1000498D4();
  id v226 = sub_1000A1BB0(v221);
  sub_1000A2604();
  uint64_t v227 = v347;
  uint64_t v228 = swift_weakLoadStrong(v347 + 16);
  id v345 = v226;
  if (v228)
  {
    uint64_t v229 = (void *)v228;
    sub_1000A2204();
    LODWORD(v310) = *(unsigned __int8 *)(v227 + 80);
    v332[0] = v214;
    uint64_t v230 = v309;
    sub_1000A244C(v309, v231, v232);
    unint64_t v233 = *(void *)(v227 + qword_1001EDD08);
    char v234 = *(_BYTE *)(v227 + qword_1001EDD08 + 8);
    uint64_t v235 = sub_1000A1CC4();
    uint64_t v211 = (_BYTE *)sub_1000773F4(v235);
    id v236 = v226;
    uint64_t v237 = v28;
    id v238 = v236;
    uint64_t v239 = v338;
    sub_1000A1BB8(v338);
    id v240 = v238;
    sub_10005E314();
    uint64_t v241 = v230;
    id v214 = (id)v332[0];
    *(void *)(v227 + qword_1001EDD00) = sub_1000A21C0( v229,  v310,  v241,  v233,  v234,  v240,  v239,  v242,  0xE200000000000000LL,  (uint64_t)v211);

    uint64_t v28 = v237;
    sub_1000471D0();
    uint64_t v243 = sub_10001683C();
  }

  else
  {
    id v244 = v226;
    uint64_t v243 = sub_10005E314();
  }

  uint64_t v349 = v210;
  uint64_t v355 = v210;
  id v245 = sub_1000145D8(v243, "queryId");
  uint64_t v246 = sub_100019E00((uint64_t)&unk_1001B6580);
  uint64_t v247 = v342;
  *(void *)(v246 + sub_10000BDD4(v0 + 16) = v245;
  *(void *)(v246 + 24) = v247;
  uint64_t v248 = sub_100019E00((uint64_t)&unk_1001B65A8);
  *(void *)(v248 + sub_10000BDD4(v0 + 16) = sub_1000A12F4;
  *(void *)(v248 + 24) = v246;
  uint64_t v249 = sub_1000271C4();
  uint64_t v250 = sub_10000941C(&qword_1001D53B8);
  sub_1000A1588(&qword_1001D53C0);
  sub_1000A2080();
  Publisher.map<A>(_:)(v251, v252, v249, v250);
  sub_10001106C();
  swift_release();
  uint64_t v253 = sub_100019E00((uint64_t)&unk_1001B65D0);
  *(void *)(v253 + sub_10000BDD4(v0 + 16) = sub_1000A0260;
  *(void *)(v253 + 24) = v28;
  sub_1000A14AC();
  sub_10000941C(&qword_1001D53C8);
  uint64_t v254 = v316;
  sub_1000A2748();
  sub_1000110B0();
  sub_10005A26C((uint64_t)v211, *(uint64_t (**)(uint64_t, uint64_t))(v312 + 8));
  uint64_t v255 = sub_100019E00((uint64_t)&unk_1001B65F8);
  *(void *)(v255 + sub_10000BDD4(v0 + 16) = sub_1000A0A7C;
  *(void *)(v255 + 24) = v28;
  sub_1000A14AC();
  sub_10000941C(&qword_1001D53D8);
  sub_1000A2080();
  sub_1000A20C8();
  sub_10001106C();
  sub_10005A26C(v254, *(uint64_t (**)(uint64_t, uint64_t))(v317 + 8));
  id v256 = v344;
  v332[0] = v256;
  id v257 = v345;
  id v344 = v257;
  id v258 = sub_1000145D8((uint64_t)v257, "queryId");
  uint64_t v259 = (void *)sub_100009ACC((uint64_t)&unk_1001B6620, 48LL);
  v259[2] = v28;
  v259[3] = v256;
  v259[4] = v257;
  v259[5] = v258;
  uint64_t v260 = sub_100019E00((uint64_t)&unk_1001B6648);
  *(void *)(v260 + sub_10000BDD4(v0 + 16) = sub_1000A1208;
  *(void *)(v260 + 24) = v259;
  sub_1000A14AC();
  uint64_t v261 = v319;
  uint64_t v262 = v320;
  sub_1000A2750();
  sub_10005A8E0();
  uint64_t v263 = *(char **)(v318 + 8);
  ((void (*)(_BYTE *, uint64_t))v263)(v211, v262);
  uint64_t v264 = v315;
  uint64_t v265 = v333;
  sub_1000A1880((uint64_t)v332);
  sub_1000A22D8();
  uint64_t v267 = swift_allocObject( &unk_1001B6670,  ((*(unsigned __int8 *)(v266 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80)) + v314,  *(unsigned __int8 *)(v266 + 80) | 7LL);
  *(void *)(v267 + sub_10000BDD4(v0 + 16) = v214;
  sub_1000A1880((uint64_t)&v354);
  uint64_t v268 = sub_100019E00((uint64_t)&unk_1001B6698);
  *(void *)(v268 + sub_10000BDD4(v0 + 16) = sub_1000A0334;
  *(void *)(v268 + 24) = v267;
  id v269 = v214;
  sub_10000941C(&qword_1001D5440);
  sub_1000A1C0C();
  sub_1000A21C8();
  sub_1000110B0();
  uint64_t v270 = ((uint64_t (*)(uint64_t, uint64_t))v263)(v261, v262);
  id v345 = sub_1000145D8(v270, "queryId");
  uint64_t v271 = v323;
  sub_1000A2234((uint64_t)v323, v341, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v325 + 16));
  sub_1000A2118();
  sub_1000A21DC();
  sub_1000A1D94();
  unint64_t v273 = v272 & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v275 = swift_allocObject(&unk_1001B66C0, (v272 & 0xFFFFFFFFFFFFFFF8LL) + 8, v274);
  uint64_t v276 = sub_1000A288C(v275);
  sub_1000A2234(v276, v277, v278);
  id v279 = v344;
  *(void *)&v263[v268] = v345;
  *(void *)(v268 + v264) = v342;
  *(void *)(v268 + v265) = v306;
  sub_1000A2300();
  *(void *)((char *)v28 + v268) = v271;
  *(void *)(v268 + v273) = v279;
  uint64_t v280 = sub_100019E00((uint64_t)&unk_1001B66E8);
  *(void *)(v280 + sub_10000BDD4(v0 + 16) = sub_1000A0354;
  *(void *)(v280 + 24) = v268;
  sub_10005E314();
  id v345 = v271;
  uint64_t v281 = sub_1000271C4();
  sub_100059DA0(&qword_1001D5450, &qword_1001D5370);
  uint64_t v283 = v282;
  sub_1000A1588(&qword_1001D5458);
  sub_1000A1E00();
  sub_1000A28AC();
  sub_10001443C();
  uint64_t v284 = sub_1000A2694();
  sub_10007704C(v284, v285);
  uint64_t v286 = sub_100019E00((uint64_t)&unk_1001B5928);
  uint64_t v287 = sub_1000A1B44(v286);
  qword_1001D5460 = (uint64_t)&off_1001B4440;
  sub_1000A24A4(v287);
  uint64_t v288 = (uint64_t)v331;
  sub_1000A1E84();
  sub_1000A21F4();
  uint64_t v291 = v290 & ~v289;
  sub_1000A14CC();
  uint64_t v294 = swift_allocObject(&unk_1001B6710, v292, v293);
  uint64_t v295 = sub_1000A2804(v294);
  sub_1000A264C(v295, v295 + v291);
  uint64_t v296 = v346;
  *(void *)(v281 + v283) = v347;
  uint64_t v297 = (void (**)())(v281 + v264);
  *uint64_t v297 = sub_1000A1350;
  v297[1] = (void (*)())v296;
  sub_100059DA0((unint64_t *)&qword_1001D5460, &qword_1001D5378);
  sub_10005E31C();
  sub_100010D08();
  sub_1000A2090();
  Publisher<>.sink(receiveValue:)(v298, v299, v300, v301);
  sub_100011030();
  sub_10005A6D0(v268, *(uint64_t (**)(uint64_t, uint64_t))(v329 + 8));
  sub_1000A2758();
  sub_10001106C();
  sub_100088C90();
  sub_100086C64();
  swift_release();

  sub_10007705C((uint64_t)&a14);
  sub_10001443C();
  sub_10007705C((uint64_t)&a16);
  sub_1000A15AC((uint64_t)&a15);

  sub_10004D784(v288, type metadata accessor for CancellableStoreKey);
  sub_1000A22D8();
  sub_1000A1BC0(v336, *(uint64_t (**)(uint64_t, void))(v302 + 8));
  sub_10004D784((uint64_t)v348, type metadata accessor for PegasusContext);
  sub_1000A1748(type metadata accessor for SessionTokens, (uint64_t)&a12);
  sub_1000A1AA0();
  sub_100010D00();
  char v127 = v343;
LABEL_31:
  _Block_release(v127);
  sub_100009AA0();
}

void sub_10009B164( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v280 = v26;
  uint64_t v28 = v27;
  uint64_t v29 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicContext(0LL);
  uint64_t v285 = *(uint64_t **)(v29 - 8);
  uint64_t v286 = (unsigned __int8 *)v29;
  sub_100027160();
  __chkstk_darwin(v30);
  sub_100014428();
  uint64_t v261 = v31;
  uint64_t v264 = *(unsigned __int8 **)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v32);
  sub_1000A1380();
  sub_1000A1404(v33);
  __chkstk_darwin(v34);
  uint64_t v281 = (uint64_t)&v253 - v35;
  sub_1000A1858((uint64_t)&a15);
  __chkstk_darwin(v36);
  sub_10005A2F8();
  uint64_t v279 = v37;
  uint64_t v38 = sub_1000A1638();
  uint64_t v277 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest(v38);
  uint64_t v270 = *(void (**)(void, void))(v277 - 8);
  sub_100027160();
  __chkstk_darwin(v39);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v40);
  sub_10005A2F8();
  uint64_t v278 = v41;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v42);
  sub_100014428();
  uint64_t v267 = v43;
  uint64_t v274 = sub_1000A27AC();
  uint64_t v273 = *(void *)(v274 - 8);
  sub_100027160();
  __chkstk_darwin(v44);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v45);
  sub_10007732C((uint64_t)&v253 - v46);
  sub_10000941C(&qword_1001D54E8);
  sub_100027160();
  __chkstk_darwin(v47);
  uint64_t v49 = (char *)&v253 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v275 = (void *)type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse(0LL);
  uint64_t v269 = *(v275 - 1);
  sub_100027160();
  __chkstk_darwin(v50);
  sub_10007732C((uint64_t)&v253 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v52);
  uint64_t v284 = sub_10006B428();
  uint64_t v282 = *(void *)(v284 - 8);
  sub_1000A157C();
  __chkstk_darwin(v53);
  sub_1000A1380();
  sub_10007732C(v54);
  sub_1000A1858((uint64_t)&v293);
  __chkstk_darwin(v55);
  uint64_t v283 = (char *)&v253 - v56;
  sub_100019F9C();
  sub_100027160();
  __chkstk_darwin(v57);
  sub_100009AEC();
  uint64_t v60 = v59 - v58;
  uint64_t v288 = sub_100009ACC((uint64_t)&unk_1001B6738, 24LL);
  *(void *)(v288 + sub_10000BDD4(v0 + 16) = v23;
  uint64_t v61 = *(void **)(v25 + 56);
  _Block_copy(v23);
  sub_1000A14AC();
  uint64_t v62 = sub_1000A2768( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  sub_1000A14E4(v62, "queryId");
  uint64_t v63 = sub_1000A15B4();
  sub_1000773F4(v63);
  uint64_t v289 = sub_1000A1474(v61, 3, v60);
  uint64_t p_ivar_lyt = (uint64_t)&SessionEnumerator.ivar_lyt;
  id v287 = [objc_allocWithZone(PARReply) init];
  id v65 = sub_1000A14E4((uint64_t)v287, "queryTopicContexts");
  uint64_t v276 = sub_100009B34((uint64_t)v65, &qword_1001D54F0, &OBJC_CLASS___PARQueryTopicContext_ptr);
  uint64_t v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v276);

  if ((unint64_t)v66 >> 62)
  {
    if (v66 < 0) {
      uint64_t v251 = v66;
    }
    else {
      uint64_t v251 = v66 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_100047294();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter(v251);
    sub_100009B3C();
  }

  else
  {
    uint64_t v67 = *(void *)((v66 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  sub_100009B3C();
  if (!v67)
  {
    if (qword_1001D0538 != -1) {
      swift_once(&qword_1001D0538, sub_100034518);
    }
    uint64_t v87 = sub_100010ED4();
    sub_100010E78(v87, (uint64_t)qword_1001EDC78);
    os_log_type_t v88 = sub_1000A1810();
    BOOL v89 = sub_100047154(v88);
    uint64_t v90 = v289;
    if (v89)
    {
      BOOL v91 = (_WORD *)sub_100009B20(2LL);
      sub_100047288(v91);
      sub_10005A550((void *)&_mh_execute_header, v92, v93, "There are no query topics. Returning an empty response");
      sub_100010C34((uint64_t)v49);
    }

    id v95 = sub_1000A14E4(v94, "queryId");
    id v96 = v287;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v95,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    *(_BYTE *)(v90 + qword_1001D2E88) = 17;
    sub_100042D10();
    sub_1000A2138();
    goto LABEL_15;
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v25 + 16);
  if (!Strong)
  {
    id v97 = sub_1000A14E4(0LL, "queryId");
    id v96 = v287;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v97,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    sub_1000A1360(qword_1001D2E88);
    sub_1000A2138();
LABEL_15:
    swift_release();

LABEL_18:
    uint64_t v99 = v23;
    goto LABEL_19;
  }

  uint64_t v76 = Strong;
  sub_100086CFC( 1LL,  v69,  v70,  v71,  v72,  v73,  v74,  v75,  (uint64_t)v253,  (uint64_t)v254,  v255,  v256,  v257,  (uint64_t)v258,  v259,  *(void *)(v25 + 24),  v261,  v262,  v263,  (uint64_t)v264);
  if ((v77 & 1) == 0)
  {
    id v98 = sub_1000A14E4(v77, "queryId");
    id v85 = v287;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v98,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    uint64_t v86 = qword_1001D2E88;
    goto LABEL_17;
  }

  sub_1000A2768((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v78 = sub_1000A197C();
  uint64_t v79 = v284;
  uint64_t v81 = sub_10005A148(v78, v80, v284);
  if (v82)
  {
    sub_1000A1878(v81, (uint64_t *)&unk_1001D5D20);
    id v84 = sub_1000A14E4(v83, "queryId");
    id v85 = v287;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v84,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    uint64_t v86 = qword_1001D2E88;
LABEL_17:
    sub_1000A1360(v86);
    sub_1000A2138();
    sub_10001683C();

    sub_100077454();
    goto LABEL_18;
  }

  uint64_t v259 = v76;
  uint64_t v100 = v282;
  uint64_t v101 = v283;
  sub_1000A22A0(*(uint64_t (**)(void))(v282 + 32));
  sub_100082FD4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (void (*)(uint64_t))sub_1000C1614);
  if (!v102)
  {
    id v115 = sub_1000A14E4(0LL, "queryId");
    id v116 = v287;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v115,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    sub_1000A1360(qword_1001D2E88);

    sub_10001683C();
    sub_10007705C((uint64_t)&v290);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v79);
LABEL_54:
    sub_1000A2138();
    goto LABEL_18;
  }

  id v258 = v102;
  uint64_t v256 = *(void *)(v25 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker);
  id v103 = *(os_unfair_lock_s **)(v256 + 16);
  sub_10005E314();
  os_unfair_lock_lock(v103);
  uint64_t v104 = *(void **)(v25 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy);
  if (v104)
  {
    uint64_t v105 = sub_10000C4AC();
    dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()(v105);
    sub_10001683C();
  }

  os_unfair_lock_unlock(v103);
  uint64_t v106 = sub_100011030();
  id v107 = sub_1000A14E4(v106, "queryTopicContexts");
  uint64_t v108 = sub_1000A2880((uint64_t)v107);

  sub_10008BDBC(v108, (uint64_t)v49);
  sub_10001450C();
  uint64_t v109 = sub_1000A2250();
  uint64_t v110 = (uint64_t)v275;
  uint64_t v112 = sub_100010708(v109, v111, (uint64_t)v275);
  uint64_t v113 = &SessionFilename;
  uint64_t v114 = v259;
  if ((_DWORD)v112 != 1)
  {
    sub_1000471F0(v268, (uint64_t)v49, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v269 + 32));
    id v117 = [objc_allocWithZone(PARReply) init];
    sub_100059F08( &qword_1001D5508,  (uint64_t (*)(uint64_t))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse);
    uint64_t v118 = 0LL;
    uint64_t v120 = Message.serializedData(partial:)(0LL, v110, v119);
    sub_1000901E4(v120, v133, v117);
    id v135 = sub_1000A14E4(v134, "queryId");
    uint64_t v101 = (char *)v117;
    sub_1000A1368( (uint64_t)v23,  (uint64_t)v135,  (uint64_t)v117,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
    uint64_t v136 = v283;
    sub_100088BB0();
    if (qword_1001D04E0 != -1) {
LABEL_79:
    }
      swift_once(&qword_1001D04E0, sub_10003438C);
    uint64_t v137 = sub_100010ED4();
    sub_100010E78(v137, (uint64_t)qword_1001EDB70);
    os_log_type_t v138 = sub_1000A1810();
    BOOL v139 = sub_100047154(v138);
    uint64_t v140 = v282;
    if (v139)
    {
      uint64_t v141 = (_WORD *)sub_100009B20(2LL);
      sub_100047288(v141);
      sub_10005A550((void *)&_mh_execute_header, v142, v143, "Returning early, all topics are in the results cache");
      sub_100010C34((uint64_t)v118);
    }

    sub_10001443C();
    sub_100077454();

    sub_1000A15AC((uint64_t)&v289);
    sub_1000A1A10(v268, *(uint64_t (**)(uint64_t, void))(v269 + 8));
    (*(void (**)(char *, uint64_t))(v140 + 8))(v136, v284);
    goto LABEL_54;
  }

  sub_1000A225C(v112, &qword_1001D54E8);
  while (1)
  {
    uint64_t v144 = sub_100010ED4();
    sub_1000093D0(v144, (uint64_t)qword_1001EDB70);
    sub_100019F54(v25);
    uint64_t v145 = v28;
    uint64_t v118 = (os_log_s *)sub_1000A2078((uint64_t)&a12);
    uint64_t v136 = (char *)static os_log_type_t.default.getter(v118);
    if (sub_1000A19C8(v118))
    {
      uint64_t v146 = sub_100009B20(22LL);
      uint64_t v275 = (void *)sub_100009B20(32LL);
      uint64_t v291 = v275;
      *(_DWORD *)uint64_t v146 = 136446466;
      uint64_t v147 = sub_1000A15C0();
      sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v149 = dispatch thunk of CustomStringConvertible.description.getter(v147, v148);
      uint64_t v294 = sub_1000A25D4(v149, v150);
      uint64_t v113 = (__objc2_class_ro *)&v295;
      sub_1000A26CC((uint64_t)&v294, (uint64_t)&v295);
      sub_100019D80(v25);
      uint64_t v151 = sub_100009B3C();
      *(_WORD *)(v146 + 12) = 2050;
      id v152 = sub_10003D808(v151, "queryId");

      uint64_t v294 = (uint64_t)v152;
      uint64_t v114 = v259;
      sub_1000A1658((uint64_t)&v294, (uint64_t)&v295);

      sub_100019F44( (void *)&_mh_execute_header,  v118,  (os_log_type_t)v136,  "Session %{public}s performing query %{public}llu",  (uint8_t *)v146);
      uint64_t v153 = (uint64_t)v275;
      sub_100030F9C((uint64_t)v275);
      sub_100010C34(v153);
      sub_100010C34(v146);
    }

    else
    {

      sub_100019D80(v25);
    }

    id v154 = *(os_unfair_lock_s **)(v256 + 16);
    sub_10005E314();
    os_unfair_lock_lock(v154);
    sub_10008BCC4(v25, &v291);
    os_unfair_lock_unlock(v154);
    uint64_t v155 = sub_100011030();
    uint64_t v275 = v291;
    if (!v291)
    {
      id v164 = sub_10003D808(v155, "queryId");
      id v165 = v287;
      sub_1000A1368( (uint64_t)v23,  (uint64_t)v164,  (uint64_t)v287,  *((uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v23 + 2));
      sub_1000A1360(qword_1001D2E88);

      sub_10001683C();
      sub_100077454();
      sub_1000A15AC((uint64_t)&v289);
      (*(void (**)(char *, uint64_t))(v282 + 8))(v283, v284);
      goto LABEL_54;
    }

    uint64_t v269 = (uint64_t)v145;
    id v156 = sub_10003D808(v155, "queryTopicContexts");
    uint64_t p_ivar_lyt = sub_1000A2880((uint64_t)v156);

    if ((unint64_t)p_ivar_lyt >> 62)
    {
      if (p_ivar_lyt < 0) {
        uint64_t v252 = p_ivar_lyt;
      }
      else {
        uint64_t v252 = p_ivar_lyt & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(p_ivar_lyt);
      uint64_t v157 = _CocoaArrayWrapper.endIndex.getter(v252);
      sub_1000325E4();
    }

    else
    {
      uint64_t v157 = *(void *)((p_ivar_lyt & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v276 = (uint64_t)v23;
    if (v157)
    {
      uint64_t v291 = _swiftEmptyArrayStorage;
      sub_1000AFAA4(0, v157 & ~(v157 >> 63), 0);
      if (v157 < 0)
      {
        __break(1u);
        goto LABEL_79;
      }

      uint64_t v113 = 0LL;
      uint64_t v28 = v291;
      uint64_t v101 = (char *)v261;
      do
      {
        if ((p_ivar_lyt & 0xC000000000000001LL) != 0) {
          id v158 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v113, p_ivar_lyt);
        }
        else {
          id v158 = *(id *)(p_ivar_lyt + 8LL * (void)v113 + 32);
        }
        id v159 = v158;
        sub_100032794();

        uint64_t v291 = v28;
        unint64_t v161 = v28[2];
        unint64_t v160 = v28[3];
        uint64_t v118 = (os_log_s *)(v161 + 1);
        if (v161 >= v160 >> 1)
        {
          sub_1000AFAA4(v160 > 1, v161 + 1, 1);
          uint64_t v28 = v291;
        }

        uint64_t v113 = (__objc2_class_ro *)((char *)v113 + 1);
        v28[2] = v118;
        sub_1000A2050();
        (*(void (**)(char *, char *))(v163 + 32))((char *)v28 + v162 + *(void *)(v163 + 72) * v161, v101);
      }

      while ((__objc2_class_ro *)v157 != v113);
      sub_1000325E4();
      uint64_t v114 = v259;
    }

    else
    {
      sub_1000325E4();
      uint64_t v28 = _swiftEmptyArrayStorage;
    }

    sub_1000A1E00();
    sub_10004A274(v166);
    uint64_t v167 = v272;
    sub_1000B5FCC(2LL, v114, v272);
    sub_10004D784((uint64_t)v118, type metadata accessor for PegasusContext);
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.init()();
    sub_1000A2204();
    uint64_t v168 = v266;
    v169(v266, v167, v274);
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.queryContext.setter(v168);
    uint64_t v170 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.topics.setter(v28);
    uint64_t v171 = UUID.init()(v170);
    UUID.init()(v171);
    [(id)v269 timeoutIntervalForRequest];
    uint64_t v23 = v283;
    if ((~*(void *)&v172 & 0x7FF0000000000000LL) == 0)
    {
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    if (v172 <= -9.22337204e18) {
      goto LABEL_76;
    }
    if (v172 < 9.22337204e18) {
      break;
    }
LABEL_77:
    __break(1u);
    swift_once(&qword_1001D04E0, sub_10003438C);
    uint64_t v121 = sub_100010ED4();
    uint64_t v122 = (void *)sub_1000093D0(v121, (uint64_t)qword_1001EDB70);
    sub_1000110C4();
    uint64_t v123 = sub_1000110C4();
    Logger.logObject.getter(v123);
    uint64_t v124 = sub_100010EC4();
    if (sub_1000A182C((os_log_s *)v122))
    {
      id v125 = (_DWORD *)sub_100009B20(12LL);
      uint64_t v254 = (void *)sub_100009B20(32LL);
      uint64_t v291 = v254;
      *id v125 = 136315138;
      uint64_t v253 = v125 + 1;
      uint64_t v101 = (char *)v125;
      uint64_t v294 = v168;
      sub_1000110C4();
      sub_10000941C(&qword_1001D2B70);
      uint64_t v255 = v157;
      uint64_t v126 = String.init<A>(describing:)(&v294);
      uint64_t v294 = sub_1000A25D4(v126, v127);
      uint64_t v114 = v259;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v294, &v295, v253);
      sub_100009B3C();
      sub_100010D88();
      sub_100010D88();
      sub_1000A26F8();
      sub_100014564(v128, v129, v130, v131, (uint8_t *)v101);
      uint64_t v132 = sub_1000A1E78((uint64_t)&v285);
      sub_100030F9C(v132);
      sub_100010C34(v124);
      sub_100010C34((uint64_t)v101);
      sub_1000A15AC((uint64_t)&v286);
    }

    else
    {

      sub_100010D88();
      sub_100010D88();
    }

    sub_100010D88();
    sub_1000A1A10(v268, *(uint64_t (**)(uint64_t, void))(v269 + 8));
    uint64_t v113 = &SessionFilename;
  }

  uint64_t v173 = (uint64_t)v172;
  uint64_t v294 = (uint64_t)v172;
  if (!(uint64_t)v172)
  {
    id v174 = [v258 zkwSearchRenderTimeout];
    if (v174)
    {
      id v175 = v174;
      uint64_t v173 = (uint64_t)[v174 integerValue];
    }

    else
    {
      uint64_t v173 = 500LL;
    }

    uint64_t v294 = v173;
  }

  uint64_t v176 = (os_log_s *)sub_1000A1834();
  os_log_type_t v181 = static os_log_type_t.info.getter(v176, v177, v178, v179, v180);
  if (sub_10003EFD0(v181))
  {
    uint64_t v182 = (uint8_t *)sub_100009B20(12LL);
    *(_DWORD *)uint64_t v182 = 134217984;
    uint64_t v291 = (void *)v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v291, &v292, v182 + 4);
    sub_100014564((void *)&_mh_execute_header, v176, (os_log_type_t)v113, "ZKW: zkwSearchRenderTimeout is %ld", v182);
    sub_100010C34((uint64_t)v182);
  }

  uint64_t v183 = (uint64_t)v275;
  uint64_t v184 = sub_10000C4AC();
  uint64_t v185 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter(v184);
  sub_10001683C();
  uint64_t v291 = (void *)v185;
  uint64_t v186 = sub_100019E00((uint64_t)&unk_1001B5928);
  uint64_t v187 = sub_1000A1B44(v186);
  *(void *)(v183 + 24) = &off_1001B4440;
  swift_unknownObjectWeakInit(v187, v280);
  uint64_t v188 = sub_100009ACC((uint64_t)&unk_1001B5860, 24LL);
  swift_weakInit(v188 + 16, v25);
  uint64_t v189 = v271;
  sub_1000A0008();
  uint64_t v190 = v282;
  uint64_t v191 = sub_100014590();
  sub_1000A1C7C(v191, v192, v193);
  uint64_t v261 = v264[80];
  uint64_t v194 = (v261 + 32) & ~v261;
  uint64_t v266 = v261 | 7;
  sub_1000A239C();
  uint64_t v268 = v195 + 7;
  unint64_t v196 = (v195 + 7 + v194) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v198 = (uint64_t *)swift_allocObject( &unk_1001B6760,  ((*(unsigned __int8 *)(v190 + 80) + v196 + 8) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80))
                    + v262,
                      v197 | *(unsigned __int8 *)(v190 + 80));
  uint64_t v199 = (unsigned __int8 *)v269;
  v198[2] = v269;
  v198[3] = v183;
  sub_1000A0040(v189, (uint64_t)v198 + v194);
  *(uint64_t *)((char *)v198 + v196) = v188;
  sub_1000A1880((uint64_t)&v288);
  uint64_t v200 = v199;
  sub_1000271C4();
  sub_1000A1588(&qword_1001D5308);
  sub_1000A1D34();
  Publisher<>.sink(receiveValue:)(v201, v202, v203, v204);
  sub_100019F70();
  swift_release();
  sub_100060FBC();
  sub_10001443C();
  uint64_t v267 = sub_10000941C((uint64_t *)&qword_1001D54F8);
  uint64_t v285 = (uint64_t *)&v253;
  uint64_t v269 = *(void *)(v267 - 8);
  sub_100027160();
  __chkstk_darwin(v205);
  sub_10006B61C();
  uint64_t v264 = v199;
  sub_1000A1F80();
  uint64_t v207 = v265;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 16))(v265, v278, v277);
  uint64_t v208 = sub_10006B8CC();
  sub_1000A23C4((uint64_t)&v253);
  uint64_t v210 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  sub_100009B54();
  sub_1000A14F8((uint64_t)&v294, (uint64_t)&v291);
  *uint64_t v198 = v294;
  (*(void (**)(uint64_t *, void, uint64_t))(v210 + 104))( v198,  enum case for DispatchTimeInterval.milliseconds(_:),  v208);
  uint64_t v211 = v259;
  id v212 = *(void **)(v259 + 264);
  uint64_t v213 = (void *)sub_100009ACC((uint64_t)&unk_1001B6788, 48LL);
  v213[2] = v289;
  v213[3] = v211;
  v213[4] = v260;
  v213[5] = v200;
  uint64_t v286 = v200;
  id v214 = v212;
  sub_10005E314();
  sub_1000A1E14();
  dispatch thunk of PegasusProxyForSpotlightZKW.searchResponsePublisher(forSearchRequest:withTimeout:onQueue:responseAfterTimeoutHandler:)( v207,  v198,  v214,  sub_1000A0DFC,  v213);

  sub_100010D00();
  sub_10005A6D0((uint64_t)v198, *(uint64_t (**)(uint64_t, uint64_t))(v210 + 8));
  sub_1000A1F80();
  uint64_t v270 = *(void (**)(void, void))(v215 + 8);
  v270(v207, v277);
  sub_1000A22D8();
  uint64_t v216 = sub_100019E00((uint64_t)&unk_1001B5928);
  *(void *)(v216 + 24) = &off_1001B4440;
  sub_1000A242C(v216 + 16);
  uint64_t v217 = v271;
  sub_1000A0008();
  uint64_t v218 = (v261 + 64) & ~v261;
  uint64_t v219 = v261;
  sub_1000A239C();
  uint64_t v221 = v266;
  uint64_t v222 = (void *)swift_allocObject(&unk_1001B67B0, v218 + v220, v266);
  v222[2] = v289;
  v222[3] = sub_1000A1350;
  uint64_t v223 = v286;
  v222[4] = v288;
  v222[5] = v223;
  v222[6] = v287;
  v222[7] = v216;
  sub_1000A0040(v217, (uint64_t)v222 + v218);
  uint64_t v224 = sub_100019E00((uint64_t)&unk_1001B5928);
  *(void *)(v224 + 24) = &off_1001B4440;
  sub_1000A242C(v224 + 16);
  uint64_t v225 = v217;
  sub_1000A0008();
  uint64_t v226 = (v219 + 24) & ~v219;
  unint64_t v227 = (v268 + v226) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v228 = (v227 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v229 = (v228 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v230 = (v229 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v231 = (v230 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v232 = swift_allocObject(&unk_1001B67D8, v231 + 8, v221);
  *(void *)(v232 + sub_10000BDD4(v0 + 16) = v224;
  sub_1000A0040(v225, v232 + v226);
  uint64_t v233 = v289;
  *(void *)(v232 + v227) = v289;
  char v234 = (void (**)())(v232 + v228);
  uint64_t v235 = v288;
  *char v234 = sub_1000A1350;
  v234[1] = (void (*)())v235;
  id v236 = v286;
  *(void *)(v232 + v229) = v286;
  uint64_t v237 = (void *)(v232 + v230);
  uint64_t v238 = v259;
  uint64_t v239 = v260;
  void *v237 = v259;
  v237[1] = v239;
  id v240 = v287;
  *(void *)(v232 + v23sub_10007E30C(v1, v0, 1) = v287;
  sub_100059DA0((unint64_t *)&qword_1001D5500, (uint64_t *)&qword_1001D54F8);
  uint64_t v242 = v241;
  uint64_t v243 = v236;
  sub_100019F54(v233);
  id v244 = v240;
  sub_100019F54(v235);
  id v245 = v243;
  swift_unknownObjectRetain(v238);
  id v246 = v244;
  uint64_t v247 = (uint64_t)v264;
  Publisher.sink(receiveCompletion:receiveValue:)(sub_1000A0E68, v222, sub_1000A0F24, v232, v267, v242);
  sub_1000A1790();
  sub_100019F70();
  sub_100009BC8(v247, *(uint64_t (**)(uint64_t, uint64_t))(v269 + 8));
  uint64_t v248 = v279;
  sub_100060FBC();

  swift_release();
  sub_100011030();
  sub_10007725C();
  sub_100010D00();
  sub_1000A15AC((uint64_t)&v289);
  sub_1000A2264(v281);
  sub_1000A2264(v248);
  sub_1000A1F80();
  v249();
  sub_1000A1E3C();
  v250(v272, v274);
  (*(void (**)(char *, uint64_t))(v282 + 8))(v283, v284);
  sub_10001106C();
  uint64_t v99 = (const void *)v276;
LABEL_19:
  _Block_release(v99);
  sub_100009AA0();
}

void sub_10009C66C()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  id v47 = v4;
  sub_10000941C((uint64_t *)&unk_1001D0BD0);
  sub_100027160();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F9C();
  sub_100027160();
  __chkstk_darwin(v8);
  sub_100009B54();
  uint64_t v9 = sub_100009ACC((uint64_t)&unk_1001B6800, 24LL);
  *(void *)(v9 + sub_10000BDD4(v0 + 16) = v1;
  uint64_t v10 = *(void **)(v3 + 56);
  sub_1000A2344();
  sub_1000272E4();
  sub_1000A2768((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_1000C16A8);
  uint64_t v11 = sub_1000A166C();
  sub_1000773F4(v11);
  uint64_t v12 = sub_1000A1D40(v10);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (!Strong)
  {
    sub_1000A1354( v1,  (uint64_t)[v47 queryId],  *(uint64_t (**)(uint64_t, uint64_t, void, void))(v1 + 16));
    sub_1000A2440(qword_1001D2E88);
    sub_1000110B0();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }

  uint64_t v14 = Strong;
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy);
  if (v15)
  {
    uint64_t v46 = *(void *)(v3 + 24);
    uint64_t v16 = qword_1001D04B0;
    sub_1000A1738();
    if (v16 != -1) {
      swift_once(&qword_1001D04B0, sub_1000342AC);
    }
    uint64_t v17 = sub_100010ED4();
    uint64_t v18 = (os_log_s *)sub_1000093D0(v17, (uint64_t)qword_1001EDAE0);
    uint64_t v19 = sub_100019F54(v3);
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_10006B8B0();
    int v45 = v20;
    if (os_log_type_enabled(v18, v20))
    {
      uint64_t v43 = v18;
      uint64_t v21 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v22 = sub_100009B20(32LL);
      uint64_t v42 = v22;
      uint64_t v44 = v15;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v48 = v22;
      uint64_t v40 = v21 + 4;
      uint64_t v41 = v21;
      sub_1000A15C0();
      sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v24 = sub_1000A27CC(v23);
      uint64_t v26 = sub_100019E0C(v24, v25);
      uint64_t v27 = sub_10006B808(v26);
      uint64_t v15 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, v28, v40);
      sub_100019D80(v3);
      sub_100009B3C();
      uint64_t v29 = v43;
      uint64_t v30 = v41;
      sub_100014564( (void *)&_mh_execute_header,  v43,  (os_log_type_t)v45,  "Session %{public}s performing safari summarization prefetch",  v41);
      uint64_t v31 = v42;
      sub_100030F9C(v42);
      sub_100010C34(v31);
      sub_100010C34((uint64_t)v30);
    }

    else
    {

      uint64_t v32 = sub_100019D80(v3);
    }

    static TaskPriority.userInitiated.getter(v32);
    uint64_t v33 = type metadata accessor for TaskPriority(0LL);
    sub_1000A1B3C((uint64_t)v7, 0LL, v34, v33);
    uint64_t v35 = (void *)sub_100009ACC((uint64_t)&unk_1001B6828, 96LL);
    void v35[2] = 0LL;
    v35[3] = 0LL;
    id v36 = v47;
    v35[4] = v47;
    v35[5] = v15;
    v35[6] = v12;
    v35[7] = sub_1000A1350;
    v35[8] = v9;
    v35[9] = v14;
    uint64_t v35[10] = v46;
    v35[11] = v3;
    sub_1000A1738();
    sub_10005E314();
    id v37 = v36;
    sub_1000272E4();
    sub_10004EC38();
    uint64_t v38 = swift_unknownObjectRetain(v14);
    sub_1000A2654(v38, (uint64_t)&unk_1001D5548);
    sub_100019F70();
    sub_10001106C();
    sub_10007725C();
    uint64_t v39 = sub_10001683C();
    sub_1000A1878(v39, (uint64_t *)&unk_1001D0BD0);
    goto LABEL_11;
  }

  sub_1000A1354(v1, 0LL, *(uint64_t (**)(uint64_t, uint64_t, void, void))(v1 + 16));
  sub_1000A2440(qword_1001D2E88);
  sub_1000110B0();
  sub_10001106C();
  sub_10007725C();
LABEL_12:
  sub_1000A1F34();
  sub_100009AA0();
}

void sub_10009C9E0()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  sub_10000941C((uint64_t *)&unk_1001D0BD0);
  sub_100027160();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100019F9C();
  sub_100027160();
  __chkstk_darwin(v9);
  sub_100009B54();
  uint64_t v10 = sub_100009ACC((uint64_t)&unk_1001B6850, 24LL);
  *(void *)(v10 + sub_10000BDD4(v0 + 16) = v1;
  uint64_t v11 = *(void **)(v3 + 56);
  sub_1000A2344();
  sub_10005E314();
  sub_1000A2760((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_1000C16A8);
  uint64_t v12 = sub_1000A166C();
  sub_1000773F4(v12);
  uint64_t v13 = sub_1000A1D40(v11);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (!Strong)
  {
    id v39 = sub_10005A6E0(0LL, "queryId");
    sub_1000A1354(v1, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, void, void))(v1 + 16));
    sub_1000A23F8(qword_1001D2E88);
    sub_1000110B0();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }

  uint64_t v15 = Strong;
  uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy);
  if (v16)
  {
    uint64_t v53 = *(void *)(v3 + 24);
    uint64_t v17 = (os_log_s *)qword_1001D04B0;
    sub_1000A1738();
    if (v17 != (os_log_s *)-1LL) {
      swift_once(&qword_1001D04B0, sub_1000342AC);
    }
    uint64_t v18 = sub_100010ED4();
    sub_1000A15F8(v18, (uint64_t)qword_1001EDAE0);
    uint64_t v19 = sub_100019F54(v3);
    Logger.logObject.getter(v19);
    os_log_type_t v20 = sub_10006B8B0();
    int v52 = v20;
    if (os_log_type_enabled(v17, v20))
    {
      uint64_t v50 = v17;
      uint64_t v21 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v22 = sub_100009B20(32LL);
      uint64_t v49 = v22;
      uint64_t v51 = v16;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v54 = v22;
      id v47 = v21 + 4;
      uint64_t v48 = v21;
      uint64_t v23 = v10;
      uint64_t v24 = v8;
      unint64_t v25 = v5;
      uint64_t v26 = sub_1000A15C0();
      sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v28 = v27;
      uint64_t v29 = v26;
      uint64_t v5 = v25;
      uint64_t v8 = v24;
      uint64_t v10 = v23;
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v29, v28);
      uint64_t v32 = sub_100019E0C(v30, v31);
      uint64_t v33 = sub_10006B808(v32);
      uint64_t v16 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34, v47);
      sub_100019D80(v3);
      sub_100009B3C();
      uint64_t v35 = v50;
      id v36 = v48;
      sub_100014564( (void *)&_mh_execute_header,  v50,  (os_log_type_t)v52,  "Session %{public}s performing safari summarization summarize",  v48);
      uint64_t v37 = v49;
      sub_100030F9C(v49);
      sub_100010C34(v37);
      sub_100010C34((uint64_t)v36);
    }

    else
    {

      uint64_t v38 = sub_100019D80(v3);
    }

    static TaskPriority.high.getter(v38);
    uint64_t v40 = type metadata accessor for TaskPriority(0LL);
    sub_1000A1B3C((uint64_t)v8, 0LL, v41, v40);
    uint64_t v42 = (void *)sub_100009ACC((uint64_t)&unk_1001B6878, 88LL);
    v42[2] = 0LL;
    v42[3] = 0LL;
    v42[4] = v16;
    v42[5] = v5;
    v42[6] = v13;
    v42[7] = sub_1000A1350;
    v42[8] = v10;
    v42[9] = v15;
    v42[10] = v53;
    sub_1000A1738();
    id v43 = v5;
    sub_10005E314();
    sub_10004EC38();
    uint64_t v44 = sub_1000A1E14();
    sub_1000A2654(v44, (uint64_t)&unk_1001D55B0);
    sub_100019F70();
    sub_100011030();
    sub_10005A910();
    uint64_t v45 = sub_10001683C();
    sub_1000A1878(v45, (uint64_t *)&unk_1001D0BD0);
    goto LABEL_11;
  }

  sub_1000A1354(v1, 0LL, *(uint64_t (**)(uint64_t, uint64_t, void, void))(v1 + 16));
  sub_1000A23F8(qword_1001D2E88);
  sub_1000110B0();
  sub_100011030();
  sub_10005A910();
LABEL_12:
  sub_1000A1F34();
  sub_100009AA0();
}

void sub_10009CD60( void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void, void, void, void))
{
  uint64_t v78 = a7;
  uint64_t v70 = a6;
  uint64_t v72 = a3;
  uint64_t v73 = a5;
  uint64_t v74 = a2;
  uint64_t v75 = a4;
  uint64_t v11 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = type metadata accessor for UserAgent(0LL);
  uint64_t v69 = *(void *)(v71 - 8);
  uint64_t v14 = *(void *)(v69 + 64);
  __chkstk_darwin(v71);
  uint64_t v68 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for CancellableStoreKey(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v15);
  __chkstk_darwin(v18);
  os_log_type_t v20 = (char *)&v62 - v19;
  uint64_t v77 = swift_allocObject(&unk_1001B64E0, 24LL, 7LL);
  *(void *)(v77 + sub_10000BDD4(v0 + 16) = a9;
  uint64_t v21 = a8;
  uint64_t v22 = *(void *)(a8 + OBJC_IVAR____TtC7parsecd11ClientState_lookupSearchProxy);
  _Block_copy(a9);
  if (v22)
  {
    swift_retain(v22);
    id v62 = a1;
    id v23 = [a1 queryString];
    uint64_t v66 = v13;
    uint64_t v67 = a9;
    id v24 = v23;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    uint64_t v64 = v25;

    id v65 = v20;
    UUID.init()(v26);
    uint64_t v27 = swift_retain(v22);
    uint64_t v28 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter(v27);
    swift_release();
    uint64_t v79 = v28;
    uint64_t v63 = swift_allocObject(&unk_1001B5860, 24LL, 7LL);
    swift_weakInit(v63 + 16, v21);
    uint64_t v29 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    sub_1000A0008();
    unint64_t v31 = v68;
    uint64_t v30 = v69;
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
    uint64_t v33 = v70;
    uint64_t v70 = v22;
    uint64_t v34 = v71;
    v32(v68, v33, v71);
    uint64_t v35 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v36 = (v35 + 56) & ~v35;
    unint64_t v37 = (v17 + v36 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v38 = *(unsigned __int8 *)(v30 + 80);
    uint64_t v39 = (v38 + v37 + 8) & ~v38;
    uint64_t v40 = (char *)swift_allocObject(&unk_1001B6508, v39 + v14, v35 | v38 | 7);
    uint64_t v41 = v76;
    *((void *)v40 + 2) = a1;
    *((void *)v40 + 3) = v41;
    uint64_t v42 = v64;
    id v43 = v72;
    *((void *)v40 + 4) = v64;
    *((void *)v40 + 5) = v43;
    *((void *)v40 + 6) = &off_1001B4440;
    sub_1000A0040((uint64_t)v29, (uint64_t)&v40[v36]);
    *(void *)&v40[v37] = v63;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v40[v39], v31, v34);
    id v44 = v62;
    uint64_t v45 = v42;
    swift_bridgeObjectRetain(v42);
    id v46 = v43;
    uint64_t v47 = sub_10000941C(&qword_1001D5300);
    sub_100059DA0(&qword_1001D5308, &qword_1001D5300);
    Publisher<>.sink(receiveValue:)(sub_1000A08D8, v40, v47, v48);
    swift_release();
    swift_release();
    uint64_t v49 = (uint64_t)v65;
    sub_100060FBC();
    uint64_t v50 = swift_release();
    uint64_t v51 = (uint64_t)v66;
    static TaskPriority.userInitiated.getter(v50);
    uint64_t v52 = type metadata accessor for TaskPriority(0LL);
    sub_100009654(v51, 0LL, 1LL, v52);
    uint64_t v53 = (void *)swift_allocObject(&unk_1001B6530, 112LL, 7LL);
    v53[2] = 0LL;
    v53[3] = 0LL;
    uint64_t v54 = v75;
    uint64_t v55 = v73;
    v53[4] = v75;
    v53[5] = v55;
    uint64_t v56 = v76;
    uint64_t v57 = v77;
    v53[6] = v44;
    v53[7] = v56;
    uint64_t v58 = v74;
    v53[8] = v45;
    v53[9] = v58;
    uint64_t v59 = v70;
    uint64_t v60 = v78;
    v53[10] = v70;
    v53[11] = v60;
    v53[12] = sub_1000A1350;
    v53[13] = v57;
    swift_retain(v59);
    id v61 = v44;
    swift_unknownObjectRetain(v54);
    swift_retain(v60);
    swift_retain(v57);
    sub_1000C06B4(v51, (uint64_t)&unk_1001D54D0, (uint64_t)v53);
    swift_release();
    swift_release();
    sub_100019C1C(v51, (uint64_t *)&unk_1001D0BD0);
    sub_10004D784(v49, type metadata accessor for CancellableStoreKey);
    swift_release();
    _Block_release(v67);
  }

  else
  {
    ((void (**)(void, id, void, void))a9)[2](a9, [a1 queryId], 0, 0);
    *(_BYTE *)(v78 + qword_1001D2E88) = 42;
    sub_100042D10();
    swift_release();
    _Block_release(a9);
  }

void sub_10009D214( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, void (**a9)(void, void, void, void))
{
  id v128 = a7;
  uint64_t v129 = a6;
  uint64_t v139 = a5;
  uint64_t v122 = a4;
  uint64_t v121 = a3;
  uint64_t v119 = a2;
  id v138 = a1;
  uint64_t v145 = type metadata accessor for URLRequest(0LL);
  uint64_t v136 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v135 = v10;
  uint64_t v143 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v11);
  uint64_t v146 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v149 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest(0LL);
  uint64_t v144 = *(void *)(v149 - 8);
  uint64_t v13 = __chkstk_darwin(v149);
  uint64_t v140 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = v14;
  __chkstk_darwin(v13);
  uint64_t v142 = (char *)&v112 - v15;
  uint64_t v16 = type metadata accessor for Apple_Parsec_Search_PegasusSearchQuery(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v141 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for UserAgent(0LL);
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v124 = v19;
  id v125 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for CancellableStoreKey(0LL);
  uint64_t v120 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v120 + 64);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v123 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v148 = (uint64_t)&v112 - v23;
  uint64_t v24 = type metadata accessor for PegasusContext(0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
  uint64_t v133 = *(void *)(Context - 8);
  uint64_t v134 = Context;
  __chkstk_darwin(Context);
  uint64_t v147 = (uint64_t)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariQueryContext(0LL);
  uint64_t v131 = *(void *)(v29 - 8);
  uint64_t v132 = v29;
  __chkstk_darwin(v29);
  unint64_t v31 = (char *)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_10000941C(&qword_1001D5480);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = swift_allocObject(&unk_1001B5BF8, 24LL, 7LL);
  *(void *)(v35 + sub_10000BDD4(v0 + 16) = a9;
  uint64_t v36 = *(void **)(a8 + OBJC_IVAR____TtC7parsecd11ClientState_safariSearchProxy);
  if (!v36)
  {
    _Block_copy(a9);
    ((void (**)(void, id, void, void))a9)[2](a9, [v138 queryId], 0, 0);
    *(_BYTE *)(v139 + qword_1001D2E88) = 42;
    sub_100042D10();
    swift_release();
    _Block_release(a9);
    return;
  }

  uint64_t v37 = a8;
  uint64_t v115 = v35;
  uint64_t v116 = v17;
  uint64_t v117 = v16;
  uint64_t v118 = a9;
  uint64_t v38 = v36;
  _Block_copy(a9);
  swift_retain(v38);
  id v39 = v138;
  sub_100056BC8(v39, (uint64_t)v34);
  id v40 = [v39 triggerEvent];
  if (v40 == (id)21) {
    uint64_t v41 = 0x706F7468746977LL;
  }
  else {
    uint64_t v41 = 0LL;
  }
  if (v40 == (id)21) {
    unint64_t v42 = 0xE700000000000000LL;
  }
  else {
    unint64_t v42 = 0xE000000000000000LL;
  }
  unint64_t v43 = 0xE000000000000000LL;
  sub_100090158(v39, (SEL *)&selRef_previouslyEngagedQuery);
  if (v45) {
    unint64_t v43 = v45;
  }
  else {
    uint64_t v44 = 0LL;
  }
  uint64_t v137 = v31;
  uint64_t v114 = v34;
  dispatch thunk of PegasusProxyForSafariSearch.createSafariQueryContext(previousQuery:suggestQuery:localCompletions:)( v44,  v43,  v41,  v42,  v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v46 = v121;
  sub_10004A274((uint64_t)v26);
  sub_1000B5FCC(1LL, v46, v147);
  sub_10004D784((uint64_t)v26, type metadata accessor for PegasusContext);
  id v113 = v39;
  id v47 = [v39 scale];
  *(float *)&double v48 = v48;
  Apple_Parsec_Search_PegasusQueryContext.uiScale.setter(v47, *(float *)&v48);
  sub_100090158(v39, (SEL *)&selRef_keyboardInputMode);
  if (!v50)
  {
    uint64_t v49 = 0LL;
    unint64_t v50 = 0xE000000000000000LL;
  }

  uint64_t v51 = Apple_Parsec_Search_PegasusQueryContext.keyboardIme.setter(v49, v50);
  UUID.init()(v51);
  uint64_t v52 = swift_retain(v38);
  uint64_t v53 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter(v52);
  id v138 = v38;
  swift_release();
  uint64_t v150 = v53;
  uint64_t v121 = swift_allocObject(&unk_1001B5860, 24LL, 7LL);
  uint64_t v122 = v37;
  swift_weakInit(v121 + 16, v37);
  uint64_t v54 = (uint64_t)v123;
  sub_1000A0008();
  uint64_t v55 = v126;
  uint64_t v56 = v125;
  uint64_t v57 = v127;
  (*(void (**)(char *, id, uint64_t))(v126 + 16))(v125, v128, v127);
  uint64_t v58 = *(unsigned __int8 *)(v120 + 80);
  uint64_t v59 = (v58 + 40) & ~v58;
  unint64_t v60 = (v21 + v59 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v61 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v62 = (v61 + v60 + 8) & ~v61;
  uint64_t v63 = (char *)swift_allocObject(&unk_1001B5C20, v62 + v124, v58 | v61 | 7);
  uint64_t v64 = v113;
  id v65 = v129;
  *((void *)v63 + 2) = v113;
  *((void *)v63 + 3) = v65;
  *((void *)v63 + 4) = &off_1001B4440;
  sub_1000A0040(v54, (uint64_t)&v63[v59]);
  *(void *)&v63[v60] = v121;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v63[v62], v56, v57);
  id v66 = v64;
  v65;
  uint64_t v67 = sub_10000941C(&qword_1001D5300);
  sub_100059DA0(&qword_1001D5308, &qword_1001D5300);
  Publisher<>.sink(receiveValue:)(sub_1000A03FC, v63, v67, v68);
  swift_release();
  swift_release();
  sub_100060FBC();
  swift_release();
  id v69 = [v66 queryCommand];
  uint64_t v70 = v147;
  id v128 = v66;
  if (v69)
  {
    uint64_t v71 = v69;
    uint64_t v72 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
    uint64_t v73 = swift_dynamicCastObjCClass(v71, v72);
    if (v73)
    {
      uint64_t v74 = (void *)v73;
      id v75 = v71;
      uint64_t v76 = &selRef_tokenString;
      goto LABEL_19;
    }

    uint64_t v77 = objc_opt_self(&OBJC_CLASS___SFUpdateSearchQueryCommand);
    uint64_t v78 = swift_dynamicCastObjCClass(v71, v77);
    if (v78)
    {
      uint64_t v74 = (void *)v78;
      id v75 = v71;
      uint64_t v76 = &selRef_searchString;
LABEL_19:
      sub_100090158(v74, (SEL *)v76);
      uint64_t v80 = v79;
      unint64_t v82 = v81;

      if (v82)
      {
        unint64_t v83 = v82;
      }

      else
      {
        uint64_t v80 = 0LL;
        unint64_t v83 = 0xE000000000000000LL;
      }

      goto LABEL_24;
    }
  }

  id v84 = [v66 queryString];
  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
  unint64_t v83 = v85;

LABEL_24:
  uint64_t v86 = v119;
  uint64_t v87 = v137;
  uint64_t v127 = v80;
  uint64_t v129 = (void *)v83;
  os_log_type_t v88 = v141;
  Apple_Parsec_Search_PegasusSearchQuery.init()();
  swift_bridgeObjectRetain(v83);
  Apple_Parsec_Search_PegasusSearchQuery.query.setter(v80, v83);
  BOOL v89 = v142;
  uint64_t v90 = dispatch thunk of PegasusProxyForSafariSearch.createRequest(_:context:safariContext:)(v88, v70, v87);
  uint64_t v91 = v146;
  static TaskPriority.userInitiated.getter(v90);
  uint64_t v92 = type metadata accessor for TaskPriority(0LL);
  sub_100009654(v91, 0LL, 1LL, v92);
  uint64_t v93 = v144;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v140, v89, v149);
  uint64_t v94 = v136;
  (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v143, v86, v145);
  uint64_t v95 = *(unsigned __int8 *)(v93 + 80);
  uint64_t v96 = (v95 + 64) & ~v95;
  unint64_t v97 = (v130 + v96 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v98 = (v97 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v99 = *(unsigned __int8 *)(v94 + 80);
  uint64_t v100 = (v99 + v98 + 16) & ~v99;
  unint64_t v101 = (v135 + v100 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v102 = (char *)swift_allocObject(&unk_1001B5C48, v101 + 8, v95 | v99 | 7);
  *((void *)v102 + 2) = 0LL;
  *((void *)v102 + 3) = 0LL;
  id v103 = v128;
  uint64_t v104 = v127;
  *((void *)v102 + 4) = v128;
  *((void *)v102 + 5) = v104;
  id v105 = v138;
  *((void *)v102 + 6) = v129;
  *((void *)v102 + 7) = v105;
  (*(void (**)(char *, char *, uint64_t))(v93 + 32))(&v102[v96], v140, v149);
  uint64_t v106 = v139;
  *(void *)&v102[v97] = v139;
  id v107 = (void (**)())&v102[v98];
  uint64_t v108 = (void (*)())v115;
  *id v107 = sub_1000A1350;
  v107[1] = v108;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v102[v100], v143, v145);
  uint64_t v109 = v122;
  *(void *)&v102[v101] = v122;
  swift_retain(v105);
  id v110 = v103;
  swift_retain(v106);
  swift_retain(v108);
  swift_retain(v109);
  uint64_t v111 = v146;
  sub_1000C06B4(v146, (uint64_t)&unk_1001D5490, (uint64_t)v102);
  swift_release();
  swift_release();
  sub_100019C1C(v111, (uint64_t *)&unk_1001D0BD0);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v142, v149);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v141, v117);
  sub_10004D784(v148, type metadata accessor for CancellableStoreKey);
  (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v147, v134);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v137, v132);
  sub_100019C1C((uint64_t)v114, &qword_1001D5480);
  swift_release();
  _Block_release(v118);
}

void sub_10009DC74( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a19 = v23;
  a20 = v24;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  unint64_t v227 = v29;
  id v248 = v30;
  uint64_t v226 = *(void *)(sub_1000A13CC() - 8);
  sub_1000A157C();
  __chkstk_darwin(v31);
  sub_1000A1380();
  sub_1000A1404(v32);
  __chkstk_darwin(v33);
  uint64_t v233 = (uint64_t)&v218 - v34;
  sub_1000A1858((uint64_t)&a14);
  __chkstk_darwin(v35);
  sub_10005A2F8();
  uint64_t v232 = v36;
  uint64_t v37 = sub_1000A1638();
  type metadata accessor for JSONDecodingOptions(v37);
  sub_100027160();
  __chkstk_darwin(v38);
  sub_100014428();
  sub_10007732C(v39);
  sub_10000941C(&qword_1001D52F0);
  sub_100027160();
  __chkstk_darwin(v40);
  unint64_t v231 = (char *)&v218 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = sub_1000A1638();
  uint64_t v234 = type metadata accessor for Searchfoundation_DrillDownMetadata(v42);
  uint64_t v229 = *(void *)(v234 - 8);
  sub_100027160();
  __chkstk_darwin(v43);
  sub_100077030();
  __chkstk_darwin(v44);
  uint64_t v239 = (uint64_t)&v218 - v45;
  sub_1000A1510();
  sub_100027160();
  __chkstk_darwin(v46);
  uint64_t v238 = (char *)&v218 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A27AC();
  sub_100027160();
  __chkstk_darwin(v48);
  uint64_t v237 = (char *)&v218 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = sub_1000A1638();
  uint64_t v51 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest(v50);
  uint64_t v235 = *(void *)(v51 - 8);
  uint64_t v236 = v51;
  sub_100027160();
  __chkstk_darwin(v52);
  sub_100014428();
  id v240 = v53;
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100027160();
  __chkstk_darwin(v54);
  uint64_t v246 = sub_10006B428();
  uint64_t v242 = *(void *)(v246 - 8);
  sub_1000A157C();
  __chkstk_darwin(v55);
  sub_1000A1380();
  sub_10007732C(v56);
  sub_1000A1858((uint64_t)&a9);
  __chkstk_darwin(v57);
  uint64_t v241 = (uint64_t)&v218 - v58;
  uint64_t v59 = sub_1000A1638();
  uint64_t v60 = type metadata accessor for PegasusClientName(v59);
  sub_100009B84();
  __chkstk_darwin(v61);
  sub_10006B61C();
  uint64_t v62 = sub_100019F9C();
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = __chkstk_darwin(v62);
  id v66 = (char *)&v218 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v64);
  sub_1000A1C54();
  uint64_t v244 = sub_100009ACC((uint64_t)&unk_1001B58D8, 24LL);
  id v245 = (uint64_t (**)(uint64_t, uint64_t, void, void))v26;
  *(void *)(v244 + sub_10000BDD4(v0 + 16) = v26;
  sub_1000A1B50();
  uint64_t v67 = sub_1000A267C( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  Client.type.getter(v67);
  uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 8);
  uint64_t v247 = v62;
  uint64_t v243 = v68;
  v68((uint64_t)v66, v62);
  uint64_t v69 = sub_10006B664();
  uint64_t v70 = ClientType.rawValue.getter(4LL);
  uint64_t v249 = v21;
  if (v69 == v70)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))( v22,  enum case for PegasusClientName.LookupSearch(_:),  v60);
    Client.init(_:)(v22);
  }

  else
  {
    sub_1000A267C((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_1000C16A8);
  }

  uint64_t v71 = *(void **)(v28 + 56);
  sub_1000A19B8((uint64_t)v66, v249, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 16));
  uint64_t v72 = sub_10000C4AC();
  id v73 = sub_100047258(v72, "queryId");
  uint64_t v74 = sub_1000A166C();
  sub_1000773F4(v74);
  uint64_t v75 = sub_100041728(v71, 18, (uint64_t)v66, (unint64_t)v73, 0);
  sub_1000A267C((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_1000C1650);
  uint64_t v76 = sub_1000A197C();
  uint64_t v78 = sub_10005A148(v76, v77, v246);
  if (!v79)
  {
    uint64_t v84 = v241;
    uint64_t v83 = v242;
    unint64_t v85 = *(void (**)(uint64_t))(v242 + 32);
    uint64_t v86 = sub_10005A464();
    v85(v86);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v28 + 16);
    if (!Strong)
    {
      id v114 = [v248 queryId];
      unint64_t v82 = v245;
      sub_1000A1354((uint64_t)v245, (uint64_t)v114, v245[2]);
      sub_1000A15EC(qword_1001D2E88);
      sub_1000A1790();
      uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t))(v83 + 8);
      uint64_t v116 = v84;
LABEL_32:
      sub_10005A6D0(v116, v115);
      goto LABEL_33;
    }

    id v88 = (id)Strong;
    uint64_t v220 = v85;
    sub_1000A23C4(*(void *)(v28 + 24));
    BOOL v89 = *(os_unfair_lock_s **)(*(void *)(v28 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker) + 16LL);
    sub_1000272E4();
    os_unfair_lock_lock(v89);
    uint64_t v90 = OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy;
    if (*(void *)(v28 + OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy))
    {
      uint64_t v91 = sub_10000C4AC();
      dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()(v91);
      sub_10001683C();
    }

    os_unfair_lock_unlock(v89);
    sub_10001106C();
    if (qword_1001D04B8 != -1) {
      swift_once(&qword_1001D04B8, sub_1000342D4);
    }
    uint64_t v92 = sub_100010ED4();
    sub_1000A15F8(v92, (uint64_t)qword_1001EDAF8);
    id v93 = v248;
    sub_100019F54(v28);
    id v94 = v93;
    uint64_t v95 = (os_log_s *)sub_1000A2078((uint64_t)&v251);
    os_log_type_t v96 = static os_log_type_t.default.getter(v95);
    LODWORD(v248) = v96;
    BOOL v97 = os_log_type_enabled(v95, v96);
    uint64_t v223 = v75;
    if (v97)
    {
      uint64_t v98 = sub_100009B20(32LL);
      uint64_t v218 = sub_100009B20(64LL);
      uint64_t v251 = v218;
      *(_DWORD *)uint64_t v98 = 136446723;
      uint64_t v99 = sub_1000A15C0();
      uint64_t v219 = v90;
      uint64_t v100 = v94;
      uint64_t v101 = v99;
      sub_100059F08(&qword_1001D5280, (uint64_t (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter(v101, v102);
      uint64_t v250 = sub_1000307E0(v103, v104, &v251);
      sub_1000A1DB8((uint64_t)&v250, (uint64_t)&v251);
      sub_100019D80(v28);
      uint64_t v105 = sub_1000325E4();
      *(_WORD *)(v98 + 12) = 2050;
      id v106 = sub_100032C5C(v105, "queryId");

      uint64_t v250 = (uint64_t)v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v98 + 14);

      *(_WORD *)(v98 + 22) = 2085;
      id v108 = sub_100032C5C(v107, "queryCommand");
      uint64_t v250 = (uint64_t)v108;
      uint64_t v109 = sub_10000941C(&qword_1001D5320);
      uint64_t v110 = Optional.debugDescription.getter(v109);

      uint64_t v250 = sub_1000A1E90(v110, v111, &v251);
      id v94 = v100;
      uint64_t v90 = v219;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v98 + 24);

      sub_10005A1BC();
      sub_1000A1B74( (void *)&_mh_execute_header,  v95,  (os_log_type_t)v248,  "Session %{public}s performing engagement query %{public}llu command: %{sensitive}s",  (uint8_t *)v98);
      uint64_t v112 = v218;
      sub_10004EE00(v218);
      sub_100010C34(v112);
      sub_100010C34(v98);
    }

    else
    {

      sub_100019D80(v28);
    }

    uint64_t v117 = v242;
    uint64_t v118 = *(void *)(v28 + v90);
    uint64_t v119 = v240;
    if (v118)
    {
      uint64_t v120 = sub_1000A14AC();
      Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.init()(v120);
      uint64_t v121 = v119;
      uint64_t v122 = sub_10004A274((uint64_t)v238);
      uint64_t v123 = Client.type.getter(v122);
      uint64_t v124 = (uint64_t)v237;
      sub_1000B5FCC(v123, (uint64_t)v88, (uint64_t)v237);
      sub_1000A2588(v125, type metadata accessor for PegasusContext);
      uint64_t v126 = Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.queryContext.setter(v124);
      uint64_t v127 = (uint64_t)v94;
      uint64_t v128 = v239;
      Searchfoundation_DrillDownMetadata.init()(v126);
      uint64_t v129 = Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.requestMetadata.setter(v128);
      id v130 = sub_100032C5C(v129, "queryString");
      uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      uint64_t v133 = v132;

      id v135 = sub_100032C5C(v134, "queryCommand");
      if (v135)
      {
        uint64_t v136 = v135;
        uint64_t v237 = (char *)v131;
        uint64_t v238 = (char *)v127;
        id v248 = v133;
        uint64_t v137 = objc_opt_self(&OBJC_CLASS___SFPerformEntityQueryCommand);
        uint64_t v138 = sub_1000A27C0(v137);
        if (v138)
        {
          uint64_t v139 = (os_log_s *)v138;
          sub_1000A23BC();
          id v140 = v136;
          id v141 = sub_10006B65C((uint64_t)v140, "drilldownMetadata");
          uint64_t v142 = v117;
          if (!v141 || (sub_10009002C(v141), v143 >> 60 == 15))
          {
            sub_1000A1834();
            os_log_type_t v144 = sub_100010EC4();
            if (sub_100010DE4(v144))
            {
              uint64_t v145 = (uint8_t *)sub_100009B20(2LL);
              *(_WORD *)uint64_t v145 = 0;
              sub_10001447C( (void *)&_mh_execute_header,  v139,  (os_log_type_t)v88,  "Incomplete request: Missing drilldowndata",  v145);
              sub_100010C34((uint64_t)v145);
            }

uint64_t sub_10009EE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a6;
  uint64_t v13 = type metadata accessor for Client(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  uint64_t v18 = Client.type.getter(v17);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v14 + 8);
  v19(v16, v13);
  uint64_t v20 = ClientType.rawValue.getter(v18);
  if (v20 == ClientType.rawValue.getter(0LL))
  {
    uint64_t v21 = 7LL;
  }

  else
  {
    uint64_t v22 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
    uint64_t v21 = Client.type.getter(v22);
    v19(v16, v13);
  }

  return sub_10009F09C(a1, a2, a3, a4, a5, v25, v21, a7);
}

uint64_t sub_10009EF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v12 = type metadata accessor for Client(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
  uint64_t v17 = Client.type.getter(v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v13 + 8);
  v18(v15, v12);
  uint64_t v19 = ClientType.rawValue.getter(v17);
  if (v19 == ClientType.rawValue.getter(0LL))
  {
    uint64_t v20 = 7LL;
  }

  else
  {
    uint64_t v21 = sub_100082F80( (uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client,  (void (*)(uint64_t))sub_1000C16A8);
    uint64_t v20 = Client.type.getter(v21);
    v18(v15, v12);
  }

  return sub_10009F09C(a1, a2, a3, a4, v23, v24, v20, a7);
}

uint64_t sub_10009F09C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = a6;
  uint64_t v61 = a8;
  uint64_t v56 = a5;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v10 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v10);
  uint64_t v57 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UserAgent(0LL);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  __chkstk_darwin(v12);
  uint64_t v62 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10000941C(&qword_1001D52E0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a2, (uint64_t)v20, &qword_1001D52E0);
  if (sub_100010708((uint64_t)v20, 1LL, v21) == 1)
  {
    sub_100019C1C((uint64_t)v20, &qword_1001D52E0);
    uint64_t v25 = sub_10003D690();
    id v26 = objc_allocWithZone(&OBJC_CLASS____CPEndNetworkSearchFeedback);
    uint64_t v27 = swift_unknownObjectRetain(a1);
    id v28 = sub_10008F690(v27, v58, v59, 0.0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, v25);
    goto LABEL_10;
  }

  uint64_t v55 = a1;
  uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
  Apple_Parsec_Search_V2_SearchResponse.status.getter(v29);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v17, v14);
  if (v30 == enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.UNRECOGNIZED(_:)) {
    goto LABEL_7;
  }
  if (v30 != enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusOk(_:))
  {
    if (v30 != enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:))
    {
      if (v30 == enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusNoResults(_:))
      {
        uint64_t v54 = 0xEA00000000005354LL;
        uint64_t v31 = 0x4C555345525F4F4ELL;
        goto LABEL_9;
      }

      uint64_t v31 = 0x524F525245LL;
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      goto LABEL_8;
    }

uint64_t sub_10009F534(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  sub_100059F08(&qword_1001D5590, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_10009F5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  __int16 v8 = a2;
  char v9 = BYTE2(a2);
  char v10 = BYTE3(a2);
  char v11 = BYTE4(a2);
  uint64_t v3 = (char *)&v7 + a3;
  char v12 = BYTE5(a2);
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  sub_100059F08(&qword_1001D5590, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(&v7, v3, v4, v5);
}

void sub_10009F704()
{
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v64 = v8;
  uint64_t v10 = v9;
  type metadata accessor for SessionTokens(0LL);
  sub_100027160();
  __chkstk_darwin(v11);
  sub_10005A4F0();
  __chkstk_darwin(v12);
  sub_1000A1C64();
  *(void *)(v3 + sub_10000BDD4(v0 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(v3 + 32) = 0LL;
  uint64_t v13 = sub_10000941C(&qword_1001D52B0);
  sub_100009ACC(v13, 40LL);
  sub_10000B708(0LL, 0LL);
  *(void *)(v3 + 40) = v14;
  *(void *)(v3 + 80) = 0LL;
  sub_1000A24AC();
  *(_BYTE *)(v3 + 88) = 2;
  uint64_t v15 = type metadata accessor for SessionEndEventController();
  sub_100009ACC(v15, 40LL);
  sub_1000A9314();
  *(void *)(v3 + 136) = v16;
  *(_BYTE *)(v3 + 152) = 1;
  *(void *)(v3 + 80) = &off_1001B3A58;
  sub_1000A24C4();
  uint64_t v17 = sub_1000A2660();
  sub_100016844(v17, v1);
  sub_100010BE4(v3 + 144, (uint64_t)&v67, 33LL);
  sub_1000A2704();
  sub_1000A0008();
  uint64_t v18 = sub_10000941C(&qword_1001D52B8);
  sub_1000773F4(v18);
  uint64_t v19 = (void *)sub_10000B770(v0);
  uint64_t v20 = sub_1000A272C();
  sub_10004D784(v20, v21);
  *(void *)(v3 + 144) = v19;
  swift_endAccess(&v67);
  uint64_t v63 = v5;
  sub_1000107D0(v5, (uint64_t)&v65, (uint64_t *)&unk_1001D52C0);
  if (v66)
  {
    sub_100019BC4(&v65, (uint64_t)&v67);
  }

  else
  {
    id v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults", v5);
    uint64_t v23 = sub_10004ED84();
    uint64_t v68 = type metadata accessor for ClientSessionTimekeeper(v23);
    uint64_t v69 = &off_1001B8A40;
    uint64_t v24 = sub_10001B468(&v67);
    sub_1000CF908(v19, (uint64_t)v24);
    sub_100019C1C((uint64_t)&v65, (uint64_t *)&unk_1001D52C0);
  }

  sub_100019BC4(&v67, v3 + 96);
  uint64_t v25 = *(void **)(v10 + 240);
  *(void *)(v3 + 48) = v25;
  *(void *)(v3 + 56) = v64;
  *(void *)(v3 + 64) = v7;
  objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v26 = v25;
  uint64_t v27 = sub_10005A62C();
  id v28 = sub_10006B65C(v27, "standardUserDefaults");
  NSString v29 = String._bridgeToObjectiveC()();
  unsigned int v30 = [v28 BOOLForKey:v29];

  if (v30)
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v31 = sub_100010ED4();
    uint64_t v32 = (void *)sub_1000093D0(v31, (uint64_t)qword_1001EDC60);
    uint64_t v33 = sub_10005A62C();
    Logger.logObject.getter(v33);
    os_log_type_t v34 = sub_100014588();
    if (sub_1000A1A00(v34))
    {
      Swift::String v35 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v36 = sub_100009B20(32LL);
      *(void *)&__int128 v67 = v36;
      *(_DWORD *)Swift::String v35 = 136315138;
      sub_10005A62C();
      uint64_t v37 = sub_1000A2128();
      uint64_t v38 = sub_1000A24F4(v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v39, v35 + 4);
      sub_100019FA4(v7);
      sub_1000A2640();
      sub_100014564(v40, v41, v42, v43, v35);
      sub_100030F9C(v36);
      sub_100010C34(v36);
      sub_100010C34((uint64_t)v35);
    }

    else
    {
      sub_100019F4C(v7);
    }

    sub_10001443C();
    sub_100019C1C(v63, (uint64_t *)&unk_1001D52C0);
    uint64_t v57 = 0LL;
  }

  else
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v44 = sub_100010ED4();
    id v45 = (void *)sub_1000093D0(v44, (uint64_t)qword_1001EDC60);
    uint64_t v46 = sub_10005A62C();
    Logger.logObject.getter(v46);
    os_log_type_t v47 = sub_100014588();
    if (sub_1000A1A00(v47))
    {
      uint64_t v48 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v49 = sub_100009B20(32LL);
      *(void *)&__int128 v67 = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      sub_10005A62C();
      uint64_t v50 = sub_1000A2128();
      uint64_t v51 = sub_1000A24F4(v50);
      sub_1000A23B4(v51, v52, (uint64_t)(v48 + 4));
      sub_100019FA4(v7);
      sub_1000A2640();
      sub_100014564(v53, v54, v55, v56, v48);
      sub_100030F9C(v49);
      sub_100010C34(v49);
      sub_100010C34((uint64_t)v48);
    }

    else
    {

      sub_100019F4C(v7);
    }

    uint64_t v58 = type metadata accessor for QCCritbitCompressed();
    sub_100009ACC(v58, 48LL);
    sub_100040C8C();
    sub_10004ED84();
    uint64_t Cache = type metadata accessor for QueryCache();
    sub_100009ACC(Cache, 104LL);
    uint64_t v60 = sub_100080AFC();
    uint64_t v57 = sub_10009FBB8(v60, v61, v62);

    sub_100019C1C(v63, (uint64_t *)&unk_1001D52C0);
  }

  *(void *)(v3 + 32) = v57;
  swift_release();
  sub_100009AA0();
}

void *sub_10009FBB8(uint64_t a1, uint64_t a2, void *a3)
{
  v39[3] = type metadata accessor for QCCritbitCompressed();
  v39[4] = &off_1001B6A78;
  v39[0] = a2;
  uint64_t v6 = type metadata accessor for ActivityMonitor();
  swift_allocObject(v6, 48LL, 7LL);
  a3[7] = sub_100080D6C(0LL, 0LL);
  a3[8] = 0LL;
  a3[10] = 0LL;
  swift_unknownObjectWeakInit(a3 + 9, 0LL);
  sub_100009788(0LL, (unint64_t *)&qword_1001D43D0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static DispatchQoS.default.getter(v8);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v38 = 0LL;
  unint64_t v14 = sub_10009FF14();
  dispatch thunk of OptionSet.init(rawValue:)(&v38, v11, v14);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = &v37[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, void))(v18 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001BLL,  0x8000000100170AC0LL,  v10,  v13,  v17,  0LL);
  a3[12] = 0LL;
  a3[10] = &off_1001B3A58;
  a3[11] = v19;
  swift_unknownObjectWeakAssign(a3 + 9, a1);
  sub_100019B20((uint64_t)v39, (uint64_t)(a3 + 2));
  uint64_t v20 = a3[7];
  uint64_t v21 = sub_10000941C((uint64_t *)&unk_1001D5EF0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_retain(v20);
  sub_10000E4FC();
  a3[8] = v22;
  swift_release();
  uint64_t v23 = sub_10000941C((uint64_t *)&unk_1001D52D0);
  uint64_t inited = swift_initStackObject(v23, v37);
  *(_OWORD *)(inited + sub_10000BDD4(v0 + 16) = xmmword_10015D4A0;
  uint64_t v25 = (void *)GEOCountryConfigurationCountryCodeDidChangeNotification;
  *(void *)(inited + 32) = GEOCountryConfigurationCountryCodeDidChangeNotification;
  *(void *)(inited + 40) = NSSystemTimeZoneDidChangeNotification;
  *(void *)(inited + 48) = NSCurrentLocaleDidChangeNotification;
  uint64_t v26 = qword_1001D0480;
  id v27 = v25;
  id v28 = NSSystemTimeZoneDidChangeNotification;
  NSString v29 = NSCurrentLocaleDidChangeNotification;
  if (v26 != -1) {
    swift_once(&qword_1001D0480, sub_10000A6F0);
  }
  unsigned int v30 = (void *)qword_1001EDA60;
  *(void *)(inited + 56) = qword_1001EDA60;
  uint64_t v38 = inited;
  id v31 = v30;
  sub_10007EDAC();
  id v32 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v33 = *(void *)(v38 + 16);
  if (v33)
  {
    os_log_type_t v34 = (uint64_t *)(v38 + 32);
    do
    {
      uint64_t v35 = *v34++;
      [v32 addObserver:a3 selector:"cacheClearNotificationWithNotification:" name:v35 object:0];
      --v33;
    }

    while (v33);
  }

  swift_release();

  sub_1000108B8(v39);
  swift_bridgeObjectRelease();
  return a3;
}

unint64_t sub_10009FF14()
{
  unint64_t result = qword_1001D0BB0;
  if (!qword_1001D0BB0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1001D0BB0);
  }

  return result;
}

uint64_t sub_10009FF54()
{
  uint64_t v1 = sub_1000A238C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009FF70()
{
  uint64_t v1 = sub_1000A238C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10009FF8C()
{
  uint64_t v0 = sub_100019E7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10009FFA8(uint64_t a1)
{
  return sub_10008670C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10009FFB0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10009FFD8(uint64_t a1)
{
}

uint64_t sub_10009FFE4()
{
  uint64_t v1 = sub_1000A238C();
  return swift_deallocObject(v1, v2, v3);
}

void sub_1000A0000()
{
}

void sub_1000A0008()
{
  uint64_t v0 = sub_10004ED84();
  uint64_t v2 = v1(v0);
  sub_100010F18(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL));
  sub_100009A90();
}

uint64_t sub_1000A0040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A0084(uint64_t a1)
{
  return sub_1000A08E4(a1, (uint64_t (*)(uint64_t))sub_10008A040);
}

uint64_t sub_1000A0090()
{
  uint64_t v1 = sub_100019E7C();
  return swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000A00AC()
{
  uint64_t v0 = sub_1000A1888();
  sub_1000A1498(v0);
  sub_1000A2274();
  return sub_1000A1CD4(v1, v2, v3);
}

void sub_1000A00F4(_BYTE *a1)
{
}

uint64_t sub_1000A0128()
{
  uint64_t v1 = *(void *)(sub_1000A13CC() - 8);
  unint64_t v2 = (((((((*(void *)(v1 + 64)
            + ((*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
            + 7) & 0xFFFFFFFFFFFFFFF8LL)
          + 11) & 0xFFFFFFFFFFFFFFF8LL)
        + 11) & 0xFFFFFFFFFFFFFFF8LL)
      + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000271EC();
  uint64_t v3 = sub_1000A1888();
  sub_1000A1498(v3);
  sub_1000A26B4();
  sub_1000A1E6C();

  uint64_t v4 = sub_1000A19E8();
  return sub_100077098(v4, v5, v6);
}

void sub_1000A01A8(uint64_t a1)
{
}

unint64_t sub_1000A0210()
{
  unint64_t result = qword_1001D5398;
  if (!qword_1001D5398)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1001D5398);
  }

  return result;
}

id sub_1000A0250(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000873F8(a1, a2, a3, *(void **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_1000A0258@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100088D6C(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

void *sub_1000A0260(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000A1C74(a1, a2, a3);
}

uint64_t sub_1000A0274@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100088DA8(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

uint64_t sub_1000A028C(void *a1)
{
  return sub_1000A1F0C(a1);
}

uint64_t sub_1000A02A0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100088DE8(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

uint64_t sub_1000A02B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A1E0C(a1, a2, a3, a4, a5);
}

uint64_t sub_1000A02CC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100088E28(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t sub_1000A02EC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100088EA8(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, char *))(v2 + 16), a2);
}

id sub_1000A0308(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_1000883CC(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4], v5[5]);
}

uint64_t sub_1000A0338@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100088F2C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v2 + 16), a2);
}

void sub_1000A0358(void *a1)
{
}

void sub_1000A0380(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

uint64_t sub_1000A038C()
{
  uint64_t v3 = sub_1000A19D0();
  sub_1000A189C(v3);
  sub_1000A25F0();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000A1C00();
  return sub_100077098(v4, v5, v6);
}

uint64_t sub_1000A03FC(char *a1)
{
  uint64_t v3 = *(void *)(sub_1000A13CC() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10006B428();
  sub_1000A1ED4();
  return sub_100089024(a1, v7, v8, *(void *)(v1 + 32), v1 + v4, *(void *)(v1 + v5), v1 + v6);
}

uint64_t sub_1000A0460()
{
  uint64_t v1 = *(void *)(type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  unint64_t v4 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(sub_1000772E0() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + v4 + 16) & ~v6;
  unint64_t v9 = ((*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v10 = v2 | v6 | 7;
  sub_1000A2298();
  sub_1000A2028();
  swift_bridgeObjectRelease();
  sub_1000A25A4();
  sub_10007704C(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release();
  swift_release();
  sub_10004729C(v0 + v7, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release();
  return swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1000A0560(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1000772E0();
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v5 = v1[5];
  uint64_t v11 = v1[4];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = swift_task_alloc(dword_1001D548C);
  unint64_t v9 = (void *)sub_10006B7E8(v8);
  void *v9 = v2;
  v9[1] = sub_1000A1204;
  return sub_100089720(a1, v13, v12, v11, v5, v6, v7, (uint64_t)v1 + v4);
}

unint64_t sub_1000A0678()
{
  unint64_t result = qword_1001D54A8;
  if (!qword_1001D54A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100161F90, &type metadata for ClientState.ResponseError);
    atomic_store(result, (unint64_t *)&qword_1001D54A8);
  }

  return result;
}

uint64_t sub_1000A06B8()
{
  uint64_t v0 = sub_100019E7C();
  return swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000A0710()
{
  uint64_t v1 = *(void *)(sub_1000772E0() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_bridgeObjectRelease();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_bridgeObjectRelease();
  swift_release();
  sub_100010FC0();
  return sub_100077098(v3, v4, v5);
}

id sub_1000A0794(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = (v8 + 23) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v10 = (uint64_t *)(v5 + v8);
  uint64_t v19 = v10[1];
  uint64_t v20 = *(void *)(v5 + v9);
  uint64_t v18 = *v10;
  sub_1000A1D34();
  return sub_1000880D0(v11, v12, v13, a4, a5, v14, v15, v16, v18, v19, v20);
}

uint64_t sub_1000A0834()
{
  uint64_t v0 = sub_1000A1538();
  return sub_10008AA50(v0, v1, v2, v3, v4);
}

uint64_t sub_1000A085C()
{
  uint64_t v3 = sub_1000A19D0();
  sub_1000A189C(v3);
  sub_1000A25F0();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000A1C00();
  return sub_100077098(v4, v5, v6);
}

uint64_t sub_1000A08D8(uint64_t a1)
{
  return sub_1000A08E4(a1, (uint64_t (*)(uint64_t))sub_10008AAA0);
}

uint64_t sub_1000A08E4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

uint64_t sub_1000A095C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 112LL, 7LL);
}

uint64_t sub_1000A09AC()
{
  uint64_t v1 = swift_task_alloc(dword_1001D54CC);
  uint64_t v2 = (void *)sub_10006B7E8(v1);
  *uint64_t v2 = v0;
  v2[1] = sub_1000A0A44;
  sub_1000A16AC();
  return sub_10008B164(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A0A44()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000A0A7C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  return sub_10008BB94(a1, a2, a3, a4);
}

uint64_t sub_1000A0A94@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10008BBF8(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t sub_1000A0AB0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000A0ADC()
{
  uint64_t v1 = *(void *)(sub_1000772E0() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);

  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000A1C00();
  return sub_1000A1590(v3, v4, v5);
}

id sub_1000A0B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_10005A464();
  return sub_100088AD8(v6, v7, a3, a4, v8);
}

uint64_t sub_1000A0B98()
{
  uint64_t v1 = *(void *)(sub_100010ED4() - 8);
  unint64_t v2 = (((((((((*(void *)(v1 + 64)
              + ((*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
              + 7) & 0xFFFFFFFFFFFFFFF8LL)
            + 15) & 0xFFFFFFFFFFFFFFF8LL)
          + 15) & 0xFFFFFFFFFFFFFFF8LL)
        + 15) & 0xFFFFFFFFFFFFFFF8LL)
      + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000A1BEC(v1);
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v3 = sub_1000A19E8();
  return sub_1000A1590(v3, v4, v5);
}

uint64_t sub_1000A0C28(uint64_t a1)
{
  return sub_10008852C(a1, v1 + v3, *(void *)(v1 + v4), *(void *)(v1 + v5));
}

uint64_t sub_1000A0CA0()
{
  uint64_t v0 = sub_1000A1888();
  sub_1000A1498(v0);
  sub_1000A26B4();
  sub_1000A1E6C();
  uint64_t v1 = sub_1000A19E8();
  return sub_1000A1590(v1, v2, v3);
}

void sub_1000A0CE0()
{
  uint64_t v0 = sub_1000A1538();
  sub_100089FF4(v0, v1, v2, v3, v4);
  sub_100009A90();
}

uint64_t sub_1000A0D04()
{
  uint64_t v3 = sub_1000A19D0();
  sub_1000A189C(v3);
  sub_1000A25F0();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_1000A1C00();
  return sub_100077098(v4, v5, v6);
}

uint64_t sub_1000A0D74(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_1000A13CC() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10006B428();
  sub_1000A1ED4();
  return sub_10008C1D4(a1, v7, v8, v1 + v4, *(void *)(v1 + v5), v1 + v6);
}

uint64_t sub_1000A0DD4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000A0DFC(uint64_t a1)
{
}

uint64_t sub_1000A0E08()
{
  sub_1000A25A4();
  uint64_t v1 = sub_1000A1888();
  sub_1000A1498(v1);
  sub_1000A2274();
  return sub_1000A1CD4(v2, v3, v4);
}

void sub_1000A0E68(uint64_t a1)
{
}

uint64_t sub_1000A0EA8()
{
  unint64_t v2 = (v1 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1000271EC();
  uint64_t v3 = sub_1000A1888();
  sub_1000A1498(v3);
  sub_1000A26B4();
  sub_1000A1E6C();

  swift_unknownObjectRelease();
  sub_1000A19E8();
  sub_100009AA0();
  return swift_deallocObject(v4, v5, v6);
}

void sub_1000A0F24(uint64_t a1)
{
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10008CDC0( a1,  *(void *)(v1 + 16),  v1 + v5,  *(void *)(v1 + v6),  *(void (**)(id, uint64_t, uint64_t))(v1 + v3),  *(void *)(v1 + v3 + 8),  *(void **)(v1 + v4),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v1 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
  sub_1000A28E0();
}

uint64_t sub_1000A0F9C()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_1000A0FE4()
{
  uint64_t v1 = swift_task_alloc(dword_1001D5544);
  unint64_t v2 = (void *)sub_10006B7E8(v1);
  *unint64_t v2 = v0;
  v2[1] = sub_1000A1204;
  sub_1000A16AC();
  return sub_10008D32C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000A1070()
{
  return swift_deallocObject(v0, 88LL, 7LL);
}

uint64_t sub_1000A10AC()
{
  uint64_t v1 = swift_task_alloc(dword_1001D55AC);
  unint64_t v2 = (void *)sub_10006B7E8(v1);
  *unint64_t v2 = v0;
  v2[1] = sub_1000A1204;
  sub_1000A16AC();
  return sub_10008F0CC(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t getEnumTagSinglePayload for ClientState.ResponseError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }

    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }

  else
  {
    int v2 = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientState.ResponseError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000A11C0(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000A11D8(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClientState.ResponseError()
{
  return &type metadata for ClientState.ResponseError;
}

uint64_t sub_1000A12E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A02EC(a1, a2);
}

uint64_t sub_1000A12F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A0274(a1, a2);
}

uint64_t sub_1000A130C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A02A0(a1, a2);
}

uint64_t sub_1000A1320@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000A02CC(a1, a2);
}

uint64_t sub_1000A1334@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A0338(a1, a2);
}

uint64_t sub_1000A1354@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, void)@<X8>)
{
  return a3(a1, a2, 0LL, 0LL);
}

void sub_1000A1360(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_10007E30C(v1, v0, 1) = v1;
  sub_100042D10();
}

uint64_t sub_1000A1368@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void)@<X8>)
{
  return a4(a1, a2, a3, 0LL);
}

uint64_t sub_1000A1370()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

  ;
}

void sub_1000A1394(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000A13A0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v0, 0LL, v1);
}

uint64_t sub_1000A13B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(v5 - 160, v5 - 112, v4 + 8, a4, 6LL);
}

uint64_t sub_1000A13CC()
{
  return type metadata accessor for CancellableStoreKey(0LL);
}

void sub_1000A13D4()
{
}

void sub_1000A1404(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_1000A1414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

id sub_1000A1420(uint64_t a1)
{
  return objc_msgSend(v2, *(SEL *)(v1 + 2168), a1);
}

id sub_1000A1434(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000A143C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000A1458()
{
  return sub_1000765BC(v0, v1, 1LL, v2);
}

uint64_t sub_1000A1474(void *a1, int a2, uint64_t a3)
{
  return sub_100041728(a1, a2, a3, v3, 0);
}

id sub_1000A1484(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

  ;
}

uint64_t sub_1000A1498(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000A14AC()
{
  return swift_retain(v0);
}

uint64_t sub_1000A14B4()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 280) + 8LL))(v0, *(void *)(v1 - 248));
}

  ;
}

id sub_1000A14E4(uint64_t a1, const char *a2)
{
  return [v2 a2];
}

uint64_t sub_1000A14EC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void, uint64_t)@<X8>)
{
  return a3(a1, a2, 0LL, v3);
}

uint64_t sub_1000A14F8(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(a1, a2, 0LL, 0LL);
}

uint64_t sub_1000A1504()
{
  return sub_100014244(v1, v0);
}

uint64_t sub_1000A1510()
{
  return type metadata accessor for PegasusContext(0LL);
}

uint64_t sub_1000A151C()
{
  return 0LL;
}

uint64_t sub_1000A1538()
{
  return v0;
}

  ;
}

void sub_1000A1588(unint64_t *a1)
{
}

uint64_t sub_1000A1590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000A15A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_1000A15AC(uint64_t a1@<X8>)
{
}

uint64_t sub_1000A15B4()
{
  return type metadata accessor for ResourceAccessSpan(0LL);
}

uint64_t sub_1000A15C0()
{
  return type metadata accessor for SessionType(0LL);
}

uint64_t sub_1000A15C8()
{
  return v0;
}

uint64_t sub_1000A15E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  return result;
}

void sub_1000A15EC(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_10007E30C(v1, v0, 1) = v1;
  sub_100042D10();
}

uint64_t sub_1000A15F8(uint64_t a1, uint64_t a2)
{
  return sub_1000093D0(a1, a2);
}

uint64_t sub_1000A160C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v2 + 16))(v2, v0, 0LL, v1);
}

uint64_t sub_1000A1624()
{
  return _bridgeAnyObjectToAny(_:)(v0);
}

uint64_t sub_1000A1630()
{
  return sub_1000C5FB0(v0);
}

uint64_t sub_1000A1638()
{
  return 0LL;
}

uint64_t sub_1000A1644()
{
  return type metadata accessor for SessionTokens(0LL);
}

id sub_1000A1650(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000A1658(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A1660()
{
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_1000A166C()
{
  return type metadata accessor for ResourceAccessSpan(0LL);
}

void sub_1000A1674(id a1)
{
}

uint64_t sub_1000A1680(uint64_t (*a1)(void))
{
  return a1();
}

BOOL sub_1000A169C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

  ;
}

uint64_t sub_1000A16C8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000A16E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1000A1700()
{
  *(_WORD *)(v1 + 22) = 2048;
  *(void *)(v0 + 544) = *(void *)(v0 + 408);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v2, v1 + 24);
}

uint64_t sub_1000A1728(uint64_t a1)
{
  uint64_t v3 = *(void *)(v2 + v1);
  *(void *)(v2 + sub_100079A28((uint64_t)va, v1) = a1;
  return swift_release(v3);
}

uint64_t sub_1000A1738()
{
  return swift_retain(v0);
}

uint64_t sub_1000A1740@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(v1 + a1));
}

void sub_1000A1748(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
}

  ;
}

  ;
}

uint64_t sub_1000A1790()
{
  return swift_release(v0);
}

  ;
}

  ;
}

uint64_t sub_1000A17E4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000A1800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_dynamicCast(a1, a2, a3, a4, 0LL);
}

void sub_1000A1808(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000A1810()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_1000A1818()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v0 + 440) + 8LL))(v1, *(void *)(v0 + 504));
}

BOOL sub_1000A182C(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000A1834()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000A183C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000A1844(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A184C()
{
  return swift_release(*(void *)(v0 + 456));
}

void sub_1000A1858(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
}

uint64_t sub_1000A1864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(a1 + 24) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A1870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, v3, a3);
}

void sub_1000A1878(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A1880@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 - 256))();
}

uint64_t sub_1000A1888()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_1000A1894(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A189C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000A18B0(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_1000A18BC()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000A18C4(uint64_t a1)
{
  return swift_bridgeObjectRetain_n(a1, 2LL);
}

uint64_t sub_1000A18CC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 + 504));
}

uint64_t sub_1000A18D4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

void sub_1000A18DC()
{
}

void sub_1000A18E4()
{
  *(void *)(v1 - 8) = *v0;
}

uint64_t sub_1000A18F4(uint64_t a1)
{
  *(void *)(v1 + 544) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 544, v3, v2);
}

uint64_t sub_1000A1914(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

void *sub_1000A1924@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  result[4] = a3;
  result[5] = v3;
  result[9] = a2;
  return result;
}

__n128 *sub_1000A194C(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

id sub_1000A1964(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000A196C()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000A1974()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000A197C()
{
  return v0;
}

uint64_t sub_1000A1988()
{
  return swift_task_dealloc(*(void *)(v0 + 240));
}

uint64_t sub_1000A19A8()
{
  return swift_retain(v0);
}

void sub_1000A19B0(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A19B8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000A19C0()
{
  return swift_task_dealloc(v0);
}

BOOL sub_1000A19C8(os_log_s *a1)
{
  return os_log_type_enabled(a1, v1);
}

uint64_t sub_1000A19D0()
{
  return type metadata accessor for UUID(0LL);
}

uint64_t sub_1000A19D8()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000A19E0()
{
  return swift_release(*(void *)(v0 - 232));
}

uint64_t sub_1000A19E8()
{
  return v0;
}

uint64_t sub_1000A19F8()
{
  return swift_task_dealloc(v0);
}

BOOL sub_1000A1A00(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000A1A10@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 248));
}

uint64_t sub_1000A1A18(uint64_t a1)
{
  return sub_100010A1C(a1, v1);
}

uint64_t sub_1000A1A20()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v0 - 144);
}

uint64_t sub_1000A1A28()
{
  *(_WORD *)(v0 + 12) = 2085;
  return swift_bridgeObjectRetain(*(void *)(v1 - 96));
}

  ;
}

void sub_1000A1A50(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A1A58(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v2, v3, 0LL);
}

uint64_t sub_1000A1A68()
{
  *(void *)(v0 - 96) = 0LL;
  return swift_stdlib_random(v0 - 96, 8LL);
}

uint64_t sub_1000A1A78(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A1A80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v2, a2, v4);
}

void sub_1000A1A90(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000A1A98@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000A1AA0()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 200) + 8LL))( *(void *)(v0 - 304),  *(void *)(v0 - 336));
}

void sub_1000A1ABC()
{
}

uint64_t sub_1000A1AC8()
{
  return swift_task_dealloc(*(void *)(v0 + 288));
}

uint64_t sub_1000A1AE4()
{
  return swift_task_dealloc(*(void *)(v0 + 184));
}

void sub_1000A1B00(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1000A0380(v0, 1) = v1;
  sub_100042D10();
}

void sub_1000A1B0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 264) = (char *)&a9 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v10 + 240) = v9;
}

uint64_t sub_1000A1B30(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
  return _convertErrorToNSError(_:)(a1);
}

uint64_t sub_1000A1B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100009654(a1, a2, 1LL, a4);
}

uint64_t sub_1000A1B44(uint64_t a1)
{
  return a1 + 16;
}

void *sub_1000A1B50()
{
  return _Block_copy(v0);
}

uint64_t sub_1000A1B58(uint64_t a1)
{
  *(void *)(v2 - 8) = *v1;
  return swift_task_dealloc(a1);
}

uint64_t sub_1000A1B68()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 296));
}

void sub_1000A1B74(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
}

uint64_t sub_1000A1B7C()
{
  return swift_task_dealloc(*(void *)(v0 + 248));
}

  ;
}

uint64_t sub_1000A1BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Dictionary.init(dictionaryLiteral:)(a1, a2, a2, a4);
}

uint64_t sub_1000A1BA8(uint64_t a1, uint64_t a2)
{
  return Dictionary.description.getter(a1, a2, a2);
}

id sub_1000A1BB0(uint64_t a1)
{
  return sub_10007D0F8(a1, 2);
}

uint64_t sub_1000A1BB8(uint64_t a1)
{
  return swift_unknownObjectRetain_n(a1, 2LL);
}

uint64_t sub_1000A1BC0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 256));
}

uint64_t sub_1000A1BC8(uint64_t a1)
{
  return swift_stdlib_random(a1, 8LL);
}

double sub_1000A1BD0()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  return result;
}

uint64_t sub_1000A1BDC(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_100082F80(a1, a2);
}

void sub_1000A1BE4()
{
}

uint64_t sub_1000A1BEC@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_1000A1BF4()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000A1C18()
{
  return swift_task_dealloc(v0);
}

uint64_t sub_1000A1C20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(a1, v3, a3);
}

uint64_t sub_1000A1C28()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000A1C30()
{
  return swift_unknownObjectRetain(v0);
}

uint64_t sub_1000A1C38(uint64_t a1)
{
  *(void *)(v1 - 152) = a1;
  return v1 - 152;
}

uint64_t sub_1000A1C4C()
{
  return Publishers.TryMap.tryMap<A>(_:)();
}

  ;
}

  ;
}

void *sub_1000A1C74(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_10008BB70(a1, a2, a3);
}

uint64_t sub_1000A1C7C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

  ;
}

void sub_1000A1CA4(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_1000A1CAC(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000A1CB4()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 416));
}

uint64_t sub_1000A1CBC()
{
  return type metadata accessor for PARNetworkRequestFactory();
}

uint64_t sub_1000A1CC4()
{
  return type metadata accessor for ResourceAccessNetworkSpan(0LL);
}

unint64_t sub_1000A1CCC()
{
  return sub_100059E4C();
}

uint64_t sub_1000A1CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_deallocObject(a1, a2, a3);
}

void sub_1000A1CE0()
{
}

uint64_t sub_1000A1CF8()
{
  return sub_1000307E0(v2, v1, (uint64_t *)(v0 + 568));
}

uint64_t sub_1000A1D0C(uint64_t a1)
{
  return Message.serializedData(partial:)(0LL, v1, a1);
}

id sub_1000A1D20()
{
  return [*(id *)(v1 - 256) *(SEL *)(v0 + 32)];
}

uint64_t sub_1000A1D2C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 200));
}

  ;
}

uint64_t sub_1000A1D40(void *a1)
{
  return sub_100041728(a1, 2, v1, 0LL, 1);
}

uint64_t sub_1000A1D54()
{
  return v1(v2, v0);
}

uint64_t sub_1000A1D60(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_100082F80(a1, a2);
}

void sub_1000A1D68(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1000A0380(v0, 1) = v1;
  sub_100042D10();
}

uint64_t sub_1000A1D74@<X0>(uint64_t a1@<X8>)
{
  return swift_task_alloc(*(unsigned int *)(a1 + 4));
}

void sub_1000A1D88()
{
}

  ;
}

uint64_t sub_1000A1DB0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000A1DB8(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A1DC0()
{
  return v2(v1, v0, 0LL);
}

uint64_t sub_1000A1DD4(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 176));
}

uint64_t sub_1000A1DE0@<X0>(uint64_t a1@<X8>)
{
  return swift_release(*(void *)(a1 - 256));
}

uint64_t sub_1000A1DE8()
{
  return *(void *)(v0 - 256);
}

  ;
}

  ;
}

uint64_t sub_1000A1E0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10008AA2C(a1, a2, a3, a4, a5);
}

uint64_t sub_1000A1E14()
{
  return swift_unknownObjectRetain(v0);
}

id sub_1000A1E1C()
{
  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t sub_1000A1E28(uint64_t a1)
{
  return Publisher.map<A>(_:)(a1, v2, v1, v3);
}

  ;
}

uint64_t sub_1000A1E48()
{
  return v0;
}

uint64_t sub_1000A1E54()
{
  return v0;
}

uint64_t sub_1000A1E60@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_1000A1E6C()
{
  return swift_release(*(void *)(v0 + v1 + 8));
}

uint64_t sub_1000A1E78@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void sub_1000A1E84()
{
}

uint64_t sub_1000A1E90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(a1, v3, a3);
}

uint64_t sub_1000A1E98()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v0);
}

uint64_t sub_1000A1EA4()
{
  return swift_retain(v0);
}

void sub_1000A1EAC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 + 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
}

uint64_t sub_1000A1EC8(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

  ;
}

  ;
}

uint64_t sub_1000A1F0C(void *a1)
{
  return sub_10008AA04(a1);
}

uint64_t sub_1000A1F14(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A1F1C()
{
  return type metadata accessor for PegasusProxyForEngagement(0LL);
}

uint64_t sub_1000A1F28(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return _convertErrorToNSError(_:)(a1);
}

void sub_1000A1F34()
{
}

id sub_1000A1F3C(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 6);
}

uint64_t sub_1000A1F48()
{
  return v2(v0, 0LL, v1);
}

uint64_t sub_1000A1F5C()
{
  return Apple_Parsec_Search_V2_SearchResponse.status.setter(v0);
}

uint64_t sub_1000A1F68()
{
  return v0;
}

id sub_1000A1F74()
{
  return [*(id *)(v1 - 248) *(SEL *)(v0 + 32)];
}

  ;
}

uint64_t sub_1000A1F8C()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 - 232) + 8LL))( *(void *)(v0 - 192),  *(void *)(v0 - 224));
}

uint64_t sub_1000A1F9C()
{
  return Logger.logObject.getter();
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000A1FF8()
{
  return static os_log_type_t.debug.getter();
}

id sub_1000A2000(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 + 424) a2];
}

uint64_t sub_1000A2008(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  return sub_1000C5FB0(a1);
}

uint64_t sub_1000A2018(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000A2020()
{
  return swift_errorRelease(*(void *)(v0 + 16));
}

void sub_1000A2028()
{
}

uint64_t sub_1000A2030()
{
  return (*(uint64_t (**)(void, void))(v0[61] + 8LL))(v0[12], v0[62]);
}

uint64_t sub_1000A2040(uint64_t a1)
{
  return sub_100014244(a1, v1);
}

uint64_t sub_1000A2048(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(a1, v3, a3);
}

  ;
}

uint64_t sub_1000A2060()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 256));
}

uint64_t sub_1000A2068()
{
  return *(void *)(v0 + 496);
}

uint64_t sub_1000A2078@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
  return Logger.logObject.getter();
}

  ;
}

  ;
}

uint64_t sub_1000A20A0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 176, v1, v0);
}

uint64_t sub_1000A20B0(uint64_t a1)
{
  *(void *)(v1 + 568) = a1;
  return v1 + 568;
}

uint64_t sub_1000A20C8()
{
  return Publishers.TryMap.tryMap<A>(_:)();
}

uint64_t sub_1000A20D0(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t sub_1000A20E8(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t sub_1000A2100(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

  ;
}

uint64_t sub_1000A2128()
{
  return sub_1000307E0(*(void *)(v1 - 168), v0, (uint64_t *)(v1 - 120));
}

uint64_t sub_1000A2138()
{
  return swift_release(*(void *)(v0 - 144));
}

void sub_1000A2140()
{
}

uint64_t sub_1000A2148@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_1000A2154()
{
  return swift_errorRelease(v0);
}

void sub_1000A215C(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A2164()
{
  return v0;
}

uint64_t sub_1000A2170()
{
  return v0;
}

uint64_t sub_1000A217C()
{
  return v0;
}

uint64_t sub_1000A2188()
{
  return swift_errorRelease(v0);
}

void sub_1000A2190(uint64_t a1, uint64_t (*a2)(void))
{
}

void sub_1000A2198(uint64_t a1, uint64_t *a2)
{
}

id sub_1000A21A0(uint64_t a1)
{
  return sub_10008F620(a1, v1, v2);
}

uint64_t sub_1000A21B0()
{
  return swift_errorRelease(v0);
}

uint64_t sub_1000A21B8()
{
  return _convertErrorToNSError(_:)(v0);
}

uint64_t sub_1000A21C0( void *a1, int a2, uint64_t a3, unint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10)
{
  return sub_100076BAC(a1, a2, a3, a4, a5, a6, a7, 0x3176uLL, a9, a10);
}

uint64_t sub_1000A21C8()
{
  return Publishers.TryMap.tryMap<A>(_:)();
}

  ;
}

  ;
}

  ;
}

  ;
}

id sub_1000A2210@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 - 256);
}

uint64_t sub_1000A2218()
{
  return Publishers.TryMap.tryMap<A>(_:)();
}

uint64_t sub_1000A2220(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(a1, v3, a3);
}

uint64_t sub_1000A2228()
{
  return v0;
}

uint64_t sub_1000A2234@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a3(a1, a2, v3);
}

uint64_t sub_1000A223C(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A2244()
{
  return v0;
}

uint64_t sub_1000A2250()
{
  return v0;
}

void sub_1000A225C(uint64_t a1, uint64_t *a2)
{
}

void sub_1000A2264(uint64_t a1)
{
}

void sub_1000A226C(uint64_t a1)
{
}

  ;
}

void sub_1000A2280()
{
}

uint64_t sub_1000A2288()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 240));
}

uint64_t sub_1000A2290()
{
  return swift_release(*(void *)(v0 + 32));
}

uint64_t sub_1000A2298()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 16));
}

uint64_t sub_1000A22A0@<X0>(uint64_t (*a1)(void)@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return a1();
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000A22F0(uint64_t a1, uint64_t a2)
{
  return sub_10009F534(a1, a2);
}

  ;
}

id sub_1000A230C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000A2314()
{
  return (*(uint64_t (**)(void, void))(v0[45] + 8LL))(v0[47], v0[44]);
}

uint64_t sub_1000A2324()
{
  return sub_100010A30(v0, v1);
}

void sub_1000A2334(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A233C()
{
  return sub_1000C5FB0(v0);
}

void *sub_1000A2344()
{
  return _Block_copy(v0);
}

  ;
}

BOOL sub_1000A2364(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000A2374()
{
  return v0;
}

uint64_t sub_1000A2380()
{
  return v0;
}

uint64_t sub_1000A238C()
{
  return v0;
}

  ;
}

  ;
}

uint64_t sub_1000A23B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, a3);
}

uint64_t sub_1000A23BC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 128));
}

void sub_1000A23C4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 352) = a1;
}

uint64_t sub_1000A23D0(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, 0LL);
}

BOOL sub_1000A23D8(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void sub_1000A23E4()
{
  *(void *)(v1 - 376) = v0;
}

void sub_1000A23F8(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1000A0380(v0, 1) = v1;
  sub_100042D10();
}

uint64_t sub_1000A2404()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 112));
}

void sub_1000A240C(uint64_t a1@<X8>)
{
  *(_BYTE *)(v1 + asub_1000A0380(v0, 1) = 48;
}

uint64_t sub_1000A2418()
{
  return *(void *)(v0 + 464);
}

uint64_t sub_1000A242C(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1, v1);
}

uint64_t sub_1000A2434(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

void sub_1000A2440(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1000A0380(v0, 1) = v1;
  sub_100042D10();
}

uint64_t sub_1000A244C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 256));
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000A2490(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

  ;
}

uint64_t sub_1000A24A4(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1, v1);
}

uint64_t sub_1000A24AC()
{
  return swift_unknownObjectWeakInit(v0, 0LL);
}

uint64_t sub_1000A24B8()
{
  return v0;
}

uint64_t sub_1000A24C4()
{
  return swift_unknownObjectWeakAssign(v1, v0);
}

void sub_1000A24D0(uint64_t a1, void (*a2)(uint64_t))
{
}

uint64_t sub_1000A24D8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(v1);
}

uint64_t sub_1000A24E4()
{
  return swift_retain(*(void *)(v0 - 256));
}

void sub_1000A24EC(uint64_t a1, void (*a2)(uint64_t))
{
}

uint64_t sub_1000A24F4(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

  ;
}

  ;
}

uint64_t sub_1000A2530()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 312));
}

uint64_t sub_1000A253C(uint64_t a1)
{
  return v2(a1, 0LL, v1);
}

uint64_t sub_1000A2548(uint64_t a1)
{
  return v2(a1, 0LL, v1);
}

id sub_1000A2554(uint64_t a1)
{
  return sub_10008F620(a1, 0LL, 0xE000000000000000LL);
}

uint64_t sub_1000A2560(uint64_t result)
{
  *(void *)(v1 - 192) = result;
  return result;
}

uint64_t sub_1000A256C(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t sub_1000A2580()
{
  return sub_1000C5FB0(v0);
}

void sub_1000A2588(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000A2590()
{
  return v0;
}

id sub_1000A259C(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000A25A4()
{
  return swift_release(*(void *)(v0 + 56));
}

NSData sub_1000A25AC()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_1000A25B8()
{
  return swift_release(*(void *)(v0 + 48));
}

uint64_t sub_1000A25C0(uint64_t a1)
{
  return swift_initStackObject(a1, v1 - 168);
}

uint64_t sub_1000A25C8(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t sub_1000A25D4(uint64_t a1, unint64_t a2)
{
  return sub_1000307E0(a1, a2, (uint64_t *)(v2 - 120));
}

id sub_1000A25E0()
{
  return sub_1000869C4();
}

uint64_t sub_1000A25E8()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000A25F0()
{
  return swift_release(*(void *)(v0 + v1));
}

uint64_t sub_1000A25F8(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of HashFunction.update(bufferPointer:)(a1, a2, v2, v3);
}

void sub_1000A2604()
{
}

uint64_t sub_1000A260C()
{
  return Logger.logObject.getter();
}

void sub_1000A2614()
{
}

uint64_t sub_1000A2620()
{
  return sub_100010A30(v1, v0);
}

uint64_t sub_1000A262C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

void sub_1000A2638(uint64_t a1)
{
}

  ;
}

uint64_t sub_1000A264C(uint64_t a1, uint64_t a2)
{
  return sub_1000A0040(v2, a2);
}

void sub_1000A2654(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1000A2660()
{
  return swift_unknownObjectRetain(v0);
}

void sub_1000A2668(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + a2) = a1;
}

id sub_1000A2674(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, v2);
}

uint64_t sub_1000A267C(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_100082F80(a1, a2);
}

void sub_1000A2684()
{
}

uint64_t sub_1000A268C(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000A2694()
{
  return v0;
}

  ;
}

uint64_t sub_1000A26B4()
{
  return swift_release(*(void *)(v0 + v1));
}

uint64_t sub_1000A26BC(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000A26C4(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v3);
}

uint64_t sub_1000A26CC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(a1, a2, v2);
}

uint64_t sub_1000A26D4(uint64_t a1)
{
  return v1(a1, v2);
}

void sub_1000A26DC()
{
}

uint64_t sub_1000A26E4()
{
  return dispatch thunk of HashFunction.finalize()(v0, v1);
}

void sub_1000A26F0(uint64_t a1)
{
}

  ;
}

uint64_t sub_1000A2704()
{
  return v0;
}

uint64_t sub_1000A2710()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000A2718()
{
  return v0;
}

void sub_1000A2724(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000A272C()
{
  return v0;
}

uint64_t sub_1000A2738()
{
  return Client.type.getter();
}

uint64_t sub_1000A2740()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000A2748()
{
  return Publishers.Map.tryMap<A>(_:)();
}

uint64_t sub_1000A2750()
{
  return Publishers.TryMap.tryMap<A>(_:)();
}

void sub_1000A2758()
{
}

uint64_t sub_1000A2760(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_100082F80(a1, a2);
}

uint64_t sub_1000A2768(uint64_t a1, void (*a2)(uint64_t))
{
  return sub_100082F80(a1, a2);
}

uint64_t sub_1000A2770()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 24));
}

id sub_1000A2778(uint64_t a1, const char *a2)
{
  return [*(id *)(v2 - 208) a2];
}

uint64_t sub_1000A2780(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(a1, a2, v3);
}

void sub_1000A278C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 208) = (char *)&a9 - v9;
}

  ;
}

uint64_t sub_1000A27AC()
{
  return type metadata accessor for Apple_Parsec_Search_PegasusQueryContext(0LL);
}

uint64_t sub_1000A27B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100009654(a1, a2, a3, v3);
}

uint64_t sub_1000A27C0(uint64_t a1)
{
  return swift_dynamicCastObjCClass(v1, a1);
}

uint64_t sub_1000A27CC(uint64_t a1)
{
  return dispatch thunk of CustomStringConvertible.description.getter(v1, a1);
}

  ;
}

uint64_t sub_1000A27E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 - 256) = result;
  *(void *)(v2 - 400) = *(void *)(result - 8);
  return result;
}

uint64_t sub_1000A27F8()
{
  return (*(uint64_t (**)(void))(v0 - 392))();
}

uint64_t sub_1000A2804(uint64_t result)
{
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  return result;
}

void sub_1000A2810(uint64_t a1@<X8>)
{
  *(_BYTE *)(v2 + asub_1000A0380(v0, 1) = v1;
  sub_100042D10();
}

  ;
}

uint64_t sub_1000A2830(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 352));
}

uint64_t sub_1000A283C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return swift_errorRelease(a12);
}

void sub_1000A2844(char a1, uint64_t a2)
{
}

void sub_1000A2850()
{
  *(_WORD *)(v0 + 32) = 2050;
}

void sub_1000A2864()
{
  *(_WORD *)(v0 + 32) = 2050;
}

uint64_t sub_1000A2878()
{
  return swift_release(*(void *)(v0 + 416));
}

uint64_t sub_1000A2880(uint64_t a1)
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(v1 - 240));
}

uint64_t sub_1000A288C(uint64_t a1)
{
  return a1 + v1;
}

unint64_t sub_1000A28A0()
{
  return sub_10000EC64(v0, v1);
}

uint64_t sub_1000A28AC()
{
  return Publisher.catch<A>(_:)();
}

  ;
}

void sub_1000A28C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 2;
}

uint64_t sub_1000A28D4()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

  ;
}

uint64_t sub_1000A28EC()
{
  return swift_getEnumCaseMultiPayload(v1, v0);
}

id sub_1000A28F8(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 11);
}

uint64_t sub_1000A2904()
{
  return _convertErrorToNSError(_:)(v0);
}

void sub_1000A2910()
{
}

uint64_t sub_1000A291C(uint64_t a1)
{
  v2[0] = &unk_100162018;
  v2[1] = &unk_100162030;
  v2[2] = &unk_100162030;
  return swift_initClassMetadata2(a1, 0LL, 3LL, v2, a1 + 464);
}

id sub_1000A2968()
{
  return [v0 response];
}

uint64_t sub_1000A298C()
{
  return swift_unknownObjectRelease(*(void *)(v0 + *(void *)(*(void *)v0 + 480LL)));
}

uint64_t *sub_1000A29C8()
{
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 120LL)) & 1) == 0) {
    sub_1000A330C();
  }
  uint64_t v1 = sub_1000BEBA0();
  swift_unknownObjectRelease();
  swift_errorRelease(*(uint64_t *)((char *)v1 + *(void *)(*v1 + 472)));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1000A2A30()
{
  uint64_t v0 = sub_1000A29C8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t type metadata accessor for NetworkSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NetworkSpan);
}

uint64_t sub_1000A2A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + *(void *)(*(void *)v2 + 128LL));
  uint64_t v5 = static os_log_type_t.error.getter(a1, a2);
  uint64_t v6 = os_log(_:dso:log:type:_:)( "LEAKED NETWORK SPAN: {{{",  24LL,  2LL,  &_mh_execute_header,  v4,  v5,  _swiftEmptyArrayStorage);
  uint64_t v10 = sub_1000BEC78(v6, v7, v8, v9);
  static os_log_type_t.error.getter(v10, v11);
  uint64_t v12 = sub_10000941C(&qword_1001D0C10);
  uint64_t v13 = sub_10005A72C(v12);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v14 = (void *)(v3 + *(void *)(*(void *)v3 + 464LL));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  swift_unknownObjectRetain(*v14);
  uint64_t v17 = sub_10000941C(&qword_1001D5750);
  uint64_t v23 = sub_1000A37BC(v17, v18, v19, v20, v21, v22);
  uint64_t v25 = v24;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v26 = sub_100042FE8();
  *(void *)(v13 + 64) = v26;
  *(void *)(v13 + 32) = v23;
  *(void *)(v13 + 40) = v25;
  uint64_t v27 = v4;
  os_log(_:dso:log:type:_:)("Network task: %s", v145);
  uint64_t v28 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v28, v29);
  unsigned int v30 = (__n128 *)sub_10005A72C(v12);
  sub_1000A3760(v30, v31, v32, v33, v34, v35, v36, v37, v146, v158, v163, v12, v38);
  uint64_t ObjectType = swift_getObjectType(v16);
  uint64_t v147 = *(const char **)(v15 + 16);
  ((void (*)(uint64_t, uint64_t))v147)(ObjectType, v15);
  uint64_t v40 = sub_10000941C(&qword_1001D4D18);
  uint64_t v46 = sub_1000A37B0(v40, v41, v42, v43, v44, v45);
  v30[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v30[4].n128_u64[0] = v26;
  v30[2].n128_u64[0] = v46;
  v30[2].n128_u64[1] = v47;
  uint64_t v164 = v27;
  os_log(_:dso:log:type:_:)("Response: %s", v147);
  sub_10001460C();
  uint64_t v48 = sub_1000A2EB4();
  if ((v51 & 1) != 0)
  {
    static os_log_type_t.error.getter(v48, v49);
    uint64_t v105 = (__n128 *)sub_10005A72C(v170);
    __n128 v114 = sub_1000A3760(v105, v106, v107, v108, v109, v110, v111, v112, v148, v26, v27, v170, v113);
    uint64_t v175 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v156)(ObjectType, v15, v114);
    uint64_t v120 = sub_1000A37B0(v175, v115, v116, v117, v118, v119);
    uint64_t v104 = v162;
    v105[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v105[4].n128_u64[0] = v162;
    v105[2].n128_u64[0] = v120;
    v105[2].n128_u64[1] = v121;
    os_log(_:dso:log:type:_:)("Unsupported response: %s", v156);
  }

  else
  {
    uint64_t v52 = v49;
    int v53 = v50;
    unint64_t v54 = HIDWORD(v50);
    uint64_t v149 = v48;
    static os_log_type_t.error.getter(v48, v49);
    uint64_t v55 = v170;
    uint64_t v56 = (__n128 *)sub_10005A72C(v170);
    sub_1000A3760(v56, v57, v58, v59, v60, v61, v62, v63, v149, v26, v164, v170, v64);
    v65[7] = v66;
    v65[8] = &protocol witness table for Int;
    v65[4] = v52;
    os_log(_:dso:log:type:_:)("Status: %d", v150);
    uint64_t v67 = swift_bridgeObjectRelease();
    static os_log_type_t.error.getter(v67, v68);
    uint64_t v69 = (__n128 *)sub_10005A72C(v55);
    sub_1000A3760(v69, v70, v71, v72, v73, v74, v75, v76, v151, v159, v165, v171, v77);
    *(void *)(v78 + 56) = &type metadata for UInt32;
    *(void *)(v78 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v78 + 32) = v54;
    sub_1000A3748((uint64_t)"Uploaded: %llu bytes", 20LL);
    uint64_t v79 = sub_10001460C();
    static os_log_type_t.error.getter(v79, v80);
    id v81 = (__n128 *)sub_10005A72C(v55);
    sub_1000A3760(v81, v82, v83, v84, v85, v86, v87, v88, v152, v160, v166, v172, v89);
    *(void *)(v90 + 56) = &type metadata for UInt32;
    *(void *)(v90 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v90 + 32) = v53;
    sub_1000A3748((uint64_t)"Downloaded: %llu bytes", 22LL);
    uint64_t v91 = sub_10001460C();
    static os_log_type_t.error.getter(v91, v92);
    id v93 = (__n128 *)sub_10005A72C(v55);
    sub_1000A3760(v93, v94, v95, v96, v97, v98, v99, v100, v153, v161, v167, v173, v101);
    *((void *)v102 + 7) = v103;
    *((void *)v102 + 8) = &protocol witness table for Double;
    v102[4] = v154;
    os_log(_:dso:log:type:_:)("Runtime: %f seconds", v154);
    uint64_t v104 = v162;
  }

  uint64_t v122 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v122, v123);
  uint64_t v124 = (__n128 *)sub_10005A72C(v174);
  sub_1000A3760(v124, v125, v126, v127, v128, v129, v130, v131, v155, v162, v168, v174, v132);
  swift_errorRetain(*(void *)(v3 + *(void *)(*(void *)v3 + 472LL)));
  uint64_t v133 = sub_10000941C(&qword_1001D7B10);
  uint64_t v139 = sub_1000A37BC(v133, v134, v135, v136, v137, v138);
  v124[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v124[4].n128_u64[0] = v104;
  v124[2].n128_u64[0] = v139;
  v124[2].n128_u64[1] = v140;
  os_log(_:dso:log:type:_:)("Error: %s", v157);
  uint64_t v141 = swift_bridgeObjectRelease();
  uint64_t v143 = static os_log_type_t.error.getter(v141, v142);
  return os_log(_:dso:log:type:_:)("}}}", 3LL, 2LL, &_mh_execute_header, v169, v143, _swiftEmptyArrayStorage);
}

uint64_t sub_1000A2EB4()
{
  uint64_t v2 = sub_1000A37C8((void *)(v0 + *(void *)(*(void *)v0 + 464LL)));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  uint64_t v4 = v3(v2, v1);
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = (void *)v4;
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
  uint64_t v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (!v7)
  {

LABEL_7:
    uint64_t v42 = sub_10000941C(&qword_1001D0C10);
    uint64_t v43 = sub_10005A72C(v42);
    *(_OWORD *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v158 = v3(v2, v1);
    sub_10000941C(&qword_1001D4D18);
    uint64_t v44 = String.init<A>(describing:)(&v158);
    uint64_t v46 = v45;
    *(void *)(v43 + 56) = &type metadata for String;
    *(void *)(v43 + 64) = sub_100042FE8();
    *(void *)(v43 + 32) = v44;
    *(void *)(v43 + 40) = v46;
    sub_1000A3788((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s");
    swift_bridgeObjectRelease();
    sub_1000BF0F0();
    *(double *)&uint64_t result = 0.0;
    return result;
  }

  [v7 statusCode];
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v1);
  if (!v8)
  {

    *(double *)&uint64_t result = 0.0;
    return result;
  }

  *(void *)&__int128 v163 = 0xD000000000000021LL;
  *((void *)&v163 + sub_1000A0380(v0, 1) = 0x800000010016DA70LL;
  uint64_t v14 = sub_1000A37A4( v8,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v9,  v10,  v11,  v12,  v13,  v139,  v146);
  double v22 = sub_1000A3724( v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v140,  v147,  v154,  *(uint64_t *)&v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163);
  uint64_t v28 = sub_1000A376C(v23, v24, v25, v26, v27, v22);
  if (v164) {
    uint64_t v36 = sub_1000A3734(v28, v29, v30, (uint64_t)&type metadata for UInt32, v32);
  }
  else {
    uint64_t v36 = sub_1000A3774(v28, v29, v30, v31, v32, v33, v34, v35, v141, v148);
  }
  *(void *)&__int128 v163 = 0xD00000000000001DLL;
  *((void *)&v163 + sub_1000A0380(v0, 1) = 0x800000010016DA50LL;
  uint64_t v48 = sub_1000A37A4( v36,  (uint64_t)&type metadata for String,  (uint64_t)&protocol witness table for String,  v37,  v38,  v39,  v40,  v41,  v141,  v148);
  double v56 = sub_1000A3724( v48,  v49,  v50,  v51,  v52,  v53,  v54,  v55,  v142,  v149,  v155,  *(uint64_t *)&v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163);
  uint64_t v62 = sub_1000A376C(v57, v58, v59, v60, v61, v56);
  if (v164) {
    uint64_t v70 = sub_1000A3734(v62, v63, v64, (uint64_t)&type metadata for UInt32, v66);
  }
  else {
    uint64_t v70 = sub_1000A3774(v62, v63, v64, v65, v66, v67, v68, v69, v143, v150);
  }
  uint64_t v71 = sub_1000A377C(v70, &type metadata for String, &protocol witness table for String);
  double v79 = sub_1000A3724( v71,  v72,  v73,  v74,  v75,  v76,  v77,  v78,  v143,  0xD00000000000001BLL,  0x800000010016DB10LL,  *(uint64_t *)&v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163);
  uint64_t v85 = sub_1000A376C(v80, v81, v82, v83, v84, v79);
  if (v164)
  {
    uint64_t v93 = sub_1000A3734(v85, v86, v87, (uint64_t)&type metadata for Double, v89);
    if ((_DWORD)v93)
    {
      double v156 = *(double *)&v151;
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v93 = sub_1000A3774(v85, v86, v87, v88, v89, v90, v91, v92, v144, v151);
  }

  uint64_t v94 = sub_1000A377C(v93, &type metadata for String, &protocol witness table for String);
  double v102 = sub_1000A3724( v94,  v95,  v96,  v97,  v98,  v99,  v100,  v101,  v144,  0xD00000000000001BLL,  0x800000010016D8D0LL,  *(uint64_t *)&v156,  v157,  v158,  v159,  v160,  v161,  v162,  v163);
  uint64_t v108 = sub_1000A376C(v103, v104, v105, v106, v107, v102);
  if (!v164)
  {
    sub_1000A3774(v108, v109, v110, v111, v112, v113, v114, v115, v144, v152);
    double v156 = 0.0;
    char v138 = 1;
LABEL_24:
    LOBYTE(v157) = v138;
    swift_bridgeObjectRelease();

    goto LABEL_26;
  }

  uint64_t v93 = swift_dynamicCast(&v156, &v163, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
  if ((v93 & 1) == 0)
  {
    double v156 = 0.0;
    char v138 = v93 ^ 1;
    goto LABEL_24;
  }

uint64_t sub_1000A3238(uint64_t a1, unint64_t a2, double a3)
{
  int v3 = a2;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = sub_10000941C(&qword_1001D0C10);
  uint64_t v8 = swift_allocObject(v7, 192LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D4A0;
  *(void *)(v8 + 56) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 96) = &type metadata for UInt32;
  *(void *)(v8 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v8 + 72) = v3;
  *(void *)(v8 + 136) = &type metadata for UInt32;
  *(void *)(v8 + 144) = &protocol witness table for UInt32;
  *(_DWORD *)(v8 + 112) = v6;
  *(void *)(v8 + 176) = &type metadata for Double;
  *(void *)(v8 + 184) = &protocol witness table for Double;
  *(double *)(v8 + 152) = a3;
  sub_1000BF77C( "statusCode=%{signpost.description:attribute,public}d, download=%{signpost.description:attribute}lu, upload=%{signpos t.description:attribute}lu, runtime=%{signpost.description:attribute}f",  186LL,  2LL,  v8);
  return swift_bridgeObjectRelease();
}

void sub_1000A330C()
{
  if ((*(_BYTE *)(v0 + *(void *)(*(void *)v0 + 120LL)) & 1) == 0)
  {
    uint64_t v2 = sub_1000A2EB4();
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = sub_10000941C(&qword_1001D0C10);
      uint64_t v7 = sub_10005A72C(v6);
      *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      uint64_t v8 = sub_1000A37C8((void *)(v0 + *(void *)(*(void *)v0 + 464LL)));
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(v8, v1);
      sub_10000941C(&qword_1001D4D18);
      uint64_t v9 = String.init<A>(describing:)(&v12);
      uint64_t v11 = v10;
      *(void *)(v7 + 56) = &type metadata for String;
      *(void *)(v7 + 64) = sub_100042FE8();
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v11;
      sub_1000A3788((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s");
      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v0 + 568LL))(v3, v4, *(double *)&v2);
    }

    sub_1000BF0F0();
  }

uint64_t sub_1000A3404()
{
  return sub_1000BF35C((void (*)(void))sub_1000A3718);
}

uint64_t sub_1000A3434(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)a1 + 480LL);
  uint64_t v4 = *(void *)(a1 + v3);
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v6 = swift_unknownObjectRetain(*(void *)(a1 + v3));
    uint64_t is_activated = nw_activity_is_activated(v6);
    if ((_DWORD)is_activated)
    {
      if (*(void *)(v5 + *(void *)(*(void *)v5 + 472LL))) {
        uint64_t v12 = 3LL;
      }
      else {
        uint64_t v12 = 2LL;
      }
      nw_activity_complete_with_reason(v4, v12);
    }

    else
    {
      static os_log_type_t.info.getter(is_activated, v8, v9, v10, v11);
      uint64_t v13 = sub_10000941C(&qword_1001D0C10);
      uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
      *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      uint64_t v20 = v4;
      swift_unknownObjectRetain(v4);
      sub_10000941C(&qword_1001D5738);
      uint64_t v15 = String.init<A>(describing:)(&v20);
      uint64_t v17 = v16;
      *(void *)(v14 + 56) = &type metadata for String;
      *(void *)(v14 + 64) = sub_100042FE8();
      *(void *)(v14 + 32) = v15;
      *(void *)(v14 + 40) = v17;
      os_log(_:dso:log:type:_:)("Ending NetworkSpan before nw_activity (%s) was activated", v19);
      swift_bridgeObjectRelease();
    }

    a1 = swift_unknownObjectRelease();
  }

  return a2(a1);
}

uint64_t sub_1000A3574(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = sub_10000941C(&qword_1001D5730);
  uint64_t inited = swift_initStackObject(v7, &v11);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D4A0;
  *(void *)(inited + 32) = 0x635F737574617473LL;
  *(void *)(inited + 40) = 0xEB0000000065646FLL;
  *(void *)(inited + 48) = [sub_1000A379C() initWithInteger:a1];
  *(void *)(inited + 56) = 0x656D69746E7572LL;
  *(void *)(inited + 64) = 0xE700000000000000LL;
  *(void *)(inited + 72) = [sub_1000A379C() initWithDouble:a3];
  *(void *)(inited + 80) = 0xD000000000000010LL;
  *(void *)(inited + 88) = 0x8000000100170BE0LL;
  *(void *)(inited + 96) = [sub_1000A379C() initWithUnsignedInt:a2];
  strcpy((char *)(inited + 104), "uploaded_bytes");
  *(_BYTE *)(inited + 119) = -18;
  *(void *)(inited + 120) = [sub_1000A379C() initWithUnsignedInt:v6];
  unint64_t v9 = sub_1000A36DC();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v9, &protocol witness table for String);
}

unint64_t sub_1000A36DC()
{
  unint64_t result = qword_1001D6680;
  if (!qword_1001D6680)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D6680);
  }

  return result;
}

uint64_t sub_1000A3718()
{
  return sub_1000A3434(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

double sub_1000A3724( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19)
{
  return sub_10000BEF0((uint64_t)&a14, v19, &a19);
}

uint64_t sub_1000A3734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  return swift_dynamicCast((uint64_t *)va, va1, v5 + 8, a4, 6LL);
}

uint64_t sub_1000A3748(uint64_t a1, uint64_t a2)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, v5, v2, v3, v4);
}

__n128 sub_1000A3760( __n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __n128 a13)
{
  __n128 result = a13;
  a1[1] = a13;
  return result;
}

uint64_t sub_1000A376C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  return sub_10000BD34((uint64_t)va);
}

uint64_t sub_1000A3774( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return sub_10000BD68((uint64_t)va);
}

uint64_t sub_1000A377C(uint64_t a1, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_1000A3788(uint64_t a1)
{
  return sub_1000BF77C(a1, 68LL, 2LL, v1);
}

id sub_1000A379C()
{
  return objc_allocWithZone(*(Class *)(v0 + 1576));
}

uint64_t sub_1000A37A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  return AnyHashable.init<A>(_:)(va);
}

uint64_t sub_1000A37B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return String.init<A>(describing:)(va);
}

uint64_t sub_1000A37BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  return String.init<A>(describing:)(va);
}

uint64_t sub_1000A37C8@<X0>(void *a1@<X8>)
{
  return swift_getObjectType(*a1);
}

uint64_t sub_1000A37D4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    swift_bridgeObjectRetain(*(void *)(*(void *)(a1 + 48) + 16 * i + 8));
    sub_1000A3BD8();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v11 >= v6) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v2 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_1000A3954()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1000A3980()
{
  return 0x200000LL;
}

uint64_t sub_1000A3988()
{
  uint64_t v1 = sub_100010BE4((uint64_t)(v0 + 2), (uint64_t)v5, 33LL);
  uint64_t v2 = v0[2];
  if (v2)
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    swift_release();
    *(void *)(v2 + 24) = 0LL;
    uint64_t v1 = swift_release();
  }

  v0[3] = 0LL;
  uint64_t v3 = sub_10004ECB8(v1);
  v0[4] = 0LL;
  return (*(uint64_t (**)(uint64_t))(*v0 + 248LL))(v3);
}

uint64_t sub_1000A39F0(uint64_t a1)
{
  return sub_1000A37D4(a1);
}

void sub_1000A3A34(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  swift_retain(v5);
  sub_10005D7B4(a1, a2);
  uint64_t v8 = v7;
  if (!v6)
  {
    sub_100010D00();
    sub_1000110A8();
    return;
  }

  if (v5)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (!v9)
    {
      sub_1000409A8();
      uint64_t v12 = v5;
      goto LABEL_17;
    }

    uint64_t v10 = *(void *)(v5 + 16);
    sub_1000409A8();
    if (v10)
    {
      uint64_t v11 = v5;
      do
      {
        uint64_t v12 = v11;
        while (1)
        {
          char v13 = sub_1000A43FC(v8);
          swift_retain(v10);
          sub_100019F70();
          uint64_t v11 = sub_1000A4444(v13);
          uint64_t v14 = *(void *)(v10 + 32);
          swift_retain(v11);
          swift_release();
          if (v14 < v9) {
            break;
          }
          sub_100019F70();
          uint64_t v10 = *(void *)(v11 + 16);
          if (!v10) {
            goto LABEL_15;
          }
        }

        swift_release();
        uint64_t v10 = *(void *)(v11 + 16);
        uint64_t v12 = v11;
      }

      while (v10);
    }

    else
    {
      uint64_t v12 = v5;
      uint64_t v11 = v5;
    }

void sub_1000A3BD8()
{
  uint64_t v1 = sub_100010BE4((uint64_t)(v0 + 2), (uint64_t)v9, 33LL);
  if (v0[3] < 1)
  {
    sub_10004ECB8(v1);
  }

  else
  {
    sub_1000A4728();
    uint64_t v3 = sub_1000A3EB0(v2);
    sub_10004ECB8(v3);
    swift_bridgeObjectRelease();
    if (v3)
    {
      sub_1000CC4D4();
      unint64_t v5 = v4 + 1024;
      if (v4 >= 0xFFFFFFFFFFFFFC00LL)
      {
        __break(1u);
      }

      else
      {
        unint64_t v6 = v0[4];
        BOOL v7 = v6 >= v5;
        uint64_t v8 = v6 - v5;
        if (v7)
        {
          v0[4] = v8;
          sub_1000A4714(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*v0 + 240));
          sub_100019F70();
          return;
        }
      }

      __break(1u);
    }
  }

void sub_1000A3C94(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_1000CC4D4();
  uint64_t v6 = v1[4];
  BOOL v7 = __CFADD__(v6, v5);
  unint64_t v8 = v6 + v5;
  if (v7)
  {
    __break(1u);
    goto LABEL_14;
  }

  unint64_t v2 = v5;
  if (v8 < 0x200000) {
    goto LABEL_10;
  }
  if (qword_1001D0530 != -1) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC60);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "!!! exceeded max cost, flushing cache !!!", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v14 = v3[4];
    BOOL v7 = __CFADD__(v14, v2);
    unint64_t v15 = v14 + v2;
    if (v7) {
      break;
    }
    BOOL v7 = v15 >= 0x200000;
    unint64_t v16 = v15 - 0x200000;
    if (!v7) {
      goto LABEL_18;
    }
    (*(void (**)(unint64_t))(*v3 + 264LL))(v16 + 1);
LABEL_10:
    sub_100010BE4((uint64_t)(v3 + 2), (uint64_t)v22, 33LL);
    sub_1000A4728();
    uint64_t v18 = sub_1000A403C(v17, a1, 1);
    sub_10004ECB8(v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v2 + 1024;
    if (v2 >= 0xFFFFFFFFFFFFFC00LL)
    {
LABEL_14:
      __break(1u);
    }

    else
    {
      uint64_t v20 = v3[4];
      BOOL v7 = __CFADD__(v20, v19);
      uint64_t v21 = v20 + v19;
      if (!v7)
      {
        v3[4] = v21;
        sub_1000A4714(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*v3 + 256LL));
        return;
      }
    }

    __break(1u);
LABEL_16:
    swift_once(&qword_1001D0530, sub_1000344F0);
  }

  __break(1u);
LABEL_18:
  __break(1u);
}

BOOL sub_1000A3E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (v2 == 1) {
    return 1LL;
  }
  uint64_t v4 = v2 - 2;
  unint64_t v5 = (unsigned __int8 *)(a1 + 33);
  uint64_t v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }

  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1000A3EB0(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (!*v1) {
    return 0LL;
  }
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain(v2);
  uint64_t v6 = 0LL;
  if (v5)
  {
    do
    {
      uint64_t v6 = v2;
      BOOL v7 = sub_1000A43FC(a1);
      swift_retain(v5);
      swift_release();
      uint64_t v2 = sub_1000A4444(v7);
      swift_release();
      uint64_t v5 = *(void *)(v2 + 16);
    }

    while (v5);
    char v8 = !v7;
  }

  else
  {
    char v8 = 1;
  }

  uint64_t v9 = *(void *)(v2 + 24);
  if (!v9 || !sub_1000A3E3C(*(void *)(v9 + 16), a1))
  {
    swift_release();
    swift_release();
    return 0LL;
  }

  uint64_t v10 = *(void *)(v9 + 24);
  if (v6)
  {
    uint64_t v11 = *(void *)(v6 + 16);
    if (v11)
    {
      uint64_t v11 = sub_1000A4444(v8);
      uint64_t v12 = swift_retain(*(void *)(v11 + 16));
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    swift_retain(v10);
    swift_release();
    if (v11)
    {
      uint64_t v14 = *(void *)(v11 + 24);
      swift_retain(v14);
      swift_release();
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    *(void *)(v6 + 24) = v14;
    swift_release();
  }

  else
  {
    *(void *)(v2 + 24) = 0LL;
    swift_retain(v10);
  }

  swift_release();
  uint64_t result = swift_release();
  uint64_t v15 = v3[1];
  BOOL v16 = __OFSUB__(v15, 1LL);
  uint64_t v17 = v15 - 1;
  if (!v16)
  {
    v3[1] = v17;
    return v10;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000A403C(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  uint64_t v7 = v3[1];
  if (!v7)
  {
    uint64_t v27 = sub_10000941C(&qword_1001D58B8);
    uint64_t v28 = swift_allocObject(v27, 32LL, 7LL);
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(void *)(v28 + 24) = a2;
    uint64_t v29 = sub_10000941C(&qword_1001D58C0);
    swift_allocObject(v29, 32LL, 7LL);
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    uint64_t v30 = sub_1000A45A0(v28);
    swift_release();
    uint64_t result = 1LL;
    *uint64_t v4 = v30;
    v4[1] = 1LL;
    return result;
  }

  uint64_t v8 = *v3;
  if (!*v3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }

  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t result = swift_retain(*v4);
  for (i = v8; v10; uint64_t v10 = *(void *)(i + 16))
  {
    char v12 = sub_1000A43FC(v6);
    swift_retain(v10);
    swift_release();
    uint64_t i = sub_1000A4444(v12);
    uint64_t result = swift_release();
  }

  uint64_t v13 = *(void *)(i + 24);
  if (!v13) {
    goto LABEL_25;
  }
  uint64_t v14 = sub_1000A4480(v6);
  if (v14 != -1)
  {
    uint64_t v16 = v14;
    unsigned __int8 v17 = v15;
    int v18 = (v15 >> 8) & 1;
    uint64_t v19 = sub_10000941C(&qword_1001D58B0);
    swift_allocObject(v19, 42LL, 7LL);
    uint64_t v20 = sub_1000A4374(v16, v17, v18);
    char v35 = sub_1000A43FC(v6);
    uint64_t v21 = sub_1000A4444(v35);
    uint64_t v22 = sub_10000941C(&qword_1001D58B8);
    uint64_t v23 = swift_allocObject(v22, 32LL, 7LL);
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(void *)(v23 + 24) = a2;
    *(void *)(v21 + 24) = v23;
    swift_retain(a2);
    swift_bridgeObjectRetain(v6);
    swift_release();
    swift_release();
    uint64_t v24 = *(void *)(v8 + 16);
    swift_retain(v8);
    for (; v24; uint64_t v24 = *(void *)(v8 + 16))
    {
      uint64_t v25 = *(void *)(v24 + 32);
      char v26 = sub_1000A43FC(v6);
      swift_retain(v24);
      swift_release();
      uint64_t v8 = sub_1000A4444(v26);
      swift_release();
    }

    swift_release();
    uint64_t v31 = *(void *)(v8 + 16);
    uint64_t v32 = sub_1000A4444(v35 ^ 1u);
    uint64_t v33 = v32;
    if (v31)
    {
      *(void *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
      swift_retain(v31);
      swift_release();
    }

    else
    {
      uint64_t v34 = *(void *)(v8 + 24);
      *(void *)(v33 + 24) = v34;
      swift_retain(v34);
      swift_release();
      swift_release();
      *(void *)(v8 + 24) = 0LL;
    }

    swift_release();
    *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    swift_release();
    uint64_t result = swift_release();
    if (!__OFADD__(v7, 1LL))
    {
      v4[1] = v7 + 1;
      return 1LL;
    }

    __break(1u);
    goto LABEL_24;
  }

  if ((a3 & 1) != 0)
  {
    swift_retain(v13);
    swift_release();
    *(void *)(v13 + 24) = a2;
    swift_retain(a2);
    swift_release();
    swift_release();
    return 1LL;
  }

  swift_release();
  return 0LL;
}

uint64_t sub_1000A4374(uint64_t a1, char a2, char a3)
{
  uint64_t v7 = sub_10000941C(&qword_1001D58C0);
  swift_allocObject(v7, 32LL, 7LL);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10005DAE4();
  swift_allocObject(v7, 32LL, 7LL);
  *(void *)(v3 + 24) = sub_10005DAE4();
  *(void *)(v3 + 32) = a1;
  *(_BYTE *)(v3 + 40) = a2;
  *(_BYTE *)(v3 + 4sub_1000A0380(v0, 1) = a3;
  return v3;
}

BOOL sub_1000A43FC(BOOL result)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 >= *(void *)(result + 16)) {
    return 0LL;
  }
  if ((v2 & 0x8000000000000000LL) == 0) {
    return (*(_BYTE *)(v1 + 40) & *(_BYTE *)(result + v2 + 32)) != 0 || *(_BYTE *)(v1 + 41) == 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A4444(char a1)
{
  uint64_t v2 = 24LL;
  if ((a1 & 1) == 0) {
    uint64_t v2 = 16LL;
  }
  return swift_retain(*(void *)(v1 + v2));
}

uint64_t sub_1000A445C(int a1)
{
  unsigned int v1 = a1 | ((a1 & 0xFE) >> 1) | (((a1 | ((a1 & 0xFE) >> 1)) & 0xFCu) >> 2);
  return (v1 | ((v1 & 0xF0) >> 4)) & ~(((v1 | ((v1 & 0xF0) >> 4)) & 0xFE) >> 1);
}

uint64_t sub_1000A4480(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(result + 16);
  if (v4 >= v3) {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v5 = *(void *)(result + 16);
  }
  if (!v5) {
    goto LABEL_7;
  }
  int v6 = *(unsigned __int8 *)(result + 32);
  int v7 = *(unsigned __int8 *)(v2 + 32);
  if (v6 != v7)
  {
    uint64_t v5 = 0LL;
    goto LABEL_10;
  }

  if (v5 == 1)
  {
LABEL_7:
    if (v3 >= v4)
    {
      if (v4 >= v3) {
        return -1LL;
      }
      uint64_t v8 = v2 + v5;
    }

    else
    {
      uint64_t v8 = result + v5;
    }

    int v9 = *(unsigned __int8 *)(v8 + 32);
LABEL_14:
    sub_1000A445C(v9);
    return v5;
  }

  if (v4 < 2)
  {
LABEL_29:
    __break(1u);
  }

  else if (v3 >= 2)
  {
    int v6 = *(unsigned __int8 *)(result + 33);
    int v7 = *(unsigned __int8 *)(v2 + 33);
    if (v6 == v7)
    {
      uint64_t v10 = 0LL;
      while (v5 - 2 != v10)
      {
        if (v4 - 2 == v10)
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }

        if (v3 - 2 == v10) {
          goto LABEL_28;
        }
        int v6 = *(unsigned __int8 *)(result + 34 + v10);
        int v7 = *(unsigned __int8 *)(v2 + 34 + v10++);
        if (v6 != v7)
        {
          uint64_t v5 = v10 + 1;
          goto LABEL_10;
        }
      }

      goto LABEL_7;
    }

    uint64_t v5 = 1LL;
LABEL_10:
    int v9 = v7 ^ v6;
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000A45A0(uint64_t a1)
{
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *(void *)(v1 + 24) = a1;
  swift_release(0LL);
  return v1;
}

uint64_t sub_1000A45C4()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for QCCritbit()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd9QCCritbit);
}

uint64_t sub_1000A4608()
{
  return sub_1000A3954();
}

uint64_t sub_1000A4628()
{
  return *(void *)(*(void *)v0 + 32LL);
}

uint64_t sub_1000A4634()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t sub_1000A465C()
{
  return sub_1000A3988();
}

uint64_t sub_1000A467C(uint64_t a1)
{
  return sub_1000A39F0(a1);
}

uint64_t sub_1000A469C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216LL))();
}

uint64_t sub_1000A46C4()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000A46E8(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(a1, a2, *a3) & 1;
}

uint64_t sub_1000A4714@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a1(v3, v2, v1);
}

void sub_1000A4728()
{
}

void sub_1000A4734(void *a1, uint64_t a2)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)) initWithFeedback:a1];
  [v5 setQueryId:a2];

  sub_1000110D4();
}

void sub_1000A4798(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata(a3)) initWithCodable:a1];
  [v5 setQueryId:a2];

  sub_1000110D4();
}

uint64_t sub_1000A47FC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_1000A4820 + 4 * byte_1001620D0[a2 >> 62]))();
}

BOOL sub_1000A4820(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0LL;
}

void *sub_1000A4848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_100009AEC();
  uint64_t v35 = v10 - v9;
  uint64_t v11 = v2 + 2;
  void v2[3] = 0LL;
  swift_unknownObjectWeakInit(v2 + 2, 0LL);
  sub_100028BD4();
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  (*(void (**)(uint64_t, void))(v16 + 104))( v14 - v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  type metadata accessor for DispatchQoS(0LL);
  sub_100009B94();
  __chkstk_darwin(v17);
  sub_100009AEC();
  uint64_t v20 = v19 - v18;
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100009B94();
  __chkstk_darwin(v23);
  sub_100009AEC();
  uint64_t v26 = v25 - v24;
  uint64_t v39 = &_swiftEmptyArrayStorage;
  unint64_t v27 = sub_1000A54A8();
  uint64_t v28 = sub_10000941C((uint64_t *)&unk_1001D3780);
  unint64_t v29 = sub_1000A54E8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v28, v29, v22, v27);
  uint64_t v30 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001CLL,  0x8000000100170EA0LL,  v20,  v26,  v15,  0LL);
  v3[5] = 0x7465756F686C6973LL;
  v3[6] = 0xEF617461645F6574LL;
  v3[3] = a2;
  v3[4] = v30;
  swift_unknownObjectWeakAssign(v11, a1);
  sub_1000A4B04(v7);
  if (sub_100010708(v7, 1LL, v8) == 1)
  {
    sub_1000145E0();
    sub_100014358(v7, &qword_1001D5ED0);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v35, v7, v8);
    uint64_t v31 = Data.init(contentsOf:options:)(v35, 0LL);
    unint64_t v33 = v32;
    sub_1000A4F2C(v31, v32);
    sub_100010A30(v31, v33);
    sub_1000145E0();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v8);
  }

  return v3;
}

uint64_t sub_1000A4B04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - v9;
  if (!swift_unknownObjectWeakLoadStrong(v2 + 16)) {
    return sub_100009654(a1, 1LL, 1LL, v4);
  }
  uint64_t v42 = a1;
  uint64_t v11 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v12 = [v11 defaultManager];
  id v45 = 0LL;
  id v13 = [v12 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:1 error:&v45];

  id v14 = v45;
  if (!v13)
  {
    id v29 = v45;
    uint64_t v30 = _convertNSErrorToError(_:)(v14);

    swift_willThrow();
LABEL_8:
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v32 = sub_100010ED4();
    sub_1000093D0(v32, (uint64_t)qword_1001EDC90);
    swift_errorRetain(v30);
    uint64_t v33 = swift_errorRetain(v30);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      uint64_t v37 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v38 = (void *)sub_100009B20(32LL);
      id v45 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_getErrorValue(v30);
      uint64_t v39 = Error.localizedDescription.getter(v44[1], v44[2]);
      uint64_t v43 = sub_1000307E0(v39, v40, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v37 + 4);
      swift_bridgeObjectRelease();
      sub_1000A2154();
      sub_1000A2154();
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "error getting path to silhouette file: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL);
      sub_100010C34((uint64_t)v38);
      sub_100010C34((uint64_t)v37);
      sub_10006B644();

      sub_1000A2154();
    }

    else
    {
      sub_10006B644();
      sub_1000A2154();
      sub_1000A2154();
      sub_1000A2154();
    }

    uint64_t v26 = v42;
    uint64_t v27 = 1LL;
    return sub_100009654(v26, v27, 1LL, v4);
  }

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);
  id v15 = v14;

  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x800000010016AB00LL, 1LL);
  sub_1000A552C();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v8, v4);
  id v16 = [v11 defaultManager];
  URL._bridgeToObjectiveC()(v17);
  uint64_t v19 = v18;
  id v45 = 0LL;
  unsigned int v20 = [v16 createDirectoryAtURL:v18 withIntermediateDirectories:1 attributes:0 error:&v45];

  id v21 = v45;
  if (!v20)
  {
    id v31 = v45;
    uint64_t v30 = _convertNSErrorToError(_:)(v21);

    swift_willThrow();
    sub_1000A552C();
    goto LABEL_8;
  }

  uint64_t v23 = *(void *)(v2 + 40);
  uint64_t v22 = *(void *)(v2 + 48);
  id v24 = v45;
  uint64_t v25 = v42;
  URL.appendingPathComponent(_:isDirectory:)(v23, v22, 0LL);
  sub_10006B644();
  sub_1000A552C();
  uint64_t v26 = v25;
  uint64_t v27 = 0LL;
  return sub_100009654(v26, v27, 1LL, v4);
}

void sub_1000A4F2C(uint64_t a1, unint64_t a2)
{
  if ((sub_1000A47FC(a1, a2) & 1) == 0)
  {
    uint64_t v3 = sub_1000A5174();
    if (v4)
    {
      uint64_t v7 = v3;
      uint64_t v8 = v4;
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
      if (Strong)
      {
        uint64_t v12 = Strong;
        id v13 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
        swift_unknownObjectRelease(v12);
        uint64_t v14 = sub_10000941C((uint64_t *)&unk_1001D32A0);
        uint64_t inited = swift_initStackObject(v14, v27);
        *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
        v26[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
        v26[1] = v16;
        AnyHashable.init<A>(_:)(v26);
        uint64_t v17 = type metadata accessor for ContextUpdate(0LL);
        *(void *)(inited + 96) = v17;
        uint64_t v18 = sub_10001B468((void *)(inited + 72));
        *uint64_t v18 = v7;
        v18[1] = v8;
        v18[2] = v9;
        v18[3] = v10;
        swift_storeEnumTagMultiPayload(v18, v17, 5LL);
        uint64_t v19 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
        sub_1000C5160((uint64_t)@"com.apple.parsecd.contextUpdate", v2, v19, v13);

        return;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v20 = sub_100010ED4();
  uint64_t v21 = sub_1000093D0(v20, (uint64_t)qword_1001EDC90);
  oslog = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter(oslog, v22);
  if (os_log_type_enabled(oslog, v23))
  {
    id v24 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)id v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v23, "error parsing silhouette data", v24, 2u);
    sub_100010C34((uint64_t)v24);
  }
}

uint64_t sub_1000A5174()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = sub_1000A5538().super.isa;
  id v18 = 0LL;
  id v2 = [v0 JSONObjectWithData:isa options:0 error:&v18];

  id v3 = v18;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v2);
    swift_unknownObjectRelease(v2);
    uint64_t v4 = sub_10000941C(qword_1001D1310);
    swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, v4, 7LL);
    uint64_t v5 = (uint64_t)v18;
    sub_10000BF3C(7104883LL, 0xE300000000000000LL, (uint64_t)v18, &v19);
    if (v20)
    {
      if ((swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v6 = (uint64_t)v18;
        goto LABEL_12;
      }
    }

    else
    {
      sub_100014358((uint64_t)&v19, (uint64_t *)&unk_1001D32C0);
    }

    uint64_t v6 = 0LL;
LABEL_12:
    sub_10000BF3C(30320LL, 0xE200000000000000LL, v5, &v19);
    swift_bridgeObjectRelease();
    if (v20) {
      swift_dynamicCast(&v18, &v19, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    }
    else {
      sub_100014358((uint64_t)&v19, (uint64_t *)&unk_1001D32C0);
    }
    return v6;
  }

  uint64_t v7 = v3;
  uint64_t v8 = _convertNSErrorToError(_:)(v3);

  swift_willThrow();
  if (qword_1001D0540 != -1) {
    swift_once(&qword_1001D0540, sub_100034544);
  }
  uint64_t v9 = sub_100010ED4();
  uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC90);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    uint64_t v14 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v13,  "Error parsing silhouette JSON, adding unparsed string instead",  v14,  2u);
    sub_100010C34((uint64_t)v14);
  }

  Class v15 = sub_1000A5538().super.isa;
  id v16 = -[objc_class base64EncodedStringWithOptions:](v15, "base64EncodedStringWithOptions:", 0LL);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  swift_errorRelease(v8);
  return v6;
}

uint64_t sub_1000A543C()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000A5468()
{
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for SilhouetteContextProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd25SilhouetteContextProvider);
}

unint64_t sub_1000A54A8()
{
  unint64_t result = qword_1001D1AD0;
  if (!qword_1001D1AD0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1AD0);
  }

  return result;
}

unint64_t sub_1000A54E8()
{
  unint64_t result = qword_1001D1AD8;
  if (!qword_1001D1AD8)
  {
    uint64_t v1 = sub_1000094A0((uint64_t *)&unk_1001D3780);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D1AD8);
  }

  return result;
}

uint64_t sub_1000A552C()
{
  return v2(v1, v0);
}

NSData sub_1000A5538()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_1000A5548()
{
  return 0x6E6F697461727564LL;
}

uint64_t sub_1000A5564()
{
  return 1701869940LL;
}

BOOL sub_1000A5574()
{
  return sub_1000A557C(*v0);
}

BOOL sub_1000A557C(char a1)
{
  if (qword_1001D0580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(qword_1001EDCF0 + 16);
    if (!v2) {
      break;
    }
    uint64_t v3 = 0LL;
    while (1)
    {
      uint64_t v4 = v3 + 1;
      if (__OFADD__(v3, 1LL)) {
        break;
      }
      if (qword_100162238[*(char *)(qword_1001EDCF0 + 32 + v3)] == qword_100162238[a1])
      {
        int v5 = *(unsigned __int8 *)(qword_1001EDCF0 + 32 + v3);
        return v5 == 45;
      }

      ++v3;
      if (v4 == v2) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0580, sub_100041410);
  }

BOOL sub_1000A5624(char a1)
{
  if (qword_1001D0640 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(qword_1001EDEA8 + 16);
    if (!v2) {
      break;
    }
    uint64_t v3 = 0LL;
    while (1)
    {
      uint64_t v4 = v3 + 1;
      if (__OFADD__(v3, 1LL)) {
        break;
      }
      if (qword_100162238[*(char *)(qword_1001EDEA8 + 32 + v3)] == qword_100162238[a1])
      {
        int v5 = *(unsigned __int8 *)(qword_1001EDEA8 + 32 + v3);
        return v5 == 45;
      }

      ++v3;
      if (v4 == v2) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0640, sub_1000D851C);
  }

uint64_t sub_1000A56CC(char a1)
{
  return qword_100162238[a1];
}

void sub_1000A56E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  switch(*(void *)(a10 + 16))
  {
    case 0LL:
      uint64_t v10 = sub_1000A5910();
      os_signpost(_:dso:log:name:signpostID:_:_:)(v10, v11, v12, v13, v14, v15, v16);
      return;
    case 1LL:
      uint64_t v17 = sub_1000A5908(&qword_1001D0C10);
      uint64_t v18 = sub_100009ACC(v17, 72LL);
      *(_OWORD *)(v18 + sub_10000BDD4(v0 + 16) = xmmword_10015C7F0;
      uint64_t v19 = v18 + 32;
      uint64_t v20 = a10 + 32;
      goto LABEL_8;
    case 2LL:
      uint64_t v21 = sub_1000A5908(&qword_1001D0C10);
      uint64_t v22 = (__n128 *)sub_100009ACC(v21, 112LL);
      sub_1000A58F8(v22, (__n128)xmmword_10015D580);
      uint64_t v19 = (uint64_t)&v22[4].n128_i64[1];
      uint64_t v20 = a10 + 72;
      goto LABEL_8;
    case 3LL:
      uint64_t v23 = sub_1000A5908(&qword_1001D0C10);
      id v24 = (__n128 *)sub_100009ACC(v23, 152LL);
      sub_1000A58F8(v24, (__n128)xmmword_10015C800);
      sub_1000A592C();
      uint64_t v19 = (uint64_t)&v24[7];
      uint64_t v20 = a10 + 112;
      goto LABEL_8;
    case 4LL:
      uint64_t v25 = sub_1000A5908(&qword_1001D0C10);
      uint64_t v26 = (__n128 *)sub_100009ACC(v25, 192LL);
      sub_1000A58F8(v26, (__n128)xmmword_10015D4A0);
      sub_1000A592C();
      sub_1000A5938();
      uint64_t v19 = (uint64_t)&v26[9].n128_i64[1];
      uint64_t v20 = a10 + 152;
      goto LABEL_8;
    case 5LL:
      uint64_t v27 = sub_1000A5908(&qword_1001D0C10);
      uint64_t v28 = (__n128 *)sub_100009ACC(v27, 232LL);
      sub_1000A58F8(v28, (__n128)xmmword_10015E970);
      sub_1000A592C();
      sub_1000A5938();
      sub_100019B20(a10 + 152, (uint64_t)&v28[9].n128_i64[1]);
      uint64_t v19 = (uint64_t)&v28[12];
      uint64_t v20 = a10 + 192;
LABEL_8:
      sub_100019B20(v20, v19);
      uint64_t v29 = sub_1000A5910();
      os_signpost(_:dso:log:name:signpostID:_:_:)(v29, v30, v31, v32, v33, v34, v35);
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }

uint64_t sub_1000A58E8()
{
  return sub_1000A56E0(*v0);
}

BOOL sub_1000A58F0()
{
  return sub_1000A5624(*v0);
}

uint64_t sub_1000A58F8(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_100019B20(v2 + 32, (uint64_t)&a1[2]);
}

uint64_t sub_1000A5908(uint64_t *a1)
{
  return sub_10000941C(a1);
}

uint64_t sub_1000A5910()
{
  return v0;
}

uint64_t sub_1000A592C()
{
  return sub_100019B20(v0 + 72, v1 + 72);
}

uint64_t sub_1000A5938()
{
  return sub_100019B20(v0 + 112, v1 + 112);
}

uint64_t type metadata accessor for MotionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd13MotionManager);
}

uint64_t sub_1000A59E0(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1(&v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000A5A34(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1(&v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000A5A88(uint64_t result)
{
  else {
    return result;
  }
}

void sub_1000A5A9C()
{
}

void sub_1000A5AA4(int a1)
{
}

void sub_1000A5AAC(uint64_t a1)
{
}

uint64_t sub_1000A5AB4@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000A5A88(*a1);
  *a2 = result;
  return result;
}

void sub_1000A5ADC(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1000A5AE8()
{
}

uint64_t sub_1000A5B20(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t sub_1000A5B60()
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  sub_100010F98();
  __chkstk_darwin(v4);
  sub_100009B6C();
  uint64_t v5 = sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v6);
  sub_10000BEB8();
  sub_1000A5C20(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v0, v1 + *(int *)(v5 + 20), v3);
  sub_10004D784(v1, type metadata accessor for SessionTokens);
  UUID.uuidString.getter(v7);
  sub_10007704C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return sub_1000A1F68();
}

uint64_t sub_1000A5C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    sub_1000A9B68(v5 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens, v2);
    return sub_100019C44(v2, a1);
  }

  else
  {
    sub_1000A14F8(v1 + 144, (uint64_t)v7);
    sub_10000C4AC();
    sub_10004A4A8(a1);
    return sub_10001683C();
  }

void sub_1000A5CB4()
{
  uint64_t v41 = v1;
  uint64_t v42 = v2;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10006B428();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 72);
  if (Strong)
  {
    uint64_t v13 = Strong;
    if (!v7)
    {
      swift_unknownObjectRelease();
      return;
    }

    uint64_t v14 = *(void *)(v3 + 80);
    id v39 = v7;
    uint64_t v15 = os_transaction_create("Feedback Payload");
    if (!v15)
    {
      swift_unknownObjectRelease();

      return;
    }

    uint64_t v38 = v15;
    uint64_t v16 = *(char **)(v13 + 32);
    if (v16)
    {
      uint64_t v37 = v14;
      id v17 = v39;
      swift_unknownObjectRetain(v16);
      uint64_t v18 = sub_1000A9CEC(v17);
      if (v19 >> 60 == 15)
      {
        Class isa = 0LL;
      }

      else
      {
        uint64_t v20 = v18;
        unint64_t v21 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v18 = sub_100010A1C(v20, v21);
      }

      ((void (*)(uint64_t))UserAgent.fullString.getter)(v18);
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v23 = isa;
      [v16 didReceiveFeedbackData:isa agent:v22];
      swift_unknownObjectRelease();

      uint64_t v14 = v37;
    }

    uint64_t v37 = *(void *)(v3 + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5,  v8);
    unint64_t v24 = (*(unsigned __int8 *)(v9 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    sub_1000ABBB4();
    uint64_t v26 = (char *)swift_allocObject(&unk_1001B6E08, v10 + 8, v25);
    *((void *)v26 + 2) = v38;
    *((void *)v26 + 3) = v13;
    *((void *)v26 + 4) = v14;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))( &v26[v24],  (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
    *(void *)&v16[(void)v26] = v3;
    *(void *)&v26[v10] = v39;
    v40[5] = sub_1000AB9AC;
    v40[6] = v26;
    v40[1] = _NSConcreteStackBlock;
    v40[2] = 1107296256LL;
    uint64_t v27 = sub_100009BBC((uint64_t)sub_1000D2F18);
    uint64_t v35 = sub_100009BA4();
    Class isa = (Class)v34;
    sub_100010F98();
    __chkstk_darwin(v28);
    sub_10000BEB8();
    id v39 = v39;
    swift_unknownObjectRetain(v38);
    swift_unknownObjectRetain(v13);
    uint64_t v29 = swift_retain(v3);
    static DispatchQoS.unspecified.getter(v29);
    uint64_t v30 = sub_100009C54();
    v34[1] = v34;
    sub_10002FBE4();
    __chkstk_darwin(v31);
    sub_100009B6C();
    unint64_t v32 = sub_1000ABB8C((uint64_t)_swiftEmptyArrayStorage);
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v33 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v40, v26, v33, v30, v32);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v24, v27);
    _Block_release(v27);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    sub_100009BC8(v24, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    (*((void (**)(char *, uint64_t))v16 + 1))(v11, v35);
    swift_release();
  }

  sub_100009AA0();
}

void sub_1000A600C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
}

void sub_1000A6048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000478B0();
  sub_1000C20C4(0LL, 0LL);
  sub_1000C27CC();
  uint64_t v13 = v12;
  swift_unknownObjectRelease();
  if (!v13) {
    goto LABEL_3;
  }
  id v14 = v13;
  uint64_t v15 = UserAgent.fullString.getter();
  uint64_t v17 = v16;
  id v18 = objc_allocWithZone(&OBJC_CLASS___PARBag);
  sub_1000C4C48(v14, v15, v17);
  uint64_t v20 = v19;
  LODWORD(v17) = [v19 feedbackEnabled];

  if ((_DWORD)v17)
  {
LABEL_3:
    objc_msgSend(a5, "whichContained_Feedback");
    sub_1000A8B50();
    if (*(_BYTE *)(a4 + 88) == 1)
    {
      uint64_t v39 = a3;
      uint64_t v42 = v5;
      swift_beginAccess(a4 + 96, v40, 0LL, 0LL);
      uint64_t v21 = *(void *)(a4 + 120);
      NSString v22 = sub_100019AFC((void *)(a4 + 96), v21);
      uint64_t v23 = *(void *)(v21 - 8);
      __chkstk_darwin(v22);
      uint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v23 + 16))(v25);
      uint64_t v26 = type metadata accessor for ClientSessionTimekeeper(0LL);
      BOOL v27 = Date.timeIntervalSinceNow.getter(v26) <= 0.0;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v21);
      uint64_t v28 = (4 * v27);
      unint64_t v29 = (unint64_t)objc_msgSend(a5, "whichContained_Feedback");
      if (v29 > 0xC)
      {
        a3 = v39;
      }

      else
      {
        a3 = v39;
        if (((1LL << v29) & 0x1900) != 0)
        {
          id v30 = [a5 resultEngagementFeedback];
          if (v30
            && (uint64_t v31 = v30, v32 = [v30 result], v31, v32))
          {
            unsigned int v33 = [v32 type];

            if (v33 - 15 >= 3) {
              uint64_t v28 = 5LL;
            }
            else {
              uint64_t v28 = v28;
            }
          }

          else
          {
            uint64_t v28 = 5LL;
          }
        }
      }
    }

    else
    {
      uint64_t v28 = 0LL;
    }

    uint64_t v34 = type metadata accessor for UserAgent(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16LL))(v11, a3, v34);
    sub_100009654((uint64_t)v11, 0LL, 1LL, v34);
    sub_1000A6620((uint64_t)a5, (uint64_t)v11, v28);
    sub_100019C1C((uint64_t)v11, (uint64_t *)&unk_1001D5D20);
    uint64_t v35 = a4 + 96;
    swift_beginAccess(a4 + 96, v41, 33LL, 0LL);
    uint64_t v37 = *(void *)(a4 + 120);
    uint64_t v36 = *(void *)(a4 + 128);
    sub_1000AB9E8(v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v36 + 104))(v37, v36);
    swift_endAccess(v41);
  }

uint64_t sub_1000A6388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(dispatch_queue_s **)(v2 + 48);
  uint64_t v7 = (void *)swift_allocObject(&unk_1001B6D90, 40LL, 7LL);
  v7[2] = v2;
  v7[3] = a1;
  v7[4] = a2;
  uint64_t v8 = swift_allocObject(&unk_1001B6DB8, 32LL, 7LL);
  *(void *)(v8 + sub_10000BDD4(v0 + 16) = sub_1000AB918;
  *(void *)(v8 + 24) = v7;
  v11[4] = sub_10001B040;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_10007B5C8;
  v11[3] = &unk_1001B6DD0;
  uint64_t v9 = _Block_copy(v11);
  swift_retain(v3);
  sub_100026250(a1, a2);
  sub_10000C4AC();
  sub_10005A8E0();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v8, "", 91LL, 151LL, 31LL, 1LL);
  sub_100010D00();
  uint64_t result = sub_10001683C();
  return result;
}

void sub_1000A64C0(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UserAgent(0LL);
  sub_100009654((uint64_t)v5, 1LL, 1LL, v6);
  sub_1000A6620(0LL, (uint64_t)v5, 3LL);
  sub_100019C1C((uint64_t)v5, (uint64_t *)&unk_1001D5D20);
  if (a2) {
    a2();
  }
}

void sub_1000A6578()
{
  id v0 = [objc_allocWithZone(_CPConnectionInvalidatedFeedback) init];
  if (v0)
  {
    id v2 = v0;
    id v1 = [objc_allocWithZone(_CPFeedbackPayload) initWithCodable:v0];
    [v1 setQueryId:0];
    if (v1)
    {
      sub_1000A5CB4();

      sub_10006B3DC(v1);
    }

    else
    {
      sub_10006B3DC(v2);
    }
  }

uint64_t sub_1000A6620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a3;
  uint64_t v65 = a1;
  uint64_t v7 = type metadata accessor for Requestor(0LL);
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  sub_100027160();
  __chkstk_darwin(v8);
  type metadata accessor for Client(0LL);
  sub_100009B94();
  __chkstk_darwin(v9);
  sub_100009AD4();
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v10);
  sub_100032C48();
  uint64_t v63 = v11;
  __chkstk_darwin(v12);
  id v14 = (os_log_s *)((char *)&v63 - v13);
  uint64_t v15 = sub_10006B428();
  uint64_t v70 = *(void *)(v15 - 8);
  sub_100027160();
  __chkstk_darwin(v16);
  sub_100032C48();
  uint64_t v64 = v17;
  __chkstk_darwin(v18);
  uint64_t v69 = (uint64_t)&v63 - v19;
  uint64_t v20 = sub_100047134();
  sub_10005A368();
  __chkstk_darwin(v21);
  sub_100010FCC();
  uint64_t v71 = v3;
  NSString v22 = (void *)*((void *)v3 + 6);
  *(void *)uint64_t v4 = v22;
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v20);
  id v23 = v22;
  uint64_t v24 = _dispatchPreconditionTest(_:)(v4);
  sub_10007704C(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    swift_once(&qword_1001D0500, sub_100034420);
LABEL_22:
    uint64_t v36 = sub_100010ED4();
    sub_100010E78(v36, (uint64_t)qword_1001EDBD0);
    os_log_type_t v37 = sub_100014588();
    if (sub_100010DE4(v37))
    {
      uint64_t v38 = (uint8_t *)sub_100009B20(5LL);
      *(_DWORD *)uint64_t v38 = 16777472;
      uint64_t v4 = v70;
      LOBYTE(v73[0]) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v73, (char *)v73 + 1, v38 + 4);
      _os_log_impl((void *)&_mh_execute_header, v3, (os_log_type_t)v14, "External event received %hhu", v38, 5u);
      sub_100010C34((uint64_t)v38);
    }

void sub_1000A6FB0()
{
  uint64_t v3 = v2;
  sub_100047134();
  sub_1000ABAA8();
  __chkstk_darwin(v4);
  sub_10000BEB8();
  uint64_t v5 = *(void **)(v0 + 48);
  *id v1 = v5;
  sub_1000ABA54(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v5;
  sub_1000ABBAC();
  sub_1000ABA38();
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = *(void *)(v0 + 16);
    *(_BYTE *)(v0 + 88) = 2;
    if (v8)
    {
      swift_unknownObjectRetain(v8);
      sub_100017C98();
      swift_unknownObjectRelease();
    }

    sub_1000A70E0();
    sub_1000A5B20(0LL, 0LL);
    if (*(void *)(v0 + 32))
    {
      sub_10000C4AC();
      sub_1000B1BAC();
      sub_10001683C();
    }

    *(void *)(v0 + sub_10000BDD4(v0 + 16) = 0LL;
    *(void *)(v0 + 24) = 0LL;
    swift_unknownObjectRelease();
    sub_1000A70A4();
    if (v3) {
      v3();
    }
    sub_10002FBC0();
  }

  else
  {
    __break(1u);
  }

void sub_1000A70A4()
{
  id v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16LL);
  os_unfair_lock_lock(v1);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = 0LL;
  swift_unknownObjectRelease(v2);
  os_unfair_lock_unlock(v1);
}

void sub_1000A70E0()
{
  uint64_t v2 = v0;
  char v4 = v3;
  sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_10005F878();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - v10;
  sub_100047134();
  sub_1000ABAA8();
  __chkstk_darwin(v12);
  sub_1000ABA88(v13, v19);
  sub_1000ABA54(v14, enum case for DispatchPredicate.onQueue(_:));
  id v15 = v1;
  sub_1000ABBAC();
  sub_1000ABA38();
  if ((v1 & 1) != 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 72);
    sub_100016844(Strong, (uint64_t)v11);
    sub_1000A14F8(v2 + 144, (uint64_t)&v20);
    uint64_t v17 = *(void *)(v2 + 144);
    sub_1000A9B68((uint64_t)v11, v8);
    swift_retain(v17);
    sub_10004B6AC(v8);
    uint64_t v18 = swift_release();
    sub_1000ABC00(v18, type metadata accessor for SessionTokens);
    *(_BYTE *)(v2 + 152) = (v4 & 1) == 0;
    sub_10002FBC0();
  }

  else
  {
    __break(1u);
  }

void sub_1000A71EC()
{
  char v3 = v0;
  uint64_t v71 = v4;
  uint64_t v6 = v5;
  sub_10000941C((uint64_t *)&unk_1001D36B0);
  sub_100009B94();
  __chkstk_darwin(v7);
  sub_10006B61C();
  uint64_t v72 = (uint64_t *)sub_10006B428();
  uint64_t v70 = *(v72 - 1);
  uint64_t v8 = *(void *)(v70 + 64);
  __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A15C0();
  sub_100009B94();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100032C48();
  uint64_t v67 = (uint64_t *)v12;
  __chkstk_darwin(v13);
  uint64_t v73 = (uint64_t)&v59 - v14;
  uint64_t v15 = sub_100047134();
  sub_1000ABAA8();
  __chkstk_darwin(v16);
  sub_100019EB4();
  uint64_t v17 = (void *)v0[6];
  void *v0 = v17;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v0, enum case for DispatchPredicate.onQueue(_:), v15);
  id v68 = v17;
  unint64_t v18 = _dispatchPreconditionTest(_:)(v0);
  sub_10007704C((uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1001D0500, sub_100034420);
    goto LABEL_6;
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 9);
  if (!Strong) {
    goto LABEL_10;
  }
  uint64_t v20 = Strong;
  uint64_t v65 = v8;
  sub_1000A78D0();
  uint64_t v1 = v73;
  sub_1000A8E50();
  uint64_t v21 = v0[7];
  unint64_t v18 = v3[8];
  swift_bridgeObjectRetain(v18);
  swift_unknownObjectRetain(v20);
  uint64_t v63 = (uint64_t *)v21;
  SessionType.init(withClientIdentifier:)(v21, v18);
  uint64_t v64 = *(void (**)(char *, uint64_t *, uint64_t *))(v70 + 16);
  v64(v69, v71, v72);
  sub_1000A9B68(v1, v2);
  sub_100009654(v2, 0LL, 1LL, v10);
  uint64_t v22 = type metadata accessor for ClientSession(0LL);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  id v23 = v6;
  uint64_t v66 = v20;
  sub_1000A1F68();
  uint64_t v24 = sub_1000AA00C();
  uint64_t v25 = &off_1001B1CF8;
  if (!v24) {
    uint64_t v25 = 0LL;
  }
  v3[2] = v24;
  v3[3] = v25;
  swift_unknownObjectRelease();
  uint64_t v15 = sub_1000A5B60();
  uint64_t v6 = v26;
  if (qword_1001D0500 != -1) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v27 = sub_100010ED4();
  uint64_t v28 = sub_1000093D0(v27, (uint64_t)qword_1001EDBD0);
  uint64_t v29 = (uint64_t)v67;
  sub_1000A9B68(v1, (uint64_t)v67);
  swift_bridgeObjectRetain_n(v6, 2LL);
  uint64_t v30 = sub_1000ABBE8();
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = sub_100009B20(32LL);
    uint64_t v62 = sub_100009B20(64LL);
    v75[0] = v62;
    *(_DWORD *)uint64_t v33 = 136315650;
    swift_bridgeObjectRetain(v6);
    uint64_t v76 = sub_1000307E0(v15, (unint64_t)v6, v75);
    sub_1000ABB50();
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v33 + 12) = 2080;
    swift_bridgeObjectRetain(v18);
    uint64_t v76 = sub_1000307E0((uint64_t)v63, v18, v75);
    sub_1000ABB50();
    sub_1000ABA64();
    uint64_t v34 = swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2048;
    uint64_t v28 = v29;
    uint64_t v76 = Date.timeIntervalSinceNow.getter(v34);
    uint64_t v35 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v33 + 24);
    sub_10004D784(v29, type metadata accessor for SessionTokens);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "new session id %s %s guidStarted: %f", (uint8_t *)v33, 0x20u);
    uint64_t v36 = v62;
    swift_arrayDestroy(v62, 2LL);
    sub_100010C34(v36);
    sub_100010C34(v33);
  }

  else
  {
    sub_1000ABA64();
    swift_bridgeObjectRelease_n(v6, 2LL);
    sub_10004D784(v29, type metadata accessor for SessionTokens);

    uint64_t v35 = v15;
  }

  sub_1000A14F8((uint64_t)(v3 + 12), (uint64_t)&v76);
  uint64_t v37 = v3[15];
  uint64_t v38 = sub_100019AFC(v3 + 12, v37);
  uint64_t v67 = &v59;
  uint64_t v39 = *(void *)(v37 - 8);
  __chkstk_darwin(v38);
  sub_100019EB4();
  sub_10005F8E4(v28, v40, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
  uint64_t v62 = type metadata accessor for DispatchTime(0LL);
  uint64_t v63 = &v59;
  uint64_t v61 = *(void *)(v62 - 8);
  sub_100027160();
  __chkstk_darwin(v41);
  sub_100014428();
  uint64_t v60 = v42;
  sub_1000A9704();
  sub_100009BC8(v28, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
  uint64_t v43 = sub_10006B2D0((uint64_t)&unk_1001B6C50);
  sub_1000ABBC8(v43);
  uint64_t v44 = (uint64_t)v69;
  uint64_t v45 = (uint64_t)v72;
  v64(v69, v71, v72);
  uint64_t v46 = v70;
  uint64_t v47 = *(unsigned __int8 *)(v70 + 80);
  uint64_t v48 = (v47 + 40) & ~v47;
  uint64_t v49 = (void *)swift_allocObject(&unk_1001B6D40, v48 + v65, v47 | 7);
  v49[2] = v43;
  v49[3] = v35;
  v49[4] = v6;
  sub_10005F8E4((uint64_t)v49 + v48, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 32));
  v75[4] = (uint64_t)sub_1000AA68C;
  v75[5] = (uint64_t)v49;
  v75[0] = (uint64_t)_NSConcreteStackBlock;
  v75[1] = 1107296256LL;
  uint64_t v50 = sub_1000ABBA0((uint64_t)sub_1000D2F18);
  uint64_t v51 = sub_100009BA4();
  uint64_t v72 = &v59;
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  sub_100010FCC();
  uint64_t v53 = swift_retain(v43);
  static DispatchQoS.unspecified.getter(v53);
  uint64_t v54 = sub_100009C54();
  uint64_t v71 = &v59;
  sub_10002FBE4();
  __chkstk_darwin(v55);
  sub_1000270AC();
  uint64_t v74 = _swiftEmptyArrayStorage;
  unint64_t v56 = sub_100019CD0();
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v57 = sub_10007720C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v48, v57, v54, v56);
  uint64_t v58 = v60;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v60, v45, v3, v50);
  _Block_release(v50);
  swift_unknownObjectRelease();
  (*((void (**)(void *, uint64_t))v31 + 1))(v3, v54);
  sub_10007704C(v45, *(uint64_t (**)(uint64_t, uint64_t))(v52 + 8));
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v58, v62);
  sub_10004D784(v73, type metadata accessor for SessionTokens);
  swift_release();
  sub_100010D00();
LABEL_10:
  sub_100009AA0();
}

void sub_1000A78D0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16LL);
  os_unfair_lock_lock(v1);
  uint64_t v2 = os_transaction_create("NewFeedbackSession");
  uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v0 + 24) = v2;
  swift_unknownObjectRelease(v3);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000A791C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v26, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = sub_1000A5B60();
    unint64_t v10 = v9;
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v11, (uint64_t)qword_1001EDBD0);
    swift_bridgeObjectRetain_n(a3, 2LL);
    swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v12 = swift_retain_n(v7, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v23 = swift_slowAlloc(96LL, -1LL);
      uint64_t v25 = v23;
      *(_DWORD *)uint64_t v15 = 136315650;
      swift_bridgeObjectRetain(a3);
      uint64_t v24 = sub_1000307E0(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain(v10);
      uint64_t v24 = sub_1000307E0(v8, v10, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 14);
      swift_bridgeObjectRelease_n(v10, 3LL);
      *(_WORD *)(v15 + 22) = 2080;
      os_log_type_t type = v14;
      uint64_t v16 = v8;
      uint64_t v17 = a2;
      uint64_t v18 = *(void *)(v7 + 56);
      unint64_t v19 = *(void *)(v7 + 64);
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = sub_1000307E0(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 24);
      swift_release_n(v7, 2LL);
      a2 = v17;
      uint64_t v8 = v16;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v13,  type,  "soft limit reached expected %s current %s %s",  (uint8_t *)v15,  0x20u);
      swift_arrayDestroy(v23, 3LL);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v7, 2LL);
      swift_bridgeObjectRelease_n(v10, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    if (v8 == a2 && v10 == a3)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v8, v10, 0LL);
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        return swift_release();
      }
    }

    sub_1000A7C3C();
    return swift_release();
  }

  return result;
}

void sub_1000A7C3C()
{
  uint64_t v2 = v0;
  uint64_t v62 = v3;
  uint64_t v4 = sub_10006B428();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v61 = v6;
  uint64_t v7 = (uint64_t (**)(uint64_t, uint64_t))((char *)&v52 - (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10000941C((uint64_t *)&unk_1001D5D20);
  sub_100009B94();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100047134();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100009AD4();
  uint64_t v13 = (void *)v2[6];
  *uint64_t v1 = (uint64_t)v13;
  (*(void (**)(uint64_t *, void, uint64_t))(v12 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v11);
  id v14 = v13;
  unint64_t v15 = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v1, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1001D0500, sub_100034420);
    goto LABEL_4;
  }

  if (!v2[2]) {
    goto LABEL_10;
  }
  uint64_t v1 = *(uint64_t **)(v5 + 16);
  sub_1000ABC08((uint64_t)v10);
  sub_100009654((uint64_t)v10, 0LL, 1LL, v4);
  sub_1000A6620(0LL, v10, 1LL);
  sub_100019C1C((uint64_t)v10, (uint64_t *)&unk_1001D5D20);
  uint64_t v12 = sub_1000A5B60();
  unint64_t v15 = v16;
  if (qword_1001D0500 != -1) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v17 = sub_100010ED4();
  sub_1000093D0(v17, (uint64_t)qword_1001EDBD0);
  swift_bridgeObjectRetain_n(v15, 2LL);
  uint64_t v18 = sub_1000ABBE8();
  unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  int v21 = v20;
  BOOL v22 = os_log_type_enabled(v19, v20);
  unint64_t v59 = v15;
  id v60 = v14;
  uint64_t v58 = v12;
  if (v22)
  {
    uint64_t v23 = sub_100009B20(22LL);
    LODWORD(v56) = v21;
    uint64_t v24 = v23;
    uint64_t v55 = sub_100009B20(64LL);
    v64[0] = v55;
    *(_DWORD *)uint64_t v24 = 136315394;
    swift_bridgeObjectRetain(v15);
    uint64_t v65 = sub_1000307E0(v12, v15, v64);
    sub_1000ABB40();
    swift_bridgeObjectRelease_n(v15, 3LL);
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v25 = v7;
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    unint64_t v57 = v1;
    uint64_t v28 = v2[7];
    sub_100010DFC();
    uint64_t v29 = v28;
    uint64_t v5 = v27;
    uint64_t v4 = v26;
    uint64_t v7 = v25;
    uint64_t v65 = sub_1000ABBE0(v29, v30, v64);
    sub_1000ABB40();
    sub_1000ABA64();
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v19,  (os_log_type_t)v56,  "soft limit reached, maxtimer session id %s %s",  (uint8_t *)v24,  0x16u);
    uint64_t v31 = v55;
    swift_arrayDestroy(v55, 2LL);
    sub_100010C34(v31);
    sub_100010C34(v24);
  }

  else
  {

    sub_1000ABA64();
    swift_bridgeObjectRelease_n(v15, 2LL);
  }

  uint64_t v32 = v2[4];
  if (v32)
  {
    sub_10000C4AC();
    sub_1000B1BAC();
    sub_10001683C();
  }

  sub_1000A14F8((uint64_t)(v2 + 12), (uint64_t)&v65);
  uint64_t v33 = v2[15];
  uint64_t v34 = sub_100019AFC(v2 + 12, v33);
  unint64_t v57 = &v52;
  uint64_t v35 = *(void *)(v33 - 8);
  __chkstk_darwin(v34);
  sub_100019EB4();
  sub_10005F8E4(v32, v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16));
  uint64_t v55 = type metadata accessor for DispatchTime(0LL);
  unint64_t v56 = &v52;
  uint64_t v54 = *(void *)(v55 - 8);
  sub_100027160();
  __chkstk_darwin(v37);
  sub_100014428();
  uint64_t v53 = v38;
  sub_1000A9614();
  sub_100009BC8(v32, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
  uint64_t v39 = sub_10006B2D0((uint64_t)&unk_1001B6C50);
  sub_1000ABBC8(v39);
  sub_1000ABC08((uint64_t)v7);
  uint64_t v40 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v41 = (v40 + 40) & ~v40;
  uint64_t v42 = (char *)swift_allocObject(&unk_1001B6CF0, (char *)v61 + v41, v40 | 7);
  uint64_t v43 = v58;
  *((void *)v42 + 2) = v39;
  *((void *)v42 + 3) = v43;
  *((void *)v42 + 4) = v59;
  (*(void (**)(char *, uint64_t (**)(uint64_t, uint64_t), uint64_t))(v5 + 32))(&v42[v41], v7, v4);
  v64[4] = (uint64_t)sub_1000A9CE0;
  v64[5] = (uint64_t)v42;
  v64[0] = (uint64_t)_NSConcreteStackBlock;
  v64[1] = 1107296256LL;
  uint64_t v44 = sub_1000ABBA0((uint64_t)sub_1000D2F18);
  sub_100009BA4();
  uint64_t v62 = &v52;
  sub_10005A368();
  __chkstk_darwin(v45);
  sub_100009B54();
  uint64_t v46 = swift_retain(v39);
  static DispatchQoS.unspecified.getter(v46);
  uint64_t v47 = sub_100009C54();
  uint64_t v61 = &v52;
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  sub_1000270AC();
  uint64_t v63 = _swiftEmptyArrayStorage;
  sub_100019CD0();
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v49 = sub_10007720C();
  sub_1000ABA70((uint64_t)&v63, v50, v49);
  uint64_t v51 = v53;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v53, v35, v2, v44);
  _Block_release(v44);
  sub_1000ABA4C((uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
  sub_1000ABAC0(v7[1]);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v51, v55);
  swift_release();
  sub_100010D00();
LABEL_10:
  sub_100009AA0();
}

uint64_t sub_1000A8194(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v32, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = sub_1000A5B60();
    unint64_t v15 = v14;
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v16, (uint64_t)qword_1001EDBD0);
    swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v17 = swift_bridgeObjectRetain_n(v15, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(64LL, -1LL);
      uint64_t v29 = a4;
      uint64_t v27 = v21;
      uint64_t v31 = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v30 = sub_1000307E0(a2, a3, &v31);
      uint64_t v28 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 4);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain(v15);
      uint64_t v30 = sub_1000307E0(v13, v15, &v31);
      unint64_t v10 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v20 + 14);
      swift_bridgeObjectRelease_n(v15, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "max timer expired expected %s current %s",  (uint8_t *)v20,  0x16u);
      uint64_t v22 = v27;
      swift_arrayDestroy(v27, 2LL);
      uint64_t v23 = v22;
      a4 = v29;
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v15, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    if (v13 == a2 && v15 == a3)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, v13, v15, 0LL);
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0) {
        goto LABEL_16;
      }
    }

    if (!*(void *)(v12 + 16)) {
      return swift_release();
    }
    uint64_t v26 = type metadata accessor for UserAgent(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))(v10, a4, v26);
    sub_100009654((uint64_t)v10, 0LL, 1LL, v26);
    sub_1000A6620(0LL, v10, 2LL);
    sub_100019C1C((uint64_t)v10, (uint64_t *)&unk_1001D5D20);
LABEL_16:
    if (*(void *)(v12 + 32))
    {
      swift_retain(*(void *)(v12 + 32));
      sub_1000B1BAC();
      swift_release();
    }

    return swift_release();
  }

  return result;
}

void sub_1000A84F8()
{
  uint64_t v2 = v1;
  uint64_t v24 = v3;
  uint64_t v5 = v4;
  uint64_t v6 = sub_100010ED4();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v0 + 48);
  sub_1000A1C7C((uint64_t)v9, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16) & ~v10;
  unint64_t v12 = (v8 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1001B6CA0, v14 + 8, v10 | 7);
  sub_1000A1C7C(v15 + v11, (uint64_t)v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
  *(void *)(v15 + v12) = v0;
  *(void *)(v15 + v13) = v5;
  *(void *)(v15 + v14) = v24;
  void v26[5] = sub_1000A9C5C;
  v26[6] = v15;
  v26[1] = _NSConcreteStackBlock;
  void v26[2] = 1107296256LL;
  uint64_t v16 = sub_100009BBC((uint64_t)sub_1000D2F18);
  sub_100009BA4();
  sub_10002FBE4();
  __chkstk_darwin(v17);
  sub_100009B54();
  uint64_t v18 = sub_10000C4AC();
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v19 = sub_100009C54();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  sub_1000270AC();
  sub_1000ABB8C((uint64_t)_swiftEmptyArrayStorage);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v21 = sub_10007720C();
  sub_1000ABA70((uint64_t)v26, v22, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v5, v12, v16);
  _Block_release(v16);
  sub_1000ABA4C(v12, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  sub_1000ABAC0(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  swift_release();
  sub_100009AA0();
}

void sub_1000A86C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SessionTokens(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_retain_n(a2, 2LL);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v15 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v15))
  {
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = a4;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = a3;
    uint64_t v19 = v18;
    uint64_t v29 = v18;
    *(_DWORD *)uint64_t v17 = 136446722;
    uint64_t v24 = v17 + 4;
    sub_1000A5C20((uint64_t)v9);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v9[*(int *)(v7 + 20)], v10);
    sub_10004D784((uint64_t)v9, type metadata accessor for SessionTokens);
    unint64_t v20 = sub_1000A9C9C();
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v10, v20);
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v28 = sub_1000307E0(v21, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v24);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2050;
    uint64_t v28 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 14);
    *(_WORD *)(v17 + 22) = 2050;
    uint64_t v28 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 24);
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v15,  "Client session uuid: %{public}s requestId: %{public}llu queryId: %{public}llu",  (uint8_t *)v17,  0x20u);
    swift_arrayDestroy(v19, 1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_release_n(a2, 2LL);
  }
}

void sub_1000A896C()
{
}

void sub_1000A8980(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SessionTokens(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000A8B50();
  sub_1000A5C20((uint64_t)v4);
  uint64_t v5 = &v4[*(int *)(v2 + 20)];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, v5, v6);
  sub_10004D784((uint64_t)v4, type metadata accessor for SessionTokens);
}

void sub_1000A8A40()
{
}

void sub_1000A8A54()
{
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = sub_100047134();
  sub_10002FBE4();
  __chkstk_darwin(v10);
  sub_1000270AC();
  uint64_t v11 = *(void **)(v0 + 48);
  *uint64_t v1 = v11;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, enum case for DispatchPredicate.notOnQueue(_:), v9);
  v11;
  char v12 = _dispatchPreconditionTest(_:)(v1);
  sub_1000ABA4C((uint64_t)v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  if ((v12 & 1) != 0)
  {
    uint64_t v13 = v6(0LL);
    OS_dispatch_queue.sync<A>(execute:)(v8, v4, v0, v13);
    sub_100009AA0();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000A8B10@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A5C20(a1);
}

void sub_1000A8B50()
{
  uint64_t v2 = v0;
  int v33 = v3;
  sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_10005F878();
  uint64_t v7 = v5 - v6;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v32[-v10];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v32[-v13];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = &v32[-v16];
  __chkstk_darwin(v15);
  uint64_t v19 = &v32[-v18];
  uint64_t v20 = sub_100047134();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  sub_10006B61C();
  unint64_t v22 = *(void **)(v2 + 48);
  *uint64_t v1 = v22;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v20);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v1);
  (*(void (**)(void *, uint64_t))(v21 + 8))(v1, v20);
  if ((v22 & 1) != 0)
  {
    uint64_t v24 = *(void *)(v2 + 16);
    if (!v24)
    {
      sub_1000A14F8(v2 + 96, (uint64_t)v34);
      sub_100019B20(v2 + 96, (uint64_t)v36);
      sub_1000ABBF4();
      sub_1000A14F8(v2 + 144, (uint64_t)v35);
      sub_10000C4AC();
      sub_10004A4A8(v7);
      sub_10001683C();
      BOOL v29 = sub_1000A97F4(v7);
      sub_10004D784(v7, type metadata accessor for SessionTokens);
      if (v29)
      {
        sub_1000ABAB8();
      }

      else
      {
        if ((v33 & 1) == 0)
        {
          sub_1000ABAB8();
          goto LABEL_17;
        }

        char v31 = *(_BYTE *)(v2 + 152);
        sub_1000ABAB8();
        if ((v31 & 1) == 0) {
          goto LABEL_17;
        }
      }

      sub_1000A70E0();
LABEL_17:
      sub_100009AA0();
      return;
    }

    sub_1000A9B68(v24 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens, (uint64_t)v17);
    uint64_t v25 = sub_1000A1F68();
    sub_100019C44(v25, v26);
    sub_1000A14F8(v2 + 96, (uint64_t)v35);
    sub_100019B20(v2 + 96, (uint64_t)v36);
    sub_1000ABBF4();
    BOOL v27 = sub_1000A97F4((uint64_t)v19);
    sub_1000A9B68((uint64_t)v19, (uint64_t)v14);
    if (v27)
    {
      sub_10004D784((uint64_t)v14, type metadata accessor for SessionTokens);
      sub_1000ABAB8();
    }

    else
    {
      sub_1000A9B68((uint64_t)v14, (uint64_t)v11);
      if ((v33 & 1) == 0)
      {
        sub_10004D784((uint64_t)v11, type metadata accessor for SessionTokens);
        sub_10004D784((uint64_t)v14, type metadata accessor for SessionTokens);
        uint64_t v28 = sub_1000ABAB8();
        goto LABEL_16;
      }

      sub_100019B20(v2 + 96, (uint64_t)v34);
      sub_100019AFC(v34, v34[3]);
      BOOL v30 = sub_1000A98F8((uint64_t)v11);
      sub_10004D784((uint64_t)v11, type metadata accessor for SessionTokens);
      sub_10004D784((uint64_t)v14, type metadata accessor for SessionTokens);
      sub_1000108B8(v34);
      uint64_t v28 = sub_1000ABAB8();
      if (!v30) {
        goto LABEL_16;
      }
    }

    sub_1000A6FB0();
LABEL_16:
    sub_1000ABC00(v28, type metadata accessor for SessionTokens);
    goto LABEL_17;
  }

  __break(1u);
}

void sub_1000A8E50()
{
  uint64_t v2 = v0;
  char v4 = v3;
  uint64_t v6 = v5;
  sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100047134();
  sub_1000ABAA8();
  __chkstk_darwin(v10);
  sub_1000ABA88(v11, v16);
  sub_1000ABA54(v12, enum case for DispatchPredicate.onQueue(_:));
  id v13 = v1;
  sub_1000ABBAC();
  sub_1000ABA38();
  if ((v1 & 1) != 0)
  {
    if (*(_BYTE *)(v2 + 152) != 1) {
      goto LABEL_6;
    }
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    sub_1000A14F8(v2 + 96, (uint64_t)&v18);
    sub_100019B20(v2 + 96, (uint64_t)v19);
    sub_100019AFC(v19, v19[3]);
    sub_1000A14F8(v2 + 144, (uint64_t)&v17);
    sub_10000C4AC();
    sub_10004A4A8((uint64_t)v9);
    sub_10001683C();
    BOOL v14 = sub_1000A9A2C((uint64_t)v9);
    sub_1000ABC00(v14, type metadata accessor for SessionTokens);
    sub_1000108B8(v19);
    if (v14)
    {
LABEL_5:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 72);
      sub_100016844(Strong, v6);
    }

    else
    {
LABEL_6:
      sub_1000A14F8(v2 + 144, (uint64_t)v19);
      sub_10000C4AC();
      sub_10004A4A8(v6);
      sub_10001683C();
      sub_1000A70E0();
    }

    sub_10002FBC0();
  }

  else
  {
    __break(1u);
  }

void sub_1000A8FB0()
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  sub_100010F98();
  __chkstk_darwin(v5);
  sub_10005F878();
  uint64_t v8 = v6 - v7;
  __chkstk_darwin(v9);
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16LL);
  os_unfair_lock_lock(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v8, v3, v4);
  swift_beginAccess(v0 + 16, v11, 33LL, 0LL);
  sub_100057CC0();
  swift_endAccess(v11);
  sub_1000ABAC0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  os_unfair_lock_unlock(v10);
  sub_10002FBC0();
}

void sub_1000A907C()
{
  uint64_t v4 = v0;
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v5 + 32);
  v17[6] = v5;
  v17[7] = v7;
  if ((sub_1000A59E0((void (*)(uint64_t *__return_ptr))sub_1000A95C8) & 1) != 0)
  {
    v17[3] = *(void *)(v4 + 48);
    uint64_t v8 = sub_10006B2D0((uint64_t)&unk_1001B6C50);
    swift_weakInit(v8 + 16, v4);
    v18[5] = sub_1000A95F4;
    v18[6] = v8;
    v18[1] = _NSConcreteStackBlock;
    v18[2] = 1107296256LL;
    uint64_t v9 = sub_100009BBC((uint64_t)sub_1000D2F18);
    uint64_t v10 = sub_100009BA4();
    v17[2] = v17;
    uint64_t v11 = *(void *)(v10 - 8);
    __chkstk_darwin(v10);
    sub_10000BEB8();
    uint64_t v12 = swift_retain(v8);
    static DispatchQoS.unspecified.getter(v12);
    uint64_t v13 = sub_100009C54();
    v17[1] = v17;
    sub_10005A368();
    __chkstk_darwin(v14);
    sub_100009AD4();
    unint64_t v15 = sub_1000ABB8C((uint64_t)_swiftEmptyArrayStorage);
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v16 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v18, v6, v16, v13, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v1, v2, v9);
    _Block_release(v9);
    sub_10003D850(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_100009BC8(v1, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
    sub_100010D00();
    sub_10001683C();
  }

  sub_100009AA0();
}

uint64_t sub_1000A9218(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1000A6FB0();
    return swift_release();
  }

  return result;
}

uint64_t sub_1000A9278()
{
  swift_bridgeObjectRelease();
  sub_10000BDD4(v0 + 72);
  sub_1000108B8((void *)(v0 + 96));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000A92D4()
{
  return swift_deallocClassInstance(v0, 153LL, 7LL);
}

uint64_t type metadata accessor for ClientSessionManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd20ClientSessionManager);
}

void sub_1000A9314()
{
  v0[2] = _swiftEmptySetSingleton;
  v0[3] = 0LL;
  uint64_t v1 = type metadata accessor for Locker();
  uint64_t v2 = sub_10006B2D0(v1);
  uint64_t v3 = (_DWORD *)sub_100009B20(4LL);
  *(void *)(v2 + sub_10000BDD4(v0 + 16) = v3;
  *uint64_t v3 = 0;
  v0[4] = v2;
  sub_100009A90();
}

void sub_1000A935C(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  __chkstk_darwin(v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess(a1 + 16, v11, 33LL, 0LL);
  sub_100059540();
  swift_endAccess(v11);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  int v8 = sub_100010708((uint64_t)v6, 1LL, v7);
  sub_100019C1C((uint64_t)v6, (uint64_t *)&unk_1001D5D10);
  BOOL v9 = v8 != 1 && !*(void *)(*(void *)(a1 + 16) + 16LL) && *(void *)(a1 + 24) != 0LL;
  *a2 = v9;
}

void *sub_1000A9454()
{
  return v0;
}

uint64_t sub_1000A9480()
{
  uint64_t v0 = sub_1000A9454();
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SessionEndEventController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecdP33_8CB648D6D3AEBC962B83344466C6EBB925SessionEndEventController);
}

uint64_t storeEnumTagSinglePayload for ClientSessionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000A9508 + 4 * byte_1001623D5[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A953C + 4 * byte_1001623D0[v4]))();
}

uint64_t sub_1000A953C(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000A9544(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000A954CLL);
  }
  return result;
}

uint64_t sub_1000A9558(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000A9560LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000A9564(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000A956C(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClientSessionState()
{
  return &type metadata for ClientSessionState;
}

unint64_t sub_1000A958C()
{
  unint64_t result = qword_1001D5D00;
  if (!qword_1001D5D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016251C, &type metadata for ClientSessionState);
    atomic_store(result, (unint64_t *)&qword_1001D5D00);
  }

  return result;
}

void sub_1000A95C8(BOOL *a1@<X8>)
{
}

uint64_t sub_1000A95D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000A95F4()
{
  return sub_1000A9218(v0);
}

uint64_t sub_1000A95FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A960C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000A9614()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static DispatchTime.now()(v4);
  uint64_t v8 = DispatchTime.uptimeNanoseconds.getter(v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  double v10 = *(double *)(v1 + 16) * 1000000000.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v10 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v10 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = v8 + (unint64_t)v10;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000A9704()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static DispatchTime.now()(v4);
  uint64_t v8 = DispatchTime.uptimeNanoseconds.getter(v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  double v10 = *v1 * 1000000000.0;
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v10 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (v10 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t result = v8 + (unint64_t)v10;
LABEL_9:
  __break(1u);
  return result;
}

BOOL sub_1000A97F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  if (qword_1001D0628 != -1) {
    swift_once(&qword_1001D0628, sub_1000CFB48);
  }
  double v9 = *(double *)&qword_1001D7300;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v10 = Date.init(timeInterval:since:)(v6, v9);
  double v11 = Date.timeIntervalSinceNow.getter(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v11 <= 0.0;
}

BOOL sub_1000A98F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - v7;
  if (qword_1001D0628 != -1) {
    swift_once(&qword_1001D0628, sub_1000CFB48);
  }
  double v9 = *(double *)&qword_1001D7300;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v10 = Date.init(timeInterval:since:)(v6, v9);
  double v11 = Date.timeIntervalSinceNow.getter(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (qword_1001D0630 != -1) {
    swift_once(&qword_1001D0630, sub_1000CFB5C);
  }
  return v11 <= *(double *)&qword_1001D7308;
}

BOOL sub_1000A9A2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - v7;
  if (qword_1001D0628 != -1) {
    swift_once(&qword_1001D0628, sub_1000CFB48);
  }
  double v9 = *(double *)&qword_1001D7300;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  uint64_t v10 = Date.init(timeInterval:since:)(v6, v9);
  double v11 = Date.timeIntervalSinceNow.getter(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  double v12 = *(double *)&qword_1001D7300;
  if (qword_1001D0630 != -1) {
    swift_once(&qword_1001D0630, sub_1000CFB5C);
  }
  return v11 <= v12 - *(double *)&qword_1001D7308;
}

uint64_t sub_1000A9B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A9BAC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A8B10(a1);
}

void sub_1000A9BC4(uint64_t a1@<X8>)
{
}

uint64_t sub_1000A9BDC()
{
  uint64_t v1 = sub_100010ED4();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1000A9C5C()
{
}

unint64_t sub_1000A9C9C()
{
  unint64_t result = qword_1001D1690;
  if (!qword_1001D1690)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1001D1690);
  }

  return result;
}

uint64_t sub_1000A9CE0()
{
  return sub_1000AA698((uint64_t (*)(void, void, void, char *))sub_1000A8194);
}

uint64_t sub_1000A9CEC(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_1000A9D58(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  [a2 setResourceVersions:isa];
}

void sub_1000A9DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  [a5 setResourceVersions:v8 forKey:v9];
}

uint64_t sub_1000A9E44(void *a1)
{
  id v2 = [a1 releaseTag];

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void sub_1000A9EB0(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }

  sub_1000110D4();
}

uint64_t sub_1000A9F04(void *a1)
{
  id v1 = [a1 experimentInfos];
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  unint64_t v3 = sub_1000AB6A0();
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  return v4;
}

void sub_1000A9F60(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setExperimentInfos:isa];
}

void sub_1000A9FC0(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
  sub_10006B3DC(v6);
}

void *sub_1000AA00C()
{
  uint64_t v85 = v1;
  uint64_t v86 = v2;
  uint64_t v4 = v3;
  uint64_t v81 = v6;
  uint64_t v82 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = *v3;
  id v78 = v12;
  uint64_t v79 = v11;
  uint64_t v13 = type metadata accessor for Client(0LL);
  uint64_t v74 = *(void *)(v13 - 8);
  uint64_t v75 = v13;
  sub_100027160();
  __chkstk_darwin(v14);
  sub_100014428();
  uint64_t v73 = v15;
  uint64_t v16 = sub_10006B428();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10005A3CC();
  sub_100009B94();
  __chkstk_darwin(v20);
  sub_100009B54();
  *((_BYTE *)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) = 0;
  *(void *)((char *)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks) = _swiftEmptyArrayStorage;
  uint64_t v21 = (uint64_t)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog;
  uint64_t v77 = sub_100010ED4();
  sub_100009654(v21, 1LL, 1LL, v77);
  id v22 = [objc_allocWithZone(_CPClientSession) init];
  uint64_t v80 = v8;
  if (v22)
  {
    id v23 = v22;
    uint64_t v71 = v19;
    *(void *)((char *)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_backingStore) = v22;
    uint64_t v24 = (char *)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_type;
    uint64_t v25 = sub_1000A15C0();
    uint64_t v76 = *(void *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v24, v8, v25);
    v4[3] = &off_1001B3A58;
    ((void (*)(void *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))swift_unknownObjectUnownedInit)( v4 + 2,  v10);
    id v26 = v23;
    uint64_t v27 = v79;
    sub_1000169A8((uint64_t)v10, v0);
    sub_1000A9B68(v0, (uint64_t)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens);
    uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
    v72((uint64_t)v4 + OBJC_IVAR____TtC7parsecd13ClientSession_userAgent, v82, v16);
    uint64_t v28 = sub_1000ABC20();
    sub_1000AA6D8(v28, v29);
    uint64_t v30 = sub_1000ABC20();
    sub_1000AAA78(v30, v31, v32, v33, v27);
    sub_100048758();
    uint64_t v34 = sub_1000CBC7C(v26);
    uint64_t v36 = v35;
    sub_100010CA0();
    v4[4] = v34;
    void v4[5] = v36;
    if (v78)
    {
      uint64_t v69 = v25;
      uint64_t v70 = v17;
      uint64_t v79 = v0;
      uint64_t v37 = v16;
      id v38 = v78;
      uint64_t v39 = v82;
      int v40 = sub_100016AF4();

      if (v40 == 2)
      {
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        sub_1000093D0(v77, (uint64_t)qword_1001EDBD0);
        sub_10005F8E4((uint64_t)v71, v39, v72);
        id v41 = v38;
        uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v43 = static os_log_type_t.fault.getter(v42);
        uint64_t v44 = (void (*)(uint64_t, uint64_t))v43;
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v45 = sub_100009B20(18LL);
          uint64_t v72 = v10;
          uint64_t v46 = v45;
          id v78 = (id)sub_100009B20(32LL);
          v84[0] = (uint64_t)v78;
          *(_DWORD *)uint64_t v46 = 67240450;
          LODWORD(v77) = (_DWORD)v44;
          LODWORD(v83) = [v41 type];
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, (char *)&v83 + 4, v46 + 4);

          *(_WORD *)(v46 + 8) = 2082;
          uint64_t v68 = v46 + 10;
          uint64_t v47 = v73;
          uint64_t v49 = UserAgent.client.getter(v48);
          uint64_t v50 = (void (*)(uint64_t, uint64_t))Client.name.getter(v49);
          unint64_t v52 = v51;
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v47, v75);
          uint64_t v83 = sub_1000307E0((uint64_t)v50, v52, v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v68);
          swift_bridgeObjectRelease();
          sub_1000ABAE0();
          _os_log_impl( (void *)&_mh_execute_header,  v42,  (os_log_type_t)v77,  "Adding first session feedback %{public}d failed for client: %{public}s",  (uint8_t *)v46,  0x12u);
          uint64_t v53 = (uint64_t)v78;
          sub_100030F9C((uint64_t)v78);
          sub_100010C34(v53);
          sub_100010C34(v46);

          swift_release();
          sub_1000ABACC(v54, (uint64_t *)&unk_1001D36B0);
          v50(v82, v37);
        }

        else
        {

          swift_release();
          sub_1000ABAE0();

          sub_1000ABACC(v65, (uint64_t *)&unk_1001D36B0);
          v44(v39, v16);
        }
      }

      else
      {

        sub_10005A8E0();
        sub_1000ABACC(v64, (uint64_t *)&unk_1001D36B0);
        sub_100009BC8(v39, *(uint64_t (**)(uint64_t, uint64_t))(v70 + 8));
      }

      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v80, v69);
      uint64_t v63 = v79;
    }

    else
    {

      uint64_t v62 = sub_10005A8E0();
      sub_1000ABACC(v62, (uint64_t *)&unk_1001D36B0);
      sub_1000ABA4C(v82, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
      sub_10003D850(v80, *(uint64_t (**)(uint64_t, uint64_t))(v76 + 8));
      uint64_t v63 = v0;
    }

    sub_10004D784(v63, type metadata accessor for SessionTokens);
  }

  else
  {
    id v55 = v78;
    uint64_t v72 = v10;
    uint64_t v56 = v82;
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    unint64_t v57 = (os_log_s *)sub_100010E78(v77, (uint64_t)qword_1001EDBD0);
    os_log_type_t v58 = static os_log_type_t.fault.getter(v57);
    if (sub_10006B5F4(v58))
    {
      unint64_t v59 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)unint64_t v59 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v0,  "Failed to create _CPClientSession object",  v59,  2u);
      sub_100010C34((uint64_t)v59);
    }

    swift_release();

    sub_1000ABACC(v60, (uint64_t *)&unk_1001D36B0);
    sub_1000ABA4C(v56, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
    uint64_t v61 = sub_1000A15C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v61 - 8) + 8LL))(v80, v61);
    swift_bridgeObjectRelease();
    sub_100019C1C(v21, (uint64_t *)&unk_1001D5D30);
    swift_deallocPartialClassInstance(v4, v79, *(unsigned int *)(*v4 + 48LL), *(unsigned __int16 *)(*v4 + 52LL));
    return 0LL;
  }

  return v4;
}

uint64_t sub_1000AA62C()
{
  uint64_t v4 = v2 + v3;
  uint64_t v6 = v5 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return swift_deallocObject(v0, v4, v6);
}

uint64_t sub_1000AA68C()
{
  return sub_1000AA698((uint64_t (*)(void, void, void, char *))sub_1000A791C);
}

uint64_t sub_1000AA698(uint64_t (*a1)(void, void, void, char *))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_10006B428() - 8) + 80LL);
  return a1(*((void *)v1 + 2), *((void *)v1 + 3), *((void *)v1 + 4), &v1[(v2 + 40) & ~v2]);
}

id sub_1000AA6D8(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for PegasusContext(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v33[-1] - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  double v12 = (char *)&v33[-1] - v11;
  [a2 setSessionStart:round(Date.timeIntervalSince1970.getter(v10))];
  sub_100048680();
  uint64_t v13 = sub_100070E70();
  swift_unknownObjectRelease();
  sub_1000A9D58(v13, a2);
  sub_1000478B0();
  sub_1000C20C4(0LL, 0LL);
  sub_1000C27CC();
  uint64_t v15 = v14;
  uint64_t v16 = swift_unknownObjectRelease();
  if (v15)
  {
    uint64_t v16 = sub_1000A9E44(v15);
    if (v17) {
      sub_1000A9DBC(v16, v17, 0x6973726556676162LL, 0xEA00000000006E6FLL, a2);
    }
  }

  [a2 setDuEnabled:DiagnosticLogSubmissionEnabled(v16)];
  sub_1000489DC();
  sub_100019AFC(v33, v33[3]);
  unint64_t v18 = sub_10007A96C();
  swift_bridgeObjectRelease();
  if ((v18 & 0x8000000000000000LL) != 0)
  {
    uint64_t v30 = "Negative value is not representable";
    uint64_t v31 = 35LL;
LABEL_15:
    id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v30,  v31,  2LL,  "Swift/Integers.swift",  20LL);
    __break(1u);
    return result;
  }

  if (HIDWORD(v18))
  {
    uint64_t v30 = "Not enough bits to represent the passed value";
    uint64_t v31 = 45LL;
    goto LABEL_15;
  }

  sub_1000108B8(v33);
  [a2 setDevicePersistentD20:v18];
  sub_10004A274((uint64_t)v12);
  uint64_t v19 = *((void *)v12 + 1);
  swift_bridgeObjectRetain(v19);
  sub_10004D784((uint64_t)v12, type metadata accessor for PegasusContext);
  if (v19)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v20 = 0LL;
  }

  [a2 setLocale:v20];

  sub_10004A274((uint64_t)v9);
  uint64_t v21 = *(void *)&v9[*(int *)(v3 + 80) + 8];
  swift_bridgeObjectRetain(v21);
  sub_10004D784((uint64_t)v9, type metadata accessor for PegasusContext);
  if (v21)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v22 = 0LL;
  }

  [a2 setCountryCode:v22];

  uint64_t v23 = type metadata accessor for SessionTokens(0LL);
  uint64_t v24 = UUID.uuidString.getter(v23);
  sub_1000A9FC0(v24, v25, a2, (SEL *)&selRef_setUserGuidString_);
  uint64_t v26 = UserAgent.fullString.getter();
  sub_1000A9FC0(v26, v27, a2, (SEL *)&selRef_setAgent_);
  sub_10004A274((uint64_t)v6);
  uint64_t v28 = v6[*(int *)(v3 + 124)];
  sub_10004D784((uint64_t)v6, type metadata accessor for PegasusContext);
  return [a2 setIsInternalCarry:v28];
}

void sub_1000AAA78(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a5;
  uint64_t v94 = a2;
  uint64_t v8 = sub_10000941C(&qword_1001D3DB8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v88 - v12;
  uint64_t v14 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  NSString v20 = (char *)&v88 - v19;
  uint64_t v21 = *(int *)(type metadata accessor for SessionTokens(0LL) + 24);
  uint64_t v91 = a3;
  uint64_t v22 = *(void *)(a3 + v21);
  if (!v22) {
    goto LABEL_43;
  }
  if (!*(void *)(v22 + 16)) {
    goto LABEL_43;
  }
  uint64_t v93 = a4;
  sub_1000478B0();
  sub_1000C20C4(0LL, 0LL);
  sub_1000C27CC();
  uint64_t v24 = v23;
  a4 = v93;
  swift_unknownObjectRelease();
  if (!v24) {
    goto LABEL_43;
  }
  uint64_t v89 = a1;
  id v25 = v24;
  uint64_t v26 = UserAgent.fullString.getter();
  uint64_t v28 = v27;
  id v29 = objc_allocWithZone(&OBJC_CLASS___PARBag);
  id v90 = v25;
  sub_1000C4C48(v25, v26, v28);
  uint64_t v31 = v30;
  uint64_t v88 = v31;
  uint64_t v32 = UserAgent.fullString.getter();
  sub_1000292DC(v32, v33, v22, (uint64_t)v13);
  swift_bridgeObjectRelease();
  uint64_t v34 = (Class *)&_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
  if (sub_100010708((uint64_t)v13, 1LL, v14) == 1)
  {
    sub_100019C1C((uint64_t)v13, &qword_1001D3DB8);
    uint64_t v35 = (Class *)&_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
    goto LABEL_22;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
  uint64_t v36 = (Class *)[objc_allocWithZone(_CPExperimentInfo) init];
  if (v36)
  {
    uint64_t v35 = v36;
    uint64_t v37 = Trialpb_TrialExperiment.experimentNamespace.getter(v36);
    sub_1000A9FC0(v37, v38, v35, (SEL *)&selRef_setNamespaceId_);
    uint64_t v40 = Trialpb_TrialExperiment.experimentID.getter(v39);
    sub_1000A9FC0(v40, v41, v35, (SEL *)&selRef_setExperimentId_);
    uint64_t v43 = Trialpb_TrialExperiment.treatmentID.getter(v42);
    sub_1000A9FC0(v43, v44, v35, (SEL *)&selRef_setTreatmentId_);
    uint64_t v46 = Trialpb_TrialExperiment.deploymentID.getter(v45);
    unint64_t v47 = 0xFFFFFFFF80000000LL;
    if (v46 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else
    {
      unint64_t v47 = 0x7FFFFFFFLL;
      if (v46 <= 0x7FFFFFFF)
      {
        uint64_t v48 = Trialpb_TrialExperiment.compatibilityVersion.getter(-[Class setDeploymentId:](v35, "setDeploymentId:", v46));
        if ((v48 & 0x80000000) == 0)
        {
          -[Class setVersion:](v35, "setVersion:", v48);
          uint64_t v49 = v94;
          uint64_t v50 = sub_1000A9F04(v94);
          swift_bridgeObjectRelease();
          if (v50)
          {
            uint64_t v95 = sub_1000A9F04(v49);
            if (v95)
            {
              uint64_t v34 = v35;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              uint64_t v35 = *(Class **)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              unint64_t v47 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              goto LABEL_59;
            }

            [v49 setExperimentInfos:0];

            (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v53 = sub_10000941C((uint64_t *)&unk_1001D0C00);
            uint64_t v54 = swift_allocObject(v53, 40LL, 7LL);
            *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_10015D570;
            *(void *)(v54 + 32) = v35;
            uint64_t v95 = v54;
            specialized Array._endMutation()(v54);
            sub_1000A9F60(v95, v49);
            (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
          }

          goto LABEL_19;
        }

LABEL_58:
    __break(1u);
LABEL_59:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
LABEL_14:
    uint64_t v51 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v34);
    specialized Array._endMutation()(v51);
    if (v95)
    {
      sub_1000AB6A0();
      v52.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }

    else
    {
      v52.super.Class isa = 0LL;
    }

    uint64_t v35 = (Class *)&_ss24UnkeyedEncodingContainerPsE6encode10contentsOfyqd___tKSTRd__s6UInt32V7ElementRtd__lF_ptr;
    [v94 setExperimentInfos:v52.super.isa];

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_39:
  uint64_t v31 = v88;
LABEL_40:
  unsigned int v77 = [v31 experimentsCustomFeedbackEnabled];
  a1 = v89;
  if (v77) {
    sub_1000AB6DC(v89, v91, v22);
  }

  a4 = v93;
LABEL_43:
  id v78 = sub_1000AB298(a1, a4);
  if (v78)
  {
    uint64_t v79 = v78;
    uint64_t v80 = v94;
    uint64_t v95 = sub_1000A9F04(v94);
    if (v95)
    {
      id v81 = v79;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v83 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v82 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v83 >= v82 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1);
      }
      uint64_t v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v83, v81);
      specialized Array._endMutation()(v84);
      if (v95)
      {
        sub_1000AB6A0();
        v85.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }

      else
      {
        v85.super.Class isa = 0LL;
      }

      [v80 setExperimentInfos:v85.super.isa];
    }

    else
    {
      [v80 setExperimentInfos:0];
      swift_bridgeObjectRelease();
      uint64_t v86 = sub_10000941C((uint64_t *)&unk_1001D0C00);
      uint64_t v87 = swift_allocObject(v86, 40LL, 7LL);
      *(_OWORD *)(v87 + swift_weakDestroy(v0 + 16) = xmmword_10015D570;
      *(void *)(v87 + 32) = v79;
      uint64_t v95 = v87;
      specialized Array._endMutation()(v87);
      sub_1000A9F60(v95, v80);
    }
  }

    LOBYTE(v37) = 0;
    goto LABEL_59;
  }

  if (v35 != 45)
  {
    if (!v37) {
      goto LABEL_46;
    }
    LODWORD(v42) = (v35 - 48);
    if (v37 != 1)
    {
      sub_1000CA9C4();
      if (!v34 & v46) {
        goto LABEL_46;
      }
      LODWORD(v42) = 10 * v42 + v54;
      uint64_t v55 = v53 - 2;
      if (v53 != 2)
      {
        uint64_t v56 = (unsigned __int8 *)&v84 + 2;
        while (1)
        {
          unint64_t v57 = *v56 - 48;
          if (v57 > 9) {
            goto LABEL_46;
          }
          uint64_t v58 = 10LL * (int)v42;
          LODWORD(v42) = v58 + v57;
          LOBYTE(v37) = 0;
          ++v56;
          if (!--v55) {
            goto LABEL_59;
          }
        }
      }
    }

    goto LABEL_58;
  }

  if (v37)
  {
    if (v37 != 1)
    {
      sub_1000CA9C4();
      if (!(!v34 & v46))
      {
        if (v43 == 2)
        {
          LOBYTE(v37) = 0;
          LODWORD(v42) = -v45;
          goto LABEL_59;
        }

        if ((BYTE2(v35) - 48) <= 9u)
        {
          LODWORD(v42) = -10 * v44 - (BYTE2(v35) - 48);
          uint64_t v59 = v43 - 3;
          if (v43 == 3) {
            goto LABEL_58;
          }
          uint64_t v69 = (unsigned __int8 *)&v84 + 3;
          while (1)
          {
            uint64_t v70 = *v69 - 48;
            if (v70 > 9) {
              break;
            }
            unint64_t v71 = 10LL * (int)v42;
            LODWORD(v42) = v71 - v70;
            LOBYTE(v37) = 0;
            ++v69;
            if (!--v59) {
              goto LABEL_59;
            }
          }
        }
      }

  sub_100010A30(v124, v127);
  uint64_t v112 = sub_1000CF860();
  sub_1000CF648(v112);
  uint64_t v113 = sub_1000772E0();
  sub_1000CF68C(v113);
  sub_10004729C(v116, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
  sub_1000CF6A0(v125, v126);
  sub_1000CF7B4(v35[13]);
LABEL_27:
  sub_1000144D4();
}

void *sub_1000AB298(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Client(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = UserAgent.client.getter(v5);
  uint64_t v9 = Client.type.getter(v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v10 = ClientType.rawValue.getter(v9);
  uint64_t v11 = 0LL;
  if (v10 != ClientType.rawValue.getter(12LL)) {
    return v11;
  }
  sub_100047A50();
  __chkstk_darwin(v12);
  *(&v42 - 2) = a2;
  sub_1000D1940((uint64_t (*)(uint64_t))sub_1000AB894);
  uint64_t v14 = v13;
  swift_unknownObjectRelease();
  if (!v14)
  {
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_1000093D0(v25, (uint64_t)qword_1001EDBD0);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v29 = static os_log_type_t.error.getter(v27, v28);
    if (os_log_type_enabled(v27, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v29,  "Did not find a matching client state for session to extract experiment metadata",  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    return 0LL;
  }

  sub_100082FC0();
  if (!v15)
  {
LABEL_22:
    swift_release();
    return 0LL;
  }

  uint64_t v16 = v15;
  sub_1000A9EB0(v15, (SEL *)&selRef_experimentNamespaceId);
  if (!v18) {
    goto LABEL_21;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  swift_bridgeObjectRelease();
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000LL) == 0) {
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21)
  {
LABEL_21:

    goto LABEL_22;
  }

  id v22 = [objc_allocWithZone(_CPExperimentInfo) init];
  if (!v22)
  {
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v31 = type metadata accessor for Logger(0LL);
    uint64_t v32 = sub_1000093D0(v31, (uint64_t)qword_1001EDBD0);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v35 = static os_log_type_t.error.getter(v33, v34);
    if (os_log_type_enabled(v33, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "Couldn't initialize ExperimentInfo", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    goto LABEL_21;
  }

  uint64_t v11 = v22;
  sub_1000A9EB0(v16, (SEL *)&selRef_experimentNamespaceId);
  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v24 = 0LL;
  }

  [v11 setNamespaceId:v24];

  sub_1000A9EB0(v16, (SEL *)&selRef_experimentId);
  if (v38)
  {
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v39 = 0LL;
  }

  [v11 setExperimentId:v39];

  sub_1000A9EB0(v16, (SEL *)&selRef_experimentTreatmentId);
  if (v40)
  {
    NSString v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v41 = 0LL;
  }

  [v11 setTreatmentId:v41];

  objc_msgSend(v11, "setDeploymentId:", objc_msgSend(v16, "experimentDeploymentId"));
  objc_msgSend(v11, "setVersion:", objc_msgSend(v16, "experimentVersion"));
  swift_release();

  return v11;
}

unint64_t sub_1000AB6A0()
{
  unint64_t result = qword_1001D5D40;
  if (!qword_1001D5D40)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS____CPExperimentInfo);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D5D40);
  }

  return result;
}

uint64_t *sub_1000AB6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = (uint64_t *)sub_1000AB7B8((uint64_t)v8, (uint64_t)v9);
  if (*((void *)&v9[0] + 1))
  {
    v9[4] = v9[0];
    v9[5] = v9[1];
    void v9[6] = v9[2];
    v9[7] = v9[3];
    id v4 = [(id)objc_opt_self(NSFileManager) defaultManager];
    sub_1000489B0();
    uint64_t v5 = sub_10005AC64();
    unint64_t v7 = v6;
    sub_1000AC700();
    sub_100010A30(v5, v7);

    swift_release();
    return sub_1000AB800(v8);
  }

  return result;
}

uint64_t sub_1000AB7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000AB800(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000AB838( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a6);
  }

  return result;
}

BOOL sub_1000AB894()
{
  return sub_100016DCC();
}

uint64_t sub_1000AB89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AB8E4()
{
  if (v0[3]) {
    swift_release(v0[4]);
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000AB918()
{
}

uint64_t sub_1000AB924()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000AB934()
{
  uint64_t v5 = v4 | 7;
  sub_1000ABBB4();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_10007704C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_release();

  uint64_t v6 = sub_1000A1F68();
  return swift_deallocObject(v6, v7, v5);
}

void sub_1000AB9AC()
{
}

uint64_t sub_1000AB9E8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

uint64_t sub_1000ABA38()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000ABA4C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000ABA54(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t sub_1000ABA64()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000ABA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of SetAlgebra.init<A>(_:)(a1, v3, a3, v4, v5);
}

void sub_1000ABA88(uint64_t a1@<X8>, uint64_t a2)
{
  *(uint64_t *)((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0LL)) = *(void *)(v2 + 48);
}

  ;
}

uint64_t sub_1000ABAB8()
{
  return sub_1000108B8((void *)(v0 - 120));
}

uint64_t sub_1000ABAC0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

void sub_1000ABACC(uint64_t a1, uint64_t *a2)
{
}

void sub_1000ABAD4(void *a1, os_log_s *a2, os_log_type_t a3, const char *a4)
{
}

uint64_t sub_1000ABAE0()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 200) + 8LL))(v1, v0);
}

  ;
}

  ;
}

uint64_t sub_1000ABB2C()
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)(v2 - 184) + 104LL))( v1,  *v0,  *(void *)(v2 - 176));
}

uint64_t sub_1000ABB40()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v0, v1);
}

uint64_t sub_1000ABB50()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 112, v1, v0);
}

void sub_1000ABB60()
{
}

void sub_1000ABB70()
{
}

uint64_t sub_1000ABB80()
{
  return Client.init(_:)(7LL);
}

unint64_t sub_1000ABB8C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 136) = a1;
  return sub_100019CD0();
}

uint64_t sub_1000ABB94()
{
  return sub_100016AF4();
}

void *sub_1000ABBA0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 144) = a1;
  *(void *)(v2 - 136) = v1;
  return _Block_copy((const void *)(v2 - 160));
}

uint64_t sub_1000ABBAC()
{
  return _dispatchPreconditionTest(_:)(v0);
}

  ;
}

uint64_t sub_1000ABBC8(uint64_t a1)
{
  return swift_weakInit(a1 + 16, v1);
}

uint64_t sub_1000ABBD4()
{
  return swift_release_n(v0, 2LL);
}

uint64_t sub_1000ABBE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000307E0(a1, v3, a3);
}

uint64_t sub_1000ABBE8()
{
  return swift_retain_n(v0, 2LL);
}

void *sub_1000ABBF4()
{
  return sub_100019AFC((void *)(v0 - 120), *(void *)(v0 - 96));
}

void sub_1000ABC00(uint64_t a1, uint64_t (*a2)(void))
{
}

uint64_t sub_1000ABC08(uint64_t a1)
{
  return v2(a1, *(void *)(v3 - 176), v1);
}

uint64_t sub_1000ABC14()
{
  return UserAgent.init(_:requestor:)(v1, v0);
}

uint64_t sub_1000ABC20()
{
  return v0;
}

Swift::Void __swiftcall Incident.reportTelemetry()()
{
  char v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v8 = static os_signpost_type_t.event.getter(v7);
      if (qword_1001D0610 != -1) {
        swift_once(&qword_1001D0610, sub_1000AC220);
      }
      uint64_t v9 = qword_1001D5D60;
      uint64_t v10 = sub_10000941C(&qword_1001D0C10);
      uint64_t v11 = sub_100009ACC(v10, 152LL);
      *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_10015C800;
      *(void *)(v11 + 56) = &type metadata for Int;
      *(void *)(v11 + 64) = &protocol witness table for Int;
      *(void *)(v11 + 32) = v5;
      *(void *)(v11 + 96) = &type metadata for Int;
      *(void *)(v11 + 104) = &protocol witness table for Int;
      *(void *)(v11 + 72) = v4;
      *(void *)(v11 + 136) = &type metadata for String;
      *(void *)(v11 + 144) = sub_100042FE8();
      *(void *)(v11 + 112) = 0xD00000000000001ELL;
      *(void *)(v11 + 120) = 0x8000000100171130LL;
      sub_10005D600();
      sub_1000AC414(v8, (uint64_t)&_mh_execute_header, v9, (uint64_t)"FatalError");
    }

    else
    {
      uint64_t v30 = static os_signpost_type_t.event.getter(v7);
      if (qword_1001D0610 != -1) {
        swift_once(&qword_1001D0610, sub_1000AC220);
      }
      uint64_t v31 = qword_1001D5D60;
      uint64_t v32 = sub_10000941C(&qword_1001D0C10);
      uint64_t v33 = sub_100009ACC(v32, 72LL);
      *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v33 + 56) = &type metadata for String;
      *(void *)(v33 + 64) = sub_100042FE8();
      *(void *)(v33 + 32) = 0xD000000000000016LL;
      *(void *)(v33 + 40) = 0x800000010016FD50LL;
      sub_10005D600();
      sub_1000AC414(v30, (uint64_t)&_mh_execute_header, v31, (uint64_t)"FatalError");
    }

    swift_bridgeObjectRelease();
    sub_1000AC44C();
  }

  else
  {
    uint64_t v38 = v4;
    id v12 = v5;
    unsigned int v35 = ((uint64_t (*)(void))static os_signpost_type_t.event.getter)();
    if (qword_1001D0610 != -1) {
      swift_once(&qword_1001D0610, sub_1000AC220);
    }
    uint64_t v34 = qword_1001D5D60;
    uint64_t v13 = sub_10000941C(&qword_1001D0C10);
    uint64_t v14 = sub_100009ACC(v13, 112LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v15 = sub_100042FE8();
    *(void *)(v14 + 64) = v15;
    strcpy((char *)(v14 + 32), "ObjCException");
    *(_WORD *)(v14 + 46) = -4864;
    id v16 = [v12 name];
    uint64_t v37 = v12;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    *(void *)(v14 + 96) = &type metadata for String;
    *(void *)(v14 + 104) = v15;
    *(void *)(v14 + 72) = v17;
    *(void *)(v14 + 80) = v19;
    sub_10005D600();
    sub_1000AC414(v35, (uint64_t)&_mh_execute_header, v34, (uint64_t)"FatalError");
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_1000AC44C();
    LOBYTE(v17) = static os_log_type_t.fault.getter(v20);
    uint64_t v21 = (os_log_s *)qword_1001D5D60;
    sub_1000AC280(v5, v38, 0);
    sub_1000AC280(v5, v38, 0);
    sub_1000AC424();
    os_log_type_t v22 = v17;
    if (os_log_type_enabled(v21, (os_log_type_t)v17))
    {
      sub_1000AC424();
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = swift_slowAlloc(96LL, -1LL);
      uint64_t v40 = v36;
      *(_DWORD *)uint64_t v23 = 136315650;
      id v24 = [v37 name];
      static String._unconditionallyBridgeFromObjectiveC(_:)(v24);

      uint64_t v39 = sub_1000AC45C();
      sub_1000AC46C();
      swift_bridgeObjectRelease();
      sub_1000AC290(v5, v38, 0);
      sub_1000AC404();
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v25 = sub_1000AC2A0(v37);
      if (v26)
      {
        unint64_t v27 = v26;
      }

      else
      {
        uint64_t v25 = 1701736302LL;
        unint64_t v27 = 0xE400000000000000LL;
      }

      uint64_t v39 = sub_1000307E0(v25, v27, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v23 + 14);
      swift_bridgeObjectRelease();
      sub_1000AC290(v5, v38, 0);
      sub_1000AC404();
      *(_WORD *)(v23 + 22) = 2080;
      id v28 = [v37 callStackSymbols];
      uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, &type metadata for String);

      Array.description.getter(v29, &type metadata for String);
      swift_bridgeObjectRelease();
      uint64_t v39 = sub_1000AC45C();
      sub_1000AC46C();
      swift_bridgeObjectRelease();
      sub_1000AC290(v5, v38, 0);
      sub_1000AC404();
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "ObjC Exception: %s, reason: %s, call stack symbols: %s",  (uint8_t *)v23,  0x20u);
      swift_arrayDestroy(v36, 3LL);
      sub_100010C34(v36);
      sub_100010C34(v23);
      sub_1000AC404();
    }

    else
    {
      sub_1000AC404();
    }
  }

uint64_t sub_1000AC220()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD000000000000010LL,  0x800000010016AE50LL,  0x746E656469636E49LL,  0xE900000000000073LL);
  qword_1001D5D60 = result;
  return result;
}

id sub_1000AC280(id result, uint64_t a2, char a3)
{
  if (!a3) {
    return result;
  }
  return result;
}

void sub_1000AC290(id a1, uint64_t a2, char a3)
{
  if (!a3) {
}
  }

uint64_t sub_1000AC2A0(void *a1)
{
  id v1 = [a1 reason];
  if (!v1) {
    return 0LL;
  }
  char v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void destroy for Incident(uint64_t a1)
{
}

uint64_t _s7parsecd8IncidentOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000AC280(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Incident(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000AC280(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_1000AC290(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Incident(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_1000AC290(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Incident()
{
  return &type metadata for Incident;
}

void sub_1000AC404()
{
}

uint64_t sub_1000AC414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)(a1, a2, a3, a4, 10LL, 2LL, v4);
}

id sub_1000AC424()
{
  return sub_1000AC280(v0, v1, 0);
}

uint64_t sub_1000AC44C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000AC45C()
{
  return sub_1000307E0(v0, v1, (uint64_t *)(v2 - 88));
}

uint64_t sub_1000AC46C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 - 96, v1, v0);
}

uint64_t getEnumTagSinglePayload for QueryCache.Activity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }

uint64_t _s5ErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000AC550 + 4 * byte_1001625A5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000AC584 + 4 * asc_1001625A0[v4]))();
}

uint64_t sub_1000AC584(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000AC58C(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000AC594LL);
  }
  return result;
}

uint64_t sub_1000AC5A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000AC5A8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000AC5AC(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000AC5B4(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_1000AC5D4()
{
  unint64_t result = qword_1001D5D68;
  if (!qword_1001D5D68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001625F0, &_s5ErrorON);
    atomic_store(result, (unint64_t *)&qword_1001D5D68);
  }

  return result;
}

void *sub_1000AC610(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000AC61C( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000DBA98);
}

void *sub_1000AC61C( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  uint64_t v11 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
  uint64_t v12 = swift_unknownObjectRetain_n(a1, 2LL);
  uint64_t v13 = (void *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    sub_10001449C();
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v13[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  if (v14 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }

  uint64_t v10 = (void *)swift_dynamicCastClass(a1, v11);
  if (!v10)
  {
    sub_10001449C();
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }

void sub_1000AC700()
{
  uint64_t v96 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v91 = v7;
  uint64_t v92 = v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v89 = v9;
  uint64_t v90 = v10;
  __chkstk_darwin(v9);
  sub_1000270AC();
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10005A18C();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  sub_100032C48();
  uint64_t v88 = v16;
  sub_10003D810();
  __chkstk_darwin(v17);
  sub_1000B1A60();
  __chkstk_darwin(v18);
  sub_10003D828();
  uint64_t v94 = v19;
  sub_10003D810();
  __chkstk_darwin(v20);
  sub_10003D828();
  uint64_t v95 = v21;
  sub_10003D810();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v85 - v24;
  if (v4)
  {
    uint64_t v26 = sub_10000941C(&qword_1001D5D88);
    sub_1000773F4(v26);
    unint64_t v27 = (void *)swift_retain(v4);
    uint64_t v28 = v6;
    uint64_t v23 = sub_10000EC10(v27, 3, 0LL, v6);
    uint64_t v29 = v23;
  }

  else
  {
    uint64_t v28 = v6;
    uint64_t v29 = 0LL;
  }

  NSFileManager.parsecdCustomFBDirectoryURL.getter(v23);
  sub_10005A148((uint64_t)v13, 1LL, v14);
  if (!v30)
  {
    sub_1000770AC((uint64_t)v25, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 32));
    uint64_t v93 = v25;
    uint64_t v87 = v29;
    uint64_t v86 = v28;
    uint64_t v85 = v28;
    switch((int)v28)
    {
      case 0:
        uint64_t v34 = @"unknown";
        goto LABEL_30;
      case 1:
        uint64_t v34 = @"SafariAutoFill";
        goto LABEL_30;
      case 2:
        uint64_t v34 = @"Crowdsourcing";
        goto LABEL_30;
      case 3:
        uint64_t v34 = @"SpotlightResultFeatures";
        goto LABEL_30;
      case 4:
        uint64_t v34 = @"SafariAutoPlay";
        goto LABEL_30;
      case 5:
        uint64_t v34 = @"Trystero";
        goto LABEL_30;
      case 6:
        uint64_t v34 = @"EngagedCompletionFeatures";
        goto LABEL_30;
      case 7:
        uint64_t v34 = @"ProactiveEventTracker";
        goto LABEL_30;
      case 8:
        uint64_t v34 = @"PhiDES";
        goto LABEL_30;
      case 9:
        uint64_t v34 = @"DuetExpert";
        goto LABEL_30;
      case 10:
        uint64_t v34 = @"UserReport";
        goto LABEL_30;
      case 11:
        uint64_t v34 = @"Usage";
        goto LABEL_30;
      case 12:
        uint64_t v34 = @"FeedbackV2";
        goto LABEL_30;
      case 13:
        uint64_t v34 = @"FeedbackV2PB";
        goto LABEL_30;
      case 14:
        uint64_t v34 = @"ProactiveEventTrackerAggregated";
        goto LABEL_30;
      case 15:
        uint64_t v34 = @"Handwashing";
        goto LABEL_30;
      case 16:
        uint64_t v34 = @"Experiments";
        goto LABEL_30;
      case 17:
        uint64_t v34 = @"FeatureQuality";
        goto LABEL_30;
      case 18:
        uint64_t v34 = @"OnDeviceAnalytics";
        goto LABEL_30;
      case 19:
        uint64_t v34 = @"ModelFeedback";
LABEL_30:
        unsigned int v35 = v34;
        break;
      default:
        uint64_t v34 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v28));
        break;
    }

    uint64_t v36 = v89;
    uint64_t v37 = v34;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v40 = v39;

    URL.appendingPathComponent(_:isDirectory:)(v38, v40, 1LL);
    uint64_t v41 = swift_bridgeObjectRelease();
    uint64_t v42 = UUID.init()(v41);
    uint64_t v43 = UUID.uuidString.getter(v42);
    uint64_t v45 = v44;
    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v2, v36);
    URL.appendingPathComponent(_:)(v43, v45);
    uint64_t v46 = swift_bridgeObjectRelease();
    uint64_t v47 = v94;
    URL.standardizedFileURL.getter(v46);
    uint64_t v48 = sub_1000B1980(v1);
    URL.path.getter(v48);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_10000941C(qword_1001D41F8);
    uint64_t inited = swift_initStackObject(v50, &v99);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 32) = NSFilePosixPermissions;
    *(void *)(inited + 4sub_1000AC280(v0, v1, 0) = 384LL;
    type metadata accessor for FileAttributeKey(0LL);
    uint64_t v53 = v52;
    unint64_t v54 = sub_10005F76C();
    uint64_t v55 = NSFilePosixPermissions;
    uint64_t v56 = Dictionary.init(dictionaryLiteral:)(inited, v53, (char *)&type metadata for Any + 8, v54);
    uint64_t v58 = v91;
    uint64_t v57 = v92;
    LOBYTE(inited) = sub_1000B1838((uint64_t)v49, v91, v92, v56, v96);

    if ((inited & 1) != 0)
    {
      if (v87)
      {
        sub_10004EC38();
        uint64_t v59 = Data.count.getter(v58, v57);
        sub_1000AF79C(v59);
        sub_1000110B0();
        sub_1000B1980(v47);
        sub_1000B1980(v95);
        sub_1000B1980((uint64_t)v93);
        goto LABEL_44;
      }

      sub_1000B1980(v47);
      sub_1000B1980(v95);
      uint64_t v71 = (uint64_t)v93;
    }

    else
    {
      uint64_t v60 = v87;
      if (qword_1001D0618 != -1) {
        swift_once(&qword_1001D0618, sub_1000AD1F4);
      }
      uint64_t v61 = sub_100010ED4();
      sub_1000093D0(v61, (uint64_t)qword_1001EDE48);
      uint64_t v62 = v88;
      uint64_t v63 = sub_1000770AC(v88, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v66 = static os_log_type_t.error.getter(v64, v65);
      BOOL v67 = os_log_type_enabled(v64, v66);
      uint64_t v68 = (uint64_t)v93;
      if (v67)
      {
        uint64_t v69 = sub_100009B20(22LL);
        uint64_t v70 = (void *)sub_100009B20(64LL);
        uint64_t v98 = v70;
        *(_DWORD *)uint64_t v69 = 136315394;
        uint64_t v96 = v70;
        if (v86 <= 0x13) {
          __asm { BR              X9 }
        }

        id v72 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(unknown: %i)",  v86));
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        unint64_t v75 = v74;

        uint64_t v97 = sub_1000307E0(v73, v75, (uint64_t *)&v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v69 + 4);
        uint64_t v76 = swift_bridgeObjectRelease();
        *(_WORD *)(v69 + 12) = 2080;
        uint64_t v77 = v88;
        uint64_t v78 = URL.lastPathComponent.getter(v76);
        uint64_t v97 = sub_1000307E0(v78, v79, (uint64_t *)&v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v69 + 14);
        sub_100009B3C();
        sub_1000B1980(v77);
        _os_log_impl( (void *)&_mh_execute_header,  v64,  v66,  "error persisting custom feedback at %s/%s",  (uint8_t *)v69,  0x16u);
        uint64_t v80 = (uint64_t)v96;
        swift_arrayDestroy(v96, 2LL);
        sub_100010C34(v80);
        sub_100010C34(v69);

        uint64_t v68 = (uint64_t)v93;
      }

      else
      {
        sub_1000B1980(v62);
      }

      uint64_t v81 = v94;
      if (v60)
      {
        unint64_t v82 = sub_1000109A4();
        uint64_t v83 = sub_100010EA0((uint64_t)&unk_1001B8398, v82);
        *uint64_t v84 = 3;
        sub_10004EC38();
        sub_1000AF7C0(v83);
        sub_1000110B0();
        sub_1000B1980(v81);
        sub_1000B1980(v95);
        sub_1000B1980(v68);
        swift_errorRelease(v83);
        goto LABEL_44;
      }

      sub_1000B1980(v94);
      sub_1000B1980(v95);
      uint64_t v71 = v68;
    }

    sub_1000B1980(v71);
    goto LABEL_47;
  }

  sub_100014358((uint64_t)v13, &qword_1001D5ED0);
  if (v29)
  {
    unint64_t v31 = sub_1000109A4();
    uint64_t v32 = sub_100010EA0((uint64_t)&unk_1001B8398, v31);
    *uint64_t v33 = 8;
    sub_10004EC38();
    sub_1000AF7C0(v32);
    sub_100014530();
    sub_1000110B0();
LABEL_44:
    sub_1000AF7F0();
    sub_1000110B0();
  }

LABEL_47:
  sub_100009AA0();
}

uint64_t sub_1000AD010(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(result + 16);
    if (!v3) {
      return 1LL;
    }
    uint64_t v4 = 0LL;
    uint64_t v5 = result + 33;
    unint64_t v6 = v3 - 1;
    while (v2 - 1 != v4)
    {
      unint64_t result = v6 == v4;
      if (v6 != v4)
      {
        int v7 = *(unsigned __int8 *)(a2 + 33 + v4);
        int v8 = *(unsigned __int8 *)(v5 + v4++);
        if (v7 == v8) {
          continue;
        }
      }

      return result;
    }
  }

  else
  {
    unint64_t v3 = *(void *)(result + 16);
  }

  if (v2 == v3) {
    return 1LL;
  }
  if (v2 < v3) {
    return 0LL;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AD094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String_optional v5 = String.Iterator.next()();
  if (v5.value._object)
  {
    uint64_t countAndFlagsBits = v5.value._countAndFlagsBits;
    object = v5.value._object;
    while (1)
    {
      Swift::String_optional v8 = String.Iterator.next()();
      if (!v8.value._object) {
        break;
      }
      if (countAndFlagsBits == v8.value._countAndFlagsBits && object == v8.value._object)
      {
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v8.value._object);
      }

      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  v8.value._countAndFlagsBits,  v8.value._object,  0LL);
        swift_bridgeObjectRelease(object);
        swift_bridgeObjectRelease(v8.value._object);
        if ((v10 & 1) == 0)
        {
          swift_bridgeObjectRelease(a4);
          swift_bridgeObjectRelease(a2);
          return 0LL;
        }
      }

      Swift::String_optional v11 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v11.value._countAndFlagsBits;
      object = v11.value._object;
      if (!v11.value._object) {
        goto LABEL_12;
      }
    }

    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else
  {
LABEL_12:
    swift_bridgeObjectRelease(a4);
    uint64_t v12 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease(a2);
    BOOL v13 = v12 == 0LL;
    swift_bridgeObjectRelease(v12);
  }

  return v13;
}

uint64_t sub_1000AD1F4()
{
  uint64_t v0 = sub_100010ED4();
  sub_10001C180(v0, qword_1001EDE48);
  sub_1000093D0(v0, (uint64_t)qword_1001EDE48);
  return Logger.init(subsystem:category:)( 0xD000000000000014LL,  0x800000010016EC30LL,  1701603686LL,  0xE400000000000000LL);
}

void *NSFileManager.sessionFiles.getter()
{
  uint64_t v79 = v1;
  uint64_t v80 = v2;
  unint64_t v3 = v0;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_10005F878();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  char v10 = (char *)&v69 - v9;
  uint64_t v11 = sub_10005A18C();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100032C48();
  uint64_t v75 = v13;
  sub_10003D810();
  __chkstk_darwin(v14);
  sub_10003D828();
  uint64_t v76 = v15;
  sub_10003D810();
  __chkstk_darwin(v16);
  sub_10003D828();
  uint64_t v74 = v17;
  sub_10003D810();
  __chkstk_darwin(v18);
  uint64_t v71 = (char *)&v69 - v19;
  sub_10003D810();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v69 - v22;
  NSFileManager.parsecdSessionFBDirectoryURL.getter(v21);
  sub_10005A148((uint64_t)v10, 1LL, v11);
  if (v24)
  {
    sub_100014358((uint64_t)v10, &qword_1001D5ED0);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v77((uint64_t)v23, (uint64_t)v10, v11);
  URL._bridgeToObjectiveC()(v25);
  unint64_t v27 = v26;
  uint64_t v28 = sub_10000941C(&qword_1001D5D70);
  uint64_t v29 = sub_1000B1B4C(v28);
  *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
  uint64_t v30 = v12;
  *(void *)(v29 + 32) = NSURLCreationDateKey;
  *(void *)(v29 + 4sub_1000AC280(v0, v1, 0) = NSURLFileSizeKey;
  uint64_t v78 = 0LL;
  unint64_t v31 = NSURLCreationDateKey;
  uint64_t v32 = NSURLFileSizeKey;
  id v33 = sub_1000B18E0((uint64_t)v27, v29, 0LL, (uint64_t)&v78, v3);

  id v34 = v78;
  if (!v33)
  {
    uint64_t v65 = v78;
    uint64_t v66 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v67);
    swift_errorRelease(v66);
    sub_10007704C((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    return _swiftEmptyArrayStorage;
  }

  uint64_t v70 = v23;
  uint64_t v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v11);
  id v36 = v34;

  uint64_t v37 = v35;
  uint64_t v78 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void **)(v35 + 16);
  uint64_t v39 = v30;
  uint64_t v40 = (uint64_t)v71;
  uint64_t v73 = v38;
  if (v38)
  {
    unint64_t v41 = 0LL;
    uint64_t v72 = v37;
    while (1)
    {
      if (v41 >= *(void *)(v37 + 16)) {
        __break(1u);
      }
      unint64_t v42 = (*(unsigned __int8 *)(v39 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      uint64_t v43 = *(void *)(v39 + 72);
      sub_1000770AC(v7, v37 + v42 + v43 * v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));
      sub_1000B1A04(v7, 0LL);
      sub_10005A148(v7, 1LL, v11);
      if (v24) {
        break;
      }
      uint64_t v44 = v7;
      sub_1000B1B04(v40, v7);
      uint64_t v45 = sub_1000B1AFC();
      uint64_t v46 = v40;
      unint64_t v48 = v47;
      uint64_t v49 = type metadata accessor for SessionFilename(0LL);
      sub_1000773F4(v49);
      SessionFilename.init(fromString:)(v45, v48);
      uint64_t v51 = v50;
      swift_release();
      if (v51)
      {
        sub_1000B1B04(v74, v46);
        uint64_t v52 = v78;
        if ((sub_1000B1B78() & 1) == 0)
        {
          sub_1000B1A28(0, v52[2] + 1LL);
          uint64_t v52 = v78;
        }

        uint64_t v7 = v44;
        unint64_t v54 = v52[2];
        unint64_t v53 = v52[3];
        if (v54 >= v53 >> 1)
        {
          sub_1000B1A28(v53 > 1, v54 + 1);
          uint64_t v52 = v78;
        }

        v52[2] = v54 + 1;
        v77((uint64_t)v52 + v42 + v54 * v43, v74, v11);
        uint64_t v78 = v52;
        uint64_t v40 = (uint64_t)v71;
      }

      else
      {
        sub_10007704C(v46, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
        uint64_t v40 = v46;
        uint64_t v7 = v44;
      }

      ++v41;
      uint64_t v37 = v72;
      if (v73 == (void *)v41) {
        goto LABEL_17;
      }
    }
  }

  else
  {
LABEL_17:
    sub_1000B1A04(v7, 1LL);
  }

  sub_100009B3C();
  sub_100014358(v7, &qword_1001D5ED0);
  uint64_t v55 = v78;
  uint64_t v56 = v78[2];
  if (v56)
  {
    uint64_t v78 = _swiftEmptyArrayStorage;
    sub_1000AFADC(0, v56, 0);
    sub_1000B1BA0();
    uint64_t v73 = v55;
    uint64_t v74 = v57;
    uint64_t v58 = (uint64_t)v55 + v57;
    uint64_t v59 = *(void *)(v39 + 72);
    do
    {
      uint64_t v60 = v75;
      uint64_t v61 = sub_1000B1B04(v75, v58);
      URL.standardizedFileURL.getter(v61);
      sub_1000B1980(v60);
      uint64_t v62 = v78;
      if ((sub_1000B1B78() & 1) == 0)
      {
        sub_1000B1A28(0, v62[2] + 1LL);
        uint64_t v62 = v78;
      }

      unint64_t v64 = v62[2];
      unint64_t v63 = v62[3];
      if (v64 >= v63 >> 1)
      {
        sub_1000B1A28(v63 > 1, v64 + 1);
        uint64_t v62 = v78;
      }

      v62[2] = v64 + 1;
      sub_1000770AC((uint64_t)v62 + v74 + v64 * v59, v76, v77);
      uint64_t v78 = v62;
      v58 += v59;
      --v56;
    }

    while (v56);
    swift_release();
  }

  else
  {
    swift_release();
    uint64_t v62 = _swiftEmptyArrayStorage;
  }

  sub_1000B1980((uint64_t)v70);
  return v62;
}

Swift::Void __swiftcall NSFileManager.parsec_cleanup()()
{
  unint64_t v3 = v0;
  sub_10000941C(&qword_1001D32B0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100014428();
  uint64_t v109 = v5;
  uint64_t v111 = type metadata accessor for Date(0LL);
  uint64_t v107 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v6);
  uint64_t v108 = (char *)v99 - v7;
  sub_10000941C(&qword_1001D5D78);
  sub_100009B94();
  __chkstk_darwin(v8);
  sub_100014428();
  uint64_t v112 = v9;
  uint64_t v115 = type metadata accessor for URLResourceValues(0LL);
  sub_100010F98();
  __chkstk_darwin(v10);
  sub_100014428();
  uint64_t v110 = v11;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v12);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v13);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v14);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v99 - v16;
  uint64_t v123 = (char *)sub_10005A18C();
  uint64_t v124 = *((void *)v123 - 1);
  __chkstk_darwin(v123);
  sub_10005F878();
  uint64_t v20 = v18 - v19;
  __chkstk_darwin(v21);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v22);
  sub_1000B1A60();
  __chkstk_darwin(v23);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v24);
  sub_10003D828();
  sub_100077030();
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)v99 - v27;
  __chkstk_darwin(v26);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v29);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v30);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v31);
  uint64_t v125 = (char *)v99 - v32;
  if (qword_1001D0618 != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v33 = sub_100010ED4();
    uint64_t v117 = sub_1000093D0(v33, (uint64_t)qword_1001EDE48);
    id v34 = (os_log_s *)v117;
    Logger.logObject.getter(v117);
    os_log_type_t v35 = sub_100014588();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)id v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Cleaning up", v36, 2u);
      sub_100010C34((uint64_t)v36);
    }

    NSFileManager.parsecdSessionFBDirectoryURL.getter(v37);
    uint64_t v38 = (uint64_t)v123;
    sub_10005A148((uint64_t)v17, 1LL, (uint64_t)v123);
    if (v39)
    {
      sub_100014358((uint64_t)v17, &qword_1001D5ED0);
      return;
    }

    unint64_t v103 = v1;
    uint64_t v114 = v20;
    uint64_t v40 = v124;
    uint64_t v20 = (uint64_t)v125;
    uint64_t v126 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
    v126(v125, v17, v38);
    URL._bridgeToObjectiveC()(v41);
    uint64_t v17 = v42;
    uint64_t v102 = sub_10000941C(&qword_1001D5D70);
    uint64_t v43 = sub_1000B1B4C(v102);
    *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v43 + 32) = NSURLCreationDateKey;
    *(void *)(v43 + 4sub_1000AC280(v0, v1, 0) = NSURLFileSizeKey;
    v129[0] = 0LL;
    uint64_t v101 = NSURLCreationDateKey;
    uint64_t v44 = NSURLFileSizeKey;
    id v45 = sub_1000B18E0((uint64_t)v17, v43, 0LL, (uint64_t)v129, v3);

    id v46 = v129[0];
    if (!v45)
    {
      id v55 = v129[0];
      uint64_t v56 = _convertNSErrorToError(_:)(v46);

      swift_willThrow(v57);
      swift_errorRelease(v56);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v20, v38);
      return;
    }

    uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v38);
    id v48 = v46;

    URL.appendingPathComponent(_:isDirectory:)(0x7364616F6C7075LL, 0xE700000000000000LL, 1LL);
    URL._bridgeToObjectiveC()(v49);
    uint64_t v51 = v50;
    v129[0] = 0LL;
    uint64_t v52 = (char *)[v3 removeItemAtURL:v50 error:v129];

    id v53 = v129[0];
    if ((_DWORD)v52)
    {
      id v54 = v129[0];
    }

    else
    {
      id v58 = v129[0];
      uint64_t v59 = _convertNSErrorToError(_:)(v53);

      uint64_t v52 = (char *)v59;
      swift_willThrow(v60);
      swift_errorRelease(v59);
    }

    uint64_t v105 = 0LL;
    uint64_t v61 = v124;
    v99[7] = v3;
    v129[0] = _swiftEmptyArrayStorage;
    sub_1000B1B0C();
    uint64_t v119 = v28;
    uint64_t v62 = v116;
    unint64_t v118 = v63;
    if (!v63) {
      break;
    }
    unint64_t v1 = 0LL;
    sub_1000B1B60();
    while (v1 < *(void *)(v47 + 16))
    {
      uint64_t v28 = v2;
      (*(void (**)(void *, unint64_t, char *))(v61 + 16))( v3,  v47 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
      + *(void *)(v61 + 72) * v1,
        v52);
      sub_100077418((uint64_t)v3, 0LL);
      sub_10005A148((uint64_t)v3, 1LL, (uint64_t)v52);
      if (v39)
      {
        uint64_t v20 = (uint64_t)v125;
        sub_1000B1AE0();
        goto LABEL_28;
      }

      unint64_t v64 = v3;
      unint64_t v3 = v126;
      uint64_t v65 = ((uint64_t (*)(uint64_t, void, char *))v126)(v62, v64, v52);
      uint64_t v17 = (char *)v62;
      uint64_t v66 = URL.lastPathComponent.getter(v65);
      char v68 = sub_1000AD094(0x6E6F6973736573LL, 0xE700000000000000LL, v66, v67);
      sub_100009B3C();
      if ((v68 & 1) != 0)
      {
        v3(v120, (char *)v62, (uint64_t)v52);
        uint64_t v69 = v129[0];
        if ((sub_1000B1B78() & 1) == 0)
        {
          sub_1000B1A28(0, v69[2] + 1LL);
          uint64_t v69 = v129[0];
        }

        sub_1000B1B60();
        uint64_t v52 = (char *)v69[2];
        unint64_t v70 = v69[3];
        if ((unint64_t)v52 >= v70 >> 1)
        {
          sub_1000B1A28(v70 > 1, (uint64_t)(v52 + 1));
          uint64_t v69 = v129[0];
        }

        uint64_t v69[2] = v52 + 1;
        sub_1000B1B0C();
        sub_1000B1A98(v71, v72);
        v129[0] = v69;
        uint64_t v61 = v124;
        uint64_t v62 = v116;
      }

      else
      {
        uint64_t v61 = v124;
        sub_10004729C(v62, *(uint64_t (**)(uint64_t, uint64_t))(v124 + 8));
        sub_1000B1B60();
      }

      ++v1;
      uint64_t v20 = (uint64_t)v125;
      uint64_t v28 = v119;
      if (v118 == v1) {
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_43:
    swift_once(&qword_1001D0618, sub_1000AD1F4);
  }

  sub_1000B1B60();
LABEL_26:
  sub_100077418((uint64_t)v3, 1LL);
LABEL_28:
  swift_bridgeObjectRelease();
  sub_100014358((uint64_t)v3, &qword_1001D5ED0);
  id v106 = v129[0];
  uint64_t v73 = *((void *)v129[0] + 2);
  uint64_t v74 = v121;
  if (v73)
  {
    sub_1000B1BA0();
    uint64_t v76 = (uint64_t)v106 + v75;
    uint64_t v120 = *(char **)(v61 + 72);
    v99[4] = &v127;
    uint64_t v122 = *(void *)(v61 + 16);
    uint64_t v104 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v77 = 136315138LL;
    __int128 v116 = v77;
    v99[3] = "t.telemetry:string2,public}s";
    unint64_t v118 = 0x80000001001711C0LL;
    __int128 v100 = xmmword_10015C7F0;
    while (1)
    {
      sub_1000B1970(v74, v76);
      sub_100077418(v74, 0LL);
      sub_10005A148(v74, 1LL, (uint64_t)v52);
      if (v39) {
        break;
      }
      sub_1000B1A98((uint64_t)v28, v74);
      uint64_t v78 = sub_1000B1AFC();
      unint64_t v80 = v79;
      uint64_t v81 = type metadata accessor for SessionFilename(0LL);
      sub_1000773F4(v81);
      SessionFilename.init(fromString:)(v78, v80);
      if (v82)
      {
        uint64_t v83 = v82;
        uint64_t v84 = (_BYTE *)(v82 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
        uint64_t v85 = sub_1000B1AEC(v82, (uint64_t)v129);
        if ((*v84 & 1) == 0)
        {
          uint64_t v98 = v83 + OBJC_IVAR____TtC7parsecd15SessionFilename_state;
          sub_1000B1AEC(v85, (uint64_t)v128);
          __asm { BR              X9 }
        }

        sub_10004729C((uint64_t)v28, *(uint64_t (**)(uint64_t, uint64_t))(v61 + 8));
        sub_1000A1790();
      }

      else
      {
        uint64_t v86 = v114;
        sub_1000B1970(v114, (uint64_t)v28);
        uint64_t v87 = (os_log_s *)sub_1000B1988();
        os_log_type_t v88 = static os_log_type_t.debug.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v89 = sub_100009B20(12LL);
          uint64_t v90 = (void *)sub_100009B20(32LL);
          v129[3] = v90;
          *(_DWORD *)uint64_t v89 = v116;
          uint64_t v91 = URL.lastPathComponent.getter(v90);
          *(void *)(v89 + 4) = sub_1000A25D4(v91, v92);
          sub_100009B3C();
          uint64_t v93 = v86;
          uint64_t v94 = v124;
          uint64_t v95 = *(void (**)(uint64_t, char *))(v124 + 8);
          sub_1000B1B2C(v93);
          os_log_type_t v96 = v88;
          uint64_t v61 = v94;
          sub_100014564( (void *)&_mh_execute_header,  v87,  v96,  "Unable to parse filename %s into a SessionFilename object.",  (uint8_t *)v89);
          swift_arrayDestroy(v90, 1LL);
          sub_100010C34((uint64_t)v90);
          uint64_t v97 = v89;
          uint64_t v52 = v123;
          sub_100010C34(v97);
        }

        else
        {
          uint64_t v61 = v124;
          uint64_t v95 = *(void (**)(uint64_t, char *))(v124 + 8);
          v95(v86, v52);
        }

        NSFileManager.parsec_removeItemOrLogError(at:message:)();
        v95((uint64_t)v28, v52);
      }

      uint64_t v74 = v121;
      uint64_t v20 = (uint64_t)v125;
      v76 += (uint64_t)v120;
      if (!--v73) {
        goto LABEL_40;
      }
    }
  }

  else
  {
LABEL_40:
    sub_100077418(v74, 1LL);
  }

  swift_release();
  sub_1000B1A30(v113);
  sub_1000B1A30(v20);
}

void NSFileManager.parsec_removeItemOrLogError(at:message:)()
{
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = sub_10005A18C();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  sub_1000270AC();
  uint64_t v8 = URL.standardizedFileURL.getter(v7);
  uint64_t v9 = URL.path.getter(v8);
  unint64_t v11 = v10;
  sub_1000ABA4C(v0, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  uint64_t v12 = String.utf8CString.getter(v9, v11);
  int v13 = unlink((const char *)(v12 + 32));
  uint64_t v14 = swift_release();
  if (v13 == noErr.getter(v14))
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v15 = sub_100010ED4();
    sub_1000093D0(v15, (uint64_t)qword_1001EDE48);
    swift_bridgeObjectRetain_n(v2, 2LL);
    uint64_t v16 = swift_bridgeObjectRetain(v11);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v19 = static os_log_type_t.error.getter(v17, v18);
    if (os_log_type_enabled(v17, v19))
    {
      uint64_t v20 = sub_100009B20(28LL);
      uint64_t v21 = sub_100009B20(64LL);
      uint64_t v24 = v21;
      *(_DWORD *)uint64_t v20 = 136315650;
      swift_bridgeObjectRetain(v2);
      uint64_t v23 = sub_1000307E0(v4, v2, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20 + 4);
      swift_bridgeObjectRelease_n(v2, 3LL);
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      uint64_t v23 = sub_1000307E0(v9, v11, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20 + 14);
      uint64_t v22 = swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v20 + 22) = 1024;
      LODWORD(v23) = errno.getter(v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4, v20 + 24);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%s: at path %s errno: %d)", (uint8_t *)v20, 0x1Cu);
      swift_arrayDestroy(v21, 2LL);
      sub_100010C34(v21);
      sub_100010C34(v20);
    }

    else
    {

      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease_n(v2, 2LL);
    }
  }

  sub_100009AA0();
}

uint64_t NSFileManager.parsec_renameForStateChange(sessionFile:toState:)@<X0>( uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v64 = a3;
  unsigned int v62 = a2;
  uint64_t v63 = a1;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_100032C48();
  uint64_t v60 = v6;
  sub_10003D810();
  __chkstk_darwin(v7);
  uint64_t v61 = (uint64_t)&v57 - v8;
  sub_10003D810();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v57 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - v13;
  type metadata accessor for URL(0LL);
  sub_100010F98();
  __chkstk_darwin(v15);
  sub_10005F878();
  sub_1000B1A60();
  uint64_t v17 = __chkstk_darwin(v16);
  os_log_type_t v19 = (char *)&v57 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v57 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v57 - v24;
  NSFileManager.parsecdSessionFBDirectoryURL.getter(v23);
  sub_100011004((uint64_t)v12);
  if (v29)
  {
    sub_100014358((uint64_t)v12, &qword_1001D5ED0);
    sub_10003B948((uint64_t)v14, 1LL);
LABEL_6:
    uint64_t v30 = (uint64_t)v14;
    goto LABEL_7;
  }

  id v58 = v19;
  id v59 = v3;
  SessionFilename.filenameString.getter();
  URL.appendingPathComponent(_:)(v26, v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1000B19EC((uint64_t)v12);
  URL.standardizedFileURL.getter(v28);
  sub_1000B19EC((uint64_t)v22);
  sub_10003B948((uint64_t)v14, 0LL);
  sub_100011004((uint64_t)v14);
  if (v29) {
    goto LABEL_6;
  }
  sub_1000B1B58((uint64_t)v25, (uint64_t)v14);
  id v34 = (_BYTE *)(v63 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  swift_beginAccess(v63 + OBJC_IVAR____TtC7parsecd15SessionFilename_state, v66, 1LL, 0LL);
  char v35 = v62;
  uint64_t v36 = sub_10007E63C(*v34, v62);
  if ((v36 & 1) != 0)
  {
    uint64_t v32 = v64;
    uint64_t v37 = v64;
    uint64_t v38 = (uint64_t)v25;
LABEL_12:
    sub_1000B1B58(v37, v38);
    uint64_t v31 = 0LL;
    return sub_10003B948(v32, v31);
  }

  *id v34 = v35;
  uint64_t v39 = v60;
  NSFileManager.parsecdSessionFBDirectoryURL.getter(v36);
  sub_100011004(v39);
  if (v29)
  {
    sub_100014358(v39, &qword_1001D5ED0);
    uint64_t v43 = v61;
    sub_10003B948(v61, 1LL);
  }

  else
  {
    SessionFilename.filenameString.getter();
    URL.appendingPathComponent(_:)(v40, v41);
    swift_bridgeObjectRelease();
    uint64_t v42 = sub_1000B19EC(v39);
    uint64_t v43 = v61;
    URL.standardizedFileURL.getter(v42);
    sub_1000B19EC(v4);
    sub_10003B948(v43, 0LL);
    sub_100011004(v43);
    if (!v44)
    {
      uint64_t v45 = (uint64_t)v58;
      sub_1000B1B58((uint64_t)v58, v43);
      URL._bridgeToObjectiveC()(v46);
      id v48 = v47;
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      id v65 = 0LL;
      unsigned int v52 = [v59 moveItemAtURL:v48 toURL:v50 error:&v65];

      id v53 = v65;
      if (!v52)
      {
        id v55 = v65;
        _convertNSErrorToError(_:)(v53);

        swift_willThrow(v56);
        sub_1000B19EC(v45);
        return sub_1000B19EC((uint64_t)v25);
      }

      id v54 = v65;
      sub_1000B19EC((uint64_t)v25);
      uint64_t v32 = v64;
      uint64_t v37 = v64;
      uint64_t v38 = v45;
      goto LABEL_12;
    }
  }

  sub_1000B19EC((uint64_t)v25);
  uint64_t v30 = v43;
LABEL_7:
  sub_100014358(v30, &qword_1001D5ED0);
  uint64_t v31 = 1LL;
  uint64_t v32 = v64;
  return sub_10003B948(v32, v31);
}

void *NSFileManager.parsec_getPrunedSessionFiles(maximum:)(uint64_t a1)
{
  unint64_t v2 = NSFileManager.sessionFiles.getter();
  uint64_t v3 = v2[2];
  if (v3 > a1)
  {
    unint64_t v4 = v3 - a1 / 2;
    if (__OFSUB__(v3, a1 / 2))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = v2;
      swift_bridgeObjectRetain(v2);
      sub_1000AFAF8((uint64_t *)&v8);
      sub_1000325E4();
      if ((v4 & 0x8000000000000000LL) == 0)
      {
        uint64_t v5 = (uint64_t)v8;
        if (v8[2] >= v4)
        {
          sub_10005A18C();
          sub_1000B1AB8();
          return sub_1000AC61C( v5,  v6,  0LL,  (2 * v4) | 1,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_1000DBF68);
        }

        goto LABEL_10;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
    unint64_t result = (void *)swift_release();
    __break(1u);
    return result;
  }

  sub_1000325E4();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000AF080(uint64_t a1, uint64_t a2)
{
  uint64_t v61 = a2;
  uint64_t v2 = sub_10000941C(&qword_1001D32B0);
  uint64_t v3 = __chkstk_darwin(v2);
  id v59 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v64 = (void (*)(char *, uint64_t, uint64_t))((char *)&v54 - v5);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  uint64_t v66 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  id v58 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v63 = (char *)&v54 - v10;
  uint64_t v11 = sub_10000941C(&qword_1001D5D78);
  uint64_t v12 = __chkstk_darwin(v11);
  unsigned int v62 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v54 - v14;
  uint64_t v16 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v23 = sub_10000941C(&qword_1001D5D70);
  uint64_t inited = swift_initStackObject(v23, v68);
  __int128 v60 = xmmword_10015C7F0;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  *(void *)(inited + 32) = NSURLCreationDateKey;
  uint64_t v25 = NSURLCreationDateKey;
  sub_1000B15E0(inited);
  uint64_t v26 = v69;
  URL.resourceValues(forKeys:)();
  if (v26)
  {
    swift_errorRelease(v26);
    swift_bridgeObjectRelease();
    sub_100009654((uint64_t)v15, 1LL, 1LL, v16);
LABEL_4:
    uint64_t v29 = (uint64_t)v15;
LABEL_5:
    sub_100014358(v29, &qword_1001D5D78);
    char v30 = 1;
    return v30 & 1;
  }

  uint64_t v57 = v23;
  uint64_t v56 = v20;
  uint64_t v69 = v22;
  uint64_t v28 = v65;
  uint64_t v27 = v66;
  swift_bridgeObjectRelease();
  sub_100009654((uint64_t)v15, 0LL, 1LL, v16);
  uint64_t v32 = v17;
  uint64_t v33 = v69;
  id v55 = *(uint64_t (**)(void))(v17 + 32);
  uint64_t v34 = ((uint64_t (*)(char *, char *, uint64_t))v55)(v69, v15, v16);
  uint64_t v35 = (uint64_t)v64;
  URLResourceValues.creationDate.getter(v34);
  if (sub_100010708(v35, 1LL, v28) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v16);
    sub_100014358(v35, &qword_1001D32B0);
    char v30 = 1;
    return v30 & 1;
  }

  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
  v36(v63, v35, v28);
  uint64_t v37 = swift_initStackObject(v57, v67);
  *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = v60;
  *(void *)(v37 + 32) = v25;
  uint64_t v38 = v25;
  sub_1000B15E0(v37);
  uint64_t v39 = (uint64_t)v62;
  URL.resourceValues(forKeys:)();
  uint64_t v64 = v36;
  swift_bridgeObjectRelease();
  uint64_t v40 = v16;
  sub_100009654(v39, 0LL, 1LL, v16);
  if (sub_100010708(v39, 1LL, v16) == 1)
  {
    (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v28);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v69, v16);
    uint64_t v29 = v39;
    goto LABEL_5;
  }

  uint64_t v61 = 0LL;
  uint64_t v41 = v56;
  uint64_t v42 = v55();
  uint64_t v43 = (uint64_t)v59;
  URLResourceValues.creationDate.getter(v42);
  uint64_t v44 = v28;
  int v45 = sub_100010708(v43, 1LL, v28);
  id v46 = v63;
  uint64_t v47 = v66;
  if (v45 == 1)
  {
    id v48 = *(void (**)(char *, uint64_t))(v32 + 8);
    v48(v41, v40);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v44);
    v48(v69, v40);
    sub_100014358(v43, &qword_1001D32B0);
    char v30 = 1;
  }

  else
  {
    uint64_t v49 = v58;
    v64(v58, v43, v44);
    char v30 = static Date.< infix(_:_:)(v46, v49);
    uint64_t v50 = v47;
    uint64_t v51 = v44;
    unsigned int v52 = *(void (**)(char *, uint64_t))(v50 + 8);
    v52(v49, v51);
    id v53 = *(void (**)(char *, uint64_t))(v32 + 8);
    v53(v41, v40);
    v52(v46, v51);
    v53(v69, v40);
  }

  return v30 & 1;
}

Swift::Void __swiftcall NSFileManager.parsec_pruneSessionFiles(maximum:)(Swift::Int maximum)
{
  uint64_t v20 = v3;
  uint64_t v21 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_10005A18C();
  sub_100010F98();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100010FCC();
  uint64_t v12 = NSFileManager.parsec_getPrunedSessionFiles(maximum:)(v6);
  uint64_t v13 = v12[2];
  if (v13)
  {
    sub_1000B1BA0();
    uint64_t v15 = (char *)v12 + v14;
    uint64_t v16 = *(void *)(v2 + 72);
    uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 16);
    while (1)
    {
      v17(v1, v15, v7);
      sub_1000B1A04(v1, 0LL);
      sub_10005A148(v1, 1LL, v7);
      if (v18) {
        break;
      }
      sub_1000770AC((uint64_t)v10, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
      NSFileManager.parsec_removeItemOrLogError(at:message:)();
      sub_10007704C((uint64_t)v10, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      v15 += v16;
      if (!--v13) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    sub_1000B1A04(v1, 1LL);
  }

  sub_100009B3C();
  sub_100009AA0();
}

uint64_t NSFileManager.databaseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = sub_10005A18C();
  sub_10005A148(v1, 1LL, v5);
  if (v6)
  {
    sub_100014358(v1, &qword_1001D5ED0);
    uint64_t v7 = 1LL;
  }

  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016LL, 0x80000001001711E0LL, 0LL);
    sub_10004729C(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL));
    uint64_t v7 = 0LL;
  }

  return sub_100077418(a1, v7);
}

uint64_t sub_1000AF79C(uint64_t result)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  uint64_t v3 = *(void *)(v1 + v2);
  BOOL v4 = __OFADD__(v3, result);
  uint64_t v5 = v3 + result;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(v1 + v2) = v5;
  }
  return result;
}

uint64_t sub_1000AF7C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1001D6BE8);
  *(void *)(v1 + qword_1001D6BE8) = a1;
  swift_errorRetain(a1);
  return swift_errorRelease(v2);
}

void sub_1000AF7F0()
{
  if ((v0[81] & 1) == 0)
  {
    uint64_t v1 = &v0[*(void *)(*(void *)v0 + 472LL)];
    uint64_t v2 = sub_1000C69D0(*(void *)v1, *((unsigned int *)v1 + 2));
    sub_1000D5B24(v2);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10000941C(&qword_1001D0C10);
    uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
    *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v5 = *(void *)v1;
    *(void *)(v4 + 56) = &type metadata for Int;
    *(void *)(v4 + 64) = &protocol witness table for Int;
    *(void *)(v4 + 32) = v5;
    sub_1000D6888("bytesWritten=%{signpost.description:attribute,public}llu", 56LL, 2LL, v4);
    swift_bridgeObjectRelease();
    char v6 = *(os_unfair_lock_s **)(*(void *)&v0[*(void *)(*(void *)v0 + 152LL)] + 16LL);
    swift_retain(*(void *)&v0[*(void *)(*(void *)v0 + 152LL)]);
    os_unfair_lock_lock(v6);
    if ((v0[81] & 1) == 0) {
      sub_1000D5E14();
    }
    os_unfair_lock_unlock(v6);
    swift_release();
  }

uint64_t sub_1000AF8EC(uint64_t a1)
{
  return sub_1000AF994(a1, (uint64_t (*)(void))&type metadata accessor for Trialpb_TrialExperiment);
}

uint64_t sub_1000AF8F8(uint64_t a1)
{
  return sub_1000AF994(a1, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1000AF904(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_1000B1A70();
    uint64_t result = sub_1000B1A10( (uint64_t)"Fatal error",  v5,  v6,  (uint64_t)"Can't construct Array with count < 0",  v7,  v8,  (uint64_t)"Swift/Array.swift",  v9,  v10,  v11,  v12);
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v2 = sub_10000941C(&qword_1001D5D80);
      uint64_t v3 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v2);
      v3[2] = a1;
    }

    else
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }

    sub_10000941C(&qword_1001D5D80);
    sub_1000B1AB8();
    return (uint64_t)v3;
  }

  return result;
}

uint64_t sub_1000AF994(uint64_t a1, uint64_t (*a2)(void))
{
  if (a1 < 0)
  {
    sub_1000B1A70();
    uint64_t result = sub_1000B1A10( (uint64_t)"Fatal error",  v7,  v8,  (uint64_t)"Can't construct Array with count < 0",  v9,  v10,  (uint64_t)"Swift/Array.swift",  v11,  v12,  v13,  v14);
    __break(1u);
  }

  else
  {
    if (a1)
    {
      uint64_t v4 = a2(0LL);
      uint64_t v5 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(a1, v4);
      v5[2] = a1;
    }

    else
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }

    a2(0LL);
    sub_1000B1BA0();
    return (uint64_t)v5;
  }

  return result;
}

void sub_1000AFA34(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFA50(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFA6C(char a1, int64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFA88(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFAA4(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFAC0(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFADC(char a1, uint64_t a2, char a3)
{
  *uint64_t v3 = v4;
}

void sub_1000AFAF8(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000DE1BC(v3, v4, v5);
    uint64_t v3 = v6;
  }

  uint64_t v7 = *(void *)(v3 + 16);
  v8[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8[1] = v7;
  sub_1000AFB78(v8);
  *a1 = v3;
}

void sub_1000AFB78(uint64_t *a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D32B0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v184 = (char *)&v174 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v194 = (char *)&v174 - v5;
  uint64_t v196 = type metadata accessor for Date(0LL);
  uint64_t v193 = *(void *)(v196 - 8);
  uint64_t v6 = __chkstk_darwin(v196);
  unint64_t v181 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v192 = (char *)&v174 - v8;
  uint64_t v9 = sub_10000941C(&qword_1001D5D78);
  uint64_t v10 = __chkstk_darwin(v9);
  int v12 = (char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v201 = (char *)&v174 - v13;
  uint64_t v207 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v14 = *(void *)(v207 - 8);
  uint64_t v15 = __chkstk_darwin(v207);
  uint64_t v17 = (char *)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  unint64_t v19 = (unint64_t)&v174 - v18;
  uint64_t v202 = type metadata accessor for URL(0LL);
  uint64_t v20 = *(void (**)(unint64_t, uint64_t))(v202 - 8);
  uint64_t v21 = __chkstk_darwin(v202);
  uint64_t v187 = (char *)&v174 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v174 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v214 = (char *)&v174 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  id v210 = (char *)&v174 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v174 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v186 = (char *)&v174 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v180 = (char *)&v174 - v36;
  __chkstk_darwin(v35);
  uint64_t v179 = (char *)&v174 - v37;
  uint64_t v213 = a1;
  Swift::Int v38 = a1[1];
  Swift::Int v39 = _minimumMergeRunLength(_:)(v38);
  if (v39 >= v38)
  {
    if (v38 < 0) {
      goto LABEL_161;
    }
    if (v38) {
      sub_1000B0C70(0LL, v38, 1LL, v213);
    }
    return;
  }

  uint64_t v40 = v39;
  uint64_t v175 = sub_1000AF994(v38 / 2, (uint64_t (*)(void))&type metadata accessor for URL);
  unint64_t v190 = v41;
  uint64_t v176 = v38;
  if (v38 <= 0)
  {
    uint64_t v43 = (char *)_swiftEmptyArrayStorage;
    unint64_t v116 = _swiftEmptyArrayStorage[2];
LABEL_121:
    if (v116 >= 2)
    {
      uint64_t v40 = *v213;
      do
      {
        unint64_t v167 = v116 - 2;
        if (v116 < 2) {
          goto LABEL_155;
        }
        if (!v40) {
          goto LABEL_169;
        }
        uint64_t v14 = v116 - 1;
        int64_t v168 = *(void *)&v43[16 * v167 + 32];
        unint64_t v19 = *(void *)&v43[16 * v116 + 24];
        uint64_t v169 = v217;
        sub_1000B0EF0( v40 + *((void *)v20 + 9) * v168,  v40 + *((void *)v20 + 9) * *(void *)&v43[16 * v116 + 16],  v40 + *((void *)v20 + 9) * v19,  v190);
        uint64_t v217 = v169;
        if (v169) {
          goto LABEL_137;
        }
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_1000DD478((uint64_t)v43);
          uint64_t v43 = v172;
        }

        if (v167 >= *((void *)v43 + 2)) {
          goto LABEL_157;
        }
        uint64_t v170 = (int64_t *)&v43[16 * v167 + 32];
        *uint64_t v170 = v168;
        v170[1] = v19;
        unint64_t v171 = *((void *)v43 + 2);
        if (v116 > v171) {
          goto LABEL_158;
        }
        memmove(&v43[16 * v14 + 32], &v43[16 * v116 + 32], 16 * (v171 - v116));
        *((void *)v43 + 2) = v171 - 1;
        unint64_t v116 = v171 - 1;
      }

      while (v171 > 2);
    }

    swift_bridgeObjectRelease();
    if (v176 >= -1) {
      goto LABEL_138;
    }
    __break(1u);
LABEL_136:
    v20(v19, v14);
    v20(v40, v14);
LABEL_137:
    swift_bridgeObjectRelease();
    if (v176 < -1) {
      goto LABEL_163;
    }
LABEL_138:
    *(void *)(v175 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v178 = v40;
  uint64_t v183 = v32;
  unint64_t v197 = v19;
  uint64_t v182 = v17;
  uint64_t v198 = v14;
  unint64_t v42 = 0LL;
  NSURLResourceKey v200 = NSURLCreationDateKey;
  uint64_t v43 = (char *)_swiftEmptyArrayStorage;
  __int128 v204 = xmmword_10015C7F0;
  Swift::Int v44 = v38;
  uint64_t v205 = v20;
  uint64_t v191 = v12;
  uint64_t v14 = v202;
  uint64_t v195 = v25;
  while (1)
  {
    int64_t v45 = v42;
    unint64_t v46 = v42 + 1;
    unint64_t v188 = v42;
    if ((uint64_t)(v42 + 1) >= v44)
    {
      Swift::Int v61 = v42 + 1;
      uint64_t v62 = v178;
      goto LABEL_34;
    }

    int64_t v211 = v44;
    uint64_t v177 = v43;
    uint64_t v47 = *v213;
    uint64_t v48 = *((void *)v20 + 9);
    uint64_t v49 = (void (*)(char *, unint64_t, uint64_t))*((void *)v20 + 2);
    unint64_t v19 = v42;
    uint64_t v50 = (uint64_t)v179;
    v49(v179, *v213 + v48 * v46, v14);
    uint64_t v208 = v47;
    uint64_t v212 = v48;
    unint64_t v51 = v47 + v48 * v19;
    uint64_t v52 = (uint64_t)v180;
    v49(v180, v51, v14);
    uint64_t v53 = v217;
    int v54 = sub_1000AF080(v50, v52);
    uint64_t v217 = v53;
    if (v53)
    {
      uint64_t v173 = (void (*)(uint64_t, uint64_t))*((void *)v20 + 1);
      v173(v52, v14);
      v173(v50, v14);
      goto LABEL_137;
    }

    int v55 = v54;
    uint64_t v20 = (void (*)(unint64_t, uint64_t))*((void *)v20 + 1);
    v20(v52, v14);
    v20(v50, v14);
    int64_t v206 = v19 + 2;
    if ((uint64_t)(v19 + 2) >= v211)
    {
      int64_t v45 = v19;
    }

    else
    {
      uint64_t v209 = v212 * v46;
      uint64_t v56 = v208;
      uint64_t v57 = v212 * (v19 + 2);
      uint64_t v40 = (uint64_t)v186;
      while (1)
      {
        v49((char *)v40, v56 + v57, v14);
        unint64_t v19 = (unint64_t)v183;
        v49(v183, v56 + v209, v14);
        uint64_t v58 = v217;
        int v59 = sub_1000AF080(v40, v19);
        uint64_t v217 = v58;
        if (v58) {
          goto LABEL_136;
        }
        int v60 = v59;
        v20(v19, v14);
        v20(v40, v14);
        if (((v55 ^ v60) & 1) != 0) {
          break;
        }
        v56 += v212;
        ++v206;
        uint64_t v40 = (uint64_t)v186;
        if (v206 >= v211)
        {
          Swift::Int v44 = v211;
          int64_t v206 = v211;
          uint64_t v25 = v195;
          int64_t v45 = v188;
          goto LABEL_16;
        }
      }

      uint64_t v25 = v195;
      int64_t v45 = v188;
    }

    Swift::Int v44 = v211;
LABEL_16:
    uint64_t v20 = v205;
    uint64_t v43 = v177;
    uint64_t v62 = v178;
    if ((v55 & 1) != 0)
    {
      Swift::Int v61 = v206;
      if (v206 < v45) {
        goto LABEL_167;
      }
      if (v45 < v206)
      {
        uint64_t v63 = 0LL;
        uint64_t v64 = v212 * (v206 - 1);
        uint64_t v65 = v206 * v212;
        int64_t v66 = v45;
        uint64_t v67 = v45 * v212;
        do
        {
          if (v66 != v61 + v63 - 1)
          {
            uint64_t v68 = v208;
            if (!v208) {
              goto LABEL_170;
            }
            unint64_t v69 = v208 + v67;
            unint64_t v19 = v208 + v64;
            uint64_t v209 = *((void *)v205 + 4);
            ((void (*)(char *, uint64_t, uint64_t))v209)(v187, v208 + v67, v14);
            if (v67 < v64 || v69 >= v68 + v65)
            {
              swift_arrayInitWithTakeFrontToBack(v68 + v67, v68 + v64, 1LL, v14);
            }

            else if (v67 != v64)
            {
              swift_arrayInitWithTakeBackToFront(v68 + v67, v68 + v64, 1LL, v14);
            }

            ((void (*)(uint64_t, char *, uint64_t))v209)(v68 + v64, v187, v14);
            Swift::Int v61 = v206;
          }

          ++v66;
          --v63;
          v64 -= v212;
          v65 -= v212;
          v67 += v212;
        }

        while (v66 < v61 + v63);
        uint64_t v20 = v205;
        uint64_t v43 = v177;
        uint64_t v25 = v195;
        uint64_t v62 = v178;
        int64_t v45 = v188;
        Swift::Int v44 = v211;
      }
    }

    else
    {
      Swift::Int v61 = v206;
    }

LABEL_67:
    if (v61 < v45) {
      goto LABEL_160;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
    int64_t v206 = v61;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000DD3BC(0, *((void *)v43 + 2) + 1LL, 1, v43);
      uint64_t v43 = v165;
    }

    unint64_t v115 = *((void *)v43 + 2);
    unint64_t v114 = *((void *)v43 + 3);
    unint64_t v116 = v115 + 1;
    if (v115 >= v114 >> 1)
    {
      sub_1000DD3BC(v114 > 1, v115 + 1, 1, v43);
      uint64_t v43 = v166;
    }

    *((void *)v43 + 2) = v116;
    uint64_t v40 = (uint64_t)(v43 + 32);
    uint64_t v117 = (int64_t *)&v43[16 * v115 + 32];
    int64_t v118 = v206;
    int64_t *v117 = v45;
    v117[1] = v118;
    if (v115)
    {
      while (1)
      {
        unint64_t v119 = v116 - 1;
        if (v116 >= 4)
        {
          unint64_t v124 = v40 + 16 * v116;
          uint64_t v125 = *(void *)(v124 - 64);
          uint64_t v126 = *(void *)(v124 - 56);
          BOOL v130 = __OFSUB__(v126, v125);
          uint64_t v127 = v126 - v125;
          if (v130) {
            goto LABEL_145;
          }
          uint64_t v129 = *(void *)(v124 - 48);
          uint64_t v128 = *(void *)(v124 - 40);
          BOOL v130 = __OFSUB__(v128, v129);
          uint64_t v122 = v128 - v129;
          char v123 = v130;
          if (v130) {
            goto LABEL_146;
          }
          unint64_t v131 = v116 - 2;
          uint64_t v132 = (uint64_t *)(v40 + 16 * (v116 - 2));
          uint64_t v134 = *v132;
          uint64_t v133 = v132[1];
          BOOL v130 = __OFSUB__(v133, v134);
          uint64_t v135 = v133 - v134;
          if (v130) {
            goto LABEL_147;
          }
          BOOL v130 = __OFADD__(v122, v135);
          uint64_t v136 = v122 + v135;
          if (v130) {
            goto LABEL_149;
          }
          if (v136 >= v127)
          {
            uint64_t v154 = (uint64_t *)(v40 + 16 * v119);
            uint64_t v156 = *v154;
            uint64_t v155 = v154[1];
            BOOL v130 = __OFSUB__(v155, v156);
            uint64_t v157 = v155 - v156;
            if (v130) {
              goto LABEL_159;
            }
            BOOL v147 = v122 < v157;
            goto LABEL_104;
          }
        }

        else
        {
          if (v116 != 3)
          {
            uint64_t v148 = *((void *)v43 + 4);
            uint64_t v149 = *((void *)v43 + 5);
            BOOL v130 = __OFSUB__(v149, v148);
            uint64_t v141 = v149 - v148;
            char v142 = v130;
            goto LABEL_98;
          }

          uint64_t v121 = *((void *)v43 + 4);
          uint64_t v120 = *((void *)v43 + 5);
          BOOL v130 = __OFSUB__(v120, v121);
          uint64_t v122 = v120 - v121;
          char v123 = v130;
        }

        if ((v123 & 1) != 0) {
          goto LABEL_148;
        }
        unint64_t v131 = v116 - 2;
        uint64_t v137 = (uint64_t *)(v40 + 16 * (v116 - 2));
        uint64_t v139 = *v137;
        uint64_t v138 = v137[1];
        BOOL v140 = __OFSUB__(v138, v139);
        uint64_t v141 = v138 - v139;
        char v142 = v140;
        if (v140) {
          goto LABEL_150;
        }
        uint64_t v143 = (uint64_t *)(v40 + 16 * v119);
        uint64_t v145 = *v143;
        uint64_t v144 = v143[1];
        BOOL v130 = __OFSUB__(v144, v145);
        uint64_t v146 = v144 - v145;
        if (v130) {
          goto LABEL_152;
        }
        if (__OFADD__(v141, v146)) {
          goto LABEL_154;
        }
        if (v141 + v146 >= v122)
        {
          BOOL v147 = v122 < v146;
LABEL_104:
          if (v147) {
            unint64_t v119 = v131;
          }
          goto LABEL_106;
        }

LABEL_98:
        if ((v142 & 1) != 0) {
          goto LABEL_151;
        }
        uint64_t v150 = (uint64_t *)(v40 + 16 * v119);
        uint64_t v152 = *v150;
        uint64_t v151 = v150[1];
        BOOL v130 = __OFSUB__(v151, v152);
        uint64_t v153 = v151 - v152;
        if (v130) {
          goto LABEL_153;
        }
        if (v153 < v141) {
          goto LABEL_115;
        }
LABEL_106:
        unint64_t v158 = v119 - 1;
        if (v119 - 1 >= v116)
        {
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
          goto LABEL_165;
        }

        if (!*v213) {
          goto LABEL_168;
        }
        uint64_t v159 = v43;
        uint64_t v160 = (uint64_t *)(v40 + 16 * v158);
        uint64_t v161 = *v160;
        uint64_t v162 = (void *)(v40 + 16 * v119);
        uint64_t v163 = v162[1];
        uint64_t v164 = v217;
        sub_1000B0EF0( *v213 + *((void *)v205 + 9) * *v160,  *v213 + *((void *)v205 + 9) * *v162,  *v213 + *((void *)v205 + 9) * v163,  v190);
        uint64_t v217 = v164;
        if (v164) {
          goto LABEL_137;
        }
        if (v163 < v161) {
          goto LABEL_142;
        }
        if (v119 > *((void *)v159 + 2)) {
          goto LABEL_143;
        }
        *uint64_t v160 = v161;
        *(void *)(v40 + 16 * v158 + 8) = v163;
        unint64_t v19 = *((void *)v159 + 2);
        if (v119 >= v19) {
          goto LABEL_144;
        }
        uint64_t v43 = v159;
        unint64_t v116 = v19 - 1;
        memmove((void *)(v40 + 16 * v119), v162 + 2, 16 * (v19 - 1 - v119));
        *((void *)v159 + 2) = v19 - 1;
        uint64_t v20 = v205;
        uint64_t v25 = v195;
        if (v19 <= 2) {
          goto LABEL_115;
        }
      }
    }

    unint64_t v116 = 1LL;
LABEL_115:
    Swift::Int v44 = v213[1];
    unint64_t v42 = v206;
    if (v206 >= v44) {
      goto LABEL_121;
    }
  }

  if (__OFADD__(v45, v62)) {
    goto LABEL_164;
  }
  if (v45 + v62 >= v44) {
    Swift::Int v71 = v44;
  }
  else {
    Swift::Int v71 = v45 + v62;
  }
  if (v71 >= v45)
  {
    if (v61 == v71) {
      goto LABEL_67;
    }
    uint64_t v177 = v43;
    uint64_t v72 = *((void *)v20 + 9);
    uint64_t v199 = (void (*)(char *, uint64_t, uint64_t))*((void *)v20 + 2);
    uint64_t v212 = v72 * (v61 - 1);
    uint64_t v203 = v72;
    int64_t v211 = v61 * v72;
    Swift::Int v185 = v71;
    while (1)
    {
      int64_t v206 = v61;
      uint64_t v73 = 0LL;
      int64_t v74 = v45;
      do
      {
        unint64_t v19 = (unint64_t)v25;
        uint64_t v75 = *v213;
        uint64_t v209 = v211 + v73;
        uint64_t v76 = v199;
        v199(v210, v211 + v73 + v75, v14);
        uint64_t v208 = v212 + v73;
        v76(v214, v212 + v73 + v75, v14);
        uint64_t v77 = sub_10000941C(&qword_1001D5D70);
        uint64_t inited = swift_initStackObject(v77, v216);
        *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v204;
        NSURLResourceKey v79 = v200;
        *(void *)(inited + 32) = v200;
        unint64_t v80 = v79;
        sub_1000B15E0(inited);
        uint64_t v81 = (uint64_t)v201;
        uint64_t v82 = v217;
        URL.resourceValues(forKeys:)();
        if (v82)
        {
          swift_errorRelease(v82);
          swift_bridgeObjectRelease();
          sub_100009654(v81, 1LL, 1LL, v207);
          uint64_t v217 = 0LL;
          uint64_t v20 = v205;
          uint64_t v83 = v81;
LABEL_49:
          sub_100014358(v83, &qword_1001D5D78);
          uint64_t v14 = v202;
          goto LABEL_50;
        }

        uint64_t v217 = 0LL;
        swift_bridgeObjectRelease();
        uint64_t v84 = v207;
        sub_100009654(v81, 0LL, 1LL, v207);
        int v85 = sub_100010708(v81, 1LL, v84);
        uint64_t v83 = v81;
        if (v85 == 1)
        {
          uint64_t v20 = v205;
          goto LABEL_49;
        }

        uint64_t v91 = v198;
        unint64_t v19 = *(void *)(v198 + 32);
        unint64_t v92 = v197;
        uint64_t v93 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v19)(v197, v83, v84);
        uint64_t v94 = v194;
        URLResourceValues.creationDate.getter(v93);
        uint64_t v95 = (uint64_t)v94;
        uint64_t v96 = (uint64_t)v94;
        uint64_t v97 = v196;
        if (sub_100010708(v96, 1LL, v196) == 1)
        {
          (*(void (**)(unint64_t, uint64_t))(v91 + 8))(v92, v207);
          sub_100014358(v95, &qword_1001D32B0);
          uint64_t v20 = v205;
          uint64_t v14 = v202;
          uint64_t v25 = v195;
          goto LABEL_50;
        }

        uint64_t v98 = *(void (**)(char *, uint64_t, uint64_t))(v193 + 32);
        v98(v192, v95, v97);
        uint64_t v99 = swift_initStackObject(v77, v215);
        *(_OWORD *)(v99 + swift_weakDestroy(v0 + 16) = v204;
        *(void *)(v99 + 32) = v80;
        __int128 v100 = v80;
        sub_1000B15E0(v99);
        uint64_t v101 = (uint64_t)v191;
        uint64_t v102 = v217;
        URL.resourceValues(forKeys:)();
        if (v102)
        {
          swift_errorRelease(v102);
          swift_bridgeObjectRelease();
          uint64_t v103 = v207;
          sub_100009654(v101, 1LL, 1LL, v207);
          uint64_t v217 = 0LL;
          uint64_t v20 = v205;
          uint64_t v25 = v195;
LABEL_60:
          (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v196);
          (*(void (**)(unint64_t, uint64_t))(v198 + 8))(v197, v103);
          sub_100014358(v101, &qword_1001D5D78);
          goto LABEL_61;
        }

        uint64_t v189 = v98;
        uint64_t v217 = 0LL;
        swift_bridgeObjectRelease();
        uint64_t v103 = v207;
        sub_100009654(v101, 0LL, 1LL, v207);
        int v104 = sub_100010708(v101, 1LL, v103);
        uint64_t v25 = v195;
        if (v104 == 1)
        {
          uint64_t v20 = v205;
          goto LABEL_60;
        }

        uint64_t v105 = v182;
        uint64_t v106 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v182, v101, v103);
        uint64_t v107 = (uint64_t)v184;
        URLResourceValues.creationDate.getter(v106);
        if (sub_100010708(v107, 1LL, v97) == 1)
        {
          uint64_t v108 = *(void (**)(char *, uint64_t))(v198 + 8);
          v108(v105, v103);
          (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v97);
          v108((char *)v197, v103);
          sub_100014358(v107, &qword_1001D32B0);
          uint64_t v20 = v205;
LABEL_61:
          uint64_t v14 = v202;
LABEL_50:
          uint64_t v86 = (void (*)(char *, uint64_t))*((void *)v20 + 1);
          v86(v214, v14);
          v86(v210, v14);
          goto LABEL_51;
        }

        uint64_t v109 = v181;
        v189(v181, v107, v97);
        unint64_t v19 = (unint64_t)v192;
        LODWORD(v189) = static Date.< infix(_:_:)(v192, v109);
        uint64_t v110 = *(void (**)(char *, uint64_t))(v193 + 8);
        v110(v109, v97);
        uint64_t v111 = *(void (**)(char *, uint64_t))(v198 + 8);
        v111(v105, v103);
        v110((char *)v19, v97);
        v111((char *)v197, v103);
        uint64_t v20 = v205;
        uint64_t v112 = (void (*)(char *, uint64_t))*((void *)v205 + 1);
        uint64_t v14 = v202;
        v112(v214, v202);
        v112(v210, v14);
LABEL_51:
        uint64_t v87 = *v213;
        if (!*v213) {
          goto LABEL_166;
        }
        uint64_t v88 = v87 + v211 + v73;
        uint64_t v89 = (char *)(v87 + v212 + v73);
        uint64_t v90 = (void (*)(char *, uint64_t, uint64_t))*((void *)v20 + 4);
        v90(v25, v88, v14);
        swift_arrayInitWithTakeFrontToBack(v88, v89, 1LL, v14);
        v90(v89, (uint64_t)v25, v14);
        v73 -= v203;
        ++v74;
      }

      while (v206 != v74);
      Swift::Int v61 = v206 + 1;
      v212 += v203;
      v211 += v203;
      int64_t v45 = v188;
      if (v206 + 1 == v185)
      {
        Swift::Int v61 = v185;
        uint64_t v43 = v177;
        goto LABEL_67;
      }
    }
  }

LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
}

uint64_t sub_1000B0C70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::Int v44 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    unint64_t v42 = (char *)&v36 - v17;
    unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v40 = *(void *)(v18 + 72);
    unint64_t v41 = v19;
    uint64_t v47 = v40 * (a3 - 1);
    uint64_t v45 = v18;
    uint64_t v46 = v40 * a3;
    uint64_t v36 = a1;
    Swift::Int v38 = v15;
    Swift::Int v39 = a4;
    while (2)
    {
      uint64_t v20 = 0LL;
      uint64_t v43 = a3;
      while (1)
      {
        uint64_t v48 = v5;
        uint64_t v21 = *a4;
        uint64_t v22 = v41;
        uint64_t v23 = (uint64_t)v42;
        v41(v42, v46 + v20 + *a4, v10);
        v22(v15, v47 + v20 + v21, v10);
        uint64_t v24 = v48;
        char v25 = sub_1000AF080(v23, (uint64_t)v15);
        uint64_t v26 = v15;
        uint64_t v5 = v24;
        if (v24)
        {
          uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
          v35(v15, v10);
          return ((uint64_t (*)(uint64_t, uint64_t))v35)(v23, v10);
        }

        char v27 = v25;
        uint64_t v28 = *(void (**)(char *, uint64_t))(v45 + 8);
        v28(v26, v10);
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v28)(v23, v10);
        if ((v27 & 1) == 0) {
          break;
        }
        uint64_t v48 = 0LL;
        uint64_t v29 = v39;
        uint64_t v30 = *v39;
        if (!*v39)
        {
          __break(1u);
          return result;
        }

        uint64_t v31 = v30 + v46 + v20;
        uint64_t v32 = v30 + v47 + v20;
        uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
        v33(v44, v31, v10);
        swift_arrayInitWithTakeFrontToBack(v31, v32, 1LL, v10);
        uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v33)(v32, v44, v10);
        v20 -= v40;
        ++a1;
        uint64_t v34 = v43;
        a4 = v29;
        uint64_t v5 = v48;
        uint64_t v15 = v38;
        if (v43 == a1) {
          goto LABEL_10;
        }
      }

      uint64_t v34 = v43;
      uint64_t v15 = v38;
      a4 = v39;
LABEL_10:
      a3 = v34 + 1;
      v47 += v40;
      v46 += v40;
      a1 = v36;
      if (a3 != v37) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_1000B0EF0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v77 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v86 = v20;
  uint64_t v21 = *(void *)(v20 + 72);
  if (!v21)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }

  int64_t v22 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v21 == -1) {
    goto LABEL_88;
  }
  int64_t v24 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v21 == -1) {
    goto LABEL_89;
  }
  uint64_t v85 = v16;
  uint64_t v26 = v22 / v21;
  uint64_t v27 = v24 / v21;
  if (v22 / v21 >= v24 / v21)
  {
    uint64_t v81 = v19;
    uint64_t v82 = v18;
    sub_1000DAE38(a2, v24 / v21, a4);
    unint64_t v31 = a2;
    uint64_t v28 = (char *)(a4 + v27 * v21);
    if (v27 * v21 < 1 || a1 >= a2)
    {
LABEL_71:
      int64_t v66 = &v28[-a4];
      if (v21 != -1 || v66 != (char *)0x8000000000000000LL)
      {
        sub_1000DAE38(a4, (uint64_t)v66 / v21, v31);
        return;
      }

      goto LABEL_90;
    }

    uint64_t v33 = -v21;
    uint64_t v34 = v85;
    uint64_t v35 = *(void (**)(void, unint64_t, uint64_t))(v86 + 16);
    uint64_t v79 = v21;
    unint64_t v80 = v35;
    uint64_t v77 = -v21;
    unint64_t v78 = a4;
    unint64_t v87 = a1;
    while (1)
    {
      unint64_t v88 = (unint64_t)v28;
      uint64_t v36 = &v28[v33];
      Swift::Int v38 = v80;
      uint64_t v37 = v81;
      v80(v81, (unint64_t)v36, v34);
      uint64_t v84 = (char *)v31;
      v31 += v33;
      uint64_t v39 = (uint64_t)v82;
      v38(v82, v31, v34);
      char v40 = sub_1000AF080(v37, v39);
      uint64_t v89 = v5;
      if (v5)
      {
        uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
        v68(v39, v34);
        v68(v37, v34);
        uint64_t v69 = v78;
        int64_t v70 = v88 - v78;
        if (v79 != -1 || v70 != 0x8000000000000000LL)
        {
          uint64_t v72 = v70 / v79;
          uint64_t v73 = (uint64_t)v84;
          goto LABEL_86;
        }

LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        return;
      }

      char v41 = v40;
      uint64_t v83 = v36;
      unint64_t v42 = a3 + v33;
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v43(v39, v34);
      v43(v37, v34);
      if ((v41 & 1) != 0)
      {
        if (a3 >= (unint64_t)v84 && v42 < (unint64_t)v84)
        {
          uint64_t v5 = v89;
          uint64_t v34 = v85;
          uint64_t v33 = v77;
          if ((char *)a3 == v84)
          {
            a3 = v42;
          }

          else
          {
            a3 = v42;
            swift_arrayInitWithTakeBackToFront(v42, v31, 1LL, v85);
          }

          a4 = v78;
          unint64_t v45 = v87;
          uint64_t v28 = (char *)v88;
          goto LABEL_45;
        }

        a3 += v33;
        uint64_t v34 = v85;
        swift_arrayInitWithTakeFrontToBack(v42, v31, 1LL, v85);
        uint64_t v5 = v89;
        a4 = v78;
        unint64_t v45 = v87;
        uint64_t v28 = (char *)v88;
      }

      else
      {
        if (a3 < v88 || v42 >= v88)
        {
          a3 += v33;
          unint64_t v47 = v42;
          uint64_t v28 = v83;
          uint64_t v34 = v85;
          swift_arrayInitWithTakeFrontToBack(v47, v83, 1LL, v85);
          uint64_t v5 = v89;
        }

        else
        {
          uint64_t v5 = v89;
          uint64_t v34 = v85;
          if (a3 == v88)
          {
            a3 += v33;
            uint64_t v28 = v83;
          }

          else
          {
            a3 += v33;
            unint64_t v48 = v42;
            uint64_t v28 = v83;
            swift_arrayInitWithTakeBackToFront(v48, v83, 1LL, v85);
          }
        }

        a4 = v78;
        unint64_t v31 = (unint64_t)v84;
        unint64_t v45 = v87;
      }

      uint64_t v33 = v77;
LABEL_45:
      uint64_t v21 = v79;
    }
  }

  uint64_t v83 = (char *)&v77 - v17;
  uint64_t v84 = v15;
  sub_1000DAE38(a1, v22 / v21, a4);
  uint64_t v28 = (char *)(a4 + v26 * v21);
  BOOL v29 = v26 * v21 < 1 || a2 >= a3;
  uint64_t v30 = v85;
  if (v29)
  {
    unint64_t v31 = a1;
    goto LABEL_71;
  }

  uint64_t v89 = v5;
  uint64_t v82 = *(void (**)(char *, unint64_t, uint64_t))(v86 + 16);
  unint64_t v88 = a4 + v26 * v21;
  while (1)
  {
    unint64_t v87 = a1;
    uint64_t v49 = v21;
    unint64_t v50 = a4;
    uint64_t v52 = v82;
    uint64_t v51 = (uint64_t)v83;
    v82(v83, a2, v30);
    uint64_t v53 = (uint64_t)v84;
    unint64_t v54 = v50;
    v52(v84, v50, v30);
    uint64_t v55 = v89;
    char v56 = sub_1000AF080(v51, v53);
    uint64_t v89 = v55;
    if (v55) {
      break;
    }
    char v57 = v56;
    uint64_t v58 = v53;
    int v59 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
    v59(v58, v30);
    v59(v51, v30);
    uint64_t v21 = v49;
    if ((v57 & 1) != 0)
    {
      unint64_t v60 = a2;
      a2 += v49;
      unint64_t v61 = v87;
      BOOL v62 = v87 < v60 || v87 >= a2;
      a4 = v54;
      if (v62)
      {
        unint64_t v63 = v87;
LABEL_62:
        uint64_t v30 = v85;
        swift_arrayInitWithTakeFrontToBack(v63, v60, 1LL, v85);
        goto LABEL_68;
      }

      uint64_t v30 = v85;
      if (v87 != v60)
      {
        unint64_t v65 = v87;
LABEL_67:
        swift_arrayInitWithTakeBackToFront(v65, v60, 1LL, v30);
      }
    }

    else
    {
      a4 = v54 + v49;
      unint64_t v61 = v87;
      if (v87 < v54 || v87 >= a4)
      {
        unint64_t v63 = v87;
        unint64_t v60 = v54;
        goto LABEL_62;
      }

      uint64_t v30 = v85;
      if (v87 != v54)
      {
        unint64_t v65 = v87;
        unint64_t v60 = v54;
        goto LABEL_67;
      }
    }

LABEL_68:
    a1 = v61 + v21;
    uint64_t v28 = (char *)v88;
    if (a4 >= v88 || a2 >= a3)
    {
      unint64_t v31 = a1;
      goto LABEL_71;
    }
  }

  int64_t v74 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v74(v53, v30);
  v74(v51, v30);
  int64_t v75 = v88 - v54;
  if (v49 == -1 && v75 == 0x8000000000000000LL) {
    goto LABEL_92;
  }
  uint64_t v72 = v75 / v49;
  uint64_t v69 = v54;
  uint64_t v73 = v87;
LABEL_86:
  sub_1000DAE38(v69, v72, v73);
}

Swift::Int sub_1000B1430(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    goto LABEL_25;
  }

  sub_10000941C(&qword_1001D3D58);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)result;
  uint64_t v27 = *(void *)(a1 + 16);
  if (!v27)
  {
LABEL_25:
    sub_1000325E4();
    return (Swift::Int)v4;
  }

  unint64_t v5 = 0LL;
  Swift::Int v6 = result + 56;
  while (v5 < *(void *)(a1 + 16))
  {
    uint64_t v7 = (uint64_t *)(a1 + 32 + 16 * v5);
    uint64_t v9 = *v7;
    uint64_t v8 = v7[1];
    Hasher.init(_seed:)(v28, v4[5]);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(v28, v9, v8);
    Swift::Int result = Hasher._finalize()();
    uint64_t v10 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
    uint64_t v14 = 1LL << v11;
    if (((1LL << v11) & v13) != 0)
    {
      uint64_t v15 = v4[6];
      uint64_t v16 = (uint64_t *)(v15 + 16 * v11);
      uint64_t v17 = v16[1];
      BOOL v18 = *v16 == v9 && v17 == v8;
      if (v18 || (Swift::Int result = sub_1000B1A88(*v16, v17), (result & 1) != 0))
      {
LABEL_11:
        Swift::Int result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }

      uint64_t v19 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v19;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
        uint64_t v14 = 1LL << v11;
        if ((v13 & (1LL << v11)) == 0) {
          break;
        }
        uint64_t v20 = (uint64_t *)(v15 + 16 * v11);
        uint64_t v21 = v20[1];
        if (*v20 != v9 || v21 != v8)
        {
          Swift::Int result = sub_1000B1A88(*v20, v21);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_11;
      }
    }

    *(void *)(v6 + 8 * v12) = v14 | v13;
    uint64_t v23 = (void *)(v4[6] + 16 * v11);
    void *v23 = v9;
    v23[1] = v8;
    uint64_t v24 = v4[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_27;
    }
    _OWORD v4[2] = v26;
LABEL_22:
    if (++v5 == v27) {
      goto LABEL_25;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000B15E0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2
    || (sub_10000941C((uint64_t *)&unk_1001D5D90),
        uint64_t v3 = static _SetStorage.allocate(capacity:)(v2),
        uint64_t v4 = v3,
        (uint64_t v38 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }

  unint64_t v5 = 0LL;
  uint64_t v6 = v3 + 56;
  uint64_t v36 = v1;
  uint64_t v37 = v1 + 32;
  while (v5 < *(void *)(v1 + 16))
  {
    uint64_t v7 = *(void **)(v37 + 8 * v5);
    uint64_t v8 = *(void *)(v4 + 40);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;
    Hasher.init(_seed:)(v39, v8);
    id v12 = v7;
    String.hash(into:)(v39, v9, v11);
    Swift::Int v13 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v6 + 8 * (v15 >> 6));
    uint64_t v18 = 1LL << v15;
    if (((1LL << v15) & v17) != 0)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v4 + 48) + 8 * v15));
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      if (v19 == v22 && v21 == v23)
      {
LABEL_21:
        swift_bridgeObjectRelease_n(v21, 2LL);
LABEL_22:

        goto LABEL_23;
      }

      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v22, v23, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0) {
        goto LABEL_22;
      }
      uint64_t v26 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v26;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v6 + 8 * (v15 >> 6));
        uint64_t v18 = 1LL << v15;
        if ((v17 & (1LL << v15)) == 0) {
          break;
        }
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v4 + 48) + 8 * v15));
        uint64_t v21 = v28;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        if (v27 == v29 && v21 == v30) {
          goto LABEL_21;
        }
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v21, v29, v30, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) != 0) {
          goto LABEL_22;
        }
      }
    }

    *(void *)(v6 + 8 * vswift_weakDestroy(v0 + 16) = v18 | v17;
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = v12;
    uint64_t v33 = *(void *)(v4 + 16);
    BOOL v34 = __OFADD__(v33, 1LL);
    uint64_t v35 = v33 + 1;
    if (v34) {
      goto LABEL_26;
    }
    *(void *)(v4 + swift_weakDestroy(v0 + 16) = v35;
LABEL_23:
    ++v5;
    uint64_t v1 = v36;
    if (v5 == v38) {
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
}

id sub_1000B1838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for FileAttributeKey(0LL);
  sub_10005F76C();
  Class v8 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [a5 createFileAtPath:a1 contents:isa attributes:v8];

  return v9;
}

id sub_1000B18E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [a5 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:isa options:a3 error:a4];

  return v10;
}

uint64_t sub_1000B1970(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 296))(a1, a2, v2);
}

uint64_t sub_1000B1980(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000B1988()
{
  return Logger.logObject.getter();
}

BOOL sub_1000B1994(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000B19A4()
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 280) + 8LL);
  *(void *)(v1 - 544) = v2;
  return v2(v0, *(void *)(v1 - 288));
}

uint64_t sub_1000B19C8(uint64_t a1)
{
  *(void *)(v3 - 12sub_1000AC280(v0, v1, 0) = a1;
  *uint64_t v2 = *(_OWORD *)(v3 - 352);
  *(void *)(v3 - 552) = v1;
  return URL.lastPathComponent.getter();
}

uint64_t sub_1000B19EC(uint64_t a1)
{
  return v2(a1, v1);
}

uint64_t sub_1000B19F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 544))(a1, v1);
}

uint64_t sub_1000B1A04(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_1000B1A10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _assertionFailure(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 36LL, 2LL, a7, 17LL, a9, a10, a11);
}

void sub_1000B1A28(char a1, uint64_t a2)
{
}

uint64_t sub_1000B1A30(uint64_t a1)
{
  return v1(a1, v2);
}

uint64_t sub_1000B1A38()
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 8))(*(void *)(v2 - 416), v0);
}

uint64_t sub_1000B1A4C()
{
  return v0(*(void *)(v1 - 432), *(void *)(v1 - 408));
}

  ;
}

  ;
}

uint64_t sub_1000B1A88(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000B1A98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 264))(a1, a2, v2);
}

uint64_t sub_1000B1AA8()
{
  return swift_arrayDestroy(v0, 1LL);
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000B1AEC(uint64_t a1, uint64_t a2)
{
  return swift_beginAccess(v2, a2, 0LL, 0LL);
}

uint64_t sub_1000B1AFC()
{
  return URL.lastPathComponent.getter();
}

uint64_t sub_1000B1B04(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

  ;
}

uint64_t sub_1000B1B2C(uint64_t a1)
{
  return v1(a1, *(void *)(v2 - 288));
}

uint64_t sub_1000B1B38(uint64_t a1)
{
  *(void *)(v1 - 256) = a1;
  return v1 - 256;
}

uint64_t sub_1000B1B4C(uint64_t a1)
{
  return swift_allocObject(a1, 48LL, 7LL);
}

uint64_t sub_1000B1B58(uint64_t a1, uint64_t a2)
{
  return v3(a1, a2, v2);
}

  ;
}

uint64_t sub_1000B1B6C@<X0>(uint64_t (*a1)(void)@<X8>)
{
  *(void *)(v1 - 544) = a1;
  return a1();
}

uint64_t sub_1000B1B78()
{
  return swift_isUniquelyReferenced_nonNull_native(v0);
}

uint64_t sub_1000B1B80(uint64_t a1, uint64_t a2)
{
  return sub_100009654(a1, a2, 1LL, v2);
}

uint64_t sub_1000B1B8C()
{
  return v0;
}

  ;
}

void sub_1000B1BAC()
{
  uint64_t v3 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v4 = sub_100009BA4();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v9);
  uint64_t v10 = sub_100009C54();
  sub_10005A368();
  __chkstk_darwin(v11);
  sub_1000270AC();
  unint64_t v12 = sub_1000ABB8C((uint64_t)&_swiftEmptyArrayStorage);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_10007720C();
  uint64_t v13 = sub_100040A4C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v13, v14, v15, v10, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v1, v3);
  _Block_release(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v10);
  sub_10004729C(v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  swift_release();
  sub_100009AA0();
}

void sub_1000B1CE8(uint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for QueryCacheSpan(0LL);
  sub_100019B20(v1 + 16, (uint64_t)v34);
  uint64_t v5 = sub_100010D08();
  uint64_t v6 = sub_1000C0194(v5, 2, v34);
  uint64_t v7 = a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  unint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24);
  if (!v8)
  {
    uint64_t v22 = 0LL;
LABEL_10:
    sub_1000B4A78(v22);
LABEL_12:
    swift_release();
    goto LABEL_13;
  }

  uint64_t v9 = *(void *)(v7 + 16);
  sub_1000145E8();
  if (sub_1000B4AB0() < 1)
  {
    sub_10001450C();
    uint64_t v22 = 1LL;
    goto LABEL_10;
  }

  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  swift_bridgeObjectRetain(v11);
  uint64_t v12 = String.count.getter(v10, v11);
  swift_bridgeObjectRelease();
  if (sub_1000B4AB0() >= v12)
  {
    v32[2] = *(void *)(v3 + 88);
    uint64_t v23 = (void *)swift_allocObject(&unk_1001B7190, 56LL, 7LL);
    v23[2] = a1;
    v23[3] = v3;
    v23[4] = v6;
    v23[5] = v9;
    v23[6] = v8;
    v34[4] = (uint64_t)sub_1000B4A08;
    void v34[5] = (uint64_t)v23;
    v34[0] = (uint64_t)_NSConcreteStackBlock;
    v34[1] = 1107296256LL;
    uint64_t v24 = sub_100009BBC((uint64_t)sub_1000D2F18);
    uint64_t v25 = sub_100009BA4();
    v32[1] = v32;
    uint64_t v26 = *(void *)(v25 - 8);
    __chkstk_darwin(v25);
    sub_100009AD4();
    swift_retain(a1);
    swift_retain(v3);
    uint64_t v27 = sub_100010D08();
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v28 = sub_100009C54();
    v32[0] = v32;
    sub_10005A368();
    __chkstk_darwin(v29);
    sub_10000BEB8();
    unint64_t v30 = sub_1000ABB8C((uint64_t)_swiftEmptyArrayStorage);
    sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v31 = sub_10007720C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v12, v31, v28, v30);
    sub_1000B4AA4(0LL, v2, v3);
    _Block_release(v24);
    swift_release();
    sub_10004729C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v2, v25);
    goto LABEL_12;
  }

  sub_1000B4A78(2LL);
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v13 = sub_100010ED4();
  sub_1000093D0(v13, (uint64_t)qword_1001EDC60);
  swift_retain_n(a1, 2LL);
  uint64_t v14 = sub_1000145E8();
  uint64_t v15 = (void *)Logger.logObject.getter(v14);
  os_log_type_t v17 = static os_log_type_t.error.getter(v15, v16);
  if (!os_log_type_enabled((os_log_t)v15, v17))
  {

    sub_1000ABBD4();
    sub_100019F4C(v8);
    goto LABEL_12;
  }

  uint64_t v18 = sub_100009B20(22LL);
  uint64_t v19 = sub_100009B20(64LL);
  v34[0] = v19;
  *(_DWORD *)uint64_t v18 = 136643075;
  sub_1000145E8();
  uint64_t v33 = sub_1000307E0(v9, v8, v34);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v18 + 4);
  swift_bridgeObjectRelease_n(v8, 3LL);
  *(_WORD *)(v18 + 12) = 2085;
  uint64_t v20 = *(void *)v7;
  unint64_t v21 = *(void *)(v7 + 8);
  swift_bridgeObjectRetain(v21);
  uint64_t v33 = sub_1000307E0(v20, v21, v34);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v18 + 14);
  sub_1000ABBD4();
  swift_bridgeObjectRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v17,  "BUG: NOT caching '%{sensitive}s' because input is longer than completed query '%{sensitive}s'",  (uint8_t *)v18,  0x16u);
  swift_arrayDestroy(v19, 2LL);
  sub_100010C34(v19);
  sub_100010C34(v18);
  swift_release();

LABEL_13:
  sub_100009AA0();
}

void sub_1000B20C4(void *a1, uint64_t a2)
{
  uint64_t v148 = a2;
  uint64_t v145 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v147 = *(void *)(v145 - 8);
  sub_100027160();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v132 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v132 - v10;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100027160();
  __chkstk_darwin(v12);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for URLComponents(0LL);
  uint64_t v138 = *(void *)(v16 - 8);
  sub_100027160();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v137 = (char *)&v132 - v21;
  sub_10000941C(&qword_1001D5380);
  sub_100027160();
  __chkstk_darwin(v22);
  sub_100009AEC();
  uint64_t v25 = v24 - v23;
  sub_10000941C(&qword_1001D5ED0);
  sub_100027160();
  __chkstk_darwin(v26);
  sub_100009AEC();
  uint64_t v29 = v28 - v27;
  uint64_t v146 = type metadata accessor for URL(0LL);
  uint64_t v139 = *(void *)(v146 - 8);
  sub_100027160();
  __chkstk_darwin(v30);
  sub_100009AEC();
  uint64_t v143 = v32 - v31;
  sub_1000B48B4(a1);
  if (v33)
  {
    uint64_t v34 = *(void *)(v33 + 16);
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_15;
    }
  }

  uint64_t v136 = v16;
  type metadata accessor for QueryCacheSpan(0LL);
  uint64_t v35 = *(void *)(v2 + 56);
  uint64_t v141 = v2;
  sub_100019B20(v2 + 16, (uint64_t)&v150);
  uint64_t v36 = swift_retain(v35);
  uint64_t v37 = sub_1000C0194(v36, 1, &v150);
  [a1 scale];
  uint64_t v39 = v38;
  id v40 = [a1 queryString];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v40);

  Swift::String v144 = String.lowercased()();
  swift_bridgeObjectRelease();
  sub_100019BDC(v148, v25, &qword_1001D5380);
  uint64_t v41 = type metadata accessor for URLRequest(0LL);
  if (sub_100010708(v25, 1LL, v41) == 1)
  {
    sub_100028CD0(v25, &qword_1001D5380);
    sub_100009654(v29, 1LL, 1LL, v146);
LABEL_6:
    uint64_t v43 = &qword_1001D5ED0;
    uint64_t v44 = v29;
LABEL_7:
    sub_100028CD0(v44, v43);
    goto LABEL_8;
  }

  URLRequest.url.getter();
  sub_10005A26C(v25, *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8LL));
  uint64_t v42 = v146;
  uint64_t v66 = v139;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v143, v29, v42);
  uint64_t v67 = (void *)objc_opt_self(&OBJC_CLASS___NSURLComponents);
  URL._bridgeToObjectiveC()(v68);
  int64_t v70 = v69;
  id v71 = objc_msgSend(v67, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v69, 0);

  if (!v71)
  {
    sub_100009654(v15, 1LL, 1LL, v136);
    goto LABEL_29;
  }

  static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(v71);

  uint64_t v72 = *(void (**)(uint64_t, char *, uint64_t))(v138 + 32);
  uint64_t v73 = v20;
  uint64_t v74 = v136;
  v72(v15, v73, v136);
  sub_100009654(v15, 0LL, 1LL, v74);
  if (sub_100010708(v15, 1LL, v74) == 1)
  {
LABEL_29:
    sub_1000B4A50(*(uint64_t (**)(void, uint64_t))(v66 + 8));
    uint64_t v43 = (uint64_t *)&unk_1001D47C0;
    uint64_t v44 = v15;
    goto LABEL_7;
  }

  uint64_t v75 = (uint64_t)v137;
  uint64_t v76 = ((uint64_t (*)(char *, uint64_t, uint64_t))v72)(v137, v15, v74);
  uint64_t v77 = URLComponents.queryItems.getter(v76);
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"qtype");
    uint64_t v81 = v80;
    uint64_t v82 = *(void *)(v78 + 16);
    uint64_t v83 = v78;
    uint64_t v134 = v78;
    if (v82)
    {
      uint64_t v84 = v79;
      sub_1000B4A3C();
      uint64_t v86 = v78 + v85;
      uint64_t v140 = *(void *)(v87 + 72);
      sub_1000B4A84();
      uint64_t v88 = v145;
      while (1)
      {
        uint64_t v89 = ((uint64_t (*)(char *, uint64_t, uint64_t))v78)(v11, v86, v88);
        uint64_t v90 = URLQueryItem.name.getter(v89);
        if (v90 == v84 && v91 == v81)
        {
          sub_1000B4A2C();
          uint64_t v93 = sub_1000110A8();
          goto LABEL_34;
        }

        sub_1000B4AD4(v90, v91, v84);
        sub_1000B4A5C();
        if ((v88 & 1) != 0) {
          break;
        }
        uint64_t v88 = v145;
        sub_10005A26C((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
        v86 += v140;
        if (!--v82)
        {
          sub_1000110A8();
          sub_1000B4A2C();
          sub_1000B4A90();
          goto LABEL_35;
        }
      }

      uint64_t v93 = sub_1000B4A2C();
      uint64_t v88 = v145;
LABEL_34:
      uint64_t v135 = URLQueryItem.value.getter(v93);
      uint64_t v133 = v94;
      sub_10005A26C((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v147 + 8));
      sub_1000110A8();
    }

    else
    {
      sub_1000110A8();
      sub_1000B4A90();
      uint64_t v88 = v145;
    }

uint64_t sub_1000B2B58(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000B2B84 + 4 * byte_100162668[a1]))( "lifetime",  8LL);
}

const char *sub_1000B2B84()
{
  return "cacheAccess";
}

unint64_t sub_1000B2BB8(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

unint64_t sub_1000B2BC8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000B2BB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B2BF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EngagedCompletionCacheClient.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000B2C18()
{
  return v0;
}

uint64_t sub_1000B2C44()
{
  return v0;
}

uint64_t sub_1000B2C70()
{
  return sub_1000B2B58(*v0);
}

void sub_1000B2C8C()
{
  uint64_t v1 = objc_autoreleasePoolPush();
  *(void *)(v0 + 64) = 0LL;
  swift_release();
  objc_autoreleasePoolPop(v1);
  sub_1000108B8((void *)(v0 + 16));
  swift_release();
  swift_release();
  sub_10000BDD4(v0 + 72);

  swift_unknownObjectRelease();
  sub_100009A90();
}

uint64_t sub_1000B2CF0()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

void sub_1000B2D10()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = (void *)v1[11];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    uint64_t v8 = v1[5];
    uint64_t v9 = v1[6];
    sub_100019AFC(v1 + 2, v8);
    if (!sub_100019FC0(v8, v9))
    {
      uint64_t v10 = objc_autoreleasePoolPush();
      uint64_t v11 = v1[5];
      uint64_t v12 = v1[6];
      sub_100019AFC(v1 + 2, v11);
      (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
      objc_autoreleasePoolPop(v10);
      sub_1000B2E34("query cache became empty");
    }
  }

  else
  {
    __break(1u);
  }

void sub_1000B2E34(const char *a1)
{
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v2 = sub_100010ED4();
  uint64_t v3 = sub_1000093D0(v2, (uint64_t)qword_1001EDC60);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.debug.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a1, v5, 2u);
    sub_100010C34((uint64_t)v5);
  }
}

void sub_1000B2EF8(void *a1)
{
  uint64_t v5 = v1;
  if (qword_1001D0530 != -1) {
    swift_once(&qword_1001D0530, sub_1000344F0);
  }
  uint64_t v7 = sub_100010ED4();
  sub_1000093D0(v7, (uint64_t)qword_1001EDC60);
  id v8 = a1;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v14 = static os_log_type_t.info.getter(v9, v10, v11, v12, v13);
  if (os_log_type_enabled(v9, v14))
  {
    uint64_t v15 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v2 = sub_100009B20(32LL);
    v32[0] = v2;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v3 = (uint64_t)(v15 + 12);
    uint64_t v30 = v15 + 4;
    id v16 = [v8 name];
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    unint64_t v18 = v17;

    uint64_t v31 = sub_1000307E0(v4, v18, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v15 + 4);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v14, "cache clear notification: name = %s", v15, 0xCu);
    swift_arrayDestroy(v2, 1LL);
    sub_100010C34(v2);
    sub_100010C34((uint64_t)v15);
  }

  else
  {
  }

  uint64_t v30 = *(uint8_t **)(v5 + 88);
  _BYTE v32[4] = (uint64_t)sub_1000B4A28;
  v32[5] = v5;
  v32[0] = (uint64_t)_NSConcreteStackBlock;
  v32[1] = 1107296256LL;
  uint64_t v19 = sub_100009BBC((uint64_t)sub_1000D2F18);
  uint64_t v20 = sub_100009BA4();
  v29[1] = v29;
  sub_10005A368();
  __chkstk_darwin(v21);
  sub_10000BEB8();
  uint64_t v22 = sub_100010D08();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v23 = sub_100009C54();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  sub_1000270AC();
  unint64_t v25 = sub_1000ABB8C((uint64_t)_swiftEmptyArrayStorage);
  sub_10000941C((uint64_t *)&unk_1001D0BC0);
  sub_10007720C();
  uint64_t v26 = sub_100040A4C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v26, v27, v28, v23, v25);
  sub_1000B4AA4(0LL, v2, v3);
  _Block_release(v19);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v3, v23);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v20);
  swift_release();
  sub_100009AA0();
}

uint64_t type metadata accessor for QueryCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd10QueryCache);
}

uint64_t storeEnumTagSinglePayload for QueryCache.Activity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000B325C + 4 * byte_100162671[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000B3290 + 4 * byte_10016266C[v4]))();
}

uint64_t sub_1000B3290(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000B3298(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B32A0LL);
  }
  return result;
}

uint64_t sub_1000B32AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B32B4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000B32B8(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000B32C0(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QueryCache.Activity()
{
  return &type metadata for QueryCache.Activity;
}

unint64_t sub_1000B32DC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000B3308();
  unint64_t result = sub_1000B3344();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000B3308()
{
  unint64_t result = qword_1001D5E88;
  if (!qword_1001D5E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162720, &type metadata for QueryCache.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D5E88);
  }

  return result;
}

unint64_t sub_1000B3344()
{
  unint64_t result = qword_1001D5E90;
  if (!qword_1001D5E90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001626E8, &type metadata for QueryCache.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D5E90);
  }

  return result;
}

unint64_t sub_1000B3384()
{
  unint64_t result = qword_1001D5E98;
  if (!qword_1001D5E98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162760, &type metadata for QueryCache.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D5E98);
  }

  return result;
}

unint64_t sub_1000B33C4()
{
  unint64_t result = qword_1001D5EA0;
  if (!qword_1001D5EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001626CC, &type metadata for QueryCache.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D5EA0);
  }

  return result;
}

void sub_1000B3400(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = v3;
}

void sub_1000B343C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12 = v9;
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v39 = a4;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v44 = *(void *)(v17 - 8);
  sub_100027160();
  __chkstk_darwin(v18);
  sub_100009AEC();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = type metadata accessor for DispatchPredicate(0LL);
  sub_10005A368();
  __chkstk_darwin(v23);
  sub_100009AD4();
  uint64_t v24 = (void *)v12[11];
  *uint64_t v10 = v24;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v22);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)(v10);
  uint64_t v26 = (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v10, v22);
  if ((v24 & 1) != 0)
  {
    Date.init()(v26);
    uint64_t v46 = _swiftEmptyArrayStorage;
    uint64_t v27 = String.count.getter(a1, a2);
    uint64_t v45 = _swiftEmptySetSingleton;
    uint64_t v28 = v12 + 2;
    uint64_t v29 = v12[6];
    uint64_t v30 = sub_100019AFC(v12 + 2, v12[5]);
    uint64_t v38 = v17;
    __chkstk_darwin(v30);
    *(&v37 - 12) = v21;
    *(&v37 - 1sub_1000A0380(v0, 1) = (uint64_t)&v45;
    *((double *)&v37 - 1sub_1000AC280(v0, v1, 0) = a9;
    *(&v37 - 9) = v27;
    *(&v37 - 8) = a3;
    uint64_t v31 = v40;
    *(&v37 - 7) = v39;
    *(&v37 - 6) = v31;
    uint64_t v32 = v42;
    *(&v37 - 5) = v41;
    *(&v37 - 4) = v32;
    *(&v37 - 3) = v43;
    *(&v37 - 2) = (uint64_t)&v46;
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v29 + 40))( a1,  a2,  sub_1000B4950);
    uint64_t v34 = v12[5];
    uint64_t v33 = v12[6];
    sub_100019AFC(v28, v34);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 72);
    uint64_t v36 = swift_bridgeObjectRetain(v45);
    v35(v36, v34, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v21, v38);
    swift_bridgeObjectRelease();
    sub_1000144D4();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000B3648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v46 = a8;
  uint64_t v47 = a9;
  uint64_t v48 = a4;
  uint64_t v49 = a7;
  uint64_t v18 = sub_10000941C(&qword_1001D32B0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = a3;
  id v25 = (uint64_t *)(a3 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  uint64_t v26 = (int *)type metadata accessor for CachedResultSet.Result(0LL);
  sub_100019BDC((uint64_t)v25 + v26[6], (uint64_t)v20, &qword_1001D32B0);
  if (sub_100010708((uint64_t)v20, 1LL, v21) == 1)
  {
    sub_100028CD0((uint64_t)v20, &qword_1001D32B0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    sub_1000B4990( (unint64_t *)&qword_1001D5EE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v48, v24) & 1) == 0)
    {
      swift_bridgeObjectRetain(a2);
      sub_100057B4C(&v50, a1, a2);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      return 1LL;
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }

  if (a5 <= 0.0 || *(double *)((char *)v25 + v26[8]) == a5)
  {
    uint64_t v27 = *v25;
    uint64_t v28 = v25[1];
    swift_bridgeObjectRetain(v28);
    uint64_t v29 = String.count.getter(v27, v28);
    swift_bridgeObjectRelease();
    if (v29 <= v49)
    {
      uint64_t v30 = (uint64_t *)((char *)v25 + v26[11]);
      uint64_t v31 = v30[1];
      if (v31)
      {
        if (!v47) {
          return 1LL;
        }
        BOOL v32 = *v30 == v46 && v31 == v47;
        if (!v32 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, v46, v47, 0LL) & 1) == 0) {
          return 1LL;
        }
      }

      else if (v47)
      {
        return 1LL;
      }

      uint64_t v33 = (uint64_t *)((char *)v25 + v26[12]);
      uint64_t v34 = v33[1];
      if (v34)
      {
        if (!a11) {
          return 1LL;
        }
        BOOL v35 = *v33 == a10 && v34 == a11;
        if (!v35 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v34, a10, a11, 0LL) & 1) == 0) {
          return 1LL;
        }
      }

      else if (a11)
      {
        return 1LL;
      }

      uint64_t v36 = (uint64_t *)((char *)v25 + v26[13]);
      uint64_t v37 = v36[1];
      if (v37)
      {
        if (!a13) {
          return 1LL;
        }
        BOOL v38 = *v36 == a12 && v37 == a13;
        if (!v38 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v36, v37, a12, a13, 0LL) & 1) == 0) {
          return 1LL;
        }
      }

      else if (a13)
      {
        return 1LL;
      }

      uint64_t v39 = v45;
      uint64_t v40 = swift_retain(v45);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v40);
      uint64_t v41 = *(void *)((*a14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      sub_100034164(v41);
      uint64_t v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v39);
      specialized Array._endMutation()(v42);
    }
  }

  return 1LL;
}

uint64_t sub_1000B3970@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t *a8@<X8>, double a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v98 = a8;
  unint64_t v104 = a7;
  uint64_t v19 = sub_10000941C(&qword_1001D5380);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v95 = (uint64_t)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v94 = (uint64_t)&v93 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v97 = (uint64_t)&v93 - v25;
  __chkstk_darwin(v24);
  uint64_t v96 = (uint64_t)&v93 - v26;
  uint64_t v27 = String.count.getter(a1, a2);
  sub_1000B343C(a1, a2, a3, a4, a5, a6, v104, a10, a9);
  uint64_t v29 = v28;
  unint64_t v30 = v28 >> 62;
  if (v28 >> 62) {
    goto LABEL_75;
  }
  uint64_t v31 = *(void *)((v28 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v28);
LABEL_3:
  unint64_t v104 = v30;
  if (v31)
  {
    if (v31 >= 1)
    {
      unint64_t v30 = 0LL;
      uint64_t v33 = -1LL;
      while (1)
      {
        if ((v29 & 0xC000000000000001LL) != 0)
        {
          uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v30, v29);
        }

        else
        {
          uint64_t v34 = *(void *)(v29 + 8 * v30 + 32);
          swift_retain(v34);
        }

        uint64_t v35 = *(void *)(v34 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24);
        if (v35)
        {
          uint64_t v36 = *(void *)(v34 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 16);
          swift_bridgeObjectRetain(*(void *)(v34 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24));
          uint64_t v37 = String.count.getter(v36, v35);
          swift_bridgeObjectRelease();
          swift_release();
          if (__OFSUB__(v37, v27))
          {
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            if (v29 < 0) {
              uint64_t v91 = v29;
            }
            else {
              uint64_t v91 = v29 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v29);
            uint64_t result = _CocoaArrayWrapper.endIndex.getter(v91);
            uint64_t v31 = result;
            goto LABEL_3;
          }

          if (v37 - v27 >= v33) {
            uint64_t v38 = v33;
          }
          else {
            uint64_t v38 = v37 - v27;
          }
          if (v33 == -1) {
            uint64_t v33 = v37 - v27;
          }
          else {
            uint64_t v33 = v38;
          }
        }

        else
        {
          swift_release();
        }

        if (v31 == ++v30) {
          goto LABEL_21;
        }
      }
    }

    __break(1u);
    __break(1u);
LABEL_86:
    __break(1u);
    return result;
  }

  uint64_t v33 = -1LL;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v107 = (uint64_t)_swiftEmptyArrayStorage;
  if (v104)
  {
    if (v29 < 0) {
      uint64_t v40 = v29;
    }
    else {
      uint64_t v40 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v39 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v41 = sub_1000B47F8(v39, 0);
  specialized Array._endMutation()(v41);
  if (v31)
  {
    for (uint64_t i = 0LL; i != v31; ++i)
    {
      if ((v29 & 0xC000000000000001LL) != 0)
      {
        uint64_t v43 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v29);
      }

      else
      {
        uint64_t v43 = *(void *)(v29 + 8 * i + 32);
        swift_retain(v43);
      }

      unint64_t v30 = *(void *)(v43 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24);
      if (v30)
      {
        uint64_t v44 = *(void *)(v43 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 16);
        swift_bridgeObjectRetain(*(void *)(v43 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24));
        uint64_t v45 = String.count.getter(v44, v30);
        swift_bridgeObjectRelease();
        if (__OFSUB__(v45, v27)) {
          goto LABEL_74;
        }
        if (v45 - v27 == v33)
        {
          uint64_t v46 = swift_retain(v43);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
          unint64_t v48 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v47 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v48 >= v47 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1);
          }
          uint64_t v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v43);
          specialized Array._endMutation()(v49);
        }
      }

      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v50 = v107;
  if ((unint64_t)v107 >> 62)
  {
    if (v107 < 0) {
      uint64_t v92 = v107;
    }
    else {
      uint64_t v92 = v107 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v107);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v92);
    uint64_t v51 = result;
    if (result) {
      goto LABEL_41;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    uint64_t v54 = 0LL;
    goto LABEL_84;
  }

  uint64_t v51 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v107);
  if (!v51) {
    goto LABEL_83;
  }
LABEL_41:
  if (v51 < 1) {
    goto LABEL_86;
  }
  uint64_t v53 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v93 = a11;
  unint64_t v104 = v50 & 0xC000000000000001LL;
  float v55 = 0.0;
  *(void *)&__int128 v52 = 136643331LL;
  __int128 v100 = v52;
  uint64_t v99 = (char *)&type metadata for Any + 8;
  uint64_t v101 = v51;
  uint64_t v102 = v50;
  do
  {
    if (v104)
    {
      uint64_t v56 = specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v50);
    }

    else
    {
      uint64_t v56 = *(void *)(v50 + 8 * v53 + 32);
      swift_retain(v56);
    }

    uint64_t v57 = (uint64_t *)(v56 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
    float v58 = *(float *)((char *)v57 + *(int *)(type metadata accessor for CachedResultSet.Result(0LL) + 36));
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v59, (uint64_t)qword_1001EDC60);
    uint64_t v60 = swift_retain_n(v56, 4LL);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v103 = v54;
      uint64_t v63 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = swift_slowAlloc(64LL, -1LL);
      v106[0] = v64;
      *(_DWORD *)uint64_t v63 = v100;
      uint64_t v65 = v57[3];
      if (v65)
      {
        uint64_t v66 = v57[2];
        unint64_t v67 = v57[3];
      }

      else
      {
        unint64_t v67 = 0xE500000000000000LL;
        uint64_t v66 = 0x296C696E28LL;
      }

      swift_bridgeObjectRetain(v65);
      *(void *)(v63 + 4) = sub_1000307E0(v66, v67, v106);
      swift_release_n(v56, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2085;
      uint64_t v68 = *v57;
      unint64_t v69 = v57[1];
      swift_bridgeObjectRetain(v69);
      *(void *)(v63 + 14) = sub_1000307E0(v68, v69, v106);
      swift_release_n(v56, 2LL);
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 2048;
      *(double *)(v63 + 24) = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "cache entry prefix: %{sensitive}s input: %{sensitive}s score: %f",  (uint8_t *)v63,  0x20u);
      swift_arrayDestroy(v64, 2LL);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);

      uint64_t v50 = v102;
      uint64_t v54 = v103;
      uint64_t v51 = v101;
      if (!v103) {
        goto LABEL_58;
      }
    }

    else
    {

      swift_release_n(v56, 4LL);
      if (!v54) {
        goto LABEL_58;
      }
    }

    if (v58 > 0.0 && v55 < v58)
    {
      swift_release();
LABEL_58:
      uint64_t v54 = v56;
      goto LABEL_60;
    }

    swift_release();
    float v58 = v55;
LABEL_60:
    ++v53;
    float v55 = v58;
  }

  while (v51 != v53);
  swift_bridgeObjectRelease();
  if (v54)
  {
    uint64_t v70 = v93;
    uint64_t v71 = v96;
    sub_100019BDC(v93, v96, &qword_1001D5380);
    uint64_t v72 = v70;
    uint64_t v73 = v97;
    sub_100019BDC(v72, v97, &qword_1001D5380);
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc(22LL, -1LL);
      uint64_t v78 = swift_slowAlloc(64LL, -1LL);
      uint64_t v79 = v71;
      uint64_t v80 = v78;
      v106[0] = v78;
      *(_DWORD *)uint64_t v77 = 136643075;
      uint64_t v81 = v94;
      sub_100019BDC(v79, v94, &qword_1001D5380);
      uint64_t v82 = type metadata accessor for URLRequest(0LL);
      if (sub_100010708(v81, 1LL, v82) == 1)
      {
        sub_100028CD0(v81, &qword_1001D5380);
        uint64_t v83 = 0LL;
        unint64_t v84 = 0xE000000000000000LL;
      }

      else
      {
        uint64_t v83 = URLRequest.debugDescription.getter();
        unint64_t v84 = v85;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8LL))(v81, v82);
      }

      uint64_t v105 = sub_1000307E0(v83, v84, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v77 + 4);
      swift_bridgeObjectRelease();
      sub_100028CD0(v96, &qword_1001D5380);
      *(_WORD *)(v77 + 12) = 2085;
      uint64_t v86 = v95;
      sub_100019BDC(v97, v95, &qword_1001D5380);
      if (sub_100010708(v86, 1LL, v82) == 1)
      {
        sub_100028CD0(v86, &qword_1001D5380);
        goto LABEL_71;
      }

      uint64_t v87 = URLRequest.allHTTPHeaderFields.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8LL))(v86, v82);
      if (v87)
      {
        uint64_t v88 = Dictionary.debugDescription.getter( v87,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
        unint64_t v90 = v89;
        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_71:
        unint64_t v90 = 0xE200000000000000LL;
        uint64_t v88 = 23899LL;
      }

      uint64_t v105 = sub_1000307E0(v88, v90, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v77 + 14);
      swift_bridgeObjectRelease();
      sub_100028CD0(v97, &qword_1001D5380);
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "cache hit for request %{sensitive}s header: %{sensitive}s",  (uint8_t *)v77,  0x16u);
      swift_arrayDestroy(v80, 2LL);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      sub_100028CD0(v71, &qword_1001D5380);
      sub_100028CD0(v73, &qword_1001D5380);
    }
  }

LABEL_84:
  *(void *)(a12 + qword_1001EDE68) = v54;
  swift_retain_n(v54, 2LL);
  swift_release();
  *uint64_t v98 = v54;
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1000B431C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10 = v9;
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  sub_100019AFC(a2 + 2, v11);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12) >= v10)
  {
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v21, (uint64_t)qword_1001EDC60);
    uint64_t v22 = swift_bridgeObjectRetain_n(a5, 2LL);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v28 = static os_log_type_t.info.getter(v23, v24, v25, v26, v27);
    uint64_t v42 = a4;
    if (os_log_type_enabled(v23, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v41;
      *(_DWORD *)uint64_t v29 = 136643075;
      swift_bridgeObjectRetain(a5);
      uint64_t v43 = sub_1000307E0(a4, a5, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 4);
      swift_bridgeObjectRelease_n(a5, 3LL);
      *(_WORD *)(v29 + 12) = 2048;
      uint64_t v43 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v29 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v28,  "caching '%{sensitive}s' with cost %lu",  (uint8_t *)v29,  0x16u);
      swift_arrayDestroy(v41, 1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a5, 2LL);
    }

    uint64_t v30 = a2[5];
    uint64_t v31 = a2[6];
    sub_100019AFC(a2 + 2, v30);
    BOOL v32 = sub_100019FC0(v30, v31);
    uint64_t v33 = a2[5];
    uint64_t v34 = a2[6];
    sub_100019AFC(a2 + 2, v33);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v34 + 80))(a1, v42, a5, v33, v34);
    uint64_t v35 = a2[7];
    uint64_t v36 = sub_10000941C(&qword_1001D0C10);
    uint64_t inited = swift_initStackObject(v36, v45);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(inited + 56) = &type metadata for UInt;
    *(void *)(inited + 64) = &protocol witness table for UInt;
    *(void *)(inited + 32) = v10;
    uint64_t v38 = sub_10000941C((uint64_t *)&unk_1001D5EF0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    uint64_t v39 = swift_retain(v35);
    sub_10004221C(v39, 3, (uint64_t)"cost=%{signpost.description.attribute,public}llu", 48LL, 2u, inited);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v40;
    swift_release();
    if (v32) {
      sub_1000B2E34("query cache no longer empty");
    }
    sub_1000C028C(a1);
  }

  else
  {
    sub_1000C02BC(v10, 0);
    if (qword_1001D0530 != -1) {
      swift_once(&qword_1001D0530, sub_1000344F0);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v13, (uint64_t)qword_1001EDC60);
    uint64_t v14 = swift_bridgeObjectRetain_n(a5, 2LL);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v17 = static os_log_type_t.error.getter(v15, v16);
    if (os_log_type_enabled(v15, v17))
    {
      unint64_t v18 = v10;
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = v20;
      *(_DWORD *)uint64_t v19 = 136643075;
      swift_bridgeObjectRetain(a5);
      uint64_t v43 = sub_1000307E0(a4, a5, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v19 + 4);
      swift_bridgeObjectRelease_n(a5, 3LL);
      *(_WORD *)(v19 + 12) = 2048;
      uint64_t v43 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v19 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v17,  "NOT caching '%{sensitive}s' with cost %lu",  (uint8_t *)v19,  0x16u);
      swift_arrayDestroy(v20, 1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a5, 2LL);
    }
  }

uint64_t sub_1000B47E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000B47F0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000B47F8(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *uint64_t v2 = result;
  return result;
}

void sub_1000B48B4(void *a1)
{
  id v1 = [a1 queryItems];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = type metadata accessor for URLQueryItem(0LL);
    static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);
  }

  sub_100009A90();
}

uint64_t sub_1000B490C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B3970( *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  a1,  *(double *)(v1 + 40),  *(void *)(v1 + 88),  *(void *)(v1 + 96),  *(void *)(v1 + 104));
}

uint64_t sub_1000B4950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000B3648( a1,  a2,  a3,  *(void *)(v3 + 16),  *(double *)(v3 + 32),  *(void *)(v3 + 24),  *(void *)(v3 + 40),  *(void *)(v3 + 48),  *(void *)(v3 + 56),  *(void *)(v3 + 64),  *(void *)(v3 + 72),  *(void *)(v3 + 80),  *(void *)(v3 + 88),  *(void **)(v3 + 96)) & 1;
}

void sub_1000B4990(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  if (!*a1)
  {
    uint64_t v6 = a3(a2);
    atomic_store(swift_getWitnessTable(a4, v6), a1);
  }

  sub_100009A90();
}

uint64_t sub_1000B49CC()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_1000B4A08()
{
}

uint64_t sub_1000B4A2C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 288));
}

  ;
}

uint64_t sub_1000B4A50@<X0>(uint64_t (*a1)(void, uint64_t)@<X8>)
{
  return a1(*(void *)(v2 - 216), v1);
}

uint64_t sub_1000B4A5C()
{
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_1000B4A68()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 288));
}

uint64_t sub_1000B4A78(uint64_t a1)
{
  return sub_1000C02BC(a1, 1);
}

uint64_t sub_1000B4A84()
{
  return swift_bridgeObjectRetain(v0);
}

void sub_1000B4A90()
{
  *(void *)(v0 - 28sub_1000AC280(v0, v1, 0) = 0LL;
  *(void *)(v0 - 296) = 0LL;
}

uint64_t sub_1000B4AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)(a1, a2, a3, v3);
}

uint64_t sub_1000B4AB0()
{
  return String.count.getter(v1, v0);
}

uint64_t sub_1000B4ABC(uint64_t a1, uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 144, a2, v2);
}

uint64_t sub_1000B4AC8()
{
  return String.init<A>(describing:)(v0 - 144);
}

uint64_t sub_1000B4AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, v3, 0LL);
}

uint64_t *sub_1000B4AE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }

  return a1;
}

uint64_t sub_1000B4B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1000B4BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_1000B4C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000B4C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000B4CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000B4D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B4D48);
}

uint64_t sub_1000B4D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100010708(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000B4DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B4DCC);
}

uint64_t sub_1000B4DCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009654(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TopicCacheEntry(uint64_t a1)
{
  uint64_t result = qword_1001D5F58;
  if (!qword_1001D5F58) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TopicCacheEntry);
  }
  return result;
}

uint64_t sub_1000B4E78(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000B4EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v36 - v9;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v37 = v6;
    uint64_t v38 = v5;
    uint64_t v39 = a2;
    uint64_t v40 = v2;
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v16 = *(void *)(v11 + 72);
    os_log_type_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
    swift_bridgeObjectRetain(a1);
    int v18 = 900;
    do
    {
      uint64_t v19 = v17(v13, v15, v10);
      uint64_t v20 = Apple_Parsec_Spotlight_V1alpha_Result.maxAgeSeconds.getter(v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v15 += v16;
      --v14;
    }

    while (v14);
    uint64_t v21 = sub_10001450C();
    if (v18 > 0)
    {
      uint64_t v22 = v42;
      Date.init()(v21);
      double v23 = (double)v18;
      uint64_t v24 = v41;
      Date.addingTimeInterval(_:)(v23);
      uint64_t v25 = v37;
      uint64_t v26 = v22;
      uint64_t v27 = v38;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v38);
      os_log_type_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 32);
      uint64_t v29 = v39;
      v28(v39, v24, v27);
      uint64_t result = type metadata accessor for TopicCacheEntry(0LL);
      *(void *)(v29 + *(int *)(result + 20)) = a1;
      return result;
    }

    sub_10001450C();
    unint64_t v35 = sub_1000B5104();
    uint64_t v32 = sub_100010EA0((uint64_t)&type metadata for TopicCacheEntryError, v35);
    char v34 = 1;
  }

  else
  {
    sub_10001450C();
    unint64_t v31 = sub_1000B5104();
    uint64_t v32 = sub_100010EA0((uint64_t)&type metadata for TopicCacheEntryError, v31);
    char v34 = 0;
  }

  *uint64_t v33 = v34;
  return swift_willThrow(v32);
}

unint64_t sub_1000B5104()
{
  unint64_t result = qword_1001D5F90;
  if (!qword_1001D5F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162870, &type metadata for TopicCacheEntryError);
    atomic_store(result, (unint64_t *)&qword_1001D5F90);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TopicCacheEntryError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000B518C + 4 * byte_1001627C5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B51C0 + 4 * byte_1001627C0[v4]))();
}

uint64_t sub_1000B51C0(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000B51C8(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B51D0LL);
  }
  return result;
}

uint64_t sub_1000B51DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B51E4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000B51E8(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000B51F0(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TopicCacheEntryError()
{
  return &type metadata for TopicCacheEntryError;
}

unint64_t sub_1000B5210()
{
  unint64_t result = qword_1001D5F98;
  if (!qword_1001D5F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162848, &type metadata for TopicCacheEntryError);
    atomic_store(result, (unint64_t *)&qword_1001D5F98);
  }

  return result;
}

void Lock.__allocating_init()()
{
}

Swift::Void __swiftcall Lock.lock()()
{
}

Swift::Void __swiftcall Lock.unlock()()
{
}

uint64_t sub_1000B528C(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if ((_DWORD)result) {
    __break(1u);
  }
  return result;
}

uint64_t Lock.init()()
{
  uint64_t v1 = (pthread_mutex_t *)swift_slowAlloc(64LL, -1LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t result = pthread_mutex_init(v1, 0LL);
  if (!(_DWORD)result) {
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t Lock.deinit()
{
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

void Lock.withLock<A>(_:)()
{
}

void Lock.withLockVoid(_:)()
{
}

void ConditionLock.__allocating_init(value:)(uint64_t a1)
{
}

uint64_t ConditionLock.init(value:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(v4 + 112);
  *(void *)&v2[v5] = swift_slowAlloc(48LL, -1LL);
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(&v2[*(void *)(*(void *)v2 + 96LL)], a1, v6);
  uint64_t v8 = type metadata accessor for Lock();
  uint64_t v9 = sub_10006B2D0(v8);
  Lock.init()();
  *(void *)&v2[*(void *)(*(void *)v2 + 104LL)] = v9;
  LODWORD(v9) = pthread_cond_init(*(pthread_cond_t **)&v2[*(void *)(*(void *)v2 + 112LL)], 0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  if (!(_DWORD)v9) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd4Lock);
}

void ConditionLock.deinit()
{
  uint64_t v1 = *v0;
  sub_100010C34(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 112)));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 96));
  swift_release();
  sub_100009A90();
}

uint64_t ConditionLock.__deallocating_deinit()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

Swift::Void __swiftcall ConditionLock.lock()()
{
}

Swift::Void __swiftcall ConditionLock.unlock()()
{
}

void ConditionLock.value.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  ConditionLock.lock()();
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  sub_1000A14F8(v4, (uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 16LL))(a1, v4);
  ConditionLock.unlock()();
  sub_100014A40();
}

uint64_t ConditionLock.lock(whenValue:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  sub_100009B54();
  ConditionLock.lock()();
  uint64_t v7 = *(void *)(*v1 + 104);
  uint64_t v8 = (uint64_t)v1 + *(void *)(*v1 + 96);
  uint64_t v9 = *(void *)(*v1 + 112);
  sub_1000A14F8(v8, (uint64_t)v15);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  while (1)
  {
    v10(v2, v8, v5);
    char v12 = sub_1000B5A8C(v2, a1, v11, *(void *)(v4 + 88));
    uint64_t result = sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    if ((v12 & 1) != 0) {
      break;
    }
    uint64_t result = pthread_cond_wait( *(pthread_cond_t **)((char *)v3 + v9),  *(pthread_mutex_t **)(*(uint64_t *)((char *)v3 + v7) + 16));
    if ((_DWORD)result)
    {
      __break(1u);
      return result;
    }
  }

  return result;
}

uint64_t ConditionLock.lock(whenValue:timeoutSeconds:)(uint64_t a1, double a2)
{
  uint64_t v23 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  sub_100009B54();
  if (v7 < 0.0)
  {
    __break(1u);
    goto LABEL_14;
  }

  ConditionLock.lock()();
  double v8 = a2 * 1000000000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000LL) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if (v8 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v8 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  v26.tv_sec = 0LL;
  v26.tv_usec = 0;
  gettimeofday(&v26, 0LL);
  uint64_t v9 = 1000LL * v26.tv_usec;
  BOOL v10 = __OFADD__((uint64_t)v8, v9);
  uint64_t v11 = (uint64_t)v8 + v9;
  if (v10)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }

  if (__OFADD__(v26.tv_sec, v11 / 1000000000)) {
    goto LABEL_18;
  }
  v25.tv_sec = v26.tv_sec + v11 / 1000000000;
  v25.tv_nsec = v11 % 1000000000;
  uint64_t v12 = *(void *)(*v2 + 104);
  uint64_t v13 = (uint64_t)v2 + *(void *)(*v2 + 96);
  uint64_t v14 = *(void *)(*v2 + 112);
  sub_1000A14F8(v13, (uint64_t)v27);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  do
  {
    v15(v3, v13, v5);
    char v17 = sub_1000B5A8C(v3, a1, v16, *(void *)(v23 + 88));
    sub_10006B56C(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    if ((v17 & 1) != 0) {
      return v17 & 1;
    }
    int v18 = pthread_cond_timedwait( *(pthread_cond_t **)((char *)v2 + v14),  *(pthread_mutex_t **)(*(uint64_t *)((char *)v2 + v12) + 16),  &v25);
  }

  while (!v18);
  if (v18 == 60)
  {
    ConditionLock.unlock()();
    return v17 & 1;
  }

  _StringGuts.grow(_:)(51LL);
  v20._uint64_t countAndFlagsBits = 0x6520746867756163LL;
  v20._object = (void *)0xED000020726F7272LL;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x8000000100171400LL;
  v22._uint64_t countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v22);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "parsecd/lock.swift",  18LL,  2LL,  111LL,  0);
  __break(1u);
  return result;
}

void ConditionLock.unlock(withValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  swift_beginAccess(v4, v5, 33LL, 0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8LL) + 24LL))(v4, a1);
  swift_endAccess(v5);
  ConditionLock.unlock()();
  else {
    sub_100014A40();
  }
}

uint64_t sub_1000B59F4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.RawPointer + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 3LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for ConditionLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ConditionLock);
}

uint64_t sub_1000B5A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, a4);
}

  ;
}

uint64_t sub_1000B5AAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v38 = (char *)&v34 - v7;
  uint64_t v39 = a1;
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v35 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    uint64_t v19 = v38;
    uint64_t v20 = *(void *)(v4 + 72);
    Swift::String v21 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v21(v38, *(void *)(v39 + 48) + v20 * i, v3);
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v40, v19, v3);
    uint64_t v23 = Trialpb_TrialExperiment.experimentNamespace.getter(v22);
    if (v23 == 0x4145535F49524953LL && v24 == 0xEF4142535F484352LL)
    {
      int64_t v26 = v13;
      swift_bridgeObjectRelease();
    }

    else
    {
      int64_t v26 = v13;
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, 0x4145535F49524953LL, 0xEF4142535F484352LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_33;
      }
    }

    uint64_t v28 = v3;
    uint64_t v29 = v37;
    uint64_t v30 = *v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v37);
    *uint64_t v29 = v30;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v30 = sub_100031A54();
      *uint64_t v37 = v30;
    }

    unint64_t v32 = *(void *)(v30 + 16);
    if (v32 >= *(void *)(v30 + 24) >> 1)
    {
      uint64_t v30 = sub_100031A54();
      *uint64_t v37 = v30;
    }

    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v32 + 1;
    unint64_t v33 = v30 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v32 * v20;
    uint64_t v3 = v28;
    v21((char *)v33, (unint64_t)v40, v28);
LABEL_33:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v40, v3);
    int64_t v13 = v26;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v16 >= v36) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v36) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v35 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v36) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v35 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v16 + 3;
          if (v16 + 3 >= v36) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v35 + 8 * v13);
          if (!v17) {
            break;
          }
        }
      }
    }

LABEL_37:
  __break(1u);
  return result;
}

      a3 = v19;
LABEL_38:
      a1 = v32;
      goto LABEL_39;
    }

  if (v7 < 0) {
    uint64_t v20 = v7;
  }
  else {
    uint64_t v20 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease();
LABEL_9:
  unint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_42:
    if (v7 < 0) {
      Swift::String v21 = v7;
    }
    else {
      Swift::String v21 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    unint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  uint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *uint64_t v4 = v7;
  uint64_t v10 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    int64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_20;
    }
    uint64_t v10 = 1LL;
  }

  unint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_17:
  if (v14 <= v11) {
    unint64_t v14 = v11;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1LL, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  int64_t v13 = v7 & 0xFFFFFFFFFFFFFF8LL;
LABEL_20:
  uint64_t v15 = v13 + 32 + 8 * v6;
  type metadata accessor for SessionBookmark();
  uint64_t result = swift_arrayDestroy(v15, v9);
  if (!v8)
  {
LABEL_28:
    *(void *)uint64_t v15 = v3;
    return specialized Array._endMutation()(result);
  }

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v22 = v7;
    }
    else {
      uint64_t v22 = v13;
    }
    swift_bridgeObjectRetain(v7);
    unint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v17 = *(void *)(v13 + 16);
  }

  if (__OFSUB__(v17, v5))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = (uint64_t)sub_1001098A8((char *)(v13 + 32 + 8 * v5), v17 - v5, (char *)(v15 + 8));
    if (!((unint64_t)v7 >> 62))
    {
      int64_t v18 = *(void *)(v13 + 16);
      goto LABEL_26;
    }
  }

  if (v7 < 0) {
    uint64_t v23 = v7;
  }
  else {
    uint64_t v23 = v13;
  }
  swift_bridgeObjectRetain(v7);
  int64_t v18 = _CocoaArrayWrapper.endIndex.getter(v23);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_26:
  if (!__OFADD__(v18, v8))
  {
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v18 + v8;
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

unint64_t sub_1000B5E20(void *a1)
{
  unint64_t v2 = v1;
  if (v1 >= 2)
  {
    uint64_t v9 = qword_1001D0540;
    swift_retain(v1);
    if (v9 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_1000093D0(v10, (uint64_t)qword_1001EDC90);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Found state for client identifier", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    sub_100040904(v2);
  }

  else
  {
    sub_100040904(v1);
    if (qword_1001D0540 != -1) {
      swift_once(&qword_1001D0540, sub_100034544);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_1000093D0(v3, (uint64_t)qword_1001EDC90);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v7 = static os_log_type_t.error.getter(v5, v6);
    if (os_log_type_enabled(v5, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v7, "Client state fetch failed", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    return 0LL;
  }

  return v2;
}

void sub_1000B5FCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v411 = a2;
  uint64_t v413 = (int *)type metadata accessor for PegasusContext(0LL);
  sub_100009B94();
  __chkstk_darwin(v6);
  sub_100014428();
  uint64_t v8 = sub_100014484(v7);
  uint64_t v370 = type metadata accessor for PegasusClientName(v8);
  uint64_t v369 = *(void *)(v370 - 8);
  sub_100027160();
  __chkstk_darwin(v9);
  sub_100014428();
  sub_10007732C(v10);
  sub_10000941C(&qword_1001D3DB8);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100014428();
  uint64_t v13 = sub_100014484(v12);
  uint64_t v376 = type metadata accessor for Trialpb_TrialExperiment(v13);
  uint64_t v372 = *(void *)(v376 - 8);
  sub_100027160();
  __chkstk_darwin(v14);
  sub_100014428();
  uint64_t v16 = sub_100014484(v15);
  uint64_t v398 = type metadata accessor for SessionTokens(v16);
  sub_100009B94();
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v367 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v21);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v22);
  sub_10005A2F8();
  sub_10007732C(v23);
  sub_10000941C(&qword_1001D60C0);
  sub_100009B94();
  __chkstk_darwin(v24);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v25);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v26);
  sub_10005A2F8();
  uint64_t v28 = sub_100014484(v27);
  uint64_t v402 = type metadata accessor for Apple_Parsec_Search_V2_Subscriptions(v28);
  uint64_t v397 = *(void *)(v402 - 8);
  sub_100027160();
  __chkstk_darwin(v29);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v30);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v31);
  sub_10005A2F8();
  sub_10007732C(v32);
  sub_10000941C(&qword_1001D60C8);
  sub_100009B94();
  __chkstk_darwin(v33);
  sub_100032C48();
  sub_100077030();
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v367 - v36;
  __chkstk_darwin(v35);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v38);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v39);
  sub_10005A2F8();
  uint64_t v41 = sub_100014484(v40);
  uint64_t v410 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat(v41);
  uint64_t v407 = *(void *)(v410 - 8);
  sub_100027160();
  __chkstk_darwin(v42);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v43);
  sub_10003D828();
  uint64_t v400 = v44;
  __chkstk_darwin(v45);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v46);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v47);
  sub_10005A2F8();
  sub_10007732C(v48);
  sub_10000941C(&qword_1001D60D0);
  sub_100009B94();
  __chkstk_darwin(v49);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v50);
  sub_10003D828();
  sub_100077030();
  uint64_t v52 = __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v367 - v53;
  uint64_t v55 = __chkstk_darwin(v52);
  uint64_t v57 = (char *)&v367 - v56;
  __chkstk_darwin(v55);
  uint64_t v59 = (char *)&v367 - v58;
  uint64_t v406 = type metadata accessor for Apple_Parsec_Search_V2_Location(0LL);
  uint64_t v399 = *(void *)(v406 - 8);
  sub_100027160();
  __chkstk_darwin(v60);
  sub_100032C48();
  sub_100077030();
  __chkstk_darwin(v61);
  sub_10003D828();
  sub_100077030();
  uint64_t v63 = __chkstk_darwin(v62);
  uint64_t v65 = (char *)&v367 - v64;
  uint64_t v66 = __chkstk_darwin(v63);
  uint64_t v68 = (char *)&v367 - v67;
  __chkstk_darwin(v66);
  sub_10003D828();
  sub_100077030();
  __chkstk_darwin(v69);
  uint64_t v70 = sub_1000B93E4();
  uint64_t v405 = type metadata accessor for UUID(v70);
  uint64_t v403 = *(void *)(v405 - 8);
  sub_100027160();
  __chkstk_darwin(v71);
  sub_100014428();
  uint64_t v404 = v72;
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem(0LL);
  sub_100009B94();
  __chkstk_darwin(v73);
  sub_100014428();
  uint64_t v409 = v74;
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit(0LL);
  sub_100009B94();
  __chkstk_darwin(v75);
  sub_100014428();
  uint64_t v408 = v76;
  uint64_t v414 = a3;
  Apple_Parsec_Search_PegasusQueryContext.init()();
  uint64_t v401 = a1;
  switch(a1)
  {
    case 1LL:
      type metadata accessor for ParsecKeys(0LL);
      ((void (*)(void))static ParsecKeys.shared.getter)();
      sub_1000B9194();
      sub_10001683C();
      uint64_t v142 = sub_1000B92C0();
      static ParsecKeys.shared.getter(v142);
      uint64_t v143 = sub_1000B918C();
      uint64_t v145 = v144;
      sub_10001683C();
      sub_1000B9340(v143, v145);
      id v146 = objc_allocWithZone(&OBJC_CLASS___PARSessionConfiguration);
      id v147 = sub_1000B8968(0x697261666153LL, 0xE600000000000000LL, 0x312F697261666153LL, 0xE800000000000000LL);
      sub_100047A50();
      unint64_t v148 = sub_1000B5E20(v147);
      sub_100010CA0();
      uint64_t v149 = v412;
      uint64_t v150 = v413;
      if (v148)
      {
        sub_1000B93D8();
        sub_1000A8A40();
        sub_100010CA0();
        sub_1000B9330();
        uint64_t v152 = *(void *)&v20[v151];
        swift_bridgeObjectRetain(v152);
        sub_10004D784((uint64_t)v20, type metadata accessor for SessionTokens);
        if (v152)
        {
          uint64_t v153 = swift_bridgeObjectRetain(v152);
          sub_1000DBB4C( v153,  v154,  v155,  v156,  v157,  v158,  v159,  v160,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384);
          uint64_t v162 = v161;
          swift_bridgeObjectRelease();
          v415[0] = v162;
          swift_retain(v162);
          sub_1000B92EC();
          if (v143) {
            goto LABEL_234;
          }
          swift_bridgeObjectRelease();
          swift_release();
        }

        sub_1000B940C();
        sub_1000B93D8();
        sub_1000B9424();
        uint64_t v341 = sub_100010CA0();
        UUID.uuidString.getter(v341);
        sub_1000A28B4();
        sub_1000B93B4(v143, *(uint64_t (**)(uint64_t, void))(v403 + 8));
        sub_1000B91CC();
        swift_release();
      }

      uint64_t v342 = sub_1000B8390();
      sub_1000B9250(v342, v343);
      sub_1000B9414();
      uint64_t v344 = v385;
      else {
        sub_1000B911C();
      }
      uint64_t v346 = v402;
      uint64_t v347 = v382;
      swift_bridgeObjectRetain(v345);
      sub_1000B91EC();
      uint64_t v348 = v149[1];
      if (!v348) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v348);
      sub_1000B91FC();
      uint64_t v349 = v149[12];
      if (!v349) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v349);
      sub_1000B9284();
      sub_1000B92D4(v149[13]);
      sub_1000B9248();
      uint64_t v350 = v149[3];
      if (!v350) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v350);
      sub_1000B938C();
      uint64_t v351 = v149[10];
      if (!v351) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v351);
      sub_1000B91DC();
      sub_1000B9270(v149[4], v149[5]);
      sub_1000B939C();
      sub_1000B922C(v149[16], v149[17]);
      sub_1000B92F8();
      sub_1000B7F20(v344);
      sub_1000B9164(v344, 1LL);
      if (v116)
      {
        uint64_t v352 = sub_1000B92B0( enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:),  *(uint64_t (**)(void, uint64_t, uint64_t))(v407 + 104));
        sub_1000A225C(v352, &qword_1001D60C8);
      }

      else
      {
        sub_1000770AC(v384, v344, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v407 + 32));
      }

      sub_1000B941C();
      sub_1000B80A0(v347);
      uint64_t v353 = sub_1000B9164(v347, 1LL);
      if (v116)
      {
        sub_1000B93BC(v353, &qword_1001D60D0);
      }

      else
      {
        sub_1000B93A4();
        uint64_t v354 = v374;
        sub_1000770AC(v374, v347, v355);
        uint64_t v356 = sub_1000B9260();
        sub_1000770AC(v356, v354, v357);
        sub_1000B92A4();
        sub_10007704C(v354, *(uint64_t (**)(uint64_t, uint64_t))(v344 + 8));
      }

      uint64_t v358 = v390;
      uint64_t v359 = v389;
      int v360 = *((unsigned __int8 *)v149 + v150[32]);
      if (v360 == 2)
      {
        sub_100059E88((uint64_t)v149, v390);
      }

      else
      {
        sub_100059E88((uint64_t)v149, v390);
        if ((v360 & 1) != 0)
        {
          sub_10004D784(v358, type metadata accessor for PegasusContext);
          uint64_t v362 = 1LL;
          goto LABEL_222;
        }
      }

      char v361 = *(_BYTE *)(v358 + v150[33]);
      sub_10004D784(v358, type metadata accessor for PegasusContext);
      uint64_t v362 = v361 & 1;
LABEL_222:
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter(v362);
      uint64_t v363 = v149[7];
      if (!v363) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v363);
      sub_1000B91BC();
      sub_1000B7FB8(v359);
      if (sub_100010708(v359, 1LL, v346) == 1)
      {
        uint64_t v364 = sub_1000B92E0();
        sub_1000A225C(v364, &qword_1001D60C0);
      }

      else
      {
        sub_1000B9354();
        sub_10005F8E4(v388, v359, v365);
      }

      sub_1000B9448();
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v366);
      sub_1000B937C();
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B919C();
      sub_1000B927C();

      goto LABEL_233;
    case 2LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B92C0();
      sub_1000B91AC();
      uint64_t v164 = sub_1000B918C();
      uint64_t v166 = v165;
      sub_10001683C();
      sub_1000B9340(v164, v166);
      unint64_t v167 = v412;
      int64_t v168 = v413;
      else {
        sub_1000B911C();
      }
      uint64_t v286 = v403;
      swift_bridgeObjectRetain(v169);
      sub_1000B91EC();
      uint64_t v287 = v167[1];
      if (!v287) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v287);
      sub_1000B91FC();
      sub_1000B92D4(v167[13]);
      sub_1000B9248();
      uint64_t v288 = v167[7];
      if (!v288) {
        sub_1000B911C();
      }
      uint64_t v289 = v379;
      swift_bridgeObjectRetain(v288);
      sub_1000B91BC();
      uint64_t v290 = v167[10];
      if (!v290) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v290);
      sub_1000B91DC();
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v291);
      sub_1000B937C();
      uint64_t v292 = v167[3];
      if (!v292) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v292);
      sub_1000B938C();
      sub_1000B922C(v167[16], v167[17]);
      sub_1000B92F8();
      sub_1000B9270(v167[4], v167[5]);
      sub_1000B939C();
      sub_1000B9328(*((_BYTE *)v167 + v168[32]));
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B919C();
      sub_1000B927C();
      sub_1000B93C4();
      sub_1000B7F20(v289);
      sub_1000B9164(v289, 1LL);
      if (v116)
      {
        sub_1000B92B0( enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:),  *(uint64_t (**)(void, uint64_t, uint64_t))(v407 + 104));
        sub_100019C1C(v289, &qword_1001D60C8);
      }

      else
      {
        sub_1000770AC(v377, v289, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v407 + 32));
      }

      sub_1000B941C();
      sub_1000B80A0((uint64_t)v54);
      uint64_t v293 = sub_1000B9164((uint64_t)v54, 1LL);
      if (v116)
      {
        sub_1000A225C(v293, &qword_1001D60D0);
      }

      else
      {
        uint64_t v294 = v399;
        sub_1000770AC((uint64_t)v65, (uint64_t)v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v399 + 32));
        uint64_t v295 = sub_1000B9260();
        sub_1000770AC(v295, (uint64_t)v65, v296);
        sub_1000B92A4();
        sub_10007704C((uint64_t)v65, *(uint64_t (**)(uint64_t, uint64_t))(v294 + 8));
      }

      uint64_t v298 = v404;
      uint64_t v297 = v405;
      sub_1000B9404();
      sub_1000A896C();
      uint64_t v299 = sub_100010CA0();
      UUID.uuidString.getter(v299);
      (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v298, v297);
      sub_1000B91CC();
      goto LABEL_233;
    case 3LL:
    case 20LL:
    case 22LL:
      sub_100048ADC();
      uint64_t v77 = sub_10003F020();
      sub_10001683C();
      if (v77)
      {
        uint64_t v78 = sub_10005A624();
        sub_1000DBB4C( v78,  v79,  v80,  v81,  v82,  v83,  v84,  v85,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384);
        sub_1000325E4();
        sub_1000B943C();
        sub_1000B92EC();
        uint64_t v86 = v412;
        if (v54)
        {
LABEL_234:
          swift_release();
          __break(1u);
          return;
        }

        sub_1000325E4();
        sub_10001683C();
        uint64_t v87 = (void *)v415[0];
      }

      else
      {
        uint64_t v87 = _swiftEmptyArrayStorage;
        uint64_t v86 = v412;
      }

      Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter(v87);
      sub_1000B91B4();
      sub_1000B913C();
      uint64_t v91 = sub_1000B9194();
      uint64_t v93 = v92;
      sub_10001683C();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter(v91, v93);
      sub_1000B91AC();
      uint64_t v94 = sub_1000B918C();
      uint64_t v96 = v95;
      sub_10001683C();
      Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter(v94, v96);
      uint64_t v97 = v413;
      Apple_Parsec_Search_PegasusQueryContext.hsEnabled.setter(*((_BYTE *)v86 + v413[35]) & 1);
      else {
        sub_1000B911C();
      }
      uint64_t v99 = v407;
      uint64_t v100 = v409;
      swift_bridgeObjectRetain(v98);
      uint64_t v101 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.countryCode.setter(v101, v102);
      uint64_t v103 = v86[1];
      if (!v103) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v103);
      uint64_t v104 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.locale.setter(v104, v105);
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v106);
      uint64_t v107 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.sil.setter(v107);
      sub_1000B922C(v86[16], v86[17]);
      sub_1000B92F8();
      uint64_t v108 = v86[12];
      if (!v108) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v108);
      uint64_t v109 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter(v109, v110);
      sub_100029778(v86[4], v86[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter(v100);
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter(byte_1001EDD88);
      sub_1000B927C();
      swift_bridgeObjectRetain(v86[13]);
      sub_1000B9248();
      uint64_t v111 = v86[10];
      if (!v111) {
        sub_1000B911C();
      }
      uint64_t v112 = v400;
      swift_bridgeObjectRetain(v111);
      uint64_t v113 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter(v113, v114);
      sub_1000B7F20((uint64_t)v37);
      uint64_t v115 = v410;
      sub_1000B9164((uint64_t)v37, 1LL);
      if (v116)
      {
        uint64_t v117 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v99 + 104))( v112,  enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:),  v115);
        sub_1000A2724(v117, &qword_1001D60C8);
      }

      else
      {
        sub_1000770AC(v112, (uint64_t)v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 32));
      }

      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter(v112);
      uint64_t v118 = v86[7];
      uint64_t v119 = v413;
      if (!v118) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v118);
      uint64_t v120 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter(v120, v121);
      uint64_t v122 = sub_1000B8390();
      uint64_t v124 = sub_1000B9250(v122, v123);
      if (!v116 & v126) {
        unint64_t v125 = 0xC000000000000000LL;
      }
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter(v124, v125);
      sub_100048B84();
      sub_100019AFC(v415, v415[3]);
      sub_10007829C();
      sub_1000108B8(v415);
      uint64_t v127 = sub_1000B917C();
      Apple_Parsec_Search_PegasusQueryContext.ampBaselineExperimentMetadata.setter(v127);
      else {
        sub_1000B911C();
      }
      uint64_t v129 = v401;
      swift_bridgeObjectRetain(v128);
      uint64_t v130 = sub_1000B917C();
      uint64_t v132 = Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter(v130, v131);
      uint64_t v133 = static ConfigurationContext.modelNumber.getter(v132);
      Apple_Parsec_Search_PegasusQueryContext.deviceModel.setter(v133);
      uint64_t v134 = ClientType.rawValue.getter(v129);
      if (v134 == ClientType.rawValue.getter(3LL)) {
LABEL_35:
      }
        Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter(0LL);
      goto LABEL_233;
    case 5LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      goto LABEL_35;
    case 6LL:
      uint64_t v138 = v412;
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v139);
      sub_1000B91EC();
      sub_1000B91B4();
      sub_1000B913C();
      uint64_t v221 = sub_1000B9194();
      uint64_t v223 = v222;
      sub_10001683C();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter(v221, v223);
      sub_1000B91AC();
      uint64_t v224 = sub_1000B918C();
      uint64_t v226 = v225;
      sub_10001683C();
      sub_1000B9340(v224, v226);
      uint64_t v227 = v138[7];
      if (!v227) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v227);
      sub_1000B91BC();
      swift_bridgeObjectRetain(v138[13]);
      sub_1000B9248();
      uint64_t v232 = v138[1];
      if (!v232) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v232);
      sub_1000B91FC();
      uint64_t v236 = v138[10];
      if (!v236) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v236);
      sub_1000B91DC();
      uint64_t v240 = v138[12];
      if (!v240) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v240);
      sub_1000B9284();
      goto LABEL_233;
    case 7LL:
    case 8LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      uint64_t v88 = v412;
      unint64_t v89 = v413;
      if (sub_1000B9348(v413[20])) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      uint64_t v181 = v403;
      swift_bridgeObjectRetain(v90);
      sub_1000B9294();
      if (v88[1]) {
        sub_1000B93CC();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v182);
      sub_1000B921C();
      sub_1000B92D4(v88[13]);
      sub_1000B9248();
      uint64_t v183 = v88[7];
      if (!v183) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v183);
      uint64_t v184 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter(v184, v185);
      uint64_t v186 = v88[10];
      if (!v186) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v186);
      uint64_t v187 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter(v187, v188);
      if (sub_1000B9348(v89[27])) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v189);
      uint64_t v190 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter(v190, v191);
      uint64_t v192 = v88[3];
      if (!v192) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v192);
      uint64_t v193 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter(v193, v194);
      sub_1000B922C(v88[16], v88[17]);
      sub_1000B92F8();
      sub_1000B9270(v88[4], v88[5]);
      sub_1000B939C();
      sub_1000B9328(*((_BYTE *)v88 + v89[32]));
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B9308();
      sub_1000B927C();
      sub_1000486D0();
      uint64_t v195 = v404;
      sub_1000A896C();
      uint64_t v196 = sub_100010CA0();
      UUID.uuidString.getter(v196);
      sub_1000B93B4(v195, *(uint64_t (**)(uint64_t, void))(v181 + 8));
      uint64_t v197 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.userGuid.setter(v197, v198);
      sub_1000B80A0((uint64_t)v59);
      sub_1000B9164((uint64_t)v59, 1LL);
      if (v116)
      {
        sub_100019C1C((uint64_t)v59, &qword_1001D60D0);
      }

      else
      {
        uint64_t v199 = v399;
        sub_1000770AC(v3, (uint64_t)v59, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v399 + 32));
        uint64_t v200 = sub_1000B9260();
        sub_1000770AC(v200, v3, v201);
        Apple_Parsec_Search_PegasusQueryContext.location.setter(v88);
        sub_10007704C(v3, *(uint64_t (**)(uint64_t, uint64_t))(v199 + 8));
      }

      uint64_t v202 = v407;
      uint64_t v203 = v402;
      uint64_t v204 = v396;
      uint64_t v205 = v394;
      uint64_t v206 = (uint64_t)v88;
      sub_1000B7F20(v394);
      uint64_t v207 = v410;
      sub_1000B9164(v205, 1LL);
      if (v116)
      {
        uint64_t v208 = sub_1000B92B0( enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:),  *(uint64_t (**)(void, uint64_t, uint64_t))(v202 + 104));
        sub_1000A2724(v208, &qword_1001D60C8);
      }

      else
      {
        uint64_t v206 = v393;
        sub_1000770AC(v393, v205, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v202 + 32));
      }

      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter(v206);
      sub_1000B7FB8(v204);
      if (sub_100010708(v204, 1LL, v203) == 1)
      {
        uint64_t v209 = sub_1000B92E0();
        sub_1000B93BC(v209, &qword_1001D60C0);
      }

      else
      {
        sub_1000B9354();
        uint64_t v207 = v395;
        v210(v395, v204, v203);
      }

      Apple_Parsec_Search_PegasusQueryContext.subscriptions.setter(v207);
      uint64_t v211 = sub_1000B8390();
      uint64_t v213 = sub_1000B9250(v211, v212);
      if (!v116 & v126) {
        unint64_t v214 = 0xC000000000000000LL;
      }
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter(v213, v214);
      goto LABEL_233;
    case 13LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      uint64_t v135 = sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      uint64_t v136 = v413;
      else {
        sub_1000B911C();
      }
      uint64_t v215 = v403;
      uint64_t v216 = v391;
      swift_bridgeObjectRetain(v137);
      uint64_t v217 = sub_1000B9238();
      Apple_Parsec_Search_PegasusQueryContext.countryCode.setter(v217, v218);
      uint64_t v219 = v412;
      if (v412[1]) {
        sub_1000B93CC();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v220);
      uint64_t v229 = sub_1000B9238();
      Apple_Parsec_Search_PegasusQueryContext.locale.setter(v229, v230);
      sub_1000B9318();
      sub_1000B9248();
      uint64_t v231 = v219[7];
      if (v231)
      {
        uint64_t v135 = v219[6];
        a3 = v219[7];
      }

      else
      {
        sub_1000B911C();
      }

      swift_bridgeObjectRetain(v231);
      uint64_t v233 = sub_1000B9238();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter(v233, v234);
      uint64_t v235 = v219[10];
      if (v235)
      {
        uint64_t v135 = v219[9];
        a3 = v219[10];
      }

      else
      {
        sub_1000B911C();
      }

      swift_bridgeObjectRetain(v235);
      uint64_t v237 = sub_1000B9238();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter(v237, v238);
      if (sub_1000B9348(v136[27])) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v239);
      uint64_t v241 = sub_1000B9238();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter(v241, v242);
      uint64_t v243 = v412;
      uint64_t v244 = v412[3];
      if (v244)
      {
        uint64_t v135 = v412[2];
        a3 = v412[3];
      }

      else
      {
        sub_1000B911C();
      }

      swift_bridgeObjectRetain(v244);
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter(v135, a3);
      sub_1000B922C(v243[16], v243[17]);
      sub_1000B92F8();
      sub_1000B9270(v243[4], v243[5]);
      sub_1000B939C();
      sub_1000B9328(*((_BYTE *)v243 + v136[32]));
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B919C();
      sub_1000B927C();
      sub_1000B93C4();
      sub_1000486D0();
      uint64_t v245 = v404;
      sub_1000A896C();
      uint64_t v246 = sub_100010CA0();
      UUID.uuidString.getter(v246);
      sub_1000A28B4();
      sub_1000B93B4(v245, *(uint64_t (**)(uint64_t, void))(v215 + 8));
      sub_1000B91CC();
      sub_1000B80A0((uint64_t)v57);
      sub_1000B9164((uint64_t)v57, 1LL);
      if (v116)
      {
        sub_100019C1C((uint64_t)v57, &qword_1001D60D0);
      }

      else
      {
        sub_1000B93A4();
        sub_1000770AC((uint64_t)v68, (uint64_t)v57, v247);
        uint64_t v248 = sub_1000B9260();
        sub_1000770AC(v248, (uint64_t)v68, v249);
        sub_1000B92A4();
        sub_10007704C((uint64_t)v68, (uint64_t (*)(uint64_t, uint64_t))v243[1]);
      }

      uint64_t v250 = v402;
      uint64_t v251 = v392;
      uint64_t v252 = v387;
      uint64_t v253 = v383;
      sub_1000B7F20(v383);
      uint64_t v254 = v410;
      if (sub_100010708(v253, 1LL, v410) == 1)
      {
        uint64_t v255 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v407 + 104))( v380,  enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:),  v254);
        sub_1000B93BC(v255, &qword_1001D60C8);
      }

      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v407 + 32))(v380, v253, v254);
      }

      sub_1000B941C();
      sub_1000B7FB8(v252);
      if (sub_100010708(v252, 1LL, v250) == 1)
      {
        sub_1000B92E0();
        sub_100019C1C(v252, &qword_1001D60C0);
      }

      else
      {
        sub_1000B9354();
        sub_10005F8E4(v386, v252, v256);
      }

      sub_1000B9448();
      uint64_t v257 = sub_1000B8390();
      sub_1000B9250(v257, v258);
      sub_1000B9414();
      id v259 = objc_allocWithZone(&OBJC_CLASS___PARSessionConfiguration);
      id v260 = sub_1000B8968(0xD000000000000018LL, 0x800000010016C680LL, 0xD000000000000014LL, 0x8000000100171460LL);
      sub_100047A50();
      unint64_t v261 = sub_1000B5E20(v260);
      swift_unknownObjectRelease();
      if (!v261)
      {

        goto LABEL_233;
      }

      swift_unknownObjectRetain(*(void *)(v261 + 64));
      sub_10001683C();
      uint64_t v262 = v375;
      sub_1000A8A40();
      swift_unknownObjectRelease();
      sub_100019C44(v262, v251);
      sub_1000B9330();
      uint64_t v264 = *(void *)(v251 + v263);
      if (v264)
      {
        uint64_t v265 = v369;
        uint64_t v266 = v368;
        uint64_t v267 = v370;
        (*(void (**)(uint64_t, void, uint64_t))(v369 + 104))( v368,  enum case for PegasusClientName.VisualIntelligence(_:),  v370);
        uint64_t v268 = swift_bridgeObjectRetain(v264);
        uint64_t v269 = PegasusClientName.rawValue.getter(v268);
        uint64_t v271 = v270;
        (*(void (**)(uint64_t, uint64_t))(v265 + 8))(v266, v267);
        sub_1000292DC(v269, v271, v264, v216);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v272 = sub_100010708(v216, 1LL, v376);
        if ((_DWORD)v272 != 1)
        {
          uint64_t v273 = v372;
          uint64_t v274 = v371;
          sub_10005F8E4(v371, v216, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v372 + 32));
          uint64_t v275 = sub_10000941C(&qword_1001D2458);
          uint64_t v276 = *(unsigned __int8 *)(v273 + 80);
          uint64_t v277 = (v276 + 32) & ~v276;
          uint64_t v278 = swift_allocObject(v275, v277 + *(void *)(v273 + 72), v276 | 7);
          *(_OWORD *)(v278 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
          sub_10005F8E4(v278 + v277, v274, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v273 + 16));
          sub_1000B940C();
          if (qword_1001D0540 != -1) {
            swift_once(&qword_1001D0540, sub_100034544);
          }
          uint64_t v279 = type metadata accessor for Logger(0LL);
          uint64_t v280 = sub_1000093D0(v279, (uint64_t)qword_1001EDC90);
          uint64_t v281 = (void *)Logger.logObject.getter(v280);
          os_log_type_t v282 = static os_log_type_t.debug.getter();
          if (sub_100010DE4(v282))
          {
            uint64_t v283 = (_WORD *)sub_10001441C();
            *uint64_t v283 = 0;
            sub_10001444C((void *)&_mh_execute_header, v284, v285, "Found valid trial experiment Identifiers");
            sub_100010C34((uint64_t)v283);
          }

          sub_100009BC8(v371, *(uint64_t (**)(uint64_t, uint64_t))(v372 + 8));
          goto LABEL_198;
        }
      }

      else
      {
        uint64_t v272 = sub_100009654(v216, 1LL, 1LL, v376);
      }

      sub_1000A2724(v272, &qword_1001D3DB8);
      if (qword_1001D0540 != -1) {
        swift_once(&qword_1001D0540, sub_100034544);
      }
      uint64_t v334 = type metadata accessor for Logger(0LL);
      uint64_t v335 = sub_1000093D0(v334, (uint64_t)qword_1001EDC90);
      uint64_t v336 = (void *)Logger.logObject.getter(v335);
      os_log_type_t v337 = static os_log_type_t.debug.getter();
      if (sub_100010DE4(v337))
      {
        uint64_t v338 = (_WORD *)sub_10001441C();
        *uint64_t v338 = 0;
        sub_10001444C((void *)&_mh_execute_header, v339, v340, "Could not find trial experiment Identifiers");
        sub_100010C34((uint64_t)v338);
      }

LABEL_198:
      sub_10004D784(v251, type metadata accessor for SessionTokens);
LABEL_233:
      sub_100009AA0();
      return;
    case 19LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      if (v412[1]) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v163);
      sub_1000B921C();
      goto LABEL_233;
    case 21LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      uint64_t v179 = v412;
      if (v412[1]) {
        sub_1000B93CC();
      }
      else {
        sub_1000B911C();
      }
      uint64_t v327 = v413;
      swift_bridgeObjectRetain(v180);
      sub_1000B921C();
      if (sub_1000B9348(v327[20])) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v328);
      sub_1000B9294();
      uint64_t v329 = v179[12];
      if (!v329) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v329);
      uint64_t v330 = sub_1000B920C();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter(v330, v331);
      v415[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100048A88();
      uint64_t v332 = sub_10003F020();
      sub_10001683C();
      if (v332)
      {
        sub_1000B5AAC(v332, v415);
        sub_1000325E4();
        uint64_t v333 = (void *)v415[0];
      }

      else
      {
        uint64_t v333 = _swiftEmptyArrayStorage;
      }

      Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter(v333);
      goto LABEL_233;
    case 23LL:
      sub_1000B91B4();
      sub_1000B913C();
      uint64_t v170 = sub_1000B9194();
      uint64_t v172 = v171;
      sub_10001683C();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter(v170, v172);
      sub_1000B91AC();
      uint64_t v173 = sub_1000B918C();
      uint64_t v175 = v174;
      sub_10001683C();
      sub_1000B9340(v173, v175);
      uint64_t v177 = v412;
      uint64_t v176 = (uint64_t)v413;
      else {
        sub_1000B911C();
      }
      uint64_t v300 = v403;
      swift_bridgeObjectRetain(v178);
      sub_1000B91EC();
      uint64_t v301 = v177[1];
      if (!v301) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v301);
      sub_1000B91FC();
      uint64_t v302 = v177[7];
      if (!v302) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v302);
      sub_1000B91BC();
      uint64_t v303 = v177[10];
      if (!v303) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v303);
      sub_1000B91DC();
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B919C();
      uint64_t v304 = v177[12];
      if (!v304) {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v304);
      sub_1000B9284();
      sub_1000B9328(*((_BYTE *)v177 + *(int *)(v176 + 128)));
      sub_1000B927C();
      sub_1000B93C4();
      sub_1000B9404();
      sub_1000B9424();
      uint64_t v305 = sub_100010CA0();
      UUID.uuidString.getter(v305);
      sub_1000A28B4();
      sub_100009BC8(v176, *(uint64_t (**)(uint64_t, uint64_t))(v300 + 8));
      sub_1000B91CC();
      sub_1000B9404();
      uint64_t v306 = v381;
      sub_1000A5C20(v381);
      sub_100010CA0();
      sub_1000B9330();
      uint64_t v308 = *(void *)(v306 + v307);
      sub_10005A624();
      sub_10004D784(v306, type metadata accessor for SessionTokens);
      if (!v308) {
        goto LABEL_175;
      }
      uint64_t v309 = sub_10005A624();
      sub_1000DBB4C( v309,  v310,  v311,  v312,  v313,  v314,  v315,  v316,  v367,  v368,  v369,  v370,  v371,  v372,  v373,  v374,  v375,  v376,  v377,  v378,  v379,  v380,  v381,  v382,  v383,  v384);
      sub_1000325E4();
      sub_1000B943C();
      sub_1000B92EC();
      if (v306) {
        goto LABEL_234;
      }
      sub_1000325E4();
      sub_10001683C();
LABEL_175:
      sub_1000B940C();
      uint64_t v317 = sub_1000B8390();
      sub_1000B9250(v317, v318);
      sub_1000B9414();
      swift_bridgeObjectRetain(v177[13]);
      sub_1000B9248();
      uint64_t v319 = v378;
      uint64_t v320 = v177;
      sub_1000B80A0(v378);
      uint64_t v321 = v406;
      sub_1000B9164(v319, 1LL);
      if (v116)
      {
        sub_100019C1C(v319, &qword_1001D60D0);
      }

      else
      {
        sub_1000B93A4();
        uint64_t v322 = v373;
        sub_1000770AC(v373, v319, v323);
        uint64_t v324 = sub_1000B9260();
        sub_1000770AC(v324, v322, v325);
        sub_1000B92A4();
        sub_10007704C(v322, *(uint64_t (**)(uint64_t, uint64_t))(v306 + 8));
      }

      uint64_t v326 = v177[19];
      if (v326)
      {
        uint64_t v321 = v177[18];
        uint64_t v320 = (void *)v177[19];
      }

      else
      {
        sub_1000B911C();
      }

      swift_bridgeObjectRetain(v326);
      Apple_Parsec_Search_PegasusQueryContext.region.setter(v321, v320);
      goto LABEL_233;
    case 26LL:
      sub_1000B91B4();
      sub_1000B913C();
      sub_1000B9194();
      sub_10001683C();
      sub_1000B9128();
      sub_1000B91AC();
      sub_1000B918C();
      sub_10001683C();
      sub_1000B9148();
      if (qword_1001D05C8 != -1) {
        swift_once(&qword_1001D05C8, sub_10006B928);
      }
      sub_1000B9308();
      sub_1000B927C();
      uint64_t v140 = v412;
      if (sub_1000B9348(v413[20])) {
        sub_1000B9158();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v141);
      sub_1000B9294();
      if (v140[1]) {
        sub_1000B93CC();
      }
      else {
        sub_1000B911C();
      }
      swift_bridgeObjectRetain(v228);
      sub_1000B921C();
      sub_1000B9318();
      sub_1000B9248();
      goto LABEL_233;
    default:
      goto LABEL_233;
  }

uint64_t sub_1000B7F20@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 64);
  if (v3 == 2)
  {
    uint64_t v4 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat(0LL);
    uint64_t v5 = a1;
    uint64_t v6 = 1LL;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat(0LL);
    uint64_t v8 = (unsigned int *)&enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.twelve(_:);
    if ((v3 & 1) != 0) {
      uint64_t v8 = (unsigned int *)&enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.twentyFour(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))(a1, *v8, v7);
    uint64_t v5 = a1;
    uint64_t v6 = 0LL;
    uint64_t v4 = v7;
  }

  return sub_100009654(v5, v6, 1LL, v4);
}

uint64_t sub_1000B7FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for String.Encoding(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100009AEC();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = *(void *)(v1 + 120);
  if (v9
    && (uint64_t v10 = *(void *)(v1 + 112),
        static String.Encoding.utf8.getter(v5),
        uint64_t v11 = String.data(using:allowLossyConversion:)(v8, 0LL, v10, v9),
        unint64_t v13 = v12,
        uint64_t v14 = sub_10007704C(v8, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8)),
        v13 >> 60 != 15))
  {
    Apple_Parsec_Search_V2_Subscriptions.init()(v14);
    Apple_Parsec_Search_V2_Subscriptions.subscriptionJson.setter(v11, v13);
    uint64_t v15 = 0LL;
  }

  else
  {
    uint64_t v15 = 1LL;
  }

  uint64_t v16 = type metadata accessor for Apple_Parsec_Search_V2_Subscriptions(0LL);
  return sub_100009654(a1, v15, 1LL, v16);
}

void sub_1000B80A0(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Search_V2_RevGeoResolution(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_1000B93E4();
  type metadata accessor for Apple_Parsec_Search_V2_Location.Source(v10);
  sub_100009B94();
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_Location(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100009AEC();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = *(void **)(v3 + 160);
  if (v20)
  {
    uint64_t v61 = v6;
    uint64_t v62 = v5;
    uint64_t v63 = a1;
    id v21 = v20;
    Apple_Parsec_Search_V2_Location.init()();
    id v22 = [v21 horizontalAccuracy];
    *(float *)&double v23 = v23;
    Apple_Parsec_Search_V2_Location.horizontalAccuracy.setter(v22, *(float *)&v23);
    id v24 = sub_1000B93F8();
    *(float *)&double v25 = v25;
    Apple_Parsec_Search_V2_Location.latitude.setter(v24, *(float *)&v25);
    id v26 = sub_1000B93F8();
    float v28 = v27;
    Apple_Parsec_Search_V2_Location.longitude.setter(v26, v28);
    sub_1000BCB70(v14);
    Apple_Parsec_Search_V2_Location.source.setter(v14);
    v64[3] = &unk_1001B32C8;
    v64[4] = sub_10003B83C();
    LOBYTE(v64[0]) = 0;
    char v29 = isFeatureEnabled(_:)(v64);
    sub_1000108B8(v64);
    if ((v29 & 1) != 0 && (uint64_t v30 = *(void **)(v3 + *(int *)(type metadata accessor for PegasusContext(0LL) + 68))) != 0LL)
    {
      id v31 = v30;
      uint64_t v32 = Apple_Parsec_Search_V2_RevGeoResolution.init()();
      uint64_t v33 = sub_1000B9300(v32, (SEL *)&selRef_country);
      uint64_t v35 = sub_1000B9430(v33, v34);
      if (v37) {
        unint64_t v36 = 0xE000000000000000LL;
      }
      uint64_t v38 = Apple_Parsec_Search_V2_RevGeoResolution.country.setter(v35, v36);
      uint64_t v39 = sub_1000B9300(v38, (SEL *)&selRef_administrativeArea);
      uint64_t v41 = sub_1000B9430(v39, v40);
      if (v37) {
        unint64_t v42 = 0xE000000000000000LL;
      }
      uint64_t v43 = Apple_Parsec_Search_V2_RevGeoResolution.administrativeArea.setter(v41, v42);
      uint64_t v44 = sub_1000B9300(v43, (SEL *)&selRef_subAdministrativeArea);
      uint64_t v46 = sub_1000B9430(v44, v45);
      if (v37) {
        unint64_t v47 = 0xE000000000000000LL;
      }
      uint64_t v48 = Apple_Parsec_Search_V2_RevGeoResolution.subAdministrativeArea.setter(v46, v47);
      uint64_t v49 = sub_1000B9300(v48, (SEL *)&selRef_locality);
      uint64_t v51 = sub_1000B9430(v49, v50);
      if (v37) {
        unint64_t v52 = 0xE000000000000000LL;
      }
      Apple_Parsec_Search_V2_RevGeoResolution.locality.setter(v51, v52);
      uint64_t v53 = sub_1000B8FDC(v31);
      if (v53 && (uint64_t v54 = sub_100050148(v53), swift_bridgeObjectRelease(), v54))
      {
        uint64_t v55 = v9;
      }

      else
      {
        uint64_t v55 = v9;
        swift_bridgeObjectRelease();
        uint64_t v54 = _swiftEmptyArrayStorage;
      }

      uint64_t v56 = v63;
      Apple_Parsec_Search_V2_RevGeoResolution.formattedAddressLines.setter(v54);
      uint64_t v57 = v61;
      uint64_t v58 = v55;
      uint64_t v59 = v55;
      uint64_t v60 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v59, v2, v62);
      Apple_Parsec_Search_V2_Location.revGeoResolution.setter(v58);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v2, v60);
    }

    else
    {

      uint64_t v56 = v63;
    }

    sub_10005F8E4(v56, v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32));
    sub_100009654(v56, 0LL, 1LL, v15);
    sub_100009AA0();
  }

  else
  {
    sub_100009654(a1, 1LL, 1LL, v15);
  }

uint64_t sub_1000B8390()
{
  if (v1) {
    return sub_1000B83B8(v0, v1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000B83B8(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v19 = a1;
  *((void *)&v19 + sub_1000A0380(v0, 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_10000941C(&qword_1001D60D8);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
    sub_100019C1C((uint64_t)v17, &qword_1001D60E0);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v20;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (char *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (void *)v5;
    }

    uint64_t v9 = Data._Representation.init(_:)(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = v9;
      *((void *)&v17[0] + sub_1000A0380(v0, 1) = v11;
      return *(void *)&v17[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v17[0] = Data._Representation.init(count:)(v12);
    *((void *)&v17[0] + sub_1000A0380(v0, 1) = v13;
    __chkstk_darwin(*(void *)&v17[0]);
    sub_1000B8AA0();
    __asm { BR              X12 }
  }

  sub_100019BC4(v17, (uint64_t)v20);
  uint64_t v3 = v21;
  uint64_t v4 = v22;
  sub_100019AFC(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v19,  sub_1000B8D40,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease();
  v17[0] = v19;
  sub_1000108B8(v20);
  return *(void *)&v17[0];
}

uint64_t sub_1000B88A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v10 = v2;
  unint64_t v3 = sub_1000B90DC();
  unint64_t v11 = v3;
  uint64_t v4 = sub_10001B468(v9);
  uint64_t v5 = *(void *)(v2 - 8);
  sub_10005F8E4((uint64_t)v4, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  sub_100019AFC(v9, v10);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v8,  sub_1000B8D40,  0LL,  &type metadata for Data._Representation,  v2,  v3);
  sub_100009BC8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  uint64_t v6 = v8;
  sub_1000108B8(v9);
  return v6;
}

id sub_1000B8968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v7 = 0LL;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v8 = 0LL;
    goto LABEL_6;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
LABEL_6:
  id v9 = [v4 initWithId:v7 userAgent:v8];

  return v9;
}

void sub_1000B8A04(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1 >> 16;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v7 = String.UTF16View.index(_:offsetBy:)(15LL, v5, a2);
    sub_1000B9364(v7);
  }

  else
  {
    uint64_t v6 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v5);
    sub_1000B9364(v6);
  }

  sub_100009A90();
}

void *sub_1000B8A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_1000B8E34( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000B90C0,  (uint64_t)v5,  a1,  a2);
}

void sub_1000B8AA0()
{
  __asm { BR              X11 }

void *sub_1000B8B00@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  id v9 = BYTE4(a1);
  uint64_t v10 = BYTE5(a1);
  unint64_t v11 = BYTE6(a1);
  uint64_t result = sub_1000B8F40((uint64_t)&v7, v3, v2, BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *unint64_t v1 = v7;
  v1[1] = v6;
  return result;
}

uint64_t sub_1000B8D40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000B8DB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain(a4);
    uint64_t result = _StringGuts.copyUTF8(into:)(v7, a2, a3, a4);
    if ((v8 & 1) == 0)
    {
      swift_bridgeObjectRelease(a4);
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1000B8E34( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_1000B8E94(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  char v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_1000B8F40( uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1000B8F84(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  sub_1000A28B4();

  return v2;
}

uint64_t sub_1000B8FDC(void *a1)
{
  id v1 = [a1 formattedAddressLines];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  return v3;
}

void *sub_1000B9034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_1000B8A58(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

void *sub_1000B9068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000B9034(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000B9080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_1000B8DB4(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }

  return result;
}

uint64_t sub_1000B90C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1000B9080(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

unint64_t sub_1000B90DC()
{
  unint64_t result = qword_1001D5598;
  if (!qword_1001D5598)
  {
    uint64_t v1 = type metadata accessor for SHA256Digest(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SHA256Digest, v1);
    atomic_store(result, (unint64_t *)&qword_1001D5598);
  }

  return result;
}

  ;
}

uint64_t sub_1000B9128()
{
  return Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter(v0, v1);
}

uint64_t sub_1000B913C()
{
  return static ParsecKeys.shared.getter();
}

uint64_t sub_1000B9148()
{
  return Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter(v0, v1);
}

  ;
}

uint64_t sub_1000B9164(uint64_t a1, uint64_t a2)
{
  return sub_100010708(a1, a2, v2);
}

uint64_t sub_1000B917C()
{
  return v0;
}

uint64_t sub_1000B918C()
{
  return ParsecKeys.encryptedToken.getter();
}

uint64_t sub_1000B9194()
{
  return ParsecKeys.oldSecretKey.getter();
}

uint64_t sub_1000B919C()
{
  return Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter(byte_1001EDD88);
}

uint64_t sub_1000B91AC()
{
  return static ParsecKeys.shared.getter();
}

uint64_t sub_1000B91B4()
{
  return type metadata accessor for ParsecKeys(0LL);
}

uint64_t sub_1000B91BC()
{
  return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter(v0, v1);
}

uint64_t sub_1000B91CC()
{
  return Apple_Parsec_Search_PegasusQueryContext.userGuid.setter(v0, v1);
}

uint64_t sub_1000B91DC()
{
  return Apple_Parsec_Search_PegasusQueryContext.timeZone.setter(v0, v1);
}

uint64_t sub_1000B91EC()
{
  return Apple_Parsec_Search_PegasusQueryContext.countryCode.setter(v0, v1);
}

uint64_t sub_1000B91FC()
{
  return Apple_Parsec_Search_PegasusQueryContext.locale.setter(v0, v1);
}

uint64_t sub_1000B920C()
{
  return v0;
}

uint64_t sub_1000B921C()
{
  return Apple_Parsec_Search_PegasusQueryContext.locale.setter(v0, v1);
}

uint64_t sub_1000B922C(uint64_t a1, uint64_t a2)
{
  return sub_1000296E0(a1, a2);
}

uint64_t sub_1000B9238()
{
  return v0;
}

uint64_t sub_1000B9248()
{
  return Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter(v0);
}

uint64_t sub_1000B9250(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1000B9260()
{
  return *(void *)(v0 - 272);
}

uint64_t sub_1000B9270(uint64_t a1, uint64_t a2)
{
  return sub_100029778(a1, a2);
}

uint64_t sub_1000B927C()
{
  return Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter(0LL);
}

uint64_t sub_1000B9284()
{
  return Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter(v0, v1);
}

uint64_t sub_1000B9294()
{
  return Apple_Parsec_Search_PegasusQueryContext.countryCode.setter(v0, v1);
}

uint64_t sub_1000B92A4()
{
  return Apple_Parsec_Search_PegasusQueryContext.location.setter(v0);
}

uint64_t sub_1000B92B0@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X8>)
{
  return a2(*(void *)(v2 - 256), a1, v3);
}

uint64_t sub_1000B92C0()
{
  return Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter(v0, v1);
}

uint64_t sub_1000B92D4(uint64_t a1)
{
  return swift_bridgeObjectRetain(a1);
}

uint64_t sub_1000B92E0()
{
  return Apple_Parsec_Search_V2_Subscriptions.init()();
}

void sub_1000B92EC()
{
}

uint64_t sub_1000B92F8()
{
  return Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter(v0);
}

uint64_t sub_1000B9300(uint64_t a1, SEL *a2)
{
  return sub_1000B8F84(v2, a2);
}

uint64_t sub_1000B9308()
{
  return Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter(byte_1001EDD88);
}

uint64_t sub_1000B9318()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 104));
}

uint64_t sub_1000B9328@<X0>(char a1@<W8>)
{
  return Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter(a1 & 1);
}

  ;
}

uint64_t sub_1000B9340(uint64_t a1, uint64_t a2)
{
  return Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter(a1, a2);
}

uint64_t sub_1000B9348@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1 + 8);
}

  ;
}

unint64_t sub_1000B9364(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_1000B937C()
{
  return Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter(v0, v1);
}

uint64_t sub_1000B938C()
{
  return Apple_Parsec_Search_PegasusQueryContext.calendar.setter(v0, v1);
}

uint64_t sub_1000B939C()
{
  return Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter(v0);
}

  ;
}

uint64_t sub_1000B93B4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, void)@<X8>)
{
  return a2(a1, *(void *)(v2 - 216));
}

void sub_1000B93BC(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1000B93C4()
{
  return Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter(0LL);
}

  ;
}

uint64_t sub_1000B93D8()
{
  return swift_unknownObjectRetain(*(void *)(v0 + 64));
}

uint64_t sub_1000B93E4()
{
  return 0LL;
}

id sub_1000B93F8()
{
  return [v1 *(SEL *)(v0 + 528)];
}

void sub_1000B9404()
{
}

uint64_t sub_1000B940C()
{
  return Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
}

uint64_t sub_1000B9414()
{
  return Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
}

uint64_t sub_1000B941C()
{
  return Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
}

void sub_1000B9424()
{
}

uint64_t sub_1000B9430(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  return result;
}

uint64_t sub_1000B943C()
{
  *(void *)(v1 - 136) = v0;
  return swift_retain(v0);
}

uint64_t sub_1000B9448()
{
  return Apple_Parsec_Search_PegasusQueryContext.subscriptions.setter(v0);
}

uint64_t sub_1000B9454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v18 = sub_10000941C(&qword_1001D62D0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  swift_retain(a1);
  sub_100026250(a7, a8);
  sub_100026250(a5, a6);
  uint64_t v19 = sub_1000BA28C(a1, a2, a3, a7, a8, a5, a6);
  uint64_t v20 = sub_10000941C(&qword_1001D62D8);
  uint64_t v21 = swift_allocObject(v20, 28LL, 7LL);
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v21;
  uint64_t v22 = swift_allocObject(&unk_1001B7640, 24LL, 7LL);
  swift_weakInit(v22 + 16, v9);
  double v23 = (void *)swift_allocObject(&unk_1001B7668, 40LL, 7LL);
  v23[2] = 0LL;
  v23[3] = 0LL;
  v23[4] = v22;
  swift_retain(v19);
  uint64_t v24 = a4;
  uint64_t v25 = sub_1000C1928(a4, (uint64_t)&unk_1001D62E8, (uint64_t)v23);
  id v26 = *(os_unfair_lock_s **)(v9 + 16);
  double v27 = (uint64_t *)&v26[4];
  float v28 = v26 + 6;
  os_unfair_lock_lock(v26 + 6);
  sub_1000B9F3C(v27, v25);
  os_unfair_lock_unlock(v28);
  sub_10000A65C(a7, a8);
  sub_10000A65C(a5, a6);
  swift_release();
  swift_release();
  sub_100019C1C(v24, (uint64_t *)&unk_1001D0BD0);
  swift_release();
  return v9;
}

uint64_t sub_1000B961C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v18 = sub_10000941C(&qword_1001D6298);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  id v30 = a1;
  sub_100026250(a7, a8);
  sub_100026250(a5, a6);
  uint64_t v19 = sub_1000BA480(v30, a2, a3, a7, a8, a5, a6);
  uint64_t v20 = sub_10000941C(&qword_1001D62A0);
  uint64_t v21 = swift_allocObject(v20, 28LL, 7LL);
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v21;
  uint64_t v22 = swift_allocObject(&unk_1001B75F0, 24LL, 7LL);
  swift_weakInit(v22 + 16, v9);
  double v23 = (void *)swift_allocObject(&unk_1001B7618, 40LL, 7LL);
  v23[2] = 0LL;
  v23[3] = 0LL;
  v23[4] = v22;
  swift_retain(v19);
  uint64_t v24 = a4;
  uint64_t v25 = sub_1000C1928(a4, (uint64_t)&unk_1001D62B0, (uint64_t)v23);
  id v26 = *(os_unfair_lock_s **)(v9 + 16);
  double v27 = (uint64_t *)&v26[4];
  float v28 = v26 + 6;
  os_unfair_lock_lock(v26 + 6);
  sub_1000B9F3C(v27, v25);
  os_unfair_lock_unlock(v28);
  sub_10000A65C(a7, a8);
  sub_10000A65C(a5, a6);
  swift_release();

  sub_100019C1C(v24, (uint64_t *)&unk_1001D0BD0);
  swift_release();
  return v9;
}

uint64_t sub_1000B97E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000941C(&qword_1001D1D18);
  v4[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000B9890, 0LL, 0LL);
}

uint64_t sub_1000B9890(uint64_t a1)
{
  if ((static Task<>.isCancelled.getter(a1) & 1) == 0)
  {
    sub_1000BCABC();
    uint64_t v2 = sub_1000BCA98();
    if (v2)
    {
      sub_1000BCA30(v2);
      sub_10001683C();
      sub_1000BCA8C();
      sub_1000BCB0C();
      sub_1000BCB14();
      sub_100019F70();
      sub_1000BC9FC();
      if (!v3)
      {
        sub_1000BC9D4();
        sub_1000BC9A0();
        uint64_t v4 = swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
        sub_1000BCB58(v4);
        sub_10000BCF8( &qword_1001D62B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
        sub_1000BC9B8((uint64_t)sub_1000B996C);
        return sub_1000BC98C();
      }
    }

    else
    {
      sub_1000BC9E8();
    }

    sub_100019C1C(*(void *)(v1 + 96), &qword_1001D1D18);
  }

  sub_1000BCAA4();
  sub_1000A19F8();
  sub_1000A19D8();
  uint64_t v6 = (uint64_t (*)(void))sub_1000BCB64();
  return sub_1000BC978(v6);
}

uint64_t sub_1000B996C()
{
  if (v0) {
    uint64_t v1 = sub_1000B9A90;
  }
  else {
    uint64_t v1 = sub_1000B99B4;
  }
  return sub_1000BCAB0((uint64_t)v1, 0LL, 0LL);
}

uint64_t sub_1000B99B4()
{
  uint64_t v1 = sub_1000BCAFC();
  if ((static Task<>.isCancelled.getter(v1) & 1) == 0)
  {
    uint64_t v2 = sub_1000BCA98();
    if (v2)
    {
      sub_1000BCA30(v2);
      sub_10001683C();
      sub_1000BCA8C();
      sub_1000BCB0C();
      sub_1000BCB14();
      sub_100019F70();
      sub_1000BC9FC();
      if (!v3)
      {
        sub_1000BC9D4();
        sub_1000BC9A0();
        uint64_t v4 = swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
        sub_1000BCB58(v4);
        sub_10000BCF8( &qword_1001D62B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
        sub_1000BC9B8((uint64_t)sub_1000B996C);
        return sub_1000BC98C();
      }
    }

    else
    {
      sub_1000BC9E8();
    }

    sub_100019C1C(*(void *)(v0 + 96), &qword_1001D1D18);
  }

  sub_1000BCAA4();
  sub_1000A19F8();
  sub_1000A19D8();
  uint64_t v6 = (uint64_t (*)(void))sub_1000BCB64();
  return sub_1000BC978(v6);
}

uint64_t sub_1000B9A90()
{
  uint64_t v1 = *(void *)(v0 + 88);
  sub_1000BCB4C(*(void *)(v0 + 112));
  sub_1000A19F8();
  sub_1000A19D8();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000B9AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock(0LL);
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000941C(&qword_1001D1D18);
  v4[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ContinuousClock.Instant(0LL);
  v4[13] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[14] = v9;
  v4[15] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000B9B90, 0LL, 0LL);
}

uint64_t sub_1000B9B90(uint64_t a1)
{
  if ((static Task<>.isCancelled.getter(a1) & 1) == 0)
  {
    sub_1000BCABC();
    uint64_t v2 = sub_1000BCA98();
    if (v2)
    {
      sub_1000BCA30(v2);
      sub_10001683C();
      sub_1000BCA8C();
      sub_1000BCB0C();
      sub_1000BCB14();
      sub_100019F70();
      sub_1000BC9FC();
      if (!v3)
      {
        sub_1000BC9D4();
        sub_1000BC9A0();
        uint64_t v4 = swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
        sub_1000BCB58(v4);
        sub_10000BCF8( &qword_1001D62B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
        sub_1000BC9B8((uint64_t)sub_1000B9C6C);
        return sub_1000BC98C();
      }
    }

    else
    {
      sub_1000BC9E8();
    }

    sub_100019C1C(*(void *)(v1 + 96), &qword_1001D1D18);
  }

  sub_1000BCAA4();
  sub_1000A19F8();
  sub_1000A19D8();
  uint64_t v6 = (uint64_t (*)(void))sub_1000BCB64();
  return sub_1000BC978(v6);
}

uint64_t sub_1000B9C6C()
{
  if (v0) {
    uint64_t v1 = sub_1000BC970;
  }
  else {
    uint64_t v1 = sub_1000B9CB4;
  }
  return sub_1000BCAB0((uint64_t)v1, 0LL, 0LL);
}

uint64_t sub_1000B9CB4()
{
  uint64_t v1 = sub_1000BCAFC();
  if ((static Task<>.isCancelled.getter(v1) & 1) == 0)
  {
    uint64_t v2 = sub_1000BCA98();
    if (v2)
    {
      sub_1000BCA30(v2);
      sub_10001683C();
      sub_1000BCA8C();
      sub_1000BCB0C();
      sub_1000BCB14();
      sub_100019F70();
      sub_1000BC9FC();
      if (!v3)
      {
        sub_1000BC9D4();
        sub_1000BC9A0();
        uint64_t v4 = swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
        sub_1000BCB58(v4);
        sub_10000BCF8( &qword_1001D62B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
        sub_1000BC9B8((uint64_t)sub_1000B9C6C);
        return sub_1000BC98C();
      }
    }

    else
    {
      sub_1000BC9E8();
    }

    sub_100019C1C(*(void *)(v0 + 96), &qword_1001D1D18);
  }

  sub_1000BCAA4();
  sub_1000A19F8();
  sub_1000A19D8();
  uint64_t v6 = (uint64_t (*)(void))sub_1000BCB64();
  return sub_1000BC978(v6);
}

void sub_1000B9D90()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_10000941C(&qword_1001D1D18);
  sub_100009B94();
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = v3 + qword_1001D1C68;
  swift_beginAccess(v3 + qword_1001D1C68, &v25, 0LL, 0LL);
  sub_1000BC7E0(v17, v9);
  if (sub_100010708(v9, 1LL, v10) == 1)
  {
    sub_100019C1C(v9, &qword_1001D1D18);
LABEL_6:
    v2(v18);
    uint64_t v23 = 1LL;
    goto LABEL_7;
  }

  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v20 = v19(v16, v9, v10);
  static ContinuousClock.Instant.now.getter(v20);
  sub_10000BCF8( &qword_1001D62C0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  char v21 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v16);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  if ((v21 & 1) == 0)
  {
    uint64_t v18 = ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
    goto LABEL_6;
  }

  v19((char *)v5, (uint64_t)v16, v10);
  uint64_t v23 = 0LL;
LABEL_7:
  sub_100009654(v5, v23, 1LL, v10);
  sub_100009AA0();
}

uint64_t sub_1000B9F3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + qword_1001D1C88);
  *(void *)(v3 + qword_1001D1C88) = a2;
  swift_release(v4);
  return swift_retain(a2);
}

uint64_t sub_1000B9F80(void (*a1)(uint64_t *__return_ptr, os_unfair_lock_s *))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  uint64_t v4 = v3 + 4;
  uint64_t v5 = v3 + 6;
  os_unfair_lock_lock(v3 + 6);
  a1(&v7, v4);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_1000B9FE0()
{
  return sub_1000BA030();
}

void *sub_1000BA008()
{
  return sub_1000BA160();
}

uint64_t sub_1000BA030()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_10000941C(&qword_1001D1D18);
  __chkstk_darwin(v6);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = *(void *)(v1 + 16);
  if (v9)
  {
    uint64_t v10 = swift_retain(*(void *)(v1 + 16));
    static ContinuousClock.Instant.now.getter(v10);
    ContinuousClock.Instant.advanced(by:)(*(void *)(v1 + qword_1001D1C70), *(void *)(v1 + qword_1001D1C70 + 8));
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_100009654((uint64_t)v8, 0LL, 1LL, v2);
    uint64_t v11 = v1 + qword_1001D1C68;
    swift_beginAccess(v11, v14, 33LL, 0LL);
    sub_1000BC828((uint64_t)v8, v11);
    swift_endAccess(v14);
  }

  return v9;
}

void *sub_1000BA160()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_10000941C(&qword_1001D1D18);
  __chkstk_darwin(v6);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = *(void **)(v1 + 16);
  if (v9)
  {
    static ContinuousClock.Instant.now.getter(v9);
    ContinuousClock.Instant.advanced(by:)(*(void *)(v1 + qword_1001D1C70), *(void *)(v1 + qword_1001D1C70 + 8));
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_100009654((uint64_t)v8, 0LL, 1LL, v2);
    uint64_t v10 = v1 + qword_1001D1C68;
    swift_beginAccess(v10, v13, 33LL, 0LL);
    sub_1000BC828((uint64_t)v8, v10);
    swift_endAccess(v13);
  }

  return v9;
}

uint64_t sub_1000BA28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000941C(&qword_1001D1D18);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
  sub_100009654(v8 + qword_1001D1C68, 1LL, 1LL, v12);
  uint64_t v19 = (void *)(v8 + qword_1001D1C78);
  *uint64_t v19 = 0LL;
  v19[1] = 0LL;
  uint64_t v20 = (void *)(v8 + qword_1001D1C80);
  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  *(void *)(v8 + qword_1001D1C88) = 0LL;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  swift_retain(a1);
  uint64_t v21 = swift_release();
  uint64_t v22 = (void *)(v8 + qword_1001D1C70);
  void *v22 = a2;
  v22[1] = a3;
  static ContinuousClock.Instant.now.getter(v21);
  ContinuousClock.Instant.advanced(by:)(a2, a3);
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_100009654((uint64_t)v18, 0LL, 1LL, v12);
  uint64_t v23 = v8 + qword_1001D1C68;
  swift_beginAccess(v8 + qword_1001D1C68, v38, 33LL, 0LL);
  sub_1000BC828((uint64_t)v18, v23);
  swift_endAccess(v38);
  uint64_t v24 = (void *)(v8 + qword_1001D1C78);
  uint64_t v25 = *(void *)(v8 + qword_1001D1C78);
  uint64_t v26 = *(void *)(v8 + qword_1001D1C78 + 8);
  uint64_t v27 = v35;
  *uint64_t v24 = v34;
  v24[1] = v27;
  sub_10000A65C(v25, v26);
  float v28 = (void *)(v8 + qword_1001D1C80);
  uint64_t v29 = *(void *)(v8 + qword_1001D1C80);
  uint64_t v30 = *(void *)(v8 + qword_1001D1C80 + 8);
  uint64_t v31 = v37;
  *float v28 = v36;
  v28[1] = v31;
  sub_10000A65C(v29, v30);
  return v8;
}

uint64_t sub_1000BA480(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000941C(&qword_1001D1D18);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = 0LL;
  sub_100009654(v8 + qword_1001D1C68, 1LL, 1LL, v12);
  uint64_t v19 = (void *)(v8 + qword_1001D1C78);
  *uint64_t v19 = 0LL;
  v19[1] = 0LL;
  uint64_t v20 = (void *)(v8 + qword_1001D1C80);
  *uint64_t v20 = 0LL;
  v20[1] = 0LL;
  *(void *)(v8 + qword_1001D1C88) = 0LL;
  uint64_t v21 = *(void **)(v8 + 16);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = a1;
  id v22 = a1;

  uint64_t v23 = (void *)(v8 + qword_1001D1C70);
  void *v23 = a2;
  v23[1] = a3;
  static ContinuousClock.Instant.now.getter(v24);
  ContinuousClock.Instant.advanced(by:)(a2, a3);

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_100009654((uint64_t)v18, 0LL, 1LL, v12);
  uint64_t v25 = v8 + qword_1001D1C68;
  swift_beginAccess(v8 + qword_1001D1C68, v40, 33LL, 0LL);
  sub_1000BC828((uint64_t)v18, v25);
  swift_endAccess(v40);
  uint64_t v26 = (void *)(v8 + qword_1001D1C78);
  uint64_t v27 = *(void *)(v8 + qword_1001D1C78);
  uint64_t v28 = *(void *)(v8 + qword_1001D1C78 + 8);
  uint64_t v29 = v37;
  *uint64_t v26 = v36;
  v26[1] = v29;
  sub_10000A65C(v27, v28);
  uint64_t v30 = (void *)(v8 + qword_1001D1C80);
  uint64_t v31 = *(void *)(v8 + qword_1001D1C80);
  uint64_t v32 = *(void *)(v8 + qword_1001D1C80 + 8);
  uint64_t v33 = v39;
  *uint64_t v30 = v38;
  v30[1] = v33;
  sub_10000A65C(v31, v32);
  return v8;
}

uint64_t sub_1000BA670()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000941C(&qword_1001D1D18);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void *)(v0 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v0 + qword_1001D1C78);
    uint64_t v8 = *(void (**)(uint64_t))(v0 + qword_1001D1C78);
    if (v8)
    {
      uint64_t v9 = v7[1];
      swift_retain(v6);
      sub_100026250((uint64_t)v8, v9);
      v8(v6);
      sub_10000A65C((uint64_t)v8, v9);
      uint64_t v10 = *v7;
    }

    else
    {
      swift_retain(*(void *)(v0 + 16));
      uint64_t v10 = 0LL;
    }

    uint64_t v11 = v7[1];
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    sub_10000A65C(v10, v11);
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_release();
    uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
    sub_100009654((uint64_t)v5, 1LL, 1LL, v12);
    uint64_t v13 = v1 + qword_1001D1C68;
    swift_beginAccess(v1 + qword_1001D1C68, v21, 33LL, 0LL);
    sub_1000BC828((uint64_t)v5, v13);
    swift_endAccess(v21);
    uint64_t v14 = (uint64_t *)(v1 + qword_1001D1C80);
    uint64_t v15 = *(void (**)(uint64_t))(v1 + qword_1001D1C80);
    if (v15)
    {
      uint64_t v16 = v14[1];
      uint64_t v17 = swift_retain(v16);
      v15(v17);
      swift_release();
      sub_10000A65C((uint64_t)v15, v16);
    }

    else
    {
      swift_release();
    }

    uint64_t v18 = *v14;
    uint64_t v19 = v14[1];
    *uint64_t v14 = 0LL;
    v14[1] = 0LL;
    sub_10000A65C(v18, v19);
    *(void *)(v1 + qword_1001D1C88) = 0LL;
    return swift_release();
  }

  return result;
}

uint64_t sub_1000BA804()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000941C(&qword_1001D1D18);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = *(void **)(v0 + 16);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(v0 + qword_1001D1C78);
    uint64_t v8 = *(void (**)(void *))(v0 + qword_1001D1C78);
    if (v8)
    {
      uint64_t v9 = v7[1];
      id v10 = v6;
      sub_100026250((uint64_t)v8, v9);
      v8(v6);
      sub_10000A65C((uint64_t)v8, v9);
      uint64_t v11 = *v7;
    }

    else
    {
      id v12 = v6;
      uint64_t v11 = 0LL;
    }

    uint64_t v13 = v7[1];
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    sub_10000A65C(v11, v13);
    uint64_t v14 = *(void **)(v1 + 16);
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = 0LL;

    uint64_t v15 = type metadata accessor for ContinuousClock.Instant(0LL);
    sub_100009654((uint64_t)v5, 1LL, 1LL, v15);
    uint64_t v16 = v1 + qword_1001D1C68;
    swift_beginAccess(v1 + qword_1001D1C68, v24, 33LL, 0LL);
    sub_1000BC828((uint64_t)v5, v16);
    swift_endAccess(v24);
    uint64_t v17 = (uint64_t *)(v1 + qword_1001D1C80);
    uint64_t v18 = *(void (**)(uint64_t))(v1 + qword_1001D1C80);
    if (v18)
    {
      uint64_t v19 = v17[1];
      uint64_t v20 = swift_retain(v19);
      v18(v20);

      sub_10000A65C((uint64_t)v18, v19);
    }

    else
    {
    }

    uint64_t v21 = *v17;
    uint64_t v22 = v17[1];
    *uint64_t v17 = 0LL;
    v17[1] = 0LL;
    sub_10000A65C(v21, v22);
    *(void *)(v1 + qword_1001D1C88) = 0LL;
    return swift_release();
  }

  return result;
}

uint64_t sub_1000BA988()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Client(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_100010FCC();
  uint64_t v6 = UserAgent.client.getter(v5);
  unint64_t v7 = Client.type.getter(v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  if (v7 > 0x1A)
  {
    unint64_t v12 = v7;
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for ClientType,  &v12,  &type metadata for ClientType,  &type metadata for UInt);
    __break(1u);
    return result;
  }

  if (((1LL << v7) & 0x7DE2559) != 0) {
    return 0LL;
  }
  uint64_t v9 = objc_opt_self(&OBJC_CLASS____CPSearchViewAppearFeedback);
  uint64_t result = swift_dynamicCastObjCClass(v2, v9);
  if (result)
  {
    id v10 = (void *)result;
    swift_unknownObjectRetain(v2);
    if ([v10 isOnLockScreen])
    {
      sub_10001449C();
    }

    else
    {
      unsigned int v11 = [v10 viewAppearEvent];
      sub_10001449C();
      if (v11 < 0x19) {
        return (0x1C00E64u >> v11) & 1;
      }
    }

    return 0LL;
  }

  return result;
}

const char *sub_1000BAACC(char a1)
{
  if (!a1) {
    return "lifetime";
  }
  if (a1 == 1) {
    return "contextUpdate";
  }
  return "notBagFetchable";
}

uint64_t sub_1000BAB10()
{
  return v0;
}

uint64_t sub_1000BAB3C()
{
  return v0;
}

const char *sub_1000BAB68()
{
  return sub_1000BAACC(*v0);
}

void sub_1000BAB84()
{
  uint64_t v1 = type metadata accessor for OSSignpostID(0LL);
  __chkstk_darwin(v1);
  sub_100009AEC();
  static os_signpost_type_t.begin.getter(v2);
  if (qword_1001D0558 != -1) {
    swift_once(&qword_1001D0558, sub_100034684);
  }
  sub_1000BCAD4();
  sub_1000BCA40();
  sub_1000BCA80();
  sub_1000BBB54((void (*)(uint64_t))sub_1000BB8F4);
  static os_signpost_type_t.end.getter(v3);
  sub_1000BCAD4();
  sub_1000BCA40();
  uint64_t v4 = sub_1000BCA80();
  uint64_t v5 = static os_signpost_type_t.begin.getter(v4);
  sub_1000BCAD4();
  sub_100009A6C(v5, (uint64_t)&_mh_execute_header, v0, (uint64_t)"ensureParsecSubscriptionManager", 31LL);
  sub_1000BCA80();
  sub_1000BBB54((void (*)(uint64_t))sub_1000BBBA0);
  uint64_t v7 = static os_signpost_type_t.end.getter(v6);
  uint64_t v8 = qword_1001EDCB8;
  static OSSignpostID.exclusive.getter();
  sub_100009A6C(v7, (uint64_t)&_mh_execute_header, v8, (uint64_t)"ensureParsecSubscriptionManager", 31LL);
  sub_1000BCA80();
  sub_100009AA0();
}

void sub_1000BACB4()
{
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  sub_10000941C((uint64_t *)&unk_1001D4490);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v63 = (uint8_t *)(v6 - v5);
  uint64_t v7 = sub_100047198();
  sub_100009B94();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v60 = (uint64_t)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)v56 - v12;
  __chkstk_darwin(v11);
  uint64_t v61 = (uint64_t)v56 - v14;
  uint64_t v15 = type metadata accessor for Notification(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  sub_100009AEC();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = v1 + OBJC_IVAR____TtC7parsecd14ContextManager_logger;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v62 = v3;
  uint64_t v22 = v21(v19, v3, v15);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v56[1] = v20;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    uint64_t v57 = v7;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = sub_100009B20(32LL);
    uint64_t v59 = v1;
    uint64_t v28 = v27;
    v65[0] = v27;
    uint64_t v58 = v13;
    *(_DWORD *)uint64_t v26 = 136642819;
    sub_10000BCF8( &qword_1001D6288,  (uint64_t (*)(uint64_t))&type metadata accessor for Notification,  (uint64_t)&protocol conformance descriptor for Notification);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v15, v29);
    uint64_t v32 = sub_1000307E0(v30, v31, v65);
    uint64_t v33 = sub_1000BCB2C(v32);
    uint64_t v13 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v34, v26 + 4);
    swift_bridgeObjectRelease();
    sub_1000BCB1C();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Processing context update: %{sensitive}s", v26, 0xCu);
    swift_arrayDestroy(v28, 1LL);
    sub_100010C34(v28);
    uint64_t v35 = (uint64_t)v26;
    uint64_t v7 = v57;
    sub_100010C34(v35);
  }

  else
  {

    uint64_t v36 = sub_1000BCB1C();
  }

  uint64_t v37 = (uint64_t)v63;
  uint64_t v38 = Notification.userInfo.getter(v36);
  if (!v38)
  {
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    goto LABEL_10;
  }

  uint64_t v39 = v38;
  v64[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  v64[1] = v40;
  AnyHashable.init<A>(_:)(v64);
  sub_10000BEF0((uint64_t)v65, v39, &v66);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v65);
  if (!*((void *)&v67 + 1))
  {
LABEL_10:
    sub_100019C1C((uint64_t)&v66, (uint64_t *)&unk_1001D32C0);
    sub_10003B948(v37, 1LL);
    goto LABEL_11;
  }

  int v41 = swift_dynamicCast(v37, &v66, (char *)&type metadata for Any + 8, v7, 6LL);
  sub_10003B948(v37, v41 ^ 1u);
  if (sub_1000BCB40(v37) == 1)
  {
LABEL_11:
    sub_100019C1C(v37, (uint64_t *)&unk_1001D4490);
    goto LABEL_12;
  }

  uint64_t v42 = v61;
  sub_1000BC660(v37, v61);
  uint64_t v43 = sub_1000BC48C(v42, (uint64_t)v13);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.debug.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v47 = (uint64_t)v13;
    uint64_t v48 = sub_100009B20(32LL);
    v65[0] = v48;
    *(_DWORD *)uint64_t v46 = 136642819;
    uint64_t v63 = v46 + 4;
    uint64_t v49 = v60;
    sub_1000BC48C(v47, v60);
    uint64_t v50 = String.init<A>(describing:)(v49);
    uint64_t v52 = sub_1000307E0(v50, v51, v65);
    uint64_t v53 = sub_1000BCB2C(v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54, v63);
    swift_bridgeObjectRelease();
    sub_10004D784(v47, type metadata accessor for ContextUpdate);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Cache context update: %{sensitive}s", v46, 0xCu);
    swift_arrayDestroy(v48, 1LL);
    sub_100010C34(v48);
    sub_100010C34((uint64_t)v46);
  }

  else
  {

    sub_10004D784((uint64_t)v13, type metadata accessor for ContextUpdate);
  }

  uint64_t v55 = v61;
  sub_1000BB130();
  sub_10004D784(v55, type metadata accessor for ContextUpdate);
LABEL_12:
  sub_100009AA0();
}

void sub_1000BB130()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100047198();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd14ContextManager_contextAccessQueue);
    sub_1000BC48C(v2, (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v11 = (v10 + 40) & ~v10;
    uint64_t v12 = (void *)swift_allocObject(&unk_1001B75A0, v11 + v5, v10 | 7);
    v12[2] = v7;
    v12[3] = v8;
    v12[4] = v0;
    sub_1000BC660((uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL), (uint64_t)v12 + v11);
    v29[4] = sub_1000BC6A4;
    v29[5] = v12;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 1107296256LL;
    void v29[2] = sub_1000D2F18;
    v29[3] = &unk_1001B75B8;
    uint64_t v13 = _Block_copy(v29);
    uint64_t v26 = type metadata accessor for DispatchQoS(0LL);
    uint64_t v27 = &v25;
    uint64_t v14 = *(void *)(v26 - 8);
    __chkstk_darwin(v26);
    sub_100010FCC();
    id v15 = v9;
    swift_unknownObjectRetain(v7);
    uint64_t v16 = swift_retain(v0);
    static DispatchQoS.unspecified.getter(v16);
    uint64_t v17 = type metadata accessor for DispatchWorkItemFlags(0LL);
    uint64_t v25 = (uint64_t)&v25;
    uint64_t v18 = *(void *)(v17 - 8);
    __chkstk_darwin(v17);
    sub_100009AEC();
    uint64_t v21 = v20 - v19;
    uint64_t v28 = &_swiftEmptyArrayStorage;
    unint64_t v22 = sub_100019CD0();
    uint64_t v23 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
    unint64_t v24 = sub_10000945C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v23, v24, v17, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v21, v13);
    _Block_release(v13);
    sub_10001449C();

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(void *, uint64_t))(v14 + 8))(v12, v26);
    swift_release();
  }

  sub_100009AA0();
}

uint64_t sub_1000BB3FC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v7 = static os_log_type_t.info.getter(v2, v3, v4, v5, v6);
  if (os_log_type_enabled(v2, v7))
  {
    uint64_t v8 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v7, "ContextManager is destroyed", v8, 2u);
    sub_100010C34((uint64_t)v8);
  }

  uint64_t v9 = objc_autoreleasePoolPush();
  *(void *)(v1 + 24) = 0LL;
  swift_release();
  objc_autoreleasePoolPop(v9);
  swift_release();
  swift_release();
  sub_10000BDD4(v1 + 32);
  swift_release();
  sub_10004D784(v1 + OBJC_IVAR____TtC7parsecd14ContextManager_context, type metadata accessor for PegasusContext);
  sub_10006B710(OBJC_IVAR____TtC7parsecd14ContextManager_locker);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_1000BCB4C(*(void *)(v10 - 8));

  sub_10006B710(OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager);
  sub_10006B710(OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface);
  sub_10006B710(OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan);
  return v1;
}

uint64_t sub_1000BB540(uint64_t a1)
{
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t sub_1000BB564()
{
  return type metadata accessor for ContextManager(0LL);
}

uint64_t type metadata accessor for ContextManager(uint64_t a1)
{
  uint64_t result = qword_1001D6168;
  if (!qword_1001D6168) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContextManager);
  }
  return result;
}

uint64_t sub_1000BB5A4(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = "\b";
  v5[2] = &unk_100162978;
  void v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for PegasusContext(319LL);
  if (v3 <= 0x3F)
  {
    v5[4] = *(void *)(result - 8) + 64LL;
    v5[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = type metadata accessor for Logger(319LL);
    if (v4 <= 0x3F)
    {
      v5[6] = *(void *)(result - 8) + 64LL;
      v5[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[8] = &unk_100162990;
      v5[9] = "\b";
      v5[10] = "\b";
      v5[11] = "\b";
      return swift_updateClassMetadata2(a1, 256LL, 12LL, v5, a1 + 80);
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ContextManager.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for ContextManager.Configuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ContextManager.Configuration()
{
  return &type metadata for ContextManager.Configuration;
}

uint64_t storeEnumTagSinglePayload for ContextManager.Activity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000BB714 + 4 * byte_100162915[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000BB748 + 4 * byte_100162910[v4]))();
}

uint64_t sub_1000BB748(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000BB750(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000BB758LL);
  }
  return result;
}

uint64_t sub_1000BB764(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000BB76CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000BB770(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000BB778(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContextManager.Activity()
{
  return &type metadata for ContextManager.Activity;
}

unint64_t sub_1000BB794(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000BB7C0();
  unint64_t result = sub_1000BB7FC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000BB7C0()
{
  unint64_t result = qword_1001D6248;
  if (!qword_1001D6248)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162A34, &type metadata for ContextManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D6248);
  }

  return result;
}

unint64_t sub_1000BB7FC()
{
  unint64_t result = qword_1001D6250;
  if (!qword_1001D6250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001629FC, &type metadata for ContextManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D6250);
  }

  return result;
}

unint64_t sub_1000BB83C()
{
  unint64_t result = qword_1001D6258;
  if (!qword_1001D6258)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162A74, &type metadata for ContextManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D6258);
  }

  return result;
}

unint64_t sub_1000BB87C()
{
  unint64_t result = qword_1001D6260;
  if (!qword_1001D6260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001629E0, &type metadata for ContextManager.Activity);
    atomic_store(result, (unint64_t *)&qword_1001D6260);
  }

  return result;
}

void sub_1000BB8B8(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
}

uint64_t sub_1000BB8F4(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 32);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface;
    if (*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface)
      && (swift_retain(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface)),
          uint64_t v9 = sub_1000B9F80((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1000BC870),
          swift_release(),
          uint64_t result = swift_release(),
          v9))
    {
      return swift_unknownObjectRelease(v6);
    }

    else
    {
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(result);
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "creating ContextProviderInterface", v12, 2u);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = type metadata accessor for ContextProviderInterface();
      swift_allocObject(v14, 152LL, 7LL);
      swift_unknownObjectRetain(v6);
      swift_retain(v13);
      uint64_t v15 = sub_10005CC94(v6, v7, v13);
      sub_10005CEF0();
      uint64_t v16 = sub_1000BBB24(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration));
      uint64_t v18 = v17;
      uint64_t v19 = type metadata accessor for TaskPriority(0LL);
      sub_100009654((uint64_t)v4, 1LL, 1LL, v19);
      uint64_t v20 = sub_10000941C(&qword_1001D62C8);
      swift_allocObject(v20, 24LL, 7LL);
      uint64_t v21 = sub_1000B9454(v15, v16, v18, (uint64_t)v4, 0LL, 0LL, 0LL, 0LL);
      swift_unknownObjectRelease(v6);
      *(void *)(a1 + v8) = v21;
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_1000BBB24(uint64_t a1)
{
  return 1000000000000000000LL * a1;
}

void sub_1000BBB54(void (*a1)(uint64_t))
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + OBJC_IVAR____TtC7parsecd14ContextManager_locker) + 16LL);
  os_unfair_lock_lock(v3);
  a1(v1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1000BBBA0(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 32);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager;
    if (*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager)
      && (swift_retain(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager)),
          uint64_t v9 = (void *)sub_1000B9F80((void (*)(uint64_t *__return_ptr, os_unfair_lock_s *))sub_1000BC898),
          swift_release(),
          v9,
          v9))
    {
      return swift_unknownObjectRelease(v6);
    }

    else
    {
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(result);
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "creating ParsecSubscriptionManager", v12, 2u);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      uint64_t v13 = *(void *)(a1 + 16);
      id v14 = objc_allocWithZone((Class)type metadata accessor for ParsecSubscriptionManager());
      swift_unknownObjectRetain(v6);
      swift_retain(v13);
      swift_retain(a1);
      id v15 = sub_10000A8EC(v6, v7, a1, (uint64_t)&off_1001B7558, v13);
      uint64_t v16 = sub_1000BBB24(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration + 8));
      uint64_t v18 = v17;
      uint64_t v19 = type metadata accessor for TaskPriority(0LL);
      sub_100009654((uint64_t)v4, 1LL, 1LL, v19);
      uint64_t v20 = sub_10000941C(&qword_1001D6290);
      swift_allocObject(v20, 24LL, 7LL);
      uint64_t v21 = sub_1000B961C(v15, v16, v18, (uint64_t)v4, 0LL, 0LL, 0LL, 0LL);
      swift_unknownObjectRelease(v6);
      *(void *)(a1 + v8) = v21;
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_1000BBDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v89 = a4;
  uint64_t v6 = type metadata accessor for OSSignpostID(0LL);
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  __chkstk_darwin(v6);
  uint64_t v85 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ContextUpdate(0LL);
  __chkstk_darwin(v8);
  uint64_t v80 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for PegasusContext(0LL);
  uint64_t v10 = __chkstk_darwin(v81);
  uint64_t v84 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)&v75 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v79 = (uint64_t)&v75 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v75 - v16;
  sub_1000478B0();
  uint64_t v19 = v18;
  uint64_t v88 = sub_1000C1F8C();
  swift_unknownObjectRelease(v19);
  uint64_t v20 = *(os_unfair_lock_s **)(*(void *)(a3 + 48) + 16LL);
  os_unfair_lock_lock(v20);
  uint64_t v78 = a3;
  sub_10002AD98(a4);
  os_unfair_lock_unlock(v20);
  sub_10004A2AC((uint64_t)v17);
  id v76 = (id)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v21 = [v76 defaultCenter];
  uint64_t v22 = sub_10000941C((uint64_t *)&unk_1001D32A0);
  uint64_t inited = swift_initStackObject(v22, v96);
  __int128 v75 = xmmword_10015C7F0;
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  uint64_t v95 = v24;
  AnyHashable.init<A>(_:)(&v94);
  uint64_t v82 = v8;
  *(void *)(inited + 96) = v8;
  uint64_t v25 = sub_10001B468((void *)(inited + 72));
  sub_1000BC48C(v89, (uint64_t)v25);
  uint64_t v26 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  sub_1000C5160((uint64_t)@"com.apple.parsecd.contextCacheUpdate", 0LL, v26, v21);

  sub_1000478B0();
  uint64_t v28 = v27;
  uint64_t v29 = sub_1000C1F8C();
  swift_unknownObjectRelease(v28);
  uint64_t v77 = v29;
  if (v29)
  {
    *(void *)(v78 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = 0LL;
    swift_retain(v29);
    swift_release();
    uint64_t v30 = v88;
    if (!v88 || (type metadata accessor for BagContext(), (sub_100014C38(v30, v29) & 1) == 0))
    {
      id v31 = [v76 defaultCenter];
      uint64_t v32 = swift_initStackObject(v22, &v90);
      *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = v75;
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
      uint64_t v95 = v33;
      AnyHashable.init<A>(_:)(&v94);
      *(void *)(v32 + 96) = type metadata accessor for BagContext();
      *(void *)(v32 + 72) = v29;
      swift_retain(v29);
      uint64_t v34 = Dictionary.init(dictionaryLiteral:)( v32,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
      sub_1000C5160((uint64_t)@"PARBagRefreshRequired", 0LL, v34, v31);
    }

    goto LABEL_5;
  }

  uint64_t v35 = OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan;
  uint64_t v36 = v78;
  if (!*(void *)(v78 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan))
  {
    uint64_t v71 = *(void *)(v78 + 16);
    uint64_t v72 = sub_10000941C((uint64_t *)&unk_1001D3790);
    swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
    swift_retain(v71);
    sub_10000E834();
    *(void *)(v36 + v35) = v73;
LABEL_5:
    swift_release();
  }

  uint64_t v37 = sub_10000941C(&qword_1001D0C10);
  uint64_t v38 = swift_initStackObject(v37, &v93);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_10015D4A0;
  uint64_t v39 = v80;
  sub_1000BC48C(v89, v80);
  uint64_t v40 = String.init<A>(describing:)(v39);
  uint64_t v42 = v41;
  *(void *)(v38 + 56) = &type metadata for String;
  unint64_t v43 = sub_100042FE8();
  *(void *)(v38 + 64) = v43;
  *(void *)(v38 + 32) = v40;
  *(void *)(v38 + 4sub_1000AC280(v0, v1, 0) = v42;
  uint64_t v44 = v79;
  sub_10004A274(v79);
  os_log_type_t v45 = (uint64_t *)(v44 + *(int *)(v81 + 80));
  uint64_t v46 = *v45;
  unint64_t v47 = v45[1];
  swift_bridgeObjectRetain(v47);
  sub_10004D784(v44, type metadata accessor for PegasusContext);
  *(void *)(v38 + 96) = &type metadata for String;
  *(void *)(v38 + 104) = v43;
  if (v47) {
    uint64_t v48 = v46;
  }
  else {
    uint64_t v48 = 0x296C696E28LL;
  }
  if (v47) {
    unint64_t v49 = v47;
  }
  else {
    unint64_t v49 = 0xE500000000000000LL;
  }
  *(void *)(v38 + 72) = v48;
  *(void *)(v38 + 8sub_1000AC280(v0, v1, 0) = v49;
  uint64_t v50 = v83;
  sub_10004A274(v83);
  uint64_t v51 = *(void *)(v50 + 88);
  unint64_t v52 = *(void *)(v50 + 96);
  swift_bridgeObjectRetain(v52);
  sub_10004D784(v50, type metadata accessor for PegasusContext);
  *(void *)(v38 + 136) = &type metadata for String;
  *(void *)(v38 + 144) = v43;
  if (v52) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = 0x296C696E28LL;
  }
  if (v52) {
    unint64_t v54 = v52;
  }
  else {
    unint64_t v54 = 0xE500000000000000LL;
  }
  *(void *)(v38 + 112) = v53;
  *(void *)(v38 + 12sub_1000AC280(v0, v1, 0) = v54;
  uint64_t v55 = v84;
  sub_10004A274((uint64_t)v84);
  uint64_t v57 = *v55;
  unint64_t v56 = v55[1];
  swift_bridgeObjectRetain(v56);
  sub_10004D784((uint64_t)v55, type metadata accessor for PegasusContext);
  *(void *)(v38 + 176) = &type metadata for String;
  *(void *)(v38 + 184) = v43;
  if (v56) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = 0x296C696E28LL;
  }
  if (v56) {
    unint64_t v59 = v56;
  }
  else {
    unint64_t v59 = 0xE500000000000000LL;
  }
  *(void *)(v38 + 152) = v58;
  *(void *)(v38 + 16sub_1000AC280(v0, v1, 0) = v59;
  sub_1000347F0();
  uint64_t v94 = qword_1001D60E8;
  uint64_t v95 = off_1001D60F0;
  v92[0] = 45LL;
  v92[1] = 0xE100000000000000LL;
  v91[0] = 95LL;
  v91[1] = 0xE100000000000000LL;
  unint64_t v60 = sub_1000106CC();
  uint64_t v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v92,  v91,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v60,  v60,  v60);
  uint64_t v63 = v62;
  uint64_t v64 = aContextmanager_5[0];
  uint64_t v65 = aContextmanager_5[1];
  swift_bridgeObjectRetain(aContextmanager_5[1]);
  id v66 = (id)OS_os_log.init(subsystem:category:)(v61, v63, v64, v65);
  uint64_t v67 = (uint64_t)v85;
  uint64_t v68 = OSSignpostID.init(log:)(v66);
  uint64_t v69 = static os_signpost_type_t.event.getter(v68);
  LOBYTE(v74) = 2;
  sub_1000A56E4( v69,  (uint64_t)v66,  (uint64_t)"contextUpdate",  13LL,  2LL,  v67,  (uint64_t)"What=%{signpost.description:attribute,public}s, Country=%{signpost.description:attribute}s, Language=%{sign post.description:attribute}s, Locale=%{signpost.description:attribute}s",  178LL,  v74,  v38);

  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v67, v87);
  swift_release();
  swift_release();
  swift_setDeallocating(v38);
  return sub_1000BC73C(&qword_1001D1B20);
}

uint64_t sub_1000BC48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC4D0()
{
  uint64_t v1 = sub_100047198();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v4;
  switch(swift_getEnumCaseMultiPayload(v0 + v4, v1))
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 1u:
    case 4u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      goto LABEL_2;
    case 2u:

      uint64_t v8 = (int *)type metadata accessor for LocationContext(0LL);
      uint64_t v9 = v6 + v8[5];
      uint64_t v10 = type metadata accessor for Date(0LL);

      sub_100047164(v8[7]);
      sub_100047164(v8[8]);
      sub_100047164(v8[9]);
      sub_100047164(v8[10]);
      goto LABEL_2;
    case 3u:
      unint64_t v11 = *(void *)(v6 + 8);
      if (v11 >> 60 != 15) {
        sub_100010A30(*(void *)v6, v11);
      }
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
    case 5u:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, v4 + v5, v3 | 7);
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000BC660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContextUpdate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC6A4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100047198() - 8) + 80LL);
  return sub_1000BBDD8(v0[2], v0[3], v0[4], (uint64_t)v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_1000BC6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BC6E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BC6EC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for PegasusClientName(0LL) - 8) + 80LL);
  swift_arrayDestroy(v0 + ((v1 + 32) & ~v1), *(void *)(v0 + 16));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t sub_1000BC730()
{
  return sub_1000BC73C(qword_1001D62F0);
}

uint64_t sub_1000BC73C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  sub_10000941C(a1);
  swift_arrayDestroy(v1 + 32, v2);
  return swift_deallocClassInstance(v1, 32LL, 7LL);
}

uint64_t sub_1000BC788()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D62AC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_1000BCAE0(v1);
  return sub_1000B9AE4(v2, v3, v4, v5);
}

uint64_t sub_1000BC7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D1D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D1D18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BC870@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B9FE0();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

void *sub_1000BC898@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1000BA008();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000BC8C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000BC8E8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000BC914()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1001D62E4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = sub_1000BCAE0(v1);
  return sub_1000B97E4(v2, v3, v4, v5);
}

uint64_t sub_1000BC978(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000BC98C()
{
  return ((uint64_t (*)(void))static Task<>.sleep<A>(until:tolerance:clock:))();
}

uint64_t sub_1000BC9A0()
{
  *(void *)(v0 + 48) = 0LL;
  *(void *)(v0 + 4sub_1000AC280(v0, v1, 0) = 0LL;
  *(_BYTE *)(v0 + 56) = v1;
  return ContinuousClock.init()();
}

uint64_t sub_1000BC9B8@<X0>(uint64_t a1@<X8>)
{
  *char v1 = v2;
  v1[1] = a1;
  return *(void *)(v2 + 120);
}

uint64_t sub_1000BC9D4()
{
  return (*(uint64_t (**)(void, void, void))(v0[14] + 32LL))(v0[15], v0[12], v0[13]);
}

uint64_t sub_1000BC9E8()
{
  return sub_100009654(v1, 1LL, 1LL, v0);
}

uint64_t sub_1000BC9FC()
{
  return sub_100010708(v1, 1LL, v0);
}

uint64_t sub_1000BCA20()
{
  return (*(uint64_t (**)(void, void))(v0[10] + 8LL))(v0[11], v0[9]);
}

uint64_t sub_1000BCA30(uint64_t a1)
{
  return swift_retain(*(void *)(a1 + 16));
}

uint64_t sub_1000BCA40()
{
  return os_signpost(_:dso:log:name:signpostID:)(v2, v1, v3, v4, 30LL, 2LL, v0);
}

uint64_t sub_1000BCA60()
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t *)(v2 - 8);
  *uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(v3 + 128);
  *uint64_t v4 = *v1;
  *(void *)(v3 + 136) = v0;
  return swift_task_dealloc(v5);
}

uint64_t sub_1000BCA80()
{
  return v2(v1, v0);
}

void sub_1000BCA8C()
{
}

uint64_t sub_1000BCA98()
{
  return swift_weakLoadStrong(*(void *)(v0 + 64) + 16LL);
}

uint64_t sub_1000BCAA4()
{
  return swift_task_dealloc(*(void *)(v0 + 120));
}

uint64_t sub_1000BCAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_task_switch(a1, a2, a3);
}

uint64_t sub_1000BCABC()
{
  return swift_beginAccess(*(void *)(v0 + 64) + 16LL, v0 + 16, 0LL, 0LL);
}

uint64_t sub_1000BCAD4()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_1000BCAE0(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_1000BCAFC()
{
  return (*(uint64_t (**)(void, void))(v0[14] + 8LL))(v0[15], v0[13]);
}

void sub_1000BCB0C()
{
}

void sub_1000BCB14()
{
}

uint64_t sub_1000BCB1C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000BCB2C(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t sub_1000BCB40(uint64_t a1)
{
  return sub_100010708(a1, 1LL, v1);
}

uint64_t sub_1000BCB4C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_1000BCB58(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_1000BCB64()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000BCB70@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = [v1 type];
  if (v3 > 0xD) {
    goto LABEL_8;
  }
  if (((1 << v3) & 0x20E) != 0)
  {
    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.gps(_:);
    goto LABEL_9;
  }

  if (((1 << v3) & 0x2830) == 0)
  {
    if (((1 << v3) & 0x1C0) != 0)
    {
      uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.cellular(_:);
      goto LABEL_9;
    }

void sub_1000BCC20(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000BCC34()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject(&unk_1001B7830, 24LL, 7LL);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = *(void *)(v1 + 80);
  sub_1000BCCA8((uint64_t)sub_1000BCE68, v2, v3, v4);
  swift_release();
  swift_release();
  sub_1000110D4();
}

uint64_t sub_1000BCC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100009654(a2, 1LL, 1LL, a1);
}

uint64_t sub_1000BCCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[2];
  uint64_t v9 = *(void *)(*v4 + 80LL);
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v6 = type metadata accessor for DeferredSetup.State(0LL, v9, a3, a4);
  sub_1000BCF04((void (*)(uint64_t))sub_1000BCEE8, (uint64_t)&v8, v5, v6, (uint64_t)&type metadata for Bool);
  return v12;
}

uint64_t sub_1000BCD1C()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for DeferredSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DeferredSetup);
}

uint64_t sub_1000BCD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8LL);
}

id sub_1000BCD54(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0) {
    return (id)swift_retain(a2);
  }
  else {
    return a1;
  }
}

void sub_1000BCD64(uint64_t a1)
{
}

void sub_1000BCD74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000BCD54(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_1000110D4();
}

uint64_t sub_1000BCDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1000BCD54(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_100009644(v6, v7, v8);
  return a1;
}

uint64_t sub_1000BCE08(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100009644(v4, v5, v6);
  return a1;
}

uint64_t type metadata accessor for DeferredSetup.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DeferredSetup.State);
}

uint64_t sub_1000BCE58()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000BCE68@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BCC94(*(void *)(v1 + 16), a1);
}

void sub_1000BCE70(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    char v5 = 0;
  }

  else
  {
    uint64_t v7 = *(dispatch_group_s **)a1;
    char v6 = *(void **)(a1 + 8);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    char v5 = 1;
    *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = 1;
    swift_retain(a3);
    dispatch_group_leave(v7);
    sub_100009644(v7, v6, 0);
  }

  *a4 = v5;
}

void sub_1000BCEE8(uint64_t a1@<X0>, char *a2@<X8>)
{
}

void sub_1000BCF04(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1000BCF6C( uint64_t a1, os_unfair_lock_t lock, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (v7) {
    *a7 = v7;
  }
}

uint64_t sub_1000BCFEC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_1000BD018(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v8);
  sub_100009AD4();
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v45 - v15;
  NSFileManager.parsecdAssetsDirectoryURL.getter(v14);
  if (sub_100010708(v4, 1LL, v9) == 1)
  {
    sub_100014358(v4, &qword_1001D5ED0);
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v17 = sub_100010ED4();
    uint64_t v18 = (os_log_s *)sub_100010E78(v17, (uint64_t)qword_1001D6400);
    os_log_type_t v20 = static os_log_type_t.error.getter(v18, v19);
    if (sub_100047154(v20))
    {
      id v21 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)id v21 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v18,  (os_log_type_t)a2,  "Couldn't find com.apple.parsecd cache directory",  v21);
      sub_100010C34((uint64_t)v21);
    }

    return;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v16, v4, v9);
  NSString v22 = String._bridgeToObjectiveC()();
  uint64_t v23 = (os_log_s *)[a1 objectForKey:v22];

  if (v23)
  {
    sub_1000BE6D0();
    sub_100010CA0();
    sub_100014358((uint64_t)v47, (uint64_t *)&unk_1001D32C0);
    if (a4)
    {
      if (qword_1001D0620 != -1) {
        swift_once(&qword_1001D0620, sub_1000BD4F8);
      }
      uint64_t v24 = sub_100010ED4();
      sub_100010E78(v24, (uint64_t)qword_1001D6400);
      os_log_type_t v25 = sub_100014588();
      if (sub_10003EFD0(v25))
      {
        uint64_t v26 = (uint8_t *)sub_100009B20(2LL);
        *(_WORD *)uint64_t v26 = 0;
        sub_10001447C( (void *)&_mh_execute_header,  v23,  (os_log_type_t)v13,  "Found cached app whitelist data, no update required.",  v26);
        sub_100010C34((uint64_t)v26);
      }

      sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
      return;
    }
  }

  else
  {
    memset(v47, 0, sizeof(v47));
    sub_100014358((uint64_t)v47, (uint64_t *)&unk_1001D32C0);
  }

  uint64_t v27 = kPARInstalledAppWhitelist;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(kPARInstalledAppWhitelist);
  URL.appendingPathComponent(_:)(v28, v29);
  uint64_t v30 = swift_bridgeObjectRelease();
  URL.path.getter(v30);
  NSString v31 = String._bridgeToObjectiveC()();
  sub_100009B3C();
  unsigned int v32 = [a2 fileExistsAtPath:v31];

  if (v32)
  {
    sub_100009788(0LL, (unint64_t *)&unk_1001D4510, &OBJC_CLASS___NSXPCConnection_ptr);
    sub_10004B488(0xD000000000000014LL, 0x800000010016EC30LL, 0LL);
    uint64_t v34 = v33;
    id v35 = objc_allocWithZone((Class)type metadata accessor for FlusherClient());
    uint64_t v36 = (os_log_s *)FlusherClient.init(connection:)(v34);
    (*(void (**)(void, void, void))((swift_isaMask & *(void *)v36) + 0x70LL))(0LL, 0LL, 0LL);
  }

  else
  {
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v37 = sub_100010ED4();
    uint64_t v36 = (os_log_s *)sub_100010E78(v37, (uint64_t)qword_1001D6400);
    os_log_type_t v39 = static os_log_type_t.error.getter(v36, v38);
    if (sub_10006B418(v39))
    {
      uint64_t v40 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v41 = sub_100009B20(32LL);
      *(void *)&v47[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      os_log_type_t v45 = v40 + 4;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v46 = sub_1000307E0(v42, v43, (uint64_t *)v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v45);
      swift_bridgeObjectRelease();
      sub_100014564( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v31,  "App whitelist data update required, but no %s file found. Bailing to prevent useless wake of parsec-fbf.",  v40);
      sub_100030F9C(v41);
      sub_100010C34(v41);
      sub_100010C34((uint64_t)v40);
    }
  }

  uint64_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44(v13, v9);
  v44(v16, v9);
}

id FlusherClient.__allocating_init(connection:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FlusherClient.init(connection:)(a1);
}

uint64_t sub_1000BD4F8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10001C180(v0, qword_1001D6400);
  sub_1000093D0(v0, (uint64_t)qword_1001D6400);
  return Logger.init(subsystem:category:)( 0xD000000000000011LL,  0x800000010016AB00LL,  0x6E65696C63666266LL,  0xE900000000000074LL);
}

uint64_t FlusherClient.invalidationQueue.getter()
{
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for DispatchQoS.QoSClass.background(_:),  v0);
  uint64_t v4 = static OS_dispatch_queue.global(qos:)(v3);
  sub_100019E60(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return v4;
}

id FlusherClient.init(connection:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd13FlusherClient_connection;
  *(void *)&v1[OBJC_IVAR____TtC7parsecd13FlusherClient_connection] = a1;
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  id v5 = a1;
  uint64_t v6 = v1;
  id v7 = [v4 interfaceWithProtocol:&OBJC_PROTOCOL___FBFDaemonXPC];
  [v5 setRemoteObjectInterface:v7];

  id v8 = *(id *)&v1[v3];
  [v8 resume];

  if (qword_1001D0620 != -1) {
    swift_once(&qword_1001D0620, sub_1000BD4F8);
  }
  uint64_t v9 = sub_100010ED4();
  sub_100010E78(v9, (uint64_t)qword_1001D6400);
  os_log_type_t v10 = sub_100014588();
  if (sub_10003EFD0(v10))
  {
    uint64_t v11 = (uint8_t *)sub_100009B20(2LL);
    *(_WORD *)uint64_t v11 = 0;
    sub_10001447C( (void *)&_mh_execute_header,  (os_log_s *)v8,  (os_log_type_t)v7,  "Initiating new connection to FBF",  v11);
    sub_100010C34((uint64_t)v11);
  }

  v14.receiver = v6;
  v14.super_class = (Class)type metadata accessor for FlusherClient();
  id v12 = objc_msgSendSuper2(&v14, "init");

  return v12;
}

uint64_t type metadata accessor for FlusherClient()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd13FlusherClient);
}

id FlusherClient.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlusherClient();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t FlusherClient.flushSessionEagerly(atURL:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = v3;
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100009AD4();
  uint64_t v11 = *(void **)&v3[OBJC_IVAR____TtC7parsecd13FlusherClient_connection];
  uint64_t v40 = sub_1000BDBDC;
  uint64_t v41 = 0LL;
  uint64_t v38 = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256LL;
  id v12 = sub_1000BE6D8((uint64_t)sub_1000197E4);
  id v13 = [v11 remoteObjectProxyWithErrorHandler:v12];
  _Block_release(v12);
  sub_1000BE6D0();
  sub_100010CA0();
  sub_100010758((uint64_t)v42, (uint64_t)&v38);
  uint64_t v14 = sub_10000941C(&qword_1001D6480);
  if (swift_dynamicCast(&v37, &v38, (char *)&type metadata for Any + 8, v14, 6LL))
  {
    uint64_t v36 = (void *)v37;
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v15 = sub_100010ED4();
    sub_1000093D0(v15, (uint64_t)qword_1001D6400);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v4, a1, v9);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v35 = a2;
      uint64_t v19 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v20 = sub_100009B20(32LL);
      uint64_t v38 = (void **)v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = URL.lastPathComponent.getter(v20);
      uint64_t v37 = sub_1000307E0(v21, v22, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v19 + 4);
      sub_100009B3C();
      sub_1000BE6A8();
      sub_100014564((void *)&_mh_execute_header, v17, v18, "Flushing session %s eagerly.", v19);
      sub_100030F9C(v20);
      sub_100010C34(v20);
      uint64_t v23 = (uint64_t)v19;
      a2 = v35;
      sub_100010C34(v23);
    }

    else
    {
      sub_1000BE6A8();
    }

    URL._bridgeToObjectiveC()(v29);
    os_log_type_t v25 = v30;
    NSString v31 = (void *)sub_1000BE6B8((uint64_t)&unk_1001B7880);
    v31[2] = a2;
    v31[3] = a3;
    v31[4] = v5;
    uint64_t v40 = sub_1000BE5E8;
    uint64_t v41 = v31;
    uint64_t v38 = _NSConcreteStackBlock;
    uint64_t v39 = 1107296256LL;
    unsigned int v32 = sub_1000BE6D8((uint64_t)sub_1000BCFEC);
    sub_100026250(a2, a3);
    id v33 = v5;
    swift_release();
    [v36 flushSessionEagerly:v25 completion:v32];
    _Block_release(v32);
    swift_unknownObjectRelease();
  }

  else
  {
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v24 = sub_100010ED4();
    os_log_type_t v25 = (os_log_s *)sub_100010E78(v24, (uint64_t)qword_1001D6400);
    os_log_type_t v27 = static os_log_type_t.error.getter(v25, v26);
    if (os_log_type_enabled(v25, v27))
    {
      uint64_t v28 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v28 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v25,  v27,  "FBF proxy didn't conform to expected remote object protocol",  v28);
      sub_100010C34((uint64_t)v28);
    }
  }

  return sub_1000108B8(v42);
}

uint64_t sub_1000BDBE0(void (*a1)(void), uint64_t a2, void *a3)
{
  if (qword_1001D0620 != -1) {
    swift_once(&qword_1001D0620, sub_1000BD4F8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_1000093D0(v5, (uint64_t)qword_1001D6400);
  id v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Eager flush finished", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  if (a1) {
    a1();
  }
  uint64_t v26 = FlusherClient.invalidationQueue.getter();
  uint64_t v10 = swift_allocObject(&unk_1001B79A8, 24LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a3;
  aBlock[4] = sub_1000BE678;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B79C0;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  v25[1] = v25;
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(a3);
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v27 = _swiftEmptyArrayStorage;
  unint64_t v20 = sub_100019CD0();
  uint64_t v21 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v22 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v16, v20);
  uint64_t v23 = (void *)v26;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v19, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t FlusherClient.updateWhitelists(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = *(void **)&v3[OBJC_IVAR____TtC7parsecd13FlusherClient_connection];
  unsigned int v32 = sub_1000BDBDC;
  id v33 = 0LL;
  uint64_t v10 = sub_1000BE6C4((uint64_t)sub_1000197E4, v26, (uint64_t)v28, (char)_NSConcreteStackBlock, 1107296256LL, v30, v31);
  uint64_t v11 = (os_log_s *)[v9 remoteObjectProxyWithErrorHandler:v10];
  _Block_release(v10);
  sub_1000BE6D0();
  sub_100010CA0();
  sub_100010758((uint64_t)v34, (uint64_t)aBlock);
  uint64_t v12 = sub_10000941C(&qword_1001D6480);
  if (swift_dynamicCast(&v28, aBlock, (char *)&type metadata for Any + 8, v12, 6LL))
  {
    uint64_t v13 = v28;
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v14 = sub_100010ED4();
    sub_100010E78(v14, (uint64_t)qword_1001D6400);
    os_log_type_t v15 = sub_100014588();
    if (sub_10006B418(v15))
    {
      uint64_t v16 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v16 = 0;
      sub_10001447C((void *)&_mh_execute_header, v11, v4, "Asking FBF to generate App Whitelist signature.", v16);
      sub_100010C34((uint64_t)v16);
    }

    uint64_t v17 = (void *)sub_1000BE6B8((uint64_t)&unk_1001B78F8);
    __int128 v17[2] = a2;
    v17[3] = a3;
    v17[4] = v5;
    unsigned int v32 = sub_1000BE62C;
    id v33 = v17;
    uint64_t v18 = sub_1000BE6C4((uint64_t)sub_1000BCFEC, v27, (uint64_t)v28, (char)_NSConcreteStackBlock, 1107296256LL, v30, v31);
    sub_100026250(a2, a3);
    id v19 = v5;
    swift_release();
    [v13 updateWhitelists:a1 completion:v18];
    _Block_release(v18);
    swift_unknownObjectRelease();
  }

  else
  {
    if (qword_1001D0620 != -1) {
      swift_once(&qword_1001D0620, sub_1000BD4F8);
    }
    uint64_t v20 = sub_100010ED4();
    uint64_t v21 = (os_log_s *)sub_100010E78(v20, (uint64_t)qword_1001D6400);
    os_log_type_t v23 = static os_log_type_t.error.getter(v21, v22);
    if (sub_100047154(v23))
    {
      uint64_t v24 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v24 = 0;
      sub_10001447C( (void *)&_mh_execute_header,  v21,  (os_log_type_t)v11,  "FBF proxy didn't conform to expected remote object protocol",  v24);
      sub_100010C34((uint64_t)v24);
    }
  }

  return sub_1000108B8(v34);
}

void sub_1000BE118(uint64_t a1)
{
  if (qword_1001D0620 != -1) {
    swift_once(&qword_1001D0620, sub_1000BD4F8);
  }
  uint64_t v2 = sub_100010ED4();
  sub_1000093D0(v2, (uint64_t)qword_1001D6400);
  swift_errorRetain(a1);
  uint64_t v3 = swift_errorRetain(a1);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(oslog, v4);
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)sub_100009B20(12LL);
    uint64_t v7 = sub_100009B20(32LL);
    uint64_t v13 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(a1);
    uint64_t v8 = Error.localizedDescription.getter(v12[1], v12[2]);
    uint64_t v11 = sub_1000307E0(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v6 + 4);
    sub_100009B3C();
    sub_100014530();
    sub_100014530();
    sub_100014564((void *)&_mh_execute_header, oslog, v5, "fbf connection closed with error: %s", v6);
    sub_100030F9C(v7);
    sub_100010C34(v7);
    sub_100010C34((uint64_t)v6);
  }

  else
  {
    sub_100014530();
    sub_100014530();
  }

uint64_t sub_1000BE2B8(void (*a1)(uint64_t), uint64_t a2, void *a3)
{
  if (qword_1001D0620 != -1) {
    swift_once(&qword_1001D0620, sub_1000BD4F8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001D6400);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Whitelist generation queued", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  if (a1)
  {
    uint64_t v11 = swift_retain(a2);
    a1(v11);
    sub_10000A65C((uint64_t)a1, a2);
  }

  uint64_t v28 = FlusherClient.invalidationQueue.getter();
  uint64_t v12 = swift_allocObject(&unk_1001B7958, 24LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a3;
  aBlock[4] = sub_1000BE65C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B7970;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  v27[1] = v27;
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.unspecified.getter(a3);
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = _swiftEmptyArrayStorage;
  unint64_t v22 = sub_100019CD0();
  uint64_t v23 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v24 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v18, v22);
  os_log_type_t v25 = (void *)v28;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v21, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return swift_release();
}

void FlusherClient.init()()
{
}

uint64_t sub_1000BE594()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x68LL))();
}

uint64_t sub_1000BE5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BE5DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000BE5E8()
{
  return sub_1000BDBE0(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000BE5F8()
{
  if (*(void *)(v0 + 16)) {
    swift_release(*(void *)(v0 + 24));
  }

  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000BE62C()
{
  return sub_1000BE2B8(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000BE638()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_1000BE65C()
{
  return [*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7parsecd13FlusherClient_connection) invalidate];
}

uint64_t sub_1000BE6A8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_1000BE6B8(uint64_t a1)
{
  return swift_allocObject(a1, 40LL, 7LL);
}

void *sub_1000BE6C4@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, char aBlock, uint64_t a5, uint64_t a6, uint64_t a7)
{
  a6 = a1;
  a7 = v7;
  return _Block_copy(&aBlock);
}

uint64_t sub_1000BE6D0()
{
  return _bridgeAnyObjectToAny(_:)(v0);
}

void *sub_1000BE6D8@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 16sub_1000AC280(v0, v1, 0) = a1;
  *(void *)(v2 - 152) = v1;
  return _Block_copy((const void *)(v2 - 176));
}

uint64_t sub_1000BE6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1000BE720(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1000BE754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000BE798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000BE7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000BE820(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000BE864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE870);
}

uint64_t sub_1000BE870(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A19D0();
  return sub_100010708(a1, a2, v4);
}

uint64_t sub_1000BE8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE8AC);
}

uint64_t sub_1000BE8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000A19D0();
  return sub_100009654(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CancellableStoreKey(uint64_t a1)
{
  uint64_t result = qword_1001D6508;
  if (!qword_1001D6508) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CancellableStoreKey);
  }
  return result;
}

uint64_t sub_1000BE918(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000BE980(uint64_t a1)
{
  uint64_t v2 = sub_1000A19D0();
  uint64_t v3 = sub_10003B7FC( &qword_1001D1120,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

void sub_1000BE9D8()
{
  uint64_t v0 = sub_10003B7FC( &qword_1001D1120,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000BEAB4(v0, v1);
  Hasher._finalize()();
  sub_10003DDCC();
}

void sub_1000BEA34(uint64_t a1)
{
  uint64_t v1 = sub_10003B7FC( &qword_1001D1120,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  sub_1000BEAB4(v1, v2);
  Hasher._finalize()();
  sub_10003DDCC();
}

uint64_t sub_1000BEA88()
{
  return sub_10003B7FC(qword_1001D6540, type metadata accessor for CancellableStoreKey, (uint64_t)&unk_100162BD4);
}

uint64_t sub_1000BEAB4(uint64_t a1, uint64_t a2, ...)
{
  return dispatch thunk of Hashable.hash(into:)(va, v2, a1);
}

void sub_1000BEAC4(uint64_t a1)
{
  v8[0] = "\b";
  v8[1] = &unk_100162C90;
  uint64_t v2 = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    uint64_t v8[2] = *(void *)(v2 - 8) + 64LL;
    v8[3] = &unk_100162CA8;
    v8[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    sub_1000BF954(319LL);
    if (v5 <= 0x3F)
    {
      v8[5] = *(void *)(v4 - 8) + 64LL;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        v8[6] = *(void *)(v6 - 8) + 64LL;
        v8[7] = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_initClassMetadata2(a1, 0LL, 8LL, v8, a1 + 96);
      }
    }
  }

uint64_t *sub_1000BEBA0()
{
  uint64_t v1 = *v0;
  if ((*((_BYTE *)v0 + *(void *)(*v0 + 120)) & 1) == 0) {
    (*(void (**)(void))(v1 + 400))();
  }
  swift_weakDestroy(v0 + 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000110A8();
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 112));

  sub_1000C00CC((uint64_t)v0 + *(void *)(*v0 + 136), &qword_1001D1078);
  uint64_t v2 = type metadata accessor for Date(0LL);
  sub_100019DA4(v2);
  swift_release();
  return v0;
}

uint64_t sub_1000BEC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v6 = *(uint64_t *)((char *)v4 + *(void *)(*v4 + 152));
  type metadata accessor for ActivitySpan.ActivityData(0LL, *(void *)(v5 + 80), *(void *)(v5 + 88), a4);
  swift_retain(v6);
  sub_1000508E4((void (*)(void))sub_1000BFEC0);
  uint64_t v7 = swift_release();
  char v8 = v71;
  uint64_t v9 = v73;
  uint64_t v67 = v72;
  uint64_t v68 = v70;
  uint64_t v69 = v74;
  uint64_t v11 = static os_log_type_t.error.getter(v7, v10);
  uint64_t v14 = sub_1000C015C( (uint64_t)"LEAKED SPAN: {{{",  16LL,  v12,  (uint64_t)&_mh_execute_header,  v13,  v11,  (uint64_t)_swiftEmptyArrayStorage);
  static os_log_type_t.error.getter(v14, v15);
  uint64_t v16 = sub_10000941C(&qword_1001D0C10);
  uint64_t v17 = sub_100009ACC(v16, 152LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_10015C800;
  uint64_t v18 = sub_1000BF160();
  uint64_t v19 = StaticString.description.getter(v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v22 = sub_100042FE8();
  *(void *)(v17 + 64) = v22;
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 4sub_1000AC280(v0, v1, 0) = v21;
  unint64_t v23 = v22;
  uint64_t v24 = sub_1000BF134();
  *(void *)(v17 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v17 + 104) = v23;
  *(void *)(v17 + 72) = v24;
  *(void *)(v17 + 8sub_1000AC280(v0, v1, 0) = v25;
  uint64_t v26 = sub_1000BF108();
  *(void *)(v17 + 13os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v17 + 144) = v23;
  *(void *)(v17 + 112) = v26;
  *(void *)(v17 + 12sub_1000AC280(v0, v1, 0) = v27;
  os_log(_:dso:log:type:_:)("Name: %s, Category: %s, Subsystem: %s", v63, v65, v66);
  uint64_t v28 = sub_10001450C();
  if ((v8 & 1) == 0)
  {
    static os_log_type_t.error.getter(v28, v29);
    uint64_t v30 = sub_1000C00F8();
    uint64_t v64 = 1LL;
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v31 = StaticString.description.getter(v68);
    *(void *)(v30 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v30 + 64) = v23;
    *(void *)(v30 + 32) = v31;
    *(void *)(v30 + 4sub_1000AC280(v0, v1, 0) = v32;
    sub_1000C010C((uint64_t)"Format string: %s", 17LL, v33, (uint64_t)&_mh_execute_header);
    sub_100009B3C();
    if (v9)
    {
      uint64_t v34 = sub_100010E2C();
      static os_log_type_t.error.getter(v34, v35);
      uint64_t v36 = sub_1000C00F8();
      *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v36 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6668);
      *(void *)(v36 + 64) = sub_1000BFEC8( (unint64_t *)&unk_1001D6670,  &qword_1001D6668,  (uint64_t)&protocol conformance descriptor for [A]);
      *(void *)(v36 + 32) = v9;
      sub_1000C010C((uint64_t)"Arguments: %@", 13LL, v37, (uint64_t)&_mh_execute_header);
      sub_100009B3C();
    }
  }

  if (v67)
  {
    uint64_t v38 = swift_bridgeObjectRetain(v67);
    static os_log_type_t.error.getter(v38, v39);
    uint64_t v40 = sub_1000C00F8();
    *(_OWORD *)(v40 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v40 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6658);
    *(void *)(v40 + 64) = sub_1000BFEC8( &qword_1001D6660,  &qword_1001D6658,  (uint64_t)&protocol conformance descriptor for [A : B]);
    *(void *)(v40 + 32) = v67;
    sub_1000C010C((uint64_t)"Analytics: %@", 13LL, v41, (uint64_t)&_mh_execute_header);
    sub_100009B3C();
  }

  uint64_t v42 = v69;
  if ((unint64_t)v69 >> 62)
  {
    if (v69 < 0) {
      uint64_t v54 = v69;
    }
    else {
      uint64_t v54 = v69 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v69);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v54);
    uint64_t v43 = result;
    if (result) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t v52 = sub_10005A1BC();
    goto LABEL_17;
  }

  uint64_t v43 = *(void *)((v69 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v69);
  if (!v43) {
    goto LABEL_16;
  }
LABEL_8:
  if (v43 < 1)
  {
    __break(1u);
    return result;
  }

  uint64_t v45 = 0LL;
  do
  {
    uint64_t v46 = *(void *)(v42 + 8 * v45++ + 32);
    uint64_t v47 = swift_unknownObjectRetain(v46);
    static os_log_type_t.error.getter(v47, v48);
    uint64_t v49 = sub_100009ACC(v16, 72LL);
    *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v70 = v46;
    swift_unknownObjectRetain(v46);
    uint64_t v50 = String.init<A>(describing:)(&v70);
    *(void *)(v49 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v49 + 64) = v23;
    *(void *)(v49 + 32) = v50;
    *(void *)(v49 + 4sub_1000AC280(v0, v1, 0) = v51;
    os_log(_:dso:log:type:_:)("Leaked cancellables: %s", (const char *)v64);
    uint64_t v42 = v69;
    swift_unknownObjectRelease();
    sub_1000110E0();
  }

  while (v43 != v45);
  uint64_t v52 = sub_10005A1BC();
LABEL_17:
  uint64_t v55 = static os_log_type_t.error.getter(v52, v53);
  uint64_t v58 = sub_1000C015C( (uint64_t)"}}}",  3LL,  v56,  (uint64_t)&_mh_execute_header,  v57,  v55,  (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v59 = sub_1000BF190(v58);
  if ((v59 & 1) != 0)
  {
    uint64_t v60 = static os_log_type_t.fault.getter(v59);
    sub_1000C015C( (uint64_t)"Some objects remain retained at the moment when all activities must be finalized. This could indicate dea dlock, memory leak or not cancelled asynchronous procedures, such as networking or XPC calls.",  198LL,  v61,  (uint64_t)&_mh_execute_header,  v62,  v60,  (uint64_t)_swiftEmptyArrayStorage);
  }

  sub_10005A1BC();
  sub_1000110E0();
  sub_1000110A8();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000BF0F0()
{
  return (*(uint64_t (**)(Swift::Void (__swiftcall *)(), void))(*(void *)v0 + 408LL))( _CPStartNetworkSearchFeedback.redactUnused(),  0LL);
}

uint64_t sub_1000BF108()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88LL) + 24LL))();
}

uint64_t sub_1000BF134()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88LL) + 32LL))();
}

uint64_t sub_1000BF160()
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v0 + 88LL) + 40LL))(*(void *)(*(void *)v0 + 80LL));
}

uint64_t sub_1000BF190(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  __chkstk_darwin(a1);
  sub_100009B6C();
  sub_1000C0174(v1 + *(void *)(v4 + 112), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  uint64_t v6 = sub_10000941C(&qword_1001D6688);
  if (swift_dynamicCast(v11, v2, v3, v6, 6LL))
  {
    sub_100019BC4(v11, (uint64_t)v13);
    uint64_t v7 = v14;
    uint64_t v8 = v15;
    sub_100019AFC(v13, v14);
    char v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    sub_1000108B8(v13);
  }

  else
  {
    uint64_t v12 = 0LL;
    memset(v11, 0, sizeof(v11));
    sub_1000C00CC((uint64_t)v11, (uint64_t *)&unk_1001D6690);
    char v9 = 0;
  }

  return v9 & 1;
}

uint64_t sub_1000BF278()
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100009B6C();
  uint64_t v4 = sub_1000C0174( v0 + *(void *)(*(void *)v0 + 144LL),  *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  Date.timeIntervalSinceNow.getter(v4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
}

uint64_t sub_1000BF330()
{
  return String.init<A>(describing:)(&v1);
}

uint64_t sub_1000BF35C(void (*a1)(void))
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + *(void *)(*(void *)v1 + 152LL)) + 16LL);
  swift_retain(*(void *)(v1 + *(void *)(*(void *)v1 + 152LL)));
  os_unfair_lock_lock(v3);
  sub_1000BFC00(v1, a1);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t sub_1000BF3C8()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10000941C(&qword_1001D1078);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = &v34[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v4);
  char v9 = &v34[-v8];
  uint64_t v39 = v2;
  uint64_t v43 = *(void *)(v2 + 80);
  uint64_t v10 = *(void *)(v43 - 8);
  uint64_t v11 = __chkstk_darwin(v7);
  uint64_t v13 = &v34[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v34[-v14];
  uint64_t v37 = *(void *)(v1 + 24);
  uint64_t v38 = (void *)(v1 + 24);
  uint64_t v36 = *(void *)(v1 + 32);
  int v35 = *(unsigned __int8 *)(v1 + 40);
  uint64_t v16 = *(unsigned __int8 *)(v1 + 41);
  uint64_t v17 = *(void *)(v1 + 48);
  uint64_t v18 = *(void *)(v1 + 56);
  uint64_t v19 = *(void *)(v1 + 64);
  uint64_t v40 = *(void *)(v1 + 72);
  swift_unknownObjectRetain(v40);
  swift_bridgeObjectRetain(v17);
  sub_100010E2C();
  uint64_t v41 = v19;
  swift_bridgeObjectRetain(v19);
  uint64_t v42 = v17;
  sub_1000BFC3C(v17);
  uint64_t v20 = v1 + *(void *)(*(void *)v1 + 112LL);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void))(v10 + 16);
  if ((v16 & 1) == 0 && v18)
  {
    sub_1000C0168((uint64_t)v15, v20, v21);
    sub_1000C0120();
    sub_10004344C(v1, (uint64_t)v9);
    uint64_t v22 = type metadata accessor for OSSignpostID(0LL);
    uint64_t result = sub_100010708((uint64_t)v9, 1LL, v22);
    if ((_DWORD)result != 1)
    {
      uint64_t v24 = sub_1000C0140();
      swift_bridgeObjectRetain(v24);
      sub_1000BF874((uint64_t)v9, v16, v37, v36, v35, v18, v10, v18);
      sub_10003B8E8();
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v10);
      (*(void (**)(_BYTE *, uint64_t))(*(void *)(v22 - 8) + 8LL))(v9, v22);
      goto LABEL_7;
    }

uint64_t sub_1000BF780(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  char v9 = *(os_unfair_lock_s **)(*(void *)(v4 + *(void *)(*(void *)v4 + 152LL)) + 16LL);
  swift_retain(*(void *)(v4 + *(void *)(*(void *)v4 + 152LL)));
  os_unfair_lock_lock(v9);
  sub_1000BFDF0(v4, a1, a2, a3, a4);
  os_unfair_lock_unlock(v9);
  return swift_release();
}

uint64_t sub_1000BF804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static os_signpost_type_t.end.getter();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  return os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, a2, v9, v10, v11, a1);
}

void sub_1000BF874( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = static os_signpost_type_t.end.getter(a1);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  LOBYTE(v2sub_1000AC280(v0, v1, 0) = a5;
  sub_1000A56E4(v16, a2, v17, v18, v19, a1, a3, a4, v20, a6);
}

uint64_t sub_1000BF924()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for ActivitySpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActivitySpan);
}

void sub_1000BF954(uint64_t a1)
{
  if (!qword_1001D65D0[0])
  {
    uint64_t v2 = type metadata accessor for OSSignpostID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, qword_1001D65D0);
    }
  }

uint64_t sub_1000BF9A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t sub_1000BF9B0(void *a1)
{
  return swift_unknownObjectRelease(a1[6]);
}

uint64_t sub_1000BF9E8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v5;
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_unknownObjectRetain(v6);
  return a1;
}

uint64_t sub_1000BFA4C(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(_WORD *)(a1 + swift_weakDestroy(v0 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *((void *)a2 + 3);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v7);
  uint64_t v9 = *((void *)a2 + 5);
  uint64_t v10 = *(void *)(a1 + 40);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *((void *)a2 + 6);
  *(void *)(a1 + 48) = v12;
  swift_unknownObjectRetain(v12);
  swift_unknownObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for AvroRecordSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_1000BFB04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 4sub_1000AC280(v0, v1, 0) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease(v5);
  return a1;
}

uint64_t sub_1000BFB68(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t sub_1000BFBA8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 4sub_1000AC280(v0, v1, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 5os_unfair_lock_lock(v0 + 6) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4sub_1000AC280(v0, v1, 0) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 5os_unfair_lock_lock(v0 + 6) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata accessor for ActivitySpan.ActivityData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ActivitySpan.ActivityData);
}

uint64_t sub_1000BFC00(uint64_t result, void (*a2)(void))
{
  if ((*(_BYTE *)(result + *(void *)(*(void *)result + 120LL)) & 1) == 0)
  {
    a2();
    return sub_1000BF3C8();
  }

  return result;
}

void sub_1000BFC3C(uint64_t a1)
{
  uint64_t v2 = sub_1000BFF08(a1);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + *(void *)(*(void *)v1 + 128LL));
    uint64_t v4 = static os_log_type_t.debug.getter(v2);
    uint64_t v5 = sub_10000941C(&qword_1001D0C10);
    uint64_t v6 = sub_100009ACC(v5, 112LL);
    *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    uint64_t v7 = sub_1000BF134();
    uint64_t v9 = v8;
    *(void *)(v6 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v10 = sub_100042FE8();
    *(void *)(v6 + 64) = v10;
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 4sub_1000AC280(v0, v1, 0) = v9;
    sub_1000A36DC();
    uint64_t v11 = sub_1000C0180();
    uint64_t v14 = Dictionary.description.getter(v11, v12, v13);
    *(void *)(v6 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v6 + 104) = v10;
    *(void *)(v6 + 72) = v14;
    *(void *)(v6 + 8sub_1000AC280(v0, v1, 0) = v15;
    os_log(_:dso:log:type:_:)( "Reporting to CA event: '%s'\n\twith data: %@",  42LL,  2LL,  &_mh_execute_header,  v3,  v4,  v6);
    swift_bridgeObjectRelease();
    sub_1000BF108();
    uint64_t v17 = v16;
    uint64_t v18 = sub_1000BF134();
    uint64_t v20 = v19;
    swift_bridgeObjectRetain(v17);
    v21._uint64_t countAndFlagsBits = 46LL;
    v21._object = (void *)0xE100000000000000LL;
    String.append(_:)(v21);
    swift_bridgeObjectRetain(v20);
    v22._uint64_t countAndFlagsBits = v18;
    v22._object = v20;
    String.append(_:)(v22);
    sub_10003B8E8();
    NSString v23 = String._bridgeToObjectiveC()();
    sub_100009B3C();
    sub_1000C0180();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent(v23, isa);
    sub_10003B8E8();
    sub_1000110E0();
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000BFDF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 4sub_1000AC280(v0, v1, 0) = a4;
  *(_BYTE *)(a1 + 4sub_1000A0380(v0, 1) = 0;
  uint64_t v5 = *(void *)(a1 + 56);
  *(void *)(a1 + 5os_unfair_lock_lock(v0 + 6) = a5;
  swift_bridgeObjectRetain(a5);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000BFE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(_BYTE *)(a1 + 40);
  char v3 = *(_BYTE *)(a1 + 41);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v2;
  *(_BYTE *)(a2 + 17) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 4sub_1000AC280(v0, v1, 0) = v7;
  *(void *)(a2 + 48) = v6;
  swift_unknownObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v7);
}

id sub_1000BFE90()
{
  return *(id *)(v0 + *(void *)(*(void *)v0 + 128LL));
}

uint64_t sub_1000BFEA8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440LL))();
}

uint64_t sub_1000BFEB4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400LL))();
}

uint64_t sub_1000BFEC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BFE28(v1, a1);
}

uint64_t sub_1000BFEC8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_1000094A0(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000BFF08(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, (uint64_t)v2 + *(void *)(v4 + 112), v5);
  uint64_t DynamicType = swift_getDynamicType(v8, v5, 0LL);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = sub_10008064C(DynamicType, DynamicType, (uint64_t)&protocol descriptor for __CoreAnalyticsActivity);
  uint64_t v12 = 0LL;
  if (v10 && a1)
  {
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 16);
    sub_100010E2C();
    uint64_t v16 = v15(v13, v14);
    uint64_t v18 = v17;
    dispatch thunk of RawRepresentable.rawValue.getter(&v27, v5, *(void *)(*(void *)(v4 + 88) + 16LL));
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(a1);
    uint64_t v26 = a1;
    sub_10000F79C((uint64_t)isa, v16, v18);
    uint64_t v20 = v26;
    sub_10003B8E8();
    swift_bridgeObjectRelease();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    uint64_t v23 = v22;
    sub_1000BF278();
    Class v24 = Double._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(v20);
    uint64_t v27 = v20;
    sub_10000F79C((uint64_t)v24, v21, v23);
    uint64_t v12 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v12;
}

uint64_t sub_1000C00CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000941C(a2);
  sub_100019DA4(v3);
  return a1;
}

uint64_t sub_1000C00F8()
{
  return swift_allocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000C010C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, v4, v5);
}

uint64_t sub_1000C0120()
{
  return swift_beginAccess(v0 + *(void *)(*(void *)v0 + 136LL), v1 - 128, 0LL, 0LL);
}

uint64_t sub_1000C0140()
{
  return v0;
}

uint64_t sub_1000C015C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v7, a6, a7);
}

uint64_t sub_1000C0168@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, void)@<X8>)
{
  return a3(a1, a2, *(void *)(v3 - 136));
}

uint64_t sub_1000C0174@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  return a2(v3, a1, v2);
}

uint64_t sub_1000C0180()
{
  return v0;
}

uint64_t sub_1000C0194(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = sub_10000941C(&qword_1001D0C10);
  uint64_t inited = swift_initStackObject(v6, v15);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  sub_100019AFC(a3, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  *(void *)(inited + 5os_unfair_lock_lock(v0 + 6) = &type metadata for UInt;
  *(void *)(inited + 64) = &protocol witness table for UInt;
  *(void *)(inited + 32) = v10;
  uint64_t CacheSpan = type metadata accessor for QueryCacheSpan(0LL);
  sub_10004221C(a1, a2, (uint64_t)"currentCost=%{signpost.description.attribute,public}llu", 55LL, 2u, inited);
  uint64_t v13 = v12;
  sub_1000108B8(a3);
  return v13;
}

uint64_t sub_1000C028C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + qword_1001EDE68);
  *(void *)(v1 + qword_1001EDE68) = a1;
  swift_retain(a1);
  return swift_release(v2);
}

uint64_t sub_1000C02BC(uint64_t a1, char a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D0C10);
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = sub_100009ACC(v4, 72LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v12 = a1;
    char v13 = 1;
    uint64_t v9 = String.init<A>(describing:)(&v12);
    uint64_t v11 = v10;
    *(void *)(v8 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v8 + 64) = sub_100042FE8();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 4sub_1000AC280(v0, v1, 0) = v11;
    sub_1000C06A8((uint64_t)"error=%{signpost.description.attribute,public}s", 47LL);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v5 = sub_100009ACC(v4, 112LL);
    *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v5 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v6 = sub_100042FE8();
    *(void *)(v5 + 32) = 0xD000000000000013LL;
    *(void *)(v5 + 4sub_1000AC280(v0, v1, 0) = 0x8000000100171A90LL;
    *(void *)(v5 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for UInt;
    *(void *)(v5 + 104) = &protocol witness table for UInt;
    *(void *)(v5 + 64) = v6;
    *(void *)(v5 + 72) = a1;
    sub_1000C06A8( (uint64_t)"error=%{signpost.description.attribute,public}s, cost=%{signpost.description.attribute,public}llu",  97LL);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_1000C03EC()
{
  return swift_release(*(void *)(v0 + qword_1001EDE68));
}

uint64_t sub_1000C03FC()
{
  if ((*(_BYTE *)(v0 + 81) & 1) == 0) {
    sub_1000C04D4();
  }
  uint64_t v1 = sub_1000D5090();
  swift_release();
  return v1;
}

uint64_t sub_1000C043C()
{
  uint64_t v0 = sub_1000C03FC();
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for QueryCacheSpan(uint64_t a1)
{
  uint64_t result = qword_1001D66C8;
  if (!qword_1001D66C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for QueryCacheSpan);
  }
  return result;
}

uint64_t sub_1000C0494(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_initClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 448);
}

uint64_t sub_1000C04D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[qword_1001EDE68];
  if (v2)
  {
    uint64_t v3 = sub_10000941C(&qword_1001D0C10);
    uint64_t v4 = sub_100009ACC(v3, 112LL);
    *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_10015D580;
    sub_1000CC4D4();
    *(void *)(v4 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for UInt;
    *(void *)(v4 + 64) = &protocol witness table for UInt;
    *(void *)(v4 + 32) = v5;
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 8);
    *(void *)(v4 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v4 + 104) = sub_100042FE8();
    *(void *)(v4 + 72) = v7;
    *(void *)(v4 + 8sub_1000AC280(v0, v1, 0) = v6;
    swift_retain(v2);
    swift_bridgeObjectRetain(v6);
    sub_1000D6888("cost=%{signpost.description.attribute,public}llu, input=%{sensitive}s", 69LL, 2LL, v4);
    swift_release();
    swift_bridgeObjectRelease();
  }

  uint64_t v8 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152LL)] + 16LL);
  swift_retain(*(void *)&v1[*(void *)(*(void *)v1 + 152LL)]);
  os_unfair_lock_lock(v8);
  if ((v1[81] & 1) == 0) {
    sub_1000D6030();
  }
  os_unfair_lock_unlock(v8);
  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for QueryCacheSpan.Error(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for QueryCacheSpan.Error(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for QueryCacheSpan.Error(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0LL;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000C065C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000C0678(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    char v2 = 1;
  }

  else
  {
    char v2 = 0;
  }

  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for QueryCacheSpan.Error()
{
  return &type metadata for QueryCacheSpan.Error;
}

uint64_t sub_1000C06A8(uint64_t a1, uint64_t a2)
{
  return sub_1000D6888(a1, a2, 2LL, v2);
}

void sub_1000C06B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1000C4FC0(a1, 0, 0, 0, 1, 0, 0);
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v6);
    uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
    uint64_t v11 = v10;
    swift_unknownObjectRelease(v6);
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = sub_100009ACC((uint64_t)&unk_1001B7D48, 32LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  if (v11 | v9)
  {
    v14[0] = 0LL;
    v14[1] = 0LL;
    char v13 = v14;
    v14[2] = v9;
    v14[3] = v11;
  }

  else
  {
    char v13 = 0LL;
  }

  swift_task_create(v5, v13, (char *)&type metadata for () + 8, &unk_1001D4500, v12);
  sub_1000C5E6C();
}

void sub_1000C07AC()
{
  if (v1)
  {
    sub_10000941C(&qword_1001D6A48);
    uint64_t v2 = (void *)sub_1000C5CB4();
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v3 = -1LL << *(_BYTE *)(v0 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  sub_10005A624();
  uint64_t v6 = 0LL;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        unint64_t v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v8 = v7 | (v6 << 6);
      }

      else
      {
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_40;
        }
        sub_1000C5E08();
        if (v9 == v10)
        {
LABEL_37:
          sub_10003D774(v0);
          return;
        }

        sub_1000C5DFC();
        if (!v12)
        {
          sub_1000C5CE4();
          if (v9 == v10) {
            goto LABEL_37;
          }
          sub_1000C5D54();
          if (!v12)
          {
            sub_1000C5CE4();
            if (v9 == v10) {
              goto LABEL_37;
            }
            sub_1000C5D54();
            if (!v12)
            {
              sub_1000C5CE4();
              if (v9 == v10) {
                goto LABEL_37;
              }
              sub_1000C5D54();
              if (!v12)
              {
                sub_1000C5E08();
                if (v9 == v10) {
                  goto LABEL_37;
                }
                unint64_t v12 = *(void *)(v0 + 64 + 8 * v13);
                if (!v12)
                {
                  while (!__OFADD__(v13, 1LL))
                  {
                    sub_1000C5CE4();
                    if (v9 == v10) {
                      goto LABEL_37;
                    }
                    sub_1000C5DD0();
                    if (v12) {
                      goto LABEL_31;
                    }
                  }

                  goto LABEL_41;
                }

                uint64_t v11 = v13;
              }
            }
          }
        }

void sub_1000C0A00()
{
  if (v1)
  {
    sub_10000941C(&qword_1001D69F8);
    uint64_t v2 = (void *)sub_1000C5CB4();
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = v0 + 64;
  uint64_t v3 = -1LL << *(_BYTE *)(v0 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  int64_t v29 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  sub_10005A624();
  swift_retain(v2);
  int64_t v7 = 0LL;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v9);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_100010758(*(void *)(v0 + 56) + 32 * v9, (uint64_t)v42);
    *(void *)&__int128 v41 = v18;
    *((void *)&v41 + sub_1000A0380(v0, 1) = v17;
    v39[2] = v41;
    v40[0] = v42[0];
    v40[1] = v42[1];
    *(void *)&v39[0] = v18;
    *((void *)&v39[0] + sub_1000A0380(v0, 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_1000C5DE8(v40);
    __int128 v35 = v31;
    __int128 v36 = v32;
    uint64_t v37 = v33;
    sub_1000108D8(&v34, v38);
    __int128 v31 = v35;
    __int128 v32 = v36;
    uint64_t v33 = v37;
    sub_1000108D8(v38, v39);
    sub_1000108D8(v39, &v35);
    Swift::Int v19 = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1LL << *((_BYTE *)v2 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1LL << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v6[8 * v22];
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_38;
        }
      }

      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }

    unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_38:
    *(void *)&v6[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v23;
    uint64_t v28 = v2[6] + 40 * v23;
    *(_OWORD *)uint64_t v28 = v31;
    *(_OWORD *)(v28 + swift_weakDestroy(v0 + 16) = v32;
    *(void *)(v28 + 32) = v33;
    sub_1000108D8(&v35, (_OWORD *)(v2[7] + 32 * v23));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v7, 1LL)) {
      goto LABEL_42;
    }
    if (v7 + 1 >= v29) {
      goto LABEL_40;
    }
    sub_1000C5DFC();
    if (!v11)
    {
      sub_1000C5E24();
      if (v12 == v13) {
        goto LABEL_40;
      }
      unint64_t v11 = *(void *)(v30 + 8 * v10);
      if (!v11)
      {
        sub_1000C5E24();
        if (v12 == v13) {
          goto LABEL_40;
        }
        unint64_t v11 = *(void *)(v30 + 8 * v10);
        if (!v11)
        {
          sub_1000C5E24();
          if (v12 == v13) {
            goto LABEL_40;
          }
          unint64_t v11 = *(void *)(v30 + 8 * v10);
          if (!v11) {
            break;
          }
        }
      }
    }

LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v7 = v10;
  }

  int64_t v15 = v14 + 4;
  if (v15 >= v29)
  {
LABEL_40:
    swift_release();
    sub_10003D774(v0);
    return;
  }

  unint64_t v11 = *(void *)(v30 + 8 * v15);
  if (v11)
  {
    int64_t v10 = v15;
    goto LABEL_28;
  }

  while (!__OFADD__(v15, 1LL))
  {
    sub_1000C5E24();
    if (v12 == v13) {
      goto LABEL_40;
    }
    sub_1000C5DD0();
    if (v11) {
      goto LABEL_28;
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

LABEL_43:
  __break(1u);
}

void sub_1000C0D90()
{
  if (v1)
  {
    sub_10000941C(&qword_1001D6A50);
    uint64_t v3 = (void *)sub_1000C5CB4();
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v34 = v0 + 64;
  sub_1000C5C84();
  uint64_t v33 = v4;
  sub_10005A624();
  uint64_t v5 = 0LL;
  while (1)
  {
    while (1)
    {
      if (v2)
      {
        sub_1000C5E30();
        uint64_t v35 = v2;
        uint64_t v7 = v6 | (v5 << 6);
      }

      else
      {
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_34;
        }
        if (v5 + 1 >= v33)
        {
LABEL_31:
          sub_10003D774(v0);
          return;
        }

        sub_1000C5DFC();
        if (!v8)
        {
          sub_1000C5DF0();
          if (v10 == v11) {
            goto LABEL_31;
          }
          if (!*(void *)(v34 + 8 * v9))
          {
            sub_1000C5DF0();
            if (v10 == v11) {
              goto LABEL_31;
            }
            if (!*(void *)(v34 + 8 * v12))
            {
              sub_1000C5DF0();
              if (v10 == v11) {
                goto LABEL_31;
              }
              if (!*(void *)(v34 + 8 * v13))
              {
                uint64_t v15 = v14 + 4;
                if (v15 >= v33) {
                  goto LABEL_31;
                }
                if (!*(void *)(v34 + 8 * v15))
                {
                  while (!__OFADD__(v15, 1LL))
                  {
                    sub_1000C5DF0();
                    if (v10 == v11) {
                      goto LABEL_31;
                    }
                    sub_1000C5DD0();
                    if (v16) {
                      goto LABEL_25;
                    }
                  }

                  goto LABEL_35;
                }
              }
            }
          }
        }

void sub_1000C0FE8()
{
  if (v1)
  {
    sub_10000941C(&qword_1001D6A50);
    uint64_t v3 = (void *)sub_1000C5CB4();
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  sub_1000C5C84();
  sub_10005A624();
  uint64_t v4 = 0LL;
  while (1)
  {
    while (1)
    {
      if (v2)
      {
        sub_1000C5E30();
        uint64_t v28 = v2;
        uint64_t v6 = v5 | (v4 << 6);
      }

      else
      {
        if (__OFADD__(v4, 1LL)) {
          goto LABEL_36;
        }
        sub_1000C5E08();
        if (v7 == v8)
        {
LABEL_33:
          sub_10003D774(v0);
          return;
        }

        sub_1000C5DFC();
        if (!v9)
        {
          sub_1000C5CE4();
          if (v7 == v8) {
            goto LABEL_33;
          }
          sub_1000C5D54();
          if (!v10)
          {
            sub_1000C5CE4();
            if (v7 == v8) {
              goto LABEL_33;
            }
            sub_1000C5D54();
            if (!v11)
            {
              sub_1000C5CE4();
              if (v7 == v8) {
                goto LABEL_33;
              }
              sub_1000C5D54();
              if (!v12)
              {
                sub_1000C5E08();
                if (v7 == v8) {
                  goto LABEL_33;
                }
                if (!*(void *)(v0 + 64 + 8 * v13))
                {
                  while (!__OFADD__(v13, 1LL))
                  {
                    sub_1000C5CE4();
                    if (v7 == v8) {
                      goto LABEL_33;
                    }
                    sub_1000C5DD0();
                    if (v14) {
                      goto LABEL_27;
                    }
                  }

                  goto LABEL_37;
                }
              }
            }
          }
        }

uint64_t sub_1000C1220(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000941C(&qword_1001D69F8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v32 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v31 = (unint64_t)(63 - v4) >> 6;
  char v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  if (!v6) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v11 = v10 | (v9 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v11);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)&v42[0] = v18;
    *((void *)&v42[0] + sub_1000A0380(v0, 1) = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7LL);
    v33[0] = v21;
    v33[1] = v20;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
    __int128 v38 = v34;
    __int128 v39 = v35;
    uint64_t v40 = v36;
    sub_1000108D8(v37, v41);
    __int128 v34 = v38;
    __int128 v35 = v39;
    uint64_t v36 = v40;
    sub_1000108D8(v41, v42);
    sub_1000108D8(v42, &v38);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    uint64_t v22 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~v7[v23 >> 6]) == 0)
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      while (++v24 != v27 || (v26 & 1) == 0)
      {
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = v7[v24];
        if (v29 != -1)
        {
          unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    unint64_t v25 = __clz(__rbit64((-1LL << v23) & ~v7[v23 >> 6])) | v23 & 0x7FFFFFFFFFFFFFC0LL;
LABEL_34:
    *(void *)((char *)v7 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t v30 = v3[6] + 40 * v25;
    *(_OWORD *)uint64_t v30 = v34;
    *(_OWORD *)(v30 + swift_weakDestroy(v0 + 16) = v35;
    *(void *)(v30 + 32) = v36;
    uint64_t result = (uint64_t)sub_1000108D8(&v38, (_OWORD *)(v3[7] + 32 * v25));
    ++v3[2];
    if (v6) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      goto LABEL_38;
    }
    if (v12 >= v31) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v32 + 8 * v12);
    int64_t v14 = v9 + 1;
    if (!v13)
    {
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v31) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v32 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v9 + 3;
        if (v9 + 3 >= v31) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v32 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 4;
          if (v9 + 4 >= v31) {
            goto LABEL_36;
          }
          unint64_t v13 = *(void *)(v32 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }

uint64_t sub_1000C15D4()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 24);
  Lock.unlock()();
  return v1;
}

void sub_1000C1614()
{
  id v1 = *(id *)(v0 + 24);
  Lock.unlock()();
  sub_10004ECC0();
}

void sub_1000C1650(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96LL);
  sub_1000A14F8(v3, (uint64_t)v4);
  sub_1000107D0(v3, a1, (uint64_t *)&unk_1001D5D20);
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C16A8(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96LL);
  sub_1000A14F8(v3, (uint64_t)v5);
  uint64_t v4 = type metadata accessor for Client(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C1710()
{
}

void sub_1000C1754()
{
  *(void *)(v0 + 24) = v1;
  swift_retain(v1);
  sub_10001443C();
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C179C()
{
  *(void *)(v0 + 24) = v1;
  swift_unknownObjectRetain(v1);
  swift_unknownObjectRelease();
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C17E8()
{
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 96LL);
  sub_100010BE4(v2, (uint64_t)v4, 33LL);
  uint64_t v3 = type metadata accessor for Client(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 24LL))(v2, v1, v3);
  swift_endAccess(v4);
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C1850()
{
  uint64_t v2 = *(void **)(v0 + 24);
  *(void *)(v0 + 24) = v1;
  id v3 = v1;

  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C1894()
{
  uint64_t v2 = v0 + *(void *)(*(void *)v0 + 96LL);
  sub_100010BE4(v2, (uint64_t)v3, 33LL);
  sub_1000C5940(v1, v2);
  swift_endAccess(v3);
  Lock.unlock()();
  sub_100014A40();
}

void sub_1000C18E8(char a1)
{
  *(_BYTE *)(v1 + 24) = a1;
  Lock.unlock()();
  sub_100014A40();
}

uint64_t sub_1000C1928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_1000C5E1C();
  if (sub_100010708(v3, 1LL, v8) == 1)
  {
    sub_100028CD0(v3, (uint64_t *)&unk_1001D0BD0);
    uint64_t v9 = 4096LL;
  }

  else
  {
    unsigned __int8 v10 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v3, v8);
    uint64_t v9 = v10 | 0x1000LL;
  }

  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType(*(void *)(a3 + 16));
    swift_unknownObjectRetain(v11);
    uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
    uint64_t v16 = v15;
    swift_unknownObjectRelease(v11);
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v16 = 0LL;
  }

  if (v16 | v14)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    uint64_t v17 = v19;
    void v19[2] = v14;
    uint64_t v19[3] = v16;
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  return swift_task_create(v9, v17, (char *)&type metadata for () + 8, a2, a3);
}

void sub_1000C1A80(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  uint64_t v4 = (void *)_convertErrorToNSError(_:)(a1);
  [v3 initWithError:v4];
  sub_100014530();

  sub_1000110D4();
}

uint64_t sub_1000C1ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v12 = (char *)v30 - v11;
  if (a3)
  {
    v30[1] = a1;
    unint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    swift_unknownObjectRetain(a3);
    id v14 = [v13 standardUserDefaults];
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 stringForKey:v15];

    if (v16)
    {
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v19 = v18;

      URL.init(string:)(v17, v19);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = type metadata accessor for URL(0LL);
      sub_100028CD0((uint64_t)v12, &qword_1001D5ED0);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  unint64_t v21 = 0xD00000000000001ELL;
  if (!a2) {
    goto LABEL_12;
  }
  Swift::String v22 = String.uppercased()();
  if (v22._countAndFlagsBits == 20035 && v22._object == (void *)0xE200000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)( v22._countAndFlagsBits,  v22._object,  20035LL,  0xE200000000000000LL,  0LL);
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
LABEL_12:
      unint64_t v21 = 0xD00000000000001FLL;
      unint64_t v25 = "https://api.smoot.apple.com/bag";
      goto LABEL_15;
    }
  }

  unint64_t v25 = "https://api.smoot.apple.cn/bag";
LABEL_15:
  URL.init(string:)(v21, (unint64_t)(v25 - 32) | 0x8000000000000000LL);
  swift_bridgeObjectRelease();
  uint64_t v26 = type metadata accessor for URL(0LL);
  sub_100028CD0(v4, &qword_1001D5ED0);
  unint64_t v27 = sub_1000C57F0();
  uint64_t v28 = swift_allocError(&type metadata for BagFetchURL.Error, v27, 0LL, 0LL);
  return swift_willThrow(v28);
}

void sub_1000C1D88()
{
}

void sub_1000C1DA4()
{
  if (qword_1001D04E8 != -1) {
    swift_once(&qword_1001D04E8, sub_1000343B4);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_1000093D0(v0, (uint64_t)qword_1001EDB88);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v7 = static os_log_type_t.info.getter(v2, v3, v4, v5, v6);
  if (os_log_type_enabled(v2, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v7, "bag refresh notification", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = Notification.userInfo.getter(v9);
  if (!v10)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    goto LABEL_13;
  }

  uint64_t v11 = v10;
  v16[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(@"context");
  v16[1] = v12;
  AnyHashable.init<A>(_:)(v16);
  sub_10000BEF0((uint64_t)v17, v11, &v18);
  swift_bridgeObjectRelease();
  sub_10000BD34((uint64_t)v17);
  if (!*((void *)&v19 + 1))
  {
LABEL_13:
    sub_100028CD0((uint64_t)&v18, (uint64_t *)&unk_1001D32C0);
    return;
  }

  uint64_t v13 = type metadata accessor for BagContext();
  if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, v13, 6LL) & 1) != 0)
  {
    id v14 = (void *)v17[0];
    NSString v15 = sub_1000C1F8C();
    if (v15)
    {
      if ((sub_100014C38(v14, v15) & 1) != 0) {
        sub_1000C20C4(0LL, 0LL);
      }
      swift_release();
    }

    swift_release();
  }

void *sub_1000C1F8C()
{
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v10 = Strong;
    sub_10004A274((uint64_t)v6);
    swift_unknownObjectRelease(v10);
    sub_1000C534C((uint64_t)v6, (uint64_t)v8);
    type metadata accessor for BagContext();
    sub_100059E88((uint64_t)v8, (uint64_t)v1);
    uint64_t v11 = sub_100014D70(v1);
    if (v11)
    {
      uint64_t v12 = v11;
      swift_retain(v11);
      sub_1000C1754();
      sub_10001443C();
      sub_1000152F4((uint64_t)v8);
      return v12;
    }

    sub_1000152F4((uint64_t)v8);
  }

  sub_1000C1710();
  uint64_t v12 = v13;
  if (!v13)
  {
    type metadata accessor for BagContext();
    id v14 = sub_100015174();
    uint64_t v12 = v14;
    if (v14)
    {
      swift_retain(v14);
      sub_1000C1754();
      sub_10001443C();
    }
  }

  return v12;
}

void sub_1000C20C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10000941C((uint64_t *)&unk_1001D0BD0);
  sub_100009B94();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(v2 + 32)
    || (uint64_t v10 = sub_10000C4AC(),
        uint64_t v11 = ConfigurationManager.configAccessProvider.getter(v10),
        uint64_t v13 = v12,
        sub_10001683C(),
        uint64_t ObjectType = swift_getObjectType(v11),
        char v15 = dispatch thunk of ConfigAccessProvider.hasPendingTasks.getter(ObjectType, v13),
        uint64_t v7 = swift_unknownObjectRelease(),
        (v15 & 1) == 0))
  {
    static TaskPriority.high.getter(v7);
    uint64_t v16 = sub_1000C5E1C();
    sub_100009654((uint64_t)v9, 0LL, 1LL, v16);
    uint64_t v17 = sub_100009ACC((uint64_t)&unk_1001B7CD0, 24LL);
    swift_weakInit(v17 + 16, *(void *)(v3 + 32));
    __int128 v18 = (void *)sub_100009ACC((uint64_t)&unk_1001B7CF8, 56LL);
    v18[2] = 0LL;
    v18[3] = 0LL;
    id v18[4] = v17;
    v18[5] = a1;
    v18[6] = a2;
    swift_bridgeObjectRetain(a2);
    sub_1000C1928((uint64_t)v9, (uint64_t)&unk_1001D69F0, (uint64_t)v18);
    swift_release();
    sub_100028CD0((uint64_t)v9, (uint64_t *)&unk_1001D0BD0);
  }

  sub_10002FBC0();
}

uint64_t sub_1000C2294()
{
  return v0;
}

uint64_t sub_1000C22C8()
{
  uint64_t v0 = sub_1000C2294();
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t sub_1000C22E4()
{
  *(void *)(v1 + sub_10000BDD4(v0 + 16) = v0;
  return swift_task_switch(sub_1000C22FC, 0LL, 0LL);
}

uint64_t sub_1000C22FC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 32LL);
  *(void *)(v0 + 24) = v1;
  if (v1)
  {
    uint64_t v2 = async function pointer to ConfigurationManager.configuration(for:forceFetch:)[1];
    sub_10000C4AC();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 32) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000C2388;
    return sub_1000C5CF0();
  }

  else
  {
    unint64_t v5 = sub_1000C5904();
    sub_100010EA0((uint64_t)&type metadata for ConfigurationController.ConfigError, v5);
    sub_1000C5DB8();
    return sub_1000C5D00(*(uint64_t (**)(void))(v0 + 8));
  }

uint64_t sub_1000C2388(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 32);
  *(void *)(v3 + 4sub_1000AC280(v0, v1, 0) = a1;
  *(void *)(v3 + 48) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    unint64_t v5 = sub_1000C2478;
  }

  else
  {
    swift_release();
    unint64_t v5 = sub_1000C23F4;
  }

  return sub_1000BCAB0((uint64_t)v5, 0LL, 0LL);
}

uint64_t sub_1000C23F4()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___PARBag);
  if (sub_100032C70(v1)) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  unint64_t v3 = sub_1000C5904();
  sub_100010EA0((uint64_t)&type metadata for ConfigurationController.ConfigError, v3);
  sub_1000C5DB8();
  swift_unknownObjectRelease();
  return sub_1000C5D00(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1000C2478()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C24AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  return swift_task_switch(sub_1000C24C8, 0LL, 0LL);
}

uint64_t sub_1000C24C8()
{
  uint64_t v1 = sub_1000C5E64();
  if (v1)
  {
    uint64_t v2 = ConfigurationManager.configAccessProvider.getter(v1);
    uint64_t v4 = v3;
    sub_10001683C();
    uint64_t ObjectType = swift_getObjectType(v2);
    char v6 = dispatch thunk of ConfigAccessProvider.hasPendingTasks.getter(ObjectType, v4);
    sub_10001449C();
    if ((v6 & 1) != 0) {
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  uint64_t v7 = v0 + 40;
  unint64_t v8 = *(void *)(v0 + 88);
  if (v8)
  {
    uint64_t v9 = qword_1001D04E8;
    sub_10005A62C();
    if (v9 != -1) {
      swift_once(&qword_1001D04E8, sub_1000343B4);
    }
    uint64_t v10 = sub_100010ED4();
    sub_1000093D0(v10, (uint64_t)qword_1001EDB88);
    uint64_t v11 = sub_10005A62C();
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v17 = static os_log_type_t.info.getter(v12, v13, v14, v15, v16);
    if (os_log_type_enabled(v12, v17))
    {
      uint64_t v18 = *(void *)(v0 + 80);
      uint64_t v19 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v20 = sub_100009B20(32LL);
      uint64_t v25 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      sub_10005A62C();
      *(void *)(v0 + 64) = sub_1000307E0(v18, v8, &v25);
      uint64_t v7 = v0 + 40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v19 + 4);
      swift_bridgeObjectRelease_n(v8, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v12, v17, "fetching bag for: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL);
      sub_100010C34(v20);
      sub_100010C34((uint64_t)v19);
    }

    else
    {
      swift_bridgeObjectRelease_n(v8, 2LL);
    }
  }

  sub_1000A14F8(*(void *)(v0 + 72) + 16LL, v7);
  uint64_t v21 = sub_1000C5E64();
  *(void *)(v0 + 9os_unfair_lock_lock(v0 + 6) = v21;
  if (!v21) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  Swift::String v22 = (void *)swift_task_alloc(async function pointer to ConfigurationManager.configuration(for:forceFetch:)[1]);
  *(void *)(v0 + 104) = v22;
  uint64_t v23 = sub_1000C5E44(v22, (uint64_t)sub_1000C2714);
  return ConfigurationManager.configuration(for:forceFetch:)(v23);
}

uint64_t sub_1000C2714()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000C27A0, 0LL, 0LL);
  }
  sub_10001449C();
  sub_10001683C();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000C27A0()
{
  return sub_10006B50C(*(uint64_t (**)(void))(v0 + 8));
}

void sub_1000C27CC()
{
  if (*(void *)(v0 + 32))
  {
    uint64_t v1 = sub_10000C4AC();
    uint64_t v2 = ConfigurationManager.configAccessProvider.getter(v1);
    uint64_t v4 = v3;
    sub_10001683C();
    uint64_t ObjectType = swift_getObjectType(v2);
    uint64_t v6 = dispatch thunk of ConfigAccessProvider.currentConfig.getter(ObjectType, v4);
    sub_1000471D0();
    if (v6)
    {
      uint64_t v7 = objc_opt_self(&OBJC_CLASS___PARBag);
      if (!swift_dynamicCastObjCClass(v6, v7)) {
        sub_10001449C();
      }
    }
  }

  sub_1000110D4();
}

void sub_1000C2844(char a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  sub_10000941C((uint64_t *)&unk_1001D0BD0);
  sub_100009B94();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000C27CC();
  if (!v15) {
    goto LABEL_5;
  }
  id v16 = v15;
  id v23 = v15;
  if ((a1 & 1) == 0)
  {
    uint64_t v17 = sub_100009788(0LL, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
    char v18 = Config.isDefault.getter(v17);
    id v16 = v23;
    if ((v18 & 1) != 0)
    {

LABEL_5:
      uint64_t v19 = sub_1000C5E1C();
      sub_100009654((uint64_t)v14, 1LL, 1LL, v19);
      uint64_t v20 = sub_100009ACC((uint64_t)&unk_1001B7CD0, 24LL);
      swift_weakInit(v20 + 16, *(void *)(v6 + 32));
      uint64_t v21 = (void *)sub_100009ACC((uint64_t)&unk_1001B7D20, 72LL);
      v21[2] = 0LL;
      v21[3] = 0LL;
      v21[4] = v20;
      v21[5] = a2;
      void v21[6] = a3;
      v21[7] = a4;
      v21[8] = a5;
      swift_retain(a3);
      swift_retain(a5);
      sub_1000C06B4((uint64_t)v14, (uint64_t)&unk_1001D6A20, (uint64_t)v21);
      swift_release();
      sub_100028CD0((uint64_t)v14, (uint64_t *)&unk_1001D0BD0);
      sub_10002FBC0();
      return;
    }
  }

  a2(v16);
}

uint64_t sub_1000C29B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return swift_task_switch(sub_1000C29D4, 0LL, 0LL);
}

uint64_t sub_1000C29D4()
{
  uint64_t v1 = sub_1000C5E64();
  *(void *)(v0 + 8sub_1000AC280(v0, v1, 0) = v1;
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc(async function pointer to ConfigurationManager.configuration(for:forceFetch:)[1]);
    *(void *)(v0 + 88) = v2;
    sub_1000C5E44(v2, (uint64_t)sub_1000C2B10);
    return sub_1000C5CF0();
  }

  else
  {
    if (qword_1001D04E8 != -1) {
      swift_once(&qword_1001D04E8, sub_1000343B4);
    }
    uint64_t v4 = sub_100010ED4();
    uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDB88);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "config is not type PARBag", v8, 2u);
      sub_100010C34((uint64_t)v8);
    }

    unint64_t v9 = sub_1000C5904();
    sub_100010EA0((uint64_t)&type metadata for ConfigurationController.ConfigError, v9);
    sub_1000C5DB8();
    sub_1000C5EA8();
    sub_100014530();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000C2B10(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 88);
  *(void *)(v3 + 9os_unfair_lock_lock(v0 + 6) = a1;
  *(void *)(v3 + 104) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_1000C2CC8;
  }

  else
  {
    swift_release();
    uint64_t v5 = sub_1000C2B7C;
  }

  return sub_1000BCAB0((uint64_t)v5, 0LL, 0LL);
}

uint64_t sub_1000C2B7C()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___PARBag);
  uint64_t v2 = sub_100032C70(v1);
  uint64_t v3 = *(void *)(v0 + 96);
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v5 = *(void (**)(uint64_t))(v0 + 48);
    swift_unknownObjectRetain(*(void *)(v0 + 96));
    v5(v4);
    swift_unknownObjectRelease_n(v3, 2LL);
  }

  else
  {
    if (qword_1001D04E8 != -1) {
      swift_once(&qword_1001D04E8, sub_1000343B4);
    }
    uint64_t v6 = sub_100010ED4();
    uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001EDB88);
    unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "config is not type PARBag", v10, 2u);
      sub_100010C34((uint64_t)v10);
    }

    unint64_t v11 = sub_1000C5904();
    uint64_t v12 = sub_100010EA0((uint64_t)&type metadata for ConfigurationController.ConfigError, v11);
    sub_1000C5DB8();
    sub_10001449C();
    (*(void (**)(uint64_t))(v0 + 64))(v12);
    swift_errorRelease(v12);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2CC8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C2D04()
{
  uint64_t v1 = v0;
  swift_release();
  if (!v1)
  {
    uint64_t result = (uint64_t)sub_1000C1F8C();
    if (!result) {
      return result;
    }
    swift_release();
  }

  return 1LL;
}

uint64_t sub_1000C2D48()
{
  uint64_t v1 = type metadata accessor for UserAgent(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URLRequest(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v13 = Strong;
    uint64_t v27 = v1;
    uint64_t v14 = sub_1000C1F8C();
    if (v14)
    {
      uint64_t v26 = v2;
      uint64_t v15 = v14;
      uint64_t v16 = type metadata accessor for PARNetworkRequestFactory();
      uint64_t inited = swift_initStackObject(v16, &v28);
      uint64_t v18 = swift_retain(v13);
      sub_1000C5390(v18, inited);
      parsecdUserAgent.getter(v19);
      sub_100051E08();
      v25[1] = v15;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v27);
      uint64_t v20 = swift_release();
      URLRequest.url.getter(v20);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v21 = type metadata accessor for URL(0LL);
      uint64_t v22 = sub_100010708((uint64_t)v11, 1LL, v21);
      if ((_DWORD)v22 != 1)
      {
        uint64_t v23 = URL.absoluteString.getter(v22);
        swift_unknownObjectRelease();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8LL))(v11, v21);
        return v23;
      }

      swift_unknownObjectRelease();
      swift_release();
      sub_100028CD0((uint64_t)v11, &qword_1001D5ED0);
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

  return 0LL;
}

uint64_t sub_1000C2FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UserAgent(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    uint64_t v8 = Strong;
    if (sub_1000C1F8C())
    {
      uint64_t v9 = type metadata accessor for PARNetworkRequestFactory();
      uint64_t inited = swift_initStackObject(v9, &v17);
      uint64_t v11 = swift_retain(v8);
      sub_1000C5390(v11, inited);
      parsecdUserAgent.getter(v12);
      sub_100051064();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v14 = type metadata accessor for URLRequest(0LL);
      return sub_100009654(a1, 0LL, 1LL, v14);
    }

    swift_unknownObjectRelease();
  }

  uint64_t v13 = type metadata accessor for URLRequest(0LL);
  return sub_100009654(a1, 1LL, 1LL, v13);
}

void sub_1000C3178()
{
  uint64_t v1 = sub_10000941C(&qword_1001D5ED0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v14[-1] - v5;
  if (swift_unknownObjectWeakLoadStrong(v0 + 16))
  {
    sub_10004A5B0();
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v18 = 0LL;
    memset(v17, 0, sizeof(v17));
  }

  sub_1000107D0((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_1001D6A08);
  uint64_t v7 = v15;
  if (v15)
  {
    uint64_t v8 = v16;
    sub_100019AFC(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    sub_1000108B8(v14);
  }

  else
  {
    sub_100028CD0((uint64_t)v14, (uint64_t *)&unk_1001D6A08);
    uint64_t v9 = type metadata accessor for URL(0LL);
    sub_100009654((uint64_t)v6, 1LL, 1LL, v9);
  }

  sub_1000107D0((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_1001D6A08);
  uint64_t v10 = v15;
  if (v15)
  {
    uint64_t v11 = v16;
    sub_100019AFC(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
    sub_1000108B8(v14);
  }

  else
  {
    sub_100028CD0((uint64_t)v14, (uint64_t *)&unk_1001D6A08);
    uint64_t v12 = type metadata accessor for URL(0LL);
    sub_100009654((uint64_t)v4, 1LL, 1LL, v12);
  }

  LocalCachePaths.init(standard:legacy:)(v6, v4);
  sub_100028CD0((uint64_t)v17, (uint64_t *)&unk_1001D6A08);
}

void sub_1000C3348(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = v2;
    uint64_t v5 = objc_opt_self(&OBJC_CLASS___PARBag);
    uint64_t v6 = swift_dynamicCastObjCClass(a2, v5);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      if (swift_unknownObjectWeakLoadStrong(v2 + 16))
      {
        uint64_t v8 = qword_1001D04E8;
        swift_unknownObjectRetain(a2);
        if (v8 != -1) {
          swift_once(&qword_1001D04E8, sub_1000343B4);
        }
        uint64_t v9 = type metadata accessor for Logger(0LL);
        uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDB88);
        uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v16 = static os_log_type_t.info.getter(v11, v12, v13, v14, v15);
        if (os_log_type_enabled(v11, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v16, "New bag loaded", v17, 2u);
          swift_slowDealloc(v17, -1LL, -1LL);
        }

        id v18 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
        uint64_t v19 = sub_10000941C((uint64_t *)&unk_1001D32A0);
        uint64_t inited = swift_initStackObject(v19, v42);
        *(_OWORD *)(inited + sub_1000A14F8(*(void *)(v0 + 40) + 16LL, v0 + 16) = xmmword_10015C7F0;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bag");
        uint64_t v41 = v21;
        AnyHashable.init<A>(_:)(&v40);
        uint64_t v22 = sub_100009788(0LL, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
        *(void *)(inited + 9os_unfair_lock_lock(v0 + 6) = v22;
        *(void *)(inited + 72) = v7;
        swift_unknownObjectRetain(a2);
        uint64_t v23 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
        sub_1000C5160((uint64_t)@"PARBagChangeNotification", 0LL, v23, v18);

        uint64_t v24 = Config.isDefault.getter(v22);
        if ((v24 & 1) == 0)
        {
          uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
          os_log_type_t v26 = static os_log_type_t.debug.getter(v25);
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v27 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Broadcasting distributed notification on bag change",  v27,  2u);
            swift_slowDealloc(v27, -1LL, -1LL);
          }

          id v28 = [(id)objc_opt_self(NSDistributedNotificationCenter) defaultCenter];
          if (qword_1001D0498 != -1) {
            swift_once(&qword_1001D0498, sub_10002917C);
          }
          [v28 postNotificationName:qword_1001EDAB8 object:0];
        }

        unsigned __int8 v29 = sub_1000C3774(v7);
        uint64_t v30 = *(void *)(v3 + 40);
        *(void *)(v3 + 4sub_1000AC280(v0, v1, 0) = v29 & 1;
        if (v30 != (v29 & 1))
        {
          uint64_t v31 = swift_retain(v3);
          uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
          os_log_type_t v37 = static os_log_type_t.info.getter(v32, v33, v34, v35, v36);
          if (os_log_type_enabled(v32, v37))
          {
            __int128 v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            *(_DWORD *)__int128 v38 = 134217984;
            uint64_t v40 = *(void *)(v3 + 40);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v38 + 4);
            swift_release();
            _os_log_impl( (void *)&_mh_execute_header,  v32,  v37,  "setting Parsec News Available status to %lu",  v38,  0xCu);
            swift_slowDealloc(v38, -1LL, -1LL);
          }

          else
          {

            swift_release();
          }

          __int128 v39 = (const char **)&kPARNotifyDisabled;
          if ((v29 & 1) != 0) {
            __int128 v39 = (const char **)&kPARNotifyEnabled;
          }
          notify_post(*v39);
        }

        notify_post(kPARNotifyBagChange);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }

id sub_1000C3774(void *a1)
{
  uint64_t v2 = sub_100009788(0LL, (unint64_t *)&qword_1001D47F0, &OBJC_CLASS___PARBag_ptr);
  if ((Config.isDefault.getter(v2) & 1) != 0) {
    return 0LL;
  }
  id v4 = objc_allocWithZone(&OBJC_CLASS___PARBag);
  sub_1000C4C48(a1, 0x312F7377656ELL, 0xE600000000000000LL);
  uint64_t v6 = v5;
  id v3 = [v5 isEnabled];

  return v3;
}

BOOL sub_1000C3800()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  uint64_t v2 = Strong;
  if (Strong) {
    swift_unknownObjectRelease(Strong);
  }
  return v2 != 0;
}

uint64_t sub_1000C3838@<X0>(uint64_t a1@<X8>)
{
  if (swift_unknownObjectWeakLoadStrong(v1 + 16))
  {
    if ((sub_1000348EC() & 1) != 0)
    {
      uint64_t v3 = type metadata accessor for ShouldThrottleConfigFetchResult(0LL);
      sub_100009654(a1, 1LL, 1LL, v3);
      return swift_unknownObjectRelease();
    }

    sub_1000C18E8(1);
    swift_unknownObjectRelease();
    uint64_t v5 = enum case for ShouldThrottleConfigFetchResultReason.termsAndConditionsNotAccepted(_:);
  }

  else
  {
    uint64_t v5 = enum case for ShouldThrottleConfigFetchResultReason.noAssembly(_:);
  }

  uint64_t ResultReason = type metadata accessor for ShouldThrottleConfigFetchResultReason(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ResultReason - 8) + 104LL))(a1, v5, ResultReason);
  uint64_t v7 = enum case for ShouldThrottleConfigFetchResult.yes(_:);
  uint64_t v8 = type metadata accessor for ShouldThrottleConfigFetchResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104LL))(a1, v7, v8);
  return sub_100009654(a1, 0LL, 1LL, v8);
}

id sub_1000C393C(uint64_t a1)
{
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___PARBag);
  uint64_t v3 = swift_dynamicCastObjCClass(a1, v2);
  if (!v3) {
    return 0LL;
  }
  id v4 = (void *)v3;
  swift_unknownObjectRetain(a1);
  id v5 = [v4 isRefreshDisabled];
  if ((_DWORD)v5)
  {
    if (qword_1001D04E8 != -1) {
      swift_once(&qword_1001D04E8, sub_1000343B4);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_1000093D0(v6, (uint64_t)qword_1001EDB88);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v13 = static os_log_type_t.info.getter(v8, v9, v10, v11, v12);
    if (os_log_type_enabled(v8, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v13, "Bag refresh is disabled", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }
  }

  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1000C3A68@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v3);
  id v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UserAgent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    uint64_t v32 = v7;
    parsecdUserAgent.getter(result);
    sub_1000486D0();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    URLRequest.url.getter(v11);
    uint64_t v15 = type metadata accessor for URL(0LL);
    uint64_t v16 = sub_100010708((uint64_t)v5, 1LL, v15);
    uint64_t v33 = v14;
    uint64_t v34 = v6;
    if ((_DWORD)v16 == 1)
    {
      sub_100028CD0((uint64_t)v5, &qword_1001D5ED0);
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v18 = URL.absoluteString.getter(v16);
      uint64_t v19 = v20;
      uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8LL))(v5, v15);
    }

    uint64_t v21 = v12;
    uint64_t v22 = v32;
    uint64_t v23 = URLRequest.allHTTPHeaderFields.getter(v17);
    if (v23)
    {
      uint64_t v24 = sub_1000C1220(v23);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v24 = 0LL;
    }

    id v25 = objc_allocWithZone(&OBJC_CLASS___SFStartNetworkSearchFeedback);
    id v26 = sub_1000C4CB4(0LL, 0xE000000000000000LL, v18, v19, v24, 16LL, 10LL);
    sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
    id v27 = v26;
    sub_1000A4734(v27, 0LL);
    unsigned __int8 v29 = v28;
    sub_1000A5CB4();

    a1[3] = &type metadata for ConfigurationController.FeedbackContext;
    swift_unknownObjectRelease();
    *a1 = v27;
    a1[1] = v21;
    uint64_t v30 = v34;
    a1[2] = v33;
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v9, v30);
  }

  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + sub_1000A0380(v0, 1) = 0u;
  }

  return result;
}

void sub_1000C3CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UserAgent(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a2, (uint64_t)v27, (uint64_t *)&unk_1001D32C0);
  if (v28)
  {
    if ((swift_dynamicCast( &v26,  v27,  (char *)&type metadata for Any + 8,  &type metadata for ConfigurationController.FeedbackContext,  6LL) & 1) == 0) {
      return;
    }
    uint64_t v7 = v26;
    uint64_t v8 = URLDataSourceOutput.response.getter();
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
      uint64_t v11 = (void *)swift_dynamicCastObjCClass(v9, v10);
      if (v11)
      {
        id v12 = [v11 statusCode];

        id v13 = v7;
        uint64_t v14 = URLDataSourceOutput.data.getter();
        unint64_t v16 = v15;
        uint64_t v17 = Data.count.getter(v14, v15);
        uint64_t v18 = sub_100010A30(v14, v16);
        uint64_t v19 = URLDataSourceOutput.timingInfo.getter(v18);
        id v20 = objc_allocWithZone(&OBJC_CLASS___SFEndNetworkSearchFeedback);
        id v21 = sub_1000C4DB4(v13, v17, (uint64_t)v12, v19);
        sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
        id v22 = v21;
        sub_1000A4734(v22, 0LL);
        uint64_t v24 = v23;
        parsecdUserAgent.getter(v23);
        sub_1000A5CB4();

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        return;
      }
    }

    swift_unknownObjectRelease();
  }

  else
  {
    sub_100028CD0((uint64_t)v27, (uint64_t *)&unk_1001D32C0);
  }

void sub_1000C3E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserAgent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a2, (uint64_t)v16, (uint64_t *)&unk_1001D32C0);
  if (v17)
  {
    if ((swift_dynamicCast( &v15,  v16,  (char *)&type metadata for Any + 8,  &type metadata for ConfigurationController.FeedbackContext,  6LL) & 1) != 0)
    {
      uint64_t v8 = v15;
      sub_100009788(0LL, &qword_1001D3698, &OBJC_CLASS___SFErrorFeedback_ptr);
      swift_errorRetain(a1);
      sub_1000C1A80(a1);
      uint64_t v10 = v9;
      sub_100009788(0LL, (unint64_t *)&unk_1001D36A0, &OBJC_CLASS____CPFeedbackPayload_ptr);
      id v11 = v10;
      sub_1000A4734(v11, 0LL);
      id v13 = v12;
      parsecdUserAgent.getter(v12);
      sub_1000A5CB4();

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }

  else
  {
    sub_100028CD0((uint64_t)v16, (uint64_t *)&unk_1001D32C0);
  }

BOOL PARBag.isExpired.getter()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100019EB4();
  uint64_t v4 = Date.init()(v3);
  double v5 = Date.timeIntervalSince1970.getter(v4);
  sub_1000C5E58(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  [v0 expirationDate];
  return v6 < v5;
}

uint64_t PARBag.searchURLString.getter()
{
  uint64_t v1 = v0;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  uint64_t v3 = __chkstk_darwin(v2);
  double v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  id v8 = [v1 searchURL];
  if (v8)
  {
    uint64_t v9 = v8;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v8);

    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = (uint64_t)v5;
    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = (uint64_t)v5;
    uint64_t v12 = 1LL;
  }

  sub_100009654(v11, v12, 1LL, v10);
  sub_10004E6C4((uint64_t)v5, (uint64_t)v7, &qword_1001D5ED0);
  type metadata accessor for URL(0LL);
  uint64_t v13 = sub_100010708((uint64_t)v7, 1LL, v10);
  if ((_DWORD)v13 == 1)
  {
    sub_100028CD0((uint64_t)v7, &qword_1001D5ED0);
    return 0LL;
  }

  else
  {
    uint64_t v14 = URL.absoluteString.getter(v13);
    sub_1000C5E58(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL));
  }

  return v14;
}

Swift::OpaquePointer_optional __swiftcall PARBag.rawConfig()()
{
  uint64_t v1 = (void *)sub_1000C51E8(v0);
  result.value._rawValue = v1;
  result.is_nil = v2;
  return result;
}

void PARBag.findConfig(forUserAgent:)(uint64_t a1, uint64_t a2)
{
}

double PARBag.value(forKey:ofType:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v3 valueForKey:v6 override:1];

  _bridgeAnyObjectToAny(_:)(v7);
  sub_1000471D0();
  uint64_t v8 = sub_10000941C((uint64_t *)&unk_1001D68E8);
  if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
  {
    uint64_t v9 = v12;
    uint64_t ObjectType = swift_getObjectType(v12);
    if ([v9 isKindOfClass:swift_getObjCClassFromMetadata(a1)])
    {
      *(void *)(a2 + 24) = ObjectType;
      *(void *)a2 = v9;
      return result;
    }

    sub_1000471D0();
  }

  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + sub_1000A14F8(*(void *)(v0 + 40) + 16LL, v0 + 16) = 0u;
  return result;
}

uint64_t PARBag.value(forKey:shouldConsiderOverrides:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 valueForKey:v5 override:a3 & 1];

  _bridgeAnyObjectToAny(_:)(v6);
  return swift_unknownObjectRelease(v6);
}

Swift::Bool __swiftcall PARBag.configBool(forKey:)(Swift::String forKey)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForKey:v2 shouldConsiderOverrides:1];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    sub_10001449C();
  }

  else
  {
    memset(v7, 0, sizeof(v7));
  }

  sub_10004E6C4((uint64_t)v7, (uint64_t)v8, (uint64_t *)&unk_1001D32C0);
  if (v9)
  {
    int v4 = swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL);
    if (v4) {
      LOBYTE(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v6 > 0;
    }
  }

  else
  {
    sub_100028CD0((uint64_t)v8, (uint64_t *)&unk_1001D32C0);
    LOBYTE(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 0;
  }

  return v4;
}

id sub_1000C4868(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, a1);
  objc_allocWithZone(&OBJC_CLASS___PARBag);
  id v11 = a4;
  swift_bridgeObjectRetain(a3);
  return sub_1000C4E5C((uint64_t)v9, a3, a4, v12);
}

id sub_1000C4A14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = objc_allocWithZone(&OBJC_CLASS___PARBag);
  sub_100014244(a1, a2);
  id v11 = a5;
  swift_bridgeObjectRetain(a4);
  return sub_1000C4F10(a1, a2, a3, a4, a5);
}

id sub_1000C4B68()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

void sub_1000C4BBC()
{
}

void sub_1000C4BDC()
{
}

void sub_1000C4C14(uint64_t a1)
{
}

void sub_1000C4C48(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v5 = 0LL;
  }

  [v3 initWithBag:a1 userAgent:v5];

  sub_1000110D4();
}

id sub_1000C4CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  if (a2)
  {
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v15 = 0LL;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    v16.super.Class isa = 0LL;
    goto LABEL_8;
  }

  NSString v14 = 0LL;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a5);
LABEL_8:
  id v17 = [v8 initWithInput:v14 url:v15 headers:v16.super.isa triggerEvent:a6 endpoint:a7];

  return v17;
}

id sub_1000C4DB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v5 = v4;
  if (a4)
  {
    v10.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a4);
  }

  else
  {
    v10.super.Class isa = 0LL;
  }

  id v11 = [v5 initWithStartSearch:a1 responseSize:a2 statusCode:a3 networkTimingData:v10.super.isa];

  return v11;
}

id sub_1000C4E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, NSURL *a4@<X8>)
{
  NSString v5 = v4;
  URL._bridgeToObjectiveC()(a4);
  NSDictionary v10 = v9;
  if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v11 = 0LL;
  }

  id v12 = [v5 initWithURL:v10 userAgent:v11 userDefaults:a3];

  uint64_t v13 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(a1, v13);
  return v12;
}

id sub_1000C4F10(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  v11.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    NSString v12 = 0LL;
  }

  id v13 = [v6 initWithData:v11.super.isa userAgent:v12 userDefaults:a5];

  sub_100010A30(a1, a2);
  return v13;
}

uint64_t sub_1000C4FC0(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_10000941C((uint64_t *)&unk_1001D0BD0);
  __chkstk_darwin(v14);
  NSDictionary v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000107D0(a1, (uint64_t)v16, (uint64_t *)&unk_1001D0BD0);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  if (sub_100010708((uint64_t)v16, 1LL, v17) == 1)
  {
    sub_100028CD0((uint64_t)v16, (uint64_t *)&unk_1001D0BD0);
    uint64_t result = 0LL;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }

  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
    uint64_t result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if ((a3 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }

  result |= 0x100uLL;
  if ((a3 & 1) != 0)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

uint64_t sub_1000C5100(uint64_t a1, int *a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = swift_task_alloc(a2[1]);
  NSString v5 = (void *)sub_10006B7E8(v4);
  *NSString v5 = v2;
  v5[1] = sub_100069F78;
  return v7(a1);
}

void sub_1000C5160(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  [a4 postNotificationName:a1 object:a2 userInfo:isa];
}

uint64_t sub_1000C51E8(void *a1)
{
  id v1 = [a1 rawBag];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v1,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v3;
}

uint64_t type metadata accessor for ConfigurationController()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecdP33_A71F4EB6BEA682B89431D07BAC0060AE23ConfigurationController);
}

uint64_t type metadata accessor for PARBagConfigFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecdP33_A71F4EB6BEA682B89431D07BAC0060AE19PARBagConfigFactory);
}

uint64_t sub_1000C5290()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C52B4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000C52E8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc(dword_1001D69EC);
  uint64_t v3 = (void *)sub_10006B7E8(v2);
  uint64_t v4 = sub_1000C5D34(v3);
  return sub_1000C24AC(v4, v5, v6, v7, v8, v1);
}

uint64_t sub_1000C534C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusContext(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_1000C5390(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = 0LL;
  uint64_t v4 = swift_unknownObjectWeakInit(a2 + 16, 0LL);
  *(void *)(a2 + 4sub_1000AC280(v0, v1, 0) = 0xE600000000000000LL;
  *(void *)(a2 + 48) = 7041900LL;
  *(void *)(a2 + 5os_unfair_lock_lock(v0 + 6) = 0xE300000000000000LL;
  *(void *)(a2 + 64) = 7627109LL;
  *(void *)(a2 + 72) = 0xE300000000000000LL;
  *(void *)(a2 + 8sub_1000AC280(v0, v1, 0) = 0x6C616E7265746E69LL;
  *(void *)(a2 + 88) = 0xE800000000000000LL;
  *(void *)(a2 + 9os_unfair_lock_lock(v0 + 6) = 1684366707LL;
  *(void *)(a2 + 104) = 0xE400000000000000LL;
  *(void *)(a2 + 112) = 0x636F6C5F69726973LL;
  *(void *)(a2 + 12sub_1000AC280(v0, v1, 0) = 0xEB00000000656C61LL;
  *(void *)(a2 + 128) = 0x6C62616E655F7368LL;
  *(void *)(a2 + 13os_unfair_lock_lock(v0 + 6) = 0xEA00000000006465LL;
  *(void *)(a2 + 144) = 0x676E6C74616CLL;
  *(void *)(a2 + 152) = 0xE600000000000000LL;
  *(void *)(a2 + 16sub_1000AC280(v0, v1, 0) = 113LL;
  *(void *)(a2 + 168) = 0xE100000000000000LL;
  *(void *)(a2 + 17os_unfair_lock_lock(v0 + 6) = 0x676E616C71LL;
  *(void *)(a2 + 184) = 0xE500000000000000LL;
  *(void *)(a2 + 192) = 0x6F726665726F7473LL;
  *(void *)(a2 + 20sub_1000AC280(v0, v1, 0) = 0xEA0000000000746ELL;
  *(void *)(a2 + 208) = 7826298LL;
  *(void *)(a2 + 2swift_weakDestroy(v0 + 16) = 0xE300000000000000LL;
  *(void *)(a2 + 224) = 0x6574736567677573LL;
  *(void *)(a2 + 232) = 0xE900000000000064LL;
  *(void *)(a2 + 24sub_1000AC280(v0, v1, 0) = 0x746963696C707865LL;
  *(void *)(a2 + 248) = 0xE800000000000000LL;
  *(void *)(a2 + 25os_unfair_lock_lock(v0 + 6) = 0x656C61636F6CLL;
  *(void *)(a2 + 264) = 0xE600000000000000LL;
  *(void *)(a2 + 272) = 0x7261646E656C6163LL;
  *(void *)(a2 + 28sub_1000AC280(v0, v1, 0) = 0xE800000000000000LL;
  *(void *)(a2 + 288) = 6829106LL;
  *(void *)(a2 + 312) = 0xE300000000000000LL;
  *(void *)(a2 + 32sub_1000AC280(v0, v1, 0) = 49LL;
  *(void *)(a2 + 328) = 0xE100000000000000LL;
  *(void *)(a2 + 33os_unfair_lock_lock(v0 + 6) = 48LL;
  *(void *)(a2 + 344) = 0xE100000000000000LL;
  *(void *)(a2 + 352) = 0x6E6F6973726576LL;
  *(void *)(a2 + 36sub_1000AC280(v0, v1, 0) = 0xE700000000000000LL;
  *(void *)(a2 + 368) = 0x656D695F626BLL;
  *(void *)(a2 + 37os_unfair_lock_lock(v0 + 6) = 0xE600000000000000LL;
  *(void *)(a2 + 384) = 0x6E69616D6F646CLL;
  *(void *)(a2 + 392) = 0xE700000000000000LL;
  *(void *)(a2 + 40sub_1000AC280(v0, v1, 0) = 0x747865746E6F63LL;
  *(void *)(a2 + 408) = 0xE700000000000000LL;
  *(void *)(a2 + 4swift_weakDestroy(v0 + 16) = 1886217588LL;
  *(void *)(a2 + 424) = 0xE400000000000000LL;
  *(void *)(a2 + 432) = 0x676E616C7874636CLL;
  *(void *)(a2 + 44sub_1000AC280(v0, v1, 0) = 0xE800000000000000LL;
  *(void *)(a2 + 448) = 0x657079746CLL;
  *(void *)(a2 + 45os_unfair_lock_lock(v0 + 6) = 0xE500000000000000LL;
  *(void *)(a2 + 464) = 0x746C7561666564LL;
  *(void *)(a2 + 472) = 0xE700000000000000LL;
  *(void *)(a2 + 48sub_1000AC280(v0, v1, 0) = 1953393000LL;
  *(void *)(a2 + 29os_unfair_lock_lock(v0 + 6) = 0xE300000000000000LL;
  *(void *)(a2 + 304) = 7104883LL;
  *(void *)(a2 + 488) = 0xE400000000000000LL;
  *(void *)(a2 + 49os_unfair_lock_lock(v0 + 6) = 0x746963696C707865LL;
  *(void *)(a2 + 504) = 0xE800000000000000LL;
  *(void *)(a2 + 512) = 1701080941LL;
  *(void *)(a2 + 52sub_1000AC280(v0, v1, 0) = 0xE400000000000000LL;
  *(void *)(a2 + 528) = 0x646567616E616DLL;
  *(void *)(a2 + 53os_unfair_lock_lock(v0 + 6) = 0xE700000000000000LL;
  *(void *)(a2 + 544) = 25443LL;
  *(void *)(a2 + 552) = 0xE200000000000000LL;
  *(void *)(a2 + 56sub_1000AC280(v0, v1, 0) = 0x6E6F7A5F656D6974LL;
  *(void *)(a2 + 568) = 0xE900000000000065LL;
  *(void *)(a2 + 57os_unfair_lock_lock(v0 + 6) = 0x6D617473656D6974LL;
  *(void *)(a2 + 584) = 0xE900000000000070LL;
  *(void *)(a2 + 592) = 0x746E656761LL;
  *(void *)(a2 + 60sub_1000AC280(v0, v1, 0) = 0xE500000000000000LL;
  *(void *)(a2 + 608) = 1685217635LL;
  *(void *)(a2 + 6swift_weakDestroy(v0 + 16) = 0xE400000000000000LL;
  *(void *)(a2 + 624) = 7107429LL;
  *(void *)(a2 + 632) = 0xE300000000000000LL;
  strcpy((char *)(a2 + 640), "If-None-Match");
  *(_WORD *)(a2 + 654) = -4864;
  *(void *)(a2 + 65os_unfair_lock_lock(v0 + 6) = 2037149295LL;
  *(void *)(a2 + 664) = 0xE400000000000000LL;
  *(void *)(a2 + 672) = 0x706F7468746977LL;
  *(void *)(a2 + 68sub_1000AC280(v0, v1, 0) = 0xE700000000000000LL;
  *(void *)(a2 + 688) = 0xD000000000000014LL;
  *(void *)(a2 + 69os_unfair_lock_lock(v0 + 6) = 0x8000000100171CC0LL;
  *(void *)(a2 + 704) = 0x6F74687469777273LL;
  *(void *)(a2 + 712) = 0xE900000000000070LL;
  *(void *)(a2 + 72sub_1000AC280(v0, v1, 0) = 12908LL;
  *(void *)(a2 + 728) = 0xE200000000000000LL;
  *(void *)(a2 + 73os_unfair_lock_lock(v0 + 6) = 13164LL;
  *(void *)(a2 + 744) = 0xE200000000000000LL;
  *(void *)(a2 + 752) = 7299948LL;
  *(void *)(a2 + 76sub_1000AC280(v0, v1, 0) = 0xE300000000000000LL;
  *(void *)(a2 + 768) = 7562092LL;
  *(void *)(a2 + 77os_unfair_lock_lock(v0 + 6) = 0xE300000000000000LL;
  *(void *)(a2 + 784) = 0xD000000000000010LL;
  *(void *)(a2 + 792) = 0x800000010016CDD0LL;
  *(void *)(a2 + 80sub_1000AC280(v0, v1, 0) = 28020LL;
  *(void *)(a2 + 808) = 0xE200000000000000LL;
  *(void *)(a2 + 8swift_weakDestroy(v0 + 16) = 0x6F6E72657375LL;
  *(void *)(a2 + 824) = 0xE600000000000000LL;
  *(void *)(a2 + 832) = 0x7374696E75LL;
  *(void *)(a2 + 84sub_1000AC280(v0, v1, 0) = 0xE500000000000000LL;
  *(void *)(a2 + 848) = 29040LL;
  *(void *)(a2 + 85os_unfair_lock_lock(v0 + 6) = 0xE200000000000000LL;
  *(void *)(a2 + 864) = 0x636967616DLL;
  *(void *)(a2 + 872) = 0xE500000000000000LL;
  *(void *)(a2 + 88sub_1000AC280(v0, v1, 0) = 0x747065636341LL;
  *(void *)(a2 + 888) = 0xE600000000000000LL;
  *(void *)(a2 + 89os_unfair_lock_lock(v0 + 6) = 0xD000000000000016LL;
  *(void *)(a2 + 904) = 0x8000000100171CE0LL;
  *(void *)(a2 + 912) = 7370853LL;
  *(void *)(a2 + 92sub_1000AC280(v0, v1, 0) = 0xE300000000000000LL;
  *(void *)(a2 + 24) = &off_1001B3A58;
  *(void *)(a2 + 32) = 0x6372736F6567LL;
  swift_unknownObjectWeakAssign(v4, a1);
  sub_10001683C();
  sub_100009A90();
}

unint64_t sub_1000C57F0()
{
  unint64_t result = qword_1001D6A00;
  if (!qword_1001D6A00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162FFC, &type metadata for BagFetchURL.Error);
    atomic_store(result, (unint64_t *)&qword_1001D6A00);
  }

  return result;
}

uint64_t sub_1000C582C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1000C5868()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = swift_task_alloc(dword_1001D6A1C);
  uint64_t v5 = (void *)sub_10006B7E8(v4);
  uint64_t v6 = sub_1000C5D34(v5);
  return sub_1000C29B4(v6, v7, v8, v9, v10, v1, v2, v3);
}

uint64_t sub_1000C58E0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1000C5904()
{
  unint64_t result = qword_1001D6A38;
  if (!qword_1001D6A38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162FBC, &type metadata for ConfigurationController.ConfigError);
    atomic_store(result, &qword_1001D6A38);
  }

  return result;
}

uint64_t sub_1000C5940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ConfigurationController.ConfigError()
{
  return &type metadata for ConfigurationController.ConfigError;
}

uint64_t _s7parsecd23ConfigurationControllerC11ConfigErrorOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000C59E0 + 4 * byte_100162DB0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000C5A00 + 4 * byte_100162DB5[v4]))();
  }
}

_BYTE *sub_1000C59E0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000C5A00(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000C5A08(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000C5A10(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000C5A18(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000C5A20(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BagFetchURL.Error()
{
  return &type metadata for BagFetchURL.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  __int128 v6 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v6;
  id v4 = v3;
  swift_unknownObjectRetain(v6);
  return a1;
}

uint64_t destroy for ConfigurationController.FeedbackContext(uint64_t a1)
{
  return swift_unknownObjectRelease(*(void *)(a1 + 8));
}

uint64_t assignWithCopy for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v9);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  return a1;
}

uint64_t assignWithTake for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigurationController.FeedbackContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      uint64_t v2 = *a1;
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigurationController.FeedbackContext( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ConfigurationController.FeedbackContext()
{
  return &type metadata for ConfigurationController.FeedbackContext;
}

unint64_t sub_1000C5BEC()
{
  unint64_t result = qword_1001D6A58;
  if (!qword_1001D6A58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162F2C, &type metadata for BagFetchURL.Error);
    atomic_store(result, (unint64_t *)&qword_1001D6A58);
  }

  return result;
}

unint64_t sub_1000C5C2C()
{
  unint64_t result = qword_1001D6A60;
  if (!qword_1001D6A60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100162F94, &type metadata for ConfigurationController.ConfigError);
    atomic_store(result, (unint64_t *)&qword_1001D6A60);
  }

  return result;
}

void sub_1000C5C6C()
{
}

void sub_1000C5C7C()
{
}

  ;
}

uint64_t sub_1000C5CB4()
{
  return static _DictionaryStorage.allocate(capacity:)(v0);
}

uint64_t sub_1000C5CC4@<X0>(uint64_t a1@<X8>)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16 * v1 + 8));
}

  ;
}

uint64_t sub_1000C5CF0()
{
  return ((uint64_t (*)(void))ConfigurationManager.configuration(for:forceFetch:))();
}

uint64_t sub_1000C5D00(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000C5D10(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
  uint64_t v7 = (void *)(*(void *)(v3 + 48) + 16 * v4);
  *uint64_t v7 = v5;
  v7[1] = v6;
}

uint64_t sub_1000C5D34(void *a1)
{
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

  ;
}

uint64_t sub_1000C5D60(uint64_t a1, uint64_t a2)
{
  return swift_dynamicCast(v2, a2, v4, v3, 7LL);
}

void sub_1000C5D74()
{
  void *v0 = v1;
  v0[1] = v2;
}

uint64_t sub_1000C5D90()
{
  return v2 - 120;
}

uint64_t sub_1000C5DB8()
{
  return swift_willThrow();
}

uint64_t sub_1000C5DC0()
{
  return sub_1000108B8((void *)(*(void *)(v0 + 56) + 32 * v1));
}

  ;
}

unint64_t sub_1000C5DDC()
{
  return sub_10000EC64(v0, v1);
}

_OWORD *sub_1000C5DE8(_OWORD *a1)
{
  return sub_1000108D8(a1, v1);
}

  ;
}

  ;
}

  ;
}

void sub_1000C5E14()
{
}

uint64_t sub_1000C5E1C()
{
  return type metadata accessor for TaskPriority(0LL);
}

  ;
}

  ;
}

uint64_t sub_1000C5E44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *a1 = v2;
  a1[1] = a2;
  return 7LL;
}

uint64_t sub_1000C5E58@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000C5E64()
{
  return swift_weakLoadStrong(v0);
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000C5EA8()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 64))(v0);
}

uint64_t sub_1000C5EB4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.RawPointer + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 88);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1000C5F30()
{
  uint64_t v1 = *v0;
  swift_slowDealloc(*(uint64_t *)((char *)v0 + *(void *)(*v0 + 96)), -1LL, -1LL);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 88));
  return v0;
}

uint64_t sub_1000C5F80()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AtomicProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AtomicProperty);
}

uint64_t sub_1000C5FB0(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  swift_errorRetain(a1);
  uint64_t v2 = (void *)_convertErrorToNSError(_:)(a1);
  id v3 = [v2 userInfo];
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  swift_bridgeObjectRetain(v4);
  sub_1000DBE28();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  char v7 = sub_1000C61C0(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_release();
  id v9 = sub_100047258(v8, "domain");
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  id v14 = sub_100047258(v13, "code");
  uint64_t v15 = (uint64_t)v14;
  if ((v7 & 1) != 0)
  {
    id v16 = sub_100047258((uint64_t)v14, "userInfo");
    uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v16,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  id v19 = objc_allocWithZone(&OBJC_CLASS___NSError);
  uint64_t v18 = sub_1000765BC(v10, v12, v15, v17);
  swift_errorRelease(a1);

  return v18;
}

uint64_t sub_1000C612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = Dictionary.values.getter();
  uint64_t v7 = type metadata accessor for Dictionary.Values(0LL, a2, a3, a4);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v7);
  uint64_t v9 = Array.init<A>(_:)(&v11, a3, v7, WitnessTable);
  LOBYTE(a3) = sub_1000C63CC(v9, a3);
  swift_bridgeObjectRelease();
  return a3 & 1;
}

uint64_t sub_1000C61C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain(a1);
    while (1)
    {
      sub_100010758(v2, (uint64_t)v18);
      sub_100010758((uint64_t)v18, (uint64_t)v14);
      uint64_t v3 = sub_10000941C(&qword_1001D6BB0);
      if ((swift_dynamicCast(v12, v14, (char *)&type metadata for Any + 8, v3, 6LL) & 1) != 0)
      {
        sub_100019BC4(v12, (uint64_t)&v15);
        uint64_t v4 = *((void *)&v16 + 1);
        uint64_t v5 = v17;
        sub_100019AFC(&v15, *((uint64_t *)&v16 + 1));
        char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
        sub_1000108B8(&v15);
        if ((v6 & 1) == 0) {
          goto LABEL_15;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
        memset(v12, 0, sizeof(v12));
        sub_100014358((uint64_t)v12, &qword_1001D6BB8);
        sub_100010758((uint64_t)v18, (uint64_t)&v15);
        uint64_t v7 = sub_100009788(0LL, &qword_1001D6BC0, &OBJC_CLASS___NSString_ptr);
        uint64_t v8 = 0LL;
        if ((swift_dynamicCast(v12, &v15, (char *)&type metadata for Any + 8, v7, 6LL) & 1) != 0)
        {
          uint64_t v8 = *(void *)&v12[0];
        }

        sub_100010758((uint64_t)v18, (uint64_t)&v15);
        if (v8)
        {
          sub_1000108B8(&v15);
        }

        else
        {
          sub_1000108D8(&v15, v12);
          uint64_t v9 = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
          if ((swift_dynamicCast(v14, v12, (char *)&type metadata for Any + 8, v9, 6LL) & 1) == 0)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            sub_1000108D8(v18, &v15);
            uint64_t v10 = 0LL;
            goto LABEL_16;
          }
        }
      }

      sub_1000108B8(v18);
      v2 += 32LL;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v10 = 1LL;
LABEL_16:
  sub_100014358((uint64_t)&v15, (uint64_t *)&unk_1001D32C0);
  return v10;
}

BOOL sub_1000C63CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v12[-v6];
  uint64_t v14 = a1;
  uint64_t v13 = a2;
  uint64_t v8 = type metadata accessor for Array(0LL, a2);
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v8);
  Sequence.first(where:)(sub_1000C6720, v12, v8, WitnessTable);
  BOOL v10 = sub_100010708((uint64_t)v7, 1LL, a2) == 1;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t sub_1000C64B0(uint64_t *a1)
{
  return sub_1000C612C(*v1, a1[2], a1[3], a1[4]);
}

uint64_t sub_1000C64C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  BOOL v10 = (char *)v26 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v26 - v12;
  __chkstk_darwin(v11);
  __int128 v15 = (char *)v26 - v14;
  __int128 v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16((char *)v26 - v14, a1, a2);
  uint64_t v17 = sub_10000941C(&qword_1001D6BB0);
  if ((swift_dynamicCast(v26, v15, a2, v17, 6LL) & 1) != 0)
  {
    sub_100019BC4(v26, (uint64_t)v28);
    uint64_t v18 = v29;
    uint64_t v19 = v30;
    sub_100019AFC(v28, v29);
    char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19) ^ 1;
    sub_1000108B8(v28);
  }

  else
  {
    uint64_t v27 = 0LL;
    memset(v26, 0, sizeof(v26));
    sub_100014358((uint64_t)v26, &qword_1001D6BB8);
    v16(v13, a1, a2);
    uint64_t v21 = sub_100009788(0LL, &qword_1001D6BC0, &OBJC_CLASS___NSString_ptr);
    if ((swift_dynamicCast(v28, v13, a2, v21, 6LL) & 1) != 0)
    {
      id v22 = v28[0];

      v16(v10, a1, a2);
      if (v22)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v10, a2);
        char v20 = 0;
        return v20 & 1;
      }
    }

    else
    {
      v16(v10, a1, a2);
    }

    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v10, a2);
    uint64_t v23 = sub_100009788(0LL, &qword_1001D3170, &OBJC_CLASS___NSNumber_ptr);
    int v24 = swift_dynamicCast(v28, v7, a2, v23, 6LL);
    if (v24) {

    }
    char v20 = v24 ^ 1;
  }

  return v20 & 1;
}

BOOL sub_1000C6710(uint64_t a1)
{
  return sub_1000C63CC(*v1, *(void *)(a1 + 16));
}

uint64_t sub_1000C6720(uint64_t a1)
{
  return sub_1000C64C4(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1000C673C(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 448));
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 2LL, v4, a1 + 464);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000C67B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C67E4 + 4 * byte_1001630C0[a1]))( "unknown",  7LL);
}

const char *sub_1000C67E4()
{
  return "parsecSession";
}

unint64_t sub_1000C6864(unint64_t result)
{
  if (result >= 9) {
    return 9LL;
  }
  return result;
}

unint64_t sub_1000C6874@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000C6864(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000C689C()
{
  return v0;
}

uint64_t sub_1000C68C8()
{
  return v0;
}

uint64_t sub_1000C68F4()
{
  return sub_1000C67B8(*v0);
}

uint64_t sub_1000C6910()
{
  return 0x656372756F736572LL;
}

uint64_t sub_1000C6934(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D5730);
  uint64_t inited = (__n128 *)swift_initStackObject(v2, v6);
  sub_1000C6FF8(inited, (__n128)xmmword_10015C7F0);
  inited[3].n128_u64[0] = (unint64_t)[objc_allocWithZone(NSNumber) initWithInteger:a1];
  unint64_t v4 = sub_1000A36DC();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v4, &protocol witness table for String);
}

uint64_t sub_1000C69C0()
{
  return sub_1000C6934(*v0);
}

uint64_t sub_1000C69C8()
{
  return *(void *)v0;
}

uint64_t sub_1000C69D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D5730);
  uint64_t inited = (__n128 *)swift_initStackObject(v4, &v8);
  sub_1000C6FF8(inited, (__n128)xmmword_10015D580);
  inited[3].n128_u64[0] = (unint64_t)[objc_allocWithZone(NSNumber) initWithInteger:a1];
  strcpy(&inited[3].n128_i8[8], "feedbackType");
  inited[4].n128_u8[5] = 0;
  inited[4].n128_u16[3] = -5120;
  inited[4].n128_u64[1] = (unint64_t)[objc_allocWithZone(NSNumber) initWithInt:a2];
  unint64_t v6 = sub_1000A36DC();
  return Dictionary.init(dictionaryLiteral:)(inited, &type metadata for String, v6, &protocol witness table for String);
}

uint64_t sub_1000C6AA4()
{
  return sub_1000C69D0(*(void *)v0, *(unsigned int *)(v0 + 8));
}

uint64_t sub_1000C6AB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t result = __chkstk_darwin(a1);
  if ((v2[81] & 1) == 0)
  {
    sub_1000C7014();
    uint64_t v5 = *(void *)(v3 + 456);
    uint64_t v6 = sub_1000C7024(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    sub_1000C7034();
    sub_1000D5B24(v6);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_10000941C(&qword_1001D0C10);
    uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
    sub_1000C7014();
    uint64_t v9 = sub_1000C7024(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16));
    sub_1000C7034();
    *(void *)(v8 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for Int;
    *(void *)(v8 + 64) = &protocol witness table for Int;
    *(void *)(v8 + 32) = v9;
    sub_1000D6888("bytesWritten=%{signpost.description:attribute,public}llu", 56LL, 2LL, v8);
    swift_bridgeObjectRelease();
    BOOL v10 = *(os_unfair_lock_s **)(*(void *)&v2[*(void *)(*(void *)v2 + 152LL)] + 16LL);
    swift_retain(*(void *)&v2[*(void *)(*(void *)v2 + 152LL)]);
    os_unfair_lock_lock(v10);
    if ((v2[81] & 1) == 0) {
      sub_1000D5E14();
    }
    os_unfair_lock_unlock(v10);
    return swift_release();
  }

  return result;
}

uint64_t sub_1000C6C20()
{
  uint64_t v1 = *v0;
  swift_errorRelease(*(uint64_t *)((char *)v0 + qword_1001D6BE8));
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 448) - 8LL) + 8LL))((uint64_t)v0 + *(void *)(*v0 + 472));
}

uint64_t sub_1000C6C64(uint64_t a1)
{
  uint64_t v2 = *v1;
  if ((*((_BYTE *)v1 + 81) & 1) == 0) {
    sub_1000C6AB0(a1);
  }
  uint64_t v3 = sub_1000D5090();
  swift_errorRelease(*(void *)(v3 + qword_1001D6BE8));
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 448) - 8LL) + 8LL))(v3 + *(void *)(*(void *)v3 + 472LL));
  return v3;
}

uint64_t sub_1000C6CCC(uint64_t a1)
{
  uint64_t v1 = sub_1000C6C64(a1);
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

uint64_t type metadata accessor for DiskWriteSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000149EC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DiskWriteSpan);
}

void type metadata accessor for DiskWriteActivity()
{
}

void type metadata accessor for BasicDiskOperationMetrics()
{
}

unint64_t sub_1000C6D18(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000C6D44();
  unint64_t result = sub_1000C6D80();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000C6D44()
{
  unint64_t result = qword_1001D6C70;
  if (!qword_1001D6C70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163210, &unk_1001B81E0);
    atomic_store(result, (unint64_t *)&qword_1001D6C70);
  }

  return result;
}

unint64_t sub_1000C6D80()
{
  unint64_t result = qword_1001D6C78;
  if (!qword_1001D6C78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001631D8, &unk_1001B81E0);
    atomic_store(result, (unint64_t *)&qword_1001D6C78);
  }

  return result;
}

unint64_t sub_1000C6DC0()
{
  unint64_t result = qword_1001D6C80;
  if (!qword_1001D6C80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163250, &unk_1001B81E0);
    atomic_store(result, (unint64_t *)&qword_1001D6C80);
  }

  return result;
}

uint64_t sub_1000C6DFC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_1000C6E10(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000C6E30(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for FeedbackDiskWriteMetrics()
{
}

uint64_t sub_1000C6E68(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }

uint64_t sub_1000C6EF0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1000C6F3C + 4 * byte_1001630CE[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000C6F70 + 4 * byte_1001630C9[v4]))();
}

uint64_t sub_1000C6F70(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000C6F78(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C6F80LL);
  }
  return result;
}

uint64_t sub_1000C6F8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C6F94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1000C6F98(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000C6FA0(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

void type metadata accessor for DiskWriteError()
{
}

unint64_t sub_1000C6FBC()
{
  unint64_t result = qword_1001D6C88;
  if (!qword_1001D6C88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001632E8, &unk_1001B8398);
    atomic_store(result, (unint64_t *)&qword_1001D6C88);
  }

  return result;
}

__n128 *sub_1000C6FF8(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x7365747962LL;
  result[2].n128_u64[1] = 0xE500000000000000LL;
  return result;
}

uint64_t sub_1000C7014()
{
  return v3(v1, v2, v0);
}

uint64_t sub_1000C7024@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v1, v2);
}

uint64_t sub_1000C7034()
{
  return v2(v1, v0);
}

void sub_1000C7040(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 0LL;
  char v19 = 1;
  uint64_t v4 = (void *)sub_100009ACC((uint64_t)&unk_1001B86D8, 40LL);
  void v4[2] = &v18;
  void v4[3] = a1;
  v4[4] = a2;
  int v5 = (void *)sub_100009ACC((uint64_t)&unk_1001B8700, 32LL);
  v5[2] = sub_1000C8874;
  void v5[3] = v4;
  v17[4] = sub_1000C88B4;
  void v17[5] = v5;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256LL;
  _OWORD v17[2] = sub_10007B5C8;
  v17[3] = &unk_1001B8718;
  unsigned int v6 = _Block_copy(v17);
  swift_retain(v5);
  swift_release();
  BOOL v7 = (void (*)(void))v6[2];
  uint64_t v8 = v6;
  v7();
  id v9 = 0LL;
  while (1)
  {

    id v10 = v9;
    sub_1000C8948();
    sub_1000C88E8(v11, (uint64_t)"");
    uint64_t v12 = (void *)sub_1000C8954();
    if ((v8 & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }

    if (v9)
    {
      id v13 = v9;
      sub_1000C8928();
      unint64_t v14 = sub_10001B060();
      uint64_t v15 = sub_100010EA0((uint64_t)&type metadata for Incident, v14);
      sub_1000C8914(v15, v16);
      sub_10001683C();

      goto LABEL_7;
    }

    if ((v19 & 1) == 0) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v12);
    objc_end_catch();
  }

  sub_10001683C();
LABEL_7:
  sub_1000C8900();
}

void sub_1000C71B4(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = 1LL;
  uint64_t v4 = (void *)sub_100009ACC((uint64_t)&unk_1001B8660, 40LL);
  void v4[2] = &v18;
  void v4[3] = a1;
  v4[4] = a2;
  int v5 = (void *)sub_100009ACC((uint64_t)&unk_1001B8688, 32LL);
  v5[2] = sub_1000C8840;
  void v5[3] = v4;
  aBlock[4] = sub_1000C88B4;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10007B5C8;
  aBlock[3] = &unk_1001B86A0;
  unsigned int v6 = _Block_copy(aBlock);
  swift_retain(v5);
  swift_release();
  BOOL v7 = (void (*)(void))v6[2];
  uint64_t v8 = v6;
  v7();
  id v9 = 0LL;
  while (1)
  {

    id v10 = v9;
    sub_1000C8948();
    sub_1000C88E8(v11, (uint64_t)"");
    uint64_t v12 = (void *)sub_1000C8954();
    if ((v8 & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }

    if (v9)
    {
      id v13 = v9;
      sub_1000C8928();
      unint64_t v14 = sub_10001B060();
      uint64_t v15 = sub_100010EA0((uint64_t)&type metadata for Incident, v14);
      sub_1000C8914(v15, v16);

      sub_1000C8858((id)v18);
      sub_10001683C();
      goto LABEL_7;
    }

    int v5 = (void *)v18;
    if (v18 != 1) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v12);
    objc_end_catch();
  }

  sub_10001683C();
LABEL_7:
  sub_1000C8900();
}

id sub_1000C732C(uint64_t a1, uint64_t a2)
{
  __int128 v17 = xmmword_100163360;
  char v18 = 0;
  uint64_t v4 = (void *)swift_allocObject(&unk_1001B8548, 40LL, 7LL);
  void v4[2] = &v17;
  void v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = swift_allocObject(&unk_1001B8570, 32LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = sub_1000C869C;
  *(void *)(v5 + 24) = v4;
  v16[4] = sub_10001B040;
  v16[5] = v5;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256LL;
  void v16[2] = sub_10007B5C8;
  v16[3] = &unk_1001B8588;
  unsigned int v6 = _Block_copy(v16);
  swift_retain(v5);
  swift_release();
  BOOL v7 = (void (*)(void))v6[2];
  uint64_t isEscapingClosureAtFileLocation = v6;
  v7();
  id v9 = 0LL;
  while (1)
  {

    id v10 = v9;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 92LL, 38LL, 40LL, 1LL);
    uint64_t v11 = (void *)swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
      goto LABEL_9;
    }

    if (v10)
    {
      id v12 = v10;
      Incident.reportTelemetry()();
      unint64_t v13 = sub_10001B060();
      swift_allocError(&type metadata for Incident, v13, 0LL, 0LL);
      *(void *)uint64_t v14 = v10;
      *(void *)(v14 + 8) = 0LL;
      *(_BYTE *)(v14 + swift_weakDestroy(v0 + 16) = 0;
      swift_willThrow();

      sub_100046EBC(v17, *((uint64_t *)&v17 + 1));
      swift_release();
      return v10;
    }

    uint64_t v5 = *((void *)&v17 + 1);
    if (*((void *)&v17 + 1) != 1LL) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v11);
    objc_end_catch();
  }

  id v10 = (id)v17;
  swift_release();
  return v10;
}

void sub_1000C7530(void **a1, void (*a2)(void **__return_ptr))
{
  int v3 = *a1;
  *a1 = v4;
  sub_1000C8858(v3);
}

uint64_t sub_1000C756C(uint64_t a1, void (*a2)(void *__return_ptr))
{
  uint64_t v3 = v7[0];
  uint64_t v4 = v7[1];
  char v5 = v8;
  uint64_t result = sub_100046EBC(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return result;
}

void sub_1000C75C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier);
  *uint64_t v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRelease();
  sub_1000D1BA0();
}

uint64_t sub_1000C75EC@<X0>(void *a1@<X8>)
{
  if (qword_1001D0528 != -1) {
    swift_once(&qword_1001D0528, sub_1000344D0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v3, (uint64_t)qword_1001EDC48);
  uint64_t v4 = v1;
  char v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    BOOL v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v8;
    *(_DWORD *)BOOL v7 = 136315138;
    id v9 = (uint64_t *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
    uint64_t v10 = *(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8];
    if (v10)
    {
      uint64_t v11 = *v9;
      unint64_t v12 = v9[1];
    }

    else
    {
      unint64_t v12 = 0xE300000000000000LL;
      uint64_t v11 = 7104878LL;
    }

    swift_bridgeObjectRetain(v10);
    uint64_t v16 = sub_1000307E0(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v7 + 4);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updating storefrontIdentifier: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL);
    sub_100010C34(v8);
    sub_100010C34((uint64_t)v7);
  }

  else
  {
  }

  uint64_t v13 = *(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8];
  *a1 = *(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
  a1[1] = v13;
  uint64_t v14 = type metadata accessor for ContextUpdate(0LL);
  swift_storeEnumTagMultiPayload(a1, v14, 11LL);
  return swift_bridgeObjectRetain(v13);
}

uint64_t sub_1000C77D0()
{
  uint64_t v0 = sub_10004A55C();
  swift_release();
  return v0;
}

uint64_t sub_1000C7820(uint64_t a1, uint64_t a2, char a3)
{
  return swift_release();
}

uint64_t sub_1000C786C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue);
  uint64_t v7 = sub_10006B2D0((uint64_t)&unk_1001B85C0);
  sub_1000C893C(v7);
  aBlock[4] = sub_1000C872C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B85D8;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_retain(v7);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &_swiftEmptyArrayStorage;
  unint64_t v18 = sub_100019CD0();
  uint64_t v19 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v20 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v14, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v17, v8);
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  return swift_release();
}

void sub_1000C7A54(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = (char *)Strong;
    uint64_t v4 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_assembly);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = sub_1000C77D0();
      if (v7)
      {
        uint64_t v9 = v6;
        uint64_t v10 = v7;
        char v11 = v8;
        unint64_t v12 = &v3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
        uint64_t v13 = *(void *)&v3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8];
        if (v13
          && (*(void *)v12 == v6 ? (BOOL v14 = v13 == v10) : (BOOL v14 = 0),
              v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v12, v13, v6, v10, 0LL) & 1) != 0))
        {

          swift_unknownObjectRelease(v5);
          swift_bridgeObjectRelease();
        }

        else
        {
          char v15 = v11 & 1;
          swift_bridgeObjectRetain(v10);
          sub_1000C75C0(v9, v10);
          id v16 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
          if (qword_1001D0480 != -1) {
            swift_once(&qword_1001D0480, sub_10000A6F0);
          }
          uint64_t v17 = qword_1001EDA60;
          uint64_t v18 = sub_10000941C((uint64_t *)&unk_1001D32A0);
          uint64_t inited = swift_initStackObject(v18, v22);
          *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
          v21[0] = 0x756F636341524150LL;
          v21[1] = 0xEA0000000000746ELL;
          AnyHashable.init<A>(_:)(v21);
          *(void *)(inited + 9os_unfair_lock_lock(v0 + 6) = &type metadata for StorefrontAccount;
          *(void *)(inited + 72) = v9;
          *(void *)(inited + 8sub_1000AC280(v0, v1, 0) = v10;
          *(_BYTE *)(inited + 88) = v15;
          uint64_t v20 = Dictionary.init(dictionaryLiteral:)( inited,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
          sub_1000C5160(v17, 0LL, v20, v16);

          swift_unknownObjectRelease(v5);
        }
      }

      else
      {

        swift_unknownObjectRelease(v5);
      }
    }

    else
    {
    }
  }

void sub_1000C7C6C()
{
}

id sub_1000C7CA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StorefrontIdentifierProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StorefrontIdentifierProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd28StorefrontIdentifierProvider);
}

void sub_1000C7D60()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_assembly);
  if (Strong)
  {
    uint64_t v2 = Strong;
    id v3 = sub_1000C8734(v0);
    uint64_t v4 = OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore;
    uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore);
    *(void *)(v0 + OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore) = v3;

    uint64_t v6 = *(void **)(v0 + v4);
    if (v6)
    {
      uint64_t v7 = sub_10006B2D0((uint64_t)&unk_1001B8610);
      sub_1000C893C(v7);
      v10[4] = sub_1000C87F0;
      v10[5] = v7;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256LL;
      v10[2] = sub_1000C8334;
      v10[3] = &unk_1001B8628;
      char v8 = _Block_copy(v10);
      id v9 = v6;
      swift_release();
      [v9 registerWithCompletion:v8];
      swift_unknownObjectRelease(v2);
      _Block_release(v8);
    }

    else
    {
      swift_unknownObjectRelease(v2);
    }
  }

void sub_1000C7E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v23, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (!Strong) {
    return;
  }
  uint64_t v7 = (void *)Strong;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1001D0528 != -1) {
      swift_once(&qword_1001D0528, sub_1000344D0);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v8, (uint64_t)qword_1001EDC48);
    swift_errorRetain(a2);
    uint64_t v9 = swift_errorRetain(a2);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v12 = static os_log_type_t.error.getter(v10, v11);
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = a2;
      uint64_t v22 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_errorRetain(a2);
      sub_10000941C(&qword_1001D2B70);
      uint64_t v15 = String.init<A>(describing:)(&v21);
      uint64_t v21 = sub_1000307E0(v15, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v10, v12, "Failed to register for account updates: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      swift_errorRelease(a2);
      return;
    }

    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    goto LABEL_14;
  }

  if (!a1)
  {
LABEL_14:

    return;
  }

  if ((unint64_t)a1 >> 62)
  {
    if (a1 >= 0) {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v20 = a1;
    }
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v20)) {
      goto LABEL_10;
    }
LABEL_20:

    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v17) {
    goto LABEL_20;
  }
LABEL_10:
  sub_100030F20(0LL, (a1 & 0xC000000000000001LL) == 0, a1);
  if ((a1 & 0xC000000000000001LL) != 0) {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
  }
  else {
    id v18 = *(id *)(a1 + 32);
  }
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  sub_1000C8130((uint64_t)v19);
}

id sub_1000C8130(uint64_t a1)
{
  void v4[2] = a1;
  id result = sub_1000C732C((uint64_t)sub_1000C8614, (uint64_t)v4);
  if (v2)
  {
    sub_1000C786C((uint64_t)result, v2, v3 & 1);
    return (id)swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1000C8334(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    unint64_t v7 = sub_1000C87F8();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000C83B0()
{
}

void sub_1000C83C0()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore];
  if (v2) {
    [v2 removeDelegate:v0];
  }
  v3.receiver = v0;
  v3.super_class = ObjectType;
  objc_msgSendSuper2(&v3, "dealloc");
  sub_1000A28E0();
}

uint64_t type metadata accessor for AppleAccountMonitor()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd19AppleAccountMonitor);
}

uint64_t sub_1000C84C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithTake for StorefrontAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StorefrontAccount(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorefrontAccount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for StorefrontAccount()
{
  return &type metadata for StorefrontAccount;
}

id sub_1000C85C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1000C86CC(a1);
  uint64_t v6 = v5;
  id result = objc_msgSend(a1, "aa_isManagedAppleID");
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = (_BYTE)result;
  return result;
}

id sub_1000C8614@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C85C8(*(void **)(v1 + 16), a1);
}

id sub_1000C861C(uint64_t a1, uint64_t a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  id v6 = [v2 initWithAccountTypes:isa delegate:a2];

  swift_unknownObjectRelease(a2);
  return v6;
}

uint64_t sub_1000C8690()
{
  return sub_10001B110(v0, 40LL);
}

uint64_t sub_1000C869C()
{
  return sub_1000C756C(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_1000C86A8()
{
  return sub_10001B110(v0, 32LL);
}

uint64_t sub_1000C86B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C86C4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000C86CC(void *a1)
{
  id v1 = objc_msgSend(a1, "ams_storefront");
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_1000C872C()
{
}

id sub_1000C8734(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D24A8);
  uint64_t inited = swift_initStackObject(v2, &v7);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_10015C7F0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ACAccountTypeIdentifieriTunesStore);
  *(void *)(inited + 4sub_1000AC280(v0, v1, 0) = v4;
  Swift::Int v5 = sub_1000B1430(inited);
  objc_allocWithZone(&OBJC_CLASS___ACMonitoredAccountStore);
  swift_unknownObjectRetain(a1);
  return sub_1000C861C(v5, a1);
}

uint64_t sub_1000C87CC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C87F0(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1000C87F8()
{
  unint64_t result = qword_1001D6D78;
  if (!qword_1001D6D78)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ACAccount);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D6D78);
  }

  return result;
}

uint64_t sub_1000C8834()
{
  return sub_10001B110(v0, 40LL);
}

void sub_1000C8840()
{
  sub_1000C7530(*(void ***)(v0 + 16), *(void (**)(void **__return_ptr))(v0 + 24));
}

uint64_t sub_1000C884C()
{
  return sub_10001B110(v0, 32LL);
}

void sub_1000C8858(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1000C8868()
{
  return sub_10001B110(v0, 40LL);
}

void sub_1000C8874()
{
  uint64_t v1 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t *__return_ptr))(v0 + 24))(&v2);
  *(void *)uint64_t v1 = v2;
  *(_BYTE *)(v1 + 8) = 0;
  sub_1000A28E0();
}

uint64_t sub_1000C88A8()
{
  return sub_10001B110(v0, 32LL);
}

uint64_t sub_1000C88E8(uint64_t a1, uint64_t a2)
{
  return swift_isEscapingClosureAtFileLocation(v2, a2, 92LL, 38LL, 40LL, 1LL);
}

  ;
}

uint64_t sub_1000C8914(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = 0LL;
  *(_BYTE *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  return swift_willThrow();
}

void sub_1000C8928()
{
}

uint64_t sub_1000C893C(uint64_t a1)
{
  return swift_unknownObjectWeakInit(a1 + 16, v1);
}

void sub_1000C8948()
{
}

uint64_t sub_1000C8954()
{
  return swift_release(v0);
}

void SessionFilename.__allocating_init(fromString:)(uint64_t a1, unint64_t a2)
{
}

parsecd::SessionFilename::SessionFileState_optional __swiftcall SessionFilename.SessionFileState.init(rawValue:)( Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001B0498, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return (parsecd::SessionFilename::SessionFileState_optional)4;
  }
  else {
    return (parsecd::SessionFilename::SessionFileState_optional)v3;
  }
}

uint64_t SessionFilename.SessionFileState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C8A08 + 4 * byte_1001633E0[a1]))( 1852141679LL,  0xE400000000000000LL);
}

uint64_t sub_1000C8A08()
{
  return 0x6465736F6C63LL;
}

uint64_t sub_1000C8A1C()
{
  return 0x69737365636F7270LL;
}

uint64_t sub_1000C8A38()
{
  return 0x646564616F6C7075LL;
}

uint64_t sub_1000C8A50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10007E63C(*a1, *a2);
}

void sub_1000C8A5C()
{
}

void sub_1000C8A64(uint64_t a1)
{
}

void sub_1000C8A6C(uint64_t a1)
{
}

parsecd::SessionFilename::SessionFileState_optional sub_1000C8A74@<W0>( Swift::String *a1@<X0>, parsecd::SessionFilename::SessionFileState_optional *a2@<X8>)
{
  result.value = SessionFilename.SessionFileState.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_1000C8AA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SessionFilename.SessionFileState.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void SessionFilename.sessionID.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  sub_100010BE4(v3, (uint64_t)v5, 0LL);
  uint64_t v4 = sub_1000A19D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
  sub_10004ECC0();
}

void SessionFilename.sessionID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  sub_100010BE4(v3, (uint64_t)v5, 33LL);
  uint64_t v4 = sub_1000A19D0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  swift_endAccess(v5);
  sub_10004ECC0();
}

void SessionFilename.sessionID.modify(uint64_t a1)
{
}

void SessionFilename.processID.getter()
{
}

void SessionFilename.processID.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  sub_100010BE4((uint64_t)v3, (uint64_t)v4, 1LL);
  *uint64_t v3 = a1;
  sub_10004ECC0();
}

void SessionFilename.processID.modify(uint64_t a1)
{
}

void SessionFilename.state.getter()
{
}

void SessionFilename.state.setter(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  sub_100010BE4((uint64_t)v3, (uint64_t)v4, 1LL);
  *uint64_t v3 = a1;
  sub_10004ECC0();
}

void SessionFilename.state.modify(uint64_t a1)
{
}

void SessionFilename.filenameString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000A19D0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  sub_100009AEC();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = sub_10000941C(&qword_1001D24A8);
  uint64_t v8 = swift_allocObject(v7, 96LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D4A0;
  sub_1000CAA0C();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 4sub_1000AC280(v0, v1, 0) = 0xE700000000000000LL;
  uint64_t v11 = (_DWORD *)(v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  sub_100010BE4((uint64_t)v11, (uint64_t)v21, 0LL);
  v20[0] = *v11;
  *(void *)(v8 + 48) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  *(void *)(v8 + 5os_unfair_lock_lock(v0 + 6) = v12;
  uint64_t v13 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  sub_100010BE4(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID, (uint64_t)v20, 0LL);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v6, v13, v2);
  uint64_t v15 = UUID.uuidString.getter(v14);
  uint64_t v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  *(void *)(v8 + 64) = v15;
  *(void *)(v8 + 72) = v17;
  uint64_t v18 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state;
  sub_100010BE4(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state, (uint64_t)v19, 0LL);
  __asm { BR              X12 }

uint64_t sub_1000C8E6C()
{
  *(void *)(v0 + 8sub_1000AC280(v0, v1, 0) = 0x6465736F6C63LL;
  *(void *)(v0 + 88) = 0xE600000000000000LL;
  *(void *)(v1 - 144) = v0;
  uint64_t v2 = sub_10000941C(&qword_1001D1460);
  unint64_t v3 = sub_1000152B0();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)(46LL, 0xE100000000000000LL, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

void SessionFilename.uploadPending.getter()
{
}

void SessionFilename.uploadPending.setter(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  sub_100010BE4((uint64_t)v3, (uint64_t)v4, 1LL);
  *unint64_t v3 = a1;
  sub_10004ECC0();
}

void SessionFilename.uploadPending.modify(uint64_t a1)
{
}

void SessionFilename.__allocating_init()()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  SessionFilename.init()(v1);
  sub_100009A90();
}

void SessionFilename.init()(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7parsecd15SessionFilename_processID;
  id v3 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  unsigned int v4 = [v3 processIdentifier];

  *(_DWORD *)(v1 + v2) = v4;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  sub_1000110D4();
}

void SessionFilename.__allocating_init(fromUserGUID:state:processID:uploadPending:)( uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5)
{
}

void SessionFilename.init(fromUserGUID:state:processID:uploadPending:)( uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v7 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  __chkstk_darwin(v7);
  sub_100009AEC();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_1000A19D0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_100009AEC();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  UUID.init()(v17);
  uint64_t v18 = (unsigned int *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___NSProcessInfo);
  id v19 = [v25 processInfo];
  unsigned int v20 = [v19 processIdentifier];

  id v26 = v18;
  *uint64_t v18 = v20;
  uint64_t v21 = (_BYTE *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  uint64_t v22 = (_BYTE *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  UUID.init(uuidString:)(a1, a2);
  sub_10001450C();
  if (sub_100010708(v10, 1LL, v11) == 1)
  {
    swift_release();
    sub_1000829CC(v10);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v10, v11);
    sub_100010BE4(v16, (uint64_t)v33, 33LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v16, v15, v11);
    swift_endAccess(v33);
    unsigned int v23 = a4;
    if ((a4 & 0x100000000LL) != 0)
    {
      id v24 = [v25 processInfo];
      unsigned int v23 = [v24 processIdentifier];
    }

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
    sub_100010BE4((uint64_t)v26, (uint64_t)v33, 1LL);
    *id v26 = v23;
    sub_100010BE4((uint64_t)v21, (uint64_t)v32, 1LL);
    *uint64_t v21 = a3;
    sub_100010BE4((uint64_t)v22, (uint64_t)v31, 1LL);
    _BYTE *v22 = a5 & 1;
  }

  sub_100009AA0();
}

void SessionFilename.init(fromString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000941C((uint64_t *)&unk_1001D5D10);
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = sub_1000A19D0();
  uint64_t v77 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v76 = v12 - v11;
  uint64_t v73 = v2 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  UUID.init()(v13);
  uint64_t v14 = (unsigned int *)(v2 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  id v15 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  unsigned int v16 = [v15 processIdentifier];

  __int128 v75 = v14;
  *uint64_t v14 = v16;
  uint64_t v72 = (parsecd::SessionFilename::SessionFileState *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  uint64_t v74 = (Swift::Bool *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  uint64_t v84 = 46LL;
  uint64_t v85 = 0xE100000000000000LL;
  uint64_t v81 = &v84;
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v17 = sub_1000C9A5C(0x7FFFFFFFFFFFFFFFLL, 1u, sub_1000341EC, (uint64_t)v80, a1, a2);
  sub_10001450C();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v78 = v9;
    uint64_t v79 = v10;
    uint64_t v84 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000AFA34(0, v18, 0);
    id v19 = (void *)v84;
    unsigned int v20 = (void *)(v17 + 56);
    do
    {
      uint64_t v21 = *(v20 - 3);
      uint64_t v22 = *(v20 - 2);
      uint64_t v24 = *(v20 - 1);
      uint64_t v23 = *v20;
      swift_bridgeObjectRetain(*v20);
      uint64_t v25 = static String._fromSubstring(_:)(v21, v22, v24, v23);
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v84 = (uint64_t)v19;
      unint64_t v29 = v19[2];
      unint64_t v28 = v19[3];
      if (v29 >= v28 >> 1)
      {
        sub_1000AFA34(v28 > 1, v29 + 1, 1);
        id v19 = (void *)v84;
      }

      void v19[2] = v29 + 1;
      uint64_t v30 = &v19[2 * v29];
      v30[4] = v25;
      _OWORD v30[5] = v27;
      v20 += 4;
      --v18;
    }

    while (v18);
    swift_bridgeObjectRelease();
    uint64_t v9 = v78;
    uint64_t v10 = v79;
  }

  else
  {
    swift_bridgeObjectRelease();
    id v19 = _swiftEmptyArrayStorage;
  }

  if (v19[2] < 4uLL
    || ((sub_1000CAA0C(), uint64_t v31 = v19[4], v32 = v19[5], v31 == v33) ? (v34 = v32 == 0xE700000000000000LL) : (v34 = 0),
        !v34
     && (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, 0x6E6F6973736573LL, 0xE700000000000000LL, 0LL) & 1) == 0))
  {
    sub_100010D00();
    sub_100009B3C();
LABEL_24:
    sub_10001450C();
    goto LABEL_75;
  }

  uint64_t v35 = v19[6];
  unint64_t v36 = v19[7];
  uint64_t v37 = HIBYTE(v36) & 0xF;
  uint64_t v38 = v35 & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000LL) != 0) {
    uint64_t v39 = HIBYTE(v36) & 0xF;
  }
  else {
    uint64_t v39 = v35 & 0xFFFFFFFFFFFFLL;
  }
  if (!v39)
  {
LABEL_74:
    sub_100009B3C();
    sub_10001450C();
    sub_100010D00();
LABEL_75:
    sub_100009AA0();
    return;
  }

  if ((v36 & 0x1000000000000000LL) != 0)
  {
    sub_10005A5AC();
    uint64_t v42 = sub_1000C9F90(v35, v36, 10LL);
    swift_bridgeObjectRelease();
    if ((v42 & 0x100000000LL) == 0) {
      goto LABEL_60;
    }
    goto LABEL_74;
  }

  if ((v36 & 0x2000000000000000LL) == 0)
  {
    if ((v35 & 0x1000000000000000LL) == 0) {
      goto LABEL_77;
    }
    for (unint64_t i = (unsigned __int8 *)((v36 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          unint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v35, v36))
    {
      uint64_t v41 = sub_1000CA074(i, v38, 10LL);
      v83[0] = BYTE4(v41) & 1;
      LOBYTE(v37) = BYTE4(v41) & 1;
      LODWORD(v42) = (_DWORD)v41;
LABEL_59:
      if ((v37 & 1) != 0) {
        break;
      }
LABEL_60:
      if (v19[2] >= 3uLL)
      {
        uint64_t v60 = v19[8];
        uint64_t v61 = v19[9];
        swift_bridgeObjectRetain(v61);
        UUID.init(uuidString:)(v60, v61);
        swift_bridgeObjectRelease();
        if (sub_100010708(v9, 1LL, v10) == 1)
        {
          sub_100010D00();
          sub_100009B3C();
          sub_10001450C();
          sub_1000829CC(v9);
          goto LABEL_75;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v76, v9, v10);
        if (v19[2] < 4uLL)
        {
          __break(1u);
          goto LABEL_80;
        }

        uint64_t v62 = v19[10];
        uint64_t v63 = (void *)v19[11];
        swift_bridgeObjectRetain(v63);
        sub_100009B3C();
        v64._uint64_t countAndFlagsBits = v62;
        v64._object = v63;
        v65.parsecd::SessionFilename::SessionFileState value = SessionFilename.SessionFileState.init(rawValue:)(v64).value;
        if (v65.value == parsecd_SessionFilename_SessionFileState_unknownDefault)
        {
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v10);
          sub_100010D00();
          goto LABEL_24;
        }

        parsecd::SessionFilename::SessionFileState value = v65.value;
        sub_100010BE4(v73, (uint64_t)&v84, 33LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 24))(v73, v76, v10);
        swift_endAccess(&v84);
        sub_100010BE4((uint64_t)v75, (uint64_t)&v84, 1LL);
        *__int128 v75 = v42;
        sub_100010BE4((uint64_t)v72, (uint64_t)v83, 1LL);
        *uint64_t v72 = value;
        v67._uint64_t countAndFlagsBits = 0x5064616F6C70752ELL;
        v67._object = (void *)0xEE00676E69646E65LL;
        Swift::Bool v68 = String.hasSuffix(_:)(v67);
        sub_10001450C();
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v10);
        sub_100010BE4((uint64_t)v74, (uint64_t)v82, 1LL);
        *uint64_t v74 = v68;
        goto LABEL_75;
      }

      __break(1u);
LABEL_77:
      ;
    }

    goto LABEL_74;
  }

  uint64_t v84 = v19[6];
  uint64_t v85 = v36 & 0xFFFFFFFFFFFFFFLL;
  if (v35 == 43)
  {
    if (!v37) {
      goto LABEL_81;
    }
    if (v37 == 1) {
      goto LABEL_78;
    }
    LODWORD(v42) = (BYTE1(v35) - 48);
    if (v37 != 2)
    {
      sub_1000CA9C4();
      if (!v34 & v46) {
        goto LABEL_46;
      }
      LODWORD(v42) = 10 * v42 + v48;
      uint64_t v49 = v47 - 3;
      if (v47 != 3)
      {
        uint64_t v50 = (unsigned __int8 *)&v84 + 3;
        while (1)
        {
          unsigned int v51 = *v50 - 48;
          if (v51 > 9) {
            goto LABEL_46;
          }
          uint64_t v52 = 10LL * (int)v42;
          LODWORD(v42) = v52 + v51;
          LOBYTE(v37) = 0;
          ++v50;
          if (!--v49) {
            goto LABEL_59;
          }
        }
      }
    }

LABEL_46:
      LODWORD(v42) = 0;
      LOBYTE(v37) = 1;
      goto LABEL_59;
    }

  sub_1000CF7B4(v35[12]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"lc");
  uint64_t v103 = v102;
  uint64_t v104 = *(void *)(v73 + 16);
  if (v104)
  {
    sub_1000CF6AC();
    while (1)
    {
      uint64_t v105 = sub_1000CF870();
      uint64_t v106 = URLQueryItem.name.getter(v105);
      if (v106 == v78 && v107 == v103) {
        break;
      }
      uint64_t v109 = sub_1000CF634(v106, v107);
      sub_100009B3C();
      if ((v109 & 1) != 0) {
        goto LABEL_57;
      }
      sub_1000CF880(v123, *(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
      a2 += v77;
      if (!--v104)
      {
        sub_1000110A8();
        swift_bridgeObjectRelease_n(v115, 2LL);
        sub_1000CF8C0();
        goto LABEL_58;
      }
    }

    sub_1000CF6FC();
LABEL_57:
    swift_bridgeObjectRelease();
    sub_1000CF8C0();
    uint64_t v110 = v123;
    URLQueryItem.value.getter(v111);
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v110, v130);
    swift_bridgeObjectRelease();
    sub_1000110A8();
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_1000110A8();
    sub_1000CF794();
  }

        LOBYTE(v13) = 0;
        goto LABEL_47;
      }

      if (v26 && (v25 - 48) <= 9u)
      {
        uint64_t v30 = (v25 - 48);
        if (v26 == 1) {
          goto LABEL_46;
        }
        if ((BYTE1(v25) - 48) <= 9u)
        {
          uint64_t v30 = 10LL * (v25 - 48) + (BYTE1(v25) - 48);
          if (v26 != 2)
          {
            while (1)
            {
              sub_1000EA748();
              if (!v33 & v32) {
                goto LABEL_44;
              }
              sub_1000EA714();
              if (!v33) {
                goto LABEL_44;
              }
              uint64_t v30 = v38 + v37;
              if (__OFADD__(v38, v37)) {
                goto LABEL_44;
              }
              sub_1000EA764();
              if (v33) {
                goto LABEL_47;
              }
            }
          }

          goto LABEL_46;
        }
      }
    }

LABEL_78:
    LODWORD(v42) = 0;
    goto LABEL_59;
  }

  sub_100010FA8();
  sub_10006B518( (uint64_t)"Fatal error",  v87,  v88,  (uint64_t)"Negative value is not representable",  v89,  v90,  (uint64_t)"Swift/Integers.swift",  v91,  v92,  v93,  v94);
  __break(1u);
}

  __break(1u);
  return result;
}

LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
}

    if ((v123 & 1) != 0) {
      goto LABEL_130;
    }
    uint64_t v131 = &v97[2 * v100];
    uint64_t v133 = *v131;
    uint64_t v132 = v131[1];
    uint64_t v111 = __OFSUB__(v132, v133);
    uint64_t v134 = v132 - v133;
    if (v111) {
      goto LABEL_132;
    }
    if (v134 < v122) {
      goto LABEL_97;
    }
LABEL_88:
    uint64_t v139 = v100 - 1;
    if (v100 - 1 >= v96)
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }

    uint64_t v140 = *a1;
    if (!*a1) {
      goto LABEL_147;
    }
    uint64_t v141 = v23;
    uint64_t v142 = &v97[2 * v139];
    uint64_t v143 = *v142;
    uint64_t v144 = &v97[2 * v100];
    uint64_t v145 = v144[1];
    sub_1000E08B4( v140 + *(void *)(v167 + 72) * *v142,  v140 + *(void *)(v167 + 72) * *v144,  v140 + *(void *)(v167 + 72) * v145,  v168);
    if (v2) {
      break;
    }
    if (v145 < v143) {
      goto LABEL_121;
    }
    if (v100 > *((void *)v141 + 2)) {
      goto LABEL_122;
    }
    *uint64_t v142 = v143;
    v97[2 * v139 + 1] = v145;
    id v146 = *((void *)v141 + 2);
    if (v100 >= v146) {
      goto LABEL_123;
    }
    uint64_t v23 = v141;
    uint64_t v96 = v146 - 1;
    memmove(&v97[2 * v100], v144 + 2, 16 * (v146 - 1 - v100));
    *((void *)v141 + 2) = v146 - 1;
    a1 = v186;
    if (v146 <= 2) {
      goto LABEL_97;
    }
  }

void SessionFilename.deinit()
{
  uint64_t v0 = sub_1000A19D0();
  sub_100019DA4(v0);
  sub_100009A90();
}

uint64_t SessionFilename.__deallocating_deinit()
{
  uint64_t v1 = sub_1000A19D0();
  sub_100019DA4(v1);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000C9A5C( uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  void v56[3] = a4;
  if (a1 < 0)
  {
    sub_100019F5C();
    uint64_t v42 = "Must take zero or more splits";
    uint64_t v43 = "Swift/Collection.swift";
    uint64_t v44 = 29LL;
    uint64_t v45 = 22LL;
    goto LABEL_42;
  }

  uint64_t v10 = sub_10006B2D0((uint64_t)&unk_1001B87E8);
  *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v48 = v10 + 16;
  uint64_t v53 = sub_10006B2D0((uint64_t)&unk_1001B8810);
  *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = 15LL;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000LL) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = 7LL;
    if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
      uint64_t v31 = 11LL;
    }
    sub_1000C9E2C(v31 | (v11 << 16), v53, a2 & 1, v10, a5, a6);
    sub_1000110E0();
    uint64_t v14 = *(void **)(v10 + 16);
    sub_10005A5AC();
    swift_release();
LABEL_38:
    swift_release();
    return (uint64_t)v14;
  }

  uint64_t v47 = a1;
  uint64_t v13 = 7LL;
  if (((a6 >> 60) & ((a5 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v13 = 11LL;
  }
  uint64_t v46 = v13 | (v12 << 16);
  unint64_t v54 = 4 * v12;
  uint64_t v14 = &_swiftEmptyArrayStorage;
  unint64_t v15 = 15LL;
  unint64_t v16 = 15LL;
  unint64_t v17 = 15LL;
  while (1)
  {
    v56[0] = String.subscript.getter(v15, a5, a6);
    v56[1] = v18;
    char v19 = a3(v56);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1000110E0();
      return (uint64_t)v14;
    }

    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      unint64_t v15 = sub_1000CA9D4();
      goto LABEL_23;
    }

    int v21 = (v16 >> 14 == v15 >> 14) & a2;
    if (v21 != 1)
    {
      if (v15 >> 14 < v16 >> 14) {
        goto LABEL_40;
      }
      uint64_t v22 = sub_1000CA9F4(v16, v15);
      uint64_t v49 = v24;
      uint64_t v50 = v23;
      uint64_t v51 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      {
        sub_1000CAA00();
        uint64_t v14 = v29;
      }

      unint64_t v26 = v14[2];
      if (v26 >= v14[3] >> 1)
      {
        sub_1000CAA00();
        uint64_t v14 = v30;
      }

      v14[2] = v26 + 1;
      uint64_t v27 = &v14[4 * v26];
      void v27[4] = v22;
      v27[5] = v51;
      v27[6] = v50;
      v27[7] = v49;
      *(void *)uint64_t v48 = v14;
    }

    uint64_t v28 = sub_1000CA9D4();
    unint64_t v15 = v28;
    *(void *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
    if ((v21 & 1) == 0 && v14[2] == v47) {
      break;
    }
    unint64_t v16 = v28;
    unint64_t v17 = v28;
LABEL_23:
    if (v54 == v15 >> 14) {
      goto LABEL_32;
    }
  }

  unint64_t v17 = v28;
  unint64_t v16 = v28;
LABEL_32:
  if (v54 == v16 >> 14 && (a2 & 1) != 0)
  {
    sub_1000110E0();
LABEL_37:
    sub_10005A5AC();
    swift_release();
    goto LABEL_38;
  }

  if (v54 >= v17 >> 14)
  {
    uint64_t v32 = sub_1000CA9F4(v17, v46);
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    sub_1000110E0();
    sub_1000340E0();
    uint64_t v39 = *(void *)(*(void *)v48 + 16LL);
    sub_100034158(v39);
    uint64_t v14 = *(void **)v48;
    v14[2] = v39 + 1;
    uint64_t v40 = &v14[4 * v39];
    v40[4] = v32;
    v40[5] = v34;
    v40[6] = v36;
    v40[7] = v38;
    *(void *)uint64_t v48 = v14;
    goto LABEL_37;
  }

uint64_t sub_1000C9E2C( unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = *(void *)(a2 + 16);
  int v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1) {
    return v8 ^ 1u;
  }
  if (a1 >> 14 >= v7 >> 14)
  {
    uint64_t v10 = String.subscript.getter(v7, a1, a5, a6);
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    sub_1000340E0();
    uint64_t v17 = *(void *)(*(void *)(a4 + 16) + 16LL);
    sub_100034158(v17);
    uint64_t v18 = *(void *)(a4 + 16);
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v17 + 1;
    char v19 = (void *)(v18 + 32 * v17);
    void v19[4] = v10;
    void v19[5] = v12;
    v19[6] = v14;
    v19[7] = v16;
    return v8 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL);
  __break(1u);
  return result;
}

void sub_1000C9F30(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    uint64_t v4 = sub_10000941C(&qword_1001D2418);
    uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
    size_t v6 = j__malloc_size(v5);
    v5[2] = a1;
    void v5[3] = 2 * v6 - 64;
  }

  sub_100009A90();
}

uint64_t sub_1000C9F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v4 = String.init<A>(_:)( &v14,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v6 = v4;
  unint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) == 0)
  {
    if ((v5 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v9 = HIBYTE(v7) & 0xF;
    uint64_t v14 = v6;
    uint64_t v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    int v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }

  uint64_t v6 = sub_1000CA2F4(v4, v5);
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  unint64_t v7 = v11;
  if ((v11 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 0x1000000000000000LL) != 0)
  {
    int v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    int v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }

unsigned __int8 *sub_1000CA074(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }

        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }

              else
              {
                char v22 = -55;
              }
            }

            else
            {
              char v22 = -48;
            }

            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }

          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            uint64_t v31 = (char)v28 * (char)a3;
            unsigned __int8 v32 = v31;
            unsigned int v28 = (char)v31 + (char)(v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = (char)v8 * (char)a3;
            unsigned __int8 v15 = v14;
            unsigned int v8 = (char)v14 - (char)(v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            uint64_t v31 = (__int16)v28 * (__int16)a3;
            unsigned __int8 v32 = v31;
            unsigned int v28 = (__int16)v31 + (v29 + v30);
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = (__int16)v8 * (__int16)a3;
            unsigned __int8 v15 = v14;
            unsigned int v8 = (__int16)v14 - (v10 + v11);
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v21 = a3 + 87;
        if (a3 > 10)
        {
          char v22 = a3 + 55;
        }

        else
        {
          unsigned int v21 = 97;
          char v22 = 65;
        }

        if (a3 <= 10) {
          uint64_t v23 = a3 + 48;
        }
        else {
          uint64_t v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                unsigned __int8 v26 = -87;
              }

              else
              {
                unsigned __int8 v26 = -55;
              }
            }

            else
            {
              unsigned __int8 v26 = -48;
            }

            unsigned __int8 v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned int v21 = a3 + 87;
        if (a3 > 10)
        {
          char v22 = a3 + 55;
        }

        else
        {
          unsigned int v21 = 97;
          char v22 = 65;
        }

        if (a3 <= 10) {
          uint64_t v23 = a3 + 48;
        }
        else {
          uint64_t v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned __int8 v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                unsigned __int8 v26 = -87;
              }

              else
              {
                unsigned __int8 v26 = -55;
              }
            }

            else
            {
              unsigned __int8 v26 = -48;
            }

            unsigned __int8 v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            unsigned int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }

        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }

              else
              {
                char v30 = -55;
              }
            }

            else
            {
              char v30 = -48;
            }

            uint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }

        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }

        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }

              else
              {
                char v11 = -55;
              }
            }

            else
            {
              char v11 = -48;
            }

            uint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000LL) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }

      goto LABEL_72;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000CA2F4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = sub_1000CA350((uint64_t)sub_1000CA34C, 0LL, a1, a2);
  uint64_t v6 = sub_1000CA384(v2, v3, v4, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1000CA350(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v4 = a3;
  }
  uint64_t v5 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v5 = 11LL;
  }
  return String.subscript.getter(15LL, v5 | (v4 << 16), a3, a4);
}

uint64_t sub_1000CA384(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    sub_1000CA4C8(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      sub_1000C9F30(v12, 0LL);
      unint64_t v8 = (unint64_t)v13;
      sub_1000CA5B4(v16, (uint64_t)(v13 + 4), v9, a1, a2, v5, a4);
      unint64_t v5 = v14;
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease();
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }

    uint64_t v15 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release();
    return v15;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

void sub_1000CA4C8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((a1 & 0xC) == 4LL << v8)
  {
    sub_1000B8A04(a1, a3, a4);
    unint64_t v7 = v10;
  }

  if ((a2 & 0xC) == v9)
  {
    sub_1000B8A04(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return;
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return;
  }

  unint64_t v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
    return;
  }

  __break(1u);
}

void sub_1000CA5B4( unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v11 = a4;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    unint64_t v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }

  uint64_t v13 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v25 = v16;
  uint64_t v28 = a3 - 1;
  unint64_t v11 = a4;
  while (1)
  {
    unint64_t v17 = v11;
    if ((v11 & 0xC) == v15) {
      sub_1000B8A04(v11, a6, a7);
    }
    if (v17 >> 14 < v29 || v17 >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      char v21 = String.UTF8View._foreignSubscript(position:)();
    }

    else
    {
      unint64_t v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        char v21 = *((_BYTE *)v30 + v19);
      }

      else
      {
        uint64_t v20 = v23;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t v20 = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v21 = *(_BYTE *)(v20 + v19);
      }
    }

    if ((v11 & 0xC) == v15)
    {
      sub_1000B8A04(v11, a6, a7);
      unint64_t v11 = v22;
      if ((a7 & 0x1000000000000000LL) == 0)
      {
LABEL_27:
        unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
        goto LABEL_31;
      }
    }

    else if ((a7 & 0x1000000000000000LL) == 0)
    {
      goto LABEL_27;
    }

    if (v25 <= v11 >> 16) {
      goto LABEL_35;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)(v11, a6, a7);
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14) {
        continue;
      }
    }

    goto LABEL_33;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

unint64_t sub_1000CA7B8()
{
  unint64_t result = qword_1001D6D80;
  if (!qword_1001D6D80)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SessionFilename.SessionFileState,  &type metadata for SessionFilename.SessionFileState);
    atomic_store(result, (unint64_t *)&qword_1001D6D80);
  }

  return result;
}

uint64_t sub_1000CA7F4()
{
  return type metadata accessor for SessionFilename(0LL);
}

uint64_t type metadata accessor for SessionFilename(uint64_t a1)
{
  uint64_t result = qword_1001D6DB0;
  if (!qword_1001D6DB0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionFilename);
  }
  return result;
}

uint64_t sub_1000CA834(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[2] = &unk_1001634B0;
    void v4[3] = &unk_1001634C8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SessionFilename.SessionFileState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000CA90C + 4 * byte_1001633ED[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000CA940 + 4 * byte_1001633E8[v4]))();
}

uint64_t sub_1000CA940(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000CA948(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CA950LL);
  }
  return result;
}

uint64_t sub_1000CA95C(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CA964LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000CA968(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000CA970(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionFilename.SessionFileState()
{
  return &type metadata for SessionFilename.SessionFileState;
}

uint64_t sub_1000CA98C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000CA9B0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

  ;
}

uint64_t sub_1000CA9D4()
{
  return String.index(after:)(v2, v1, v0);
}

uint64_t sub_1000CA9E4()
{
  return swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
}

uint64_t sub_1000CA9F4(uint64_t a1, uint64_t a2)
{
  return String.subscript.getter(a1, a2, v3, v2);
}

void sub_1000CAA00()
{
}

  ;
}

uint64_t sub_1000CAA20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten);
  BOOL v4 = __OFADD__(v3, a2);
  uint64_t v5 = v3 + a2;
  if (v4)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten) = v5;
    return a2;
  }

  return result;
}

id sub_1000CAA90()
{
  uint64_t v1 = (objc_class *)sub_100010E3C();
  *(void *)&v0[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0LL;
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, "initToMemory");
}

id sub_1000CAAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (objc_class *)sub_100010E3C();
  *(void *)&v2[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0LL;
  v7.receiver = v2;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "initToBuffer:capacity:", a1, a2);
}

id sub_1000CAB70(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3);
  objc_super v7 = (NSURL *)OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten;
  *(void *)&v3[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0LL;
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  v15.receiver = v3;
  v15.super_class = ObjectType;
  id v10 = objc_msgSendSuper2(&v15, "initWithURL:append:", v8, a2 & 1);

  uint64_t v11 = type metadata accessor for URL(0LL);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
  id v13 = v10;
  v12(a1, v11);
  if (v13) {

  }
  return v13;
}

id sub_1000CACA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)sub_100010E3C();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NullStream()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd10NullStream);
}

id sub_1000CACF4(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0LL;
  id v6 = [(id)swift_getObjCClassFromMetadata(v2) fileHandleForWritingToURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = sub_10005A18C();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    id v10 = v7;
    v9(a1, v8);
  }

  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)(v7);

    sub_1000CC440();
    uint64_t v12 = sub_10005A18C();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(a1, v12);
  }

  return v6;
}

void sub_1000CADFC()
{
  uint64_t v2 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  sub_1000270AC();
  if (swift_unknownObjectWeakLoadStrong(v0 + 16))
  {
    sub_10000D010();
    sub_10000C0C4();
    uint64_t v5 = URL.lastPathComponent.getter();
    unint64_t v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
    uint64_t v8 = type metadata accessor for SessionFilename(0LL);
    swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    sub_100010E2C();
    SessionFilename.init(fromString:)(v5, v7);
    if (v9)
    {
      uint64_t v10 = v9 + OBJC_IVAR____TtC7parsecd15SessionFilename_state;
      swift_beginAccess(v9 + OBJC_IVAR____TtC7parsecd15SessionFilename_state, v19, 0LL, 0LL);
      __asm { BR              X10 }
    }

    if (qword_1001D0508 != -1) {
      swift_once(&qword_1001D0508, sub_100034448);
    }
    uint64_t v11 = sub_100010ED4();
    sub_1000093D0(v11, (uint64_t)qword_1001EDBE8);
    uint64_t v12 = sub_100010E2C();
    id v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v15 = static os_log_type_t.error.getter(v13, v14);
    if (os_log_type_enabled(v13, v15))
    {
      uint64_t v16 = (uint8_t *)sub_100009B20(12LL);
      uint64_t v17 = sub_100009B20(32LL);
      v19[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      sub_100010E2C();
      uint64_t v20 = sub_1000A2220(v5, v18, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4);
      sub_1000CC474();
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Session file had unexpected name: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL);
      sub_100010C34(v17);
      sub_100010C34((uint64_t)v16);
      sub_10001449C();
    }

    else
    {

      sub_1000CC468();
      sub_10001449C();
    }
  }

void sub_1000CB4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v7 = sub_10005A18C();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v62 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)&v56 - v12;
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v56 - v14;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (Strong)
  {
    uint64_t v17 = Strong;
    sub_1000CB9C4(a1, a2);
    if (v4)
    {
      swift_unknownObjectRelease();
    }

    else
    {
      uint64_t v59 = v17;
      uint64_t v60 = v7;
      uint64_t v61 = v8;
      id v22 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL.path.getter(v22);
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v24 = sub_10000941C(qword_1001D41F8);
      uint64_t inited = swift_initStackObject(v24, v65);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 32) = NSFilePosixPermissions;
      *(void *)(inited + 4sub_1000AC280(v0, v1, 0) = 384LL;
      type metadata accessor for FileAttributeKey(0LL);
      uint64_t v27 = v26;
      uint64_t v28 = sub_10003B7FC( (unint64_t *)&qword_1001D0B98,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_10015D13C);
      unint64_t v29 = NSFilePosixPermissions;
      uint64_t v30 = Dictionary.init(dictionaryLiteral:)(inited, v27, (char *)&type metadata for Any + 8, v28);
      LOBYTE(v27) = sub_1000CBD70((uint64_t)v23, 0LL, v30, v22);

      if ((v27 & 1) != 0)
      {
        sub_10007821C();
        uint64_t v32 = v60;
        uint64_t v31 = v61;
        sub_1000CC42C((uint64_t)v13);
        id v33 = sub_1000CACF4((uint64_t)v13);
        uint64_t v41 = qword_1001D0508;
        id v42 = v33;
        if (v41 != -1) {
          swift_once(&qword_1001D0508, sub_100034448);
        }
        uint64_t v43 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v43, (uint64_t)qword_1001EDBE8);
        uint64_t v44 = v62;
        uint64_t v45 = sub_1000CC42C(v62);
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          os_log_t v57 = v46;
          uint64_t v48 = swift_slowAlloc(12LL, -1LL);
          id v58 = v42;
          uint64_t v49 = (uint8_t *)v48;
          uint64_t v56 = swift_slowAlloc(32LL, -1LL);
          uint64_t v66 = v56;
          *(_DWORD *)uint64_t v49 = 136315138;
          uint64_t v50 = URL.lastPathComponent.getter();
          uint64_t v64 = sub_1000307E0(v50, v51, &v66);
          uint64_t v31 = v61;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v49 + 4);
          swift_bridgeObjectRelease();
          sub_10005A6D0(v44, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));
          os_log_t v52 = v57;
          _os_log_impl((void *)&_mh_execute_header, v57, v47, "new session file: %s", v49, 0xCu);
          uint64_t v53 = v56;
          swift_arrayDestroy(v56, 1LL);
          sub_100010C34(v53);
          uint64_t v54 = (uint64_t)v49;
          id v42 = v58;
          sub_100010C34(v54);
          sub_1000CC438();
        }

        else
        {
          sub_10005A6D0(v44, *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8));

          sub_1000CC438();
        }

        uint64_t v55 = v63;
        (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v63, v15, v32);
        *(void *)(v55 + *(int *)(type metadata accessor for FeedbackFile(0LL) + 20)) = v42;
      }

      else
      {
        uint64_t v34 = type metadata accessor for SessionFileCreationError(0LL);
        uint64_t v35 = sub_10003B7FC( &qword_1001D1068,  type metadata accessor for SessionFileCreationError,  (uint64_t)&unk_1001635A8);
        uint64_t v36 = sub_100010EA0(v34, v35);
        uint64_t v38 = v37;
        *uint64_t v37 = URL.path.getter(v36);
        v38[1] = v39;
        uint64_t v40 = swift_storeEnumTagMultiPayload(v38, v34, 0LL);
        swift_willThrow(v40);
        sub_1000CC438();
        (*(void (**)(char *, uint64_t))(v61 + 8))(v15, v60);
      }
    }
  }

  else
  {
    uint64_t v18 = type metadata accessor for SessionFileCreationError(0LL);
    uint64_t v19 = sub_10003B7FC(&qword_1001D1068, type metadata accessor for SessionFileCreationError, (uint64_t)&unk_1001635A8);
    sub_100010EA0(v18, v19);
    uint64_t v21 = swift_storeEnumTagMultiPayload(v20, v18, 3LL);
    swift_willThrow(v21);
  }

  sub_10002716C();
}

void sub_1000CB9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10005A18C();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_1000270AC();
  if ((static SessionDBFeatureFlags.uploadFromFlag.getter() & 1) != 0)
  {
    uint64_t v21 = sub_1000CC480();
    uint64_t v22 = sub_10003B7FC(&qword_1001D1068, type metadata accessor for SessionFileCreationError, (uint64_t)&unk_1001635A8);
    uint64_t v23 = sub_100010EA0(v21, v22);
    uint64_t v25 = sub_1000CC41C(v23, v24);
    uint64_t v27 = 4LL;
LABEL_8:
    swift_storeEnumTagMultiPayload(v25, v26, v27);
    sub_1000CC440();
    goto LABEL_9;
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (!Strong)
  {
    uint64_t v28 = type metadata accessor for SessionFileCreationError(0LL);
    uint64_t v29 = sub_10003B7FC(&qword_1001D1068, type metadata accessor for SessionFileCreationError, (uint64_t)&unk_1001635A8);
    uint64_t v30 = sub_100010EA0(v28, v29);
    uint64_t v25 = sub_1000CC41C(v30, v31);
    uint64_t v27 = 3LL;
    goto LABEL_8;
  }

  v40[1] = Strong;
  uint64_t v12 = type metadata accessor for SessionFilename(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  swift_bridgeObjectRetain(a2);
  char v41 = 1;
  SessionFilename.init(fromUserGUID:state:processID:uploadPending:)(a1, a2, 0, 0x100000000LL, 0);
  if (v13)
  {
    id v14 = [(id)objc_opt_self(NSFileManager) defaultManager];
    NSFileManager.parsecdSessionFBDirectoryURL.getter(v14);

    if (sub_100010708((uint64_t)v8, 1LL, v9) == 1)
    {
      sub_100010AE8((uint64_t)v8);
      uint64_t v15 = sub_1000CC480();
      uint64_t v16 = sub_10003B7FC( &qword_1001D1068,  type metadata accessor for SessionFileCreationError,  (uint64_t)&unk_1001635A8);
      uint64_t v17 = sub_100010EA0(v15, v16);
      uint64_t v19 = sub_1000CC41C(v17, v18);
      swift_storeEnumTagMultiPayload(v19, v20, 6LL);
      sub_1000CC440();
      sub_1000CC460();
      swift_release();
    }

    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v3, v8, v9);
      SessionFilename.filenameString.getter();
      URL.appendingPathComponent(_:)(v38, v39);
      sub_1000CC460();
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v9);
    }
  }

  else
  {
    uint64_t v32 = type metadata accessor for SessionFileCreationError(0LL);
    uint64_t v33 = sub_10003B7FC(&qword_1001D1068, type metadata accessor for SessionFileCreationError, (uint64_t)&unk_1001635A8);
    uint64_t v34 = sub_100010EA0(v32, v33);
    uint64_t v36 = sub_1000CC41C(v34, v35);
    swift_storeEnumTagMultiPayload(v36, v37, 5LL);
    sub_1000CC440();
    sub_1000CC460();
  }

void *sub_1000CBC7C(void *a1)
{
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = type metadata accessor for LazyFileWriter();
    swift_allocObject(v6, 64LL, 7LL);
    return sub_10000D228(v4, v5, a1);
  }

  return result;
}

uint64_t sub_1000CBCF4()
{
  return swift_deallocClassInstance(v0, 41LL, 7LL);
}

uint64_t type metadata accessor for ParsecPersistentStorage()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd23ParsecPersistentStorage);
}

uint64_t type metadata accessor for SessionFileCreationError(uint64_t a1)
{
  uint64_t result = qword_1001D7050;
  if (!qword_1001D7050) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionFileCreationError);
  }
  return result;
}

id sub_1000CBD70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [a4 createFileAtPath:a1 contents:a2 attributes:isa];

  return v8;
}

void *sub_1000CBE20(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      a1[2] = a2[2];
      swift_bridgeObjectRetain(v14);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = *a2;
      swift_errorRetain(*a2);
      *a1 = v15;
      uint64_t v16 = *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v5 + 64));
        return a1;
      }

      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      uint64_t v10 = a1;
      uint64_t v11 = a3;
      uint64_t v12 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }

  return a1;
}

uint64_t sub_1000CBF48(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2) {
    return swift_bridgeObjectRelease();
  }
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }

  swift_errorRelease(*a1);
  uint64_t v4 = (char *)a1 + *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
  uint64_t v5 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1000CBFCC(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    a1[2] = a2[2];
    swift_bridgeObjectRetain(v11);
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 2LL;
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v12 = *a2;
    swift_errorRetain(*a2);
    *a1 = v12;
    uint64_t v13 = *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 1LL;
  }

  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      return a1;
    }

    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    id v8 = a1;
    uint64_t v9 = a3;
    uint64_t v10 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v8, v9, v10);
  return a1;
}

void *sub_1000CC0CC(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000CC1EC((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v11 = a2[1];
      a1[1] = v11;
      a1[2] = a2[2];
      swift_bridgeObjectRetain(v11);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *a2;
      swift_errorRetain(*a2);
      *a1 = v12;
      uint64_t v13 = *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        return a1;
      }

      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      id v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_1000CC1EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionFileCreationError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_1000CC228(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
    uint64_t v7 = (char *)a1 + v6;
    id v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1000CC2D4(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000CC1EC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10000941C(&qword_1001D6FD8) + 48);
      uint64_t v7 = (char *)a1 + v6;
      id v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000CC390(uint64_t a1)
{
  v5[0] = &unk_100163560;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, &unk_100163578, *(void *)(result - 8) + 64LL);
    v5[1] = v4;
    v5[2] = &unk_100163590;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000CC41C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000CC42C(uint64_t a1)
{
  return v2(a1, v1, v3);
}

uint64_t sub_1000CC438()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 200));
}

uint64_t sub_1000CC440()
{
  return swift_willThrow();
}

uint64_t sub_1000CC448(uint64_t a1)
{
  *(void *)(v1 - 12sub_1000AC280(v0, v1, 0) = a1;
  return v1 - 120;
}

uint64_t sub_1000CC460()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 88));
}

uint64_t sub_1000CC468()
{
  return swift_bridgeObjectRelease_n(v0, 2LL);
}

uint64_t sub_1000CC474()
{
  return swift_bridgeObjectRelease_n(v0, 3LL);
}

uint64_t sub_1000CC480()
{
  return type metadata accessor for SessionFileCreationError(0LL);
}

uint64_t sub_1000CC488()
{
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for BiomeDatabaseManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd20BiomeDatabaseManager);
}

void sub_1000CC4D4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  uint64_t v2 = (char *)&loc_1000CC514 + *((int *)qword_1000CC5B0 + (*(void *)(v1 + *(int *)(sub_1000CF7E8() + 40) + 8) >> 62));
  __asm { BR              X12 }

uint64_t sub_1000CC524()
{
  return BYTE6(v0);
}

uint64_t sub_1000CC5C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000CC620( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Search_V2_SearchResponse,  (void (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000CC908);
}

uint64_t sub_1000CC5F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000CC620( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse,  (void (*)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000CD064);
}

uint64_t sub_1000CC620( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void), void (*a10)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a10;
  uint64_t v14 = a9(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v18 = sub_1000772E0();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = sub_1000CF7C0();
  type metadata accessor for CachedResultSet.Result(v20);
  sub_100027160();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v11, a3, v18);
  sub_10005A6F0((uint64_t)v17, a4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16));
  v29(v27, v28, v11, v17, v30, v31, v32, v33);
  sub_10005A6D0(a4, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a3, v18);
  uint64_t v24 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(void *)(v24 + sub_10000BDD4(v0 + 16) = 0LL;
  sub_1000413B8((uint64_t)v23, v24 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  return v24;
}

unint64_t sub_1000CC794(uint64_t a1, uint64_t a2)
{
  unsigned int v12 = 0;
  uint64_t v10 = &v12;
  if ((a2 & 0x1000000000000000LL) != 0 || !(a2 & 0x2000000000000000LL | a1 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(sub_1000CF3CC, v9, a1, a2, &type metadata for Bool);
    swift_bridgeObjectRelease();
    char v5 = v11[0];
  }

  else if ((a2 & 0x2000000000000000LL) != 0)
  {
    v11[0] = a1;
    v11[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    char v5 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (uint64_t v6 = (_BYTE *)_swift_stdlib_strtof_clocale(v11, &v12, a1)) != 0LL
      && *v6 == 0;
    swift_bridgeObjectRelease();
  }

  else
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      uint64_t v3 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v3 = _StringObject.sharedUTF8.getter(a1, a2);
    }

    char v5 = sub_1000CF310(v3, v4, (void (*)(uint64_t *__return_ptr))sub_1000CF3E4);
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = v12;
  LOBYTE(v11[0]) = (v5 & 1) == 0;
  if ((v5 & 1) == 0) {
    uint64_t v7 = 0LL;
  }
  return v7 | ((unint64_t)((v5 & 1) == 0) << 32);
}

void sub_1000CC908( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, Swift::String *a7@<X8>)
{
  unint64_t v127 = a4;
  uint64_t v14 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v129 = *(void *)(v14 - 8);
  uint64_t v130 = v14;
  sub_100027160();
  __chkstk_darwin(v15);
  sub_100032C48();
  uint64_t v123 = v16;
  sub_10003D810();
  __chkstk_darwin(v17);
  uint64_t v122 = (uint64_t)&v114 - v18;
  sub_10003D810();
  __chkstk_darwin(v19);
  sub_10005A2F8();
  uint64_t v121 = v20;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100027160();
  __chkstk_darwin(v21);
  sub_100014428();
  uint64_t v119 = v22;
  uint64_t v120 = sub_1000CF8AC();
  uint64_t v118 = *(void *)(v120 - 8);
  sub_100027160();
  __chkstk_darwin(v23);
  sub_100032C48();
  uint64_t v117 = v24;
  sub_10003D810();
  __chkstk_darwin(v25);
  sub_10005A2F8();
  uint64_t v116 = v26;
  sub_10000941C(&qword_1001D5ED0);
  sub_100027160();
  __chkstk_darwin(v27);
  sub_10006B604();
  uint64_t v128 = type metadata accessor for URL(0LL);
  uint64_t v126 = *(void *)(v128 - 8);
  sub_100027160();
  __chkstk_darwin(v28);
  sub_100014428();
  uint64_t v125 = v29;
  Swift::String v30 = String.lowercased()();
  uint64_t v31 = sub_100009B3C();
  *a7 = v30;
  Apple_Parsec_Search_V2_SearchResponse.query.getter(v31);
  Swift::String v32 = String.lowercased()();
  uint64_t v33 = sub_100009B3C();
  a7[1] = v32;
  uint64_t v34 = a1;
  Apple_Parsec_Search_V2_SearchResponse.completionScore.getter(v33);
  uint64_t v35 = (int *)sub_1000CF7E8();
  uint64_t v36 = sub_1000CF8F4((uint64_t)v35);
  unint64_t v37 = v127;
  *uint64_t v38 = a3;
  v38[1] = v37;
  uint64_t v39 = (uint64_t *)((char *)&a7->_countAndFlagsBits + *(int *)(v36 + 40));
  *uint64_t v39 = a5;
  v39[1] = a6;
  uint64_t v124 = a5;
  unint64_t v127 = a6;
  uint64_t v40 = sub_100014244(a5, a6);
  uint64_t v41 = URLRequest.allHTTPHeaderFields.getter(v40);
  double v42 = 0.0;
  if (v41
    && (uint64_t v43 = v41,
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-UI-Scale"),
        sub_10000BF84(v44, v45, v43),
        uint64_t v47 = v46,
        swift_bridgeObjectRelease(),
        sub_100009B3C(),
        v47))
  {
    unint64_t v48 = sub_1000CF8A0();
    uint64_t v49 = v128;
    if ((v48 & 0x100000000LL) == 0) {
      double v42 = *(float *)&v48;
    }
  }

  else
  {
    uint64_t v49 = v128;
  }

  *(double *)((char *)&a7->_countAndFlagsBits + v35[8]) = v42;
  int v50 = Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.getter();
  uint64_t v51 = (uint64_t)a7 + v35[6];
  if (v50 < 1)
  {
    uint64_t v53 = 1LL;
  }

  else
  {
    int v52 = Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.getter();
    Date.init(timeIntervalSinceNow:)((double)v52);
    uint64_t v53 = 0LL;
  }

  uint64_t v54 = type metadata accessor for Date(0LL);
  uint64_t v55 = sub_100009654(v51, v53, 1LL, v54);
  URLRequest.url.getter(v55);
  if (sub_100010708(v7, 1LL, v49) == 1)
  {
    sub_1000CF7DC();
    uint64_t v56 = sub_1000CF860();
    sub_1000CF648(v56);
    uint64_t v57 = sub_1000772E0();
    sub_1000CF6E8(v57);
    id v58 = &qword_1001D5ED0;
    uint64_t v59 = v7;
LABEL_25:
    sub_100014358(v59, v58);
LABEL_26:
    sub_10002FB10(v35[11]);
    sub_10002FB10(v35[12]);
    sub_10002FB10(v35[13]);
    goto LABEL_27;
  }

  sub_10005A6F0(v125, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v126 + 32));
  objc_opt_self(&OBJC_CLASS___NSURLComponents);
  URL._bridgeToObjectiveC()(v60);
  uint64_t v62 = (void *)v61;
  id v63 = sub_1000CF7F0(v61, "parsec_componentsWithURL:resolvingAgainstBaseURL:");

  if (!v63)
  {
    uint64_t v67 = v119;
    sub_10002FC40(v119, v64, v65, v120);
    goto LABEL_24;
  }

  uint64_t v66 = v117;
  sub_1000CF894();

  uint64_t v67 = v119;
  uint64_t v68 = v66;
  uint64_t v69 = v120;
  sub_100034260(v119, v68);
  sub_1000CF810(v67);
  if (sub_100010708(v67, 1LL, v69) == 1)
  {
LABEL_24:
    sub_1000CF7DC();
    uint64_t v88 = sub_1000CF860();
    sub_1000CF648(v88);
    uint64_t v89 = sub_1000772E0();
    sub_1000CF6E8(v89);
    sub_1000CF6A0(v125, v126);
    id v58 = (uint64_t *)&unk_1001D47C0;
    uint64_t v59 = v67;
    goto LABEL_25;
  }

  uint64_t v70 = v116;
  uint64_t v71 = sub_100034260(v116, v67);
  uint64_t v72 = URLComponents.queryItems.getter(v71);
  if (!v72)
  {
    sub_1000CF7DC();
    uint64_t v90 = sub_1000CF860();
    sub_1000CF648(v90);
    uint64_t v91 = sub_1000772E0();
    sub_1000CF6E8(v91);
    sub_10004729C(v70, *(uint64_t (**)(uint64_t, uint64_t))(v118 + 8));
    sub_1000CF6A0(v125, v126);
    goto LABEL_26;
  }

  uint64_t v73 = v72;
  uint64_t v117 = v34;
  uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"qtype");
  uint64_t v76 = v75;
  uint64_t v77 = *(void *)(v73 + 16);
  uint64_t v115 = v73;
  if (v77)
  {
    uint64_t v78 = v74;
    unint64_t v79 = v73 + ((*(unsigned __int8 *)(v129 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80));
    uint64_t v119 = *(void *)(v129 + 72);
    uint64_t v80 = v73;
    uint64_t v73 = *(void *)(v129 + 16);
    swift_bridgeObjectRetain(v80);
    uint64_t v81 = v130;
    uint64_t v82 = v121;
    while (1)
    {
      uint64_t v83 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v73)(v82, v79, v81);
      uint64_t v84 = URLQueryItem.name.getter(v83);
      if (v84 == v78 && v85 == v76)
      {
        sub_1000CF6FC();
        uint64_t v92 = sub_1000110A8();
        goto LABEL_32;
      }

      char v87 = sub_1000CF634(v84, v85);
      sub_100009B3C();
      if ((v87 & 1) != 0) {
        break;
      }
      uint64_t v81 = v130;
      uint64_t v82 = v121;
      sub_1000CF880(v121, *(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
      v79 += v119;
      if (!--v77)
      {
        sub_1000110A8();
        uint64_t v73 = v115;
        goto LABEL_29;
      }
    }

    uint64_t v92 = sub_1000CF6FC();
LABEL_32:
    URLQueryItem.value.getter(v92);
    sub_1000CF754();
    sub_1000110A8();
  }

  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
    uint64_t v78 = 0LL;
  }

  sub_1000CF7B4(v35[11]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"suggest_queries");
  uint64_t v94 = v93;
  uint64_t v95 = *(void *)(v73 + 16);
  uint64_t v114 = a2;
  if (v95)
  {
    sub_1000CF6AC();
    while (1)
    {
      uint64_t v96 = sub_1000CF870();
      uint64_t v97 = URLQueryItem.name.getter(v96);
      if (v97 == v78 && v98 == v94)
      {
        sub_1000CF6FC();
        goto LABEL_45;
      }

      char v100 = sub_1000CF634(v97, v98);
      sub_100009B3C();
      if ((v100 & 1) != 0) {
        break;
      }
      sub_1000CF880(v122, *(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
      a2 += v77;
      if (!--v95)
      {
        sub_1000110A8();
        sub_1000CF6FC();
        uint64_t v78 = 0LL;
        sub_1000CF8C0();
        goto LABEL_46;
      }
    }

    uint64_t v73 = v115;
LABEL_45:
    swift_bridgeObjectRelease();
    sub_1000CF8C0();
    URLQueryItem.value.getter(v101);
    sub_1000CF754();
    sub_1000110A8();
  }

  else
  {
    sub_1000110A8();
    sub_1000CF794();
  }

void sub_1000CD064( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, Swift::String *a7@<X8>)
{
  uint64_t v141 = a1;
  unint64_t v142 = a6;
  uint64_t v144 = a5;
  uint64_t v139 = a3;
  uint64_t v140 = a4;
  uint64_t v11 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v145 = *(void *)(v11 - 8);
  uint64_t v146 = v11;
  sub_100027160();
  __chkstk_darwin(v12);
  sub_100032C48();
  uint64_t v147 = v13;
  sub_10003D810();
  __chkstk_darwin(v14);
  uint64_t v133 = (uint64_t)&v127 - v15;
  sub_10003D810();
  __chkstk_darwin(v16);
  sub_10005A2F8();
  uint64_t v132 = v17;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100027160();
  __chkstk_darwin(v18);
  sub_100014428();
  uint64_t v130 = v19;
  uint64_t v131 = sub_1000CF8AC();
  uint64_t v129 = *(void *)(v131 - 8);
  sub_100027160();
  __chkstk_darwin(v20);
  sub_100032C48();
  uint64_t v128 = v21;
  sub_10003D810();
  __chkstk_darwin(v22);
  sub_10005A2F8();
  uint64_t v127 = v23;
  sub_10000941C(&qword_1001D5ED0);
  sub_100027160();
  __chkstk_darwin(v24);
  sub_100014428();
  uint64_t v137 = v25;
  uint64_t v143 = type metadata accessor for URL(0LL);
  uint64_t v136 = *(void *)(v143 - 8);
  sub_100027160();
  __chkstk_darwin(v26);
  sub_100014428();
  uint64_t v135 = v27;
  uint64_t v138 = type metadata accessor for Google_Protobuf_DoubleValue(0LL);
  uint64_t v28 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v29 = sub_1000CF7C0();
  uint64_t v30 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResults(v29);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  sub_10006B61C();
  Swift::String v32 = String.lowercased()();
  uint64_t v33 = sub_100009B3C();
  *a7 = v32;
  uint64_t v34 = Apple_Parsec_Safari_V1alpha_SafariSearchResponse.searchResults.getter(v33);
  Apple_Parsec_Safari_V1alpha_SafariSearchResults.query.getter(v34);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v35(v8, v30);
  Swift::String v36 = String.lowercased()();
  uint64_t v37 = sub_1000110A8();
  a7[1] = v36;
  uint64_t v134 = a2;
  uint64_t v38 = Apple_Parsec_Safari_V1alpha_SafariSearchResponse.searchResults.getter(v37);
  Apple_Parsec_Safari_V1alpha_SafariSearchResults.completionScore.getter(v38);
  uint64_t v39 = v8;
  uint64_t v40 = v144;
  uint64_t v41 = ((uint64_t (*)(uint64_t, uint64_t))v35)(v39, v30);
  Google_Protobuf_DoubleValue.value.getter(v41);
  double v42 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  uint64_t v43 = v142;
  v42(v7, v138);
  uint64_t v44 = (int *)sub_1000CF7E8();
  uint64_t v45 = sub_1000CF8F4((uint64_t)v44);
  uint64_t v46 = v140;
  *uint64_t v47 = v139;
  v47[1] = v46;
  unint64_t v48 = (uint64_t *)((char *)&a7->_countAndFlagsBits + *(int *)(v45 + 40));
  *unint64_t v48 = v40;
  v48[1] = v43;
  uint64_t v49 = sub_100014244(v40, v43);
  uint64_t v50 = URLRequest.allHTTPHeaderFields.getter(v49);
  double v51 = 0.0;
  if (v50
    && (uint64_t v52 = v50,
        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"X-Apple-UI-Scale"),
        sub_10000BF84(v53, v54, v52),
        uint64_t v56 = v55,
        swift_bridgeObjectRelease(),
        sub_100009B3C(),
        v56))
  {
    unint64_t v57 = sub_1000CF8A0();
    uint64_t v58 = v143;
    uint64_t v59 = v147;
    uint64_t v60 = v137;
    if ((v57 & 0x100000000LL) == 0) {
      double v51 = *(float *)&v57;
    }
  }

  else
  {
    uint64_t v58 = v143;
    uint64_t v59 = v147;
    uint64_t v60 = v137;
  }

  *(double *)((char *)&a7->_countAndFlagsBits + v44[8]) = v51;
  uint64_t v61 = (uint64_t)a7 + v44[6];
  uint64_t v62 = type metadata accessor for Date(0LL);
  uint64_t v65 = sub_10002FC40(v61, v63, v64, v62);
  URLRequest.url.getter(v65);
  if (sub_100010708(v60, 1LL, v58) == 1)
  {
    sub_1000CF788();
    uint64_t v66 = sub_1000CF868();
    sub_1000CF6D4(v66);
    uint64_t v67 = sub_1000772E0();
    sub_1000CF68C(v67);
    uint64_t v68 = &qword_1001D5ED0;
    uint64_t v69 = v60;
LABEL_22:
    sub_100014358(v69, v68);
LABEL_23:
    sub_10002FB10(v44[11]);
    sub_10002FB10(v44[12]);
    sub_10002FB10(v44[13]);
    goto LABEL_24;
  }

  sub_10005A6F0(v135, v60, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 32));
  objc_opt_self(&OBJC_CLASS___NSURLComponents);
  URL._bridgeToObjectiveC()(v70);
  uint64_t v72 = (void *)v71;
  id v73 = sub_1000CF7F0(v71, "parsec_componentsWithURL:resolvingAgainstBaseURL:");

  if (!v73)
  {
    uint64_t v77 = v130;
    sub_10002FC40(v130, v74, v75, v131);
    goto LABEL_21;
  }

  uint64_t v76 = v128;
  sub_1000CF894();

  uint64_t v77 = v130;
  uint64_t v78 = v76;
  uint64_t v79 = v131;
  sub_100034260(v130, v78);
  sub_1000CF810(v77);
  if (sub_100010708(v77, 1LL, v79) == 1)
  {
LABEL_21:
    sub_1000CF788();
    uint64_t v97 = sub_1000CF868();
    sub_1000CF6D4(v97);
    uint64_t v98 = sub_1000772E0();
    sub_1000CF68C(v98);
    sub_1000CF6A0(v135, v136);
    uint64_t v68 = (uint64_t *)&unk_1001D47C0;
    uint64_t v69 = v77;
    goto LABEL_22;
  }

  uint64_t v80 = v77;
  uint64_t v81 = v127;
  uint64_t v82 = sub_100034260(v127, v80);
  uint64_t v83 = URLComponents.queryItems.getter(v82);
  if (!v83)
  {
    sub_1000CF788();
    uint64_t v99 = sub_1000CF868();
    sub_1000CF6D4(v99);
    uint64_t v100 = sub_1000772E0();
    sub_1000CF68C(v100);
    sub_10004729C(v81, *(uint64_t (**)(uint64_t, uint64_t))(v129 + 8));
    sub_1000CF6A0(v135, v136);
    goto LABEL_23;
  }

  uint64_t v84 = v83;
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"qtype");
  uint64_t v87 = v86;
  uint64_t v88 = *(void *)(v84 + 16);
  uint64_t v139 = v84;
  if (v88)
  {
    uint64_t v43 = v85;
    uint64_t v81 = v84 + ((*(unsigned __int8 *)(v145 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80));
    uint64_t v140 = *(void *)(v145 + 72);
    uint64_t v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v145 + 16);
    swift_bridgeObjectRetain(v84);
    uint64_t v90 = v146;
    uint64_t v91 = v132;
    while (1)
    {
      uint64_t v92 = v89(v91, v81, v90);
      uint64_t v93 = URLQueryItem.name.getter(v92);
      if (v93 == v43 && v94 == v87)
      {
        sub_1000CF76C();
        uint64_t v101 = sub_1000110A8();
        goto LABEL_29;
      }

      char v96 = sub_10005A06C(v93, v94, v43, v87);
      sub_100009B3C();
      if ((v96 & 1) != 0) {
        break;
      }
      uint64_t v90 = v146;
      uint64_t v91 = v132;
      sub_10005A6D0(v132, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
      v81 += v140;
      --v88;
      uint64_t v59 = v147;
      if (!v88)
      {
        sub_1000110A8();
        sub_1000CF76C();
        sub_1000CF794();
        goto LABEL_30;
      }
    }

    uint64_t v101 = sub_1000CF76C();
    uint64_t v59 = v147;
LABEL_29:
    uint64_t v43 = v132;
    URLQueryItem.value.getter(v101);
    sub_1000CF73C();
    sub_1000110A8();
LABEL_30:
    uint64_t v40 = v144;
  }

  else
  {
    sub_1000110A8();
    sub_1000CF794();
  }

  sub_1000CF7B4(v44[11]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"suggest_queries");
  sub_1000CF8E0();
  if (v88)
  {
    sub_1000CF848();
    uint64_t v140 = *(void *)(v102 + 72);
    uint64_t v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
    swift_bridgeObjectRetain(v104);
    uint64_t v105 = v146;
    uint64_t v106 = v133;
    while (1)
    {
      uint64_t v107 = v103(v106, v43, v105);
      uint64_t v108 = URLQueryItem.name.getter(v107);
      if (v108 == v81 && v109 == v87)
      {
        sub_1000CF76C();
        uint64_t v112 = sub_1000110A8();
        uint64_t v40 = v144;
        goto LABEL_43;
      }

      char v111 = sub_1000CF634(v108, v109);
      sub_100009B3C();
      if ((v111 & 1) != 0) {
        break;
      }
      uint64_t v105 = v146;
      uint64_t v106 = v133;
      sub_10005A6D0(v133, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
      v43 += v140;
      --v88;
      uint64_t v59 = v147;
      if (!v88)
      {
        sub_1000110A8();
        sub_1000CF76C();
        sub_1000CF794();
        uint64_t v40 = v144;
        goto LABEL_44;
      }
    }

    uint64_t v112 = sub_1000CF76C();
    uint64_t v40 = v144;
    uint64_t v59 = v147;
LABEL_43:
    uint64_t v43 = v133;
    URLQueryItem.value.getter(v112);
    sub_1000CF73C();
    sub_1000110A8();
  }

  else
  {
    sub_1000110A8();
    sub_1000CF794();
  }

LABEL_44:
  sub_1000CF7B4(v44[12]);
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"lc");
  sub_1000CF8E0();
  if (v88)
  {
    sub_1000CF848();
    uint64_t v114 = *(void *)(v113 + 72);
    uint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 16);
    swift_bridgeObjectRetain(v116);
    uint64_t v117 = v146;
    while (1)
    {
      uint64_t v118 = v115(v59, v43, v117);
      uint64_t v119 = URLQueryItem.name.getter(v118);
      if (v119 == v81 && v120 == v87) {
        break;
      }
      char v122 = sub_1000CF634(v119, v120);
      sub_100009B3C();
      if ((v122 & 1) != 0) {
        goto LABEL_55;
      }
      uint64_t v117 = v146;
      uint64_t v59 = v147;
      sub_1000CF880(v147, *(uint64_t (**)(uint64_t, uint64_t))(v145 + 8));
      v43 += v114;
      if (!--v88)
      {
        sub_1000110A8();
        swift_bridgeObjectRelease_n(v139, 2LL);
        sub_1000CF8CC();
        uint64_t v40 = v144;
        goto LABEL_56;
      }
    }

    swift_bridgeObjectRelease();
LABEL_55:
    uint64_t v123 = swift_bridgeObjectRelease();
    uint64_t v43 = v141;
    uint64_t v40 = v144;
    uint64_t v124 = v147;
    uint64_t v144 = URLQueryItem.value.getter(v123);
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v124, v146);
    swift_bridgeObjectRelease();
    sub_1000110A8();
  }

  else
  {
    swift_bridgeObjectRelease();
    sub_1000110A8();
    sub_1000CF8CC();
  }

    uint64_t v30 = 0LL;
    LOBYTE(v13) = 1;
    goto LABEL_47;
  }

  uint64_t v44 = swift_bridgeObjectRelease();
  uint64_t v22 = _swiftEmptyArrayStorage;
LABEL_76:
  sub_1000E42D0(v44);
  SQLiteBaseSchematizer.enum(withName:)(v14._countAndFlagsBits, (uint64_t)v14._object);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v45 = v54;
  uint64_t v46 = v55;
  sub_100019AFC(&v53, v54);
  uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 16))(v45, v46);
  sub_1000108B8(&v53);
  unint64_t v48 = sub_1000E8E98(v47, v52, v10, (uint64_t)v22);
  uint64_t v50 = v49;
  sub_100010C70();
  sub_10003B8E8();
  if ((v50 & 1) != 0)
  {
    SQLiteContext.setNull()();
    goto LABEL_81;
  }

  if (v48 <= 0x7FFFFFFF)
  {
    SQLiteContext.setInt32(_:)(v48);
LABEL_81:
    uint64_t v16 = v52;
    goto LABEL_10;
  }

    __break(1u);
    goto LABEL_45;
  }

  if (v5 >= v8)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  uint64_t v14 = *(_DWORD *)(v9 + 8 * v5);
  uint64_t v12 = __OFSUB__(v14, 1);
  uint64_t v15 = v14 - 1;
  if (v12)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v2 = *v10;
  if (v15 == v37)
  {
    LODWORD(v3) = *(_DWORD *)(v9 + 8 * v5 + 4);
    if ((int)v3 >= v2)
    {
      if ((sub_100109D0C() & 1) != 0)
      {
LABEL_14:
        if (v4 < *(void *)(v7 + 16))
        {
          uint64_t v16 = v7 + 8 * v4;
          *(_DWORD *)(v16 + 32) = v2;
          *(_DWORD *)(v16 + 3os_unfair_lock_lock(v0 + 6) = v3;
          *uint64_t v1 = v7;
          sub_10010914C(v5);
          return;
        }

        __break(1u);
        goto LABEL_62;
      }

    __break(1u);
    goto LABEL_45;
  }

  if (v5 >= v8)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  uint64_t v14 = *(void *)(v9 + 16 * v5);
  uint64_t v12 = __OFSUB__(v14, 1LL);
  uint64_t v15 = v14 - 1;
  if (v12)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v2 = *v10;
  if (v15 == v37)
  {
    uint64_t v3 = *(void *)(v9 + 16 * v5 + 8);
    if (v3 >= v2)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) != 0)
      {
LABEL_14:
        if (v4 < *(void *)(v7 + 16))
        {
          uint64_t v16 = v7 + 16 * v4;
          *(void *)(v16 + 32) = v2;
          *(void *)(v16 + 4sub_1000AC280(v0, v1, 0) = v3;
          *uint64_t v1 = v7;
          sub_1001091C4(v5);
          return;
        }

        __break(1u);
        goto LABEL_62;
      }

uint64_t sub_1000CD884(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7475706E69LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7475706E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7972657571LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972657571LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x6954657269707865LL && a2 == 0xEA0000000000656DLL)
  {
    unint64_t v10 = 0xEA0000000000656DLL;
    goto LABEL_24;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954657269707865LL, 0xEA0000000000656DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v10);
    return 2LL;
  }

  if (a1 == 1684632949 && a2 == 0xE400000000000000LL)
  {
    unint64_t v12 = 0xE400000000000000LL;
    goto LABEL_32;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684632949LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
LABEL_32:
    swift_bridgeObjectRelease(v12);
    return 3LL;
  }

  if (a1 == 0x656C6163536975LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v14 = 0xE700000000000000LL;
    goto LABEL_40;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C6163536975LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
LABEL_40:
    swift_bridgeObjectRelease(v14);
    return 4LL;
  }

  if (a1 == 0x6974656C706D6F63LL && a2 == 0xEF65726F63536E6FLL)
  {
    unint64_t v16 = 0xEF65726F63536E6FLL;
    goto LABEL_48;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974656C706D6F63LL, 0xEF65726F63536E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v16);
    return 5LL;
  }

  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    unint64_t v18 = 0xE400000000000000LL;
    goto LABEL_56;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
LABEL_56:
    swift_bridgeObjectRelease(v18);
    return 6LL;
  }

  if (a1 == 0x6570797471LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v20 = 0xE500000000000000LL;
    goto LABEL_64;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570797471LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v20);
    return 7LL;
  }

  if (a1 == 0x5F74736567677573LL && a2 == 0xEF73656972657571LL)
  {
    unint64_t v22 = 0xEF73656972657571LL;
    goto LABEL_72;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5F74736567677573LL, 0xEF73656972657571LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_72:
    swift_bridgeObjectRelease(v22);
    return 8LL;
  }

  if (a1 == 0x6D6F436C61636F6CLL && a2 == 0xEF6E6F6974656C70LL)
  {
    swift_bridgeObjectRelease(0xEF6E6F6974656C70LL);
    return 9LL;
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D6F436C61636F6CLL, 0xEF6E6F6974656C70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t sub_1000CDCB8()
{
  return 10LL;
}

uint64_t sub_1000CDCC0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000CDCF0 + 4 * a7[a1]))( 0x7475706E69LL,  0xE500000000000000LL);
}

uint64_t sub_1000CDCF0()
{
  return 0x7972657571LL;
}

uint64_t sub_1000CDD00()
{
  return 0x6954657269707865LL;
}

uint64_t sub_1000CDD1C()
{
  return 1684632949LL;
}

uint64_t sub_1000CDD2C()
{
  return 0x656C6163536975LL;
}

uint64_t sub_1000CDD44()
{
  return 0x6974656C706D6F63LL;
}

uint64_t sub_1000CDD68()
{
  return 1635017060LL;
}

uint64_t sub_1000CDD78()
{
  return 0x6570797471LL;
}

uint64_t sub_1000CDD88()
{
  return 0x5F74736567677573LL;
}

uint64_t sub_1000CDDAC()
{
  return 0x6D6F436C61636F6CLL;
}

uint64_t sub_1000CDDD0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000941C(&qword_1001D72D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019AFC(a1, v9);
  unint64_t v11 = sub_1000CF1E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CachedResultSet.Result.CodingKeys,  &type metadata for CachedResultSet.Result.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  LOBYTE(v28) = 0;
  sub_1000CF7A0(v12, v13);
  if (!v2)
  {
    sub_1000CF65C(v3[2], v3[3], 1);
    unint64_t v14 = (int *)type metadata accessor for CachedResultSet.Result(0LL);
    uint64_t v15 = (char *)v3 + v14[6];
    LOBYTE(v28) = 2;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_1000CF294((unint64_t *)&qword_1001D21D0, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v28, v5, v16, v17);
    uint64_t v18 = sub_10002FAD4(v14[7]);
    LOBYTE(v28) = 3;
    sub_1000CF7A0(v18, v19);
    *(void *)&__int128 v28 = *(uint64_t *)((char *)v3 + v14[8]);
    char v29 = 4;
    sub_1000CF2D4();
    sub_1000CF724();
    float v20 = *(float *)((char *)v3 + v14[9]);
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v20);
    __int128 v28 = *(_OWORD *)((char *)v3 + v14[10]);
    char v29 = 6;
    sub_10002D480();
    sub_1000CF724();
    uint64_t v21 = sub_10002FAD4(v14[11]);
    sub_1000CF65C(v21, v22, 7);
    uint64_t v23 = sub_10002FAD4(v14[12]);
    sub_1000CF65C(v23, v24, 8);
    uint64_t v25 = sub_10002FAD4(v14[13]);
    sub_1000CF65C(v25, v26, 9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000CE014@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = sub_10000941C(&qword_1001D72B0);
  __chkstk_darwin(v34);
  sub_10006B61C();
  Swift::String v36 = (int *)type metadata accessor for CachedResultSet.Result(0LL);
  sub_100027160();
  __chkstk_darwin(v7);
  sub_100014428();
  uint64_t v35 = v8;
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019AFC(a1, v10);
  unint64_t v11 = sub_1000CF1E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CachedResultSet.Result.CodingKeys,  &type metadata for CachedResultSet.Result.CodingKeys,  v11,  v10,  v9);
  if (v2) {
    return sub_1000CF8B8();
  }
  LOBYTE(v37) = 0;
  *uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v34);
  v35[1] = v12;
  void v35[2] = sub_1000CF674(1);
  v35[3] = v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  LOBYTE(v37) = 2;
  uint64_t v15 = sub_1000CF294(&qword_1001D72C0, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v14, &v37, v34, v14, v15);
  sub_100047014(v3, (uint64_t)v35 + v36[6]);
  uint64_t v16 = sub_1000CF820(3);
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(v16, v17);
  uint64_t v19 = (void *)((char *)v35 + v36[7]);
  *uint64_t v19 = v18;
  v19[1] = v20;
  char v38 = 4;
  sub_1000CF21C();
  sub_1000CF708((uint64_t)&type metadata for CGFloat);
  *(void *)((char *)v35 + v36[8]) = v37;
  uint64_t v21 = sub_1000CF820(5);
  KeyedDecodingContainer.decode(_:forKey:)(v21);
  *(_DWORD *)((char *)v35 + v36[9]) = v22;
  char v38 = 6;
  sub_1000CF258();
  sub_1000CF708((uint64_t)&type metadata for Data);
  *(_OWORD *)((char *)v35 + v36[10]) = v37;
  uint64_t v23 = sub_1000CF674(7);
  uint64_t v24 = (void *)((char *)v35 + v36[11]);
  *uint64_t v24 = v23;
  v24[1] = v25;
  uint64_t v26 = sub_1000CF674(8);
  uint64_t v27 = (void *)((char *)v35 + v36[12]);
  *uint64_t v27 = v26;
  v27[1] = v28;
  uint64_t v29 = sub_1000CF674(9);
  uint64_t v31 = v30;
  sub_1000CF800();
  Swift::String v32 = (void *)((char *)v35 + v36[13]);
  uint64_t *v32 = v29;
  v32[1] = v31;
  sub_100041338((uint64_t)v35, a2);
  sub_1000CF8B8();
  return sub_10004137C((uint64_t)v35);
}

uint64_t sub_1000CE464()
{
  return sub_1000CDCC0(*v0);
}

uint64_t sub_1000CE46C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000CD884(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000CE490@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000CDCB8();
  *a1 = result;
  return result;
}

uint64_t sub_1000CE4B4(uint64_t a1)
{
  unint64_t v2 = sub_1000CF1E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000CE4DC(uint64_t a1)
{
  unint64_t v2 = sub_1000CF1E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000CE504@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CE014(a1, a2);
}

uint64_t sub_1000CE518(void *a1)
{
  return sub_1000CDDD0(a1);
}

void sub_1000CE52C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  uint64_t v5 = v3[1];
  uint64_t v6 = a2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 8);
  BOOL v9 = v4 == v7 && v5 == v8;
  if (!v9)
  {
    sub_10005A06C(v4, v5, v7, v8);
    sub_1000CF888();
    if ((v10 & 1) == 0) {
      goto LABEL_34;
    }
  }

  uint64_t v11 = v3[3];
  uint64_t v12 = *(void *)(v6 + 24);
  if (v11)
  {
    if (!v12) {
      goto LABEL_34;
    }
    uint64_t v13 = v3[2];
    uint64_t v14 = *(void *)(v6 + 16);
    if (v13 != v14 || v11 != v12)
    {
      sub_10005A06C(v13, v11, v14, v12);
      sub_1000CF888();
      if ((v16 & 1) == 0) {
        goto LABEL_34;
      }
    }
  }

  else if (v12)
  {
    goto LABEL_34;
  }

  uint64_t v17 = sub_1000CF7E8();
  sub_1000CF774();
  if (v20)
  {
    if (!v18) {
      goto LABEL_34;
    }
    uint64_t v21 = sub_1000CF838(v19);
    if (!v9 || v22 != v24)
    {
      sub_10005A06C(v21, v22, v23, v24);
      sub_1000CF888();
      if ((v26 & 1) == 0) {
        goto LABEL_34;
      }
    }
  }

  else if (v18)
  {
    goto LABEL_34;
  }

  sub_1000CF774();
  if (!v29)
  {
    if (!v27) {
      goto LABEL_35;
    }
LABEL_34:
    sub_1000110D4();
    return;
  }

  if (!v27) {
    goto LABEL_34;
  }
  uint64_t v30 = sub_1000CF838(v28);
  if (!v9 || v31 != v33)
  {
    sub_10005A06C(v30, v31, v32, v33);
    sub_1000CF888();
    if ((v35 & 1) == 0) {
      goto LABEL_34;
    }
  }

uint64_t sub_1000CE674()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000CE6AC()
{
  return type metadata accessor for CachedResultSet(0LL);
}

uint64_t type metadata accessor for CachedResultSet(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D7170, (uint64_t)&nominal type descriptor for CachedResultSet);
}

uint64_t sub_1000CE6C8(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = type metadata accessor for CachedResultSet.Result(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for CachedResultSet.Result(uint64_t a1)
{
  return sub_100018ABC(a1, qword_1001D7258, (uint64_t)&nominal type descriptor for CachedResultSet.Result);
}

uint64_t *sub_1000CE754(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    char v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    if (sub_100010708((uint64_t)v11, 1LL, v12))
    {
      uint64_t v13 = sub_10000941C(&qword_1001D32B0);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
      sub_100009654((uint64_t)v10, 0LL, 1LL, v12);
    }

    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (uint64_t *)((char *)v4 + v15);
    uint64_t v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    *(uint64_t *)((char *)v4 + vsub_10000BDD4(v0 + 16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v20 = a3[10];
    *(_DWORD *)((char *)v4 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    uint64_t v21 = (uint64_t *)((char *)v4 + v20);
    uint64_t v22 = *(uint64_t *)((char *)a2 + v20);
    unint64_t v23 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain(v19);
    sub_100014244(v22, v23);
    *uint64_t v21 = v22;
    v21[1] = v23;
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    char v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *char v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (uint64_t *)((char *)v4 + v25);
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[13];
    uint64_t v33 = (uint64_t *)((char *)v4 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v35);
  }

  return v4;
}

uint64_t sub_1000CE8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRelease();
  sub_100010A30(*(void *)(a1 + *(int *)(a2 + 40)), *(void *)(a1 + *(int *)(a2 + 40) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_1000CE9B0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (sub_100010708((uint64_t)v10, 1LL, v11))
  {
    uint64_t v12 = sub_10000941C(&qword_1001D32B0);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    sub_100009654((uint64_t)v9, 0LL, 1LL, v11);
  }

  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v18 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = *(void *)((char *)a2 + v18);
  unint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain(v17);
  sub_100014244(v20, v21);
  *uint64_t v19 = v20;
  v19[1] = v21;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)((char *)a1 + v23);
  uint64_t v28 = (void *)((char *)a2 + v23);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = a3[13];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v33);
  return a1;
}

void *sub_1000CEB20(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v11);
  int v13 = sub_100010708((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_10000941C(&qword_1001D32B0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  sub_100009654((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  uint64_t v19 = v18[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  uint64_t v20 = a3[10];
  unint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_100014244(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *unint64_t v21 = v23;
  v21[1] = v24;
  sub_100010A30(v25, v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  uint64_t v30 = v29[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[12];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  void *v32 = *v33;
  uint64_t v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  *uint64_t v36 = *v37;
  uint64_t v38 = v37[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1000CED54(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  if (sub_100010708((uint64_t)v9, 1LL, v10))
  {
    uint64_t v11 = sub_10000941C(&qword_1001D32B0);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
  }

  uint64_t v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  return a1;
}

void *sub_1000CEE58(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v11);
  int v13 = sub_100010708((uint64_t)v10, 1LL, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_10000941C(&qword_1001D32B0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  sub_100009654((uint64_t)v9, 0LL, 1LL, v11);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(_DWORD *)((char *)a1 + v2sub_1000A0380(v0, 1) = *(_DWORD *)((char *)a2 + v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void *)((char *)a1 + v22);
  unint64_t v24 = *(void *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_100010A30(v23, v24);
  uint64_t v25 = a3[11];
  unint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *unint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000CF018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000CF024);
}

void sub_1000CF024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    sub_1000110D4();
  }

  else
  {
    uint64_t v6 = sub_10000941C(&qword_1001D32B0);
    sub_100010708(a1 + *(int *)(a3 + 24), a2, v6);
  }

uint64_t sub_1000CF094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000CF0A0);
}

uint64_t sub_1000CF0A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_10000941C(&qword_1001D32B0);
    return sub_100009654(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }

  return result;
}

void sub_1000CF110(uint64_t a1)
{
  v4[0] = &unk_100163668;
  v4[1] = &unk_100163680;
  sub_100026D28(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    void v4[3] = &unk_100163668;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[5] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[6] = &unk_100163698;
    v4[7] = &unk_100163680;
    v4[8] = &unk_100163680;
    v4[9] = &unk_100163680;
    swift_initStructMetadata(a1, 256LL, 10LL, v4, a1 + 16);
  }

uint64_t sub_1000CF1C0(uint64_t *a1, uint64_t *a2)
{
  return v2 & 1;
}

unint64_t sub_1000CF1E0()
{
  unint64_t result = qword_1001D72B8;
  if (!qword_1001D72B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001637EC, &type metadata for CachedResultSet.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D72B8);
  }

  return result;
}

unint64_t sub_1000CF21C()
{
  unint64_t result = qword_1001D72C8;
  if (!qword_1001D72C8)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001D72C8);
  }

  return result;
}

unint64_t sub_1000CF258()
{
  unint64_t result = qword_1001D72D0;
  if (!qword_1001D72D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1001D72D0);
  }

  return result;
}

uint64_t sub_1000CF294(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000CF2D4()
{
  unint64_t result = qword_1001D72E0;
  if (!qword_1001D72E0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1001D72E0);
  }

  return result;
}

uint64_t sub_1000CF310(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

_BYTE *sub_1000CF364@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtof_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

_BYTE *sub_1000CF3CC@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000CF364(a1, a2);
}

void *sub_1000CF3E4@<X0>(_BYTE *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CachedResultSet.Result.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }

  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }

    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }

    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }

    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }

uint64_t storeEnumTagSinglePayload for CachedResultSet.Result.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_1000CF4F4 + 4 * byte_100163627[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000CF528 + 4 * byte_100163622[v4]))();
}

uint64_t sub_1000CF528(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000CF530(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000CF538LL);
  }
  return result;
}

uint64_t sub_1000CF544(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000CF54CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_1000CF550(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000CF558(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CachedResultSet.Result.CodingKeys()
{
  return &type metadata for CachedResultSet.Result.CodingKeys;
}

unint64_t sub_1000CF578()
{
  unint64_t result = qword_1001D72E8;
  if (!qword_1001D72E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001637C4, &type metadata for CachedResultSet.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D72E8);
  }

  return result;
}

unint64_t sub_1000CF5B8()
{
  unint64_t result = qword_1001D72F0;
  if (!qword_1001D72F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163734, &type metadata for CachedResultSet.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D72F0);
  }

  return result;
}

unint64_t sub_1000CF5F8()
{
  unint64_t result = qword_1001D72F8;
  if (!qword_1001D72F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016375C, &type metadata for CachedResultSet.Result.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D72F8);
  }

  return result;
}

uint64_t sub_1000CF634(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

uint64_t sub_1000CF648(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000CF65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  *(_BYTE *)(v4 - 9os_unfair_lock_lock(v0 + 6) = a3;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, a2, v4 - 96, v3);
}

uint64_t sub_1000CF674@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v2 - 9os_unfair_lock_lock(v0 + 6) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v2 - 96, v1);
}

uint64_t sub_1000CF68C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000CF6A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

uint64_t sub_1000CF6AC()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000CF6D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 - 8) + 8LL))(*(void *)(v1 - 216), a1);
}

uint64_t sub_1000CF6E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v1, a1);
}

uint64_t sub_1000CF6FC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 232));
}

uint64_t sub_1000CF708(uint64_t a1)
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)(a1, v2 - 65, v1, a1);
}

uint64_t sub_1000CF724()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)(v1 - 96, v1 - 65, v0);
}

uint64_t sub_1000CF73C()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 128) + 8LL))(v0, *(void *)(v1 - 120));
}

uint64_t sub_1000CF754()
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v1 - 120) + 8LL))(v0, *(void *)(v1 - 112));
}

uint64_t sub_1000CF76C()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 176));
}

  ;
}

uint64_t sub_1000CF788()
{
  return sub_100010A30(v1, v0);
}

  ;
}

uint64_t sub_1000CF7A0(uint64_t a1, uint64_t a2)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, v3 - 96, v2);
}

void sub_1000CF7B4(uint64_t a1@<X8>)
{
  uint64_t v4 = (void *)(v1 + a1);
  *uint64_t v4 = v2;
  v4[1] = v3;
}

uint64_t sub_1000CF7C0()
{
  return 0LL;
}

uint64_t sub_1000CF7DC()
{
  return sub_100010A30(*(void *)(v0 - 160), *(void *)(v0 - 136));
}

uint64_t sub_1000CF7E8()
{
  return type metadata accessor for CachedResultSet.Result(0LL);
}

id sub_1000CF7F0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3, 0);
}

uint64_t sub_1000CF800()
{
  return (*(uint64_t (**)(uint64_t, void))(v0 + 8))(v1, *(void *)(v2 - 120));
}

uint64_t sub_1000CF810(uint64_t a1)
{
  return sub_100009654(a1, 0LL, 1LL, v1);
}

uint64_t sub_1000CF820@<X0>(char a1@<W8>)
{
  *(_BYTE *)(v1 - 9os_unfair_lock_lock(v0 + 6) = a1;
  return v1 - 96;
}

uint64_t sub_1000CF838@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

  ;
}

uint64_t sub_1000CF860()
{
  return type metadata accessor for Apple_Parsec_Search_V2_SearchResponse(0LL);
}

uint64_t sub_1000CF868()
{
  return type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse(0LL);
}

uint64_t sub_1000CF870()
{
  return v3(v2, v1, v0);
}

uint64_t sub_1000CF880@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  return a2(a1, v2);
}

uint64_t sub_1000CF888()
{
  return 0LL;
}

uint64_t sub_1000CF894()
{
  return static URLComponents._unconditionallyBridgeFromObjectiveC(_:)(v0);
}

unint64_t sub_1000CF8A0()
{
  return sub_1000CC794(v0, v1);
}

uint64_t sub_1000CF8AC()
{
  return type metadata accessor for URLComponents(0LL);
}

uint64_t sub_1000CF8B8()
{
  return sub_1000108B8(v0);
}

  ;
}

  ;
}

uint64_t sub_1000CF8E0()
{
  return *(void *)(v0 - 176);
}

uint64_t sub_1000CF8F4(uint64_t result)
{
  *(_DWORD *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

void sub_1000CF908(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)[a1 integerForKey:@"PARSessionSoftLimitOverride"];
  if ((unint64_t)(v4 - 1) > 0x382)
  {
    *(void *)a2 = 0x4082C00000000000LL;
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_1000093D0(v5, (uint64_t)qword_1001EDBD0);
    BOOL v7 = (void *)Logger.logObject.getter(v6);
    os_log_type_t v9 = static os_log_type_t.error.getter(v7, v8);
    if (sub_10003EFD0(v9))
    {
      uint64_t v10 = (_DWORD *)sub_1000D01D0();
      *uint64_t v10 = 134217984;
      sub_1000D0198((uint64_t)(v10 + 1), 600LL, v23);
      sub_1000D01AC( (void *)&_mh_execute_header,  v11,  v12,  "Soft limit override must be between 0 and %lld, defaulting to that value");
      sub_1000D01C0();
    }
  }

  else
  {
    *(double *)a2 = (double)(uint64_t)v4;
  }

  uint64_t v13 = (uint64_t)[a1 integerForKey:@"PARSessionIdleTimeOverride"];
  if (v13 < 1)
  {
    *(void *)(a2 + 8) = 0x4066800000000000LL;
    if (qword_1001D0500 != -1) {
      swift_once(&qword_1001D0500, sub_100034420);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_1000093D0(v14, (uint64_t)qword_1001EDBD0);
    uint64_t v16 = (void *)Logger.logObject.getter(v15);
    os_log_type_t v18 = static os_log_type_t.error.getter(v16, v17);
    if (sub_10003EFD0(v18))
    {
      uint64_t v19 = (_DWORD *)sub_1000D01D0();
      *uint64_t v19 = 134217984;
      sub_1000D0198((uint64_t)(v19 + 1), 180LL, v23);
      sub_1000D01AC( (void *)&_mh_execute_header,  v20,  v21,  "Idle limit override value must be between 0 and %lld, defaulting to that value.");
      sub_1000D01C0();
    }
  }

  else
  {
    *(double *)(a2 + 8) = (double)v13;
  }

  if (qword_1001D0628 != -1) {
    swift_once(&qword_1001D0628, sub_1000CFB48);
  }
  *(double *)(a2 + sub_10000BDD4(v0 + 16) = *(double *)&qword_1001D7300 - *(double *)a2;
  uint64_t v22 = type metadata accessor for ClientSessionTimekeeper(0LL);
  static Date.distantFuture.getter(v22);
  sub_1000CFBA4();
}

void sub_1000CFB48()
{
  qword_1001D7300 = 0x408C200000000000LL;
}

void sub_1000CFB5C()
{
  qword_1001D7308 = 0x405E000000000000LL;
}

uint64_t type metadata accessor for ClientSessionTimekeeper(uint64_t a1)
{
  uint64_t result = qword_1001D7368;
  if (!qword_1001D7368) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientSessionTimekeeper);
  }
  return result;
}

void sub_1000CFBA4()
{
  uint64_t v1 = type metadata accessor for ClientSessionTimekeeper(0LL);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  BOOL v7 = (uint64_t *)((char *)&v15 - v6);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v15 - v8;
  if (qword_1001D0500 != -1) {
    swift_once(&qword_1001D0500, sub_100034420);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v10, (uint64_t)qword_1001EDBD0);
  sub_1000CFDC0(v0, (uint64_t)v9);
  sub_1000CFDC0(v0, (uint64_t)v7);
  uint64_t v11 = sub_1000CFDC0(v0, (uint64_t)v4);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v14 = 134218496;
    uint64_t v16 = *((void *)v9 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 4);
    sub_1000CFE04((uint64_t)v9);
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v16 = *v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 14);
    sub_1000CFE04((uint64_t)v7);
    *(_WORD *)(v14 + 22) = 2048;
    uint64_t v16 = *((void *)v4 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v14 + 24);
    sub_1000CFE04((uint64_t)v4);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Idle Time %f Soft Limit Time %f Max Time %f.",  (uint8_t *)v14,  0x20u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    sub_1000CFE04((uint64_t)v9);
    sub_1000CFE04((uint64_t)v7);
    sub_1000CFE04((uint64_t)v4);
  }
}

uint64_t sub_1000CFDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientSessionTimekeeper(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CFE04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientSessionTimekeeper(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t *sub_1000CFE40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1000CFED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1000CFF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *sub_1000CFF6C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000CFFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000D003C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + sub_10000BDD4(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000D00A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D00AC);
}

uint64_t sub_1000D00AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D01DC();
  return sub_100010708(v2, a2, v4);
}

uint64_t sub_1000D00DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D00E8);
}

uint64_t sub_1000D00E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D01DC();
  return sub_100009654(v2, a2, a2, v4);
}

uint64_t sub_1000D011C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000D0198@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v4 = a2;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)((uint64_t *)va, va1, a1);
}

void sub_1000D01AC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_1000D01C0()
{
  return swift_slowDealloc(v0, -1LL, -1LL);
}

uint64_t sub_1000D01D0()
{
  return swift_slowAlloc(12LL, -1LL);
}

uint64_t sub_1000D01DC()
{
  return type metadata accessor for Date(0LL);
}

uint64_t sub_1000D01EC()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init(timeIntervalSinceNow:)(*(double *)(v0 + 8));
  uint64_t v5 = type metadata accessor for ClientSessionTimekeeper(0LL);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 40))(v0 + *(int *)(v5 + 28), v4, v1);
}

void sub_1000D0274(uint64_t a1)
{
  uint64_t v2 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v2);
  uint64_t v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v42 = type metadata accessor for UserAgent(0LL);
  uint64_t v35 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v36 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_10000941C(&qword_1001D7458);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v32[-v10];
  sub_1000D1AF0(a1, v41);
  uint64_t v12 = v41[0];
  int64_t v13 = v41[3];
  unint64_t v14 = v41[4];
  uint64_t v38 = v41[1];
  int64_t v39 = (unint64_t)(v41[2] + 64LL) >> 6;
  swift_bridgeObjectRetain(a1);
  uint64_t v37 = _swiftEmptyArrayStorage;
  __int128 v33 = xmmword_10015D580;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_20;
    }

    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v17 >= v39) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v38 + 8 * v17);
    int64_t v19 = v13 + 1;
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v39) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v38 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v13 + 3;
        if (v13 + 3 >= v39) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v38 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v13 + 4;
          if (v13 + 4 >= v39) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v38 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = v13 + 5;
            if (v13 + 5 >= v39) {
              goto LABEL_27;
            }
            unint64_t v18 = *(void *)(v38 + 8 * v19);
            if (!v18)
            {
              int64_t v20 = v13 + 6;
              while (v20 < v39)
              {
                unint64_t v18 = *(void *)(v38 + 8 * v20++);
                if (v18)
                {
                  int64_t v19 = v20 - 1;
                  goto LABEL_19;
                }
              }

uint64_t sub_1000D06D0(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D7458);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v24[-1] - v6;
  sub_1000D1AF0(a1, v24);
  uint64_t v8 = v24[0];
  uint64_t v25 = v24[1];
  int64_t v9 = v24[3];
  unint64_t v10 = v24[4];
  int64_t v11 = (unint64_t)(v24[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v10) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v14 = v13 | (v9 << 6);
  while (1)
  {
    uint64_t v19 = *(void *)(v8 + 48);
    uint64_t v20 = type metadata accessor for SessionType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))( v7,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v14,  v20);
    uint64_t v21 = *(void *)(*(void *)(v8 + 56) + 8 * v14);
    *(void *)&v7[*(int *)(v2 + 48)] = v21;
    sub_1000D1B28((uint64_t)v7, (uint64_t)v5);
    uint64_t v22 = *(void *)(*(void *)(*(void *)&v5[*(int *)(v2 + 48)] + 64LL) + 32LL);
    swift_retain(v21);
    if (v22)
    {
      swift_retain(v22);
      sub_1000B1BAC();
      swift_release();
    }

    uint64_t result = sub_100014358((uint64_t)v5, &qword_1001D7458);
    if (v10) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v15 >= v11) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v25 + 8 * v15);
    int64_t v17 = v9 + 1;
    if (!v16)
    {
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v11) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v25 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v9 + 3;
        if (v9 + 3 >= v11) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v25 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v9 + 4;
          if (v9 + 4 >= v11) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v25 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v9 + 5;
            if (v9 + 5 >= v11) {
              return swift_release();
            }
            unint64_t v16 = *(void *)(v25 + 8 * v17);
            if (!v16)
            {
              int64_t v18 = v9 + 6;
              while (v18 < v11)
              {
                unint64_t v16 = *(void *)(v25 + 8 * v18++);
                if (v16)
                {
                  int64_t v17 = v18 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release();
            }
          }
        }
      }
    }

uint64_t sub_1000D091C(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D7458);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000D1AF0(a1, v22);
  uint64_t v5 = v22[0];
  uint64_t v6 = v22[1];
  int64_t v7 = v22[3];
  unint64_t v8 = v22[4];
  int64_t v9 = (unint64_t)(v22[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v7 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v5 + 48);
    uint64_t v18 = type metadata accessor for SessionType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))( v4,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v12,  v18);
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v12);
    *(void *)&v4[*(int *)(v2 + 48)] = v19;
    uint64_t v20 = *(void *)(v19 + 64);
    swift_retain(v19);
    swift_unknownObjectRetain(v20);
    sub_1000A6388(0LL, 0LL);
    swift_unknownObjectRelease();
    uint64_t result = sub_100014358((uint64_t)v4, &qword_1001D7458);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1LL)) {
      break;
    }
    if (v13 >= v9) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v9) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v6 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v9) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v6 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v9) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v7 + 6;
              while (v16 < v9)
              {
                unint64_t v14 = *(void *)(v6 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }

              return swift_release();
            }
          }
        }
      }
    }

uint64_t sub_1000D0B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = sub_10000941C(&qword_1001D7458);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v27 - v7;
  sub_1000D1AF0(a1, v29);
  uint64_t v9 = v29[0];
  uint64_t v30 = v29[1];
  int64_t v10 = v29[3];
  unint64_t v11 = v29[4];
  int64_t v12 = (unint64_t)(v29[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v15 = v14 | (v10 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(v9 + 48);
    uint64_t v21 = type metadata accessor for SessionType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))( v8,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v15,  v21);
    uint64_t v22 = *(void *)(*(void *)(v9 + 56) + 8 * v15);
    *(void *)&v8[*(int *)(v3 + 48)] = v22;
    sub_1000D1B28((uint64_t)v8, (uint64_t)v6);
    int v23 = *(unsigned __int8 *)(*(void *)(*(void *)&v6[*(int *)(v3 + 48)] + 64LL) + 88LL);
    swift_retain(v22);
    if (!v23)
    {
      swift_release();
      uint64_t v24 = v28;
      sub_1000D1B28((uint64_t)v6, v28);
      uint64_t v25 = v24;
      uint64_t v26 = 0LL;
      return sub_100009654(v25, v26, 1LL, v3);
    }

    uint64_t result = sub_100014358((uint64_t)v6, &qword_1001D7458);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v16 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v30 + 8 * v16);
    int64_t v18 = v10 + 1;
    if (!v17)
    {
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v12) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v30 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v10 + 3;
        if (v10 + 3 >= v12) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v30 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v10 + 4;
          if (v10 + 4 >= v12) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v30 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v10 + 5;
            if (v10 + 5 >= v12) {
              goto LABEL_23;
            }
            unint64_t v17 = *(void *)(v30 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v10 + 6;
              while (v19 < v12)
              {
                unint64_t v17 = *(void *)(v30 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_18;
                }
              }

uint64_t sub_1000D0D68@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v32 = a2;
  uint64_t v4 = sub_10000941C(&qword_1001D7458);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v27 - v8;
  sub_1000D1AF0(a1, v31);
  uint64_t v10 = v31[0];
  int64_t v11 = v31[3];
  unint64_t v12 = v31[4];
  uint64_t v29 = v31[1];
  int64_t v30 = (unint64_t)(v31[2] + 64LL) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(v10 + 48);
    uint64_t v21 = type metadata accessor for SessionType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))( v9,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v15,  v21);
    uint64_t v22 = *(void *)(*(void *)(v10 + 56) + 8 * v15);
    *(void *)&v9[*(int *)(v4 + 48)] = v22;
    sub_1000D1B28((uint64_t)v9, (uint64_t)v7);
    uint64_t v23 = *(void *)&v7[*(int *)(v4 + 48)];
    swift_retain(v22);
    if ((v32(v23) & 1) != 0)
    {
      swift_release();
      uint64_t v24 = v28;
      sub_1000D1B28((uint64_t)v7, v28);
      uint64_t v25 = v24;
      uint64_t v26 = 0LL;
      return sub_100009654(v25, v26, 1LL, v4);
    }

    uint64_t result = sub_100014358((uint64_t)v7, &qword_1001D7458);
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v16);
    int64_t v18 = v11 + 1;
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v30) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v11 + 3;
        if (v11 + 3 >= v30) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v29 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v11 + 4;
          if (v11 + 4 >= v30) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v29 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v11 + 5;
            if (v11 + 5 >= v30) {
              goto LABEL_23;
            }
            unint64_t v17 = *(void *)(v29 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v11 + 6;
              while (v19 < v30)
              {
                unint64_t v17 = *(void *)(v29 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_18;
                }
              }

void sub_1000D0FEC(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 32);
  uint64_t v4 = (uint64_t *)&v3[4];
  sub_1000D1B80(v3);
  sub_1000D1038(v4, v1, a1, &v5);
  sub_100043554();
  sub_1000D1B70();
}

uint64_t sub_1000D1038@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_10000941C((uint64_t *)&unk_1001D5D20);
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000941C(&qword_1001D5288);
  __chkstk_darwin(v12);
  uint64_t v79 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SessionType(0LL);
  uint64_t v83 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  int64_t v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v80 = v14;
    uint64_t v81 = a4;
    uint64_t v77 = *(uint8_t **)(a2 + 24);
    id v19 = [a3 identifier];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    SessionType.init(withClientIdentifier:)(v20, v22);
    uint64_t v23 = *a1;
    uint64_t v82 = v16;
    sub_10000C090((uint64_t)v16, v23);
    uint64_t v25 = v24;
    if ([a3 parsecEnabled] & 1) != 0 || (sub_1000862B4())
    {
      uint64_t v78 = (uint8_t *)a3;
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v80;
        uint64_t v28 = (uint64_t)v82;
        uint64_t v29 = v83;
      }

      else
      {
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        uint64_t v75 = a1;
        uint64_t v76 = v4;
        uint64_t v30 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v30, (uint64_t)qword_1001EDBD0);
        id v31 = a3;
        uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
        os_log_type_t v33 = static os_log_type_t.default.getter(v32);
        BOOL v34 = os_log_type_enabled(v32, v33);
        uint64_t p_ivar_lyt = &SessionEnumerator.ivar_lyt;
        uint64_t v74 = v18;
        if (v34)
        {
          os_log_t v73 = v32;
          uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v37 = swift_slowAlloc(32LL, -1LL);
          uint64_t v86 = (char *)v37;
          *(_DWORD *)uint64_t v36 = 136315138;
          uint64_t v72 = v36 + 4;
          id v38 = [v31 identifier];
          os_log_type_t v39 = v33;
          uint64_t v40 = v31;
          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
          unint64_t v43 = v42;

          uint64_t v44 = v41;
          id v31 = v40;
          uint64_t v84 = sub_1000307E0(v44, v43, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v72);

          uint64_t p_ivar_lyt = (void **)(&SessionEnumerator + 16);
          swift_bridgeObjectRelease();
          os_log_t v45 = v73;
          _os_log_impl((void *)&_mh_execute_header, v73, v39, "starting/enabling session for %s", v36, 0xCu);
          swift_arrayDestroy(v37, 1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
          swift_slowDealloc(v36, -1LL, -1LL);
        }

        else
        {
        }

        uint64_t v27 = v80;
        uint64_t v28 = (uint64_t)v82;
        id v59 = objc_msgSend(v31, (SEL)p_ivar_lyt[494]);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v59);

        uint64_t v29 = v83;
        uint64_t v60 = (uint64_t)v79;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v79, v28, v27);
        sub_100009654(v60, 0LL, 1LL, v27);
        uint64_t v61 = type metadata accessor for ClientState(0LL);
        swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
        swift_unknownObjectRetain(v74);
        sub_100085880();
        uint64_t v26 = v62;
        uint64_t v63 = swift_retain(v62);
        sub_10000F744(v63, v28, v64, v65, v66, v67, v68, v69, v71, (uint64_t)v72);
        uint64_t v25 = 0LL;
      }

      uint64_t v70 = type metadata accessor for UserAgent(0LL);
      sub_100009654((uint64_t)v11, 1LL, 1LL, v70);
      swift_retain(v25);
      sub_1000860A4();
      swift_release();
      swift_unknownObjectRelease();
      sub_100014358((uint64_t)v11, (uint64_t *)&unk_1001D5D20);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v27);
    }

    else
    {
      if (v25)
      {
        uint64_t v46 = *(void *)(v25 + 64);
        swift_retain(v25);
        swift_unknownObjectRetain(v46);
        sub_1000A6388(0LL, 0LL);
        swift_unknownObjectRelease();
        sub_1000803A8(v82);
        swift_release();
        uint64_t v47 = v83;
        if (qword_1001D0500 != -1) {
          swift_once(&qword_1001D0500, sub_100034420);
        }
        uint64_t v48 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v48, (uint64_t)qword_1001EDBD0);
        id v49 = a3;
        uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
        os_log_type_t v51 = static os_log_type_t.default.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v79 = (char *)swift_slowAlloc(32LL, -1LL);
          uint64_t v86 = v79;
          uint64_t v76 = v4;
          *(_DWORD *)uint64_t v52 = 136315138;
          uint64_t v77 = v52 + 4;
          uint64_t v78 = v52;
          id v53 = [v49 identifier];
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          unint64_t v56 = v55;

          uint64_t v84 = sub_1000307E0(v54, v56, (uint64_t *)&v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v77);

          swift_bridgeObjectRelease();
          unint64_t v57 = v78;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "disabling session for %s", v78, 0xCu);
          uint64_t v58 = v79;
          swift_arrayDestroy(v79, 1LL);
          swift_slowDealloc(v58, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);
          swift_unknownObjectRelease();

          swift_release_n(v25, 2LL);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v82, v80);
        }

        else
        {

          swift_unknownObjectRelease();
          swift_release_n(v25, 2LL);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v82, v80);
        }
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v83 + 8))(v82, v80);
        uint64_t result = swift_unknownObjectRelease();
      }

      uint64_t v26 = 0LL;
    }

    a4 = v81;
  }

  else
  {
    uint64_t v26 = 1LL;
  }

  *a4 = v26;
  return result;
}

void sub_1000D16E8()
{
  uint64_t v1 = (void *)sub_1000D1B8C();
  sub_1000D1720(v1, v2);
  sub_100043554();
  sub_1000D1B70();
}

uint64_t sub_1000D1720@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = swift_bridgeObjectRetain(*a1);
  sub_1000D0274(v3);
  uint64_t v5 = v4;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

void sub_1000D176C()
{
}

void sub_1000D1778()
{
  uint64_t v1 = (void *)sub_1000D1B8C();
  sub_1000D17B0(v1, v2);
  sub_100043554();
  sub_1000D1B70();
}

uint64_t sub_1000D17B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_10000941C(&qword_1001D7450);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = swift_bridgeObjectRetain(*a1);
  sub_1000D0B08(v7, (uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10000941C(&qword_1001D7458);
  if (sub_100010708((uint64_t)v6, 1LL, v8) == 1)
  {
    uint64_t result = sub_100014358((uint64_t)v6, &qword_1001D7450);
    *a2 = 0LL;
  }

  else
  {
    *a2 = *(void *)&v6[*(int *)(v8 + 48)];
    uint64_t v10 = type metadata accessor for SessionType(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v6, v10);
  }

  return result;
}

void sub_1000D18A8()
{
}

void sub_1000D18B4(void (*a1)(uint64_t))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 32);
  uint64_t v4 = v3 + 4;
  sub_1000D1B80(v3);
  sub_1000D1904(v4, a1);
  sub_100043554();
}

uint64_t sub_1000D1904(void *a1, void (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  uint64_t v4 = swift_bridgeObjectRetain(*a1);
  a2(v4);
  return swift_bridgeObjectRelease(v3);
}

void sub_1000D1940(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 32);
  uint64_t v4 = v3 + 4;
  sub_1000D1B80(v3);
  sub_1000D1990(v4, a1, &v5);
  sub_100043554();
  sub_1000D1B70();
}

uint64_t sub_1000D1990@<X0>(void *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_10000941C(&qword_1001D7450);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_bridgeObjectRetain(*a1);
  sub_1000D0D68(v9, a2, (uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = sub_10000941C(&qword_1001D7458);
  if (sub_100010708((uint64_t)v8, 1LL, v10) == 1)
  {
    uint64_t result = sub_100014358((uint64_t)v8, &qword_1001D7450);
    *a3 = 0LL;
  }

  else
  {
    *a3 = *(void *)&v8[*(int *)(v10 + 48)];
    uint64_t v12 = type metadata accessor for SessionType(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8LL))(v8, v12);
  }

  return result;
}

uint64_t sub_1000D1AA0()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ClientStateManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd18ClientStateManager);
}

uint64_t sub_1000D1AF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1LL;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1LL << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0LL;
  a2[4] = v2 & v5;
  return result;
}

uint64_t sub_1000D1B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D7458);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

  ;
}

void sub_1000D1B80(os_unfair_lock_s *a1@<X8>)
{
}

uint64_t sub_1000D1B8C()
{
  return v0;
}

void sub_1000D1BA0()
{
  uint64_t v3 = sub_100047198();
  __chkstk_darwin(v3);
  sub_1000D2EA8();
  sub_1000D2EF8();
  __chkstk_darwin(v4);
  sub_100010FCC();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue);
  *uint64_t v2 = v5;
  sub_1000D2EE8(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v5;
  _dispatchPreconditionTest(_:)(v2);
  sub_1000D2EC4();
  if ((v5 & 1) != 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_observer);
    if (Strong)
    {
      uint64_t v9 = Strong;
      sub_1000C75EC(v0);
      sub_1000D2F0C();
      swift_unknownObjectRelease(v9);
      sub_10002EC64((uint64_t)v0);
    }

    sub_100019F1C();
  }

  else
  {
    __break(1u);
  }

void sub_1000D1C68()
{
  uint64_t v3 = sub_100047198();
  __chkstk_darwin(v3);
  sub_1000D2EA8();
  sub_1000D2EF8();
  __chkstk_darwin(v4);
  sub_100010FCC();
  uint64_t v5 = *(void **)(v1 + 40);
  *uint64_t v2 = v5;
  sub_1000D2EE8(v6, enum case for DispatchPredicate.onQueue(_:));
  id v7 = v5;
  _dispatchPreconditionTest(_:)(v2);
  sub_1000D2EC4();
  if ((v5 & 1) != 0)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (Strong)
    {
      uint64_t v9 = Strong;
      sub_1000D2220(v0);
      sub_1000D2F0C();
      swift_unknownObjectRelease(v9);
      sub_10002EC64((uint64_t)v0);
    }

    sub_100019F1C();
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000D1D18()
{
  uint64_t result = sub_1000D1D38();
  qword_1001EDE98 = result;
  unk_1001EDEA0 = v1;
  return result;
}

uint64_t sub_1000D1D38()
{
  uint64_t v0 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  JSONEncoder.init()();
  uint64_t v15 = &off_1001B0450;
  uint64_t v4 = sub_10000941C(&qword_1001D7688);
  unint64_t v5 = sub_1000D2A94();
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v15, v4, v5);
  unint64_t v8 = v7;
  uint64_t v9 = swift_release();
  static String.Encoding.utf8.getter(v9);
  uint64_t v11 = String.init(data:encoding:)(v6, v8, v2);
  if (v12)
  {
    uint64_t v10 = v11;
    sub_100010A30(v6, v8);
  }

  else
  {
    sub_100010A1C(v6, v8);
    swift_bridgeObjectRelease();
    return 23899LL;
  }

  return v10;
}

uint64_t sub_1000D1E70(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x72656469766F7270LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656469766F7270LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7475626972747461LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v8 = 0xE900000000000065LL;
    goto LABEL_16;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7475626972747461LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v8);
    return 1LL;
  }

  if (a1 == 0x657669746361LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657669746361LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t static AvroPrimitiveSchema.long.getter()
{
  return 3LL;
}

uint64_t sub_1000D1FC8(char a1)
{
  if (!a1) {
    return 0x72656469766F7270LL;
  }
  if (a1 == 1) {
    return 0x7475626972747461LL;
  }
  return 0x657669746361LL;
}

uint64_t sub_1000D2020(void *a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = sub_10000941C(&qword_1001D76A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  sub_100010FCC();
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100019AFC(a1, v8);
  unint64_t v10 = sub_1000D2CE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys,  &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = *(void *)v4;
  uint64_t v12 = *(void *)(v4 + 8);
  char v19 = 0;
  sub_1000D2ED8(v11, v12, (uint64_t)&v19);
  if (!v2)
  {
    uint64_t v13 = *(void *)(v4 + 16);
    uint64_t v14 = *(void *)(v4 + 24);
    char v18 = 1;
    sub_1000D2ED8(v13, v14, (uint64_t)&v18);
    uint64_t v15 = *(unsigned __int8 *)(v4 + 32);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v17, v6);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
}

uint64_t sub_1000D2134()
{
  return sub_1000D1FC8(*v0);
}

uint64_t sub_1000D213C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000D1E70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D2160@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.long.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000D2184(uint64_t a1)
{
  unint64_t v2 = sub_1000D2CE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D21AC(uint64_t a1)
{
  unint64_t v2 = sub_1000D2CE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D21D4(void *a1)
{
  return sub_1000D2020(a1);
}

uint64_t sub_1000D21E8(uint64_t a1)
{
  *(void *)(v1 + 24) = 0LL;
  swift_unknownObjectWeakInit(v1 + 16, 0LL);
  *(_BYTE *)(v1 + 32) = 0;
  *(void *)(v1 + 4sub_1000AC280(v0, v1, 0) = a1;
  return v1;
}

uint64_t sub_1000D2220@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_1001D0528 != -1) {
    swift_once(&qword_1001D0528, sub_1000344D0);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_1000093D0(v4, (uint64_t)qword_1001EDC48);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "updating subscriptions", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (*(_BYTE *)(v2 + 32) == 1)
  {
    if (qword_1001D0638 != -1) {
      swift_once(&qword_1001D0638, sub_1000D1D18);
    }
    uint64_t v9 = qword_1001EDE98;
    uint64_t v10 = swift_bridgeObjectRetain(unk_1001EDEA0);
  }

  else
  {
    uint64_t v10 = 0xE200000000000000LL;
    uint64_t v9 = 23899LL;
  }

  *a1 = v9;
  a1[1] = v10;
  uint64_t v11 = sub_100047198();
  return swift_storeEnumTagMultiPayload(a1, v11, 10LL);
}

uint64_t sub_1000D2360(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 40);
  uint64_t v6 = swift_allocObject(&unk_1001B8B58, 24LL, 7LL);
  swift_weakInit(v6 + 16, v2);
  uint64_t v7 = swift_allocObject(&unk_1001B8B80, 33LL, 7LL);
  *(void *)(v7 + sub_10000BDD4(v0 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  *(_BYTE *)(v7 + 32) = a2 & 1;
  aBlock[4] = sub_1000D2A70;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000D2F18;
  aBlock[3] = &unk_1001B8B98;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v22 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = v5;
  uint64_t v13 = swift_retain(v6);
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  char v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = &_swiftEmptyArrayStorage;
  unint64_t v18 = sub_100019CD0();
  uint64_t v19 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  unint64_t v20 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v14, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v17, v8);
  _Block_release(v8);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v22);
  swift_release();
  return swift_release();
}

uint64_t sub_1000D255C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v32, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    if (qword_1001D0528 != -1) {
      swift_once(&qword_1001D0528, sub_1000344D0);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_1000093D0(v8, (uint64_t)qword_1001EDC48);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "updating subscriptions", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    if ((a3 & 1) != 0)
    {
      char v21 = *(_BYTE *)(v7 + 32);
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v22 = static os_log_type_t.info.getter();
      BOOL v23 = os_log_type_enabled(v15, v22);
      if ((v21 & 1) != 0)
      {
        if (v23)
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, v22, "Subscription status went nil", v24, 2u);
          swift_slowDealloc(v24, -1LL, -1LL);
        }

        *(_BYTE *)(v7 + 32) = 0;
        goto LABEL_21;
      }

      if (v23)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v26 = 0;
        os_log_type_t v29 = v22;
        uint64_t v27 = "Subscription status is nil";
        uint64_t v28 = v15;
        goto LABEL_26;
      }
    }

    else
    {
      int v14 = *(unsigned __int8 *)(v7 + 32);
      uint64_t v15 = (os_log_s *)Logger.logObject.getter(v13);
      if ((a2 == 1) != v14)
      {
        os_log_type_t v16 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v15, v16))
        {
          char v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v18 = swift_slowAlloc(32LL, -1LL);
          *(_DWORD *)char v17 = 136315138;
          uint64_t v31 = v18;
          if (a2 == 1) {
            uint64_t v19 = 0x64656C62616E65LL;
          }
          else {
            uint64_t v19 = 0x64656C6261736964LL;
          }
          if (a2 == 1) {
            unint64_t v20 = 0xE700000000000000LL;
          }
          else {
            unint64_t v20 = 0xE800000000000000LL;
          }
          uint64_t v30 = sub_1000307E0(v19, v20, &v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 4);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Subscriptions are %s", v17, 0xCu);
          swift_arrayDestroy(v18, 1LL);
          swift_slowDealloc(v18, -1LL, -1LL);
          swift_slowDealloc(v17, -1LL, -1LL);
        }

        *(_BYTE *)(v7 + 32) = a2 == 1;
LABEL_21:
        sub_1000D1C68();
        return swift_release();
      }

      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v26 = 0;
        uint64_t v27 = "Subscription status did not change";
        uint64_t v28 = v15;
        os_log_type_t v29 = v25;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v28, v29, v27, v26, 2u);
        swift_slowDealloc(v26, -1LL, -1LL);
      }
    }

    return swift_release();
  }

  return result;
}

uint64_t type metadata accessor for SubscriptionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd20SubscriptionProvider);
}

uint64_t sub_1000D2904(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    if (a2) {
      id v6 = [a2 statusType];
    }
    else {
      id v6 = 0LL;
    }
    sub_1000D2360((uint64_t)v6, a2 == 0LL);
    return swift_release();
  }

  return result;
}

uint64_t sub_1000D2980()
{
  return swift_unknownObjectRelease(*(void *)(v0 + 56));
}

uint64_t sub_1000D299C()
{
  if (*(void *)(v0 + 56)) {
    objc_msgSend(*(id *)(v0 + 48), "endObservingSubscriptionStatusWithToken:");
  }
  sub_10000BDD4(v0 + 16);

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1000D29E8()
{
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for FuseSubscriptionProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd24FuseSubscriptionProvider);
}

uint64_t sub_1000D2A28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D2A4C()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_1000D2A70()
{
  return sub_1000D255C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1000D2A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D2A8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000D2A94()
{
  unint64_t result = qword_1001D7690;
  if (!qword_1001D7690)
  {
    uint64_t v1 = sub_1000094A0(&qword_1001D7688);
    sub_1000D2AF8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1001D7690);
  }

  return result;
}

unint64_t sub_1000D2AF8()
{
  unint64_t result = qword_1001D7698;
  if (!qword_1001D7698)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001639D4, &type metadata for SubscriptionProvider.SubscriptionState);
    atomic_store(result, (unint64_t *)&qword_1001D7698);
  }

  return result;
}

uint64_t initializeWithCopy for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionProvider.SubscriptionState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }

    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }

  else
  {
    LODWORD(v2) = -1;
  }

  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionProvider.SubscriptionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SubscriptionProvider.SubscriptionState()
{
  return &type metadata for SubscriptionProvider.SubscriptionState;
}

unint64_t sub_1000D2CE0()
{
  unint64_t result = qword_1001D76A8;
  if (!qword_1001D76A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163AC0, &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D76A8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SubscriptionProvider.SubscriptionState.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000D2D68 + 4 * byte_100163925[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D2D9C + 4 * byte_100163920[v4]))();
}

uint64_t sub_1000D2D9C(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000D2DA4(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D2DACLL);
  }
  return result;
}

uint64_t sub_1000D2DB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D2DC0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000D2DC4(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000D2DCC(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionProvider.SubscriptionState.CodingKeys()
{
  return &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys;
}

unint64_t sub_1000D2DEC()
{
  unint64_t result = qword_1001D76B0;
  if (!qword_1001D76B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163A98, &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D76B0);
  }

  return result;
}

unint64_t sub_1000D2E2C()
{
  unint64_t result = qword_1001D76B8;
  if (!qword_1001D76B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163A08, &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D76B8);
  }

  return result;
}

unint64_t sub_1000D2E6C()
{
  unint64_t result = qword_1001D76C0;
  if (!qword_1001D76C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163A30, &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D76C0);
  }

  return result;
}

uint64_t sub_1000D2EA8()
{
  return type metadata accessor for DispatchPredicate(0LL);
}

uint64_t sub_1000D2EC4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_1000D2ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, v3);
}

uint64_t sub_1000D2EE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

  ;
}

void sub_1000D2F0C()
{
}

uint64_t sub_1000D2F18(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = sub_10000C4AC();
  v1(v3);
  return sub_10004713C(v2);
}

void sub_1000D2F3C(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
  {
    sub_1000D4F6C(v3);
    uint64_t v3 = v6;
  }

  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v4 - 1;
    sub_1000DAC54((char *)(v3 + 24 * a1 + 56), v4 - 1 - a1, (char *)(v3 + 24 * a1 + 32));
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v5;
    *uint64_t v1 = v3;
  }

uint64_t sub_1000D2FCC(unint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!(_DWORD)result || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t result = sub_1000D4F80(v3);
    uint64_t v3 = result;
    *uint64_t v1 = result;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    os_log_type_t v11 = sub_1000DADE0((char *)(v9 + 40), v8, (char *)(v9 + 32));
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
    specialized Array._endMutation()(v11);
    return v10;
  }

  return result;
}

uint64_t sub_1000D3054()
{
  uint64_t v1 = dispatch_group_create();
  dispatch_group_enter(v1);
  uint64_t v2 = sub_10000941C(&qword_1001D77D8);
  uint64_t v3 = swift_allocObject(v2, 40LL, 7LL);
  *(_DWORD *)(v3 + 3os_unfair_lock_lock(v0 + 6) = 0;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v3 + 24) = 0LL;
  *(_BYTE *)(v3 + 32) = 0;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v3;
  return v0;
}

uint64_t sub_1000D30A4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_1000D4FE8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000D3100(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v5;
  if (*(_BYTE *)(a1 + 16) != 1) {
    return 0LL;
  }
  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))a1;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = swift_retain(v1);
  v2(&v5, v3);
  sub_100009644(v2, v1, 1);
  return v5;
}

void (*sub_1000D3170())(uint64_t *__return_ptr, uint64_t)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  void (*v5)(uint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  void (*v8[2])(uint64_t *__return_ptr, uint64_t);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_1000D5010(v2, v8);
  os_unfair_lock_unlock(v3);
  unint64_t v4 = v8[1];
  if (v8[0])
  {
    uint64_t v5 = v8[0];
    OS_dispatch_group.wait()();
    unint64_t v6 = sub_1000D30A4();

    swift_unknownObjectRelease();
    return (void (*)(uint64_t *__return_ptr, uint64_t))v6;
  }

  return v4;
}

void (*sub_1000D3220(uint64_t a1))(uint64_t *__return_ptr, uint64_t)
{
  void (*v1)(uint64_t *__return_ptr, uint64_t);
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v1 = *(void (**)(uint64_t *__return_ptr, uint64_t))a1;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v3 = swift_retain(v2);
    v1(&v6, v3);
    sub_100009644(v1, v2, 1);
    return 0LL;
  }

  else
  {
    unint64_t v4 = v1;
  }

  return v1;
}

uint64_t sub_1000D329C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_1000D503C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000D32F8()
{
  uint64_t v1 = sub_1000D30A4();
  swift_release();
  return v1;
}

uint64_t sub_1000D3348@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v4);
  uint64_t v6 = *(void *)(a1 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_1000D33A0(uint64_t a1, void *a2)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t);
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_s *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_s *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  void v74[2];
  char *v75;
  uint64_t v76;
  id v77;
  unsigned int v78;
  void *v79;
  char *v80;
  unint64_t v81;
  void (*v82)(uint64_t *__return_ptr, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void **v86;
  uint64_t v87;
  void *v88;
  void *v89;
  type metadata accessor for Client(0LL);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  uint64_t v84 = v2;
  sub_10000C4AC();
  char v8 = sub_1000D329C();
  swift_release();
  if ((v8 & 1) == 0)
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v9 = sub_100010ED4();
    uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC18);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v13 = static os_log_type_t.error.getter(v11, v12);
    if (os_log_type_enabled(v11, v13))
    {
      int v14 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "New connection before assembly is ready", v14, 2u);
      sub_100010C34((uint64_t)v14);
    }
  }

  sub_10000C4AC();
  uint64_t v15 = sub_1000D3170();
  char v17 = v16;
  swift_release();
  if (!v15)
  {
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v32 = sub_100010ED4();
    os_log_type_t v33 = sub_1000093D0(v32, (uint64_t)qword_1001EDC18);
    BOOL v34 = (os_log_s *)Logger.logObject.getter(v33);
    uint64_t v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      uint64_t v37 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v36,  "Connection failed because assembly is not available",  v37,  2u);
      sub_100010C34((uint64_t)v37);
    }

    return 0LL;
  }

  sub_1000489B0();
  uint64_t v19 = v18;
  static Client.parsecd.getter(v18);
  unint64_t v20 = type metadata accessor for ResourceAccessSpan(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  char v21 = sub_100041728(v19, 43, v7, 0LL, 1);
  if ((sub_100032E4C() & 1) == 0 && (sub_10006BB04() & 1) == 0)
  {
    swift_unknownObjectRelease();
    *(_BYTE *)(v21 + qword_1001D2E88) = 77;
    swift_release();
    return 0LL;
  }

  os_log_type_t v22 = [a2 processIdentifier];
  BOOL v23 = sub_1000D3C40(a2);
  os_log_type_t v25 = v24;
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v82 = v15;
  uint64_t v83 = v21;
  uint64_t v26 = sub_100010ED4();
  sub_1000093D0(v26, (uint64_t)qword_1001EDC18);
  uint64_t v27 = swift_bridgeObjectRetain_n(v25, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  uint64_t v80 = v23;
  uint64_t v81 = v25;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = sub_100009B20(18LL);
    uint64_t v79 = v17;
    uint64_t v31 = sub_100009B20(32LL);
    uint64_t v86 = (void **)v31;
    *(_DWORD *)uint64_t v30 = 136446466;
    swift_bridgeObjectRetain(v25);
    uint64_t v85 = (void *)sub_1000307E0((uint64_t)v23, v25, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v30 + 4);
    swift_bridgeObjectRelease_n(v25, 3LL);
    *(_WORD *)(v30 + 12) = 1024;
    LODWORD(v85) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, (char *)&v85 + 4, v30 + 14);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "new connection from %{public}s (%d)", (uint8_t *)v30, 0x12u);
    swift_arrayDestroy(v31, 1LL);
    sub_100010C34(v31);
    sub_100010C34(v30);
  }

  else
  {

    swift_bridgeObjectRelease_n(v25, 2LL);
  }

  uint64_t v78 = v22;
  id v38 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCInterface);
  os_log_type_t v39 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL___PARClientXPC];
  [a2 setRemoteObjectInterface:v39];

  uint64_t v40 = sub_100009ACC((uint64_t)&unk_1001B8D90, 20LL);
  *(_DWORD *)(v40 + swift_weakDestroy(v0 + 16) = v22;
  uint64_t v88 = sub_1000D4E5C;
  uint64_t v89 = (void *)v40;
  uint64_t v86 = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v41 = sub_1000D5084((uint64_t)sub_1000197E4);
  swift_release();
  unint64_t v42 = [a2 remoteObjectProxyWithErrorHandler:v41];
  _Block_release(v41);
  _bridgeAnyObjectToAny(_:)(v42);
  swift_unknownObjectRelease();
  unint64_t v43 = sub_10000941C((uint64_t *)&unk_1001D77E0);
  else {
    uint64_t v44 = 0LL;
  }
  uint64_t v79 = v44;
  os_log_t v45 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL____TtP7parsecd20ParsecDaemonProtocol_];
  [a2 setExportedInterface:v45];

  uint64_t v46 = objc_allocWithZone((Class)type metadata accessor for ClientConnection(0LL));
  swift_unknownObjectRetain(v44);
  uint64_t v47 = a2;
  swift_unknownObjectRetain(v82);
  uint64_t v48 = sub_10006000C();
  [v47 setExportedObject:v48];
  [v47 resume];
  id v49 = v84;
  *(_BYTE *)(v83 + qword_1001D2E88) = 4;
  uint64_t v76 = *(void *)(v49 + OBJC_IVAR____TtC7parsecd13ParsecService_queue);
  uint64_t v50 = sub_100009ACC((uint64_t)&unk_1001B8DE0, 24LL);
  swift_unknownObjectWeakInit(v50 + 16, v49);
  os_log_type_t v51 = (void *)sub_100009ACC((uint64_t)&unk_1001B8E08, 40LL);
  void v51[2] = v50;
  v51[3] = v48;
  v51[4] = v47;
  uint64_t v88 = sub_1000D4EB0;
  uint64_t v89 = v51;
  uint64_t v86 = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v52 = sub_1000D5084((uint64_t)sub_1000D2F18);
  id v53 = type metadata accessor for DispatchQoS(0LL);
  v74[1] = v74;
  uint64_t v54 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  sub_100009AEC();
  unint64_t v57 = v56 - v55;
  uint64_t v77 = v47;
  swift_retain(v50);
  uint64_t v75 = v48;
  static DispatchQoS.unspecified.getter(v75);
  uint64_t v58 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v74[0] = v74;
  id v59 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  sub_100009AEC();
  uint64_t v62 = v61 - v60;
  uint64_t v85 = _swiftEmptyArrayStorage;
  uint64_t v64 = sub_10003B7FC( (unint64_t *)&qword_1001D2B80,  v63,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v65 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
  uint64_t v66 = sub_10000945C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v65, v66, v58, v64);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v62, v52);
  _Block_release(v52);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v62, v58);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v57, v53);
  swift_release();
  swift_release();
  uint64_t v67 = sub_100009ACC((uint64_t)&unk_1001B8DE0, 24LL);
  swift_unknownObjectWeakInit(v67 + 16, v84);
  uint64_t v68 = sub_100009ACC((uint64_t)&unk_1001B8E58, 24LL);
  uint64_t v69 = v75;
  swift_unknownObjectWeakInit(v68 + 16, v75);
  uint64_t v70 = sub_100009ACC((uint64_t)&unk_1001B8E80, 52LL);
  *(void *)(v70 + swift_weakDestroy(v0 + 16) = v68;
  *(void *)(v70 + 24) = v67;
  uint64_t v71 = v81;
  *(void *)(v70 + 32) = v80;
  *(void *)(v70 + 4sub_1000AC280(v0, v1, 0) = v71;
  *(_DWORD *)(v70 + 48) = v78;
  uint64_t v88 = sub_1000D4F14;
  uint64_t v89 = (void *)v70;
  uint64_t v86 = _NSConcreteStackBlock;
  uint64_t v87 = 1107296256LL;
  uint64_t v72 = sub_1000D5084((uint64_t)sub_1000BCFEC);
  swift_release();
  [v77 setInvalidationHandler:v72];
  swift_unknownObjectRelease();
  swift_release();

  swift_unknownObjectRelease();
  _Block_release(v72);
  return 1LL;
}

char *sub_1000D3C40(void *a1)
{
  int v1 = [a1 processIdentifier];
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)(4096LL, &type metadata for Int8);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = 4096LL;
  bzero((void *)(v2 + 32), 0x1000uLL);
  uint64_t v3 = proc_pidpath(v1, (void *)(v2 + 32), 0x1000u);
  int v5 = errno.getter(v3);
  uint64_t result = strerror(v5);
  if (result)
  {
    uint64_t v7 = result;
    swift_bridgeObjectRelease();
    uint64_t v8 = String.init(cString:)(v7);
    unint64_t v10 = v9;
    if (qword_1001D0518 != -1) {
      swift_once(&qword_1001D0518, sub_100034490);
    }
    uint64_t v11 = sub_100010ED4();
    sub_1000093D0(v11, (uint64_t)qword_1001EDC18);
    uint64_t v12 = swift_bridgeObjectRetain(v10);
    os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v15 = static os_log_type_t.error.getter(v13, v14);
    uint64_t v4 = 0x6E776F6E6B6E753CLL;
    if (os_log_type_enabled(v13, v15))
    {
      uint64_t v16 = sub_100009B20(18LL);
      uint64_t v17 = sub_100009B20(32LL);
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v16 = 67109378;
      LODWORD(v18) = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v16 + 4);
      *(_WORD *)(v16 + 8) = 2080;
      swift_bridgeObjectRetain(v10);
      uint64_t v18 = sub_1000307E0(v8, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v16 + 10);
      swift_bridgeObjectRelease_n(v10, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "error getting path for pid [%d] %s", (uint8_t *)v16, 0x12u);
      swift_arrayDestroy(v17, 1LL);
      sub_100010C34(v17);
      sub_100010C34(v16);
    }

    else
    {

      swift_bridgeObjectRelease_n(v10, 2LL);
    }

    return (char *)v4;
  }

  __break(1u);
  return result;
}

void sub_1000D3E80(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)_convertErrorToNSError(_:)(a1);
  if (qword_1001D0518 != -1) {
    swift_once(&qword_1001D0518, sub_100034490);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_1000093D0(v4, (uint64_t)qword_1001EDC18);
  id v11 = v3;
  int v5 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    uint64_t v8 = swift_slowAlloc(18LL, -1LL);
    unint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 67109378;
    HIDWORD(v13) = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)((char *)&v13 + 4, &v14, v8 + 4);
    *(_WORD *)(v8 + 8) = 2112;
    id v12 = v11;
    id v10 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v8 + 10);
    void *v9 = v11;

    _os_log_impl((void *)&_mh_execute_header, v5, v7, "new connection from %d (%@)", (uint8_t *)v8, 0x12u);
    sub_10000941C(&qword_1001D1060);
    swift_arrayDestroy(v9, 1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

void sub_1000D4064(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = a1 + 16;
  swift_beginAccess(a1 + 16, v32, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (!Strong) {
    return;
  }
  uint64_t v8 = (void *)Strong;
  unint64_t v9 = (uint64_t *)(Strong + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess(Strong + OBJC_IVAR____TtC7parsecd13ParsecService_connections, &v30, 33LL, 0LL);
  id v10 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  uint64_t v11 = *(void *)((*v9 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  sub_100034164(v11);
  uint64_t v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
  specialized Array._endMutation()(v12);
  swift_endAccess(&v30);
  unsigned int v13 = [a3 processIdentifier];
  uint64_t v14 = *v9;
  if (!((unint64_t)v14 >> 62))
  {
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v14);
    if (v15) {
      goto LABEL_4;
    }
LABEL_23:

    swift_bridgeObjectRelease();
    return;
  }

void sub_1000D433C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v43, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    uint64_t v11 = (void *)Strong;
    uint64_t v12 = a2 + 16;
    swift_beginAccess(v12, v42, 0LL, 0LL);
    uint64_t v13 = swift_unknownObjectWeakLoadStrong(v12);
    if (v13)
    {
      uint64_t v14 = (char *)v13;
      if (qword_1001D0518 != -1) {
        swift_once(&qword_1001D0518, sub_100034490);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      sub_1000093D0(v15, (uint64_t)qword_1001EDC18);
      uint64_t v16 = swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc(18LL, -1LL);
        uint64_t v20 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v20;
        *(_DWORD *)uint64_t v19 = 136446466;
        swift_bridgeObjectRetain(a4);
        uint64_t v40 = (void *)sub_1000307E0(a3, a4, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v19 + 4);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v19 + 12) = 1024;
        LODWORD(v4sub_1000AC280(v0, v1, 0) = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v19 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "connection from %{public}s (%d) invalidated",  (uint8_t *)v19,  0x12u);
        swift_arrayDestroy(v20, 1LL);
        swift_slowDealloc(v20, -1LL, -1LL);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 2LL);
      }

      uint64_t v39 = *(void *)&v14[OBJC_IVAR____TtC7parsecd13ParsecService_queue];
      uint64_t v21 = swift_allocObject(&unk_1001B8ED0, 32LL, 7LL);
      *(void *)(v21 + swift_weakDestroy(v0 + 16) = v11;
      *(void *)(v21 + 24) = v14;
      aBlock[4] = (uint64_t)sub_1000D4F50;
      aBlock[5] = v21;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1000D2F18;
      aBlock[3] = (uint64_t)&unk_1001B8EE8;
      uint64_t v22 = _Block_copy(aBlock);
      uint64_t v23 = type metadata accessor for DispatchQoS(0LL);
      id v38 = v36;
      uint64_t v24 = *(void *)(v23 - 8);
      __chkstk_darwin(v23);
      os_log_type_t v26 = (char *)v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      id v27 = v11;
      uint64_t v37 = v14;
      static DispatchQoS.unspecified.getter(v37);
      uint64_t v28 = type metadata accessor for DispatchWorkItemFlags(0LL);
      v36[1] = v36;
      uint64_t v29 = *(void *)(v28 - 8);
      __chkstk_darwin(v28);
      uint64_t v31 = (char *)v36 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v40 = _swiftEmptyArrayStorage;
      uint64_t v33 = sub_10003B7FC( (unint64_t *)&qword_1001D2B80,  v32,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v34 = sub_10000941C((uint64_t *)&unk_1001D0BC0);
      unint64_t v35 = sub_10000945C();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v34, v35, v28, v33);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v26, v31, v22);
      _Block_release(v22);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);

      swift_release();
    }

    else
    {
    }
  }

void sub_1000D4720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess(a2 + OBJC_IVAR____TtC7parsecd13ParsecService_connections, v11, 0LL, 0LL);
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v6 = sub_1000D47E0(a1, v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess(v4, v10, 33LL, 0LL);
    uint64_t v9 = (void *)sub_1000D2FCC(v6);
    swift_endAccess(v10);
  }

  sub_1000D4968();
}

unint64_t sub_1000D47E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v4) {
    return 0LL;
  }
  while (1)
  {
    sub_100030F20(0LL, (a2 & 0xC000000000000001LL) == 0, a2);
    id v5 = (a2 & 0xC000000000000001LL) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2)
       : *(id *)(a2 + 32);
    unint64_t v6 = v5;
    type metadata accessor for ClientConnection(0LL);
    char v7 = static NSObject.== infix(_:_:)(v6, a1);

    if ((v7 & 1) != 0) {
      return 0LL;
    }
    for (uint64_t i = 0LL; ; ++i)
    {
      unint64_t v8 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if (v8 == v4) {
        return 0LL;
      }
      if ((a2 & 0xC000000000000001LL) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }

      else
      {
        if ((v8 & 0x8000000000000000LL) != 0) {
          goto LABEL_19;
        }
        if (v8 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_20;
        }
        id v10 = *(id *)(a2 + 32 + 8 * v8);
      }

      uint64_t v11 = v10;
      char v12 = static NSObject.== infix(_:_:)(v10, a1);

      if ((v12 & 1) != 0) {
        return v8;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (!v4) {
      return 0LL;
    }
  }

void sub_1000D4968()
{
  int v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7parsecd13ParsecService_connections, v14, 0LL, 0LL);
  uint64_t v2 = *v1;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease();
    if (v4) {
      return;
    }
  }

  else if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    return;
  }

  if (sub_1000D32F8())
  {
    sub_1000498D4();
    unint64_t v6 = v5;
    id v7 = [v5 configuration];

    id v8 = [v7 URLCache];
    if (v8)
    {
      if (qword_1001D0530 != -1) {
        swift_once(&qword_1001D0530, sub_1000344F0);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      uint64_t v10 = sub_1000093D0(v9, (uint64_t)qword_1001EDC60);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.debug.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "purging url cache", v13, 2u);
        swift_slowDealloc(v13, -1LL, -1LL);
      }

      _CFURLCachePurgeMemoryCache([v8 _CFURLCache]);
      swift_unknownObjectRelease();
    }

    else
    {
      swift_unknownObjectRelease();
    }
  }

uint64_t sub_1000D4B8C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
LABEL_10:
    __break(1u);
    return result;
  }

  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 32);
  result += 32LL;
  if (v3)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
    }

    __break(1u);
    goto LABEL_10;
  }

  uint64_t v4 = 0LL;
LABEL_8:
  uint64_t v7 = static String._fromUTF8Repairing(_:)(result, v4);
  swift_bridgeObjectRelease(v2);
  return v7;
}

id sub_1000D4C0C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  *(void *)&v0[OBJC_IVAR____TtC7parsecd13ParsecService_connections] = _swiftEmptyArrayStorage;
  uint64_t v3 = OBJC_IVAR____TtC7parsecd13ParsecService_queue;
  sub_100028BD4();
  type metadata accessor for DispatchQoS(0LL);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  id v8 = v0;
  static DispatchQoS.default.getter(v8);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  sub_100009B94();
  __chkstk_darwin(v10);
  sub_100009AEC();
  uint64_t v13 = v12 - v11;
  uint64_t v25 = 0LL;
  uint64_t v15 = sub_10003B7FC( (unint64_t *)&qword_1001D0BB0,  v14,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)(&v25, v9, v15);
  uint64_t v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  __chkstk_darwin(v16);
  sub_100009AEC();
  uint64_t v19 = v18 - v17;
  (*(void (**)(uint64_t, void))(v20 + 104))( v18 - v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)&v1[v3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x8000000100172450LL,  v7,  v13,  v19,  0LL);
  uint64_t v21 = OBJC_IVAR____TtC7parsecd13ParsecService__assembly;
  uint64_t v22 = sub_10000941C(&qword_1001D77D0);
  sub_100009ACC(v22, 24LL);
  *(void *)&v8[v21] = sub_1000D3054();

  v24.receiver = v8;
  v24.super_class = ObjectType;
  return objc_msgSendSuper2(&v24, "init");
}

uint64_t type metadata accessor for ParsecService()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd13ParsecService);
}

uint64_t sub_1000D4E4C()
{
  return swift_deallocObject(v0, 20LL, 7LL);
}

void sub_1000D4E5C(uint64_t a1)
{
}

uint64_t sub_1000D4E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000AC280(v0, v1, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D4E74(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000D4E7C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000D4EB0()
{
}

uint64_t sub_1000D4EBC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D4EE0()
{
  return swift_deallocObject(v0, 52LL, 7LL);
}

void sub_1000D4F14()
{
}

uint64_t sub_1000D4F24()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000D4F50()
{
}

void sub_1000D4F58(uint64_t a1)
{
}

void sub_1000D4F6C(uint64_t a1)
{
}

uint64_t sub_1000D4F80(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

uint64_t sub_1000D4FE8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000D3100(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

void (*sub_1000D5010@<X0>( uint64_t a1@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X8>))(uint64_t *__return_ptr, uint64_t)
{
  void (*result)(uint64_t *__return_ptr, uint64_t);
  void (*v5)(uint64_t *__return_ptr, uint64_t);
  void (*v6)(uint64_t *__return_ptr, uint64_t);
  uint64_t result = sub_1000D3220(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_1000D503C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10007E480(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

void *sub_1000D5084@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 13os_unfair_lock_lock(v0 + 6) = a1;
  *(void *)(v2 - 128) = v1;
  return _Block_copy((const void *)(v2 - 152));
}

uint64_t sub_1000D5094()
{
  if ((*(_BYTE *)(v0 + 81) & 1) == 0) {
    (*(void (**)(void))(*(void *)v0 + 400LL))();
  }
  swift_weakDestroy(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000110A8();
  sub_1000145E0();

  sub_100019C1C(v0 + *(void *)(*(void *)v0 + 136LL), &qword_1001D1078);
  uint64_t v1 = type metadata accessor for Date(0LL);
  sub_100019DA4(v1);
  swift_release();
  return v0;
}

uint64_t sub_1000D5138()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + *(void *)(*(void *)v0 + 152LL)) + 16LL);
  sub_10004EC38();
  os_unfair_lock_lock(v1);
  uint64_t v60 = *(const char **)(v0 + 32);
  uint64_t v61 = *(const char **)(v0 + 24);
  HIDWORD(v58) = *(unsigned __int8 *)(v0 + 40);
  char v63 = *(_BYTE *)(v0 + 41);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_unknownObjectRetain(*(void *)(v0 + 72));
  swift_bridgeObjectRetain(v3);
  sub_1000145E8();
  uint64_t v64 = v4;
  sub_10005A624();
  os_unfair_lock_unlock(v1);
  uint64_t v5 = swift_release();
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = static os_log_type_t.error.getter(v5, v7);
  uint64_t v9 = os_log(_:dso:log:type:_:)("LEAKED SPAN: {{{", 16LL, 2LL, &_mh_execute_header, v6, v8, _swiftEmptyArrayStorage);
  static os_log_type_t.error.getter(v9, v10);
  uint64_t v11 = sub_10000941C(&qword_1001D0C10);
  uint64_t v12 = swift_allocObject(v11, 152LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C800;
  unsigned __int8 v13 = *(_BYTE *)(v0 + 80);
  uint64_t v14 = v11;
  uint64_t v15 = sub_100041438(v13);
  uint64_t v16 = StaticString.description.getter(v15);
  uint64_t v18 = v17;
  *(void *)(v12 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v19 = sub_100042FE8();
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 4sub_1000AC280(v0, v1, 0) = v18;
  unint64_t v20 = v19;
  *(void *)(v12 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v12 + 104) = v19;
  *(void *)(v12 + 64) = v19;
  strcpy((char *)(v12 + 72), "resourceAccess");
  *(_BYTE *)(v12 + 87) = -18;
  *(void *)(v12 + 13os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 112) = 0xD000000000000010LL;
  *(void *)(v12 + 12sub_1000AC280(v0, v1, 0) = 0x800000010016AE50LL;
  os_log(_:dso:log:type:_:)("Name: %s, Category: %s, Subsystem: %s", v58, v60, v61);
  uint64_t v21 = swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
  {
    static os_log_type_t.error.getter(v21, v22);
    uint64_t v23 = sub_10005A72C(v14);
    *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v24 = StaticString.description.getter(v62);
    *(void *)(v23 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v23 + 64) = v20;
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 4sub_1000AC280(v0, v1, 0) = v25;
    sub_1000D8BE8((uint64_t)"Format string: %s", 17LL, v26, (uint64_t)&_mh_execute_header);
    sub_1000110A8();
    if (v2)
    {
      uint64_t v27 = swift_bridgeObjectRetain(v2);
      static os_log_type_t.error.getter(v27, v28);
      uint64_t v29 = sub_10005A72C(v14);
      *(_OWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v29 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6668);
      sub_1000D8B94( (unint64_t *)&unk_1001D6670,  &qword_1001D6668,  (uint64_t)&protocol conformance descriptor for [A]);
      *(void *)(v29 + 64) = v30;
      *(void *)(v29 + 32) = v2;
      sub_1000D8BE8((uint64_t)"Arguments: %@", 13LL, v31, (uint64_t)&_mh_execute_header);
      sub_1000110A8();
    }
  }

  if (v3)
  {
    uint64_t v32 = swift_bridgeObjectRetain(v3);
    static os_log_type_t.error.getter(v32, v33);
    uint64_t v34 = sub_10005A72C(v14);
    *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v34 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6658);
    sub_1000D8B94(&qword_1001D6660, &qword_1001D6658, (uint64_t)&protocol conformance descriptor for [A : B]);
    *(void *)(v34 + 64) = v35;
    *(void *)(v34 + 32) = v3;
    sub_1000D8BE8((uint64_t)"Analytics: %@", 13LL, v36, (uint64_t)&_mh_execute_header);
    sub_1000110A8();
  }

  uint64_t v37 = v64;
  if ((unint64_t)v64 >> 62)
  {
    if (v64 < 0) {
      uint64_t v57 = v64;
    }
    else {
      uint64_t v57 = v64 & 0xFFFFFFFFFFFFFF8LL;
    }
    sub_10003EF98();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v57);
    uint64_t v38 = result;
  }

  else
  {
    uint64_t v38 = *(void *)((v64 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = sub_10003EF98();
  }

  if (v38)
  {
    if (v38 < 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v40 = v14;
    uint64_t v41 = 0LL;
    do
    {
      uint64_t v42 = *(void *)(v37 + 8 * v41++ + 32);
      uint64_t v43 = swift_unknownObjectRetain(v42);
      static os_log_type_t.error.getter(v43, v44);
      uint64_t v45 = sub_10005A72C(v40);
      *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      uint64_t v65 = v42;
      swift_unknownObjectRetain(v42);
      uint64_t v46 = String.init<A>(describing:)(&v65);
      *(void *)(v45 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
      *(void *)(v45 + 64) = v20;
      *(void *)(v45 + 32) = v46;
      *(void *)(v45 + 4sub_1000AC280(v0, v1, 0) = v47;
      os_log(_:dso:log:type:_:)("Leaked cancellables: %s", v59);
      swift_unknownObjectRelease();
      uint64_t v37 = v64;
      swift_bridgeObjectRelease();
    }

    while (v38 != v41);
    uint64_t v48 = sub_1000110E0();
  }

  else
  {
    uint64_t v48 = sub_1000110E0();
  }

  uint64_t v50 = static os_log_type_t.error.getter(v48, v49);
  sub_1000D8D94((uint64_t)"}}}", 3LL, v51, (uint64_t)&_mh_execute_header, v52, v50, (uint64_t)_swiftEmptyArrayStorage);
  BOOL v53 = sub_1000D5C68();
  if (v53)
  {
    uint64_t v54 = static os_log_type_t.fault.getter(v53);
    sub_1000D8D94( (uint64_t)"Some objects remain retained at the moment when all activities must be finalized. This could indicate dea dlock, memory leak or not cancelled asynchronous procedures, such as networking or XPC calls.",  198LL,  v55,  (uint64_t)&_mh_execute_header,  v56,  v54,  (uint64_t)_swiftEmptyArrayStorage);
  }

  swift_unknownObjectRelease();
  sub_1000110E0();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D55E8()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + *(void *)(*(void *)v0 + 152LL)) + 16LL);
  swift_retain(*(void *)(v0 + *(void *)(*(void *)v0 + 152LL)));
  os_unfair_lock_lock(v1);
  uint64_t v56 = *(const char **)(v0 + 32);
  uint64_t v57 = *(const char **)(v0 + 24);
  HIDWORD(v54) = *(unsigned __int8 *)(v0 + 40);
  char v59 = *(_BYTE *)(v0 + 41);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_unknownObjectRetain(*(void *)(v0 + 72));
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  uint64_t v60 = v4;
  swift_bridgeObjectRetain(v4);
  os_unfair_lock_unlock(v1);
  uint64_t v5 = swift_release();
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = static os_log_type_t.error.getter(v5, v7);
  uint64_t v9 = os_log(_:dso:log:type:_:)("LEAKED SPAN: {{{", 16LL, 2LL, &_mh_execute_header, v6, v8, _swiftEmptyArrayStorage);
  static os_log_type_t.error.getter(v9, v10);
  uint64_t v11 = sub_10000941C(&qword_1001D0C10);
  uint64_t v12 = swift_allocObject(v11, 152LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C800;
  unsigned __int8 v13 = *(_BYTE *)(v0 + 80);
  uint64_t v14 = v11;
  uint64_t v15 = sub_100041438(v13);
  uint64_t v16 = StaticString.description.getter(v15);
  uint64_t v18 = v17;
  *(void *)(v12 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v19 = sub_100042FE8();
  *(void *)(v12 + 32) = v16;
  *(void *)(v12 + 4sub_1000AC280(v0, v1, 0) = v18;
  uint64_t v20 = v6;
  unint64_t v21 = v19;
  *(void *)(v12 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v12 + 104) = v19;
  *(void *)(v12 + 64) = v19;
  strcpy((char *)(v12 + 72), "networkRequest");
  *(_BYTE *)(v12 + 87) = -18;
  *(void *)(v12 + 13os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v12 + 144) = v19;
  *(void *)(v12 + 112) = 0xD000000000000010LL;
  *(void *)(v12 + 12sub_1000AC280(v0, v1, 0) = 0x800000010016AE50LL;
  os_log(_:dso:log:type:_:)("Name: %s, Category: %s, Subsystem: %s", v54, v56, v57);
  uint64_t v22 = swift_bridgeObjectRelease();
  if ((v59 & 1) == 0)
  {
    static os_log_type_t.error.getter(v22, v23);
    uint64_t v24 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    uint64_t v25 = StaticString.description.getter(v58);
    *(void *)(v24 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v24 + 64) = v21;
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 4sub_1000AC280(v0, v1, 0) = v26;
    os_log(_:dso:log:type:_:)("Format string: %s", v55);
    swift_bridgeObjectRelease();
    if (v2)
    {
      uint64_t v27 = swift_bridgeObjectRetain(v2);
      uint64_t v29 = static os_log_type_t.error.getter(v27, v28);
      uint64_t v30 = swift_allocObject(v14, 72LL, 7LL);
      *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      *(void *)(v30 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6668);
      sub_1000D8B94( (unint64_t *)&unk_1001D6670,  &qword_1001D6668,  (uint64_t)&protocol conformance descriptor for [A]);
      *(void *)(v30 + 64) = v31;
      *(void *)(v30 + 32) = v2;
      os_log(_:dso:log:type:_:)("Arguments: %@", 13LL, 2LL, &_mh_execute_header, v20, v29, v30);
      swift_bridgeObjectRelease();
    }
  }

  if (v3)
  {
    uint64_t v32 = swift_bridgeObjectRetain(v3);
    uint64_t v34 = static os_log_type_t.error.getter(v32, v33);
    uint64_t v35 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v35 + 5os_unfair_lock_lock(v0 + 6) = sub_10000941C(&qword_1001D6658);
    sub_1000D8B94(&qword_1001D6660, &qword_1001D6658, (uint64_t)&protocol conformance descriptor for [A : B]);
    *(void *)(v35 + 64) = v36;
    *(void *)(v35 + 32) = v3;
    os_log(_:dso:log:type:_:)("Analytics: %@", 13LL, 2LL, &_mh_execute_header, v20, v34, v35);
    swift_bridgeObjectRelease();
  }

  uint64_t v37 = v60;
  if ((unint64_t)v60 >> 62)
  {
    if (v60 < 0) {
      uint64_t v53 = v60;
    }
    else {
      uint64_t v53 = v60 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v60);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v53);
    uint64_t v38 = result;
  }

  else
  {
    uint64_t v38 = *(void *)((v60 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t result = swift_bridgeObjectRetain(v60);
  }

  if (v38)
  {
    if (v38 < 1)
    {
      __break(1u);
      return result;
    }

    uint64_t v40 = v14;
    uint64_t v41 = 0LL;
    do
    {
      uint64_t v42 = *(void *)(v37 + 8 * v41++ + 32);
      uint64_t v43 = swift_unknownObjectRetain(v42);
      static os_log_type_t.error.getter(v43, v44);
      uint64_t v45 = swift_allocObject(v40, 72LL, 7LL);
      *(_OWORD *)(v45 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      uint64_t v61 = v42;
      swift_unknownObjectRetain(v42);
      uint64_t v46 = String.init<A>(describing:)(&v61);
      *(void *)(v45 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
      *(void *)(v45 + 64) = v21;
      *(void *)(v45 + 32) = v46;
      *(void *)(v45 + 4sub_1000AC280(v0, v1, 0) = v47;
      os_log(_:dso:log:type:_:)("Leaked cancellables: %s", v55);
      swift_unknownObjectRelease();
      uint64_t v37 = v60;
      swift_bridgeObjectRelease();
    }

    while (v38 != v41);
    uint64_t v48 = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v48 = swift_bridgeObjectRelease();
  }

  uint64_t v50 = static os_log_type_t.error.getter(v48, v49);
  os_log(_:dso:log:type:_:)("}}}", 3LL, 2LL, &_mh_execute_header, v20, v50, _swiftEmptyArrayStorage);
  BOOL v51 = sub_1000D5B8C();
  if (v51)
  {
    uint64_t v52 = static os_log_type_t.fault.getter(v51);
    os_log(_:dso:log:type:_:)( "Some objects remain retained at the moment when all activities must be finalized. This could indicate deadlock, me mory leak or not cancelled asynchronous procedures, such as networking or XPC calls.",  198LL,  2LL,  &_mh_execute_header,  v20,  v52,  _swiftEmptyArrayStorage);
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D5B28(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)((char *)v1 + *(void *)(*v1 + 152LL)) + 16LL);
  sub_10004EC38();
  os_unfair_lock_lock(v3);
  v1[6] = a1;
  sub_10005A624();
  sub_10001460C();
  os_unfair_lock_unlock(v3);
  return swift_release();
}

BOOL sub_1000D5B8C()
{
  char v1 = *(_BYTE *)(v0 + 80);
  void v9[3] = &type metadata for ResourceNetworkActivity;
  v9[4] = &off_1001B8F90;
  LOBYTE(v9[0]) = v1;
  uint64_t v2 = *(char *)sub_100019AFC(v9, (uint64_t)&type metadata for ResourceNetworkActivity);
  if (qword_1001D0640 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(qword_1001EDEA8 + 16);
    if (!v3) {
      break;
    }
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      if (qword_100163CC0[*(char *)(qword_1001EDEA8 + 32 + v4)] == qword_100163CC0[v2])
      {
        int v6 = *(unsigned __int8 *)(qword_1001EDEA8 + 32 + v4);
        goto LABEL_9;
      }

      ++v4;
      if (v5 == v3) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0640, sub_1000D851C);
  }

BOOL sub_1000D5C68()
{
  char v1 = *(_BYTE *)(v0 + 80);
  void v9[3] = &type metadata for ResourceAccessActivity;
  v9[4] = &off_1001B35E8;
  LOBYTE(v9[0]) = v1;
  uint64_t v2 = *(char *)sub_100019AFC(v9, (uint64_t)&type metadata for ResourceAccessActivity);
  if (qword_1001D0580 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(qword_1001EDCF0 + 16);
    if (!v3) {
      break;
    }
    uint64_t v4 = 0LL;
    while (1)
    {
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        break;
      }
      if (qword_100163CC0[*(char *)(qword_1001EDCF0 + 32 + v4)] == qword_100163CC0[v2])
      {
        int v6 = *(unsigned __int8 *)(qword_1001EDCF0 + 32 + v4);
        goto LABEL_9;
      }

      ++v4;
      if (v5 == v3) {
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_11:
    swift_once(&qword_1001D0580, sub_100041410);
  }

uint64_t sub_1000D5D44()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(void *)(*(void *)v0 + 144LL), v1);
  Date.timeIntervalSinceNow.getter(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1000D5E14()
{
  uint64_t v4 = *(unsigned __int8 *)(v0 + 41);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  sub_1000D8CF4();
  sub_100047294();
  sub_1000145E8();
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = sub_1000D8D28();
  sub_1000D78A4(v7);
  sub_1000D8D18();
  uint64_t v9 = v0 + v8;
  if ((v4 & 1) != 0 || !v5)
  {
    sub_1000A14F8(v0 + v8, (uint64_t)v38);
    sub_1000D8DB4(v9);
    uint64_t v22 = sub_100009AC4();
    uint64_t v23 = sub_100010708(v1, 1LL, v22);
    if ((_DWORD)v23 != 1)
    {
      uint64_t v24 = *(void *)(v0 + 88);
      static os_signpost_type_t.end.getter(v23);
      uint64_t v25 = sub_1000D8DDC();
      os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, v24, v25, v26, v27);
      unint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL);
      uint64_t v19 = v1;
      uint64_t v20 = v22;
      goto LABEL_7;
    }

    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }

  sub_1000A14F8(v0 + v8, (uint64_t)v38);
  sub_1000D8D38(v9);
  uint64_t v10 = sub_100009AC4();
  sub_1000D8C10(v10);
  if (v11) {
    goto LABEL_15;
  }
  uint64_t v12 = sub_1000145E8();
  static os_signpost_type_t.end.getter(v12);
  sub_1000D8DDC();
  sub_1000D8CB8();
  sub_1000D8DBC();
  sub_1000A56E4(v13, v14, v15, v16, v17, v18, v37, v36, v35, v36);
  sub_10001450C();
  uint64_t v19 = sub_1000D8CA4();
LABEL_7:
  v21(v19, v20);
  if (sub_1000D8D0C())
  {
    sub_1000D8C44();
    sub_1000D8D54();
    sub_1000D8BD0();
    sub_1000D8BFC(v28, v29, v30, v31, (uint64_t (**)(void, void))&off_1001B7B30);
    sub_1000BCB14();
    sub_10001460C();
    uint64_t v32 = sub_1000D8D40();
    if (v32)
    {
      sub_1000D8D00(v32);
      uint64_t v33 = sub_1000D8C34();
      sub_1000D8CE8(v33, (uint64_t)&off_1001B7B30);
      sub_10004099C();
      sub_100010CA0();
    }

    else
    {
      sub_100010D00();
    }

    sub_1000D8CE0();
    sub_1000A23BC();
    sub_10001450C();
    sub_1000D8CD8();
    sub_10005A8E0();
    uint64_t v34 = sub_1000D8C64();
    sub_1000D8DE8(v34, (uint64_t)_swiftEmptyArrayStorage);
    sub_100009B3C();
    sub_1000110A8();
    sub_1000145E0();
    sub_1000D8C54();
  }

  else
  {
    sub_1000D8CE0();
    sub_1000A23BC();
    sub_10001450C();
    sub_1000D8CD8();
  }

  sub_100009AA0();
}

void sub_1000D6030()
{
  uint64_t v3 = v0;
  sub_10000941C(&qword_1001D1078);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_10005A4F0();
  __chkstk_darwin(v5);
  sub_1000D8C84();
  uint64_t v6 = *(unsigned __int8 *)(v0 + 40);
  char v7 = *(_BYTE *)(v0 + 41);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = *(void *)(v3 + 56);
  sub_1000D8CF4();
  sub_100047294();
  sub_1000145E8();
  sub_10003EF98();
  uint64_t v10 = sub_1000D8D28();
  sub_1000D7A88(v10);
  sub_1000D8D18();
  uint64_t v12 = v3 + v11;
  if ((v7 & 1) != 0 || !v9)
  {
    sub_1000A14F8(v3 + v11, (uint64_t)v28);
    sub_1000D8DB4(v12);
    uint64_t v18 = sub_100009AC4();
    sub_1000D8D5C(v18);
    if (!v14)
    {
      sub_1000D7740(v2, *(void *)(v3 + 88), v8);
      uint64_t v16 = sub_1000D8D80();
      goto LABEL_7;
    }

    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }

  sub_1000A14F8(v3 + v11, (uint64_t)v28);
  sub_1000D8D38(v12);
  uint64_t v13 = sub_100009AC4();
  sub_1000D8C10(v13);
  if (v14) {
    goto LABEL_15;
  }
  uint64_t v15 = *(void *)(v3 + 88);
  sub_1000145E8();
  sub_1000D77D8(v1, v15, v27, v26, v6, v9, v8);
  sub_10001450C();
  uint64_t v16 = sub_1000D8CA4();
LABEL_7:
  v17(v16);
  if (sub_1000D8D0C())
  {
    sub_1000D8C44();
    sub_1000D8D54();
    sub_1000D8BD0();
    sub_1000D8BFC(v19, v20, v21, v22, (uint64_t (**)(void, void))&off_1001B7B30);
    sub_1000BCB14();
    sub_10001460C();
    uint64_t v23 = sub_1000D8D40();
    if (v23)
    {
      sub_1000D8D00(v23);
      uint64_t v24 = sub_1000D8C34();
      sub_1000D8CE8(v24, (uint64_t)&off_1001B7B30);
      sub_10004099C();
      sub_100010CA0();
    }

    else
    {
      sub_100010D00();
    }

    sub_1000D8CE0();
    sub_1000A23BC();
    sub_10001450C();
    sub_1000D8CD8();
    sub_10005A8E0();
    uint64_t v25 = sub_1000D8C64();
    sub_1000D8DE8(v25, (uint64_t)_swiftEmptyArrayStorage);
    sub_100009B3C();
    sub_1000110A8();
    sub_1000145E0();
    sub_1000D8C54();
  }

  else
  {
    sub_1000D8CE0();
    sub_1000A23BC();
    sub_10001450C();
    sub_1000D8CD8();
  }

  sub_100009AA0();
}

uint64_t sub_1000D6204()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000941C(&qword_1001D1078);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  char v7 = (char *)&v48 - v6;
  uint64_t v9 = v0 + 24;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v0 + 32);
  char v11 = *(_BYTE *)(v0 + 40);
  char v12 = *(_BYTE *)(v0 + 41);
  uint64_t v13 = (void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v49 = v8;
  uint64_t v50 = v13;
  uint64_t v15 = *(void *)(v1 + 56);
  uint64_t v16 = *(void *)(v1 + 64);
  uint64_t v51 = *(void *)(v1 + 72);
  swift_unknownObjectRetain(v51);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  uint64_t v52 = v16;
  swift_bridgeObjectRetain(v16);
  uint64_t v53 = v14;
  sub_1000D7C6C(v14);
  unsigned __int8 v17 = *(_BYTE *)(v1 + 80);
  uint64_t v18 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v19 = v1 + v18;
  if ((v12 & 1) == 0 && v15)
  {
    swift_beginAccess(v1 + v18, v55, 0LL, 0LL);
    sub_10004344C(v19, (uint64_t)v7);
    uint64_t v20 = type metadata accessor for OSSignpostID(0LL);
    uint64_t result = sub_100010708((uint64_t)v7, 1LL, v20);
    if ((_DWORD)result != 1)
    {
      uint64_t v22 = *(void *)(v1 + 88);
      uint64_t v23 = swift_bridgeObjectRetain(v15);
      uint64_t v24 = static os_signpost_type_t.end.getter(v23);
      uint64_t v25 = sub_100041438(v17);
      LOBYTE(v47) = v11;
      sub_1000A56E4(v24, v22, v25, v26, v27, (uint64_t)v7, v49, v10, v47, v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8LL))(v7, v20);
      goto LABEL_7;
    }

void sub_1000D6614()
{
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 41);
  uint64_t v37 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  sub_1000D8CF4();
  sub_100047294();
  sub_1000145E8();
  swift_bridgeObjectRetain(v6);
  uint64_t v7 = sub_1000D8D28();
  sub_1000D7E3C(v7);
  sub_1000D8D18();
  uint64_t v9 = v0 + v8;
  if ((v4 & 1) != 0 || !v5)
  {
    sub_1000A14F8(v0 + v8, (uint64_t)v38);
    sub_1000D8DB4(v9);
    uint64_t v22 = sub_100009AC4();
    uint64_t v23 = sub_1000D8D5C(v22);
    if (!v11)
    {
      uint64_t v12 = *(void *)(v0 + 88);
      static os_signpost_type_t.end.getter(v23);
      uint64_t v24 = sub_1000D8DD0();
      os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, v12, v24, v25, v26);
      uint64_t v20 = sub_1000D8D80();
      goto LABEL_7;
    }

    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }

  sub_1000A14F8(v0 + v8, (uint64_t)v38);
  sub_1000D8D38(v9);
  uint64_t v10 = sub_100009AC4();
  sub_1000D8C10(v10);
  if (v11) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v13 = sub_1000145E8();
  static os_signpost_type_t.end.getter(v13);
  sub_1000D8DD0();
  sub_1000D8CB8();
  sub_1000D8DBC();
  sub_1000A56E4(v14, v15, v16, v17, v18, v19, v37, v3, v36, v37);
  sub_10001450C();
  uint64_t v20 = sub_1000D8CA4();
LABEL_7:
  v21(v20);
  if (sub_1000D8D0C())
  {
    sub_1000D8C44();
    sub_1000D8D54();
    sub_1000D8BD0();
    sub_1000D8BFC(v27, v28, v29, v30, (uint64_t (**)(void, void))&off_1001B7B30);
    sub_1000BCB14();
    sub_10001460C();
    uint64_t v31 = sub_1000D8D40();
    if (v31)
    {
      sub_1000D8D00(v31);
      uint64_t v32 = sub_1000D8C34();
      sub_1000D8CE8(v32, (uint64_t)&off_1001B7B30);
      sub_10004099C();
      sub_100010CA0();
    }

    else
    {
      sub_100010D00();
    }

    swift_unknownObjectRelease();
    sub_1000110A8();
    sub_10001450C();
    sub_100009B3C();
    sub_10005A8E0();
    uint64_t v35 = *(void *)(v0 + 64);
    *(void *)(v0 + 24) = 0LL;
    *(void *)(v0 + 32) = 0LL;
    *(_BYTE *)(v0 + 4sub_1000AC280(v0, v1, 0) = 0;
    *(_BYTE *)(v0 + 4sub_1000A0380(v0, 1) = 1;
    *(void *)(v0 + 48) = 0LL;
    *(void *)(v0 + 5os_unfair_lock_lock(v0 + 6) = 0LL;
    sub_1000D8DE8(v35, (uint64_t)&_swiftEmptyArrayStorage);
    sub_100009B3C();
    sub_1000110A8();
    sub_1000145E0();
    sub_1000D8C54();
  }

  else
  {
    BOOL v33 = sub_1000D5C68();
    if (v33)
    {
      uint64_t v34 = static os_log_type_t.fault.getter(v33);
      os_log(_:dso:log:type:_:)( "ActivityMonitor is deallocated before ActivitySpan's end() method is invoked. Activity's bookkeeping could be inaccurate.",  121LL,  2LL,  &_mh_execute_header,  v12,  v34,  &_swiftEmptyArrayStorage);
    }

    sub_1000D8CE0();
    sub_1000A23BC();
    sub_10001450C();
    sub_1000D8CD8();
  }

  sub_100009AA0();
}

uint64_t sub_1000D688C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = *(os_unfair_lock_s **)(*(void *)(v4 + *(void *)(*(void *)v4 + 152LL)) + 16LL);
  swift_retain(*(void *)(v4 + *(void *)(*(void *)v4 + 152LL)));
  os_unfair_lock_lock(v9);
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(_BYTE *)(v4 + 4sub_1000AC280(v0, v1, 0) = a3;
  *(_BYTE *)(v4 + 4sub_1000A0380(v0, 1) = 0;
  *(void *)(v4 + 5os_unfair_lock_lock(v0 + 6) = a4;
  sub_10005A624();
  sub_1000110A8();
  os_unfair_lock_unlock(v9);
  return swift_release();
}

uint64_t sub_1000D6914()
{
  if ((*(_BYTE *)(v0 + 81) & 1) == 0) {
    sub_1000D7510();
  }
  uint64_t v1 = sub_1000D5094();
  swift_unknownObjectRelease();
  swift_errorRelease(*(void *)(v1 + *(void *)(*(void *)v1 + 472LL)));
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_1000D6974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = static os_log_type_t.error.getter(a1, a2);
  os_log(_:dso:log:type:_:)("LEAKED NETWORK SPAN: {{{", 24LL, 2LL, &_mh_execute_header, v4, v5, _swiftEmptyArrayStorage);
  uint64_t v6 = sub_1000D55E8();
  static os_log_type_t.error.getter(v6, v7);
  uint64_t v8 = sub_10000941C(&qword_1001D0C10);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v10 = (uint64_t *)(v3 + *(void *)(*(void *)v3 + 464LL));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  v63[0] = v12;
  v63[1] = v11;
  swift_unknownObjectRetain(v12);
  sub_10000941C(&qword_1001D5750);
  uint64_t v13 = String.init<A>(describing:)(v63);
  uint64_t v15 = v14;
  *(void *)(v9 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v16 = sub_100042FE8();
  *(void *)(v9 + 64) = v16;
  *(void *)(v9 + 32) = v13;
  *(void *)(v9 + 4sub_1000AC280(v0, v1, 0) = v15;
  uint64_t v17 = v4;
  os_log(_:dso:log:type:_:)("Network task: %s", v54);
  uint64_t v18 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v18, v19);
  uint64_t v62 = v8;
  uint64_t v20 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t ObjectType = swift_getObjectType(v12);
  uint64_t v55 = *(const char **)(v11 + 16);
  v63[0] = ((uint64_t (*)(uint64_t, uint64_t))v55)(ObjectType, v11);
  sub_10000941C(&qword_1001D4D18);
  uint64_t v22 = String.init<A>(describing:)(v63);
  *(void *)(v20 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v20 + 64) = v16;
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + 4sub_1000AC280(v0, v1, 0) = v23;
  os_log(_:dso:log:type:_:)("Response: %s", v55);
  swift_bridgeObjectRelease();
  uint64_t v24 = sub_1000D6E74();
  if ((v27 & 1) != 0)
  {
    static os_log_type_t.error.getter(v24, v25);
    uint64_t v42 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    v63[0] = ((uint64_t (*)(uint64_t, uint64_t))v56)(ObjectType, v11);
    uint64_t v43 = String.init<A>(describing:)(v63);
    unint64_t v41 = v16;
    *(void *)(v42 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v42 + 64) = v16;
    *(void *)(v42 + 32) = v43;
    *(void *)(v42 + 4sub_1000AC280(v0, v1, 0) = v44;
    os_log(_:dso:log:type:_:)("Unsupported response: %s", v56);
  }

  else
  {
    uint64_t v28 = v25;
    int v29 = v26;
    unint64_t v30 = HIDWORD(v26);
    int v57 = v24;
    static os_log_type_t.error.getter(v24, v25);
    uint64_t v31 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v31 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for Int;
    *(void *)(v31 + 64) = &protocol witness table for Int;
    *(void *)(v31 + 32) = v28;
    os_log(_:dso:log:type:_:)("Status: %d", v57);
    uint64_t v32 = swift_bridgeObjectRelease();
    static os_log_type_t.error.getter(v32, v33);
    uint64_t v34 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v34 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for UInt32;
    *(void *)(v34 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v34 + 32) = v30;
    os_log(_:dso:log:type:_:)("Uploaded: %llu bytes", v58);
    uint64_t v35 = swift_bridgeObjectRelease();
    static os_log_type_t.error.getter(v35, v36);
    uint64_t v37 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v37 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for UInt32;
    *(void *)(v37 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v37 + 32) = v29;
    os_log(_:dso:log:type:_:)("Downloaded: %llu bytes", v59);
    uint64_t v38 = swift_bridgeObjectRelease();
    static os_log_type_t.error.getter(v38, v39);
    uint64_t v40 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
    *(void *)(v40 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for Double;
    *(void *)(v40 + 64) = &protocol witness table for Double;
    *(double *)(v40 + 32) = v60;
    os_log(_:dso:log:type:_:)("Runtime: %f seconds", v60);
    unint64_t v41 = v16;
  }

  uint64_t v45 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v45, v46);
  uint64_t v47 = swift_allocObject(v62, 72LL, 7LL);
  *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  v63[0] = *(void *)(v3 + *(void *)(*(void *)v3 + 472LL));
  swift_errorRetain(v63[0]);
  sub_10000941C(&qword_1001D7B10);
  uint64_t v48 = String.init<A>(describing:)(v63);
  *(void *)(v47 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v47 + 64) = v41;
  *(void *)(v47 + 32) = v48;
  *(void *)(v47 + 4sub_1000AC280(v0, v1, 0) = v49;
  os_log(_:dso:log:type:_:)("Error: %s", v61);
  uint64_t v50 = swift_bridgeObjectRelease();
  uint64_t v52 = static os_log_type_t.error.getter(v50, v51);
  return os_log(_:dso:log:type:_:)("}}}", 3LL, 2LL, &_mh_execute_header, v17, v52, _swiftEmptyArrayStorage);
}

uint64_t sub_1000D6E74()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[*(void *)(*(void *)v0 + 464LL)];
  uint64_t v3 = v2[1];
  uint64_t ObjectType = swift_getObjectType(*v2);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  uint64_t v6 = v5(ObjectType, v3);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
    uint64_t v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      [v9 statusCode];
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
      if (!v10)
      {

        *(double *)&uint64_t result = 0.0;
        return result;
      }

      uint64_t v11 = v10;
      *(void *)&__int128 v36 = 0xD000000000000021LL;
      *((void *)&v36 + sub_1000A0380(v0, 1) = 0x800000010016DA70LL;
      AnyHashable.init<A>(_:)(&v36);
      sub_10000BEF0((uint64_t)v35, v11, &v36);
      sub_10000BD34((uint64_t)v35);
      if (v37) {
        swift_dynamicCast(&v31, &v36, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6LL);
      }
      else {
        sub_100019C1C((uint64_t)&v36, (uint64_t *)&unk_1001D32C0);
      }
      *(void *)&__int128 v36 = 0xD00000000000001DLL;
      *((void *)&v36 + sub_1000A0380(v0, 1) = 0x800000010016DA50LL;
      AnyHashable.init<A>(_:)(&v36);
      sub_10000BEF0((uint64_t)v35, v11, &v36);
      sub_10000BD34((uint64_t)v35);
      if (v37) {
        swift_dynamicCast(&v31, &v36, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6LL);
      }
      else {
        sub_100019C1C((uint64_t)&v36, (uint64_t *)&unk_1001D32C0);
      }
      double v31 = -2.31584178e77;
      unint64_t v32 = 0x800000010016DB10LL;
      AnyHashable.init<A>(_:)(&v31);
      sub_10000BEF0((uint64_t)v35, v11, &v36);
      sub_10000BD34((uint64_t)v35);
      if (v37)
      {
        if ((swift_dynamicCast(&v31, &v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
        {
          double v33 = v31;
          goto LABEL_29;
        }
      }

      else
      {
        sub_100019C1C((uint64_t)&v36, (uint64_t *)&unk_1001D32C0);
      }

      double v31 = -2.31584178e77;
      unint64_t v32 = 0x800000010016D8D0LL;
      AnyHashable.init<A>(_:)(&v31);
      sub_10000BEF0((uint64_t)v35, v11, &v36);
      sub_10000BD34((uint64_t)v35);
      if (v37)
      {
        char v28 = swift_dynamicCast(&v33, &v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
        if ((v28 & 1) != 0)
        {
LABEL_29:
          double v29 = v33;
          double v31 = -2.31584178e77;
          unint64_t v32 = 0x800000010016D950LL;
          AnyHashable.init<A>(_:)(&v31);
          sub_10000BEF0((uint64_t)v35, v11, &v36);
          swift_bridgeObjectRelease();

          sub_10000BD34((uint64_t)v35);
          if (v37)
          {
            if ((swift_dynamicCast(&v31, &v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
            {
              *(double *)&uint64_t result = v31 - v29;
              return result;
            }
          }

          else
          {
            sub_100019C1C((uint64_t)&v36, (uint64_t *)&unk_1001D32C0);
          }

          goto LABEL_36;
        }

        double v33 = 0.0;
        char v30 = v28 ^ 1;
      }

      else
      {
        sub_100019C1C((uint64_t)&v36, (uint64_t *)&unk_1001D32C0);
        double v33 = 0.0;
        char v30 = 1;
      }

      char v34 = v30;
      swift_bridgeObjectRelease();

LABEL_36:
      *(double *)&uint64_t result = 0.0;
      return result;
    }
  }

  uint64_t v12 = sub_10000941C(&qword_1001D0C10);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  v35[0] = v5(ObjectType, v3);
  sub_10000941C(&qword_1001D4D18);
  uint64_t v14 = String.init<A>(describing:)(v35);
  uint64_t v16 = v15;
  *(void *)(v13 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v17 = sub_100042FE8();
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 4sub_1000AC280(v0, v1, 0) = v16;
  sub_1000D688C((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s", 68LL, 2, v13);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)&v1[*(void *)(*(void *)v1 + 152LL)];
  uint64_t v19 = *(os_unfair_lock_s **)(v18 + 16);
  swift_retain(v1);
  swift_retain(v18);
  os_unfair_lock_lock(v19);
  if ((v1[81] & 1) == 0)
  {
    uint64_t v20 = *(void *)(*(void *)v1 + 480LL);
    uint64_t v21 = *(void *)&v1[v20];
    if (v21)
    {
      uint64_t v22 = swift_unknownObjectRetain(*(void *)&v1[v20]);
      if (nw_activity_is_activated(v22))
      {
        if (*(void *)&v1[*(void *)(*(void *)v1 + 472LL)]) {
          uint64_t v23 = 3LL;
        }
        else {
          uint64_t v23 = 2LL;
        }
        nw_activity_complete_with_reason(v21, v23);
      }

      else
      {
        static os_log_type_t.info.getter();
        uint64_t v25 = swift_allocObject(v12, 72LL, 7LL);
        *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
        v35[0] = v21;
        swift_unknownObjectRetain(v21);
        sub_10000941C(&qword_1001D5738);
        uint64_t v26 = String.init<A>(describing:)(v35);
        *(void *)(v25 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
        *(void *)(v25 + 64) = v17;
        *(void *)(v25 + 32) = v26;
        *(void *)(v25 + 4sub_1000AC280(v0, v1, 0) = v27;
        os_log(_:dso:log:type:_:)("Ending NetworkSpan before nw_activity (%s) was activated", (const char *)1);
        swift_bridgeObjectRelease();
      }

      swift_unknownObjectRelease();
    }

    sub_1000D6204();
  }

  os_unfair_lock_unlock(v19);
  swift_release();
  swift_release();
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t sub_1000D743C(uint64_t a1, unint64_t a2, double a3)
{
  int v3 = a2;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = sub_10000941C(&qword_1001D0C10);
  uint64_t v8 = swift_allocObject(v7, 192LL, 7LL);
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D4A0;
  *(void *)(v8 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for Int;
  *(void *)(v8 + 64) = &protocol witness table for Int;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for UInt32;
  *(void *)(v8 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v8 + 72) = v3;
  *(void *)(v8 + 13os_unfair_lock_lock(v0 + 6) = &type metadata for UInt32;
  *(void *)(v8 + 144) = &protocol witness table for UInt32;
  *(_DWORD *)(v8 + 112) = v6;
  *(void *)(v8 + 17os_unfair_lock_lock(v0 + 6) = &type metadata for Double;
  *(void *)(v8 + 184) = &protocol witness table for Double;
  *(double *)(v8 + 152) = a3;
  sub_1000D688C( (uint64_t)"statusCode=%{signpost.description:attribute,public}d, download=%{signpost.description:attribute}lu, upload= %{signpost.description:attribute}lu, runtime=%{signpost.description:attribute}f",  186LL,  2,  v8);
  return swift_bridgeObjectRelease();
}

void sub_1000D7510()
{
  if ((v0[81] & 1) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = sub_1000D6E74();
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = sub_10000941C(&qword_1001D0C10);
      uint64_t v7 = sub_10005A72C(v6);
      *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
      uint64_t v8 = &v0[*(void *)(*(void *)v0 + 464LL)];
      uint64_t v9 = v8[1];
      uint64_t ObjectType = swift_getObjectType(*v8);
      (*(void (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
      uint64_t v11 = sub_10000941C(&qword_1001D4D18);
      uint64_t v12 = sub_1000D8D48(v11);
      uint64_t v14 = v13;
      *(void *)(v7 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
      *(void *)(v7 + 64) = sub_100042FE8();
      *(void *)(v7 + 32) = v12;
      *(void *)(v7 + 4sub_1000AC280(v0, v1, 0) = v14;
      sub_1000D688C((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s", 68LL, 2, v7);
      sub_1000110A8();
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v0 + 568LL))(v3, v4, *(double *)&v2);
    }

    uint64_t v15 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152LL)] + 16LL);
    swift_retain(v1);
    sub_10004EC38();
    os_unfair_lock_lock(v15);
    if ((v1[81] & 1) == 0)
    {
      uint64_t v16 = *(void *)(*(void *)v1 + 480LL);
      uint64_t v17 = *(void *)&v1[v16];
      if (v17)
      {
        uint64_t v18 = swift_unknownObjectRetain(*(void *)&v1[v16]);
        if (nw_activity_is_activated(v18))
        {
          if (*(void *)&v1[*(void *)(*(void *)v1 + 472LL)]) {
            uint64_t v19 = 3LL;
          }
          else {
            uint64_t v19 = 2LL;
          }
          nw_activity_complete_with_reason(v17, v19);
        }

        else
        {
          static os_log_type_t.info.getter();
          uint64_t v20 = sub_10000941C(&qword_1001D0C10);
          uint64_t v21 = sub_10005A72C(v20);
          *(_OWORD *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
          swift_unknownObjectRetain(v17);
          uint64_t v22 = sub_10000941C(&qword_1001D5738);
          uint64_t v23 = sub_1000D8D48(v22);
          uint64_t v25 = v24;
          *(void *)(v21 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
          *(void *)(v21 + 64) = sub_100042FE8();
          *(void *)(v21 + 32) = v23;
          *(void *)(v21 + 4sub_1000AC280(v0, v1, 0) = v25;
          os_log(_:dso:log:type:_:)("Ending NetworkSpan before nw_activity (%s) was activated", v26);
          swift_bridgeObjectRelease();
        }

        sub_100010CA0();
      }

      sub_1000D6204();
    }

    os_unfair_lock_unlock(v15);
    sub_100010D00();
    swift_release();
  }

uint64_t sub_1000D7738()
{
  return 45LL;
}

void sub_1000D7740(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

uint64_t sub_1000D7788(uint64_t a1)
{
  return os_signpost(_:dso:log:name:signpostID:)(a1, &_mh_execute_header, v2, "cacheAccess", 11LL, 2LL, v1);
}

void sub_1000D77D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  __asm { BR              X10 }

void sub_1000D783C(uint64_t a1)
{
  LOBYTE(v7) = v6;
  sub_1000A56E4(a1, v4, (uint64_t)"cacheAccess", 11LL, 2LL, v3, v2, v1, v7, v5);
}

void sub_1000D78A4(uint64_t a1)
{
  uint64_t v2 = sub_1000D800C(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(v1 + 88);
    uint64_t v5 = static os_log_type_t.debug.getter();
    uint64_t v6 = sub_10000941C(&qword_1001D0C10);
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D580;
    uint64_t v8 = aDiskwrite[0];
    uint64_t v9 = aDiskwrite[1];
    *(void *)(v7 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v10 = sub_100042FE8();
    *(void *)(v7 + 64) = v10;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 4sub_1000AC280(v0, v1, 0) = v9;
    unint64_t v11 = sub_1000A36DC();
    swift_bridgeObjectRetain(v9);
    uint64_t v12 = Dictionary.description.getter(v3, &type metadata for String, v11);
    *(void *)(v7 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v7 + 104) = v10;
    *(void *)(v7 + 72) = v12;
    *(void *)(v7 + 8sub_1000AC280(v0, v1, 0) = v13;
    os_log(_:dso:log:type:_:)( "Reporting to CA event: '%s'\n\twith data: %@",  42LL,  2LL,  &_mh_execute_header,  v4,  v5,  v7);
    swift_bridgeObjectRelease();
    uint64_t v15 = aDiskwrite[0];
    uint64_t v14 = (void *)aDiskwrite[1];
    swift_bridgeObjectRetain_n(off_1001D6BD0, 2LL);
    swift_bridgeObjectRetain(v14);
    v16._uint64_t countAndFlagsBits = 46LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    swift_bridgeObjectRetain(v14);
    v17._uint64_t countAndFlagsBits = v15;
    v17._object = v14;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent(v18, isa);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

void sub_1000D7A88(uint64_t a1)
{
  uint64_t v2 = sub_1000D814C(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(v1 + 88);
    uint64_t v5 = static os_log_type_t.debug.getter(v2);
    uint64_t v6 = sub_10000941C(&qword_1001D0C10);
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D580;
    uint64_t v8 = aQuerycache_2[0];
    uint64_t v9 = aQuerycache_2[1];
    *(void *)(v7 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v10 = sub_100042FE8();
    *(void *)(v7 + 64) = v10;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 4sub_1000AC280(v0, v1, 0) = v9;
    unint64_t v11 = sub_1000A36DC();
    swift_bridgeObjectRetain(v9);
    uint64_t v12 = Dictionary.description.getter(v3, &type metadata for String, v11);
    *(void *)(v7 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v7 + 104) = v10;
    *(void *)(v7 + 72) = v12;
    *(void *)(v7 + 8sub_1000AC280(v0, v1, 0) = v13;
    os_log(_:dso:log:type:_:)( "Reporting to CA event: '%s'\n\twith data: %@",  42LL,  2LL,  &_mh_execute_header,  v4,  v5,  v7);
    swift_bridgeObjectRelease();
    uint64_t v15 = aQuerycache_2[0];
    uint64_t v14 = (void *)aQuerycache_2[1];
    swift_bridgeObjectRetain_n(off_1001D5DA8, 2LL);
    swift_bridgeObjectRetain(v14);
    v16._uint64_t countAndFlagsBits = 46LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    swift_bridgeObjectRetain(v14);
    v17._uint64_t countAndFlagsBits = v15;
    v17._object = v14;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent(v18, isa);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

void sub_1000D7C6C(uint64_t a1)
{
  uint64_t v2 = sub_1000D828C(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(v1 + 88);
    uint64_t v5 = static os_log_type_t.debug.getter();
    uint64_t v6 = sub_10000941C(&qword_1001D0C10);
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v7 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v8 = sub_100042FE8();
    *(void *)(v7 + 64) = v8;
    strcpy((char *)(v7 + 32), "networkRequest");
    *(_BYTE *)(v7 + 47) = -18;
    unint64_t v9 = sub_1000A36DC();
    uint64_t v10 = Dictionary.description.getter(v3, &type metadata for String, v9);
    *(void *)(v7 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v7 + 104) = v8;
    *(void *)(v7 + 72) = v10;
    *(void *)(v7 + 8sub_1000AC280(v0, v1, 0) = v11;
    os_log(_:dso:log:type:_:)( "Reporting to CA event: '%s'\n\twith data: %@",  42LL,  2LL,  &_mh_execute_header,  v4,  v5,  v7);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 46LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0x526B726F7774656ELL;
    v13._object = (void *)0xEE00747365757165LL;
    String.append(_:)(v13);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent(v14, isa);
    swift_bridgeObjectRelease();
  }

void sub_1000D7E3C(uint64_t a1)
{
  uint64_t v2 = sub_1000D83D4(a1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void *)(v1 + 88);
    uint64_t v5 = static os_log_type_t.debug.getter();
    uint64_t v6 = sub_10000941C(&qword_1001D0C10);
    uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
    *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015D580;
    *(void *)(v7 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    unint64_t v8 = sub_100042FE8();
    *(void *)(v7 + 64) = v8;
    strcpy((char *)(v7 + 32), "resourceAccess");
    *(_BYTE *)(v7 + 47) = -18;
    unint64_t v9 = sub_1000A36DC();
    uint64_t v10 = Dictionary.description.getter(v3, &type metadata for String, v9);
    *(void *)(v7 + 9os_unfair_lock_lock(v0 + 6) = &type metadata for String;
    *(void *)(v7 + 104) = v8;
    *(void *)(v7 + 72) = v10;
    *(void *)(v7 + 8sub_1000AC280(v0, v1, 0) = v11;
    os_log(_:dso:log:type:_:)( "Reporting to CA event: '%s'\n\twith data: %@",  42LL,  2LL,  &_mh_execute_header,  v4,  v5,  v7);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 46LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0x656372756F736572LL;
    v13._object = (void *)0xEE00737365636341LL;
    String.append(_:)(v13);
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent(v14, isa);
    swift_bridgeObjectRelease();
  }

uint64_t sub_1000D800C(uint64_t a1)
{
  uint64_t v2 = sub_1000D8B5C( (uint64_t)&unk_1001B81E0,  (uint64_t)&unk_1001B81E0,  (uint64_t)&protocol descriptor for __CoreAnalyticsActivity);
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_1000D5D44();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000D814C(uint64_t a1)
{
  uint64_t v2 = sub_10008064C( (uint64_t)&type metadata for QueryCache.Activity,  (uint64_t)&type metadata for QueryCache.Activity,  (uint64_t)&protocol descriptor for __CoreAnalyticsActivity);
  uint64_t v4 = 0LL;
  if (v2 && a1)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = v7(v5, v6);
    uint64_t v10 = v9;
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(a1);
    sub_10000F79C((uint64_t)isa, v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    uint64_t v14 = v13;
    sub_1000D5D44();
    Class v15 = Double._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native(a1);
    sub_10000F79C((uint64_t)v15, v12, v14);
    uint64_t v4 = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v4;
}

uint64_t sub_1000D828C(uint64_t a1)
{
  uint64_t v2 = sub_1000D8B5C( (uint64_t)&type metadata for ResourceNetworkActivity,  (uint64_t)&type metadata for ResourceNetworkActivity,  (uint64_t)&protocol descriptor for __CoreAnalyticsActivity);
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_1000D5D44();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000D83D4(uint64_t a1)
{
  uint64_t v2 = sub_1000D8B5C( (uint64_t)&type metadata for ResourceAccessActivity,  (uint64_t)&type metadata for ResourceAccessActivity,  (uint64_t)&protocol descriptor for __CoreAnalyticsActivity);
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_1000D5D44();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10000F79C((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

void sub_1000D851C()
{
  qword_1001EDEA8 = (uint64_t)&off_1001B0428;
}

uint64_t sub_1000D8530()
{
  return 0x526B726F7774656ELL;
}

uint64_t sub_1000D8554@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = sub_1000D7738();
  *a1 = result;
  return result;
}

uint64_t sub_1000D857C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000A56CC(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1000D85A4()
{
  uint64_t v1 = v0 + qword_1001EDEB0;
  uint64_t v2 = type metadata accessor for Client(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
}

void sub_1000D85E0()
{
  if ((*(_BYTE *)(v0 + 81) & 1) == 0) {
    sub_1000D7510();
  }
  uint64_t v1 = sub_1000D6914() + qword_1001EDEB0;
  uint64_t v2 = type metadata accessor for Client(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_100009A90();
}

uint64_t sub_1000D8634()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for ResourceAccessNetworkSpan(uint64_t a1)
{
  uint64_t result = qword_1001D7818;
  if (!qword_1001D7818) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ResourceAccessNetworkSpan);
  }
  return result;
}

uint64_t sub_1000D868C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Client(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\t";
    uint64_t result = swift_initClassMetadata2(a1, 256LL, 2LL, v4, a1 + 576);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000D8700(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = static os_log_type_t.error.getter(a1, a2);
  uint64_t v5 = os_log(_:dso:log:type:_:)( "LEAKED RESOURCE NETWORK SPAN: {{{",  33LL,  2LL,  &_mh_execute_header,  v3,  v4,  _swiftEmptyArrayStorage);
  uint64_t v7 = sub_1000D6974(v5, v6);
  static os_log_type_t.error.getter(v7, v8);
  uint64_t v9 = sub_10000941C(&qword_1001D0C10);
  uint64_t v10 = sub_10005A72C(v9);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v11 = Client.name.getter(v10);
  uint64_t v13 = v12;
  *(void *)(v10 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  unint64_t v14 = sub_100042FE8();
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 4sub_1000AC280(v0, v1, 0) = v13;
  sub_1000D8DA0();
  os_log(_:dso:log:type:_:)(v15);
  uint64_t v16 = swift_bridgeObjectRelease();
  static os_log_type_t.error.getter(v16, v17);
  uint64_t v18 = sub_10005A72C(v9);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10015C7F0;
  uint64_t v19 = Client.name.getter(v18);
  *(void *)(v18 + 5os_unfair_lock_lock(v0 + 6) = &type metadata for String;
  *(void *)(v18 + 64) = v14;
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 4sub_1000AC280(v0, v1, 0) = v20;
  sub_1000D8DA0();
  os_log(_:dso:log:type:_:)(v21);
  uint64_t v22 = sub_1000110E0();
  uint64_t v24 = static os_log_type_t.error.getter(v22, v23);
  return os_log(_:dso:log:type:_:)("}}}", 3LL, 2LL, &_mh_execute_header, v3, v24, _swiftEmptyArrayStorage);
}

uint64_t sub_1000D886C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6 = sub_1000A3574(a1, a2, a3);
  uint64_t v7 = Client.type.getter(v6);
  id v8 = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:ClientType.rawValue.getter(v7)];
  swift_isUniquelyReferenced_nonNull_native(v6);
  sub_10000F79C((uint64_t)v8, 0x726574706F6461LL, 0xE700000000000000LL);
  swift_bridgeObjectRelease();
  sub_1000D5B28(v6);
  sub_10001460C();
  return sub_1000D743C(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for ResourceNetworkActivity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xD3) {
    return ((uint64_t (*)(void))((char *)&loc_1000D8998 + 4 * byte_100163B3D[v4]))();
  }
  *a1 = a2 + 44;
  return ((uint64_t (*)(void))((char *)sub_1000D89CC + 4 * byte_100163B38[v4]))();
}

uint64_t sub_1000D89CC(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000D89D4(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D89DCLL);
  }
  return result;
}

uint64_t sub_1000D89E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D89F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 44;
  return result;
}

uint64_t sub_1000D89F4(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000D89FC(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResourceNetworkActivity()
{
  return &type metadata for ResourceNetworkActivity;
}

unint64_t sub_1000D8A1C()
{
  unint64_t result = qword_1001D7AB0;
  if (!qword_1001D7AB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163BA8, &type metadata for ResourceNetworkActivity);
    atomic_store(result, (unint64_t *)&qword_1001D7AB0);
  }

  return result;
}

unint64_t sub_1000D8A58(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000D8A84();
  unint64_t result = sub_1000D8AC0();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1000D8A84()
{
  unint64_t result = qword_1001D7AB8;
  if (!qword_1001D7AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163C08, &type metadata for ResourceNetworkActivity);
    atomic_store(result, (unint64_t *)&qword_1001D7AB8);
  }

  return result;
}

unint64_t sub_1000D8AC0()
{
  unint64_t result = qword_1001D7AC0;
  if (!qword_1001D7AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163BD0, &type metadata for ResourceNetworkActivity);
    atomic_store(result, (unint64_t *)&qword_1001D7AC0);
  }

  return result;
}

unint64_t sub_1000D8AFC(uint64_t a1)
{
  unint64_t result = sub_1000D8B20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000D8B20()
{
  unint64_t result = qword_1001D7B08;
  if (!qword_1001D7B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163C68, &type metadata for ResourceNetworkActivity);
    atomic_store(result, (unint64_t *)&qword_1001D7B08);
  }

  return result;
}

uint64_t sub_1000D8B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_conformsToProtocol2(a2, a3);
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

void sub_1000D8B94(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = sub_1000094A0(a2);
    atomic_store(swift_getWitnessTable(a3, v5), a1);
  }

  sub_100009A90();
}

void sub_1000D8BD0()
{
}

uint64_t sub_1000D8BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v6, v4, v5);
}

uint64_t sub_1000D8BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(void, void))
{
  return sub_100081100(v8, v6, v7, v5, a5);
}

uint64_t sub_1000D8C10(uint64_t a1)
{
  return sub_100010708(v1, 1LL, a1);
}

uint64_t sub_1000D8C34()
{
  return swift_retain(v0);
}

uint64_t sub_1000D8C44()
{
  *(void *)(v1 - 112) = v0;
  return swift_retain(v0);
}

uint64_t sub_1000D8C54()
{
  *(_BYTE *)(v0 + 8sub_1000A0380(v0, 1) = v1;
  return swift_weakAssign(v2, 0LL);
}

uint64_t sub_1000D8C64()
{
  uint64_t result = *(void *)(v0 + 64);
  *(void *)uint64_t v1 = 0LL;
  *(void *)(v1 + 8) = 0LL;
  *(_BYTE *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(_BYTE *)(v0 + 4sub_1000A0380(v0, 1) = 1;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  return result;
}

void sub_1000D8C84()
{
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v1 - 152) = *(void *)(v0 + 32);
  *(void *)(v1 - 144) = v2;
}

uint64_t sub_1000D8CA4()
{
  return v0;
}

uint64_t sub_1000D8CB8()
{
  return v0;
}

uint64_t sub_1000D8CD8()
{
  return swift_bridgeObjectRelease(*(void *)(v0 - 120));
}

uint64_t sub_1000D8CE0()
{
  return swift_unknownObjectRelease(*(void *)(v0 - 136));
}

uint64_t sub_1000D8CE8(uint64_t a1, uint64_t a2)
{
  return v2(a1, a2, v4, v3);
}

uint64_t sub_1000D8CF4()
{
  uint64_t v2 = *(void *)(v0 + 72);
  *(void *)(v1 - 13os_unfair_lock_lock(v0 + 6) = v2;
  return swift_unknownObjectRetain(v2);
}

uint64_t sub_1000D8D00(uint64_t a1)
{
  return swift_getObjectType(a1);
}

uint64_t sub_1000D8D0C()
{
  return swift_weakLoadStrong(v0 + 16);
}

  ;
}

uint64_t sub_1000D8D28()
{
  *(void *)(v1 - 12sub_1000AC280(v0, v1, 0) = v0;
  return v0;
}

uint64_t sub_1000D8D38(uint64_t a1)
{
  return sub_10004344C(a1, v1);
}

uint64_t sub_1000D8D40()
{
  return swift_unknownObjectWeakLoadStrong(v0 + 16);
}

uint64_t sub_1000D8D48(uint64_t a1, ...)
{
  return String.init<A>(describing:)(va);
}

uint64_t sub_1000D8D54()
{
  return String.init<A>(describing:)(v0 - 112);
}

uint64_t sub_1000D8D5C(uint64_t a1)
{
  return sub_100010708(v1, 1LL, a1);
}

uint64_t sub_1000D8D80()
{
  return v0;
}

uint64_t sub_1000D8D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return os_log(_:dso:log:type:_:)(a1, a2, 2LL, a4, v7, a6, a7);
}

  ;
}

uint64_t sub_1000D8DB4(uint64_t a1)
{
  return sub_10004344C(a1, v1);
}

  ;
}

uint64_t sub_1000D8DD0()
{
  return sub_100041438(v0);
}

uint64_t sub_1000D8DDC()
{
  return sub_1000C67B8(v0);
}

uint64_t sub_1000D8DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v2 + 64) = a2;
  *(void *)(v2 + 72) = 0LL;
  return swift_bridgeObjectRelease(a1);
}

uint64_t NSFileManager.feedbackLoggerCacheDirectoryURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000941C(&qword_1001D5ED0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_10005A18C();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v26[-v12];
  id v27 = 0LL;
  id v14 = [v2 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:0 error:&v27];
  id v15 = v27;
  if (!v14)
  {
    id v22 = v27;
    uint64_t v23 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v24);
    swift_errorRelease(v23);
    sub_10003B954((uint64_t)v6, 1LL);
    goto LABEL_5;
  }

  uint64_t v16 = v14;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);
  id v17 = v15;

  uint64_t v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32);
  v18(v6, v11, v7);
  sub_10003B954((uint64_t)v6, 0LL);
  if (sub_100010708((uint64_t)v6, 1LL, v7) == 1)
  {
LABEL_5:
    sub_100010AE8((uint64_t)v6);
    uint64_t v21 = 1LL;
    return sub_10003B954(a1, v21);
  }

  v18(v13, v6, v7);
  uint64_t v19 = URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x8000000100172540LL, 1LL);
  URL.standardizedFileURL.getter(v19);
  uint64_t v20 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v20(v11, v7);
  v20(v13, v7);
  uint64_t v21 = 0LL;
  return sub_10003B954(a1, v21);
}

void NSFileManager.forceMoveItem(at:to:)(uint64_t a1)
{
  uint64_t v3 = v1;
  URL.path.getter(a1);
  String._bridgeToObjectiveC()();
  sub_1000D959C();
  unsigned int v4 = sub_1000D958C();

  if (v4)
  {
    URL.path.getter(v5);
    String._bridgeToObjectiveC()();
    sub_1000D959C();
    unsigned int v6 = sub_1000D958C();

    if (v6)
    {
      URL._bridgeToObjectiveC()(v7);
      uint64_t v9 = v8;
      id v22 = 0LL;
      unsigned int v10 = [v3 removeItemAtURL:v8 error:&v22];

      id v11 = v22;
      if (!v10)
      {
LABEL_7:
        id v20 = v11;
        _convertNSErrorToError(_:)(v11);

        swift_willThrow(v21);
        return;
      }

      id v12 = v22;
    }

    URL._bridgeToObjectiveC()(v7);
    id v14 = v13;
    URL._bridgeToObjectiveC()(v15);
    id v17 = v16;
    id v22 = 0LL;
    unsigned int v18 = [v3 moveItemAtURL:v14 toURL:v16 error:&v22];

    id v11 = v22;
    if (v18)
    {
      id v19 = v22;
      return;
    }

    goto LABEL_7;
  }

uint64_t *sub_1000D918C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }

  return a1;
}

void sub_1000D9218(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

uint64_t sub_1000D925C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1000D92BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1000D9324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000D9380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000D93E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D93F0);
}

uint64_t sub_1000D93F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10005A18C();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84LL) == (_DWORD)a2) {
    return sub_100010708(a1, a2, v6);
  }
  unint64_t v8 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1000D9464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D9470);
}

uint64_t sub_1000D9470(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10005A18C();
  if (*(_DWORD *)(*(void *)(result - 8) + 84LL) == a3) {
    return sub_100009654(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FeedbackFile(uint64_t a1)
{
  uint64_t result = qword_1001D7B70;
  if (!qword_1001D7B70) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeedbackFile);
  }
  return result;
}

uint64_t sub_1000D9518(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

id sub_1000D958C()
{
  return objc_msgSend(v0, *(SEL *)(v2 + 200), v1);
}

uint64_t sub_1000D959C()
{
  return swift_bridgeObjectRelease(v0);
}

void sub_1000D95A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000108D8((_OWORD *)a1, v5);
    sub_10000F4C0(v5, a2, a3);
    sub_1000325E4();
  }

  else
  {
    sub_1000C00CC(a1, (uint64_t *)&unk_1001D32C0);
    sub_10007FD04(a2, v5);
    sub_1000325E4();
    sub_1000C00CC((uint64_t)v5, (uint64_t *)&unk_1001D32C0);
  }

  sub_100014A40();
}

void sub_1000D9624()
{
  uint64_t v7 = v6 - v5;
  if (sub_100010708(v1, 1LL, v8) == 1)
  {
    sub_1000C00CC(v1, &qword_1001D4680);
    sub_10007FFC4(v2);

    sub_1000C00CC(v2, &qword_1001D4680);
  }

  else
  {
    sub_10006D028(v1, v7);
    sub_10000F5DC();
  }

  sub_100019F1C();
}

void sub_1000D96F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D9718( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t), void (*a6)(char *, uint64_t, uint64_t), void (*a7)(uint64_t))
{
  id v22 = a6;
  sub_10000941C(a4);
  sub_100009B94();
  __chkstk_darwin(v14);
  uint64_t v15 = sub_1000DE464();
  uint64_t v16 = a5(v15);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v21 - v18;
  if (sub_100010708(a1, 1LL, v16) == 1)
  {
    sub_1000C00CC(a1, a4);
    uint64_t v20 = sub_1000DE550();
    a7(v20);
    sub_1000325E4();
    sub_1000C00CC(v7, a4);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v19, a1, v16);
    v22(v19, a2, a3);
    sub_1000325E4();
  }

  sub_100009AA0();
}

void *sub_1000D981C(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t);
  uint64_t v20 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
  uint64_t v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v17 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain(a3);
  uint64_t v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    v20(&v18, v7);
    if (v3) {
      break;
    }
    uint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_1000313E4(0, v8[2] + 1LL, 1, (uint64_t)v8);
        uint64_t v8 = v14;
      }

      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000313E4(v11 > 1, v12 + 1, 1, (uint64_t)v8);
        uint64_t v8 = v15;
      }

      uint64_t v8[2] = v12 + 1;
      uint64_t v13 = &v8[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
    }

    v7 += v17;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000D9978(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10000941C((uint64_t *)&unk_1001D47C0);
  sub_100009B94();
  __chkstk_darwin(v4);
  sub_100009AEC();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for URLComponents(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  sub_10005F878();
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v28 - v14;
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0LL);
  if (sub_100010708(v7, 1LL, v8) == 1)
  {
    sub_1000C00CC(v7, (uint64_t *)&unk_1001D47C0);
    unint64_t v16 = sub_100059E10();
    sub_100010EA0((uint64_t)&type metadata for ParsecURLRequestBuilder.URLError, v16);
    *uint64_t v17 = 1;
    sub_1000C5DB8();
    uint64_t v18 = type metadata accessor for URL(0LL);
    sub_1000A1498(v18);
  }

  else
  {
    uint64_t v19 = sub_10005A3B0((uint64_t)v15, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 32));
    uint64_t v20 = URLComponents.percentEncodedQuery.getter(v19);
    if (v21)
    {
      void v29[2] = v20;
      v29[3] = v21;
      v29[0] = 43LL;
      v29[1] = 0xE100000000000000LL;
      v28[0] = 3158565LL;
      v28[1] = 0xE300000000000000LL;
      unint64_t v22 = sub_1000106CC();
      uint64_t v23 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( v29,  v28,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v22,  v22,  v22);
      uint64_t v30 = v2;
      uint64_t v25 = v24;
      swift_bridgeObjectRelease();
      uint64_t v2 = v30;
      URLComponents.percentEncodedQuery.setter(v23, v25);
    }

    sub_10005A3B0(v12, (uint64_t)v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16));
    uint64_t v7 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    sub_1000DA5D8(v12);
    uint64_t v26 = type metadata accessor for URL(0LL);
    sub_1000A1498(v26);
    sub_1000DE4D4(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  }

  return v7;
}

uint64_t sub_1000D9BA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = v1;
  uint64_t v59 = a1;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  sub_100009AEC();
  uint64_t v55 = v8 - v7;
  sub_10000941C(&qword_1001D5ED0);
  sub_100009B94();
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1000DE464();
  uint64_t v11 = type metadata accessor for URL(v10);
  uint64_t v61 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  sub_10005F878();
  uint64_t v58 = v12 - v13;
  __chkstk_darwin(v14);
  uint64_t v60 = (uint64_t)&v54 - v15;
  uint64_t v16 = type metadata accessor for URLComponents(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  sub_100010FCC();
  uint64_t v18 = (uint64_t *)(v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems);
  sub_1000A14F8((uint64_t)v18, (uint64_t)v63);
  uint64_t v19 = *v18;
  swift_bridgeObjectRetain_n(v19, 2LL);
  uint64_t v20 = sub_1000DBC80(v19);
  sub_100009B3C();
  v62[0] = (uint64_t)v20;
  sub_1000DBA18(v62);
  if (v2)
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  else
  {
    sub_100009B3C();
    uint64_t v21 = v62[0];
    uint64_t v64 = v17;
    unint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
    uint64_t v23 = v16;
    v22(v3, v5 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_urlComponents, v16);
    uint64_t v24 = sub_1000DA6B8(v21);
    uint64_t v26 = v25;
    swift_release();
    uint64_t v27 = URLComponents.percentEncodedQuery.setter(v24, v26);
    URLComponents.url.getter(v27);
    if (sub_100010708(v4, 1LL, v11) == 1)
    {
      sub_1000C00CC(v4, &qword_1001D5ED0);
      unint64_t v28 = sub_100059E10();
      sub_100010EA0((uint64_t)&type metadata for ParsecURLRequestBuilder.URLError, v28);
      *double v29 = 1;
      sub_1000C5DB8();
      uint64_t v30 = v23;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v3, v30);
    }

    uint64_t v31 = sub_10005A3B0(v60, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 32));
    uint64_t v32 = URL.scheme.getter(v31);
    uint64_t v30 = v23;
    uint64_t v34 = v64;
    if (!v33)
    {
LABEL_15:
      uint64_t v40 = v55;
      uint64_t v41 = Logger.init()(v32);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v44 = static os_log_type_t.error.getter(v42, v43);
      if (os_log_type_enabled(v42, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v44, "Scheme for url is neither http nor https.", v45, 2u);
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v40, v57);
      unint64_t v46 = sub_100059E10();
      sub_100010EA0((uint64_t)&type metadata for ParsecURLRequestBuilder.URLError, v46);
      *uint64_t v47 = 0;
      sub_1000C5DB8();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v3, v30);
    }

    uint64_t v35 = v32;
    uint64_t v36 = v33;
    BOOL v37 = v32 == 1886680168 && v33 == 0xE400000000000000LL;
    if (v37
      || (sub_1000DE480(1886680168LL, 0xE400000000000000LL) & 1) != 0
      || (v35 == 0x7370747468LL ? (BOOL v38 = v36 == 0xE500000000000000LL) : (BOOL v38 = 0), v38))
    {
      sub_100009B3C();
    }

    else
    {
      char v39 = sub_1000DE480(0x7370747468LL, 0xE500000000000000LL);
      uint64_t v32 = sub_100009B3C();
      if ((v39 & 1) == 0) {
        goto LABEL_15;
      }
    }

    uint64_t v49 = v61;
    uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    uint64_t v51 = v58;
    uint64_t v57 = v30;
    sub_10005A3B0(v58, v60, v50);
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v51, 0LL, 60.0);
    uint64_t v52 = (void *)(v5 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader);
    sub_1000A14F8(v5 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader, (uint64_t)v62);
    uint64_t v53 = swift_bridgeObjectRetain(*v52);
    URLRequest.allHTTPHeaderFields.setter(v53);
    sub_1000DE4D4(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v3, v57);
  }

  return result;
}

void sub_1000D9FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = v11 - v10;
  sub_10005A624();
  uint64_t v13 = sub_1000DE550();
  URLQueryItem.init(name:value:)(v13, v14, a3, a4);
  uint64_t v15 = sub_1000DE32C();
  sub_100009654(v12, 0LL, 1LL, v15);
  sub_100010BE4(v4 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems, (uint64_t)v16, 33LL);
  sub_1000D9718( v12,  a1,  a2,  (uint64_t *)&unk_1001D3180,  (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem,  (void (*)(char *, uint64_t, uint64_t))sub_10000F560,  (void (*)(uint64_t))sub_10007FDE0);
  swift_endAccess(v16);
  sub_10002FBC0();
}

void sub_1000DA09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = v10 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = &v27[-v14 - 8];
  uint64_t v16 = v5 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems;
  sub_100010BE4(v5 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems, (uint64_t)v27, 32LL);
  uint64_t v17 = *(void *)v16;
  if (*(void *)(*(void *)v16 + 16LL))
  {
    sub_10005A624();
    unint64_t v18 = sub_10000EC64(v6, v4);
    if ((v19 & 1) != 0)
    {
      unint64_t v20 = v18;
      uint64_t v21 = *(void *)(v17 + 56);
      uint64_t v22 = sub_1000DE32C();
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))( v15,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v20,  v22);
      uint64_t v23 = (uint64_t)v15;
      uint64_t v24 = 0LL;
    }

    else
    {
      sub_1000DE32C();
      uint64_t v23 = (uint64_t)v15;
      uint64_t v24 = 1LL;
    }

    sub_100014600(v23, v24);
  }

  else
  {
    sub_1000DE32C();
    sub_100014600((uint64_t)v15, 1LL);
    sub_10005A624();
  }

  swift_endAccess(v27);
  sub_1000325E4();
  sub_1000DE32C();
  int v25 = sub_1000DE458((uint64_t)v15);
  sub_1000C00CC((uint64_t)v15, (uint64_t *)&unk_1001D3180);
  if (v25 == 1)
  {
    sub_10005A624();
    URLQueryItem.init(name:value:)(v6, v4, a3, a4);
    sub_100014600(v12, 0LL);
    sub_100010BE4(v16, (uint64_t)v27, 33LL);
    sub_1000D9718( v12,  v6,  v4,  (uint64_t *)&unk_1001D3180,  (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem,  (void (*)(char *, uint64_t, uint64_t))sub_10000F560,  (void (*)(uint64_t))sub_10007FDE0);
    swift_endAccess(v27);
  }

  sub_100009AA0();
}

void sub_1000DA264(uint64_t a1)
{
  if (a1 && (uint64_t v2 = *(void *)(a1 + 16)) != 0)
  {
    sub_1000DE32C();
    sub_1000DE4F4();
    uint64_t v4 = a1 + v3;
    uint64_t v6 = *(void *)(v5 + 72);
    sub_10005A624();
    do
    {
      sub_1000DAA44(v4);
      v4 += v6;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100019F1C();
  }

BOOL sub_1000DA2D0()
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems;
  sub_100010BE4(v3, (uint64_t)v12, 32LL);
  if (*(void *)(*(void *)v3 + 16LL))
  {
    sub_100010E2C();
    sub_100077388();
    if ((v4 & 1) != 0)
    {
      uint64_t v5 = sub_1000DE32C();
      sub_1000DE3E4(v5);
      uint64_t v6 = v0;
      uint64_t v7 = 0LL;
    }

    else
    {
      sub_1000DE32C();
      uint64_t v6 = v0;
      uint64_t v7 = 1LL;
    }

    sub_100014600(v6, v7);
  }

  else
  {
    uint64_t v8 = sub_1000DE32C();
    sub_100009654(v0, 1LL, 1LL, v8);
    sub_100010E2C();
  }

  sub_1000DE4CC();
  swift_bridgeObjectRelease();
  sub_1000DE32C();
  uint64_t v9 = sub_1000DE458(v0);
  BOOL v10 = (_DWORD)v9 != 1;
  sub_1000DE53C(v9, (uint64_t *)&unk_1001D3180);
  return v10;
}

uint64_t sub_1000DA3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader;
  sub_100010BE4(v4 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader, (uint64_t)v14, 32LL);
  if (!*(void *)(*(void *)v9 + 16LL)) {
    goto LABEL_4;
  }
  sub_10005A624();
  uint64_t v10 = sub_1000DE550();
  sub_10000EC64(v10, v11);
  if ((v12 & 1) == 0)
  {
    sub_1000325E4();
LABEL_4:
    swift_endAccess(v14);
    sub_100010BE4(v9, (uint64_t)v14, 33LL);
    sub_10005A624();
    sub_100010E2C();
    sub_10000F574(a3, a4, a1, a2);
  }

  swift_endAccess(v14);
  return sub_1000325E4();
}

uint64_t sub_1000DA4A0()
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems);
  sub_100010BE4((uint64_t)v3, (uint64_t)v12, 32LL);
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    sub_100010E2C();
    sub_100077388();
    if ((v5 & 1) != 0)
    {
      uint64_t v6 = sub_1000DE32C();
      sub_1000DE3E4(v6);
      uint64_t v7 = v0;
      uint64_t v8 = 0LL;
    }

    else
    {
      uint64_t v4 = sub_1000DE32C();
      uint64_t v7 = v0;
      uint64_t v8 = 1LL;
    }

    sub_100009654(v7, v8, 1LL, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_1000DE32C();
    sub_100014600(v0, 1LL);
  }

  sub_1000DE32C();
  uint64_t v9 = sub_1000DE458(v0);
  if ((_DWORD)v9)
  {
    sub_1000DE53C(v9, (uint64_t *)&unk_1001D3180);
    sub_1000DE4CC();
    return 0LL;
  }

  else
  {
    uint64_t v10 = URLQueryItem.value.getter(v9);
    sub_1000DE53C(v10, (uint64_t *)&unk_1001D3180);
    sub_1000DE4CC();
  }

  return v10;
}

void sub_1000DA5D8(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems;
  uint64_t v4 = sub_1000DE32C();
  *(void *)(v1 + v3) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v4,  &protocol witness table for String);
  uint64_t v5 = OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader;
  *(void *)(v1 + v5) = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);
  uint64_t v6 = v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_urlComponents;
  uint64_t v7 = type metadata accessor for URLComponents(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  uint64_t v10 = URLComponents.queryItems.getter(v9);
  sub_1000DA264(v10);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  sub_100019F1C();
}

uint64_t sub_1000DA6B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CharacterSet(0LL);
  __chkstk_darwin(v3);
  sub_100010FCC();
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v4 = CharacterSet.init(charactersIn:)(0xD000000000000042LL, 0x80000001001725B0LL);
  __chkstk_darwin(v4);
  __int128 v11[2] = v1;
  v11[4] = sub_1000D981C((void (*)(uint64_t *__return_ptr, uint64_t))sub_1000DBD98, (uint64_t)v11, a1);
  uint64_t v5 = sub_10000941C(&qword_1001D1460);
  unint64_t v6 = sub_1000152B0();
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)(38LL, 0xE100000000000000LL, v5, v6);
  uint64_t v8 = sub_1000DE550();
  v9(v8);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000DA7E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = sub_1000106CC();
  uint64_t v6 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(a2, &type metadata for String, v5);
  uint64_t v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t result = URLQueryItem.value.getter(result);
    if (v10)
    {
      uint64_t v11 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(a2, &type metadata for String, v5);
      uint64_t v13 = v12;
      uint64_t result = swift_bridgeObjectRelease();
      if (v13)
      {
        swift_bridgeObjectRetain(v8);
        v14._uint64_t countAndFlagsBits = 61LL;
        v14._object = (void *)0xE100000000000000LL;
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v8);
        v15._uint64_t countAndFlagsBits = v11;
        v15._object = v13;
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }

  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t sub_1000DA918()
{
  uint64_t v1 = type metadata accessor for URLComponents(0LL);
  sub_100019DA4(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000DA96C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for ParsecURLRequestBuilder(uint64_t a1)
{
  uint64_t result = qword_1001D7BE8;
  if (!qword_1001D7BE8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ParsecURLRequestBuilder);
  }
  return result;
}

uint64_t sub_1000DA9C8(uint64_t a1)
{
  uint64_t result = type metadata accessor for URLComponents(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void sub_1000DAA44(uint64_t a1)
{
  uint64_t v3 = v1;
  sub_10000941C((uint64_t *)&unk_1001D3180);
  sub_100009B94();
  __chkstk_darwin(v5);
  sub_100010FCC();
  uint64_t v7 = URLQueryItem.name.getter(v6);
  uint64_t v9 = v8;
  uint64_t v10 = sub_1000DE32C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v2, a1, v10);
  sub_100009654(v2, 0LL, 1LL, v10);
  sub_100010BE4(v3 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems, (uint64_t)v11, 33LL);
  sub_1000D9718( v2,  v7,  v9,  (uint64_t *)&unk_1001D3180,  (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem,  (void (*)(char *, uint64_t, uint64_t))sub_10000F560,  (void (*)(uint64_t))sub_10007FDE0);
  swift_endAccess(v11);
  sub_10002FBC0();
}

char *sub_1000DAB2C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    uint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

void sub_1000DAB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_1000DAB90(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    uint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

char *sub_1000DABF0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    uint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

void sub_1000DAC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_1000DAC54(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    uint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

void sub_1000DACB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DACC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_1000DACCC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    char v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v4,  1046LL,  0);
    __break(1u);
  }

  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }

  return __src;
}

void sub_1000DAD50(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_1000DE2F4( (uint64_t)"Fatal error",  v10,  v11,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v12,  v13,  (uint64_t)"Swift/UnsafePointer.swift",  v14,  v15,  v16,  v17);
    __break(1u);
  }

  else
  {
    sub_1000DE4B8();
    if (v4 && (sub_10000941C(&qword_1001D5D80), sub_1000DE4E0(), !v5 & v4))
    {
      if (v3 == v2)
      {
        sub_100014A40();
      }

      else
      {
        sub_1000DE3AC();
        sub_1000DE404();
      }
    }

    else
    {
      sub_10000941C(&qword_1001D5D80);
      uint64_t v6 = sub_1000DE3AC();
      sub_1000DE414(v6, v7, v8, v9);
    }
  }

char *sub_1000DADE0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    uint64_t result = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_1000DE30C(a3, result);
  }

  return result;
}

void sub_1000DAE38(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DAE44(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_1000DE2F4( (uint64_t)"Fatal error",  v13,  v14,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v15,  v16,  (uint64_t)"Swift/UnsafePointer.swift",  v17,  v18,  v19,  v20);
    __break(1u);
  }

  else
  {
    sub_1000DE4B8();
    if (v7 && (a4(0LL), sub_1000DE4E0(), !v8 & v7))
    {
      if (v5 == v4)
      {
        sub_100014A40();
      }

      else
      {
        sub_1000DE3AC();
        sub_1000DE404();
      }
    }

    else
    {
      a4(0LL);
      uint64_t v9 = sub_1000DE3AC();
      sub_1000DE414(v9, v10, v11, v12);
    }
  }

char *sub_1000DAED0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000LL) != 0)
  {
    sub_100019F5C();
    __src = (char *)sub_1000DE2F4( (uint64_t)"Fatal error",  v4,  v5,  (uint64_t)"UnsafeMutablePointer.moveInitialize with negative count",  v6,  v7,  (uint64_t)"Swift/UnsafePointer.swift",  v8,  v9,  v10,  v11);
    __break(1u);
  }

  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }

  return __src;
}

uint64_t sub_1000DAF30(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_1000DAFCC(uint64_t a1, uint64_t a2)
{
  return sub_1000DB084(a1, a2);
}

uint64_t sub_1000DAFE0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    sub_1000DE390();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      sub_10000941C(&qword_1001D1130);
      uint64_t v6 = sub_1000DE37C();
      return sub_1000DE31C(v6);
    }

    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000DB070(uint64_t a1, uint64_t a2)
{
  return sub_1000DB084(a1, a2);
}

uint64_t sub_1000DB084(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    sub_1000DE390();
    if (!v7 && v6)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_100009788(0LL, v3, v4);
      uint64_t v8 = sub_1000DE37C();
      return sub_1000DE31C(v8);
    }

    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

uint64_t sub_1000DB118(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    sub_10006B6FC();
    unint64_t v5 = v3 + 16 * v4;
    if (v2 + 16 * v4 > v3)
    {
      BOOL v6 = v5 >= v2;
      BOOL v7 = v5 == v2;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (v7 || !v6)
    {
      sub_10000941C(&qword_1001D24A0);
      uint64_t v8 = sub_1000DE37C();
      return sub_1000DE31C(v8);
    }

    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20);
  __break(1u);
  return result;
}

void *sub_1000DB1B8(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000LL) != 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst) {
      return memcpy(__dst, __src, __n);
    }
    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = (void *)sub_100032620(v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  __break(1u);
  return result;
}

uint64_t sub_1000DB24C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_1000DB4A8(a1, a2, a3);
}

uint64_t sub_1000DB258(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000DB324(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(sub_10000941C(&qword_1001D5D80) - 8) + 72LL) * a2;
    unint64_t v6 = a3 + v5;
    unint64_t v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3) {
      return swift_arrayInitWithCopy(a3);
    }
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000DB41C(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    sub_1000DE390();
    if (!v5 && v4)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }

    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }

    if (v5 || !v4)
    {
      type metadata accessor for Name(0LL);
      uint64_t v6 = sub_1000DE37C();
      return sub_1000DE31C(v6);
    }

    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18);
  __break(1u);
  return result;
}

uint64_t sub_1000DB4A8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100019F5C();
    sub_100032678();
  }

  else
  {
    sub_10006B6FC();
    uint64_t v7 = *(void *)(*(void *)(v6(0LL) - 8) + 72LL) * v3;
    unint64_t v8 = a3 + v7;
    unint64_t v9 = v4 + v7;
    if (v8 <= v4 || v9 <= a3)
    {
      uint64_t v11 = sub_1000DE37C();
      return sub_1000DE31C(v11);
    }

    sub_100019F5C();
    sub_100032668();
  }

  uint64_t result = sub_100032620(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23);
  __break(1u);
  return result;
}

void sub_1000DB550(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000DB56C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v7 != v8)
    {
      sub_100032614();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000941C(&qword_1001D2498);
    uint64_t v12 = (char *)sub_100032600(v11, 16 * v10);
    sub_1000DE35C(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = v13;
  }

  else
  {
    uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_1000DAB2C(v14, v9, v12 + 32);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1000DB118((uint64_t)v14, v9);
  }

  sub_100010D00();
  sub_1000110D4();
}

void sub_1000DB614(char a1, int64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v7 != v8)
    {
      sub_100032614();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    int64_t v6 = a2;
  }

  int64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    int64_t v10 = *(void *)(a4 + 16);
  }
  else {
    int64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000941C(&qword_1001D2418);
    uint64_t v12 = (char *)swift_allocObject(v11, v10 + 32, 7LL);
    size_t v13 = j__malloc_size(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = 2 * v13 - 64;
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  uint64_t v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    sub_1000DAED0(v15, v9, v14);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1000DB1B8(v15, v9, v14);
  }

  sub_100010D00();
  sub_1000110D4();
}

void sub_1000DB6C8(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000DB6DC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v11 != v12)
    {
      sub_100032614();
      if (v11)
      {
LABEL_24:
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v13 = *(void *)(a4 + 16);
  if (v10 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v10;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  uint64_t v15 = sub_10000941C(a5);
  a6(0LL);
  sub_1000DE508();
  uint64_t v18 = (void *)swift_allocObject(v15, (v17 & ~v16) + v6 * v14, v16 | 7);
  j__malloc_size(v18);
  if (!v6)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  sub_1000DE530();
  BOOL v20 = v20 && v6 == -1;
  if (v20) {
    goto LABEL_23;
  }
  _OWORD v18[2] = v13;
  v18[3] = 2 * (v19 / v6);
LABEL_18:
  a6(0LL);
  sub_1000DE51C();
  unint64_t v22 = (unint64_t)v18 + v21;
  uint64_t v23 = a4 + v21;
  if ((a1 & 1) != 0)
  {
    sub_1000DAE44(v23, v13, v22, a6);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1000DB4A8(v23, v13, v22);
  }

  sub_100010D00();
  sub_10002FBC0();
}

void sub_1000DB7DC(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000DB7F0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000DB80C( char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v12 != v13)
    {
      sub_100032614();
      if (v12)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v11 = a2;
  }

  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    uint64_t v16 = sub_10000941C(a5);
    uint64_t v17 = (void *)sub_100032600(v16, 16 * v15);
    sub_1000DE35C(v17);
    _OWORD v17[2] = v14;
    v17[3] = v18;
  }

  else
  {
    uint64_t v17 = &_swiftEmptyArrayStorage;
  }

  uint64_t v19 = v17 + 4;
  uint64_t v20 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    a6(v20, v14, v19);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    a7(v20, v14, v19);
  }

  sub_100010D00();
  sub_100019F1C();
}

size_t sub_1000DB8BC(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_10000941C(&qword_1001D7C88);
  uint64_t v11 = *(void *)(sub_10000941C(&qword_1001D5D80) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  uint64_t result = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (result - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_24;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(result - v14) / v12);
LABEL_19:
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(sub_10000941C(&qword_1001D5D80) - 8) + 80LL);
  uint64_t v18 = (v17 + 32) & ~v17;
  unint64_t v19 = a4 + v18;
  if ((v5 & 1) != 0)
  {
    sub_1000DAD50(v19, v8);
    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1000DB324(v19, v8, (unint64_t)v15 + v18);
  }

  swift_release();
  return (size_t)v15;
}

void sub_1000DBA04(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1000DBA18(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
  {
    sub_1000DE12C(v3);
    uint64_t v3 = v4;
  }

  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1000DC054(v6);
  *a1 = v3;
}

void sub_1000DBA98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    sub_1000DE4A8();
    if (!(v9 ^ v10 | v8))
    {
      uint64_t v11 = sub_10000941C((uint64_t *)&unk_1001D0C00);
      uint64_t v12 = (void *)sub_100032600(v11, 8 * v7);
      size_t v13 = j__malloc_size(v12);
      __int128 v12[2] = v7;
      void v12[3] = (2 * ((uint64_t)(v13 - 32) / 8)) | 1;
    }

    if (v6 != v4)
    {
      sub_1000DB084(v5 + 8 * v4, v7);
LABEL_8:
      sub_100019F1C();
      return;
    }
  }

  __break(1u);
}

void sub_1000DBB4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v28;
  a26 = v30;
  uint64_t v31 = *(void *)(v29 + 16);
  if (!v31) {
    goto LABEL_9;
  }
  uint64_t v32 = v29;
  sub_10000941C(&qword_1001D2458);
  uint64_t v33 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v34 = (void *)sub_1000DE3C0(v33);
  j__malloc_size(v34);
  if (v26)
  {
    sub_1000DE530();
    BOOL v36 = v36 && v26 == -1;
    if (!v36)
    {
      void v34[2] = v31;
      v34[3] = 2 * (v35 / v26);
      sub_1000DD48C(&a10, (uint64_t)v34 + v27, v31, v32);
      sub_1000DE440();
      sub_1000DE334();
      if (!v36) {
        __break(1u);
      }
LABEL_9:
      sub_1000144B0();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_1000DBBF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
  }

  else
  {
    if (!v7) {
      goto LABEL_9;
    }
    sub_1000DE4A8();
    if (v9 ^ v10 | v8)
    {
      uint64_t v12 = &_swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v11 = sub_10000941C(&qword_1001D24A8);
      uint64_t v12 = (void *)sub_100032600(v11, 16 * v7);
      sub_1000DE35C(v12);
      __int128 v12[2] = v7;
      void v12[3] = v13;
    }

    if (v6 != v4)
    {
      sub_1000DAF30(v5 + 16 * v4, v7, (unint64_t)(v12 + 4));
LABEL_9:
      sub_100019F1C();
      return;
    }
  }

  __break(1u);
}

void *sub_1000DBC80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_10000941C(&qword_1001D2430);
  uint64_t v4 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  char v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      uint64_t v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_1000DD754(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10003D774(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000DBD98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000DA7E4(a1, *(void *)(v2 + 16), a2);
}

void sub_1000DBDB0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_10000941C(&qword_1001D24A8);
    uint64_t v3 = (const void *)sub_100032600(v2, 16 * v1);
    sub_1000DE35C(v3);
    sub_1000DE490(v4);
    sub_1000DDA1C(v5, v6, v7, v8);
    sub_100010E2C();
    sub_1000DE334();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1000144B0();
}

void sub_1000DBE28()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = sub_10000941C(&qword_1001D16E0);
    uint64_t v3 = (const void *)sub_100032600(v2, 32 * v1);
    size_t v4 = j__malloc_size(v3);
    sub_1000DE490(2 * ((uint64_t)(v4 - 32) / 32));
    sub_1000DDC18(v5, v6, v7, v8);
    sub_100010E2C();
    sub_1000DE334();
    if (!v9) {
      __break(1u);
    }
  }

  sub_1000144B0();
}

void sub_1000DBEB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  a25 = v27;
  a26 = v29;
  uint64_t v30 = *(void *)(v28 + 16);
  if (!v30) {
    goto LABEL_9;
  }
  uint64_t v31 = v28;
  sub_10000941C(&qword_1001D7C88);
  uint64_t v32 = sub_10000941C(&qword_1001D5D80);
  uint64_t v33 = (void *)sub_1000DE3C0(v32);
  j__malloc_size(v33);
  if (v26)
  {
    sub_1000DE530();
    BOOL v35 = v35 && v26 == -1;
    if (!v35)
    {
      void v33[2] = v30;
      v33[3] = 2 * (v34 / v26);
      sub_10000941C(&qword_1001D5D80);
      sub_1000DE51C();
      sub_1000DDE14(&a10, (uint64_t)v33 + v36, v30, v31);
      sub_1000DE440();
      sub_1000DE334();
      if (!v35) {
        __break(1u);
      }
LABEL_9:
      sub_1000144B0();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

void sub_1000DBF68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = a4 >> 1;
  uint64_t v8 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_16;
  }

  if (!v8) {
    goto LABEL_14;
  }
  sub_1000DE4A8();
  if (!(v9 ^ v10 | v16))
  {
    uint64_t v11 = sub_10000941C(&qword_1001D7CA0);
    type metadata accessor for URL(0LL);
    sub_1000DE508();
    uint64_t v14 = (void *)swift_allocObject(v11, (v13 & ~v12) + v6 * v8, v12 | 7);
    j__malloc_size(v14);
    if (v6)
    {
      sub_1000DE530();
      BOOL v16 = v16 && v6 == -1;
      if (!v16)
      {
        v14[2] = v8;
        void v14[3] = 2 * (v15 / v6);
        goto LABEL_12;
      }

void sub_1000DC054(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v183 = *(void **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v167 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v179 = (char *)&v158 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v158 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v158 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v171 = (char *)&v158 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v170 = (char *)&v158 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v164 = (char *)&v158 - v20;
  __chkstk_darwin(v19);
  uint64_t v163 = (char *)&v158 - v21;
  uint64_t v182 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if ((v22 & 0x8000000000000000LL) == 0)
    {
      if (v22) {
        sub_1000DCBB8(0LL, v22, 1LL, v182);
      }
      return;
    }

    goto LABEL_157;
  }

  Swift::Int v24 = v23;
  uint64_t v160 = sub_1000AF8F8(v22 / 2);
  uint64_t v161 = v22;
  unint64_t v169 = v25;
  if (v22 <= 0)
  {
LABEL_121:
    uint64_t v27 = (char *)_swiftEmptyArrayStorage;
    unint64_t v95 = _swiftEmptyArrayStorage[2];
LABEL_122:
    if (v95 < 2)
    {
LABEL_133:
      swift_bridgeObjectRelease();
      if (v161 >= -1) {
        goto LABEL_134;
      }
      goto LABEL_161;
    }

    uint64_t v148 = *v182;
    unint64_t v149 = v169;
    while (1)
    {
      unint64_t v150 = v95 - 2;
      if (v95 < 2) {
        break;
      }
      if (!v148) {
        goto LABEL_165;
      }
      uint64_t v151 = (uint64_t)v27;
      uint64_t v152 = v27 + 32;
      uint64_t v153 = *(void *)&v27[16 * v150 + 32];
      uint64_t v154 = *(void *)&v27[16 * v95 + 24];
      sub_1000DCE8C(v148 + v183[9] * v153, v148 + v183[9] * v152[2 * v95 - 2], v148 + v183[9] * v154, v149);
      if (v2) {
        goto LABEL_119;
      }
      if (v154 < v153) {
        goto LABEL_152;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v151) & 1) == 0)
      {
        sub_1000DD478(v151);
        uint64_t v151 = v157;
      }

      if (v150 >= *(void *)(v151 + 16)) {
        goto LABEL_153;
      }
      uint64_t v155 = (void *)(v151 + 32 + 16 * v150);
      void *v155 = v153;
      v155[1] = v154;
      unint64_t v156 = *(void *)(v151 + 16);
      if (v95 > v156) {
        goto LABEL_154;
      }
      uint64_t v27 = (char *)v151;
      memmove((void *)(v151 + 32 + 16 * (v95 - 1)), (const void *)(v151 + 32 + 16 * v95), 16 * (v156 - v95));
      *(void *)(v151 + swift_unknownObjectWeakDestroy(v0 + 16) = v156 - 1;
      unint64_t v95 = v156 - 1;
      if (v156 <= 2) {
        goto LABEL_133;
      }
    }

uint64_t sub_1000DCBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v45 = a4;
  uint64_t v38 = a1;
  uint64_t v41 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v46 = *(void **)(v41 - 8);
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v42 = a3;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = v46[9];
    uint64_t v39 = (uint64_t (*)(char *, uint64_t, uint64_t))v46[2];
    uint64_t v40 = v14;
    uint64_t v48 = v14 * (v42 - 1);
    uint64_t v47 = v14 * v42;
    while (2)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = v38;
      uint64_t v17 = v41;
      while (1)
      {
        uint64_t v18 = *v45;
        uint64_t v44 = v47 + v15;
        uint64_t v19 = v39;
        v39(v13, v47 + v15 + v18, v17);
        uint64_t v20 = v19(v10, v48 + v15 + v18, v17);
        uint64_t v21 = URLQueryItem.name.getter(v20);
        Swift::Int v22 = v10;
        uint64_t v24 = v23;
        uint64_t v25 = URLQueryItem.name.getter(v21);
        if (v21 == v25 && v24 == v26) {
          break;
        }
        uint64_t v28 = v26;
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v24, v25, v26, 1LL);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        uint64_t v30 = (void (*)(char *, uint64_t))v46[1];
        v30(v22, v17);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v13, v17);
        uint64_t v10 = v22;
        if ((v29 & 1) != 0)
        {
          uint64_t v31 = *v45;
          if (!*v45)
          {
            __break(1u);
            return result;
          }

          uint64_t v32 = v31 + v47 + v15;
          uint64_t v33 = v31 + v48 + v15;
          uint64_t v34 = (void (*)(char *, uint64_t, uint64_t))v46[4];
          uint64_t v17 = v41;
          v34(v43, v32, v41);
          swift_arrayInitWithTakeFrontToBack(v32, v33, 1LL, v17);
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v33, v43, v17);
          v15 -= v40;
          ++v16;
          uint64_t v10 = v22;
          if (v42 != v16) {
            continue;
          }
        }

        goto LABEL_13;
      }

      swift_bridgeObjectRelease_n(v24, 2LL);
      uint64_t v35 = (void (*)(char *, uint64_t))v46[1];
      v35(v22, v17);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v17);
      uint64_t v10 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v37) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_1000DCE8C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v76 = (char *)&v69 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v78 = v17;
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v18 == -1) {
    goto LABEL_91;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v18 == -1) {
    goto LABEL_92;
  }
  uint64_t v74 = v14;
  uint64_t v75 = v18;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_1000DAE44(a2, v21 / v18, a4, (void (*)(void))&type metadata accessor for URLQueryItem);
    unint64_t v25 = a4 + v24 * v18;
    if (v24 * v18 < 1 || a1 >= a2) {
      goto LABEL_22;
    }
    uint64_t v74 = -v18;
    uint64_t v50 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v78 + 16);
    unint64_t v70 = a4;
    uint64_t v71 = v50;
    unint64_t v72 = a1;
    while (1)
    {
      unint64_t v51 = a3;
      unint64_t v79 = v25;
      uint64_t v52 = v74;
      unint64_t v73 = v25 + v74;
      uint64_t v53 = v71;
      ((void (*)(char *))v71)(v76);
      unint64_t v54 = a2 + v52;
      uint64_t v55 = v53(v77, a2 + v52, v8);
      uint64_t v56 = URLQueryItem.name.getter(v55);
      uint64_t v58 = v57;
      uint64_t v60 = URLQueryItem.name.getter(v56);
      if (v56 == v60 && v58 == v59) {
        char v62 = 0;
      }
      else {
        char v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v59, 1LL);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v51 + v74;
      unint64_t v63 = *(void (**)(char *, uint64_t))(v78 + 8);
      v63(v77, v8);
      v63(v76, v8);
      unint64_t v64 = v72;
      if ((v62 & 1) != 0)
      {
        BOOL v65 = v51 < a2 || a3 >= a2;
        uint64_t v18 = v75;
        if (v65)
        {
          swift_arrayInitWithTakeFrontToBack(a3, v54, 1LL, v8);
        }

        else if (v51 != a2)
        {
          swift_arrayInitWithTakeBackToFront(a3, v54, 1LL, v8);
        }

        a2 = v54;
        a4 = v70;
        unint64_t v25 = v79;
        goto LABEL_84;
      }

      BOOL v66 = v51 < v79 || a3 >= v79;
      uint64_t v18 = v75;
      if (v66)
      {
        unint64_t v67 = v73;
        swift_arrayInitWithTakeFrontToBack(a3, v73, 1LL, v8);
      }

      else
      {
        if (v51 == v79)
        {
          unint64_t v25 = v73;
          goto LABEL_83;
        }

        unint64_t v67 = v73;
        swift_arrayInitWithTakeBackToFront(a3, v73, 1LL, v8);
      }

      unint64_t v25 = v67;
LABEL_83:
      a4 = v70;
LABEL_84:
      if (v25 <= a4 || a2 <= v64) {
        goto LABEL_22;
      }
    }
  }

  sub_1000DAE44(a1, v19 / v18, a4, (void (*)(void))&type metadata accessor for URLQueryItem);
  unint64_t v25 = a4 + v23 * v18;
  if (v23 * v18 >= 1 && a2 < a3)
  {
    uint64_t v76 = *(char **)(v78 + 16);
    uint64_t v77 = v16;
    uint64_t v30 = v74;
    unint64_t v79 = a4 + v23 * v18;
    unint64_t v73 = a3;
    while (1)
    {
      uint64_t v31 = (uint64_t (*)(uint64_t, unint64_t, uint64_t))v76;
      ((void (*)(char *, unint64_t, uint64_t))v76)(v16, a2, v8);
      uint64_t v32 = v31(v30, a4, v8);
      uint64_t v33 = v8;
      uint64_t v34 = URLQueryItem.name.getter(v32);
      uint64_t v36 = v35;
      uint64_t v37 = URLQueryItem.name.getter(v34);
      if (v34 == v37 && v36 == v38) {
        break;
      }
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v37, v38, 1LL);
      uint64_t v41 = v30;
      char v42 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      v43(v41, v33);
      v43((uint64_t)v16, v33);
      uint64_t v8 = v33;
      if ((v42 & 1) == 0) {
        goto LABEL_39;
      }
      uint64_t v18 = v75;
      unint64_t v44 = a2 + v75;
      BOOL v45 = a1 < a2 || a1 >= v44;
      unint64_t v46 = v73;
      if (!v45)
      {
        uint64_t v30 = v74;
        if (a1 != a2) {
          swift_arrayInitWithTakeBackToFront(a1, a2, 1LL, v8);
        }
        unint64_t v25 = v79;
        goto LABEL_49;
      }

      swift_arrayInitWithTakeFrontToBack(a1, a2, 1LL, v8);
LABEL_48:
      unint64_t v25 = v79;
      uint64_t v30 = v74;
LABEL_49:
      a1 += v18;
      BOOL v49 = a4 >= v25 || v44 >= v46;
      a2 = v44;
      if (v49) {
        goto LABEL_16;
      }
    }

    swift_bridgeObjectRelease_n(v36, 2LL);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
    v47(v30, v33);
    v47((uint64_t)v16, v33);
    uint64_t v8 = v33;
LABEL_39:
    uint64_t v18 = v75;
    BOOL v48 = a1 < a4 || a1 >= a4 + v75;
    unint64_t v46 = v73;
    if (v48)
    {
      swift_arrayInitWithTakeFrontToBack(a1, a4, 1LL, v8);
    }

    else if (a1 != a4)
    {
      swift_arrayInitWithTakeBackToFront(a1, a4, 1LL, v8);
    }

    unint64_t v44 = a2;
    a4 += v18;
    goto LABEL_48;
  }

void sub_1000DD3BC(char a1, uint64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    sub_1000325D4();
    if (v7 != v8)
    {
      sub_100032614();
      if (v7)
      {
        __break(1u);
        return;
      }

      sub_1000325C4();
    }
  }

  else
  {
    uint64_t v6 = a2;
  }

  uint64_t v9 = *((void *)a4 + 2);
  if (v6 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    uint64_t v11 = sub_10000941C(&qword_1001D7C80);
    uint64_t v12 = (char *)sub_100032600(v11, 16 * v10);
    sub_1000DE35C(v12);
    *((void *)v12 + 2) = v9;
    *((void *)v12 + 3) = v13;
  }

  else
  {
    uint64_t v12 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || &v15[16 * v9] <= v14) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v9);
  }

  sub_1000325E4();
  sub_1000110D4();
}

void sub_1000DD478(uint64_t a1)
{
}

uint64_t sub_1000DD48C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Trialpb_TrialExperiment(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v39 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v37 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 24);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v17 - 24);
  uint64_t v35 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v36 = (unint64_t)(63 - v19) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(void *)(v39 + 48) + v29 * v25, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v36) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v33;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v37 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  [v9 updateData:0];
  return v17;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

uint64_t sub_1000DD754(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v39 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v37 = v17;
  uint64_t v19 = -1LL << *(_BYTE *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v19);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v39;
    a1[1] = v31;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v17 - 32);
  uint64_t v35 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int64_t v36 = (unint64_t)(63 - v19) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(void *)(v39 + 56) + v29 * v25, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v15, v12, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v15, v8);
    a3 = v38;
    if (v23 == v38) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v26 >= v36) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v37 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_32:
    unint64_t v21 = 0LL;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v27 = *(void *)(v37 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v33;
      goto LABEL_36;
    }

    unint64_t v27 = *(void *)(v37 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000DDA1C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

_OWORD *sub_1000DDC18(_OWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v13 = 0LL;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    void v5[3] = v12;
    v5[4] = v9;
    return (_OWORD *)v13;
  }

  if (!a3)
  {
    int64_t v12 = 0LL;
LABEL_33:
    uint64_t v13 = a3;
    goto LABEL_36;
  }

  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    sub_100010758(*(void *)(a4 + 56) + 32 * v16, (uint64_t)v20);
    sub_1000108D8(v20, v21);
    uint64_t result = sub_1000108D8(v21, v11);
    v11 += 2;
    if (v13 == a3) {
      goto LABEL_33;
    }
  }

  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
    goto LABEL_38;
  }

  if (v17 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18)
  {
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }

  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2LL;
    goto LABEL_22;
  }

  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3LL;
    goto LABEL_22;
  }

  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_35:
    unint64_t v9 = 0LL;
    goto LABEL_36;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_35;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

id sub_1000DDE14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000941C(&qword_1001D5D80);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (int64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id result = (id)__chkstk_darwin(v9);
  int64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v35 = a4 + 64;
  uint64_t v33 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v33 < 64) {
    uint64_t v16 = ~(-1LL << -(char)v33);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  if (!a2)
  {
    int64_t v18 = 0LL;
    a3 = 0LL;
LABEL_39:
    uint64_t v29 = ~v33;
    uint64_t v30 = v35;
    *a1 = a4;
    a1[1] = v30;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return (id)a3;
  }

  if (!a3)
  {
    int64_t v18 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v32 = a1;
  int64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  int64_t v34 = (unint64_t)(63 - v33) >> 6;
  int64_t v31 = v34 - 1;
  uint64_t v36 = a3;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v25 = *(void *)(a4 + 56);
    int64_t v26 = *(void **)(*(void *)(a4 + 48) + 8 * v21);
    uint64_t v27 = type metadata accessor for TopicCacheEntry(0LL);
    sub_10006D0D4(v25 + *(void *)(*(void *)(v27 - 8) + 72LL) * v21, (uint64_t)v11 + *(int *)(v38 + 48));
    *uint64_t v11 = v26;
    sub_1000DE160((uint64_t)v11, (uint64_t)v14);
    sub_1000DE160((uint64_t)v14, a2);
    a3 = v36;
    if (v19 == v36)
    {
      id v28 = v26;
      goto LABEL_38;
    }

    a2 += *(void *)(v37 + 72);
    id result = v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v22 >= v34) {
      goto LABEL_33;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v22);
    if (!v23)
    {
      v18 += 2LL;
      if (v22 + 1 >= v34)
      {
        unint64_t v17 = 0LL;
        int64_t v18 = v22;
      }

      else
      {
        unint64_t v23 = *(void *)(v35 + 8 * v18);
        if (v23) {
          goto LABEL_14;
        }
        int64_t v24 = v22 + 2;
        if (v22 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (v23)
        {
LABEL_17:
          int64_t v22 = v24;
          goto LABEL_18;
        }

        int64_t v18 = v22 + 3;
        if (v22 + 3 < v34)
        {
          unint64_t v23 = *(void *)(v35 + 8 * v18);
          if (v23)
          {
LABEL_14:
            int64_t v22 = v18;
            goto LABEL_18;
          }

          int64_t v24 = v22 + 4;
          if (v22 + 4 >= v34)
          {
LABEL_33:
            unint64_t v17 = 0LL;
            goto LABEL_37;
          }

          unint64_t v23 = *(void *)(v35 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              int64_t v22 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_42;
              }
              if (v22 >= v34)
              {
                unint64_t v17 = 0LL;
                int64_t v18 = v31;
                goto LABEL_37;
              }

              unint64_t v23 = *(void *)(v35 + 8 * v22);
              ++v24;
              if (v23) {
                goto LABEL_18;
              }
            }
          }

          goto LABEL_17;
        }

        unint64_t v17 = 0LL;
        int64_t v18 = v22 + 2;
      }

void sub_1000DE100(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000DE12C(uint64_t a1)
{
}

uint64_t sub_1000DE160(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D5D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

size_t sub_1000DE1A8(uint64_t a1)
{
  return sub_1000DB8BC(0LL, *(void *)(a1 + 16), 0, a1);
}

void sub_1000DE1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t storeEnumTagSinglePayload for ParsecURLRequestBuilder.URLError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000DE234 + 4 * byte_100163E45[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DE268 + 4 * asc_100163E40[v4]))();
}

uint64_t sub_1000DE268(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000DE270(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DE278LL);
  }
  return result;
}

uint64_t sub_1000DE284(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DE28CLL);
  }
  *(_BYTE *)id result = a2 + 1;
  return result;
}

uint64_t sub_1000DE290(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000DE298(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParsecURLRequestBuilder.URLError()
{
  return &type metadata for ParsecURLRequestBuilder.URLError;
}

unint64_t sub_1000DE2B8()
{
  unint64_t result = qword_1001D7CA8;
  if (!qword_1001D7CA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100163EB4, &type metadata for ParsecURLRequestBuilder.URLError);
    atomic_store(result, (unint64_t *)&qword_1001D7CA8);
  }

  return result;
}

uint64_t sub_1000DE2F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, int a11)
{
  return _fatalErrorMessage(_:_:file:line:flags:)(a1, 11LL, 2LL, a4, 55LL, 2LL, a7, 25LL, a9, a10, a11);
}

void *sub_1000DE30C@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_1000DE31C(uint64_t a1)
{
  return swift_arrayInitWithCopy(a1);
}

uint64_t sub_1000DE32C()
{
  return type metadata accessor for URLQueryItem(0LL);
}

uint64_t sub_1000DE334()
{
  return sub_10003D774(v0);
}

size_t sub_1000DE35C(const void *a1)
{
  return j__malloc_size(a1);
}

uint64_t sub_1000DE37C()
{
  return v0;
}

  ;
}

uint64_t sub_1000DE3AC()
{
  return v0;
}

uint64_t sub_1000DE3C0(uint64_t a1)
{
  return swift_allocObject( v2,  ((*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL))
         + *(void *)(*(void *)(a1 - 8) + 72LL) * v1,
           *(unsigned __int8 *)(*(void *)(a1 - 8) + 80LL) | 7LL);
}

uint64_t sub_1000DE3E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))( v1,  v3 + *(void *)(*(void *)(a1 - 8) + 72LL) * v2,  a1);
}

uint64_t sub_1000DE404()
{
  return ((uint64_t (*)(void))swift_arrayInitWithTakeBackToFront)();
}

uint64_t sub_1000DE414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_arrayInitWithTakeFrontToBack(a1, a2, a3, a4);
}

  ;
}

uint64_t sub_1000DE440()
{
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_1000DE458(uint64_t a1)
{
  return sub_100010708(a1, 1LL, v1);
}

uint64_t sub_1000DE464()
{
  return 0LL;
}

uint64_t sub_1000DE480(uint64_t a1, uint64_t a2)
{
  return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v2, 0LL);
}

void sub_1000DE490(uint64_t a1@<X8>)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

  ;
}

  ;
}

uint64_t sub_1000DE4CC()
{
  return swift_endAccess(v0 - 72);
}

uint64_t sub_1000DE4D4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  return a1(v2, v1);
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

uint64_t sub_1000DE53C(uint64_t a1, uint64_t *a2)
{
  return sub_1000C00CC(v2, a2);
}

void sub_1000DE544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
}

uint64_t sub_1000DE550()
{
  return v0;
}

void PegasusConfigURLProvider.init(fileManager:)(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  uint64_t v3 = (uint64_t)a2 + *(int *)(type metadata accessor for PegasusConfigURLProvider(0LL) + 20);
  id v4 = a1;
  static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)((uint64_t)v4, v3);
}

void static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v9 = v8 - v7;
  sub_10005A18C();
  sub_1000DF3A4();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v41 = a1;
  unint64_t v16 = sub_1000DE91C();
  static PegasusConfigContainerURLProvider.containerURL<A>(using:)(&v41, v16);
  sub_10003B954(v9, 0LL);
  if (sub_100010708(v9, 1LL, v2) == 1)
  {
    sub_100010AE8(v9);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_1000093D0(v17, (uint64_t)qword_1001EDE48);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v21 = static os_log_type_t.error.getter(v19, v20);
    if (os_log_type_enabled(v19, v21))
    {
      int64_t v22 = (uint8_t *)sub_100009B20(2LL);
      *(_WORD *)int64_t v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v21,  "Failed to get container URL for pegasus configuration",  v22,  2u);
      sub_100010C34((uint64_t)v22);
    }

    uint64_t v23 = 1LL;
  }

  else
  {
    int64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    v24(v15, v9, v2);
    if (qword_1001D0618 != -1) {
      swift_once(&qword_1001D0618, sub_1000AD1F4);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_1000093D0(v25, (uint64_t)qword_1001EDE48);
    uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v13, v15, v2);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = sub_100009B20(12LL);
      uint64_t v38 = v24;
      uint64_t v30 = (uint8_t *)v29;
      uint64_t v37 = sub_100009B20(32LL);
      uint64_t v41 = v37;
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v36 = v30 + 4;
      unint64_t v31 = sub_100025DFC();
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v2, v31);
      uint64_t v39 = sub_1000307E0(v32, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v36);
      swift_bridgeObjectRelease();
      sub_100082B9C();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "PegasusConfiguration container URL: %s", v30, 0xCu);
      uint64_t v34 = v37;
      swift_arrayDestroy(v37, 1LL);
      sub_100010C34(v34);
      uint64_t v35 = (uint64_t)v30;
      int64_t v24 = v38;
      sub_100010C34(v35);
    }

    else
    {
      sub_100082B9C();
    }

    v24((char *)a2, (uint64_t)v15, v2);
    uint64_t v23 = 0LL;
  }

  sub_10003B954(a2, v23);
  sub_100009AA0();
}

uint64_t type metadata accessor for PegasusConfigURLProvider(uint64_t a1)
{
  uint64_t result = qword_1001D7D08;
  if (!qword_1001D7D08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PegasusConfigURLProvider);
  }
  return result;
}

unint64_t sub_1000DE91C()
{
  unint64_t result = qword_1001D1AE8;
  if (!qword_1001D1AE8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSFileManager);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001D1AE8);
  }

  return result;
}

uint64_t PegasusConfigURLProvider.cachedBagURL.getter()
{
  uint64_t v4 = v3 - v2;
  uint64_t v5 = static PegasusConfigContainerURLProvider.configFileName.getter();
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for PegasusConfigURLProvider(0LL);
  sub_1000DED10(v0 + *(int *)(v8 + 20), v4);
  uint64_t v9 = sub_10005A18C();
  if (sub_100010708(v4, 1LL, v9) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_100010AE8(v4);
    uint64_t v11 = 1LL;
  }

  else
  {
    URL.appendingPathComponent(_:isDirectory:)(v5, v7, 0LL);
    swift_bridgeObjectRelease();
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v4, v9);
    uint64_t v11 = 0LL;
  }

  return sub_1000DF394(v10, v11);
}

void PegasusConfigURLProvider.legacyCachedBagURL.getter()
{
  uint64_t v3 = v2 - v1;
  PegasusConfigURLProvider.parsecdAssetsDirectoryURL.getter(v2 - v1);
  uint64_t v4 = sub_10005A18C();
  if (sub_100010708(v3, 1LL, v4) == 1)
  {
    uint64_t v5 = sub_100010AE8(v3);
    uint64_t v6 = 1LL;
  }

  else
  {
    URL.appendingPathComponent(_:isDirectory:)(0x73696C702E676162LL, 0xE900000000000074LL, 0LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
    uint64_t v6 = 0LL;
  }

  sub_1000DF394(v5, v6);
  sub_1000110D4();
}

void PegasusConfigURLProvider.parsecdAssetsDirectoryURL.getter(uint64_t a1@<X8>)
{
  uint64_t v8 = v7 - v6;
  sub_10005A18C();
  sub_1000DF3A4();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v27[-v13];
  uint64_t v15 = *v1;
  id v28 = 0LL;
  id v16 = [v15 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:0 error:&v28];
  id v17 = v28;
  if (!v16)
  {
    id v24 = v28;
    uint64_t v25 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v26);
    swift_errorRelease(v25);
    sub_10003B954(v8, 1LL);
    goto LABEL_5;
  }

  uint64_t v18 = v16;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);
  id v19 = v17;

  uint64_t v20 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32);
  v20(v8, v12, v2);
  sub_10003B954(v8, 0LL);
  if (sub_100010708(v8, 1LL, v2) == 1)
  {
LABEL_5:
    sub_100010AE8(v8);
    uint64_t v23 = 1LL;
    goto LABEL_6;
  }

  v20((uint64_t)v14, (_BYTE *)v8, v2);
  uint64_t v21 = URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x800000010016AB00LL, 1LL);
  URL.standardizedFileURL.getter(v21);
  int64_t v22 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v22(v12, v2);
  v22(v14, v2);
  uint64_t v23 = 0LL;
LABEL_6:
  sub_10003B954(a1, v23);
  sub_100009AA0();
}

uint64_t sub_1000DED10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D5ED0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void **initializeBufferWithCopyOfBuffer for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL(0LL);
    uint64_t v10 = v4;
    if (sub_100010708((uint64_t)v8, 1LL, v9))
    {
      uint64_t v11 = sub_10000941C(&qword_1001D5ED0);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
      sub_100009654((uint64_t)v7, 0LL, 1LL, v9);
    }
  }

  return v5;
}

uint64_t destroy for PegasusConfigURLProvider(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t result = sub_100010708(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }
  return result;
}

void **initializeWithCopy for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL(0LL);
  id v9 = v4;
  if (sub_100010708((uint64_t)v7, 1LL, v8))
  {
    uint64_t v10 = sub_10000941C(&qword_1001D5ED0);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
    sub_100009654((uint64_t)v6, 0LL, 1LL, v8);
  }

  return a1;
}

void **assignWithCopy for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL(0LL);
  int v13 = sub_100010708((uint64_t)v10, 1LL, v12);
  int v14 = sub_100010708((uint64_t)v11, 1LL, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10000941C(&qword_1001D5ED0);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  sub_100009654((uint64_t)v10, 0LL, 1LL, v12);
  return a1;
}

void *initializeWithTake for PegasusConfigURLProvider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL(0LL);
  if (sub_100010708((uint64_t)v6, 1LL, v7))
  {
    uint64_t v8 = sub_10000941C(&qword_1001D5ED0);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
    sub_100009654((uint64_t)v5, 0LL, 1LL, v7);
  }

  return a1;
}

void **assignWithTake for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL(0LL);
  int v11 = sub_100010708((uint64_t)v8, 1LL, v10);
  int v12 = sub_100010708((uint64_t)v9, 1LL, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10000941C(&qword_1001D5ED0);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  sub_100009654((uint64_t)v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusConfigURLProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000DF230);
}

uint64_t sub_1000DF230(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_10000941C(&qword_1001D5ED0);
    return sub_100010708((uint64_t)a1 + *(int *)(a3 + 20), a2, v8);
  }

uint64_t storeEnumTagSinglePayload for PegasusConfigURLProvider( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000DF2B4);
}

void sub_1000DF2B4(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    sub_1000110D4();
  }

  else
  {
    uint64_t v7 = sub_10000941C(&qword_1001D5ED0);
    sub_100009654((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }

void sub_1000DF31C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10000D05C(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

uint64_t sub_1000DF394(uint64_t a1, uint64_t a2)
{
  return sub_100009654(v2, a2, 1LL, v3);
}

  ;
}

void *sub_1000DF3B8()
{
  uint64_t v1 = sub_10000941C(&qword_1001D5D80);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void **)((char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3);
  uint64_t v7 = (void **)((char *)v31 - v6);
  sub_100010BE4(v0 + 24, (uint64_t)var68, 0LL);
  uint64_t v8 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain_n(v8, 2LL);
  sub_1000DBEB0( v8,  v9,  v10,  v11,  v12,  v13,  v14,  v15,  v31[0],  v31[1],  (uint64_t)v32,  var68[0],  var68[1],  var68[2],  var68[3],  var68[4],  var68[5],  var68[6],  var68[7],  var68[8],  var68[9],  var68[10],  var68[11],  var68[12],  var68[13],  var68[14]);
  id v17 = v16;
  sub_100009B3C();
  uint64_t v32 = v17;
  sub_1000DF864((size_t *)&v32);
  sub_100009B3C();
  uint64_t v18 = v32;
  uint64_t v19 = v32[2];
  if (v19)
  {
    uint64_t v32 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v19);
    uint64_t v20 = (uint64_t)v18 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v21 = *(void *)(v2 + 72);
    do
    {
      sub_1000DF8E8(v20, (uint64_t)v7);
      uint64_t v22 = *(int *)(v1 + 48);
      uint64_t v23 = (uint64_t)v5 + v22;
      id v24 = *v7;
      *uint64_t v5 = *v7;
      sub_10006D0D4((uint64_t)v7 + v22, (uint64_t)v5 + v22);
      id v25 = v24;
      sub_10006D098(v23);
      uint64_t v26 = sub_1000DF930((uint64_t)v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
      uint64_t v27 = v32[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
      uint64_t v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      specialized ContiguousArray._endMutation()(v28);
      v20 += v21;
      --v19;
    }

    while (v19);
    uint64_t v29 = v32;
    swift_release();
  }

  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }

  return v29;
}

BOOL sub_1000DF574()
{
  return *(void *)(v0 + 16) < *(void *)(*(void *)(v0 + 24) + 16LL);
}

uint64_t sub_1000DF5AC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  if (*(void *)(v5 + 16))
  {
    id v6 = a1;
    swift_bridgeObjectRetain(v5);
    unint64_t v7 = sub_10000ED5C();
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v5 + 56);
      uint64_t v11 = sub_1000E0E9C();
      sub_10006D0D4(v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * v9, a2);
      uint64_t v12 = a2;
      uint64_t v13 = 0LL;
      uint64_t v14 = 1LL;
      uint64_t v15 = v11;
    }

    else
    {
      sub_1000E0E9C();
      uint64_t v12 = sub_100080A44();
    }

    sub_100009654(v12, v13, v14, v15);

    return sub_100009B3C();
  }

  else
  {
    sub_1000E0E9C();
    uint64_t v16 = sub_100080A44();
    return sub_100009654(v16, v17, v18, v19);
  }

void sub_1000DF678(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D4680);
  __chkstk_darwin(v4);
  id v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_10006D0D4(a2, (uint64_t)v6);
  uint64_t v7 = sub_1000E0E9C();
  sub_100009654((uint64_t)v6, 0LL, 1LL, v7);
  sub_1000E0E84();
  id v8 = a1;
  sub_1000D9624();
  swift_endAccess(v10);
  sub_1000110D4();
}

void sub_1000DF718(void *a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D4680);
  __chkstk_darwin(v2);
  uint64_t v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = sub_1000E0E9C();
  sub_100009654((uint64_t)v4, 1LL, 1LL, v5);
  sub_1000E0E84();
  id v6 = a1;
  sub_1000D9624();
  swift_endAccess(v8);
  sub_1000110D4();
}

uint64_t sub_1000DF7A8()
{
  unint64_t v1 = sub_10006D170();
  uint64_t v2 = sub_1000E0E9C();
  unint64_t v3 = sub_10006D1AC();
  uint64_t v4 = Dictionary.init(dictionaryLiteral:)(_swiftEmptyArrayStorage, v1, v2, v3);
  sub_100010BE4(v0 + 24, (uint64_t)v6, 1LL);
  *(void *)(v0 + 24) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000DF820()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for TopicCacheInMemoryImpl()
{
  return objc_opt_self(&OBJC_CLASS____TtC7parsecd22TopicCacheInMemoryImpl);
}

void sub_1000DF864(size_t *a1)
{
  uint64_t v2 = *(void *)(sub_10000941C(&qword_1001D5D80) - 8);
  size_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    size_t v3 = sub_1000DE1A8(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1000DF970(v5);
  *a1 = v3;
}

uint64_t sub_1000DF8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000941C(&qword_1001D5D80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DF930(uint64_t a1)
{
  uint64_t v2 = sub_10000941C(&qword_1001D5D80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1000DF970(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v178 = type metadata accessor for Date(0LL);
  uint64_t v169 = *(void *)(v178 - 8);
  uint64_t v4 = __chkstk_darwin(v178);
  uint64_t v177 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v176 = (char *)&v159 - v6;
  uint64_t v181 = sub_10000941C(&qword_1001D5D80);
  uint64_t v167 = *(void *)(v181 - 8);
  uint64_t v7 = __chkstk_darwin(v181);
  uint64_t v165 = (uint64_t)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v182 = (uint64_t)&v159 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v175 = (uint64_t *)((char *)&v159 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v174 = (uint64_t *)((char *)&v159 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v173 = (uint64_t *)((char *)&v159 - v16);
  __chkstk_darwin(v15);
  uint64_t v179 = (uint64_t *)((char *)&v159 - v17);
  Swift::Int v18 = a1[1];
  Swift::Int v19 = _minimumMergeRunLength(_:)(v18);
  if (v19 >= v18)
  {
    if ((v18 & 0x8000000000000000LL) == 0)
    {
      if (v18) {
        sub_1000E0560(0LL, v18, 1LL, a1);
      }
      return;
    }

LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
    goto LABEL_145;
  }

  Swift::Int v20 = v19;
  uint64_t v161 = sub_1000AF904(v18 / 2);
  unint64_t v168 = v21;
  uint64_t v162 = v18;
  if (v18 <= 0)
  {
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    unint64_t v96 = _swiftEmptyArrayStorage[2];
LABEL_103:
    if (v96 < 2) {
      goto LABEL_117;
    }
    Swift::Int v149 = *a1;
    uint64_t v150 = v167;
    while (1)
    {
      unint64_t v151 = v96 - 2;
      if (v96 < 2) {
        break;
      }
      if (!v149) {
        goto LABEL_149;
      }
      uint64_t v152 = (uint64_t)v23;
      uint64_t v153 = v23 + 32;
      uint64_t v154 = *(void *)&v23[16 * v151 + 32];
      uint64_t v155 = *(void *)&v23[16 * v96 + 24];
      sub_1000E08B4( v149 + *(void *)(v150 + 72) * v154,  v149 + *(void *)(v150 + 72) * v153[2 * v96 - 2],  v149 + *(void *)(v150 + 72) * v155,  v168);
      if (v2) {
        goto LABEL_115;
      }
      if (v155 < v154) {
        goto LABEL_136;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v152) & 1) == 0)
      {
        sub_1000DD478(v152);
        uint64_t v152 = v158;
      }

      if (v151 >= *(void *)(v152 + 16)) {
        goto LABEL_137;
      }
      unint64_t v156 = (void *)(v152 + 32 + 16 * v151);
      *unint64_t v156 = v154;
      v156[1] = v155;
      unint64_t v157 = *(void *)(v152 + 16);
      if (v96 > v157) {
        goto LABEL_138;
      }
      uint64_t v23 = (char *)v152;
      memmove((void *)(v152 + 32 + 16 * (v96 - 1)), (const void *)(v152 + 32 + 16 * v96), 16 * (v157 - v96));
      *(void *)(v152 + swift_unknownObjectWeakDestroy(v0 + 16) = v157 - 1;
      unint64_t v96 = v157 - 1;
      if (v157 <= 2) {
        goto LABEL_117;
      }
    }

LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }

  Swift::Int v160 = v20;
  uint64_t v22 = 0LL;
  uint64_t v23 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v24 = v18;
  uint64_t v186 = a1;
  while (1)
  {
    uint64_t v163 = v23;
    uint64_t v25 = v22 + 1;
    uint64_t v166 = v22;
    if (v22 + 1 >= v24)
    {
      uint64_t v23 = v163;
    }

    else
    {
      Swift::Int v164 = *a1;
      Swift::Int v26 = v164;
      uint64_t v27 = *(void *)(v167 + 72);
      uint64_t v185 = v27;
      uint64_t v171 = v22 + 1;
      uint64_t v28 = v179;
      sub_1000DF8E8(v164 + v27 * v25, (uint64_t)v179);
      uint64_t v29 = v173;
      sub_1000DF8E8(v26 + v27 * v166, (uint64_t)v173);
      uint64_t v30 = v181;
      uint64_t v31 = *(int *)(v181 + 48);
      uint64_t v32 = (uint64_t)v174 + v31;
      void *v174 = *v28;
      sub_10006D0D4((uint64_t)v28 + v31, v32);
      unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v169 + 16);
      uint64_t v34 = v176;
      uint64_t v35 = v178;
      v33(v176, v32, v178);
      sub_10006D098(v32);
      uint64_t v36 = *(int *)(v30 + 48);
      uint64_t v37 = (uint64_t)v175 + v36;
      *uint64_t v175 = *v29;
      sub_10006D0D4((uint64_t)v29 + v36, v37);
      uint64_t v38 = v177;
      uint64_t v183 = v33;
      v33(v177, v37, v35);
      sub_10006D098(v37);
      LODWORD(v184) = static Date.< infix(_:_:)(v34, v38);
      uint64_t v39 = *(void (**)(char *, uint64_t))(v169 + 8);
      v39(v38, v35);
      uint64_t v180 = (char *)v39;
      v39(v34, v35);
      uint64_t v40 = (uint64_t)v29;
      Swift::Int v41 = v164;
      sub_1000DF930(v40);
      sub_1000DF930((uint64_t)v179);
      uint64_t v42 = v185;
      uint64_t v22 = v166;
      uint64_t v25 = v166 + 2;
      if (v166 + 2 < v24)
      {
        uint64_t v159 = v2;
        uint64_t v170 = v185 * v25;
        v171 *= v185;
        uint64_t v172 = v24;
        while (1)
        {
          uint64_t v43 = v25;
          unint64_t v44 = v179;
          sub_1000DF8E8(v41 + v170, (uint64_t)v179);
          BOOL v45 = v173;
          sub_1000DF8E8(v41 + v171, (uint64_t)v173);
          uint64_t v46 = v181;
          uint64_t v47 = *(int *)(v181 + 48);
          uint64_t v48 = (uint64_t)v174 + v47;
          void *v174 = *v44;
          sub_10006D0D4((uint64_t)v44 + v47, v48);
          BOOL v49 = v176;
          uint64_t v50 = v178;
          unint64_t v51 = v183;
          v183(v176, v48, v178);
          sub_10006D098(v48);
          uint64_t v52 = *(int *)(v46 + 48);
          uint64_t v53 = (uint64_t)v175 + v52;
          *uint64_t v175 = *v45;
          sub_10006D0D4((uint64_t)v45 + v52, v53);
          unint64_t v54 = v177;
          v51(v177, v53, v50);
          sub_10006D098(v53);
          LODWORD(v53) = static Date.< infix(_:_:)(v49, v54);
          uint64_t v55 = v180;
          ((void (*)(char *, uint64_t))v180)(v54, v50);
          ((void (*)(char *, uint64_t))v55)(v49, v50);
          sub_1000DF930((uint64_t)v45);
          sub_1000DF930((uint64_t)v44);
          uint64_t v25 = v43 + 1;
          uint64_t v42 = v185;
          v41 += v185;
          Swift::Int v24 = v172;
          if (v25 >= v172)
          {
            uint64_t v25 = v172;
            a1 = v186;
            uint64_t v2 = v159;
            uint64_t v22 = v166;
            goto LABEL_12;
          }
        }

        a1 = v186;
        uint64_t v2 = v159;
        uint64_t v25 = v43;
        uint64_t v22 = v166;
        Swift::Int v24 = v172;
        uint64_t v42 = v185;
      }

LABEL_115:
  swift_bridgeObjectRelease();
  if (v162 >= -1) {
    goto LABEL_118;
  }
  __break(1u);
LABEL_117:
  swift_bridgeObjectRelease();
  if (v162 >= -1)
  {
LABEL_118:
    *(void *)(v161 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    swift_bridgeObjectRelease();
    return;
  }

LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
}

uint64_t sub_1000E0560(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v51 = (char *)&v44 - v10;
  uint64_t v59 = sub_10000941C(&qword_1001D5D80);
  uint64_t v11 = __chkstk_darwin(v59);
  uint64_t v60 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v50 = (uint64_t *)((char *)&v44 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  BOOL v49 = (uint64_t *)((char *)&v44 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v48 = (char *)&v44 - v18;
  uint64_t result = __chkstk_darwin(v17);
  uint64_t v47 = (char *)&v44 - v21;
  uint64_t v58 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *(void *)(v20 + 72);
    uint64_t v23 = v22 * (v58 - 1);
    uint64_t v55 = v22;
    uint64_t v24 = v22 * v58;
    unint64_t v63 = a4;
    uint64_t v25 = v47;
    Swift::Int v26 = v48;
    uint64_t v27 = v54;
    while (2)
    {
      uint64_t v28 = 0LL;
      uint64_t v64 = v46;
      uint64_t v56 = v24;
      uint64_t v57 = v23;
      do
      {
        uint64_t v29 = *a4;
        uint64_t v62 = v24 + v28;
        sub_1000DF8E8(v24 + v28 + v29, (uint64_t)v25);
        uint64_t v61 = v23 + v28;
        sub_1000DF8E8(v23 + v28 + v29, (uint64_t)v26);
        uint64_t v30 = v59;
        uint64_t v31 = *(int *)(v59 + 48);
        uint64_t v32 = (uint64_t)v49 + v31;
        *BOOL v49 = *v25;
        sub_10006D0D4((uint64_t)v25 + v31, v32);
        uint64_t v33 = v53;
        uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
        uint64_t v35 = v51;
        v34(v51, v32, v27);
        sub_10006D098(v32);
        uint64_t v36 = *(int *)(v30 + 48);
        uint64_t v37 = (uint64_t)v50 + v36;
        *uint64_t v50 = *v26;
        sub_10006D0D4((uint64_t)v26 + v36, v37);
        uint64_t v38 = v52;
        v34(v52, v37, v27);
        sub_10006D098(v37);
        LOBYTE(v37) = static Date.< infix(_:_:)(v35, v38);
        uint64_t v39 = *(void (**)(char *, uint64_t))(v33 + 8);
        uint64_t v24 = v56;
        v39(v38, v27);
        uint64_t v40 = v35;
        uint64_t v23 = v57;
        v39(v40, v27);
        a4 = v63;
        sub_1000DF930((uint64_t)v26);
        uint64_t result = sub_1000DF930((uint64_t)v25);
        if ((v37 & 1) == 0) {
          break;
        }
        uint64_t v41 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }

        uint64_t v42 = v41 + v24 + v28;
        uint64_t v43 = v41 + v23 + v28;
        sub_1000DE160(v42, v60);
        swift_arrayInitWithTakeFrontToBack(v42, v43, 1LL, v59);
        uint64_t result = sub_1000DE160(v60, v43);
        v28 -= v55;
        ++v64;
        a4 = v63;
      }

      while (v58 != v64);
      v23 += v55;
      v24 += v55;
      if (++v58 != v45) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_1000E08B4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v88 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v87 = (char *)&v76 - v11;
  uint64_t v94 = sub_10000941C(&qword_1001D5D80);
  uint64_t v12 = __chkstk_darwin(v94);
  uint64_t v86 = (uint64_t *)((char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v85 = (uint64_t *)((char *)&v76 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (uint64_t *)((char *)&v76 - v17);
  __chkstk_darwin(v16);
  uint64_t v83 = (char *)&v76 - v19;
  uint64_t v20 = *(void *)(v18 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }

  int64_t v21 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_77;
  }
  int64_t v23 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v20 == -1) {
    goto LABEL_78;
  }
  uint64_t v25 = v21 / v20;
  uint64_t v26 = v23 / v20;
  uint64_t v82 = *(void *)(v18 + 72);
  if (v21 / v20 >= v23 / v20)
  {
    sub_1000DAD50(a2, v23 / v20);
    uint64_t v49 = v26 * v20;
    unint64_t v50 = a2;
    unint64_t v27 = a4 + v49;
    if (v49 >= 1 && a1 < a2)
    {
      unint64_t v77 = a1;
      uint64_t v78 = -v20;
      unint64_t v92 = a4;
      uint64_t v52 = v83;
      do
      {
        unint64_t v91 = v27;
        uint64_t v53 = v78;
        unint64_t v93 = a3 + v78;
        unint64_t v80 = v27 + v78;
        unint64_t v81 = a3;
        sub_1000DF8E8(v27 + v78, (uint64_t)v52);
        uint64_t v54 = v50 + v53;
        unint64_t v79 = v50 + v53;
        uint64_t v55 = v84;
        sub_1000DF8E8(v54, (uint64_t)v84);
        uint64_t v56 = v94;
        uint64_t v57 = *(int *)(v94 + 48);
        uint64_t v58 = (uint64_t)v85 + v57;
        *uint64_t v85 = *v52;
        sub_10006D0D4((uint64_t)v52 + v57, v58);
        uint64_t v59 = v89;
        uint64_t v60 = v90;
        uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
        uint64_t v62 = v87;
        v61(v87, v58, v90);
        sub_10006D098(v58);
        uint64_t v63 = *(int *)(v56 + 48);
        uint64_t v64 = (uint64_t)v86 + v63;
        *uint64_t v86 = *v55;
        sub_10006D0D4((uint64_t)v55 + v63, v64);
        Swift::Int v65 = v88;
        v61(v88, v64, v60);
        sub_10006D098(v64);
        LOBYTE(v64) = static Date.< infix(_:_:)(v62, v65);
        uint64_t v66 = *(void (**)(char *, uint64_t))(v59 + 8);
        v66(v65, v60);
        v66(v62, v60);
        sub_1000DF930((uint64_t)v55);
        sub_1000DF930((uint64_t)v52);
        if ((v64 & 1) != 0)
        {
          unint64_t v67 = v91;
          a3 = v93;
          if (v81 < v50 || v93 >= v50)
          {
            unint64_t v50 = v79;
            swift_arrayInitWithTakeFrontToBack(v93, v79, 1LL, v94);
            a4 = v92;
            unint64_t v69 = v77;
          }

          else
          {
            unint64_t v69 = v77;
            if (v81 == v50)
            {
              unint64_t v50 = v79;
            }

            else
            {
              unint64_t v50 = v79;
              swift_arrayInitWithTakeBackToFront(v93, v79, 1LL, v94);
            }

            a4 = v92;
          }

          uint64_t v20 = v82;
          unint64_t v27 = v67;
        }

        else
        {
          a3 = v93;
          if (v81 < v91 || v93 >= v91)
          {
            unint64_t v71 = v80;
            swift_arrayInitWithTakeFrontToBack(v93, v80, 1LL, v94);
            unint64_t v27 = v71;
            a4 = v92;
            unint64_t v69 = v77;
          }

          else
          {
            unint64_t v69 = v77;
            if (v81 == v91)
            {
              unint64_t v27 = v80;
            }

            else
            {
              unint64_t v72 = v80;
              swift_arrayInitWithTakeBackToFront(v93, v80, 1LL, v94);
              unint64_t v27 = v72;
            }

            a4 = v92;
          }

          uint64_t v20 = v82;
        }
      }

      while (v27 > a4 && v50 > v69);
    }
  }

  else
  {
    sub_1000DAD50(a1, v21 / v20);
    unint64_t v27 = a4 + v25 * v20;
    if (v25 * v20 >= 1 && a2 < a3)
    {
      uint64_t v29 = a2;
      unint64_t v91 = a4 + v25 * v20;
      unint64_t v93 = a3;
      uint64_t v31 = v83;
      uint64_t v30 = v84;
      uint64_t v32 = v87;
      do
      {
        unint64_t v92 = a4;
        unint64_t v81 = v29;
        sub_1000DF8E8(v29, (uint64_t)v31);
        sub_1000DF8E8(a4, (uint64_t)v30);
        uint64_t v33 = v94;
        uint64_t v34 = *(int *)(v94 + 48);
        uint64_t v35 = (uint64_t)v85 + v34;
        *uint64_t v85 = *v31;
        sub_10006D0D4((uint64_t)v31 + v34, v35);
        uint64_t v37 = v89;
        uint64_t v36 = v90;
        uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
        v38(v32, v35, v90);
        sub_10006D098(v35);
        uint64_t v39 = *(int *)(v33 + 48);
        uint64_t v40 = (uint64_t)v86 + v39;
        *uint64_t v86 = *v30;
        sub_10006D0D4((uint64_t)v30 + v39, v40);
        uint64_t v41 = v88;
        v38(v88, v40, v36);
        sub_10006D098(v40);
        LOBYTE(v4sub_1000AC280(v0, v1, 0) = static Date.< infix(_:_:)(v32, v41);
        uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
        v42(v41, v36);
        v42(v32, v36);
        sub_1000DF930((uint64_t)v30);
        sub_1000DF930((uint64_t)v31);
        if ((v40 & 1) != 0)
        {
          unint64_t v43 = v81;
          uint64_t v20 = v82;
          unint64_t v44 = v81 + v82;
          BOOL v45 = a1 < v81 || a1 >= v44;
          a4 = v92;
          if (!v45)
          {
            unint64_t v46 = v93;
            if (a1 != v81) {
              swift_arrayInitWithTakeBackToFront(a1, v81, 1LL, v94);
            }
            unint64_t v27 = v91;
            goto LABEL_33;
          }
        }

        else
        {
          unint64_t v44 = v81;
          uint64_t v20 = v82;
          unint64_t v43 = v92;
          a4 = v92 + v82;
          if (a1 >= v92 && a1 < a4)
          {
            if (a1 != v92) {
              swift_arrayInitWithTakeBackToFront(a1, v92, 1LL, v94);
            }
            goto LABEL_32;
          }
        }

        swift_arrayInitWithTakeFrontToBack(a1, v43, 1LL, v94);
LABEL_32:
        unint64_t v27 = v91;
        unint64_t v46 = v93;
LABEL_33:
        a1 += v20;
        BOOL v48 = a4 >= v27 || v44 >= v46;
        uint64_t v29 = v44;
      }

      while (!v48);
    }
  }

  int64_t v74 = v27 - a4;
  if (v20 != -1 || v74 != 0x8000000000000000LL)
  {
    sub_1000DAD50(a4, v74 / v20);
    return;
  }

LABEL_79:
  __break(1u);
}

    if ((v91 & 1) != 0) {
      goto LABEL_129;
    }
    unint64_t v99 = &v66[2 * v68];
    uint64_t v101 = *v99;
    unint64_t v100 = v99[1];
    unint64_t v79 = __OFSUB__(v100, v101);
    uint64_t v102 = v100 - v101;
    if (v79) {
      goto LABEL_131;
    }
    if (v102 < v90) {
      goto LABEL_96;
    }
LABEL_87:
    uint64_t v107 = v68 - 1;
    if (v68 - 1 >= v65)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }

    if (!*v141) {
      goto LABEL_146;
    }
    uint64_t v108 = v15;
    uint64_t v109 = v16;
    uint64_t v110 = &v66[2 * v107];
    BOOL v111 = v66;
    unint64_t v112 = *v110;
    uint64_t v113 = v111;
    uint64_t v114 = &v111[2 * v68];
    uint64_t v115 = v114[1];
    uint64_t v116 = v137;
    sub_10014AFBC( *v141 + *(void *)(v136 + 72) * *v110,  *v141 + *(void *)(v136 + 72) * *v114,  *v141 + *(void *)(v136 + 72) * v115,  v135);
    uint64_t v137 = v116;
    if (v116) {
      break;
    }
    if (v115 < v112) {
      goto LABEL_120;
    }
    if (v68 > *((void *)v109 + 2)) {
      goto LABEL_121;
    }
    os_log_s *v110 = v112;
    v113[2 * v107 + 1] = v115;
    uint64_t v117 = *((void *)v109 + 2);
    if (v68 >= v117) {
      goto LABEL_122;
    }
    uint64_t v66 = v113;
    uint64_t v16 = v109;
    Swift::Int v65 = v117 - 1;
    memmove(v114, v114 + 2, 16 * (v117 - 1 - v68));
    *((void *)v109 + 2) = v117 - 1;
    uint64_t v15 = v108;
    if (v117 <= 2) {
      goto LABEL_96;
    }
  }

  uint64_t v11 = v131;
  uint64_t v2 = v137;
LABEL_102:
  swift_bridgeObjectRelease();
  if (v11 < -1)
  {
    __break(1u);
    goto LABEL_104;
  }

uint64_t sub_1000E0E84()
{
  return swift_beginAccess(v0 + 24, v1 - 56, 33LL, 0LL);
}

uint64_t sub_1000E0E9C()
{
  return type metadata accessor for TopicCacheEntry(0LL);
}

uint64_t sub_1000E0EA4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7365756C6176LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = sub_10005A06C(0x7365756C6176LL, 0xE600000000000000LL, a1, a2);
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t sub_1000E0F1C()
{
  return 0x7365756C6176LL;
}

uint64_t sub_1000E0F30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_1000E0EA4(a1, a2);
  *a3 = result != 0;
  return result;
}

void sub_1000E0F5C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000E0F68(uint64_t a1)
{
  unint64_t v2 = sub_1000E32C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E0F90(uint64_t a1)
{
  unint64_t v2 = sub_1000E32C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EnumModel.values.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

Swift::Void (__swiftcall *SchemaMismatchError.expected.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t EnumModel.nextAvailableValue.getter(uint64_t a1)
{
  uint64_t result = sub_1000D1AF0(a1, &v16);
  int64_t v3 = v19;
  unint64_t v4 = v20;
  int64_t v5 = (unint64_t)(v18 + 64) >> 6;
  uint64_t v6 = 1LL;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v8 = v7 | (v3 << 6);
  while (1)
  {
    int v13 = *(_DWORD *)(*(void *)(v16 + 56) + 4 * v8);
    BOOL v14 = __OFADD__(v13, 1);
    int v15 = v13 + 1;
    if (v14) {
      break;
    }
    else {
      uint64_t v6 = v15;
    }
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1LL)) {
      goto LABEL_29;
    }
    if (v9 >= v5) {
      goto LABEL_27;
    }
    unint64_t v10 = *(void *)(v17 + 8 * v9);
    int64_t v11 = v3 + 1;
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v5) {
        goto LABEL_27;
      }
      unint64_t v10 = *(void *)(v17 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v3 + 3;
        if (v3 + 3 >= v5) {
          goto LABEL_27;
        }
        unint64_t v10 = *(void *)(v17 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v3 + 4;
          if (v3 + 4 >= v5) {
            goto LABEL_27;
          }
          unint64_t v10 = *(void *)(v17 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v3 + 5;
            if (v3 + 5 >= v5) {
              goto LABEL_27;
            }
            unint64_t v10 = *(void *)(v17 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v3 + 6;
              if (v3 + 6 >= v5) {
                goto LABEL_27;
              }
              unint64_t v10 = *(void *)(v17 + 8 * v11);
              if (!v10)
              {
                int64_t v12 = v3 + 7;
                while (v12 < v5)
                {
                  unint64_t v10 = *(void *)(v17 + 8 * v12++);
                  if (v10)
                  {
                    int64_t v11 = v12 - 1;
                    goto LABEL_20;
                  }
                }

void *EnumModel.init(from:)(void *a1)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  unint64_t v7 = sub_100019AFC(a1, v5);
  unint64_t v8 = sub_1000E32C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EnumModel.CodingKeys,  &type metadata for EnumModel.CodingKeys,  v8,  v5,  v6);
  if (v1)
  {
    sub_1000E3700();
  }

  else
  {
    uint64_t v9 = sub_10000941C(&qword_1001D7E90);
    uint64_t v10 = sub_1000E3304( &qword_1001D7E98,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int32,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v9, v11, v2, v9, v10);
    unint64_t v7 = v13;
    if (!v13) {
      unint64_t v7 = (void *)Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int32,  &protocol witness table for String);
    }
    sub_1000E3618();
    sub_1000E3700();
  }

  return v7;
}

uint64_t EnumModel.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100019AFC(a1, v6);
  unint64_t v8 = sub_1000E32C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for EnumModel.CodingKeys,  &type metadata for EnumModel.CodingKeys,  v8,  v6,  v7);
  if (*(void *)(a2 + 16))
  {
    uint64_t v11 = a2;
    sub_10000941C(&qword_1001D7E90);
    sub_1000E3304( &qword_1001D7EA8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int32,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v11, v9, v2);
  }

  return sub_1000E3618();
}

uint64_t sub_1000E13A0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1LL;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v4 = 0LL;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }

    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1LL;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1LL;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }

uint64_t sub_1000E1534(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  sub_1000E35E4();
  if (v4)
  {
    uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
    uint64_t v6 = -1LL;
    if (v5 < 64) {
      uint64_t v6 = ~(-1LL << v5);
    }
    int64_t v25 = (unint64_t)(v5 + 63) >> 6;
    if ((v6 & *(void *)(a1 + 64)) != 0)
    {
      sub_1000E36E0();
      uint64_t v9 = v7 | (v8 << 6);
LABEL_20:
      int64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = *(void *)(a1 + 56) + 24 * v9;
      unint64_t v19 = *(void **)v17;
      uint64_t v18 = *(void *)(v17 + 8);
      char v20 = *(_BYTE *)(v17 + 16);
      swift_bridgeObjectRetain(v16);
      sub_1000E34EC(v19, v18, v20);
      unint64_t v21 = sub_10000EC64(v15, v16);
      char v23 = v22;
      sub_1000145F0();
      if ((v23 & 1) != 0) {
        __asm { BR              X8 }
      }

      sub_1000E3528(v19, v18, v20);
      return 0LL;
    }

    if ((unint64_t)(v5 + 63) >> 6 > 1)
    {
      if (*(void *)(a1 + 72)) {
        goto LABEL_19;
      }
      if ((unint64_t)(v5 + 63) >> 6 > 2)
      {
        if (*(void *)(a1 + 80)) {
          goto LABEL_19;
        }
        if ((unint64_t)(v5 + 63) >> 6 > 3)
        {
          if (*(void *)(a1 + 88)) {
            goto LABEL_19;
          }
          uint64_t v10 = 4LL;
          if (v25 > 4)
          {
            if (!*(void *)(a1 + 96))
            {
              do
              {
                int64_t v11 = v10 + 1;
                if (__OFADD__(v10, 1LL))
                {
                  __break(1u);
                  JUMPOUT(0x1000E23E8LL);
                }

                if (v11 >= v25) {
                  return 1LL;
                }
                ++v10;
              }

              while (!*(void *)(a1 + 64 + 8 * v11));
            }

uint64_t sub_1000E2460(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  sub_1000E35E4();
  if (v3)
  {
    sub_1000E35B4();
    if ((v6 & v5) != 0)
    {
      sub_1000E36E0();
      uint64_t v10 = v8 | (v9 << 6);
LABEL_24:
      swift_bridgeObjectRetain(*(void *)(*(void *)(v7 + 56) + 40 * v10 + 16));
      sub_10003EF98();
      unint64_t v21 = sub_10003F008();
      char v23 = v22;
      sub_1000110E0();
      if ((v23 & 1) != 0) {
        __asm { BR              X9 }
      }

      swift_bridgeObjectRelease();
      return 0LL;
    }

    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
    }

    else
    {
      sub_1000C5E08();
      if (v12 == v13) {
        return 1LL;
      }
      if (*(void *)(v25 + 8 * v11)) {
        goto LABEL_23;
      }
      sub_1000E366C();
      if (v12 == v13) {
        return 1LL;
      }
      sub_1000E36A4();
      if (v14) {
        goto LABEL_23;
      }
      sub_1000E366C();
      if (v12 == v13) {
        return 1LL;
      }
      sub_1000E36A4();
      if (v15) {
        goto LABEL_23;
      }
      sub_1000C5E08();
      if (v12 == v13) {
        return 1LL;
      }
      if (*(void *)(v25 + 8 * v16))
      {
LABEL_23:
        sub_1000E36C4();
        uint64_t v10 = v19 + (v20 << 6);
        goto LABEL_24;
      }

      while (!__OFADD__(v16, 1LL))
      {
        sub_1000E366C();
        if (v12 == v13) {
          return 1LL;
        }
        uint64_t v16 = v17 + 1;
        if (*(void *)(v25 + 8 * v18)) {
          goto LABEL_23;
        }
      }
    }

    __break(1u);
    JUMPOUT(0x1000E2878LL);
  }

  return 0LL;
}

void sub_1000E28D0(uint64_t a1, uint64_t a2)
{
}

void _s11Schematizer10OneOfModelV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_1000E35E4();
  if (!v5) {
    return;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  sub_1000E35F4();
  int64_t v9 = v8 >> 6;
  while (1)
  {
    if (v2)
    {
      sub_1000E3748();
      uint64_t v11 = v10 | (v6 << 6);
      goto LABEL_21;
    }

    uint64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v12 >= v9) {
      return;
    }
    ++v6;
    if (!*(void *)(v7 + 8 * v12))
    {
      uint64_t v6 = v12 + 1;
      if (v12 + 1 >= v9) {
        return;
      }
      if (!*(void *)(v7 + 8 * v6))
      {
        uint64_t v6 = v12 + 2;
        if (v12 + 2 >= v9) {
          return;
        }
        if (!*(void *)(v7 + 8 * v6)) {
          break;
        }
      }
    }

void sub_1000E2A2C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_1000E35E4();
  if (!v3) {
    return;
  }
  sub_1000E35B4();
  unint64_t v8 = v7 & v6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v37 = v5;
      unint64_t v10 = v9 | (v5 << 6);
      goto LABEL_26;
    }

    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    sub_1000C5E08();
    if (v12 == v13) {
      return;
    }
    unint64_t v14 = *(void *)(v36 + 8 * v11);
    uint64_t v15 = v11;
    if (!v14)
    {
      sub_1000E366C();
      if (v12 == v13) {
        return;
      }
      sub_1000E36A4();
      if (!v14)
      {
        sub_1000E366C();
        if (v12 == v13) {
          return;
        }
        sub_1000E36A4();
        if (!v14) {
          break;
        }
      }
    }

void sub_1000E2C78(uint64_t a1, uint64_t a2)
{
}

void sub_1000E2C84(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_1000E35E4();
  if (!v5) {
    return;
  }
  uint64_t v6 = v4;
  uint64_t v7 = 0LL;
  uint64_t v8 = a1 + 64;
  sub_1000E35F4();
  int64_t v20 = v9 >> 6;
  while (1)
  {
    if (v2)
    {
      sub_1000E3748();
      uint64_t v11 = v10 | (v7 << 6);
      goto LABEL_21;
    }

    uint64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v20) {
      return;
    }
    ++v7;
    if (!*(void *)(v8 + 8 * v12))
    {
      uint64_t v7 = v12 + 1;
      if (v12 + 1 >= v20) {
        return;
      }
      if (!*(void *)(v8 + 8 * v7))
      {
        uint64_t v7 = v12 + 2;
        if (v12 + 2 >= v20) {
          return;
        }
        if (!*(void *)(v8 + 8 * v7)) {
          break;
        }
      }
    }

void *sub_1000E2E10@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = EnumModel.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000E2E38(void *a1)
{
  return EnumModel.encode(to:)(a1, *v1);
}

uint64_t sub_1000E2E50(void *a1, void *a2)
{
  return static EnumModel.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t EnumModel.init(_:)(void *a1)
{
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int32,  &protocol witness table for String);
  sub_100019AFC(a1, a1[3]);
  uint64_t v3 = sub_1000E36F4();
  uint64_t v5 = v4(v3);
  uint64_t v8[2] = &v9;
  v8[3] = a1;
  sub_1000E2FB8((uint64_t)sub_1000E3368, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v9;
  if (v1) {
    swift_bridgeObjectRelease();
  }
  sub_1000E3700();
  return v6;
}

uint64_t sub_1000E2F28(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  sub_100019AFC(a3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v6);
  if (!v3)
  {
    sub_1000FBAD8();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1000E2FB8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v15 = *(void *)(a3 + 16);
  if (v15)
  {
    uint64_t v6 = (uint64_t (*)(int *))result;
    uint64_t v7 = a3 + 32;
    uint64_t result = swift_bridgeObjectRetain(a3);
    uint64_t v8 = 0LL;
    uint64_t v14 = v7;
LABEL_3:
    uint64_t v9 = (int *)(v7 + 8 * v8);
    int v11 = *v9;
    int v10 = v9[1];
    ++v8;
    while (1)
    {
      if (v11 == v10)
      {
        int v12 = 0;
      }

      else
      {
        if (v11 == 0x7FFFFFFF)
        {
          __break(1u);
          return result;
        }

        int v12 = v11 + 1;
      }

      int v16 = v11;
      uint64_t result = v6(&v16);
      if (v4) {
        return swift_bridgeObjectRelease(a3);
      }
      BOOL v13 = v11 == v10;
      int v11 = v12;
      if (v13)
      {
        uint64_t v7 = v14;
        if (v8 != v15) {
          goto LABEL_3;
        }
        return swift_bridgeObjectRelease(a3);
      }
    }
  }

  return result;
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.impl()
{
  uint64_t v0 = type metadata accessor for Schematizer();
  uint64_t v1 = swift_allocObject(v0, 32LL, 7LL);
  uint64_t v2 = type metadata accessor for ProtoSchemaStore();
  swift_allocObject(v2, 64LL, 7LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v1 + 24) = &protocol witness table for ProtoSchemaStore;
  return v1;
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.queryTimeFrameGuideline()
{
  uint64_t v0 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = static Date.distantPast.getter(v5);
  double v9 = Date.timeIntervalSince1970.getter(v8);
  int v10 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  uint64_t v11 = v10(v7, v0);
  uint64_t v12 = static Date.distantFuture.getter(v11);
  double v13 = Date.timeIntervalSince1970.getter(v12);
  uint64_t result = v10(v4, v0);
  if (v9 > v13) {
    __break(1u);
  }
  return result;
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.functions()
{
  uint64_t v0 = sub_10000941C(&qword_1001D7EB0);
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

void *BiomeTablesProvider.requiredEnums.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t IntegerSet.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = type metadata accessor for ClosedRange(0LL, a1, *(void *)(*(void *)(*(void *)(a2 + 8) + 32LL) + 8LL));
  return static Array._allocateUninitialized(_:)(0LL, v2);
}

uint64_t variable initialization expression of SQLiteMessageTypeRegistry.messageIds()
{
  return Dictionary.init(dictionaryLiteral:)( &_swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
}

uint64_t variable initialization expression of ProtoSchemaStore.enums()
{
  uint64_t v0 = type metadata accessor for ProtoEnum();
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

uint64_t variable initialization expression of ProtoSchemaStore.schemas()
{
  uint64_t v0 = type metadata accessor for ProtoMessageSchema();
  return Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  v0,  &protocol witness table for String);
}

unint64_t sub_1000E32C8()
{
  unint64_t result = qword_1001D7E88;
  if (!qword_1001D7E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164134, &type metadata for EnumModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7E88);
  }

  return result;
}

uint64_t sub_1000E3304(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000094A0(&qword_1001D7E90);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000E3368(unsigned int *a1)
{
  return sub_1000E2F28(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

ValueMetadata *type metadata accessor for EnumModel()
{
  return &type metadata for EnumModel;
}

uint64_t storeEnumTagSinglePayload for EnumModel.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000E33D0 + 4 * byte_100163FC8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000E33F0 + 4 * byte_100163FCD[v4]))();
  }
}

_BYTE *sub_1000E33D0(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1000E33F0(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000E33F8(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000E3400(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000E3408(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000E3410(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EnumModel.CodingKeys()
{
  return &type metadata for EnumModel.CodingKeys;
}

unint64_t sub_1000E3430()
{
  unint64_t result = qword_1001D7EB8;
  if (!qword_1001D7EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016410C, &type metadata for EnumModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7EB8);
  }

  return result;
}

unint64_t sub_1000E3470()
{
  unint64_t result = qword_1001D7EC0;
  if (!qword_1001D7EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016407C, &type metadata for EnumModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7EC0);
  }

  return result;
}

unint64_t sub_1000E34B0()
{
  unint64_t result = qword_1001D7EC8;
  if (!qword_1001D7EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001640A4, &type metadata for EnumModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7EC8);
  }

  return result;
}

id sub_1000E34EC(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      unint64_t result = result;
      break;
    case 1:
      unint64_t result = (id)swift_bridgeObjectRetain(a2);
      break;
    case 2:
    case 3:
      unint64_t result = (id)swift_bridgeObjectRetain(result);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1000E3528(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:

      break;
    case 1:
      swift_bridgeObjectRelease(a2);
      break;
    case 2:
    case 3:
      swift_bridgeObjectRelease(a1);
      break;
    default:
      return;
  }

void sub_1000E3564(void *a1, uint64_t a2)
{
}

uint64_t sub_1000E356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v5;
  sub_1000E34EC(v4, v7, 2);
  sub_1000E34EC(*(id *)(v6 - 168), v3, 2);
  return a3;
}

void sub_1000E35AC(void *a1, uint64_t a2)
{
}

  ;
}

id sub_1000E35DC(void *a1, uint64_t a2)
{
  return sub_1000E34EC(a1, a2, 2);
}

  ;
}

  ;
}

uint64_t sub_1000E3618()
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void sub_1000E3628(void *a1, uint64_t a2)
{
}

id sub_1000E3630(void *a1)
{
  return sub_1000E34EC(a1, v1, 0);
}

void sub_1000E363C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
}

  ;
}

id sub_1000E3678(void *a1)
{
  return sub_1000E34EC(a1, v1, 0);
}

uint64_t sub_1000E3684()
{
  return v0;
}

uint64_t sub_1000E3694()
{
  return v0;
}

  ;
}

  ;
}

  ;
}

id sub_1000E36D8(void *a1, uint64_t a2)
{
  return sub_1000E34EC(a1, a2, 3);
}

  ;
}

uint64_t sub_1000E36F4()
{
  return v0;
}

uint64_t sub_1000E3700()
{
  return sub_1000108B8(v0);
}

uint64_t sub_1000E3708()
{
  return v0;
}

uint64_t sub_1000E3714(uint64_t a1)
{
  return static NSObject.== infix(_:_:)(a1, v1);
}

  ;
}

  ;
}

uint64_t sub_1000E373C()
{
  return v0;
}

  ;
}

uint64_t sub_1000E375C(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a1;
  uint64_t v7 = a4 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a4);
  int64_t v13 = 0LL;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    char v19 = (void *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v20 = v19[1];
    v22[0] = *v19;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
    a2(&v23, v22);
    if (v4)
    {
      uint64_t v21 = v23;
      swift_release(a4);
      swift_bridgeObjectRelease(v20);
      return swift_bridgeObjectRelease(v21);
    }

    uint64_t result = swift_bridgeObjectRelease(v20);
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v13 >= v11) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v17 - 1) & v17;
  }

  int64_t v18 = v13 + 1;
  if (v13 + 1 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 2;
  if (v13 + 2 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 3;
  if (v13 + 3 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 4;
  if (v13 + 4 >= v11)
  {
LABEL_26:
    swift_release(a4);
    return v23;
  }

  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v13 = v18;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v11) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }

uint64_t sub_1000E3920(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x69747265706F7270LL && a2 == 0xEA00000000007365LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007365LL);
    char v5 = 0;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69747265706F7270LL, 0xEA00000000007365LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    char v5 = v4 ^ 1;
  }

  return v5 & 1;
}

uint64_t sub_1000E39B0()
{
  return 0x69747265706F7270LL;
}

uint64_t sub_1000E39D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000E3920(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1000E39F8()
{
  return sub_10002A4F0();
}

uint64_t sub_1000E3A10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = static Optional<A>.sqlNullable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000E3A38(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3A60(uint64_t a1)
{
  unint64_t v2 = sub_1000E3B90();
  return CodingKey.debugDescription.getter(a1, v2);
}

void OneOfModel.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100019AFC(a1, v9);
  unint64_t v11 = sub_1000E3B90();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OneOfModel.CodingKeys,  &type metadata for OneOfModel.CodingKeys,  v11,  v9,  v10);
  uint64_t v14 = a2;
  sub_10000941C(&qword_1001D7EE0);
  sub_1000E3D0C( &qword_1001D7EE8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v14, v12, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  sub_10002FBAC();
}

unint64_t sub_1000E3B90()
{
  unint64_t result = qword_1001D7ED8;
  if (!qword_1001D7ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001642DC, &type metadata for OneOfModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7ED8);
  }

  return result;
}

void *OneOfModel.init(from:)(void *a1)
{
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = sub_100019AFC(a1, v8);
  unint64_t v11 = sub_1000E3B90();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OneOfModel.CodingKeys,  &type metadata for OneOfModel.CodingKeys,  v11,  v8,  v9);
  if (v1)
  {
    sub_1000108B8(a1);
  }

  else
  {
    uint64_t v12 = sub_10000941C(&qword_1001D7EE0);
    sub_1000E3D0C( &qword_1001D7EF8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v12, v13, v2, v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    uint64_t v10 = (void *)v15[1];
    sub_1000108B8(a1);
  }

  return v10;
}

uint64_t sub_1000E3D0C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_1000094A0(&qword_1001D7EE0);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

void *sub_1000E3D70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = OneOfModel.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void sub_1000E3D98(void *a1)
{
}

uint64_t sub_1000E3DB0(void *a1, void *a2)
{
  return static OneOfModel.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t OneOfModel.init(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100019AFC(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)( _swiftEmptyArrayStorage,  &type metadata for String,  &type metadata for Int,  &protocol witness table for String);
  uint64_t v8[2] = a1;
  uint64_t v6 = sub_1000E375C(v5, (void (*)(uint64_t *, void *))sub_1000E3F00, (uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  sub_1000108B8(a1);
  return v6;
}

void sub_1000E3E78(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  sub_100019AFC(a3, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 40);
  __n128 v9 = swift_bridgeObjectRetain(v4);
  v8(v5, v4, v6, v7, v9);
  if (!v3) {
    sub_1000FBB30();
  }
  swift_bridgeObjectRelease();
  sub_10002FBAC();
}

void sub_1000E3F00(uint64_t a1, uint64_t *a2)
{
}

ValueMetadata *type metadata accessor for OneOfModel()
{
  return &type metadata for OneOfModel;
}

uint64_t storeEnumTagSinglePayload for OneOfModel.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000E3F68 + 4 * byte_100164184[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000E3F88 + 4 * byte_100164189[v4]))();
  }
}

_BYTE *sub_1000E3F68(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1000E3F88(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000E3F90(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000E3F98(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1000E3FA0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1000E3FA8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OneOfModel.CodingKeys()
{
  return &type metadata for OneOfModel.CodingKeys;
}

unint64_t sub_1000E3FC8()
{
  unint64_t result = qword_1001D7F00;
  if (!qword_1001D7F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1001642B4, &type metadata for OneOfModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7F00);
  }

  return result;
}

unint64_t sub_1000E4008()
{
  unint64_t result = qword_1001D7F08;
  if (!qword_1001D7F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100164224, &type metadata for OneOfModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7F08);
  }

  return result;
}

unint64_t sub_1000E4048()
{
  unint64_t result = qword_1001D7F10;
  if (!qword_1001D7F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10016424C, &type metadata for OneOfModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1001D7F10);
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PObjFunction.perform(with:arguments:)( SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  BOOL v6 = SQLiteArgument.isNull.getter(v5);
  if (v6)
  {
    SQLiteContext.setNull()();
    return;
  }

  sub_1000E434C(v6);
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v8 = v7;
    uint64_t v10 = v9;
    swift_release();
    uint64_t v11 = SQLiteArgument.getData()(v5);
    if (v12 >> 60 == 15)
    {
      unint64_t v13 = sub_1000E4274();
      uint64_t v14 = sub_100010EA0((uint64_t)&type metadata for SQLiteError, v13);
      *(void *)(v15 + 8) = 0LL;
      *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
      *(void *)uint64_t v15 = 6LL;
      *(_BYTE *)(v15 + 24) = 4;
      swift_willThrow(v14);
LABEL_11:
      swift_unknownObjectRelease();
      return;
    }

    if (v3 >= 2)
    {
      uint64_t v16 = v11;
      unint64_t v17 = v12;
      Swift::String v18 = SQLiteArgument.getStringNonNull()();
      if (!v19)
      {
        uint64_t ObjectType = swift_getObjectType(v8);
        (*(void (**)(uint64_t, unint64_t, uint64_t, void *, void *, uint64_t, uint64_t))(v10 + 32))( v16,  v17,  v18._countAndFlagsBits,  v18._object,  with.context._rawValue,  ObjectType,  v10);
        swift_bridgeObjectRelease();
      }

      sub_100010A1C(v16, v17);
      goto LABEL_11;
    }

uint64_t PGetTimeWindowStartFunction.__allocating_init(_:)(uint64_t a1)
{
  return SQLiteSchematizerFunction.init(_:)(a1);
}

uint64_t PGetTimeWindowStartFunction.deinit()
{
  uint64_t v1 = SQLiteBaseFunction.deinit();
  sub_1000E4420(v1);
  return v0;
}

uint64_t PGetTimeWindowStartFunction.__deallocating_deinit()
{
  uint64_t v1 = SQLiteBaseFunction.deinit();
  sub_1000E4420(v1);
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

unint64_t sub_1000E4274()
{
  unint64_t result = qword_1001D7F18;
  if (!qword_1001D7F18)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SQLiteError, &type metadata for SQLiteError);
    atomic_store(result, (unint64_t *)&qword_1001D7F18);
  }

  return result;
}

uint64_t type metadata accessor for PObjFunction()
{
  return objc_opt_self(&OBJC_CLASS____TtC11Schematizer12PObjFunction);
}

void sub_1000E42D0(uint64_t a1)
{
}

void sub_1000E42E4(uint64_t a1)
{
  if (!swift_weakLoadStrong(v1 + 48))
  {
    unint64_t v2 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v2);
    sub_1000E43F0(v3, 0xD000000000000013LL);
  }

  sub_10004ECC0();
}

void sub_1000E434C(uint64_t a1)
{
  if (!swift_weakLoadStrong(v1 + 40))
  {
    unint64_t v2 = sub_1000E43B4();
    sub_100010EA0((uint64_t)&type metadata for SchemaError, v2);
    sub_1000E43F0(v3, 0xD000000000000013LL);
  }

  sub_10004ECC0();
}

unint64_t sub_1000E43B4()
{
  unint64_t result = qword_1001D8058;
  if (!qword_1001D8058)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SchemaError, &type metadata for SchemaError);
    atomic_store(result, (unint64_t *)&qword_1001D8058);
  }

  return result;
}

uint64_t sub_1000E43F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000LL;
  *(_BYTE *)(a1 + 4sub_1000A0380(v0, 1) = 3;
  return swift_willThrow();
}

uint64_t sub_1000E440C(uint64_t a1, ...)
{
  return swift_beginAccess(v1, va, 0LL, 0LL);
}

uint64_t sub_1000E4420(uint64_t a1)
{
  return swift_weakDestroy(a1 + 40);
}

uint64_t static SQLiteViewProvider.name.getter()
{
  return String.init<A>(describing:)(&v1);
}

uint64_t SQLiteViewProvider.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t SQLiteViewProvider.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  uint64_t v6 = v5;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v6);
}

uint64_t Array<A>.reloadAll(with:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v30 = result;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v8 = (uint64_t *)(a3 + 40);
    uint64_t v28 = a2;
    while (1)
    {
      uint64_t v10 = *(v8 - 1);
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType(v10);
      unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
      swift_unknownObjectRetain(v10);
      v12(v30, a2, ObjectType, v9);
      if (v4)
      {
        uint64_t v33 = v4;
        swift_errorRetain(v4);
        uint64_t v13 = sub_10000941C(&qword_1001D2B70);
        if (!swift_dynamicCast(&v32, &v33, v13, &type metadata for SQLiteViewProviderError, 0LL) || v32)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = swift_errorRelease(v33);
          swift_willThrow(v27);
          return sub_100077454();
        }

        uint64_t v29 = ObjectType;
        swift_errorRelease(v4);
        if (qword_1001D7E48 != -1) {
          swift_once(&qword_1001D7E48, sub_1000E6D78);
        }
        uint64_t v14 = type metadata accessor for Logger(0LL);
        sub_1000093D0(v14, (uint64_t)qword_1001EDEC0);
        uint64_t v15 = swift_unknownObjectRetain_n(v10, 2LL);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v21 = static os_log_type_t.info.getter(v16, v17, v18, v19, v20);
        if (os_log_type_enabled(v16, v21))
        {
          uint64_t v22 = swift_slowAlloc(12LL, -1LL);
          uint64_t v23 = swift_slowAlloc(32LL, -1LL);
          uint64_t v31 = v23;
          *(_DWORD *)uint64_t v22 = 136315138;
          uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v29, v9);
          *(void *)(v22 + 4) = sub_1000307E0(v24, v25, &v31);
          swift_unknownObjectRelease_n(v10, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v21,  "Schema file does not meet %s view provider requirements",  (uint8_t *)v22,  0xCu);
          swift_arrayDestroy(v23, 1LL);
          uint64_t v26 = v23;
          a2 = v28;
          sub_100010C34(v26);
          sub_100010C34(v22);
          sub_100077454();
        }

        else
        {

          swift_unknownObjectRelease_n(v10, 3LL);
        }

        swift_errorRelease(v33);
        uint64_t v4 = 0LL;
      }

      else
      {
        sub_100077454();
      }

      v8 += 2;
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return result;
}

uint64_t Array<A>.teardownAll()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(swift_bridgeObjectRetain(result) + 40);
    do
    {
      uint64_t v4 = *(v3 - 1);
      uint64_t v5 = *v3;
      uint64_t ObjectType = swift_getObjectType(v4);
      uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
      swift_unknownObjectRetain(v4);
      v7(ObjectType, v5);
      swift_unknownObjectRelease(v4);
      v3 += 2;
      --v1;
    }

    while (v1);
    return swift_bridgeObjectRelease(v2);
  }

  return result;
}

unint64_t sub_1000E4800()
{
  unint64_t result = qword_1001D8060;
  if (!qword_1001D8060)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SQLiteViewProviderError,  &type metadata for SQLiteViewProviderError);
    atomic_store(result, (unint64_t *)&qword_1001D8060);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SQLiteViewProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = 1;
  }
  else {
    LODWORD(Logger.init(subsystem:category:)(0xD000000000000011LL, 0x800000010016AB00LL, v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000E4888 + 4 * byte_100164355[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E48BC + 4 * asc_100164350[v4]))();
}

uint64_t sub_1000E48BC(uint64_t result)
{
  *(_BYTE *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000E48C4(uint64_t result, int a2)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E48CCLL);
  }
  return result;
}

uint64_t sub_1000E48D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E48E0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000E48E4(uint64_t result)
{
  *(_DWORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

uint64_t sub_1000E48EC(uint64_t result)
{
  *(_WORD *)(result + sub_1000A0380(v0, 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteViewProviderError()
{
  return &type metadata for SQLiteViewProviderError;
}

uint64_t EnumValue.type.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100019B20(v1, a1);
}

uint64_t EnumValue.init(intValue:type:)@<X0>(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 4sub_1000AC280(v0, v1, 0) = a1;
  *(void *)(a3 + 48) = 0LL;
  *(_BYTE *)(a3 + 5os_unfair_lock_lock(v0 + 6) = 1;
  return sub_100019BC4(a2, a3);
}

uint64_t EnumValue.init(stringValue:type:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 4sub_1000AC280(v0, v1, 0) = a1;
  *(void *)(a4 + 48) = a2;
  *(_BYTE *)(a4 + 5os_unfair_lock_lock(v0 + 6) = 0;
  return sub_100019BC4(a3, a4);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asInteger()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if ((*(_BYTE *)(v0 + 56) & 1) != 0)
  {
    return *(void *)(v0 + 40);
  }

  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = *(void *)(v0 + 32);
    sub_100019AFC((void *)v0, v3);
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 24);
    swift_bridgeObjectRetain(v2);
    LODWORD(sub_10005D7B4(v1, v0) = v5(v1, v2, v3, v4);
    sub_1000E4A08(v1, v2, 0);
  }

  return v0;
}